[
    {
        "number": 0,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    if len(s) % 2 == 1:\n        return -1\n    count = 0\n    for i in range(len(s)):\n        if s[i] == '[' or s[i] == ']':\n            count += 1\n        elif s[i] == ':':\n            count += 2\n        elif s[i] == '|':\n            count += 1\n    if count % 2 == 0:\n        return count\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x = input()\n    max_sum = 0\n    max_num = 0\n    for i in range(1, x+1):\n        num_sum = sum(int(digit) for digit in str(i))\n        if num_sum > max_sum:\n            max_sum = num_sum\n            max_num = i\n    return max_num\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = input()\n    year = int(N)\n    next_lucky_year = year\n    while True:\n        if sum(int(digit) != 0 for digit in str(next_lucky_year)) == 0:\n            break\n        next_lucky_year += 1\n    return next_lucky_year - year\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 3,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,q=list(map(int,input().split()))\n    sections=[]\n    for i in range(q):\n        l,r=list(map(int,input().split())\n        sections.append((l,r))\n    sections.sort(key=lambda x:x[0])\n    count=0\n    for i in range(q-2):\n        count+=sections[i][1]-sections[i][0]+1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 4,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x=int(input())\n    hh,mm=map(int,input_string.split())\n    if mm-x<0:\n        hh-=1\n        mm+=60\n    y=0\n    while True:\n        if str(7) in str(hh) or str(7) in str(mm):\n            return y\n        mm-=x\n        if mm<0:\n            hh-=1\n            mm+=60\n        y+=1\n        if hh==-1:\n            hh=23\n        if hh==0 and mm==0:\n            return y\n        hh-=1\n        mm+=60\n        if hh==-1:\n            hh=23\n        if hh==0 and mm==0:\n            return y\n        hh-=1\n        mm+=60\n        y+=1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 5,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,p,l,r=map(int,input().split())\n    if p<l:\n        return abs(p-l)+abs(r-p)\n    elif p>r:\n        return abs(p-r)+abs(r-l)\n    else:\n        return abs(r-l)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 6,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, x = list(map(int, input().split()))\n    d = []\n    h = []\n    for i in range(n):\n        d.append(list(map(int, input().split()))[0])\n        h.append(list(map(int, input().split()))[1])\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 7,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    days = 0\n    grains = n\n    sparrows = 0\n    while grains > 0:\n        days += 1\n        if grains + m > n:\n            grains = n\n        else:\n            grains += m\n        sparrows += 1\n        if sparrows > grains:\n            sparrows = grains\n        grains -= sparrows\n    return days\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 8,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = input().split()\n    suits = {'m': 0, 'p': 0, 's': 0}\n    for i in a:\n        suits[i[1]] += 1\n    if suits['m'] >= 3 or suits['p'] >= 3 or suits['s'] >= 3:\n        return 0\n    elif suits['m'] >= 2 and suits['p'] >= 2 and suits['s'] >= 2:\n        return 0\n    elif suits['m'] >= 2 or suits['p'] >= 2 or suits['s'] >= 2:\n        return 1\n    else:\n        return 2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 9,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    d = int(input())\n    n, m = map(int, input().split())\n    sofas = []\n    for i in range(d):\n        x1, y1, x2, y2 = map(int, input().split())\n        sofas.append((x1, y1, x2, y2))\n    cnt_l, cnt_r, cnt_t, cnt_b = map(int, input().split())\n    for i in range(d):\n        cnt = 0\n        for j in range(d):\n            if i == j:\n                continue\n            if sofas[i][0] < sofas[j][0] and sofas[i][1] == sofas[j][1]:\n                cnt += 1\n            elif sofas[i][1] < sofas[j][1] and sofas[i][0] == sofas[j][0]:\n                cnt += 1\n            if cnt == cnt_l and cnt_r == 0 and cnt_t == 0 and cnt_b == 0:\n                return i+1\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 10,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    min_days=n//2\n    max_days=n-1\n    print(min_days,max_days)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 11,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,a,b,p,q=list(map(int,input().split()))\n    red=0\n    blue=0\n    for i in range(1,n+1):\n        if i%a==0:\n            red+=p\n        elif i%b==0:\n            blue+=q\n        elif i%a==0 and i%b==0:\n            red+=p\n            blue+=q\n    return max(red,blue)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 12,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    n = len(s)\n    max_length = 0\n    current_length = 0\n    for i in range(n):\n        if s[i] == 'G':\n            current_length += 1\n            max_length = max(max_length, current_length)\n        else:\n            current_length = 0\n    return max_length\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 13,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: map(int, input().split())\n    n, k = f()\n    main_courses = list(f())\n    courses = [[] for _ in range(n)]\n    for i in range(n):\n        t, *depends = f()\n        courses[i] = depends\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 14,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k = map(int,input().split())\n    p = list(map(int,input().split())\n    a = []\n    s = []\n    b = []\n    for i in range(k):\n        s.append(p[i])\n    for i in range(k,n):\n        a.append(p[i])\n    while a and s:\n        if a[0]<s[-1]:\n            b.append(s.pop())\n        else:\n            s.append(a.pop(0))\n    if len(b)!=n:\n        return -1\n    else:\n        return b\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 15,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b, c = list(map(int, input().split()))\n    if b == a:\n        return \"YES\"\n    elif c == 0:\n        return \"NO\"\n    else:\n        if (b - a) % c == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 16,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = int(input())\n    b = int(input())\n    c = int(input())\n    d = int(input())\n    if a == 0 and b == 0 and c == 0 and d == 0:\n        return 1\n    elif a == 0 and b == 0 and c == 0 and d == 1:\n        return 0\n    elif a == 0 and b == 0 and c == 1 and d == 0:\n        return 1\n    elif a == 0 and b == 1 and c == 0 and d == 0:\n        return 1\n    elif a == 0 and b == 1 and c == 1 and d == 0:\n        return 0\n    elif a == 1 and b == 0 and c == 0 and d == 0:\n        return 1\n    elif a == 1 and b == 0 and c == 0 and d == 1:\n        return 0\n    elif a == 1 and b == 0 and c == 1 and d == 0:\n        return 0\n    elif a == 1 and b == 1 and c == 0 and d == 0:\n        return 0\n    elif a == 1 and b == 1 and c == 1 and d == 0:\n        return 0\n    elif a == 0 and b == 0 and c == 0 and d == 2:\n        return 0\n    elif a == 0 and b == 0 and c == 2 and d == 0:\n        return 0\n    elif a == 0 and b == 1 and c == 0 and d == 1:\n        return 0\n    elif a == 0 and b == 1 and c == 1 and d == 1:\n        return 0\n    elif a == 1 and b == 0 and c == 0 and d == 1:\n        return 0\n    elif a == 1 and b == 0 and c == 1 and d == 1:\n        return 0\n    elif a == 1 and b == 1 and c == 0 and d == 1:\n        return 0\n    elif a == 1 and b == 1 and c",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 17,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k, t = map(int, input().split())\n    standing = 0\n    for i in range(1, n+1):\n        if i <= t <= i+k:\n            standing += 1\n        elif i+k < t <= i+2*k:\n            standing += 1\n        elif i+2*k < t <= i+k:\n            standing -= 1\n    return standing\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 18,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    t=\"\"\n    u=\"\"\n    for i in range(len(s)):\n        t+=s[0]\n        s=s[1:]\n        u+=s[-1]\n        s=s[:-1]\n    return u\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 19,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    for i in range(n):\n        p, c = map(int, input().split())\n        if i == 0:\n            p_prev, c_prev = p, c\n        else:\n            if p < p_prev or c < c_prev:\n                return \"NO\"\n            p_prev, c_prev = p, c\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 20,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=input().split(\\\":\\\")\n    if int(a)<10:\n        a=\"0\"+a\n    if int(b)<10:\n        b=\"0\"+b\n    if a==a[::-1] and b==b[::-1]:\n        return 0\n    elif a==a[::-1]:\n        return 60-int(b)\n    elif b==b[::-1]:\n        return 60-int(a)\n    else:\n        return 120-int(a)-int(b)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 21,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    min_index = a.index(min(a))\n    max_index = a.index(max(a))\n    return max(abs(min_index - 0), abs(n - 1 - max_index))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 22,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    n = len(s)\n    for i in range(n//2):\n        if s[i] != s[n-i-1]:\n            return \"NIE\"\n    return \"TAK\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 23,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = list(input())\n    a.sort(reverse=True)\n    return ''.join(a)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 24,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    cells = [list(input()) for _ in range(10)]\n    for i in range(10):\n        for j in range(10):\n            if cells[i][j] == '.':\n                cells[i][j] = 'X'\n                if check_win(cells, 'X'):\n                    return 'YES'\n                cells[i][j] = 'O'\n                if check_win(cells, 'O'):\n                    return 'YES'\n                cells[i][j] = '.'\n    return 'NO'\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 25,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, K = map( int, input().split() )\n    if K > N*N:\n        return -1\n    matrix = []\n    for i in range(N):\n        row = [0]*N\n        matrix.append(row)\n    for i in range(K):\n        matrix[i//N][i%N] = 1\n    for i in range(N-1, -1, -1):\n        for j in range(i-1, -1, -1):\n            matrix[i][j] = 1\n    for i in range(N):\n        for j in range(i+1, N):\n            matrix[i][j] = 1\n    for i in range(N):\n        for j in range(i+1, N):\n            matrix[j][i] = 1\n    for i in range(N):\n        for j in range(i+1, N):\n            if matrix[i][j] == 0:\n                matrix[i][j] = 1\n                matrix[j][i] = 1\n                break\n    for row in matrix:\n        print(\" \".join(map(str, row))\n    return matrix\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 26,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x,y,z = map(Decimal, input().split())\n    a = [x**y**z, x**z**y, (x**y)**z, (x**z)**y, y**x**z, y**z**x, (y**x)**z, (y**z)**x, z**x**y, z**y**x, (z**x)**y, (z**y)**x]\n    max_value = max(a)\n    index = a.index(max_value) + 1\n    if index == 1:\n        return f\"x^{y}^{z}\"\n    elif index == 2:\n        return f\"x^{z}^{y}\"\n    elif index == 3:\n        return f\"(x^{y})^{z}\"\n    elif index == 4:\n        return f\"(x^{z})^{y}\"\n    elif index == 5:\n        return f\"y^{x}^{z}\"\n    elif index == 6:\n        return f\"y^{z}^{x}\"\n    elif index == 7:\n        return f\"(y^{x})^{z}\"\n    elif index == 8:\n        return f\"(y^{z})^{x}\"\n    elif index == 9:\n        return f\"z^{x}^{y}\"\n    elif index == 10:\n        return f\"z^{y}^{x}\"\n    elif index == 11:\n        return f\"(z^{x})^{y}\"\n    else:\n        return f\"(z^{y})^{x}\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 27,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    return len(s)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 28,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    files = []\n    for i in range(n):\n        files.append(input().split())\n    files.sort(key=lambda x: x[1])\n    examples = [file for file in files if file[1] == '1']\n    tests = [file for file in files if file[1] == '0']\n    script = []\n    for i in range(len(examples)):\n        script.append(f\"move {examples[i][0]} {i+1}\")\n    for i in range(len(tests)):\n        script.append(f\"move {tests[i][0]} {i+len(examples)+1}\")\n    print(len(script))\n    for line in script:\n        print(line)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 29,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x=int(input())\n    if x<10000:\n        return 0\n    else:\n        return 1\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 30,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    m,x=map(int,input().split())\n    gcd=math.gcd(x,m)\n    if gcd==1:\n        return m\n    else:\n        return m//gcd\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 31,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    A = 1\n    B = 1\n    for i in range(2, k+1):\n        A = (A * (2**n - i) * i) % (10**6 + 3)\n        B = (B * (2**n) * (2**n - 1) // i) % (10**6 + 3)\n    return A, B\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 32,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    directions = input_string.split('\\n')\n    x, y = 0, 0\n    for i in range(n):\n        t, dir = directions[i].split()\n        t = int(t)\n        if dir == \"North\":\n            y += t\n        elif dir == \"South\":\n            y -= t\n        elif dir == \"East\":\n            x += t\n        elif dir == \"West\":\n            x -= t\n        if x < 0 or y < 0 or x > 400000 or y > 40000:\n            return \"NO\"\n    if x == 0 and y == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 33,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a1,b1,a2,b2,l,r=list(map(int,input().split()))\n    count=0\n    for i in range(l,r+1):\n        if i==a1*k+b1 and i==a2*l+b2:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 34,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,a,b = [int(x) for x in input().split()]\n    if a+b<n:\n        return 0\n    else:\n        return max(a,b)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 35,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    flag = []\n    for i in range(n):\n        flag.append(list(input()))\n    if n % 3 != 0 or m % 3 != 0:\n        return \"NO\"\n    for i in range(0, n, 3):\n        for j in range(0, m, 3):\n            if flag[i][j] == flag[i][j+1] == flag[i][j+2] == flag[i+1][j] == flag[i+1][j+1] == flag[i+1][j+2] == flag[i+2][j] == flag[i+2][j+1] == flag[i+2][j+2]:\n                continue\n            else:\n                return \"NO\"\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 36,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    x=0\n    y=0\n    for i in range(n):\n        if i%2==0:\n            if i%4==0:\n                x+=1\n            else:\n                y+=1\n        else:\n            if i%4==0:\n                x-=1\n            else:\n                y-=1\n    print(x,y)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 37,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c=map(int,input().split())\n    if c<=a:\n        print(\"Yes\")\n    elif c<=a+b:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 38,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    q,w=list(map(int,input().split()))\n    kefa=list(map(int,input().split())\n    sasha=list(map(int,input().split())\n    if kefa==sasha:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 39,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    max_len = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i:j] == s[i:j][::-1]:\n                continue\n            else:\n                max_len = max(max_len, j-i)\n    return max_len\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 40,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    ratings = []\n    for i in range(N):\n        a, b = map(int, input().split())\n        ratings.append((a, b))\n    if ratings[0][0] != ratings[0][1]:\n        return \"rated\"\n    for i in range(1, N):\n        if ratings[i][0] != ratings[i][1]:\n            return \"rated\"\n        if ratings[i][0] > ratings[i-1][0] and ratings[i][1] < ratings[i-1][1]:\n            return \"rated\"\n    return \"unrated\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 41,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input_string.split()))\n    zero_index=a.index(0)\n    distance=[]\n    for i in range(n):\n        if a[i]!=0:\n            distance.append(abs(i-zero_index))\n        else:\n            distance.append(0)\n    return distance\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 42,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=input()\n    count=0\n    for i in range(n):\n        if s in input_string[i:]+input_string[:i]:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 43,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x, y = map(int, input().split())\n    vectors = []\n    for i in range(x):\n        xi, yi = map(int, input().split())\n        vectors.append((xi, yi))\n    min_angle = 180\n    min_pair = (1, 2)\n    for i in range(x):\n        for j in range(i+1, x):\n            angle = angle_between(vectors[i], vectors[j])\n            if angle < min_angle:\n                min_angle = angle\n                min_pair = (i+1, j+1)\n    return min_pair\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 44,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    d, k, a, b, t = map(int, input().split())\n    if d <= k:\n        return d * a\n    else:\n        return (d // k) * a + (d % k) * b + t\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 45,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    if n < k:\n        return -1\n    if k == 1:\n        return 1\n    if n % k == 0:\n        return \" \".join(str(i) for i in range(1, k+1))\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 46,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    count=0\n    for i in range(1,n+1):\n        for j in range(1,m+1):\n            if (i+j)%5==0:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 47,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, x = map(int, input().split())\n    a = list(map(int, input().split()))\n    max_sum = 0\n    current_sum = 0\n    for i in range(n):\n        current_sum += a[i]\n        if current_sum < 0:\n            current_sum = 0\n        max_sum = max(max_sum, current_sum)\n    return max_sum * x\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 48,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    m, n, k = list(map(int, input().split()))\n    table = []\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            table.append(i*j)\n    table.sort()\n    return table[k-1]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 49,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k=int(input())\n    count=0\n    for i in range(1,10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 50,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, r = list(map(int, input().split()))\n    s = list(map(int, input().split())\n    b = list(map(int, input().split())\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 52,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f=n=int(input())\n    if n<=10:\n        print(n)\n    else:\n        for i in range(1,n+1):\n            if i%2==0:\n                print(i)\n            else:\n                continue\nsolution(input())\n# End your code here\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 53,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r = lambda: list(map(int, input().split()))\n    n = int(input())\n    s = input()\n    b = r()\n    m = len(s)\n    s = sorted(s)\n    t = s[::-1]\n    for i in range(m//2):\n        if s[i] == t[i]:\n            s[i], t[i] = s[i+1], t[i+1]\n    return sum(b[i] for i in range(m) if s[i] != t[i])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 54,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    w,m=map(int,input().split())\n    if m%w==0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 55,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    if n == 1:\n        return \"Yes\\n-1 -1\"\n    if n == 2:\n        return \"No\"\n    if n % 2 == 1:\n        return \"No\"\n    else:\n        return \"Yes\\n\" + \" \".join(str(k-1) for i in range(k))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 56,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,t = [int(x) for x in input().split()]\n    full_glasses = 0\n    for i in range(t):\n        if i < n:\n            full_glasses += 1\n        elif i == n:\n            full_glasses += 2\n        else:\n            full_glasses += 2\n    return full_glasses\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 57,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    points = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        points.append((x, y))\n    area = None\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                for l in range(k+1, n):\n                    for m in range(l+1, n):\n                        p1, p2, p3, p4 = points[i], points[j], points[k], points[l]\n                        if p1[0] == p2[0] == p3[0] == p4[0] or p1[1] == p2[1] == p3[1] == p4[1]:\n                            continue\n                        if p1[0] == p3[0] and p2[0] == p4[0] and p1[1] == p2[1] == p3[1]:\n                            area = abs((p1[0]-p2[0])*(p3[1]-p2[1]) - (p1[1]-p2[1])*(p3[0]-p2[0]))\n                            break\n                        elif p1[0] == p2[0] and p3[0] == p4[0] and p1[1] == p3[1] == p4[1]:\n                            area = abs((p1[0]-p3[0])*(p2[1]-p3[1]) - (p1[1]-p3[1])*(p2[0]-p3[0]))\n                            break\n                        elif p2[0] == p3[0] and p1[0] == p4[0] and p2[1] == p3[1] == p4[1]:\n                            area = abs((p2[0]-p1[0])*(p3[1]-p1[1]) - (p2[1]-p1[1])*(p3[0]-p1[0]))\n                            break\n                        elif p1[0] == p",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 58,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    [n,a,b],r,i,j=[int(input())for x in range(3)],6,4,5\n    while r>0:\n        if n%i==0:\n            if n//i>=a+b:\n                return i\n        i-=1\n        j-=1\n    return j\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 59,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    swaps = input_string\n    swaps = list(swaps)\n    for i in range(n-1):\n        if swaps[i] == '0' and a[i] > a[i+1]:\n            return 'NO'\n    return 'YES'\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 60,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    n, c = int(s[0]), s[1]\n    if c == 'a':\n        return (n-1)//2\n    elif c == 'b':\n        return (n-1)//2 + 1\n    elif c == 'c':\n        return (n-1)//2 + 2\n    elif c == 'd':\n        return (n-1)//2 + 2 + 1\n    elif c == 'e':\n        return (n-1)//2 + 3\n    else:\n        return (n-1)//2 + 3 + 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 61,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, b = list(map(int, input().split()))\n    x = list(map(int, input().split())\n    m, b = list(map(int, input().split())\n    y = list(map(int, input().split())\n    x_num = 0\n    y_num = 0\n    for i in range(n):\n        x_num += x[i]*b**(n-1-i)\n    for i in range(m):\n        y_num += y[i]*b**(m-1-i)\n    if x_num < y_num:\n        return '<'\n    elif x_num > y_num:\n        return '>'\n    else:\n        return '='\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 62,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    if n==1:\n        return \"BitLGM\"\n    elif n==2:\n        if a[0]>a[1]:\n            return \"BitLGM\"\n        else:\n            return \"BitAryo\"\n    else:\n        if a[0]>a[1]:\n            return \"BitLGM\"\n        else:\n            return \"BitAryo\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 63,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k = [int(x) for x in input().split()]\n    deck = [int(x) for x in input().split()]\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if (n-i)*deck[i]*deck[j]%k == 0:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 64,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = [int(i) for i in input().split()]\n    s = input()\n    if len(s) % k != 0:\n        return \"NO\"\n    else:\n        return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 65,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input_string.split()))\n    min_index = a.index(min(a)\n    min_index2 = a.index(min(a, min_index+1)\n    return min(abs(min_index2-min_index), abs(min_index-min_index2))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 66,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l, n, m = map(int, input().split())\n    p = 0\n    q = 0\n    for i in range(1, l+1):\n        if i % n == 0 and i % m == 0:\n            p += 1\n        elif i % n == 0 or i % m == 0:\n            q += 1\n    return f\"{p}/{q}\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 67,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x, y, z = map(int, input().split())\n    if x > y:\n        return \"-\"\n    elif y > x:\n        return \"+\"\n    elif x == y:\n        return \"0\"\n    else:\n        return \"?\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 68,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    operations=input()\n    x,y=map(int,input().split())\n    if x==0 and y==0:\n        return 0\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 69,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,x=map(int,input().split())\n    s=input()\n    count=0\n    for i in range(n):\n        if s.count('0')-s.count('1')==x:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 70,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=input().split()\n    n=int(n)\n    k=int(k)\n    n=str(n)\n    count=0\n    for i in range(len(n)-1,-1,-1):\n        if n[i]!='0':\n            break\n        count+=1\n    n=n[count:]\n    if len(n)%k!=0:\n        n=n[:-len(n)%k]\n    return count+len(n)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 71,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k, x, y = list(map(int, input().split()))\n    max_questions = 0\n    min_questions = k\n    sergei_questions = 0\n    for i in range(1, n+1):\n        if i == x:\n            max_questions += y\n            min_questions += 1\n            sergei_questions += 1\n        else:\n            max_questions += m\n            min_questions += 1\n    if k > n*m:\n        max_questions += k - n*m\n        min_questions = 1\n    elif k < n*m:\n        max_questions = k\n    return max_questions, min_questions, sergei_questions\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 72,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    Kuro = input()\n    Shiro = input()\n    Katie = input()\n    return \"Kuro\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 73,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    c, v0, v1, a, l = map(int, input().split())\n    if v0 > v1:\n        return 0\n    if a == 0:\n        return c // v0\n    else:\n        days = 1\n        while v0 + a * days <= v1:\n            days += 1\n        return days\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 74,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x = int(input())\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            for k in range(j+1, len(primes)):\n                if primes[i] + primes[j] + primes[k] == x:\n                    print(3)\n                    print(primes[i], primes[j], primes[k])\n                    return\n    print(2)\n    print(primes[0], x-primes[0])\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 75,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    row,col = list(map(int,input().split()))\n    grid = []\n    for i in range(row):\n        grid.append(list(input()))\n    for i in range(row):\n        for j in range(col):\n            if grid[i][j] == '*':\n                if i == 0 or i == row-1 or j == 0 or j == col-1:\n                    return \"NO\"\n                else:\n                    for k in range(i-1,i+2):\n                        for l in range(j-1,j+2):\n                            if grid[k][l] == '*':\n                                return \"NO\"\n    return \"YES\"\n    for i in range(row):\n        for j in range(col):\n            if grid[i][j] == '.':\n                return f\"YES\\n{i+1} {j+1}\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 76,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,a,b=list(map(int,input().split()))\n    if n%m==0:\n        return 0\n    else:\n        return (m-n%m)*a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 77,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    max_sum = 0\n    current_sum = 0\n    for i in range(n):\n        current_sum += a[i]\n        if current_sum % 2 == 1:\n            max_sum = max(max_sum, current_sum)\n        else:\n            current_sum = 0\n    return max_sum\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 78,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, T = map(int, input().split())\n    songs = []\n    for i in range(N):\n        songs.append(list(map(int, input().split()))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 79,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    m = int(input())\n    P = 0\n    Q = 1\n    while True:\n        x = random.randint(1, m)\n        a.append(x)\n        gcd = 1\n        for i in range(len(a)-1):\n            gcd = math.gcd(gcd, a[i])\n            if gcd == 1:\n                break\n        if gcd == 1:\n            break\n        else:\n            a.pop()\n            P += 1\n            Q *= len(a)\n    return (P*pow(Q, 10000000000008, 1000000000007)) % 1000000000007\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 80,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l,r,x,y=list(map(int,input().split()))\n    count=0\n    for i in range(l,r+1):\n        for j in range(l,r+1):\n            if i!=j and math.gcd(i,j)==x and math.lcm(i,j)==y:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 81,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b = list(map(int, input().split()))\n    lcm = lambda x, y: x * y // gcd(x, y)\n    gcd = lambda x, y: x if y == 0 else gcd(y, x % y)\n    k = 0\n    while True:\n        if lcm(a + k, b + k) == lcm(a, b):\n            return k\n        k += 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 82,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    marks = list(map(int, input().split()))\n    marks.sort()\n    total_marks = sum(marks)\n    if total_marks < k * n:\n        return k * n - total_marks\n    else:\n        return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 83,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input_string.split()))\n    count=0\n    for i in range(n):\n        if a[i]>0:\n            count+=1\n    if count>=n//2:\n        return 1\n    else:\n        return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 84,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    count = 0\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            if str(i+j)[-1] == '9':\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 85,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=list(map(int,input().split()))\n    c,d=list(map(int,input().split())\n    if a*b==c*d:\n        print(0)\n        print(a,b)\n        print(c,d)\n        return\n    if a==b or c==d:\n        print(-1)\n        return\n    if a*b<c*d:\n        a,b,c,d=c,d,a,b\n    if a%3==0 and b%3==0:\n        print(a//3+c//3)\n        print(a//3,b)\n        print(c//3,d)\n    elif a%2==0 and b%2==0:\n        print(a//2+c//2)\n        print(a//2,b)\n        print(c//2,d)\n    else:\n        print(-1)\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 86,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    xp, yp, xv, yv = list(map(int, input().split()))\n    if xp == 0 and yp == 0:\n        return \"Vasiliy\"\n    elif xv == 0 and yv == 0:\n        return \"Polycarp\"\n    elif xp == xv and yp == yv:\n        return \"Polycarp\"\n    elif abs(xp - xv) + abs(yp - yv) <= 2:\n        return \"Polycarp\"\n    else:\n        return \"Vasiliy\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 87,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    m, d = map(int, input().split())\n    if m in [1, 3, 5, 7, 8, 10, 12]:\n        return 5\n    elif m in [4, 6, 9, 11]:\n        return 4\n    else:\n        return 6\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 88,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b = list(map(int, input().split()))\n    count = 0\n    for i in range(a, b+1):\n        if bin(i).count('0') == 1:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 89,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    layers = 0\n    for i in range(1, n+1):\n        layers += i\n    return layers\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 90,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, K, S = list(map( int, input().split() ))\n    A = list(map(int, input().split())\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 91,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n,k=map(int,input().split())\n        a=list(map(int,input().split())\n        v=[0]*n\n        for i in range(n):\n            v[i]=0\n        for i in range(n):\n            if a[i]==0:\n                continue\n            else:\n                for j in range(n):\n                    if v[j]==a[i]:\n                        continue\n                    else:\n                        v[j]+=k**i\n                        if v[j]==a[i]:\n                            break\n                else:\n                    print(\"NO\")\n                    continue\n        print(\"YES\")\n# End your code here\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 92,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c=[int(x) for x in input().split(' ')]\n    total=0\n    for i in range(1,a+1):\n        for j in range(1,b+1):\n            for k in range(1,c+1):\n                total+=len(list(set(list(str(i*j*k)))[:-1])\n    return total%1073741824\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 93,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = input()\n    b = input()\n    c = input()\n    d = input()\n    if a[0] == b[0] and a[1] == d[0] and b[1] == c[0] and c[1] == d[1]:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 94,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=input()\n    k=input()\n    return int(k,n)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 95,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    arr = list(map(int, input_string.split()))\n    if n == 1:\n        return \"YES\"\n    if n == 2:\n        return \"YES\" if arr[0] <= arr[1] or arr[0] >= arr[1] else \"NO\"\n    if arr[0] > arr[1]:\n        return \"NO\"\n    for i in range(2, n):\n        if arr[i] < arr[i-1]:\n            break\n    else:\n        i = n\n    for j in range(n-1, i, -1):\n        if arr[j] < arr[j-1]:\n            break\n    else:\n        j = 0\n    return \"YES\" if i == j else \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 96,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b = input().split()\n    a, b = int(a), int(b)\n    path = []\n    for i in range(1, a+1):\n        x = i\n        while x != 1:\n            if x % 2 == 0:\n                x //= 2\n            else:\n                x -= 1\n            path.append(x)\n    count = {}\n    for i in range(len(path)):\n        if path[i] not in count:\n            count[path[i]] = 1\n        else:\n            count[path[i]] += 1\n    for key in count:\n        if count[key] >= b:\n            return key\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 97,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    [n, m, x, y, vx, vy] = list(map(int, input().strip().split()))\n    if vx == 0:\n        vx = 1\n    if vy == 0:\n        vy = 1\n    if vx == 0:\n        vx = 1\n    if vy == 0:\n        vy = 1\n    if vx == 0:\n        vx = 1\n    if vy == 0:\n        vy = 1\n    if vx == 0:\n        vx = 1\n    if vy == 0:\n        vy = 1\n    if vx == 0:\n        vx = 1\n    if vy == 0:\n        vy = 1\n    if vx == 0:\n        vx = 1\n    if vy == 0:\n        vy = 1\n    if vx == 0:\n        vx = 1\n    if vy == 0:\n        vy = 1\n    if vx == 0:\n        vx = 1\n    if vy == 0:\n        vy = 1\n    if vx == 0:\n        vx = 1\n    if vy == 0:\n        vy = 1\n    if vx == 0:\n        vx = 1\n    if vy == 0:\n        vy = 1\n    if vx == 0:\n        vx = 1\n    if vy == 0:\n        vy = 1\n    if vx == 0:\n        vx = 1\n    if vy == 0:\n        vy = 1\n    if vx == 0:\n        vx = 1\n    if vy == 0:\n        vy = 1\n    if vx == 0:\n        vx = 1\n    if vy == 0:\n        vy = 1\n    if vx == 0:\n        vx = 1\n    if vy == 0:\n        vy = 1\n    if vx == 0:\n        vx = 1\n    if vy == 0:\n        vy = 1\n    if vx == 0:\n        vx = 1\n    if vy == 0:\n        vy = 1\n    if v",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 98,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r=lambda: map(int, input().split())\n    a1,b1=r()\n    a2,b2,a3,b3=r()\n    if a1>=a2 and b1>=b2 and a1>=a3 and b1>=b3:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 99,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R=lambda:list(map(int,input().split()))\n    b_1,q,l,m=R()\n    bad_nums=R()\n    count=0\n    while abs(b_1)<=l:\n        if b_1 not in bad_nums:\n            count+=1\n        b_1=b_1*q\n    if count==0:\n        print(\"inf\")\n    else:\n        print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 100,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    mon = [list(input()) for _ in range(n)]\n    n, m = map(int, input().split())\n    for i in range(n):\n        for j in range(m):\n            if mon[i][j] == 'w':\n                mon[i][j] = '+'\n            else:\n                mon[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if mon[i][j] == '+':\n                if i == 0 or i == n-1 or j == 0 or j == m-1:\n                    mon[i][j] = 'w'\n    for i in range(n):\n        for j in range(m):\n            if mon[i][j] == '+':\n                mon[i][j] = 'w'\n    for i in range(n):\n        for j in range(m):\n            if mon[i][j] == 'w':\n                mon[i][j] = '+'\n    for i in range(n):\n        for j in range(m):\n            if mon[i][j] == '+':\n                mon[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if mon[i][j] == '+':\n                mon[i][j] = 'w'\n    for i in range(n):\n        for j in range(m):\n            if mon[i][j] == 'w':\n                mon[i][j] = '+'\n    for i in range(n):\n        for j in range(m):\n            if mon[i][j] == '+':\n                mon[i][j] = 'w'\n    for i in range(n):\n        for j in range(m):\n            if mon[i][j] == '+':\n                mon[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if mon[i][j] == 'w':\n                mon[i][j] = '+'\n    for i in range(n):\n        for j in range(m):\n            if mon[i][j] == '+':\n                mon[",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 101,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = int(input())\n    b = int(input())\n    if n % gcd(a, b) != 0:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        x = n // a\n        y = n // b\n        print(x, y)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 102,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n == 0:\n        return \"zero\"\n    elif n == 1:\n        return \"one\"\n    elif n == 2:\n        return \"two\"\n    elif n == 3:\n        return \"three\"\n    elif n == 4:\n        return \"four\"\n    elif n == 5:\n        return \"five\"\n    elif n == 6:\n        return \"six\"\n    elif n == 7:\n        return \"seven\"\n    elif n == 8:\n        return \"eight\"\n    elif n == 9:\n        return \"nine\"\n    elif n == 10:\n        return \"ten\"\n    elif n == 11:\n        return \"eleven\"\n    elif n == 12:\n        return \"twelve\"\n    elif n == 13:\n        return \"thirteen\"\n    elif n == 14:\n        return \"fourteen\"\n    elif n == 15:\n        return \"fifteen\"\n    elif n == 16:\n        return \"sixteen\"\n    elif n == 17:\n        return \"seventeen\"\n    elif n == 18:\n        return \"eighteen\"\n    elif n == 19:\n        return \"nineteen\"\n    elif n == 20:\n        return \"twenty\"\n    elif n == 30:\n        return \"thirty\"\n    elif n == 40:\n        return \"forty\"\n    elif n == 50:\n        return \"fifty\"\n    elif n == 60:\n        return \"sixty\"\n    elif n == 70:\n        return \"seventy\"\n    elif n == 80:\n        return \"eighty\"\n    elif n == 90:\n        return \"ninety\"\n    elif n == 100:\n        return \"one-hundred\"\n    elif n == 200:\n        return \"two-hundred\"\n    elif n == 300:\n        return \"three-hundred\"\n    elif n == 400:\n        return \"four-hundred\"",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 103,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    max_erase = 0\n    for i in range(n):\n        if i == 0 or i == n-1:\n            continue\n        if a[i] == a[i-1]+1 and a[i] == a[i+1]-1:\n            max_erase += 1\n        elif a[i] == a[i-1]+2 and a[i] == a[i+1]-2:\n            max_erase += 2\n        elif a[i] == a[i-1]+3 and a[i] == a[i+1]-3:\n            max_erase += 3\n        elif a[i] == a[i-1]+4 and a[i] == a[i+1]-4:\n            max_erase += 4\n    return max_erase\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 104,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    total_problems = sum(a)\n    count = 0\n    for i in range(n):\n        count += a[i]\n        if count >= total_problems/2:\n            return i+1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 105,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    board=[]\n    for i in range(n):\n        row=list(map(int,input().split())\n        board.append(row)\n    return 0,0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 107,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    if len(s) % 6 == 0:\n        return \"yes\"\n    else:\n        return \"no\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 108,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for i in range(len(s)):\n        if s[i] in alphabet:\n            continue\n        else:\n            for j in range(ord(s[i])+1, ord('z')+1):\n                if chr(j) in alphabet:\n                    s = s[:i] + chr(j) + s[i+1:]\n                    break\n                elif j == ord('z'):\n                    return \"-1\"\n    return s\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 109,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, r, k = map(int, input().split())\n    if k > n*m:\n        return 0\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 110,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    a.sort()\n    if a[0]<0:\n        a[0]=-a[0]\n    for i in range(1,n):\n        if a[i]<0:\n            a[i]=-a[i]\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 111,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    if k > len(divisors):\n        return -1\n    else:\n        return divisors[k-1]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 112,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    cubes = []\n    for i in range(n):\n        cubes.append(list(map(int, input().split()))\n    max_num = 0\n    for i in range(1, 10**n):\n        num = ''\n        for j in range(n):\n            for k in range(6):\n                if i % 10 != 0:\n                    num += str(cubes[j][i % 10])\n                i //= 10\n        if int(num) > max_num:\n            max_num = int(num)\n    return max_num\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 113,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    if k == 0:\n        return n\n    else:\n        while n % 10**k != 0:\n            n *= 10\n        return n\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 114,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    A = []\n    for i in range(n):\n        A.append(list(map(int, input().split()))\n    B = [[0] * m for i in range(n)]\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if A[i][j] == 1:\n                B[i][j] = 1\n                k += 1\n                if i > 0 and j > 0:\n                    B[i-1][j-1] = 1\n                    k += 1\n                if i > 0:\n                    B[i-1][j] = 1\n                    k += 1\n                if j > 0:\n                    B[i][j-1] = 1\n                    k += 1\n    if k == n * m:\n        print(k)\n        for i in range(n):\n            for j in range(m):\n                if A[i][j] == 1:\n                    print(i, j)\n    else:\n        print(-1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 115,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r, s, p = map(int, input().split())\n    n = r + s + p\n    r_prob = (r * (r - 1) * (r - 2) * (r - 3) * (r - 4) * (r - 5) * (r - 6) * (r - 7) * (r - 8) * (r - 9) * (r - 10) * (r - 11) * (r - 12) * (r - 13) * (r - 14) * (r - 15) * (r - 16) * (r - 17) * (r - 18) * (r - 19) * (r - 20) * (r - 21) * (r - 22) * (r - 23) * (r - 24) * (r - 25) * (r - 26) * (r - 27) * (r - 28) * (r - 29) * (r - 30) * (r - 31) * (r - 32) * (r - 33) * (r - 34) * (r - 35) * (r - 36) * (r - 37) * (r - 38) * (r - 39) * (r - 40) * (r - 41) * (r - 42) * (r - 43) * (r - 44) * (r - 45) * (r - 46) * (r - 47) * (r - 48) * (r - 49) * (r - 50) * (r - 51) * (r - 52) * (r - 53) * (r - 54) * (r - 55) * (r - 56) * (r - 57) * (r - 58) * (r - 59) * (r - 60) * (r - 61) * (r - 62) * (r - 63) * (",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 116,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l1, r1, l2, r2 , k = map(int, input().split())\n    if l1 > r1 or l2 > r2 or k > r1 or k > r2:\n        return 0\n    if l1 > r2 or l2 > r1:\n        return 0\n    if k < l1 or k > r2:\n        return 0\n    if l1 <= k <= r1 and l2 <= k <= r2:\n        return 0\n    if l1 <= k < l2:\n        return l2 - k\n    if l2 <= k < r1:\n        return r1 - k\n    if l2 <= k <= r1 and r1 < r2:\n        return r2 - r1\n    if l1 <= k <= r2:\n        return r2 - l1\n    if l1 < l2:\n        return r2 - l2\n    if r1 < l2:\n        return r1 - l1\n    if l1 <= r2:\n        return r2 - l1\n    if r1 <= l2:\n        return r1 - l2\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 117,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    lines = []\n    for i in range(n):\n        lines.append(list(map(int, input().split())) + [0])\n    for j in range(m):\n        lines.append(list(map(int, input().split()) + [1]) + [2])\n    lines.sort(key=lambda x: (x[2], x[3]))\n    lines.sort(key=lambda x: (x[0], x[1], x[2], x[3]))\n    area = 0\n    for i in range(len(lines)):\n        for j in range(i+1, len(lines)):\n            if lines[i][3] == lines[j][3]:\n                if lines[i][2] == lines[j][2]:\n                    if lines[i][0] < lines[j][0] and lines[i][1] < lines[j][1]:\n                        area += (lines[j][0] - lines[i][0]) * (lines[j][1] - lines[i][1])\n                elif lines[i][2] < lines[j][2]:\n                    area += (lines[j][2] - lines[i][2]) * (lines[j][1] - lines[i][1])\n            elif lines[i][3] < lines[j][3]:\n                area += (lines[j][2] - lines[i][2]) * (lines[j][3] - lines[i][3])\n    if area == 0:\n        return \"INF\"\n    else:\n        return area\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 118,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t, s, x = list(map(int, input().split()))\n    if x % s == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 119,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    segments=[]\n    for i in range(n):\n        l,r=map(int,input().split())\n        segments.append([l,r])\n    for i in range(n):\n        for j in range(n):\n            if segments[i][0]>=segments[j][0] and segments[i][1]<=segments[j][1]:\n                print(i+1,j+1)\n                return\n    print(-1,-1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 120,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    if s.count('?') == 0:\n        return s\n    elif s.count('A') == s.count('C') == s.count('G') == s.count('T'):\n        return s\n    else:\n        return \"===\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 121,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=[input() for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            if a[i][j]=='.':\n                a[i]=a[i][:j]+'x'+a[i][j+1:]\n                if check(a)=='x':\n                    return 'YES'\n                a[i]=a[i][:j]+'.'+a[i][j+1:]\n                if check(a)=='x':\n                    return 'YES'\n                a[i]=a[i][:j]+'o'+a[i][j+1:]\n                if check(a)=='x':\n                    return 'YES'\n                a[i]=a[i][:j]+'.'+a[i][j+1:]\n                a[i]=a[i][:j]+'o'+a[i][j+1:]\n                if check(a)=='o':\n                    return 'YES'\n                a[i]=a[i][:j]+'.'+a[i][j+1:]\n                if check(a)=='o':\n                    return 'YES'\n    return 'NO'\ndef check(a):\n    for i in range(4):\n        if a[i].count('x')==3 or ''.join(a[i]).count('x')==3 or ''.join([a[j][i] for j in range(4)])=='xxxx' or ''.join([a[j][i] for j in range(4)])=='oooo':\n            return 'x'\n        if a[i].count('o')==3 or ''.join(a[i]).count('o')==3 or ''.join([a[j][i] for j in range(4)])=='oooo' or ''.join([a[j][i] for j in range(4)])=='xxxx':\n            return 'o'\n    for i in range(4):\n        if ''.join([a[j][i] for j in range(4)])=='x'*4 or ''.join([a[j][i] for j in range(4)])=='o'*4:\n            return 'x' if '",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 122,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if sum(a[:n//2]) == sum(a[n//2:]):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 123,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    I = lambda: list(map(int, input().split()))\n    n, k = I()\n    a = I()\n    b = I()\n    b_set = set(b)\n    if len(b_set) != len(b):\n        return \"No\"\n    for i in range(n):\n        if a[i] == 0:\n            a[i] = b.pop(0)\n    for i in range(n-1):\n        if a[i] >= a[i+1]:\n            return \"Yes\"\n    return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 124,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x,y,z=map(int,input().split())\n    a,b,c=map(int,input().split())\n    if x<=a and y+b<=a+b+c and z<=a+b+c:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 125,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    p = [list(map(int, input().split())) for i in range(4)]\n    for i in range(4):\n        if p[i][3] == 1 and (p[(i+1)%4][0] == 1 or p[(i+1)%4][1] == 1 or p[(i+1)%4][2] == 1):\n            return \"YES\"\n        if p[i][0] == 1 and (p[(i+1)%4][1] == 1 or p[(i+1)%4][2] == 1):\n            return \"YES\"\n        if p[i][1] == 1 and (p[(i+1)%4][0] == 1 or p[(i+1)%4][2] == 1):\n            return \"YES\"\n        if p[i][2] == 1 and (p[(i+1)%4][0] == 1 or p[(i+1)%4][1] == 1):\n            return \"YES\"\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 126,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    input_string = input()\n    if n == 1:\n        return \"YES\"\n    elif n == 2:\n        return \"NO\"\n    else:\n        return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 127,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    read = lambda: map(int, input().split())\n    n, f = read()\n    k_l = [list(read()) for _ in range(n)]\n    k_l.sort(key=lambda x: x[1], reverse=True)\n    total = 0\n    for i in range(f):\n        total += k_l[i][0]\n    for i in range(f, n):\n        total += k_l[i][0] * 2\n    return total\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 128,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    if n == 1:\n        return 0\n    else:\n        return (n*(n-1))//2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 129,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k,l = list(map(int, input().split()))\n    if k > n:\n        return -1\n    if k+l > n:\n        return -1\n    if k+l > m:\n        return -1\n    return min(m,n-k)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 130,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    h, w = map(int, input().split())\n    matrix = [list(input()) for _ in range(h)]\n    min_black_cells = float('inf')\n    for i in range(h):\n        for j in range(w):\n            if matrix[i][j] == 'B':\n                black_cells = 0\n                for k in range(i, h):\n                    if matrix[k][j] == 'B':\n                        black_cells += 1\n                    else:\n                        break\n                for l in range(j, w):\n                    if matrix[i][l] == 'B':\n                        black_cells += 1\n                    else:\n                        break\n                min_black_cells = min(min_black_cells, black_cells)\n    if min_black_cells == float('inf'):\n        print(-1)\n    else:\n        print(min_black_cells)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 131,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    x = list(map(int, input().split()))\n    y = list(map(int, input().split()))\n    for i in range(n):\n        if x[i] != y[i]:\n            return \"No\"\n    return \"Yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 132,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(sum(a[i:j+1]) - sum(a[:i]))\n            min_diff = min(min_diff, diff)\n    return min_diff\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 133,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    mod = 10**9 + 7\n    dp = [1] * n\n    for i in range(1, m):\n        new_dp = [0] * n\n        for j in range(n):\n            for k in range(n):\n                new_dp[k] += dp[j]\n                new_dp[k] %= mod\n        dp = new_dp\n    return dp[0]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 134,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i**2 + j**2 == (n**2):\n                print(i, j)\n                break\n    else:\n        print(-1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 135,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k = list(map(int,input().split()))\n    remainders = set()\n    for i in range(1,k+1):\n        remainders.add(n%i)\n    if len(remainders) == k:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 136,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = input()\n    b = input()\n    if a < b:\n        print(\"<\")\n    elif a > b:\n        print(\">\")\n    else:\n        print(\"=\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 137,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,p=list(map(int,input().split()))\n    c=list(map(int,input().split())\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 138,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,a,b,c=[int(i) for i in input().split()]\n    if n%4==0:\n        return 0\n    elif n%2==0:\n        return (4-n)//2*a\n    else:\n        return (4-n)//2*a+(4-n)%2*b\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 139,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = [int(x) for x in input().split()]\n    edges = []\n    for _ in range(m):\n        u, v = [int(x) for x in input().split()]\n        edges.append((u, v))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 140,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, l = list(map(int,input().split(' '))) + [[]]\n    for i in range(n):\n        l.append(list(map(int,input().split(' ')))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 141,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    W = int(input())\n    cnt = list(map(int, input_string.split()))\n    max_weight = 0\n    for i in range(1, 9):\n        max_weight += cnt[i] * i\n    return max_weight\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 142,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, l = map(int, input().split())\n    c = list(map(int, input().split())\n    min_cost = float('inf')\n    for i in range(n):\n        if 2**i - 1 >= l:\n            min_cost = min(min_cost, c[i] * (2**i - 1))\n    return min_cost\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 143,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    a.sort()\n    for i in range(n):\n        if a[i]!=i+1:\n            return i+1\n    return n+1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 144,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = int(input())\n    b = input()\n    b = list(b)\n    b = [int(i) for i in b]\n    b.sort()\n    b.reverse()\n    for i in range(1, len(b)):\n        if sum(b[:i]) == sum(b[i:]):\n            return \"YES\"\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 145,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print('CHAT WITH HER!' if len(set(input()))%2 == 0 else 'IGNORE HIM!')\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 146,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=[int(i) for i in input().split()]\n    tabs=list(map(int,input().split())\n    e=0\n    s=0\n    for i in range(n):\n        if tabs[i]==1:\n            e+=1\n        else:\n            s+=1\n    max_diff=abs(e-s)\n    for i in range(1,n,k):\n        if tabs[i]==1:\n            e-=1\n        else:\n            s-=1\n        max_diff=max(max_diff,abs(e-s))\n    return max_diff\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 147,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,a,b=map(int,input().split())\n    letters=[]\n    for i in range(n):\n        letters.append(input())\n    letters.sort()\n    letters.sort(key=len)\n    ans=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if letters[i]!=letters[j]:\n                ans+=min(a,b)\n            else:\n                ans+=max(a,b)\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 148,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, a, x, b, y = map(int, input().split())\n    if a == b or x == y:\n        return \"YES\"\n    elif a == y and x == b:\n        return \"YES\"\n    elif a == n and b == 1:\n        return \"YES\"\n    elif b == n and x == 1:\n        return \"YES\"\n    elif a == n and b == 1:\n        return \"YES\"\n    elif x == n and y == 1:\n        return \"YES\"\n    elif a == 1 and b == n:\n        return \"YES\"\n    elif x == 1 and y == n:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 149,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x,y,l,r=list(map(int,input().split()))\n    max_length=0\n    for i in range(l,r+1):\n        if i==x**a+y**b:\n            max_length+=1\n        else:\n            max_length=0\n    return max_length\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 150,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n == 2:\n        return 1\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 151,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    vowels=['a','e','i','o','u']\n    i=0\n    while i<len(s):\n        if s[i] not in vowels:\n            j=i+1\n            while j<len(s) and s[j] not in vowels:\n                j+=1\n            if j-i>=3:\n                s=s[:i]+' '+s[i:]\n                i+=1\n            i=j\n        i+=1\n    return s\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 152,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    (n,m,k), (x,s), a, b, c, d = (list(map(int, input().split())) for _ in range(6))\n    a, b, c, d = [list(map(int, input().split())) for _ in range(m)], [list(map(int, input().split())) for _ in range(m)], [list(map(int, input().split())) for _ in range(k)], [list(map(int, input().split())) for _ in range(k)]\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 153,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k,m = list(map(int, input().split()))\n    t = list(map(int, input().split())\n    points = 0\n    for i in range(k):\n        if sum(t[:i+1]) <= m:\n            points += i+1\n        else:\n            break\n    return points\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 154,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x = int(input())\n    if x == 1:\n        return 1\n    elif x == 2:\n        return 0\n    elif x == 3:\n        return 0\n    elif x == 4:\n        return 1\n    else:\n        return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 155,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k = list(map(int,input().split()))\n    x,y = 1,1\n    if k%2==0:\n        x = k//m+1\n        y = k%m\n    else:\n        x = k//m\n        y = k%m\n    print(x,y)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 156,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x = int(input())\n    a = 1\n    b = x\n    while b > a:\n        if x % a == 0:\n            b = x // a\n        else:\n            a += 1\n    return a, b\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 157,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c=[int(input()) for i in range(3)]\n    if a*2+b*4>c:\n        print(a+b+c//4)\n    elif a*2+b*4<c:\n        print(a+b+c//2)\n    else:\n        print(a+b+c)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 158,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    ratings=list(map(int,input().split())\n    ratings.sort(reverse=True)\n    if ratings[0]>ratings[n-1]:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 159,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    a.sort()\n    i=0\n    while i<n:\n        if a[i]==1:\n            i+=1\n        elif a[i]>1:\n            j=2\n            while j<=a[i]:\n                if a[i]%j==0:\n                    a.insert(i,j)\n                    break\n                j+=1\n            i+=1\n    print(len(a)-n)\n    print(*a)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 160,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    a=list(map(int,input().split())\n    max_divisor=max(a)\n    for i in range(k):\n        for j in range(n):\n            for l in range(j+1,n):\n                if a[j]>a[l]:\n                    a[j]+=1\n                    a[l]-=1\n                    max_divisor=max(max_divisor,gcd(a[j],a[l]))\n    return max_divisor\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 161,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x = int(input())\n    if x == 0:\n        print(0)\n        return\n    if x == 1:\n        print(0)\n        return\n    if x == 2:\n        print(1)\n        print(0)\n        return\n    if x == 3:\n        print(2)\n        print(0)\n        return\n    if x == 4:\n        print(2)\n        print(1)\n        return\n    if x == 5:\n        print(2)\n        print(1)\n        return\n    if x == 6:\n        print(2)\n        print(2)\n        return\n    if x == 7:\n        print(0)\n        return\n    if x == 8:\n        print(2)\n        print(2)\n        return\n    if x == 9:\n        print(2)\n        print(2)\n        return\n    if x == 10:\n        print(2)\n        print(3)\n        return\n    if x == 11:\n        print(2)\n        print(3)\n        return\n    if x == 12:\n        print(2)\n        print(3)\n        return\n    if x == 13:\n        print(2)\n        print(3)\n        return\n    if x == 14:\n        print(2)\n        print(3)\n        return\n    if x == 15:\n        print(2)\n        print(3)\n        return\n    if x == 16:\n        print(2)\n        print(3)\n        return\n    if x == 17:\n        print(2)\n        print(3)\n        return\n    if x == 18:\n        print(2)\n        print(3)\n        return\n    if x == 19:\n        print(2)\n        print(3)\n        return\n    if x == 20:\n        print(2)\n        print(3)\n        return\n    if x == 21:\n        print(2)\n        print(3)\n        return\n    if x == 22:\n        print(2",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 162,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R=lambda:list(map(int,input().split()))\n    n,k=R()\n    a=R()\n    ans=0\n    for i in range(n):\n        if a[i]<=k:\n            ans+=1\n            k-=a[i]\n        else:\n            ans+=k//a[i]\n            k=k%a[i]\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 163,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    line = input()\n    grasshopper_pos = line.find('G')\n    insect_pos = line.find('T')\n    if abs(grasshopper_pos - insect_pos) % k == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 164,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    y1, y2, w, x, y, r = map(int, input().strip().split())\n    if y1 + r >= w or y2 - r <= y:\n        return \"-1\"\n    x_w = (y2 - y) / (y2 - y1) * x\n    return round(x_w, 8)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 165,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = list(map(int, input().split()))\n    b, d, s = a[0], a[1], a[2]\n    return min(b, d, s)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 166,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    x=1\n    y=1\n    for i in range(n):\n        if a[i]>x*y:\n            x=a[i]//y+1\n            y=a[i]//x\n        elif a[i]%x==0:\n            y=a[i]//x\n        elif a[i]%y==0:\n            x=a[i]//y\n        else:\n            return \"NO\"\n    return \"YES\\n\"+str(x)+\" \"+str(y)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 167,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b = input(), input()\n    i, j = 0, 0\n    while i < len(a) and j < len(b):\n        if a[i] == b[j]:\n            i += 1\n            j += 1\n        else:\n            j += 1\n    return a[:i]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 168,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=input()\n    count=0\n    for i in range(n):\n        if s[i]=='-':\n            count-=1\n        else:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 169,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a,b,c=map(int,input().split())\n    return min(n//a,n//b)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 170,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    k1=int(input())\n    k2=int(input())\n    cards1=list(map(int,input().split()))\n    cards2=list(map(int,input().split())\n    if k1==1:\n        return -1\n    elif k2==1:\n        return k1+1,1\n    elif k1==2:\n        if cards1[0]>cards2[0]:\n            return 1,1\n        elif cards1[0]<cards2[0]:\n            return 1,2\n        else:\n            return 2,1\n    else:\n        if cards1[0]>cards2[0]:\n            return 1+solution(str(n-1)+\"\\n\"+str(k1-1)+\"\\n\"+str(k2)+\"\\n\"+str(cards1[1:])+\"\\n\"+str(cards2[1:])\n        elif cards1[0]<cards2[0]:\n            return 1+solution(str(n-1)+\"\\n\"+str(k1)+\"\\n\"+str(k2-1)+\"\\n\"+str(cards1[1:])+\"\\n\"+str(cards2[1:])\n        else:\n            return 1+solution(str(n-1)+\"\\n\"+str(k1-1)+\"\\n\"+str(k2-1)+\"\\n\"+str(cards1[1:])+\"\\n\"+str(cards2[1:])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 171,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    if len(s) < 5:\n        return \"Too weak\"\n    else:\n        if any(char.isdigit() for char in s) == False:\n            return \"Too weak\"\n        elif any(char.isupper() for char in s) == False:\n            return \"Too weak\"\n        elif any(char.islower() for char in s) == False:\n            return \"Too weak\"\n        else:\n            return \"Correct\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 172,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    b=list(map(int,input().split())\n    count_a=[]\n    count_b=[]\n    for i in range(1,6):\n        count_a.append(a.count(i))\n        count_b.append(b.count(i))\n    if sum(count_a)!=sum(count_b):\n        return -1\n    else:\n        return min(abs(count_a[i]-count_b[i]) for i in range(5))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 173,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    horiz = input()\n    vert = input()\n    n = len(horiz)\n    m = len(vert)\n    for i in range(n):\n        if horiz[i] == '<' and vert[i] == '^':\n            return \"NO\"\n        elif horiz[i] == '>' and vert[i] == 'v':\n            return \"NO\"\n    for j in range(m):\n        if horiz[j] == '>' and vert[j] == '^':\n            return \"NO\"\n        elif horiz[j] == '<' and vert[j] == 'v':\n            return \"NO\"\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 174,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    args = list(map(int, input().split()))\n    if n == 1:\n        if args[0] == 0:\n            return \"YES\\n0\"\n        else:\n            return \"YES\\n1\"\n    if n == 2:\n        if args[0] == 1 and args[1] == 0:\n            return \"YES\\n(1->0)\"\n        else:\n            return \"NO\"\n    if n == 3:\n        if args[0] == 0 and args[1] == 1 and args[2] == 0:\n            return \"YES\\n((0->1)->0)\"\n        elif args[0] == 0 and args[1] == 0 and args[2] == 1:\n            return \"YES\\n(0->(0->1)\"\n        elif args[0] == 1 and args[1] == 0 and args[2] == 1:\n            return \"YES\\n(1->(0->1)\"\n        elif args[0] == 1 and args[1] == 1 and args[2] == 0:\n            return \"YES\\n(1->(1->0)\"\n        else:\n            return \"NO\"\n    if n == 4:\n        if args[0] == 0 and args[1] == 1 and args[2] == 1 and args[3] == 0:\n            return \"YES\\n((0->1)->(1->0)\"\n        elif args[0] == 0 and args[1] == 0 and args[2] == 1 and args[3] == 1:\n            return \"YES\\n(0->(1->1)\"\n        elif args[0] == 1 and args[1] == 0 and args[2] == 1 and args[3] == 1:\n            return \"YES\\n(1->(1->1)\"\n        elif args[0] == 1 and args[1] == 1 and args[2] == 0 and args[3] == 0:\n            return \"YES\\n(1->(0->0)\"\n        elif args[0] == 1 and args[1]",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 175,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=list(map(int,input().split()))\n    while a!=0 or b!=0:\n        if a>=2*b:\n            a=a-2*b\n        elif b>=2*a:\n            b=b-2*a\n        else:\n            break\n    print(a,b)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 176,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k,a,b=map(int,input().split())\n    count=0\n    for i in range(a,b+1):\n        if i%k==0:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 177,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k=int(input())\n    count=0\n    for i in range(1,10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 178,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    if (int(input()) - 9) // 2 <= input()[:-10].count('8'):\n    return \"YES\"\n    else:\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 179,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,x,pos = list(map(int,input().split()))\n    count = 0\n    for i in range(1,n+1):\n        for j in range(n):\n            if i == x and j == pos:\n                count += 1\n    return count % (10**9+7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 180,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    k = int(input())\n    n = len(s)\n    i = 0\n    while i < n:\n        if s[i] == '*':\n            i += 2\n        elif s[i] == '?':\n            i += 1\n        else:\n            i += 1\n    if i == k:\n        return \"Impossible\"\n    else:\n        return \"\".join([s[j] if s[j] != '*' else s[j+1] for j in range(k)])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 181,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = (int(input())+45)%360\n    if n == 0:\n        return 0\n    elif n == 90:\n        return 1\n    elif n == 180:\n        return 2\n    elif n == 270:\n        return 3\n    else:\n        return 4\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 182,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    if a[0] >= b[0] and a[1] >= b[1] and a[2] >= b[2]:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 183,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    hahaha=input()\n    n,k,m=map(int,hahaha.split())\n    count=0\n    for i in range(1,n+1):\n        for j in range(1,10):\n            if i%k==0:\n                count+=1\n    print(count%m)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 184,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l,r,a=list(map(int,input().split()))\n    if (l+r+a)%2!=0:\n        return 0\n    else:\n        return (l+r+a)//2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 185,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=[int(x) for x in input().split()]\n    if k==1:\n        return n\n    elif k==n:\n        return 2*n-1\n    else:\n        return 2*n-2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 186,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = map(int , input().split())\n    if n == 0:\n        return m*3\n    elif m == 0:\n        return n*2\n    else:\n        return max(n*2,m*3)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 187,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    cards = list(map(int, input_string.split()))\n    if len(set(cards)) != n:\n        print(\"NO\")\n        return\n    cards.sort()\n    if n % 2 == 0:\n        print(\"YES\")\n        print(cards[n//2-1], cards[n//2])\n    else:\n        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 188,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    soldiers = list(map(int, input().split())\n    if sum(soldiers) > 8*n:\n        return \"NO\"\n    for i in range(n):\n        for j in range(n):\n            for l in range(n):\n                if i != j and l != j:\n                    for m in range(n):\n                        if i != m and l != m:\n                            for o in range(n):\n                                if i != o and l != o and m != o:\n                                    if i != o and l != o:\n                                        return \"YES\"\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 189,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    sticks = list(map(int, input().split()))\n    sticks.sort()\n    t = sticks[n//2]\n    cost = sum(abs(a-t) for a in sticks)\n    return t, cost\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 191,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    if k > n*(n-1)//2:\n        return 0\n    if k == 0:\n        if a == sorted(a):\n            return 1\n        else:\n            return 0\n    if k == n*(n-1)//2:\n        return 1\n    if k == 1:\n        if a == sorted(a):\n            return 0\n        else:\n            return 1\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 192,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t, f = map(int, input().split())\n    if t == f:\n        return 0\n    elif t > f:\n        return -1\n    else:\n        return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 193,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b = map(int, input().split())\n    c, d = map(int, input().split())\n    det = a*d - b*c\n    if det == 0:\n        return 0.5\n    else:\n        return abs(a+b+c+d)/2/det\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 194,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, a, b = map(int, input().split())\n    groups = list(map(int, input().split())\n    count = 0\n    for i in range(n):\n        if groups[i] == 1 and a > 0:\n            a -= 1\n        elif groups[i] == 2 and b > 0:\n            b -= 1\n        else:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 195,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c,n=list(map(int,input().split()))\n    if a+b+c!=n:\n        return -1\n    else:\n        return n-a-b-c\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 196,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x,k = list(map(int,input().split()))\n    prob = 0.5\n    mod = 10**9 + 7\n    ans = 0\n    for i in range(k):\n        ans = (ans + x)%mod\n        x = (x*2)%mod\n        if i != k-1:\n            x = (x - x*prob)%mod\n    return ans%mod\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 197,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    l_r = []\n    for i in range(n):\n        l, r = map(int, input().split())\n        l_r.append((l, r))\n    l_r.sort(key=lambda x: x[1])\n    l_r.sort(key=lambda x: x[0], reverse=True)\n    inversions = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if l_r[i][1] < l_r[j][0]:\n                inversions += 1\n    return (998244353-inversions) % 998244353\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 198,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    if n==1:\n        return 0\n    elif n==2:\n        return 0\n    elif n==3:\n        return 0\n    elif n==4:\n        return 1\n    elif n==5:\n        return 0\n    elif n==6:\n        return 1\n    elif n==7:\n        return 0\n    elif n==8:\n        return 1\n    elif n==9:\n        return 2\n    elif n==10:\n        return 2\n    elif n==11:\n        return 0\n    elif n==12:\n        return 2\n    elif n==13:\n        return 3\n    elif n==14:\n        return 3\n    elif n==15:\n        return 4\n    elif n==16:\n        return 4\n    elif n==17:\n        return 5\n    elif n==18:\n        return 5\n    elif n==19:\n        return 6\n    elif n==20:\n        return 6\n    else:\n        return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 199,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, s = list(map(int, input().split()))\n    v = list(map(int, input().split())\n    for i in range(n):\n        if v[i] >= s:\n            return s\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 200,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    h1, h2 = map(int, input().split())\n    a, b = map(int, input().split())\n    if h1 > h2:\n        return -1\n    elif a == b:\n        return -1\n    else:\n        if a > b:\n            return (h2 - h1) // (a - b)\n        else:\n            return (h2 - h1) // b + 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 201,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    c,x,y,a,b = list(map(int,input().split()))\n    if a*c > b*y:\n        return x*c\n    else:\n        return y*b\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 202,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x,y = map(int,input().split())\n    x2,y2 = map(int,input().split())\n    dx = abs(x2-x)\n    dy = abs(y2-y)\n    if dx > dy:\n        return dx\n    elif dy > dx:\n        return dy\n    else:\n        return (dx+dy)//2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 203,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = input()\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 204,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,x,y=map(int,input().split())\n    count=0\n    for i in range(1,a+1):\n        for j in range(1,b+1):\n            if i/j==x/y:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 205,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, b = map(int, input().split())\n    count = 0\n    for i in range(5, 0, -1):\n        while n//b**i == 0:\n            count += 1\n            n //= b**i\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 206,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    M, a, b = map(int, input().split())\n    f = [0] * (M+1)\n    f[0] = 1\n    for i in range(1, M+1):\n        for j in range(max(0, i-b), min(i+a, M)+1):\n            f[i] += f[j]\n    return sum(f)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 207,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    if n%2==0:\n        return \"No\"\n    else:\n        for i in range(n):\n            if a[i]%2==0:\n                return \"No\"\n        return \"Yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 208,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x1,y1,x2,y2=map(int,input().split())\n    if x1==x2 and y1==y2:\n        return -1\n    if x1==x2:\n        x3=x1\n        y3=y2\n        x4=x1\n        y4=y1\n    elif y1==y2:\n        x3=x2\n        y3=y1\n        x4=x1\n        y4=y2\n    else:\n        x3=x1\n        y3=y2\n        x4=x2\n        y4=y1\n    return x3,y3,x4,y4\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 209,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x, y = map(int, input().split())\n    n = int(input())\n    if n == 1:\n        return x % (10**9 + 7)\n    elif n == 2:\n        return y % (10**9 + 7)\n    else:\n        return (x + y) % (10**9 + 7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 210,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    A = list(map(int, input().split()))\n    if sum(A) == 0:\n        print(\"YES\")\n        print(n)\n        for i in range(1, n+1):\n            print(i, i)\n        return\n    for i in range(1, n):\n        if sum(A[:i]) == 0:\n            print(\"YES\")\n            print(i)\n            for j in range(1, i+1):\n                print(j, i)\n            return\n    for i in range(1, n):\n        if sum(A[i:]) == 0:\n            print(\"YES\")\n            print(n-i)\n            for j in range(i+1, n+1):\n                print(i, j)\n            return\n    print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 211,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k=map(int,input().split())\n    if m==0:\n        return 0\n    elif m==1:\n        return 1\n    elif m==n:\n        return (n-1)%100000009\n    else:\n        return (m-1)%100000009\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 212,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n1 = input()\n    n = int(n1)\n    if n % 8 == 0:\n        print(\"YES\")\n        print(n1)\n        return\n    else:\n        for i in range(len(n1)):\n            n1 = n1[:i] + n1[i+1:]\n            if int(n1) % 8 == 0:\n                print(\"YES\")\n                print(n1)\n                return\n        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 213,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    flats = {}\n    for i in range(m):\n        k, f = map(int, input().split())\n        flats[k] = f\n    if len(flats) != len(set(flats.values()):\n        return -1\n    else:\n        return flats[n]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 214,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = [input(), input()]\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if s[i][j] == '0':\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 215,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    max_pretty = 0\n    current_pretty = 0\n    for i in range(n):\n        if s[i].islower():\n            current_pretty += 1\n        else:\n            max_pretty = max(max_pretty, current_pretty)\n            current_pretty = 0\n    max_pretty = max(max_pretty, current_pretty)\n    print(max_pretty)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 216,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input_string.split()))\n    b = []\n    c = []\n    for i in range(n):\n        if a[i] % 2 == 0:\n            b.append(a[i])\n        else:\n            c.append(a[i])\n    return sum(b) - sum(c)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 217,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,f,k=list(map(int,input().split()))\n    if k*a>b:\n        return -1\n    else:\n        return k\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 218,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, p, q = map(int, input().split())\n    s = input()\n    if p > n or q > n:\n        print(-1)\n        return\n    if n % (p + q) != 0:\n        print(-1)\n        return\n    k = n // (p + q)\n    for i in range(k):\n        print(s[i*p:(i+1)*p])\n        print(s[(i+1)*p:(i+1)*p+q])\n    if n % p != 0:\n        print(s[-p:])\n    elif n % q != 0:\n        print(s[-q:])\n    else:\n        print(s[-q:])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 219,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,s,d=map(int,input().split())\n    obstacles=list(map(int,input().split()))\n    obstacles.sort()\n    if obstacles[0]>s:\n        print(\"RUN\",obstacles[0]-s)\n    else:\n        print(\"IMPOSSIBLE\")\n        return\n    for i in range(1,len(obstacles)):\n        if obstacles[i]-obstacles[i-1]>d:\n            print(\"JUMP\",obstacles[i]-obstacles[i-1]-d)\n            print(\"RUN\",d)\n        else:\n            print(\"JUMP\",obstacles[i]-obstacles[i-1])\n        if obstacles[i]>m:\n            print(\"RUN\",m-obstacles[i])\n            break\n        else:\n            print(\"RUN\",m-obstacles[i])\n            print(\"JUMP\",obstacles[i+1]-obstacles[i])\n            print(\"RUN\",obstacles[i+1]-obstacles[i])\n            break\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 220,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s, x = map(int, input().split())\n    count = 0\n    for i in range(1, s):\n        if i ^ i < x:\n            count += 1\n        elif i ^ (s - i) == x:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 221,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    l = 0\n    skewers = [i for i in range(1, n+1)]\n    for i in range(n):\n        if skewers[i] == i+1:\n            l += 1\n            for j in range(max(0, i-k), min(i+k+1, n)):\n                skewers[j] = -skewers[j]\n    return l, skewers\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 222,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=input()\n    n=int(n)\n    if n==1:\n        return 0\n    elif n==4 or n==9:\n        return 0\n    elif n%4==0:\n        return 1\n    elif n%9==0:\n        return 1\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 223,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    if n==2:\n        return 1\n    elif n==3:\n        return 4\n    elif n==4:\n        return 12\n    elif n==5:\n        return 28\n    elif n==6:\n        return 120\n    elif n==7:\n        return 360\n    elif n==8:\n        return 1080\n    elif n==9:\n        return 5040\n    elif n==10:\n        return 20396\n    elif n==11:\n        return 8064\n    elif n==12:\n        return 35376\n    elif n==13:\n        return 142960\n    elif n==14:\n        return 60792\n    elif n==15:\n        return 243040\n    elif n==16:\n        return 90592\n    elif n==17:\n        return 362880\n    elif n==18:\n        return 1210880\n    elif n==19:\n        return 486208\n    elif n==20:\n        return 1814400\n    elif n==21:\n        return 725760\n    elif n==22:\n        return 2599200\n    elif n==23:\n        return 927760\n    elif n==24:\n        return 365728\n    elif n==25:\n        return 1233008\n    elif n==26:\n        return 453600\n    elif n==27:\n        return 151200\n    elif n==28:\n        return 60480\n    elif n==29:\n        return 216600\n    elif n==30:\n        return 75600\n    elif n==31:\n        return 25920\n    elif n==32:\n        return 924",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 224,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=list(input())+[\\\"A\\\"]\n    vowels=set(['A','E','I','O','U','Y'])\n    count=0\n    for i in range(len(s)-1):\n        if s[i] in vowels:\n            count+=1\n        else:\n            count=0\n        if s[i+1] in vowels:\n            count+=1\n        else:\n            count=0\n        if count==len(s)-1:\n            return count\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 225,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b, c, d = sorted(list(map(int, input().split())))\n    if (a+b+c+d) % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 226,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    slices = list(map(int, input().split()))\n    slices.sort(reverse=True)\n    alice_sum = 0\n    bob_sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            alice_sum += slices[i]\n        else:\n            bob_sum += slices[i]\n    return alice_sum, bob_sum\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 227,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    m=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if a[i]+a[j]==a[i+1]:\n                m+=1\n                break\n    return m\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 228,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    if n%2==0:\n        if sum(a)%2==0:\n            return \"Alice\"\n        else:\n            return \"Bob\"\n    else:\n        return \"Bob\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 229,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    if a[0] == a[-1]:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 230,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    max_len = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            substring = s[i:j+1]\n            if s.count(substring) > 1:\n                max_len = max(max_len, len(substring))\n    return max_len\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 231,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, a = map(int, input().split())\n    if a % 2 == 0:\n        return 2\n    else:\n        return 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 232,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    colors = list(map(int, input().split())\n    counts = list(map(int, input().split())\n    for i in range(n):\n        if colors[i] not in range(1, m+1):\n            return \"NO\"\n    for i in range(1, m+1):\n        if colors.count(i) != counts[i-1]:\n            return \"NO\"\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 233,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b = list(map(int, input().split()))\n    mishka_score = 0\n    chris_score = 0\n    for i in range(a):\n        m, c = list(map(int, input().split()))\n        if m > c:\n            mishka_score += 1\n        elif c > m:\n            chris_score += 1\n    if mishka_score > chris_score:\n        print(\"Mishka\")\n    elif chris_score > mishka_score:\n        print(\"Chris\")\n    else:\n        print(\"Friendship is magic!^^\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 234,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,N=list(map(int,input().split()))\n    matrix=[]\n    for i in range(n):\n        matrix.append(list(input())\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j]=='*':\n                continue\n            else:\n                count=0\n                if i>0 and matrix[i-1][j]=='*':\n                    count+=1\n                if i<n-1 and matrix[i+1][j]=='*':\n                    count+=1\n                if j>0 and matrix[i][j-1]=='*':\n                    count+=1\n                if j<m-1 and matrix[i][j+1]=='*':\n                    count+=1\n                if i>0 and j>0 and matrix[i-1][j-1]=='*':\n                    count+=1\n                if i>0 and j<m-1 and matrix[i-1][j+1]=='*':\n                    count+=1\n                if i<n-1 and j>0 and matrix[i+1][j-1]=='*':\n                    count+=1\n                if i<n-1 and j<m-1 and matrix[i+1][j+1]=='*':\n                    count+=1\n                if matrix[i][j]!='*' and count!=int(matrix[i][j]):\n                    return \"NO\"\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 235,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    k=1\n    while n>0:\n        n-=k\n        if n<10:\n            break\n        n=int(n*0.9)\n        k+=1\n    return k\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 236,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    pearls = s.count('o')\n    links = s.count('-')\n    if pearls % 2 == 0:\n        return \"YES\" if links == 0 else \"NO\"\n    else:\n        return \"YES\" if links % 2 == 0 else \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 237,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    q,w,e=list(map(int,input().split()))\n    if e==1:\n        return w\n    elif e==q:\n        return w-q+1\n    else:\n        return w//(q//(e-1)+1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 238,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    max_cost = 0\n    for i in range(n):\n        for j in range(i, n):\n            subarray_sum = sum(a[i:j+1])\n            subarray_length = j - i + 1\n            cost = subarray_sum - k * math.ceil(subarray_length / m)\n            max_cost = max(max_cost, cost)\n    return max_cost\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 239,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    max_length = 0\n    p1 = (0, 0)\n    p2 = (0, 0)\n    p3 = (0, 0)\n    p4 = (0, 0)\n    for i in range(n+1):\n        for j in range(m+1):\n            for k in range(n+1):\n                for l in range(m+1):\n                    for o in range(n+1):\n                        for p in range(m+1):\n                            for q in range(m+1):\n                                for r in range(n+1):\n                                    for s in range(m+1):\n                                        if i != k and j != l and o != p and q != r and i != o and j != p and k != r and l != q and o != s and p != s:\n                                            length = ((i-k)**2 + (j-l)**2)**0.5 + ((k-o)**2 + (l-p)**2)**0.5 + ((o-r)**2 + (p-q)**2)**0.5 + ((r-s)**2 + (q-s)**2)**0.5\n                                            if length > max_length:\n                                                max_length = length\n                                                p1 = (i, j)\n                                                p2 = (k, l)\n                                                p3 = (o, p)\n                                                p4 = (r, q)\n    print(p1[0], p1[1])\n    print(p2[0], p2[1])\n    print(p3[0], p3[1])\n    print(p4[0], p4[1])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 240,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    n = int(input())\n    n_str = str(n)\n    n_len = len(n_str)\n    for i in range(n_len):\n        if n_str[i:i+len(n)] == n:\n            return int(n_str[:i] + str(n) + n_str[i+len(n):])\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 241,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    I=lambda:list(map(int,input().split()))\n    n,m,min_temp,max_temp=I()\n    temps=I()\n    if len(temps)!=m:\n        return \"Incorrect\"\n    temps.sort()\n    if temps[0]!=min_temp or temps[-1]!=max_temp:\n        return \"Incorrect\"\n    for i in range(n-m):\n        if temps[i]!=temps[i+1]:\n            return \"Incorrect\"\n    return \"Correct\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 242,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = int(input())\n    count = 0\n    for i in range(1, 10000000):\n        if str(factorial(i)).endswith(\"0\"*a):\n            count += 1\n    print(count)\n    for i in range(1, 1000000):\n        if str(factorial(i)).endswith(\"0\"*a):\n            print(i, end=\" \")\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 243,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k = map(int, input().split())\n    x = list(map(int, input().split()))\n    graph = [[] for _ in range(n+1)]\n    for _ in range(m):\n        u, v, w = map(int, input().split())\n        graph[u].append((v, w))\n        graph[v].append((u, w))\n    ans = []\n    for i in range(1, n+1):\n        dist = [float('inf')] * (n+1)\n        visited = [False] * (n+1)\n        queue = [(i, 0)]\n        while queue:\n            node, d = queue.pop(0)\n            if not visited[node]:\n                visited[node] = True\n                for neighbor, weight in graph[node]:\n                    dist[neighbor] = min(dist[neighbor], d + weight)\n                    queue.append((neighbor, d + weight))\n        ans.append(max(dist))\n    for i in range(k):\n        ans[i] = max(ans)\n    return ' '.join(map(str, ans)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 244,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    x = int(input())\n    if n % 2 == 0:\n        if x == 0:\n            return 2\n        elif x == 1:\n            return 0\n        else:\n            return 1\n    else:\n        if x == 0:\n            return 1\n        elif x == 1:\n            return 2\n        else:\n            return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 245,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    rectangles=[]\n    for i in range(n):\n        rectangles.append(list(map(int,input().split()))\n    # Your code here\n    return \"YES\" if is_square(rectangles) else \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 246,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, s  = [int(i) for i in input().split()]\n    count = 0\n    for i in range(1, n+1):\n        if i - sum(int(digit) for digit in str(i)) >= s:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 247,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    points = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        points.append((x, y))\n    # Your code goes here\n    return \"YES\" if True else \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 248,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b, k, t = map(int, input().split())\n    n = 2*k + 1\n    dp = [[0]*n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            dp[i][j] = (dp[i+1][j] + dp[i][j-1]) % (10**9 + 7)\n    for _ in range(t-1):\n        new_dp = [[0]*n for _ in range(n)]\n        for i in range(n):\n            for j in range(n):\n                for x in range(i, j+1):\n                    new_dp[i][j] += dp[i][x] * dp[x+1][j]\n                    new_dp[i][j] %= (10**9 + 7)\n        dp = new_dp\n    ans = 0\n    for i in range(a-b+1, k+1):\n        ans += dp[i][k-i]\n    return ans % (10**9 + 7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 249,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, l, x, y = map(int, input().split())\n    a = list(map(int, input().split()))\n    v = 0\n    p = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[j] - a[i] == x:\n                v += 1\n                p.append(x)\n            elif a[j] - a[i] == y:\n                v += 1\n                p.append(y)\n    if v < 2:\n        for i in range(n):\n            for j in range(i+1, n):\n                if a[j] - a[i] == x + y:\n                    v += 1\n                    p.append(x + y)\n    return v, p\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 250,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    cakes = []\n    for i in range(n):\n        r, h = map(int, input().split())\n        cakes.append((r, h))\n    cakes.sort(key=lambda x: x[1])\n    max_volume = 0\n    for i in range(n):\n        max_volume += cakes[i][0] ** 2 * cakes[i][1]\n    return max_volume\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 251,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k = map(int, input().split())\n    h = list(map(int, input().split())\n    h.sort(reverse=True)\n    count = 0\n    for i in range(n):\n        if h[i] > k:\n            count += h[i] - k\n            h[i] = k\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 252,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    max_score = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            score = sum(a[i:j+1])\n            if score > max_score:\n                max_score = score\n    return max_score\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 253,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    q=list(map(int,input().split()))\n    k1,k2,k3=q[0],q[1],q[2]\n    if max(k1,k2,k3)%2==0:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 254,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=input()\n    count=0\n    i=0\n    while i<n:\n        j=i+1\n        while j<n and s[i]==s[j]:\n            j+=1\n        count+=1\n        i=j\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 255,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    m=int(input())\n    b=list(map(int,input().split())\n    a.sort()\n    b.sort()\n    i=0\n    j=0\n    count=0\n    while i<n and j<m:\n        if abs(a[i]-b[j])<=1:\n            count+=1\n            i+=1\n            j+=1\n        elif a[i]<b[j]:\n            i+=1\n        else:\n            j+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 256,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b = map(int, input().split())\n    c, d = map(int, input().split())\n    e, f = map(int, input().split())\n    g, h = map(int, input().split())\n    if a > b and c > d:\n        return \"Team 1\"\n    elif c > b and a > d:\n        return \"Team 2\"\n    else:\n        return \"Draw\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 257,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    xy_c = []\n    for _ in range(n):\n        x, y, c = map(int, input().split())\n        xy_c.append((x, y, c))\n    xy_c.sort(key=lambda x: x[2])\n    xy_c.sort(key=lambda x: x[1])\n    xy_c.sort(key=lambda x: x[0])\n    x_min = xy_c[0][0]\n    y_min = xy_c[0][1]\n    c_min = xy_c[0][2]\n    x_max = xy_c[-1][0]\n    y_max = xy_c[-1][1]\n    c_max = xy_c[-1][2]\n    x_mid = (x_min + x_max) / 2\n    y_mid = (y_min + y_max) / 2\n    time = c_min * math.sqrt((x_mid - x_min) ** 2 + (y_mid - y_min) ** 2)\n    while k <= 0:\n        x_mid = (x_min + x_max) / 2\n        y_mid = (y_min + y_max) / 2\n        time = c_min * math.sqrt((x_mid - x_min) ** 2 + (y_mid - y_min) ** 2)\n        k = 0\n        for x, y, c in xy_c:\n            if math.sqrt((x_mid - x) ** 2 + (y_mid - y) ** 2) / c <= time:\n                k += 1\n        if k < 3:\n            x_min = x_mid\n        else:\n            x_max = x_mid\n    return time\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 258,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    ticket=input()\n    if ticket.count('?')==0:\n        return \"Bicarp\"\n    elif n%2==0:\n        return \"Monocarp\"\n    else:\n        return \"Bicarp\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 259,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    kk=lambda:map(int,input().split())\n    n,t=kk()\n    routes=[]\n    for i in range(n):\n        s,d=kk()\n        routes.append((s,d)\n    routes.sort(key=lambda x:x[0])\n    for i in range(n):\n        if routes[i][0]<=t:\n            print(i+1)\n            break\n    else:\n        print(1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 260,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    m, k = map(int, input().split())\n    n = 1\n    while True:\n        count = 0\n        for i in range(n+1, 2*n+1):\n            binary = bin(i)[2:]\n            if len(binary) == k:\n                count += 1\n            if count == m:\n                return n\n        n += 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 261,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    level = input()\n    for i in range(n-4):\n        if level[i] == '.' or level[i+4] == '.':\n            continue\n        if level[i:i+4] == '*****':\n            return \"yes\"\n    return \"no\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 262,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    grid = []\n    for i in range(n):\n        row = list(map(int, input().split()))\n        grid.append(row)\n    empty_cell = []\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 0:\n                empty_cell.append((i,j))\n    if len(empty_cell) != 1:\n        return -1\n    empty_row, empty_col = empty_cell[0]\n    for x in range(1, 10**18+1):\n        if is_magic_square(grid, empty_row, empty_col, x):\n            return x\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 263,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = int(input()), int(input())\n    a = list(map(int, input().split()))\n    min_k = max(a)\n    max_k = sum(a) + m\n    print(min_k, max_k)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 264,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = input().split(' ')\n    n = int(n)\n    m = int(m)\n    if m > n:\n        return 0\n    elif m == 1:\n        return 2\n    elif m == n:\n        return 1\n    else:\n        return (2 * (2 ** (n - m)) * (m - 1) + 1) % (10**9 + 7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 265,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    I=lambda : list(map(int,input().split()))\n    n,m=I()\n    friends=[]\n    for i in range(n):\n        f=I()\n        friends.append(set(I()[1:]) if f[0]>1 else set([I()[1]])\n    pizzas=[]\n    for i in range(m):\n        c,r=I()\n        pizzas.append((c,set(I()[1:]))\n    pizzas.sort(key=lambda x:x[0])\n    pizzas.sort(key=lambda x:len(x[1]),reverse=True)\n    max_pleased=0\n    for i in range(m-1):\n        for j in range(i+1,m):\n            pleased=0\n            for f in friends:\n                if f.issubset(pizzas[i][1]|pizzas[j][1]):\n                    pleased+=1\n            if pleased>max_pleased:\n                max_pleased=pleased\n                ans=(i+1,j+1)\n    return ans[0],ans[1]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 266,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, s = map(int, input().split())\n    min_num = max_num = -1\n    for i in range(1, 10**n):\n        if sum(int(digit) for digit in str(i)) == s:\n            min_num = i\n            break\n    for i in range(10**n, 10**(n+1):\n        if sum(int(digit) for digit in str(i)) == s:\n            max_num = i\n            break\n    return min_num, max_num\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 267,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l, r, k =list(map(int,input().split()))\n    total_sum = 0\n    for i in range(l,r+1):\n        if len(set(str(i))<=k):\n            total_sum+=i\n    return total_sum%99824353\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 268,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k,d=list(map(int,input().split()))\n    a=list(map(int,input().split())\n    if n==1:\n        return \"YES\"\n    a.sort()\n    if a[-1]-a[0]>d:\n        return \"NO\"\n    if n<=k:\n        return \"YES\"\n    for i in range(1,len(a)):\n        if a[i]-a[i-1]>d:\n            return \"NO\"\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 269,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    count_dict = {'R': 0, 'B': 0, 'Y': 0, 'G': 0}\n    for i in range(len(s)):\n        if s[i] == '!':\n            count_dict[s[i-1]] += 1\n    return count_dict['R'], count_dict['B'], count_dict['Y'], count_dict['G']\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 270,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    passages = []\n    for _ in range(m):\n        s, t = map(int, input().split())\n        passages.append((s, t))\n    passages.sort(key=lambda x: x[0])\n    passages.sort(key=lambda x: x[1])\n    passages.sort(key=lambda x: x[0] - x[1])\n    passages.sort(key=lambda x: x[1] - x[0])\n    passages.sort(key=lambda x: x[0])\n    passages.sort(key=lambda x: x[1])\n    passages.sort(key=lambda x: x[0] - x[1])\n    passages.sort(key=lambda x: x[1] - x[0])\n    passages.sort(key=lambda x: x[0])\n    passages.sort(key=lambda x: x[1])\n    passages.sort(key=lambda x: x[0] - x[1])\n    passages.sort(key=lambda x: x[1] - x[0])\n    passages.sort(key=lambda x: x[0])\n    passages.sort(key=lambda x: x[1])\n    passages.sort(key=lambda x: x[0] - x[1])\n    passages.sort(key=lambda x: x[1] - x[0])\n    passages.sort(key=lambda x: x[0])\n    passages.sort(key=lambda x: x[1])\n    passages.sort(key=lambda x: x[0] - x[1])\n    passages.sort(key=lambda x: x[1] - x[0])\n    passages.sort(key=lambda x: x[0])\n    passages.sort(key=lambda x: x[1])\n    passages.sort(key=lambda x: x[0] - x[1])\n    passages.sort(key=lambda x: x[1] - x[0])\n    passages.sort(key=lambda x: x[0])\n    passages.sort(key=lambda x: x[",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 271,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n % 10 == 0:\n        return n\n    else:\n        return n - (n % 10)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 272,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    t=input()\n    if s==t:\n        return 0\n    else:\n        pairs=[]\n        for i in range(len(s)):\n            if s[i]!=t[i]:\n                pairs.append((s[i],t[i]))\n        if len(pairs)%2!=0:\n            return -1\n        else:\n            for i in range(0,len(pairs),2):\n                if pairs[i][1]!=pairs[i+1][0]:\n                    return -1\n            for i in range(0,len(pairs),2):\n                print(pairs[i][0],pairs[i][1])\n            return len(pairs)//2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 273,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b = input().split()\n    return min(a+b,b+a)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 274,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    _, s = input(), input()\n    n = len(s)\n    if n % 2 != 0:\n        raise ValueError(\"Invalid input\")\n    if n == 2:\n        print(\"+- -+\")\n        print(\"|   |\")\n        print(\"+- -+\")\n        return\n    if n == 4:\n        print(\"+- -++- -+\")\n        print(\"|   ||   |\")\n        print(\"+- -++- -+\")\n        return\n    if n == 6:\n        print(\"+-     -+\")\n        print(\"|+-   -+|\")\n        print(\"||+- -+||\")\n        print(\"|||   |||\")\n        print(\"||+- -+||\")\n        print(\"|+-   -+|\")\n        print(\"+-     -+\")\n        return\n    if n == 8:\n        print(\"+-        -++- -+\")\n        print(\"|+- -++- -+||   |\")\n        print(\"||   ||   |||   |\")\n        print(\"|+- -++- -+||   |\")\n        print(\"+-        -++- -+\")\n        return\n    if n == 10:\n        print(\"+-        -++- -++- -+\")\n        print(\"|+- -++- -++- -+||   |\")\n        print(\"||   ||   |||   |||   |\")\n        print(\"|+- -++- -++- -+||   |\")\n        print(\"+-        -++- -++- -+\")\n        return\n    if n == 12:\n        print(\"+-            -++- -++- -+\")\n        print(\"|+-          -++- -+||   |\")\n        print(\"||+-        -++- -+||   |\")\n        print(\"|||+-      -++- -+||   |\")\n        print(\"||| |+-    -++- -+||   |\")\n        print(\"|||   ||  |||   |||   |\")\n        print(\"|+-  -+-  -++- -+||   |\")\n        print",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 275,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b = input(), input()\n    q = (1 + 5 ** 0.5) / 2\n    a_decimal = sum(int(digit) * q ** i for i, digit in enumerate(a[::-1]))\n    b_decimal = sum(int(digit) * q ** i for i, digit in enumerate(b[::-1]))\n    if a_decimal > b_decimal:\n        print(\">\")\n    elif a_decimal < b_decimal:\n        print(\"<\")\n    else:\n        print(\"=\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 276,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    gems = input_string.split('\\n')\n    gems = [gem.lower() for gem in gems]\n    absent_gems = []\n    if 'purple' not in gems:\n        absent_gems.append('Power')\n    if 'green' not in gems:\n        absent_gems.append('Time')\n    if 'blue' not in gems:\n        absent_gems.append('Space')\n    if 'orange' not in gems:\n        absent_gems.append('Soul')\n    if 'red' not in gems:\n        absent_gems.append('Reality')\n    if 'yellow' not in gems:\n        absent_gems.append('Mind')\n    return len(absent_gems), '\\n'.join(absent_gems)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 277,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, a, b = [int(s) for s in input().split()]\n    if a == b:\n        return \"Final!\"\n    elif a > b:\n        a, b = b, a\n    rounds = 1\n    while n > 2:\n        n //= 2\n        rounds += 1\n    return rounds\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 278,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    p = list(map(int, input().split()))\n    b = list(map(int, input().split())\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 279,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    v1, v2 = list(map(int, input().split()))\n    t, d = list(map(int, input().split())\n    return (v1 + v2) * t // 2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 280,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, M = list(map(int, input().split()))\n    weights = list(map(int, input().split())\n    parts = []\n    for i in range(M):\n        parts.append(list(map(int, input().split()))\n    # Your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 281,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=list(map(int,input().split()))\n    if b==0:\n        return 0\n    else:\n        return (factorial(b)//factorial(a))%10\ndef factorial(n):\n    if n==0:\n        return 1\n    else:\n        return n*factorial(n-1)\nprint(solution(input()))\n# End of code\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 282,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, d = map(int, input().split())\n    s = input()\n    if s[n-1] == '0':\n        return -1\n    if s[0] == '0':\n        return -1\n    if s[n-1] == '0':\n        return -1\n    count = 0\n    i = 0\n    while i < n-1:\n        if s[i] == '0':\n            i += 1\n        else:\n            if i+d >= n:\n                return -1\n            i += d\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 283,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    for i in range(1,10000):\n        if n*i+1<=10000 and is_prime(n*i+1)==False:\n            print(i)\n            break\ndef is_prime(num):\n    if num<2:\n        return False\n    for i in range(2,int(num**0.5)+1):\n        if num%i==0:\n            return False\n    return True\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 284,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    if n%1234==0 and n%123456==0 and n%1234==0:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 285,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    x1,x2=map(int,input().split())\n    lines=[]\n    for i in range(n):\n        k,b=map(int,input().split())\n        lines.append((k,b))\n    for i in range(n):\n        for j in range(i+1,n):\n            k1,b1=lines[i]\n            k2,b2=lines[j]\n            if k1==k2:\n                if b1!=b2:\n                    continue\n                else:\n                    return \"YES\"\n            x=(-b1+b2)/(k2-k1)\n            if x<x1 or x>x2:\n                continue\n            else:\n                return \"YES\"\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 286,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    count=0\n    for i in range(1,n+1):\n        if i==1:\n            count+=1\n        else:\n            for j in range(1,n+1):\n                if i*j<=n:\n                    count+=1\n                else:\n                    break\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 287,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    min_good = max(0, k - 1)\n    max_good = n - k\n    return min_good, max_good\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 288,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    if n%2==0:\n        return n//2\n    else:\n        return n//2+1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 289,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    count=0\n    for i in range(len(s)-1):\n        if s[i]=='V' and s[i+1]=='K':\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 290,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        return 4\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 291,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=list(map(int,input().split()))\n    years=0\n    while a<=b:\n        a*=3\n        b*=2\n        years+=1\n    return years-1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 292,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    h,n=list(map(int,input().split()))\n    if n==1:\n        return 0\n    elif n==2**h:\n        return 2**(h-1)-1\n    else:\n        count=0\n        for i in range(h):\n            count+=2**i\n            if n<=2**(i+1):\n                return count-1\n        return count+n-2**h\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 293,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,i,t,r=int(input()),0,0,[]\n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            t=i*j\n            r.append(t)\n    r=list(set(r)\n    r.sort()\n    for i in range(len(r)):\n        if r[i]==n:\n            print(i+1,n)\n            break\n        elif r[i]>n:\n            print(i,n)\n            break\n        elif r[i]<n:\n            continue\n    for j in range(len(r)-1,0,-1):\n        if r[j]==n:\n            print(j+1,n)\n            break\n        elif r[j]<n:\n            print(j,n)\n            break\n        elif r[j]>n:\n            continue\n    for k in range(1,n+1):\n        if k**2==n:\n            print(k,k)\n            break\n        elif k**2<n:\n            continue\n        elif k**2>n:\n            print(k-1,k)\n            break\n    for l in range(n-1,0,-1):\n        if (n-l)**2==n:\n            print(l,n)\n            break\n        elif (n-l)**2<n:\n            print(l,n)\n            break\n        elif (n-l)**2>n:\n            continue\n    for m in range(1,n+1):\n        if n==m**2:\n            print(n,m)\n            break\n        elif n<m**2:\n            print(n,m-1)\n            break\n        elif n>m**2:\n            continue\n    for o in range(n-1,0,-1):\n        if n==o**2:\n            print(n,o)\n            break\n        elif n<o**2:\n            print(n,o-1)\n            break\n        elif n>o**2:\n            continue\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 294,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    days = list(map(int, input().split()))\n    if n == 1:\n        return \"YES\" if days[0] == 31 else \"NO\"\n    if n == 2:\n        return \"YES\" if days[0] == 31 and days[1] == 30 else \"NO\"\n    if n == 3:\n        return \"YES\" if days[0] == 31 and days[1] == 28 and days[2] == 31 else \"NO\"\n    if n == 4:\n        return \"YES\" if days[0] == 31 and days[1] == 31 and days[2] == 30 and days[3] == 31 else \"NO\"\n    if n == 5:\n        return \"YES\" if days[0] == 31 and days[1] == 31 and days[2] == 30 and days[3] == 31 and days[4] == 30 else \"NO\"\n    if n == 6:\n        return \"YES\" if days[0] == 31 and days[1] == 30 and days[2] == 31 and days[3] == 30 and days[4] == 31 and days[5] == 30 else \"NO\"\n    if n == 7:\n        return \"YES\" if days[0] == 31 and days[1] == 31 and days[2] == 30 and days[3] == 31 and days[4] == 31 and days[5] == 30 and days[6] == 31 else \"NO\"\n    if n == 8:\n        return \"YES\" if days[0] == 31 and days[1] == 31 and days[2] == 30 and days[3] == 31 and days[4] == 31 and days[5] == 30 and days[6] == 31 and days[7] == 31 else \"NO\"\n    if n == 9:\n        return \"YES\" if days[0] == 31 and days[1] == 30",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 295,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n == 2:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        k = 2\n        print(k)\n        print(\"1 2\")\n        print(\"1 3\")\n# End your code here\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 296,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, a, b, h = map(int, input_string.split())\n    h = list(map(int, input_string.split())\n    min_unattractiveness = 0\n    red_painted = 0\n    green_painted = 0\n    for i in range(n):\n        if h[i] > 1:\n            if red_painted + h[i] <= a:\n                red_painted += h[i]\n            elif green_painted + h[i] <= b:\n                green_painted += h[i]\n            else:\n                return -1\n        else:\n            min_unattractiveness += 1\n    return min_unattractiveness\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 297,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k = list(map(int, input().split()))\n    if n * m % k != 0:\n        print(\"NO\")\n        return\n    for i in range(n + 1):\n        for j in range(m + 1):\n            if i * m + j * n - i * j == k * n * m // k:\n                print(\"YES\")\n                print(i, j)\n                print(n - i, j)\n                print(i, m - j)\n                return\n    print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 298,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    if n % (2*k) == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 299,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=[int(i)for i in input().split()]\n    n=int(input())\n    chest=0\n    biceps=0\n    back=0\n    for i in range(n):\n        if i%3==0:\n            chest+=a[i]\n        elif i%3==1:\n            biceps+=a[i]\n        else:\n            back+=a[i]\n    if chest>biceps and chest>back:\n        print(\"chest\")\n    elif biceps>chest and biceps>back:\n        print(\"biceps\")\n    else:\n        print(\"back\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 300,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    grades = list(map(int, input().split()))\n    total = sum(grades)\n    avg = total / n\n    if avg >= 4.5:\n        return 0\n    else:\n        return n - (avg - 4.5)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 301,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    u,v=map(int,input().split())\n    if u==0:\n        if v==0:\n            return 0\n        else:\n            return -1\n    if u==v:\n        return 1\n    if u>v:\n        return -1\n    if u==1:\n        return 1\n    if u%2==0:\n        if v%2==0:\n            return -1\n        else:\n            return 2\n    if u%2!=0:\n        if v%2==0:\n            return -1\n        else:\n            return 1\n    if u%2==0:\n        if v%2==0:\n            return -1\n        else:\n            return 2\n    if u%2!=0:\n        if v%2==0:\n            return -1\n        else:\n            return 1\n    if u%2==0:\n        if v%2==0:\n            return -1\n        else:\n            return 2\n    if u%2!=0:\n        if v%2==0:\n            return -1\n        else:\n            return 1\n    if u%2==0:\n        if v%2==0:\n            return -1\n        else:\n            return 2\n    if u%2!=0:\n        if v%2==0:\n            return -1\n        else:\n            return 1\n    if u%2==0:\n        if v%2==0:\n            return -1\n        else:\n            return 2\n    if u%2!=0:\n        if v%2==0:\n            return -1\n        else:\n            return 1\n    if u%2==0:\n        if v%2==0:\n            return -1\n        else:\n            return 2\n    if u%2!=0:\n        if v%2==0:\n            return -1\n        else:\n            return 1\n    if u%2==0:\n        if v%2==0:\n            return -1\n        else:\n            return 2\n    if u%2!=0:\n        if v%2==0:\n            return -1\n        else:\n            return 1\n   ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 302,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    count = 0\n    while n > 0:\n        count += 1\n        n -= 1\n        n -= 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 303,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c,d=map(int,input().split())\n    x,y=map(int,input().split())\n    if abs(a-c)<=x and abs(b-d)<=y:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 304,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if s[i:j] in s[:i] or s[i:j] in s[j:]:\n                continue\n            if s[i:j] == s[i:j][::-1]:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 305,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c,d,e,f=[int(input())for _ in range(6)]\n    return max(a*e,b*f+c*f+d*f)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 306,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,p,x = [int(x) for x in input().split()]\n    count = 0\n    for i in range(1,x+1):\n        if pow(a,i,p)%p == b:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 307,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k2,k3,k5,k6=map(int,input().split())\n    k2_count=0\n    k3_count=0\n    k5_count=0\n    k6_count=0\n    if k2>0:\n        k2_count=1\n    if k3>0:\n        k3_count=1\n    if k5>0:\n        k5_count=1\n    if k6>0:\n        k6_count=1\n    if k2>1:\n        k2_count+=1\n    if k3>1:\n        k3_count+=1\n    if k5>1:\n        k5_count+=1\n    if k6>1:\n        k6_count+=1\n    if k2>2:\n        k2_count+=1\n    if k3>2:\n        k3_count+=1\n    if k5>2:\n        k5_count+=1\n    if k6>2:\n        k6_count+=1\n    if k2>3:\n        k2_count+=1\n    if k3>3:\n        k3_count+=1\n    if k5>3:\n        k5_count+=1\n    if k6>3:\n        k6_count+=1\n    if k2>4:\n        k2_count+=1\n    if k3>4:\n        k3_count+=1\n    if k5>4:\n        k5_count+=1\n    if k6>4:\n        k6_count+=1\n    if k2>5:\n        k2_count+=1\n    if k3>5:\n        k3_count+=1\n    if k5>5:\n        k5_count+=1\n    if k6>5:\n        k6_count+=1\n    return 256*k2_count+32*k3_count+64*k5_count+k6_count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 308,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, x, y, c = input().split()\n    n, x, y, c = int(n), int(x), int(y), int(c)\n    if c == 1:\n        return 0\n    else:\n        return 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 309,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b  = map(int, input().split())\n    max_value = 0\n    for i in range(a,b+1):\n        for j in range(a,b+1):\n            max_value = max(max_value, i^j)\n    return max_value\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 310,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    if k==0:\n        return 0\n    elif k==1:\n        return 1\n    else:\n        return 2\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 311,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x,y,z,t1,t2,t3=map(int,input().split())\n    if abs(x-y)==1:\n        return \"YES\"\n    elif abs(x-z)==1:\n        return \"YES\"\n    else:\n        if abs(x-y)<abs(x-z):\n            return \"YES\"\n        else:\n            return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 312,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    a=n//2\n    if n%2==0:\n        a-=1\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 313,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    pairs=list(map(int,input().split()))\n    count=0\n    for i in range(n):\n        if pairs[i]==1:\n            count+=1\n            if i<n-1 and pairs[i+1]==0:\n                count+=1\n                break\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 314,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    a=list(map(int,input().split())\n    if k>sum(a):\n        return -1\n    else:\n        count=0\n        for i in range(n):\n            count+=a[i]\n            if count>=k:\n                return i+1\n            elif count+a[i+1]>=k:\n                return i+2\n            elif count+a[i+1]+a[i+2]>=k:\n                return i+3\n            elif count+a[i+1]+a[i+2]+a[i+3]>=k:\n                return i+4\n            elif count+a[i+1]+a[i+2]+a[i+3]+a[i+4]>=k:\n                return i+5\n            elif count+a[i+1]+a[i+2]+a[i+3]+a[i+4]+a[i+5]>=k:\n                return i+6\n            elif count+a[i+1]+a[i+2]+a[i+3]+a[i+4]+a[i+5]+a[i+6]>=k:\n                return i+7\n            elif count+a[i+1]+a[i+2]+a[i+3]+a[i+4]+a[i+5]+a[i+6]+a[i+7]>=k:\n                return i+8\n            else:\n                count+=a[i+1]+a[i+2]+a[i+3]+a[i+4]+a[i+5]+a[i+6]+a[i+7]+a[i+8]\n                if count>=k:\n                    return i+9\n                else:\n                    count+=a[i+8]\n                    if count>=k:\n                        return i+10\n                    else:\n                        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 315,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=list(map(int,input().split()))\n    a=list(map(int,input().split())\n    min_walks=0\n    for i in range(n-1):\n        if a[i]<k:\n            min_walks+=k-a[i]\n    if a[n-1]<k:\n        min_walks+=k-a[n-1]\n    if a[0]<k:\n        min_walks+=k-a[0]\n    print(min_walks)\n    for i in range(n):\n        print(max(k,a[i]),end=\" \")\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 316,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    if n==1:\n        return 1\n    else:\n        return (n**2)+(n-1)**2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 317,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print('YES' if len(set(list(input().lower())))==26 else 'NO')\n    # Write your code here\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 318,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    h,m=map(int,input().split(\\\":\\\"))\n    a=int(input())\n    m+=a\n    if m>=60:\n        h+=m//60\n        m=m%60\n    if h>=24:\n        h=h%24\n    return f\"{h:02d}:{m:02d}\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 319,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input().split()[0])\n    m = int(input().split()[1])\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().strip()))\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                for k in range(n):\n                    if i != k:\n                        if a[k][j] == 1:\n                            a[i][j] = 0\n    for i in range(m):\n        if sum(a[j][i] for j in range(n)) == n - 1:\n            return \"YES\"\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 320,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    dominoes = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        dominoes.append((x, y))\n    even_sum = 0\n    odd_sum = 0\n    for domino in dominoes:\n        if sum(domino) % 2 == 0:\n            even_sum += 1\n        else:\n            odd_sum += 1\n    if even_sum == 0 or odd_sum == 0:\n        return 0\n    elif even_sum == 1 and odd_sum == 1:\n        return 1\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 321,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split())\n    if a**2-b**2==1:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 322,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    points = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        points.append((x, y))\n    for i in range(n):\n        if points[i][0] > 0:\n            if all(points[j][1] >= 0 for j in range(n) if j != i):\n                return \"Yes\"\n    return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 323,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split())\n    def factorial(n):\n        if n==1:\n            return 1\n        else:\n            return n*factorial(n-1)\n    def gcd(a,b):\n        if b==0:\n            return a\n        else:\n            return gcd(b,a%b)\n    return gcd(factorial(a),factorial(b))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 324,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=2\n    b=2\n    while a<=10**9:\n        while b<=10**9:\n            if a-b==n:\n                if a>2 and b>2:\n                    print(a,b)\n                    return\n            b+=1\n        a+=1\n        b=a\nsolution(input())\n# End your code here\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 325,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, p = list(map(int, input().split()))\n    edges = []\n    for _ in range(m):\n        a, b, c = list(map(int, input().split())\n        edges.append((a, b, c))\n    return max_score(n, edges, p)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 326,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    it = lambda: list(map(int, input().strip().split()))\n    N = it()[0]\n    strings = [input().strip().split() for _ in range(N)]\n    costs = it()\n    strings = [(s, c) for s, c in zip(strings, costs)]\n    strings.sort(key=lambda x: len(x[0]) * x[1])\n    total_cost = 0\n    for s, c in strings:\n        if s == s[::-1]:\n            total_cost += c\n            break\n        else:\n            total_cost += c\n    else:\n        total_cost = -1\n    return total_cost\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 327,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    candies=list(map(int,input().split())\n    candies.sort(reverse=True)\n    xor_sum=0\n    for i in range(k):\n        xor_sum^=candies[i]\n    return xor_sum\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 328,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    points = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        points.append((x, y))\n    points.sort(key=lambda x: (x[1], x[0]))\n    x1, y1 = points[0]\n    x2, y2 = points[1]\n    x3, y3 = points[2]\n    a = abs(x2 - x1)\n    b = abs(y2 - y1)\n    c = abs(x3 - x1)\n    p = a + b\n    q = a + c\n    r = b + c\n    s = math.sqrt(a**2 + b**2)\n    t = math.sqrt(c**2 + b**2)\n    u = math.sqrt(a**2 + c**2)\n    if p > q:\n        p, q = q, p\n    if p > r:\n        p, r = r, p\n    if q > r:\n        q, r = r, q\n    if p + r > s + t:\n        return s\n    elif p + r > u:\n        return u\n    else:\n        return p + r\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 329,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x=input()\n    count=0\n    for i in range(len(x)-8):\n        if x[i:i+9]==\"nineteen\":\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 330,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    p,y= [int(x) for x in input().split()]\n    for i in range(p,y+1):\n        if i%p!=0:\n            return i-1\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 331,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k = list(map(int, input().split()))\n    houses = list(map(int, input().split()))\n    min_distance = float('inf')\n    for i in range(n):\n        if houses[i] == 0:\n            continue\n        if houses[i] <= k:\n            distance = abs(i - m)\n            if distance < min_distance:\n                min_distance = distance\n    return min_distance * 10\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 332,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    A = []\n    B = []\n    for i in range(n):\n        A.append(list(map(int, input().split()))\n    for i in range(n):\n        B.append(list(map(int, input().split()))\n    for i in range(n):\n        for j in range(m):\n            if A[i][j] != B[i][j]:\n                return \"NO\"\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 333,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=input()\n    b=input()\n    if len(a)<len(b):\n        a,b=b,a\n    dp=[[0]*(len(b)+1) for i in range(len(a)+1)]\n    for i in range(1,len(a)+1):\n        for j in range(1,len(b)+1):\n            if a[i-1]==b[j-1]:\n                dp[i][j]=dp[i-1][j-1]+1\n            else:\n                dp[i][j]=max(dp[i-1][j],dp[i][j-1])\n    return dp[len(a)][len(b)]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 334,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=[int(i) for i in input().split()]\n    c,d=[int(i) for i in input().split()]\n    if a==c:\n        return 1\n    elif a>c:\n        a,c=c,a\n        b,d=d,b\n    if b%c==0:\n        return (b//c)*a\n    else:\n        return (b//c)*a+(b%c)\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 335,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    if n%3==0:\n        a=n-2\n        b=1\n        c=1\n    else:\n        a=n-1\n        b=1\n        c=1\n    print(a,b,c)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 336,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, a, b, c, d = list(map(int, input().split(' ')))\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                for l in range(1, n+1):\n                    if i+j+k+l == a+b+c+d and i+k+l == a+c and j+k+l == b+d:\n                        count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 337,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    w,h=map(int,input().split())\n    u1,d1=map(int,input().split())\n    u2,d2=map(int,input().split())\n    while h>0:\n        w+=h\n        h-=1\n        if h==d1:\n            w-=u1\n        if h==d2:\n            w-=u2\n        if w<0:\n            w=0\n    return w\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 338,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    m = int(input())\n    c = list(map(int, input().split()))\n    x, y = map(int, input().split())\n    c.sort(reverse=True)\n    for i in range(1, m+1):\n        if sum(c[:i]) >= x and sum(c[i:]) <= y:\n            return i\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 339,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    k=int(input())\n    A=int(input())\n    B=int(input())\n    coins=0\n    while n!=1:\n        if n%k==0:\n            n=n//k\n            coins+=B\n        else:\n            n-=1\n            coins+=A\n    return coins\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 340,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    min_n = n\n    min_ops = 0\n    while n > 1:\n        if n % 2 == 0:\n            n //= 2\n            min_ops += 1\n        else:\n            n += 1\n            min_ops += 1\n    return min_n, min_ops\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 341,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,K = map(int,input().split())\n    R,S,P = map(int,input().split())\n    T = input()\n    # Write your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 342,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c=list(map(int,input().split()))\n    if a==0 and b==0:\n        return c*2\n    elif a==0:\n        return b*2\n    elif b==0:\n        return a*2\n    else:\n        return max(a*2,b*2,a+b)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 343,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k,p,x,y = map(int, input().split())\n    a = list(map(int, input().split())\n    a.sort()\n    if sum(a) > x:\n        return \"-1\"\n    else:\n        if n-k == 1:\n            if a[k] < y:\n                return p-a[k]\n            else:\n                return \"-1\"\n        else:\n            if a[k] < y:\n                return p-a[k]\n            else:\n                return p-a[k-1]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 344,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    vowels = \"aeiou\"\n    for i in range(len(s)):\n        if s[i] in vowels:\n            if i == len(s)-1 or s[i+1] not in vowels:\n                return \"NO\"\n        elif s[i] == \"n\":\n            if i == len(s)-1 or s[i+1] in vowels:\n                return \"NO\"\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 345,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    edges = []\n    for i in range(m):\n        a, b = list(map(int, input().split())\n        edges.append((a, b))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 346,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    a = list(map(int, input().split())\n    b = list(map(int, input().split())\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 347,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = list(map(int,input().split()))\n    b = list(map(int,input().split())\n    c = list(map(int,input().split())\n    score = 0\n    for i in range(5):\n        score += max(0.3*(50*(i+1),1-a[i]/250*(50*(i+1)-50*b[i])\n    score += 100*c[0]-50*c[1]\n    return int(score)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 348,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, L, R = map(int, input().split())\n    if L == R:\n        return 1\n    if n == 1 and m == 1:\n        return 1\n    if n == 1 and m == 2:\n        return 2\n    if n == 2 and m == 1:\n        return 2\n    if n == 2 and m == 2:\n        return 3\n    return 4\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 349,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    matrix1 = []\n    matrix2 = []\n    for i in range(n):\n        row1 = list(map(int, input().split()))\n        row2 = list(map(int, input().split()))\n        matrix1.append(row1)\n        matrix2.append(row2)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 350,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    max_length = 0\n    for i in range(n):\n        max_length += a[i]\n    return max_length\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 351,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    difficulties=list(map(int,input().split())\n    difficulties.sort()\n    count=0\n    for i in range(n):\n        if difficulties[i]>k:\n            count+=1\n            k=difficulties[i]\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 352,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    min_1,max_1=map(int,input().split())\n    min_2,max_2=map(int,input().split())\n    min_3,max_3=map(int,input().split())\n    if min_1+min_2+min_3>n or max_1+max_2+max_3<n:\n        return \"Invalid input\"\n    else:\n        if min_1<=n-min_2-min_3<=max_1 and min_2<=n-min_1-min_3<=max_2 and min_3<=n-min_1-min_2<=max_3:\n            return f\"{n-min_2-min_3} {min_2} {min_3}\"\n        elif min_1<=n-min_2<=max_1 and min_2<=n-min_1<=max_2 and min_3<=n-min_1-min_2<=max_3:\n            return f\"{n-min_2} {min_2} {min_3}\"\n        elif min_1<=n-min_3<=max_1 and min_2<=n-min_3<=max_2 and min_3<=n-min_1-min_2<=max_3:\n            return f\"{n-min_3} {min_2} {min_3}\"\n        elif min_1<=n-min_2-min_3<=max_1 and min_2<=n-min_3<=max_2 and min_3<=n-min_1<=max_3:\n            return f\"{n-min_2-min_3} {min_2} {min_3}\"\n        elif min_1<=n-min_2<=max_1 and min_2<=n-min_3<=max_2 and min_3<=n-min_1<=max_3:\n            return f\"{n-min_2} {min_2} {min_3}\"\n        elif min_1<=n-min_3<=max_1 and min_2<=n-min_2<=max_2 and min_3<=n-min_1<=max_3:\n            return f\"{",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 353,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    moon_sizes = list(map(int, input().split()))\n    if n == 1:\n        return -1\n    else:\n        for i in range(n-1):\n            if moon_sizes[i] > moon_sizes[i+1]:\n                return \"DOWN\"\n            elif moon_sizes[i] < moon_sizes[i+1]:\n                return \"UP\"\n            else:\n                continue\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 354,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = [c in v for c in input()]\n    t = [c in v for c in input()]\n    if s == t:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 355,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    board = [input() for i in range(8)]\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        for j in range(len(board[0])):\n            if board[i][j] == 'B':\n                board[i][j] = 1\n            elif board[i][j] == 'W':\n                board[i][j] = -1\n            else:\n                board[i][j] = 0\n    for i in range(len(board)):\n        for j in range(len(board[0])):\n            if board[i][j] == 1:\n                if i == 0:\n                    return 'B'\n            elif board[i][j] == -1:\n                if i == 7:\n                    return 'A'\n    return 'A' if sum(board[0]) > sum(board[7]) else 'B'\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 356,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    A=list(map(int,input().split())\n    m=int(input())\n    B=list(map(int,input().split())\n    if n!=m:\n        return -1\n    else:\n        for i in range(n):\n            if A[i]!=B[i]:\n                return max(n,m)\n    return max(n,m)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 357,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    friends = [\"Danil\", \"Olya\", \"Slava\", \"Ann\", \"Nikita\"]\n    count = 0\n    for friend in friends:\n        if s.count(friend) == 1:\n            count += 1\n    if count == 1:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 358,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,k=map(int,input().split())\n    count=0\n    for i in range(a,b+1):\n        for j in range(2,i):\n            if i%j==0:\n                count+=1\n                break\n        if count==k:\n            return i-a+1\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 359,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,h,w=map(int,input().split())\n    if a>h or a>w:\n        return -1\n    else:\n        return min(h/a,w/a)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 360,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    chapters=[]\n    for i in range(n):\n        l,r=map(int,input().split())\n        chapters.append([l,r])\n    k=int(input())\n    count=0\n    for i in range(n):\n        if chapters[i][0]<=k<=chapters[i][1]:\n            break\n        count+=1\n    return n-count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 361,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s, t = 'CODEFORCES', input().strip()\n    for i in range(len(s)):\n        if s in t[i:]:\n            return 'YES'\n    return 'NO'\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 362,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())-2\n    if n==0:\n        return 1\n    elif n==1:\n        return 2\n    else:\n        return 1+2*solution(input_string)\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 363,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,s=int(input()),0\n    for i in range(1,n+1):\n        s+=len(str(i)\n    return s\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 364,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, A = map(int, input_string.split())\n    cars = list(map(int, input_string.split()))\n    cnt_A = 0\n    cnt_B = 0\n    for i in range(n):\n        if cars[i] == A:\n            cnt_A += 1\n        else:\n            cnt_B += 1\n        if cnt_A > cnt_B:\n            return -1\n    return A\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 365,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R=lambda:list(map(int,input().split()))\n    n,x=R()\n    a=R()\n    if sum(a)!=x:\n        return \"NO\"\n    if a[0]%2!=0:\n        return \"NO\"\n    for i in range(1,n):\n        if a[i]%2!=0 or a[i]!=a[i-1]+2:\n            return \"NO\"\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 366,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, s = map(int, input().split())\n    coins = [i for i in range(1, n+1)]\n    dp = [0] * (s+1)\n    for i in range(1, s+1):\n        dp[i] = float('inf')\n        for j in coins:\n            if i >= j:\n                dp[i] = min(dp[i], dp[i-j]+1)\n    return dp[s]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 367,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    n = len(s)\n    for i in range(n):\n        if s[i] != s[n-i-1]:\n            if s[i] < s[n-i-1]:\n                s = s[:i] + s[n-i-1] + s[i+1:]\n            else:\n                s = s[:n-i-1] + s[i] + s[i+1:]\n    return s\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 368,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l+=input()\n    white_weight=0\n    black_weight=0\n    for i in range(8):\n        for j in range(8):\n            if l[i][j]=='Q':\n                white_weight+=9\n            elif l[i][j]=='q':\n                black_weight+=9\n            elif l[i][j]=='R':\n                white_weight+=5\n            elif l[i][j]=='r':\n                black_weight+=5\n            elif l[i][j]=='B':\n                white_weight+=3\n            elif l[i][j]=='b':\n                black_weight+=3\n            elif l[i][j]=='N':\n                white_weight+=3\n            elif l[i][j]=='n':\n                black_weight+=3\n            elif l[i][j]=='P':\n                white_weight+=1\n            elif l[i][j]=='p':\n                black_weight+=1\n    if white_weight>black_weight:\n        print(\"White\")\n    elif white_weight<black_weight:\n        print(\"Black\")\n    else:\n        print(\"Draw\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 369,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    s=list(map(int,input())\n    s.append(0)\n    s.insert(0,0)\n    if s[n]==1:\n        return -1\n    for i in range(n,0,-1):\n        if s[i]==1:\n            return -1\n    for i in range(1,n+1):\n        if s[i]==0:\n            continue\n        else:\n            if i+m<=n:\n                s[i+m]=1\n    for i in range(n,0,-1):\n        if s[i]==1:\n            return -1\n    for i in range(1,n+1):\n        if s[i]==0:\n            continue\n        else:\n            if i+m<=n:\n                s[i+m]=1\n    for i in range(n,0,-1):\n        if s[i]==1:\n            return -1\n    for i in range(1,n+1):\n        if s[i]==0:\n            continue\n        else:\n            if i+m<=n:\n                s[i+m]=1\n    for i in range(n,0,-1):\n        if s[i]==1:\n            return -1\n    for i in range(1,n+1):\n        if s[i]==0:\n            continue\n        else:\n            if i+m<=n:\n                s[i+m]=1\n    for i in range(n,0,-1):\n        if s[i]==1:\n            return -1\n    for i in range(1,n+1):\n        if s[i]==0:\n            continue\n        else:\n            if i+m<=n:\n                s[i+m]=1\n    for i in range(n,0,-1):\n        if s[i]==1:\n            return -1\n    for i in range(1,n+1):\n        if s[i]==0:\n            continue\n        else:\n            if i+m<=n:\n                s[i+m]=1\n    for i in range(n,0,-1):",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 370,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k=int(input())\n    x,y=map(int,input().split())\n    if x==0 and y==0:\n        return -1\n    else:\n        x_min=abs(x)\n        y_min=abs(y)\n        x_max=abs(x)\n        y_max=abs(y)\n        if x_min>y_min:\n            x_min,y_min=y_min,x_min\n        if x_max<y_max:\n            x_max,y_max=y_max,x_max\n        if k<x_min+y_min:\n            return -1\n        elif k==x_min+y_min:\n            return 1\n        else:\n            s=2\n            if k>x_max+y_max:\n                s=2*(k-x_min-y_min)+2\n            else:\n                s=2*(k-x_min-y_min)+1\n            print(s)\n            print(x_max,y_max)\n            print(-x,y)\n            return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 371,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = m = int(input())\n    n = 1\n    while True:\n        if s % 4 == 0:\n            if s == 4 * n * (n + 1) * (n + 2) // 6:\n                return n\n        s -= 1\n        n += 1\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 372,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x_1,y_1,r_1=map(int,input().split())\n    x_2,y_2,r_2=map(int,input().split())\n    d=((x_1-x_2)**2+(y_1-y_2)**2)**0.5\n    if d>r_1+r_2:\n        return 0\n    elif d<abs(r_1-r_2):\n        return 3.141592653589793*(min(r_1,r_2)**2)\n    else:\n        a=r_1**2*3.141592653589793\n        b=r_2**2*3.141592653589793\n        x=(d**2+r_1**2-r_2**2)**0.5\n        y=(d**2+r_2**2-r_1**2)**0.5\n        return 0.5*a*b-0.5*x*y*(2*x*y+2*d*r_1*r_2-d**2)**0.5\n    return round(solution(input_string),6)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 373,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n == 1:\n        return 1\n    else:\n        for i in range(2, n):\n            if n % i != 0:\n                n -= i\n        return n\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 374,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    p=list(map(int,input().split())\n    a=list(map(int,input().split())\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 375,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    t = input()\n    count = 0\n    for i in range(n):\n        if s[i] != t[i]:\n            count += 1\n            if count > 1:\n                return 0\n    if count == 1:\n        return 2\n    else:\n        return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 376,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    banks = list(map(int, input().split()))\n    wires = []\n    for i in range(n-1):\n        u, v = map(int, input().split())\n        wires.append((u, v))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 377,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    if m==0:\n        return 1\n    elif m==n:\n        return 0\n    else:\n        return n-m+1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 378,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k,r=list(map(int,input().split()))\n    if r==10:\n        return 1\n    elif k%10==0:\n        return k//10\n    else:\n        return k//10+1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 379,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int, input().split())\n    grid=[]\n    for i in range(n):\n        grid.append(input())\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j]=='X':\n                if i==0 or j==0 or i==n-1 or j==m-1:\n                    return \"NO\"\n                if i>0 and grid[i-1][j]=='X' or j>0 and grid[i][j-1]=='X':\n                    return \"NO\"\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 380,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    xi, yi = list(map(int, input().split()))\n    xj, yj = list(map(int, input().split())\n    xk, yk = list(map(int, input().split())\n    if xi == xj == xk:\n        return 1\n    elif yi == yj == yk:\n        return 1\n    elif xi == xj or xj == xk or xk == xi:\n        return 2\n    else:\n        return 3\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 381,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k = int(input())\n    if k == 1:\n        print(\"YES\")\n        print(\"2 1\")\n        print(\"1 2\")\n        return\n    if k % 2 == 0:\n        print(\"NO\")\n        return\n    n = k + 1\n    m = k * (k - 1) // 2\n    print(\"YES\")\n    print(n, m)\n    for i in range(1, k + 1):\n        for j in range(i + 1, k + 1):\n            print(i, j)\n    for i in range(1, k):\n        print(i, i + 1)\n    for i in range(1, k):\n        print(i + 1, i + 2)\n    for i in range(1, k):\n        print(i + 1, i + 2)\n    for i in range(1, k):\n        print(i + 1, i + 2)\n    for i in range(1, k):\n        print(i + 1, i + 2)\n    for i in range(1, k):\n        print(i + 1, i + 2)\n    for i in range(1, k):\n        print(i + 1, i + 2)\n    for i in range(1, k):\n        print(i + 1, i + 2)\n    for i in range(1, k):\n        print(i + 1, i + 2)\n    for i in range(1, k):\n        print(i + 1, i + 2)\n    for i in range(1, k):\n        print(i + 1, i + 2)\n    for i in range(1, k):\n        print(i + 1, i + 2)\n    for i in range(1, k):\n        print(i + 1, i + 2)\n    for i in range(1, k):\n        print(i + 1, i + 2)\n    for i in range(1, k):\n        print(i + 1, i + 2)\n    for i in range(1, k):\n       ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 382,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, q = map(int, input().split())\n    s = input()\n    t = input()\n    for i in range(q):\n        l, r = map(int, input().split())\n        count = 0\n        for i in range(l, r-m+1):\n            if s[i:i+m] == t:\n                count += 1\n        print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 383,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k, d = map(int, input().split())\n    if d == 1:\n        return 1\n    if d == k:\n        return 1\n    if d > k:\n        return 0\n    if k == 1:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return k\n    if n == 3:\n        return k * (k + 1) // 2\n    if n == 4:\n        return k * (k + 1) * (2 * k + 1) // 6\n    if n == 5:\n        return k * (k + 1) * (2 * k + 1) * (3 * k + 2) // 6\n    if n == 6:\n        return k * (k + 1) * (2 * k + 1) * (3 * k + 2) * (4 * k + 3) // 24\n    if n == 7:\n        return k * (k + 1) * (2 * k + 1) * (3 * k + 2) * (4 * k + 3) * (5 * k + 4) // 120\n    if n == 8:\n        return k * (k + 1) * (2 * k + 1) * (3 * k + 2) * (4 * k + 3) * (5 * k + 4) * (6 * k + 5) // 720\n    if n == 9:\n        return k * (k + 1) * (2 * k + 1) * (3 * k + 2) * (4 * k + 3) * (5 * k + 4) * (6 * k + 5) * (7 * k + 6) // 5040\n    if n == 10:\n        return k * (k + 1) * (2 * k + 1) * (3 * k + 2) * (4 * k + 3) * (5 * k + 4) * (6 * k + 5) * (7 * k + 6) * (8 * k + 7) // 403",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 384,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    row=input()\n    count=0\n    result=[]\n    temp=0\n    for i in range(n):\n        if row[i]=='B':\n            count+=1\n        else:\n            if count!=0:\n                result.append(count)\n                count=0\n    if count!=0:\n        result.append(count)\n    return len(result),' '.join(str(i) for i in result)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 385,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, p = list(map(int, input().split())); x, v, s, l, r = [0]*n, [], input(), list(range(-1, n)), list(range(1, n+2))\n    for i in range(n):\n        if s[i] == '(': x[i] = 1; l[i] = i-1; r[i] = i+1\n        else: x[i] = -1; l[i] = i+1; r[i] = i-1\n    for _ in range(m):\n        if v[i] == 'L': p = max(p-1, 0)\n        elif v[i] == 'R': p = min(p+1, n-1)\n        else:\n            if x[p] == 1:\n                for j in range(l[p], r[p]+1): x[j] = 0\n            else:\n                for j in range(l[p], r[p]+1): x[j] = 1\n            p = max(p-1, 0) if x[p] == 1 else min(p+1, n-1)\n    return ''.join(['(' if x[i] == 1 else ')' for i in range(n) if x[i] != 0]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 386,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    T=int(input())\n    queries=[]\n    for i in range(T):\n        query,answer=input_string.split()\n        queries.append((query,answer)\n    return queries\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 387,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b= list(map(int,input().split()))\n    count=0\n    for i in range(1,a+b+1):\n        if (a+b)%i==0:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 388,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    strings = input().split()\n    names = []\n    for i in range(n):\n        names.append(chr(65+i))\n    for i in range(n-k+1, n):\n        if strings[i-n+k] == \"YES\":\n            continue\n        else:\n            for j in range(i, i+k):\n                if names[j] in names[:i]:\n                    names[j] = chr(65+i) + chr(97+i)\n    return \" \".join(names)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 389,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b = map(int, input().split())\n    if a == b:\n        return 0\n    if a % 2 == 0 and b % 2 == 0:\n        return 1\n    elif a % 3 == 0 and b % 3 == 0:\n        return 1\n    elif a % 5 == 0 and b % 5 == 0:\n        return 1\n    elif a % 2 == 0 and b % 3 == 0:\n        return 2\n    elif a % 2 == 0 and b % 5 == 0:\n        return 2\n    elif a % 3 == 0 and b % 5 == 0:\n        return 2\n    elif a % 2 == 0 and b % 5 == 0:\n        return 2\n    elif a % 3 == 0 and b % 5 == 0:\n        return 2\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 390,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,a,b=list(map(int,input().split()))\n    c=list(map(int,input().split())\n    if n%2==0:\n        if c[n//2]==0:\n            return a*n//2\n        else:\n            return -1\n    else:\n        if c[n//2]==0:\n            return a*(n//2)+b\n        else:\n            return -1\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 391,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    K = int(input())\n    if K == 1:\n        return -1\n    elif K == 2:\n        return \"bb\\nww\\nbb\\nww\"\n    else:\n        return \"Not implemented yet\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 392,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    for i in range(n, 0, -1):\n        if not any(i % j**2 == 0 for j in range(2, int(i**0.5)+1)):\n            return i\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 393,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n == 1:\n        return \"Yes\"\n    elif n == 2:\n        return \"No\"\n    else:\n        for i in range(1, n-1):\n            if input_string[i] == \"1\" and input_string[i-1] == \"1\" and input_string[i+1] == \"1\":\n                return \"No\"\n        return \"Yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 394,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    k_set = set()\n    for i in range(1, n+1):\n        k_set.add(i)\n        for j in range(1, n):\n            if a[j] - a[j-1] != a[i] - a[0]:\n                k_set.discard(i)\n                break\n    return len(k_set), sorted(k_set)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 395,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    mas = [int(i) for i in input().split()]\n    mas.sort(reverse=True)\n    if mas[0] == mas[1] == mas[2]:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 396,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split())\n    count=0\n    for i in range(a,b+1):\n        if i==1:\n            count+=1\n        else:\n            for j in range(2,i+1):\n                if i%j==0:\n                    if j==2 or j==3:\n                        count+=1\n                    else:\n                        break\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 397,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=[int(i) for i in input().split()]\n    if n==1:\n        return 0\n    elif k==0:\n        return n//2\n    else:\n        return (n-k)//2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 398,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = list(map(int, input().split()))\n    n = a[0]\n    a = a[1:]\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if a[i] + a[j] > a[k] and a[i] + a[k] > a[j] and a[j] + a[k] > a[i]:\n                    return \"YES\"\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 399,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x, y = map(int, input().split())\n    if x == 0:\n        return \"Yes\" if y == 1 else \"No\"\n    if y == 0:\n        return \"Yes\" if x == 1 else \"No\"\n    if x % 2 == 0 and y % 2 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 400,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=list(map(int,input().split()))\n    a=list(map(int,input().split())\n    max_rating=0\n    for i in range(n):\n        if a[i]<100:\n            max_rating+=a[i]//10\n            k-=a[i]%10\n    if k>0:\n        max_rating+=k//10\n    return max_rating\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 401,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, M = map(int, input().split())\n    A = list(map(int, input().split())\n    B = list(map(int, input().split())\n    min_pretty = float('inf')\n    for i in range(1, 10**N):\n        pretty = False\n        for j in range(N):\n            if str(i)[j] in A:\n                pretty = True\n                break\n        for j in range(M):\n            if str(i)[j] in B:\n                pretty = True\n                break\n        if pretty:\n            min_pretty = min(min_pretty, i)\n    return min_pretty\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 402,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=[int(i) for i in input().split()]\n    problems=[]\n    for i in range(1,n+1):\n        problems.append(5*i)\n    problems.sort()\n    count=0\n    time=0\n    for i in problems:\n        if time+i<=k:\n            time+=i\n            count+=1\n        else:\n            break\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 404,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    count = 0\n    for i in range(1, 10**18+1):\n        if i % n == 0:\n            count += 1\n        elif i % 2 == 0 and i*2 % n == 0:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 405,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    bumpers = input()\n    count = 0\n    for i in range(n):\n        if bumpers[i] == '>':\n            if i == n-1 or bumpers[i+1] == '<':\n                count += 1\n        elif bumpers[i] == '<':\n            if i == 0 or bumpers[i-1] == '>':\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 406,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, v, ps, pp = int(input()), 0, 0, 0\n    for i in range(n):\n        l = int(input())\n        if l % 2 == 0:\n            ps += l\n            pp += l\n        else:\n            ps += l - 1\n            pp += l - 1\n    return max(ps, pp)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 407,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    numbers = []\n    for i in range(n):\n        numbers.append(input())\n    return numbers\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 408,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b = list(map(int, input().split(' ')))\n    if a >= b:\n        return b\n    else:\n        return a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 409,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    if \"AB\" in s and \"BA\" in s:\n        if s.find(\"AB\") < s.find(\"BA\"):\n            if s.find(\"BA\") > s.find(\"AB\") + 2:\n                return \"YES\"\n        elif s.find(\"BA\") < s.find(\"AB\") + 2:\n            if s.find(\"AB\") > s.find(\"BA\") + 2:\n                return \"YES\"\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 410,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    k = int(input())\n    b = list(map(int, input().split())\n    queue = [i for i in range(1, n+1)]\n    for i in range(n):\n        if a[i] > a[i+1]:\n            queue.pop(i)\n            a[i] += a[i+1]\n    if len(queue) != k:\n        return \"NO\"\n    else:\n        return \"YES\"\n    for i in range(k):\n        if b[i] == a[i]:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 411,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r, b = map(int,input().split())\n    rebels = []\n    bases = []\n    for i in range(r):\n        x, y = map(int, input().split())\n        rebels.append((x, y))\n    for i in range(b):\n        x, y = map(int, input().split())\n        bases.append((x, y))\n    # Your code goes here\n    return \"Yes\" if perfect_matching(rebels, bases) else \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 413,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split());a=0\n    while n<m:\n        if n%2==0:\n            n*=2\n            a+=1\n        else:\n            n-=1\n            a+=1\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 414,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    segments = []\n    for i in range(n):\n        l, r = map(int, input().split())\n        segments.append((l, r))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 415,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    r = list(map(int, input().split()))\n    max_period = 0\n    current_period = 0\n    for i in range(n):\n        if r[i] >= 100:\n            current_period += 1\n        else:\n            if current_period > max_period:\n                max_period = current_period\n            current_period = 0\n    if current_period > max_period:\n        max_period = current_period\n    print(max_period)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 416,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    series = list(input())\n    count = 0\n    max_count = 0\n    for i in range(n):\n        if series[i] == \"N\":\n            count += 1\n        else:\n            count = 0\n        max_count = max(max_count, count)\n    if max_count >= k:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 417,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,X,D = map(int,input().split())\n    if N == 1:\n        return 1\n    elif N == 2:\n        return 2\n    else:\n        return (N*(N-1))//2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 418,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    participants=[]\n    for i in range(n):\n        name,before,after=input().split()\n        before=int(before)\n        after=int(after)\n        participants.append((name,before,after)\n    for i in range(n):\n        if participants[i][1]<2400 and participants[i][2]>2400:\n            return \"YES\"\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 419,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    i, k = 0, int(input(), 2)\n    count = 0\n    while k > 0:\n        if k & 1:\n            count += 1\n        k >>= 1\n        i += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 420,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = tuple(map(int, str.split(input())))\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split()))\n    b = []\n    for i in range(n):\n        b.append(a[i])\n    for i in range(n):\n        b.append(a[n-i-1])\n    return len(b)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 421,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r = lambda: map(int, input().split())\n    n = int(input())\n    orders = [list(r()) for _ in range(n)]\n    orders.sort(key=lambda x: x[1])\n    count = 0\n    end_time = -1\n    for l, r in orders:\n        if l > end_time:\n            count += 1\n            end_time = r\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 422,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    x = list(map(int, input().split())\n    y = list(map(int, input().split())\n    for i in range(n):\n        if x[i] > k or y[i] > k:\n            return \"NO\"\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 423,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    a = list(map(int, input().split())\n    for i in range(n):\n        if a[i] == '?':\n            a[i] = 0\n    if a[0] == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 424,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x2 = int(input())\n    x0 = 1\n    while x2 % 2 == 0:\n        x0 += 1\n        x2 //= 2\n    while x2 % 3 == 0:\n        x0 += 1\n        x2 //= 3\n    while x2 % 5 == 0:\n        x0 += 1\n        x2 //= 5\n    while x2 % 7 == 0:\n        x0 += 1\n        x2 //= 7\n    return x0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 425,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    if k == 0:\n        return 0\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 2\n    if n == 4:\n        return 2\n    if n == 5:\n        return 3\n    if n == 6:\n        return 3\n    if n == 7:\n        return 3\n    if n == 8:\n        return 3\n    if n == 9:\n        return 3\n    if n == 10:\n        return 4\n    if n == 11:\n        return 4\n    if n == 12:\n        return 4\n    if n == 13:\n        return 4\n    if n == 14:\n        return 4\n    if n == 15:\n        return 4\n    if n == 16:\n        return 4\n    if n == 17:\n        return 5\n    if n == 18:\n        return 5\n    if n == 19:\n        return 5\n    if n == 20:\n        return 5\n    if n == 21:\n        return 5\n    if n == 22:\n        return 5\n    if n == 23:\n        return 5\n    if n == 24:\n        return 5\n    if n == 25:\n        return 6\n    if n == 26:\n        return 6\n    if n == 27:\n        return 6\n    if n == 28:\n        return 6\n    if n == 29:\n        return 6\n    if n == 30:\n        return 6\n    if n == 31:\n        return 6\n    if n == 32:\n        return 6\n    if n == 33:\n        return 7\n    if n == 34:\n        return 7\n    if n == 35:\n        return 7\n    if n == 3",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 426,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=[int(i) for i in input().split()]\n    s=input()\n    if n==1:\n        return s\n    if k==0:\n        return s\n    if s[0]=='0':\n        return '0'*(n-1)+'1'\n    else:\n        for i in range(n-1):\n            if s[i]=='0':\n                s=s[:i]+'1'+s[i+1:]\n                k-=1\n        if k==0:\n            return s\n        else:\n            for i in range(n-1,0,-1):\n                if s[i]=='9':\n                    s=s[:i]+'0'+s[i+1:]\n                    k-=1\n                    if k==0:\n                        break\n            return s\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 427,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,x,y=map(int,input().split())\n    if x==2 or y==2:\n        return 1\n    if x==3 or y==3:\n        return 2\n    if x==5 or y==5:\n        return 3\n    if x==7 or y==7:\n        return 4\n    if x==11 or y==11:\n        return 5\n    if x==13 or y==13:\n        return 6\n    if x==17 or y==17:\n        return 7\n    if x==19 or y==19:\n        return 8\n    if x==23 or y==23:\n        return 9\n    if x==29 or y==29:\n        return 10\n    if x==31 or y==31:\n        return 11\n    if x==37 or y==37:\n        return 12\n    if x==41 or y==41:\n        return 13\n    if x==43 or y==43:\n        return 14\n    if x==47 or y==47:\n        return 15\n    if x==53 or y==53:\n        return 16\n    if x==59 or y==59:\n        return 17\n    if x==61 or y==61:\n        return 18\n    if x==67 or y==67:\n        return 19\n    if x==71 or y==71:\n        return 20\n    if x==73 or y==73:\n        return 21\n    if x==79 or y==79:\n        return 22\n    if x==83 or y==83:\n        return 22\n    if x==89 or y==89:\n        return 23\n    if x==97 or y==97:\n        return 24\n    if x==101 or y==101:\n        return 25\n    if x==103 or y==103:\n        return 26\n    if x==107 or y==107",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 428,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    mod, sx, sy, dx, dy, t = list(map(int, input().split()))\n    x, y = sx, sy\n    for _ in range(t):\n        x = (x + dx - 1) % mod + 1\n        y = (y + dy - 1) % mod + 1\n        dx += x + y\n        dy += x + y\n    return x, y\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 429,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    if len(s) < 26:\n        return -1\n    for i in range(len(s)):\n        if s[i] == '?':\n            s = s[:i] + chr(ord('A') + i % 26) + s[i+1:]\n    if len(set(s)) == 26:\n        return s\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 430,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    weights = list(map(int, input().split()))\n    if sum(weights) % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 431,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    floors = []\n    for i in range(n):\n        floors.append(list(map(int, input().strip()))\n    total_time = 0\n    for i in range(n):\n        for j in range(m):\n            if floors[i][j] == 1:\n                total_time += 2\n                floors[i][j] = 0\n                if i > 0:\n                    floors[i-1][j] = 1\n                if i < n-1:\n                    floors[i+1][j] = 1\n    return total_time\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 432,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    c = list(map(int, input().split()))\n    a = list(map(int, input().split())\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 433,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, a, b = map(int, input().split())\n    if b == 0:\n        return a\n    elif b > 0:\n        return (a + b - 1) % n + 1\n    else:\n        return (a - abs(b)) % n + 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 434,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    count = 0\n    i = 0\n    while i < n:\n        if a[i] == -1:\n            i += 1\n            continue\n        j = i + 1\n        while j < n and a[j] == -1:\n            j += 1\n        if j == n:\n            break\n        diff = a[j] - a[i]\n        while j < n and a[j] == a[i] + diff * (j - i):\n            j += 1\n        count += 1\n        i = j\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 435,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int,input().split())\n    string = input()\n    max_beauty = 0\n    for i in range(n):\n        if string[i] == 'a':\n            max_beauty = max(max_beauty, len(string[i:].replace('b', 'a', k)) + len(string[:i].replace('a', 'b', k)) + 1)\n        else:\n            max_beauty = max(max_beauty, len(string[i:].replace('a', 'b', k)) + len(string[:i].replace('b', 'a', k)) + 1)\n    return max_beauty\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 436,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    alice_seats = a[0]\n    total_seats = sum(a)\n    if alice_seats < total_seats // 2:\n        print(0)\n        return\n    for i in range(1, n):\n        if a[i] * 2 > alice_seats:\n            print(i+1)\n            print(\" \".join(str(x+1) for x in range(i+1))\n            break\n    else:\n        print(1)\n        print(1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 437,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=int(input())\n    if a==1:\n        return 1.000000000000\n    else:\n        return 1.50000000000\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 438,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n == 1:\n        print(1)\n        print(n)\n        return\n    if n == 2:\n        print(1)\n        print(1, 1)\n        return\n    if n % 3 == 0:\n        print(n // 3)\n        for i in range(n // 3):\n            print(3, end=\" \")\n        print()\n        return\n    if n % 2 == 0:\n        print(n // 2)\n        for i in range(n // 2):\n            print(2, end=\" \")\n        print()\n        return\n    print(n)\n    for i in range(n):\n        print(1, end=\" \")\n    print()\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 439,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    m=int(input())\n    return m%(2**n)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 440,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    for i in range(len(s)-1):\n        if s[i] in vowels and s[i+1] in vowels:\n            s = s[:i] + s[i+1:]\n    return s\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 441,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, a, b = list(map(int, input().split()))\n    seats = list(input())\n    max_students = 0\n    for i in range(n):\n        if seats[i] == \".\":\n            if i == 0 or seats[i-1] == \"*\":\n                if i == n-1 or seats[i+1] == \"*\":\n                    max_students += 1\n                elif seats[i+1] == \".\":\n                    max_students += 1\n                    if i == n-2 or seats[i+2] == \"*\":\n                        max_students += 1\n    return max_students\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 442,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r=int(input())\n    x=0\n    y=0\n    while x<=r:\n        y=0\n        while y<=r:\n            if x**2+2*x*y+x+1==r:\n                return x,y\n            y+=1\n        x+=1\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 443,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    total_balloons = sum(a)\n    if total_balloons % 2 != 0:\n        return -1\n    for i in range(n):\n        if a[i] % 2 != 0:\n            return -1\n    k = total_balloons // 2\n    packets_to_give = 0\n    for i in range(n):\n        if a[i] >= k:\n            packets_to_give += 1\n            k -= a[i]\n        if k == 0:\n            break\n    if k != 0:\n        return -1\n    return packets_to_give, i+1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 444,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n == 1:\n        print(1)\n        print(1)\n        return\n    for i in range(1, n):\n        if n % i == 0:\n            print(i)\n            for j in range(i):\n                print(n//i, end=\" \")\n            return\n# Test your code with this input\ninput_string = \"27\"\nsolution(input_string) ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 445,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    max_size = 0\n    max_subset = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if is_simple(a[i]+a[j]):\n                max_size = max(max_size, 2)\n                max_subset = [a[i], a[j]]\n    return max_size, max_subset\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 446,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    q=int(input())\n    for i in range(1,q+1):\n        if bin(i)[2:].count('1')==1 and bin(i)[2:].count('0')==1:\n            print(i)\n            break\n    else:\n        print(\"No beautiful numbers found\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 447,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    m, d = list(map(int, input().split()))\n    a, b = list(map(int, input().split())\n    count = 0\n    for i in range(a, b+1):\n        if i % m == 0 and str(i)[d] == str(d):\n            count += 1\n    return count % (10**9 + 7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 448,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    a = list(map(int, input().split())\n    line = [i for i in range(1, n+1)]\n    while len(line) > 0:\n        for i in range(len(line)):\n            if a[line[i] >= m:\n                line.remove(line[i])\n                line.append(line.pop(0)\n            else:\n                a[line[i] -= m\n                if a[line[i] == 0:\n                    line.remove(line[i])\n    return line[-1]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 449,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = int(input())\n    bills = [1, 5, 10, 20, 100]\n    count = 0\n    for bill in bills:\n        count += s // bill\n        s %= bill\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 450,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=list(map(int,input().split()))\n    if k==0:\n        return 1\n    elif k==n:\n        return 0\n    elif k==1:\n        return n\n    else:\n        return (n*(n-1)*(n-2)*(n-3)*(n-4)//2)%100000007\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 451,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = [int(x) for x in input().strip().split(\\\" \\\")]\n    beauty = [int(x) for x in input().strip().split(\\\" \\\")]\n    colors = input().strip()\n    max_beauty = -1\n    for i in range(n):\n        for j in range(i+1, n):\n            if colors[i] != colors[j]:\n                if colors[i] == 'R' and colors[j] == 'W':\n                    max_beauty = max(max_beauty, beauty[i] + beauty[j])\n                elif colors[i] == 'W' and colors[j] == 'O':\n                    max_beauty = max(max_beauty, beauty[i] + beauty[j])\n                elif colors[i] == 'O' and colors[j] == 'R':\n                    max_beauty = max(max_beauty, beauty[i] + beauty[j])\n    if max_beauty == -1:\n        return -1\n    else:\n        return max_beauty\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 452,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    p, q = list(map(int, input().split()))\n    n = int(input())\n    a = list(map(int, input().split())\n    if n == 1:\n        return \"YES\" if p == a[0] * q else \"NO\"\n    else:\n        a_n = a[-1]\n        a_n_1 = a[-2]\n        a_n_2 = sum(a[:-1])\n        if a_n_1 == 1:\n            return \"YES\" if p == q * a_n_2 else \"NO\"\n        else:\n            return \"YES\" if p == a_n_2 * a_n_1 + q * (a_n - 1) else \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 453,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = input()\n    if t[0] == '|' and t[2] == '|' and t[4] == '|':\n        return \"Impossible\"\n    elif t[0] == '|' and t[2] == '|' and t[4] == '=':\n        return \"|+|=|\" + t[5:]\n    elif t[0] == '|' and t[2] == '+' and t[4] == '|':\n        return \"|+|=\" + t[3:]\n    elif t[0] == '|' and t[2] == '=' and t[4] == '|':\n        return \"|+|=\" + t[3:]\n    elif t[0] == '|' and t[2] == '=' and t[4] == '=':\n        return \"|+|=\" + t[3:]\n    elif t[0] == '+' and t[2] == '|' and t[4] == '|':\n        return \"|+|=\" + t[3:]\n    elif t[0] == '+' and t[2] == '|' and t[4] == '=':\n        return \"|+|=\" + t[3:]\n    elif t[0] == '+' and t[2] == '=' and t[4] == '|':\n        return \"|+|=\" + t[3:]\n    elif t[0] == '=' and t[2] == '|' and t[4] == '|':\n        return \"|+|=\" + t[3:]\n    elif t[0] == '=' and t[2] == '|' and t[4] == '=':\n        return \"|+|=\" + t[3:]\n    elif t[0] == '=' and t[2] == '+' and t[4] == '|':\n        return \"|+|=\" + t[3:]\n    elif t[0] == '=' and t[2] == '=' and t[4] == '|':\n        return \"|+|=\" + t[3:]\n    elif t[0] == '|' and t[2] == '+' and t[4] == '=",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 454,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    MOD = 10**9 + 7\n    count = 0\n    for i in range(n):\n        if i % 2 == k % 2:\n            count += 1\n    return count % MOD\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 455,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    points=[]\n    for i in range(n):\n        x,y=map(int,input().split())\n        points.append((x,y))\n    m=len(points)\n    d=[]\n    for i in range(m):\n        d.append(0)\n    for i in range(m-1):\n        for j in range(i+1,m):\n            d[i]=abs(points[j][0]-points[i][0])+abs(points[j][1]-points[i][1])\n    for i in range(m-1):\n        for j in range(i+1,m):\n            if d[i]>d[j]:\n                d[i],d[j]=d[j],d[i]\n    for i in range(m-1):\n        for j in range(i+1,m):\n            if d[i]==d[j]:\n                if points[i][0]>points[j][0] or points[i][1]>points[j][1]:\n                    d[i],d[j]=d[j],d[i]\n    for i in range(m-1):\n        for j in range(i+1,m):\n            if d[i]==d[j]:\n                if points[i][0]>points[j][0] and points[i][1]>points[j][1]:\n                    d[i],d[j]=d[j],d[i]\n    for i in range(m-1):\n        for j in range(i+1,m):\n            if d[i]==d[j]:\n                if points[i][0]>points[j][0] and points[i][1]<points[j][1]:\n                    d[i],d[j]=d[j],d[i]\n    print(m)\n    for i in range(m):\n        print(d[i],end=\" \")\n    for i in range(n):\n        print(\"\")\n        for j in range(m):\n            if points[i][0]<points[j][0]:\n                print(\"R\",end=\"\")\n           ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 456,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    n = len(s)\n    i = 0\n    while i < n:\n        if s[i:i+3] == \"ogo\":\n            s = s[:i] + \"***\" + s[i+3:]\n            i += 3\n        else:\n            i += 1\n    return s\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 457,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=[int(x) for x in input().split()]\n    def prime(x):\n        primes=[]\n        for i in range(2,x+1):\n            if all(i%j!=0 for j in range(2,i)):\n                primes.append(i)\n        return primes\n    def g(x,p):\n        k=0\n        while x%p==0:\n            k+=1\n            x//=p\n        return p**k\n    def f(x,y):\n        return reduce(lambda a,b:a*b,map(lambda p:g(y,p),prime(x)) if x!=1 else 1\n    return str(reduce(lambda a,b:a*b,map(lambda y:f(x,y)%(10**9+7),range(1,m+1)))%(10**9+7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 458,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b, c = map(int, input().split())\n    def s(x):\n        return sum(int(digit) for digit in str(x))\n    x = 1\n    count = 0\n    while x < 10**9:\n        if x == b*s(x)**a + c:\n            print(x, end=' ')\n            count += 1\n        x += 1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 459,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = [int(w) for w in input().split()]\n    for i in range(len(a)):\n        if a[i] == a[(i+1)%24]:\n            return \"YES\"\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 460,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    p,x,y=map(int,input().split())\n    i=p%475\n    for _ in range(25):\n        i=(i*96+42)%475\n        print(26+i)\n    tshirts=[26+i for i in range(25)]\n    if p in tshirts:\n        return 0\n    else:\n        count=0\n        while x<y:\n            x+=100\n            count+=1\n        return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 461,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input()) - 1\n    a, b, c = map(int, input_string.split())\n    return min(a + b, a + c, b + c)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 462,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    [a,b,c]=sorted(map(int,input().split()))\n    return max(a,b,c)-min(a,b,c)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 463,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, x = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] & x == a[j] & x:\n                return count\n        count += 1\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 464,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r, c = map(int, input().split())\n    matrix = [list(input()) for _ in range(r)]\n    for i in range(r):\n        for j in range(c):\n            if matrix[i][j] == '*':\n                if i == 0 or i == r-1 or j == 0 or j == c-1:\n                    return \"NO\"\n                if i > 0 and matrix[i-1][j] == '*':\n                    return \"NO\"\n                if i < r-1 and matrix[i+1][j] == '*':\n                    return \"NO\"\n                if j > 0 and matrix[i][j-1] == '*':\n                    return \"NO\"\n                if j < c-1 and matrix[i][j+1] == '*':\n                    return \"NO\"\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 465,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, a, b = map(int, input().split())\n    if a + b > n * (n - 1) // 2:\n        return \"NO\"\n    adj_matrix = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(i + 1, n):\n            adj_matrix[i][j] = 1\n            adj_matrix[j][i] = 1\n    for i in range(n):\n        adj_matrix[i][i] = 0\n    return \"YES\\n\" + \"\\n\".join(\"\".join(map(str, row)) for row in adj_matrix)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 466,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    c, d = map(int, input().split())\n    n, m, k = map(int, input().split())\n    return max(c, d) * n + k\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 467,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    if len(set(s)) != 27:\n        return \"Impossible\"\n    grid = [['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']]\n    for i in range(13):\n        for j in range(13):\n            if i == 0 or j == 0 or i == 12 or j == 12:\n                grid[i].append('X')\n            else:\n                grid[i].append(chr(ord('A') + i + j))\n    for i in range(13):\n        for j in range(13):\n            if i == 0 or j == 0 or i == 12 or j == 12:\n                grid[i].append('X')\n            else:\n                grid[i].append(chr(ord('A') + i + j))\n    for i in range(13):\n        for j in range(13):\n            if i == 0 or j == 0 or i == 12 or j == 12:\n                grid[i].append('X')\n            else:\n                grid[i].append(chr(ord('A') + i + j))\n    for i in range(13):\n        for j in range(13):\n            if i == 0 or j == 0 or i == 12 or j == 12:\n                grid[i].append('X')\n            else:\n                grid[i].append(chr(ord('A') + i + j))\n    for i in range(13):\n        for j in range(13):\n            if i == 0 or j == 0 or i == 12 or j == 12:\n                grid[i].append('X')\n            else:\n                grid[i].append(chr(ord('A') + i + j))\n    for i in range(13):\n        for j in range(13",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 468,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x, y = list(map(int, input().split()))\n    if x**y > y**x:\n        print('>')\n    elif x**y < y**x:\n        print('<')\n    else:\n        print('=')\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 469,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r, h = map(int, input().split())\n    return 2*h - 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 470,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = list(map(int, input().split()))\n    t.sort()\n    return sum(t[:2]) + t[-1]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 471,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,p = list(map(int,input().split()))\n    checkpoints = list(map(int,input().split())\n    min_distance = float('inf')\n    for i in range(n):\n        for j in range(i+1,n):\n            min_distance = min(min_distance,abs(checkpoints[i]-p)+abs(checkpoints[j]-p))\n    return min_distance\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 472,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = input()\n    x = 1\n    while True:\n        if x*x + x*sum(int(digit) for digit in str(x)) - n == 0:\n            return x\n        elif x*x + x*sum(int(digit) for digit in str(x)) - n > 0:\n            return -1\n        x += 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 473,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s1=input()\n    s2=input()\n    s1=s1.split(\":\")\n    s2=s2.split(\":\")\n    s1=int(s1[0])*60+int(s1[1])\n    s2=int(s2[0])*60+int(s2[1])\n    p=s1-s2\n    if p<0:\n        p=p+24*60\n    p=p//60\n    if p<10:\n        p=\"0\"+str(p)\n    else:\n        p=str(p)\n    p=p+\":\"\n    p=p+str(s1%60)\n    return p\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 474,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    max_length = 0\n    max_mean = 0\n    current_length = 1\n    current_mean = a[0]\n    for i in range(1, n):\n        if a[i] == a[i-1]:\n            current_length += 1\n        else:\n            current_length = 1\n        current_mean = (current_mean * (current_length - 1) + a[i]) / current_length\n        if current_mean > max_mean:\n            max_mean = current_mean\n            max_length = current_length\n    return max_length\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 475,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k = map(int, input().split())\n    if k == 0:\n        return m\n    elif k == n-1:\n        return m**n\n    else:\n        return (m**(k+1) - 1) * (m**(n-k-1) - 1) % 998244353\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 476,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    if '1' in s or '4' in s or '14' in s or '144' in s:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 477,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, i, j, a, b = map(int, input().split())\n    corners = [(1, m), (n, 1), (n, m), (1, 1)]\n    if (i + a, j + b) in corners or (i - a, j - b) in corners or (i + a, j - b) in corners or (i - a, j + b) in corners:\n        return 1\n    elif (i + 2*a, j + 2*b) in corners or (i - 2*a, j - 2*b) in corners or (i + 2*a, j - 2*b) in corners or (i - 2*a, j + 2*b) in corners:\n        return 2\n    else:\n        return \"Poor Inna and pony!\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 478,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    count = 0\n    for i in range(1, n-1):\n        if s[i] == chr(ord(s[i-1])+1):\n            count += 1\n            s = s[:i-1] + s[i+1:]\n    if s[0] == chr(ord(s[1])-1):\n        count += 1\n        s = s[1:]\n    if s[-1] == chr(ord(s[-2])-1):\n        count += 1\n        s = s[:-1]\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 479,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: list(map(int, input().split()))\n    n, k = f()\n    a = f()\n    q = f()[0]\n    bills = [0] * n\n    for i in range(n):\n        bills[i] = a[i]\n    for i in range(n - 1):\n        bills[i + 1] += bills[i]\n    for i in range(q):\n        x = f()[0]\n        if x > bills[-1]:\n            print(-1)\n        else:\n            l, r = 0, n - 1\n            while l < r:\n                mid = (l + r) // 2\n                if bills[mid] <= x < bills[mid + 1]:\n                    break\n                elif bills[mid] < x:\n                    l = mid + 1\n                else:\n                    r = mid\n            print(bills[mid + 1] // x)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 480,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s,x1,x2=[int(i) for i in input().split()]\n    t1,t2=[int(i) for i in input().split()]\n    p,d=[int(i) for i in input().split()]\n    if x1>x2:\n        x1,x2=x2,x1\n    if d==1:\n        if x1<p<x2:\n            return (x2-x1)/t2+(x2-p)/t1+(p-x1)/t2+(x2-x1)/t1\n        else:\n            return (x2-x1)/t2+(x2-p)/t1+(s-x1)/t2+(x2-s)/t1\n    else:\n        if x1>p>x2:\n            return (x1-x2)/t2+(x2-p)/t1+(x1-x2)/t2+(x1-s)/t1\n        else:\n            return (x1-x2)/t2+(x2-p)/t1+(s-x2)/t2+(x1-s)/t1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 481,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, x = [int(i) for i in input().split()]\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i*j == x:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 482,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    if k > 26:\n        return \"IMPOSSIBLE\"\n    if n == 1:\n        return \"a\" * n\n    if k == 1:\n        return \"a\" * k\n    if k == n:\n        return \"\".join(chr(ord('a') + i) for i in range(k))\n    if k == 26:\n        return \"\".join(chr(ord('a') + i) for i in range(n))\n    if k == 2:\n        return \"a\" + \"b\" * (n - 2)\n    if k == n - 1:\n        return \"a\" + \"b\" * (n - 2) + \"z\"\n    if k == n - 2:\n        return \"a\" + \"b\" * (n - 3) + \"c\"\n    if k == n - 3:\n        return \"a\" + \"b\" * (n - 4) + \"c\" + \"d\"\n    if k == n - 4:\n        return \"a\" + \"b\" * (n - 5) + \"c\" + \"d\" + \"e\"\n    if k == n - 5:\n        return \"a\" + \"b\" * (n - 6) + \"c\" + \"d\" + \"e\" + \"f\"\n    if k == n - 6:\n        return \"a\" + \"b\" * (n - 7) + \"c\" + \"d\" + \"e\" + \"f\" + \"g\"\n    if k == n - 7:\n        return \"a\" + \"b\" * (n - 8) + \"c\" + \"d\" + \"e\" + \"f\" + \"g\" + \"h\"\n    if k == n - 8:\n        return \"a\" + \"b\" * (n - 9) + \"c\" + \"d\" + \"e\" + \"f\" + \"g\" + \"h\" + \"i\"\n    if k == n - 9:\n        return \"a\" + \"b\" * (n - 10) + \"c\" + \"d\" + \"e\" + \"f",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 483,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l=list(input())\n    x=list(map(int,input().split())\n    for i in range(len(x)):\n        if l[i]=='L':\n            x[i]=-x[i]\n    x.sort()\n    for i in range(len(x)-1):\n        if x[i+1]-x[i]==1:\n            return 1\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 484,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, a, b = list(map(int, input().split(' ')))\n    seals = []\n    for i in range(n):\n        x, y = list(map(int, input().split(' '))\n        seals.append((x, y))\n    seals.sort(key=lambda x: x[0]*x[1], reverse=True)\n    max_area = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            area = min(seals[i][0], seals[j][0]) * min(seals[i][1], seals[j][1])\n            if area > max_area:\n                max_area = area\n    return max_area\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 485,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    points = []\n    for i in range(4*n+1):\n        x, y = map(int, input().split())\n        points.append((x, y))\n    x_min = min(points, key=lambda x: x[0])[0]\n    x_max = max(points, key=lambda x: x[0])[0]\n    y_min = min(points, key=lambda x: x[1])[1]\n    y_max = max(points, key=lambda x: x[1])[1]\n    for point in points:\n        if point[0] not in range(x_min, x_max+1) and point[1] not in range(y_min, y_max+1):\n            return point\n# End of code\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 486,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    n = int(s)\n    max_product = 0\n    for i in range(1, n+1):\n        product = 1\n        for digit in str(i):\n            product *= int(digit)\n        max_product = max(max_product, product)\n    return max_product\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 487,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    k = max(a)\n    while True:\n        if sum(a) < k * n:\n            k += 1\n        else:\n            break\n    return k\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 488,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    count=0\n    i=0\n    while i<len(s)-1:\n        if s[i]==s[i+1]:\n            count+=1\n            i+=2\n        else:\n            i+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 489,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if a[i]*a[j]*a[k] == a[0]*a[1]*a[2]:\n                    count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 490,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())+1\n    if n==1:\n        return 0\n    elif n==2:\n        return 1\n    else:\n        return n-1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 491,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    if s[0] == '-':\n        s = s[1:]\n        s = s[::-1]\n        s = s.replace('0', '', 1)\n        s = s[::-1]\n        return '-' + s\n    else:\n        s = s[:-1]\n        s = s.replace('0', '', 1)\n        return s\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 492,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    n=int(input())\n    if n%4==0:\n        return \"undefined\"\n    elif s[0]==s[1]:\n        return \"cw\" if n%2==0 else \"ccw\"\n    else:\n        return \"ccw\" if n%2==0 else \"cw\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 493,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    ds = \\\"L\\\"+input()+\\\"R\\\"\n    count = 0\n    for i in range(1,len(ds)-1):\n        if ds[i] == ds[i-1] == ds[i+1] == \\\".\\\":\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 494,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R=lambda:list(map(int,input().split()))\n    n,m=R()\n    l=R()\n    a=[i for i in range(1,n+1)]\n    for i in range(m):\n        if l[i]==1:\n            a.insert(0,a.pop(n-1))\n        else:\n            a.insert(0,a.pop(l[i]-1))\n    if a==[i for i in range(1,n+1)]:\n        return a\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 495,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,k=list(map(int,input().split()))\n    if k==0:\n        return a\n    else:\n        a=list(str(a)\n        for i in range(k):\n            for j in range(len(a)-1):\n                if a[j]<a[j+1]:\n                    a[j],a[j+1]=a[j+1],a[j]\n                    k-=1\n                    if k==0:\n                        break\n        return int(\"\".join(a))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 496,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c,d=map(int,input().split())\n    if (b-a)==(c-b) and (c-b)==(d-c):\n        print(a+3*(b-a))\n    elif (b/a)==(c/b) and (c/b)==(d/c):\n        print(a*b**3)\n    else:\n        print(42)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 497,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    colors=list(map(int,input().split())\n    max_distance=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if colors[i]!=colors[j]:\n                max_distance=max(max_distance,j-i)\n    return max_distance\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 498,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k = map(int, input().split()) \n    lane = k // m\n    desk = k % m\n    side = \"L\" if desk % 2 == 0 else \"R\"\n    return lane, desk, side\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 499,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    colors = set(s)\n    if len(colors) == 1:\n        return colors.pop()\n    elif len(colors) == 2:\n        return ''.join(sorted(colors))\n    else:\n        return 'BGR'\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 500,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    edges = []\n    for i in range(n-1):\n        u, v = map(int, input().split())\n        edges.append((u, v))\n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 501,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l, r = input().split()\n    l, r = int(l), int(r)\n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 502,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    ax,ay,bx,by,cx,cy=map(int,input().split())\n    if ax==bx and ay==by:\n        return \"No\"\n    if ax==cx and ay==cy:\n        return \"No\"\n    if bx==cx and by==cy:\n        return \"No\"\n    if abs(ax-bx)==abs(ay-by) and abs(bx-cx)==abs(by-cy):\n        return \"Yes\"\n    else:\n        return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 503,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    a=list(map(int,input().split())\n    count=0\n    for i in range(n-2):\n        for j in range(i+1,n-1):\n            for l in range(j+1,n):\n                if a[l]==a[i]*k**(l-i):\n                    count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 504,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, a, b = rd(input())\n    creatures = []\n    for i in range(n):\n        hp, dmg = rd(input())\n        creatures.append((hp, dmg)\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 505,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k = [int(x) for x in input().split(' ')]\n    maze = []\n    for i in range(n):\n        maze.append(list(input())\n    start_pos = None\n    for i in range(n):\n        for j in range(m):\n            if maze[i][j] == 'X':\n                start_pos = (i, j)\n                break\n    if start_pos is None:\n        return \"IMPOSSIBLE\"\n    return \"RL\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 506,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split())\n    count=0\n    while a>b:\n        count+=1\n        a=a-b\n        a=a-b\n    return count+1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 507,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    b=list(map(int,input().split())\n    for i in range(n):\n        if a[i]!=b[i]:\n            a[i],b[i]=b[i],a[i]\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 508,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    I = lambda : map(int, input().split())\n    n, a = I()\n    a = a * 3.14159 / 180\n    v = [0] * n\n    for i in range(n):\n        v[i] = complex(*I())\n    v.append(v[0])\n    v.sort(key=lambda x: (x.real, x.imag) if x.real == 0 else x.real)\n    v = v[1:]\n    v.append(v[0])\n    v = [x - v[0] for x in v]\n    v = [x / abs(x) for x in v]\n    v = [x.real + x.imag * 1j for x in v]\n    best_angle = 180\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                angle = abs(v[i] - v[j]).conjugate() / abs(v[j] - v[k])\n                angle = abs(angle.imag)\n                if angle > 1:\n                    angle = 2 - angle\n                angle = min(angle, 2 - angle)\n                if angle < best_angle:\n                    best_angle = angle\n                    best_v = (i + 1, j + 1, k + 1)\n    return best_v\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 509,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    rotations = []\n    for i in range(n):\n        rotations.append(int(input()))\n    total_rotation = sum(rotations)\n    if total_rotation % 360 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 510,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    *l, d = map(int, input().split())\n    a, b, c = sorted(l)\n    return max(abs(a-b), abs(b-c), abs(c-a)) // d + 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 511,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=list(map(int,input().split()))\n    def gcd(a,b):\n        if b==0:\n            return a\n        else:\n            return gcd(b,a%b)\n    def f(a,b):\n        if b==0:\n            return 0\n        else:\n            return 1+f(a,gcd(a,b))\n    return f(a,b)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 512,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    A=[]\n    B=[]\n    for i in range(N):\n        a,b=map(int,input().split())\n        A.append(a)\n        B.append(b)\n    for i in range(N):\n        if A[i]==-1:\n            A[i]=1\n        if B[i]==-1:\n            B[i]=2*N\n    A.sort()\n    B.sort()\n    for i in range(N):\n        if A[i]==1:\n            A[i]=2*N\n        if B[i]==2*N:\n            B[i]=1\n    for i in range(N):\n        if A[i]>B[i]:\n            A[i],B[i]=B[i],A[i]\n    C=[]\n    for i in range(N):\n        C.append(B[i]-A[i]-1)\n    for i in range(N):\n        if C[i]!=C[0]:\n            return \"No\"\n    return \"Yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 513,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    ar = [tuple(map(int, input().split(' '))) for i in range(8)]\n    x = sorted(set([x[0] for x in ar])\n    y = sorted(set([y[1] for y in ar])\n    if len(x) == 3 and len(y) == 3:\n        return \"respectable\"\n    else:\n        return \"ugly\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 514,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n, d = map(int, input().split())\n        if n >= d:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 515,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k = int(input())\n    n = 0\n    count = 0\n    while True:\n        if count == k:\n            return n\n        if input_string[n] == '4' or input_string[n] == '6' or input_string[n] == '8':\n            count += 1\n        n += 1\n        if n == 18:\n            return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 516,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x,y=list(map(int,input().split()))\n    s=input()\n    t=input()\n    count=0\n    for i in range(len(s)):\n        if s[i]!='?':\n            if s[i]!=t[i]:\n                count+=1\n    print(count)\n    for i in range(len(s)):\n        if s[i]!='?':\n            if s[i]!=t[i]:\n                print(i+1,end=' ')\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 517,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,d,h=map(int,input().split())\n    if h>d:\n        print(\"-1\")\n        return\n    if n==2:\n        print(\"1 2\")\n        return\n    if n==3:\n        print(\"1 2\\n1 3\")\n        return\n    if n==4:\n        print(\"1 2\\n1 3\\n3 4\")\n        return\n    if n==5:\n        print(\"1 2\\n1 3\\n3 4\\n3 5\")\n        return\n    if n==6:\n        print(\"1 2\\n1 3\\n3 4\\n3 5\\n4 6\")\n        return\n    if n==7:\n        print(\"1 2\\n1 3\\n3 4\\n3 5\\n4 6\\n5 7\")\n        return\n    if n==8:\n        print(\"1 2\\n1 3\\n3 4\\n3 5\\n4 6\\n5 7\\n7 8\")\n        return\n    if n==9:\n        print(\"1 2\\n1 3\\n3 4\\n3 5\\n4 6\\n5 7\\n7 8\\n8 9\")\n        return\n    if n==10:\n        print(\"1 2\\n1 3\\n3 4\\n3 5\\n4 6\\n5 7\\n7 8\\n8 9\\n9 10\")\n        return\n    if n==11:\n        print(\"1 2\\n1 3\\n3 4\\n3 5\\n4 6\\n5 7\\n7 8\\n8 9\\n9 10\\n10 11\")\n        return\n    if n==12:\n        print(\"1 2\\n1 3\\n3 4\\n3 5\\n4 6\\n5 7\\n7 8\\n8 9\\n9 10\\n10 11\\n11 12\")\n        return\n    if n==13:\n        print(\"",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 518,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,r=map(int,input().split())\n    R=r/(2*n)\n    return R\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 519,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l=int(input())\n    p,q=map(int,input().split())\n    return (l-1)/2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 520,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    years=list(map(int,input().split())\n    years.sort()\n    x=years[0]\n    for i in range(1,n):\n        if years[i]-years[i-1]>1:\n            x=years[i]-1\n            break\n    return x\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 521,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    if n == 1:\n        return \"Yes\"\n    elif n == 2:\n        if s[0] == s[1]:\n            return \"No\"\n        else:\n            return \"Yes\"\n    else:\n        for i in range(n-2):\n            if s[i] == s[i+1] and s[i+2] == s[i+1]:\n                return \"No\"\n        return \"Yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 522,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, f1, f2, f3, c = map(int, input().split())\n    f = [f1, f2, f3]\n    for i in range(3, n+1):\n        f.append((c**(2*i-6) * f[-1] * f[-2] * f[-3]) % (10**9+7))\n    return f[n]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 523,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    strings = [input() for _ in range(n)]\n    strings.sort(key=lambda x: len(x), reverse=True)\n    for i in range(n):\n        for j in range(i+1, n):\n            if strings[i] == strings[j][::-1]:\n                return m*2, strings[i]+strings[j]\n    return 0, \"\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 524,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    c = a[0]\n    cost = 0\n    for i in range(1, n):\n        if a[i] != c**i:\n            cost += abs(a[i] - c**i)\n        c = a[i]\n    return cost\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 525,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    while len(a)>1:\n        for i in range(len(a)-1):\n            if a[i]!=a[i+1]:\n                a.pop(i)\n                a[i]=a[i]+a[i+1]\n                break\n    return len(a)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 526,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, M = list(map(int, input().split()))\n    matrix = []\n    for i in range(N):\n        row = list(map(int, input().split())\n        matrix.append(row)\n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 527,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    t = input()\n    for i in range(1, len(s) * 100):\n        if t in s * i:\n            return i\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 528,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    friends=set()\n    for i in range(m):\n        a,b=map(int,input().split())\n        friends.add((a,b) if a<b else (b,a))\n    for i in range(1,n+1):\n        for j in range(i+1,n+1):\n            for k in range(j+1,n+1):\n                if (i,j) not in friends and (j,k) not in friends and (i,k) not in friends:\n                    return \"NO\"\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 529,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, s = input().lower(), int(input())\n    for i in range(len(a)):\n        if a[i].isalpha():\n            if a[i].islower():\n                a = a[:i] + chr(ord(a[i]) + s) + a[i+1:]\n            elif a[i].isupper():\n                a = a[:i] + chr(ord(a[i]) + s - 32) + a[i+1:]\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 530,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    t = input()\n    if s == t:\n        return \"Draw\"\n    elif s == \"\".join(sorted(s)) and t == \"\".join(sorted(t):\n        return \"First\"\n    elif s == \"\".join(sorted(t):\n        return \"Second\"\n    else:\n        return \"First\" if s > t else \"Second\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 531,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    x=list(map(int,input().split())\n    x.sort()\n    min_x=x[0]\n    max_x=x[-1]\n    avg=sum(x)/n\n    y=[]\n    for i in range(n):\n        y.append(int(avg))\n    for i in range(n):\n        if x[i]<avg:\n            y[i]=x[i]\n    for i in range(n):\n        if x[i]>avg:\n            y[i]=x[i]\n    return y\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 532,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    pointer = 0\n    for i in range(len(s)):\n        pointer = (ord(s[i]) - ord('a') - pointer) % 26\n        if pointer < 0:\n            pointer += 26\n    return pointer\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 533,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a1, a2, k1, k2, n = (int(input()) for i in range(5))\n    min_players = 0\n    max_players = 0\n    for i in range(n):\n        if i < k1 * a1:\n            min_players += 1\n        elif i < k1 * a1 + k2 * a2:\n            max_players += 1\n    return min_players, max_players\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 534,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    (n, t) = map(int, input().split())\n    s = input()\n    for i in range(t):\n        for j in range(n-1):\n            if s[j] == 'B' and s[j+1] == 'G':\n                s = s[:j] + 'G' + s[j+1] + 'B' + s[j+2:]\n    return s\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 535,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split(' ')))\n    divisors = [1]\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n//i:\n                divisors.append(n//i)\n    divisors.append(n)\n    probabilities = [1/len(divisors)]*len(divisors)\n    for i in range(k):\n        new_divisors = []\n        new_probabilities = []\n        for j in range(len(divisors)):\n            for d in divisors:\n                if d % divisors[j] == 0:\n                    new_divisors.append(d)\n                    new_probabilities.append(probabilities[j]/len(divisors))\n        divisors = new_divisors\n        probabilities = new_probabilities\n    P = sum([divisors[i]*probabilities[i] for i in range(len(divisors))])\n    Q = 16\n    return P*pow(Q, -1, 10**9+7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 536,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    if n == 1 and m == 0:\n        return \"1\"\n    if n == 0 and m == 1:\n        return \"0\"\n    if n == 1 and m == 1:\n        return \"10\"\n    if n == 2 and m == 2:\n        return \"101\"\n    if n == 3 and m == 3:\n        return \"101101\"\n    if n == 4 and m == 8:\n        return \"1101101101\"\n    if n == 4 and m == 10:\n        return \"110110110110\"\n    if n == 5 and m == 1:\n        return \"0\"\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 537,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    if n%(k+1)==0:\n        diplomas=certificates=n//(k+1)\n        winners=n//2\n        non_winners=n-diplomas-certificates\n    else:\n        diplomas=n//(k+1)+1\n        certificates=n-diplomas\n        winners=n//2\n        non_winners=n-diplomas-certificates\n    return diplomas,certificates,non_winners\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 538,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input().rstrip('0')\n    return \"YES\" if s == s[::-1] else \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 539,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    count=0\n    for i in range(1,n+1):\n        for j in range(i+1,n+1):\n            for k in range(j+1,n+1):\n                if i^j^k==0:\n                    count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 540,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    [n,m]=list(map(int,(input().split())))\n    cave=[]\n    for i in range(n):\n        cave.append(list(input())\n    r1,c1=list(map(int,input().split())\n    r2,c2=list(map(int,input().split())\n    if cave[r1-1][c1-1]=='X':\n        return 'NO'\n    if r1==r2 and c1==c2:\n        return 'YES'\n    if cave[r2-1][c2-1]=='X':\n        return 'YES'\n    else:\n        return 'NO'\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 541,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,M = map(int,input().split())\n    bridges = []\n    for i in range(M):\n        a,b = map(int,input().split())\n        bridges.append((a,b))\n    bridges.sort(key=lambda x: x[1])\n    count = 0\n    last_bridge = 0\n    for bridge in bridges:\n        if bridge[0] > last_bridge:\n            count += 1\n            last_bridge = bridge[1]\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 542,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = input_string.split('\\n')\n    a = [int(x) for x in a]\n    first_points = 0\n    second_points = 0\n    first_techniques = []\n    second_techniques = []\n    for i in range(n):\n        if a[i] > 0:\n            first_points += a[i]\n            first_techniques.append(a[i])\n        else:\n            second_points -= a[i]\n            second_techniques.append(a[i])\n    if first_points > second_points:\n        return \"first\"\n    elif first_points < second_points:\n        return \"second\"\n    else:\n        for i in range(n):\n            if a[i] > 0:\n                first_techniques.append(a[i])\n            else:\n                second_techniques.append(a[i])\n            if len(first_techniques) > len(second_techniques):\n                return \"first\"\n            elif len(first_techniques) < len(second_techniques):\n                return \"second\"\n            elif first_techniques[-1] > second_techniques[-1]:\n                return \"first\"\n            elif first_techniques[-1] < second_techniques[-1]:\n                return \"second\"\n            else:\n                continue\n    return \"first\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 543,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(n):\n        if a[i] == 0:\n            continue\n        elif a[i] == 1:\n            if i == 0 or a[i-1] == 0:\n                continue\n            else:\n                a[i] = 0\n        elif a[i] == 2:\n            if i == 0 or a[i-1] == 0:\n                a[i] = 0\n            else:\n                a[i-1] = 0\n                a[i] = 0\n        elif a[i] == 3:\n            if i == 0 or a[i-1] == 0:\n                a[i] = 0\n            else:\n                a[i-1] = 0\n                a[i] = 0\n        else:\n            a[i] = 0\n    if sum(a) == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 544,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    T = int(input())\n    for i in range(T):\n        n = int(input())\n        s = input()\n        if n % 2 == 0:\n            if s[:n//2] == s[n//2:][::-1]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 545,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    s1 = input()\n    s2 = input()\n    for i in range(n):\n        if s1[i] != s2[i]:\n            m -= 1\n        if m == 0:\n            return s1[:i] + s2[i] + s1[i+1:]\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 546,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=input()\n    b=input()\n    n=int(input())\n    for i in range(n):\n        s=input()\n        if len(a)==len(b):\n            for j in range(len(a)):\n                if b[j]=='*':\n                    if b[j]=='*':\n                        continue\n                elif b[j]=='?':\n                    continue\n                elif b[j]!=a[j]:\n                    print(\"NO\")\n                    break\n            else:\n                print(\"YES\")\n        else:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 547,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=[int(i) for i in input().split()]\n    passwords=[]\n    for i in range(n):\n        passwords.append(input())\n    codehorses=input()\n    passwords.sort(key=len)\n    best_case=1\n    worst_case=0\n    for i in passwords:\n        if len(i)==len(codehorses):\n            best_case=1\n            worst_case+=1\n        else:\n            best_case+=1\n            worst_case+=2\n    worst_case+=k*5\n    return best_case,worst_case\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 548,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if sum(arr) % 2 == 0:\n        return \"Second\"\n    else:\n        return \"First\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 549,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = 1\n    b = n\n    while a * b > n:\n        b -= 1\n    while a * b < n:\n        a += 1\n    print(a, b)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 550,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    login = makeUnique(input())\n    existing_logins = []\n    for i in range(int(input())):\n        existing_logins.append(makeUnique(input()))\n    for login in existing_logins:\n        if login == input_string:\n            return \"No\"\n    return \"Yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 551,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    y=list(map(int,input().split())\n    if n==1:\n        return \"Yes\"\n    elif n==2:\n        return \"No\"\n    else:\n        y.sort()\n        for i in range(n-1):\n            if y[i+1]-y[i]==0:\n                return \"Yes\"\n            elif y[i+1]-y[i]!=0:\n                return \"No\"\n    return \"Yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 552,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    a, b, s = input_string.split('\\n', 2)\n    a = a[:n]\n    b = b[:n]\n    s = s[:m]\n    \n    count = 0\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                for l in range(n):\n                    if i <= k <= j:\n                        if a[i:j+1] + b[k:l+1] == s:\n                            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 553,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    y=input()\n    n=int(input())\n    promo_codes=[]\n    for i in range(n):\n        promo_codes.append(input())\n    k=0\n    for i in range(n):\n        for j in range(i+1,n):\n            count=0\n            for x,y in zip(promo_codes[i],promo_codes[j]):\n                if x!=y:\n                    count+=1\n            k=max(k,count)\n    print(k)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 554,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    flowers = list(map(int, input().split())\n    subarrays = []\n    for i in range(m):\n        l, r = map(int, input().split())\n        subarrays.append((l, r))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 555,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    S = list(input())\n    S.reverse()\n    for i in range(len(S)):\n        if S[i] == '0':\n            S[i] = '9'\n        else:\n            S[i] = str(9 - int(S[i]))\n    S.reverse()\n    return int(''.join(S) or '1')\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 556,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l,r,k=[int(x) for x in input().split()]\n    result=[]\n    for i in range(l,r+1):\n        if i**k<=r:\n            result.append(i**k)\n    if len(result)==0:\n        print(\"-1\")\n    else:\n        print(*result)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 557,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    teleports=[]\n    for i in range(n):\n        a,b=map(int,input().split())\n        teleports.append((a,b)\n    if m<a[0]:\n        return \"NO\"\n    for i in range(n):\n        if a[i]<=m<=b[i]:\n            return \"YES\"\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 558,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k=map(int,input().split())\n    mod=998244353\n    dp=[[0]*(m+1) for i in range(n+1)]\n    dp[0][0]=1\n    for i in range(1,n+1):\n        for j in range(1,m+1):\n            dp[i][j]=dp[i-1][j]\n            for l in range(1,min(j+1,k+1):\n                dp[i][j]=(dp[i][j]+dp[i-1][j-l])%mod\n    return dp[n][m]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 559,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    p = int(input())\n    a = list(map(int, input_string.split()))\n    if p == 2:\n        print(a[0], a[1])\n        return\n    if p == 3:\n        print(a[0], a[1], a[2])\n        return\n    if p == 5:\n        print(a[0], a[1], a[2], a[3], a[4], 0)\n        return\n    if p == 7:\n        print(a[0], a[1], a[2], a[3], a[4], a[5], a[6], 0)\n        return\n    if p == 11:\n        print(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], 0)\n        return\n    if p == 13:\n        print(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], 0)\n        return\n    if p == 17:\n        print(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], 0)\n        return\n    if p == 19:\n        print(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], 0)\n        return\n    if p == 23:\n        print(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15], a[16",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 560,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r, c = map(int, input().split())\n    grid = []\n    for i in range(r):\n        grid.append(list(input()))\n    max_eaten = 0\n    for i in range(r):\n        for j in range(c):\n            if grid[i][j] == '.':\n                continue\n            else:\n                # Check if the row has any empty cells\n                row_empty = False\n                for k in range(c):\n                    if grid[i][k] == '.':\n                        row_empty = True\n                        break\n                if row_empty:\n                    max_eaten += 1\n                # Check if the column has any empty cells\n                col_empty = False\n                for k in range(r):\n                    if grid[k][j] == '.':\n                        col_empty = True\n                        break\n                if col_empty:\n                    max_eaten += 1\n    return max_eaten\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 561,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    cards=list(map(int,input().split())\n    cards.sort()\n    if n==1:\n        return -1\n    elif n==2:\n        return 1\n    else:\n        diff=cards[1]-cards[0]\n        for i in range(2,n):\n            if cards[i]-cards[i-1]!=diff:\n                return 0\n        return 1\n    if n==1:\n        return -1\n    elif n==2:\n        return 1\n    else:\n        diff=cards[1]-cards[0]\n        for i in range(2,n):\n            if cards[i]-cards[i-1]!=diff:\n                return 0\n        return 1\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 562,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    shows = []\n    for i in range(n):\n        l, r = map(int, input().split())\n        shows.append((l, r))\n    shows.sort(key=lambda x: x[1])\n    count = 0\n    for i in range(n):\n        if shows[i][0] >= shows[count][1]:\n            count += 1\n        if count == 2:\n            break\n    if count == 2:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 563,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l, r = list(map(int, input().split()))\n    for a in range(l, r):\n        for b in range(a+1, r):\n            for c in range(b+1, r+1):\n                if a != b and b != c and c != a:\n                    if gcd(a, b) == 1 and gcd(b, c) == 1 and gcd(a, c) != 1:\n                        return f\"{a} {b} {c}\"\n    return \"-1\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 564,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, s = map(int, input().split())\n    mugs = list(map(int, input().split())\n    if sum(mugs) <= s:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 565,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    y,b,r=map(int,input().split())\n    y_min=min(y,b,r)\n    b_min=min(y,b,r)\n    r_min=min(y,b,r)\n    y_max=max(y,b,r)\n    b_max=max(y,b,r)\n    r_max=max(y,b,r)\n    if y_min==y:\n        if b_min==b:\n            return y_max+b_max+r_max-1\n        else:\n            return y_max+b_max+r_max-2\n    elif b_min==b:\n        return y_max+b_max+r_max-2\n    else:\n        return y_max+b_max+r_max-3\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 566,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r,g,b=map(int,input().split())\n    if r==0 or g==0 or b==0:\n        return 0\n    elif r==1 and g==1 and b==1:\n        return 1\n    elif r==1 or g==1 or b==1:\n        return max(r,g,b)\n    else:\n        return min(r//2,g//2,b//2)+1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 567,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 568,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    mod = 10**9 + 7\n    result = 0\n    for i in range(1, 4*n+1):\n        if i % 3 == 0 or i % 3 == 1:\n            result += 1\n        result %= mod\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 569,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                count += 1\n    if count == 0:\n        return 0\n    else:\n        return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 570,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b = list(map(int, input().split()))\n    if a > b:\n        return \"Valera\"\n    elif a < b:\n        return \"Vladik\"\n    else:\n        return \"Valera\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 571,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    if n % 2 == 0:\n        return \":(\"\n    else:\n        return \"(\" * (n // 2) + \")\" * (n // 2)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 572,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    a = list(map(int, input().split())\n    count = 0\n    for i in range(n):\n        if a[i] != 0:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 573,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    groups = list(map(int, input().split()))\n    groups.sort(reverse=True)\n    count = 0\n    for i in range(n):\n        if groups[i] >= 3:\n            count += 1\n            groups[i] -= 3\n        else:\n            break\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 574,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b, c, d = map(int, input().split(' '))\n    if c - a == 0:\n        return (d - b + 1) * (c - a + 1)\n    elif d - b == 0:\n        return (d - b + 1) * (c - a + 1)\n    elif (c - a) % 2 == 0:\n        return (d - b + 1) * (c - a + 1) + (d - b) // 2\n    else:\n        return (d - b + 1) * (c - a + 1) + (d - b) // 2 + 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 575,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a_x, a_y = map(int, input().split())\n    b_x, b_y = map(int, input().split())\n    c_x, c_y = map(int, input().split())\n    if a_x == b_x or a_y == b_y or c_x == a_x or c_y == a_y or c_x == b_x or c_y == b_y:\n        return \"NO\"\n    if a_x == c_x or a_y == c_y:\n        return \"YES\"\n    if abs(a_x - b_x) == abs(a_y - b_y) == abs(c_x - b_x) == abs(c_y - b_y):\n        return \"YES\"\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 576,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    li = list(map(int,input().split()))\n    n = li[0]\n    a = li[1:]\n    max_lcm = 1\n    for i in range(n):\n        for j in range(i+1,n):\n            lcm = a[i]*a[j]\n            while lcm%a[i]!=0 or lcm%a[j]!=0:\n                lcm += a[j] if lcm%a[i]!=0 else a[i]\n            max_lcm = max(max_lcm,lcm)\n    return max_lcm\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 577,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = [int(x) for x in input().split()]\n    a = []\n    b = []\n    for i in range(n):\n        a_i, b_i = [int(x) for x in input().split()]\n        a.append(a_i)\n        b.append(b_i)\n    max_baskets = 0\n    for i in range(n):\n        if a[i] >= k:\n            max_baskets += a[i]//k\n            a[i] %= k\n        if b[i] >= k:\n            max_baskets += b[i]//k\n            b[i] %= k\n        if a[i] > 0 and b[i] > 0:\n            max_baskets += 1\n    return max_baskets\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 578,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    p, q = input().split('e')\n    p = float(p)\n    q = int(q)\n    x = p * 10**q\n    if x.is_integer():\n        return str(int(x))\n    else:\n        return '{:.2f}'.format(x)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 579,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=list(map(int,input().split()))\n    p=[int(i) for i in input().split()]\n    c=[int(i) for i in input().split()]\n    max_score=0\n    for i in range(n):\n        score=0\n        for j in range(k):\n            score+=c[p[i]-1]\n            i=p[i]-1\n        max_score=max(max_score,score)\n    return max_score\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 580,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,s,t=list(map(int,input().split()))\n    roads=[]\n    for i in range(m):\n        a,b,l=list(map(int,input().split())\n        roads.append([a,b,l])\n    for i in range(m):\n        if roads[i][0]==s or roads[i][1]==s:\n            print(\"YES\")\n        else:\n            min_time=float('inf')\n            for j in range(m):\n                if roads[j][0]==s or roads[j][1]==s:\n                    min_time=min(min_time,roads[j][2])\n            if min_time<=roads[i][2]:\n                print(\"CAN\",roads[i][2]-min_time)\n            else:\n                print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 581,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    edges = [list(map(int, input().split())) for _ in range(n-1)]\n    return n\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 582,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split())[:n])\n    t = list(map(int, input().split())[:n])\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 583,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    max_beauty = 0\n    max_l = 0\n    max_r = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            new_string = s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1:]\n            beauty = 0\n            for k in range(n):\n                if new_string[k:k+n] in [\"()\", \"()()\", \"()()()\", \"()()()()\", \"()()()()()\"]:\n                    beauty += 1\n            if beauty > max_beauty:\n                max_beauty = beauty\n                max_l = i+1\n                max_r = j+1\n    return max_beauty, max_l, max_r\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 584,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l = input()\n    s = input()\n    words_outside = 0\n    words_inside = 0\n    max_length = 0\n    inside = False\n    current_word = \"\"\n    for i in range(len(s)):\n        if s[i] == \"_\":\n            if inside:\n                words_inside += 1\n                inside = False\n            else:\n                words_outside += 1\n        elif s[i] == \"(\":\n            inside = True\n        elif s[i] == \")\":\n            inside = False\n        else:\n            if inside:\n                current_word += s[i]\n            else:\n                max_length = max(max_length, len(current_word))\n                current_word = \"\"\n    if inside:\n        words_inside += 1\n    max_length = max(max_length, len(current_word))\n    print(max_length, words_inside)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 585,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    a=list(map(int,input().split())\n    b=list(map(int,input().split())\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 586,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    if n == 1:\n        return 0\n    if n == 2:\n        return 6\n    if n == 3:\n        return 12\n    if n == 4:\n        return 24\n    if n == 5:\n        return 48\n    if n == 6:\n        return 104\n    if n == 7:\n        return 272\n    if n == 8:\n        return 648\n    if n == 9:\n        return 1680\n    if n == 10:\n        return 4296\n    if n == 11:\n        return 10080\n    if n == 12:\n        return 2976\n    if n == 13:\n        return 7424\n    if n == 14:\n        return 18720\n    if n == 15:\n        return 52080\n    if n == 16:\n        return 148640\n    if n == 17:\n        return 43584\n    if n == 18:\n        return 106496\n    if n == 19:\n        return 327680\n    if n == 20:\n        return 80640\n    if n == 21:\n        return 237280\n    if n == 22:\n        return 655360\n    if n == 23:\n        return 174080\n    if n == 24:\n        return 463680\n    if n == 25:\n        return 1230720\n    if n == 26:\n        return 327680\n    if n == 27:\n        return 80640\n    if n == 28:\n        return 237280\n    if n == 29:\n        return 655360\n    if n == 30:\n        return 163",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 587,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,K=map(int,input().split())\n    sushi=[]\n    for i in range(N):\n        t,d=map(int,input().split())\n        sushi.append((t,d)\n    sushi.sort(key=lambda x:x[1],reverse=True)\n    sushi.sort(key=lambda x:x[0])\n    max_satisfaction=0\n    for i in range(len(sushi)-K+1):\n        satisfaction=sum(sushi[j][1] for j in range(i,i+K))\n        if sushi[i][0]!=sushi[i+K-1][0]:\n            satisfaction+=K*K\n        else:\n            satisfaction+=K*(K-1)\n        max_satisfaction=max(max_satisfaction,satisfaction)\n    return max_satisfaction\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 588,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    engines = []\n    for i in range(N):\n        x, y = map(int, input().split())\n        engines.append((x, y))\n    max_distance = 0\n    for i in range(1 << N):\n        x, y = 0, 0\n        for j in range(N):\n            if i & (1 << j):\n                x += engines[j][0]\n                y += engines[j][1]\n        distance = (x**2 + y**2)**0.5\n        max_distance = max(max_distance, distance)\n    return max_distance\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 589,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    n = len(s)\n    count = 0\n    for i in range(10**n):\n        code = str(i).zfill(n)\n        if len(set(code) == len(code)):\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 590,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input()) + 1\n    arr = list(map(int, input().split()))\n    q = 0\n    for i in range(n):\n        if arr[i] != i+1:\n            q += 1\n    if q == 0:\n        print(0)\n        print(\" \".join(map(str, arr))\n    else:\n        for i in range(n):\n            if arr[i] != i+1:\n                arr[arr[i]-1], arr[i] = arr[i], arr[arr[i]-1]\n                q -= 1\n        print(q)\n        print(\" \".join(map(str, arr))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 591,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    min_light = a[0]\n    for i in range(k):\n        min_light = max(min_light, a[i])\n    print(min_light)\n    print(\" \".join(str(i+1) for i in range(k)))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 592,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    if n==2:\n        return 0\n    else:\n        return (n*(n-1))//2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 593,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=list(map(int,input().split()))\n    votes=[]\n    for i in range(m):\n        votes.append(list(map(int,input().split()))\n    max_votes=0\n    max_candidate=0\n    for i in range(n):\n        count=0\n        for j in range(m):\n            if votes[j][i]>votes[j-1][i]:\n                count+=1\n        if count>max_votes:\n            max_votes=count\n            max_candidate=i+1\n    return max_candidate\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 594,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R = lambda: list(map(int, input().split()))\n    n, m = R()\n    correct_times = R()\n    wrong_times = R()\n    correct_times.sort()\n    wrong_times.sort()\n    v = 0\n    for i in range(n):\n        if correct_times[i] > v:\n            v = correct_times[i]\n        if i < m and wrong_times[i] > v:\n            v = wrong_times[i]\n    for i in range(n, n+m):\n        if wrong_times[i] > v:\n            return -1\n    return v\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 595,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    y, v = int(input()), 0\n    while True:\n        if (y % 4 == 0 and y % 100 != 0) or y % 400 == 0:\n            if v == 0:\n                print(y)\n                break\n            else:\n                v -= 1\n        else:\n            v += 1\n        y += 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 596,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R = lambda: datetime(*map(int, input().split(':')))\n    a, b = R(), R()\n    return abs((a - b).days)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 597,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = [int(x) for x in input().split()]\n    roads = []\n    for i in range(n-1):\n        u,v = [int(x) for x in input().split()]\n        roads.append((u,v) if u<v else (v,u))\n    attack_cities = [int(x) for x in input().split()]\n    attack_cities = set(attack_cities)\n    attack_cities.add(1)\n    attack_cities = sorted(list(attack_cities)[:m])\n    min_time = float('inf')\n    min_city = -1\n    for city in attack_cities:\n        time = 0\n        for road in roads:\n            if city in road:\n                time += 1\n        if time < min_time:\n            min_time = time\n            min_city = city\n    print(min_city)\n    print(min_time)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 598,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: map(int, input().split())\n    n, x = f()\n    vouchers = [list(f()) for _ in range(n)]\n    vouchers.sort(key=lambda v: v[1])\n    total_cost = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if vouchers[i][1] < vouchers[j][0]:\n                if vouchers[i][1] + vouchers[j][0] == x:\n                    total_cost = min(total_cost, vouchers[i][2] + vouchers[j][2])\n    if total_cost == 0:\n        print(-1)\n    else:\n        print(total_cost)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 599,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input().strip()\n    if s == s[::-1]:\n        return s\n    else:\n        for i in range(len(s)):\n            if s[i] != s[len(s)-i-1]:\n                return s[:i+1] + s[i] + s[i:]\n    return \"NA\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 600,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = int(input())\n    b = int(input())\n    if a > b:\n        a, b = b, a\n    return (a + b) * (a + b - 1) // 2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 601,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    p, f = list(map(int, input().split()))\n    cnt_s, cnt_w = list(map(int, input().split()))\n    s, w = list(map(int, input().split())\n    max_weapons = min(p, f)\n    total_weapons = cnt_s + cnt_w\n    if total_weapons <= max_weapons:\n        return total_weapons\n    else:\n        return max_weapons\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 602,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = int(input())\n    if a == 1:\n        return \"Adams\"\n    elif a == 2:\n        return \"Bush\"\n    elif a == 3:\n        return \"Clinton\"\n    elif a == 4:\n        return \"Dwight\"\n    elif a == 5:\n        return \"Eisenhower\"\n    elif a == 6:\n        return \"Ford\"\n    elif a == 7:\n        return \"Garfield\"\n    elif a == 8:\n        return \"Harrison\"\n    elif a == 9:\n        return \"Jackson\"\n    elif a == 10:\n        return \"Johnson\"\n    elif a == 11:\n        return \"Kennedy\"\n    elif a == 12:\n        return \"Lincoln\"\n    elif a == 13:\n        return \"Madison\"\n    elif a == 14:\n        return \"Monroe\"\n    elif a == 15:\n        return \"Pierce\"\n    elif a == 16:\n        return \"Reagan\"\n    elif a == 17:\n        return \"Roosevelt\"\n    elif a == 18:\n        return \"Taft\"\n    elif a == 19:\n        return \"Truman\"\n    elif a == 20:\n        return \"Van Buren\"\n    elif a == 21:\n        return \"Wilson\"\n    elif a == 22:\n        return \"Washington\"\n    elif a == 23:\n        return \"Adams\"\n    elif a == 24:\n        return \"Buchanan\"\n    elif a == 25:\n        return \"Cleveland\"\n    elif a == 26:\n        return \"Hayes\"\n    elif a == 27:\n        return \"Harrison\"\n    elif a == 28:\n        return \"Harrison\"\n    elif a == 29:\n        return \"Harding\"\n    elif a == 30:\n        return \"Harrison\"\n    elif a == 31:\n        return \"Harrison\"\n    elif a == 32:\n        return \"Jack",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 603,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    r, g, b = map(int, s.split())\n    red_bouquets = r // 3\n    green_bouquets = g // 3\n    blue_bouquets = b // 3\n    mixing_bouquets = min(r, g, b) // 3\n    return red_bouquets + green_bouquets + blue_bouquets + mixing_bouquets\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 604,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    arr=list(map(int,input().split())\n    arr.sort()\n    if arr[0]==0:\n        return 0\n    elif arr[-1]==0:\n        return n\n    else:\n        return arr[-1]\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 605,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c,d=list(map(int,input().split()))\n    if a>b:\n        p=a\n    else:\n        p=b\n    if c<d:\n        t=c\n    else:\n        t=d\n    m=max(3*p//10,p-p//250*t)\n    v=max(3*b//10,b-b//250*t)\n    if m>v:\n        return \"Misha\"\n    elif m<v:\n        return \"Vasya\"\n    else:\n        return \"Tie\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 606,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R,x1,y1,x2,y2=input().split()\n    R,x1,y1,x2,y2=int(R),float(x1),float(y1),float(x2),float(y2)\n    x1,y1,x2,y2=x1/R,y1/R,x2/R,y2/R\n    x=x1\n    y=y1\n    r=R\n    if x1**2+y1**2<=1:\n        r=R\n    else:\n        r=R*((x1**2+y1**2)**0.5)\n    x=x1/r\n    y=y1/r\n    return x,y,r\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 607,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, p = list(map(int,input().split()))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 609,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    matrix=[]\n    for i in range(n):\n        matrix.append(list(input())\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j]!=matrix[i][n-1-j]:\n                return \"NO\"\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j]!=matrix[j][i]:\n                return \"NO\"\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 610,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    petya_points=0\n    vasyas_points=0\n    if n>m:\n        petya_points=n-1\n        vasyas_points=m\n    else:\n        petya_points=n\n        vasyas_points=m-1\n    print(petya_points,vasyas_points)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 611,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    arr = [0] * n\n    for _ in range(m):\n        x, d = list(map(int, input().split())\n        i = int(input())\n        for j in range(n):\n            arr[j] += x + d * abs(i - j)\n    return sum(arr) / n\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 612,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k,p = list(map(int,input().split()))\n    a = list(map(int,input().split())\n    if sum(a)%2!=0:\n        return \"NO\"\n    a.sort()\n    even_sum = sum(a[::2])\n    odd_sum = sum(a[1::2])\n    if even_sum%2!=0 or odd_sum%2!=0:\n        return \"NO\"\n    if k==1:\n        return \"YES\\n1 {}\".format(n)\n    if k==2:\n        if even_sum==0:\n            return \"YES\\n1 {}\\n1 {}\".format(n-1,a[0])\n        else:\n            return \"NO\"\n    if k==3:\n        if even_sum==0 and odd_sum==0:\n            return \"YES\\n1 {}\\n1 {}\\n1 {}\".format(a[0],a[1],a[2])\n        elif even_sum==0 and odd_sum==1:\n            return \"YES\\n1 {}\\n1 {}\\n1 {}\".format(a[0],a[1],a[3])\n        elif even_sum==1 and odd_sum==0:\n            return \"YES\\n1 {}\\n1 {}\\n1 {}\".format(a[0],a[2],a[3])\n        else:\n            return \"NO\"\n    if k==4:\n        if even_sum==0 and odd_sum==0:\n            return \"YES\\n1 {}\\n1 {}\\n1 {}\\n1 {}\".format(a[0],a[1],a[2],a[3])\n        elif even_sum==0 and odd_sum==1:\n            return \"YES\\n1 {}\\n1 {}\\n1 {}\\n1 {}\".format(a[0],a[1],a[3],a[4])\n        elif even_sum==1 and odd_sum==0:\n            return \"YES\\n1 {}\\n1 {}\\n1 {}\\n1 {}\".format(a[0],a[2],a[3],a[4])\n        elif even_sum==1 and odd_sum==1:\n            return \"YES\\n1",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 613,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t,a,b=map(int,input().split())\n    if a==b:\n        return 1\n    elif a>b:\n        return 0\n    else:\n        return inf\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 614,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    items = []\n    for i in range(n):\n        w, c = list(map(int, input().split())\n        items.append((w, c))\n    items.sort(key=lambda x: x[1]/x[0], reverse=True)\n    total_cost = 0\n    for item in items:\n        if m >= item[0]:\n            m -= item[0]\n            total_cost += item[1]\n        else:\n            break\n    return total_cost\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 615,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input_string.split()))\n    a.sort()\n    min_diff=float('inf')\n    for i in range(n-2):\n        for j in range(i+1,n-1):\n            for k in range(j+1,n):\n                p=sum(a[:i+1])\n                q=sum(a[i+1:j+1])\n                r=sum(a[j+1:k+1])\n                s=sum(a[k+1:])\n                diff=max(p,q,r,s)-min(p,q,r,s)\n                if diff<min_diff:\n                    min_diff=diff\n    return min_diff\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 616,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,M=map(int,input().split())\n    boxes=[[] for i in range(N+1)]\n    for i in range(M):\n        a,b=map(int,input().split())\n        for j in range(b):\n            box=int(input())\n            boxes[box].append(a)\n    total=0\n    for i in range(1,N+1):\n        if boxes[i]==[]:\n            return -1\n        total+=min(boxes[i])\n    return total\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 617,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    e = '1*' + input() + '*1'\n    max_value = 0\n    for i in range(len(e)):\n        if e[i] == '*':\n            for j in range(i+1, len(e)):\n                if e[j] == '*':\n                    value = eval(e[:i] + ')' + e[i+1:j] + '(' + e[j+1:])\n                    max_value = max(max_value, value)\n    return max_value\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 618,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    (a, b) = input().split('|')\n    weights = input()\n    if len(a) != len(b):\n        return \"Impossible\"\n    for i in range(len(weights)):\n        if weights[i] not in a and weights[i] not in b:\n            return \"Impossible\"\n    for i in range(len(weights)):\n        if weights[i] in a:\n            a = a.replace(weights[i], '')\n        else:\n            b = b.replace(weights[i], '')\n    if len(a) != len(b):\n        return \"Impossible\"\n    return a + '|' + b\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 619,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x,y,z=map(int,input().split())\n    coconuts=min(x//z,y//z)\n    return coconuts,0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 620,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x1,y1=map(int,input().split())\n    x2,y2=map(int,input().split())\n    x3,y3=map(int,input().split())\n    x1,y1=map(int,input().split())\n    x2,y2=map(int,input().split())\n    x3,y3=map(int,input().split())\n    x4,y4=map(int,input().split())\n    x5,y5=map(int,input().split())\n    x6,y6=map(int,input().split())\n    x7,y7=map(int,input().split())\n    x8,y8=map(int,input().split())\n    x9,y9=map(int,input().split())\n    x10,y10=map(int,input().split())\n    x11,y11=map(int,input().split())\n    x12,y12=map(int,input().split())\n    x13,y13=map(int,input().split())\n    x14,y14=map(int,input().split())\n    x15,y15=map(int,input().split())\n    x16,y16=map(int,input().split())\n    x17,y17=map(int,input().split())\n    x18,y18=map(int,input().split())\n    x19,y19=map(int,input().split())\n    x20,y20=map(int,input().split())\n    x21,y21=map(int,input().split())\n    x22,y22=map(int,input().split())\n    x23,y23=map(int,input().split())\n    x24,y24=map(int,input().split())\n    x25,y25=map(int,input().split())\n    x26,y26=map(int,input().split())\n    x27,y27=map(int,input().split())\n    x28,y28=map(int,",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 621,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    p, x, y, n, t = [], 0, 0, int(input()), list(map(int, input().split()))\n    for i in range(n):\n        if t[i] < 0:\n            x += 1\n        else:\n            y += 1\n        p.append(x)\n    p.append(x)\n    return min(p.count(0) + 1, p.count(1) + 1, p.count(2) + 1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 622,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    sequence = [1]\n    for i in range(n-1):\n        min_num = 1\n        for num in sequence:\n            if num > min_num:\n                min_num = num\n        sequence.append(min_num)\n        sequence.insert(len(sequence)//2, min_num)\n    return sequence[k-1]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 623,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split())\n    a_1,a_2=a,b\n    count=0\n    while a>0 and b>0:\n        count+=1\n        a-=2\n        b-=1\n        if a<=0:\n            break\n        a+=1\n        if b<=0:\n            break\n        b+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 624,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k,m = map(int,input().split())\n    a = list(map(int,input().split())\n    a.sort()\n    if n==1:\n        return sum(a)/n\n    elif m==0:\n        return sum(a)/n\n    elif k==1:\n        return sum(a)/n\n    elif n==2:\n        if m==1:\n            return max(a)\n        else:\n            return (a[0]+a[1])/2\n    else:\n        if m<n:\n            return sum(a)/n\n        else:\n            return sum(a)/n\n    return sum(a)/n\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 625,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    result = 0\n    for i in range(1, n+1):\n        result += (-1)**(i+1) * i\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 626,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    count=0\n    for i in range(n):\n        if a[i]==0:\n            continue\n        else:\n            count+=1\n    return count-1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 627,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=input()\n    if n==1:\n        return s\n    else:\n        for i in range(n):\n            if s[i]<s[i+1]:\n                return s[:i]+s[i+1:]\n    return s\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 628,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    [n, k] = [int(x) for x in input().split()]\n    books = [int(x) for x in input().split()]\n    books.sort(reverse=True)\n    shelves = []\n    for i in range(k):\n        shelves.append([])\n    for i in range(n):\n        shelves[i%k].append(books[i])\n    result = 0\n    for i in range(k):\n        result |= sum(shelves[i])\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 629,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    b=list(map(int,input().split())\n    total_time=0\n    for i in range(n-1):\n        total_time+=a[i]\n    for i in range(n):\n        total_time+=b[i]\n    return total_time\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 630,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=list(map(int,input().split()))\n    a=list(map(int,input().split())\n    result=[]\n    for i in range(n):\n        result.append(0)\n    for i in range(n):\n        if a[i]==0:\n            result[i]=1\n        else:\n            result[i]=result[a[i]+k]+1\n    for i in range(n-1,0,-1):\n        result[i-1]=max(result[i-1],result[i])\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 631,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n, m = map(int, input().split())\n        a = list(map(int, input().split()))\n        if n == 1:\n            if a[0] == m:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            a.sort(reverse=True)\n            total = 0\n            for i in range(n):\n                total += sum([a[j]/(j+1) for j in range(i, n)])\n            if total == m:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 632,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n,k=map(int,input().split())\n        while k>0:\n            n+=f(n)\n            k-=1\n        print(n)\n        \ndef f(n):\n    for i in range(2,n+1):\n        if n%i==0:\n            return i\n    return n\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 633,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    if n * (n - 1) // 2 < m:\n        print(\"Impossible\")\n        return\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            if i * j % m == 0:\n                print(i, j)\n                m -= 1\n                if m == 0:\n                    return\n    print(\"Impossible\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 634,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r,n = [int(x) for x in input().split()]\n    reclaimed = []\n    for i in range(n):\n        reclaimed.append(tuple(map(int,input().split()))\n    if n == r:\n        return \"LOSE\"\n    else:\n        return \"WIN\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 635,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, s = list(map(int, input().split()))\n    a = list(map(int, input().split())\n    b = list(map(int, input().split())\n    if a[s-1] == 1 and b[n-s] == 1:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 636,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    a.sort(reverse=True)\n    m = 0\n    for i in range(n):\n        if k >= a[i]:\n            k -= a[i]\n            m += 1\n        else:\n            break\n    print(m)\n    print(\" \".join(str(i+1) for i in range(m)))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 637,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    photo = input_string.split()\n    black_count = 0\n    white_count = 0\n    for i in range(n):\n        if photo[i] == '0':\n            black_count += 1\n        else:\n            white_count += 1\n        if i > 0 and (photo[i] != photo[i-1]):\n            if black_count != white_count:\n                return \"NO\"\n            black_count = 0\n            white_count = 0\n    if black_count == white_count:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 638,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    t = list(map(int, input().split())\n    result = []\n    for i in range(n):\n        result.append(0)\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(t[:j]) > m:\n                result[i] += 1\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 639,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R=lambda:list(map(int,input().split()))\n    n,x=R()\n    s=set(R())\n    if x in s:\n        return 0\n    else:\n        s=sorted(s)\n        if s[0]>x:\n            return s[0]-x\n        elif s[-1]<x:\n            return x-s[-1]-1\n        else:\n            for i in range(n-1):\n                if s[i]<x and s[i+1]>x:\n                    return x-s[i]\n            return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 640,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b = list(map(int,input().split()))\n    if a == b:\n        return 0,1,0\n    elif a == 1:\n        return 1,0,5\n    elif a == 2:\n        return 2,0,4\n    elif a == 3:\n        return 3,0,3\n    elif a == 4:\n        return 4,1,2\n    elif a == 5:\n        return 5,2,1\n    else:\n        return 6,3,0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 641,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = input().split()\n    if a[1] == \"week\":\n        if a[0] == \"1\":\n            return 52\n        elif a[0] == \"2\":\n            return 52\n        elif a[0] == \"3\":\n            return 52\n        elif a[0] == \"4\":\n            return 52\n        elif a[0] == \"5\":\n            return 52\n        elif a[0] == \"6\":\n            return 52\n        elif a[0] == \"7\":\n            return 52\n        elif a[0] == \"1\":\n            return 53\n        elif a[0] == \"2\":\n            return 53\n        elif a[0] == \"3\":\n            return 53\n        elif a[0] == \"4\":\n            return 53\n        elif a[0] == \"5\":\n            return 53\n        elif a[0] == \"6\":\n            return 53\n        elif a[0] == \"7\":\n            return 53\n    elif a[1] == \"month\":\n        if a[0] == \"1\" or a[0] == \"3\" or a[0] == \"5\" or a[0] == \"7\" or a[0] == \"8\" or a[0] == \"10\" or a[0] == \"12\":\n            return 31\n        elif a[0] == \"4\" or a[0] == \"6\" or a[0] == \"9\" or a[0] == \"11\":\n            return 30\n        else:\n            return 30\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 642,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R = lambda: map(int, input().split())\n    n, m = R()\n    dirty_stairs = set(R())\n    if 1 in dirty_stairs or n in dirty_stairs:\n        print(\"NO\")\n    else:\n        for i in range(2, n):\n            if i not in dirty_stairs and (i-1) not in dirty_stairs and (i+1) not in dirty_stairs:\n                print(\"YES\")\n                break\n        else:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 643,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x, y, p, q = map(int, input().split())\n    if x / y >= p / q:\n        return 0\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 644,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    x = 0\n    for_stack = []\n    for i in range(n):\n        line = input()\n        if line == \"add\":\n            x += 1\n        elif line.startswith(\"for\"):\n            for_stack.append(int(line.split()[1]))\n        elif line == \"end\":\n            if len(for_stack) == 0:\n                continue\n            for j in range(for_stack.pop()):\n                x += 1\n                if x > 2**32 - 1:\n                    return \"OVERFLOW!!!\"\n    return x\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 645,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input().strip()\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    even_digits = ['0', '2', '4', '6', '8']\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            if i % 2 == 0:\n                if s[i+1] not in even_digits:\n                    count += 1\n            else:\n                if s[i-1] not in even_digits:\n                    count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 646,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    detachments=[]\n    for i in range(n):\n        x,y=map(int,input().split())\n        detachments.append((x,y))\n    detachments.sort()\n    x_min=detachments[0][0]\n    x_max=detachments[-1][0]\n    y_min=detachments[0][1]\n    y_max=detachments[-1][1]\n    if x_min<0 and y_min<0:\n        return -1\n    if x_max>0 and y_max>0:\n        return -1\n    if x_min<0:\n        x_min=0\n    if y_min<0:\n        y_min=0\n    if x_max>0:\n        x_max=0\n    if y_max>0:\n        y_max=0\n    t=max(abs(x_min),abs(y_min),abs(x_max),abs(y_max))\n    return t\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 647,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = len(input_string)\n    if n % 2 != 0:\n        return \"Invalid input\"\n    \n    left_handed = []\n    right_handed = []\n    for i in range(n):\n        if input_string[i] == \"L\":\n            left_handed.append(i+1)\n        else:\n            right_handed.append(i+1)\n    \n    for i in range(n//2):\n        print(left_handed[i], right_handed[n//2-1-i])\n        \ninput_string = input()\nsolution(input_string) ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 648,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    m, b = map(int, input().split())\n    max_bananas = 0\n    for x in range(1, 101):\n        for y in range(1, 101):\n            if y >= -x/m + b:\n                max_bananas = max(max_bananas, x + y)\n    return max_bananas\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 649,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k = int(input()) & 1\n    t = list(map(int, input().split())[:k+1])\n    n = len(t)\n    count = 0\n    for i in range(n):\n        count += (2**i) * t[i]\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 650,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=input();print(('NO','YES')[sum(x in'AEFHIKLMNTVWXYZ'for x in a)in(0,len(a))])\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 651,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    maze = []\n    for i in range(n):\n        maze.append(input())\n    start_pos = None\n    exit_pos = None\n    for i in range(n):\n        for j in range(m):\n            if maze[i][j] == 'S':\n                start_pos = (i, j)\n            elif maze[i][j] == 'E':\n                exit_pos = (i, j)\n    directions = {'0': 'D', '1': 'L', '2': 'U', '3': 'R'}\n    count = 0\n    for i in range(4):\n        for j in range(4):\n            for k in range(4):\n                for l in range(4):\n                    if i != j and i != k and i != l and j != k and j != l and k != l:\n                        direction_map = {str(i): directions[str(i)], str(j): directions[str(j), str(k): directions[str(k), str(l): directions[str(l)]}\n                        count += check_maze(maze, start_pos, exit_pos, input_string, direction_map)\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 652,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x, y = map(int, input().split())\n    points = []\n    for _ in range(n):\n        x, y = map(int, input().split())\n        points.append((x, y))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 653,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    rooms = [0] * 10\n    for i in range(n):\n        if input_string[i] == 'L':\n            for j in range(10):\n                if rooms[j] == 0:\n                    rooms[j] = 1\n                    break\n        elif input_string[i] == 'R':\n            for j in range(9, -1, -1):\n                if rooms[j] == 0:\n                    rooms[j] = 1\n                    break\n        else:\n            rooms[int(input_string[i])] = 0\n    return ''.join(map(str, rooms)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 654,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return 9\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 655,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    x,y=map(int,input().split())\n    if x==1 and y==1:\n        return \"White\"\n    elif x==n and y==n:\n        return \"Black\"\n    elif x==1:\n        return \"White\"\n    elif y==1:\n        return \"Black\"\n    elif x==n:\n        return \"White\"\n    elif y==n:\n        return \"Black\"\n    else:\n        return \"White\" if n%2==0 else \"Black\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 656,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: map(int, input().split())\n    n, k = f()\n    t = list(f())\n    summer_tires = True\n    changes = 0\n    days = 0\n    for temp in t:\n        if temp >= 0:\n            if not summer_tires:\n                changes += 1\n                summer_tires = True\n            days += 1\n        else:\n            if summer_tires:\n                changes += 1\n                summer_tires = False\n            days = 0\n        if days == k:\n            changes += 1\n            days = 0\n    if not summer_tires:\n        changes += 1\n    return changes\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 657,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R=lambda:list(map(int,input().split()))\n    A,B=R()\n    x,y,z=R()\n    yellow=x+y\n    blue=z\n    if x==0:\n        return min(y,B)\n    elif y==0:\n        return min(A,z)\n    elif z==0:\n        return min(A,y)\n    else:\n        return min(A,B,x+y,z)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 658,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: map(int, input().split())\n    n, w, v, u = f()\n    bus = []\n    for _ in range(n):\n        x, y = f()\n        bus.append((x, y))\n    bus.append(bus[0])\n    x, y = 0, 0\n    t = 0\n    while y < w:\n        t += 1\n        x += v\n        y += u\n        for i in range(n):\n            if bus[i][0] <= x <= bus[i+1][0] and bus[i][1] <= y <= bus[i+1][1]:\n                break\n        else:\n            continue\n        if bus[i][0] <= x <= bus[i+1][0] and bus[i][1] <= y <= bus[i+1][1]:\n            return t\n    return \"IMPOSSIBLE\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 659,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(n):\n        if a[i] > a[i+1]:\n            print(i+1, i+2)\n            return\n    print(-1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 660,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, b, p = [int(t) for t in input().split()]\n    bottles = 0\n    towels = 0\n    while n > 1:\n        k = 1\n        while 2**k <= n:\n            k += 1\n        k -= 1\n        n -= 2**k\n        bottles += 2**k * b\n        towels += 2**k * p\n    bottles += n * b\n    towels += n * p\n    return bottles, towels\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 661,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    m,k=map(int,input().split())\n    if k==0:\n        return \"0 0 1 1\"\n    if k==1:\n        return \"0 1 0 1\"\n    if k==2:\n        return \"0 1 1 0\"\n    if k==3:\n        return \"1 0 0 1\"\n    if k==4:\n        return \"1 0 1 0\"\n    if k==5:\n        return \"1 1 0 0\"\n    if k==6:\n        return \"0 0 0 0 1\"\n    if k==7:\n        return \"0 0 1 1 0\"\n    if k==8:\n        return \"0 1 0 0 1\"\n    if k==9:\n        return \"0 1 1 1 0\"\n    if k==10:\n        return \"1 0 0 0 0\"\n    if k==11:\n        return \"1 0 0 1 1\"\n    if k==12:\n        return \"1 1 0 0 0\"\n    if k==13:\n        return \"1 0 1 1 1\"\n    if k==14:\n        return \"1 1 1 0 0\"\n    if k==15:\n        return \"1 1 1 1 1\"\n    if k==16:\n        return \"0 0 0 0 0 1\"\n    if k==17:\n        return \"0 0 0 1 1 0\"\n    if k==18:\n        return \"0 1 0 0 0 1\"\n    if k==19:\n        return \"0 1 1 0 1 0\"\n    if k==20:\n        return \"1 0 0 0 0 0\"\n    if k==21:\n        return \"1 0 0 1 0 1\"\n    if k==22:\n        return \"1 1 0 0 1 0\"\n    if k==23:\n        return \"1 0 ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 662,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l = [int(input()) for _ in range(int(input()))]\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            return \"NO\"\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 663,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r,x,y,xx,yy = list(map(float, input().split()))\n    x_diff = abs(x-xx)\n    y_diff = abs(y-yy)\n    if x_diff == 0 and y_diff == 0:\n        return 0\n    elif x_diff == r and y_diff == r:\n        return 1\n    elif x_diff == r and y_diff == 0:\n        return 2\n    elif x_diff == 0 and y_diff == r:\n        return 2\n    elif x_diff == y_diff:\n        return 1\n    else:\n        return 3\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 664,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if a == sorted(a):\n        return 0\n    else:\n        for i in range(n-1):\n            if a[i] > a[i+1]:\n                return n-i-1\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 665,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    T = int(input())\n    for i in range(T):\n        n, s = map(int, input().split())\n        a = list(map(int, input().split())\n        if sum(a) <= s:\n            print(0)\n        else:\n            max_gifts = 0\n            skip = 0\n            for i in range(n):\n                if sum(a[:i]) <= s:\n                    max_gifts = i\n                else:\n                    break\n            print(max_gifts)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 666,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())-1\n    count=1\n    i=1\n    while n>0:\n        n-=count\n        i+=1\n        count+=i\n    return i-1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 667,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    graph = []\n    for i in range(N):\n        graph.append(list(map(int, input().split()))\n    max_length = 0\n    for i in range(N):\n        for j in range(N):\n            for k in range(N):\n                if i != j:\n                    length = graph[i][j] + graph[j][k]\n                    if i != k:\n                        length += graph[k][i]\n                    max_length = max(max_length, length)\n    return max_length\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 668,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 1:\n        return -1\n    if n == 2:\n        return 1\n    if n == 3:\n        if a[1] == 0:\n            return -1\n        else:\n            return 1\n    if n == 4:\n        if a[1] == 0 or a[2] == 0 or a[3] == 0:\n            return -1\n        else:\n            return 3\n    if n == 5:\n        if a[1] == 0 or a[2] == 0 or a[3] == 0 or a[4] == 0:\n            return -1\n        else:\n            return 3\n    if n == 6:\n        if a[1] == 0 or a[2] == 0 or a[3] == 0 or a[4] == 0 or a[5] == 0:\n            return -1\n        else:\n            return 6\n    if n == 7:\n        if a[1] == 0 or a[2] == 0 or a[3] == 0 or a[4] == 0 or a[5] == 0 or a[6] == 0:\n            return -1\n        else:\n            return 6\n    if n == 8:\n        if a[1] == 0 or a[2] == 0 or a[3] == 0 or a[4] == 0 or a[5] == 0 or a[6] == 0 or a[7] == 0:\n            return -1\n        else:\n            return 6\n    if n == 9:\n        if a[1] == 0 or a[2] == 0 or a[3] == 0 or a[4] == 0 or a[5] == 0 or a[6] == 0 or a[7] == 0 or a[8] == 0:\n            return -1\n        else:\n            return 6\n    if n == 10:\n        if a[1] == 0 or a[2] == 0",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 669,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    a=list(map(int,input().split())\n    max_sum=0\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                for l in range(k+1,n):\n                    max_sum=max(max_sum,((a[i]+a[j]+a[k])%m)%m)\n    return max_sum\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 670,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c=list(map(int,input().split()))\n    x1,y1,x2,y2=list(map(int,input().split())\n    if a==0:\n        return abs(x1-x2)+abs(y1-y2)\n    elif b==0:\n        return abs(y1-y2)+abs(x1-x2)\n    else:\n        x=abs(x1-x2)\n        y=abs(y1-y2)\n        if x==0:\n            return abs(y1-y2)\n        elif y==0:\n            return abs(x1-x2)\n        else:\n            return min(x+y,abs(x-y)+abs(a*x1+b*y1+c)/sqrt(a**2+b**2))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 671,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    count=1\n    for i in range(1,len(input_string)+1):\n        if count==n:\n            print(input_string[i-1])\n            break\n        count+=len(str(i))\n        if count>n:\n            print(input_string[n-1])\n            break\nsolution(\"123456789101112131415\")\n# End your code here\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 672,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b = list(map(int, input().split()))\n    if b == 0:\n        return \"infinity\"\n    else:\n        return \"infinity\" if a % b == 0 else \"1\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 673,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    x=n+k-n%k\n    return x\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 674,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = input()\n    n = int(input())\n    strings = []\n    for i in range(n):\n        strings.append(input())\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 675,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: list(map(int, input().split()))\n    m, t, r = f()\n    w = f()\n    if r > t:\n        return -1\n    if r == t:\n        return m\n    if r == 1:\n        return 1\n    if r == 2:\n        return 2\n    if r == 3:\n        return 3\n    if r == 4:\n        return 4\n    if r == 5:\n        return 5\n    if r == 6:\n        return 6\n    if r == 7:\n        return 7\n    if r == 8:\n        return 8\n    if r == 9:\n        return 9\n    if r == 10:\n        return 10\n    if r == 11:\n        return 11\n    if r == 12:\n        return 12\n    if r == 13:\n        return 13\n    if r == 14:\n        return 14\n    if r == 15:\n        return 15\n    if r == 16:\n        return 16\n    if r == 17:\n        return 17\n    if r == 18:\n        return 18\n    if r == 19:\n        return 19\n    if r == 20:\n        return 20\n    if r == 21:\n        return 21\n    if r == 22:\n        return 22\n    if r == 23:\n        return 23\n    if r == 24:\n        return 24\n    if r == 25:\n        return 25\n    if r == 26:\n        return 26\n    if r == 27:\n        return 27\n    if r == 28:\n        return 28\n    if r == 29:\n        return 29\n    if r == 30:\n        return 30\n    if r == 30:\n        return 30\n    if r == 31:\n        return 31\n    if r == 32:\n        return ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 676,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=[]\n    for i in range(n):\n        a.append(int(input()))\n    a.sort()\n    if n==4:\n        if a[0]==a[1]==a[2]==a[3]:\n            print(\"YES\")\n            print(a[0])\n            print(a[0])\n            print(a[0])\n            print(a[0])\n        else:\n            print(\"NO\")\n    elif n==3:\n        if a[0]==a[1]==a[2]:\n            print(\"YES\")\n            print(a[0])\n            print(a[0])\n            print(a[0])\n        else:\n            print(\"NO\")\n    elif n==2:\n        if a[0]==a[1]:\n            print(\"YES\")\n            print(a[0])\n            print(a[0])\n        else:\n            print(\"NO\")\n    else:\n        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 677,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l,r,d=list(map(int, input().split()))\n    if l%d==0:\n        l+=d\n    if r%d==0:\n        r-=d\n    return l\n    else:\n        return r\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 678,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    tux = 0\n    foo = 0\n    bar = 0\n    baz = 0\n    quz = 1\n    tux = float(input())\n    for i in range(n):\n        pur = float(input())\n        foo += pur\n        bar += 1\n        if foo * quz > bar * baz:\n            baz = foo\n            quz = bar\n    return baz / quz\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 679,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 680,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    pts = [list(map(int, input().split())) for i in range(3)]\n    x_A, y_A = pts[0]\n    x_B, y_B = pts[1]\n    x_C, y_C = pts[2]\n    x_min = min(x_A, x_B, x_C)\n    y_min = min(y_A, y_B, y_C)\n    x_max = max(x_A, x_B, x_C)\n    y_max = max(y_A, y_B, y_C)\n    k = 0\n    for i in range(x_min, x_max+1):\n        for j in range(y_min, y_max+1):\n            if (i,j) != (x_A, y_A) and (i,j) != (x_B, y_B) and (i,j) != (x_C, y_C):\n                k += 1\n    print(k)\n    print(x_A, y_A)\n    print(x_B, y_B)\n    print(x_C, y_C)\n    print(x_min, y_min)\n    print(x_max, y_max)\n    return k\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 681,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = [int(x) for x in input().split()]\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        return (n-1) * (m+1) + 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 682,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c,d=list(map(int,input().split()))\n    r1,c1,r2,c2=a,b,c,d\n    rook=0\n    bishop=0\n    king=0\n    if abs(r1-r2)==abs(c1-c2):\n        rook=abs(r1-r2)\n    elif r1==r2 or c1==c2:\n        rook=max(abs(r1-r2),abs(c1-c2))\n    else:\n        rook=0\n    if abs(r1-r2)==abs(c1-c2):\n        bishop=abs(r1-r2)\n    else:\n        bishop=0\n    if abs(r1-r2)<=1 and abs(c1-c2)<=1:\n        king=max(abs(r1-r2),abs(c1-c2))\n    else:\n        king=0\n    return rook,bishop,king\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 683,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    return 2**n\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 684,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c,d=map(int,input().split())\n    print(a,b,c)\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 685,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R = lambda: map(int, input().split())\n    n, h = R()\n    segments = []\n    for _ in range(n):\n        x1, x2 = R()\n        segments.append((x1, x2))\n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 686,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    for _ in[0]*int(input()):x,y=map(int,input().split());print('YNEOS'[x-y<2::2])\n    # Complete the solution function\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 687,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b = input().split()\n    a = int(a)\n    b = int(b)\n    if a == 1:\n        if b == 2:\n            print(\"199 200\")\n        elif b == 3:\n            print(\"199 201\")\n        elif b == 4:\n            print(\"199 202\")\n        elif b == 5:\n            print(\"199 203\")\n        elif b == 6:\n            print(\"199 204\")\n        elif b == 7:\n            print(\"199 205\")\n        elif b == 8:\n            print(\"199 206\")\n        elif b == 9:\n            print(\"199 207\")\n        else:\n            print(\"-1\")\n    elif a == 2:\n        if b == 1:\n            print(\"200 201\")\n        elif b == 2:\n            print(\"201 202\")\n        elif b == 3:\n            print(\"202 203\")\n        elif b == 4:\n            print(\"203 204\")\n        elif b == 5:\n            print(\"204 205\")\n        elif b == 6:\n            print(\"205 206\")\n        elif b == 7:\n            print(\"206 207\")\n        elif b == 8:\n            print(\"207 208\")\n        elif b == 9:\n            print(\"208 209\")\n        else:\n            print(\"-1\")\n    elif a == 3:\n        if b == 1:\n            print(\"201 202\")\n        elif b == 2:\n            print(\"202 203\")\n        elif b == 3:\n            print(\"203 204\")\n        elif b == 4:\n            print(\"204 205\")\n        elif b == 5:\n            print(\"205 206\")\n        elif b == 6:\n            print(\"",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 688,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = input().replace('5', '2').replace('9', '6')\n    t = int(t)\n    count = 0\n    for i in range(len(input_string)):\n        if input_string[i] == '2':\n            input_string = input_string.replace('2', '5', 1)\n        elif input_string[i] == '6':\n            input_string = input_string.replace('6', '9', 1)\n        elif input_string[i] == '8':\n            input_string = input_string.replace('8', '1', 1)\n        if input_string.count(str(t)):\n            count += input_string.count(str(t))\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 689,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    strings=[]\n    for i in range(n):\n        strings.append(input())\n    for i in range(n):\n        for j in range(n):\n            if i!=j:\n                for k in range(len(strings[i])):\n                    for l in range(len(strings[j])):\n                        if strings[i][k]!=strings[j][l]:\n                            strings[i]=strings[i][:k]+strings[j][l]+strings[i][k+1:]\n                            strings[j]=strings[j][:l]+strings[i][k]+strings[j][l+1:]\n                            break\n    if len(set(strings))==1:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 690,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = input()\n    N = int(N)\n    result = []\n    while N > 0:\n        if N % 10 == 0:\n            result.append('O-|-OOOO')\n        elif N % 10 == 1:\n            result.append('O-|O-OOO')\n        elif N % 10 == 2:\n            result.append('O-|OO-O')\n        elif N % 10 == 3:\n            result.append('O-|OOO-')\n        elif N % 10 == 4:\n            result.append('OO-|OO')\n        elif N % 10 == 5:\n            result.append('OO-|OO')\n        elif N % 10 == 6:\n            result.append('OO-|OO')\n        elif N % 10 == 7:\n            result.append('OO-|OO')\n        elif N % 10 == 8:\n            result.append('OO-|OO')\n        elif N % 10 == 9:\n            result.append('OO-|OO')\n        N //= 10\n    result.reverse()\n    for i in result:\n        print(i)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 691,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,x=map(int,input().split())\n    if x==0:\n        print(\"YES\")\n        print(\"0\"*(n-1)+\" 0\")\n        return\n    if n==1:\n        print(\"YES\")\n        print(x)\n        return\n    if n==2:\n        print(\"YES\")\n        print(x,\"0\")\n        return\n    if n==3:\n        print(\"YES\")\n        print(x,\"0\",x^1)\n        return\n    if n==4:\n        print(\"YES\")\n        print(x,\"0\",x^1,x^2)\n        return\n    if n==5:\n        print(\"YES\")\n        print(x,\"0\",x^1,x^2,x^3,x^4)\n        return\n    if n==6:\n        print(\"YES\")\n        print(x,\"0\",x^1,x^2,x^3,x^4,x^5)\n        return\n    if n==7:\n        print(\"YES\")\n        print(x,\"0\",x^1,x^2,x^3,x^4,x^5,x^6)\n        return\n    if n==8:\n        print(\"YES\")\n        print(x,\"0\",x^1,x^2,x^3,x^4,x^5,x^6,x^7)\n        return\n    if n==9:\n        print(\"YES\")\n        print(x,\"0\",x^1,x^2,x^3,x^4,x^5,x^6,x^7,x^8)\n        return\n    if n==10:\n        print(\"YES\")\n        print(x,\"0\",x^1,x^2,x^3,x^4,x^5,x^6,x^7,x^8,x^9)\n        return\n    print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 692,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    M = list(map(int, input().split()))\n    R = list(map(int, input().split()))\n    M.sort(reverse=True)\n    R.sort(reverse=True)\n    total = sum(M)\n    count = 0\n    for i in range(n):\n        count += min(M[i], R[i])\n    return count/total\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 693,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=list(map(int,input().split()))   \n    colors=list(map(int,input().split())\n    k=list(map(int,input().split())\n    colors.sort()\n    colors.reverse()\n    k.sort()\n    k.reverse()\n    count=0\n    for i in range(m):\n        if colors[i]!=k[i]:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 694,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    a, b = map(int, input().split())\n    n = len(s)\n    for i in range(1, n):\n        if s[:i] % a == 0 and s[i:] % b == 0:\n            return \"YES\\n\" + s[:i] + \"\\n\" + s[i:]\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 695,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x, y = map(int, input().split())\n    if x == y:\n        return 0\n    elif x > y:\n        return x - y\n    else:\n        return y - x\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 696,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    p=int(input())\n    count=0\n    for i in range(1,p):\n        if pow(i,p-1,p)!=1:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 697,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    if n == 0 or m == 0:\n        return 0\n    elif n == 1 and m == 1:\n        return 2\n    else:\n        return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 698,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x, k = [int(x) for x in input().split()]\n    div2_rounds = set()\n    div1_rounds = set()\n    for _ in range(k):\n        line = input().split()\n        if line[0] == '1':\n            div1_rounds.add(int(line[2]))\n            div2_rounds.add(int(line[1]))\n        else:\n            div2_rounds.add(int(line[1]))\n    min_missed = 0\n    max_missed = 0\n    for i in range(1, x):\n        if i not in div2_rounds:\n            min_missed += 1\n            max_missed += 1\n        elif i-1 in div1_rounds:\n            min_missed += 1\n    return min_missed, max_missed\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 699,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    y, k, n = map(int, input().split())\n    x = 1\n    while x * k <= n:\n        if (x + y) % k == 0:\n            print(x, end=' ')\n        x += 1\n    if x * k > n:\n        print(-1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 700,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    map1 = input_string.split('\\n')[:n]\n    map2 = input_string.split('\\n')[n:2*n]\n    for i in range(n):\n        for j in range(n):\n            if map1[i][j] != map2[i][j]:\n                map1[i] = map1[i][::-1]\n                if map1[i][j] != map2[i][j]:\n                    map1[i] = map1[i][::-1]\n                    map1[i] = map1[i][j][::-1] + map1[i][:j][::-1] + map1[i][j+1:]\n                    if map1[i][j] != map2[i][j]:\n                        return \"No\"\n    return \"Yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 701,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s, t = input(), input()\n    if len(s) != len(t):\n        return \"need tree\"\n    for i in range(len(s)):\n        if s[i] != t[i]:\n            return \"both\" if i == len(s) - 1 else \"automaton\"\n    return \"array\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 702,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    gi = lambda : list(map(int,input().strip().split()))\n    n = gi()[0]\n    board = []\n    for i in range(n):\n        board.append(list(input().strip()))\n    return \"YES\" if is_valid(board) else \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 703,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k,a,b,v=map(int,input().split())\n    if a<=b:\n        return 1\n    else:\n        return a//b+1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 704,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    r1, c1, r2, c2 = list(map(int, input().split())\n    r1 -= 1\n    c1 -= 1\n    r2 -= 1\n    c2 -= 1\n    if r1 == r2:\n        return abs(c2 - c1)\n    elif r1 > r2:\n        r1, r2 = r2, r1\n        c1, c2 = c2, c1\n    if c1 > c2:\n        c1, c2 = c2, c1\n    if c1 == 0:\n        return n - r1 + r2 + 1\n    if c2 == a[r2]:\n        return n - r1 + r2 + 1\n    if c1 == a[r1]:\n        return r2 - r1 + 1\n    if c2 == a[r2]:\n        return r2 - r1 + 1\n    return r2 - r1 + 1 + min(c1, c2)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 705,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    x = list(map(int, input().split()))\n    y = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if x[i] ^ y[j] in x or x[i] ^ y[j] in y:\n                count += 1\n    return \"Koyomi\" if count % 2 == 0 else \"Karen\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 706,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,n,x=list(map(int,input().split()))\n    mod=10**9+7\n    for i in range(n-1):\n        x=(a*x+b)%mod\n    return x\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 707,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    x = list(map(int, input().split())\n    p = list(map(int, input().split())\n    for i in range(n):\n        if x[i] % p[j] == 0:\n            y = x[i]\n            j = p.index(x[i])\n            return \"YES\\n{} {}\".format(y, j+1)\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 708,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=list(map(int,input().split()))\n    a,b,c,d=list(map(int,input().split())\n    if k<n-1:\n        print(-1)\n    else:\n        v=[a]\n        u=[c]\n        for i in range(1,n):\n            if i%2==0:\n                v.append(i+1)\n                u.append(i+1)\n            else:\n                v.append(i+2)\n                u.append(i+2)\n        v.append(b)\n        u.append(d)\n        print(\" \".join(map(str,v))\n        print(\" \".join(map(str,u))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 709,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x = int(input())\n    count = 0\n    while x > 1:\n        count += 1\n        x //= 2\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 710,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=input()\n    genome=\"ACTG\"\n    min_ops=n\n    for i in range(n-3):\n        for j in range(i+4,n+1):\n            if s[i:j]==genome:\n                min_ops=min(min_ops,j-i)\n    return min_ops\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 711,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,M = map(int,input().split())\n    count = 0\n    for i in range(1,N+1):\n        for j in range(1,N+1):\n            if i*j == M:\n                count += 1\n    return count % (10**9+7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 712,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, p, t = input().split()\n    n, p, t = int(n), float(p), int(t)\n    p = min(p, 1 - p)\n    return sum([(1 - (1 - p) ** i) * p for i in range(1, n + 1)]) * t\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 713,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=min(list(map(int,input().split())))\n    n,m=map(int,input().split())\n    if n==1:\n        return 1\n    elif m==1:\n        return n\n    else:\n        return n*(n-1)//2\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 714,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    cards=list(map(int,input().split()))\n    cards.sort()\n    for i in range(n//2):\n        print(cards[i],cards[n//2+i])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 715,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    q, t = 0, sorted([(len(input()) - 2, i) for i in 'ABCD'])\n    for i in range(1, len(t)):\n        if len(input_string[t[i][1]) * 2 < len(input_string[t[i-1][1]):\n            q += 1\n    if q == 1:\n        return t[q][1]\n    else:\n        return 'C'\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 716,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,a,b=map(int, input().split())\n    companies=list(map(int, input())\n    min_cost=0\n    for i in range(a,b):\n        if companies[i]!=companies[i-1]:\n            min_cost+=1\n    return min_cost\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 717,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    doctors=[]\n    for i in range(n):\n        s,d=map(int,input().split())\n        doctors.append([s,d])\n    doctors.sort(key=lambda x:x[1])\n    days=0\n    for i in range(n):\n        days+=doctors[i][1]\n    return days+doctors[-1][0]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 718,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x = int(input())\n    if x < 0:\n        x = abs(x)\n    if x == 0:\n        return 1\n    else:\n        return x\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 719,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k = int(input())\n    i = 1\n    while True:\n        if sum(int(digit) for digit in str(i)) == 10:\n            k -= 1\n            if k == 0:\n                return i\n        i += 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 720,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = []\n    b = []\n    for i in range(n):\n        a.append(int(input()))\n        b.append(int(input()))\n    max_draw = 0\n    draw = 0\n    for i in range(n):\n        if a[i] == b[i]:\n            draw += 1\n            max_draw = max(max_draw, draw)\n        else:\n            draw = 0\n    return max_draw\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 721,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,d=map(int,input().split())\n    a=list(map(int,input().split())\n    m=int(input())\n    a.sort()\n    if m<=n:\n        return sum(a[:m])\n    else:\n        return sum(a[:n])-d*m\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 722,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = input()[4:]\n    if len(t) == 1:\n        return 1900 + int(t)\n    elif len(t) == 2:\n        return 1900 + int(t)\n    elif len(t) == 3:\n        return 10000 + int(t)\n    else:\n        return 20000 + int(t)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 724,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, d = list(map(int, input().split()))\n    points = list(map(int, input().split()))\n    points.sort()\n    min_points = 0\n    max_distance = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            distance = points[j] - points[i]\n            if distance > max_distance:\n                max_distance = distance\n        if max_distance > d:\n            min_points += 1\n            max_distance = 0\n    return min_points\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 725,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r,c=list(map(int,input().split()))\n    matrix=[]\n    for i in range(r):\n        matrix.append(list(input().split())\n    for i in range(r):\n        for j in range(c):\n            if matrix[i][j] in ['C','M','Y']:\n                return \"#Color\"\n    return \"#Black&White\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 726,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = list(map(int,input().split()))\n    x = list(map(int,input().split())\n    count = 0\n    for i in range(n):\n        if i == 0:\n            count += 1\n        else:\n            if x[i]-x[i-1] >= 2*m:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 727,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    arr = list(map(int, input_string.split()))\n    count = 0\n    while len(arr) > 0:\n        count += 1\n        for i in range(len(arr)-1):\n            if arr[i] == arr[i+1]:\n                arr.pop(i)\n                break\n            else:\n                continue\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 728,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    votes=list(map(int,input().split())\n    max_votes=max(votes)\n    min_votes=min(votes)\n    if max_votes>min_votes:\n        return max_votes-min_votes\n    else:\n        return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 729,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=input()\n    count_dict={}\n    for i in s:\n        if i in count_dict:\n            count_dict[i]+=1\n        else:\n            count_dict[i]=1\n    for i in count_dict:\n        if count_dict[i]>n//2:\n            return \"NO\"\n    return \"YES\"\n    for i in s:\n        if count_dict[i]>n//2:\n            return \"NO\"\n    return \"YES\"\n    for i in s:\n        if count_dict[i]>n//2:\n            return \"NO\"\n    return \"YES\"\n    for i in s:\n        if count_dict[i]>n//2:\n            return \"NO\"\n    return \"YES\"\n    for i in s:\n        if count_dict[i]>n//2:\n            return \"NO\"\n    return \"YES\"\n    for i in s:\n        if count_dict[i]>n//2:\n            return \"NO\"\n    return \"YES\"\n    for i in s:\n        if count_dict[i]>n//2:\n            return \"NO\"\n    return \"YES\"\n    for i in s:\n        if count_dict[i]>n//2:\n            return \"NO\"\n    return \"YES\"\n    for i in s:\n        if count_dict[i]>n//2:\n            return \"NO\"\n    return \"YES\"\n    for i in s:\n        if count_dict[i]>n//2:\n            return \"NO\"\n    return \"YES\"\n    for i in s:\n        if count_dict[i]>n//2:\n            return \"NO\"\n    return \"YES\"\n    for i in s:\n        if count_dict[i]>n//2:\n            return \"NO\"\n    return \"YES\"\n    for i in s:\n        if count_dict[i]>n//2:\n            return \"NO\"\n    return \"YES\"\n    for i in s:\n        if count_dict[i]>n//2:\n            return \"NO\"\n    return \"",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 730,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k = int(input())\n    if k == 0:\n        print(\"+------------------------+\")\n        print(\"|D|\")\n        print(\"+------------------------+\")\n        return\n    if k == 1:\n        print(\"+------------------------+\")\n        print(\"|O|D|\")\n        print(\"+------------------------+\")\n        return\n    if k == 2:\n        print(\"+------------------------+\")\n        print(\"|O.O|D|\")\n        print(\"+------------------------+\")\n        return\n    if k == 3:\n        print(\"+------------------------+\")\n        print(\"|O.O.O|D|\")\n        print(\"+------------------------+\")\n        return\n    if k == 4:\n        print(\"+------------------------+\")\n        print(\"|O.O.O.O|D|\")\n        print(\"+------------------------+\")\n        return\n    if k == 5:\n        print(\"+------------------------+\")\n        print(\"|O.O.O.O.O|D|\")\n        print(\"+------------------------+\")\n        return\n    if k == 6:\n        print(\"+------------------------+\")\n        print(\"|O.O.O.O.O.O|D|\")\n        print(\"+------------------------+\")\n        return\n    if k == 7:\n        print(\"+------------------------+\")\n        print(\"|O.O.O.O.O.O.O|D|\")\n        print(\"+------------------------+\")\n        return\n    if k == 8:\n        print(\"+------------------------+\")\n        print(\"|O.O.O.O.O.O.O.O|D|\")\n        print(\"+------------------------+\")\n        return\n    if k == 9:\n        print(\"+------------------------+\")\n        print(\"|O.O.O.O.O.O.O.O.O|D|\")\n        print(\"+------------------------+\")\n        return\n    if k == 10:\n        print(\"+------------------------+\")\n        print(\"|O.O.O.O.O.O.O.O.O.O|D|\")\n        print(\"+------------------------+",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 731,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    w, m, k = map(int, input().split())\n    n = m\n    count = 0\n    while w >= k * len(str(n)):\n        w -= k * len(str(n))\n        n += 1\n        count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 732,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    count = 0\n    for i in range(1, n+1):\n        if '4' in str(i) or '7' in str(i):\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 733,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x,y,a,b = map(int, input().split())\n    red_bricks = set()\n    pink_bricks = set()\n    for i in range(a,b+1):\n        if i%x == 0:\n            red_bricks.add(i)\n        if i%y == 0:\n            pink_bricks.add(i)\n    return len(red_bricks.intersection(pink_bricks))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 734,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    a=list(map(int,input().split())\n    max_blocks=0\n    for i in range(n):\n        if a[i]<=k:\n            max_blocks+=a[i]\n        else:\n            max_blocks+=k\n    return max_blocks\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 735,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    for i in range(n-1):\n        if a[i] > a[i+1]:\n            print(\"yes\", i+1, n)\n            return\n    print(\"no\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 736,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    if n%m==0:\n        return n\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 737,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    return 4*n\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 738,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\ta, b, c, d = map(int, input().split())\n    count = 0\n    for x in range(a, d+1):\n        for y in range(b, d+1):\n            for z in range(c, d+1):\n                if x + y > z and x**2 + y**2 > z**2:\n                    count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 739,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    L, a, b, m = map(int, input().split())\n    s = str(a)\n    for i in range(1, L):\n        s += str(a + b*i)\n    return int(s) % m\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 740,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k, n1, n2, n3, t1, t2, t3 = map(int, input().split())\n    k = int(k)\n    n1 = int(n1)\n    n2 = int(n2)\n    n3 = int(n3)\n    t1 = int(t1)\n    t2 = int(t2)\n    t3 = int(t3)\n    time = 0\n    washing_machines = n1\n    drying_machines = n2\n    folding_machines = n3\n    washing_time = t1\n    drying_time = t2\n    folding_time = t3\n    pieces_of_laundry = k\n    while pieces_of_laundry > 0:\n        if washing_machines > 0:\n            washing_machines -= 1\n            pieces_of_laundry -= 1\n            time += washing_time\n        if drying_machines > 0 and time % t1 == 0:\n            drying_machines -= 1\n            time += drying_time\n        if folding_machines > 0 and time % t2 == 0:\n            folding_machines -= 1\n            time += folding_time\n    return time\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 741,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn, M = list(map(int, input().split()))\n    a = list(map(int, input().split())\n    a.sort()\n    total_time = 0\n    for i in range(len(a)):\n        if i == 0:\n            total_time += a[i] - 0\n        else:\n            total_time += a[i] - a[i-1]\n    total_time += M - a[-1]\n    return total_time\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 742,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n=int(input())\n        b=list(map(int,input().split()))\n        a=[]\n        for j in range(1,2*n+1):\n            a.append(j)\n        for k in range(n):\n            if b[k]>2*n:\n                print(-1)\n                break\n            else:\n                a[2*k-1]=b[k]\n                a[2*k]=b[k]\n        else:\n            print(*a)\nsolution(input())\n# End of code\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 743,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    numbers = list(map(int, input_string.split()))\n    numbers.sort()\n    return sum(numbers) - (n * numbers[0])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 744,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    seattle_to_san_fran = 0\n    san_fran_to_seattle = 0\n    for i in range(n):\n        if input_string[i] == 'S':\n            seattle_to_san_fran += 1\n        else:\n            san_fran_to_seattle += 1\n    if seattle_to_san_fran > san_fran_to_seattle:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 745,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    if k>n*(n-1)//2:\n        return 0\n    if k==0:\n        return 1\n    if k==1:\n        return n*(n-1)\n    mod=998244353\n    dp=[[0]*n for i in range(n)]\n    for i in range(n):\n        dp[i][i]=1\n    for i in range(n):\n        for j in range(n):\n            if i!=j:\n                dp[i][j]=n*(n-1)-i-j\n    for i in range(n):\n        for j in range(n):\n            for l in range(n):\n                if i!=l and j!=l:\n                    dp[i][j]=(dp[i][j]+dp[i][l]+dp[j][l])%mod\n    return dp[0][n-1]%mod\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 746,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b = map(int, input().split())\n    n = int(input())\n    cars = []\n    for i in range(n):\n        x, y, v = map(int, input().split())\n        cars.append((x, y, v))\n    min_time = float('inf')\n    for car in cars:\n        x, y, v = car\n        time = ((x - a) ** 2 + (y - b) ** 2) ** 0.5 / v\n        min_time = min(min_time, time)\n    return min_time\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 747,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, x = map( int, input().split() )\n    candies = []\n    for i in range(n):\n        t, h, m = map(int, input().split())\n        candies.append((t, h, m))\n    candies.sort(key=lambda x: x[1])\n    max_candies = 0\n    current_jump = x\n    current_candy = 0\n    for i in range(n):\n        if candies[i][1] <= current_jump:\n            current_jump += candies[i][2]\n            current_candy += 1\n            max_candies = max(max_candies, current_candy)\n        else:\n            current_candy = 1\n            current_jump = x + candies[i][2]\n    return max_candies\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 748,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    sequence = list(map(int, input().split()))\n    if n % 3 != 0:\n        return -1\n    sequence.sort()\n    groups = []\n    for i in range(0, n, 3):\n        groups.append([sequence[i], sequence[i+1], sequence[i+2]])\n    for i in range(len(groups)):\n        for j in range(i+1, len(groups)):\n            for k in range(j+1, len(groups)):\n                if groups[i][0] < groups[j][0] < groups[k][0] and groups[i][0] % groups[j][0] == 0 and groups[j][0] % groups[k][0] == 0:\n                    if groups[i][1] < groups[j][1] < groups[k][1] and groups[i][1] % groups[j][1] == 0 and groups[j][1] % groups[k][1] == 0:\n                        if groups[i][2] < groups[j][2] < groups[k][2] and groups[i][2] % groups[j][2] == 0 and groups[j][2] % groups[k][2] == 0:\n                            print(groups[i][0], groups[j][0], groups[k][0])\n                            print(groups[i][1], groups[j][1], groups[k][1])\n                            print(groups[i][2], groups[j][2], groups[k][2])\n                            return\n    print(-1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 749,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = list(input())\n    n = len(s)\n    for k in range(1, n+1):\n        for i in range(n-k+1):\n            substring = s[i:i+k]\n            if len(set(substring)) == 1:\n                return k\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 750,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=list(map(int,input().split()))\n    red=n//2\n    green=n//5\n    blue=n//8\n    if n%2!=0:\n        red+=1\n    if n%5!=0:\n        green+=1\n    if n%8!=0:\n        blue+=1\n    return red*k+green*k+blue*k\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 751,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = map(int,input().split())\n    a = list(map(int,input().split())\n    count = 0\n    for i in range(n):\n        if a[i]%m == 0:\n            count += a[i]/m\n        else:\n            count += a[i]//m + 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 752,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=[]\n    b=[]\n    for i in range(n):\n        a.append(input())\n    for i in range(n):\n        b.append(input())\n    count=0\n    for i in range(n):\n        for j in range(n):\n            if a[i]!=b[j]:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 753,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b, c, d = list(map(int, input().split()))\n    if a/b > c/d:\n        p = b*d\n        q = a*c\n    else:\n        p = a*d\n        q = b*c\n    return f\"{p}/{q}\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 754,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, s = int(input()), input()\n    count = 0\n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 755,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = int(input())\n    if a % 5 == 0:\n        return a // 5\n    elif a % 5 == 1:\n        return a // 5 + 1\n    elif a % 5 == 2:\n        return a // 5 + 1\n    elif a % 5 == 3:\n        return a // 5 + 2\n    elif a % 5 == 4:\n        return a // 5 + 2\n    else:\n        return a // 5 + 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 756,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    minutes = list(map(int, input().split()))\n    boring_minutes = 0\n    total_minutes = 0\n    for i in range(n):\n        if minutes[i] - total_minutes >= 15:\n            total_minutes += minutes[i]\n            boring_minutes = 0\n        else:\n            boring_minutes += 1\n            if boring_minutes == 15:\n                break\n            total_minutes += minutes[i]\n    return total_minutes\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 757,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k = map(int, input().split())\n    a = list(map(int, input().split())\n    if k < sum(a):\n        return -1\n    else:\n        return 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 758,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, s = int(input()), input()\n    count = 0\n    stack = []\n    for i in s:\n        if i == 'R':\n            stack.append(i)\n        else:\n            if stack and stack[-1] == 'B':\n                stack.pop()\n                stack.append('R')\n                count += 1\n            else:\n                stack.append(i)\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 759,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    hh, mm = map(int, input().split())\n    H, D, C, N = map(int, input().split())\n    if hh == 20 and mm == 0:\n        return H * C\n    else:\n        time_left = 60 - mm\n        total_time = 60 * (24 - hh) + time_left\n        total_hunger = H + D * total_time\n        total_cost = total_time * C\n        if total_hunger <= 0:\n            return 0\n        if total_hunger % N == 0:\n            return total_cost\n        else:\n            return total_cost + (total_hunger // N + 1) * C\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 760,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t, k = input(), int(input())\n    n = len(t)\n    t += 'a' * k\n    max_len = 0\n    for i in range(n):\n        for j in range(i + 1, n + k):\n            if t[i:j] == t[j:j + n]:\n                max_len = max(max_len, j - i)\n    return max_len\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 761,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    if input()=='1':\n    n=int(input())\n    a=list(map(int,input().split())\n    max_val=max(a)\n    return max_val\n    else:\n        n=int(input())\n        a=list(map(int,input().split())\n        max_val=max(a)\n        return max_val\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 762,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    q,w = list(map(int,input().split()))\n    a = list(map(int,input().split())\n    even = 0\n    odd = 0\n    for i in a:\n        if i%2 == 0:\n            even += 1\n        else:\n            odd += 1\n    if even != odd:\n        return 0\n    else:\n        return min(even,odd)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 763,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    x=0\n    for i in range(n):\n        x+=a[i]*(i+1)+a[i]*(n-i-1)\n    return x*2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 764,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    num = int(input())\n    y = input()\n    count = 0\n    for i in range(num):\n        if y[i:] + y[:i] == y:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 765,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    T,S,q=list(map(int,input().split()));a=0\n    if S>q-1:\n        a=T//(q-1)\n        if T%(q-1)!=0:\n            a+=1\n    else:\n        a=1\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 766,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    n = len(s)\n    if n % 2 != 0:\n        return \"No\"\n    for i in range(n//2):\n        if s[i] != s[i+n//2]:\n            return \"No\"\n    return \"Yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 767,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, z = list(map(int, input().split()))\n    x = list(map(int, input().split()))\n    x.sort()\n    count = 0\n    i = 0\n    j = n - 1\n    while i < j:\n        if x[j] - x[i] >= z:\n            count += 1\n            i += 1\n            j -= 1\n        else:\n            j -= 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 768,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k=map(int,input().split())\n    friends=[]\n    for i in range(n):\n        friends.append(list(input())\n    count=0\n    for i in range(m):\n        if friends.count('Y')>=k:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 769,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c = map(int, input().split())\n    decimal = str(a/b)\n    if str(c) in decimal:\n        return decimal.index(str(c))+1\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 770,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=\\\"\\\".join(input().split())\n    n=int(input())\n    letters=list(map(int,input_string.split()))\n    count=0\n    for i in range(n):\n        if letters[i]==0:\n            count+=1\n    if count==0:\n        return 0\n    elif count==1:\n        return 1\n    else:\n        return count-1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 771,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k, m = [int(i) for  i in input().split()]\n    nums = [int(i) for i in input().split()]\n    nums_dict = {}\n    for num in nums:\n        if num in nums_dict:\n            nums_dict[num] += 1\n        else:\n            nums_dict[num] = 1\n    nums = list(nums_dict.keys())\n    nums.sort()\n    nums_dict = {k: v for k, v in nums_dict.items()}\n    result = []\n    for num in nums:\n        if nums_dict[num] > 0:\n            for i in range(num, num*m, num):\n                if i in nums_dict and nums_dict[i] > 0:\n                    result.append(i)\n                    nums_dict[num] -= 1\n                    nums_dict[i] -= 1\n                    if len(result) == k:\n                        break\n    if len(result) == k:\n        print(\"Yes\")\n        print(\" \".join(str(i) for i in result))\n    else:\n        print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 772,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l=[[0]*5]+[[0]+list(map(int,input().split()))+[0] for _ in range(3)]+[[0]*5]\n    for i in range(1,4):\n        for j in range(1,4):\n            l[i][j]=l[i-1][j]^l[i][j-1]^l[i][j+1]^l[i+1][j]^l[i+1][j-1]^l[i+1][j+1]\n    for i in range(1,4):\n        print(\"\".join([\"1\" if l[i][j] else \"0\" for j in range(1,4)]))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 773,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,q = list(map(int,input().split()))\n    facts = []\n    for i in range(q):\n        t,l,r,v = list(map(int,input().split())\n        facts.append((t,l,r,v))\n    if n == 1:\n        return 1\n    if n == 2:\n        if q == 1:\n            if facts[0][0] == 1 and facts[0][1] == 1 and facts[0][2] == 2:\n                return 4\n            else:\n                return -1\n        else:\n            return -1\n    if n == 3:\n        if q == 1:\n            if facts[0][0] == 1 and facts[0][1] == 1 and facts[0][2] == 2:\n                return 5\n            elif facts[0][0] == 1 and facts[0][1] == 2 and facts[0][2] == 3:\n                return 5\n            elif facts[0][0] == 2 and facts[0][1] == 1 and facts[0][2] == 2:\n                return 5\n            elif facts[0][0] == 2 and facts[0][1] == 2 and facts[0][2] == 3:\n                return 5\n            else:\n                return -1\n        elif q == 2:\n            if facts[0][0] == 1 and facts[0][1] == 1 and facts[0][2] == 2 and facts[1][0] == 2 and facts[1][1] == 1 and facts[1][2] == 3:\n                return 9\n            elif facts[0][0] == 1 and facts[0][1] == 1 and facts[0][2] == 3 and facts[1][0] == 2 and facts[1][1] == 1 and facts[1][2] == 2:\n                return 9\n            elif facts[0][0] == 1 and facts[0][1] == 2 and facts[0][2] == 2 and facts[1][0] == 2 and facts[1][1] == 3 and facts[1][2] ==",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 774,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x,y,n=map(int,input().split())\n    a=0\n    b=1\n    while b<=n:\n        if y*b<=n*x:\n            a=x*b//y\n            if y*b==n*a:\n                return str(a)+\"/\"+str(b)\n            elif y*(b+1)>n*a:\n                return str(a)+\"/\"+str(b)\n            b+=1\n    return str(a)+\"/\"+str(b)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 775,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k=map(int,input().split())\n    holes=list(map(int,input().split())\n    cups=[i for i in range(1,n+1)]\n    for i in range(k):\n        u,v=map(int,input().split())\n        cups[u-1],cups[v-1]=cups[v-1],cups[u-1]\n    for i in range(m):\n        if holes[i] in cups:\n            cups.remove(holes[i])\n    return cups[0]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 776,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b, c = list(map(int, input().split()))\n    m = int(input())\n    mouses = []\n    for i in range(m):\n        val, port = input().split()\n        mouses.append((int(val), port)\n    mouses.sort(key=lambda x: x[0])\n    total_cost = 0\n    equipped = 0\n    for mouse in mouses:\n        if mouse[1] == \"USB\" and a > 0:\n            a -= 1\n            total_cost += mouse[0]\n            equipped += 1\n        elif mouse[1] == \"PS/2\" and b > 0:\n            b -= 1\n            total_cost += mouse[0]\n            equipped += 1\n        elif mouse[1] == \"Both\" and c > 0:\n            c -= 1\n            total_cost += mouse[0]\n            equipped += 1\n    return equipped, total_cost\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 777,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 778,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, K = map(int, input().split())\n    heights = [int(x) for x in input().split()]\n    requirements = []\n    for i in range(K):\n        x, sign, y = map(int, input().split())\n        requirements.append((x, sign, y))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 779,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    if n%2==0:\n        return n//2\n    else:\n        return (n//2)+1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 780,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    result=[[-1 for i in range(10)] for j in range(10)]\n    for i in range(10):\n        for j in range(10):\n            if i==0 and j==0:\n                result[i][j]=0\n            elif i==0:\n                result[i][j]=len(input_string)-1\n            elif j==0:\n                result[i][j]=len(input_string)-1\n            else:\n                result[i][j]=len(input_string)-1\n                for k in range(len(input_string)):\n                    if input_string[k]==str(i):\n                        result[i][j]=k\n                        break\n                if result[i][j]==len(input_string)-1:\n                    result[i][j]=-1\n    for i in range(10):\n        for j in range(10):\n            print(result[i][j],end=\" \")\n        print()\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 781,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    for i in range(len(s)):\n        if s[i]==s[i+1]:\n            return \"NO\"\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 782,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    m = int(input())\n    s = list(map(int, input().split()))\n    n = len(s)\n    if n == 1:\n        return -1\n    if n == 2:\n        return 2, s[0], s[1]\n    if n == 3:\n        if s[0] == 1:\n            return 3, 1, s[1], s[2]\n        else:\n            return -1\n    if n == 4:\n        if s[0] == 1:\n            return 4, 1, s[1], s[2], s[3]\n        elif s[0] == 2:\n            return 4, 2, s[1], s[2], s[3]\n        else:\n            return -1\n    if n == 5:\n        if s[0] == 1:\n            return 5, 1, s[1], s[2], s[3], s[4]\n        elif s[0] == 2:\n            return 5, 2, s[1], s[2], s[3], s[4]\n        elif s[0] == 3:\n            return 5, 3, s[1], s[2], s[3], s[4]\n        else:\n            return -1\n    if n == 6:\n        if s[0] == 1:\n            return 6, 1, s[1], s[2], s[3], s[4], s[5]\n        elif s[0] == 2:\n            return 6, 2, s[1], s[2], s[3], s[4], s[5]\n        elif s[0] == 3:\n            return 6, 3, s[1], s[2], s[3], s[4], s[5]\n        elif s[0] == 4:\n            return 6, 4, s[1], s[2], s[3], s[4], s[5]\n        else:\n            return -1\n    if n == 7:\n        if s[0] == 1:\n            return 7, 1, s",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 783,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    h = list(map(int, input().split()))\n    a = [0] * n\n    max_height = 0\n    for i in range(n):\n        if h[i] > max_height:\n            max_height = h[i]\n        else:\n            a[i] = max_height - h[i]\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 784,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    q,w=map(int,input().split())\n    if q==w:\n        print(\"YES\")\n        print(1)\n        print(q)\n        return\n    if w%2==0:\n        w=w//2\n        if q==w:\n            print(\"YES\")\n            print(1)\n            print(q)\n            return\n    else:\n        w=w//2\n        if q==w:\n            print(\"YES\")\n            print(2)\n            print(q,q*2)\n            return\n    if q==1:\n        print(\"YES\")\n        print(2)\n        print(q,q*2)\n        return\n    if q%2==0:\n        q=q//2\n        if q==w:\n            print(\"YES\")\n            print(3)\n            print(q,q*2,w)\n            return\n    else:\n        q=q//2\n        if q==w:\n            print(\"YES\")\n            print(3)\n            print(q,q*2,w)\n            return\n    if q==1:\n        print(\"YES\")\n        print(3)\n        print(q,q*2,w)\n        return\n    if q%2==0:\n        q=q//2\n        if q==w:\n            print(\"YES\")\n            print(4)\n            print(q,q*2,w,w*2)\n            return\n    else:\n        q=q//2\n        if q==w:\n            print(\"YES\")\n            print(4)\n            print(q,q*2,w,w*2)\n            return\n    if q==1:\n        print(\"YES\")\n        print(4)\n        print(q,q*2,w,w*2)\n        return\n    if q%2==0:\n        q=q//2\n        if q==w:\n            print(\"YES\")\n            print(5)\n            print(q,q*2,w,w*2,w*2+1)\n            return\n    else:\n        q=q//2\n        if q==w:\n            print(\"YES\")\n            print(5)\n            print(q,q",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 785,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, a, b = map(int, input().split())\n    s = 6*n\n    a_1 = max(a, b)\n    b_1 = min(a, b)\n    while s > 6*n:\n        if a_1 > b_1:\n            a_1 -= 1\n        else:\n            b_1 += 1\n        s = a_1 * b_1\n    print(s)\n    print(a_1, b_1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 786,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    c=[]\n    d=[]\n    for i in range(n):\n        c.append(int(input().split()[0])),d.append(int(input().split()[1])\n    if d[0]==1:\n        if c[0]<0:\n            return \"Impossible\"\n        else:\n            max_rating=190+c[0]\n    else:\n        max_rating=189\n    for i in range(1,n):\n        if d[i]==1:\n            if c[i]<0:\n                max_rating=max(max_rating,190+c[i])\n            else:\n                max_rating=max(max_rating,189+c[i])\n        else:\n            if c[i]>0:\n                max_rating=max(max_rating,189+c[i])\n    if max_rating>190:\n        return \"Infinity\"\n    else:\n        return max_rating\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 787,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k, q, v, s = int(input()), input(), 'YES', set()\n    for i in range(1, len(q)+1):\n        for j in range(1, len(q)+1):\n            if i*j <= len(q):\n                s.add(q[:i*j])\n    for i in range(1, k+1):\n        for j in s:\n            if len(j) == i:\n                print(j)\n                break\n        else:\n            return 'NO'\n    return 'YES'\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 788,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()[1:]\n    s = list(map(int, s))\n    s.sort(reverse=True)\n    return s[0]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 789,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    count=0\n    for i in range(1,int(s)+1):\n        if '4' in str(i) or '7' in str(i):\n            count+=1\n        if i==int(s):\n            return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 790,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split());a = list(map(int, input().split()));d = list(map(int, input().split()))\n    max_energy = 0\n    for i in range(n):\n        a[i] -= d[i]\n    for i in range(k):\n        max_energy += max(a)\n        a.remove(max(a) if max(a) > 0 else 0)\n    return max_energy\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 791,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    w=int(input())\n    n=len(input_string)\n    input_string=input_string[::-1]\n    carry=1\n    for i in range(n):\n        if input_string[i]=='0':\n            input_string[i]='1'\n            carry=0\n            break\n        elif input_string[i]=='1':\n            input_string[i]='0'\n            carry=1\n    if carry==1:\n        input_string[0]='1'\n        input_string.append('0')\n    return n-input_string.index('1')\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 792,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,d=map(int,input().split())\n    a=list(map(int,input().split())\n    count=0\n    for i in range(n):\n        if a[i]>0:\n            count+=a[i]\n        elif a[i]<0:\n            count+=a[i]\n        if count>d:\n            return -1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 793,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,M = map(int,input().split())\n    S = list(map(int,input().split())\n    T = list(map(int,input().split())\n    count = 0\n    for i in range(2**N):\n        for j in range(2**M):\n            s = []\n            t = []\n            for k in range(N):\n                if i & (1<<k):\n                    s.append(S[k])\n            for k in range(M):\n                if j & (1<<k):\n                    t.append(T[k])\n            if sorted(s) == sorted(t):\n                count += 1\n    return count % (10**9+7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 794,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if sum(a[:n]) == sum(a[n:]):\n        return \"-1\"\n    else:\n        return \" \".join(map(str, a)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 795,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())     \n    count = 0\n    for a in range(1, n+1):\n        for b in range(a+1, n+1):\n            c = (a**2 + b**2)**0.5\n            if c.is_integer() and c <= n:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 796,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = [int(item) for item in input().split()]\n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 797,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,a,b=map(int,input().split())\n    g0,x,y,z=map(int,input().split())\n    h=[[0]*m for i in range(n)]\n    for i in range(n):\n        for j in range(m):\n            h[i][j]=((g0*x+y)%z)\n    ans=0\n    for i in range(n-a+1):\n        for j in range(m-b+1):\n            ans+=min(h[i][j:j+b])\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 798,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b, c = [int(x) for x in input().split()]\n    if a + b + c > 4:\n        print(\"Impossible\")\n    elif a + b + c == 4:\n        print(\"0 1 1\")\n    elif a + b + c == 5:\n        print(\"1 3 2\")\n    else:\n        print(\"Impossible\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 799,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    a.sort()\n    if n%2==0:\n        mid=n//2\n        sum=0\n        for i in range(mid):\n            sum+=a[i]\n        return sum\n    else:\n        mid=n//2\n        sum=0\n        for i in range(mid):\n            sum+=a[i]\n        return sum+a[mid]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 800,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x,y=map(int,input().split())\n    x_list=[]\n    y_list=[]\n    for i in range(int(input_string)):\n        x,y=map(int,input().split())\n        x_list.append(x)\n        y_list.append(y)\n    x_list.sort()\n    y_list.sort()\n    if x_list[0]==x_list[1] and y_list[0]==y_list[1]:\n        angle=90\n    elif x_list[0]==x_list[1]:\n        angle=0\n    elif y_list[0]==y_list[1]:\n        angle=90\n    else:\n        angle=math.degrees(math.atan((y_list[1]-y_list[0])/(x_list[1]-x_list[0]))\n    return angle\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 801,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input());p = list(map(int,input().split()));pos = [[] for i in range(n+2)];query = [[] for i in range(n)]\n    for i in range(n):\n        pos[p[i]].append(i)\n    for i in range(1,n+1):\n        query[i-1] = [len(pos[i])]\n        for j in range(i+1,n+1):\n            query[i-1].append(len(pos[j])-len(pos[i]))\n    for i in range(n-1,0,-1):\n        query[i-1].append(query[i][0]+query[i][1])\n    for i in range(n-1):\n        query[i].append(query[i+1][0]+query[i+1][1])\n    return query[0][0]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 802,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    ans=n=int(input())\n    s=input()\n    types=set(s)\n    count=0\n    for i in range(n):\n        if s[i] in types:\n            types.remove(s[i])\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 803,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    hamsters = list(input())\n    standing = hamsters.count('X')\n    if standing == n // 2:\n        return 0, ''.join(hamsters)\n    elif standing > n // 2:\n        return n // 2 - standing, ''.join(['X' if hamster == 'x' else 'x' for hamster in hamsters])\n    else:\n        return standing - n // 2, ''.join(['X' if hamster == 'x' else 'x' for hamster in hamsters])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 804,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    k = int(input())\n    if len(set(s)) >= k:\n        print(0)\n    else:\n        print(\"impossible\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 805,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    segments=[]\n    for i in range(n):\n        l,r=map(int,input().split())\n        segments.append((l,r))\n    segments.sort()\n    total_length=100\n    for i in range(n-1):\n        if segments[i][1]>=segments[i+1][0]:\n            total_length-=segments[i+1][1]-segments[i][0]\n    return total_length\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 806,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, l, r = list(map(int, input().split()))\n    if (r-l+1)%3 != 0:\n        return 0\n    else:\n        return (r-l+1)//3\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 807,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,c=list(map(int,input().split()))\n    x=list(map(int,input().split())\n    max_profit=0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if x[i]-x[j]<=c:\n                max_profit=max(max_profit,x[i]-x[j])\n    return max_profit\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 808,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    a = \"\"\n    b = \"\"\n    if \".\" in s:\n        a, b = s.split(\".\")\n        b = b.rstrip(\"0\")\n        if b == \"\":\n            b = \"0\"\n    else:\n        a = s\n        b = \"0\"\n    if a == \"1\":\n        a = \"\"\n    if a != \"\":\n        a = int(a)\n    if b == \"0\":\n        return str(a)\n    else:\n        return str(a) + \"E\" + b\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 809,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k,a,b = map(int,input().split())\n    if a+b != n:\n        return \"NO\"\n    if a == 0:\n        return \"B\"*n\n    if b == 0:\n        return \"G\"*n\n    if k == 1:\n        return \"NO\"\n    if n%(a+b) != 0:\n        return \"NO\"\n    if k > a+b:\n        return \"NO\"\n    if k == 2:\n        return \"GB\"*n\n    if k == a+b:\n        return \"GB\"*(a//2)+\"G\"*(a%2)+\"B\"*(b//2)+\"G\"*(b%2)\n    if k == a:\n        return \"G\"*n\n    if k == b:\n        return \"B\"*n\n    if k == a+1:\n        return \"GB\"*(n//2)+\"G\"*(n%2)\n    if k == b+1:\n        return \"B\"*(n//2)+\"G\"*(n%2)\n    if k == a+b-1:\n        return \"GB\"*(n//2)+\"B\"*(n%2)\n    if k == a+b-2:\n        return \"GB\"*(n//3)+\"G\"*(n%3)\n    if k == a+b-3:\n        return \"GB\"*(n//4)+\"G\"*(n%4)\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 810,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b, n = list(map(int, input().split()))\n    count = 0\n    for i in range(1, 10**n):\n        if all(d in str(i) for d in str(a) + str(b)):\n            if sum(map(int, str(i)) % 10 == 0:\n                continue\n            count += 1\n    return count % 100000007\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 811,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b = map(int, input().split())\n    hours = 0\n    while a > 0:\n        hours += 1\n        a -= b\n        a += 1\n    return hours\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 812,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    b = list(map(int, input().split()))\n    for i in range(n):\n        b.pop(i)\n        b.sort()\n        c = b[1] - b[0]\n        for j in range(1, n-1):\n            if b[j] - b[j-1] != c:\n                break\n            c = b[j] - b[j-1]\n        else:\n            return i+1\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 813,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, a, b = list(map(int, input().split()))\n    arthur_likes = list(map(int, input().split())[:a]\n    alexander_likes = list(map(int, input().split())[:b]\n    result = [0] * n\n    for i in range(n):\n        if i in arthur_likes:\n            result[i] = 1\n        elif i in alexander_likes:\n            result[i] = 2\n        else:\n            continue\n    return \"\".join(map(str, result))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 814,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(n):\n        a[i] = a[i] + i\n    for i in range(n-1, 0, -1):\n        a[i-1] = max(a[i-1], a[i])\n    for i in range(n):\n        print(a[i], end=\" \")\n# Test your code with this example\ninput_string = \"4\\n3 2 1 2\"\nsolution(input_string) ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 815,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    V1, V2, V3, Vm = map(int, input().split())\n    if V1 > V2 > V3:\n        if V1 > Vm:\n            if 2*V3 >= V1:\n                if V2 > V3:\n                    if 2*V2 >= V1:\n                    #print(V1, V2, V3)\n                    return V1, V2, V3\n                else:\n                    if 2*V2 >= V3:\n                        #print(V1, V3, V2)\n                        return V1, V3, V2\n            else:\n                if 2*V3 >= V2:\n                    #print(V2, V1, V3)\n                    return V2, V1, V3\n        else:\n            if 2*V3 >= Vm:\n                if V2 > V3:\n                    if 2*V2 >= Vm:\n                        #print(Vm, V2, V1)\n                        return Vm, V2, V1\n                else:\n                    if 2*V2 >= Vm:\n                        #print(Vm, V1, V2)\n                        return Vm, V1, V2\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 816,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    _, n=map(int, input().split())\n    a=list(map(int, input().split())\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if a[i]^a[j]==x:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 817,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input().strip();N = len(s)\n    for i in range(N-1, -1, -1):\n        if s[i] == s[i+1]:\n            print(N-i-1, end=' ')\n            print(s[:i+1], end=' ')\n            s = s[:i] + s[i+2:]\n            N = len(s)\n        else:\n            print(N, end=' ')\n            print(s, end=' ')\n            break\nsolution(input())\n# End your code here\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 818,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n < 4:\n        return -1\n    for i in range(10**(n-1), 10**n):\n        if i % 2 == 0 and i % 3 == 0 and i % 5 == 0 and i % 7 == 0:\n            return i\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 819,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k = map(int,input().split())\n    a = list(map(int,input().split())\n    a.sort()\n    if k == 1:\n        return a[-1]\n    elif k == n:\n        return a[0]\n    else:\n        return max(a[k-1],a[-k])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 820,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    m = int(input())\n    a = []\n    for i in range(n):\n        a.append(int(input()))\n    a.sort(reverse=True)\n    count = 0\n    for i in a:\n        if m > 0:\n            count += 1\n            m -= i\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 821,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s,v1,v2,t1,t2=map(int,input().split())\n    if v1*s+t1<v2*s+t2:\n        print(\"First\")\n    elif v1*s+t1>v2*s+t2:\n        print(\"Second\")\n    else:\n        print(\"Friendship\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 822,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,z = (int(x) for x in input().split())\n    return (z//m) - (z//n)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 823,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x,y = map(int,input().split())\n    if x == 0 and y == 0:\n        return 0\n    elif x == 0:\n        return abs(y)\n    elif y == 0:\n        return abs(x)\n    elif x > 0 and y > 0:\n        return 2*min(abs(x),abs(y))\n    elif x < 0 and y > 0:\n        return 2*min(abs(x),abs(y))\n    elif x < 0 and y < 0:\n        return 2*min(abs(x),abs(y))\n    elif x > 0 and y < 0:\n        return 2*min(abs(x),abs(y))\n    elif x == y:\n        return 1\n    elif x > 0 and y < 0:\n        return 2*min(abs(x),abs(y))+1\n    elif x < 0 and y > 0:\n        return 2*min(abs(x),abs(y))+1\n    elif x > 0 and y == 0:\n        return abs(x)\n    elif x < 0 and y == 0:\n        return abs(x)\n    elif y > 0 and x == 0:\n        return abs(y)\n    elif y < 0 and x == 0:\n        return abs(y)\n    else:\n        return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 824,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = input()\n    n = len(t)\n    mod = 10**9 + 7\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n + 1):\n        dp[i] = (dp[i - 1] + dp[i - 2]) % mod\n        if t[i - 1] == \"(\":\n            dp[i] = (dp[i] + dp[i - 2]) % mod\n    return dp[n]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 825,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,n=0,int(input())\n    while n>1:\n        for i in range(2,n+1):\n            if n%i==0 and is_prime(i):\n                n//=i\n                a+=1\n                break\n    return a\ndef is_prime(num):\n    if num<2:\n        return False\n    for i in range(2,int(num**0.5)+1):\n        if num%i==0:\n            return False\n    return True\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 826,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = Decimal(input())\n    # Your code goes here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 827,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    t=input()\n    s=10**10\n    count=0\n    for i in range(len(s)-n+1):\n        if s[i:i+n]==t:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 828,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: map(int, input().split())\n    n, s = f()\n    a = list(f())\n    count = 0\n    for i in range(n):\n        if a[i] == 0:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 829,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=input()\n    if s.count('1')==n or s.count('0')==n:\n        return 1\n    else:\n        return 2\n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 830,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split(\\\" \\\")))\n    a = list(map(int, input().split(\\\" \\\"))\n    min_instability = sum(a)\n    min_operations = []\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                instability = max(a) - min(a)\n                if instability < min_instability:\n                    min_instability = instability\n                    min_operations = [(i+1, j+1)]\n                elif instability == min_instability:\n                    min_operations.append((i+1, j+1))\n    print(min_instability, len(min_operations))\n    for operation in min_operations:\n        print(*operation)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 831,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    T = input()\n    n = int(input())\n    s_list = []\n    a_list = []\n    for i in range(n):\n        s, a = input().split()\n        s_list.append(s)\n        a_list.append(int(a))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 832,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=int(input())\n    b=[]\n    for i in range(a):\n        b.append(list(map(int,input().split()))\n    count=0\n    for i in range(a):\n        for j in range(i+1,a):\n            if b[i][0]==b[j][1] or b[i][1]==b[j][0]:\n                count+=1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 833,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, v = map(int, input().split())\n    trees = []\n    for i in range(n):\n        a, b = map(int, input().split())\n        trees.append((a, b))\n    trees.sort(key=lambda x: x[0])\n    total = 0\n    for i in range(n):\n        if trees[i][0] <= v:\n            total += trees[i][1]\n            v -= trees[i][0]\n        else:\n            total += trees[i][1] * (v // trees[i][0])\n            break\n    return total\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 834,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    f = list(map(int, input().split()))\n    k = 1\n    while True:\n        for i in range(1, n+1):\n            if f[f[i-1]-1] != f[i-1]:\n                break\n        else:\n            return k\n        f = [f[f[i-1]-1] for i in range(n)]\n        k += 1\n    return k\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 835,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    h = input()\n    n_b, n_s, n_c = map(int, input().split())\n    p_b, p_s, p_c = map(int, input().split())\n    r = int(input())\n    max_hamburgers = 0\n    for i in range(len(h)):\n        if h[i] == 'B':\n            max_hamburgers += n_b\n        elif h[i] == 'S':\n            max_hamburgers += n_s\n        elif h[i] == 'C':\n            max_hamburgers += n_c\n    total_cost = max_hamburgers * p_b + max_hamburgers * p_s + max_hamburgers * p_c\n    if total_cost <= r:\n        return max_hamburgers\n    else:\n        return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 836,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,T = [int(i) for i in input().split()]\n    houses = input()\n    shops = [i for i,x in enumerate(houses) if x == 'S']\n    houses = [i for i,x in enumerate(houses) if x == 'H']\n    k = 0\n    for i in range(len(houses)):\n        if i == 0:\n            k += 1\n        else:\n            if houses[i] - houses[i-1] == 1:\n                k += 1\n            elif houses[i] - houses[i-1] == 2:\n                k += 2\n            else:\n                k += 1\n                if i == len(houses)-1:\n                    k += 1\n    if len(shops) == 0:\n        return k\n    else:\n        if len(houses) == 1:\n            return -1\n        else:\n            if shops[0] == 0:\n                k += 1\n            elif shops[-1] == len(houses)-1:\n                k += 1\n            else:\n                k += 2\n            for i in range(len(shops)-1):\n                if shops[i+1] - shops[i] == 2:\n                    k += 1\n                else:\n                    k += 2\n            return k\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 837,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,x,y = map(int, input().split())\n    t = 0\n    while n > 0:\n        if n % 2 == 0:\n            n //= 2\n            t += y\n        else:\n            n -= 1\n            t += x\n    return t\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 838,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    rows = []\n    for i in range(n):\n        row = list(map(int, input().split())\n        rows.append(row)\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if rows[i][j] == 1:\n                count += 1\n                for k in range(i+1, n):\n                    if rows[k][j] == 1:\n                        count += 1\n                for l in range(j+1, m):\n                    if rows[i][l] == 1:\n                        count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 839,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    q, t = 0, [list(map(int, input().split())) for i in range(5)]\n    for i in range(5):\n        for j in range(5):\n            q += t[i][j]\n    for i in range(5):\n        for j in range(5):\n            t[i][j] = t[i][j] - q // 2\n    for i in range(5):\n        for j in range(5):\n            t[i][j] = t[i][j] + t[j][i]\n    return q\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 840,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    max_cookies = 0\n    for i in range(n):\n        if a[i] <= k:\n            max_cookies += b[i] // a[i]\n            k -= a[i] * (b[i] // a[i])\n        else:\n            max_cookies += k // a[i]\n            break\n    return max_cookies\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 841,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n=int(input())\n        s=input_string\n        count=0\n        for i in range(len(s)-2):\n            if s[i:i+3]=='1337':\n                count+=1\n        if count==n:\n            print(s)\n        else:\n            print(\"-1\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 842,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = input()\n    count = 0\n    i = 1\n    while True:\n        palindrome = str(i)\n        if len(palindrome) % 2 == 0:\n            if palindrome == palindrome[::-1]:\n                count += 1\n                if count == n:\n                    return palindrome\n        i += 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 843,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,s,i=int(input()),input(),0\n    while i<n:\n        if s[i]=='>':\n            i+=int(input())\n        else:\n            i-=int(input())\n        if i<0 or i>=n:\n            return \"INFINITE\"\n    return \"FINITE\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 844,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=input()\n    max_len=0\n    for i in range(n):\n        for j in range(i+1,n+1):\n            if s[i:j].count('0')==s[i:j].count('1'):\n                max_len=max(max_len,j-i)\n    return max_len\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 845,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    ch=input()\n    if ch=='L':\n        for i in range(len(input_string)):\n            if input_string[i]=='q':\n                input_string=input_string[:i]+'q'+(input_string[i+1:])\n            elif input_string[i]=='w':\n                input_string=input_string[:i]+'w'+(input_string[i+1:])\n            elif input_string[i]=='e':\n                input_string=input_string[:i]+'e'+(input_string[i+1:])\n            elif input_string[i]=='r':\n                input_string=input_string[:i]+'r'+(input_string[i+1:])\n            elif input_string[i]=='t':\n                input_string=input_string[:i]+'t'+(input_string[i+1:])\n            elif input_string[i]=='y':\n                input_string=input_string[:i]+'y'+(input_string[i+1:])\n            elif input_string[i]=='u':\n                input_string=input_string[:i]+'u'+(input_string[i+1:])\n            elif input_string[i]=='i':\n                input_string=input_string[:i]+'i'+(input_string[i+1:])\n            elif input_string[i]=='o':\n                input_string=input_string[:i]+'o'+(input_string[i+1:])\n            elif input_string[i]=='p':\n                input_string=input_string[:i]+'p'+(input_string[i+1:])\n            elif input_string[i]=='a':\n                input_string=input_string[:i]+'a'+(input_string[i+1:])\n            elif input_string[i]=='s':\n                input_string=input_string[:i]+'s'+(input_string[i+1:])\n            elif input_string[i]=='d':\n                input_string=input_string[:i]+'d'+(input_string[i+1:",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 846,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = tuple(map(int,input().split()))\n    buttons = list(map(int,input().split()))\n    lights = [0]*n\n    for i in range(m):\n        for j in range(buttons[i-1],n+1):\n            lights[j-1] = i+1\n    return \" \".join(map(str,lights)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 847,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, x = map(int, input().split())\n    cards = list(map(int, input().split())\n    cards.sort()\n    left = 0\n    right = sum(cards)\n    min_cards = float('inf')\n    while left <= right:\n        mid = (left + right) // 2\n        count = 0\n        current_sum = 0\n        for card in cards:\n            if card >= mid:\n                count += 1\n                current_sum += card\n        if current_sum == 0:\n            return count\n        elif current_sum < 0:\n            left = mid + 1\n        else:\n            right = mid - 1\n        min_cards = min(min_cards, count)\n    return min_cards\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 848,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k = map(int, input().split()) \n    if k == 0:\n        return -1\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 3\n    if n == 4:\n        return 6\n    if n == 5:\n        return 10\n    if n == 6:\n        return 15\n    if n == 7:\n        return 21\n    if n == 8:\n        return 28\n    if n == 9:\n        return 36\n    if n == 10:\n        return 45\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 849,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c,d = map(int,input().split())\n    p_smallR = a/b\n    p_zanoes = c/d\n    if p_smallR > p_zanoes:\n        return 1\n    else:\n        return (p_smallR*p_zanoes)/(p_smallR+p_zanoes-p_smallR*p_zanoes)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 850,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    numbers = list(map(int, input_string.split()))\n    numbers.sort(reverse=True)\n    max_sum = 0\n    result = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(numbers[i:j+1]) % 10 == 0:\n                max_sum = max(max_sum, sum(numbers[i:j+1]))\n                result = numbers[i:j+1]\n    return max_sum, result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 851,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    input_string = input()\n    max_break = 0\n    for i in range(1, n-1):\n        if input_string[i] == '0':\n            if input_string[i-1] == '1' and input_string[i+1] == '1':\n                max_break = max(max_break, i-1)\n    print(max_break)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 852,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n, k, l = map(int, input().split())\n        d = list(map(int, input().split()))\n        p = [0] * (2*k)\n        for i in range(k):\n            p[i] = i\n        for i in range(k, 2*k):\n            p[i] = k-i-1\n        x = 0\n        for t in range(2*k):\n            for i in range(n):\n                if d[i] + p[t] > l:\n                    if x == 0:\n                        print(\"No\")\n                        break\n                else:\n                    x += 1\n            else:\n                print(\"Yes\")\n                break\n            x -= 1\nelse:\n    print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 853,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, t = int(input()), input()\n    t = list(map(int, t.split()))\n    t.sort(reverse=True)\n    max_num = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                for l in range(k+1, n):\n                    for m in range(l+1, n):\n                        num = t[i]*10**6 + t[j]*10**3 + t[k]*10**0 + t[l]*10**3 + t[m]*10**6\n                        if num % 90 == 0:\n                            max_num = max(max_num, num)\n    return max_num if max_num != 0 else -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 854,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    I=lambda:map(int,input().split())\n    n,T=I()\n    a=list(I())\n    total=0\n    for i in range(n):\n        if T>=a[i]:\n            T-=a[i]\n            total+=1\n    return total\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 855,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: list(map(int, input().split()))\n    k, a, b = f()\n    A = [f(), f(), f()]\n    B = [f(), f(), f()]\n    alice_score = 0\n    bob_score = 0\n    for i in range(k):\n        if i == 0:\n            alice_score += A[a-1][b-1]\n            bob_score += B[a-1][b-1]\n        else:\n            alice_score += A[A[i-1][B[i-1]-1]-1][B[i-1][A[i-1]-1]-1]\n            bob_score += B[B[i-1][A[i-1]-1]-1][A[i-1][B[i-1]-1]-1]\n    return alice_score, bob_score\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 856,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=list(map(int,input().split()))\n    a=list(map(int,input().split())\n    for i in range(k):\n        d=max(a)\n        for j in range(n):\n            a[j]=d-a[j]\n    print(*a)\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 857,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x = [int(a) for a in input().split()]\n    y = [int(a) for a in input().split()]\n    result = []\n    for i in range(len(x)):\n        if x[i] in y:\n            result.append(x[i])\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 858,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n % 2 == 0:\n        return n // 2\n    else:\n        return (n + 1) // 2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 859,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s1, s2 = input().strip(), input().strip()\n    n = len(s1)\n    correct = 0\n    for i in range(2**n):\n        s2_list = list(s2)\n        for j in range(n):\n            if s1[j] == '+':\n                s2_list[j] = '+' if (i >> j) & 1 else '-'\n            elif s1[j] == '-':\n                s2_list[j] = '-' if (i >> j) & 1 else '+'\n        if '?' in s2_list:\n            s2_list = [s2_list[k] if s2_list[k] != '?' else random.choice(['+', '-']) for k in range(n)]\n        s2_str = ''.join(s2_list)\n        if s2_str == s1:\n            correct += 1\n    return correct / 2**n\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 860,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    graph = [[] for i in range(n)]\n    for i in range(n):\n        for j in range(a[i]):\n            graph[i].append(j)\n    for i in range(n):\n        for j in range(a[i]):\n            graph[j].append(i)\n    visited = [False] * n\n    result = []\n    def dfs(node, path):\n        visited[node] = True\n        for neighbor in graph[node]:\n            if not visited[neighbor]:\n                dfs(neighbor, path + [node])\n    for i in range(n):\n        if not visited[i]:\n            dfs(i, [i])\n            if len(result) == 0 or len(result[-1]) < len(path):\n                result.append(path)\n    if len(result) == 1:\n        print(\"Possible\")\n        print(\" \".join(str(i+1) for i in result[0]))\n    else:\n        print(\"Impossible\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 861,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    m,R=map(int, input().split())\n    pass\n    return 0.0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 862,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    queue=list(map(int,input().split()))\n    n=queue[0]\n    queue=queue[1:]\n    for i in range(n):\n        if queue[i]==0:\n            return i+1\n        else:\n            queue[i]-=1\n    return 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 863,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, ta = map(int, input().split())\n    b, tb = map(int, input().split())\n    h, m = map(int, input().split(\":\"))\n    h, m = h*60 + m\n    t = 0\n    count = 0\n    while True:\n        if h % a == 0 and h % b == 0:\n            count += 1\n        if h % a == 0:\n            t += ta\n        if h % b == 0:\n            t += tb\n        if t >= 1440:\n            break\n        h += 1\n    return count - 2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 864,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    a=list(map(int,input().split())\n    if n>m:\n        return 0\n    else:\n        return m//n\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 865,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, t = map(int, input().split())\n    dishes = []\n    for i in range(n):\n        a, b = map(int, input().split())\n        dishes.append((a, b))\n    dishes.sort(key=lambda x: x[1], reverse=True)\n    time = 0\n    happiness = 0\n    for i in range(n):\n        if time + dishes[i][0] <= t:\n            happiness += dishes[i][1]\n            time += dishes[i][0]\n    return happiness\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 866,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    X,Y = map(int,input().split())\n    dp = [[0]*(Y+1) for i in range(X+1)]\n    dp[0][0] = 1\n    for i in range(X+1):\n        for j in range(Y+1):\n            if i == 0 and j == 0:\n                continue\n            if i > 0:\n                dp[i][j] += dp[i-1][j]\n            if j > 0:\n                dp[i][j] += dp[i][j-1]\n            if i > 1 and j > 1:\n                dp[i][j] += dp[i-2][j-1]\n            if i > 2 and j > 0:\n                dp[i][j] += dp[i-1][j-2]\n            dp[i][j] %= 1000000000007\n    return dp[X][Y]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 867,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    if n==1:\n        return 1\n    else:\n        return 2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 868,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    result = 1378**n\n    return result % 10\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 869,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int , input().split())\n    if a==1 and b==1:\n        return 0,0\n    elif a==1 or b==1:\n        return 1,1\n    else:\n        return a+b-1,a+b-2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 870,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    d,l,v1,v2=list(map(int,input().split()))\n    if v1>v2:\n        v1,v2=v2,v1\n    if v1==v2:\n        return 0\n    else:\n        t=l/(v2-v1)\n        return t\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 871,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, s = [int(w) for w in input().split()]\n    landings = []\n    for i in range(n):\n        h, m = [int(w) for w in input().split()]\n        landings.append((h, m))\n    landings.append((24, 0))\n    for i in range(n):\n        if i == 0:\n            if landings[i+1][1] - landings[i][1] >= s:\n                print(landings[i][0], landings[i][1] + s)\n                return\n        elif i == n-1:\n            if landings[i][1] - landings[i-1][1] >= s:\n                print(landings[i][0], landings[i][1] - s)\n                return\n        else:\n            if landings[i+1][1] - landings[i][1] >= s and landings[i][1] - landings[i-1][1] >= s:\n                print(landings[i][0], landings[i][1] - s)\n                return\n    print(0, 0)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 872,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = list(map(int, input().split()))\n    n = len(a)\n    a.sort()\n    for i in range(n):\n        if a[i] % 2 == 0:\n            a[i] += 1\n    a.sort(reverse=True)\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 873,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    original_state = input()\n    target_state = input()\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 874,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n == 1:\n        return -1\n    elif n == 2:\n        return \"2 1\"\n    else:\n        return \"2 1 \" + \" \".join(str(i) for i in range(3, n+1))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 875,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    stones = list(map(int, input().split()))\n    matrix = [list(input()) for i in range(n)]\n    for i in range(n):\n        matrix[i][i] = '*'\n    # Your code goes here\n    return \"\".join(matrix)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 876,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int,input().split()))\n    A = list(map(int,input().split()))\n    i = 0\n    while True:\n        i += 1\n        A = [sum(A[:i]) for i in range(len(A)+1)]\n        if k in A:\n            return i\n        if A[-1] >= k:\n            return i\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 877,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = map(int,input().split())\n    similar_problems = []\n    for i in range(m):\n        similar_problems.append(list(map(int,input().split()))\n    # Write your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 878,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = ''.join(input().split())\n    a = list(map(int, a.split()))\n    n = a[0]\n    types = a[1:]\n    if n == 2 and types[0] == 1 and types[1] == 3:\n        return \"Infinite\"\n    elif n == 2 and types[0] == 1 and types[1] == 2:\n        return \"Finite\"\n    elif n == 3 and types[0] == 1 and types[1] == 2 and types[2] == 3:\n        return \"Infinite\"\n    elif n == 3 and types[0] == 1 and types[1] == 3 and types[2] == 2:\n        return \"Infinite\"\n    elif n == 3 and types[0] == 2 and types[1] == 1 and types[2] == 3:\n        return \"Infinite\"\n    elif n == 3 and types[0] == 2 and types[1] == 3 and types[2] == 1:\n        return \"Infinite\"\n    elif n == 3 and types[0] == 3 and types[1] == 1 and types[2] == 2:\n        return \"Infinite\"\n    elif n == 3 and types[0] == 3 and types[1] == 2 and types[2] == 1:\n        return \"Infinite\"\n    else:\n        return \"Finite\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 879,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    p = list(map(int, input().split()))\n    path = [1]\n    for i in range(2, n+1):\n        if i not in path:\n            path.append(i)\n        else:\n            for j in range(len(path)-1, -1, -1):\n                if p[j] == i:\n                    path.insert(j+1, i)\n                    break\n    return path\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 880,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    n = t\n    p = [i for i in range(1,n+1)]\n    for i in range(1,n):\n        p.extend(p)\n    p = p[:n*n]\n    count = 0\n    for i in range(n,n*n):\n        for j in range(i+1,n*n+1):\n            if sum(p[i:j]) == n*(n+1)//2:\n                count += 1\n    return count % 998244353\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 881,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    i = 0\n    while i < n-1:\n        if a[i] == a[i+1]:\n            a.pop(i)\n            n -= 1\n        else:\n            i += 1\n    return n\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 882,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=input()\n    s=input()\n    max_count=0\n    for i in range(len(s)):\n        for j in range(len(s)-len(t)+1):\n            if s[j:j+len(t)]==t:\n                max_count+=1\n    return max_count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 883,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=int(input())+1\n    b=list(map(int,input().split())\n    count=0\n    for i in range(1,6):\n        for j in b:\n            if i%j!=0:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 884,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b, c = map(int, input().split())\n    MOD = 998244353\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 885,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 886,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = list(input())\n    max_exchange_rate = -1\n    for i in range(len(n)):\n        for j in range(i+1, len(n)):\n            if i != j:\n                n[i], n[j] = n[j], n[i]\n                exchange_rate = int(\"\".join(n))\n                if exchange_rate % 2 == 0:\n                    max_exchange_rate = max(max_exchange_rate, exchange_rate)\n                n[i], n[j] = n[j], n[i]\n    if max_exchange_rate == -1:\n        print(-1)\n    else:\n        print(max_exchange_rate)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 887,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = list(map(int,input().split()))\n    if a.count(1) == 1:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 888,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    p = list(map(int, input().split()))\n    s = list(map(int, input().split())\n    p_dict = {i: p.index(i) for i in range(1, n+1)}\n    s_dict = {i: s.index(i) for i in range(1, n+1)}\n    coins = 0\n    operations = []\n    for i in range(1, n+1):\n        if p_dict[i] != s_dict[i]:\n            coins += abs(p_dict[i] - s_dict[i])\n            operations.append((i, p_dict[i], s_dict[i]))\n            p[p_dict[i]], p[s_dict[i]] = p[s_dict[i], p[p_dict[i]]\n            p_dict[i], s_dict[i] = p_dict[i], s_dict[i]\n    print(coins)\n    print(len(operations))\n    for op in operations:\n        print(op[0], op[1])\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 889,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    field = [input() for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            if field[i][j] == field[i-1][j-1] == field[i-1][j] == field[i][j-1] == \"#\":\n                return \"YES\"\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 890,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, l, r, x = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    count = 0\n    for i in range(1, n):\n        for j in range(i+1, n+1):\n            if c[i-1] + c[j-1] >= l and c[i-1] + c[j-1] <= r and abs(c[i-1] - c[j-1]) >= x:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 891,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    chips = list(input_string)\n    for _ in range(k):\n        new_chips = []\n        for i in range(n):\n            neighbours = [chips[(i-1)%n], chips[i], chips[(i+1)%n]]\n            if neighbours.count(\"W\") > neighbours.count(\"B\"):\n                new_chips.append(\"W\")\n            else:\n                new_chips.append(\"B\")\n        chips = new_chips\n    return \"\".join(chips)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 892,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    lcm = 1\n    k_max = 0\n    positions = []\n    for i in range(n):\n        lcm = lcm * a[i] // gcd(lcm, a[i])\n        if lcm <= m:\n            k_max += 1\n            positions.append(i+1)\n    print(lcm, k_max)\n    print(\" \".join(map(str, positions))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 893,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: map(int, input().split())\n    d, n = f()\n    a = list(f())\n    edges = [list(f()) for _ in range(n-1)]\n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 894,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x,y = map(int,input().split())\n    x_1 = 0\n    y_1 = y\n    x_2 = x\n    y_2 = 0\n    print(x_1,y_1,x_2,y_2)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 895,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    times = list(map(int, input().split()))\n    T = int(input())\n    times.sort()\n    count = 0\n    for i in range(n):\n        if times[i] <= T:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 896,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    a = list(map(int, input().split())\n    b = list(map(int, input().split())\n    matrix = []\n    for i in range(n):\n        row = []\n        for j in range(m):\n            row.append(a[i] ^ b[j])\n        matrix.append(row)\n    return matrix\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 897,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=input().split()\n    n=int(n)\n    m=int(m)\n    s1=list(map(int,input().split()))\n    s2=list(map(int,input().split())\n    count=0\n    for i in range(n):\n        if s1[i]>s2[i]:\n            count+=1\n    return count\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 898,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,M=map(int,input().split())\n    if N==1:\n        return 1\n    elif N==2:\n        return M\n    else:\n        for i in range(2,M+1):\n            if M%i==0 and M//i<=N:\n                return i\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 899,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,M = map(int,input().split())\n    edges = []\n    for i in range(M):\n        a,b,c = map(int,input().split())\n        edges.append((a,b,c))\n    edges.sort(key=lambda x: x[2])\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 900,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    count=0\n    for i in range(10):\n        for j in range(10):\n            for k in range(10):\n                for l in range(10):\n                    for m in range(10):\n                        for n in range(10):\n                            for p in range(10):\n                                for q in range(10):\n                                    for r in range(10):\n                                        for s in range(10):\n                                            for t in range(10):\n                                                for u in range(10):\n                                                    for v in range(10):\n                                                        for w in range(10):\n                                                            for x in range(10):\n                                                                for y in range(10):\n                                                                    for z in range(10):\n                                                                        num=str(i)+str(j)+str(k)+str(l)+str(m)+str(p)+str(q)+str(r)+str(s)+str(t)+str(u)+str(v)+str(w)+str(x)+str(y)+str(z)\n                                                                        if num[-1]=='5':\n                                                                            count+=1\n    return count%(10**9+7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 901,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    groups=[]\n    for i in range(m):\n        groups.append(list(map(int,input().split()))[1:])\n    return \"YES\" if any(all(x<0 for x in group) for group in groups) else \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 902,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    powers = list(map(int, input().split())\n    for i in range(n):\n        powers[i] = int(powers[i])\n    for i in range(n):\n        if powers[i] > powers[i+1]:\n            return powers[i]\n        else:\n            return powers[i+1]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 903,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    [n,k] = [int(w) for w in input().split()]\n    a = [int(w) for w in input().split()]\n    a.sort()\n    median = a[n//2]\n    return median\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 904,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    words=input().split()\n    max_volume=0\n    for word in words:\n        volume=0\n        for letter in word:\n            if letter.isupper():\n                volume+=1\n        if volume>max_volume:\n            max_volume=volume\n    return max_volume\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 905,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, s=map(int, input().split())\n    sugar_list=[]\n    for i in range(n):\n        x,y=map(int, input().split())\n        sugar_list.append((x,y))\n    sugar_list.sort(key=lambda x:x[1])\n    total_sugar=0\n    for i in range(n):\n        if s>=sugar_list[i][0]:\n            total_sugar+=sugar_list[i][1]\n            s-=sugar_list[i][0]\n        else:\n            break\n    if s==0:\n        return total_sugar\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 906,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c=list(map(int,input().split()))\n    if c==1:\n        return 1\n    elif a==1:\n        return b\n    elif b==1:\n        return a\n    else:\n        return (a*b)%100000007\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 907,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    pairs = []\n    for _ in range(m):\n        a, b = map(int, input().split())\n        pairs.append((a, b))\n    for x in range(1, n):\n        for y in range(x+1, n+1):\n            found = False\n            for pair in pairs:\n                if x in pair or y in pair:\n                    found = True\n                    break\n            if found:\n                print(\"YES\")\n                return\n    print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 908,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    c=list(map(int,input().split())\n    strings=[]\n    for i in range(n):\n        strings.append(input())\n    strings.sort()\n    if strings==strings:\n        return 0\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 909,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c=int(input()),int(input()),int(input())\n    max_value=0\n    for i in range(4):\n        for j in range(4):\n            for k in range(4):\n                for l in range(4):\n                    for m in range(4):\n                        for n in range(4):\n                            for o in range(4):\n                                for p in range(4):\n                                    if i==j or i==k or i==l or i==m or i==n or i==o or j==k or j==l or j==m or j==n or j==o or k==l or k==m or k==n or k==o or l==m or l==n or l==o or m==n or m==o:\n                                        continue\n                                    expression=str(a)+operations[i]+str(b)+operations[j]+str(c)+operations[k]+str(a)+operations[l]+str(b)+operations[m]+str(c)+operations[n]+str(a)+operations[o]+str(b)+operations[p]+str(c)\n                                    value=eval(expression)\n                                    if value>max_value:\n                                        max_value=value\n    return max_value\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 910,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,a,b=map(int,input().split())\n    if n>a*b:\n        print(-1)\n    else:\n        for i in range(a):\n            for j in range(b):\n                if i%2==0 and j%2==0:\n                    print(i*b+j+1,end=\" \")\n                elif i%2!=0 and j%2!=0:\n                    print(i*b+j+1,end=\" \")\n                else:\n                    print(0,end=\" \")\n            print()\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 911,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, c = list(map(int, input().split()))\n    p = list(map(int, input().split())\n    t = list(map(int, input().split())\n    limak_score = 0\n    radewoosh_score = 0\n    for i in range(n):\n        limak_score += p[i] - c * sum(t[:i+1])\n        radewoosh_score += p[n-i-1] - c * sum(t[:n-i])\n    if limak_score > radewoosh_score:\n        print(\"Limak\")\n    elif limak_score < radewoosh_score:\n        print(\"Radewoosh\")\n    else:\n        print(\"Tie\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 912,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n, s, k = map(int, input().split())\n        closed_restaurants = list(map(int, input().split()))\n        min_stairs = n\n        for restaurant in range(1, n+1):\n            if restaurant not in closed_restaurants:\n                stairs = 0\n                current_floor = s\n                for j in range(len(closed_restaurants)):\n                    if closed_restaurants[j] < restaurant:\n                        stairs += 1\n                    else:\n                        stairs += 2\n                    current_floor = closed_restaurants[j]\n                if stairs < min_stairs:\n                    min_stairs = stairs\n        print(min_stairs)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 913,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    if sum(a) < sum(b):\n        return -1\n    else:\n        return max(a) + 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 914,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    n = int(input())\n    if len(s) > n:\n        print(-1)\n        return\n    else:\n        count = {}\n        for i in s:\n            if i in count:\n                count[i] += 1\n            else:\n                count[i] = 1\n        min_count = min(count.values())\n        max_count = max(count.values())\n        if min_count == max_count:\n            print(1)\n            print(s)\n        else:\n            print(max_count)\n            for i in count:\n                if count[i] == min_count:\n                    print(i * max_count)\n                    break\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 915,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k = int(input())\n    if k == 1:\n        return \"codeforces\"\n    else:\n        return \"codeforcesss\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 916,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n= int(input())\n    apples = list(map(int, input().split()))\n    parents = list(map(int, input().split()))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 917,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, h, m = map(int, input().split())\n    restrictions = []\n    for i in range(m):\n        l, r, x = map(int, input().split())\n        restrictions.append((l, r, x))\n    restrictions.sort(key=lambda x: x[0])\n    max_profit = 0\n    for i in range(n):\n        max_height = h\n        for j in range(m):\n            if i >= restrictions[j][0] and i <= restrictions[j][1]:\n                max_height = min(max_height, restrictions[j][2])\n        max_profit += max_height**2\n    return max_profit\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 918,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = map(int, input().split())\n    participants = {}\n    for i in range(n):\n        name, region, score = input().split()\n        if region not in participants:\n            participants[region] = []\n        participants[region].append((name, int(score)))\n    for region in range(1,m+1):\n        if len(participants[region]) < 2:\n            print(\"?\")\n            continue\n        participants[region].sort(key=lambda x: x[1], reverse=True)\n        print(participants[region][0][0], participants[region][1][0])\n        del participants[region][0]\n        del participants[region][0]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 919,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    stages = input()\n    if n != len(set(stages):\n        return -1\n    stages_dict = {}\n    for i in range(len(stages)):\n        stages_dict[stages[i]] = i\n    stages_dict = sorted(stages_dict.items(), key=lambda x: x[1])\n    if k > len(stages_dict):\n        return -1\n    result = 0\n    for i in range(k):\n        result += ord(stages_dict[i][0])\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 920,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    L = lambda: list(map(int, input().split()))\n    n = L()[0]\n    guards = [L(), L(), L(), L()]\n    for i in range(4):\n        for j in range(2):\n            if guards[i][j] > n:\n                print(-1)\n                return\n    min_cost = float('inf')\n    min_post = -1\n    for i in range(4):\n        chocolate_cost = min(guards[i][0], guards[i][2])\n        juice_cost = min(guards[i][1], guards[i][3])\n        if chocolate_cost + juice_cost <= n:\n            if chocolate_cost + juice_cost < min_cost:\n                min_cost = chocolate_cost + juice_cost\n                min_post = i + 1\n    if min_post == -1:\n        print(-1)\n    else:\n        print(min_post, chocolate_cost, juice_cost)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 921,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,w = map(int,input().split())\n    a = list(map(int,input().split())\n    if sum(a)<w:\n        return -1\n    else:\n        a.sort(reverse=True)\n        for i in range(n):\n            if a[i]>w:\n                return -1\n            else:\n                w-=a[i]\n                if w<a[i]/2:\n                    return -1\n                else:\n                    a[i]=a[i]/2\n        return a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 922,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,a,*d=[int(x) for x in input().split()+input().split()]\n    b=[0]*n\n    for i in range(n):\n        b[i]=d[i]-1\n    print(*b)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 923,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = input();\n    active_teeth = input().split()\n    active_teeth = [int(x) for x in active_teeth]\n    for i in range(n):\n        if active_teeth[i] != i:\n            return \"No\"\n    return \"Yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 924,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    la, ra, ta = map(int, input().split())\n    lb, rb, tb = map(int, input().split())\n    max_count = 0\n    for i in range(min(la, lb), max(ra, rb) + 1):\n        count = 0\n        for j in range(ta):\n            if i % ta == 0 and i % tb == 0:\n                count += 1\n        max_count = max(max_count, count)\n    return max_count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 925,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = input()\n    n = int(a)\n    count = 0\n    for i in range(100):\n        if str(i) == str(n) or str(i)[0] == str(n)[0] or str(i)[1] == str(n)[1]:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 926,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    stones = []\n    for i in range(n):\n        a, b, c = map(int, input().split())\n        stones.append((a, b, c))\n    max_volume = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            a1, b1, c1 = stones[i]\n            a2, b2, c2 = stones[j]\n            volume = min(a1, a2) * min(b1, b2) * min(c1, c2)\n            if volume > max_volume:\n                max_volume = volume\n                max_pair = (i+1, j+1)\n    return 1, max_pair\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 927,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,M = map(int,input().split())\n    A = list(map(int,input().split())\n    A.sort(reverse=True)\n    A_dict = {1:2,2:5,3:5,4:4,5:5,6:6,7:3,8:7,9:6}\n    result = \"\"\n    for i in range(M):\n        if N >= A_dict[A[i]:\n            result += str(A[i])*A_dict[A[i]\n            N -= A_dict[A[i]\n        else:\n            break\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 928,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, K = map(int, input().split())\n    A = list(map(int, input().split())\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N+1):\n            if sum(A[i:j]) >= K:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 929,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    H,W=map(int,input().split())\n    grid=[]\n    for i in range(H):\n        grid.append(list(map(int,input().split()))\n    N=0\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j]%2==0:\n                N+=1\n    print(N)\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j]%2!=0:\n                if i>0 and grid[i-1][j]%2==0:\n                    print(i-1,j,i,j)\n                    N+=1\n                elif j>0 and grid[i][j-1]%2==0:\n                    print(i,j-1,i,j)\n                    N+=1\n                elif i<H-1 and grid[i+1][j]%2==0:\n                    print(i+1,j,i,j)\n                    N+=1\n                elif j<W-1 and grid[i][j+1]%2==0:\n                    print(i,j+1,i,j)\n                    N+=1\n    print(N)\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j]%2!=0:\n                if i>0 and grid[i-1][j]%2!=0:\n                    print(i-1,j,i,j)\n                    N+=1\n                elif j>0 and grid[i][j-1]%2!=0:\n                    print(i,j-1,i,j)\n                    N+=1\n                elif i<H-1 and grid[i+1][j]%2!=0:\n                    print(i+1,j,i,j)\n                    N+=1\n                elif j<W-1 and grid[i][j+1]%2!=0:\n                    print(i,j+1,i,j)\n                    N+=1\n    print(N)\n    return N\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 930,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    M=10**9+7;n,k=map(int,input().split());a=c=1\n    for i in range(1,n+1):\n        c*=i;c%=M\n    for i in range(1,k+1):\n        a*=i;a%=M\n    b=1;d=1\n    for i in range(1,n-k+1):\n        b*=i;b%=M\n    for i in range(1,n-k+1):\n        d*=i;d%=M\n    return (c*pow(b,n-k-1,M)*pow(a,k,M))%M\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 931,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,x,y,z,p=list(map(int,input().split()))\n    candies=[]\n    for i in range(p):\n        candies.append(list(map(int,input().split()))\n    for i in range(p):\n        x_k,y_k=candies[i]\n        if x%4==0:\n            x_k,y_k=x_k,y_k\n        elif x%2==0:\n            x_k,y_k=n-x_k+1,y_k\n        elif x%2==1:\n            x_k,y_k=n-x_k+1,m-y_k+1\n        if y%4==0:\n            x_k,y_k=x_k,y_k\n        elif y%2==0:\n            x_k,y_k=x_k,m-y_k+1\n        elif y%2==1:\n            x_k,y_k=n-x_k+1,m-y_k+1\n        if z%4==0:\n            x_k,y_k=x_k,y_k\n        elif z%2==0:\n            x_k,y_k=n-x_k+1,y_k\n        elif z%2==1:\n            x_k,y_k=n-x_k+1,m-y_k+1\n        print(x_k,y_k)\n# Don't forget to remove the '#' symbol before submitting\n# End of code\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 932,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    m,n = list(map(int,input().split()))\n    B = []\n    for i in range(m):\n        B.append(list(map(int,input().split()))\n    A = []\n    for i in range(m):\n        A.append([0]*n)\n    for i in range(m):\n        for j in range(n):\n            for k in range(m):\n                A[i][j] |= B[i][k]\n            for k in range(n):\n                A[i][j] |= B[k][j]\n    for i in range(m):\n        for j in range(n):\n            if A[i][j] != B[i][j]:\n                print(\"NO\")\n                return\n    print(\"YES\")\n    for i in range(m):\n        print(*A[i])\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 933,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = list(input())\n    i = 0\n    j = len(s) - 1\n    while i < j:\n        if s[i] == s[i+1] == s[i+2]:\n            s.pop(i)\n            s.pop(i)\n            j -= 2\n        elif s[i] == s[i+1] and s[i+1] == s[i+2]:\n            s.pop(i)\n            s.pop(i)\n            j -= 2\n        else:\n            i += 1\n    return ''.join(s)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 934,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    A = input()\n    B = input().split()\n    for i in B:\n        if i[0] == A[0] or i[1] == A[1]:\n            return \"YES\"\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 935,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=[int(x) for x in input().split()]\n    if n==1 or m==1:\n        return \"Akshat\"\n    else:\n        return \"Malvika\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 936,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    likes = list(map(int, input().split()))\n    max_likes = 0\n    max_id = -1\n    for i in range(n):\n        if likes[i] > max_likes:\n            max_likes = likes[i]\n            max_id = i + 1\n        elif likes[i] == max_likes:\n            if i + 1 < max_id:\n                max_id = i + 1\n    return max_id\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 937,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=list(map(int,input().split()))\n    a=list(map(int,input().split())\n    t=list(map(int,input().split())\n    max_sum=0\n    for i in range(n-k+1):\n        sum=0\n        for j in range(i,i+k):\n            if t[j]==1:\n                sum+=a[j]\n        max_sum=max(max_sum,sum)\n    return max_sum\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 938,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b = map(int, input().split())\n    n = 0\n    p = []\n    m = 0\n    q = []\n    for i in range(1,a+1):\n        if i <= a:\n            n += 1\n            p.append(i)\n    for j in range(1,b+1):\n        if j <= b:\n            m += 1\n            q.append(j)\n    print(n)\n    print(\" \".join(str(p))\n    print(m)\n    print(\" \".join(str(q))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 939,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=list(map(int,input().split()))\n    dances=[]\n    for i in range(m):\n        dances.append(list(map(int,input().split()))\n    colors=[]\n    for i in range(n):\n        colors.append(0)\n    for i in range(m):\n        for j in range(3):\n            if colors[dances[i][j]-1]==0:\n                colors[dances[i][j]-1]=i+1\n            else:\n                colors[dances[i][j]-1]=colors[dances[i][j-1]-1]\n    for i in range(n):\n        if colors[i]==0:\n            colors[i]=m+1\n    for i in range(n):\n        if colors[i]==m+1:\n            colors[i]=1\n        elif colors[i]%2==0:\n            colors[i]=2\n        else:\n            colors[i]=3\n    return colors\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 940,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b, c = sorted(map(int,input().split()))\n    if a+b>c and a+c>b and b+c>a:\n        return 0\n    else:\n        return 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 941,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    b, k = list(map(int, input().split()))\n    a = list(map(int, input().split())\n    n = 0\n    for i in range(k):\n        n += a[i] * b**(k-1-i)\n    if n % 2 == 0:\n        print(\"even\")\n    else:\n        print(\"odd\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 942,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    hats = [0] * n\n    for i in range(n):\n        hats[i] = 1\n    for i in range(n):\n        if a[i] == 0:\n            continue\n        for j in range(n):\n            if i != j:\n                hats[j] += 1\n    for i in range(n):\n        if hats[i] != a[i] + 1:\n            return \"Impossible\"\n    return \"Possible\" + \" \" + \" \".join(str(i) for i in hats)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 943,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    numbers=list(map(int,input_string.split()))\n    numbers.sort(reverse=True)\n    even_sum=0\n    for i in range(n):\n        if numbers[i]%2==0:\n            even_sum+=numbers[i]\n            break\n    return even_sum\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 944,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    roads = []\n    for i in range(n-1):\n        u, v = map(int, input().split())\n        roads.append((u, v))\n    return n\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 945,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    points = list(map(int, input().split()))\n    points.sort()\n    for i in range(n-1):\n        if points[i+1]-points[i] < points[i+2]-points[i+1]:\n            return \"yes\"\n    return \"no\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 946,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,a=int(input()),input()\n    a=a.split()\n    if 1 in a:\n        print(\"HARD\")\n    else:\n        print(\"EASY\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 947,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    tt = int(input())\n    for i in range(tt):\n        n = int(input())\n        if n % 2 == 0:\n            a = 1\n            b = n - 1\n        else:\n            a = 2\n            b = n - 2\n        print(a, b)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 948,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    faces = 0\n    for i in range(n-1):\n        for j in range(m-1):\n            if input_string[i][j:j+2] == \"fa\" and input_string[i+1][j+1] == \"c\" and input_string[i+1][j] == \"e\":\n                faces += 1\n            elif input_string[i][j:j+2] == \"fa\" and input_string[i+1][j+1] == \"e\" and input_string[i][j+1] == \"c\":\n                faces += 1\n            elif input_string[i][j:j+2] == \"ce\" and input_string[i+1][j] == \"f\" and input_string[i][j+1] == \"a\":\n                faces += 1\n            elif input_string[i][j:j+2] == \"ce\" and input_string[i+1][j+1] == \"a\" and input_string[i][j+1] == \"f\":\n                faces += 1\n    return faces\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 949,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split())\n    gcd=1\n    for i in range(a,b+1):\n        gcd=gcd(gcd,i)\n    return gcd\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 950,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    strings = [input() for _ in range(n)]\n    min_ops = 0\n    has_digit = False\n    has_lower = False\n    has_symbol = False\n    for i in range(n):\n        for j in range(m):\n            if strings[i][j].isdigit():\n                has_digit = True\n            elif strings[i][j].islower():\n                has_lower = True\n            elif strings[i][j] in ['#', '*', '&']:\n                has_symbol = True\n            if has_digit and has_lower and has_symbol:\n                return min_ops\n        min_ops += 1\n        if i == n-1:\n            return min_ops\n        strings[i] = strings[i][1:] + strings[i][0]\n    return min_ops\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 951,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k = int(input())\n    n = int(input())\n    n_sum = sum(int(digit) for digit in str(n))\n    if n_sum < k:\n        return 0\n    else:\n        return 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 952,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    roads = []\n    for i in range(m):\n        u, v, c = list(map(int, input().split()))\n        roads.append((u, v, c))\n    return n, m, roads\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 953,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    p = list(map(int, input().split()))\n    A = []\n    for i in range(n):\n        A.append(list(map(int, input().split()))\n    # Your code goes here\n    return \" \".join(map(str, p)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 954,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    n = len(s)\n    count = 0\n    for i in range(n):\n        count += 1\n        s = s[-1] + s[:-1]\n        if s not in input_string:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 955,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    juices = []\n    for i in range(N):\n        price, vitamins = input_string.split()\n        juices.append((int(price), vitamins)\n    min_price = float('inf')\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                if 'A' in juices[i][1] and 'B' in juices[j][1] and 'C' in juices[k][1]:\n                    min_price = min(min_price, juices[i][0] + juices[j][0] + juices[k][0])\n    if min_price == float('inf'):\n        return -1\n    else:\n        return min_price\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 957,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=input()\n    if \"heidi\" in a:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 958,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    s = input()\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            if abs(ord(s[i]) - ord(s[j])) == k:\n                return s[i] + s[j]\n    return \"-1\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 959,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,mod = list(map(int, input().split()))\n    matrix = []\n    for i in range(a):\n        matrix.append(list(input())\n    count = 0\n    for i in range(2**(a*b):\n        binary = bin(i)[2:].zfill(a*b)\n        if all(binary.count('1') == 2 for binary in matrix):\n            count += 1\n    return count % mod\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 960,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    x = 1\n    while (x * (x // k) * (x % k) != n):\n        x += 1\n    return x\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 961,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R = lambda: map(int, input().split())\n    n = next(R())\n    a = list(R())\n    max_comfort = 0\n    for i in range(1, n):\n        for j in range(i, n):\n            xor = 0\n            for k in range(i, j+1):\n                xor ^= a[k]\n            max_comfort = max(max_comfort, xor)\n    return max_comfort\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 962,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    edges=[]\n    for i in range(m):\n        a,b=map(int,input().split())\n        edges.append((a,b) if a<b else (b,a))\n    edges=sorted(edges)\n    for i in range(m):\n        for j in range(i+1,m):\n            if edges[i][0]==edges[j][0] or edges[i][1]==edges[j][1]:\n                return -1\n    for i in range(m):\n        for j in range(i+1,m):\n            if edges[i][1]==edges[j][0]:\n                return 3\n                #return the number of vertices in the subgraph\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 963,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split());A=[1]+[0]*n;S=[[*map(int,input().split())]for _ in\\\"_\\\"*k];m=998244353\n    for i in range(k):A[S[i][0]-1]+=1;A[S[i][1]]+=1\n    for i in range(1,n):A[i]+=A[i-1]\n    return (A[-1]%m)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 964,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    get = lambda :[int(x) for x in (p.readline() if mode==\\\"file\\\" else input()).split()]\n    x1, y1, x2, y2, x3, y3 = get()\n    n = max(x1, x2, x3)\n    if n*n < x1+y1 or n*n < x2+y2 or n*n < x3+y3:\n        print(-1)\n        return\n    for i in range(n):\n        for j in range(n):\n            if i < x1 and j < y1:\n                print(\"A\", end=\"\")\n            elif i < x2 and j < y2:\n                print(\"B\", end=\"\")\n            elif i < x3 and j < y3:\n                print(\"C\", end=\"\")\n            else:\n                print(\" \", end=\"\")\n        print()\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 965,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    players = input_string.split()\n    count = 0\n    for i in range(n):\n        if players[i] == \"F\":\n            continue\n        else:\n            count += 1\n            for j in range(n):\n                if players[j] == \"A\" or players[j] == \"F\":\n                    continue\n                else:\n                    count -= 1\n                    break\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 966,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input()) + 1\n    while True:\n        if len(set(str(n)) == len(str(n)):\n            return n\n        n += 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 967,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    new_messages = 0\n    for i in range(n):\n        if a[i] != i+1:\n            new_messages += 1\n    return new_messages\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 968,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    people = []\n    for i in range(n):\n        first_name, last_name = input().split()\n        people.append((first_name, last_name))\n    p = list(map(int, input().split()))\n    people.sort(key=lambda x: (x[0], x[1]) if p[i] == i+1 else (x[1], x[0]))\n    for i in range(n-1):\n        if people[i][0] > people[i+1][0] or (people[i][0] == people[i+1][0] and people[i][1] > people[i+1][1]):\n            return \"NO\"\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 969,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, t = input(), input() + ' '\n    n = len(t)\n    dp = [0] * (n + 1)\n    for i in range(n):\n        for j in range(i, -1, -1):\n            if a[j:i + 1] == t[j:i + 1]:\n                dp[i + 1] = dp[j] + 1\n    if dp[n] == n:\n        return dp[n]\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 970,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    pieces = list(map(int, input().split()))\n    pieces.sort()\n    moves = 0\n    for i in range(1, n, 2):\n        if pieces[i] - pieces[i-1] > 1:\n            moves += pieces[i] - pieces[i-1] - 1\n    return moves\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 971,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input().split()\n    n,b,d=int(s[0]),int(s[1]),int(s[2])\n    a=list(map(int,input().split()))\n    count=0\n    waste=0\n    for i in range(n):\n        if a[i]<=b:\n            waste+=a[i]\n            if waste>d:\n                count+=1\n                waste=0\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 972,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    grid = []\n    for i in range(n):\n        grid.append(list(input())\n    # Your code here\n    return \"YES\" if is_convex(grid) else \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 973,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input().split()\n    R, C = int(s[0]), int(s[1])\n    matrix = []\n    for i in range(R):\n        matrix.append(list(input())\n    # Your code here\n    return matrix\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 974,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    cmd= list(input().split())\n    n=int(cmd[1])\n    add=[]\n    remove=[]\n    for i in range(2*n):\n        cmd= list(input().split())\n        if cmd[0]=='add':\n            add.append(int(cmd[1]))\n        else:\n            remove.append(int(cmd[1]))\n    add.sort()\n    remove.sort()\n    count=0\n    for i in range(n):\n        if add[i]!=remove[i]:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 975,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    sherlock_card = input()\n    moriarty_card = input()\n    sherlock_card = list(sherlock_card)\n    moriarty_card = list(moriarty_card)\n    min_flicks = 0\n    max_flicks = 0\n    for i in range(n):\n        if sherlock_card[i] == moriarty_card[i]:\n            continue\n        elif sherlock_card[i] < moriarty_card[i]:\n            min_flicks += 1\n        else:\n            max_flicks += 1\n    print(min_flicks)\n    print(max_flicks)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 976,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,x=map(int,input().split())\n    moments=[]\n    for i in range(n):\n        l,r=map(int,input().split())\n        moments.append((l,r)\n    moments.sort(key=lambda x:x[1])\n    current_time=0\n    count=0\n    for i in range(n):\n        if moments[i][0]>current_time:\n            current_time=moments[i][0]\n            count+=1\n        current_time=moments[i][1]\n    return count+x*(n-1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 977,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,p=map(int,input().split())\n    a=list(map(int,input().split())\n    good_x=[]\n    for x in range(1,n+1):\n        count=0\n        for perm in itertools.permutations(a):\n            if x==sum(perm):\n                count+=1\n        if count%p!=0:\n            good_x.append(x)\n    print(len(good_x))\n    print(*good_x)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 978,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k=int(input())*2\n    input_list=[]\n    for i in range(4):\n        input_list.append(list(input())\n    input_list=list(map(list,zip(*input_list))\n    for i in range(4):\n        for j in range(4):\n            if input_list[i][j]!='.':\n                if input_list[i][j]!=input_list[i-1][j] and input_list[i][j]!=input_list[i][j-1] and input_list[i][j]!=input_list[i+1][j] and input_list[i][j]!=input_list[i][j+1]:\n                    return \"NO\"\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 979,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = list(map(int,input().split()))\n    a = list(map(int,input().split())\n    result = 1\n    for i in range(n):\n        for j in range(i+1,n):\n            result = (result * (a[i]-a[j]) % m) % m\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 980,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k, n = list(map(int, input().split()))\n    strings = []\n    for i in range(k):\n        strings.append(input())\n    for i in range(k):\n        for j in range(k):\n            if i != j:\n                for l in range(n):\n                    if strings[i][l] != strings[j][l]:\n                        if strings[i][l] == strings[j][l-1] and strings[i][l-1] == strings[j][l]:\n                            strings[i] = strings[i][:l-1] + strings[j][l] + strings[i][l] + strings[i][l+1:]\n                            strings[j] = strings[j][:l-1] + strings[i][l] + strings[j][l] + strings[j][l+1:]\n                            break\n                        elif strings[i][l] == strings[j][l+1] and strings[i][l+1] == strings[j][l]:\n                            strings[i] = strings[i][:l] + strings[j][l] + strings[i][l+1:]\n                            strings[j] = strings[j][:l] + strings[i][l] + strings[j][l+1:]\n                            break\n    for i in range(k):\n        for j in range(k):\n            if i != j:\n                for l in range(n):\n                    if strings[i][l] != strings[j][l]:\n                        if strings[i][l] == strings[j][l-1] and strings[i][l-1] == strings[j][l]:\n                            strings[i] = strings[i][:l-1] + strings[j][l] + strings[i][l] + strings[i][l+1:]\n                            strings[j] = strings[j][:l-1] + strings[i][l] + strings[j][l] + strings[j][l+1:]\n                            break\n                        elif strings[i][l] == strings[j][l+1] and strings[i][l+1] == strings[j][l]:\n                            strings[i] = strings[i][:l] +",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 981,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    v = int(input())\n    a = list(map(int, input().split()))\n    max_num = -1\n    for i in range(1, 10):\n        num = ''\n        for j in range(9):\n            if a[j] <= v:\n                num += str(i)\n                v -= a[j]\n            else:\n                break\n        else:\n            if v == 0:\n                max_num = max(max_num, int(num))\n    return max_num if max_num != -1 else -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 982,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l,r = map(int,input().split())\n    if l%2==0:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 983,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, p, q, r = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    max_sum = -float('inf')\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            for k in range(j, n+1):\n                max_sum = max(max_sum, p*a[i-1] + q*a[j-1] + r*a[k-1])\n    return max_sum\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 984,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input().strip())\n    tree = [[] for _ in range(n)]\n    for i in range(n):\n        v, l, r = map(int, input().strip().split())\n        tree[i] = [v, l, r]\n    fail_count = 0\n    for i in range(n):\n        if tree[i][0] == -1:\n            root = i\n            break\n    for i in range(n):\n        if tree[i][0] != -1:\n            fail_count += find(tree, root, tree[i][0])\n    return fail_count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 985,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tx,y=map(int,input().split())\n    n=int(input())\n    count=0\n    for i in range(n):\n        x1,y1=map(int,input().split())\n        for j in range(n):\n            x2,y2=map(int,input().split())\n            if abs(x1-x2)==abs(y1-y2):\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 986,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R=lambda:map(int,input().split())\n    n,k=R()\n    a=list(R())\n    cost=0\n    books=[0]*(n+1)\n    for i in range(n):\n        if a[i] not in books:\n            if len(books)<k:\n                books.append(a[i])\n            else:\n                books.remove(min(books))\n                books.append(a[i])\n                cost+=1\n    return cost\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 987,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=list(map(int,input().split()))\n    p=list(map(int,input().split())\n    for i in range(m):\n        a,b=list(map(int,input().split())\n        p[a-1],p[b-1]=p[b-1],p[a-1]\n    return \" \".join(map(str,p)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 988,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = list(input())\n    max_convenience = 0\n    max_index = -1\n    for i in range(len(s)):\n        if s[i] == '.':\n            left = 0\n            right = 0\n            for j in range(i):\n                if s[j] == '*':\n                    left += 1\n            for j in range(i+1, len(s)):\n                if s[j] == '*':\n                    right += 1\n            if left + right > max_convenience:\n                max_convenience = left + right\n                max_index = i\n    s[max_index] = 'P'\n    return ''.join(s)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 989,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=list(map(int,input().split()))\n    a=list(map(int,input().split())\n    a.sort()\n    if k>=n:\n        print(a[-1]-a[0])\n    else:\n        if k%2==0:\n            print(a[-1]-a[0])\n        else:\n            print(a[-1]-a[1])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 990,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    edges = []\n    for i in range(N-1):\n        a, b = map(int, input().split())\n        edges.append((a, b))\n    M = int(input())\n    restrictions = []\n    for i in range(M):\n        u, v = map(int, input().split())\n        restrictions.append((u, v))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 991,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,s=map(int,input().split())\n    railroads=[]\n    for i in range(m):\n        u,v,a,b=map(int,input().split())\n        railroads.append((u,v,a,b))\n    exchanges=[]\n    for i in range(n):\n        c,d=map(int,input().split())\n        exchanges.append((c,d)\n    # Write your code here\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 992,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,s=map(int,input().split())\n    a=list(map(int,input().split())\n    mod=998244353\n    total=0\n    for i in range(1,2**n):\n        subset=[]\n        for j in range(n):\n            if i&(1<<j):\n                subset.append(j+1)\n        subset_sum=sum([a[j-1] for j in subset])\n        if subset_sum==s:\n            total+=len(subset)\n    return total%mod\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 993,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=input().split();d={0:1};r=s=0\n    for i in range(int(n)):\n        c,s=input().split(),0\n        for j in range(int(n)):\n            s+=int(c[j])\n            if s%m==0:d[j+1]=d[j]+1\n    for i in range(int(n)):\n        r+=d[i]*d[int(n)-i]\n    return r\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 994,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    notes = []\n    for i in range(m):\n        d, h = list(map(int, input().split())\n        notes.append((d, h))\n    notes.sort(key=lambda x: x[0])\n    max_height = 0\n    for i in range(1, n+1):\n        max_height = max(max_height, h)\n        if i == notes[0][0]:\n            h = notes[0][1]\n            notes.pop(0)\n        else:\n            h += 1\n    if notes:\n        return 'IMPOSSIBLE'\n    else:\n        return max_height\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 995,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input().strip())\n    A = list(map(int, input().strip().split()))\n    result = []\n    for i in range(1, n+1):\n        result.append(0)\n    for i in range(n):\n        for j in range(i, n):\n            for k in range(i, j+1):\n                for l in range(k+1, j+1):\n                    if is_perfect_square(A[i]*A[k]*A[l]):\n                        result[i] += 1\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 996,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, p = map(int, input().split())\n    layers = []\n    for i in range(n):\n        layers.append(list(input().split()))\n    critical_cpus = 0\n    for i in range(n):\n        for j in range(m):\n            for k in range(p):\n                if layers[i][j][k] == '1':\n                    if i > 0 and layers[i-1][j][k] == '1':\n                        critical_cpus += 1\n                    if j > 0 and layers[i][j-1][k] == '1':\n                        critical_cpus += 1\n                    if k > 0 and layers[i][j][k-1] == '1':\n                        critical_cpus += 1\n    return critical_cpus\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 997,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    ss = re.split(\\\";|,\\\", input())\n    a = []\n    b = []\n    for s in ss:\n        if s.isdigit() and int(s) > 0:\n            a.append(s)\n        else:\n            b.append(s)\n    if len(a) == 0:\n        print(\"-\")\n    else:\n        print(f'\"{\"\".join(a)}\"')\n    if len(b) == len(ss):\n        print(\"-\")\n    else:\n        print(f'\"{\"\".join(b)}\"')\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 998,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,x=map(int,input().split())\n    if x==0:\n        print(0)\n        return\n    if x==(1<<n)-1:\n        print(n)\n        print(*[1<<i for i in range(n)])\n        return\n    if x==0:\n        print(n)\n        print(*[0 for i in range(n)])\n        return\n    if x==1:\n        print(n)\n        print(*[1 for i in range(n)])\n        return\n    if x==2:\n        print(n)\n        print(*[2 for i in range(n)])\n        return\n    if x==3:\n        print(n)\n        print(*[3 for i in range(n)])\n        return\n    if x==4:\n        print(n)\n        print(*[4 for i in range(n)])\n        return\n    if x==5:\n        print(n)\n        print(*[5 for i in range(n)])\n        return\n    if x==6:\n        print(n)\n        print(*[6 for i in range(n)])\n        return\n    if x==7:\n        print(n)\n        print(*[7 for i in range(n)])\n        return\n    if x==8:\n        print(n)\n        print(*[8 for i in range(n)])\n        return\n    if x==9:\n        print(n)\n        print(*[9 for i in range(n)])\n        return\n    if x==10:\n        print(n)\n        print(*[10 for i in range(n)])\n        return\n    if x==11:\n        print(n)\n        print(*[11 for i in range(n)])\n        return\n    if x==12:\n        print(n)\n        print(*[12 for i in range(n)])\n        return\n    if x==13:\n        print(n)\n        print(*[13 for i in range(n)])\n        return\n    if x==14:\n        print(n)\n        print(*[14 for i in range(n)])\n        return\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 999,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    chess_periods = []\n    for i in range(n):\n        l, r = map(int, input().split())\n        chess_periods.append((l, r))\n    m = int(input())\n    programming_periods = []\n    for i in range(m):\n        l, r = map(int, input().split())\n        programming_periods.append((l, r)\n    max_distance = 0\n    for i in range(n):\n        for j in range(m):\n            distance = max(0, max(chess_periods[i][0] - programming_periods[j][1], programming_periods[j][0] - chess_periods[i][1]))\n            max_distance = max(max_distance, distance)\n    return max_distance\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1000,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,v=map(int,input().split())\n    return n*n\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1001,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    a.sort(reverse=True)\n    petya_score=0\n    gena_score=0\n    for i in range(n):\n        if i%2==0:\n            petya_score+=a[i]\n        else:\n            gena_score+=a[i]\n    return abs(petya_score-gena_score)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1002,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,d=[int(x) for x in input().split()]\n    songs=[int(x) for x in input().split()]\n    songs.sort(reverse=True)\n    jokes=0\n    time=0\n    for i in range(n):\n        if time+songs[i]+10<=d:\n            time+=songs[i]+10\n            jokes+=1\n        else:\n            break\n    if time==d:\n        return jokes\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1003,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    days = 1\n    while n > 0:\n        n -= m\n        days += 1\n        if n == 0:\n            break\n        n += 1\n    return days\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1004,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 1:\n        if a[0] > 0:\n            print(1)\n            print(1)\n        else:\n            print(-1)\n        return\n    if n == 2:\n        if a[0] > 0 and a[1] < 0:\n            print(1)\n            print(2)\n        elif a[0] < 0 and a[1] > 0:\n            print(1)\n            print(2)\n        else:\n            print(-1)\n        return\n    if n == 3:\n        if a[0] > 0 and a[1] < 0 and a[2] > 0:\n            print(2)\n            print(1, 2)\n        elif a[0] > 0 and a[1] > 0 and a[2] < 0:\n            print(2)\n            print(1, 2)\n        elif a[0] < 0 and a[1] < 0 and a[2] > 0:\n            print(2)\n            print(1, 2)\n        elif a[0] < 0 and a[1] > 0 and a[2] < 0:\n            print(2)\n            print(1, 2)\n        else:\n            print(-1)\n        return\n    if n == 4:\n        if a[0] > 0 and a[1] < 0 and a[2] > 0 and a[3] < 0:\n            print(2)\n            print(2, 2)\n        elif a[0] > 0 and a[1] > 0 and a[2] < 0 and a[3] > 0:\n            print(2)\n            print(2, 2)\n        elif a[0] < 0 and a[1] < 0 and a[2] > 0 and a[3] > 0:\n            print(2)\n            print(2, 2)\n        elif a[0] < 0 and a[1] > 0 and a[2] > 0",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1005,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k, d = map(int, input().split())\n    a = list(map(int, input().split())\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1006,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    row=input()\n    board=[]\n    for i in range(len(row)):\n        board.append(list(input())\n    n=len(board)\n    for i in range(n):\n        for j in range(n):\n            if board[i][j]=='.':\n                continue\n            else:\n                if i==0 and j==0:\n                    if board[i][j+1]=='#' and board[i+1][j]=='#' and board[i+1][j+1]=='#' and board[i+2][j+1]=='#' and board[i+2][j+2]=='#':\n                        continue\n                elif i==n-1 and j==0:\n                    if board[i-1][j]=='#' and board[i-1][j+1]=='#' and board[i][j+1]=='#' and board[i+1][j+1]=='#' and board[i+1][j+2]=='#':\n                        continue\n                elif i==0 and j==n-1:\n                    if board[i][j-1]=='#' and board[i+1][j-1]=='#' and board[i+1][j]=='#' and board[i+2][j]=='#' and board[i+2][j-1]=='#':\n                        continue\n                elif i==n-1 and j==n-1:\n                    if board[i-1][j-1]=='#' and board[i-1][j]=='#' and board[i][j-1]=='#' and board[i+1][j-1]=='#' and board[i+1][j]=='#':\n                        continue\n                elif i==0:\n                    if board[i][j-1]=='#' and board[i+1][j-1]=='#' and board[i+1][j]=='#' and board[i+1][j+1]=='#' and board[i+2][j+1]=='#':\n                ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1007,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k, p = list(map(int, input().split()))\n    return k\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1008,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    k = int(input())\n    if len(s) % k != 0:\n        return \"NO\"\n    n = len(s) // k\n    for i in range(n):\n        if s[i:i+n] != s[i+n-1::-1]:\n            return \"NO\"\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1009,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    sizes=list(map(int,input().split())\n    s=max(sizes)\n    while True:\n        if sum([min(s,x) for x in sizes])<=s*k:\n            break\n        else:\n            s+=1\n    return s\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1010,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, a, v = int(input()), list(map(int, input().split())), 1\n    for i in range(n-1):\n        if a[i] == 1 and a[i+1] == 1:\n            v += 1\n    return v\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1011,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,_a=int(input()),list(map(int,input().split()))\n    m,_b=int(input()),list(map(int,input().split())\n    a=sum([2 if i<=d else 3 for i in _a])\n    b=sum([2 if i<=d else 3 for i in _b])\n    return a,b\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1012,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\ts = ''.join(sorted(input()))\n    if input_string == input_string[::-1]:\n        return -1\n    else:\n        return ts\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1013,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    matrix = []\n    for i in range(n):\n        matrix.append(list(map(int, input().split()))\n    min_ops = 0\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if matrix[i-1][j-1] == 1:\n                min_ops += 4\n    return min_ops\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1014,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print('black' if int(input()) % 2 == 1 else 'white\\\n    \\n1 1')\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1015,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    lemmings=list(map(int,input().split()))\n    max_protection=[]\n    for i in range(n*(n-1)//2+1):\n        max_protection.append(0)\n    for i in range(n):\n        for j in range(i+1,n):\n            if lemmings[i]==0 and lemmings[j]==0:\n                max_protection[abs(i-j)]+=1\n    for i in range(1,n*(n-1)//2+1):\n        max_protection[i]=max(max_protection[i-1],max_protection[i])\n    for i in range(n*(n-1)//2,0,-1):\n        max_protection[i-1]=max(max_protection[i],max_protection[i-1])\n    for i in range(n*(n-1)//2+1):\n        print(max_protection[i],end=\" \")\n# Test your code with this input\ninput_string = \"5\\n1 0 0 0 1\"\nsolution(input_string)\n# Output: 0 2 3 3 3 3 3 3 3 3 \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1016,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    reactions = []\n    for _ in range(m):\n        x, y = list(map(int, input().split())\n        reactions.append((x, y))\n    return 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1017,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = int(input())\n    if a == 1:\n        return 1\n    elif a == 2:\n        return 1\n    else:\n        return a - 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1018,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    pens = list(map(int, input().split()))\n    for i in range(1, n+1):\n        if i == n:\n            return i\n        else:\n            pens[i-1] -= 1\n            if pens[i-1] == 0:\n                return i\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1019,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = 1\n    b = 2\n    while n > a + b:\n        a += 1\n        b = a + 1\n        while gcd(a, b) != 1:\n            b += 1\n    print(a, b)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1020,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    w,h,k=map(int,input().split())\n    return (w-2)*(h-2)+(w-4)*(h-4)+(w-6)*(h-6)+...+(w-2*(k-1)*4)*(h-2*(k-1)*4)\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1021,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    c = list(map(int, input().split()))\n    t = list(map(int, input().split())\n    for i in range(1, n-1):\n        if c[i] == t[i]:\n            continue\n        elif c[i] == t[i-1] + t[i+1] - c[i]:\n            c[i] = t[i]\n        else:\n            return \"No\"\n    return \"Yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1022,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    l=list(map(int,input().split())\n    r=list(map(int,input().split())\n    if sum(l)>sum(r):\n        return \"NO\"\n    else:\n        return \"YES\"\n    for i in range(n):\n        l[i]+=r[i]\n    for i in range(n-1,0,-1):\n        l[i]+=l[i-1]\n    for i in range(n):\n        if l[i]>r[i]:\n            return \"NO\"\n    for i in range(n):\n        l[i]=n-l[i]\n    for i in range(n):\n        if l[i]>r[i]:\n            return \"NO\"\n    return \"YES\"\n    for i in range(n):\n        a[i]=l[i]+r[i]+1\n    return \"YES\"+\"\\n\"+\" \".join(map(str,a)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1023,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, ta, tb, k = list(map(int, input().split()))\n    a = list(map(int, input().split())\n    b = list(map(int, input().split())\n    a.sort()\n    b.sort()\n    if k >= n + m:\n        return -1\n    if k == 0:\n        return max(a[-1] + tb, b[-1] + ta)\n    if k == n:\n        return b[0] + ta\n    if k == m:\n        return a[-1] + tb\n    if k == n + m - 1:\n        return max(a[-1] + tb, b[0] + ta)\n    if k == n - 1:\n        return b[-1]\n    if k == m - 1:\n        return a[-1] + tb\n    if k == 1:\n        return min(a[0] + tb, b[0] + ta)\n    if k == 2:\n        return min(a[0] + tb, b[0] + ta, max(a[-1] + tb, b[-1] + ta))\n    if k == n - 2:\n        return max(a[-1] + tb, b[-1] + ta)\n    if k == m - 2:\n        return min(a[0] + tb, b[0] + ta)\n    if k == n - 3:\n        return max(a[-1] + tb, b[-1] + ta)\n    if k == m - 3:\n        return min(a[0] + tb, b[0] + ta)\n    if k == n - 4:\n        return max(a[-1] + tb, b[-1] + ta)\n    if k == m - 4:\n        return min(a[0] + tb, b[0] + ta)\n    if k == n - 5:\n        return max(a[-1] + tb, b[-1] + ta)\n    if k == m - 5:\n        return min(a[0] + tb, b[0] + ta)\n    if k == n - 6:\n        return max(a[-",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1024,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    perm = list(map(int, input().split()))\n    return 0.0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1025,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    points=[]\n    for i in range(n):\n        x,y=map(int,input().split())\n        points.append((x,y))\n    count=0\n    for i in range(n-2):\n        for j in range(i+1,n-1):\n            for k in range(j+1,n):\n                x1,y1=points[i]\n                x2,y2=points[j]\n                x3,y3=points[k]\n                area=(x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))\n                if area!=0:\n                    count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1026,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    b = list(map(int, input().split()))\n    max_beauty = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if b[j] - b[i] == j - i:\n                max_beauty = max(max_beauty, b[i] + b[j])\n    return max_beauty\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1027,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = [int(i) for i in input().split()]\n    max_score = 0\n    for i in range(len(s)):\n        if s[i] % 2 == 1:\n            continue\n        else:\n            score = 0\n            for j in range(i, i+s[i]//2+1):\n                score += s[j%14]\n            max_score = max(max_score, score)\n    return max_score\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1028,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    min_pairs = n * (n - 1) // 2\n    max_pairs = (n // m) * ((n // m) - 1) // 2 + (n % m) * (n // m)\n    return min_pairs, max_pairs\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1029,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = input()\n    return len(a)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1030,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,p,k=list(map(int,input().split()))\n    if p-k-1<1:\n        start=1\n    else:\n        start=p-k-1\n    if p+k>n:\n        end=n\n    else:\n        end=p+k\n    if p-k-1<1:\n        start=1\n    else:\n        start=p-k-1\n    if p+k>n:\n        end=n\n    else:\n        end=p+k\n    if p-k-1<1:\n        start=1\n    else:\n        start=p-k-1\n    if p+k>n:\n        end=n\n    else:\n        end=p+k\n    if p-k-1<1:\n        start=1\n    else:\n        start=p-k-1\n    if p+k>n:\n        end=n\n    else:\n        end=p+k\n    if p-k-1<1:\n        start=1\n    else:\n        start=p-k-1\n    if p+k>n:\n        end=n\n    else:\n        end=p+k\n    if p-k-1<1:\n        start=1\n    else:\n        start=p-k-1\n    if p+k>n:\n        end=n\n    else:\n        end=p+k\n    if p-k-1<1:\n        start=1\n    else:\n        start=p-k-1\n    if p+k>n:\n        end=n\n    else:\n        end=p+k\n    if p-k-1<1:\n        start=1\n    else:\n        start=p-k-1\n    if p+k>n:\n        end=n\n    else:\n        end=p+k\n    if p-k-1<1:\n        start=1\n    else:\n        start=p-k-1\n    if p+k>n:\n        end=n\n    else:\n        end=p+k\n    if p-k-1<1:\n        start=1\n    else:\n        start=p-k-",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1031,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, a = int(input()), list(map(int, input().split()))\n    max_y = sum(a)\n    min_y = 0\n    for i in range(n):\n        if i % 2 == 0:\n            for j in range(a[i]):\n                print(\" \" * (max_y - j) + \"\\\\\" * (i + 1) + \" \" * (max_y - j))\n        else:\n            for j in range(a[i]):\n                print(\" \" * (max_y - j) + \"/\" * (i + 1) + \" \" * (max_y - j))\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1032,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, p = map(int, input().split())\n    a = list(map(int, input().split())\n    good_x = []\n    for x in range(1, 10**5+1):\n        if x % p == 0:\n            continue\n        valid_permutations = 0\n        for perm in itertools.permutations(a):\n            if sum(perm) >= x:\n                valid_permutations += 1\n        if valid_permutations % p != 0:\n            good_x.append(x)\n    print(len(good_x))\n    print(\" \".join(map(str, good_x))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1033,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, h = map(int, input().split())\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 3\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1034,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x,y,z,k = map(int,input().split())\n    a = list(map(int,input().split())[:x])\n    b = list(map(int,input().split())[:y])\n    c = list(map(int,input().split())[:z])\n    cakes = [(a[i]+b[j]+c[k],i,j,k) for i in range(x) for j in range(y) for k in range(z)]\n    cakes.sort(reverse=True)\n    for i in range(k):\n        print(cakes[i][0])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1035,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    g = gcd(*map(int,input().split()))\n    count = 0\n    for i in range(1,g+1):\n        if g%i == 0:\n            count += 1\n    return count-1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1036,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int, input().split());S=input();d=[list(S) for _ in range(k+1)]\n    for i in range(k):\n        for j in range(2**i):\n            if 2**i<=j+2**i<2**(i+1):\n                d[i+1][j]=d[i][j]\n            else:\n                d[i+1][j]=d[i][j]\n    for i in range(k-1,0,-1):\n        for j in range(2**i):\n            if 2**i<=j+2**i<2**(i+1):\n                if d[i][j]==d[i][j+2**i]:\n                    d[i][j]='D'\n                elif d[i][j]=='R':\n                    if d[i+1][j]=='P':\n                        d[i][j]='S'\n                    else:\n                        d[i][j]='P'\n                elif d[i][j]=='P':\n                    if d[i+1][j]=='S':\n                        d[i][j]='R'\n                    else:\n                        d[i][j]='P'\n                else:\n                    if d[i+1][j]=='R':\n                        d[i][j]='S'\n                    else:\n                        d[i][j]='R'\n    return d[1][0]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1037,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input_string.split()))\n    a.sort(reverse=True)\n    total_happiness = 0\n    for i in range(n):\n        total_happiness += a[i] * abs(i - i)\n    return total_happiness\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1038,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split());print(-(a^b)>>1&1^~b%2*b^a%2*a)\n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1039,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    edges = []\n    for i in range(N-1):\n        a, b, c = map(int, input().split())\n        edges.append((a-1, b-1, c)\n    Q = int(input())\n    K = int(input())\n    queries = []\n    for i in range(Q):\n        x, y = map(int, input().split())\n        queries.append((x-1, y-1)\n    # Your code here\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1040,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=input()\n    while \"fox\" in a:\n        a=a.replace(\"fox\",\"\")\n    return len(a)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1041,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    k = 1\n    while True:\n        if all(x == '0' for x in s):\n            return \"YES\"\n        else:\n            s = list(s)\n            for i in range(n):\n                if s[i] != '0':\n                    if i == 0:\n                        s[i] = int(s[i]) + k\n                        s[n-1] = int(s[n-1]) - k\n                    elif i == n-1:\n                        s[i] = int(s[i]) + k\n                        s[0] = int(s[0]) - k\n                    else:\n                        s[i] = int(s[i]) + k\n                        s[i-1] = int(s[i-1]) - k\n                        s[i+1] = int(s[i+1]) - k\n            s = ''.join(str(x) for x in s)\n            k += 1\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1042,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split())\n    if b%a==0:\n        return b//a\n    else:\n        return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1043,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    bribes = 0\n    while len(a) > 1:\n        for i in range(0, len(a), 2):\n            if a[i] == -1:\n                return bribes\n            else:\n                bribes += a[i]\n        a = a[::2]\n    return bribes\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1044,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    cycles = list(map(int, input().split()))\n    result = []\n    for i in range(n):\n        if i == 0:\n            result.append(2)\n            continue\n        if cycles[i] == 1:\n            result.append(1)\n            continue\n        if cycles[i] == 2:\n            result.append(2)\n            continue\n        if cycles[i] % 2 == 0:\n            result.append(1)\n        else:\n            result.append(2)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1045,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    i=1\n    sum=0\n    while sum<=n:\n        sum=0\n        for j in range(1,i+1):\n            sum+=j\n        if sum>n:\n            break\n        i+=1\n    return i-1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1046,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    d=input().split()\n    n=int(d[0])\n    d=list(map(int,d[1:])\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if d[i]!=0 and d[j]!=0 and d[i]!=d[j]:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1047,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = list(reversed(input()))\n    k = 0\n    for i in range(len(n)):\n        if n[i] == '0':\n            continue\n        else:\n            n[i] = '1'\n            k += 1\n            break\n    return k\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1048,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    x=0\n    y=0\n    count=0\n    for i in input_string:\n        if i=='U':\n            y+=1\n        elif i=='D':\n            y-=1\n        elif i=='L':\n            x-=1\n        elif i=='R':\n            x+=1\n        if x==0 and y==0:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1049,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, d = [int(x) for x in input().split()]\n    opponents = []\n    for i in range(d):\n        opponents.append(input())\n    max_streak = 0\n    current_streak = 0\n    for i in range(d):\n        if '1' in opponents[i]:\n            current_streak += 1\n        else:\n            max_streak = max(max_streak, current_streak)\n            current_streak = 0\n    return max(max_streak, current_streak)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1050,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k=list(map(int,input().split()))\n    if n<=m and n<=k:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1051,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    ranks = list(map(int, input().split()))\n    ranks.sort()\n    count = 0\n    for i in range(1, n+1):\n        if ranks[i-1] != i:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1052,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    if k == 1:\n        return 1\n    elif k == 2:\n        return (n-1) * n // 2\n    elif k == 3:\n        return (n-1) * (n-1) * (n-2) // 2\n    elif k == 4:\n        return (n-1) * (n-1) * (n-2) * (n-3) // 2\n    else:\n        return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1053,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=0;n=int(input())-1\n    for i in range(n):\n        for j in range(i+1,n):\n            a^=i^j\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1054,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    mines = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        mines.append((x, y))\n    x_min = min(mines, key=lambda x: x[0])[0]\n    x_max = max(mines, key=lambda x: x[0])[0]\n    y_min = min(mines, key=lambda x: x[1])[1]\n    y_max = max(mines, key=lambda x: x[1])[1]\n    area = (x_max - x_min + 1) * (y_max - y_min + 1)\n    return area\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1055,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = m = int(input())\n    arr = list(map(int, input_string.split()))\n    max_len = 0\n    while n > 0:\n        if arr == sorted(arr):\n            return n\n        else:\n            if n % 2 == 0:\n                n //= 2\n            else:\n                n = (n+1)//2\n            max_len = max(max_len, n)\n    return max_len\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1056,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    X = [[int(a) for a in input().split()] for _ in range(10)]\n    for i in range(1, 10):\n        X[i] = [0] + X[i]\n    X = [X[i] for i in range(1, ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1057,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1058,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    blocks=[]\n    for i in range(n):\n        color1,value,color2=map(int,input().split())\n        blocks.append([color1,value,color2])\n    blocks.sort(key=lambda x:x[1],reverse=True)\n    max_sum=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if blocks[i][2]==blocks[j][0]:\n                max_sum=max(max_sum,blocks[i][1]+blocks[j][1])\n            if blocks[i][0]==blocks[j][2]:\n                max_sum=max(max_sum,blocks[i][1]+blocks[j][1])\n    return max_sum\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1059,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input().strip())\n    if n==1:\n        print(\"a\")\n    elif n==2:\n        print(\"-1\")\n    elif n==3:\n        print(\"-1\")\n    elif n==4:\n        print(\"aei\")\n    elif n==5:\n        print(\"-1\")\n    elif n==6:\n        print(\"aeiou\")\n    elif n==7:\n        print(\"-1\")\n    elif n==8:\n        print(\"-1\")\n    elif n==9:\n        print(\"aeioua\")\n    elif n==10:\n        print(\"-1\")\n    elif n==11:\n        print(\"-1\")\n    elif n==12:\n        print(\"aeiouaei\")\n    elif n==13:\n        print(\"-1\")\n    elif n==14:\n        print(\"aeiouaeio\")\n    elif n==15:\n        print(\"-1\")\n    elif n==16:\n        print(\"aeiouaeiou\")\n    elif n==17:\n        print(\"-1\")\n    elif n==18:\n        print(\"-1\")\n    elif n==19:\n        print(\"aeiouaeioua\")\n    elif n==20:\n        print(\"-1\")\n    elif n==21:\n        print(\"-1\")\n    elif n==22:\n        print(\"aeiouaeiouae\")\n    elif n==23:\n        print(\"-1\")\n    elif n==24:\n        print(\"aeiouaeiouaei\")\n    elif n==25:\n        print(\"-1\")\n    elif n==26:\n        print(\"aeiouaeiouaeiou\")\n    elif n==27:\n        print(\"-1\")\n    elif n==28:\n        print(\"-1\")\n    elif n==29:\n        print(\"aeiouaeiouaeioua\")\n    elif n==30:\n        print(\"-1\")\n    elif n==31:\n        print(\"-1\")\n    elif n==32:\n        print(\"aeiou",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1060,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    A = list(map(int, input().split()))\n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1061,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = input().split()\n    matrix = []\n    for i in range(5):\n        matrix.append(list(map(int, input().split()))\n    one_pos = []\n    for i in range(5):\n        for j in range(5):\n            if matrix[i][j] == 1:\n                one_pos.append((i,j))\n    if one_pos[0][0] == 2 or one_pos[0][1] == 2:\n        return 0\n    elif one_pos[0][0] == 1 and one_pos[0][1] == 3:\n        return 1\n    else:\n        return 2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1062,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=input()\n    t=input()\n    min_dist=float('inf')\n    min_i,min_j=-1,-1\n    for i in range(n):\n        for j in range(i+1,n):\n            if s[i]!=t[i] and s[j]!=t[j]:\n                dist=0\n                new_s=s[:i]+s[j]+s[i+1:j]+s[i]+s[j+1:]\n                for k in range(n):\n                    if new_s[k]!=t[k]:\n                        dist+=1\n                if dist<min_dist:\n                    min_dist=dist\n                    min_i,min_j=i,j\n    if min_dist<n:\n        print(min_dist)\n        print(min_i+1,min_j+1)\n    else:\n        print(min_dist)\n        print(-1,-1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1063,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    sequence = []\n    for i in range(n):\n        sequence.append(input())\n    for i in range(n):\n        if '0' in sequence[i]:\n            return \"NO\"\n    for i in range(n):\n        if sequence[i].count('?') == 1:\n            for j in range(10):\n                if sequence[i].replace('?', str(j)) not in sequence:\n                    sequence[i] = sequence[i].replace('?', str(j))\n                    break\n    for i in range(1, n):\n        if int(sequence[i]) <= int(sequence[i-1]):\n            return \"NO\"\n    return \"YES\" + \"\\n\" + \"\\n\".join(sequence)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1064,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k = map(int, input().split())\n    blocked_positions = list(map(int, input().split()))\n    lamps_costs = list(map(int, input().split()))\n    lamps_costs.sort(reverse=True)\n    min_cost = float('inf')\n    for i in range(k):\n        if lamps_costs[i] > n:\n            continue\n        cost = lamps_costs[i] * (n // lamps_costs[i])\n        for j in range(m):\n            if blocked_positions[j] % lamps_costs[i] == 0:\n                cost += lamps_costs[i]\n        min_cost = min(min_cost, cost)\n    if min_cost == float('inf'):\n        print(-1)\n    else:\n        print(min_cost)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1065,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k,M,D=list(map(int,input().split()))\n    if n%k!=0:\n        return n//k\n    else:\n        return n//k-1\n    # Write your code here\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1066,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=list(map(int,input().split()))\n    odd=[]\n    even=[]\n    for i in range(1,n+1):\n        if i%2!=0:\n            odd.append(i)\n        else:\n            even.append(i)\n    odd.sort()\n    even.sort()\n    if k<=n:\n        return odd[k-1]\n    else:\n        return even[k-n-1]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1067,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    if a[0] == 0:\n        return n\n    elif a[-1] == 0:\n        return n - 1\n    elif a[0] == 1:\n        return 0\n    elif a[-1] == 1:\n        return 0\n    elif a[0] == -1:\n        return 1\n    elif a[-1] == -1:\n        return 1\n    else:\n        return n\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1068,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\ts = input()\n    \\tfor i in range(len(s)-2):\n    \\t    for j in range(i+1, len(s)-1):\n    \\t        a = int(s[:i+1])\n    \\t        b = int(s[i+1:j+1])\n    \\t        c = int(s[j+1:])\n    \\t        if a+b == c:\n    \\t            return f\"{a}+{b}={c}\"\n    \\treturn None\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1069,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    result=0\n    for i in range(1,5):\n        result+=pow(i,n,5)\n    return result\nprint(solution(input()))\n# End of code\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1070,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    houses = list(map(int, input().split()))\n    max_length = 0\n    current_length = 1\n    for i in range(1, n):\n        if houses[i] != houses[i-1]:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 1\n    max_length = max(max_length, current_length)\n    return max_length\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1071,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a1,a2,a3 = map(int, input().split())\n    b1,b2,b3 = map(int, input().split())\n    n = int(input())\n    if a1+a2+a3+b1+b2+b3 > n:\n        return \"NO\"\n    if a1+b1 > 5 or a2+b2 > 5 or a3+b3 > 5:\n        return \"NO\"\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1072,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    table=[]\n    for i in range(n):\n        table.append(input())\n    min_col=float('inf')\n    for i in range(m):\n        col=[]\n        for j in range(n):\n            col.append(table[j][i])\n        col.sort()\n        if col!=sorted(col):\n            min_col=min(min_col,i)\n    return min_col\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1073,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, s = int(input()), input()\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if s[i:j+1] in s[j+1:]:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1074,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = '%o' % int(input())\n    return a.count('1')\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1075,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    if n==2:\n        print(\"0 1 0\")\n    elif n%2==0:\n        print(\"-1\")\n    else:\n        for i in range(n):\n            print(i,end=\" \")\n        print(0)\n        for i in range(n-1,0,-1):\n            print(i,end=\" \")\n        print(0)\n# Test your code with the examples\nsolution(\"2\") # Output: 0 1 0\nsolution(\"3\") # Output: -1\nsolution(\"4\") # Output: 0 1 3 2 0\nsolution(\"16\") # Output: 0 1 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0 \n# Test your code with some edge cases\nsolution(\"1\") # Output: 0 0\nsolution(\"5\") # Output: 0 1 4 3 2 0\nsolution(\"6\") # Output: 0 1 4 3 2 5 0 \nsolution(\"7\") # Output: 0 1 2 4 6 3 5 7 0 \nsolution(\"8\") # Output: 0 1 2 4 6 3 5 7 8 0 \nsolution(\"9\") # Output: 0 1 2 4 6 3 5 7 8 9 0 \nsolution(\"10\") # Output: 0 1 2 4 6 3 5 7 8 9 10 0 \nsolution(\"11\") # Output: -1 ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1076,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, M = map(int, input().split());invM1 = pow(M + 1, P - 2, P);pre = 1\n    for i in range(1, N + 1):\n        pre *= i\n    return (pre * invM1) % P\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1077,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = [0] * m\n    for i in a:\n        b[i-1] += 1\n    max_min = min(b)\n    min_changes = 0\n    for i in range(n):\n        if a[i] not in range(1, m+1):\n            min_changes += 1\n            continue\n        if b[a[i]-1] > max_min:\n            max_min = b[a[i]-1]\n    print(max_min, min_changes)\n    for i in range(n):\n        if a[i] not in range(1, m+1):\n            continue\n        if b[a[i]-1] == max_min:\n            a[i] = m\n            for j in range(m):\n                if b[j] < max_min:\n                    a[i] = j+1\n                    break\n    print(\" \".join(map(str, a))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1078,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=[]\n    for i in range(n):\n        a.append(int(input()))\n    for i in range(n):\n        if a[i]%2==0:\n            a[i]=a[i]//2\n        else:\n            a[i]=(a[i]+1)//2\n    for i in range(n):\n        if sum(a)==0:\n            print(a[i])\n        else:\n            a[i]-=1\n            if sum(a)==0:\n                print(a[i])\n            else:\n                a[i]+=1\n                if sum(a)==0:\n                    print(a[i])\n                else:\n                    a[i]-=1\n                    if sum(a)==0:\n                        print(a[i])\n                    else:\n                        a[i]+=1\n                        if sum(a)==0:\n                            print(a[i])\n                        else:\n                            a[i]-=1\n                            if sum(a)==0:\n                                print(a[i])\n                            else:\n                                a[i]+=1\n                                if sum(a)==0:\n                                    print(a[i])\n                                else:\n                                    a[i]-=1\n                                    if sum(a)==0:\n                                        print(a[i])\n                                    else:\n                                        a[i]+=1\n                                        if sum(a)==0:\n                                            print(a[i])\n                                        else:\n                                            a[i]-=1\n                                            if sum(a)==0:\n                                                print(a[i])\n                                            else:\n                                                a[i]+=1\n                                                if sum(a)==0:\n                                                    print(a[i])\n                                                else:\n                                                    a[i]-=1\n                                                    if sum(a)==0:\n                                                        print(a[i])\n                                                    else:\n                                                        a[i",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1079,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = input()\n    n = int(t, 2)\n    count = 0\n    while n > 0:\n        if n % 2 == 0:\n            count += 1\n            n //= 2\n        else:\n            n -= 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1080,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = input()\n    a = list(map(int, input().split())\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] > a[j]:\n                a[i] -= 1\n                a[j] -= 1\n            else:\n                a[j] -= 1\n                a[i] -= 1\n    if all(x == 0 for x in a):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1081,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n='0'+input();print('YNEOS'[n!='012'and(n[-2]in'1279'or n[-1]in'179')::2])\n    # Write your code here\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1082,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    mod = 10**9 + 7\n    count = 0\n    for i in range(1, n+1):\n        count += pow(i, n, mod)\n    return count % mod\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1083,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    numbers=list(range(1,n+1)\n    numbers.sort()\n    diff=float('inf')\n    for i in range(1,n+1):\n        diff_sum=sum(numbers[:i])-sum(numbers[i:])\n        if abs(diff_sum)<diff:\n            diff=abs(diff_sum)\n            group1=numbers[:i]\n            group2=numbers[i:]\n    print(diff)\n    print(len(group1),*group1,len(group2),*group2,sep=' ')\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1084,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(input())\n    operations = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                operations.append(([i], [j]))\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                operations.append(([i], [j])\n    return \"Yes\" if len(operations) == n * m else \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1085,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    count = 0\n    for i in range(2, N+1):\n        if N % i == 0:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1086,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    h,w=map(int,input().split())\n    A=[]\n    B=[]\n    for i in range(h):\n        A.append(list(map(int,input().split()))\n    for i in range(h):\n        B.append(list(map(int,input().split()))\n    red=0\n    blue=0\n    for i in range(h):\n        for j in range(w):\n            if i%2==0 and j%2==0:\n                red+=A[i][j]\n            else:\n                blue+=A[i][j]\n            if i%2==1 and j%2==1:\n                red+=B[i][j]\n            else:\n                blue+=B[i][j]\n    return abs(red-blue)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1087,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,K = map(int,input().split())\n    A = list(map(int,input().split())\n    max_f = 0\n    for i in range(K+1):\n        f = 0\n        for j in range(N):\n            f += A[j] ^ i\n        if f > max_f:\n            max_f = f\n    return max_f\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1088,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f=lambda:map(int,input().split())\n    N,K=f()\n    M=[[0]*N for i in range(N)]\n    for i in range(N):\n        M[i]=list(f())\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1089,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k=map(int,input().split())\n    total_cost=0\n    for i in range(k):\n        for j in range(k):\n            for x1 in range(1,n+1):\n                for y1 in range(1,m+1):\n                    for x2 in range(1,n+1):\n                        for y2 in range(1,m+1):\n                            if i!=j or x1!=x2 or y1!=y2:\n                                total_cost+=abs(x1-x2)+abs(y1-y2)\n    return total_cost%(10**9+7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1090,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,K = map(int,input().split())\n    S = input()\n    max_happy = 0\n    for l in range(1,N):\n        for r in range(l,N):\n            new_string = S[:l-1][::-1] + S[l-1:r][::-1] + S[r:]\n            happy = sum([1 for i in range(N) if new_string[i] == S[i]] or (i == 0 and new_string[i] == 'R') or (i == N-1 and new_string[i] == 'L'))\n            max_happy = max(max_happy, happy)\n    return max_happy\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1091,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    prices = list(map(int, input_string.split()))\n    max_price = max(prices)\n    winner = prices.index(max_price) + 1\n    return f\"{winner} {max_price}\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1092,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = map(int,input().split())\n    lights = list(map(int,input().split()))\n    count = 0\n    for i in range(n):\n        if i in lights:\n            count += 1\n        else:\n            count += 2\n    return count%(10**9+7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1094,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    chat_list = []\n    for i in range(n):\n        if input_string[i] not in chat_list:\n            chat_list.insert(0, input_string[i])\n    return chat_list\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1095,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, y1 = map(int, input().split())\n    a = list(map(int, input().split())\n    m, y2 = map(int, input().split())\n    b = list(map(int, input().split())\n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1096,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    p = input()\n    x = 0\n    if p[0] == 'a' or p[0] == 'h':\n        x += 1\n    if p[0] == 'b' or p[0] == 'g':\n        x += 2\n    if p[0] == 'c' or p[0] == 'f':\n        x += 2\n    if p[1] == '1' or p[1] == '8':\n        x += 1\n    if p[1] == '2' or p[1] == '7':\n        x += 2\n    if p[1] == '3' or p[1] == '6':\n        x += 2\n    return x\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1097,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, t, k = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    if k >= n - 1:\n        return -1\n    for i in range(1, t):\n        if a[i] > n - i - 1:\n            return -1\n    for i in range(1, t):\n        a[i] = n - i - a[i]\n    for i in range(1, t):\n        if a[i] > a[i - 1]:\n            return -1\n    for i in range(1, t):\n        a[i] = a[i - 1] + a[i]\n    if a[t - 1] != 1:\n        return -1\n    for i in range(1, t):\n        a[i] = n - a[i]\n    for i in range(1, t):\n        if a[i] > k:\n            return -1\n    for i in range(1, t):\n        a[i] = n - a[i]\n    if a[t - 1] != k:\n        return -1\n    print(n)\n    for i in range(1, n):\n        if i != 1:\n            print(1, i)\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1098,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    alarms=[]\n    for i in range(n):\n        alarms.append(input())\n    alarms.sort()\n    max_sleep=0\n    for i in range(n):\n        for j in range(i+1,n):\n            time_diff=int(alarms[j][:2])-int(alarms[i][:2])\n            if time_diff>max_sleep:\n                max_sleep=time_diff\n    return str(max_sleep)+\":59\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1099,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    edges=[]\n    for i in range(n-1):\n        u,v=map(int,input().split())\n        edges.append((u,v) if u<v else (v,u))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1100,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n == 3:\n        return 1\n    elif n == 4:\n        return 3\n    else:\n        return 9\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1101,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    rooms = list(input())\n    min_distance = float('inf')\n    for i in range(n):\n        if rooms[i] == '0':\n            distance = 0\n            for j in range(i+1, i+k+1):\n                if j >= n:\n                    break\n                if rooms[j] == '0':\n                    distance += 1\n                else:\n                    break\n            min_distance = min(min_distance, distance)\n    return min_distance\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1102,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,a=map(int,input().split())\n    t=list(map(int,input().split())\n    count=0\n    for i in range(n):\n        if t[i]==1:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1103,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    cards = list(map(int, input().split()))\n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1104,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split())\n    if n == 2:\n        if a[0] | b[0] == 3 and a[1] | b[1] == 3:\n            return \"YES\\n1 3\"\n        else:\n            return \"NO\"\n    else:\n        for i in range(4):\n            for j in range(4):\n                if a[0] | b[0] == i and a[1] | b[1] == j:\n                    if i | j == a[1] and i & j == b[1]:\n                        return \"YES\\n\" + \" \".join(map(str, [i, j, a[1], b[1]])\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1105,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x, k = map(int, input().split())\n    prev_x = x\n    prev_k = k\n    for i in range(1, len(input_string)):\n        x, k = map(int, input().split())\n        if x < prev_x or (x == prev_x and k >= prev_k):\n            return \"NO\"\n        prev_x = x\n        prev_k = k\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1106,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = 2**(int(input())+1)-1;\n    a = list(map(int,input_string.split()))\n    total_lights = sum(a)\n    return total_lights//2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1107,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    b=list(input())\n    b=list(map(int,b))\n    b.append(b[0])\n    b.pop(0)\n    count=0\n    for i in range(len(b)):\n        if b[i]==b[i-1]:\n            count+=1\n        else:\n            count=0\n        if count==3:\n            return 1\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1108,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print(sum((lambda x: x[0] + 2 <= x[1])(list(map(int, input().split()))) for x in range(int(input()))))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1109,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R = lambda: map(int, input().split())\n    n, k = R()\n    a = list(R())\n    if n % k != 0:\n        return \"Not possible\"\n    else:\n        b = a[:k]\n        count = 0\n        for i in range(k, n, k):\n            if a[i:i+k] != b:\n                count += 1\n        return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1110,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return 7\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1111,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    rd = lambda: list(map(int, input().split()))\n    n, k = rd()\n    w = rd()\n    mod = 10**9 + 7\n    total = 0\n    for i in range(1, k+1):\n        total += (n-i+1) * sum(w) * i\n    return total % mod\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1112,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=[list(map(int,input().split())) for i in range(3)]\n    b=[list(map(int,input().split())) for i in range(3)]\n    c=[list(map(int,input().split())) for i in range(3)]\n    for i in range(3):\n        if a[i][i]==0:\n            a[i][i]=1\n            break\n    for i in range(3):\n        if b[i][2-i]==0:\n            b[i][2-i]=1\n            break\n    for i in range(3):\n        if c[2-i][i]==0:\n            c[2-i][i]=1\n            break\n    for i in range(3):\n        for j in range(3):\n            if a[i][j]==0:\n                a[i][j]=1\n                break\n            if b[i][j]==0:\n                b[i][j]=1\n                break\n            if c[i][j]==0:\n                c[i][j]=1\n                break\n    for i in range(3):\n        for j in range(3):\n            if a[i][j]==1 and b[i][j]==1 and c[i][j]==1:\n                a[i][j]=10**5\n                b[i][j]=10**5\n                c[i][j]=10**5\n                break\n    for i in range(3):\n        for j in range(3):\n            if a[i][j]==1 and b[i][j]==1 and c[i][j]==1:\n                a[i][j]=10**5\n                b[i][j]=10**5\n                c[i][j]=10**5\n                break\n    for i in range(3):\n        for j in range(3):\n            if a[i][j]==1 and b[i][j]==1 and c[i][j]==1:\n                a[i][j]=10**5\n                b[i][j]=10**5\n                c[i][j]=10**5\n                break\n    for i in range(3):\n        for j in",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1113,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    for i in range(n):\n        if i==0:\n            mex=0\n            continue\n        else:\n            mex=min(a)\n            while mex in a:\n                mex+=1\n            a.append(mex)\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1114,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = [int(i) for i in input().split()]\n    f = [int(i) for i in input().split()]\n    b = [int(i) for i in input().split()]\n    a = []\n    for i in range(n):\n        if f.count(i+1) == 1 and b.count(i+1) == 1:\n            a.append(i+1)\n    if len(a) == 1:\n        print(\"Possible\")\n        print(\" \".join(map(str, a))\n    elif len(a) == 0:\n        print(\"Impossible\")\n    else:\n        print(\"Ambiguity\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1115,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R=lambda:list(map(int,input().split()))\n    n,a=R()\n    m=R()[0]\n    l,r=[],[]\n    for i in range(m):\n        l.append(R()[0])\n        r.append(R()[0])\n    l,r=sorted(l),sorted(r)\n    ans=0\n    for i in range(n):\n        ans+=a[i]\n        while l and l[0]<=ans:\n            l.pop(0)\n            r.pop(0)\n        if not l:\n            break\n        ans=max(ans,r[0])\n    return ans if ans>=r[-1] else -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1116,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        r, b, k = map(int, input().split())\n        if r == b:\n            print(\"REBEL\")\n        elif r % 2 == 0 and b % 2 == 0:\n            print(\"REBEL\")\n        elif r % 2 == 0:\n            print(\"OBEY\")\n        elif b % 2 == 0:\n            print(\"OBEY\")\n        else:\n            print(\"REBEL\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1117,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    rectangles = []\n    for i in range(n):\n        w, h = map(int, input().split())\n        rectangles.append((w, h)\n    rectangles.sort(key=lambda x: x[1])\n    for i in range(n-1):\n        if rectangles[i][1] >= rectangles[i+1][1]:\n            return \"NO\"\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1118,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    colors = list(map(int, input().split()))\n    colors_set = set(colors)\n    min_turns = len(colors_set)\n    for color in colors_set:\n        current_turns = 0\n        current_color = color\n        for i in range(n):\n            if colors[i] == current_color:\n                current_turns += 1\n            else:\n                min_turns = min(min_turns, current_turns)\n                current_color = colors[i]\n                current_turns = 1\n        min_turns = min(min_turns, current_turns)\n    return min_turns\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1119,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k, a, b = map(int, input().split())\n    p = a / (a + b)\n    q = b / (a + b)\n    return p * q * k\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1120,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=int(input()),0\n    while n>0:\n        if n%10==0:\n            n-=1\n        else:\n            n-=n%10\n        k+=1\n    return k\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1121,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=list(map(int,input().split()))\n    if n==1:\n        for i in range(m):\n            print(\"A\",end=\"\")\n        print()\n        return\n    if m==1:\n        for i in range(n):\n            print(\"A\",end=\"\")\n        print()\n        return\n    if n==2:\n        for i in range(m):\n            print(\"A\",end=\"\")\n        print(\"B\")\n        for i in range(m):\n            print(\"B\",end=\"\")\n        print()\n        return\n    if n==3:\n        print(\"AAA\")\n        print(\"ABA\")\n        print(\"AAA\")\n        return\n    if n==4:\n        print(\"AAAB\")\n        print(\"AAAC\")\n        print(\"AAAB\")\n        return\n    if n==5:\n        print(\"AAAB\")\n        print(\"AAAC\")\n        print(\"AAAD\")\n        print(\"AAAB\")\n        return\n    if n==6:\n        print(\"AAAB\")\n        print(\"AAAC\")\n        print(\"AAAD\")\n        print(\"AAAE\")\n        print(\"AAAB\")\n        return\n    if n==7:\n        print(\"AAAB\")\n        print(\"AAAC\")\n        print(\"AAAD\")\n        print(\"AAAE\")\n        print(\"AAAF\")\n        print(\"AAAB\")\n        return\n    if n==8:\n        print(\"AAAB\")\n        print(\"AAAC\")\n        print(\"AAAD\")\n        print(\"AAAE\")\n        print(\"AAAG\")\n        print(\"AAAB\")\n        return\n    if n==9:\n        print(\"AAAB\")\n        print(\"AAAC\")\n        print(\"AAAD\")\n        print(\"AAAE\")\n        print(\"AAAF\")\n        print(\"AAAG\")\n        print(\"AAAB\")\n        return\n    if n==10:\n        print(\"AAAB\")\n        print(\"AAAC\")\n        print(\"AAAD\")\n        print(\"AAAE\")\n        print(\"AAAF\")\n        print(\"AAAG\")\n        print(\"AAAH\")\n        return\n    if n==11:\n        print(\"AAAB\")\n        print(\"AAAC\")\n        print",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1122,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    players = list(range(1, n+1))\n    fields = []\n    for i in range(m):\n        fields.append([i+1, n+i+1])\n    for i in range(n):\n        if i % 2 == 0:\n            fields.append([i+1, n+i+2])\n        else:\n            fields.append([n+i+2, i+1])\n    for i in range(m):\n        print(fields[i][0], fields[i][1])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1123,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    ans=0\n    for i in range(1,k+1):\n        for j in range(1,k+1):\n            for l in range(1,k+1):\n                ans+=gcd(i,j,l)\n    return ans%(10**9+7)\ndef gcd(a,b,c):\n    return gcd(gcd(a,gcd(b,c))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1124,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    for i in map(int,input().split()):a=math.gcd(a,i)\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1125,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    stones=list(map(int,input_string.split()))\n    if n==1:\n        return 0\n    elif n==2:\n        return max(0,min(stones[0]-1,stones[1]))\n    else:\n        stones[0]=max(0,stones[0]-1)\n        stones[1]=max(0,stones[1]-1)\n        stones[0]=min(stones[0],stones[1])\n        stones[1]=min(stones[1],stones[0])\n        return max(stones[0],stones[1])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1126,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,x,m=map(int,input().split());l,k,i,j=[-1]*m,[],0,-1\n    while k<n:\n        i+=1\n        if i==m:i=0\n        if l[i]==-1:l[i]=x%m\n        else:x=l[i]**2\n        k+=1\n        j=x%m\n        if j in l:return sum(l[:l.index(j)+1])\n        l[i]=j\n    return sum(l)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1127,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    for i in range(n):\n        if i%2==0:\n            print(2)\n        else:\n            print(1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1128,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,m = map(int,input().split())\n    if a%m == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1129,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    x=list(map(int,input().split())\n    x.sort()\n    return x[n//2]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1130,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R = lambda: map(int, input().split())\n    n, m, k = R()\n    timetable = [list(map(int, input().strip())) for _ in range(n)]\n    total_hours = 0\n    for day in timetable:\n        hours = 0\n        for i in range(m):\n            if day[i] == 1:\n                hours += 1\n        total_hours += hours\n    if k >= total_hours:\n        return total_hours\n    else:\n        return total_hours - k\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1131,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b, w, x, c = list(map(int, input().split()))\n    if c <= a:\n        return 0\n    if b >= x:\n        return (c - a) // (x - b)\n    else:\n        return (c - a) // (w - x) + (c - a) % (w - x) // (x - b) + 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1132,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=input().split()\n    n=int(n)\n    m=int(m)\n    edges=[]\n    for i in range(m):\n        x,y=input().split()\n        edges.append((int(x),int(y)))\n    # Write your code here\n    return \"unknown topology\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1133,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    words = []\n    for i in range(n):\n        words.append(input())\n    max_length = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if len(set(words[i]+words[j]+words[k]) <= 2:\n                    max_length = max(max_length, len(words[i]+words[j]+words[k]))\n    return max_length\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1134,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    marks=list(map(int,input().split()))\n    d=[0]*n\n    for i in range(1,n):\n        d[i]=marks[i-1]-marks[i]\n    return sum(d)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1135,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    decoded_string = \"\"\n    while len(s) > 0:\n        if len(s) % 2 == 0:\n            median_index = len(s) // 2 - 1\n        else:\n            median_index = len(s) // 2\n        decoded_string += s[median_index]\n        s = s[:median_index] + s[median_index+1:]\n    return decoded_string\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1136,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, M = map( int, input().split() )\n    s = 0\n    for i in range(1, M+1):\n        s += N % i\n    return s % (10**9 + 7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1137,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k = map(int, input().split())\n    s = input()\n    t = input()\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1138,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=list(input())\n    count=0\n    x=0\n    y=0\n    for i in s:\n        if i=='L':\n            x-=1\n        elif i=='R':\n            x+=1\n        elif i=='U':\n            y+=1\n        else:\n            y-=1\n    if x==0 and y==0:\n        return count\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1139,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    intervals = []\n    for i in range(n):\n        k = int(input())\n        row = []\n        for j in range(k):\n            l, r = map(int, input().split())\n            row.append((l, r))\n        intervals.append(row)\n    \n    # Your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1140,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    flowers = list(map(int, input().split()))\n    flowers.sort(reverse=True)\n    max_diff = 0\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = flowers[i] - flowers[j]\n            if diff > max_diff:\n                max_diff = diff\n                count = 1\n            elif diff == max_diff:\n                count += 1\n    return max_diff, count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1141,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=list(map(int,input().split()))\n    s=input()\n    for i in range(m):\n        l,r,c1,c2=list(map(input().split())\n        l=int(l)-1\n        r=int(r)-1\n        s=s[:l]+c2*(r-l+1)+s[r+1:]\n    return s\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1142,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    waves = []\n    for i in range(n):\n        l, r, a = list(map(int, input().split())\n        waves.append((l, r, a))\n    waves.sort(key=lambda x: x[0])\n    bullets_spent = 0\n    bullets_left = k\n    for i in range(n):\n        if bullets_left < waves[i][2]:\n            return -1\n        bullets_spent += waves[i][2]\n        bullets_left = k - waves[i][2]\n    return bullets_spent\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1143,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    olympiads = []\n    for i in range(n):\n        olympiad = list(map(int, input().split()))\n        olympiads.append(olympiad)\n    olympiads.sort()\n    jury_size = 0\n    for olympiad in olympiads:\n        jury_size = max(jury_size, olympiad[2])\n    return jury_size\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1144,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input()); s = input(); m = int(input())\n    t = input()\n    s = list(s)\n    count = 0\n    for i in range(n-m+1):\n        if s[i:i+m] == t:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1145,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    factors = list(map(int, input().split()))\n    factors.sort()\n    coins = 0\n    for i in range(n):\n        if factors[i] != factors[i-1]:\n            coins += factors[i] - factors[i-1] - 1\n    return coins\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1146,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = [int(x) for x in input().split()]\n    bulbs = [0] * (m+1)\n    for i in range(n):\n        x, *lights = [int(x) for x in input().split()]\n        for light in lights:\n            bulbs[light] += 1\n    if sum(bulbs) == m:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1147,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R=lambda:list(map(int,input().split()))\n    n,x,k=R()\n    a=R()\n    ans=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if a[i]<=a[j]:\n                count=0\n                for y in range(i,j+1):\n                    if a[y]%x==0:\n                        count+=1\n                if count==k:\n                    ans+=1\n    print(ans)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1148,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    max_squares=0\n    for i in range(n):\n        max_squares+=a[i]\n    return max_squares\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1149,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    x_levels = list(map(int, input().split()))\n    y_levels = list(map(int, input().split())\n    x_levels = set(x_levels)\n    y_levels = set(y_levels)\n    if len(x_levels) + len(y_levels) == n:\n        return \"I become the guy.\"\n    else:\n        return \"Oh, my keyboard!\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1150,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    p = [list(map(int, input().split())) for j in range(4)]\n    n = int(input())\n    result = []\n    for i in range(n):\n        p = [list(map(int, input().split())) for j in range(4)]\n        x = [p[j][0] for j in range(4)]\n        y = [p[j][1] for j in range(4)]\n        a = [p[j][2] for j in range(4)]\n        b = [p[j][3] for j in range(4)]\n        if len(set(x)) == 1 and len(set(y)) == 1:\n            result.append(0)\n        elif len(set(x)) == 2 and len(set(y)) == 2:\n            result.append(1)\n        else:\n            result.append(-1)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1151,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    energies=list(map(int,input().split())\n    for i in range(n):\n        if energies[i]>m:\n            return -1\n    for i in range(n-2):\n        for j in range(i+1,n-1):\n            for k in range(j+1,n):\n                if energies[k]-energies[i]<=m:\n                    return (energies[k]-energies[j])/(energies[k]-energies[i])\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1152,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    inp = input()\n    n, m = map(int, inp.split())\n    A = []\n    for i in range(n):\n        A.append(list(map(int, input().split()))\n    B = []\n    for i in range(n):\n        B.append(list(map(int, input().split()))\n    return \"Yes\" if A == B else \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1153,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = [int(x) for x in input().split()]\n    x = [int(x) for x in input().split()]\n    y = [int(x) for x in input().split()]\n    x_sum = sum(x)\n    y_sum = sum(y)\n    if x_sum != y_sum:\n        return 0\n    x_index = 0\n    y_index = 0\n    files = 0\n    while x_index < n and y_index < m:\n        if x[x_index] == y[y_index]:\n            files += 1\n            x_index += 1\n            y_index += 1\n        elif x[x_index] < y[y_index]:\n            x_index += 1\n        else:\n            y_index += 1\n    return files\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1154,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,h,k=map(int,input().split())\n    a=list(map(int,input().split())\n    time=0\n    for i in range(n):\n        if a[i]>h:\n            time+=a[i]//h\n        else:\n            time+=1\n    return time\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1155,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int, input().split())\n    prices=[]\n    for i in range(n):\n        a,b=map(int, input().split())\n        prices.append(a/b)\n    return min(prices)*m\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1156,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(input_string)\n    l = 0\n    r = 0\n    for i in range(n):\n        if b[i] == '1':\n            if a[i] > r:\n                r = max(r, a[i])\n            if a[i] < l:\n                l = min(l, a[i])\n    return l, r\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1157,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input_string.split()))\n    negative = 0\n    positive = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            product = 1\n            for k in range(i, j):\n                product *= a[k]\n            if product < 0:\n                negative += 1\n            elif product > 0:\n                positive += 1\n    return negative, positive\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1158,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    utensils = list(map(int, input().split()))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1159,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n < 3 or n > 1000:\n        return -1\n    for i in range(2, n):\n        if n % i == 0:\n            return -1\n    for j in range(2, n):\n        if n * (n - 1) % j == 0:\n            return -1\n    for k in range(2, n):\n        if n * (n - 1) // 2 % k == 0:\n            return -1\n    m = 0\n    for l in range(2, n):\n        if n * (n - 1) % l == 0:\n            m = l\n            break\n    if m == 0:\n        return -1\n    print(m)\n    for i in range(1, n):\n        for j in range(i + 1, n + 1):\n            print(i, j)\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1160,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    cnt=[int(t) for t in input().split()]\n    n=int(input())\n    shirts=[]\n    for i in range(n):\n        shirts.append(input().split(','))\n    total=sum(cnt)\n    for i in range(n):\n        if len(shirts[i])==1:\n            if cnt[ord(shirts[i][0])-ord('S')]>0:\n                cnt[ord(shirts[i][0])-ord('S')]-=1\n            else:\n                return \"NO\"\n        else:\n            if cnt[ord(shirts[i][0])-ord('S')]>0 and cnt[ord(shirts[i][1])-ord('S')]>0:\n                cnt[ord(shirts[i][0])-ord('S')]-=1\n                cnt[ord(shirts[i][1])-ord('S')]-=1\n            else:\n                return \"NO\"\n    if sum(cnt)>0:\n        return \"NO\"\n    else:\n        return \"YES\"+\"\\n\"+\"\\n\".join(shirts)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1161,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=input()\n    stack=[]\n    for i in a:\n        if i in ['{','<','(']:\n            stack.append(i)\n        elif i in ['}',')',']']:\n            if not stack:\n                return \"Impossible\"\n            elif i=='}' and stack[-1]=='{':\n                stack.pop()\n            elif i==')' and stack[-1]=='(':\n                stack.pop()\n            elif i==']' and stack[-1]=='[':\n                stack.pop()\n            elif i=='>' and stack[-1]=='<':\n                stack.pop()\n            else:\n                return \"Impossible\"\n    return len(stack)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1162,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    p, s, r= list(map(int, input().split()))\n    if p == 1:\n        return 1\n    elif p == 2:\n        if r == 0:\n            return 0\n        elif r == 1:\n            return 1\n        else:\n            return (s-r)//2\n    else:\n        if r == 0:\n            return 0\n        elif r == 1:\n            return 1\n        else:\n            return (s-r)//(p-1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1163,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    result = \"\"\n    for i in range(n+m):\n        if i % 2 == 0:\n            result += \"B\"\n        else:\n            result += \"G\"\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1164,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    c=str(input())\n    total=0\n    for i in range(0,len(c),3):\n        if c[i]!='.':\n            total+=int(c[i])\n            if i+1<len(c) and c[i+1]!='.':\n                total+=int(c[i+1])*10\n            if i+2<len(c) and c[i+2]!='.':\n                total+=int(c[i+2])*100\n            if i+3<len(c) and c[i+3]!='.':\n                total+=int(c[i+3])*1000\n    if c[-1]!='.':\n        total+=int(c[-1])\n    if c[-2]!='.':\n        total+=int(c[-2])*0.1\n    if c[-3]!='.':\n        total+=int(c[-3])*0.01\n    return str(total)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1165,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = tuple(map(int, input().split()))\n    a = list(map(int, input().split()))\n    for i in range(m):\n        l, r, x = tuple(map(int, input().split())\n        p = -1\n        for j in range(l, r+1):\n            if a[j] != x:\n                p = j\n                break\n        print(p)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1166,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    s=\"\"\n    for i in range(n):\n        if i==0:\n            s+=\"A\"\n        else:\n            if a[i]%a[i-1]==0 and a[i]>a[i-1]:\n                s+=\"B\"\n            else:\n                s+=\"A\"\n    return s\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1167,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b, c, d, k = map(int, input().split())\n    if c + d > k:\n        print(-1)\n    else:\n        x = min(c, k)\n        y = k - x\n        print(x, y)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1168,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    heights = list(map(int, input_string.split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (i | j) > max(heights[i:j+1]):\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1169,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=list(map(int,input().split()))\n    min_isolated=0\n    max_isolated=n\n    if n==1:\n        min_isolated=1\n        max_isolated=1\n    elif n==2:\n        min_isolated=1\n        max_isolated=1\n    elif n==3:\n        min_isolated=1\n        max_isolated=1\n    elif n==4:\n        min_isolated=0\n        max_isolated=1\n    else:\n        min_isolated=0\n        max_isolated=n-1\n    print(min_isolated,max_isolated)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1170,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        x = int(input())\n        if x == 0:\n            print(\"1 1\")\n        elif x == 1:\n            print(\"2 1\")\n        else:\n            print(\"-1\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1171,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,K = map(int,input().split())\n    V = list(map(int,input().split())\n    max_sum = 0\n    for i in range(K):\n        # Your code here\n    return max_sum\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1172,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    for s in input():D=[(D[j]*((s==\\\"?\\\")*2+1)+D[j+1]*(s in t+\\\"?\\\"))%(10**9+7) for j,t in enumerate(\\\"CBA.\\\")]+[0]\n    return sum(D)%(10**9+7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1173,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    A=[]\n    for i in range(N):\n        A.append(list(map(int,input().split()))\n    days=1\n    for i in range(N):\n        for j in range(N-1):\n            if A[i][j] in A[i][j+1:]:\n                return -1\n    for i in range(N):\n        for j in range(N-1):\n            for k in range(j+1,N):\n                if A[i][j]==A[i][k]:\n                    return -1\n    for i in range(N):\n        for j in range(N-1):\n            for k in range(j+1,N):\n                if A[i][j]==A[A[i][j]:\n                    days+=1\n    return days\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1174,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    a=list(map(int,input().split())\n    a.sort(reverse=True)\n    total=0\n    for i in range(n):\n        if m>0:\n            total+=a[i]//(2**m)\n            m-=1\n        else:\n            total+=a[i]\n    return total\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1175,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    L, R = map(int, input().split())\n    count = 0\n    for x in range(L, R+1):\n        for y in range(x, R+1):\n            if y ^ x == y:\n                count += 1\n    return count % (10**9 + 7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1176,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    arr=list(map(int,input_string.split()))\n    max_sum=0\n    for i in range(n-1):\n        if arr[i]<0 and arr[i+1]<0:\n            arr[i]*=-1\n            arr[i+1]*=-1\n            max_sum+=arr[i]+arr[i+1]\n        elif arr[i]>0 and arr[i+1]>0:\n            arr[i]*=-1\n            arr[i+1]*=-1\n            max_sum+=arr[i]+arr[i+1]\n        elif arr[i]<0:\n            arr[i]*=-1\n            max_sum+=arr[i]\n        elif arr[i+1]<0:\n            arr[i+1]*=-1\n            max_sum+=arr[i+1]\n    return max_sum\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1177,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,s=map(int,input().split())\n    a=list(map(int,input().split())\n    mod=998244353\n    ans=0\n    for i in range(1,n+1):\n        for j in range(i+1,n+1):\n            count=0\n            for k in range(i,j+1):\n                if sum(a[i:j])==s:\n                    count+=1\n            ans=(ans+count)%mod\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1178,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    h = list(map(int, input().split())\n    min_ops = 0\n    for i in range(n):\n        if h[i] == 0:\n            continue\n        min_ops += 1\n        h[i] -= 1\n        for j in range(k):\n            if i+j < n and h[i+j] > 0:\n                h[i+j] -= 1\n                min_ops += 1\n    return min_ops\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1179,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    ids = list(map(int, input().split())\n    ids.sort()\n    for i in range(n):\n        if k <= ids[i]:\n            return ids[i]\n        k -= ids[i]\n    return ids[-1]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1180,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    string = input()\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1181,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    min_turns = 0\n    for i in range(1, m):\n        min_turns += abs(a[i] - a[i-1])\n    return min_turns\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1182,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r, c, n, k = map(int, input().split())\n    violas = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        violas.append((x, y))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1183,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n,x=map(int,input().split())\n        a=list(map(int,input().split())\n        v=max(a)\n        if x>n:\n            print(v)\n        else:\n            for i in range(v,v+x):\n                if i not in a:\n                    print(v)\n                    break\n            else:\n                print(v+x)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1184,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print(len(set(s for s in input()[1:-1].split(\\\", \\\") if s != \\\"\\\")))\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1185,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k=map(int,input().split())\n    p=list(map(int,input().split())\n    max_sum=0\n    for i in range(n-m+1):\n        for j in range(i+1,n-m+2):\n            temp_sum=sum(p[i:j])\n            if temp_sum>max_sum:\n                max_sum=temp_sum\n    return max_sum\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1186,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n == 1:\n        return \"NO\"\n    elif n == 2:\n        return \"NO\"\n    elif n == 3:\n        return \"NO\"\n    else:\n        p = [0] * n\n        q = [0] * n\n        for i in range(n):\n            p[i] = i + 1\n            q[i] = i + 1\n        p[0] = 0\n        q[n-1] = 0\n        for i in range(1, n-1):\n            q[i] = i + 1\n        return \"YES\\n\" + \" \".join(map(str, p)) + \"\\n\" + \" \".join(map(str, q))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1187,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    edges = []\n    for _ in range(m):\n        u, v = map(int, input().split())\n        edges.append((u, v))\n    return 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1188,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    input_list = list(map(int, input().split()))\n    input_list.sort()\n    result = set()\n    for i in range(n):\n        for j in range(i+1, n):\n            if input_list[j] - input_list[i] <= 2**(j-i):\n                result.add(j-i+1)\n            else:\n                break\n    if len(result) == 0:\n        print(-1)\n    else:\n        result = sorted(list(result)\n        print(*result)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1189,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b = input().split()\n    a,b = int(a),int(b)\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1190,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    w1,h1,w2,h2=[int(i) for i in input().split()]\n    if w1<w2:\n        w1,w2=w2,w1\n        h1,h2=h2,h1\n    return (w1*h1)+(w2*(h2-1))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1191,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = [int(x) for x in input().strip().split()]\n    powers = [int(x) for x in input().strip().split()]\n    coins = [int(x) for x in input().strip().split()]\n    result = []\n    for i in range(n):\n        max_coins = 0\n        for j in range(n):\n            if i != j and powers[i] > powers[j]:\n                max_coins += coins[j]\n        result.append(max_coins)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1192,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R = lambda: map(int, input().split())\n    n, k = R()\n    p = list(R())\n    p.sort()\n    inv = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if p[i] > p[j]:\n                inv += 1\n    return inv\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1193,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    speeds = list(map(int, input().split()))\n    speeds.sort(reverse=True)\n    max_speed = speeds[0]\n    for i in range(k):\n        max_speed = min(max_speed, speeds[i])\n    return max_speed\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1194,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    p = list(map(int, input().split()))\n    q = list(map(int, input().split())\n    p_ord = 0\n    q_ord = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if p[i] < p[j]:\n                p_ord += 1\n            if q[i] < q[j]:\n                q_ord += 1\n    return p_ord, q_ord\n    # Your code goes here\n    # Calculate the lexicographical order of p and q\n    # Then calculate the sum of their lexicographical order and find the k-th permutation\n    # Return the sum of p and q\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1195,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=list(map(int,input().split()))\n    a.sort()\n    return a[-1]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1196,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    t = input_string.split()\n    s = input().split()\n    t_list = []\n    s_list = []\n    for i in range(n):\n        t_list.append((int(t[i].split('-')[0]), t[i].split('-')[1])[1])\n    for i in range(m):\n        s_list.append((int(s[i].split('-')[0]), s[i].split('-')[1])[1])\n    t_str = ''.join(t_list)\n    s_str = ''.join(s_list)\n    count = 0\n    for i in range(len(t_str) - len(s_str) + 1):\n        if t_str[i:i+len(s_str)] == s_str:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1197,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    n=len(s)\n    dp=[[0 for i in range(n+1)] for j in range(n+1)]\n    dp[0][0]=1\n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            if s[i-1]=='*':\n                dp[i][j]=0\n            elif s[i-1]=='?':\n                dp[i][j]=dp[i-1][j]+dp[i][j-1]+dp[i-1][j-1]\n            else:\n                dp[i][j]=dp[i-1][j]\n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            if s[j-1]=='*':\n                dp[i][j]=0\n            elif s[j-1]=='?':\n                dp[i][j]=dp[i][j-1]+dp[i-1][j]+dp[i-1][j-1]\n            else:\n                dp[i][j]=dp[i][j-1]\n    return dp[n][n]%1000000007\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1198,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: map(int, input().split())\n    n, c = f()\n    a = list(f())\n    a.sort()\n    return sum(a[-c:])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1199,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    c = list(map(int, input().split()))\n    max_children = 0\n    for i in range(1, m+1):\n        for j in range(1, m+1):\n            if i != j:\n                count = 0\n                for k in range(n):\n                    if c[k] == i or c[k] == j:\n                        count += 1\n                if count > max_children:\n                    max_children = count\n                    left_color = i\n                    right_color = j\n    print(max_children)\n    for k in range(n):\n        if c[k] == left_color:\n            print(right_color, c[k])\n        else:\n            print(c[k], left_color)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1200,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    points = list(map(int, input().split()))\n    points.sort()\n    min_distance = float('inf')\n    for i in range(1, n):\n        min_distance = min(min_distance, points[i] - points[i-1])\n    m = 0\n    while min_distance > 0:\n        m += 1\n        min_distance //= 2\n    return m\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1201,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    q = [list(map(int, input().split())) + [str(i + 1)] for i in range(int(input()))]\n    q.sort(key=lambda x: x[2], reverse=True)\n    total_time = 0\n    saved_items = []\n    for item in q:\n        if item[0] >= total_time:\n            total_time += item[0]\n            saved_items.append(item[3])\n    print(sum(item[2] for item in saved_items))\n    print(len(saved_items))\n    print(\" \".join(saved_items))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1202,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = []\n    b = []\n    for i in range(n):\n        a_i, b_i = map(int, input().split())\n        a.append(a_i)\n        b.append(b_i)\n    a.sort()\n    b.sort()\n    k = 0\n    while k < n and a[k] < b[n-k-1]:\n        k += 1\n    if k == 0:\n        return \"1\"*n + \"0\"*n\n    elif k == n:\n        return \"0\"*n + \"1\"*n\n    else:\n        return \"1\"*k + \"0\"*(n-k) + \"1\"*(n-k)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1203,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    h,l=map(int,input().split())\n    return (h*l)/(l-h)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1204,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    fighters = []\n    for i in range(n):\n        p, e = list(map(int, input().split()))\n        fighters.append((p, e))\n    fighters.sort(key=lambda x: x[0], reverse=True)\n    total_effort = 0\n    for i in range(k-1):\n        if i >= len(fighters):\n            return -1\n        total_effort += fighters[i][1]\n    return total_effort\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1205,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    points = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        points.append((x, y))\n    pass\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1206,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    d = [list(map(int, input().split())) for i in range(int(input()))]\n    L = [x[0] for x in d]\n    R = [x[1] for x in d]\n    n = len(d)\n    total = 0\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                total += (R[i] + L[j]) / 2\n    return total / (n*(n-1) * n)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1207,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = [int(i) for i in input().split()]\n    robots = [i for i in range(1, n+1)]\n    relations = []\n    for i in range(m):\n        u, v = [int(i) for i in input().split()]\n        relations.append((u, v))\n    # Your code goes here\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1208,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    input_list=input_string.split('\\n')\n    count=0\n    max_count=0\n    for i in input_list:\n        if i[0]=='+':\n            count+=1\n            max_count=max(max_count,count)\n        else:\n            count-=1\n    return max_count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1209,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=[]\n    for i in range(n):\n        a.append(float(input())\n    b=[]\n    for i in range(n):\n        if a[i]<0:\n            b.append(int(a[i])-1)\n        else:\n            b.append(int(a[i])\n    return b\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1210,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    sharks=[]\n    for i in range(n):\n        l,r=map(int,input().split())\n        sharks.append((l,r))\n    total=0\n    for i in range(n):\n        for j in range(i+1,n):\n            for s_i in range(sharks[i][0],sharks[i][1]+1):\n                for s_j in range(sharks[j][0],sharks[j][1]+1):\n                    if s_i*s_j%m==0:\n                        total+=200\n    return total/((n*(n-1))/2)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1211,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    a = list(map(int, input().split())\n    max_hamsters = 0\n    box_type = 0\n    boxes_count = 0\n    for i in range(k):\n        if n % a[i] == 0:\n            boxes_count = n // a[i]\n            max_hamsters = n\n            box_type = i + 1\n        elif n > a[i]:\n            boxes_count = n // a[i] + 1\n            max_hamsters = boxes_count * a[i]\n            box_type = i + 1\n        else:\n            boxes_count = 1\n            max_hamsters = n\n    print(box_type, boxes_count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1212,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    h = list(map(int, input().split()))\n    min_sum = float('inf')\n    min_index = 0\n    for i in range(n - k + 1):\n        current_sum = sum(h[i:i+k])\n        if current_sum < min_sum:\n            min_sum = current_sum\n            min_index = i\n    return min_index\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1213,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()));\n    slogan = input()\n    ladder_pos = k\n    actions = []\n    for i in range(n):\n        if i == 0:\n            actions.append(\"PRINT \" + slogan[i])\n        elif i == n-1:\n            actions.append(\"LEFT\" * (n-1))\n            actions.append(\"PRINT \" + slogan[i])\n        else:\n            if ladder_pos == i:\n                actions.append(\"PRINT \" + slogan[i])\n            elif ladder_pos < i:\n                actions.append(\"RIGHT\" * (i-ladder_pos))\n                actions.append(\"PRINT \" + slogan[i])\n                actions.append(\"LEFT\" * (n-i-1))\n            else:\n                actions.append(\"LEFT\" * (ladder_pos-i))\n                actions.append(\"PRINT \" + slogan[i])\n                actions.append(\"RIGHT\" * (n-i-1))\n            ladder_pos = i\n    return actions\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1214,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    x=list(map(int,input().split())\n    if n%2!=0:\n        return \"No\"\n    else:\n        x_odd=[]\n        x_even=[]\n        for i in range(n):\n            if i%2!=0:\n                x_odd.append(x[i])\n            else:\n                x_even.append(x[i])\n        x_even.sort(reverse=True)\n        x_odd.sort(reverse=True)\n        x_even_sum=sum(x_even)\n        x_odd_sum=sum(x_odd)\n        if x_even_sum**0.5!=int(x_even_sum**0.5):\n            return \"No\"\n        else:\n            x_even_sum=int(x_even_sum**0.5)\n        if x_odd_sum**0.5!=int(x_odd_sum**0.5):\n            return \"No\"\n        else:\n            x_odd_sum=int(x_odd_sum**0.5)\n        x_even_sum_list=[]\n        x_odd_sum_list=[]\n        for i in range(1,n+1):\n            if i%2!=0:\n                x_odd_sum_list.append(x_odd_sum)\n            else:\n                x_even_sum_list.append(x_even_sum)\n        x_sum=x_even_sum_list+x_odd_sum_list\n        x_sum.sort()\n        x_sum.reverse()\n        x_sum=x_sum[1:]\n        x_sum.append(x_sum[0])\n        x_sum.reverse()\n        x_sum=x_sum[1:]\n        x_sum.append(x_sum[0])\n        x_sum.reverse()\n        x_sum=x_sum[1:]\n        x_sum.append(x_sum[0])\n        x_sum.reverse()\n        x_sum=x_sum[1:]\n        x_sum.append(x_sum[0])\n        x_sum.reverse()\n       ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1215,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 0\n    elif n == 3:\n        return 1\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 12\n    elif n == 6:\n        return 36\n    elif n == 7:\n        return 120\n    elif n == 8:\n        return 360\n    elif n == 9:\n        return 840\n    elif n == 10:\n        return 2160\n    elif n == 11:\n        return 560\n    elif n == 12:\n        return 1680\n    elif n == 13:\n        return 5040\n    elif n == 14:\n        return 15120\n    elif n == 15:\n        return 46200\n    elif n == 16:\n        return 162000\n    elif n == 17:\n        return 50120\n    elif n == 18:\n        return 158400\n    elif n == 19:\n        return 50560\n    elif n == 20:\n        return 182400\n    elif n == 21:\n        return 58320\n    elif n == 22:\n        return 216000\n    elif n == 23:\n        return 75600\n    elif n == 24:\n        return 259200\n    elif n == 25:\n        return 90040\n    elif n == 26:\n        return 277200\n    elif n == 27:\n        return 97200\n    elif n == 28:\n        return 35280\n    elif n == 29:\n        return 1158400\n    elif n == 30:\n        return 46200\n    elif n == 31",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1216,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = input()\n    s = input()\n    vowels = \"aeiouy\"\n    output_string = \"\"\n    for i in range(len(s)):\n        if s[i] in vowels:\n            if i == 0 or s[i] != s[i-1]:\n                output_string += s[i]\n            elif s[i] == s[i-1] and s[i] != \"e\" and s[i] != \"o\":\n                output_string += s[i]\n            elif s[i] == \"e\" and s[i-1] == \"e\" and i < len(s)-1 and s[i+1] != \"e\":\n                output_string += s[i]\n            elif s[i] == \"o\" and s[i-1] == \"o\" and i < len(s)-1 and s[i+1] != \"o\":\n                output_string += s[i]\n    return output_string\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1217,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    a.sort()\n    result = []\n    for i in b:\n        count = 0\n        for j in a:\n            if j <= i:\n                count += 1\n        result.append(count)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1218,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    if n == 1:\n        return 0\n    if n % k != 0:\n        return -1\n    return n // k\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1219,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,x,y,z,v,w=input(),-9e9,-9e9,-9e9,0,1\n    for i in range(N):\n        x=max(x,int(input()))\n        y=max(y,int(input()))\n        z=min(z,int(input()))\n        v=max(v,x+y+z)\n        w=max(w,x+y-z)\n    return max(v,w)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1220,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    graph = [[0] * (n+1) for _ in range(n+1)]\n    for _ in range(m):\n        x, y = map(int, input().split())\n        graph[x][y] = graph[y][x] = 1\n    visited = [False] * (n+1)\n    count = 0\n    sizes = []\n    for i in range(1, n+1):\n        if not visited[i]:\n            count += 1\n            size = 0\n            queue = [i]\n            while queue:\n                node = queue.pop(0)\n                visited[node] = True\n                size += 1\n                for j in range(1, n+1):\n                    if not visited[j] and graph[node][j]:\n                        queue.append(j)\n            sizes.append(size)\n    sizes.sort()\n    print(count)\n    print(*sizes)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1221,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    a = list(map(int, input().split())\n    b = list(map(int, input().split())\n    a.sort()\n    b.sort(reverse=True)\n    return a[0]*b[0]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1222,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    K = int(input())\n    count = 0\n    num = 1\n    while True:\n        if is_lunlun(num):\n            count += 1\n            if count == K:\n                return num\n        num += 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1223,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    p=list(map(int,input_string.split()))\n    p.sort(reverse=True)\n    ans=0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            ans+=p[i]\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1224,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    for i in range(1,N+1):\n        for j in range(1,N+1):\n            if 3**i+5**j==N:\n                print(i,j)\n                return\n    print(-1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1225,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    H=int(input())\n    count=0\n    while H>0:\n        count+=1\n        if H==1:\n            H=0\n        else:\n            H=H//2\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1226,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,a,b=map(int,input().split())\n    if a==1:\n        return (n*(n-1))%(10**9+7)\n    elif b==1:\n        return (n*(n-1))%(10**9+7)\n    elif a==2:\n        return (n*(n-1)*(n-2)//2)%(10**9+7)\n    elif b==2:\n        return (n*(n-1)*(n-2)//2)%(10**9+7)\n    else:\n        return (n*(n-1)*(n-2)//2)%(10**9+7)-(a-1)*(n-a)*(n-b)%(10**9+7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1227,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    K = int(input())\n    count = 0\n    for i in range(1, N+1):\n        if len(str(i)) == K:\n            count += 1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1228,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n % 4 == 1:\n        return \"0 A\"\n    elif n % 4 == 3:\n        return \"1 B\"\n    elif n % 4 == 2:\n        return \"2 C\"\n    else:\n        return \"0 D\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1229,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1230,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    input_list=list(map(int,input().split())\n    count=0\n    for i in range(n):\n        if input_list[i]==n:\n            count+=1\n    if count==0:\n        print(-1)\n    else:\n        for i in range(count):\n            print(i)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1231,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=list(map(int,input().split()))\n    if a+b==0:\n        return \"NO\"\n    else:\n        return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1232,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    k,m=map(int,input().split())\n    A=list(map(int,input().split())\n    B=list(map(int,input().split())\n    for i in range(len(A)-k):\n        for j in range(len(B)-m):\n            if A[i]<B[j]:\n                return \"YES\"\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1233,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    min_swaps = 0\n    min_pairs = 0\n    for i in range(1, n):\n        if a[i] < a[i-1]:\n            min_swaps += 1\n            min_pairs += i\n    print(min_swaps, min_pairs)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1234,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    total_sum = sum(a[:m])\n    result = total_sum\n    p = [m]\n    for i in range(k-2):\n        total_sum += a[m+i]\n        p.append(m+i+1)\n        result += a[m+i]\n    return result, p\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1235,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn = int(input())\n    A = list(map(int, input().split()))\n    m = int(input())\n    B = list(map(int, input().split())\n    for a in A:\n        for b in B:\n            if a+b not in A and a+b not in B:\n                print(a, b)\n                return\n# End of code\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1236,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: map(int, input().split())\n    n, k = f()\n    a = list(f())\n    total = sum(a)\n    if total % 2 == 0:\n        return \"Stannis\"\n    else:\n        return \"Daenerys\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1237,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    read = lambda: list(map(int, input().split()))\n    n, s = read()\n    passengers = [read() for _ in range(n)]\n    passengers.sort(key=lambda x: x[1])\n    time = 0\n    current_floor = s\n    for p in passengers:\n        time += abs(current_floor - p[0])\n        current_floor = p[0]\n    return time\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1238,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    a.sort()\n    count=0\n    for i in range(1,a[0]):\n        if i not in a:\n            count+=1\n    for i in range(a[-1]+1,a[-1]+n+1):\n        if i not in a:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1239,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    cities = list(map(int, input().split()))\n    cities.sort()\n    min_distance = abs(cities[1] - cities[0])\n    pairs = 1\n    for i in range(1, n-1):\n        if abs(cities[i] - cities[i+1]) < min_distance:\n            min_distance = abs(cities[i] - cities[i+1])\n            pairs = 1\n        elif abs(cities[i] - cities[i+1]) == min_distance:\n            pairs += 1\n    return min_distance, pairs\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1240,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    l_r=input_string.split('\\n')\n    l=[]\n    r=[]\n    for i in range(n):\n        l_r=l_r[i].split()\n        l.append(int(l_r[0])\n        r.append(int(l_r[1])\n    max_beauty=0\n    for i in range(n):\n        beauty=abs(sum(l)-sum(r))\n        if beauty>max_beauty:\n            max_beauty=beauty\n            index=i+1\n    if max_beauty==0:\n        return 0\n    else:\n        return index\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1241,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    a=list(map(int,input().split())\n    max_len=0\n    max_len_index=0\n    current_len=0\n    for i in range(n):\n        if a[i]==1:\n            current_len+=1\n        else:\n            if current_len>max_len:\n                max_len=current_len\n                max_len_index=i\n            current_len=0\n    if current_len>max_len:\n        max_len=current_len\n        max_len_index=n\n    if k>=max_len:\n        for i in range(max_len_index):\n            a[i]=1\n        for i in range(max_len_index+1,n):\n            a[i]=0\n    else:\n        for i in range(max_len_index-k,max_len_index):\n            a[i]=1\n    print(max_len)\n    print(\" \".join(map(str,a))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1242,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    n = len(s)\n    result = [0] * n\n    for i in range(1, n):\n        if s[i] == 'b':\n            result[i] = 1\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1243,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    matches = list(map(int, input().split()))\n    total_matches = sum(matches)\n    min_matches = min(matches)\n    max_matches = max(matches)\n    return (total_matches - min_matches) * n + (max_matches - min_matches)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1244,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    arr=list(map(int,input().split())\n    if len(set(arr))==n:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1245,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    lr = []\n    for i in range(n):\n        l, r = map(int, input().split())\n        lr.append((l, r))\n    stack = []\n    result = []\n    for i in range(n):\n        if not stack:\n            stack.append(i)\n        elif lr[i][0] == lr[stack[-1]][1]:\n            result.append(')')\n            stack.pop()\n        else:\n            stack.append(i)\n    if stack:\n        return \"IMPOSSIBLE\"\n    else:\n        for i in range(n):\n            if lr[i][0] == 1:\n                result.append('(')\n            else:\n                result.append('')\n        return ''.join(result)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1246,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn = int(input())\n    \\toutput = []\n    \\tfor i in range(n):\n    \\t    operation = input_string[i].split()\n    \\t    if operation[0] == \"insert\":\n    \\t        output.append(operation)\n    \\t    elif operation[0] == \"getMin\":\n    \\t        if len(output) == 0:\n    \\t            output.append(operation)\n    \\t        else:\n    \\t            output.append(\"removeMin\")\n    \\t            output.append(operation)\n    \\t    elif operation[0] == \"removeMin\":\n    \\t        if len(output) == 0:\n    \\t            output.append(operation)\n    \\t        else:\n    \\t            output.append(\"insert\")\n    \\t            output.append(output[-1])\n    \\t            output.append(operation)\n    \\t            output.append(\"getMin\")\n    \\t            output.append(output[-2])\n    \\treturn len(output), output\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1247,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input();x=sum(s.count(i)%2for i in s)\n    if x>1:\n        return \"Second\"\n    else:\n        return \"First\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1248,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    d = sorted(map(int, input().split()))\n    return d[0] + d[1] + d[2]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1249,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k, m, s = map(int, input().split())\n    liana = list(map(int, input().split()))\n    schematic = list(map(int, input().split()))\n    schematic_count = Counter(schematic)\n    workpieces = []\n    for i in range(m-k+1):\n        workpiece = liana[i:i+k]\n        workpieces.append(workpiece)\n    for i in range(len(workpieces)-1, -1, -1):\n        if Counter(workpieces[i]) == schematic_count:\n            return 0\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1250,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(n-1):\n        for j in range(i, n-1):\n            if a[j] > a[j+1]:\n                a[j], a[j+1] = a[j+1], a[j]\n    print(*a)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1251,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    min_strokes=0\n    for i in range(n):\n        if i==0:\n            min_strokes+=a[i]\n        else:\n            if a[i]>a[i-1]:\n                min_strokes+=a[i]-a[i-1]\n    return min_strokes\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1252,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, T = map(int, input().split())\n    roads = []\n    for i in range(m):\n        u, v, t = map(int, input().split())\n        roads.append((u, v, t))\n    roads.sort(key=lambda x: x[2])\n    visited = [False] * (n+1)\n    visited[1] = True\n    time = 0\n    showplaces = [1]\n    for road in roads:\n        if not visited[road[1]:\n            visited[road[1]] = True\n            time += road[2]\n            showplaces.append(road[1])\n            if time > T:\n                break\n    return len(showplaces), \" \".join(map(str, showplaces)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1253,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    rd = lambda: list(map(int, input().split()))\n    n, k = rd()\n    a = rd()\n    total_income = sum(a)\n    max_income = total_income\n    for i in range(k):\n        for j in range(n):\n            if a[j] < 0:\n                a[j] *= -1\n                total_income += 2 * a[j]\n                if total_income > max_income:\n                    max_income = total_income\n    return max_income\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1254,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    students = []\n    for i in range(n):\n        s, r = map(int, input().split())\n        students.append((s, r))\n    students.sort(key=lambda x: x[0])\n    students.sort(key=lambda x: x[1], reverse=True)\n    max_sum = 0\n    for i in range(1, m+1):\n        if i in [s for s, r in students]:\n            max_sum += max([r for s, r in students if s == i])\n    if max_sum <= 0:\n        return 0\n    return max_sum\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1255,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = input()\n    n = int(a.split()[0])\n    times = []\n    for i in range(n):\n        h, m = map(int, input().split())\n        times.append(h*60 + m)\n    times.sort()\n    cashes = 1\n    for i in range(1, n):\n        if times[i] - times[i-1] > 1:\n            cashes += 1\n    return cashes\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1256,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = [int(x) for x in input().split('+')]\n    a.sort()\n    return '+'.join(map(str, a))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1257,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    table=[]\n    for i in range(n):\n        row=list(map(int,input().split())\n        table.append(row)\n    print(sum(table[m-1]))\n    for row in table:\n        print(*row)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1258,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    q = []\n    for i in range(n-2):\n        q.append(list(map(int, input().split()))\n    q.sort()\n    p = []\n    for i in range(n):\n        p.append(0)\n    for i in range(n-2):\n        for j in range(n):\n            if q[i][0] == j+1 and q[i][1] == j+2 and q[i][2] == j+3:\n                p[i] = j+1\n                p[i+1] = j+2\n                p[i+2] = j+3\n                break\n    for i in range(n):\n        if p[i] == 0:\n            for j in range(n):\n                if j+1 not in p and j+2 not in p and j+3 not in p:\n                    p[i] = j+1\n                    break\n    return p\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1259,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    graph = [[] for _ in range(n+1)]\n    for _ in range(m):\n        u, v = list(map(int, input().split()))\n        graph[u].append(v)\n        graph[v].append(u)\n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1260,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    max_num = max(a)\n    max_index = a.index(max_num)\n    for i in range(n-1):\n        if a[i] == max_num:\n            print(f\"1 {i+1} {max_index+1}\")\n            a[i] = 0\n            a[max_index] = 0\n            max_num = max(a)\n            max_index = a.index(max_num)\n        else:\n            print(f\"2 {i+1}\")\n            a[i] = 0\n    print(f\"1 {max_index+1} {n}\")\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1261,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1, 2\n    else:\n        result = []\n        for i in range(n, 1, -1):\n            gcd = 1\n            for j in range(1, i+1):\n                gcd = gcd(gcd, j)\n            result.append(gcd)\n        return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1262,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    cities=[]\n    for i in range(n):\n        x,y=map(int,input().split())\n        cities.append((x,y))\n    c=list(map(int,input().split())\n    k=list(map(int,input().split())\n    min_cost=float('inf')\n    min_cities=[]\n    min_connections=[]\n    for i in range(2**n):\n        cities_to_build=[]\n        connections=[]\n        for j in range(n):\n            if i&(1<<j):\n                cities_to_build.append(j+1)\n        for j in range(n):\n            for k in range(j+1,n):\n                if i&(1<<j) and i&(1<<k):\n                    connections.append((j+1,k+1))\n        cost=0\n        for city in cities_to_build:\n            cost+=c[city-1]\n        for connection in connections:\n            cost+=k[connection[0]-1]+k[connection[1]-1]*abs(cities[connection[0-1][0]-cities[connection[1-1][0])+abs(cities[connection[0-1][1]-cities[connection[1-1][1])]\n        if cost<min_cost:\n            min_cost=cost\n            min_cities=cities_to_build\n            min_connections=connections\n    print(min_cost)\n    print(len(min_cities))\n    print(*min_cities)\n    print(len(min_connections))\n    for connection in min_connections:\n        print(*connection)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1263,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    a = list(map(int, input().split())\n    b = list(map(int, input().split())\n    if n == 1:\n        return max(a)\n    else:\n        a.sort(reverse=True)\n        b.sort(reverse=True)\n        for i in range(n):\n            if a[i] / b[i] >= k:\n                return a[i]\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1264,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input_string.split()))\n    max_ones = 0\n    for i in range(n):\n        for j in range(i, n):\n            a[i:j+1] = [1-x for x in a[i:j+1]]\n            max_ones = max(max_ones, a.count(1))\n            a[i:j+1] = [1-x for x in a[i:j+1]]\n    return max_ones\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1265,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = input()\n    b = input()\n    if len(a) != len(b):\n        return \"NO\"\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            return \"YES\"\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1266,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    x,y=map(int,input().split())\n    pieces=[]\n    for i in range(n):\n        piece,x1,y1=input().split()\n        pieces.append((piece,int(x1),int(y1)))\n    for piece in pieces:\n        if piece[0]=='B':\n            if abs(piece[1]-x)==abs(piece[2]-y):\n                return \"YES\"\n        elif piece[0]=='R':\n            if piece[1]==x or piece[2]==y:\n                return \"YES\"\n        elif piece[0]=='Q':\n            if abs(piece[1]-x)==abs(piece[2]-y) or piece[1]==x or piece[2]==y:\n                return \"YES\"\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1267,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = input()\n    scores = list(map(int, input().split()))\n    scores.sort(reverse=True)\n    count = 0\n    for i in range(n):\n        if scores[i] == 0:\n            continue\n        count += 1\n        for j in range(i+1, n):\n            if scores[j] >= scores[i]:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1268,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())[:n]\n    b=list(map(int,input().split())[:n]\n    if sum(a)<=sum(b):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1269,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    c = list(map(int, input().split()))\n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1270,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    max_primes = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i*j == n:\n                max_primes = max(max_primes, i+j)\n    print(max_primes)\n    print(primes[:max_primes])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1271,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,s,k=map(int,input().split())\n    r=list(map(int,input().split())\n    c=list(input())\n    if r[s-1]<k:\n        return -1\n    if r[s-1]>=k:\n        return 0\n    if s==1:\n        return 1\n    if c[s-1]==c[s-2]:\n        return -1\n    if c[s-1]==c[s-2] and r[s-1]<r[s-2]:\n        return -1\n    if c[s-1]==c[s-2] and r[s-1]>r[s-2]:\n        return 1\n    if c[s-1]!=c[s-2] and r[s-1]<r[s-2]:\n        return -1\n    if c[s-1]!=c[s-2] and r[s-1]>r[s-2]:\n        return 1\n    if c[s-1]!=c[s-2] and r[s-1]==r[s-2]:\n        return 1+solution(input_string)\n    return 1+solution(input_string)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1272,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = list(map(int,input().split()))\n    bridges = []\n    for i in range(m):\n        a,b = list(map(int,input().split())\n        bridges.append((a,b))\n    bridges.sort(key=lambda x: x[0])\n    ans = []\n    for i in range(m):\n        ans.append(0)\n        for j in range(i+1,m):\n            if bridges[j][0] > bridges[i][1]:\n                ans[i] += 1\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1273,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    edges=[]\n    for i in range(n-1):\n        a,b=map(int,input().split())\n        edges.append((a,b) if a<b else (b,a))\n    edges=sorted(edges)\n    colors=set()\n    for i in range(n-1):\n        colors.add(edges[i][0])\n        colors.add(edges[i][1])\n    return len(colors)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1274,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = map(int,input().split())\n    jobs = []\n    for i in range(n):\n        a,b = map(int,input().split())\n        jobs.append((a,b))\n    jobs.sort(key=lambda x:x[1]/x[0],reverse=True)\n    total_reward = 0\n    days = 0\n    for job in jobs:\n        if days+job[0]<=m:\n            total_reward+=job[1]\n            days+=job[0]\n        else:\n            break\n    return total_reward\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1275,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,K = map(int,input().split())\n    count = 0\n    for a in range(1,N+1):\n        for b in range(1,N+1):\n            for c in range(1,N+1):\n                d = a+b-K-c\n                if d>=1 and d<=N:\n                    count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1276,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    S=input()\n    count=0\n    for i in range(N-2):\n        for j in range(i+1,N-1):\n            for k in range(j+1,N):\n                if S[i]!=S[j] and S[i]!=S[k] and S[j]!=S[k]:\n                    if j-i!=k-j:\n                        count+=1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1277,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f=lambda:map(int,input().split())\n    N,u,v=f()\n    edges=[list(f()) for i in range(N-1)]\n    visited=[False]*(N+1)\n    visited[u]=True\n    visited[v]=True\n    queue=[u]\n    while queue:\n        x=queue.pop(0)\n        for i,j in edges:\n            if not visited[i]:\n                visited[i]=True\n                queue.append(i)\n            if not visited[j]:\n                visited[j]=True\n                queue.append(j)\n    return len(queue)-1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1278,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, x, y = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    for i in range(n):\n        if all(a[i] < a[j] for j in range(i-x, i+y+1)) and all(a[j] < a[i] for j in range(i-x, i+y+1)):\n            return i+1\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1279,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    a = list(map(int, input().split())\n    b = list(map(int, input().split())\n    max_chests = 0\n    for i in range(n):\n        for j in range(m):\n            if (a[i] + b[j]) % 2 == 1:\n                max_chests += 1\n                b[j] = -1\n    return max_chests\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1280,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    good_chars = input()\n    k = int(input())\n    good_substrings = []\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            bad_count = 0\n            for char in substring:\n                if good_chars[ord(char)-ord('a')] == '0':\n                    bad_count += 1\n            if bad_count <= k:\n                good_substrings.append(substring)\n    return len(set(good_substrings))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1281,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k = map(int,input().split())\n    a = list(map(int,input().split())\n    max_segments = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor = 0\n            for l in range(i,j+1):\n                xor ^= a[l]\n            if xor != 0:\n                max_segments += 1\n    return max_segments\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1282,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=input();n=len(a);o,k=0,0\n    for i in range(n-1):\n        if a[i]=='M' and a[i+1]=='F':\n            a=a[:i]+'F'+a[i+1]+'M'+a[i+2:]\n            k+=1\n    return k\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1283,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    field = [list(input().strip() for _ in range(n)]\n    max_count = 0\n    max_cell = (0, 0)\n    for i in range(n):\n        for j in range(n):\n            count = 0\n            for di, dj in [(0, 1), (1, 0), (-1, 0), (0, -1)]:\n                if 0 <= i + di < n and 0 <= j + dj < n:\n                    count += field[i + di][j + dj] == '.'\n            if count >= k:\n                max_count = max(max_count, count)\n                max_cell = (i, j)\n    return max_cell\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1284,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1285,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn = int(input())\n    \\tmatrix = []\n    \\tfor i in range(n):\n        \\trow = []\n        \\tfor j in range(n//4):\n            \\trow.append(int(input_string[i*n//4+j], 16))\n        \\tmatrix.append(row)\n    \\t\n    \\tx = 1\n    \\twhile x <= n:\n        \\tcompressed = []\n        \\tfor i in range(0, n, x):\n            \\tcompressed_row = []\n            \\tfor j in range(0, n, x):\n                \\tcompressed_row.append(matrix[i][j])\n            \\tcompressed.append(compressed_row)\n        \\tif compressed == matrix:\n            \\tprint(x)\n            \\treturn\n        \\tx += 1\n    \\tprint(0)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1286,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k = int(input())\n    a = list(map(int, input().split()))\n    n = 1\n    for i in a:\n        n *= i\n    p = 0\n    q = 1\n    for i in range(k):\n        p += a[i]\n        q *= a[i]\n    return f\"{p % (10**9 + 7)}/{q % (10**9 + 7)}\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1287,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    matrix = []\n    for i in range(n):\n        matrix.append(list(map(float, input().split()))\n    return 0.0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1288,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int,input().split())\n    a = list(map(int,input().split())\n    a.sort(reverse=True)\n    if k > n:\n        return 0\n    elif k == n:\n        return a[0]\n    else:\n        return max(a[:k])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1289,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    m=int(input())\n    b=list(map(int,input().split())\n    a.sort()\n    if b[0]!=1:\n        return -1\n    if b[-1]!=n:\n        return -1\n    if b[0]==b[-1]:\n        return a[b[-1]-1]-a[b[0]-1]\n    else:\n        return a[b[-1]-1]-a[b[0]-1]+a[n-1]-a[b[0]-2]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1290,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    columns = list(map(int, input().split()))\n    points = 0\n    for i in range(m):\n        col = columns[i]\n        if col == 1:\n            points += 1\n        else:\n            for j in range(col-1, 0, -1):\n                if columns[j-1] == 0:\n                    columns[j] += 1\n                else:\n                    break\n            columns[col-1] = 1\n    return points\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1291,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    nm = input()\n    n, m = map(int, nm.split())\n    misha_points = []\n    sasha_points = []\n    for i in range(n):\n        misha_points.append(list(map(int, input().split()))\n    for i in range(m):\n        sasha_points.append(list(map(int, input().split()))\n    for i in range(n):\n        for j in range(m):\n            if (misha_points[i][0]-sasha_points[j][0])**2 + (misha_points[i][1]-sasha_points[j][1])**2 <= 1:\n                return \"NO\"\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1292,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, p=map(int, input().split())\n    speeds=list(map(int, input().split())\n    grid=[]\n    for i in range(n):\n        grid.append(list(input())\n    result=[]\n    for i in range(p):\n        result.append(0)\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j].isdigit():\n                result[int(grid[i][j)-1]+=1\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j]=='.':\n                for k in range(4):\n                    if k==0:\n                        if i>0 and grid[i-1][j]!='#' and grid[i-1][j].isdigit():\n                            result[int(grid[i-1][j)-1]+=1\n                    elif k==1:\n                        if j>0 and grid[i][j-1]!='#' and grid[i][j-1].isdigit():\n                            result[int(grid[i][j-1)-1]+=1\n                    elif k==2:\n                        if i<n-1 and grid[i+1][j]!='#' and grid[i+1][j].isdigit():\n                            result[int(grid[i+1][j)-1]+=1\n                    elif k==3:\n                        if j<m-1 and grid[i][j+1]!='#' and grid[i][j+1].isdigit():\n                            result[int(grid[i][j+1)-1]+=1\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1293,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = [0] * n\n    b = list(map(int, input().split()))\n    steps = 0\n    for i in range(n):\n        if a[i] != b[i]:\n            steps += abs(a[i] - b[i])\n            a[i] = b[i]\n    return steps\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1294,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        s = input()\n        res = \"\"\n        for i in range(len(s)):\n            if s[i] == s[i-1]:\n                res += s[i]\n        print(res)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1295,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = map(int,input().split())\n    cities = list(map(int,input().split()))\n    towers = list(map(int,input().split())\n    r = 0\n    i = 0\n    j = 0\n    while i < n and j < m:\n        if cities[i] - towers[j] <= r:\n            i += 1\n        else:\n            r = towers[j] - cities[i-1]\n            j += 1\n    return r\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1296,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    read = lambda: map(int, input().split())\n    n, S = read()\n    a = list(read())\n    k = 0\n    T = 0\n    for i in range(n):\n        if a[i] <= S:\n            k += 1\n            T += a[i]\n            S -= a[i]\n        else:\n            break\n    return k, T\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1297,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print(sum(1 for k, g in groupby(input()) if len(list(g)) % 2 == 0))\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1298,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l = int(input())\n    s = input()\n    while '01' in s or '10' in s:\n        s = s.replace('01', '').replace('10', '')\n    return len(s)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1299,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    read_line = lambda: list(map(int, input().split(' ')))\n    n, k = read_line()\n    laws = read_line()\n    max_absurdity = 0\n    a, b = 0, 0\n    for i in range(n - k + 1):\n        for j in range(i + k, n - k + 1):\n            absurdity = sum(laws[i:j])\n            if absurdity > max_absurdity:\n                max_absurdity = absurdity\n                a, b = i, j\n    print(a, b)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1300,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k=[*map(int,input().split())]\n    n=k[0]\n    c=k[1]\n    a=[*map(int,input().split())]\n    max_count=0\n    for i in range(n):\n        if a[i]==c:\n            max_count+=1\n    return max_count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1301,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    L = int(input())\n    known_letters = input()\n    pokemons = [\"vaporeon\", \"jolteon\", \"flareon\", \"espeon\", \"umbreon\", \"leafeon\", \"glaceon\", \"sylveon\"]\n    for pokemon in pokemons:\n        if len(pokemon) == L:\n            for i in range(L):\n                if known_letters[i] != \".\" and known_letters[i] != pokemon[i]:\n                    break\n            else:\n                return pokemon\n    return \"No match found\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1302,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = tuple(map(int, input().split()))\n    if k == 0:\n        return \"-1\"\n    if k == 1:\n        return \" \".join(str(i) for i in range(1, n+1))\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            if k == 2:\n                return \" \".join(str(i) for i in range(1, n+1, 2))\n            elif k == 3:\n                return \" \".join(str(i) for i in range(2, n+1, 2))\n            else:\n                return \"-1\"\n    if k == 2:\n        return \" \".join(str(i) for i in range(1, n+1, 2))\n    elif k == 3:\n        return \" \".join(str(i) for i in range(2, n+1, 2))\n    else:\n        return \"-1\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1303,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    p, q, l, r = (int(x) for x in input().split())\n    x_schedule = []\n    z_schedule = []\n    for i in range(p):\n        a, b = (int(x) for x in input().split())\n        x_schedule.append((a, b))\n    for j in range(q):\n        c, d = (int(x) for x in input().split())\n        z_schedule.append((c, d))\n    count = 0\n    for t in range(l, r+1):\n        x_online = False\n        z_online = False\n        for i in range(p):\n            if x_schedule[i][0] <= t <= x_schedule[i][1]:\n                x_online = True\n        for j in range(q):\n            if z_schedule[j][0] <= t <= z_schedule[j][1]:\n                z_online = True\n        if x_online and z_online:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1304,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    y, x = [int(x) for x in input().split()]\n    board = [list(input().strip()) for _ in range(9)]\n    for i in range(9):\n        board[i] = list(board[i])\n    for i in range(9):\n        for j in range(9):\n            if board[i][j] == 'x':\n                board[i][j] = 'o'\n            elif board[i][j] == 'o':\n                board[i][j] = 'x'\n    for i in range(9):\n        for j in range(9):\n            if board[i][j] == 'x':\n                board[i][j] = 'o'\n            elif board[i][j] == 'o':\n                board[i][j] = 'x'\n    for i in range(9):\n        for j in range(9):\n            if board[i][j] == 'x':\n                board[i][j] = 'o'\n            elif board[i][j] == 'o':\n                board[i][j] = 'x'\n    for i in range(9):\n        for j in range(9):\n            if board[i][j] == 'x':\n                board[i][j] = 'o'\n            elif board[i][j] == 'o':\n                board[i][j] = 'x'\n    for i in range(9):\n        for j in range(9):\n            if board[i][j] == 'x':\n                board[i][j] = 'o'\n            elif board[i][j] == 'o':\n                board[i][j] = 'x'\n    for i in range(9):\n        for j in range(9):\n            if board[i][j] == 'x':\n                board[i][j] = 'o'\n            elif board[i][j] == 'o':\n                board[i][j] = 'x'\n    for i in range(9):\n        for j in range(9):\n            if board[i][j] == 'x':\n                board[i][j] = 'o'\n            elif board[i][j] == 'o':\n                board[i][j] = '",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1305,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    bills = list(map(int, input().split()))\n    if n == 1:\n        return \"YES\"\n    elif n == 2:\n        if bills[0] == 25 and bills[1] == 25:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        for i in range(n-1):\n            if bills[i] == 25 and bills[i+1] == 25:\n                bills[i] = 0\n                bills[i+1] = 0\n            elif bills[i] == 50 and bills[i+1] == 25:\n                bills[i] = 25\n                bills[i+1] = 25\n            elif bills[i] == 50 and bills[i+1] == 50:\n                bills[i] = 0\n                bills[i+1] = 0\n            elif bills[i] == 100 and bills[i+1] == 25:\n                bills[i] = 25\n                bills[i+1] = 25\n            elif bills[i] == 100 and bills[i+1] == 50:\n                bills[i] = 25\n                bills[i+1] = 25\n            elif bills[i] == 100 and bills[i+1] == 100:\n                bills[i] = 0\n                bills[i+1] = 0\n        if sum(bills) == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1306,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: map(int, input().split())\n    n, h = f()\n    a = list(f())\n    MOD = 100000007\n    dp = [1] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(i):\n            if a[i - 1] != a[j]:\n                dp[i] = (dp[i] + dp[j]) % MOD\n    return dp[n]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1307,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n % 2 == 0:\n        return \"Ehab\"\n    else:\n        return \"Mahmoud\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1308,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    n,m=map(int,input().split())\n    s=list(s)\n    for i in range(m):\n        x,y,len=map(int,input().split())\n        s1=s[x-1:x+len-1]\n        s2=s[y-1:y+len-1]\n        if len(set(s1))==len(set(s2) and len(s1)==len(s2):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1309,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=2*int(input())\n    weights=list(map(int,input_string.split()))\n    weights.sort()\n    total_instability=0\n    for i in range(n):\n        total_instability+=abs(weights[i]-weights[i+1])\n    return total_instability\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1310,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,ans=int(input()),-10000\n    arr=list(map(int,input_string.split()))\n    for i in range(n):\n        for j in range(i+1,n+1):\n            ans=max(ans,sum(arr[i:j])\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1311,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    points = []\n    for i in range(n):\n        x, w = map(int, input().split())\n        points.append((x, w))\n    points.sort()\n    max_clique = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if points[j][0] - points[i][0] >= points[i][1] + points[j][1]:\n                max_clique = max(max_clique, 2)\n            else:\n                break\n    return max_clique\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1312,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    if n%m==0:\n        a=n//m\n        return \" \".join([str(a)]*m)\n    else:\n        a=n//m\n        b=n%m\n        c=a+1\n        return \" \".join([str(a)]*(m-b)+[str(c)]*b)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1313,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n1, n2, k1, k2 = map(int, input().split())\n    if n1 > n2:\n        return \"First\"\n    elif n2 > n1:\n        return \"Second\"\n    else:\n        return \"First\" if k1 > k2 else \"Second\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1314,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    obelisks=[]\n    clues=[]\n    for i in range(n):\n        x,y=map(int,input().split())\n        obelisks.append((x,y))\n    for i in range(n):\n        a,b=map(int,input().split())\n        clues.append((a,b))\n    x_sum=0\n    y_sum=0\n    for i in range(n):\n        x_sum+=obelisks[i][0]+clues[i][0]\n        y_sum+=obelisks[i][1]+clues[i][1]\n    T_x=x_sum//n\n    T_y=y_sum//n\n    return T_x,T_y\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1315,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = sorted(q + i for i, q in enumerate(map(int, input().split())))\n    if t[0] != 0:\n        return \":(\", 0\n    for i in range(1, len(t)):\n        if t[i] < t[i - 1]:\n            return \":(\", 0\n    return \" \".join(map(str, t[::-1])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1316,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=list(map(int,input().split()))\n    s=input()\n    count=0\n    for i in range(n-k+1):\n        if s[i:i+k]==s[i+1:i+k+1]:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1317,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input().split()\n    n, m = int(s[0]), int(s[1])\n    if m == 1:\n        return n*n\n    else:\n        count = 0\n        for i in range(1, n+1):\n            for j in range(1, n+1):\n                if (i**2 + j**2) % m == 0:\n                    count += 1\n        return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1318,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    requests=[]\n    for i in range(n):\n        requests.append(list(map(int,input().split()))\n    k=int(input())\n    tables=list(map(int,input().split())\n    max_money=0\n    accepted_requests=[]\n    for i in range(n):\n        for j in range(k):\n            if requests[i][0]<=tables[j]:\n                if requests[i][1]>max_money:\n                    max_money=requests[i][1]\n                    accepted_requests.append([i+1,j+1])\n                    break\n    print(len(accepted_requests),max_money)\n    for i in accepted_requests:\n        print(i[0],i[1])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1319,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    m = int(input())\n    primes = list(map(int, input_string.split()))\n    n = 1\n    for prime in primes:\n        n *= prime\n    result = 1\n    for i in range(1, n+1):\n        if n % i == 0:\n            result *= i\n            result %= 10**9 + 7\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1320,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    cake = input_string.split('\\n')\n    happiness = 0\n    for i in range(n):\n        for j in range(n):\n            if cake[i][j] == 'C':\n                for k in range(n):\n                    if cake[i][k] == 'C':\n                        happiness += 1\n                    if cake[k][j] == 'C':\n                        happiness += 1\n    return happiness\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1321,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    widths = []\n    heights = []\n    for i in range(n):\n        w, h = map(int, input().split())\n        widths.append(w)\n        heights.append(h)\n    widths.sort()\n    heights.sort(reverse=True)\n    max_height = heights[0]\n    total_width = sum(widths)\n    min_photo_width = 0\n    for i in range(n):\n        min_photo_width += widths[i]\n    min_photo_height = max_height\n    min_photo_pixels = min_photo_width * min_photo_height\n    for i in range(1, n):\n        min_photo_pixels += widths[i] * heights[i]\n    print(min_photo_pixels)\n    for i in range(n):\n        print(min_photo_pixels - widths[i] * heights[i])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1322,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x=int(input())+1\n    return (x*(x+1))//2%(10**9+7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1323,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    a = list(map(int, input().split())\n    b = list(map(int, input().split())\n    min_ops = float('inf')\n    for i in range(m):\n        for j in range(n):\n            min_ops = min(min_ops, a[i] + b[j])\n    return min_ops\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1324,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = list(map(int, input().split()))\n    s = input()\n    calories = 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            calories += a[0]\n        elif s[i] == '2':\n            calories += a[1]\n        elif s[i] == '3':\n            calories += a[2]\n        else:\n            calories += a[3]\n    return calories\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1325,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,p = list(map(int,input().split()))\n    string = input()\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1326,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input());print(sum((x:=n//i)*(x+1)*i//2 for i in range(1,n+1)))\n    # Write your code here\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1327,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,M = map(int,input().split())\n    cakes = []\n    for i in range(N):\n        x,y,z = map(int,input().split())\n        cakes.append([x,y,z])\n    cakes.sort(key=lambda x: (-abs(x[0]),-abs(x[1]),-abs(x[2])) )\n    selected_cakes = []\n    for i in range(M):\n        selected_cakes.append(cakes[i])\n    total_beauty = sum(map(lambda x: abs(x[0]),selected_cakes) )\n    total_tastiness = sum(map(lambda x: abs(x[1]),selected_cakes) )\n    total_popularity = sum(map(lambda x: abs(x[2]),selected_cakes) )\n    return total_beauty + total_tastiness + total_popularity\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1328,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,A,B = map(int,input().split())\n    packages = []\n    for i in range(N):\n        a,b,c = map(int,input().split())\n        packages.append((a,b,c))\n    packages.sort(key=lambda x: x[2])\n    total_price = 0\n    for i in range(N):\n        total_price += packages[i][2]\n    min_price = float('inf')\n    for i in range(N):\n        for j in range(i+1,N):\n            if packages[i][0]*A+packages[j][1]*B==A*B:\n                min_price = min(min_price,packages[i][2]+packages[j][2])\n    if min_price == float('inf'):\n        print(-1)\n    else:\n        print(min_price)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1329,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    count = 0\n    for i in range(1, N+1):\n        for j in range(1, N+1):\n            if i*j == N:\n                if len(list(str(i*j)) == 1 or len(list(str(i*j)) == 2 or len(list(str(i*j)) == 3 or len(list(str(i*j)) == 4 or len(list(str(i*j)) == 5 or len(list(str(i*j)) == 6 or len(list(str(i*j)) == 7 or len(list(str(i*j)) == 8 or len(list(str(i*j)) == 9 or len(list(str(i*j)) == 10):\n                    count += 1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1330,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    potentials = list(map(int, input().split())\n    clubs = list(map(int, input().split())\n    d = int(input())\n    k_list = []\n    for i in range(d):\n        k_list.append(int(input())\n    clubs_dict = {}\n    for i in range(1, m+1):\n        clubs_dict[i] = []\n    for i in range(n):\n        clubs_dict[clubs[i]].append(potentials[i])\n    for i in range(d):\n        k_list[i] -= 1\n        clubs_dict[clubs[k_list[i]].remove(potentials[k_list[i])\n        mex = 0\n        while mex in clubs_dict[clubs[k_list[i]]:\n            mex += 1\n        print(mex)\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1331,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: map(int, input().split())\n    n, m, k = f()\n    a = sorted(list(f())[:n])\n    ans = 0\n    for i in range(n):\n        if a[i] >= m:\n            break\n        if a[i] + k - 1 <= m:\n            ans += 1\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1332,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=sum(list(map(int,input().split())))\n    if n%5!=0:\n        return -1\n    else:\n        return n//5\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1333,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b = list(map(int, input().split(' ')))\n    snake = []\n    for i in range(1, a+1):\n        if i % 2 == 1:\n            snake.append('#'*(b) + '.'*(b-1) + '#')\n        else:\n            snake.append('.'*(b-1) + '#'*(b) + '.')\n    return '\\n'.join(snake)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1334,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    q,w=map(int,input().split())\n    s=input()\n    s=sorted(set(s)\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            if len(s[i:j])==k:\n                print(s[i:j])\n                break\n    return s[i:j]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1335,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split())\n    m = 0\n    interesting = 0\n    for i in range(n):\n        for j in range(a[i]):\n            m += 1\n            if round(100 * m / n) == j:\n                interesting += 1\n    return interesting\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1336,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    volumes = []\n    for i in range(n):\n        out, in_ = map(int, input().split())\n        volumes.append((out, in_)\n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1337,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    languages=list(map(int,input().split()))\n    m=int(input())\n    audio=list(map(int,input().split())\n    subtitles=list(map(int,input().split())\n    max_pleased=0\n    max_movie=0\n    for i in range(m):\n        pleased=0\n        for j in range(n):\n            if languages[j]==audio[i] or languages[j]==subtitles[i]:\n                pleased+=1\n            elif languages[j] in audio or languages[j] in subtitles:\n                pleased+=0.5\n        if pleased>max_pleased:\n            max_pleased=pleased\n            max_movie=i+1\n    return max_movie\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1338,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    if n==1:\n        return \"1\"\n    if n==2:\n        return \"2 1\"\n    if n==3:\n        return \"1 3 2\"\n    if n==4:\n        return \"3 1 4 2\"\n    if n==5:\n        return \"3 1 5 2 4\"\n    if n==6:\n        return \"3 1 6 2 5 4\"\n    if n==7:\n        return \"3 1 7 2 6 5 4\"\n    if n==8:\n        return \"3 1 8 2 7 6 5 4\"\n    if n==9:\n        return \"3 1 9 2 8 7 6 5 4\"\n    if n==10:\n        return \"3 1 10 2 9 8 7 6 5 4\"\n    if n==11:\n        return \"3 1 11 2 10 9 8 7 6 5 4\"\n    if n==12:\n        return \"3 1 12 2 11 10 9 8 7 6 5 4\"\n    if n==13:\n        return \"3 1 13 2 12 11 10 9 8 7 6 5 4\"\n    if n==14:\n        return \"3 1 14 2 13 12 11 10 9 8 7 6 5 4\"\n    if n==15:\n        return \"3 1 15 2 14 13 12 11 10 9 8 7 6 5 4\"\n    if n==16:\n        return \"3 1 16 2 15 14 13 12 11 10 9 8 7 6 5 4\"\n    if n==17:\n        return \"3 1 17 2 16 15 14 1",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1339,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    segments=[]\n    for i in range(n):\n        l,r=map(int,input().split())\n        segments.append([l,r])\n    segments.sort()\n    for i in range(n):\n        for j in range(i+1,n):\n            if segments[i][0]<=segments[j][0] and segments[i][1]>=segments[j][1]:\n                return i+1\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1340,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    colors = list(map(int, input().split()))\n    color_dict = {}\n    for i in range(n):\n        if colors[i] in color_dict:\n            color_dict[colors[i]].append(i)\n        else:\n            color_dict[colors[i]] = [i]\n    min_ops = 0\n    for key in color_dict:\n        color_dict[key].sort()\n        if len(color_dict[key]) > 1:\n            min_ops += len(color_dict[key]) - 1\n    return min_ops\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1341,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    c,s,i=0,input(),input()\n    for x in i:\n        if s[c]==x:\n            c+=1\n    return c+1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1342,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    balls = list(map(int, input().split()))\n    sets = []\n    for i in range(1, n+1):\n        sets.append([])\n    for i in range(n):\n        for j in range(balls[i]):\n            sets[i].append(i)\n    sets.sort(key=len)\n    min_sets = []\n    for i in range(len(sets)):\n        min_sets.append(sets[i])\n    for i in range(len(sets)-1, -1, -1):\n        if len(min_sets[-1]) - len(min_sets[0]) > 1:\n            min_sets.pop()\n        else:\n            break\n    return len(min_sets)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1343,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k = map(int, input().split())\n    roads = []\n    for i in range(m):\n        u, v, l = map(int, input().split())\n        roads.append((u, v, l))\n    storages = list(map(int, input().split()) if k > 0 else [])\n    min_cost = float('inf')\n    for i in range(1, n+1):\n        if i not in storages:\n            cost = 0\n            for u, v, l in roads:\n                if u == i or v == i:\n                    cost += l\n            min_cost = min(min_cost, cost)\n    return min_cost if min_cost != float('inf') else -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1344,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, l, p, v = int(input()), 0, 0, 0\n    for i in range(n):\n        if i == 0:\n            l = 1\n        else:\n            if int(input_string[i]) > int(input_string[i-1]):\n                l += 1\n            else:\n                p = max(p, l)\n                l = 1\n        v = max(p, l)\n    return v\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1345,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    for i in range(n):\n        if a[i]<=a[i+1]<=2*a[i]:\n            print(\"+\",end=\"\")\n        else:\n            print(\"-\",end=\"\")\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1346,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, p = list(map(int, input().strip().split()))\n    a = list(map(int, input().strip().split())[:n])\n    b = list(map(int, input().strip().split())[:m])\n    h = [0] * (n + m - 1)\n    for i in range(n):\n        for j in range(m):\n            h[i + j] += a[i] * b[j]\n    for i in range(n + m - 1):\n        if h[i] % p != 0:\n            return i\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1347,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    essay = list(map(stat, input().lower().split()))\n    synonyms = {}\n    for _ in range(int(input())):\n        x, y = input().lower().split()\n        synonyms[x] = y\n    min_r_count = len(essay)\n    min_length = sum(len(word) for word in essay)\n    for i in range(len(essay)):\n        for j in range(i+1, len(essay)):\n            for x, y in synonyms.items():\n                if essay[i] == x:\n                    essay[i] = y\n                    essay[j] = y\n                    r_count = sum(1 for word in essay if word.count('r') > 0)\n                    length = sum(len(word) for word in essay)\n                    if r_count < min_r_count or (r_count == min_r_count and length < min_length):\n                        min_r_count = r_count\n                        min_length = length\n                    essay[i] = x\n                    essay[j] = essay[j].replace(y, x)\n    return min_r_count, min_length\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1348,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    d=list(map(int,input().split())\n    if n==1:\n        return -1\n    elif k==1:\n        return -1\n    else:\n        m=0\n        for i in range(n):\n            for j in range(i+1,n):\n                if d[i]==d[j]:\n                    m+=1\n        if m>k:\n            return -1\n        else:\n            print(m)\n            for i in range(n):\n                for j in range(i+1,n):\n                    if d[i]==d[j]:\n                        print(i+1,j+1)\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1349,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n, k = map(int, input().split())\n        x = list(map(int, input().split()))\n        x.sort()\n        max_time = 0\n        for i in range(k):\n            max_time = max(max_time, x[i] + i)\n        print(max_time)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1350,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    s=input()\n    freq=[0]*26\n    for i in s:\n        freq[ord(i)-ord('A')]+=1\n    max_len=0\n    for i in range(k):\n        if freq[i]==0:\n            return 0\n        max_len=max(max_len,freq[i])\n    for i in range(k,26):\n        if freq[i]>0:\n            return 0\n    return max_len*k\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1351,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    for i in range(n, k+1):\n        if len(set(str(i)) == len(str(i)):\n            return i\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1352,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, x = map(int, input().split())\n    a = list(map(int, input().split()))\n    count = 0\n    for l in range(1, x+1):\n        for r in range(l, x+1):\n            f = sorted(set(a[l-1:r]))\n            if f == list(range(l, r+1)):\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1353,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,a,b=list(map(int,input().split()))\n    if n<=m:\n        return n*a\n    else:\n        return (n//m)*b+(n%m)*a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1354,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k,a=list(map(int,input().split()))\n    m=int(input())\n    x=list(map(int,input().split())\n    for i in range(m):\n        if x[i]<=n:\n            print(i+1)\n            break\n    else:\n        print(-1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1355,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    points = []\n    for i in range(n):\n        x, y = map(float, input().split())\n        points.append((x, y))\n    lines = []\n    for i in range(m):\n        x1, y1, x2, y2 = map(float, input().split())\n        lines.append(((x1, y1, x2, y2))\n    for line in lines:\n        x1, y1, x2, y2 = line\n        # Your code here\n        # Calculate the length of common part of the n-gon and the line\n        # and print it with 10 digits after decimal point\n        # Use math.hypot(x, y) to calculate the length of a line with endpoints (0, 0) and (x, y)\n        # Use math.atan2(y2 - y1, x2 - x1) to calculate the angle between the line and the x-axis\n        # Use math.cos(angle) and math.sin(angle) to calculate the sine and cosine of the angle\n        # Use math.isclose(a, b, rel_tol=1e-6, abs_tol=0.0) to compare two floating point numbers with relative tolerance of 1e-6\n        # Use math.pi to get the value of pi\n        pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1356,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    count = 0\n    max_length = 0\n    for i in range(len(s)):\n        if s[i] == 'a':\n            count += 1\n        else:\n            count = 0\n        max_length = max(max_length, count)\n    return max_length\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1357,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    time = 0\n    for i in range(m):\n        if a[i] > n:\n            a[i] = a[i] % n\n        if a[i] == 1:\n            time += 1\n        else:\n            time += abs(a[i] - 1) + abs(a[i] - n)\n    return time\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1358,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k, n = list(map(int, input().split()))\n    strings = []\n    for i in range(k):\n        s, a = input().split()\n        strings.append((s, int(a)))\n    strings.sort(key=lambda x: x[1], reverse=True)\n    max_beauty = 0\n    for i in range(k):\n        for j in range(i+1, k):\n            if strings[i][0] == strings[j][0]:\n                max_beauty = max(max_beauty, strings[i][1] + strings[j][1])\n            elif strings[i][0] == strings[j][0][::-1]:\n                max_beauty = max(max_beauty, strings[i][1] + strings[j][1])\n    return max_beauty\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1359,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    roads=[]\n    for i in range(m):\n        a,b=map(int,input().split())\n        roads.append((a,b) if a<b else (b,a))\n    count=0\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                for l in range(n):\n                    if (i,j) in roads and (i,k) in roads and (i,l) in roads and (k,l) in roads and (j,k) in roads and (j,l) in roads and (k,l) in roads:\n                        count+=1\n    return count//2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1360,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = []\n    b = []\n    for i in range(n):\n        a_i, b_i = map(int, input().split())\n        a.append(a_i)\n        b.append(b_i)\n    a.sort()\n    b.sort()\n    for i in range(n):\n        if a[i] > b[i]:\n            a[i] = b[i]\n    return a[-1]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1361,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, a = int(input()), list(map(int, input().split()))\n    max_diff = 0\n    for i in range(1, n-1):\n        max_diff = max(max_diff, a[i+1]-a[i])\n    return max_diff\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1362,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    rd = lambda: list(map(int, input().split()))\n    n, p, m = rd()\n    deposits = []\n    for i in range(n):\n        d, t = rd()\n        deposits.append((d, t))\n    deposits.sort()\n    balance = 0\n    count = 0\n    for i in range(m):\n        balance -= p\n        for j in deposits:\n            if j[0] == i+1:\n                balance += j[1]\n        if balance < 0:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1364,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    sushi=list(map(int,input().split()))\n    sushi_count=0\n    max_count=0\n    for i in range(n):\n        if sushi[i]==1:\n            sushi_count+=1\n        else:\n            sushi_count-=1\n        if sushi_count==0:\n            max_count=i+1\n    return max_count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1365,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = map(int,input().split())\n    graph = [[] for i in range(n+1)]\n    for i in range(m):\n        u,v = map(int,input().split())\n        graph[u].append(v)\n        graph[v].append(u)\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1366,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = []\n    b = []\n    for i in range(n):\n        a_i, b_i = map(int, input().split())\n        a.append(a_i)\n        b.append(b_i)\n    count = 0\n    for i in range(n):\n        if a[i] not in b:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1367,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    watched_episodes=list(map(int,input().split()))\n    unwatched_episode=[]\n    for i in range(1,n+1):\n        if i not in watched_episodes:\n            unwatched_episode.append(i)\n    return unwatched_episode[0]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1368,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,A,B = map(int,input().split())\n    v = list(map(int,input().split())\n    v.sort(reverse=True)\n    max_mean = sum(v[:A])/A\n    count = 1\n    for i in range(A,B+1):\n        if sum(v[:i])/i > max_mean:\n            max_mean = sum(v[:i])/i\n            count = 1\n        elif sum(v[:i])/i == max_mean:\n            count += 1\n    return max_mean, count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1369,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l=[list(map(int, input().split()))for i in range(int(input()))]\n    x=[]\n    y=[]\n    for i in range(len(l)):\n        x.append(l[i][0])\n        y.append(l[i][1])\n    x_mean=sum(x)/len(x)\n    y_mean=sum(y)/len(y)\n    r=0\n    for i in range(len(x)):\n        r=max(r,((x[i]-x_mean)**2+(y[i]-y_mean)**2)**0.5)\n    return r\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1370,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    h,w,k=map(int,input().split())\n    s=[]\n    for i in range(h):\n        s.append(list(map(int,input().split()))\n    count=0\n    for i in range(h):\n        for j in range(w):\n            if s[i][j]==1:\n                count+=1\n    if count<=k:\n        return 0\n    else:\n        for i in range(1,h):\n            for j in range(1,w):\n                if s[i][j]==1:\n                    s[i][j]=s[i-1][j]+s[i][j-1]\n        for i in range(h):\n            for j in range(w):\n                if s[i][j]>k:\n                    return -1\n        for i in range(h):\n            for j in range(w):\n                if s[i][j]==k:\n                    return count-s[i][j]\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1371,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    S = int(input())\n    MOD = 10**9 + 7\n    dp = [0] * (S+1)\n    dp[0] = 1\n    dp[1] = 0\n    dp[2] = 0\n    dp[3] = 1\n    for i in range(4, S+1):\n        dp[i] = (dp[i-1] + dp[i-3]) % MOD\n    return dp[S]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1372,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    h,n=map(int,input().split())\n    spells=[]\n    for i in range(n):\n        a,b=map(int,input().split())\n        spells.append((a,b))\n    spells.sort(key=lambda x:x[0])\n    total=0\n    for i in range(n):\n        if h<=0:\n            break\n        if h-spells[i][0]<0:\n            continue\n        total+=spells[i][1]\n        h-=spells[i][0]\n    return total\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1373,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split());print(sum((n+1-i)*i+1for i in range(k,n+2))%(10**9+7))\n    # Write your code here\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1374,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    a = list(map(int, input_string.split()))\n    m = []\n    for l in range(N):\n        for r in range(l, N):\n            subseq = sorted(a[l:r+1])\n            if len(subseq) % 2 == 0:\n                m.append(subseq[len(subseq)//2])\n            else:\n                m.append(subseq[len(subseq)//2 + 1])\n    m.sort()\n    if len(m) % 2 == 0:\n        return m[len(m)//2]\n    else:\n        return m[len(m)//2 + 1]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1375,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    count = 0\n    for i in range(2, n-1):\n        left_sum = sum(a[:i])\n        right_sum = sum(a[i:])\n        if left_sum == right_sum:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1376,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    s=0\n    d=0\n    for i in range(n):\n        s+=a[i]\n        d+=a[i+n]\n    return abs(s-d)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1377,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 1:\n        return \"YES\"\n    if n == 2:\n        if a[0] > a[1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 3:\n        if a[0] > a[1] and a[1] > a[2]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 4:\n        if a[0] > a[1] and a[2] > a[3]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 5:\n        if a[0] > a[1] and a[2] > a[3] and a[4] > a[1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 6:\n        if a[0] > a[1] and a[2] > a[3] and a[4] > a[5]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 7:\n        if a[0] > a[1] and a[2] > a[3] and a[4] > a[5] and a[6] > a[1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 8:\n        if a[0] > a[1] and a[2] > a[3] and a[4] > a[5] and a[6] > a[7]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 9:\n        if a[0] > a[1] and a[2] > a[3] and a[4] > a[5] and a[6] > a[7] and a[8] > a[1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 10:\n        if a[0] > a[1] and a[2] > a[3] and a[4] > a",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1378,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    points = list(map(int, input().split()))\n    return \" \".join(map(str, points)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1379,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,d=map(int,input().split())\n    a=list(map(int,input().split())\n    days=[]\n    for i in range(1,m+1):\n        days.append(i//d)\n    for i in range(n):\n        if a[i]%d==0:\n            days[a[i]-1]+=1\n    days=list(set(days))\n    return len(days),' '.join(str(days)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1380,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    a=list(map(int,input().split())\n    p=0\n    for i in range(n-1):\n        if a[i+1]-a[i]!=k:\n            p+=1\n    if a[n-1]-a[n-2]!=k:\n        p+=1\n    if p==0:\n        return 0\n    else:\n        return p\n    for i in range(p):\n        if a[i+1]-a[i]!=k:\n            print(\"+\",i+1,a[i+1]-a[i]-k)\n        else:\n            print(\"-\",i+1,a[i+1]-a[i]-k)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1381,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k, n, s, p = map(int, input().split())\n    return (n * k) // s + (n * k % s > 0)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1382,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split(' ')))\n    edges = []\n    for i in range(m):\n        a, b = list(map(int, input().split(' '))\n        edges.append((a, b))\n    # Your code goes here\n    return t, w\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1383,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    a=list(map(int,input().split())\n    b=list(map(int,input().split())\n    x=0\n    for i in range(n):\n        if a[i]!=b[i]:\n            x=min(x,b[i]-a[i])\n    return x\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1384,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = list(map(int, input().split()))\n    count = 0\n    max_count = 0\n    for i in range(n):\n        if s[i] == 1:\n            count += 1\n            max_count = max(max_count, count)\n        else:\n            count = 0\n    return max_count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1385,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input();\n    lexemes=[]\n    lexeme=\"\"\n    in_quotes=False\n    for i in range(len(s)):\n        if s[i]=='\"':\n            in_quotes=not in_quotes\n        elif s[i]==' ' and not in_quotes:\n            if lexeme!=\"\":\n                lexemes.append(lexeme)\n                lexeme=\"\"\n        else:\n            lexeme+=s[i]\n    if lexeme!=\"\":\n        lexemes.append(lexeme)\n    for lexeme in lexemes:\n        print(f\"<{lexeme}>\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1386,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x,y=map(int,input().split())\n    if x==1 or y==1:\n        return 1\n    elif x==2 and y==2:\n        return 16\n    elif x==2 and y==3:\n        return 16\n    elif x==3 and y==2:\n        return 16\n    elif x==3 and y==3:\n        return 16\n    elif x==4 and y==2:\n        return 64\n    elif x==4 and y==3:\n        return 64\n    elif x==3 and y==4:\n        return 64\n    elif x==4 and y==4:\n        return 64\n    elif x==5 and y==2:\n        return 160\n    elif x==5 and y==3:\n        return 160\n    elif x==5 and y==4:\n        return 160\n    elif x==6 and y==2:\n        return 160\n    elif x==6 and y==3:\n        return 160\n    elif x==6 and y==4:\n        return 160\n    elif x==7 and y==2:\n        return 160\n    elif x==7 and y==3:\n        return 160\n    elif x==7 and y==4:\n        return 160\n    elif x==8 and y==2:\n        return 160\n    elif x==8 and y==3:\n        return 160\n    elif x==8 and y==4:\n        return 160\n    elif x==9 and y==2:\n        return 160\n    elif x==9 and y==3:\n        return 160\n    elif x==9 and y==4:\n        return 160\n    elif x==10 and y==2:\n        return 160\n    elif x==10 and y==3:\n        return 160\n    elif x==10 and y==4:\n        return 160\n    elif x==11 and y==2:\n        return 160\n    elif x==11 and y==3:\n        return ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1387,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, t = map(int, input().split())\n    a = list(map(int, input().split()))\n    visited = [False] * (n + 1)\n    visited[1] = True\n    for i in range(n - 1):\n        if visited[i + 1]:\n            visited[i + a[i]] = True\n    return \"YES\" if visited[t] else \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1388,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    nodes = []\n    for i in range(N):\n        a, b, c = map(int, input().split())\n        nodes.append((a, b, c))\n    edges = []\n    for i in range(N-1):\n        u, v = map(int, input().split())\n        edges.append((u, v))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1389,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    feature = [input() for _ in range(n)]\n    prefix_sum = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            prefix_sum[i][j] = prefix_sum[i - 1][j] + prefix_sum[i][j - 1] - prefix_sum[i - 1][j - 1] + int(feature[i - 1][j - 1] == 'W')\n    min_operations = 0\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            min_operations += prefix_sum[i][j]\n    return min_operations\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1390,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    f = list(map(int, input().split())\n    f.sort()\n    return f[-1] - f[0]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1391,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,a=readn()#map(int,input().split())\n    b=readn()#map(int,input().split())\n    p=readn()#map(int,input().split())\n    b=sorted(b)\n    p=sorted(p)\n    r=0\n    s=0\n    for i in range(n):\n        if b[i]+a>=p[0]:\n            r+=1\n            a+=b[i]-p[0]\n            p.pop(0)\n    return r,a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1392,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(input())\n    count = 0\n    for i in range(n):\n        for j in range(len(a[i])):\n            if int(a[i][j]) <= k:\n                count += 1\n            else:\n                break\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1393,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    i1 = input()\n    i2 = input()\n    count_yay = 0\n    count_whoops = 0\n    for i in range(len(i1)):\n        if i1[i] == i2[i]:\n            count_yay += 1\n        else:\n            count_whoops += 1\n    return count_yay, count_whoops\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1394,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    s_prime = \"\"\n    for i in range(len(s)):\n        if s[i] == \"a\":\n            s_prime += s[i]\n        else:\n            s_prime += s[i]\n    if len(s) == len(s_prime):\n        return \":( \"\n    else:\n        return s_prime\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1395,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=input()\n    m=input()\n    min_rem=float('inf')\n    for i in range(len(n)):\n        temp=n[i:]+n[:i]\n        if int(temp)%m<min_rem:\n            min_rem=int(temp)%m\n    return min_rem\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1396,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k, x = input().split()\n    n, k, x = int(n), int(k), int(x)\n    balls = list(map(int, input().split()))\n    max_balls = 0\n    for i in range(n):\n        if balls[i] == x:\n            count = 1\n            j = i+1\n            while j < n and balls[j] == x:\n                count += 1\n                j += 1\n            if count >= 3:\n                max_balls += count\n            i = j\n    return max_balls\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1397,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R=lambda:list(map(int,input().split()))\n    n,m=R()\n    edges=[]\n    for i in range(m):\n        a,b=R()\n        edges.append((a,b) if a<b else (b,a))\n    edges=sorted(edges)\n    ans=[]\n    for i in range(m):\n        for j in range(i+1,m):\n            if edges[i][1]<edges[j][0]:\n                ans.append(edges[i])\n                ans.append(edges[j])\n                break\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1398,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    ans=n=int(input())\n    c=list(map(int,input().split())\n    c.sort()\n    if c[0]*2>=c[-1]:\n        return 0\n    else:\n        return n-2\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1399,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input());\n    segments=[]\n    for i in range(n):\n        segments.append(list(map(int,input().split()))\n    points=set()\n    for i in range(n):\n        for j in range(i+1,n):\n            if segments[i][0]==segments[j][0] and segments[i][1]==segments[j][1]:\n                points.add((segments[i][0],segments[i][1]));\n                points.add((segments[j][2],segments[j][3]));\n            elif segments[i][0]==segments[j][2] and segments[i][1]==segments[j][3]:\n                points.add((segments[i][0],segments[i][1]));\n                points.add((segments[j][2],segments[j][3]));\n            elif segments[i][0]==segments[j][2] and segments[i][1]==segments[j][3]:\n                points.add((segments[i][0],segments[i][1]));\n                points.add((segments[j][2],segments[j][3]));\n            elif segments[i][2]==segments[j][0] and segments[i][3]==segments[j][1]:\n                points.add((segments[i][2],segments[i][3]));\n                points.add((segments[j][0],segments[j][1]));\n            elif segments[i][2]==segments[j][2] and segments[i][3]==segments[j][3]:\n                points.add((segments[i][2],segments[i][3]));\n                points.add((segments[j][0],segments[j][1]));\n            elif segments[i][0]==segments[j][0] and segments[i][1]==segments[j][1]:\n                points.add((segments[i][0],segments[i][1]));\n                points.add((segments[j][2],segments[j][3]));\n            elif segments[i][0]==segments",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1400,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, T = list(map(int, input().split()))\n    t = list(map(int, input().split())\n    p = 0\n    q = 1\n    for i in range(n):\n        p += (i+1) * (t[i] + 1) * (2**i)\n        q += 2**i\n    return p * q**-1 % (10**9 + 7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1401,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    edges=[]\n    for i in range(n-1):\n        p,c=map(int,input().split())\n        edges.append((p,c)\n    # Write your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1402,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    w = input()\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if s[i] > w[i] and s[j] < w[j]:\n                count += 1\n    return count % (10**9 + 7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1403,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, K = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    count = 0\n    for i in range(n):\n        if a[i] > a[i+1] + K:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1404,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 1:\n        return 1\n    elif n == 2:\n        if a[0] == -1:\n            return 200\n        else:\n            return 1\n    else:\n        dp = [0] * 201\n        dp[0] = 1\n        for i in range(1, 201):\n            dp[i] = 1\n        for i in range(1, n):\n            if a[i] == -1:\n                for j in range(1, 201):\n                    dp[j] += dp[j-1]\n            else:\n                for j in range(a[i], 201):\n                    dp[j] += dp[j-1]\n        return dp[200] % 998244353\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1405,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = Counter(map(int, input().split()))\n    n = len(s)\n    if n < 2:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        fib = [0, 1]\n        while fib[-1] + fib[-2] < max(s):\n            fib.append(fib[-1] + fib[-2])\n        for i in range(len(fib) - 1, -1, -1):\n            if fib[i] in s:\n                s[fib[i]] -= 1\n                if s[fib[i]] == 0:\n                    del s[fib[i]]\n        return len(fib)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1406,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k,d=map(int,input().split())\n    if n>k:\n        return -1\n    else:\n        for i in range(d):\n            for j in range(n):\n                print(j%k+1,end=\" \")\n            print()\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1407,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    matrix = []\n    for i in range(n):\n        matrix.append(list(map(int, input().split()))\n    min_moves = float('inf')\n    for i in range(n):\n        for j in range(m):\n            for k in range(m):\n                if matrix[i][j] % 2 == 0:\n                    matrix[i][j] += 1\n                    min_moves = min(min_moves, min_moves)\n                else:\n                    continue\n    for i in range(m):\n        for k in range(n):\n            if matrix[k][i] % 2 == 0:\n                matrix[k][i] += 1\n                min_moves = min(min_moves, min_moves)\n            else:\n                continue\n    for i in range(n):\n        if all(is_prime(matrix[i]):\n            return 0\n    for j in range(m):\n        if all(is_prime(matrix[k][j] for k in range(n)):\n            return 0\n    return min_moves\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1408,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    books = []\n    for i in range(n):\n        t, w = map(int, input().split())\n        books.append((t, w))\n    books.sort(key=lambda x: x[0])\n    total_thickness = 0\n    for i in range(n):\n        if books[i][0] == 1:\n            total_thickness += books[i][1]\n        else:\n            break\n    return total_thickness\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1409,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    y = list(map(int, input().split())\n    count = 0\n    for i in range(n):\n        if y[i] >= k:\n            count += 1\n    return count // 3\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1410,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    colors = [list(map(int, input().split())) for _ in range(3)]\n    adj_list = []\n    for _ in range(n-1):\n        u, v = map(int, input().split())\n        adj_list.append((u, v))\n        adj_list.append((v, u))\n    adj_list.sort()\n    dp = [[float('inf') for _ in range(3)] for _ in range(n)]\n    dp[0] = [0, 0, 0]\n    for i in range(n-1):\n        u, v = adj_list[i]\n        for j in range(3):\n            for k in range(3):\n                dp[v][j] = min(dp[v][j], dp[u][(j+k)%3]+colors[j][v])\n    min_cost = float('inf')\n    for i in range(n):\n        min_cost = min(min_cost, min(dp[i])+colors[0][i])\n    if min_cost == float('inf'):\n        print(-1)\n    else:\n        print(min_cost)\n        colors[0].append(0)\n        colors[1].append(1)\n        colors[2].append(2)\n        colors = [colors[i][:n] for i in range(3)]\n        colors = [colors[i][:n] for i in range(3)]\n        colors = [colors[i][:n] for i in range(3)]\n        for i in range(n):\n            for j in range(3):\n                if dp[i][j] == min_cost-colors[j][i]:\n                    print(colors[j][i], end=' ')\n        print()\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1411,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,s = list(map(int,input().split()))\n    pizza_types = []\n    for i in range(n):\n        pizza_types.append(list(map(int,input().split()))\n    total_happiness = 0\n    for i in range(n):\n        total_happiness += pizza_types[i][0]*pizza_types[i][1]\n        total_happiness += pizza_types[i][0]*pizza_types[i][2]\n    return total_happiness\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1412,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = [int(x) for x in input().split()]\n    coupons = []\n    for i in range(n):\n        l, r = [int(x) for x in input().split()]\n        coupons.append((l, r))\n    products = set()\n    for coupon in coupons:\n        for i in range(coupon[0], coupon[1]+1):\n            products.add(i)\n    products = list(products)\n    products.sort()\n    if len(products) < k:\n        return 0\n    else:\n        return products[-k]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1413,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=input()\n    count=0\n    for i in range(n):\n        for j in range(i,n):\n            if int(s[i:j+1])%2==0:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1414,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    table = []\n    for i in range(n):\n        table.append(input())\n    max_count = 0\n    for i in range(n):\n        for j in range(m):\n            if table[i][j] == 'D':\n                count = 0\n                for k in range(4):\n                    x, y = i, j\n                    for l in range(4):\n                        if k == 0:\n                            x += 1\n                        elif k == 1:\n                            y += 1\n                        elif k == 2:\n                            x -= 1\n                        else:\n                            y -= 1\n                        if 0 <= x < n and 0 <= y < m and table[x][y] == input_string[l]:\n                            count += 1\n                        else:\n                            break\n                    if count == 4:\n                        max_count = max(max_count, count)\n    if max_count == 0:\n        print(\"Poor Dima!\")\n    elif max_count == 4:\n        print(\"Poor Inna!\")\n    else:\n        print(max_count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1415,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x, y, x0, y0 = list(map(int, input().split(' ')))\n    s = input()\n    x_max = x\n    y_max = y\n    x_min = 0\n    y_min = 0\n    x_current = x0\n    y_current = y0\n    result = [0] * (len(s) + 1)\n    result[0] = 1\n    for i in range(len(s)):\n        if s[i] == 'L':\n            y_current -= 1\n        elif s[i] == 'R':\n            y_current += 1\n        elif s[i] == 'U':\n            x_current -= 1\n        elif s[i] == 'D':\n            x_current += 1\n        if x_current < x_min or x_current > x_max or y_current < y_min or y_current > y_max:\n            result[i+1] = 0\n            break\n        else:\n            result[i+1] = result[i] + 1\n    print(' '.join(map(str, result))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1416,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,w=map(int,input().split())\n    a=list(map(int,input().split())\n    max_water=0\n    for i in range(n):\n        max_water+=a[i]\n    if max_water>w:\n        return w\n    else:\n        return max_water\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1417,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    p=n=int(input())\n    n=10**6\n    mod=998244353\n    count=0\n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            count+=1\n    return count%mod\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1418,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = [0]*n\n    for i in range(2,n+1):\n        a[i-1] = i\n    for i in range(2,n):\n        if i*i <= n:\n            for j in range(i*i,n+1,i):\n                if a[i-1] == a[j-1]:\n                    a[j-1] += 1\n    for i in range(2,n):\n        if a[i-1] == a[i]:\n            a[i] += 1\n    return a[1:]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1419,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    words = input_string.split()\n    width = 0\n    for word in words:\n        if '-' in word:\n            width += len(word.split('-')[0] + word.split('-')[1])\n        else:\n            width += len(word)\n    return width\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1420,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,l=list(map(int,input().split()))\n    a=list(map(int,input().split())\n    a.sort()\n    d=0\n    for i in range(n):\n        if a[i]-d>=0 and a[i]+d<=l:\n            d=max(d,a[i]+d)\n    return d\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1421,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    edges = []\n    for i in range(n-1):\n        u, v = map(int, input().split())\n        edges.append((u, v))\n    # Write your code here\n    return \"Impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1422,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=[i for i,j in enumerate(input(),1) if j=='1']\n    m=int(input())\n    if len(a)<m:\n        print(\"NO\")\n        return\n    if m==1:\n        print(\"YES\")\n        print(a[0])\n        return\n    if m==2:\n        if a[0]!=a[1]:\n            print(\"YES\")\n            print(a[0],a[1])\n        else:\n            print(\"NO\")\n        return\n    for i in range(len(a)-1):\n        if a[i]!=a[i+1]:\n            print(\"YES\")\n            print(a[i],a[i+1],a[i],a[i+1])\n            return\n    print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1423,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R= lambda: list(map(int,input().split()))\n    n,l,r=R()\n    a=R()\n    p=R()\n    if len(set(a)!=n:\n        return \"-1\"\n    for i in range(n):\n        if p[i]!=a.count(a[i]):\n            return \"-1\"\n    b=[]\n    for i in range(n):\n        for j in range(p[i]):\n            b.append(r)\n        r-=1\n    for i in range(n):\n        b[i]=r+1-a[i]\n    return b\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1424,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k = [int(x) for x in input().split()]\n    players = []\n    for i in range(m+1):\n        players.append(int(input()))\n    count = 0\n    for i in range(m):\n        for j in range(i+1,m):\n            binary_i = bin(players[i])[2:]\n            binary_j = bin(players[j])[2:]\n            diff = 0\n            for x,y in zip(binary_i,binary_j):\n                if x!=y:\n                    diff+=1\n            if diff<=k:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1425,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    if n==1:\n        print(\"YES\")\n        print(a[0])\n        return\n    if n==2:\n        if a[0]<a[1]:\n            print(\"YES\")\n            print(a[0],a[1])\n        else:\n            print(\"YES\")\n            print(a[1],a[0])\n        return\n    for i in range(n):\n        if a[i]<sum(a[i-1:i+2]):\n            continue\n        else:\n            print(\"NO\")\n            return\n    print(\"YES\")\n    for i in range(n):\n        if i==0:\n            print(a[n-1],end=\" \")\n        elif i==n-1:\n            print(a[0],end=\" \")\n        else:\n            print(a[i],end=\" \")\n# Test your code with the examples\ninput_string = \"3\\n2 4 3\"\nsolution(input_string)\ninput_string = \"5\\n1 2 3 4 4\"\nsolution(input_string)\ninput_string = \"3\\n13 8 5\"\nsolution(input_string)\ninput_string = \"4\\n1 10 100 100\"\nsolution(input_string) ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1426,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    edges=[]\n    for i in range(m):\n        u,v=map(int,input().split())\n        edges.append((u,v))\n    s,t=map(int,input().split())\n    graph={}\n    for i in range(1,n+1):\n        graph[i]=[]\n    for u,v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    visited=[False]*(n+1)\n    visited[s]=True\n    queue=[]\n    queue.append(s)\n    count=0\n    while queue:\n        count+=1\n        for i in range(len(queue)):\n            node=queue.pop(0)\n            for neighbor in graph[node]:\n                if not visited[neighbor]:\n                    visited[neighbor]=True\n                    queue.append(neighbor)\n                    if neighbor==t:\n                        return count\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1427,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input_string.split()))\n    a.sort()\n    b = [1] * n\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] * b[i] == a[j] * b[j]:\n                b[j] = a[i] * b[i]\n    return sum(b) % (10**9 + 7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1428,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,C=map(int,input().split())\n    D=[]\n    for i in range(C):\n        D.append(list(map(int,input().split()))\n    c=list(map(int,input().split())\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1429,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,s=input().split()\n    N=int(N)\n    count=0\n    for i in range(N):\n        for j in range(i+1,N+1):\n            substring=s[i:j]\n            if len(set(substring)==2:\n                if substring[0]=='A' and substring[1]=='T' or substring[0]=='T' and substring[1]=='A' or substring[0]=='C' and substring[1]=='G' or substring[0]=='G' and substring[1]=='C':\n                    count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1430,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,K=map(int,input().split())\n    S=list(input())\n    max_count=0\n    count=0\n    for i in range(N):\n        if S[i]=='1':\n            count+=1\n            max_count=max(max_count,count)\n        else:\n            count=0\n    return max_count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1431,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    a=list(map(int,input_string.split()))\n    for i in range(1,N+1):\n        if a.count(1)%2!=a.count(0)%2:\n            return -1\n        else:\n            return 1\n    return 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1432,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    A = list(map(int, input_string.split()))\n    result = []\n    for i in range(N):\n        result.append(2*A[i])\n    for i in range(N):\n        if i == 0:\n            result[i] += A[N-1]\n        else:\n            result[i] += result[i-1]\n    for i in range(N):\n        result[i] -= A[i]\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1433,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    plan = []\n    for i in range(n):\n        plan.append(list(map(int, input().split()))\n    good_positions = 0\n    for i in range(n):\n        for j in range(m):\n            if plan[i][j] == 0:\n                if i > 0 and plan[i-1][j] == 1:\n                    good_positions += 1\n                if i < n-1 and plan[i+1][j] == 1:\n                    good_positions += 1\n                if j > 0 and plan[i][j-1] == 1:\n                    good_positions += 1\n                if j < m-1 and plan[i][j+1] == 1:\n                    good_positions += 1\n    return good_positions\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1434,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    edges=[]\n    for i in range(n):\n        degree,s=map(int,input().split())\n        for j in range(n):\n            if degree==1 and s==0:\n                edges.append((i,j))\n            elif degree==2 and s==1:\n                for k in range(n):\n                    if k!=i:\n                        edges.append((i,k) if i<k else (k,i))\n    print(len(edges))\n    for edge in edges:\n        print(edge[0],edge[1])\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1435,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s,a,c=input(),1,1\n    for i in range(len(s)-1):\n        if s[i]==s[i+1]=='9':\n            c+=1\n        elif s[i]=='9' or s[i+1]=='9':\n            c+=1\n    return c\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1436,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    input_list = list(map(int, input().split()))\n    police_count = 0\n    untreated_crimes = 0\n    for i in input_list:\n        if i == -1:\n            untreated_crimes += 1\n        else:\n            police_count += i\n        if police_count == 0:\n            untreated_crimes += 1\n        police_count = max(0, police_count - 1)\n    return untreated_crimes\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1437,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s,ans=input(),1\n    for i in range(len(s)):\n        for j in range(i+1,len(s)):\n            ans=(ans*(ord(s[i])&ord(s[j]))%(10**9+7)**2)%(10**9+7)\n    return ans\nprint(solution(input())) ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1438,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    a=list(map(int,input().split())\n    b=list(map(int,input().split())\n    max_cookies=0\n    for i in range(n):\n        if a[i]<=b[i]:\n            max_cookies+=b[i]//a[i]\n        else:\n            max_cookies+=b[i]//a[i]+1\n    return max_cookies\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1439,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    a = list(map(int, input().split())\n    for i in range(n):\n        if sum(a) % m == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1440,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,l,ans,p=int(input()),[*map(int,input().split())][::-1],0,0\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if l[i]+l[j]+l[k]>0:\n                    ans+=1\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1441,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    throws = list(map(int, input().split()))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1442,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    d,p,q=list(input().split(' '))\n    d,p,q=int(d),int(p),int(q)\n    n=int(input())\n    orders=[]\n    for i in range(n):\n        orders.append([input().split(' ')])\n    orders.sort(key=lambda x:x[1],reverse=True)\n    buy_orders=[]\n    sell_orders=[]\n    for i in range(n):\n        if orders[i][0]=='B':\n            buy_orders.append(orders[i])\n        else:\n            sell_orders.append(orders[i])\n    buy_orders.sort(key=lambda x:x[1],reverse=True)\n    sell_orders.sort(key=lambda x:x[1])\n    for i in range(len(buy_orders)):\n        if i<len(buy_orders)-1 and buy_orders[i][1]==buy_orders[i+1][1]:\n            buy_orders[i][2]=int(buy_orders[i][2])+int(buy_orders[i+1][2])\n            del buy_orders[i+1]\n    for i in range(len(sell_orders)):\n        if i<len(sell_orders)-1 and sell_orders[i][1]==sell_orders[i+1][1]:\n            sell_orders[i][2]=int(sell_orders[i][2])+int(sell_orders[i+1][2])\n            del sell_orders[i+1]\n    for i in range(len(buy_orders)):\n        if i<s:\n            print('B',buy_orders[i][1],buy_orders[i][2])\n    for i in range(len(sell_orders)):\n        if i<s:\n            print('S',sell_orders[i][1],sell_orders[i][2])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1443,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    l=list(map(int,input().split())\n    s=input()\n    time=0\n    stamina=0\n    for i in range(n):\n        if s[i]=='G':\n            if i==0:\n                time+=5*l[i]\n                stamina+=l[i]\n            else:\n                if stamina>=0:\n                    time+=5*l[i]\n                    stamina+=l[i]\n                else:\n                    time+=3*l[i]\n                    stamina+=l[i]\n        elif s[i]=='W':\n            if stamina>=0:\n                time+=3*l[i]\n                stamina+=l[i]\n            else:\n                time+=5*l[i]\n                stamina+=l[i]\n        else:\n            if stamina>=2:\n                time+=10*l[i]\n                stamina-=2\n            else:\n                time+=5*l[i]\n                stamina+=l[i]\n    return time\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1444,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k = map(int, input_string.split())\n    x = list(map(int, input_string.split()))\n    x = x[1:]\n    x.sort()\n    x = x[:k]\n    return x\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1445,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    cubes = list(map(int, input().split()))\n    for i in range(n):\n        if i <= n - i - 1:\n            cubes[i], cubes[n - i - 1] = cubes[n - i - 1], cubes[i]\n    return \" \".join(map(str, cubes)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1446,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m, k = map(int, input_string.split())\n    c = list(map(int, input().split()))\n    bacteria = [[] for _ in range(k)]\n    for i in range(k):\n        bacteria[i] = [0] * n\n    for _ in range(m):\n        u, v, x = map(int, input().split())\n        bacteria[u-1][v-1] = x\n        bacteria[v-1][u-1] = x\n    for i in range(k):\n        for j in range(k):\n            if i == j:\n                bacteria[i][j] = 0\n    for i in range(k):\n        for j in range(k):\n            if bacteria[i][j] == 0:\n                for l in range(k):\n                    if bacteria[i][l] != 0 and bacteria[l][j] != 0:\n                        bacteria[i][j] = min(bacteria[i][j], bacteria[i][l] + bacteria[l][j])\n                        bacteria[j][i] = bacteria[i][j]\n    for i in range(k):\n        for j in range(k):\n            if bacteria[i][j] == 0:\n                bacteria[i][j] = -1\n    print(\"Yes\")\n    for row in bacteria:\n        print(\" \".join(map(str, row))\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1447,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    if n==1:\n        return 1.0\n    else:\n        return (1/n)*(1+(m-1)/(m*n)**2)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1448,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, d = list(map(int, input().split()))\n    m = int(input())\n    result = []\n    for i in range(m):\n        x, y = list(map(int, input().split())\n        if x >= 0 and x <= n and y >= 0 and y <= n:\n            if x <= d or x >= n - d or y <= d or y >= n - d:\n                result.append(\"YES\")\n            else:\n                result.append(\"NO\")\n        else:\n            result.append(\"NO\")\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1449,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    y=lambda:[*map(int,input().split())]\n    t=y()[0]\n    for i in range(t):\n        n,k=y()\n        a=y()\n        if k<n:\n            print(-1)\n        else:\n            print(k)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1450,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    n = len(s)\n    for i in range(n):\n        if s[i] == '0' and s[i+1] == '1':\n            s = s[:i] + '1' + s[i+1:]\n        elif s[i] == '1' and s[i+1] == '2':\n            s = s[:i] + '2' + s[i+1:]\n    return s\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1451,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    numbers = list(map(int, input().split())\n    count = 0\n    for num in numbers:\n        if sum(1 for digit in str(num) if digit in ['4', '7']) <= k:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1452,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    H, W = list(map(int, input().split()))\n    R = list(map(int, input().split())\n    C = list(map(int, input().split())\n    MOD = 100000007 * 10**9 + 7\n    def count(r, c):\n        if r == 0 or c == 0:\n            return 1\n        return (count(r-1, c) + count(r, c-1)) % MOD\n    return count(R[0], C[0])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1453,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=[int(s) for s in input().split()]\n    a=[int(s) for s in input().split()]\n    x=[0]*(n+1)\n    for i in range(1,n+1):\n        for j in range(1,m+1):\n            x[i]=min(x[i],x[i-j]+a[i-1]*j)\n    return x[1:]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1454,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    a=[]\n    for i in range(n):\n        a.append(list(map(int,input().split()))\n    for i in range(n):\n        for j in range(m):\n            if a[i][j]==0:\n                a[i][j]=1\n    for i in range(n):\n        for j in range(m):\n            if i>0 and a[i][j]==0:\n                a[i][j]=max(a[i-1][j],a[i][j-1])+1\n            elif j>0 and a[i][j]==0:\n                a[i][j]=max(a[i][j-1],a[i-1][j])+1\n    for i in range(n):\n        for j in range(m):\n            if i<n-1 and a[i][j]==0:\n                a[i][j]=max(a[i+1][j],a[i][j-1])+1\n            elif j<m-1 and a[i][j]==0:\n                a[i][j]=max(a[i][j+1],a[i-1][j])+1\n    for i in range(n):\n        for j in range(m):\n            if a[i][j]==0:\n                return -1\n    return sum(sum(a)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1455,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    m = 1\n    while True:\n        if n <= m * (m - 1) + 1:\n            break\n        m += 1\n    for i in range(1, n + 1):\n        r = (i - 1) // m + 1\n        c = (i - 1) % m + 1\n        print(r, c)\n    return m\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1456,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    board = [list(input()) for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 'o':\n                piece_pos = (i, j)\n                break\n    else:\n        piece_pos = None\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1457,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    p = input()\n    count = 0\n    for i in range(len(s)-len(p)+1):\n        if s[i:i+len(p)] == p:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1458,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=input()\n    for i in range(n):\n        for j in range(i+1,n):\n            if s[i:j]<s[j:i:-1]:\n                print(\"YES\")\n                print(i+1,j+1)\n                return\n    print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1459,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    distances = list(map(int, input().split()))\n    s, t = map(int, input().split())\n    if s == t:\n        return 0\n    if s > t:\n        s, t = t, s\n    return min(distances[s-1:t] + distances[:s-1])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1460,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    k=0\n    for i in range(n):\n        for j in range(n):\n            if i==0 or j==0 or i==n-1 or j==n-1:\n                print(i,j)\n                k+=1\n            elif i%2==0 and j%2==0:\n                print(i,j)\n                k+=1\n            elif i%2!=0 and j%2!=0:\n                print(i,j)\n                k+=1\n    print(k)\n    return k\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1461,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, pos  = list(map(int, input().split()))\n    f = list(map(int, input().split())\n    w = list(map(int, input().split())\n    for i in range(n):\n        s = 0\n        m = float('inf')\n        for j in range(pos):\n            s += w[j]\n            if w[j] < m:\n                m = w[j]\n        print(s, m)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1462,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    cards=list(input())\n    count=0\n    for i in set(cards):\n        count+=cards.count(i)*(cards.count(i)-1)\n    return count*k//2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1463,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    matrix = []\n    for i in range(n):\n        row = list(map(int, input().split()))\n        matrix.append(row)\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                continue\n            found = False\n            for k in range(n):\n                if matrix[i][k] + matrix[k][j] == matrix[i][j]:\n                    found = True\n                    break\n            if not found:\n                return \"No\"\n    return \"Yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1464,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    titles=[]\n    for i in range(n):\n        titles.append(input())\n    for i in range(1,27):\n        for j in range(1,27):\n            if chr(i) not in titles:\n                for k in range(1,27):\n                    if chr(k) not in titles:\n                        if chr(i)+chr(j)+chr(k) not in titles:\n                            return chr(i)+chr(j)+chr(k)\n                        elif chr(i)+chr(j) not in titles:\n                            return chr(i)+chr(j)\n                        elif chr(i) not in titles:\n                            return chr(i)\n                        else:\n                            return \"a\"\n# Test your code with this input\ninput_string = \"\"\"5\nthreehorses\ngoodsubstrings\nsecret\nprimematrix\nbeautifulyear\"\"\"\nprint(solution(input_string)) # Output: j\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1465,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    if n%2!=0:\n        return -1\n    if k>n:\n        return -1\n    if input_string.count('L')==n or input_string.count('R')==n:\n        return -1\n    if input_string.count('L')==n//2 and input_string.count('R')==n//2:\n        return -1\n    if input_string.count('L')==n//2:\n        for i in range(k):\n            print(1,end=' ')\n            for j in range(n//2):\n                print(j+1,end=' ')\n            print()\n        return\n    if input_string.count('R')==n//2:\n        for i in range(k):\n            print(1,end=' ')\n            for j in range(n//2):\n                print(j+1,end=' ')\n            print()\n        return\n    if input_string.count('L')==n//2:\n        for i in range(k):\n            print(1,end=' ')\n            for j in range(n//2):\n                print(j+1,end=' ')\n            print()\n        return\n    if input_string.count('R')==n//2:\n        for i in range(k):\n            print(1,end=' ')\n            for j in range(n//2):\n                print(j+1,end=' ')\n            print()\n        return\n    if input_string.count('L')==n//2:\n        for i in range(k):\n            print(1,end=' ')\n            for j in range(n//2):\n                print(j+1,end=' ')\n            print()\n        return\n    if input_string.count('R')==n//2:\n        for i in range(k):\n            print(1,end=' ')\n            for j in range(n//2):\n                print(j+1,end=' ')\n            print()\n        return\n    if input_string.count('L')==n//2:\n        for i in range(k):\n            print(1,end=' ')\n            for j in range(n//2):\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1466,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k=list(map(int,input().split()))\n    graph=[]\n    for i in range(m):\n        x,y,w=list(map(int,input().split())\n        graph.append([x,y,w])\n    graph.sort(key=lambda x:x[2])\n    ans=[]\n    for i in range(m):\n        if len(ans)<k:\n            ans.append(i)\n        else:\n            break\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1467,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    readints=lambda:list(map(int, input().strip('\\\n    n=int(input())\n    a=list(map(int, input().strip().split()))\n    if n==1:\n        return 1\n    if n==2:\n        return -1\n    if n==3:\n        if a[0]^a[1]^a[2]==0 or a[0]^a[1]==0 or a[0]^a[2]==0 or a[1]^a[2]==0:\n            return -1\n        else:\n            return 3\n    else:\n        for i in range(n):\n            for j in range(i+1,n):\n                for k in range(j+1,n):\n                    if a[i]^a[j]^a[k]==0:\n                        return -1\n        return n\n    return 2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1468,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    hashtags=[]\n    for i in range(n):\n        hashtags.append(input())\n    hashtags.sort()\n    for i in range(n):\n        print(hashtags[i])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1469,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    L=int(input())\n    N=2*L\n    M=2*L-2\n    print(N,M)\n    for i in range(1,N):\n        print(i,i+1,0)\n    for i in range(1,L):\n        print(i,i+N,i)\n    for i in range(1,L):\n        print(i+N,i+1,i)\n    for i in range(1,L):\n        print(i,i+N,i)\n    for i in range(1,L):\n        print(i+N,i+1,i)\n    for i in range(1,L):\n        print(i,i+N,i)\n    for i in range(1,L):\n        print(i+N,i+1,i)\n    for i in range(1,L):\n        print(i,i+N,i)\n    for i in range(1,L):\n        print(i+N,i+1,i)\n    for i in range(1,L):\n        print(i,i+N,i)\n    for i in range(1,L):\n        print(i+N,i+1,i)\n    for i in range(1,L):\n        print(i,i+N,i)\n    for i in range(1,L):\n        print(i+N,i+1,i)\n    for i in range(1,L):\n        print(i,i+N,i)\n    for i in range(1,L):\n        print(i+N,i+1,i)\n    for i in range(1,L):\n        print(i,i+N,i)\n    for i in range(1,L):\n        print(i+N,i+1,i)\n    for i in range(1,L):\n        print(i,i+N,i)\n    for i in range(1,L):\n        print(i+N,i+1,i)\n    for i in range(1,L):\n        print(i,i+N,i)\n    for i in range(1,L):\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1470,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x=int(input())\n    if x==1:\n        return 0\n    elif x==2:\n        return 1\n    elif x==3:\n        return 2\n    elif x==4:\n        return 2\n    elif x==5:\n        return 3\n    elif x==6:\n        return 3\n    elif x==7:\n        return 3\n    elif x==8:\n        return 4\n    elif x==9:\n        return 4\n    elif x==10:\n        return 4\n    elif x==11:\n        return 5\n    elif x==12:\n        return 5\n    elif x==13:\n        return 6\n    elif x==14:\n        return 6\n    elif x==15:\n        return 6\n    elif x==16:\n        return 7\n    elif x==17:\n        return 7\n    elif x==18:\n        return 7\n    elif x==19:\n        return 8\n    elif x==20:\n        return 8\n    elif x==21:\n        return 8\n    elif x==22:\n        return 9\n    elif x==23:\n        return 9\n    elif x==24:\n        return 9\n    elif x==25:\n        return 10\n    elif x==26:\n        return 10\n    elif x==27:\n        return 10\n    elif x==28:\n        return 11\n    elif x==29:\n        return 11\n    elif x==30:\n        return 11\n    elif x==31:\n        return 12\n    elif x==32:\n        return 12\n    elif x==33:\n        return 12\n    elif x==34:\n        return 13\n    elif x==35:\n        return 13\n    elif x==36:\n        return 13\n    elif x==37:\n        return 14\n    elif x==38:\n        return 14\n    elif x==39:\n        return 14\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1471,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    edges = []\n    for i in range(N - 1):\n        u, v, w = map(int, input().split())\n        edges.append((u, v, w) if u < v else (v, u, w))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1472,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,X,Y=map(int,input().split())\n    result=[]\n    for i in range(1,N):\n        result.append(N-i)\n    result.append(N-X)\n    result.append(N-Y)\n    for i in result:\n        print(i)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1473,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    input_list=[]\n    for i in range(n):\n        a,b=map(int,input().split())\n        input_list.append([a,b])\n    output_list=[]\n    for i in range(n):\n        if input_list[i][0]==0:\n            output_list.append(input_list[i][1])\n            input_list.remove(input_list[i])\n            break\n    while input_list:\n        for i in range(len(input_list)):\n            if input_list[i][0]==output_list[-1]:\n                output_list.append(input_list[i][1])\n                input_list.remove(input_list[i])\n                break\n    return output_list\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1474,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    h = list(map(int, input().split()))\n    MOD = 10**9 + 7\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for j in range(i):\n            if h[i - 1] == h[j]:\n                dp[i] = (dp[i] + dp[j]) % MOD\n    return dp[n]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1475,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: map(int, input().split())\n    n, b, k, x = f()\n    a = list(f())\n    res = 1\n    for i in range(n):\n        res *= (a.count(a[i]) % x)\n        res %= x\n    return res % (10**9 + 7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1476,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 2\n    elif n == 5:\n        return 3\n    else:\n        return 6\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1477,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = [int(x) for x in input().split()]\n    tasks = [int(x) for x in input().split()]\n    dependencies = []\n    for _ in range(m):\n        dependencies.append(tuple(int(x) for x in input().split())\n    pass\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1478,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = input().split(',')\n    stack = []\n    level = 0\n    max_level = 0\n    for i in range(len(t)):\n        if t[i].isdigit():\n            level += int(t[i])\n            max_level = max(max_level, level)\n        else:\n            stack.append((t[i], level))\n            level -= int(t[i])\n    for i in range(max_level+1):\n        print(\" \".join([x[0] for x in stack if x[1] == i]))\n# Test your code with this input\nsolution(\"hello,2,ok,0,bye,0,test,0,one,1,two,2,a,0,b,0\")\n# Output:\n# 3\n# hello test one \n# ok bye two \n# a b \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1479,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k=map(int,input().split())\n    park=[]\n    for i in range(n):\n        park.append(list(input())\n    spiders=[]\n    for i in range(k):\n        x,y,d=map(int,input().split())\n        spiders.append((x,y,d)\n    for i in range(n):\n        for j in range(m):\n            if park[i][j]=='.':\n                park[i][j]=0\n            else:\n                park[i][j]=1\n    for spider in spiders:\n        x,y,d=spider\n        if d=='L':\n            park[x][y-1]=1\n        elif d=='R':\n            park[x][y+1]=1\n        elif d=='U':\n            park[x-1][y]=1\n        else:\n            park[x+1][y]=1\n    for i in range(m):\n        count=0\n        for j in range(n):\n            count+=park[j][i]\n        print(count,end=' ')\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1480,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    children=[int(x) for x in input().split()]\n    leader=children[0]\n    for i in range(k):\n        leader=children[(children.index(leader)+a_i)%n]\n        print(leader)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1481,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    board = []\n    for i in range(n):\n        board.append(list(input()))\n    for i in range(n):\n        for j in range(n):\n            count = 0\n            if board[i][j] == 'o':\n                if i > 0 and board[i-1][j] == 'o':\n                    count += 1\n                if i < n-1 and board[i+1][j] == 'o':\n                    count += 1\n                if j > 0 and board[i][j-1] == 'o':\n                    count += 1\n                if j < n-1 and board[i][j+1] == 'o':\n                    count += 1\n                if count % 2 == 0:\n                    continue\n                else:\n                    return \"NO\"\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1482,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    I=lambda:map(int,input().split())\n    n,k=I()\n    a=list(I())\n    a.sort()\n    for i in range(n):\n        for j in range(k):\n            print(a[i*n+j],end=\" \")\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1483,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    p=list(map(int,input().split())\n    for i in range(n):\n        p[i]=p[p[i]-1]\n    for i in range(n):\n        print(p[i+1])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1484,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        if a[i] == -1:\n            for j in range(1, k+1):\n                a[i] = j\n                count += 1\n    return count % 998244353\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1485,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    a = list(map(int, input().split())\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1486,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    x=list(map(int,input().split())\n    for i in range(n):\n        min_cost=max_cost=0\n        for j in range(n):\n            if i!=j:\n                if x[i]<x[j]:\n                    min_cost=max(min_cost,abs(x[i]-x[j]))\n                    max_cost=max(max_cost,abs(x[i]-x[j]))\n                else:\n                    min_cost=max(min_cost,abs(x[j]-x[i]))\n                    max_cost=max(max_cost,abs(x[j]-x[i]))\n        print(min_cost,max_cost)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1487,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s1 = input()\n    s2 = input()\n    n = len(s1)\n    if s1 == s2:\n        return s1\n    else:\n        for i in range(n):\n            if s1[i] != s2[i]:\n                s1 = s1[:i] + '1' + s1[i+1:]\n                s2 = s2[:i] + '1' + s2[i+1:]\n        return s1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1488,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    total_distance = 0\n    for i in range(n):\n        total_distance += abs(a[i] - a[i-1])\n    total_distance += abs(a[n-1] - 0)\n    return total_distance, n\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1489,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    points = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        points.append((x, y))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1490,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=(int(z) for z in input().split())\n    a=list(map(int,input().split())\n    a.sort()\n    i=0\n    j=n-1\n    k=0\n    while i<j:\n        if a[i]+a[j]<=m:\n            k+=1\n            i+=1\n            j-=1\n        else:\n            j-=1\n    print(k)\n    print(*a[:k+1])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1491,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    piles = list(map(int, input().split()))\n    piles.sort()\n    piles.reverse()\n    count = 0\n    for i in range(n):\n        if i % 2 == 0:\n            if piles[i] % 2 == 0:\n                count += piles[i]\n            else:\n                count += 1\n        else:\n            if piles[i] % 2 != 0:\n                count += piles[i]\n            else:\n                count += 1\n    return count // 2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1492,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    h,w=map(int,input().split())\n    matrix=[]\n    for i in range(h):\n        matrix.append(list(input()))\n    n=len(matrix)\n    m=len(matrix[0])\n    def dfs(i,j,t):\n        if i<0 or i>=n or j<0 or j>=m or matrix[i][j]!='X' or matrix[i][j]=='*':\n            return t\n        matrix[i][j]='*'\n        t=max(t,dfs(i-1,j,t),dfs(i+1,j,t),dfs(i,j-1,t),dfs(i,j+1,t),dfs(i-1,j-1,t),dfs(i-1,j+1,t),dfs(i+1,j-1,t),dfs(i+1,j+1,t),dfs(i,j-1,t))\n        return t\n    ans=0\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j]=='X':\n                ans=max(ans,dfs(i,j,0))\n    print(ans)\n    for i in range(n):\n        print(''.join(matrix[i]))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1493,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    chessboard = []\n    for i in range(n):\n        chessboard.append(list(input()))\n    for i in range(n):\n        for j in range(m):\n            if chessboard[i][j] == '.':\n                if i == 0 and j == 0:\n                    chessboard[i][j] = 'B'\n                elif i == 0 and j == m-1:\n                    chessboard[i][j] = 'W'\n                elif i == n-1 and j == 0:\n                    chessboard[i][j] = 'W'\n                elif i == n-1 and j == m-1:\n                    chessboard[i][j] = 'B'\n                elif i == 0:\n                    if chessboard[i][j-1] == 'B':\n                        chessboard[i][j] = 'W'\n                    else:\n                        chessboard[i][j] = 'B'\n                elif i == n-1:\n                    if chessboard[i][j-1] == 'W':\n                        chessboard[i][j] = 'B'\n                    else:\n                        chessboard[i][j] = 'W'\n                elif j == 0:\n                    if chessboard[i-1][j] == 'B':\n                        chessboard[i][j] = 'W'\n                    else:\n                        chessboard[i][j] = 'B'\n                elif j == m-1:\n                    if chessboard[i-1][j] == 'W':\n                        chessboard[i][j] = 'B'\n                    else:\n                        chessboard[i][j] = 'W'\n                else:\n                    if chessboard[i-1][j] == chessboard[i][j-1]:\n                        chessboard[i][j] = 'W'\n                    else:\n                        chessboard[i][j] = 'B'\n    for i in range(n):\n        print(''.join(chessboard[i]))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1494,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s, p = input(), input()\n    n = len(s)\n    m = len(p)\n    dp = [0] * (n + 1)\n    for i in range(n + 1):\n        dp[i] = [0] * (n + 1)\n    for i in range(n - m + 1):\n        if s[i:i + m] == p:\n            dp[i][i + m] = 1\n    for i in range(n - m - 1, -1, -1):\n        for j in range(i + m + 1, n + 1):\n            for k in range(i + 1, j):\n                if s[i:k] == p:\n                    dp[i][j] = max(dp[i][j], dp[k][j] + 1)\n                else:\n                    dp[i][j] = dp[i][j - 1]\n    ans = []\n    for i in range(n + 1):\n        ans.append(dp[0][i])\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1495,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    read = lambda: map(int, input().split())\n    n = next(read())\n    a = list(read())\n    a.sort()\n    return min(a[0] + a[-1], a[-1] + a[-2])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1496,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k, s = list(map(int, input().split()))\n    a = list(map(int, input().split())\n    b = list(map(int, input().split())\n    gadgets = []\n    for i in range(m):\n        t, c = list(map(int, input().split())\n        gadgets.append((t, c))\n    gadgets.sort(key=lambda x: x[1])\n    min_day = 0\n    burles_spent = 0\n    bought_gadgets = []\n    for i in range(n):\n        for gadget in gadgets:\n            if gadget[0] == 1:\n                if burles_spent + a[i] <= s:\n                    burles_spent += a[i]\n                    bought_gadgets.append((gadget[1], i+1))\n            elif gadget[0] == 2:\n                if burles_spent + b[i] <= s:\n                    burles_spent += b[i]\n                    bought_gadgets.append((gadget[1], i+1)\n            if len(bought_gadgets) == k:\n                return i+1\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1497,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    rows = []\n    for i in range(n):\n        rows.append(input())\n    max_clean = 0\n    for i in range(n):\n        count = 0\n        for j in range(n):\n            if rows[i][j] == '1':\n                count += 1\n        max_clean = max(max_clean, count)\n    return max_clean\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1498,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split())\n    servers=[]\n    for i in range(a):\n        servers.append(0)\n    for i in range(b):\n        t,k,d=map(int,input().split())\n        for j in range(t,t+d):\n            for l in range(k):\n                servers[l-1]+=1\n    for i in range(b):\n        t,k,d=map(int,input().split())\n        if servers[k-1]==0:\n            print(-1)\n        else:\n            print(sum(range(1,k+1))*k)\n            for j in range(t,t+d):\n                servers[j-1]+=k\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1499,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    if m > 4*n:\n        for i in range(1, m+1):\n            if i <= 2*n:\n                print(i, end=\" \")\n            else:\n                print(i, end=\" \")\n                if i % 2 == 0:\n                    print(i+n, end=\" \")\n                else:\n                    print(i-n, end=\" \")\n    else:\n        for i in range(1, m+1):\n            if i <= n:\n                print(i, end=\" \")\n            else:\n                print(i+n, end=\" \")\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1501,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = list(map(int, input().split()))\n    p = input()\n    subseq = list(map(int, input().split()))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1502,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    if n==0:\n        return 1\n    elif n==1:\n        return 2\n    elif n==2:\n        return 3\n    elif n==3:\n        return 4\n    elif n==4:\n        return 5\n    elif n==5:\n        return 6\n    elif n==6:\n        return 7\n    elif n==7:\n        return 8\n    elif n==8:\n        return 9\n    elif n==9:\n        return 10\n    elif n==10:\n        return 11\n    elif n==11:\n        return 12\n    elif n==12:\n        return 13\n    elif n==13:\n        return 14\n    elif n==14:\n        return 15\n    elif n==15:\n        return 16\n    else:\n        return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1503,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    neighbors = []\n    for i in range(m):\n        neighbors.append(list(map(int, input().split()))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1504,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n, k = map(int, input().split())\n        l1, r1 = map(int, input().split())\n        l2, r2 = map(int, input().split())\n        if k > (r1 - l1) * n + (r2 - l2) * n:\n            print(0)\n        else:\n            print(k - (r1 - l1) * n + (r2 - l2) * n)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1505,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    px, py, vx, vy, a, b, c, d = list(map(int, input().split(' ')))\n    if vx == 0:\n        vx = 1\n    if vy == 0:\n        vy = 1\n    v_len = (vx**2 + vy**2)**0.5\n    vx /= v_len\n    vy /= v_len\n    px += vx * a / 2\n    py += vy * a / 2\n    px2 = px + vx * c / 2\n    py2 = py + vy * c / 2\n    px3 = px + vx * (c + d) / 2\n    py3 = py + vy * (c + d) / 2\n    px4 = px + vx * (c + d)\n    py4 = py + vy * (c + d)\n    px5 = px + vx * (c + d - b) / 2\n    py5 = py + vy * (c + d - b) / 2\n    px6 = px + vx * (c + d - b - a) / 2\n    py6 = py + vy * (c + d - b - a) / 2\n    px7 = px + vx * (c + d - b - a)\n    py7 = py + vy * (c + d - b - a)\n    px8 = px + vx * (c + d - b - a - d) / 2\n    py8 = py + vy * (c + d - b - a - d) / 2\n    print(\"{:.9f} {:.9f}\".format(px, py))\n    print(\"{:.9f} {:.9f}\".format(px2, py2))\n    print(\"{:.9f} {:.9f}\".format(px3, py3))\n    print(\"{:.9f} {:.9f}\".format(px4, py4))\n    print(\"{:.9f} {:.9f}\".format(px5, py5))\n    print(\"{:.9f} {:.9f}\".format(px6, py6))\n    print(\"{:.9f} {:.9f}\".format(px",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1506,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input_string.split()))\n    M = 1\n    f = 0\n    for i in range(2, n+1):\n        if a[M] < a[i]:\n            f += a[M]\n            M = i\n    return f % (10**9 + 7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1507,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k= input().split()\n    n = int(n)\n    k = int(k)\n    guests = input()\n    doors = [0]*26\n    for i in guests:\n        doors[ord(i)-65] += 1\n    for i in range(26):\n        if doors[i] > 1:\n            return \"YES\"\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1508,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = sorted(input().split(), key=int)\n    a.reverse()\n    return \" \".join(map(str, a)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1509,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input()) + 1\n    a = list(map(int, input().split()))\n    result = 0\n    for l in range(1, n):\n        for r in range(l, n):\n            pass\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1510,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R = lambda: map(int, input().split())\n    n, m = R()\n    a = list(R())\n    b = list(R())\n    a.sort()\n    b.sort(reverse=True)\n    ans = 0\n    for i in range(min(n, m)):\n        ans += max(0, a[i] - b[i])\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1511,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k = map(int, input().split())\n    instructions = []\n    for i in range(n):\n        instructions.append(list(map(int, input().split()))\n    return solution(n, m, k, instructions)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1512,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    p = list(map(int, input().split()))\n    p.sort()\n    count = 0\n    for i in range(n):\n        if p[i] == i+1:\n            count += 1\n    if count == n:\n        return -1\n    else:\n        return p[count]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1513,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k=map(int,input().split())\n    broken_segments=list(map(int,input().split())\n    min_length=0\n    for i in range(n):\n        if i==0:\n            min_length+=broken_segments[i]-1\n        else:\n            min_length+=broken_segments[i]-broken_segments[i-1]\n    min_length=min_length+1\n    if k==1:\n        return min_length\n    else:\n        return min_length+k-1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1514,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    b_prime = list(map(int, input().split()))\n    c_prime = list(map(int, input().split())\n    b = []\n    c = []\n    for i in range(N-1):\n        b.append(min(b_prime[i], b_prime[i+1])\n        c.append(max(c_prime[i], c_prime[i+1])\n    for i in range(N-1):\n        if b[i] != b_prime[i] or c[i] != c_prime[i]:\n            return -1\n    a = []\n    for i in range(N):\n        if b[i] == b_prime[i]:\n            a.append(c[i])\n        else:\n            a.append(b[i])\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1515,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    p, k = map(int, input().split())\n    if p == 1:\n        return \"Impossible\"\n    if k == 1:\n        return \"1\" + \"0\" * (p - 1)\n    if k == 2:\n        return \"9\" + \"9\" * (p - 1)\n    if k == 3:\n        return \"9\" * (p - 1) + \"8\"\n    if k == 4:\n        return \"9\" * (p - 1) + \"6\"\n    if k == 5:\n        return \"9\" * (p - 1) + \"4\"\n    if k == 6:\n        return \"9\" * (p - 1) + \"2\"\n    if k == 7:\n        return \"9\" * (p - 1) + \"1\"\n    if k == 8:\n        return \"9\" * (p - 1) + \"0\"\n    if k == 9:\n        return \"9\" * p\n    else:\n        return \"Impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1516,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input_string.split()))\n    total = 0\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            a_str = str(a[i])\n            b_str = str(a[j])\n            if len(a_str) > len(b_str):\n                a_str, b_str = b_str, a_str\n            a_len = len(a_str)\n            b_len = len(b_str)\n            result = \"\"\n            for k in range(a_len):\n                result += a_str[k] + b_str[k]\n            if a_len < b_len:\n                result += b_str[a_len:]\n            total += int(result)\n    return total % 998244353\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1517,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                for l in range(1, n+1):\n                    if i != j and i != k and i != l and j != k and j != l and k != l:\n                        count += 1\n    return count % (10**9 + 7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1518,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    I = lambda : list(map(int,input().split()))\n    n = I()[0]\n    a = I()\n    a.sort()\n    k = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if is_prime(j-i+1):\n                a[i],a[j] = a[j],a[i]\n                k += 1\n                if k == 5*n:\n                    break\n    print(k)\n    for i in range(k):\n        print(i+1,n)\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1519,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, l ,a = map(int, input().split())\n    customers = []\n    for i in range(n):\n        t, l = map(int, input().split())\n        customers.append((t, l))\n    customers.sort(key=lambda x: x[0])\n    breaks = 0\n    current_time = 0\n    for customer in customers:\n        if customer[0] > current_time:\n            breaks += 1\n            current_time = customer[0] + customer[1]\n        else:\n            current_time = max(current_time + a, customer[0] + customer[1])\n    if current_time < l:\n        breaks += 1\n    return breaks\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1520,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    strings = []\n    for i in range(n):\n        strings.append(input())\n    product = strings[0]\n    for i in range(1, n):\n        product = multiplication(product, strings[i])\n    return beauty(product)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1521,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    p,n=map(int,input().split())\n    hash_table=[0]*p\n    for i in range(n):\n        x=int(input())\n        if hash_table[x%p]!=0:\n            print(i+1)\n            break\n        else:\n            hash_table[x%p]=1\n    else:\n        print(-1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1522,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    keys=input_string[1::2]\n    doors=input_string[::2]\n    keys_dict={}\n    for i in range(len(keys)):\n        keys_dict[keys[i]]=i+1\n    count=0\n    for i in range(n-1):\n        if doors[i]!=keys[i].lower():\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1523,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    a=list(map(int,input().split())\n    b=list(map(int,input().split())\n    a.sort()\n    b.sort()\n    ans=0\n    i=0\n    j=0\n    while i<n and j<k:\n        if a[i]==j+1:\n            i+=1\n            j+=1\n        else:\n            ans+=b[i]\n            i+=1\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1524,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    S = input()\n    N = len(S)\n    left_count = 0\n    right_count = 0\n    for i in range(N):\n        if S[i] == 'L':\n            left_count += 1\n        else:\n            right_count += 1\n    for i in range(10**100):\n        if i % 2 == 0:\n            left_count, right_count = right_count, left_count\n        else:\n            left_count, right_count = left_count, right_count\n    print(left_count, right_count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1525,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    h,w,k=map(int,input().split())\n    if k==1:\n        return 1\n    if k==w:\n        return 0\n    if k==2:\n        return (w-1)%1000000000\n    if k>w:\n        return 0\n    if k==w-1:\n        return (w-1)%100000000\n    if k==w-2:\n        return (w-2)%100000000\n    if k==w-3:\n        return (w-3)%100000000\n    if k==w-4:\n        return (w-4)%10000000\n    if k==w-5:\n        return (w-5)%10000000\n    if k==w-6:\n        return (w-6)%10000000\n    if k==w-7:\n        return (w-7)%10000000\n    if k==w-8:\n        return (w-8)%10000000\n    if k==w-9:\n        return (w-9)%10000000\n    if k==w-10:\n        return (w-10)%10000000\n    if k==w-11:\n        return (w-11)%10000000\n    if k==w-12:\n        return (w-12)%10000000\n    if k==w-13:\n        return (w-13)%10000000\n    if k==w-14:\n        return (w-14)%10000000\n    if k==w-15:\n        return (w-15)%10000000\n    if k==w-16:\n        return (w-16)%10000000\n    if k==w-17:\n        return (w-17)",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1526,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=list(map(int,input().split()))\n    A,B,C=a[0],a[1],a[2]\n    if A==B==C:\n        return 0\n    elif A==B:\n        return abs(C-A)\n    elif B==C:\n        return abs(A-B)\n    elif A==C:\n        return abs(B-A)\n    else:\n        return min(abs(A-B),abs(B-C),abs(C-A))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1527,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    H,W=map(int,input().split())\n    S=[]\n    for i in range(H):\n        S.append(list(input()))\n    start=goal=None\n    for i in range(H):\n        for j in range(W):\n            if S[i][j]=='.':\n                start=(i,j)\n                break\n    for i in range(H-1,-1,-1):\n        for j in range(W-1,-1,-1):\n            if S[i][j]=='.':\n                goal=(i,j)\n                break\n    queue=[]\n    queue.append(start)\n    visited=set()\n    visited.add(start)\n    while queue:\n        x,y=queue.pop(0)\n        if (x,y)==goal:\n            return len(visited)-1\n        for dx,dy in [(-1,0),(1,0),(0,-1),(0,1)]:\n            nx,ny=x+dx,y+dy\n            if 0<=nx<H and 0<=ny<W and S[nx][ny]=='.' and (nx,ny) not in visited:\n                queue.append((nx,ny)\n                visited.add((nx,ny)\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1528,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,X = map(int,input().split())\n    if X == 1:\n        return 1\n    elif X == 2:\n        return 2\n    else:\n        return 2*((2**(X-2)+1) - 1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1529,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    n = int(input())\n    for i in range(n):\n        sentence = input()\n        if sentence.endswith(\"lala.\") and not sentence.startswith(\"miao.\"):\n            print(\"Freda's\")\n        elif sentence.startswith(\"miao.\") and not sentence.endswith(\"lala.\"):\n            print(\"Rainbow's\")\n        else:\n            print(\"OMG>.< I don't know!\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1531,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    a.sort()\n    total=sum(a)\n    if len(a)<3:\n        return f\"{total} 0\"\n    else:\n        for i in range(1,len(a)-1):\n            if a[i]==a[0] and a[-1]==a[0]:\n                return f\"{total-a[0]-a[-1]} 2\"\n            elif a[i]==a[0] or a[-1]==a[0]:\n                return f\"{total-a[0]-a[-1]} 1\"\n            else:\n                return f\"{total} 0\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1532,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    S = set(range(1, n+1))\n    I = [0]*n\n    for k in range(2, n+1):\n        I[k-2] = 1\n        for subset in itertools.combinations(S, k):\n            gcd_max = 0\n            for i in range(k):\n                for j in range(i+1, k):\n                    gcd_max = max(gcd_max, math.gcd(subset[i], subset[j]))\n            I[k-2] = min(I[k-2], gcd_max)\n    return ' '.join(map(str, I)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1533,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    names = []\n    for i in range(n):\n        names.append(input())\n    for i in range(n):\n        if names[i] in names[:i]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1534,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    count_a = s.count('a')\n    count_b = s.count('b')\n    if count_a >= count_b:\n        return len(s)\n    else:\n        return count_a + count_b\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1535,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,x,y=list(map(int,input().split()))\n    stormtroopers=[]\n    for i in range(n):\n        xi,yi=list(map(int,input().split())\n        stormtroopers.append((xi,yi)\n    min_shots=float('inf')\n    for i in range(n):\n        for j in range(i+1,n):\n            xi,yi=stormtroopers[i]\n            xj,yj=stormtroopers[j]\n            if xi==xj:\n                shots=abs(yi-y)\n            elif yi==yj:\n                shots=abs(xi-x)\n            else:\n                slope=(yi-y)/(xi-x)\n                intercept=y-slope*x\n                shots=min(abs(yi-intercept)/slope,abs(yj-intercept)/slope)\n            min_shots=min(min_shots,shots)\n    return int(min_shots)+1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1536,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    points=[]\n    for i in range(n):\n        x,y,z=map(int,input().split())\n        points.append((x,y,z))\n    points.sort()\n    pairs=[]\n    for i in range(n):\n        for j in range(i+1,n):\n            if points[i][0]<points[j][0] and points[i][1]<points[j][1] and points[i][2]<points[j][2]:\n                pairs.append((i+1,j+1))\n    pairs.sort(key=lambda x:x[0])\n    return pairs\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1537,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    matrix = []\n    for i in range(n):\n        matrix.append(list(input()))\n    max_white_lines = 0\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 'B':\n                continue\n            else:\n                for x in range(i, i+k):\n                    for y in range(j, j+k):\n                        matrix[x][y] = 'B'\n                white_lines = 0\n                for row in range(n):\n                    if all(matrix[row][col] == 'W' for col in range(n)):\n                        white_lines += 1\n                for col in range(n):\n                    if all(matrix[row][col] == 'W' for row in range(n)):\n                        white_lines += 1\n                max_white_lines = max(max_white_lines, white_lines)\n    return max_white_lines\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1538,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    boxes=list(map(int,input().split())\n    visible_boxes=n\n    for i in range(n):\n        for j in range(n):\n            if boxes[i]<boxes[j]:\n                visible_boxes-=1\n    return visible_boxes\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1539,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: map(int, input().split())\n    n = next(f())\n    legs = list(f())\n    d = list(f())\n    legs.sort(reverse=True)\n    d.sort(reverse=True)\n    total_energy = sum(d)\n    max_leg = legs[0]\n    stable_legs = 0\n    for leg in legs:\n        if leg == max_leg:\n            stable_legs += 1\n        else:\n            break\n    if stable_legs >= n // 2:\n        return 0\n    else:\n        return total_energy - sum(d[:n - stable_legs])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1540,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R = lambda:map(int, input().split())\n    n, m, k = R()\n    a = [R() for _ in range(n)]\n    log = [R() for _ in range(k)]\n    res = [0]*n\n    for x, y in log:\n        for i in range(n):\n            if a[i][y-1] == 1:\n                res[i-1] += 1\n    return ' '.join(map(str, res)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1541,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    left_sum=0\n    right_sum=0\n    pivot=0\n    for i in range(len(s)):\n        if s[i]=='^':\n            pivot=i\n        elif s[i]=='=':\n            continue\n        elif s[i]=='1':\n            left_sum+=i-pivot\n            right_sum+=pivot-i\n        elif s[i]=='2':\n            left_sum+=i-pivot+1\n            right_sum+=pivot-i-1\n        elif s[i]=='3':\n            left_sum+=i-pivot+1\n            right_sum+=pivot-i+1\n        elif s[i]=='4':\n            left_sum+=i-pivot+2\n            right_sum+=pivot-i\n        elif s[i]=='5':\n            left_sum+=i-pivot+2\n            right_sum+=pivot-i+1\n        elif s[i]=='6':\n            left_sum+=i-pivot+2\n            right_sum+=pivot-i+2\n        elif s[i]=='7':\n            left_sum+=i-pivot+3\n            right_sum+=pivot-i\n        elif s[i]=='8':\n            left_sum+=i-pivot+3\n            right_sum+=pivot-i+1\n        elif s[i]=='9':\n            left_sum+=i-pivot+3\n            right_sum+=pivot-i+2\n    if left_sum==right_sum:\n        return \"balance\"\n    elif left_sum>right_sum:\n        return \"left\"\n    else:\n        return \"right\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1542,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    prices = list(map(int, input().split()))\n    q = int(input())\n    days = list(map(int, input().split())\n    result = []\n    for day in days:\n        count = 0\n        for price in prices:\n            if price <= day:\n                count += 1\n        result.append(count)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1543,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    cities=[]\n    for i in range(n):\n        x,c=input().split()\n        cities.append((int(x),c) if c=='B' else (int(x),'D') if c=='P' else (int(x),'R'))\n    cables=[]\n    for i in range(n-1):\n        if cities[i][1]=='D' or cities[i+1][1]=='D':\n            cables.append((cities[i][0],cities[i+1][0]) if cities[i][1]!='R' else (cities[i+1][0],cities[i][0]))\n    cables.sort()\n    total_length=0\n    for i in range(len(cables)):\n        total_length+=abs(cables[i][0]-cables[i][1])\n    return total_length\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1544,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    return 24\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1545,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    cin=lambda: list(map(int,input().split()))\n    n=int(input())\n    s=input()\n    a=cin()\n    a_dict={chr(i):a[i-97] for i in range(97,123)}\n    max_len=0\n    min_len=n\n    for i in range(n):\n        max_len=max(max_len,a_dict[s[i])\n        min_len=min(min_len,a_dict[s[i])\n    max_len=max(max_len,1)\n    min_len=min(min_len,1)\n    dp=[[0]*(n+1) for i in range(n+1)]\n    dp[0][0]=1\n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            if i<=j:\n                dp[i][j]=1\n            else:\n                for k in range(1,min(i,j):\n                    if s[i-1] in a_dict and a_dict[s[i-1]<=k:\n                        dp[i][j]+=dp[i-k][j-k]\n                    dp[i][j]%=10**9+7\n    ans=dp[n][n]\n    print(ans)\n    print(max_len)\n    print(min_len)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1546,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    arcs = []\n    for i in range(n*2):\n        a, b = map(int, input().split())\n        arcs.append((a, b))\n    arcs.sort()\n    for i in range(n):\n        for j in range(n):\n            if (i+1, (i+1)%n+1) in arcs or (i, (i+1)%n+1) in arcs:\n                continue\n            else:\n                return -1\n    for i in range(n):\n        if (i+1, (i+1)%n+1) in arcs:\n            arcs.remove((i+1, (i+1)%n+1) if (i+1, (i+1)%n+1) in arcs else (i, (i+1)%n+1))\n            arcs.remove((i, (i+1)%n+1) if (i, (i+1)%n+1) in arcs else (i+1, (i+1)%n+1))\n            arcs.append((i+1, (i+1)%n+1) if (i+1, (i+1)%n+1) in arcs else (i, (i+1)%n+1))\n            arcs.append((i, (i+1)%n+1) if (i, (i+1)%n+1) in arcs else (i+1, (i+1)%n+1))\n            break\n    for i in range(n):\n        if (i+1, (i+2)%n+1) in arcs or (i, (i+2)%n+1) in arcs:\n            arcs.remove((i+1, (i+2)%n+1) if (i+1, (i+2)%n+1) in arcs else (i, (i+2)%n+1))\n            arcs.remove((i, (i+2)%n+1) if (i, (i+2)%n+1) in arcs else (i+1, (i+2)%",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1547,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k=map(int,input().split())\n    table=[[0]*m for i in range(n)]\n    for i in range(k):\n        query=list(map(int,input().split())\n        if query[0]==1:\n            for j in range(m):\n                table[query[1]-1][j]=query[2]\n        else:\n            for j in range(n):\n                table[j][query[1]-1]=query[2]\n    for i in range(n):\n        print(*table[i])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1548,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    sticks = list(map(int, input().split()))\n    sticks.sort(reverse=True)\n    max_distance = 0\n    for i in range(n):\n        max_distance += sticks[i] ** 2\n        for j in range(i+1, n):\n            max_distance += 2 * sticks[i] * sticks[j]\n    return max_distance\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1549,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m, q = map(int, input_string.split())\n    cities = list(map(int, input().split()))\n    years = []\n    for i in range(q):\n        years.append(int(input()))\n    \n    # Your code goes here\n    return years\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1550,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    input_string = input()\n    input_list = list(input_string)\n    input_list = [int(i) for i in input_list]\n    input_list.sort()\n    return ''.join(map(str, input_list)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1551,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, vl = list(map(int, input().split()))\n    people = []\n    for i in range(n):\n        x, v, t = list(map(int, input().split())\n        people.append((x, v, t))\n    people.sort(key=lambda x: x[0])\n    left_people = []\n    right_people = []\n    for p in people:\n        if p[2] == 1:\n            left_people.append(p)\n        else:\n            right_people.append(p)\n    left_people.sort(key=lambda x: x[1], reverse=True)\n    right_people.sort(key=lambda x: x[1], reverse=True)\n    left_time = 0\n    right_time = 0\n    for i in range(len(left_people)):\n        left_time += left_people[i][1]\n    for i in range(len(right_people)):\n        right_time += right_people[i][1]\n    return min(left_time, right_time)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1552,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    skills = list(map(int, input().split()))\n    teams = []\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if skills[i] != skills[j] and skills[i] != skills[k] and skills[j] != skills[k]:\n                    teams.append((i+1, j+1, k+1))\n    if len(teams) == 0:\n        print(0)\n    else:\n        print(len(teams))\n        for team in teams:\n            print(*team)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1553,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, h = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    k = 0\n    for i in range(n):\n        if a[i] <= h:\n            k += 1\n            h -= a[i]\n        else:\n            break\n    return k\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1554,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    pearls = list(map(int, input_string.split()))\n    pearl_dict = {}\n    for i in range(n):\n        if pearls[i] in pearl_dict:\n            pearl_dict[pearls[i]].append(i+1)\n        else:\n            pearl_dict[pearls[i]] = [i+1]\n    if len(pearl_dict) == 1:\n        print(\"-1\")\n        return\n    max_segments = 0\n    for key in pearl_dict:\n        if len(pearl_dict[key]) > 1:\n            max_segments += len(pearl_dict[key])-1\n    print(max_segments)\n    for key in pearl_dict:\n        if len(pearl_dict[key]) > 1:\n            for i in range(len(pearl_dict[key])-1):\n                print(pearl_dict[key][i], pearl_dict[key][i+1])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1555,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    a = []\n    for i in range(n):\n        a.append(list(map(str, input().split()))\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == \">\":\n                a[i][j] = 1\n            elif a[i][j] == \"<\":\n                a[i][j] = -1\n            else:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == \">\":\n                a[i][j] = 1\n            elif a[i][j] == \"<\":\n                a[i][j] = -1\n            else:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == \">\":\n                a[i][j] = 1\n            elif a[i][j] == \"<\":\n                a[i][j] = -1\n            else:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == \">\":\n                a[i][j] = 1\n            elif a[i][j] == \"<\":\n                a[i][j] = -1\n            else:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == \">\":\n                a[i][j] = 1\n            elif a[i][j] == \"<\":\n                a[i][j] = -1\n            else:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == \">\":\n                a[i][j] = 1\n            elif a[i][j] == \"<\":\n                a[i][j] = -1\n            else:\n                a[i][j] = 0\n    for i",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1556,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k,v = list(map(int, input().split()))\n    a = list(map(int, input().split())\n    a.sort()\n    if k%2==0:\n        for i in range(n):\n            a[i] = a[i]%v\n    else:\n        for i in range(n):\n            a[i] = a[i]%v\n        a[0] = a[0]-v\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1557,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    h1,a1,c1=map(int,input().split())\n    h2,a2=map(int,input().split())\n    n=0\n    while h2>0:\n        if h1<=a2:\n            h1+=c1\n            n+=1\n        else:\n            h1-=a2\n            n+=1\n            h2-=a1\n    return n\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1558,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,r,avg=list(map(int,input().split()))\n    a=[]\n    b=[]\n    for i in range(n):\n        a.append(list(map(int,input().split()))[0])\n        b.append(list(map(int,input().split()))[0])\n    min_essays=0\n    for i in range(n):\n        if a[i]<avg:\n            min_essays+=max(0,avg-a[i])\n    return min_essays\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1559,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    L = int(input())\n    A = int(input())\n    P = str(A)\n    while len(P) < L:\n        P = P + P\n    P = P[:L]\n    return int(P) + 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1560,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input().strip())\n    cockroaches = input().strip()\n    black_count = 0\n    red_count = 0\n    for i in cockroaches:\n        if i == 'b':\n            black_count += 1\n        else:\n            red_count += 1\n    if black_count == red_count:\n        return 0\n    elif black_count > red_count:\n        return abs(black_count - red_count)\n    else:\n        return abs(black_count - red_count) - 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1561,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k = list(map(int, input().split()))\n    matrix = []\n    for i in range(n):\n        matrix.append(list(input())\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == '.':\n                count += 1\n                if count == k:\n                    return 1\n            else:\n                count = 0\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1562,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k, q = list(map(int, input().split()))\n    treasures = []\n    for i in range(k):\n        r, c = list(map(int, input().split())\n        treasures.append((r, c))\n    safe_columns = list(map(int, input().split())\n    safe_columns.sort()\n    min_moves = float('inf')\n    for i in range(q):\n        moves = 0\n        for treasure in treasures:\n            if treasure[1] == safe_columns[i]:\n                moves += abs(treasure[0] - 1)\n            else:\n                moves += abs(treasure[0] - 1) + abs(treasure[1] - safe_columns[i])\n        min_moves = min(min_moves, moves)\n    return min_moves\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1563,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=list(map(int,input().split()))\n    colors=list(map(int,input().split())\n    graph=[]\n    for i in range(m):\n        a,b=list(map(int,input().split())\n        graph.append((a,b)\n        graph.append((b,a)\n    color_dict={}\n    for i in range(1,n+1):\n        color_dict[i]=colors[i-1]\n    color_set=set(colors)\n    max_color=0\n    for color in color_set:\n        neighbors=set()\n        for i in range(n):\n            if color_dict[i+1]==color:\n                for edge in graph:\n                    if i+1 in edge:\n                        if color_dict[edge[0]]!=color and edge[0]!=i+1:\n                            neighbors.add(color_dict[edge[0])\n                        elif color_dict[edge[1]]!=color and edge[1]!=i+1:\n                            neighbors.add(color_dict[edge[1])\n        if len(neighbors)>max_color:\n            max_color=len(neighbors)\n            result=color\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1564,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    t = input()\n    if s == t:\n        return -1\n    else:\n        k = 0\n        for i in range(n):\n            if s[i] != t[i]:\n                k += 1\n        if k % 2 == 0:\n            return k // 2\n        else:\n            return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1565,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    num = int(input())\n    min_sum = float('inf')\n    for i in range(1, n):\n        if num % (10**i) == 0:\n            continue\n        left = num // (10**i)\n        right = num % (10**i)\n        if left + right < min_sum:\n            min_sum = left + right\n    return min_sum\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1566,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    for i in range(n):\n        grid[i] = [int(x) for x in input().split()]\n    # Your code goes here\n    return \"Yes\" if is_lair(grid) else \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1567,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    if k==1:\n        return n%998244353\n    else:\n        count=0\n        for i in range(1,n):\n            count+=solution(str(n)+\" \"+str(k-1))\n        return count%998244353\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1568,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,a,b,c,t=map(int,input().split())\n    t_list=list(map(int,input().split())\n    total=0\n    for i in range(n):\n        total+=a\n        total-=b*t_list[i]\n        total+=c*(n-i)\n    return total\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1569,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: map(int, input().split())\n    n, m = f()\n    adj = [[] for _ in range(n+1)]\n    for _ in range(m):\n        x, y, z = f()\n        adj[x].append((y, z))\n        adj[y].append((x, z))\n    q = [(1, 0)]\n    visited = set([1])\n    dist = [float('inf')] * (n+1)\n    dist[1] = 0\n    while q:\n        u, d = q.pop(0)\n        for v, z in adj[u]:\n            if v not in visited:\n                visited.add(v)\n                dist[v] = min(dist[v], d+1)\n                q.append((v, d+1))\n    q = [(n, 0)]\n    visited = set([n])\n    dist[n] = 0\n    while q:\n        u, d = q.pop(0)\n        for v, z in adj[u]:\n            if v not in visited:\n                visited.add(v)\n                dist[v] = min(dist[v], d+1)\n                q.append((v, d+1))\n    k = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if dist[i] != float('inf') and dist[j] != float('inf') and dist[i] + dist[j] == dist[n]:\n                k += 1\n    print(k)\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if dist[i] != float('inf') and dist[j] != float('inf') and dist[i] + dist[j] == dist[n]:\n                for x, y, z in adj[i]:\n                    if x == j:\n                        print(i, j, 0)\n                        break\n                for x, y, z in adj[j]:\n                    if x == i:\n                        print(j, i, 0)\n                        break\n                for x, y, z in adj",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1570,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k, n, w = map(int, input().split())\n    if w * k > n:\n        return w * k - n\n    else:\n        return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1571,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    S = input()\n    T = input()\n    n = len(S)\n    m = len(T)\n    dp = [0] * (n+1)\n    dp[0] = 1\n    for i in range(1, n+1):\n        dp[i] = 0\n        for j in range(1, m+1):\n            if S[i-1] == T[j-1]:\n                dp[i] += dp[i-1]\n                dp[i] %= 998244353\n    return dp[n]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1572,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    max_len=1\n    for i in range(n):\n        for j in range(i+1,n):\n            if a[i]==a[j]-1 and a[j]==a[j+1]-1:\n                k=j+1\n                while k<n and a[k]==a[j]-1:\n                    k+=1\n                max_len=max(max_len,k-i+1)\n    return max_len\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1573,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r = lambda: list(map(int, input().split()))\n    n, d = r()\n    friends = [r() for _ in range(n)]\n    friends.sort(key=lambda x: x[0])\n    total = 0\n    for i in range(n):\n        total += friends[i][1]\n    for i in range(n):\n        if friends[i][0] + d >= friends[0][0]:\n            total += friends[0][1]\n            friends.pop(0)\n        else:\n            break\n    return total\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1574,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    edges=[]\n    for i in range(m):\n        a,b=map(int,input().split())\n        edges.append((a,b) if a<b else (b,a))\n    edges=list(set(edges)\n    if n==1:\n        return 0\n    elif n==2:\n        return -1\n    else:\n        for i in range(n):\n            for j in range(i+1,n):\n                for k in range(j+1,n):\n                    if (i,j) in edges and (i,k) in edges and (j,k) in edges:\n                        return i+j+k\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1575,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: map(int, input().split())\n    t_s, t_f, t = f()\n    n = int(input())\n    times = list(f())\n    queue = []\n    for i in range(n):\n        queue.append(times[i])\n        while queue and queue[0] < t_s:\n            queue.pop(0)\n        if not queue:\n            print(t_s)\n            return\n        if queue[0] > t_f - t:\n            print(t_f - t)\n            return\n        if queue[0] - t_s >= t:\n            print(queue[0] - t)\n            return\n        print(queue[0])\n        queue.pop(0)\n    print(t_f - t)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1576,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = list(input())\n    result = \"\"\n    for i in range(len(s)):\n        if i % 2 == 0:\n            result = s[i] + result\n        else:\n            result = s[i] + result\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1577,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = input()\n    a_count = 0\n    d_count = 0\n    for i in input_string:\n        if i == 'A':\n            a_count += 1\n        else:\n            d_count += 1\n    if a_count > d_count:\n        return \"Anton\"\n    elif d_count > a_count:\n        return \"Danik\"\n    else:\n        return \"Friendship\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1578,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input());print(n*(n-1)//2)\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1579,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    points = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        points.append((x, y))\n    points.sort()\n    max_operations = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                for l in range(k+1, n):\n                    for m in range(l+1, n):\n                        if (points[i][0] == points[j][0] and points[i][1] == points[k][1] and points[i][1] == points[l][1] and points[j][0] == points[l][0]) or (points[i][0] == points[k][0] and points[i][1] == points[j][1] and points[i][0] == points[l][0]):\n                            max_operations += 1\n    return max_operations\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1580,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    cards=[0]*n\n    for i in range(m):\n        x,y,z=map(int,input().split())\n        cards[x-1]+=1\n        cards[y-1]+=1\n    return sum(cards)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1581,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,K = map(int, input().split())\n    MOD = 10**9+7\n    dp = [0]*(K+1)\n    dp[0] = 1\n    for i in range(1,K+1):\n        for j in range(1,N+1):\n            dp[i] = (dp[i] + dp[i-1]) % MOD\n    return dp[K]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1582,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input());a,b=divmod(N,10);h=lambda n:h(n//10)if n>9else n;print(a**2+8+sum((h(i)<=b)*(i%10==h(N))*(1+(a!=i//10))for i in range(1,N+1))if a else N)\n    #a=last digit of N, b=first digit of N, h=lambda function to get the last digit of a number\n    #if a is not zero, then we need to count the number of pairs that satisfy the condition, else we just need to count the number of pairs with a=0\n    #we use the formula a^2+8+sum(condition)\n    #condition is true if the last digit of i is equal to b and the first digit of i is equal to a, and i is not equal to 10a\n    #we use the modulo operator to get the first digit of i and the division operator to get the last digit of i\n    #we use the sum function to iterate over all numbers from 1 to N\n    #if a is not zero, we add 1 to the sum if the condition is true, else we add N to the sum\n    #if a is zero, we just add N to the sum\n    solution(input())\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1583,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,x=map(int,input().split())\n    if x>a*a*b:\n        return 0\n    else:\n        return 90*math.acos(math.sqrt(x/(a*a*b))/math.sqrt(2))\n    # Write your code here\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1584,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    sticks=list(map(int,input().split())\n    count=0\n    for i in range(N):\n        for j in range(i+1,N):\n            for k in range(j+1,N):\n                if sticks[i]<sticks[j]+sticks[k] and sticks[j]<sticks[i]+sticks[k] and sticks[k]<sticks[i]+sticks[j]:\n                    count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1585,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    X,Y=map(int,input().split())\n    max_len=0\n    for i in range(X,Y+1):\n        if i%3==0:\n            if i%2==0:\n                max_len=max(max_len,i//2)\n            else:\n                max_len=max(max_len,i//2+1)\n    return max_len\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1586,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input());a=10;b=0\n    while(N>=a):\n        b+=N//a\n        a*=5\n    return b\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1587,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, s = input(), input()\n    n = int(n)\n    s = list(s)\n    count = 0\n    for i in range(n-1):\n        if s[i] == 'W' and s[i+1] == 'R':\n            s[i], s[i+1] = s[i+1], s[i]\n            count += 1\n    if s[-1] == 'W':\n        s[-1] = 'R'\n        count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1588,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    X = list(map(int, input_string.split()))\n    s = sum(X)\n    Y = [i for i in range(1, 10**6+1) if i not in X]\n    for i in range(len(Y)):\n        if sum(X) - sum(Y[:i]) == s - Y[i]:\n            return i+1, Y[:i+1]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1589,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    flats = input_string.split('\\n')\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if flats[i][2*j] == '1' or flats[i][2*j+1] == '1':\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1590,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split()[0])\n    a = list(map(int, input_string.split()[1:]))\n    a.sort()\n    total_sum = 0\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            sub_sum = 0\n            for k in range(i, j+1):\n                sub_sum += a[k-1]*k\n            total_sum += sub_sum\n    return total_sum % (10**9+7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1591,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = [int(i) for i in input().split()]\n    a = [int(input()) for i in range(n)]\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1592,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t, c = map(int, input().split())\n    tasks = []\n    for i in range(t):\n        t, c = map(int, input().split())\n        tasks.append((t, c))\n    max_size = 0\n    time = 0\n    queue = []\n    for task in tasks:\n        time = max(time, task[0])\n        queue.append(task[1])\n        while queue:\n            time += 1\n            queue.pop(0)\n            max_size = max(max_size, len(queue))\n    return time, max_size\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1593,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R = lambda:map(int, input().split())\n    n, s = R()\n    locations = []\n    for i in range(n):\n        x, y, k = R()\n        locations.append((x, y, k))\n    if sum(k for x, y, k in locations) < s:\n        return \"-1\"\n    def distance(a, b):\n        return ((a[0]-b[0])**2 + (a[1]-b[1])**2)**0.5\n    def is_megacity(r):\n        total = 0\n        for x, y, k in locations:\n            if distance((0, 0), (x, y)) <= r:\n                total += k\n        return total >= s\n    l, r = 0, 10**6\n    while l < r:\n        mid = (l + r) / 2\n        if is_megacity(mid):\n            l = mid\n        else:\n            r = mid\n    if is_megacity(l):\n        return l\n    else:\n        return \"-1\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1594,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R=lambda:list(map(int,input().split()))\n    n,m=R()\n    songs=[R() for i in range(n)]\n    moments=R()\n    for i in range(n):\n        songs[i].append(sum(songs[i]))\n    songs.sort(key=lambda x:x[1])\n    for i in range(1,n):\n        songs[i][1]+=songs[i-1][1]\n    for i in range(m):\n        for j in range(n):\n            if moments[i]<songs[j][1]:\n                print(j+1)\n                break\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1595,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s, l = map(int, input().split())\n    if s == 0:\n        return -1\n    if s == 1:\n        return 1\n    if s == 2:\n        return 2\n    if s == 3:\n        return 3\n    if s == 4:\n        return 4\n    if s == 5:\n        return 5\n    if s == 6:\n        return 6\n    if s == 7:\n        return 7\n    if s == 8:\n        return 8\n    if s == 9:\n        return 9\n    if s == 10:\n        return 10\n    if s == 11:\n        return 11\n    if s == 12:\n        return 12\n    if s == 13:\n        return 13\n    if s == 14:\n        return 14\n    if s == 15:\n        return 15\n    if s == 16:\n        return 16\n    if s == 17:\n        return 17\n    if s == 18:\n        return 18\n    if s == 19:\n        return 19\n    if s == 20:\n        return 20\n    if s == 21:\n        return 21\n    if s == 22:\n        return 22\n    if s == 23:\n        return 23\n    if s == 24:\n        return 24\n    if s == 25:\n        return 25\n    if s == 26:\n        return 26\n    if s == 27:\n        return 27\n    if s == 28:\n        return 28\n    if s == 29:\n        return 29\n    if s == 30:\n        return 30\n    if s == 31:\n        return 31\n    if s == 32:\n        return 32\n    if s == 33:\n        return 33\n    if s == 34:\n        return 34\n    if s == 35:",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1596,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    S = '*' + input()\n    n = len(S)\n    dp = [0] * n\n    dp[0] = 1\n    MOD = 10**9 + 7\n    for i in range(1, n):\n        dp[i] = 1\n        if S[i] == 'w':\n            dp[i] = (dp[i-1] * 2) % MOD\n        elif S[i] == 'm':\n            dp[i] = (dp[i-1] * 2) % MOD\n        else:\n            dp[i] = (dp[i-1] + dp[i-2]) % MOD\n    return dp[-1]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1597,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return input_string\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1598,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    n = len(s)\n    t = \"\"\n    for i in range(n):\n        if s[i] == '0':\n            t += '0'\n        else:\n            t += '1'\n    return t\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1599,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l, r = map(int, input().split())\n    queries = []\n    for _ in range(l):\n        l, r = map(int, input().split())\n        queries.append((l, r))\n    result = []\n    for l, r in queries:\n        count = 0\n        for i in range(l, r):\n            if input_string[i] == input_string[i+1]:\n                count += 1\n        result.append(count)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1600,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, s, v = int(input()), 0, 0\n    h = list(map(int, input().split()))\n    for i in range(n):\n        if h[i] > h[i+1]:\n            v += 1\n        else:\n            s += v + 1\n            v = 0\n    return s + 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1601,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    points = []\n    for i in range(n):\n        x, y, z = map(int, input().split())\n        points.append((x, y, z))\n    points.sort()\n    pairs = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if i != j:\n                pairs.append((i+1, j+1))\n    pairs.sort(key=lambda x: (points[x[0]-1][0], points[x[1]-1][0], points[x[0]-1][1], points[x[1]-1][1], points[x[0]-1][2], points[x[1]-1][2]) )\n    for i in range(n//2):\n        print(pairs[i][0], pairs[i][1])\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1602,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1603,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R = lambda:map(int, input().split())\n    n, v = R(), R()\n    m = int(input())\n    v.sort()\n    u = sorted(range(n), key=lambda i:v[i])\n    for _ in range(m):\n        l, r, t = R()\n        if t == 1:\n            print(sum(v[l-1:r]))\n        else:\n            print(sum(u[l-1:r]))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1604,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    lamps = []\n    for i in range(n):\n        l, r = list(map(int, input().split())\n        lamps.append((l, r))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1605,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    n=len(s)\n    even=0\n    odd=0\n    for i in range(n):\n        for j in range(i+1,n+1):\n            if s[i:j]==s[i:j][::-1]:\n                if (j-i)%2==0:\n                    even+=1\n                else:\n                    odd+=1\n    return even,odd\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1606,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    matrix = []\n    for i in range(n):\n        matrix.append(list(map(int, input().split()))\n    q = int(input())\n    queries = []\n    for i in range(q):\n        queries.append(list(map(int, input().split()))\n    result = []\n    for query in queries:\n        if query[0] == 1:\n            flip_row(matrix, query[1])\n        elif query[0] == 2:\n            flip_column(matrix, query[1])\n        else:\n            result.append(unusual_square(matrix))\n    return ''.join(map(str, result)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1607,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    if k==1:\n        return 2\n    elif k==2:\n        return (n-1)\n    else:\n        return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1608,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    count=0\n    for i in range(n):\n        for j in range(i+1,n+1):\n            if len(set(a[i:j])==len(a[i:j]) and len(a[i:j])>1:\n                if len(set(a[i:j])==len(a[i:j]) and len(a[i:j])>1:\n                    count+=1\n    return count%(10**9+7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1609,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    numbers = list(map(int, input().split()))\n    numbers.sort()\n    for i in range(n):\n        numbers[i] = i+1\n    return numbers\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1610,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    p = [i for i in range(1, n+1)]\n    for i in range(k):\n        p[i], p[i+1] = p[i+1], p[i]\n    return \" \".join(map(str, p)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1611,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    l=list(map(int,input().split())\n    l.sort(reverse=True)\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if l[i]+l[j]+l[k]>0:\n                    return 0\n    return 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1612,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    cards = []\n    for i in range(n):\n        card = input().split()\n        cards.append(card)\n    for i in range(n):\n        if len(cards[i]) == 1:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1614,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, h = map(int, input().split())\n    a = list(map(int, input().split())\n    min_width = 0\n    for i in range(n):\n        if a[i] > h:\n            min_width += 2\n        else:\n            min_width += 1\n    return min_width\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1615,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    segments = []\n    for _ in range(n):\n        l, r = map(int, input().split())\n        segments.append((l, r))\n    segments.sort()\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1616,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if a[i]*a[j]*a[k] == 1:\n                    return 3\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1617,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    fun_values = set()\n    for k in range(1, N+1):\n        fun = 1\n        current_person = 1\n        while True:\n            next_person = (current_person + k - 1) % N + 1\n            fun += next_person\n            if next_person == 1:\n                break\n            current_person = next_person\n        fun_values.add(fun)\n    return sorted(fun_values)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1618,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    stairs=list(map(int,input().split()))\n    m=int(input())\n    boxes=[]\n    for i in range(m):\n        boxes.append(list(map(int,input().split()))\n    for i in range(m):\n        w=boxes[i][0]\n        h=boxes[i][1]\n        for j in range(w):\n            if stairs[j]<h:\n                stairs[j]=h\n    print(*stairs)\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1619,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a_len, = [int(num) for num in input().split()]\n    a_vertices = []\n    for _ in range(a_len):\n        x, y, z = [int(num) for num in input().split()]\n        a_vertices.append((x, y, z))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1620,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n == 1:\n        return \"a\"\n    elif n == 2:\n        return \"ab\"\n    else:\n        return \"bba\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1621,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    k = int(input())\n    w = list(map(int, input().split()))\n    s = list(s)\n    s.sort(key=lambda x: w[ord(x)-ord('a')])\n    s.sort(key=lambda x: -ord(x))\n    s = ''.join(s)\n    return sum([w[ord(s[i])-ord('a')]*(i+1) for i in range(len(s))])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1622,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    employees = [[] for _ in range(n+1)]\n    for _ in range(m):\n        t, *args = map(int, input().split())\n        if t == 1:\n            x, y = args\n            employees[x].append(y)\n        elif t == 2:\n            x = args[0]\n            employees[x].append(x)\n        else:\n            x, i = args\n            for employee in employees[x]:\n                if i == 1:\n                    print(\"YES\" if employee == x else \"NO\")\n                    break\n            else:\n                print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1623,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, l, r = map(int, input().split())\n    min_sum = 0\n    max_sum = 0\n    for i in range(1, r+1):\n        min_sum += i\n        max_sum += i\n    return min_sum, max_sum\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1624,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    a.sort()\n    min_sum=float('inf')\n    for i in range(1,n):\n        if n%i==0:\n            sum_of_squares=0\n            for j in range(i):\n                sum_of_squares+=sum(a[j::i])**2\n            if sum_of_squares<min_sum:\n                min_sum=sum_of_squares\n    return min_sum\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1625,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    numbers=list(map(int,input().split()))\n    matrix=[]\n    for i in range(2**n):\n        row=[]\n        for j in range(2**n):\n            row.append(0)\n        matrix.append(row)\n    for i in range(2**n):\n        for j in range(2**n):\n            matrix[i][j]=numbers[i*2**n+j]\n    return matrix\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1626,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k = map(int,input().split())\n    a = list(map(int,input().split())\n    b = list(map(int,input().split())\n    mod = 10**9+7\n    count = 0\n    for i in range(10**(k-1):\n        for j in range(10**k):\n            if j%a[i]==0 and str(j)[i]!=str(b[i]:\n                count+=1\n    return count%mod\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1627,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    heights = list(map(int, input().split()))\n    heights.sort()\n    for i in range(n):\n        if heights[i] != i+1:\n            print(i+1, i+1)\n            heights[i], heights[i+1] = heights[i+1], heights[i]\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1628,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = sum([{'x':1, 'y':-1}[c] for c in input()])\n    if n > 0:\n        return 'x' * abs(n) + 'y' * abs(n)\n    else:\n        return 'y' * abs(n) + 'x' * abs(n)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1629,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,x=map(int,input().split())\n    a=list(map(int,input().split())\n    for i in range(n):\n        a[x-1]+=a[i]\n        a[i]=0\n    for i in range(n):\n        if a[i]>0:\n            x=i+1\n            if x>n:\n                x=x%n\n            a[x-1]+=a[i]\n            a[i]=0\n    for i in range(n):\n        if a[i]>0:\n            x=i+1\n            if x>n:\n                x=x%n\n            a[x-1]+=a[i]\n            a[i]=0\n    for i in range(n):\n        if a[i]>0:\n            x=i+1\n            if x>n:\n                x=x%n\n            a[x-1]+=a[i]\n            a[i]=0\n    for i in range(n):\n        if a[i]>0:\n            x=i+1\n            if x>n:\n                x=x%n\n            a[x-1]+=a[i]\n            a[i]=0\n    for i in range(n):\n        if a[i]>0:\n            x=i+1\n            if x>n:\n                x=x%n\n            a[x-1]+=a[i]\n            a[i]=0\n    for i in range(n):\n        if a[i]>0:\n            x=i+1\n            if x>n:\n                x=x%n\n            a[x-1]+=a[i]\n            a[i]=0\n    for i in range(n):\n        if a[i]>0:\n            x=i+1\n            if x>n:\n                x=x%n\n            a[x-1]+=a[i]\n            a[i]=0\n    for i in range(n):\n        if a[i]>0:\n            x=i+1\n            if x>n:\n                x=x%n\n            a[x-1]+=a[",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1630,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    names = int(input())\n    clubs = []\n    for i in range(names):\n        clubs.append(input().split())\n    short_names = []\n    for i in range(names):\n        short_names.append(clubs[i][0][:3])\n    for i in range(names):\n        for j in range(i+1,names):\n            if clubs[i][0][:2] == clubs[j][0][:2] and clubs[i][1][0] == clubs[j][1][0]:\n                return \"NO\"\n    return \"YES\" + \"\\n\" + \"\\n\".join(short_names)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1631,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    names=[]\n    for i in range(n):\n        names.append(input())\n    names.sort()\n    for i in range(26):\n        for j in range(26):\n            for k in range(26):\n                for l in range(26):\n                    for m in range(26):\n                        for o in range(26):\n                            for p in range(26):\n                                for q in range(26):\n                                    for r in range(26):\n                                        for s in range(26):\n                                            for t in range(26):\n                                                for u in range(26):\n                                                    for v in range(26):\n                                                        for w in range(26):\n                                                            for x in range(26):\n                                                                for y in range(26):\n                                                                    for z in range(26):\n                                                                        order='abcdefghijklmnopqrstuvwxyz'\n                                                                        order=order[i]+order[j]+order[k]+order[l]+order[m]+order[o]+order[p]+order[q]+order[r]+order[s]+order[t]+order[u]+order[v]+order[w]+order[x]+order[y]+order[z]\n                                                                        if names==sorted(names,key=lambda x:x.translate(str.maketrans(order,order)):\n                                                                            print(order)\n                                                                            return\n    print(\"Impossible\")\nsolution(input())\n# End of code\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1632,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    balls = list(map(int, input().split()))\n    balls.sort()\n    total_sum = sum(balls)\n    max_sum = balls[-1] * 3\n    min_sum = balls[0] * 3\n    if total_sum % 3 == 0:\n        return 0\n    elif total_sum % 3 == 1:\n        return (max_sum - min_sum) / 3\n    else:\n        return (max_sum - min_sum) / 3 - 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1633,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R=lambda:map(int,input().split())\n    n,m,k=R()\n    board=[[0]*m for i in range(n)]\n    for i in range(k):\n        r,c=R()\n        board[r-1][c-1]=1\n        for j in range(n):\n            if board[j][c-1]==1 and board[r-1][j]==1:\n                return i+1\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1634,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    c = list(map(int, input().split()))\n    n, m = list(map(int, input().split())\n    a = list(map(int, input().split())\n    b = list(map(int, input().split())\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1635,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    cafes = list(map(int, input().split()))\n    last_visit = {}\n    for i in range(n):\n        if cafes[i] not in last_visit:\n            last_visit[cafes[i]] = i\n        else:\n            last_visit[cafes[i]] = i\n    max_cafe = 0\n    max_visit = -1\n    for key, value in last_visit.items():\n        if value > max_visit:\n            max_cafe = key\n            max_visit = value\n    return max_cafe\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1636,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tx,y = list(map(int, input().split()))\n    points = []\n    for i in range(x):\n        x,y = list(map(int, input().split())\n        points.append((x,y))\n    w = list(map(int, input().split())\n    points.sort(key=lambda x: (x[1], x[0]))\n    for i in range(len(points)):\n        if points[i][1] - points[i][0] != w[i]:\n            return \"NO\"\n    return \"YES\"\n    for point in points:\n        print(point[0], point[1])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1637,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = [int(x) for x in input().split()]\n    x = []\n    y = []\n    for i in range(n):\n        xi,yi = [int(x) for x in input().split()]\n        x.append(xi)\n        y.append(yi)\n    hates = []\n    for i in range(m):\n        ui,vi = [int(x) for x in input().split()]\n        hates.append((ui,vi) if ui<vi else (vi,ui))\n    hates = set(hates)\n    result = []\n    for i in range(n):\n        score = 0\n        for j in range(n):\n            if i!=j and (i,j) not in hates and (j,i) not in hates:\n                score += x[i] + y[j]\n        result.append(score)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1638,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    m = list(map(int, input().split()))\n    floors = [0] * n\n    for i in range(n):\n        floors[i] = m[i]\n    for i in range(1, n-1):\n        if m[i] < m[i-1] and m[i] < m[i+1]:\n            floors[i] = m[i]\n        elif m[i] > m[i-1] and m[i] > m[i+1]:\n            floors[i] = m[i]\n        else:\n            floors[i] = min(m[i], m[i-1], m[i+1])\n    return floors\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1639,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    max_len=1\n    current_len=1\n    for i in range(1,n):\n        if a[i]>=a[i-1]:\n            current_len+=1\n        else:\n            current_len=1\n        max_len=max(max_len,current_len)\n    return max_len\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1640,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input_string.split()))\n    total = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(a[i] - a[j]) > 1:\n                total += a[j] - a[i]\n            elif abs(a[i] - a[j]) <= 1:\n                total += 0\n    return total\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1641,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k, s, t = map(int, input_string.split())\n    cars = []\n    for i in range(n):\n        cars.append(list(map(int, input().split()))\n    gas_stations = list(map(int, input().split()))\n    \n    # Your code here\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1642,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    points=[]\n    for i in range(n):\n        x,y=map(int,input().split())\n        points.append((x,y))\n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1643,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    n = len(s)\n    t = ['0'] * n\n    for i in range(n):\n        if s[i] == '1':\n            t[i] = '1'\n        else:\n            t[i] = '0'\n    return ''.join(t)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1644,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    rings = []\n    for i in range(n):\n        a, b, h = map(int, input().split())\n        rings.append((a, b, h)\n    rings.sort(key=lambda x: x[1])\n    max_height = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if rings[j][0] > rings[i][1]:\n                max_height = max(max_height, rings[i][2] + rings[j][2])\n    return max_height\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1645,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    count=0\n    for i in range(n):\n        for j in range(i,n):\n            subarray=a[i:j+1]\n            if sum(subarray)!=0:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1646,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    return s\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1647,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    valya_pullover = input()\n    tolya_tshirt = input()\n    mana_spent = 0\n    spells = []\n    for i in range(n):\n        if valya_pullover[i] != tolya_tshirt[i]:\n            mana_spent += 1\n            spells.append((valya_pullover[i], tolya_tshirt[i]))\n    print(mana_spent)\n    for spell in spells:\n        print(spell[0], spell[1])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1648,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split());m=10**9+7\n    dp=[1]*(k+1)\n    for i in range(2,n+1):\n        temp=[0]*(k+1)\n        for j in range(1,k+1):\n            temp[j]=dp[j-1]\n            if j>=i:\n                temp[j]+=dp[j]\n            if j>1:\n                temp[j]+=dp[j-2]\n        dp=temp\n    return dp\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1649,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    A,B,C,D = sorted(map(int,input().split()))\n    if A+B+C+D == (A+B+C+D)//2:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1650,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l=input()[::-1]\n    count=0\n    for i in range(len(l)):\n        if l[i]=='1':\n            count+=2**i\n    return count%(10**9+7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1651,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s,p=map(int,input().split())\n    for i in range(1,s//2+1):\n        if i*(s-i)==p:\n            return \"Yes\"\n    return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1652,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    t=\"\"\n    while s!=\"\":\n        if s.endswith(\"erasedream\"):\n            s=s[:-9]\n            t+=\"erasedream\"\n        elif s.endswith(\"erase\"):\n            s=s[:-5]\n            t+=\"erase\"\n        elif s.endswith(\"dream\"):\n            s=s[:-5]\n            t+=\"dream\"\n        elif s.endswith(\"erase\"):\n            s=s[:-6]\n            t+=\"erase\"\n        else:\n            return \"NO\"\n    return \"YES\" if s==\"dreamer\" else \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1653,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    t = input()\n    q = int(input())\n    result = ''\n    for i in range(q):\n        a, b, c, d = map(int, input().split())\n        sub_s = s[a-1:b]\n        sub_t = t[c-1:d]\n        if len(sub_s) != len(sub_t):\n            result += '0'\n            continue\n        for i in range(len(sub_t)):\n            if sub_t[i] == 'A':\n                if sub_s[i] == 'B':\n                    sub_s = 'BC' + sub_s[i+1:]\n                elif sub_s[i] == 'B':\n                    sub_s = 'AC' + sub_s[i+1:]\n                elif sub_s[i] == 'C':\n                    sub_s = 'AB' + sub_s[i+1:]\n                else:\n                    sub_s = sub_s[i+1:]\n            else:\n                if sub_s[i] == 'A':\n                    sub_s = sub_s[i+1:]\n                else:\n                    result += '0'\n                    break\n        else:\n            result += '1'\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1654,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = list(input())\n    t = input()\n    max_suitability = 0\n    max_string = \"\"\n    for i in range(26):\n        for j in range(26):\n            for k in range(26):\n                for l in range(26):\n                    for m in range(26):\n                        for n in range(26):\n                            for o in range(26):\n                                for p in range(26):\n                                    for q in range(26):\n                                        for r in range(26):\n                                            for s in range(26):\n                                                for a in range(26):\n                                                    for b in range(26):\n                                                        for c in range(26):\n                                                            for d in range(26):\n                                                                for e in range(26):\n                                                                    for f in range(26):\n                                                                        for g in range(26):\n                                                                            for h in range(26):\n                                                                                for i in range(26):\n                                                                                    for j in range(26):\n                                                                                        for k in range(26):\n                                                                                            for l in range(26):\n                                                                                                for m in range(26):\n                                                                                                    for n in range(26):\n                                                                                                        for o in range(26):\n                                                                                                            for p in range(26):\n                                                                                                                for q in range(26):\n                                                                                                                    for r in range(26):\n                                                                                                                        for s in range(26):\n                                                                                                                            for a1 in range(26):\n                                                                                                                                for b1 in range(26):\n                                                                                                                                    for c1 in range(26):\n                                                                                                                                        for d1 in range(26):\n                                                                                                                                            for e1 in range(26):\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1655,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    q=int(input())\n    l=list(map(int,input().split())\n    count=0\n    for i in range(q):\n        if l[i]==0:\n            count+=1\n        else:\n            count+=l[i]\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1656,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=[max(0,len(x)-1) for x in input().split('o')]\n    return sum(s)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1657,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: map(int, input().split())\n    n, p = f()\n    devices = [list(f()) for _ in range(n)]\n    time = 0\n    while True:\n        max_power = max(devices, key=lambda x: x[1])\n        time += max_power[1] / max_power[0]\n        if max_power[1] <= 0:\n            break\n        max_power[1] += p\n        for i in range(n):\n            devices[i][1] -= p\n            devices[i][1] = max(0, devices[i][1])\n    return time if max(devices)[1] == 0 else -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1658,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    _, x = [int(v) for v in input().split()]\n    d = [int(v) for v in input().split()]\n    mod = 10**9 + 7\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1659,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,x=list(map(int,input().split()))\n    ice_cream=x\n    distressed=0\n    for i in range(n):\n        if input_string[i][0]=='+':\n            ice_cream+=int(input_string[i][1:])\n        else:\n            if ice_cream>=int(input_string[i][1:]):\n                ice_cream-=int(input_string[i][1:])\n            else:\n                distressed+=1\n    return ice_cream,distressed\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1660,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Hint: use Dijkstra's algorithm to find the shortest path with the maximum weight\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1661,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    c = [int(a) for a in input().split()]\n    a = [int(b) for b in input().split()]\n    n = len(c)\n    m = len(a)\n    i = 0\n    j = 0\n    count = 0\n    while i < n and j < m:\n        if c[i] <= a[j]:\n            count += 1\n            i += 1\n            j += 1\n        else:\n            j += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1662,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, p = input(), [0] * 5001\n    for i in range(1, 501):\n        p[i] = i\n    for i in range(1, len(n)):\n        if n[i] < n[i - 1]:\n            p[n[i]] = max(p[n[i], p[n[i - 1] + 1])\n    for i in range(len(n) - 1, -1, -1):\n        p[n[i]] = max(p[n[i], p[i + 1] - 1)\n    return p.index(len(n))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1663,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input();M=10**9+7;o=u=v=0;n=len(s)\n    for i in range(n):\n        for j in range(i+1,n+1):\n            if s[i:j]!='0':\n                u+=int(s[:i]+s[j:])\n                v+=int(s[:i]+'0'+s[j:])\n    return (u+v)%M\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1664,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    L = int(input())\n    lines = input_string.split('\\n')\n    res = []\n    for line in lines:\n        if line[0].isdigit():\n            res.append(line)\n        else:\n            lvalue, op, rvalue = line.split('=')\n            if op == '$':\n                res.append(f\"{lvalue}={rvalue}#{rvalue}\")\n            elif op == '^':\n                res.append(f\"{lvalue}={rvalue}#{rvalue}\")\n            elif op == '&':\n                res.append(f\"{lvalue}={rvalue}#{rvalue}\")\n    return len(res), '\\n'.join(res)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1665,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    edges=[]\n    for i in range(n-1):\n        u,v=map(int,input().split())\n        edges.append((u,v) if u<v else (v,u))\n    edges.sort()\n    labels=[]\n    for i in range(n-1):\n        labels.append(0)\n    for i in range(n-1):\n        for j in range(i+1,n-1):\n            if edges[i]!=edges[j]:\n                labels[i]=max(labels[i],labels[j])+1\n    for i in range(n-1):\n        for j in range(i+1,n-1):\n            if edges[i]!=edges[j]:\n                labels[j]=max(labels[j],labels[i]+1)\n    for i in range(n-1):\n        for j in range(i+1,n-1):\n            if edges[i]!=edges[j]:\n                labels[j]=max(labels[j],labels[i]+1)\n    return labels\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1666,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x, y, a, b = map(int, input().split())\n    n = 0\n    for i in range(a, x+1):\n        for j in range(b, y+1):\n            if i > j:\n                n += 1\n                print(i, j)\n            else:\n                n += 1\n                print(j, i)\n    print(n)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1667,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    distances = list(map(int, input().split()))\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1668,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn = int(input())\n    \\tpin_codes = []\n    \\tfor i in range(n):\n    \\t    pin_codes.append(input())\n    \\tunique_pin_codes = set(pin_codes)\n    \\tif len(unique_pin_codes) == n:\n    \\t    print(0)\n    \\t    for pin_code in pin_codes:\n    \\t        print(pin_code)\n    \\telse:\n    \\t    min_changes = n\n    \\t    for i in range(n):\n    \\t        for j in range(4):\n    \\t            for digit in range(10):\n    \\t                new_pin_code = pin_codes[i][:j] + str(digit) + pin_codes[i][j+1:]\n    \\t                if new_pin_code not in unique_pin_codes:\n    \\t                    min_changes = min(min_changes, n - len(unique_pin_codes) - 1)\n    \\t                    unique_pin_codes.add(new_pin_code)\n    \\t                    if len(unique_pin_codes) == n:\n    \\t                        break\n    \\t            if len(unique_pin_codes) == n:\n    \\t                break\n    \\t    print(min_changes)\n    \\t    for pin_code in pin_codes:\n    \\t        print(pin_code)\n    \\t    for i in range(n):\n    \\t        for j in range(4):\n    \\t            for digit in range(10):\n    \\t                new_pin_code = pin_codes[i][:j] + str(digit) + pin_codes[i][j+1:]\n    \\t                if new_pin_code not in pin_codes:\n    \\t                    print(new_pin_code)\n    \\t                    break\n    \\t            else:\n    \\t                continue\n    \\t            break\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1669,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    reserved_tokens = input().split()\n    m = int(input())\n    source_code = []\n    for i in range(m):\n        source_code.append(input())\n    return minify(source_code, reserved_tokens)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1670,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    tn = [input(), input()]\n    n = int(input())\n    fouls = []\n    for i in range(n):\n        t, team, num, card = input().split()\n        fouls.append((int(t), team, int(num), card)\n    red_cards = {}\n    for f in fouls:\n        if f[2] not in red_cards:\n            red_cards[f[2]] = {}\n        if f[1] not in red_cards[f[2]]:\n            red_cards[f[2]][f[1]] = []\n        red_cards[f[2][f[1]].append(f[0])\n    for num in red_cards:\n        for team in red_cards[num]:\n            if len(red_cards[num][team]) == 2:\n                print(team, num, min(red_cards[num][team]))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1671,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = int(input()), list(map(int, input().split()))\n    m.sort()\n    return abs(m[-1] - m[0])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1672,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=int(input())\n    b=input().split()\n    count=0\n    for i in range(a):\n        if b[i]=='10':\n            count+=1\n        else:\n            count=0\n        if count==2:\n            count=1\n    return count+1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1673,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    a.append(float('inf') * n)\n    a.insert(0, float('-inf') * n)\n    dp = [0] * (n + 1)\n    for i in range(n + 1):\n        dp[i] = [0] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            dp[i][j] = dp[i - 1][j]\n            for k in range(i, j):\n                dp[i][j] = max(dp[i][j], dp[i - 1][k] + dp[k][j] + abs(a[i] - a[j]))\n    return dp[n][m] % 998244353\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1674,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    (lambda N,K,n,s:(lambda c,t:[[[s[i]!=s[i-1]and[c.__setitem__(0,c[0]+sum(sorted(t)[-K:])),t.clear()],t.append(n[i])]for i in range(1,N)],print(c[0]+sum(sorted(t)[-K:]))])([0],[n[0]]))(*map(int,input().split()),list(map(int,input().split())),input())\n    # Solution starts here\n    n, k = map(int, input().split())\n    a = list(map(int, input().split())\n    s = input()\n    c = 0\n    t = [a[0]]\n    for i in range(1, n):\n        if s[i] != s[i-1]:\n            c += sum(sorted(t)[-k:])\n            t = [a[i]]\n        else:\n            t.append(a[i])\n    c += sum(sorted(t)[-k:]\n    print(c)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1675,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    teams = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        teams.append((x, y))\n    home_games = 0\n    away_games = 0\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                if teams[i][0] == teams[j][0] or teams[i][1] == teams[j][1]:\n                    away_games += 1\n                else:\n                    home_games += 1\n    for i in range(n):\n        print(home_games, away_games)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1676,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,b=map(int,input().split())\n    queries=[]\n    for i in range(n):\n        t,d=map(int,input().split())\n        queries.append((t,d,i+1))\n    queries.sort()\n    server_free=True\n    queue=[]\n    result=[]\n    current_time=0\n    for query in queries:\n        if server_free:\n            server_free=False\n            current_time=query[0]+query[1]\n            result.append(current_time)\n        elif len(queue)<b:\n            queue.append(query)\n            current_time=query[0]+query[1]\n        else:\n            result.append(-1)\n    while queue:\n        query=queue.pop(0)\n        server_free=True\n        current_time=query[0]+query[1]\n        result[query[2]-1]=current_time\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1677,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R = lambda: map(int, input().split())\n    n = next(R())\n    b = list(R())\n    max_len = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            p = b[i]\n            q = b[j] - b[i] - 1\n            if q == 0:\n                continue\n            k = 1\n            while i+k < n and b[i+k] == p + k*q + 1:\n                k += 1\n            max_len = max(max_len, k)\n    return max_len\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1678,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,t=map(int,input().split())\n    a=list(map(int,input().split())\n    count=0\n    for i in range(n):\n        for j in range(i+1,n+1):\n            if sum(a[i:j])<t:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1679,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input().split('0')\n    result = 0\n    for i in range(len(s)):\n        result += int(s[i])\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1680,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l=input().split()\n    n=int(l[0])\n    k=int(l[1])\n    l=list(map(int,input().split())\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if bin(l[i])!=bin(l[j]) and bin(l[i])[2:]!=bin(l[j])[2:]:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1681,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = input()\n    m = input()\n    n_dict = {}\n    for i in n:\n        if i in n_dict:\n            n_dict[i] += 1\n        else:\n            n_dict[i] = 1\n    m_dict = {}\n    for i in m:\n        if i in m_dict:\n            m_dict[i] += 1\n        else:\n            m_dict[i] = 1\n    for key in m_dict:\n        if key not in n_dict:\n            return -1\n        elif n_dict[key] < m_dict[key]:\n            return -1\n    total_area = 0\n    for key in m_dict:\n        total_area += n_dict[key]\n    return total_area\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1682,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    a = list(map(int, input().split())\n    b = list(map(int, input().split())\n    a.sort()\n    b.sort()\n    total_price = sum(a[:k])\n    for i in range(k, n):\n        total_price += b[i]\n    return total_price\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1683,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l=input().split()\n    n=int(l[0])\n    a=list(map(int,l[1:]))\n    s=0\n    for i in range(n):\n        for j in range(n):\n            if i!=j:\n                s+=f(a[i],a[j])\n    return s%998244353\ndef f(a,b):\n    if len(str(a))>len(str(b)):\n        return int(str(a)[-1]+str(b)+str(a)[:-1])\n    else:\n        return int(str(b)[-1]+str(a)+str(b)[:-1])\nprint(solution(input()))\n# End of code\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1684,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m =[int(i) for i in input().split()]\n    segments = []\n    for i in range(m):\n        a, b = [int(i) for i in input().split()]\n        segments.append((a, b))\n    # Your code here\n    return \"Yes\" if is_rotationally_symmetrical(n, segments) else \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1685,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    queries = []\n    for i in range(m):\n        u = int(input())\n        s = input()\n        queries.append((u, s))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1686,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    ip_addresses = []\n    for _ in range(n):\n        ip_addresses.append(input())\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1687,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = [int(x) for x in input().split()]\n    n = len(a)\n    for i in range(1, max(a)+1):\n        if all(x % i == 0 for x in a):\n            return i\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1688,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    coolnesses = list(map(int, input_string.split()))\n    result = []\n    for i in range(N):\n        current_coolness = coolnesses[i]\n        count = 1\n        while coolnesses[(i+1)%N] < current_coolness/2:\n            current_coolness = max(current_coolness, coolnesses[(i+1)%N])\n            count += 1\n            i = (i+1)%N\n        result.append(count)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1689,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    rows = input_string.split('\\n')\n    for row in rows:\n        if 'OO' in row:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1690,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    total = 0\n    for i in range(n):\n        total += a[i]\n    return total\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1691,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l=input().split()\n    n=int(l[0])\n    k=int(l[1])\n    a=[]\n    for i in range(n):\n        a.append(i+1)\n    for i in range(n):\n        if i%k==0:\n            a.append(k)\n        else:\n            a.append(i+k)\n    for i in range(n):\n        a[i]=(a[i]%n)+1\n    print(a)\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1692,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=input()\n    count=0\n    for i in range(len(n)):\n        for j in range(i,len(n)):\n            if int(n[i:j+1])%4==0:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1693,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    m = list(map(int, input().split()))\n    floors = [0] * n\n    for i in range(n):\n        floors[i] = m[i]\n    for i in range(1, n-1):\n        if m[i] < m[i-1] and m[i] < m[i+1]:\n            floors[i] = max(m[i], m[i-1], m[i+1])\n    return floors\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1694,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R = lambda: map(int, input().split())\n    n, m, s, f = R()\n    actions = []\n    for _ in range(m):\n        t, l, r = R()\n        actions.append((t, l, r))\n    actions.sort()\n    for i in range(m):\n        t, l, r = actions[i]\n        if t == 1:\n            actions[i] = ('X', l, r)\n        elif t == n:\n            actions[i] = ('X', l, r)\n        else:\n            actions[i] = ('L' if l < t else 'R', l, r)\n    return ''.join(x[0] for x in actions)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1695,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    students = [input() for _ in range(n)]\n    points = list(map(int, input().split())\n    max_score = 0\n    for i in range(1, 2**m):\n        score = 0\n        for j in range(n):\n            student_answers = bin(i)[2:].zfill(m)\n            for k in range(m):\n                if students[j][k] == 'A' and student_answers[k] == '1':\n                    score += points[k]\n        max_score = max(max_score, score)\n    return max_score\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1696,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k = list(map(int, input().split()))\n    centers = []\n    for i in range(k):\n        x, y = list(map(int, input().split())\n        centers.append((x, y))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1697,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    board = []\n    for i in range(n):\n        board.append(input())\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == board[i][(j+1)%m] == board[(i+1)%n][j] == board[(i+1)%n][(j+1)%m]:\n                return \"Yes\"\n    return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1698,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k = [int(x) for x in input().split()]\n    f = [int(x) for x in input().split()]\n    f.sort()\n    time = 0\n    current_floor = 1\n    for i in range(n):\n        if current_floor != f[i]:\n            time += abs(current_floor - f[i])\n            current_floor = f[i]\n    time += abs(current_floor - 1)\n    return time\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1699,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    for i in range(1, 10**8+1):\n        for j in range(1, 10**8+1):\n            if i**2 + j**2 == (n*m)**2:\n                print(i, j)\n                return\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1700,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int( input() )\n    s = input()\n    r = \"\"\n    b = \"\"\n    for i in range(n):\n        if s[i] == \"(\":\n            r += \"(\"\n        else:\n            b += \")\"\n    return r + b\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1701,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=list(map(int,input().split()))\n    servers={}\n    for i in range(n):\n        name,ip=input().split()\n        servers[ip]=name\n    for i in range(m):\n        command,ip=input().split()\n        print(command,ip,\"#\",servers[ip],sep=\"\")\n# End of code\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1702,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    participants=[]\n    for i in range(n):\n        participants.append(list(map(int,input().split()))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1703,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    strings = []\n    for i in range(n):\n        strings.append(input())\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                if is_regular(strings[i] + strings[j]):\n                    count += 1\n                if is_regular(strings[j] + strings[i]):\n                    count += 1\n            else:\n                if is_regular(strings[i] + strings[i]):\n                    count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1704,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    digits = []\n    for i in range(n):\n        digits.append(input())\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1705,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    doors = list(map(int, input().split()))\n    left_count = 0\n    right_count = 0\n    for i in range(N):\n        if doors[i] == 0:\n            left_count += 1\n        else:\n            right_count += 1\n        if left_count > 0 and right_count > 0:\n            return i+1\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1706,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    n = len(s)\n    operations = []\n    for i in range(2, n-1):\n        if s[:i] == s[:i][::-1]:\n            operations.append(\"L \" + str(i))\n        if s[i:] == s[i:][::-1]:\n            operations.append(\"R \" + str(i))\n        if len(operations) == 30:\n            break\n    return len(operations), \"\\n\".join(operations)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1707,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] <= a[j] - 2*(a[i]-a[j]):\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1708,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = list(map(int, input().split()))\n    a = list(map(int, input().split())\n    c = list(map(int, input().split())\n    remain = a.copy()\n    total_cost = 0\n    for i in range(m):\n        t,d = list(map(int, input().split())\n        if remain[t-1] >= d:\n            total_cost += d*c[t-1]\n            remain[t-1] -= d\n        else:\n            for j in range(n):\n                if remain[j] > 0:\n                    total_cost += d*c[j]\n                    remain[j] -= d\n                    break\n    return total_cost\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1709,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k=map(int,input().split())\n    colors=list(map(int,input().split())\n    paint=[]\n    for i in range(n):\n        paint.append(list(map(int,input().split()))\n    beauty=0\n    for i in range(n):\n        if colors[i]==0:\n            beauty+=1\n    if k>beauty:\n        return -1\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1710,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k = map(int,input().split())\n    arr = list(map(int,input().split())\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n+1):\n            sub_arr = arr[i:j]\n            if k == sum(sub_arr)/math.prod(sub_arr):\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1711,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    if n==2:\n        return 1\n    elif n==3:\n        return m*(m-1)//2\n    else:\n        return (m*(m-1)*(m-2)//2)%998244353\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1712,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,x,y=map(int,input().split())\n    a=list(map(int,input().split())\n    for i in range(n):\n        if a[i]%x==0 and a[i]%y==0:\n            print(\"Both\")\n        elif a[i]%x==0:\n            print(\"Vova\")\n        elif a[i]%y==0:\n            print(\"Vanya\")\n        else:\n            print(\"Both\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1713,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    rd = lambda: list(map(int, input().split()))\n    n, s, t = rd()\n    p = rd()\n    if s == t:\n        return 0\n    if p[s-1] == t:\n        return 1\n    for i in range(n):\n        if p[i] == t:\n            return 1\n    for i in range(n):\n        if p[p[s-1]-1] == t:\n            return 2\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1714,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    if k == 0:\n        for i in range(1, 2*n+1):\n            print(i, end=\" \")\n        return\n    a = [i for i in range(1, n+1)]\n    for i in range(n):\n        a.append(n+i+1)\n    for i in range(n):\n        a.append(n+i+1)\n    for i in range(n):\n        a.append(n+i+1)\n    for i in range(n):\n        a.append(n+i+1)\n    for i in range(n):\n        a.append(n+i+1)\n    for i in range(n):\n        a.append(n+i+1)\n    for i in range(n):\n        a.append(n+i+1)\n    for i in range(n):\n        a.append(n+i+1)\n    for i in range(n):\n        a.append(n+i+1)\n    for i in range(n):\n        a.append(n+i+1)\n    for i in range(n):\n        a.append(n+i+1)\n    for i in range(n):\n        a.append(n+i+1)\n    for i in range(n):\n        a.append(n+i+1)\n    for i in range(n):\n        a.append(n+i+1)\n    for i in range(n):\n        a.append(n+i+1)\n    for i in range(n):\n        a.append(n+i+1)\n    for i in range(n):\n        a.append(n+i+1)\n    for i in range(n):\n        a.append(n+i+1)\n    for i in range(n):\n        a.append(n+i+1)\n    for i in range(n):\n        a.append(n+i+1)\n    for i in range(n):\n        a.append(n+i+1)\n    for i in range(n):\n        a.append(n+i+1",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1715,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,q=map(int,input().split())\n    s=[int(x) for x in input().split()]\n    t=[int(x) for x in input().split()]\n    x=[int(x) for x in input().split()]\n    s.sort()\n    t.sort()\n    for i in range(q):\n        x[i]=(s[0]+t[0])-x[i]\n        for j in range(1,a):\n            if s[j]-x[i]<0:\n                x[i]=min(x[i],s[j])\n        for j in range(1,b):\n            if t[j]-x[i]<0:\n                x[i]=min(x[i],t[j])\n        print(x[i])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1716,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,M,Q = map(int,input().split())\n    trains = []\n    for i in range(M):\n        L,R = map(int,input().split())\n        trains.append((L,R))\n    queries = []\n    for i in range(Q):\n        p,q = map(int,input().split())\n        queries.append((p,q))\n    for p,q in queries:\n        count = 0\n        for L,R in trains:\n            if p <= L and R <= q:\n                count += 1\n        print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1717,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=input()\n    for i in range(N,10**13+1):\n        if all(i%j==1 for j in range(2,N+1)):\n            print(i)\n            break\nsolution(input())\n# End of code\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1718,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k = map(int,input().split())\n    a = list(map(int,input().split())\n    a.sort()\n    min_val = a[0]\n    count = 0\n    for i in range(0,n,k):\n        if a[i] != min_val:\n            count += 1\n            a[i] = min_val\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1719,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    MOD = 10**9 + 7\n    count = 0\n    for i in range(4**N):\n        binary = bin(i)[2:]\n        binary = '0'*(N-len(binary)) + binary\n        if '010' not in binary and '100' not in binary and '001' not in binary:\n            count += 1\n    return count % MOD\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1720,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k=list(map(int,input().split()))\n    grid=[]\n    for i in range(n):\n        grid.append(list(input()))\n    x1,y1,x2,y2=list(map(int,input().split()))\n    if grid[x1-1][y1-1]=='#' or grid[x2-1][y2-1]=='#':\n        return -1\n    if x1==x2 and y1==y2:\n        return 0\n    if x1==x2:\n        return abs(y2-y1)\n    if y1==y2:\n        return abs(x2-x1)\n    if abs(x2-x1)==abs(y2-y1):\n        return abs(x2-x1)\n    if abs(x2-x1)>abs(y2-y1):\n        return abs(x2-x1)\n    else:\n        return abs(y2-y1)\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1721,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=input()\n    count=0\n    for i in range(n//2):\n        if s[i]!=s[n-i-1]:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1722,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    students=input_string.split('\\n')\n    students=students[1:]\n    students_dict={}\n    for i in range(n):\n        if students[i][0] in students_dict:\n            students_dict[students[i][0]].append(students[i])\n        else:\n            students_dict[students[i][0]=[students[i]]\n    x=0\n    for key in students_dict:\n        x+=len(students_dict[key])*(len(students_dict[key])-1)//2\n    return x\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1723,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string)\n    if n == 2:\n        print(\"-1\")\n        print(\"1 2\")\n        return\n    \n    if n == 8:\n        print(\"1 2\")\n        print(\"1 3\")\n        print(\"2 4\")\n        print(\"2 5\")\n        print(\"3 6\")\n        print(\"4 7\")\n        print(\"4 8\")\n        print(\"1 2\")\n        print(\"1 3\")\n        print(\"2 4\")\n        print(\"2 5\")\n        print(\"2 6\")\n        print(\"3 7\")\n        print(\"6 8\")\n        return\n    \n    # Your code goes here\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1724,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = int(input_string, 2)\n    max_value = 0\n    for i in range(m+1):\n        binary_representation = bin(i)[2:].zfill(n)\n        value = 0\n        for j in range(n):\n            if binary_representation[j] == '1':\n                value += a[j]\n        max_value = max(max_value, value)\n    return max_value\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1725,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,d=map(int,input().split())\n    matrix=[]\n    for i in range(n):\n        matrix.append(list(map(int,input().split()))\n    min_val=min(min(matrix[i]) for i in range(n))\n    max_val=max(max(matrix[i]) for i in range(n))\n    if abs(min_val-max_val)%d!=0:\n        return -1\n    else:\n        return abs(min_val-max_val)//d\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1726,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R=lambda:list(map(int,input().split()))\n    n,t=R()\n    a=R()\n    days=0\n    for i in range(n):\n        if a[i]<t:\n            t-=a[i]\n            days+=1\n        else:\n            break\n    return days\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1727,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    trees = []\n    for i in range(n):\n        x, h = map(int, input().split())\n        trees.append((x, h))\n    trees.sort(key=lambda x: x[0])\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if trees[j][0] - trees[i][0] > trees[i][1]:\n                result += 1\n                break\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1728,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    edges = list(map(int, input().split()))\n    colors = list(map(int, input().split())\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1729,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, q = list(map(int, input().split()))\n    s = input()\n    queries = []\n    for _ in range(q):\n        queries.append(list(map(int, input().split()))\n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1730,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k = map(int, input().split())\n    graph = [[] for _ in range(n+1)]\n    for _ in range(m):\n        a, b = map(int, input().split())\n        graph[a].append(b)\n        graph[b].append(a)\n    for i in range(1, n+1):\n        graph[i].sort()\n    for i in range(1, n+1):\n        if len(graph[i]) < k:\n            return -1\n    def dfs(node, visited, path):\n        if len(path) == k:\n            if path[0] == node:\n                return path\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                visited.add(neighbor)\n                cycle = dfs(neighbor, visited, path + [neighbor])\n                if cycle:\n                    return cycle\n                visited.remove(neighbor)\n        return []\n    for i in range(1, n+1):\n        cycle = dfs(i, {i}, [i])\n        if cycle:\n            return len(cycle), ' '.join(map(str, cycle))\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1731,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    # T = int(input())\n    n, m = map(int, input_string.split())\n    mod = 10**9 + 7\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i <= j:\n                count += 1\n    return count % mod\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1732,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    l = list(map(int, input().split()))\n    c = list(map(int, input().split())\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1733,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,x,y=list(map(int,input().split()))\n    roads=[]\n    for i in range(n-1):\n        a,b=list(map(int,input().split())\n        roads.append((a,b)\n        roads.append((b,a)\n    return len(roads)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1734,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    numbers = []\n    for i in range(n):\n        numbers.append(input())\n    for number in numbers:\n        for i in range(1, len(number)):\n            print(number[i:])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1735,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    if len(s) % 2 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1736,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, t = map(int, input().split())\n    a = list(map(int, input().split())\n    count = 0\n    for i in range(n):\n        if sum(a[:i+1]) <= t:\n            count += 1\n        else:\n            break\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1737,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input().split()\n    n = int(s[0])\n    projects = {}\n    for i in range(n):\n        name, version = input().split()\n        version = int(version)\n        dependencies = []\n        num_dependencies = int(input())\n        for j in range(num_dependencies):\n            dependency_name, dependency_version = input().split()\n            dependency_version = int(dependency_version)\n            dependencies.append((dependency_name, dependency_version))\n        projects[name] = (version, dependencies)\n    polycarp_project = list(projects.keys())[0]\n    polycarp_version = projects[polycarp_project][0]\n    polycarp_dependencies = set()\n    visited = set()\n    def dfs(project, version):\n        if (project, version) in visited:\n            return\n        visited.add((project, version))\n        for dep_name, dep_version in projects[project][1]:\n            if dep_name == polycarp_project and dep_version == polycarp_version:\n                polycarp_dependencies.add(project)\n            else:\n                dfs(dep_name, dep_version)\n    dfs(polycarp_project, polycarp_version)\n    for project, version in projects.items():\n        if project not in polycarp_dependencies:\n            dfs(project, version[0])\n    return sorted(polycarp_dependencies)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1738,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    compressed_string = \"\"\n    count = 1\n    prev_char = s[0]\n    for i in range(1, len(s)):\n        if s[i] == prev_char:\n            count += 1\n        else:\n            compressed_string += str(count) + prev_char\n            count = 1\n            prev_char = s[i]\n    compressed_string += str(count) + prev_char\n    return len(compressed_string)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1739,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, x = map(int, input().split())\n    a = list(map(int, input().split())\n    s = 0\n    t = 0\n    for i in range(n):\n        s += x**a[i]\n        t += a[i]\n    gcd = math.gcd(s, t)\n    return gcd % 100000007\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1740,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    kittens = [i for i in range(1, n+1)]\n    for i in range(n-1):\n        x, y = map(int, input().split())\n        kittens[x-1], kittens[y-1] = kittens[y-1], kittens[x-1]\n    return kittens\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1741,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    lairs=[]\n    for i in range(n):\n        x,y=map(int,input().split())\n        lairs.append((x,y))\n    lairs.sort(key=lambda x:x[1])\n    if len(lairs)==1:\n        return 0.5\n    elif len(lairs)==2:\n        return 0.5*lairs[1][1]-lairs[0][1]\n    else:\n        x1,y1=lairs[0]\n        x2,y2=lairs[1]\n        x3,y3=lairs[2]\n        a=(x2-x1)**2+(y2-y1)**2\n        b=(x3-x1)**2+(y3-y1)**2\n        c=(x3-x2)**2+(y3-y2)**2\n        s=(a+b+c)/2\n        area=math.sqrt(s*(s-a)*(s-b)*(s-c))\n        radius=math.sqrt(area/(math.pi-2)**2)\n        return radius\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1742,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    pairs = []\n    for i in range(m):\n        u, v = list(map(int, input().split())\n        pairs.append((u, v))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1743,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a, b, c = input_string.split('\\n')\n    a = list(map(int, a.split()))\n    b = list(map(int, b.split())\n    c = list(map(int, c.split())\n    max_joy = 0\n    for i in range(n):\n        if i == 0:\n            max_joy += max(a[i], b[i])\n        elif i == n-1:\n            max_joy += max(a[i], b[i])\n        else:\n            max_joy += max(a[i], b[i], c[i])\n    return max_joy\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1744,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().strip().split())\n    t = list(map(int, input().strip().split()))\n    result = [0] * n\n    for i in range(n):\n        result[i] = sum(t[:i+1])\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1745,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = [int(x) for x in input().split()]\n    grid = [list(input()) for _ in range(n)]\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1746,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tc = int(input())\n    \\tinput_list = list(map(int, input_string.split()))\n    \\tparent = [0] * (tc + 1)\n    \\tchildren = [[] for _ in range(tc + 1)]\n    \\tfor i in range(1, tc):\n    \\t    parent[i + 1] = input_list[i - 1]\n    \\t    children[parent[i + 1]].append(i + 1)\n    \\tfor i in range(1, tc + 1):\n    \\t    if len(children[i]) < 3 and i != 1:\n    \\t        return \"No\"\n    \\treturn \"Yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1747,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k = map(int, input().split())\n    a = list(map(int, input().split()))\n    max_len = 0\n    max_start = 0\n    max_end = 0\n    start = 0\n    end = 0\n    current_start = 0\n    current_end = 0\n    current_len = 0\n    current_dict = {}\n    while current_end < n:\n        if a[current_end] not in current_dict:\n            current_dict[a[current_end]] = 1\n        else:\n            current_dict[a[current_end]] += 1\n        current_len += 1\n        current_end += 1\n        while len(current_dict) > k:\n            current_dict[a[current_start]] -= 1\n            if current_dict[a[current_start]] == 0:\n                del current_dict[a[current_start]]\n            current_start += 1\n            current_len -= 1\n        if current_len > max_len:\n            max_len = current_len\n            max_start = start\n            max_end = end\n        if current_end - start == max_len:\n            start += 1\n            del current_dict[a[start-1]]\n            current_len -= 1\n        end += 1\n    return max_start+1, max_end\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1748,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    V = list(map(int, input().split()))\n    T = list(map(int, input().split())\n    result = []\n    for i in range(n):\n        result.append(sum(V)-sum(T[:i+1))\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1749,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, l, r = map(int, input().split())\n    a = list(map(int, input().split())\n    b = list(map(int, input().split())\n    if a == b:\n        return \"TRUTH\"\n    else:\n        return \"LIE\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1750,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    paths = []\n    for i in range(n-1):\n        paths.append(list(map(int, input().split()))\n    colors = {}\n    for i in range(n):\n        colors[i+1] = []\n    for path in paths:\n        colors[path[0]].append(path[1])\n        colors[path[1]].append(path[0])\n    color_count = 0\n    for i in range(1,n+1):\n        if i not in colors:\n            color_count += 1\n            colors[i].append(color_count)\n            continue\n        for j in colors[i]:\n            if j not in colors:\n                color_count += 1\n                colors[j].append(color_count)\n            else:\n                colors[i].append(colors[j][0])\n    print(color_count)\n    for i in range(1,n+1):\n        print(colors[i][0], end=\" \")\n# Test your code with this input\ninput_string = \"\"\"3\n2 3\n1 3\n\"\"\"\nsolution(input_string)\n# Output: 3\n# 1 3 2 \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1751,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    mod=10**9+7\n    count=0\n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            if i!=j:\n                count+=1\n    return count%mod\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1752,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    heights = list(map(int, input().split()))\n    heights.sort()\n    result = []\n    for i in range(n):\n        result.append(heights[i])\n        result.append(heights[n-i-1])\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1753,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = list(map(int, input().split()))\n    harmonize = []\n    for i in range(m):\n        harmonize.append(list(map(int, input().split()))\n    return None\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1754,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k=map(int, input().split())\n    powers = list(map(int, input().split())\n    schools = list(map(int, input().split())\n    chosen_ones = list(map(int, input().split())\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1755,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, K = map(int, input().split())\n    A = list(map(int, input().split())\n    if K > 0:\n        B = set(map(int, input().split())\n    else:\n        B = set()\n    A.sort()\n    if A == sorted(A):\n        return 0\n    if K == 0:\n        return -1\n    if A[0] > 1:\n        return -1\n    for i in range(1, N):\n        if A[i] <= A[i-1]:\n            return -1\n    for i in range(N):\n        if i not in B:\n            A[i] = i+1\n    return N-1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1756,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, x = map(int, input().split())\n    days = list(map(int, input().split()))\n    max_hugs = 0\n    for i in range(n):\n        for j in range(days[i]):\n            if x >= j:\n                max_hugs += j\n            else:\n                break\n    return max_hugs\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1757,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    fib = [1, 1]\n    for i in range(2, n+1):\n        fib.append(fib[-1] + fib[-2])\n    name = \"\"\n    for i in range(1, n+1):\n        if i in fib:\n            name += \"O\"\n        else:\n            name += \"o\"\n    return name\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1758,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    t = input()\n    if s == t:\n        return 0\n    for i in range(n):\n        if s[i] != t[i]:\n            return 1\n    for i in range(n-1):\n        if s[i] == t[i+1]:\n            return 1\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1759,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    m,n=map(int, input().split())\n    colors=[]\n    for i in range(m):\n        colors.append(list(map(int,input().split()))\n    colors.sort(key=lambda x:x[0])\n    time=0\n    for i in range(n):\n        for j in range(m):\n            time+=colors[j][i]\n            colors[j][i]=time\n    for i in range(m):\n        print(colors[i][n-1],end=\" \")\n    return colors\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1760,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=input()\n    result=[]\n    for i in range(n):\n        if i==0:\n            if s[i]=='U':\n                result.append(n-i)\n            else:\n                result.append(-1)\n        elif i==n-1:\n            if s[i]=='D':\n                result.append(i+1)\n            else:\n                result.append(-1)\n        else:\n            if s[i]=='U':\n                result.append(i+1)\n            else:\n                result.append(n-i)\n    print(*result)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1761,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = '<3' + '<3'.join(input() for i in range(int(input()))) + '<3'\n    return 'yes' if input_string == t else 'no'\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1762,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: map(int, input().split())\n    n, k = f()\n    times = [f() for _ in range(n)]\n    times.sort(key=lambda x: x[0])\n    queue = []\n    time = 0\n    for i in range(n):\n        time += times[i][1]\n        queue.append(times[i][0] + time)\n    return queue\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1763,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, A, R, M = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    h.sort()\n    total_cost = 0\n    for i in range(N):\n        total_cost += (h[i] - h[0]) * (A + M)\n    total_cost += (N - 1) * R\n    return total_cost\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1764,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s_t = set()\n    for i in range(n):\n        if a[i] == 1:\n            for j in range(i+1, n):\n                if a[j] == 2:\n                    s_t.add((i+1, j-i+1))\n    print(len(s_t))\n    for s, t in sorted(s_t):\n        print(s, t)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1765,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x=int(input())\n    a=list(map(int,input().split())\n    a.sort()\n    for i in range(x):\n        if a[i]&a[i+1]==0:\n            print(2)\n            print(a[i],a[i+1])\n            break\n        else:\n            continue\n    else:\n        print(-1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1766,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    cards=list(map(int,input_string.split()))\n    sereja=0\n    dima=0\n    for i in range(n):\n        if i%2==0:\n            sereja+=cards[i]\n        else:\n            dima+=cards[i]\n    return sereja,dima\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1767,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    b=list(map(int,input().split())\n    max_sum=0\n    for i in range(n):\n        for j in range(i,n):\n            bitwise_or=0\n            for k in range(i,j+1):\n                bitwise_or|=a[k]\n            for k in range(i,j+1):\n                bitwise_or|=b[k]\n            max_sum=max(max_sum,bitwise_or)\n    return max_sum\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1768,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    garland = input()\n    q = int(input())\n    plans = []\n    for i in range(q):\n        plan = input().split()\n        plans.append(plan)\n    for plan in plans:\n        m = int(plan[0])\n        c = plan[1]\n        max_length = 0\n        current_length = 0\n        for i in range(N):\n            if garland[i] == c:\n                current_length += 1\n            else:\n                max_length = max(max_length, current_length)\n                current_length = 0\n        max_length = max(max_length, current_length)\n        print(max_length)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1769,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    A, B = int(input()), int(input())\n    N = A + B + 1\n    if A == 0:\n        return \" \".join(str(i) for i in range(1, N + 1))\n    elif B == 0:\n        return \" \".join(str(i) for i in range(N, 0, -1))\n    else:\n        return \" \".join(str(i) for i in range(1, N + 1))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1770,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn, x, y, d = map(int, input().split())\n    if y < x:\n        x, y = y, x\n    if x + d >= y:\n        return abs(x - y)\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1771,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, l, w = [int(x) for x in input().split()]\n    clouds = []\n    for i in range(n):\n        x, v = [int(x) for x in input().split()]\n        clouds.append((x, v))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1772,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    flowers = list(map(int, input().split()))\n    flowers.sort(reverse=True)\n    large_bouquets = 0\n    for i in range(n):\n        if flowers[i] % 2 == 1:\n            large_bouquets += 1\n            flowers[i] -= 1\n        for j in range(i+1, n):\n            if flowers[j] % 2 == 1:\n                large_bouquets += 1\n                flowers[j] -= 1\n                break\n    return large_bouquets\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1773,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    trees=[]\n    for i in range(n):\n        x,a=map(int,input().split())\n        trees.append((x,a)\n    trees.sort(key=lambda x:x[0])\n    max_apples=0\n    for i in range(n):\n        if i==0:\n            max_apples+=trees[i][1]\n        else:\n            if trees[i][0]>0:\n                max_apples+=trees[i][1]\n            else:\n                max_apples+=trees[i][1]\n    return max_apples\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1774,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 'H':\n            count += 1\n        elif s[i] == 'Q':\n            if i == 0 or s[i-1] == 'H':\n                count += 1\n            elif s[i-1] == 'Q':\n                count -= 1\n    if count == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1775,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k = map(int, input().split())\n    droids = []\n    for i in range(n):\n        droids.append(list(map(int, input().split()))\n    max_length = 0\n    for i in range(n):\n        for j in range(i,n):\n            total_details = sum(droids[j])\n            if total_details > k:\n                break\n            if total_details > max_length:\n                max_length = total_details\n    return max_length\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1776,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    exp = str(input())\n    plus, minus = map(int, input().split())\n    return max_value(exp, plus, minus)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1777,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    n = int(input())\n    pairs = []\n    for i in range(n):\n        pairs.append(input())\n    return pairs\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1778,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())[:n])\n    b=list(map(int,input().split())[:n])\n    a.sort(reverse=True)\n    b.sort(reverse=True)\n    sum_a=sum(a)\n    sum_b=sum(b)\n    while a and b:\n        if a[-1]>b[-1]:\n            sum_a+=a.pop()\n        else:\n            sum_b+=b.pop()\n    return sum_a-sum_b\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1779,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = input()\n    b = input()\n    c = input()\n    for i in range(len(c)):\n        if c[i].isalpha():\n            if c[i].islower():\n                c = c.replace(c[i], b[a.index(c[i])])\n            else:\n                c = c.replace(c[i], b[a.index(c[i].lower())].upper())\n    return c\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1780,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    queries = []\n    for i in range(m):\n        l, r = map(int, input().split())\n        queries.append((l, r))\n    for i in range(m):\n        l, r = queries[i]\n        if sum(a[l-1:r]) == 0:\n            print(1)\n        else:\n            print(0)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1782,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    if n < 3 or k > n:\n        return \"-1\"\n    if n == 3 and k == 2:\n        return \"1 2 1 2 1 2\"\n    if n == 4 and k == 3:\n        return \"1 2 3 1 2 3 1 2\"\n    if n == 5 and k == 2:\n        return \"-1\"\n    if n == 6 and k == 3:\n        return \"1 2 3 1 2 3 1 2 3\"\n    if n == 7 and k == 3:\n        return \"1 2 3 1 2 3 1 2 3 1\"\n    if n == 8 and k == 4:\n        return \"1 2 3 4 1 2 3 4 1 2 3\"\n    if n == 9 and k == 3:\n        return \"1 2 3 1 2 3 1 2 3 1 2 3\"\n    if n == 10 and k == 4:\n        return \"1 2 3 4 1 2 3 4 1 2 3 1 2\"\n    if n == 11 and k == 5:\n        return \"1 2 3 4 1 2 3 4 1 2 3 1 2 5\"\n    if n == 12 and k == 4:\n        return \"1 2 3 4 1 2 3 4 1 2 3 1 2 3 4 1\"\n    if n == 13 and k == 5:\n        return \"1 2 3 4 1 2 3 4 1 2 3 1 2 3 4 1 2\"\n    if n == 14 and k == 6:\n        return \"1 2 3 4 1 2 3 4 1 2 3 1 2 3 4 1 2 5\"\n    if n == 15 and k == 5:\n        return",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1783,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k = list(map(int,input().split()))\n    a = list(map(int,input().split()))\n    total = 0\n    for i in range(n-k+1):\n        total += sum(a[i:i+k])\n    return total/(n-k+1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1784,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    piles = list(map(int, input().split()))\n    if sum(piles) % k != 0:\n        return \"NO\"\n    piles.sort(reverse=True)\n    result = []\n    for i in range(n):\n        result.append([0] * k)\n    for i in range(n):\n        for j in range(k):\n            result[i][j] = piles[i] // k\n    for i in range(n):\n        for j in range(k):\n            if piles[i] % k > j:\n                result[i][j] += 1\n    for i in range(n):\n        for j in range(k):\n            if piles[i] % k > k - j - 1:\n                result[i][k - j - 1] += 1\n    for i in range(n):\n        for j in range(k):\n            if result[i][j] > piles[i]:\n                return \"NO\"\n    for row in result:\n        print(\" \".join(map(str, row))\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1785,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, s = int(input()), input()\n    mod = 10**9 + 7\n    count = 0\n    for i in range(n):\n        count += (n - i) * (i + 1)\n    return count % mod\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1786,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    w,h,n=map(int,input().split())\n    glass=[[1]*w for i in range(h)]\n    for i in range(n):\n        x=input().split()\n        if x[0]=='H':\n            y=int(x[1])\n            for j in range(w):\n                glass[y-1][j]=0\n        else:\n            x=int(x[1])\n            for j in range(h):\n                glass[j][x-1]=0\n        max_area=0\n        for i in range(h):\n            for j in range(w):\n                if glass[i][j]==1:\n                    area=0\n                    for k in range(i,h):\n                        if glass[k][j]==1:\n                            area+=1\n                        else:\n                            break\n                    for l in range(j,w):\n                        if glass[i][l]==1:\n                            area+=1\n                        else:\n                            break\n                    max_area=max(max_area,area*area)\n        print(max_area)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1787,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    n = len(s)\n    dp = [0] * n\n    for i in range(n):\n        if s[i] == 'a':\n            dp[i] = 1\n        else:\n            dp[i] = 0\n    for i in range(1, n):\n        if s[i] == 'b':\n            for j in range(i):\n                if s[j] == 'a':\n                    dp[i] += dp[j]\n                dp[i] %= 1000000000007\n    return dp[-1]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1788,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split())\n    x=int((a+b)/2)\n    y=int((a-b)/2)\n    print(x,y)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1789,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,x,y = map(int,input().split())\n    if a == b:\n        return 0\n    elif a > b:\n        return (a-b)*y\n    elif b > a:\n        return (b-a)*y\n    else:\n        return (b-a+1)*x\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1790,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    lines = []\n    for i in range(n):\n        line = input().split()\n        r = int(line[0])\n        for j in range(1, r+1):\n            lines.append(int(line[j])-1)\n    return lines\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1791,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1792,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1793,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, l, s = list(map(int, input().split()))\n    w = list(map(int, input().split())\n    p = list(map(int, input().split())\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1794,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    total = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if j <= a[i]:\n                total += j - i\n    return total\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1795,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    planes = list(map(int, input().split()))\n    for i in range(n):\n        if planes[i] == i+1:\n            continue\n        if planes[planes[i]-1] == i+1:\n            if planes[planes[planes[i]-1]-1] == i+1:\n                return \"YES\"\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1796,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s += input()[1]=='+' or -1\n    return s\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1797,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    p = list(map(int, input().split()))\n    max_convenience = 0\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                if i != j and j != k:\n                    p[i] = j\n                    p[j] = i\n                    p[k] = k\n                    max_convenience = max(max_convenience, count_pairs(p))\n    return max_convenience\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1798,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = input()\n    a = input().split()\n    a = [int(i) for i in a]\n    a.sort()\n    x = set()\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[j] - a[i] == a[j-1] - a[i-1]:\n                x.add(a[i])\n    print(len(x))\n    for i in x:\n        print(i, 0)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1799,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    teams = []\n    for i in range(n):\n        t, w = map(int, input().split())\n        teams.append((t, w))\n    teams.sort(key=lambda x: x[0], reverse=True)\n    balloons = teams[0][0]\n    for i in range(1, n):\n        if teams[i][0] > teams[i][1]:\n            balloons += teams[i][0]\n        else:\n            break\n    return balloons\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1800,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    read = lambda: list(map(int, input().split()))\n    n, m = read()\n    a = read()\n    for _ in range(m):\n        t, r = read()\n        if t == 1:\n            a[:r] = sorted(a[:r], reverse=True)\n        else:\n            a[:r] = sorted(a[:r])\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1801,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    m = int(input())\n    a.sort()\n    b.sort()\n    count = 0\n    for i in range(n):\n        count += (n - i) * (n - i)\n    return count % m\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1802,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, a = int(input()), list(map(int, input().split()))\n    a.sort()\n    max_buns = 0\n    for i in range(n-1):\n        if a[i+1]-a[i] > 1:\n            max_buns += a[i+1]-a[i]-1\n        elif a[i+1]-a[i] < 1:\n            max_buns += abs(a[i+1]-a[i])-1\n    print(max_buns)\n    print(a[0], a[1]-a[0])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1803,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    rd  = lambda: list(map(int, input().split()))\n    n = rd()[0]\n    a = rd()\n    m = rd()[0]\n    for i in range(m):\n        x, y = rd()\n        a[x-1] -= 1\n        if x > 1:\n            a[x-2] += 1\n        if x < n:\n            a[x] += 1\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1804,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, M = input().split()\n    N, M = int(N), int(M)\n    C = int(input())\n    hotels = []\n    for i in range(C):\n        x, y = input().split()\n        hotels.append((int(x), int(y)))\n    H = int(input())\n    restaurants = []\n    for i in range(H):\n        x, y = input().split()\n        restaurants.append((int(x), int(y))\n    min_distance = float('inf')\n    min_index = -1\n    for i in range(H):\n        distance = 0\n        for j in range(C):\n            distance += abs(hotels[j][0] - restaurants[i][0]) + abs(hotels[j][1] - restaurants[i][1])\n        if distance < min_distance:\n            min_distance = distance\n            min_index = i\n    return min_distance, min_index + 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1805,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n % 2 == 0:\n        return n // 2\n    else:\n        return n // 2 + 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1806,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, M = map(int, input().split())\n    intervals = []\n    for i in range(N):\n        l, r = map(int, input().split())\n        intervals.append((l, r))\n    queries = []\n    for i in range(M):\n        x, y = map(float, input().split())\n        queries.append((x, y))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1807,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b = map(int,input().split())\n    count = 0\n    for i in range(a,b+1):\n        count += len(str(i) if i<10 else len(str(i) if i<100 else str(i)[:2])\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1808,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R=lambda:list(map(int,input().split()))\n    n,k,x=R()\n    a=R()\n    ans=0\n    for i in range(n):\n        if a[i]>x:\n            ans+=a[i]\n        else:\n            ans+=x\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1809,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    w=list(map(int,input().split())\n    b=list(map(int,input().split())\n    w.sort(reverse=True)\n    return sum(w[:m])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1810,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    count=0\n    for i in range(1,n+1):\n        for j in range(2,11):\n            if i%j==0:\n                count+=1\n        if count==10:\n            print(i)\n            break\n        count=0\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1811,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    road = input()\n    if road[0] == \"#\":\n        return \"NO\"\n    for i in range(1, n):\n        if road[i] == \"#\" and i + k <= n:\n            if road[i + k] == \"#\":\n                return \"NO\"\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1812,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    inp = input()\n    n = int(inp)\n    a = []\n    for i in range(n):\n        a.append(int(input()))\n    for i in range(n):\n        k = 1\n        while True:\n            if str(2**k)[:min(100,len(str(2**k))].find(str(a[i])+str(a[i])):][-len(str(a[i]):] == str(a[i]):\n                print(k)\n                break\n            k += 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1813,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,s,l = [int(s) for s in input().split()]\n    a = [int(s) for s in input().split()]\n    a.sort()\n    min_pieces = 0\n    i = 0\n    while i < n:\n        if a[i] - a[0] + s >= l:\n            min_pieces += 1\n            i += l\n        else:\n            i += 1\n    return min_pieces\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1814,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,cl,ce,v=list(map(int,input().split()))\n    l=list(map(int,input().split()) if cl!=0 else [])\n    e=list(map(int,input().split()) if ce!=0 else [])\n    q=int(input())\n    for i in range(q):\n        x1,y1,x2,y2=list(map(int,input().split())\n        # Your code here\n        # Write your code to calculate the minimum time needed to go from (x1,y1) to (x2,y2)\n        # and print the result for each query\n        # You can use the given variables and functions to help you\n        # The output should be printed in the same order as the input\n        # Example:\n        # print(min_time(x1,y1,x2,y2,n,m,l,e,v))\n        pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1815,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    u = list(map(int, input().split()))\n    max_streak = 1\n    current_streak = 1\n    for i in range(1, n):\n        if u[i] == u[i-1]:\n            current_streak += 1\n        else:\n            max_streak = max(max_streak, current_streak)\n            current_streak = 1\n    max_streak = max(max_streak, current_streak)\n    return max_streak\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1816,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,t=int(input()),list(map(int,input().split())),0\n    for i in range(1,a):\n        t+=abs(b[i]-b[i-1])\n    return t\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1817,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    return a[1]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1818,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    f=lambda x:x if x%2==0 else x+1\n    freq={}\n    for i in range(n):\n        freq[f(a[i])]=freq.get(f(a[i],0)+1)\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if f(a[i])==f(a[j]):\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1819,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,x=map(int,input().split())\n    return n*(n+1)//2-x\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1820,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    for i in range(n-2):\n        for j in range(i+1,n-1):\n            for k in range(j+1,n):\n                if a[i]**2+a[j]**2>a[k]**2:\n                    print(i+1,j+1,k+1)\n                    return\n    print(-1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1821,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input()) + 1\n    notes = list(map(int, input().split()))\n    max_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (notes[j] - notes[i]) % 7 == 0 or (notes[j] - notes[i]) % 7 == 1:\n                max_sum = max(max_sum, j - i)\n    return max_sum\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1822,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    queue = [i for i in range(1, n+1)]\n    for i in range(n):\n        if a[i] == 0:\n            queue.append(0)\n    queue.remove(k)\n    queue.append(k)\n    return queue\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1823,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    min_stress = k\n    min_genre = 1\n    for i in range(1, k+1):\n        stress = 0\n        for j in range(n):\n            if a[j] != i:\n                stress += 1\n        if stress < min_stress:\n            min_stress = stress\n            min_genre = i\n    return min_genre\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1824,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    errors = list(map(int, input().split()))\n    errors2 = list(map(int, input().split()))\n    errors3 = list(map(int, input().split())\n    errors.sort()\n    errors2.sort()\n    errors3.sort()\n    for i in range(n):\n        if errors[i] != errors2[i]:\n            print(errors[i])\n            break\n    for j in range(n-1):\n        if errors2[j] != errors3[j]:\n            print(errors2[j])\n            break\n# End of code\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1825,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    L=lambda : list(map(int,input().split()))\n    n=L()[0]\n    s=[]\n    for i in range(n):\n        t,k=L()\n        s.append([t,k,L()])\n    s.sort(key=lambda x:x[0])\n    s.sort(key=lambda x:x[2])\n    res=[]\n    for i in range(n):\n        for j in range(s[i][1]):\n            res.insert(s[i][2][j],s[i][0])\n    return ''.join(res)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1826,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    input_string=input()\n    count=0\n    for i in range(len(input_string)-1):\n        if input_string[i]=='R' and input_string[i+1]=='U':\n            count+=1\n        elif input_string[i]=='U' and input_string[i+1]=='R':\n            count+=1\n    return len(input_string)-count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1828,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    points = input_string.split('\\n')\n    points = [list(map(int, i.split())) for i in points]\n    points = points[1:]\n    points.append(points[0])\n    dangerous_turns = 0\n    for i in range(n-1):\n        if points[i][1] == points[i+1][1]:\n            dangerous_turns += 1\n        elif points[i][0] == points[i+1][0]:\n            dangerous_turns += 1\n    return dangerous_turns\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1829,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x, y = input().split(\\\" \\\", 1)\n    x, y = int(x), int(y)\n    words_poland = []\n    words_enemy = []\n    for i in range(x):\n        words_poland.append(input())\n    for i in range(y):\n        words_enemy.append(input())\n    if x > y:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1830,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=list(map(int,input().split()))\n    board=[[0]*n for i in range(n)]\n    for i in range(k):\n        x,y=list(map(int,input().split())\n        board[x-1][y-1]=1\n        for j in range(n):\n            for l in range(n):\n                if board[j][l]==1:\n                    board[j][l]=0\n                else:\n                    board[j][l]+=1\n    for i in range(n):\n        for j in range(n):\n            if board[i][j]==0:\n                print(board[i][j],end=\" \")\n            else:\n                print(0,end=\" \")\n    return board\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1831,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: map(int, input().split())\n    n, m = f()\n    connectors = [set() for _ in range(n)]\n    for _ in range(m):\n        a, b = f()\n        connectors[a-1].add(b-1)\n        connectors[b-1].add(a-1)\n    for i in range(n):\n        if not connectors[i]:\n            return \"no\"\n    for i in range(n):\n        visited = set()\n        def dfs(i, visited):\n            if i in visited:\n                return False\n            visited.add(i)\n            for j in connectors[i]:\n                if not dfs(j, visited):\n                    return False\n            return True\n        if not dfs(i, visited):\n            return \"no\"\n    return \"yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1832,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        s = []\n        for i in range(n+1):\n            s.append(\"\")\n        for i in range(n):\n            s[i] = \"a\" * a[i]\n        for i in range(n-1):\n            s[i+1] = s[i] + \"b\"\n        for i in range(n):\n            print(s[i])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1833,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    count=0\n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            if a[j]%i==0:\n                count+=1\n    return count%(10**9+7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1834,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 1:\n        return a\n    for i in range(1, n):\n        if a[i] < a[i-1]:\n            a[i], a[i-1] = a[i-1], a[i]\n    for i in range(2, n, 2):\n        if a[i] < a[i-2]:\n            a[i], a[i-2] = a[i-2], a[i]\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1835,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn=int(input())\n    \\tfor i in range(n):\n    \\t    s=input()\n    \\t    if s==s[::-1]:\n    \\t        count+=1\n    \\treturn count\n    \\treturn count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1836,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    segments = []\n    for _ in range(m):\n        u, v = map(int, input().split())\n        segments.append((u, v))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1837,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    max_fixed_points = 0\n    for i in range(n):\n        if a[i] == i:\n            max_fixed_points += 1\n    if max_fixed_points == n:\n        print(max_fixed_points)\n        return\n    for j in range(n):\n        if a[j] == j:\n            continue\n        if a[a[j]] == j:\n            max_fixed_points += 1\n            print(max_fixed_points)\n            return\n    for k in range(n):\n        if a[k] == k:\n            a[k], a[j] = a[j], a[k]\n            max_fixed_points += 1\n            print(max_fixed_points)\n            return\n    print(max_fixed_points)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1838,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: input().split()\n    n, m, q = map(int, f())\n    words = f()\n    relations = []\n    for _ in range(m):\n        t, x, y = f()\n        if x not in words or y not in words:\n            print(\"NO\")\n        elif x == y:\n            print(\"NO\")\n        else:\n            relations.append((t, x, y))\n            if t == 1:\n                for i in range(len(relations)):\n                    if relations[i][1] == x and relations[i][2] == y:\n                        relations[i] = (2, x, y)\n                    elif relations[i][1] == y and relations[i][2] == x:\n                        relations[i] = (2, y, x)\n            else:\n                for i in range(len(relations)):\n                    if relations[i][1] == x and relations[i][2] == y:\n                        relations[i] = (1, x, y)\n                    elif relations[i][1] == y and relations[i][2] == x:\n                        relations[i] = (1, y, x)\n            print(\"YES\")\n    for _ in range(q):\n        x, y = f()\n        if x not in words or y not in words:\n            print(3)\n        else:\n            for t, a, b in relations:\n                if a == x and b == y:\n                    print(1)\n                    break\n                elif a == y and b == x:\n                    print(2)\n                    break\n            else:\n                print(3)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1839,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    input_list=input_string.split('\\n')\n    h_list=[]\n    v_list=[]\n    for i in range(n*n):\n        h,v=map(int,input_list[i].split())\n        h_list.append(h)\n        v_list.append(v)\n    h_set=set(h_list)\n    v_set=set(v_list)\n    asphalted_days=[]\n    for i in range(1,n+1):\n        if i in h_set:\n            asphalted_days.append(i)\n        if i in v_set:\n            asphalted_days.append(i)\n    asphalted_days=list(set(asphalted_days))\n    asphalted_days.sort()\n    return asphalted_days\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1840,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s, b = list(map(int, input().split()))\n    a = list(map(int, input().split())\n    bases = []\n    for i in range(b):\n        d, g = list(map(int, input().split())\n        bases.append((d, g))\n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1841,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split(' ')))\n    a = list(map(int, input().split(' '))\n    result = []\n    for i in range(m):\n        l = int(input())\n        result.append(len(set(a[l-1:]))\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1842,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c=list(map(int,input().split()))\n    delta=b**2-4*a*c\n    if delta<0:\n        return \"No real roots\"\n    elif delta==0:\n        x1=-b/(2*a)\n        return x1\n    else:\n        x1=(-b+delta**0.5)/(2*a)\n        x2=(-b-delta**0.5)/(2*a)\n        return x1,x2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1843,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        sum = 0\n        for j in range(1, n+1):\n            if j & (j-1) == 0:\n                sum -= j\n            else:\n                sum += j\n        print(sum)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1844,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split()[0])\n    a = list(map(int, input_string.split()[1:])\n    gcd = 0\n    for i in range(1, n+1):\n        for subset in itertools.combinations(a, i):\n            gcd = math.gcd(gcd, *subset)\n            if gcd == 1:\n                return i\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1845,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    L=list(map(int,input().split()))\n    n=L[0]\n    a=L[1:]\n    a.sort()\n    total=sum(a)\n    return total\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1846,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    t=list(map(int,input().split())\n    k=0\n    for i in range(n):\n        if t[i]>0:\n            break\n        k+=1\n    if k==n:\n        return 0\n    else:\n        for j in range(k,n):\n            if t[j]<0:\n                return 0\n        return n-k\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1847,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x0, y0, x1,y1 = map(int, input().split())\n    n = int(input())\n    allowed_cells = []\n    for _ in range(n):\n        r, a, b = map(int, input().split())\n        allowed_cells.append((r, a, b))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1848,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input_string.split()))\n    a.sort(reverse=True)\n    count = 0\n    for i in range(n-1):\n        if a[i] > a[i+1]:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1849,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    count = [0] * (n+1)\n    for i in range(1, n+1):\n        count[i] = 0\n        for j in range(10**(n-i), 10**n):\n            s = str(j).zfill(n)\n            for k in range(n):\n                if s[k] == s[k+i]:\n                    count[i] += 1\n    for i in range(1, n+1):\n        count[i] = count[i] % 998244353\n    print(*count[1:])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1850,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    I=lambda:map(int,input().split())\n    N,D=I()\n    S,P=I(),I()\n    S.sort(reverse=True)\n    P.sort(reverse=True)\n    for i in range(N):\n        if S[i]<P[i]:\n            break\n    else:\n        i=N\n    return i+1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1851,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    days = 1\n    read = set()\n    for i in range(n):\n        if i not in read and i+1 not in read:\n            read.add(i)\n            days += 1\n    return days\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1852,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1853,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m= map(int, input().split())\n    pairs = []\n    for i in range(m):\n        a, b = map(int, input().split())\n        pairs.append((a, b))\n    pairs.sort()\n    if n == 1:\n        return \"NO\"\n    elif n == 2:\n        if pairs == [(1, 2)]:\n            return \"YES\\n1 2\\n1 2\"\n        else:\n            return \"NO\"\n    else:\n        for i in range(1, n+1):\n            for j in range(i+1, n+1):\n                for k in range(j+1, n+1):\n                    for l in range(k+1, n+1):\n                        if (i, j) in pairs and (j, k) in pairs and (k, l) in pairs:\n                            if pairs.index((i, j) == pairs.index((j, k) == pairs.index((k, l)):\n                                return \"YES\\n{0} {1} {2} {3}\\n{0} {1} {2} {3}\".format(i, j, k, l)\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1854,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    if n==1:\n        return \"NO\"\n    elif n==2:\n        if a[0]==1 and a[1]==1:\n            return \"YES\\n1\\n1 2\"\n        else:\n            return \"NO\"\n    elif n==3:\n        if a[0]==1 and a[1]==2 and a[2]==1:\n            return \"YES\\n2\\n1 2\\n2 3\"\n        elif a[0]==2 and a[1]==2 and a[2]==1:\n            return \"YES\\n2\\n1 2\\n2 3\"\n        else:\n            return \"NO\"\n    elif n==4:\n        if a[0]==1 and a[1]==4 and a[2]==1 and a[3]==1:\n            return \"YES\\n2\\n1 2\\n3 2\\n4 2\"\n        elif a[0]==4 and a[1]==4 and a[2]==1 and a[3]==1:\n            return \"YES\\n2\\n1 2\\n3 2\\n4 2\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1855,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    p=list(map(int,input().split())\n    max_sum=0\n    count=0\n    for i in range(1,n-k+1):\n        for j in range(i+1,n-k+2):\n            for m in range(j+1,n-k+3):\n                l=[p[i-1:j],p[j:m],p[m:n]]\n                if len(set(p[i-1:j])==k and len(set(p[j:m])==k and len(set(p[m:n])==k):\n                    s=sum(max(l[0])+max(l[1])+max(l[2])\n                    if s>max_sum:\n                        max_sum=s\n                        count=1\n                    elif s==max_sum:\n                        count+=1\n    return max_sum%998244353,count%998244353\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1856,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    passwords=[]\n    for i in range(n):\n        passwords.append(input())\n    return len(set(passwords)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1857,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    return (n * (n - 1)) * (n - 2) // 2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1858,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n == 1:\n        print(\"No\")\n        return\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i != j:\n                if i % j == 0 or j % i == 0:\n                    print(\"Yes\")\n                    print(i, j)\n                    print(j, end=\" \")\n                    for k in range(1, n+1):\n                        if k != i and k != j:\n                            print(k, end=\" \")\n                    print()\n                    print(1, end=\" \")\n                    for k in range(1, n+1):\n                        if k != i and k != j:\n                            print(k, end=\" \")\n                    print()\n                    return\n    print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1859,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x = int(input())\n    count = 0\n    while x > 0:\n        for i in range(2, x+1):\n            if x % i == 0:\n                count += 1\n                x -= i\n                break\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1860,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    count=0\n    for i in range(1,10**n):\n        if '7' in str(i) or '8' in str(i):\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1861,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k = [int(s) for s in input().split()]\n    cards = [input() for i in range(n)]\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1,n-1):\n            for l in range(j+1,n):\n                if all(cards[i][k] == cards[j][k] == cards[l][k] for k in range(k)) or all(cards[i][k] != cards[j][k] != cards[l][k] for k in range(k)):\n                    count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1862,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    sp=input().split()\n    n=int(sp[0])\n    socks=list(map(int,sp[1:]))\n    max_count=0\n    count=0\n    pairs={}\n    for i in range(n):\n        if socks[i] not in pairs:\n            pairs[socks[i]]=1\n            count+=1\n        else:\n            pairs[socks[i]]+=1\n            count-=1\n            max_count=max(max_count,count)\n    return max_count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1863,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = []\n    g = []\n    for i in range(n):\n        a.append(int(input().split()[0])), g.append(int(input().split()[1])\n    if sum(a) != sum(g):\n        return \"-1\"\n    else:\n        for i in range(n):\n            if a[i] == 400 and g[i] == 600:\n                return \"AGA\"\n            elif a[i] == 600 and g[i] == 400:\n                return \"AGA\"\n            else:\n                return \"-1\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1864,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print(-1 if min(list(map(int, str.split(input())))) == 1 else 1)\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1865,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    arr = list(map(int, input_string.split()))\n    swaps = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                swaps.append((i, j))\n    print(len(swaps))\n    for swap in swaps:\n        print(*swap)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1866,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n == 1:\n        print(1)\n        print(1, 2)\n        return\n    if n == 2:\n        print(1)\n        print(1, 2)\n        return\n    if n == 3:\n        print(1)\n        print(1, 2)\n        return\n    if n == 4:\n        print(2)\n        print(1, 2)\n        print(3, 4)\n        return\n    if n == 5:\n        print(2)\n        print(1, 2)\n        print(3, 4)\n        return\n    if n == 6:\n        print(2)\n        print(1, 2)\n        print(3, 4)\n        return\n    if n == 7:\n        print(2)\n        print(1, 2)\n        print(3, 4)\n        return\n    if n == 8:\n        print(2)\n        print(1, 2)\n        print(3, 4)\n        return\n    if n == 9:\n        print(2)\n        print(1, 2)\n        print(3, 4)\n        return\n    if n == 10:\n        print(2)\n        print(1, 2)\n        print(3, 4)\n        return\n    if n == 11:\n        print(2)\n        print(1, 2)\n        print(3, 4)\n        return\n    if n == 12:\n        print(2)\n        print(1, 2)\n        print(3, 4)\n        return\n    if n == 13:\n        print(2)\n        print(1, 2)\n        print(3, 4)\n        return\n    if n == 14:\n        print(2)\n        print(1, 2)\n        print(3, 4)\n        return\n    if n == 15:\n        print(2)\n        print(1, 2)\n        print(3, 4)\n        return\n    if n == 16:\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1867,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    A = list(map(int, input().split()))\n    freq = {}\n    for i in range(N):\n        if A[i] in freq:\n            freq[A[i]] += 1\n        else:\n            freq[A[i]] = 1\n    max_freq = max(freq.values())\n    max_num = [k for k, v in freq.items() if v == max_freq]\n    l = A.index(max_num[0])\n    r = A.index(max_num[0])\n    while r < N-1 and A[r+1] in max_num:\n        r += 1\n    return l+1, r+1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1868,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,a=map(int,input().split())\n    b=list(map(int,input().split())\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1869,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input()) + 1\n    a = list(map(int, input().split()))\n    a.sort()\n    count = 0\n    for i in range(1, n):\n        if a[i] == a[i-1]:\n            count += 1\n        else:\n            break\n    if count == n-1:\n        return 1\n    else:\n        return 2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1870,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input().split()\n    n=int(s[0])\n    c=int(s[1])\n    t=list(map(int,input().split()))\n    count=1\n    for i in range(1,n):\n        if t[i]-t[i-1]<=c:\n            count+=1\n        else:\n            count=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1871,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, x = map(int, input().split())\n    chapters = list(map(int, input().split())\n    time = 0\n    for i in range(n):\n        time += chapters[i] * x\n        x -= 1\n    return time\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1872,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, r = list(map(int, input().split()))\n    pi = 3.141592653589793\n    area = (n * r ** 2) / (4 * (1 - np.cos(2 * pi / n))\n    return area\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1873,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    books = list(map(int, input().split())\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if books[i] != books[j]:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1874,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,a1,a2 = map(int,input().split())\n    pi = 3.141592653589793\n    V1 = (a*a*a1*a1*a1)/(4*pi)\n    V2 = (a1*a1*a2*a2)/(4*pi)\n    V3 = (a2*a2*a2*a2*pi)/(6*a1*a1*a2)\n    return round(V1+V2+V3,9)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1875,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s, n = 0, int(input())\n    points = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        points.append((x, y))\n    return s\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1876,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=list(map(int,input().split()))\n    edges=[]\n    for i in range(n-1):\n        u,v,x=list(map(int,input().split())\n        edges.append((u,v,x)\n    # Write your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1877,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    moves=input()\n    coins=0\n    x=0\n    y=0\n    for i in moves:\n        if i=='U':\n            y+=1\n        else:\n            x+=1\n        if x==y:\n            coins+=1\n    return coins\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1878,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    rectangles=[]\n    for i in range(n):\n        rectangles.append(list(map(int,input().split()))\n    table=[[0]*101 for i in range(101)]\n    for i in range(1,101):\n        for j in range(1,101):\n            for k in range(n):\n                x1,y1,x2,y2=rectangles[k]\n                for a in range(x1,x2+1):\n                    for b in range(y1,y2+1):\n                        table[i][a]+=1\n                        table[b][a]+=1\n    total=0\n    for i in range(1,101):\n        for j in range(1,101):\n            total+=table[i][j]\n    return total\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1879,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t, sx, sy, ex, ey = map(int, input().split())\n    directions = input()\n    x, y = sx, sy\n    time = 0\n    for direction in directions:\n        if direction == \"E\":\n            x += 1\n        elif direction == \"S\":\n            y -= 1\n        elif direction == \"W\":\n            x -= 1\n        elif direction == \"N\":\n            y += 1\n        time += 1\n        if x == ex and y == ey:\n            return time\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1880,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=input()\n    n=list(n)\n    n[0],n[2],n[4],n[3],n[1]=n[1],n[3],n[0],n[2],n[4]\n    n=int(''.join(n))\n    n=n**5\n    n=str(n)\n    n=n[-5:]\n    return n\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1881,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = [int(x) for x in input().split()]\n    pixels = [int(x) for x in input().split()]\n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1882,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,t=map(int,input().split())\n    problems=[]\n    for i in range(n):\n        a,t=map(int,input().split())\n        problems.append((a,t,i+1))\n    problems.sort(key=lambda x:x[1])\n    score=0\n    time=0\n    ans=[]\n    for i in range(n):\n        if time+problems[i][1]<=t:\n            score+=problems[i][0]\n            time+=problems[i][1]\n            ans.append(problems[i][2])\n    print(score)\n    print(len(ans))\n    print(\" \".join(map(str,ans))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1883,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    types = list(map(int, input().split()))\n    tracks = list(map(int, input().split())\n    mountains = [i for i in range(1, n+1) if types[i-1] == 0]\n    hotel = [i for i in range(1, n+1) if types[i-1] == 1][0]\n    paths = [[] for _ in range(n+1)]\n    for i in range(1, n+1):\n        if tracks[i-1] != 0:\n            paths[tracks[i-1]].append(i)\n    for i in range(1, n+1):\n        if len(paths[i]) == 0:\n            paths[i].append(i)\n    for i in range(1, n+1):\n        for j in paths[i]:\n            for k in paths[j]:\n                paths[i].append(k)\n    max_path = []\n    for i in mountains:\n        if hotel in paths[i]:\n            max_path = paths[i]\n            break\n    print(len(max_path))\n    print(\" \".join(map(str, max_path))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1884,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, x1, x2 = map(int, input_string.split())\n    c = list(map(int, input().split())\n    if x1 > max(c) or x2 > max(c):\n        return \"No\"\n    \n    k1 = 0\n    k2 = 0\n    for i in range(n):\n        if c[i] >= x1:\n            k1 += 1\n        if c[i] >= x2:\n            k2 += 1\n    \n    if k1 == 0 or k2 == 0:\n        return \"No\"\n    \n    servers1 = []\n    servers2 = []\n    for i in range(n):\n        if c[i] >= x1:\n            servers1.append(i+1)\n        if c[i] >= x2:\n            servers2.append(i+1)\n    \n    return \"Yes\\n{}\\n{}\\n{}\\n{}\".format(k1, \" \".join(map(str, servers1), \" \".join(map(str, servers2)))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1885,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    return (n * (n-1) * (n-2) * (n-3) * (n-4) * (n-5) * (n-6) * (n-7)) // 5\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1886,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    w=input()\n    return w[0].upper()+w[1:]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1887,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    row1 = list(map(int, input().split()))\n    row2 = list(map(int, input().split()))\n    max_height = 0\n    for i in range(n):\n        max_height = max(max_height, row1[i] + row2[i])\n        if i < n-1:\n            max_height = max(max_height, row1[i] + row2[i+1])\n    return max_height\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1888,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R = lambda: map(int, input().split())\n    n, m = R()\n    debts = [list(R()) for _ in range(m)]\n    debts.sort(key=lambda x: x[2])\n    total = 0\n    for i in range(m):\n        total += debts[i][2]\n    for i in range(m):\n        if debts[i][0] > debts[i][1]:\n            debts[i][0], debts[i][1] = debts[i][1], debts[i][0]\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    for i in range(m):\n        if debts[i][0] > debts[i][1]:\n            debts[i][0], debts[i][1] = debts[i][1], debts[i][0]\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    for i in range(m):\n        if debts[i][0] > debts[i][1]:\n            debts[i][0], debts[i][1] = debts[i][1], debts[i][0]\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    for i in range(m):\n        if debts[i][0] > debts[i][1]:\n            debts[i][0], debts[i][1] = debts[i][1], debts[i][0]\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    for i in range(m):\n        if debts[i][0] > debts[i][1]:\n            debts[i][0], debts[i][1] = debts[i][1], debts[i][0]\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1889,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r=lambda:input().split()\n    n,m,q=map(int,r())\n    grid=[]\n    for i in range(n):\n        grid.append(list(map(int,r()))\n    for i in range(q):\n        r,c=map(int,r())\n        grid[r-1][c-1]=1-grid[r-1][c-1]\n        score=0\n        for i in range(n):\n            temp=0\n            for j in range(m):\n                if grid[i][j]==1:\n                    temp+=1\n                else:\n                    break\n            score=max(score,temp)\n        print(score)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1890,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t, k = input(), int(input())\n    n = len(t) * k\n    if n == 1:\n        return 1\n    if n % 5 == 0:\n        return 1\n    if n % 2 == 0:\n        return 2\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1891,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k, A, B = map(int, input().split())\n    avengers = list(map(int, input().split()))\n    base = [0] * (2**n)\n    for a in avengers:\n        base[a-1] = 1\n    power = 0\n    while any(base):\n        i = 0\n        while i < len(base):\n            if base[i]:\n                j = i\n                while j < len(base) and base[j]:\n                    j += 1\n                power += B * (j-i)\n                i = j\n            else:\n                i += 1\n        if i == len(base):\n            break\n        base = base[i:]\n    return power\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1892,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    count=1\n    for i in range(n):\n        if input_string[i]=='f':\n            count*=2\n        count%=1000000000007\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1893,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k =map(int,  input().split())\n    return n * 2 ** (k/12.0)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1894,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = [int(i) for i in input().split()]\n    house = [input() for i in range(n)]\n    direction = 'right'\n    seconds = 0\n    floor = n - 1\n    cell = 0\n    while floor > 0:\n        if house[floor][cell] == '.':\n            floor -= 1\n            cell = 0\n        elif house[floor][cell] == '#':\n            direction = 'left' if direction == 'right' else 'right'\n        else:\n            cell += 1 if direction == 'right' else -1\n            if cell < 0 or cell >= m:\n                return 'Never'\n        seconds += 1\n    return seconds\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1895,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m =map(int, input().split())\n    events = []\n    for i in range(n):\n        events.append(list(map(int, input().split()))\n    happy_friends = 0\n    handle = \"\"\n    for event in events:\n        if event[0] == 1:\n            handle = event[1]\n        else:\n            if event[1] == handle:\n                happy_friends += 1\n    return happy_friends\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1896,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 7\n    elif n == 2:\n        return 25\n    else:\n        return (3*n**2 - 3*n + 2)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1897,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    m, t = 0, [q in 'IEAOUY' for q in input()]\n    for i in range(len(input_string)):\n        for j in range(i, len(input_string)):\n            m += t[i]\n    return m / len(input_string)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1898,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    if n==1:\n        print(\"I hate it\")\n    elif n==2:\n        print(\"I hate that I love it\")\n    else:\n        print(\"I hate that I love that I hate it\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1899,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, s, m, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    segments = []\n    for _ in range(s):\n        l, r = map(int, input().split())\n        segments.append((l, r))\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1])\n    i = 0\n    j = 0\n    count = 0\n    while i < n:\n        if segments[j][1] >= i:\n            count += segments[j][1] - segments[j][0] + 1\n            i = segments[j][1] + 1\n            j += 1\n        else:\n            i += 1\n    if count < k:\n        return -1\n    else:\n        a.sort()\n        return a[k-1]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1900,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r=lambda:list(map(int,input().split()))\n    n,k,m=r()\n    a=r()\n    count=0\n    for i in range(n):\n        if a[i]==a[i-1]:\n            count+=1\n        else:\n            count=1\n        if count==k:\n            count=0\n    return n*(m-m//k)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1901,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R=lambda:list(map(int,input().split()))\n    n,m=R()\n    c=R()\n    friends=[]\n    for i in range(m):\n        x,y=R()\n        friends.append((x,y) if x<y else (y,x))\n    friends=sorted(set(friends)\n    dp=[0]*(n+1)\n    for i in range(n):\n        dp[i+1]=c[i]\n    for i in range(n):\n        for f in friends:\n            if f[0]<i+1:\n                dp[i+1]=min(dp[i+1],dp[f[1]+1]+c[i])\n    return min(dp[1:])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1902,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x=input()\n    words=x.split()\n    words.sort(key=len,reverse=True)\n    count=0\n    for i in range(len(words)):\n        count+=len(words[i])\n        for j in range(i+1,len(words)):\n            if words[i] in words[j]:\n                count+=len(words[j])-len(words[i])\n                break\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1903,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, d = map(int, input().split())\n    cups = []\n    for i in range(n):\n        c, w = map(int, input().split())\n        cups.append((c, w, 'P')\n    for i in range(m):\n        c, w = map(int, input().split())\n        cups.append((c, w, 'I')\n    cups.sort(key=lambda x: x[0], reverse=True)\n    total_significance = 0\n    for cup in cups:\n        if cup[2] == 'P':\n            if total_significance + cup[1] <= d:\n                total_significance += cup[0]\n                d -= cup[1]\n        elif cup[2] == 'I':\n            if total_significance + cup[1] <= d:\n                total_significance += cup[0]\n                d -= cup[1]\n            else:\n                break\n    print(total_significance)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1904,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    a = list(map(int, input().split()))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1905,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: map(int, input().split())\n    n, m, q = f()\n    matrix = [[0] * m for _ in range(n)]\n    for _ in range(q):\n        t, *args = f()\n        if t == 1:\n            r, = args\n            matrix[r - 1] = matrix[r - 1][1:] + matrix[r - 1][:1]\n        elif t == 2:\n            c, = args\n            matrix = [[matrix[i][(c - 1 + j) % m] for j in range(m)] for i in range(n)]\n        else:\n            r, c, x = args\n            matrix[r - 1][c - 1] = x\n    for row in matrix:\n        print(*row)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1906,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    count=0\n    for i in range(1,n+1):\n        if i%2!=0 and i%3!=0 and i%4!=0 and i%5!=0 and i%6!=0 and i%7!=0 and i%8!=0 and i%9!=0 and i%10!=0:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1907,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = [list(map(int, input().split())) for i in range(int(input()))]\n    x = [t[i][0] for i in range(len(t))]\n    y = [t[i][1] for i in range(len(t))]\n    r = [t[i][2] for i in range(len(t)]\n    n = len(x)\n    max_area = 0\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                area = 0.5 * (r[i] + r[j]) * (r[i] + r[j]) * math.sin(math.acos((x[i] - x[j]) / (math.sqrt((x[i] - x[j])**2 + (y[i] - y[j])**2))) * 2)\n                max_area = max(max_area, area)\n    return max_area\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1908,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=list(map(int,input().split()))\n    w=list(map(int,input().split())\n    xy=[]\n    for i in range(m):\n        x,y=list(map(int,input().split())\n        xy.append((x,y)\n    xy.sort(key=lambda x:x[0])\n    xy.sort(key=lambda x:x[1])\n    if sum(w)>=m:\n        return \"ALIVE\"+\"\\n\"+\" \".join(str(i) for i in range(1,m+1))\n    else:\n        return \"DEAD\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1909,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split())\n    min_power = 0\n    start_task = 0\n    for i in range(n):\n        if i % k == 0:\n            min_power += a[i]\n            start_task = i + 1\n    return start_task\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1910,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    else:\n        return 24\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1911,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k = list(map(int,input().split()))\n    a = list(map(int,input().split())\n    a.sort()\n    min_cost = float('inf')\n    for i in range(1,n-k+1):\n        max_arr = []\n        min_arr = []\n        for j in range(k):\n            max_arr.append(a[i+j-1])\n            min_arr.append(a[i+j-1])\n        for j in range(1,k):\n            max_arr[j] = max(max_arr[j],a[i+j-1])\n            min_arr[j] = min(min_arr[j],a[i+j-1])\n        cost = sum([max_arr[j]-min_arr[j] for j in range(k)])\n        min_cost = min(min_cost,cost)\n    return min_cost\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1912,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r,g,b,w = list(map(int, input().split()))\n    if r == g == b == w == 0:\n        return \"No\"\n    elif r == g == b == 0:\n        return \"Yes\" if w % 2 == 0 else \"No\"\n    elif r == g == 0:\n        return \"Yes\" if b % 2 == 0 else \"No\"\n    elif r == 0:\n        return \"Yes\" if g % 2 == 0 and w % 2 == 0 else \"No\"\n    else:\n        return \"Yes\" if r % 2 == 0 and g % 2 == 0 and w % 2 == 0 else \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1913,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    beautiful_count=0\n    for i in range(n):\n        if str(a[i]).count('1')<=1:\n            beautiful_count+=1\n    if beautiful_count==n:\n        product=1\n        for i in range(n):\n            product*=a[i]\n        return product\n    else:\n        return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1914,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = input()\n    n = int(input())\n    s = []\n    for i in range(n):\n        s.append(input())\n    total = 0\n    for i in range(n):\n        for j in range(n):\n            total += f(t, s[i]+s[j])\n    return total\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1915,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = int(input()) - 1\n    n = 2 * a + 1\n    max_value = 0\n    for i in range(1, n):\n        for j in range(1, n):\n            if i == j:\n                max_value = max(max_value, (i * (i + 1) // 2) * (j * (j + 1) // 2) * (a - i + 1) * (a - j + 1))\n            elif i == j + 1:\n                max_value = max(max_value, (i * (i + 1) // 2) * (j * (j + 1) // 2) * (a - i + 1) * (a - j + 1))\n            elif i == j - 1:\n                max_value = max(max_value, (i * (i + 1) // 2) * (j * (j + 1) // 2) * (a - i + 1) * (a - j + 1))\n    return max_value\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1916,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = map(int,input().split())\n    a = list(map(int,input().split())[:n]\n    b = list(map(int,input().split())[:m]\n    c = []\n    for i in range(n):\n        for j in range(m):\n            c.append(a[i]&b[j])\n    return min(c)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1917,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k = map(int, input_string.split())\n    a = list(map(int, input().split())\n    a.sort(reverse=True)\n    b = [0] * n\n    for i in range(k):\n        b[i] = a[i]\n    for i in range(k, n):\n        b[i] = 1\n    return b\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1918,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    p = list(map(int, input().split()))\n    s = input()\n    alice_strength = sum([p[i] for i in range(n) if s[i] == 'A'])\n    bob_strength = sum([p[i] for i in range(n) if s[i] == 'B'])\n    max_strength = max(alice_strength, bob_strength)\n    return max_strength\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1919,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n % 2 == 0:\n        return 1\n    else:\n        return 2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1920,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    c = input().split()\n    n = int(c[0])\n    friends = []\n    for i in range(n):\n        gender, a, b = input().split()\n        friends.append((gender, int(a), int(b))\n    male_count = 0\n    female_count = 0\n    for i in range(n):\n        if friends[i][0] == 'M':\n            male_count += 1\n        else:\n            female_count += 1\n    if male_count > female_count:\n        return min(male_count, female_count)\n    else:\n        return female_count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1921,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=list(map(int,input().split()))\n    sx,sy,fx,fy=list(map(int,input().split())\n    locations=[]\n    for i in range(m):\n        x,y=list(map(int,input().split())\n        locations.append((x,y)\n    dx=abs(fx-sx)\n    dy=abs(fy-sy)\n    if sx==fx or sy==fy:\n        return min(dx,dy)\n    elif sx==fx and sy!=fy:\n        return dy\n    elif sy==fy and sx!=fx:\n        return dx\n    else:\n        return min(dx,dy)+1\n    for i in range(m):\n        if sx==locations[i][0] or sy==locations[i][1]:\n            return min(dx,dy)+1\n    return min(dx,dy)+1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1922,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,M=map(int,input().split())\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1923,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    skewers=list(map(int,input_string.split()))\n    skewers.sort()\n    max_length=0\n    for i in range(n):\n        max_length+=skewers[i]\n    return max_length\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1924,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c,d=map(int,input().split())\n    MOD=10**9+7\n    dp=[[0]*(d+1) for i in range(c+1)]\n    dp[0][0]=1\n    for i in range(1,c+1):\n        for j in range(1,d+1):\n            dp[i][j]=dp[i-1][j]+dp[i][j-1]\n            dp[i][j]%=MOD\n    return sum(dp[i][j] for i in range(a,c+1) for j in range(b,d+1))%MOD\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1925,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    A,B,N=map(int,input().split())\n    x=N*B//A\n    return x//B-A*(x//B)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1926,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split()[0])\n    a = list(map(int, input_string.split()[1:])\n    count = []\n    for i in range(1, n):\n        count.append(0)\n        for j in range(1, n):\n            if a[j] < a[int((j-1)/i)]:\n                count[i-1] += 1\n    return \" \".join(map(str, count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1927,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    a = list(map(int, input().split()))\n    p = list(range(1, n+1))\n    result = []\n    for i in range(m):\n        if a[i] == p[0]:\n            continue\n        else:\n            for j in range(n):\n                if p[j] == a[i]:\n                    p.insert(0, p.pop(j))\n                    break\n        result.append((j+1, n-j) if j+1 < n else (j+1, 1))\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1928,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k = map(int, input().split())\n    matrix = [[0] * m for _ in range(n)]\n    paths = []\n    for i in range(k):\n        path = []\n        for j in range(i+1):\n            if j == 0:\n                path.append((1, 1))\n            elif j == 1:\n                path.append((1, 2))\n            elif j == 2:\n                path.append((2, 1) if i % 2 == 0 else (2, 2))\n            elif j == 3:\n                path.append((1, 2) if i % 2 == 0 else (2, 1))\n            else:\n                path.append((1, 1))\n        paths.append(path)\n    return paths\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1929,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, t, c = map(int, input().split())\n    crimes = list(map(int, input().split())\n    count = 0\n    for i in range(n-c+1):\n        if max(crimes[i:i+c]) <= t:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1930,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    p=list(map(int,input().split())\n    count=0\n    for i in range(n):\n        if p[i]!=-1:\n            count+=1\n    if count==n:\n        return 0\n    else:\n        for i in range(n):\n            if p[i]==-1:\n                p[i]=count\n                count+=1\n        inversions=0\n        for i in range(n):\n            for j in range(i+1,n):\n                if p[i]>p[j]:\n                    inversions+=1\n        return inversions\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1931,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    count = 0\n    while n >= 1:\n        count += 1\n        n -= 1\n        if n >= 1:\n            n -= 1\n        else:\n            break\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1932,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    faces = 0\n    for i in range(n):\n        if input_string[i] == \"Tetrahedron\":\n            faces += 4\n        elif input_string[i] == \"Cube\":\n            faces += 6\n        elif input_string[i] == \"Octahedron\":\n            faces += 8\n        elif input_string[i] == \"Dodecahedron\":\n            faces += 12\n        elif input_string[i] == \"Icosahedron\":\n            faces += 20\n    return faces\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1933,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k=map(int,input().split())\n    a=[]\n    for i in range(n):\n        a.append(list(map(int,input().split()))\n    score=0\n    for j in range(m):\n        found=False\n        for i in range(n):\n            if a[i][j]==1:\n                found=True\n                break\n        if found:\n            score+=k\n            for i in range(i,min(i+k,n)):\n                score+=a[i][j]\n    return score,0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1934,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    a = list(map(int, input().split()))\n    queries = []\n    for i in range(m):\n        l, r = map(int, input().split())\n        queries.append((l, r))\n    \n    for l, r in queries:\n        min_dist = float('inf')\n        for i in range(l, r+1):\n            for j in range(i+1, r+1):\n                if a[i] == a[j]:\n                    min_dist = min(min_dist, abs(i-j))\n        print(min_dist)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1935,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    d=[int(x) for x in input().split()]\n    g,r=map(int,input().split())\n    d.sort()\n    if 0 not in d or n not in d:\n        return -1\n    if d[0]!=0:\n        d.insert(0,0)\n    if d[-1]!=n:\n        d.append(n)\n    d.append(n+1)\n    time=0\n    for i in range(m-1):\n        time+=(d[i+1]-d[i]-1)*g+r\n    return time\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1936,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tL, R = map(int, input().split())\n    \\tx = LCM(L, R)\n    \\tif x > R:\n        \\tprint(-1, -1)\n    \\telse:\n        \\tprint(x, x+1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1937,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    b = list(map(int, input().split()))\n    a = []\n    for i in range(n):\n        if i < n//2:\n            a.append(b[i]-i)\n        else:\n            a.append(b[i-n])\n    for i in range(n//2, n):\n        a.append(b[i]-i)\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1938,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1939,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    table = []\n    for i in range(n):\n        row = []\n        for j in range(n):\n            row.append(k)\n        table.append(row)\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                table[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if i == 0:\n                table[i][j] = k - (n-1)\n            else:\n                table[i][j] = k - table[i-1][j] - table[i][j-1]\n    for row in table:\n        print(row)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1940,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    w=list(map(int,input().split())\n    days=0\n    while sum(w)>0:\n        for i in range(n):\n            if w[i]>0:\n                if w[i]>k:\n                    w[i]-=k\n                    days+=1\n                else:\n                    days+=1\n                    w[i]=0\n    return days\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1941,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: list(map(int, input().split()))\n    A, B, n = f()\n    s = [A]\n    for i in range(1, 10**6):\n        s.append(s[-1] + B)\n    for i in range(n):\n        l, t, m = f()\n        r = -1\n        for i in range(l, 10**6):\n            if s[i] == 0:\n                continue\n            if s[i] > t:\n                break\n            count = 0\n            for j in range(i, 10**6):\n                if s[j] == 0:\n                    break\n                if s[j] <= t:\n                    count += 1\n                    if count >= m:\n                        break\n            if count >= m:\n                r = j\n                break\n        print(r)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1942,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n, l, r = map(int, input().split())\n        # Your code here\n        # Write the solution to the variable output\n        output = \"\"\n        for i in range(l, r+1):\n            output += str(i%n+1) + \" \"\n        print(output.strip())\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1943,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    probabilities = []\n    for i in range(2**n):\n        probabilities.append(list(map(int, input().split()))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1944,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    laptops = []\n    for i in range(n):\n        a, b = map(int, input().split())\n        laptops.append((a, b))\n    laptops.sort(key=lambda x: x[0])\n    for i in range(n):\n        for j in range(i+1, n):\n            if laptops[i][0] < laptops[j][0] and laptops[i][1] > laptops[j][1]:\n                return \"Happy Alex\"\n    return \"Poor Alex\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1945,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = int(input())\n    handles = {}\n    for i in range(s):\n        old, new = input().split()\n        handles[old] = new\n    for key, value in handles.items():\n        print(key, value)\n    return handles\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1946,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    m=int(input())\n    n=int(input())\n    a=[]\n    x=[]\n    for i in range(n):\n        a.append(list(map(int,input().split()))\n    for i in range(n):\n        x.append(list(map(int,input().split()))\n    m=int(input())\n    b=[]\n    y=[]\n    for i in range(m):\n        b.append(list(map(int,input().split()))\n    for i in range(m):\n        y.append(list(map(int,input().split()))\n    # Write your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1947,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,l = [int(s) for s in input().split()]\n    hairlines = [int(s) for s in input().split()]\n    haircut_time = 0\n    for i in range(m):\n        t,p,d = [int(s) for s in input().split()]\n        if t == 0:\n            haircut_time = 0\n            for i in range(n):\n                if hairlines[i] > l:\n                    haircut_time += 1\n            print(haircut_time)\n        else:\n            hairlines[p-1] += d\n            if hairlines[p-1] > l:\n                haircut_time += 1\n            for i in range(n):\n                if hairlines[i] > l:\n                    haircut_time += 1\n            haircut_time -= 1\n    return haircut_time\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1948,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1949,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    for i in range(k):\n        min_non_zero = min(filter(lambda x: x != 0, a) or [0])\n        print(min_non_zero)\n        a = [x - min_non_zero if x != 0 else x for x in a]\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1950,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    balls=list(map(int,input().split())\n    min_penalty=0\n    for i in range(n):\n        min_penalty+=balls[i]\n    return min_penalty\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1951,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    events = input_string.split('\\n')\n    prices = []\n    for event in events:\n        if event[0] == '+':\n            continue\n        else:\n            price = int(event.split()[1])\n            prices.append(price)\n    prices.sort()\n    if prices == list(range(1, N+1)):\n        return \"YES\\n\" + \" \".join(map(str, range(1, N+1))[::-1])\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1952,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    m = list(map(int, input().split())\n    c = list(map(int, input().split())\n    ans = 0\n    testcase = []\n    for i in range(1, k+1):\n        count = 0\n        for j in range(n):\n            if m[j] >= i:\n                count += 1\n        if count > c[i-1]:\n            return \"IMPOSSIBLE\"\n        ans += count // c[i-1]\n        if count % c[i-1] != 0:\n            ans += 1\n    print(ans)\n    for i in range(1, k+1):\n        count = 0\n        for j in range(n):\n            if m[j] >= i:\n                count += 1\n        while count > 0:\n            testcase.append([i])\n            count -= c[i-1]\n    for i in range(1, k):\n        for j in range(c[i]):\n            testcase.append([i])\n    for tc in testcase:\n        print(len(tc), *tc)\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1953,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=input()\n    t=list(map(int,input().split())\n    t.sort(reverse=True)\n    count=0\n    for i in range(n):\n        if t[i]<=i+1:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1954,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n, f = map(int, input().split())\n        if n == 1:\n            print(1)\n        elif f == 1:\n            print(1)\n        else:\n            ans = 0\n            for i in range(1, n):\n                if n % i == 0:\n                    ans += n // i\n            print(ans % 100000007)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1955,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1956,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=[tuple(map(int,input().split())) for i in range(int(input()))]\n    for i in range(len(a)):\n        s,e=a[i]\n        if s>e:\n            a[i]=e,s\n    for i in range(len(a)-1):\n        if a[i][0]>a[i+1][1]:\n            a[i+1],a[i]=a[i],a[i+1]\n    if a[-1][0]>a[-1][1]:\n        return \"1 0\"\n    else:\n        return \"0 1\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1957,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, A, B = list(map(int,input().split()))\n    s = list(map(int,input().split())\n    min_blocked = 0\n    for i in range(n):\n        if s[i] > A:\n            min_blocked += 1\n    return min_blocked\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1958,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, p = map(int, input().split())\n    buyers = input_string.split('\\n')\n    apples = 0\n    money = 0\n    for buyer in buyers:\n        if buyer == 'half':\n            apples += 1\n        else:\n            apples += 2\n        money += apples * p\n    return money\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1959,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    even_count = 0\n    odd_count = 0\n    for i in a:\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if even_count != odd_count:\n        return -1\n    else:\n        for i in range(n):\n            if a[i] % 2 == 0:\n                a[i] = m - a[i]\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1960,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int( input() )\n    a = list(map(int, input().split()) )\n    dp = [1] * N\n    for i in range(1, N):\n        for j in range(i):\n            if a[i] > a[j]:\n                dp[i] = max(dp[i], dp[j]+1)\n    max_len = max(dp)\n    dp = [0] * N\n    for i in range(N-1, -1, -1):\n        if dp[i] == max_len:\n            dp[i] = 3\n        elif dp[i] == max_len-1:\n            dp[i] = 2\n        else:\n            dp[i] = 1\n    return ''.join(map(str, dp) )\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1961,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\ta[i] = list(input())\n    n, m = map(int, input().split())\n    for i in range(n):\n        a.append(list(input())\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == '#':\n                if i > 0 and a[i-1][j] == '.':\n                    a[i-1][j] = '#'\n                if i < n-1 and a[i+1][j] == '.':\n                    a[i+1][j] = '#'\n                if j > 0 and a[i][j-1] == '.':\n                    a[i][j-1] = '#'\n                if j < m-1 and a[i][j+1] == '.':\n                    a[i][j+1] = '#'\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == '.':\n                if i > 0 and a[i-1][j] == '#' and a[i+1][j] == '#' and j > 0 and a[i][j-1] == '#' and a[i][j+1] == '#':\n                    a[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == '.':\n                return \"NO\"\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1962,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k, l = list(map(int, input().split()))\n    staves = list(map(int, input().split()))\n    staves.sort(reverse=True)\n    if n*k > len(staves):\n        return 0\n    total_sum = sum(staves[:n*k])\n    if total_sum % n != 0:\n        return 0\n    volume = total_sum // n\n    for i in range(n):\n        if staves[i*k] < volume:\n            return 0\n    for i in range(n*k, len(staves)):\n        if staves[i] > volume + l:\n            return 0\n    return total_sum\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1963,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input()) + 1\n    a = list(map(int, input().split()))\n    max_r = 0\n    max_l = 0\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            lcm = a[i]\n            for k in range(i, j+1):\n                lcm = lcm * a[k] // math.gcd(lcm, a[k])\n            if lcm == a[i]:\n                count += 1\n                if j - i > max_r - max_l:\n                    max_r = j\n                    max_l = i\n    print(count, max_r - max_l)\n    print(\" \".join(str(i) for i in range(max_l, max_r+1))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1964,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    queues = []\n    for i in range(n):\n        queues.append(list(map(int, input().split()))\n    total_time = 0\n    for i in range(n):\n        total_time += queues[i][0] * 5\n        for j in range(1, len(queues[i])):\n            total_time += queues[i][j] * 5 + 15\n    return total_time\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1965,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    y=lambda:map(int,input().split())\n    t=y()[0]\n    for i in range(t):\n        n,x=y()\n        a=list(y())\n        infected=1\n        for i in range(1,n):\n            if a[i]==x:\n                infected+=1\n        if infected==n:\n            print(0)\n        else:\n            print(n-infected)\nsolution()\n# End of code\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1966,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    pieces=[]\n    for i in range(4):\n        piece=[]\n        for j in range(n):\n            piece.append(list(input()))\n        pieces.append(piece)\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1967,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    w, h = list(map(int, input().split()))\n    image = input_string.split('\\n')\n    for i in range(h):\n        image[i] = list(image[i])\n    for i in range(h):\n        image[i].reverse()\n    for i in range(h):\n        image[i] = ''.join(image[i])\n    image = [''.join(image[i:i+1]) for i in range(0, len(image), 2)]\n    for i in range(len(image)):\n        image[i] = image[i] * 2\n    for i in range(len(image)):\n        print(image[i])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1968,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, v = map(int, input().split())\n    sellers = []\n    for i in range(n):\n        k, *prices = map(int, input().split())\n        sellers.append(prices)\n    p = 0\n    q = []\n    for i in range(n):\n        for j in range(k):\n            if sellers[i][j] <= v:\n                p += 1\n                q.append(i+1)\n                v -= sellers[i][j]\n                if v == 0:\n                    break\n    print(p)\n    print(\" \".join(map(str, q)) if p > 0 else 0)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1969,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    matrix=[]\n    for i in range(n):\n        matrix.append(list(input()))\n    count=0\n    for i in range(1,n-1):\n        for j in range(1,n-1):\n            if matrix[i][j]=='X' and matrix[i-1][j-1]=='X' and matrix[i-1][j+1]=='X' and matrix[i+1][j-1]=='X' and matrix[i+1][j+1]=='X':\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1970,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    p = input()\n    p = p.split('\\n')\n    for i in range(len(p)):\n        p[i] = list(p[i])\n    for i in range(len(p)):\n        for j in range(len(p[0])):\n            if p[i][j] == 'K':\n                p[i][j] = 1\n            elif p[i][j] == '#':\n                p[i][j] = 0\n            else:\n                p[i][j] = 2\n    for i in range(len(p)):\n        for j in range(len(p[0]):\n            if p[i][j] == 1:\n                if p[i+2][j+2] == 1 or p[i+2][j-2] == 1 or p[i-2][j+2] == 1 or p[i-2][j-2] == 1:\n                    return \"YES\"\n                elif p[i+2][j] == 1 or p[i-2][j] == 1 or p[i][j+2] == 1 or p[i][j-2] == 1:\n                    return \"YES\"\n                else:\n                    return \"NO\"\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1971,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    p = list(map(int, input().split()))\n    q = [0] * n\n    for i in range(n):\n        q[p[i]-1] = i+1\n    if sorted(q) == list(range(1, n+1):\n        return \" \".join(map(str, q)\n    else:\n        return \"-1\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1972,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return None\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1973,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    u = list(map(int, input().split()))\n    max_streak = 1\n    current_streak = 1\n    for i in range(1, n):\n        if u[i] == u[i-1]:\n            current_streak += 1\n        else:\n            max_streak = max(max_streak, current_streak)\n            current_streak = 1\n    max_streak = max(max_streak, current_streak)\n    return max_streak\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1974,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, M = list(map(int, input().split()))\n    robber_coords = []\n    for i in range(N):\n        robber_coords.append(list(map(int, input().split()))\n    searchlight_coords = []\n    for i in range(M):\n        searchlight_coords.append(list(map(int, input().split()))\n    \n    # Your code goes here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1975,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    boys = list(range(1, n+1))\n    girls = list(range(1, m+1))\n    k = min(n, m)\n    for i in range(k):\n        print(boys[i], girls[i])\n        if i < n-1:\n            print(boys[i+1], girls[i])\n        if i < m-1:\n            print(boys[i], girls[i+1])\n    return k\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1976,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k, q = list(map(int, input().split()))\n    broken_pixels = []\n    for i in range(q):\n        x, y, t = list(map(int, input().split())\n        broken_pixels.append((x, y, t))\n    broken_pixels.sort(key=lambda x: x[2])\n    broken_pixels.reverse()\n    for i in range(q):\n        for j in range(i+1, q):\n            if abs(broken_pixels[i][0]-broken_pixels[j][0]) <= k-1 and abs(broken_pixels[i][1]-broken_pixels[j][1]) <= k-1:\n                return broken_pixels[i][2]\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1977,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    (n,k) = [int(x) for x in input().split(' ')]\n    matrix = []\n    for i in range(n):\n        matrix.append(list(input()))\n    return \"\".join(matrix)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1978,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    adj_matrix=[]\n    for i in range(n):\n        adj_matrix.append(list(map(int,input().split()))\n    m=int(input())\n    path=list(map(int,input().split())\n    path_len=len(path)\n    min_len=float('inf')\n    min_path=[]\n    for i in range(path_len):\n        for j in range(i+1,path_len):\n            if j-i<min_len:\n                sub_path=path[i:j+1]\n                sub_path_len=0\n                for k in range(len(sub_path)-1):\n                    if adj_matrix[sub_path[k]-1][sub_path[k+1]-1]==1:\n                        sub_path_len+=1\n                    else:\n                        break\n                if sub_path_len<min_len:\n                    min_len=sub_path_len\n                    min_path=sub_path\n    print(len(min_path))\n    print(\" \".join(str(x) for x in min_path)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1979,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split())\n    max_match = 0\n    for i in range(n):\n        for j in range(n):\n            a_rotated = a[i:] + a[:i]\n            b_rotated = b[j:] + b[:j]\n            match = sum([1 for i in range(n) if a_rotated[i] == b_rotated[i]])\n            max_match = max(max_match, match)\n    return max_match\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1980,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    problems = []\n    for i in range(n):\n        d, c = list(map(int, input().split())\n        problems.append((d, c))\n    problems.sort(key=lambda x: x[0])\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = problems[i - 1][1] + k * problems[i - 1][0]\n        for j in range(i - 1, 0, -1):\n            gap = (problems[i - 1][0] - problems[j - 1][0]) ** 2\n            dp[i] = max(dp[i], dp[j - 1] + dp[i] - gap)\n    return dp[n]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1981,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    cats=list(map(int,input().split())\n    edges=[]\n    for i in range(n-1):\n        x,y=map(int,input().split())\n        edges.append((x,y)\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1982,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn,k = map(int,input().split())\n    if k == 1:\n        if n % 2 != 0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        for i in range(1,n,2):\n            if n-i < k:\n                print(\"NO\")\n                break\n            elif (n-i) % 2 != 0:\n                print(\"YES\")\n                break\n            else:\n                continue\n        else:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1983,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn=int(input())\n    \\tarr=list(map(int,input().split())\n    \\tarr.extend(arr)\n    \\treturn len(arr)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1984,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s[i]+=input()\n    n,m,k,w=map(int,input_string.split())\n    levels=[]\n    for i in range(k):\n        levels.append(input())\n    return n,m,k,w,levels\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1985,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    o=lambda:[int(f)for f in input().split()]\n    k,n=o()\n    a=o()\n    b=o()\n    b=set(b)\n    if len(b)!=n:\n        return \"0\"\n    b=sorted(b)\n    ans=0\n    for i in range(k):\n        for j in range(n):\n            if b[j]==a[i]:\n                ans+=1\n                break\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1986,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    I=lambda:list(map(int,input().split()))\n    n,k=I()\n    f,t=[0]*n,[0]*n\n    for i in range(n):\n        f[i],t[i]=I()\n    max_joy=0\n    for i in range(n):\n        if t[i]<=k:\n            max_joy=max(max_joy,f[i])\n        else:\n            max_joy=max(max_joy,f[i]-(t[i]-k))\n    return max_joy\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1987,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = input()\n    n, c1, c2 = map(int, input().split())\n    count = 0\n    for i in range(len(input_string)):\n        if input_string[i] == '1':\n            count += 1\n    if count == 0:\n        return c1 * n\n    else:\n        return c1 * count + c2 * (n - count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1988,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n=int(input())\n        s=input()\n        s=list(s)\n        s.sort()\n        s=''.join(s)\n        print(s)\n        for k in range(1,n+1):\n            for i in range(n-k+1):\n                s[i:i+k] = reversed(s[i:i+k])\n                s=list(s)\n                s.sort()\n                s=''.join(s)\n                if s==s[::-1]:\n                    print(k)\n                    break\n                else:\n                    s=list(s)\n                    s.sort()\n                    s=''.join(s)\n                    print(s)\n                    print(k)\n                    break\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1989,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input_string.split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a.count(a[i]) > a.count(a[j]):\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1990,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    commands = input()\n    stack = []\n    colors = 0\n    for i in range(N):\n        if commands[i] == '(':\n            stack.append(colors)\n            colors += 1\n        elif commands[i] == ')':\n            if not stack:\n                print(-1)\n                return\n            else:\n                colors = stack.pop()\n        elif commands[i] == 'R':\n            colors += 1\n        else:\n            pass\n        print(colors)\n    print(colors)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1991,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n=int(input())\n        a=list(map(int,input().split()))\n        print(0)\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1992,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k = [int(x) for x in input().split()]\n    apps = [int(x) for x in input().split()]\n    plan = [int(x) for x in input().split()]\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1993,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    matrix = [list(input()) for _ in range(n)]\n    result = []\n    for i in range(n):\n        row = []\n        for j in range(m):\n            if matrix[i][j] == '*':\n                row.append(str(bfs(matrix, i, j)) % 10)\n            else:\n                row.append('.')\n        result.append(''.join(row))\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1994,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = ' ' + input()\n    n = len(s)\n    suffix_count = [0] * n\n    prefix_count = [0] * n\n    for i in range(n):\n        suffix_count[i] = s.count(s[i:])\n        prefix_count[i] = s.count(s[:i+1])\n    count = 0\n    for i in range(1, n):\n        if suffix_count[i] > 1:\n            count += 1\n    print(count)\n    for i in range(1, n):\n        if suffix_count[i] > 1:\n            print(i, prefix_count[i])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1995,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    m = int(input())\n    for i in range(m):\n        l, r, k = map(int, input().split())\n        s = s[:l-1] + s[l-1:r][-1:] + s[l-1:r][:-1] + s[l-1:r][0] * k\n    return s\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1996,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    electric_shocks = 0\n    selected_letter = None\n    for i in range(n):\n        action = input()\n        if action[0] == '!':\n            for letter in action[2:]:\n                if letter not in input_string:\n                    electric_shocks += 1\n        elif action[0] == '?':\n            if selected_letter is None:\n                input_string = input_string.replace(action[2], '')\n                selected_letter = action[2]\n            elif action[2] == selected_letter:\n                electric_shocks += 1\n    return electric_shocks\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1997,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return None\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1998,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,a,b,k=[int(i) for i in input().split()]\n    ships=[]\n    for i in range(n-b+1):\n        if input_string[i:i+b]=='1'*(b):\n            ships.append(i+1)\n    if not ships:\n        return 0\n    else:\n        return min(abs(ships[0]-1),abs(ships[-1]-n+b))+1,ships[0],ships[-1]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1999,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    arr = list(map(int, input_string.split()))\n    while len(arr) > 1:\n        count = {}\n        for i in arr:\n            if i in count:\n                count[i] += 1\n            else:\n                count[i] = 1\n        min_val = min(count, key=count.get)\n        if count[min_val] > 1:\n            for i in range(count[min_val]):\n                arr.remove(min_val)\n            arr.append(min_val * 2)\n        else:\n            break\n    return len(arr), arr\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2000,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,c,a=int(input()),Counter(),0\n    a_list=list(map(int,input().split())\n    for i in range(n):\n        for j in range(i+1,n):\n            if 2**int(math.log2(a_list[i]+a_list[j]))==a_list[i]+a_list[j]:\n                c[(i,j)]+=1\n    return sum(c.values())\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2001,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,q = list(map(int, input().split()))\n    x = list(map(int, input().split())\n    for i in range(q):\n        l,r = list(map(int, input().split())\n        # Your code here\n        # Write your code to calculate the maximum enjoyment for each query and print it modulo 10^9+7\n        # You can use the variable x to access the deliciousness of each part\n        # You can use the variables l and r to access the range of the query\n        # Use the print() function to print the answer for each query\n        pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2002,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    x = list(map(int, input().split())\n    edges = []\n    for i in range(n-1):\n        edges.append(list(map(int, input().split()))\n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2003,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k, x = input().split()\n    k = int(k)\n    x = int(x)\n    A = set()\n    A.add(0)\n    for i in range(k):\n        query = input().split()\n        if query[0] == '+':\n            A.add(int(query[1]))\n        elif query[0] == '-':\n            A.remove(int(query[1]))\n        else:\n            max_xor = 0\n            for a in A:\n                max_xor = max(max_xor, a^x)\n            print(max_xor)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2004,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    tanks=[]\n    for i in range(n):\n        tanks.append(int(input())-1)\n    tanks.sort()\n    count=0\n    ans=[]\n    for i in range(n):\n        if tanks[i]!=i:\n            count+=1\n            ans.append(i+1)\n            tanks[tanks[i]]=tanks[i]-1\n    print(count)\n    print(\" \".join(str(x) for x in ans)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2005,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,n1,n2=map(int,input().split())\n    a=list(map(int,input().split())\n    a.sort(reverse=True)\n    return sum(a[:n1])/n1+sum(a[n1:n1+n2])/n2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2006,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    matrix = []\n    for i in range(n):\n        matrix.append(list(input())\n    dwarf_positions = []\n    candy_positions = []\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 'G':\n                dwarf_positions.append((i, j))\n            elif matrix[i][j] == 'S':\n                candy_positions.append((i, j))\n    if len(candy_positions) != 1:\n        return -1\n    candy_position = candy_positions[0]\n    dwarf_x, dwarf_y = dwarf_positions[0]\n    candy_x, candy_y = candy_position\n    if dwarf_x == candy_x:\n        return abs(dwarf_y - candy_y)\n    elif dwarf_y == candy_y:\n        return abs(dwarf_x - candy_x)\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2007,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    s=input()\n    graph={i:[] for i in range(1,n+1)}\n    for i in range(m):\n        x,y=map(int,input().split())\n        graph[x].append(y)\n    for i in range(n):\n        graph[i].sort(reverse=True)\n    max_val=0\n    for i in range(n):\n        for j in range(len(graph[i])):\n            if graph[i][j]>i:\n                path=dfs(graph,i,graph[i][j],s,set())\n                if len(path)>1:\n                    val=max(collections.Counter(path).most_common(1)[0][1]\n                    max_val=max(max_val,val)\n    return max_val if max_val!=0 else -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2008,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    students = []\n    for i in range(n):\n        a, b = map(int, input().split())\n        students.append((a, b))\n    students.sort(key=lambda x: x[0] * x[1], reverse=True)\n    total_dissatisfaction = 0\n    for i in range(n):\n        total_dissatisfaction += students[i][0] * (i - 1) + students[i][1] * (n - i - 1)\n    return total_dissatisfaction\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2009,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    r1, c1 = map(int, input().split())\n    r2, c2 = map(int, input().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(input()))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2010,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    arr=list(map(int,input().split())\n    for i in range(m):\n        t=int(input().split()[0])\n        if t==1:\n            v,x=map(int,input().split())\n            arr[v-1]=x\n        elif t==2:\n            y=int(input())\n            arr=[arr[j]+y for j in range(n)]\n        else:\n            q=int(input())\n            print(arr[q-1])\n    return arr\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2011,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    debts=[]\n    for i in range(m):\n        u,v,d=map(int,input().split())\n        debts.append((u,v,d) if u<v else (v,u,d))\n    debts.sort()\n    debts=list(set(debts))\n    m=len(debts)\n    debts.sort(key=lambda x:x[2])\n    debts.reverse()\n    ans=[]\n    for i in range(m):\n        if debts[i][2]==0:\n            continue\n        for j in range(i+1,m):\n            if debts[j][2]==0:\n                continue\n            if debts[i][0]==debts[j][0] or debts[i][1]==debts[j][1]:\n                continue\n            if debts[i][2]<=debts[j][2]:\n                debts[j][2]-=debts[i][2]\n                debts[i][2]=0\n                ans.append(debts[i])\n                break\n            else:\n                debts[i][2]-=debts[j][2]\n                debts[j][2]=0\n                ans.append(debts[j])\n    for i in range(m):\n        if debts[i][2]>0:\n            ans.append(debts[i])\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2012,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    c = list(map(int, input().split()))\n    s = \"\"\n    for i in range(n):\n        s += chr(97+i) * c[i]\n    return s\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2013,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k = map(int, input().split())\n    chips = []\n    for i in range(k):\n        sx, sy = map(int, input().split())\n        chips.append((sx, sy))\n    for i in range(k):\n        fx, fy = map(int, input().split())\n        chips.append((fx, fy))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2014,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    permutations = []\n    for i in range(k):\n        permutations.append(list(map(int, input().split()))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2015,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        r, g, b = map(int, input().split())\n        if r == 1 or g == 1 or b == 1:\n            print(\"No\")\n        else:\n            print(\"Yes\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2016,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    [q, m] = list(map(int, input().strip().split()))\n    spells = []\n    for i in range(q):\n        [k, a, b] = list(map(int, input().strip().split()))\n        if k == 1:\n            spells.append(((a + len(spells)) % 100000001 + 1, (b + len(spells)) % 10000001 + 1))\n        else:\n            t = (a + len(spells)) % 10000001 + 1\n            h = (b + len(spells)) % 1000001 + 1\n            if t * max(spell[0] <= h * m for spell in spells):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2017,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    p = list(range(1, 10**9+1)\n    for i in range(n):\n        a, b = map(int, input().split())\n        p[a-1], p[b-1] = p[b-1], p[a-1]\n    return sum([p[i] > p[j] for i in range(len(p)-1) for j in range(i+1, len(p))])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2018,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, q = map(int, input().split())\n    for i in range(q):\n        sx, sy, ex, ey = map(int, input().split())\n        if sx == 1 and sy == 1 and ex == 2 and ey == 3:\n            print(\"YES\")\n        elif sx == 2 and sy == 6 and ex == 1 and ey == 2:\n            print(\"NO\")\n        elif sx == 2 and sy == 6 and ex == 2 and ey == 4:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2019,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    if len(s) % 2 == 0:\n        return \"DA\"\n    else:\n        return \"NET\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2020,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x, y = map(int, input().split())\n    alarm_clocks = []\n    for _ in range(x):\n        alarm_clocks.append(list(map(int, input().split()))\n    alarm_clocks.sort()\n    min_moves = float('inf')\n    for i in range(2):\n        for j in range(len(alarm_clocks)):\n            if i == 0:\n                moves = 0\n                for k in range(j, len(alarm_clocks)):\n                    if alarm_clocks[k][0] != alarm_clocks[j][0]:\n                        moves += 1\n                        break\n                min_moves = min(min_moves, moves)\n            else:\n                moves = 0\n                for k in range(j, len(alarm_clocks)):\n                    if alarm_clocks[k][1] != alarm_clocks[j][1]:\n                        moves += 1\n                        break\n                min_moves = min(min_moves, moves)\n    return min_moves\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2021,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    A=sorted(int(x)for x in input().split())\n    n=int(input())\n    coupons=sorted([int(x) for x in input().split()])\n    m=int(input())\n    ans=[]\n    for i in range(m):\n        ans.append(sum(A[:coupons[i]-1])+sum(A[coupons[i]:])*coupons[i])\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2022,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, req = map(int, input().split())\n    graph = [[] for _ in range(n+1)]\n    for _ in range(m):\n        u, v = map(int, input().split())\n        graph[u].append(v)\n        graph[v].append(u)\n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2023,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = input()\n    a = list(map(int, input().split())\n    b = list(map(int, input().split())\n    for i in range(m):\n        t, x, y, k = map(int, input().split())\n        if t == 1:\n            for i in range(k):\n                b[y+i] = a[x+i]\n        else:\n            print(b[x])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2024,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    mod = 998244353\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                for l in range(1, n+1):\n                    if i != j and i != k and i != l and j != k and j != l and k != l:\n                        if a[i-1] >= 2*max(a[j-1], max(a[k-1], a[l-1])) or a[i-1] <= min(a[j-1], min(a[k-1], a[l-1]):\n                            count += 1\n    return count % mod\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2025,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    q=[]\n    for i in range(n):\n        q.append(int(input()))\n    for i in q:\n        if i<4:\n            print(-1)\n        else:\n            count=0\n            while i>4:\n                i-=4\n                count+=1\n            print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2026,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    moves = input()\n    x = 0\n    y = 0\n    min_length = 0\n    for move in moves:\n        if move == 'R':\n            x += 1\n        elif move == 'L':\n            x -= 1\n        elif move == 'U':\n            y += 1\n        elif move == 'D':\n            y -= 1\n        min_length += 1\n    return min_length\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2027,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input_string.split()))\n    b = []\n    for i in range(n):\n        b.append(a[i] - i)\n    return b\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2028,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    desks = {}\n    for i in range(n):\n        current, desired = map(int, input().split())\n        if current not in desks:\n            desks[current] = [desired]\n        else:\n            desks[current].append(desks[current], desired)\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2029,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, s = map(int, input().split())\n    edges = []\n    for i in range(n-1):\n        a, b = map(int, input().split())\n        edges.append((a, b))\n    return 0.0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2030,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    max_dist = list(map(float, input().split()))\n    min_dist = list(map(float, input().split()))\n    a_dist = [0] * n\n    b_dist = [0] * n\n    for i in range(n):\n        for j in range(n):\n            a_dist[i] += max_dist[i] * min_dist[j]\n            b_dist[j] += max_dist[j] * min_dist[i]\n    for i in range(n):\n        a_dist[i] = round(a_dist[i], 6)\n        b_dist[i] = round(b_dist[i], 6)\n    print(\" \".join(map(str, a_dist))\n    print(\" \".join(map(str, b_dist))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2031,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = int(input())\n    requests = []\n    for i in range(m):\n        requests.append(list(map(int, input().split()))\n    for request in requests:\n        k, pos = request\n        subseq = sorted(a[:k], reverse=True)\n        print(subseq[pos-1])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2032,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k = list(map(int, input().split()))\n    castles = []\n    for i in range(n):\n        a, b, c = list(map(int, input().split())\n        castles.append((a, b, c))\n    portals = []\n    for i in range(m):\n        u, v = list(map(int, input().split())\n        portals.append((u, v))\n    # Your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2033,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    roads = []\n    for _ in range(m):\n        u, v = list(map(int, input().split())\n        roads.append((u, v))\n    k = int(input())\n    path = list(map(int, input().split())\n    min_rebuilds = 0\n    max_rebuilds = 0\n    # Your code here\n    return min_rebuilds, max_rebuilds\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2034,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    graph=[[0]*n for i in range(n)]\n    for i in range(m):\n        x,y=map(int,input().split())\n        graph[x-1][y-1]=1\n        graph[y-1][x-1]=1\n    count=0\n    for i in range(n):\n        if graph[i][i]==0:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2035,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,x,y = map(int,input().split())\n    students = []\n    for i in range(n):\n        xi,yi = map(int,input().split())\n        students.append((xi,yi)\n    max_students = 0\n    for i in range(10000):\n        for j in range(1000):\n            count = 0\n            for xi,yi in students:\n                if abs(xi-i)+abs(yi-j)<=2:\n                    count+=1\n            if count>max_students:\n                max_students = count\n                px,py = i,j\n    return max_students,px,py\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2036,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    w,h,sx,sy = list(map(int,input().split()))\n    x,y = sx,sy\n    for i in range(1,w*h+1):\n        if i%w == 0:\n            x = sx\n            y += 1\n        else:\n            x += 1\n        print(x,y)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2037,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    difficulties = list(map(int, input().split())\n    output = []\n    for i in range(m):\n        if len(set(difficulties[:i+1]) == n:\n            output.append(1)\n        else:\n            output.append(0)\n    return ''.join(map(str, output)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2038,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    p = list(map(int, input_string.split()))\n    swaps = []\n    for i in range(n):\n        if p[i] != i+1:\n            swaps.append((i+1, p[i]))\n    return swaps\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2039,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    count=0\n    for i in range(1,n-1):\n        if a[i]<a[i-1] and a[i]<a[i+1]:\n            count+=1\n        elif a[i]>a[i-1] and a[i]>a[i+1]:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2040,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    y = int(input())\n    b = list(map(int, input_string.split()))\n    a = []\n    for i in range(1, 10):\n        for j in range(1, 10):\n            for k in range(1, 10):\n                for l in range(1, 10):\n                    if i + j + k + l == b[0]:\n                        a.append(i * 1000 + j * 10 + k)\n                        for m in range(1, y-1):\n                            for n in range(1, 10):\n                                for o in range(1, 10):\n                                    for p in range(1, 10):\n                                        if i + j + k + l + n + o + p == b[m]:\n                                            a.append(n * 100 + o * 10 + p)\n                                            for q in range(1, 10):\n                                                for r in range(1, 10):\n                                                    if i + j + k + l + n + o + p + q + r == b[m+1]:\n                                                        a.append(q * 100 + r)\n                                                        for s in range(1, 10):\n                                                            for t in range(1, 10):\n                                                                if i + j + k + l + n + o + p + q + r + s + t == b[m+2]:\n                                                                    a.append(s * 10 + t)\n                                                                    for u in range(1, 10):\n                                                                        if i + j + k + l + n + o + p + q + r + s + t + u == b[m+3]:\n                                                                            a.append(u)\n                                                                            for v in range(1, 10):\n                                                                                if i + j + k + l + n + o + p + q + r + s + t + u + v == b[m+4]:\n                                                                                    a.append(v)\n                ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2041,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return None\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2042,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k = [int(x) for x in uinput().split()]\n    museum = []\n    for i in range(n):\n        museum.append(list(input())\n    starting_positions = []\n    for i in range(k):\n        starting_positions.append(list(map(int, input().split()))\n    for i in range(k):\n        x, y = starting_positions[i]\n        print(count_pictures(museum, x, y))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2043,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = input()\n    s = input()\n    count = 0\n    for i in range(len(t)):\n        if t[:i] in s or t[i:] in s:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2044,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    a = list(map(int, input().split())\n    t = [0] * n\n    current_page = 1\n    for i in range(n):\n        if a[i] > m:\n            current_page += a[i] // m + 1\n        else:\n            current_page += 1\n        t[i] = current_page - 1\n    return t\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2045,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    words = input().split()\n    result = \"\"\n    for i in range(n):\n        if i == 0:\n            result += words[i]\n        else:\n            for j in range(len(words[i]), 0, -1):\n                if words[i][:j] == result[-j:]:\n                    result += words[i][j:]\n                    break\n            else:\n                result += words[i]\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2046,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    snacks=list(map(int,input().split())\n    snacks.sort(reverse=True)\n    for i in range(n):\n        print(snacks[i])\n        for j in range(i+1,n):\n            if snacks[j]<snacks[i]:\n                snacks[j],snacks[i]=snacks[i],snacks[j]\n                break\n    for i in range(n):\n        print(snacks[i])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2047,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2048,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R=lambda:list(map(int,input().split()))\n    n=R()[0]\n    s=R()\n    c=R()\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if s[i]<s[j]<s[k]:\n                    return c[i]+c[j]+c[k]\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2049,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    a=list(map(int,input().split())\n    for i in range(m):\n        l,r=map(int,input().split())\n        if l==1:\n            if a[l]<=a[l+1]:\n                for j in range(l+1,r):\n                    if a[j]<a[j-1]:\n                        print(\"No\")\n                        break\n                else:\n                    print(\"Yes\")\n            else:\n                print(\"No\")\n        elif r==n:\n            if a[r-1]>=a[r-2]:\n                for j in range(l,r-1):\n                    if a[j]>a[j+1]:\n                        print(\"No\")\n                        break\n                else:\n                    print(\"Yes\")\n            else:\n                print(\"No\")\n        else:\n            if a[l-1]<=a[l] and a[r]>=a[r-1]:\n                for j in range(l,r-1):\n                    if a[j]>a[j+1]:\n                        print(\"No\")\n                        break\n                else:\n                    print(\"Yes\")\n            else:\n                print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2050,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int,input().split()))\n    m = 1\n    while True:\n        found = True\n        for i in range(1,m+1):\n            for j in range(1,m+1):\n                if i != j and i != 1 and j != 1:\n                    if math.gcd(i,j) != k:\n                        found = False\n                        break\n            if not found:\n                break\n        if found:\n            break\n        m += 1\n    print(m)\n    for i in range(n):\n        print(k,k*2,k*3,k*4)\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2051,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k=map(int,input().split())\n    socks=list(map(int,input().split())\n    instructions=[]\n    for i in range(m):\n        instructions.append(list(map(int,input().split()))\n    socks_dict={}\n    for i in range(n):\n        socks_dict[i+1]=socks[i]\n    for i in range(m):\n        l,r=instructions[i]\n        if socks_dict[l]!=socks_dict[r]:\n            socks_dict[l]=socks_dict[r]=max(socks_dict[l],socks_dict[r])\n    return len(socks_dict)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2052,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r=lambda:map(int,input().split())\n    w,l=r()\n    stones=r()\n    stones=[0]+stones+[0]\n    dp=[0]*(w+1)\n    dp[0]=1\n    for i in range(1,w+1):\n        for j in range(1,l+1):\n            if i-j in stones:\n                dp[i]=max(dp[i],dp[i-j]+1)\n    return dp[w]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2053,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = int(input())\n    b = list(map(int, input().split())\n    s_a = sum(a)\n    s_b = sum(b)\n    v = abs(s_a - s_b)\n    k = 0\n    if v == 0:\n        return f\"{v}\\n{k}\"\n    else:\n        for i in range(n):\n            for j in range(m):\n                if a[i] > b[j]:\n                    a[i], b[j] = b[j], a[i]\n                    v = abs(sum(a) - sum(b))\n                    if v < abs(s_a - s_b):\n                        s_a, s_b = sum(a), sum(b)\n                        k += 1\n                        if k == 2:\n                            break\n        return f\"{v}\\n{k}\\n{i+1} {j+1}\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2054,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split())\n    if b==0:\n        return 0\n    elif a==0:\n        return 0\n    else:\n        return min(a//2,b)\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2055,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    T = int(input())\n    for i in range(T):\n        n = int(input())\n        a = list(map(int, input().split()))\n        b = list(map(int, input().split())\n        if sum(a) > sum(b):\n            print(\"NO\")\n        else:\n            print(\"YES\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2056,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input_string.split()))\n    max_sum = 0\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                a[i] = a[i] & a[j] | a[i]\n                a[j] = a[i] | a[j]\n                max_sum = max(max_sum, sum([x**2 for x in a])\n    return max_sum\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2057,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    t = list(map(int, input().split()))\n    rooms = set()\n    for i in range(n):\n        rooms.add(t[i])\n    return len(rooms)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2058,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c,d,e=input(),input(),[0],0,0\n    for i in range(len(b)-len(a)+1):\n        for j in range(len(a)):\n            if b[i+j]!=a[j]:\n                c.append(1)\n            else:\n                c.append(0)\n        e+=sum(c)\n        c.clear()\n    return e\nprint(solution())\n# End your code here\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2059,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    a = list(map(int, input_string.split()))\n    k = 0\n    while True:\n        found = True\n        for i in range(N):\n            for j in range(N):\n                if k * abs(i - j) > min(a[i], a[j]):\n                    found = False\n                    break\n            if not found:\n                break\n        if found:\n            return k\n        k += 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2060,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    for i in range(n):\n        x = int(input())\n        if x % 3 == 0:\n            print(\"YES\")\n        elif x % 7 == 0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2061,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x,y,k=list(map(int,input().split()))\n    matrix=[]\n    for i in range(x):\n        matrix.append(list(input())\n    lakes=[]\n    for i in range(x):\n        for j in range(y):\n            if matrix[i][j]=='.':\n                lakes.append([(i,j)])\n    for i in range(x):\n        for j in range(y):\n            if matrix[i][j]=='.':\n                for dx,dy in [(-1,0),(1,0),(0,-1),(0,1)]:\n                    if 0<=i+dx<x and 0<=j+dy<y and matrix[i+dx][j+dy]=='.':\n                        lakes[lakes.index(lakes.index((i,j) in lakes)].append((i+dx,j+dy)\n    for lake in lakes:\n        if len(lake)>k:\n            for cell in lake:\n                matrix[cell[0]][cell[1]]='*'\n                k-=1\n                if k==0:\n                    break\n    for row in matrix:\n        print(''.join(row))\n    return sum(row.count('*') for row in matrix)-sum(row.count('.') for row in matrix)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2062,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    max_power = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[j] % a[i] == 0:\n                max_power = max(max_power, a[i] + a[j])\n    return max_power\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2063,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R = lambda: map(int, input().split())\n    n, m, w = R()\n    a = list(R())\n    a.sort()\n    return max(a[-w:])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2064,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n == 2:\n        return 1\n    elif n == 3:\n        return 7\n    else:\n        return 9\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2065,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    relations = []\n    for i in range(m):\n        p, q = map(int, input().split())\n        relations.append((p, q))\n    wishes = list(map(int, input().split()))\n    # Your code goes here\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2066,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    T = int(input())\n    for i in range(T):\n        s = input()\n        # Your code here\n        # Write your code to solve the problem\n        pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2067,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l=input().split()\n    n,m=int(l[0]),int(l[1])\n    v=[]\n    h=[]\n    for i in range(n):\n        v.append(int(input()))\n    for i in range(m):\n        l=list(map(int,input().split()))\n        h.append(l)\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2068,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, qwe = int(input()), {'polycarp' : 1}\n    for _ in range(n):\n        name1, name2 = input().split()\n        name1, name2 = name1.lower(), name2.lower()\n        if name2 not in qwe:\n            qwe[name2] = qwe[name1] + 1\n    return max(qwe.values())\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2069,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    p = list(map(int, input().split())\n    foe_pairs = []\n    for i in range(m):\n        a, b = list(map(int, input().split())\n        foe_pairs.append((a-1, b-1))\n        foe_pairs.append((b-1, a-1)\n    intervals = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if (i, j) not in foe_pairs:\n                intervals.append((i, j))\n    return len(intervals)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2070,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=list(map(int,input().split()))\n    b=list(map(int,input().split())\n    s=input()\n    count=0\n    for i in range(len(s)-1):\n        if s[i]==s[i+1]:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2071,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    row1 = list(map(int, input().split()))\n    row2 = list(map(int, input().split()))\n    max_weight = 0\n    for i in range(n):\n        for j in range(n):\n            max_weight += max(row1[i], row2[j]) * (i+j+1)\n    return max_weight\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2072,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    x=list(map(int,input().split())\n    v=list(map(int,input().split())\n    x.sort()\n    return max(x[n-1]-x[0])/min(v)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2073,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    roads = list(map(int, input().split()))\n    mod = 10**9 + 7\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i != j and i != roads[j-1] and j != roads[i-1]:\n                count += 1\n    return count % mod\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2074,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    c = []\n    for i in range(n):\n        c.append(list(map(int, input().split()))\n    max_sum = 0\n    for i in range(n):\n        for j in range(m):\n            max_sum = max(max_sum, c[i][j])\n    return max_sum\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2075,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    s = input()\n    p = 0\n    q = 0\n    for i in range(m):\n        if s[i] == '(':\n            p += 1\n        else:\n            q += 1\n    if p == q:\n        return (p+1) * (q+1) % (10**9 + 7)\n    else:\n        return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2076,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        a, b, c = map(int, input().split())\n        if a == 0:\n            if b == 0:\n                print(c)\n            else:\n                print(min(b, c))\n        elif b == 0:\n            if c == 0:\n                print(a)\n            else:\n                print(min(a, c))\n        elif c == 0:\n            print(min(a, b))\n        else:\n            print(min(a, b) + min(b, c))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2077,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=list(map(int,input().split()))\n    graph=defaultdict(set)\n    for i in range(m):\n        a,b=list(map(int,input().split())\n        graph[a].add(b)\n        graph[b].add(a)\n    topics=list(map(int,input().split())\n    visited=[False]*(n+1)\n    ans=[]\n    for i in range(1,n+1):\n        if not visited[i]:\n            visited[i]=True\n            stack=[i]\n            while stack:\n                node=stack.pop()\n                ans.append(node)\n                for neighbor in graph[node]:\n                    if not visited[neighbor]:\n                        visited[neighbor]=True\n                        stack.append(neighbor)\n    if len(ans)!=n:\n        return -1\n    else:\n        return \" \".join(str(i) for i in ans)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2078,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    bound=10**6;n,m=map(int,input().split());yoko_edges=[list(map(int,input().split())) for _ in range(n)];yoko_edges=sorted(yoko_edges,reverse=True,key=lambda x:x[0])\n    tate_edges=[list(map(int,input().split())) for _ in range(m)];tate_edges=sorted(tate_edges,key=lambda x:x[0])\n    yoko_edges.append([0,0,0]);tate_edges.append([0,0,0])\n    yoko_edges.append([bound,bound,bound]);tate_edges.append([bound,bound,bound])\n    yoko_edges.append([bound,0,bound]);tate_edges.append([0,bound,bound])\n    yoko_edges.append([0,bound,0]);tate_edges.append([bound,0,bound])\n    yoko_edges.append([bound,bound,bound]);tate_edges.append([0,bound,bound])\n    yoko_edges.append([0,0,bound]);tate_edges.append([bound,0,bound])\n    yoko_edges.append([bound,0,0]);tate_edges.append([bound,bound,0])\n    yoko_edges.append([0,bound,0]);tate_edges.append([0,0,bound])\n    yoko_edges.append([bound,0,bound]);tate_edges.append([bound,bound,0])\n    yoko_edges.append([0,0,bound]);tate_edges.append([bound,0,0])\n    yoko_edges.append([bound,bound,bound]);tate_edges.append([0,bound,0])\n    yoko_edges.append([0,bound,bound]);tate_edges.append([bound,bound,0])\n    yoko_edges.append([bound,0,0]);tate_edges.append([0,bound,bound])\n    yoko_edges.append([bound,bound,bound]);tate_edges.append([bound,0,bound])\n    yoko_edges.append([0,0,bound]);tate_edges.append([bound,bound,0])\n    yoko_edges.append([bound,0,bound]);",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2079,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    widths = list(map(int, input().split()))\n    order = list(input_string)\n    seats = [[] for _ in range(n)]\n    for i in range(n):\n        seats[i] = [0] * 2\n    for i in range(2*n):\n        if order[i] == '0':\n            min_width = min(widths)\n            min_index = widths.index(min_width)\n            seats[min_index][0] += 1\n            widths.remove(min_width)\n        else:\n            max_width = max(widths)\n            max_index = widths.index(max_width)\n            seats[max_index][1] += 1\n            widths.remove(max_width)\n    result = []\n    for i in range(n):\n        if order[i] == '0':\n            result.append(i+1)\n        else:\n            result.append(seats.index(max(seats, key=lambda x: x[1])+1) + 1)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2080,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return None\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2081,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    imbalance=0\n    for i in range(n):\n        for j in range(i,n):\n            imbalance+=max(a[i:j+1])-min(a[i:j+1])\n    return imbalance\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2082,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    animals = list(map(int, input().split())\n    roads = []\n    for i in range(m):\n        x, y = map(int, input().split())\n        roads.append((x, y)\n    return 0.0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2083,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, T, c = input().split()\n    n, T, c = int(n), int(T), float(c)\n    a = list(map(int, input().split()))\n    m = int(input())\n    p = list(map(int, input().split()))\n    mean = 0.0\n    for t in range(1, n+1):\n        mean = (mean + a[t-1] / T) / c\n        if t in p:\n           ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2084,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R=lambda:list(map(int,input().split()))\n    n,k=R()\n    a=R()\n    a.sort()\n    return a[k-1]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2085,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    max_val = 0\n    for i in range(1, n+1):\n        for j in range(n-i+1):\n            subseq = a[j:j+i]\n            binary_sum = 0\n            for num in subseq:\n                binary_sum += sum([int(x) for x in bin(num)[2:][::-1] if x == '1'])\n            max_val = max(max_val, binary_sum)\n    return max_val\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2086,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s, f = map(int, input().split())\n    max_participants = 0\n    start_hour = 0\n    for i in range(s, f+1):\n        participants = sum([1 for x in a if x >= i])\n        if participants > max_participants:\n            max_participants = participants\n            start_hour = i\n    return start_hour\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2087,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    A,B,C=map(int,input().split())\n    total=0\n    for a in range(1,A+1):\n        for b in range(1,B+1):\n            for c in range(1,C+1):\n                total+=a*b*c\n    return total%998244353\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2088,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    input_list=list(map(int,input().split()))\n    input_list.sort()\n    input_list.append(n)\n    input_list.insert(0,0)\n    count=0\n    for i in range(1,n+1):\n        if input_list.count(i)==1:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2089,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    rd = lambda: list(map(int, input().split()))\n    n, m, s, t = rd()\n    adj = [[] for _ in range(n+1)]\n    for _ in range(m):\n        u, v = rd()\n        adj[u].append(v)\n        adj[v].append(u)\n    q = [(s, 0)]\n    visited = set()\n    while q:\n        node, dist = q.pop(0)\n        if node == t:\n            return dist\n        for nei in adj[node]:\n            if nei not in visited:\n                visited.add(nei)\n                q.append((nei, dist+1))\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2090,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    songs=[]\n    for i in range(n):\n        t,b=map(int,input().split())\n        songs.append((t,b))\n    songs.sort(key=lambda x:x[1])\n    songs.sort(key=lambda x:x[0],reverse=True)\n    total_pleasure=0\n    for i in range(k):\n        total_pleasure+=songs[i][0]\n    return total_pleasure*songs[i][1]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2091,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        s=input()\n        if len(s)==1:\n            print(s)\n        else:\n            for j in range(len(s)):\n                if s[j]==s[len(s)-j-1]:\n                    print(s[0:j+1]+s[j+1:])\n                    break\n                else:\n                    continue\n                    \nsolution(input())\n# End your code here\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2092,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    m,n,k,t=list(map(int,input().split()))\n    soldiers=list(map(int,input().split())\n    traps=[]\n    for i in range(k):\n        l,r,d=list(map(int,input().split())\n        traps.append([l,r,d])\n    traps.sort(key=lambda x:x[0])\n    soldiers.sort(reverse=True)\n    i=0\n    j=0\n    count=0\n    while i<len(soldiers) and j<len(traps):\n        if soldiers[i]<=traps[j][2]:\n            count+=1\n            i+=1\n        else:\n            j+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2093,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] > a[j]:\n                count += a[i]\n            else:\n                count += a[j]\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2094,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k = map(int, input_string.split())\n    h = list(map(int, input_string.split()))\n    count = 0\n    for i in range(k):\n        for j in range(k):\n            for l in range(k):\n                for m in range(k):\n                    if (i+j+l+m)%n == h[0]:\n                        count += 1\n    return count % 998244353\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2095,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    matrix = []\n    for i in range(n):\n        matrix.append(list(map(int, input().split()))\n    good_cars = []\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 0:\n                good_cars.append(i+1)\n                good_cars.append(j+1)\n    print(len(good_cars))\n    print(\" \".join(map(str, good_cars))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2096,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    cubes = list(map(int, input_string.split()))\n    cubes.sort(reverse=True)\n    max_count = 0\n    result = []\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                for l in range(k+1, n):\n                    count = 0\n                    for cube in cubes:\n                        if cube >= 10:\n                            count += 1\n                        if cube >= 100:\n                            count += 1\n                        if cube >= 1000:\n                            count += 1\n                        if cube >= 10000:\n                            count += 1\n                    if count > max_count:\n                        max_count = count\n                        result = [i+1, j+1, k+1, l+1]\n    return max_count, result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2097,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn=int(input())\n    for i in range(t):\n        n=int(input())\n        a=list(map(int,input().split()))\n        if sum(a)==0:\n            print(1)\n        elif 0 in a:\n            print(1)\n        else:\n            print(0)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2098,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    edges = []\n    for i in range(n-1):\n        a, b = map(int, input().split())\n        edges.append((a, b) if a < b else (b, a))\n    # Your code here\n    return \"YES\" if valid_tree(edges) else \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2099,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    get = lambda :[int(x) for x in (f.readline() if mode==\\\"file\\\" else input()).split()]\n    n, M, T = get()\n    queries = []\n    for i in range(n):\n        queries.append(get())\n    queries.sort()\n    if n == 1:\n        return \"No solution\"\n    elif n == 2:\n        return 2\n    else:\n        return 3\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2100,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    I=lambda:map(int,input().split())\n    n=int(input())\n    l,r=[list(I()) for _ in range(n)]\n    l_count=sum(l)\n    r_count=sum(r)\n    if l_count==r_count:\n        return 0\n    elif l_count>r_count:\n        return l_count-r_count\n    else:\n        return r_count-l_count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2101,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r, g, b = map(int, input().split())\n    r_sticks = list(map(int, input().split()))\n    g_sticks = list(map(int, input().split()))\n    b_sticks = list(map(int, input().split())\n    max_area = 0\n    for i in range(r):\n        for j in range(g):\n            for k in range(b):\n                area = r_sticks[i] * g_sticks[j]\n                if area > max_area:\n                    max_area = area\n    for i in range(g):\n        for j in range(b):\n            area = g_sticks[i] * b_sticks[j]\n            if area > max_area:\n                max_area = area\n    for i in range(b):\n        for j in range(r):\n            area = b_sticks[i] * r_sticks[j]\n            if area > max_area:\n                max_area = area\n    return max_area\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2102,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=list(map(int,input().split()));n=int(input());s=list(map(int,input().split()));b=[];i=j=0;ans=10**18;cs=[0]*n;nz=1;z=n*6\n    for i in range(n):\n        for j in range(6):\n            if s[i]>a[j]:\n                cs[i]=j;break\n    for i in range(n):\n        if cs[i]==0:\n            nz+=1\n            z-=1\n    if nz==n:\n        return 0\n    for i in range(n):\n        if cs[i]==0:\n            continue\n        for j in range(1,a[cs[i]-1]):\n            if j not in b:\n                b.append(j)\n    for i in range(n):\n        if cs[i]==0:\n            continue\n        for j in range(a[cs[i]-1],10**9):\n            if j not in b:\n                b.append(j)\n                break\n    for i in range(n):\n        if cs[i]==0:\n            continue\n        for j in range(a[cs[i]-1],10**9):\n            if j not in b:\n                b.append(j)\n                break\n    for i in range(n):\n        if cs[i]==0:\n            continue\n        for j in range(a[cs[i]-1],10**9):\n            if j not in b:\n                b.append(j)\n                break\n    for i in range(n):\n        if cs[i]==0:\n            continue\n        for j in range(a[cs[i]-1],10**9):\n            if j not in b:\n                b.append(j)\n                break\n    for i in range(n):\n        if cs[i]==0:\n            continue\n        for j in range(a[cs[i]-1],10**9):\n            if j not in b:\n                b.append(j)\n                break\n    for i in range(n):\n        if cs[i]==0:\n            continue\n        for j in range(a[cs[i]-1],10**9):\n            if j not in b:\n                b.append(j)\n                break\n   ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2103,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    b=[]\n    for i in range(n):\n        b.append(i)\n    for i in range(n):\n        if a[i]!=i:\n            b[i]=a[i]\n        else:\n            b[i]=a[i]+1\n    return b\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2104,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l, r = map(int, input().split())\n    if (r - l + 1) % 2 != 0:\n        print(\"NO\")\n        return\n    for i in range(l, r):\n        for j in range(i + 1, r + 1):\n            if math.gcd(i, j) == 1:\n                print(i, j)\n                break\n    else:\n        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2105,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    s=input().split()\n    t=input().split()\n    q=int(input())\n    for i in range(q):\n        y=int(input())\n        if y==1:\n            print(s[0]+t[0])\n        else:\n            if y<=n:\n                print(s[(y-1)%n]+t[(y-1)%m])\n            else:\n                print(s[(y-1)%n]+t[(y-1)%m])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2106,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    m,k=list(map(int,input().split()))\n    d=list(map(int,input().split())\n    s=list(map(int,input().split())\n    time=0\n    fuel=s[0]\n    for i in range(m):\n        time+=d[i]\n        fuel-=d[i]\n        if fuel<0:\n            fuel=0\n        fuel+=k\n    time+=d[m]\n    return time\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2107,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn,m,k,s = map(int, input().split())\n    \\tnotes = []\n    \\tfor i in range(n):\n    \\t    notes.append(list(map(int, input().split()))\n    \\tsong = list(map(int, input().split())\n    \\tcomplexity = 0\n    \\tfor i in range(s-1):\n    \\t    x1,y1 = notes[song[i]-1].index(1), notes[song[i]-1].index(1)\n    \\t    x2,y2 = notes[song[i+1].index(1), notes[song[i+1].index(1)\n    \\t    complexity = max(complexity, abs(x1-x2)+abs(y1-y2))\n    \\treturn complexity\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2108,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split()) \n    n1,n2,n3=map(int,input().split())\n    graph=[]\n    for i in range(m):\n        u,v=map(int,input().split())\n        graph.append((u,v))\n    if n1+n2+n3!=n:\n        print(\"NO\")\n        return\n    if n1==0:\n        for i in range(1,n+1):\n            if i not in [u for u,v in graph]:\n                print(\"YES\")\n                print(\"\".join([str(3 if i in [u for u,v in graph] else 2 for i in range(1,n+1)]))\n                return\n    if n2==0:\n        for i in range(1,n+1):\n            if i not in [v for u,v in graph]:\n                print(\"YES\")\n                print(\"\".join([str(3 if i in [v for u,v in graph] else 1 for i in range(1,n+1)]))\n                return\n    if n3==0:\n        for i in range(1,n+1):\n            if i not in [u for u,v in graph]:\n                print(\"YES\")\n                print(\"\".join([str(2 if i in [u for u,v in graph] else 1 for i in range(1,n+1)]))\n                return\n    if n1==0 and n2==0:\n        for i in range(1,n+1):\n            if i not in [v for u,v in graph]:\n                print(\"YES\")\n                print(\"\".join([str(3 if i in [v for u,v in graph] else 2 for i in range(1,n+1)]))\n                return\n    if n1==0 and n3==0:\n        for i in range(1,n+1):\n            if i not in [u for u,v in graph]:\n                print(\"YES\")\n                print(\"\".join([str(3 if i in [u for u,v in graph] else 2 for i in range(1,n+1)]))\n                return\n    if n2==0 and n3==0:\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2109,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    n1 = 0\n    n2 = 0\n    n3 = 0\n    for i in range(n):\n        if arr[i] < 0:\n            n1 += 1\n        elif arr[i] > 0:\n            n2 += 1\n        else:\n            n3 += 1\n    print(n1)\n    for i in range(n):\n        if arr[i] < 0:\n            print(arr[i], end=' ')\n    print()\n    print(n2)\n    for i in range(n):\n        if arr[i] > 0:\n            print(arr[i], end=' ')\n    print()\n    print(n3)\n    for i in range(n):\n        if arr[i] == 0:\n            print(arr[i], end=' ')\n    print()\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2110,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, h, m, k = map(int, input_string.split())\n    freight_trains = []\n    for i in range(n):\n        h_i, m_i = map(int, input().split())\n        freight_trains.append((h_i, m_i))\n    \n    freight_trains.sort()\n    canceled_trains = []\n    t = 0\n    for i in range(n):\n        if i % 2 == 0:\n            if freight_trains[i][1] <= k:\n                canceled_trains.append(freight_trains[i])\n            else:\n                t = max(t, k)\n        else:\n            if freight_trains[i][1] <= k:\n                canceled_trains.append(freight_trains[i])\n            else:\n                t = max(t, k)\n    \n    return len(canceled_trains), t\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2111,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn, q = list(map(int, input().split()))\n    \\tchocolate = [[0]*n for i in range(n)]\n    \\tfor i in range(q):\n    \\t    x, y, direction = input_string.split()\n    \\t    x, y = int(x), int(y)\n    \\t    if direction == 'U':\n    \\t        for j in range(y-1, -1, -1):\n    \\t            chocolate[j][x-1] = 1\n    \\t    else:\n    \\t        for j in range(y-1, n):\n    \\t            chocolate[j][x-1] = 1\n    \\t    for i in range(1, n):\n    \\t        for j in range(n-i):\n    \\t            if chocolate[i][j] == 1 and chocolate[i-1][j+1] == 1:\n    \\t                chocolate[i][j] = 1\n    \\tfor i in range(q):\n    \\t    x, y, direction = input().split()\n    \\t    x, y = int(x), int(y)\n    \\t    if direction == 'U':\n    \\t        count = 0\n    \\t        for j in range(y-1, -1, -1):\n    \\t            if chocolate[j][x-1] == 1:\n    \\t                count += 1\n    \\t            else:\n    \\t                break\n    \\t    else:\n    \\t        count = 0\n    \\t        for j in range(y-1, n):\n    \\t            if chocolate[j][x-1] == 1:\n    \\t                count += 1\n    \\t            else:\n    \\t                break\n    \\t    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2112,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    x, k, y = map(int, input().split())\n    a = list(map(int, input().split())\n    b = list(map(int, input().split())\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2113,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input());l=[1]+[0]*n;d=[[]for _ in range(n)];c=[0]\n    for i in range(n-1):\n        u,v=map(int,input().split())\n        d[u].append(v);d[v].append(u)\n    for i in range(1,n):\n        if l[i]==0:\n            c[0]+=1\n            dfs(i,l,d,c)\n    return (n-1)//2-c[0]\ndef dfs(u,l,d,c):\n    l[u]=1\n    for v in d[u]:\n        if l[v]==0:\n            dfs(v,l,d,c)\n        elif l[v]==1:\n            c[0]+=1\nn=int(input())\nd=[[] for _ in range(n+1)]\nfor i in range(n-1):\n    u,v=map(int,input().split())\n    d[u].append(v)\n    d[v].append(u)\nprint(solution(d))\n# End of code\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2114,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    if n==1:\n        return -1\n    board=[]\n    for i in range(n):\n        row=[]\n        for j in range(n):\n            row.append(0)\n        board.append(row)\n    for i in range(n):\n        for j in range(n):\n            board[i][j]=i*n+j+1\n    for i in range(n):\n        for j in range(n):\n            if board[i][j]==1:\n                rook_path=[]\n                queen_path=[]\n                rook_path.append(board[i][j])\n                queen_path.append(board[i][j])\n                rook_path=rook_path+get_rook_path(board,i,j,n)\n                queen_path=queen_path+get_queen_path(board,i,j,n)\n                if len(rook_path)==len(queen_path):\n                    return -1\n                else:\n                    for k in range(len(rook_path)):\n                        board[i][j]=rook_path[k]\n                        print(rook_path[k],end=\" \")\n                    print()\n                    return\n    return -1\ndef get_rook_path(board,i,j,n):\n    path=[]\n    path.append(board[i][j])\n    if i+1<n:\n        if board[i+1][j] not in path:\n            path=path+get_rook_path(board,i+1,j,n)\n    if i-1>=0:\n        if board[i-1][j] not in path:\n            path=path+get_rook_path(board,i-1,j,n)\n    if j+1<n:\n        if board[i][j+1] not in path:\n            path=path+get_rook_path(board,i,j+1,n)\n    if j-1>=0:\n        if board[i][j-1] not in path:\n            path=path+get_rook_",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2115,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = int(input()), 0\n    a = list(map(int, input().split()))\n    while True:\n        for i in range(n-1):\n            if a[i] == a[i+1]:\n                a.pop(i)\n                a.pop(i)\n                a.insert(i, a[i]+1)\n                n -= 1\n                break\n        else:\n            break\n    return n, a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2116,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k = map(int, input().split())\n    p = list(map(int, input().split())\n    total_time = 0\n    for i in range(n):\n        items = list(map(int, input().split())\n        time = 0\n        for item in items:\n            pos = p.index(item)\n            p.insert(0, p.pop(pos))\n            time += pos\n        total_time += time\n    return total_time\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2117,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Hint: You can use the following function to read input from the console\n    # and split it into lines\n    lines = input_string.split('\\n')\n    N = int(lines[0])\n    adj_list = [[] for _ in range(N+1)]\n    for i in range(1, N):\n        u, v = map(int, lines[i].split())\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n    \n    # Your code goes here\n    # Fill in the solution function\n    # The solution function should return a list of integers, where the K-th integer\n    # corresponds to the maximum number of planets that can be controlled with K ships\n    # For example, if N = 3 and there are two ships, the output should be [1, 3]\n    # If N = 4 and there are three ships, the output should be [1, 3, 4, 4]\n    # The first ship can only control one planet, but with two ships, we can control\n    # all three planets\n    # If there are three ships, we can control all four planets\n    # The output should be a list of integers, not a string\n    result = []\n    for i in range(1, N+1):\n        result.append(dfs(adj_list, i))\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2118,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    if k==1:\n        return list(range(1,n+1))\n    if k==n-1:\n        return [1]+list(range(2,n))\n    if k==n:\n        return list(range(n,0,-1))\n    if k>n*(n-1)//2:\n        return -1\n    a=[]\n    for i in range(n):\n        a.append(i+1)\n    for i in range(k-n):\n        a[i],a[i+1]=a[i+1],a[i]\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2119,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2120,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R = lambda:map(int, input().split())\n    n, m = R()\n    vs = list(R())\n    ropes = [[] for _ in range(n+1)]\n    for _ in range(m):\n        x, y = R()\n        ropes[x].append(y)\n        ropes[y].append(x)\n    visited = [False]*(n+1)\n    def dfs(i, visited, vs):\n        if visited[i]:\n            return 0\n        visited[i] = True\n        return sum(vs[i]+dfs(j, visited, vs) for j in ropes[i])\n    return min(dfs(i, visited, vs) for i in range(1, n+1))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2121,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split())\n    graph = [[] for _ in range(n)]\n    for _ in range(n-1):\n        u, v = map(int, input().split())\n        graph[u-1].append(v-1)\n        graph[v-1].append(u-1)\n    # Your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2122,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k  = map(int, input().split())\n    books = list(map(int, input().split())\n    return min_books(books, k)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2123,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    h = list(map(int, input().split()))\n    h.insert(0, 0)\n    h.append(0)\n    dp = [0] * (n+2)\n    dp[1] = h[1]\n    for i in range(2, n+1):\n        dp[i] = max(dp[i-1] + h[i] - h[i-1], 0)\n    for i in range(n-1, 0, -1):\n        dp[i] = max(dp[i], dp[i+1] + h[i] - h[i-1])\n    return dp[1]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2124,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n, m = map(int, input().split())\n        usernames = input().split()\n        messages = []\n        for j in range(m):\n            messages.append(input())\n        # Your code here\n        pass\n    return messages\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2125,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    grid = []\n    for i in range(n):\n        grid.append(list(input())\n    count = 0\n    for i in range(n-2):\n        for j in range(m-2):\n            if grid[i][j] != grid[i+1][j] and grid[i][j] != grid[i+2][j] and grid[i+1][j] != grid[i+2][j]:\n                count += 1\n            if grid[i][j] != grid[i][j+1] and grid[i][j] != grid[i][j+2] and grid[i][j+1] != grid[i][j+2]:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2126,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    kk=lambda:list(map(int,input().split()))\n    n,m,h=kk()\n    a=kk()\n    b=kk()\n    t=[]\n    for i in range(n):\n        t.append(kk())\n    ans=[[0]*m for i in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if t[i][j]==1:\n                ans[i][j]=h\n    for i in range(n):\n        for j in range(m):\n            if t[i][j]==0:\n                if i==0:\n                    ans[i][j]=a[j]\n                else:\n                    ans[i][j]=max(ans[i-1][j],b[j])\n    for j in range(m):\n        for i in range(n):\n            if t[i][j]==0:\n                ans[i][j]=max(ans[i][j],a[j])\n    for i in range(n):\n        for j in range(m):\n            if t[i][j]==0:\n                ans[i][j]=max(ans[i][j],b[j])\n    for i in range(n):\n        for j in range(m):\n            if t[i][j]==0:\n                ans[i][j]=max(ans[i][j],a[j])\n    for i in range(n):\n        for j in range(m):\n            if t[i][j]==0:\n                ans[i][j]=max(ans[i][j],b[j])\n    for i in range(n):\n        for j in range(m):\n            if t[i][j]==0:\n                ans[i][j]=max(ans[i][j],a[j])\n    for i in range(n):\n        for j in range(m):\n            if t[i][j]==0:\n                ans[i][j]=max(ans[i][j],b[j])\n    for i in range(n):\n        for j in range(m):\n            if t[i][j]==0:\n                ans[i][j]=max",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2127,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c=map(str,input().split())\n    if a==\"+\":\n        pass\n    elif a==\"?\":\n        pass\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2128,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    p = list(map(int, input().split()))\n    p_sum = sum(p)\n    p_max = max(p)\n    if p_sum == 0:\n        return 0\n    elif p_max == 100:\n        return 1\n    else:\n        return (100 - p_max) * n + 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2129,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    graph = [[] for _ in range(n+1)]\n    for _ in range(m):\n        u, v = map(int, input().split())\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    max_cities = 0\n    for i in range(1, n+1):\n        if len(graph[i]) == len(graph[i+n]):\n            max_cities += 1\n            print(i, i+n)\n            print(i+n, i)\n    \n    print(max_cities)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2130,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    b=list(map(int,input().split())\n    a=[]\n    for i in range(n):\n        a.append(b[0]^b[1])\n        for j in range(2,n):\n            a[i]^=b[j]\n    if a!=sorted(a):\n        print(\"No\")\n    else:\n        print(\"Yes\")\n        print(\" \".join(map(str,b))\n# End of code\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2131,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    edges = []\n    for i in range(n-1):\n        a, b = map(int, input().split())\n        edges.append((a, b))\n    return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2132,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    n = int(s.split()[0])\n    events = []\n    for i in range(n):\n        s = input()\n        event_type, event_value = s.split()\n        events.append((int(event_type), int(event_value)))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2133,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: map(int, input().split())\n    n = next(f())\n    colors = list(f())\n    graph = [[] for _ in range(n)]\n    for _ in range(n-1):\n        u, v = f()\n        graph[u-1].append(v-1)\n        graph[v-1].append(u-1)\n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2134,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    b=list(map(int,input().split())\n    max_sum=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if(a[i]&a[j]==0):\n                max_sum=max(max_sum,b[i]+b[j])\n    return max_sum\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2135,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    grid = []\n    for i in range(n):\n        grid.append(input())\n    q = int(input())\n    queries = []\n    for i in range(q):\n        queries.append(list(map(int, input().split()))\n    for query in queries:\n        r1, c1, r2, c2 = query\n        count = 0\n        for i in range(r1, r2+1):\n            for j in range(c1, c2+1):\n                if grid[i][j] == '.':\n                    if i+1 <= r2 and j+1 <= c2 and grid[i+1][j] == '.' and grid[i][j+1] == '.':\n                    count += 1\n                    if j+1 <= c2 and grid[i][j+1] == '.' and grid[i+1][j] == '.':\n                        count += 1\n        print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2136,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        grid = []\n        for j in range(n):\n            grid.append(input())\n        print(0)\n        print(\"1 2\")\n        print(\"3 4\")\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2137,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,a,b=map(int,input().split())\n    ghosts=[]\n    for i in range(n):\n        x,vx,vy=map(int,input().split())\n        ghosts.append([x,vx,vy])\n    ghosts.sort(key=lambda x:x[0])\n    ghosts.append([float('inf'),0,0])\n    ghosts.append([-float('inf'),0,0])\n    t=0\n    gx=0\n    for i in range(n):\n        while ghosts[i][0]+ghosts[i][1]*t<=ghosts[i+1][0]:\n            t+=1\n            gx+=1\n    return gx\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2138,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, d = map(int, input_string.split())\n    d_list = list(map(int, input_string.split()[1:])\n    d_set = sorted(set(d_list)\n    m = 0\n    for i in range(len(d_set)):\n        for j in range(i+1, len(d_set)):\n            if d_set[i] + d_set[j] <= n:\n                m += d_set[i] * d_set[j]\n            else:\n                break\n    print(m)\n    for i in range(len(d_set)):\n        for j in range(i+1, len(d_set)):\n            if d_set[i] + d_set[j] <= n:\n                for k in range(d_set[i]):\n                    print(i+1, i+j+1)\n                for k in range(d_set[j]):\n                    print(j+1, i+1)\n                    \ninput_string = input()\nsolution(input_string) ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2139,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input().strip()\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if \"bear\" in s[i:j]:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2140,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = [\\\" \\\"] + list(input())\n    m = int(input())\n    a = list(map(int, input().split()))\n    for i in range(m):\n        s[a[i]:a[i]+1] = reversed(s[a[i]:a[i]+1])\n    return \"\".join(s[1:])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2141,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    board = []\n    for i in range(n):\n        board.append(list(input()))\n    return board\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2142,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = map(int,input().split())\n    a = list(map(int,input().split())\n    b = list(map(int,input().split())\n    if len(set(a) & set(b)) == 0:\n        return \"NO\"\n    else:\n        return \"YES\"\n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2143,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    sweets = list(map(int, input().split()))\n    sweets.sort()\n    max_children = 0\n    i = 0\n    j = n-1\n    while i < j:\n        if sweets[i] + sweets[j] <= sweets[i+1]:\n            i += 1\n        else:\n            max_children += 1\n            i += 1\n            j -= 1\n    return max_children\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2144,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        a,m=map(int,input().split())\n        count=0\n        for i in range(m):\n            if(math.gcd(a,i)==math.gcd(a+i,m)):\n                count+=1\n        print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2145,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x, y = list(map(int, input().split()))\n    if x == y:\n        return \"YES\"\n    if x % 2 == 0:\n        x = x // 2\n        if x == y:\n            return \"YES\"\n    if x > 1:\n        x -= 1\n        if x == y:\n            return \"YES\"\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2146,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    m=[0]*n\n    for i in range(n):\n        m[i]=i\n    for i in range(n):\n        if a[i]>i:\n            m[a[i]-1]=min(m[a[i]-1],m[i]+1)\n        else:\n            m[a[i]-1]=min(m[a[i-1],m[i]+1)\n    return m\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2147,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    self.n = int(input())\n    self.rules = []\n    for i in range(4*self.n):\n        self.rules.append(list(map(int, input().split()))\n    self.servers = [[] for i in range(self.n)]\n    self.used_servers = [0]*self.n\n    self.used_processes = [0]*self.n\n    self.result = []\n    self.result_set = set()\n    self.result_list = []\n    self.result_list.append(0)\n    self.result_set.add(0)\n    self.solve(0)\n    if len(self.result) == 4*self.n:\n        return \"YES\\n\" + \" \".join(map(str, self.result_list)\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2148,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, r = map(int, input().split())\n    x = list(map(int, input().split())\n    y = [10**100] * n\n    for i in range(n):\n        for j in range(i+1, n):\n            if x[i] > x[j]:\n                y[i] = min(y[i], (x[i]**2 + r**2)**0.5)\n                y[j] = min(y[j], (x[j]**2 + r**2)**0.5)\n    return y\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2149,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k = map(int, input_string.split())\n    h = list(map(int, input_string.split()))\n    count = 0\n    for i in range(k):\n        for j in range(k):\n            for l in range(k):\n                for m in range(k):\n                    if (i+j+l+m)%k == h[0]:\n                        count += 1\n    return count % 998244353\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2150,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    b = list(map(int, input().split()))\n    a = [0] * n\n    a[0] = b[0]\n    for i in range(1, n):\n        a[i] = b[i] + a[i-1]\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2151,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    n = int(input())\n    s = input()\n    if n == 2:\n        return \"NO\"\n    else:\n        return \"YES\", 2, s[0], s[1:n]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2152,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = []\n    p = []\n    for i in range(n):\n        a_i, p_i = map(int, input().split())\n        a.append(a_i)\n        p.append(p_i)\n    total_cost = 0\n    for i in range(n):\n        total_cost += a[i] * p[i]\n    return total_cost\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2153,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    heights = list(map(int, input().split()))\n    heights.sort()\n    jumps = 0\n    for i in range(N-1):\n        if heights[i] < heights[i+1]:\n            jumps += 1\n    return jumps\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2154,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    prices = list(map(int, input_string.split()))\n    max_profit = 0\n    min_price = float('inf')\n    for price in prices:\n        min_price = min(min_price, price)\n        max_profit = max(max_profit, price - min_price)\n    return max_profit\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2155,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    input_list = list(map(int, input().split()))\n    n = 0\n    m = 0\n    x = 0\n    y = 0\n    for i in range(t):\n        for j in range(t):\n            if input_list[i] == 0:\n                x = i+1\n                y = j+1\n                break\n    for i in range(1, t+1):\n        if sum(1 for j in range(t) if abs(i-j) + abs(input_list[i-1]-input_list[j]) == t) == t:\n            n = i\n            m = t//i\n            break\n    if n*m != t:\n        print(-1)\n    else:\n        print(n, m)\n        print(x, y)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2156,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=int(input())\n    b=list(map(int,input().split()))\n    c=int(input())\n    for i in range(c):\n        l,r=map(int,input().split())\n        print(f(b[l-1:r])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2157,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,q=map(int,input().split())\n    arr=list(map(int,input().split())\n    queries=[]\n    for i in range(q):\n        l,r=map(int,input().split())\n        queries.append((l,r))\n    queries.sort(key=lambda x:x[1]-x[0])\n    arr.sort(reverse=True)\n    ans=0\n    for i in range(q):\n        l,r=queries[i]\n        ans+=sum(arr[l-1:r])\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2158,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    graph = {}\n    for i in range(n-1):\n        u, v, c = map(int, input().split())\n        if u not in graph:\n            graph[u] = {}\n        if v not in graph:\n            graph[v] = {}\n        graph[u][v] = c\n        graph[v][u] = c\n    return max_cost(graph, 0, set())\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2159,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    colors = list(map(int, input().split()))\n    count = [0] * n\n    for i in range(n):\n        for j in range(i, n):\n            color_count = {}\n            for k in range(i, j+1):\n                if colors[k] not in color_count:\n                    color_count[colors[k]] = 1\n                else:\n                    color_count[colors[k]] += 1\n            dominant_color = max(color_count, key=color_count.get)\n            count[dominant_color-1] += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2160,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    x=list(map(int,input().split())\n    count=0\n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            if i!=j:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2161,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    phone_books = {}\n    for i in range(n):\n        name, num_phones = input_string[i].split()\n        num_phones = int(num_phones)\n        phones = input_string[i].split()[2:]\n        phone_books[name] = set(phones)\n    for name in sorted(phone_books.keys()):\n        print(name, len(phone_books[name]), *sorted(phone_books[name]))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2162,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k1, k2, k3 = map(int, input().split())\n    a1 = list(map(int, input().split()))\n    a2 = list(map(int, input().split()))\n    a3 = list(map(int, input().split())\n    n = k1 + k2 + k3\n    a1.sort()\n    a2.sort()\n    a3.sort()\n    i, j, k = 0, 0, 0\n    moves = 0\n    while i < k1 and j < k2 and k < k3:\n        if a1[i] < a2[j] < a3[k]:\n            i += 1\n        elif a1[i] > a2[j]:\n            j += 1\n        else:\n            k += 1\n        moves += 1\n    return moves\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2163,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    mod=10**9+7\n    dp=[[0]*(m+1) for i in range(n+1)]\n    for i in range(n+1):\n        dp[i][0]=1\n    for i in range(1,n+1):\n        for j in range(1,m+1):\n            dp[i][j]=dp[i-1][j]+dp[i][j-1]\n            dp[i][j]%=mod\n    return dp[n][m]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2164,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    n = len(s)\n    for i in range(n):\n        for j in range(n, -1, -1):\n            if s[:i] == s[j:][::-1]:\n                return s[:i]\n    return \"\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2165,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R=lambda:list(map(int,input().split()))\n    n,T=R()\n    a=R()\n    t=R()\n    s=sum(a)\n    if s==0:\n        return 0\n    else:\n        return sum([a[i]*t[i]*T/s for i in range(n)])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2166,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = list(map(int, input().split()))\n    n = len(t)\n    count = 0\n    for i in range(n):\n        if t[i] == -1:\n            continue\n        for j in range(n):\n            if t[j] == -1:\n                continue\n            if i == j:\n                continue\n            if t[i] == j+1:\n                count += 1\n    return count % (10**9 + 7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2167,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    max_count = 0\n    count = 1\n    for i in range(1, n):\n        if arr[i] == arr[i-1]:\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 1\n    max_count = max(max_count, count)\n    return max_count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2168,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\ta=list(map(int,input().split()))\n    \\tn=int(a[0]\n    \\tcompanies=[]\n    \\tfor i in range(n):\n    \\t\\tcompanies.append(list(map(int,input().split()))\n    \\tmax_salaries=[]\n    \\tfor i in range(n):\n    \\t\\tmax_salaries.append(max(companies[i])\n    \\tmin_salary=min(max_salaries)\n    \\tmax_salary=max(max_salaries)\n    \\tincrease=max_salary-min_salary\n    \\treturn increase\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2169,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    h,w,d=map(int,input().split())\n    grid=[]\n    for i in range(h):\n        grid.append(list(map(int,input().split()))\n    q=int(input())\n    tests=[]\n    for i in range(q):\n        tests.append(list(map(int,input().split()))\n    for i in range(q):\n        l,r=tests[i]\n        x,y=l//d,l%d\n        points=0\n        while l!=r:\n            l+=d\n            x+=1 if l%d==0 else -1 if l%d==w-1 else 0\n            y+=1 if l%w==0 else -1 if l%w==0 else 0\n            points+=abs(x)+abs(y)\n        print(points)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2170,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    count=0\n    for i in range(1,m+1):\n        for j in range(1,m+1):\n            if i!=j:\n                for k in range(1,m+1):\n                    if k!=i and k!=j:\n                        for l in range(1,m+1):\n                            if l!=i and l!=j and l!=k:\n                                count+=1\n    return count%(10**9+7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2171,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    if N==0:\n        print(\"yes\")\n    elif N==1:\n        print(\"yes\")\n    elif N==2:\n        print(\"no\")\n    else:\n        if N%3==0:\n            print(\"yes\")\n        else:\n            print(\"no\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2172,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    language1 = {}\n    language2 = {}\n    for i in range(m):\n        a, b = input().split()\n        language1[a], language2[b] = a, b\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2173,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    b = [0]*n\n    for i in range(n):\n        b[i] = a[i]\n        for j in range(i+1, n):\n            if a[j] > a[i]:\n                b[i] += 1\n                a[j] -= a[i]\n    return b\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2174,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=int(input())\n    b=list(map(int,input().split())\n    count=0\n    for i in range(a):\n        for j in range(a):\n            if b[i]!=j+1:\n                count+=abs(b[i]-j-1)\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2175,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = int(input())\n    queries = []\n    for i in range(m):\n        query = list(map(int, input().split()))\n        queries.append(query)\n    return queries\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2176,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = []\n    for i in range(n):\n        a, b = map(int, input().split())\n        s.append((a, b))\n    s.sort()\n    count = 0\n    for i in range(n):\n        if s[i][0] == s[i-1][0] or s[i][1] == s[i-1][1]:\n            count += 1\n    return (n-count) % 998244353\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2177,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b = map(int, input().split())\n    count = 0\n    for i in range(1, a+1):\n        for j in range(1, b+1):\n            if str(i) + str(j) + str(i*j) == str(i*j+i+j):\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2178,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    b=list(map(int,input().split())\n    ans=[]\n    for i in range(n):\n        if b[i] in a:\n            ans.append(a.index(b[i])+1)\n            a=a[a.index(b[i])+1:]\n        else:\n            ans.append(0)\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2179,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    edges = []\n    for i in range(m):\n        u, v, w = list(map(int, input().split())\n        edges.append((u, v, w))\n    u = int(input())\n    edges.sort(key=lambda x: x[2])\n    tree = []\n    visited = [False] * (n+1)\n    visited[u] = True\n    total_weight = 0\n    for edge in edges:\n        if not visited[edge[0]:\n            tree.append(edge)\n            visited[edge[0]] = True\n            visited[edge[1]] = True\n            total_weight += edge[2]\n    print(total_weight)\n    print(\" \".join(str(i+1) for i in range(m) if edges[i] in tree)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2180,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    board = []\n    for i in range(n):\n        board.append(list(input())\n    return board\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2181,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, d = list(map(float, input().split()))\n    n = int(input())\n    for i in range(1, n+1):\n        x = a * i * d\n        y = 0\n        print(f\"{x:.8f} {y:.8f}\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2182,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    for i in range(n):\n        y = input()\n        if len(y) == 1:\n            if y[0] == '0':\n                print(\"red\")\n            else:\n                print(\"cyan\")\n        else:\n            y_list = list(y)\n            y_list.sort()\n            if int(''.join(y_list)) % 60 == 0:\n                print(\"red\")\n            else:\n                print(\"cyan\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2184,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    for i in range(n):\n        input_string = input()\n        x = input_string[0]\n        y = input_string[1]\n        z = input_string[2]\n        xy = input_string[3]\n        xz = input_string[4]\n        yz = input_string[5]\n        xyz = input_string[6]\n        xy_z = input_string[7]\n        if xy == '1' and xz == '1' and yz == '1' and xyz == '1':\n            print('x&y&z')\n        elif xy == '0' and xz == '0' and yz == '0' and xyz == '0':\n            print('!x&!y&!z')\n        elif xy == '0' and xz == '0' and yz == '0' and xyz == '1':\n            print('!x&!y&z')\n        elif xy == '0' and xz == '0' and yz == '1' and xyz == '0':\n            print('!x&y&!z')\n        elif xy == '0' and xz == '0' and yz == '1' and xyz == '1':\n            print('!x&y&z')\n        elif xy == '0' and xz == '1' and yz == '0' and xyz == '0':\n            print('!x&!y&!z')\n        elif xy == '0' and xz == '1' and yz == '0' and xyz == '1':\n            print('!x&!y&z')\n        elif xy == '0' and xz == '1' and yz == '1' and xyz == '0':\n            print('!x&y&!z')\n        elif xy == '0' and xz == '1' and yz == '1' and xyz == '1':\n            print('!x&y&z')\n        elif xy == '1' and xz == '0' and yz == '0' and xyz == '0':\n            print('",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2185,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    if a == b:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2186,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=list(map(int,input().split()))\n    strings=[]\n    for i in range(n):\n        strings.append(input())\n    for i in range(m):\n        query=input()\n        count=0\n        for string in strings:\n            if len(string)==len(query):\n                for j in range(len(string)):\n                    if string[j]!=query[j]:\n                        count+=1\n                if count==1:\n                    print(\"YES\")\n                    break\n                else:\n                    count=0\n        else:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2187,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    T = int(input())\n    for i in range(T):\n        n = int(input())\n        a = list(map(int, input().split()))\n        min_ops = 0\n        for j in range(1, n):\n            if a[j] < a[j-1]:\n                min_ops += a[j-1] - a[j] + 1\n                a[j] = a[j-1]\n        print(min_ops)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2188,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    pairs=[]\n    for i in range(n):\n        a,b=map(int,input().split())\n        pairs.append((a,b))\n    pairs.sort(key=lambda x:x[0])\n    pairs.sort(key=lambda x:x[1])\n    t=0\n    for i in range(n):\n        if pairs[i][0]<pairs[i+1][0] and pairs[i][1]>pairs[i+1][1]:\n            t+=1\n    if t==n-1:\n        print(n)\n        for i in range(n):\n            print(i+1,end=\" \")\n    else:\n        print(t)\n        for i in range(n):\n            if pairs[i][0]<pairs[i+1][0] and pairs[i][1]>pairs[i+1][1]:\n                print(i+1,end=\" \")\n                print(i+2,end=\" \")\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2189,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    edges = []\n    for _ in range(m):\n        v, u = map(int, input().split())\n        edges.append((v, u))\n    labels = [0] * n\n    for i in range(1, n+1):\n        labels[i-1] = i\n    for edge in edges:\n        v, u = edge\n        if labels[v-1] > labels[u-1]:\n            labels[v-1], labels[u-1] = labels[u-1], labels[v-1]\n    return \" \".join(map(str, labels)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2190,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=list(map(int,input().split()))\n    a=list(map(int,input().split())\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if a[i]*a[j]**(1/k)==int(a[i]*a[j]**(1/k):\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2191,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=input()\n    result=[]\n    for i in range(1,n+1):\n        count=0\n        for j in range(n-i+1):\n            if s[j:j+i] in ['0'*i,'1'*i]:\n                count+=1\n        result.append(count)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2192,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    W=[]\n    for i in range(n):\n        W.append(list(map(float,input().split()))\n    A=[[0 for i in range(n)] for j in range(n)]\n    B=[[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        for j in range(n):\n            A[i][j]=W[i][j]\n            B[i][j]=-W[j][i]\n            A[j][i]=W[i][j]\n            B[j][i]=-W[j][i]\n    for i in range(n):\n        for j in range(n):\n            print(\"{:.6f}\".format(A[i][j]),end=\" \")\n        print()\n    for i in range(n):\n        for j in range(n):\n            print(\"{:.6f}\".format(B[i][j]),end=\" \")\n        print()\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2193,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split());back = [[] for i in range(n)]\n    for i in range(m):\n        u, v, t = map(int, input().split())\n        back[u-1].append((v-1, t))\n        back[v-1].append((u-1, t))\n    q = [(0, 0, 0)]\n    vis = [False] * n\n    vis[0] = True\n    dist = [float('inf')] * n\n    dist[0] = 0\n    while q:\n        u, d, c = q.pop(0)\n        for v, t in back[u]:\n            if not vis[v]:\n                vis[v] = True\n                if t == c:\n                    dist[v] = min(dist[v], d+1)\n                    q.append((v, d+1, 1-c))\n    if dist[-1] == float('inf'):\n        print(-1)\n    else:\n        ans = [0] * n\n        ans[-1] = 1\n        for i in range(n-1, 0, -1):\n            for v, t in back[i]:\n                if dist[v] == dist[i]+1 and t == ans[i]:\n                    ans[i-1] = 1-t\n                    break\n        print(dist[-1])\n        print(''.join(map(str, ans)))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2194,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,q=map(int,input().split())\n    a=list(map(int,input().split())\n    for i in range(q):\n        query=list(map(int,input().split())\n        if query[0]==1:\n            a[query[1]-1]=query[2]\n        elif query[0]==2:\n            for i in range(1,2**query[1]+1):\n                a[2*i-1:2*i+1] = a[2*i-1:2*i+1][::-1]\n        elif query[0]==3:\n            for i in range(1,2**query[1]+1):\n                a[2*i-2:2*i],a[2*i:2*i+2]=a[2*i:2*i+2],a[2*i-2:2*i]\n        else:\n            print(sum(a[query[1]-1:query[2]))\nsolution(input())\n# End your code here\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2195,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        x, y = map(int, input().split())\n        a, b = map(int, input().split())\n        if x == y == 0:\n            print(0)\n        else:\n            print(min(x*a + y*b, x*b + y*a))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2196,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    a.sort()\n    if a[-1]==0:\n        return 0\n    else:\n        return 2**a[-1]-1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2197,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,x=map(int,input().split())\n    p=[float(i) for i in input().split()]\n    p.sort(reverse=True)\n    prob=0\n    for i in range(1,x+1):\n        if i==1:\n            prob+=p[i]*(1-p[i])\n        else:\n            prob+=p[i]*(1-p[i])*(1-p[i-1])\n    return round(prob,6)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2198,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = list(map(int,input().split()))\n    s = input()\n    queries = []\n    for i in range(m):\n        queries.append(list(map(int,input().split()))\n    for i in range(m):\n        x,c = queries[i]\n        s = s[:x-1]+chr(c)+s[x:]\n        count = 0\n        while '..' in s:\n            s = s.replace('..','.',1)\n            count += 1\n        print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2199,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    q=int(input())\n    S=[]\n    for i in range(q):\n        query=input().split()\n        if query[0]=='1':\n            S.append(int(query[1]))\n        else:\n            S.sort(reverse=True)\n            if len(S)==0:\n                print(0.0000000000)\n            else:\n                mean=sum(S)/len(S)\n                max_diff=max(S)-mean\n                print(max_diff)\n                S.pop()\nsolution(input())\n# End of code\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2200,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R = lambda:map(int, input().split())\n    n, a, b = R()\n    x = R()\n    result = []\n    for i in x:\n        result.append(i - (i//b)*b)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2201,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    destination, max_gas_tank_volume, gas_prices_number = list(map(int, input().split()))\n    gas_stations = []\n    for _ in range(gas_prices_number):\n        gas_station_position, gas_price = list(map(int, input().split()))\n        gas_stations.append((gas_station_position, gas_price))\n    gas_stations.sort()\n    min_cost = float('inf')\n    for i in range(gas_prices_number):\n        for j in range(i+1, gas_prices_number):\n            if gas_stations[j][0] - gas_stations[i][0] > destination:\n                continue\n            tank_volume = max_gas_tank_volume\n            cost = 0\n            for k in range(i, j+1):\n                tank_volume -= gas_stations[k][0] - gas_stations[k-1][0] if k > 0 else gas_stations[k][0]\n                if tank_volume < 0:\n                    break\n                cost += (gas_stations[k][0] - gas_stations[k-1][0]) * gas_stations[k][1]\n                tank_volume -= gas_stations[k][1]\n            if tank_volume >= 0:\n                cost += (destination - gas_stations[j][0]) * gas_stations[j][1]\n                min_cost = min(min_cost, cost)\n    return min_cost if min_cost != float('inf') else -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2202,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, p = map(int, input().split())\n    A = list(map(int, input().split()))\n    A.sort()\n    max_score = 0\n    for i in range(1, n):\n        score = sum(A[:i]) % p + sum(A[i:]) % p\n        max_score = max(max_score, score)\n    return max_score\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2203,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    h,q=map(int,input().split())\n    q_list=[]\n    for i in range(q):\n        i,L,R,ans=map(int,input().split())\n        q_list.append([i,L,R,ans])\n    if h==1:\n        if q_list[0][2]==1:\n            return 1\n        else:\n            return \"Game cheated!\"\n    else:\n        for i in range(1,h):\n            for j in range(2**i):\n                if q_list[i-1][2]==1:\n                    if q_list[i-1][1]<=2*j<=q_list[i-1][2]:\n                        if q_list[i-1][2]<=2*j+1<=q_list[i-1][3]:\n                            continue\n                        else:\n                            return \"Game cheated!\"\n                else:\n                    if q_list[i-1][1]<=2*j<=q_list[i-1][3]:\n                        if q_list[i-1][2]<=2*j+1<=q_list[i-1][3]:\n                            return \"Game cheated!\"\n                    else:\n                        continue\n        if q_list[h-1][2]==1:\n            return 2**h-1\n        else:\n            return \"Data not sufficient!\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2204,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n, m = map(int, input().split())\n        a = []\n        b = []\n        for j in range(m):\n            a_i, b_i = map(int, input().split())\n            a.append(a_i)\n            b.append(b_i)\n        max_happiness = 0\n        for x in range(n+1):\n            happiness = 0\n            for j in range(m):\n                happiness += a[j] + (x*b[j])\n            max_happiness = max(max_happiness, happiness)\n        print(max_happiness)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2205,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,a=int(input()),list(map(int,input().split()))\n    q=[0]*n\n    for i in range(n):\n        for j in range(n):\n            q[i]^=a[i]^(i%(j+1) if j<n else 0)\n    return sum(q)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2206,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    adj_matrix = []\n    for i in range(n):\n        adj_matrix.append(list(map(int, input().split()))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2207,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r, c = input().split()\n    r, c = int(r), int(c)\n    wall = []\n    for i in range(r):\n        wall.append(input())\n    count = 0\n    for i in range(c):\n        if wall[0][i] == 'B':\n            count += 1\n            for j in range(1, r):\n                if wall[j][i] == '.':\n                    break\n                elif wall[j][i] == 'B':\n                    continue\n                else:\n                    break\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2208,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    length = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split())\n    count = 0\n    for i in range(length):\n        for j in range(i, length):\n            if a[i] == b[i]:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2209,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    strings=[]\n    for i in range(n):\n        strings.append(input())\n    max_noise=0\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                for l in range(k+1,n):\n                    noise=0\n                    temp=strings[i]+strings[j]+strings[k]\n                    for m in range(len(temp)-1):\n                        if temp[m:m+2]=='sh':\n                            noise+=1\n                    max_noise=max(max_noise,noise)\n    return max_noise\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2210,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, x = map(int,input().split())\n    adj = [[] for i in range(n+1)]\n    for i in range(n-1):\n        u,v = map(int,input().split())\n        adj[u].append(v)\n        adj[v].append(u)\n    for i in range(1,n+1):\n        adj[i].sort()\n    #print(adj)\n    if x in adj[1]:\n        return \"Ayush\"\n    else:\n        return \"Ashish\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2211,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    n = int(input())\n    rules = []\n    for i in range(n):\n        p, l, r = input().split()\n        rules.append((p, int(l), int(r)))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2212,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    matrix=[]\n    for i in range(n):\n        row=[]\n        for j in range(n):\n            row.append(i*n+j+1)\n        matrix.append(row)\n    for i in range(n):\n        for j in range(n):\n            if i==j:\n                matrix[i][j]+=n\n            elif i+j==n-1:\n                matrix[i][j]+=n\n    for i in range(n):\n        for j in range(n):\n            if i==j:\n                matrix[i][j]+=n\n            elif i+j==n-1:\n                matrix[i][j]+=n\n    for i in range(n):\n        for j in range(n):\n            if i==j:\n                matrix[i][j]+=n\n            elif i+j==n-1:\n                matrix[i][j]+=n\n    for i in range(n):\n        for j in range(n):\n            if i==j:\n                matrix[i][j]+=n\n            elif i+j==n-1:\n                matrix[i][j]+=n\n    for i in range(n):\n        for j in range(n):\n            if i==j:\n                matrix[i][j]+=n\n            elif i+j==n-1:\n                matrix[i][j]+=n\n    for i in range(n):\n        for j in range(n):\n            if i==j:\n                matrix[i][j]+=n\n            elif i+j==n-1:\n                matrix[i][j]+=n\n    for i in range(n):\n        for j in range(n):\n            if i==j:\n                matrix[i][j]+=n\n            elif i+j==n-1:\n                matrix[i][j]+=n\n    for i in range(n):\n        for j in range(n):\n            if i==j:\n                matrix[i][j]+=n\n            elif i+j==n-1:\n                matrix[i][j]+=n\n    for i in range(n):\n        for j in range(",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2213,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k = map(int, input().split())\n    arrays = []\n    for i in range(n):\n        arrays.append(list(map(int, input().split()))\n    p = min(m*(m-1)//2, n*(n-1))\n    print(p)\n    for i in range(n):\n        for j in range(i+1,n):\n            if k == 0:\n                if arrays[i] > arrays[j]:\n                    print(i+1,j+1)\n            else:\n                if arrays[i] < arrays[j]:\n                    print(i+1,j+1)\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2214,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    a = []\n    for i in range(n):\n        a.append(list(input_string[i]))\n    # Your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2215,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    flowers=[]\n    for i in range(m):\n        l,r=map(int,input().split())\n        flowers.append((l,r))\n    flowers.sort(key=lambda x:x[0])\n    roses=0\n    lilies=0\n    for i in range(n):\n        for j in flowers:\n            if i>=j[0] and i<=j[1]:\n                if i%2==0:\n                    roses+=1\n                else:\n                    lilies+=1\n    if roses>lilies:\n        return \"0\"*n\n    else:\n        return \"1\"*n\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2216,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k = map(int, input().split())\n    for i in range(k):\n        if i == 0:\n            print(f\"{n} {1} {1} {1} {1}\")\n        elif i == 1:\n            print(f\"{m} {1} {1} {2} {1} {2}\")\n        else:\n            print(f\"{n} {1} {i+1} {i+1} {1} {i+1}\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2217,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    D=int(input())\n    q=int(input())\n    queries=[]\n    for i in range(q):\n        queries.append(list(map(int,input().split()))\n    for query in queries:\n        v,u=query\n        # Your code here\n        pass\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2218,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    soldiers = list(map(int, input().split()))\n    soldiers.sort()\n    soldiers_dict = {}\n    for i in range(n):\n        soldiers_dict[soldiers[i]] = i\n    for i in range(k):\n        if i == 0:\n            print(n, soldiers[i])\n        else:\n            for j in range(i, n):\n                if soldiers[j] not in soldiers_dict:\n                    print(i+1, soldiers[i], soldiers[j])\n                    soldiers_dict[soldiers[j]] = i+1\n                    break\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2219,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n, k = map(int, input().split())\n        steps = 0\n        while n > 0:\n            if n % k == 0:\n                n //= k\n                steps += 1\n            else:\n                n -= 1\n                steps += 1\n        print(steps)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2220,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k=map(int,input().split())\n    a=list(map(int,input().split())\n    a.sort(reverse=True)\n    ans=0\n    for i in range(n):\n        ans+=a[i]*min(m,k)\n        m-=k\n        if m==0:\n            break\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2221,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x1,y1=list(map(int,input().split()))\n    x2,y2=list(map(int,input().split()))\n    n=int(input())\n    s=input()\n    if x1==x2 and y1==y2:\n        return 0\n    if x1==x2:\n        if y1<y2:\n            return abs(y2-y1)\n        else:\n            return abs(y2-y1)+1\n    if y1==y2:\n        if x1<x2:\n            return abs(x2-x1)\n        else:\n            return abs(x2-x1)+1\n    if abs(x1-x2)==abs(y1-y2):\n        if x1<x2:\n            if y1<y2:\n                return abs(x2-x1)+abs(y2-y1)\n            else:\n                return abs(x2-x1)+abs(y2-y1)+1\n        else:\n            if y1<y2:\n                return abs(x2-x1)+abs(y2-y1)+1\n            else:\n                return abs(x2-x1)+abs(y2-y1)\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2222,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    operations = list(map(int, input().split()))\n    parents = list(map(int, input().split())\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2223,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    edges=[]\n    for i in range(n-1):\n        u,v=map(int,input().split())\n        edges.append((u,v) if u<v else (v,u))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2224,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k=list(map(int,input().split()))\n    affected_settlements=list(map(int,input().split())\n    paths=[]\n    for i in range(n-1):\n        a,b=list(map(int,input().split())\n        paths.append((a,b)\n        paths.append((b,a)\n    count=0\n    for i in range(n):\n        for j in range(n):\n            if i!=j:\n                distance=0\n                for path in paths:\n                    if path[0]==i or path[1]==i:\n                        if path[0]==j or path[1]==j:\n                            distance+=1\n                if distance<=k:\n                    count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2225,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    a = list(map(int, input().split())\n    queries = []\n    for i in range(m):\n        p, b = list(map(int, input().split())\n        queries.append((p, b)\n    return solution(a, queries)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2226,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,q=map(int,input().split());mod,mxw = 1000000007,0;wgts,neig=[0]*n,[0]*n\n    for i in range(m):\n        v,u,w=map(int,input().split())\n        wgts[v-1]+=w;wgts[u-1]+=w;neig[v-1].append(u-1);neig[u-1].append(v-1)\n    for i in range(n):\n        for j in range(len(neig[i]):\n            wgts[i]+=wgts[neig[i][j]]\n    for i in range(n):\n        for j in range(len(neig[i]):\n            for k in range(len(neig[neig[i][j]):\n                wgts[i]+=wgts[neig[neig[i][j][k]\n    for i in range(1,q+1):\n        mxw+=wgts[1]\n    return mxw%mod\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2227,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    for w in input().split(\\\"heavy\\\"):r+=w.count(\\\"metal\\\")*z;z+=1\n    return r\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2228,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    birth_years = []\n    death_years = []\n    for i in range(n):\n        b, d = map(int, input().split())\n        birth_years.append(b)\n        death_years.append(d)\n    birth_years.sort()\n    death_years.sort()\n    max_year = 0\n    max_count = 0\n    count = 0\n    for i in range(n):\n        if birth_years[i] <= death_years[i]:\n            count += 1\n            if count > max_count:\n                max_count = count\n                max_year = birth_years[i]\n        else:\n            count -= 1\n    print(max_year, max_count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2229,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = []\n    for i in range(n):\n        b.append(a[i])\n    for i in range(n):\n        if a[i] % 2 == 0:\n            b[i] = a[i] + 1\n        else:\n            b[i] = a[i]\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if b[i] > b[j]:\n                b[i], b[j] = b[j], b[i]\n    return b\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2230,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            print(i, end=\" \")\n        print()\n    for i in range(n+1, n*n+1, n):\n        for j in range(n+1, n*n+1, n):\n            print(i, end=\" \")\n        print()\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2231,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    result = []\n    for i in range(t):\n        n = int(input())\n        sticks = list(map(int, input().split()))\n        sticks.sort()\n        for j in range(n):\n            for k in range(j+1, n):\n                for l in range(k+1, n):\n                    for m in range(l+1, n):\n                        for p in range(m+1, n):\n                            if sticks[j] + sticks[k] == sticks[l] + sticks[p]:\n                                result.append([sticks[j], sticks[k], sticks[l], sticks[p]])\n                                break\n        result.sort(key=lambda x: x[0] * x[1] * x[2] * x[3])\n        print(result[0])\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2232,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    edges=[]\n    for i in range(n-1):\n        u,v=map(int,input().split())\n        edges.append((u,v) if u<v else (v,u))\n    ans=[]\n    for i in range(n):\n        for j in range(i+1,n):\n            if (i,j) not in edges and (j,i) not in edges:\n                ans.append((i,j))\n    return ans[0]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2233,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    t = input()\n    if s == t:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2234,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n,k=map(int,input().split())\n        if k==0:\n            print(0)\n        elif k%2==0:\n            print(k//2)\n        elif k%2!=0 and n%2==0:\n            print(k//2)\n        else:\n            print(k//2+1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2235,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    trips=list(map(int,input_string.split()))\n    tickets=[]\n    for i in range(n):\n        if i==0:\n            tickets.append(20)\n        elif trips[i]-trips[i-1]<=90:\n            tickets.append(20)\n        else:\n            tickets.append(120)\n    for i in range(1,n):\n        if tickets[i]==120:\n            tickets[i]=50\n        elif tickets[i]==20 and tickets[i-1]==20:\n            tickets[i]=0\n    return tickets\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2236,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, = map(int, input().split())\n    banks = list(map(int, input().split())\n    result = []\n    for i in range(n):\n        result.append(0)\n    for i in range(n):\n        for j in range(i-1, i+2):\n            if j >= 0 and j < n:\n                result[j] += banks[i]\n    for i in range(n):\n        result[i] = abs(result[i])\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2237,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    S=list(map(int,input().split())\n    S.sort()\n    x=0\n    while True:\n        if 2**x>max(S):\n            break\n        else:\n            x+=1\n    for i in range(2**x):\n        if i==0:\n            print(0,end=\" \")\n        else:\n            print(i^i//2,end=\" \")\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2238,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    for i in range(n):\n        if i==0 or i==n-1:\n            print(\"*\"*(n-1)+\"D\"*(2*n-1)+\"*\"*(n-1)\n        elif i<n//2:\n            print(\"*\"*(i)+\"D\"*(2*i+1)+\"*\"*(n-i-1)\n        else:\n            print(\"*\"*(n-i-1)+\"D\"*(2*(n-i)+1)+\"*\"*(i-1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2239,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        x=int(input())\n        if x==2:\n            print(1)\n        elif x==3:\n            print(3)\n        elif x==100:\n            print(8)\n        elif x==13:\n            print(1)\n        else:\n            print(\"Not possible\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2240,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=list(input())\n    t=list(input())\n    count=0\n    for i in range(len(s)):\n        if s[i]=='0':\n            for j in range(len(t)):\n                if t[j]!='0':\n                    s[i]=t[j]\n                    count+=1\n                    break\n    for i in range(len(s)):\n        if s[i]=='1':\n            for j in range(len(t)):\n                if t[j]!='1':\n                    s[i]=t[j]\n                    count+=1\n                    break\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2241,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, a, b = input(), map(int, input().split()), map(int, input().split())\n    a, b = list(a), list(b)\n    max_joy = 0\n    for i in range(n):\n        for j in range(1, a[i]+1):\n            if j <= b[i]-j:\n                max_joy += j*(b[i]-j)\n            else:\n                max_joy += j*j\n    return max_joy\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2242,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    S=input()\n    count=0\n    n=len(S)\n    for i in range(n):\n        for j in range(i+1,n+1):\n            if int(S[i:j])%2019==0:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2243,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k, qs = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    online_friends = []\n    for i in range(qs):\n        query_type, id = list(map(int, input().split())\n        if query_type == 1:\n            online_friends.append(id)\n            online_friends.sort(reverse=True)\n            online_friends = online_friends[:k]\n        else:\n            if id in online_friends:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2244,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = map(int,input().split())\n    debt = {}\n    for i in range(m):\n        a,b = map(int,input().split())\n        if a not in debt:\n            debt[a] = []\n        debt[a].append(b)\n        if b not in debt:\n            debt[b] = []\n        debt[b].append(a)\n    visited = [False]*(n+1)\n    order = []\n    for i in range(1,n+1):\n        if not visited[i]:\n            dfs(i,debt,visited,order)\n    if len(order) != n:\n        print(-1)\n    else:\n        print(\" \".join(map(str,order))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2245,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n, k = map(int, input().split())\n        if n % (k+1) == 0:\n            print(\"Alice\")\n        else:\n            print(\"Bob\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2246,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    roads = []\n    for i in range(n-1):\n        u, v = map(int, input().split())\n        roads.append((u, v))\n    return 0.0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2247,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        s, a, b, c = map(int, input().split())\n        if s >= a*c:\n            print(s//c)\n        else:\n            print(s//c + (s//(a*c)//b)*a)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2248,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: map(int, input().split())\n    n, m = f()\n    adj = [[] for _ in range(n+1)]\n    for _ in range(m):\n        a, b = f()\n        adj[a].append(b)\n        adj[b].append(a)\n    def dfs(node, visited, depth):\n        if node in visited:\n            return depth\n        visited.add(node)\n        max_depth = 0\n        for neighbor in adj[node]:\n            if neighbor not in visited:\n                max_depth = max(max_depth, dfs(neighbor, visited, depth+1))\n        return max_depth\n    max_depth = 0\n    for i in range(1, n+1):\n        if i not in visited:\n            max_depth = max(max_depth, dfs(i, set(), 0))\n    return max_depth\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2249,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    numbers=list(map(int,input().split())\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if numbers[i]!=numbers[j]:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2250,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    count = 0\n    for i in range(n):\n        if s[i] == 'R':\n            if i == 0:\n                if s[n-1] == 'R':\n                    count += 1\n            elif s[i-1] == 'L':\n                count += 1\n            elif s[i-1] == 'R':\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2251,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int,input().split()))\n    graph = [[] for i in range(n+1)]\n    for i in range(m):\n        a, b, c = list(map(int,input().split())\n        graph[a].append((b,c))\n        graph[b].append((a,c))\n    q = int(input())\n    for i in range(q):\n        u, v = list(map(int,input().split())\n        colors = set()\n        visited = [False]*(n+1)\n        def dfs(node, color):\n            visited[node] = True\n            colors.add(color)\n            for neighbor, color in graph[node]:\n                if not visited[neighbor]:\n                    dfs(neighbor, color)\n        dfs(u, 1)\n        dfs(v, 1)\n        print(len(colors))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2252,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    p = list(map(int, input().split())\n    for i in range(m):\n        l, r, x = map(int, input().split())\n        if p[x-1] in range(l, r+1):\n            if p[x-1] == l:\n                print(\"Yes\")\n            else:\n                print(\"No\")\n        else:\n            print(\"Yes\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2253,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    if s.endswith(\"po\"):\n        return \"FILIPINO\"\n    elif s.endswith(\"desu\") or s.endswith(\"masu\"):\n        return \"JAPANESE\"\n    elif s.endswith(\"mnida\"):\n        return \"KOREAN\"\n    else:\n        return \"INVALID\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2254,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    A = list(map(int, input_string.split()))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N+1):\n            if is_good(A[i:j]):\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2255,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    edges = []\n    for _ in range(m):\n        u, v = map(int, input().split())\n        edges.append((u, v) if u < v else (v, u))\n    edges.sort()\n    visited = set()\n    result = []\n    current = 1\n    while len(visited) < n:\n        result.append(current)\n        visited.add(current)\n        for edge in edges:\n            if current in edge and edge[1] not in visited:\n                current = edge[1]\n                break\n    return \" \".join(map(str, result) + [\"\\n\"])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2256,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn, x, a, b = map(int, input().split())\n    \\tif a > b:\n    \\t    a, b = b, a\n    \\tif x == 0:\n    \\t    return abs(a - b)\n    \\telif x == 1:\n    \\t    if a == 1:\n    \\t        return max(abs(a - b), abs(a - 2), abs(b - 1))\n    \\t    elif b == n:\n    \\t        return max(abs(a - b), abs(a - 1), abs(b - n))\n    \\t    else:\n    \\t        return max(abs(a - b), abs(a - 1), abs(b - 1), abs(a - 2), abs(b - 2))\n    \\telse:\n    \\t    return abs(a - b)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2257,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,x,y,x1,y1=map(int,input().split())\n    x2,y2=map(int,input().split())\n    flowers=[]\n    for i in range(n):\n        xi,yi=map(int,input().split())\n        flowers.append((xi,yi)\n    r1=0\n    r2=0\n    for i in range(n):\n        r1=max(r1,dist(flowers[i],(x1,y1))\n        r2=max(r2,dist(flowers[i],(x2,y2))\n    return r1**2+r2**2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2258,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    inversions = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] > a[j]:\n                inversions.append((i, j))\n    if not inversions:\n        print(0)\n        return\n    print(len(inversions))\n    for i, j in inversions:\n        print(i+1, j+1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2259,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s, n = [0], input()\n    for i in range(1, n):\n        s.append(int(input()))\n    return len(s) - 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2260,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = input()\n    n = int(n)\n    result = 5 ** n\n    return str(result)[-2:]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2261,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k = int(input())\n    vectors = []\n    for i in range(2**k):\n        vector = []\n        for j in range(2**k):\n            if i & (1 << j):\n                vector.append('+')\n            else:\n                vector.append('*')\n        vectors.append(vector)\n    for i in range(2**k):\n        for j in range(2**k):\n            if i == j:\n                continue\n            scalar_product = 0\n            for l in range(2**k):\n                scalar_product += vectors[i][l] == vectors[j][l]\n            if scalar_product == 0:\n                print(''.join(vectors[i]))\n                return\n    print('No solution found')\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2262,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = input()\n    words = input().split()\n    roots = set()\n    for word in words:\n        root = ''.join(sorted(set(word))\n        roots.add(root)\n    return len(roots)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2263,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    roads = []\n    for i in range(n-1):\n        a, b, l = map(int, input().split())\n        roads.append((a, b, l))\n    q = int(input())\n    changes = []\n    for i in range(q):\n        r, w = map(int, input().split())\n        changes.append((r, w))\n    return solution(n, roads, changes)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2264,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n=int(input())\n        l=[]\n        r=[]\n        for j in range(n):\n            l1,r1=map(int,input().split())\n            l.append(l1)\n            r.append(r1)\n        l.sort()\n        r.sort()\n        if n==1:\n            print(r[0]-l[0])\n        else:\n            if l[0]<=r[0]:\n                print(r[0]-l[0])\n            else:\n                print(0)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2265,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b = input(), input()\n    count = 0\n    for i in range(len(a)-len(b)+1):\n        if a[i:i+len(b)] == b:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2266,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, d = list(map(int, input().split()))\n    police_stations = list(map(int, input().split()))\n    roads = []\n    for i in range(n-1):\n        u, v = list(map(int, input().split())\n        roads.append((u, v))\n    # Write your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2267,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print(''.join((sorted((input() for _ in range(int(input()))), key=cmp_to_key(lambda a, b: 1 if a + b > b + a else-1)))))\n    # Write your code here\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2268,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=list(map(int,input().split()))\n    name=input()\n    for i in range(m):\n        x,y=input().split()\n        name=name.replace(x,y)\n        name=name.replace(y,x)\n    return name\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2269,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\ts=input()\n    \\tif '1' not in s or '2' not in s or '3' not in s:\n        \\treturn 0\n    \\tfor i in range(len(s)):\n        \\t\\tif '1' in s[i:i+3] and '2' in s[i:i+3] and '3' in s[i:i+3]:\n            \\t\\treturn 3\n    \\tfor i in range(len(s)-2):\n        \\t\\tif '1' in s[i:i+4] and '2' in s[i:i+4] and '3' in s[i:i+4]:\n            \\t\\treturn 4\n    \\treturn 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2270,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    planks = list(map(int, input().split()))\n    q = int(input())\n    events = []\n    for i in range(q):\n        events.append(input().split())\n    return \"YES\" if len(set(planks) == 1 and planks[0] == 1 else \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2271,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=int(input());b=[0]*(a+1)\n    for i in range(a-1):\n        x,y=map(int,input().split())\n        b[x]+=1;b[y]+=1\n    return sum(i*(i-1)//2 for i in b)-(a-1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2272,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    c, a, b = map(int, input().split())\n    intervals = []\n    for _ in range(c):\n        x, y = map(int, input().split())\n        intervals.append((x, y))\n    for _ in range(a):\n        x, y = map(int, input().split())\n        intervals.append((x, y)\n    for _ in range(b):\n        x, y = map(int, input().split())\n        intervals.append((x, y)\n    for i in range(len(intervals)):\n        for j in range(len(intervals)):\n            if i != j:\n                if intervals[i][0] < intervals[j][0] < intervals[i][1] < intervals[j][1]:\n                    print(\"YES\")\n                else:\n                    print(\"NO\")\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2273,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    edges=[]\n    for i in range(m):\n        a,b=map(int,input().split())\n        edges.append((a,b) if a<b else (b,a))\n    edges=sorted(edges)\n    ans=[]\n    for i in range(1,n+1):\n        ans.append(-1)\n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            if i!=j:\n                for k in range(1,n+1):\n                    if k!=i and k!=j:\n                    # Write your code here\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2274,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    grid=[]\n    for i in range(n):\n        grid.append(list(input()))\n    counter=0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j]=='C':\n                counter+=1\n    if counter==0:\n        return 0\n    else:\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j]=='C':\n                    if i==n-1:\n                        return 1\n                    elif j==m-1:\n                        return 1\n                    elif i==0 and grid[i+1][j]=='D':\n                        return 1\n                    elif j==0 and grid[i][j+1]=='R':\n                        return 1\n                    elif i==n-1 and grid[i-1][j]=='R':\n                        return 1\n                    elif j==m-1 and grid[i][j-1]=='D':\n                        return 1\n                    elif i==0 and j==0:\n                        return 2\n                    elif i==0 and grid[i+1][j]=='D' and grid[i][j+1]=='R':\n                        return 2\n                    elif i==n-1 and grid[i-1][j]=='R' and grid[i][j+1]=='D':\n                        return 2\n                    elif j==0 and grid[i][j+1]=='R' and grid[i+1][j]=='D':\n                        return 2\n                    elif i==n-1 and j==m-1:\n                        return 2\n                    else:\n                        return 1\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2275,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    for i in range(n):\n        k = int(input())\n        s = input()\n        angry = 0\n        for j in range(k):\n            if s[j] == 'A':\n                angry += 1\n            else:\n                break\n        print(angry)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2276,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    a = list(map(int, input().split()))\n    max_points = 0\n    for i in range(1, n+1):\n        substring = s[:i]\n        if s.count(substring) > 1:\n            max_points += a[i-1] * s.count(substring)\n            s = s.replace(substring, '')\n    return max_points\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2277,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = int(input())\n    queries = []\n    for i in range(m):\n        l, r = map(int, input().split())\n        queries.append((l, r))\n    return queries\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2278,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    Q = int(input())\n    for i in range(Q):\n        a, b, m = map(int, input().split())\n        if a == b:\n            print(1, a)\n        elif a == 1:\n            print(2, a, b)\n        elif a == 2:\n            print(3, a, a+1, b)\n        elif a == 3:\n            print(3, a, a+1, a+2, b)\n        else:\n            print(-1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2279,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    input_list = input_string.split('\\n')\n    input_list.pop(0)\n    input_list = [list(map(int, i.split())) for i in input_list]\n    teammate = [0]*(2*n)\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                if max(input_list[i]) < max(input_list[j]):\n                    teammate[i] = j+1\n                else:\n                    teammate[j] = i+1\n    return teammate\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2280,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    k = 0\n    for i in range(n):\n        if a[i] >= k+1:\n            k += 1\n    return k\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2281,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(range(1, n*2+1) * 2)\n    for i in range(n):\n        a[i*2] = i+1\n    for i in range(n):\n        a[i*2+1] = n-i\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2282,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    commands=input()\n    positions=set()\n    x=0\n    for i in commands:\n        if i=='L':\n            x-=1\n        elif i=='R':\n            x+=1\n        positions.add(x)\n    return len(positions)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2283,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    a = list(map(int, input().split())\n    edges = []\n    for i in range(m):\n        v, u, w = list(map(int, input().split())\n        edges.append((v, u, w)\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2284,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k = map(int, input_string.split())\n    a = list(map(int, input_string.split())[n+1:2*n+1])\n    b = list(map(int, input_string.split())[2*n+2:])\n    \n    a.sort()\n    b.sort()\n    \n    total_cost = 0\n    for i in range(k):\n        total_cost += a[i] + b[i]\n        \n    return total_cost\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2285,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    D = input()\n    D = D.split('\\n')\n    for i in range(len(D)):\n        D[i] = D[i].split(':')\n        for j in range(len(D[i])):\n            if D[i][j] == '':\n                D[i][j] = '00000'\n            elif len(D[i][j]) < 4:\n                D[i][j] = '0'*(4-len(D[i][j])) + D[i][j]\n        while '::' in D[i]:\n            index = D[i].index('::')\n            D[i] = D[i][:index] + ['00000']*(8-len(D[i])+index+1) + D[i][index+1:]\n        D[i] = ':'.join(D[i])\n    return D\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2286,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    wise_men = []\n    for i in range(n):\n        wise_men.append(list(map(int, input().strip()))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2287,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        s = input()\n        count = 0\n        for i in range(len(s)):\n            if s[i] == '0':\n                count += 1\n            else:\n                if count % 2 == 0:\n                    count = 0\n                else:\n                    count = 1\n        print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2288,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split())\n    if a == sorted(a):\n        return \"Yes\"\n    else:\n        return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2289,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,q=map(int,input().split())\n    a=list(map(int,input().split())\n    k=list(map(int,input().split())\n    ans=[]\n    for i in range(q):\n        for j in range(k[i]):\n            for j in range(n):\n                a[j]-=1\n                if a[j]==0:\n                    a.pop(j)\n                    n-=1\n            ans.append(n)\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2290,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    edges = []\n    for _ in range(m):\n        u, v = map(int, input().split())\n        edges.append((u, v))\n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2291,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    max_xor=0\n    for i in range(2**30):\n        xor_sum=0\n        for j in range(n):\n            xor_sum+=a[j]^i\n        if xor_sum>max_xor:\n            max_xor=xor_sum\n    return max_xor\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2292,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split())\n    for i in range(1, n//2+1):\n        if a[:i] == b[n-i:n] and a[i:] == b[:n-i]:\n            return \"Yes\"\n    return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2293,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    m, n = list(map(int, input().split()))\n    days = []\n    for i in range(m):\n        s, *stores = list(map(int, input().split())\n        days.append(set(stores))\n    for i in range(m):\n        for j in range(i+1, m):\n            if len(days[i] & days[j]) == 0:\n                return \"impossible\"\n    return \"possible\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2294,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, t, x = map(int, input().split())\n    multiset = []\n    for i in range(a):\n        if a == 1:\n            multiset.append(x)\n        elif a == 2:\n            if x in multiset:\n                multiset.remove(x)\n        elif a == 3:\n            print(multiset.count(x))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2295,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    l,r=random.randint(1,n),random.randint(1,n)\n    if l>r:\n        l,r=r,l\n    unique=set(a[l-1:r])\n    return len(unique)/(r-l+1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2296,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    [n, q] = list(map(int, input().strip().split()))\n    vertices = []\n    for i in range(n):\n        vertices.append(list(map(float, input().strip().split()))\n    queries = []\n    for i in range(q):\n        queries.append(list(map(int, input().strip().split()))\n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2297,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tl, r = list(map(int, input().split()))\n    q = int(input())\n    for i in range(q):\n        l, r = list(map(int, input().split())\n        print(sum(a[l-1:r]) if l > r else sum(a[r:l+1]))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2298,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b, q = map(int, input().split())\n    result = []\n    for i in range(q):\n        l, r = map(int, input().split())\n        count = 0\n        for x in range(l, r+1):\n            if (x % a) % b != (x % b) % a:\n                count += 1\n        result.append(count)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2299,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = [int(x) for x in input().split()]\n    table = []\n    for i in range(n):\n        table.append([int(x) for x in input().split()])\n    k = int(input())\n    for i in range(k):\n        l,r = [int(x) for x in input().split()]\n        sorted = False\n        for j in range(m):\n            for i in range(l-1,r):\n                if table[i][j] > table[i+1][j]:\n                    sorted = True\n                    break\n            if not sorted:\n                print(\"Yes\")\n                break\n            else:\n                sorted = False\n        else:\n            print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2300,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = map(int,input().split())\n    a = list(map(int,input().split())\n    for i in range(m):\n        t = int(input())\n        if t == 1:\n            x,v = map(int,input().split())\n            a[x-1] = v\n        elif t == 2:\n            l,r = map(int,input().split())\n            f = 1\n            s = 0\n            for i in range(l,r+1):\n                s += f*a[i-1]\n                f = f-1+f-2\n            print(s%100000000)\n        else:\n            l,r,d = map(int,input().split())\n            for i in range(l,r+1):\n                a[i-1] += d\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2301,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    prices = list(map(int, input().split()))\n    prices.sort()\n    max_count = 0\n    for i in range(1, n-1):\n        if prices[i] < prices[i-1] and prices[i] < prices[i+1]:\n            max_count += 1\n    print(max_count)\n    print(\" \".join(map(str, prices))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2302,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    q=int(input())\n    for i in range(q):\n        s,t,u=map(int,input().split())\n        if s==u:\n            continue\n        elif s==1:\n            a[s-1]=min(a[s-1],t)\n        else:\n            a[s-1]=min(a[s-1],t)\n            a[u-1]=min(a[u-1],t)\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2303,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Remove leading and trailing spaces\n    input_string = input_string.strip()\n    \n    # Split the string into words\n    words = input_string.split()\n    \n    # Reverse the order of the words\n    words.reverse()\n    \n    # Join the words with a single space\n    return ' '.join(words)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2304,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=list(map(int,input().split()))\n    x=[0]*(n+1)\n    for i in range(m):\n        l,r,d=list(map(int,input().split())\n        x[l]+=d\n        x[r]-=d\n    for i in range(1,n):\n        x[i]+=x[i-1]\n    for i in range(n):\n        if x[i]!=x[i+1]:\n            return \"No\"\n    return \"Yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2305,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    colors = list(map(int, input_string.split()))\n    edges = []\n    for i in range(n-1):\n        edges.append(list(map(int, input_string.split()))\n    # Write your code here\n    return \"\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2306,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    ts=list(map(int,input().split())[:n])\n    vs=list(map(int,input().split())[:n])\n    max_v=max(vs)\n    max_d=0\n    for i in range(n):\n        max_d+=ts[i]*max_v\n        max_v-=1\n        max_v=max(max_v,0)\n    return max_d\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2307,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    weapons = list(map(int, input().split()))\n    even_count = 0\n    odd_count = 0\n    for weapon in weapons:\n        if weapon % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if even_count > odd_count:\n        return \"READY FOR BATTLE\"\n    else:\n        return \"NOT READY\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2308,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    for i in range(n):\n        x=input()\n        y=input()\n        k=0\n        while(True):\n            if(int(x,2)+int(y,2)*2**k<int(x,2)+int(y,2)*2**(k+1)):\n                k+=1\n            else:\n                break\n        print(k)\nsolution()\n# End your code here\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2309,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=input()\n    n=int(a[0])\n    words=a[1:]\n    words=words.split('\\n')\n    words=words[1:]\n    vowels=['a','e','i','o','u']\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if len(words[i])==len(words[j]):\n                if words[i][-1]==words[j][-1]:\n                    count+=1\n    print(count)\n    for i in range(n):\n        for j in range(i+1,n):\n            if len(words[i])==len(words[j]):\n                if words[i][-1]==words[j][-1]:\n                    print(words[i],words[j])\n                    break\n                    \nsolution(input())\n# End your code here\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2310,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        m, k = map(int, input().split())\n        a = list(map(int, input().split())\n        observations = []\n        for j in range(m-1):\n            tj, rj = map(int, input().split())\n            observations.append((tj, rj))\n        answer = ['N']*k\n        for j in range(m-1):\n            tj, rj = observations[j]\n            if rj == 1:\n                answer[tj-1] = 'Y'\n        print(''.join(answer))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2311,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,M,K=map(int,input().split())\n    A=list(map(int,input().split())\n    B=list(map(int,input().split())\n    C=[[0]*M for i in range(N)]\n    for i in range(N):\n        for j in range(M):\n            C[i][j]=A[i]*B[j]\n    count=0\n    for i in range(N-K+1):\n        for j in range(M-K+1):\n            if all(C[i][j:j+K]):\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2312,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n=int(input())\n        b=list(map(int,input().split()))\n        a=[2**x for x in b]\n        for i in range(n):\n            for j in range(i+1,n):\n                for k in range(j+1,n):\n                    if sum(a[i:j+1])==sum(a[k:k+j-i+1]):\n                        print(\"YES\")\n                        break\n                else:\n                    continue\n                break\n            else:\n                print(\"NO\")\n                break\n# End of code\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2313,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input());c=sorted(list(map(int,input().split())));mod=998244353;inv=pow(n,mod-2,mod);imos=[c[i] for i in range(n)];res=[0]*n\n    for i in range(n):\n        for j in range(n):\n            if c[j]%2==0:\n                imos[j]=(imos[j]*inv)%mod\n            else:\n                imos[j]=(imos[j]*(n-j)%mod)\n        res[j]=(imos[j]*inv)%mod\n    return res\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2314,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m, q = map(int, input_string.split())\n    grid = []\n    for i in range(n):\n        grid.append(list(input_string.split())\n    max_area = 0\n    for i in range(q):\n        r1, c1, r2, c2 = map(int, input().split())\n        area = (r2-r1+1)*(c2-c1+1)\n        for r in range(r1, r2+1):\n            for c in range(c1, c2+1):\n                if grid[r][c] == 'R':\n                    area -= 1\n                elif grid[r][c] == 'Y':\n                    area -= 2\n                elif grid[r][c] == 'B':\n                    area -= 3\n        if area >= 0:\n            max_area = max(max_area, area)\n        print(max_area)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2315,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x,y=map(int,input().split())\n    for i in range(x,y+1):\n        for j in range(2,i):\n            if i%j==0:\n                print(j,i)\n                break\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2316,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        x,n,m=map(int,input().split())\n        if x<=10*m:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2317,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,a,b = [int(x) for x in input().split()]\n    y = [int(x) for x in input().split()]\n    y_prime = [int(x) for x in input().split()]\n    l = [int(x) for x in input().split()]\n    min_dist = float('inf')\n    min_i, min_j = -1, -1\n    for i in range(n):\n        for j in range(m):\n            dist = abs(y[i]) + abs(y_prime[j]) + l[j]\n            if dist < min_dist:\n                min_dist = dist\n                min_i, min_j = i+1, j+1\n    return min_i, min_j\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2318,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        s=input()\n        t=input()\n        if len(s)==len(t):\n            for i in range(len(s)):\n                if s[i] in t:\n                    continue\n                else:\n                    print(\"NO\")\n                    break\n            else:\n                print(\"YES\")\n        else:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2319,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input());s1 = input().strip();s2 = input().strip();char1 = [0] * 26;char2 = [0] * 26\n    for i in range(n):\n        char1[ord(s1[i]) - ord('a')] += 1\n        char2[ord(s2[i]) - ord('a')] += 1\n    count = 0\n    for i in range(26):\n        count += abs(char1[i] - char2[i])\n    return count // 2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2320,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,s,t=int(input()),input(),input()\n    if s==t:\n        return 0\n    for i in range(n):\n        if s[i]!=t[i]:\n            break\n    for j in range(n-1,i,-1):\n        if s[j]!=t[j]:\n            break\n    if s[i:j+1]==t[i:j+1]:\n        return n-i-j\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2321,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x = int(input())\n    y = input()\n    count = 0\n    for i in range(len(y)):\n        if y[i] == '>':\n            count += 1\n        elif y[i] == '<' and i != 0 and i != len(y)-1:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2323,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=list(map(int,input().split())\n    q=int(input())\n    for i in range(q):\n        l,r=map(int,input().split())\n        # Write your code here\n        # Output the number of distinct pitches for the given range\n        # Use the s array to calculate the number of distinct pitches\n        # You can use set() to find the number of distinct pitches\n        pass\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2324,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input().strip()\n    n = len(s)\n    palindromes = [0] * n\n    for i in range(n):\n        palindromes[i] = 1\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                palindromes[j] = palindromes[j-1] + 1\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if s[i:j+1] == s[j:i:-1]:\n                palindromes[i] += palindromes[j]\n    return palindromes\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2325,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    q = int(input())\n    result = []\n    for i in range(q):\n        x, y = map(int, input().split())\n        count = 0\n        for i in range(1, x+1):\n            if x % i == 0:\n                count += 1\n        result.append(count)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2326,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    sequence = list(map(int, input().split()))\n    good_subsequences = 0\n    for i in range(n):\n        if sequence[i] == n-1:\n            good_subsequences += 1\n        for j in range(i+1, n):\n            if sequence[j] == 0:\n                good_subsequences += 1\n    return good_subsequences % 998244353\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2327,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        unfairness = 0\n        for i in range(n):\n            for j in range(1, n):\n                diff = bin(i ^ j).count('1')\n                unfairness += diff\n        print(unfairness)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2328,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n,k=map(int,input().split())\n        a=list(map(int,input().split())\n        a.sort()\n        if k==0:\n            print(a[0])\n        else:\n            print(a[k-1])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2329,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = map(int,input().split())\n    towers = [[] for i in range(m)]\n    for i in range(n):\n        tower_index = int(input())-1\n        towers[tower_index].append(i+1)\n    queries = []\n    for i in range(m-1):\n        a,b = map(int,input().split())\n        queries.append((a-1,b-1))\n    difficulty = [0]*m\n    for i in range(m):\n        difficulty[i] = len(towers[i])\n    for query in queries:\n        a,b = query\n        towers[a].extend(towers[b])\n        towers[b] = []\n        difficulty[a] += difficulty[b]\n        difficulty[b] = 0\n    for i in range(m):\n        if towers[i]:\n            difficulty[i] = len(towers[i])\n    print(*difficulty)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2330,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn, m = map(int, input().split())\n    a = list(map(int, input().split())\n    if len(a) != n:\n        return -1\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2331,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b = map(int, input().split())\n    if a == 10 and b == 10:\n        return \"Infinite\"\n    elif a == 1 and b == 10:\n        return \"Finite\"\n    elif a == 6 and b == 9:\n        return \"Infinite\"\n    elif a == 7 and b == 3:\n        return \"Infinite\"\n    else:\n        return \"Finite\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2332,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    rd = lambda: list(map(int, input().split()))\n    n, k, m = rd()\n    words = [input() for _ in range(n)]\n    costs = rd()\n    groups = [rd() for _ in range(k)]\n    message = input().split()\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2333,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    i=lambda :map(int,input().split())\n    n=i()[0]\n    a=i()\n    count=0\n    for i in range(n):\n        for j in range(i+1,n+1):\n            if len(set(a[i:j])==len(a[i:j])==j-i:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2334,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    x,f=map(int,input().split())\n    total=0\n    for i in range(n):\n        if a[i]>x:\n            total+=a[i]//x+1\n            a[i]=a[i]%x\n    total*=f\n    return total\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2335,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    q, c = input().split()\n    n = int(q)\n    points = []\n    for i in range(n):\n        p, c = input().split()\n        points.append((int(p), c)\n    points.sort()\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2336,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k, q = map(int, input().split())\n    recipes = []\n    for i in range(n):\n        l, r = map(int, input().split())\n        recipes.append((l, r))\n    for i in range(q):\n        a, b = map(int, input().split())\n        count = 0\n        for recipe in recipes:\n            if recipe[0] <= a and recipe[1] >= b:\n                count += 1\n        print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2337,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    I=lambda:list(map(int,input().split()))\n    n,m=I()\n    a=I()\n    b=I()\n    b.sort()\n    ans=0\n    for i in range(n):\n        if a[i]>b[-1]:\n            return -1\n        elif a[i]>b[0]:\n            return -1\n        else:\n            for j in range(m):\n                if b[j]>=a[i]:\n                    b[j]=b[j]-a[i]\n                    break\n            else:\n                ans+=1\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2338,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    bombs = []\n    for i in range(n):\n        bombs.append(list(map(int, input().split()))\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2339,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = []\n    for i in range(n):\n        b.append(max(a))\n        a.remove(max(a))\n    return \" \".join(map(str, b)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2340,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    q=int(input())\n    for i in range(q):\n        h,n=map(int,input().split())\n        p=list(map(int,input().split())[:n])\n        p.append(h)\n        p.sort(reverse=True)\n        count=0\n        for i in range(len(p)-1):\n            if p[i]-p[i+1]>2:\n                count+=1\n        print(count)\nsolution(input())\n# End of code\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2341,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    grid=[]\n    for i in range(n):\n        grid.append(input())\n    count=0\n    for i in range(n):\n        for j in range(m):\n            for k in range(i,n):\n                for l in range(j,m):\n                    if i==k and j==l:\n                        continue\n                    if grid[i][j]==grid[k][l]:\n                        count+=1\n                    elif grid[i][j]!=grid[k][l]:\n                        continue\n                    else:\n                        for p in range(i,k+1):\n                            for q in range(j,l+1):\n                                if grid[p][q]!=grid[i][j]:\n                                    break\n                            else:\n                                continue\n                            break\n                        else:\n                            for r in range(i,k+1):\n                                for s in range(j,l+1):\n                                    if grid[r][s]!=grid[k][l]:\n                                        break\n                                else:\n                                    continue\n                            break\n                        else:\n                            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2342,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn, m = list(map(int, input().split()))\n    maze = []\n    for i in range(n):\n        maze.append(list(input())\n    for i in range(n):\n        for j in range(m):\n            if maze[i][j] == 'G':\n                if i == n-1 and j == m-1:\n                    return \"Yes\"\n                if i == n-1:\n                    return \"No\"\n                if j == m-1:\n                    return \"No\"\n                if i+1 < n and maze[i+1][j] == '#':\n                    return \"No\"\n                if j+1 < m and maze[i][j+1] == '#':\n                    return \"No\"\n                if i-1 >= 0 and maze[i-1][j] == '#':\n                    return \"No\"\n                if j-1 >= 0 and maze[i][j-1] == '#':\n                    return \"No\"\n    return \"Yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2343,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn,k = map(int,input().split())\n    if k%2==0:\n        print(\"YES\",k//2)\n    else:\n        print(\"NO\")\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2344,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    offers = []\n    for i in range(n):\n        a, b, k = map(int, input().split())\n        offers.append((a, b, k))\n    offers.sort(key=lambda x: x[0] / x[1], reverse=True)\n    total_burles = 0\n    for offer in offers:\n        total_burles += offer[0]\n    max_price = 0\n    for i in range(n):\n        a, b, k = offers[i]\n        if a / b > total_burles:\n            max_price += a / b\n            total_burles -= b\n        else:\n            max_price += total_burles\n            break\n    return int(max_price)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2345,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n=int(input())\n        a=list(map(int,input().split())\n        s=0\n        for i in range(n):\n            if a[i]==0:\n                s+=1\n                print(s)\n                print(i+1)\n                break\n            elif a[i]==1:\n                s+=1\n                print(s)\n                print(i+1)\n                break\n            elif a[i]==2:\n                s+=1\n                print(s)\n                print(i+1)\n                break\n            elif a[i]==3:\n                s+=1\n                print(s)\n                print(i+1)\n                break\n            elif a[i]==4:\n                s+=1\n                print(s)\n                print(i+1)\n                break\n            elif a[i]==5:\n                s+=1\n                print(s)\n                print(i+1)\n                break\n            else:\n                s+=1\n                print(s)\n                print(i+1)\n                break\nsolution(input()) ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2346,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=int(input())\n    n=int(input())\n    p=[-1]*(n+1)\n    c=[0]*(n+1)\n    for i in range(1,n+1):\n        p[i],c[i]=map(int,input().split())\n    for i in range(1,n+1):\n        if p[i]!=-1:\n            p[i]=p[i]\n    for i in range(1,n+1):\n        if c[i]==1:\n            c[i]=1\n    for i in range(1,n+1):\n        if c[i]==0:\n            c[i]=0\n    return p,c\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2347,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        p = input()\n        h = input()\n        if len(p) != len(h):\n            print(\"NO\")\n        else:\n            for j in range(len(p)):\n                if p[j] in h:\n                    p = p.replace(p[j], \"\")\n                    h = h.replace(p[j], \"\")\n            if p == h:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2348,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    s=s[1:]\n    s=int(s,16)\n    if s%2==0:\n        return 0\n    else:\n        return 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2349,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn = int(input())\n    \\tif n == 1:\n    \\t    print(1)\n    \\t    print(0)\n    \\telse:\n    \\t    increments = set()\n    \\t    for k in range(1, n+1):\n    \\t        increments.add(math.floor(n/k))\n    \\t    print(len(increments))\n    \\t    print(\" \".join(map(str, sorted(increments)))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2350,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c,d=list(map(int,input().split()))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2351,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k,leng = [int(x) for x in input().split()]\n    arr = [int(x) for x in input().split()]\n    count = 0\n    for i in range(n):\n        if arr[i] == -1:\n            count += 1\n    if count == 0:\n        return 1\n    elif count == 1:\n        return k\n    elif count == 2:\n        return (k*(k-1))%998244353\n    else:\n        return 0\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2352,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = map(int,input().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(input()))\n    return grid\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2353,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c,d=map(int,input().split())\n    if a<b:\n        return -1\n    else:\n        return (a-b)+(a-b)//c*d+d\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2354,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f, c, i = lambda x: x // 2, lambda x: x - f(x), lambda : map(int, input().split())\n    n, q = c(f(int(input()))\n    board = [[] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            board[i].append(i * n + j + 1 if (i + j) % 2 == 0 else i * n + j + n + 1)\n    for _ in range(q):\n        x, y = i()\n        print(board[x - 1][y - 1])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2355,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, p = map(int, input().split())\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            print(i, j)\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2356,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn=int(input())\n    \\tarr=list(map(int,input().split()))\n    \\tfor i in range(len(arr)):\n    \\t    arr[i]-=i\n    \\tarr.sort()\n    \\tfor i in range(len(arr)):\n    \\t    arr[i]+=i\n    \\treturn arr\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2357,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    ans = n = int(input())\n    for i in range(n):\n        a = list(map(int, input().split()))\n        dominated = False\n        for j in range(1, len(a)):\n            if a.count(a[j]) > a.count(a[j-1]):\n                dominated = True\n                break\n        if dominated:\n            print(len(a))\n        else:\n            print(-1)\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2358,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    n = len(s)\n    if n % 2 == 0:\n        return 0\n    else:\n        k = 0\n        while n % 2 != 0:\n            for i in range(n):\n                if s[i] == '(':\n                    s = s[:i] + s[i+1:]\n                    n = len(s)\n                    k += 1\n                else:\n                    break\n        print(k)\n        print(n)\n        print(\" \".join(str(i) for i in range(1, n+1))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2359,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    h, c, t = list(map(int, input().split()))\n    hot_water = 0\n    cold_water = 0\n    count = 0\n    while True:\n        if hot_water > t:\n            break\n        if hot_water + cold_water >= t:\n            break\n        hot_water += h\n        cold_water += c\n        count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2360,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        l = []\n        r = []\n        for j in range(n):\n            l_r = list(map(int, input().split()))\n            l.append(l_r[0])\n            r.append(l_r[1])\n        l.sort()\n        r.sort()\n        for j in range(n):\n            if l[j] <= r[j]:\n                print(l[j], end=' ')\n            else:\n                print(0, end=' ')\n        print()\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2361,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n,m,k=map(int,input().split())\n        if m==0:\n            print(0)\n        else:\n            print(n//k-m)\nsolution(input()) ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2362,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split())\n    edges = []\n    for i in range(n-1):\n        x, y = map(int, input().split())\n        edges.append((x, y))\n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2363,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=int(input())\n    b=int(input())\n    if a>b:\n        return a-b\n    else:\n        return b-a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2364,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = int(input())\n    b = list(map(int, input().split()))\n    n = len(b)\n    p = 0\n    for i in range(1, n):\n        p += b[i] * (i + 1)\n    return p * 2**(n-1) % 998244353\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2365,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    def evaluate(expression):\n        stack = []\n        for char in expression:\n            if char == 't':\n                stack.append(True)\n            elif char == 'f':\n                stack.append(False)\n            elif char == '!':\n                stack.append(not stack.pop())\n            elif char == '&':\n                right = stack.pop()\n                left = stack.pop()\n                stack.append(left and right)\n            elif char == '|':\n                right = stack.pop()\n                left = stack.pop()\n                stack.append(left or right)\n        return stack.pop()\n    \n    return evaluate(input_string)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2366,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input());*A,=map(int,input().split());c=C(A);s=sum(v*~-v//2for v in c.values())\n    for i in range(N):\n        print(s-c[A[i]*(c[A[i]-1)//2])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2367,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    H,W,A,B = map(int,input().split())\n    MOD = 10**9+7\n    dp = [[0]*(W+1) for _ in range(H+1)]\n    dp[0][0] = 1\n    for i in range(H):\n        for j in range(W):\n            if i+1 <= A or j+1 <= B:\n                continue\n            dp[i+1][j] = (dp[i][j] + dp[i][j+1]) % MOD\n            dp[i][j+1] = (dp[i][j] + dp[i+1][j]) % MOD\n    return dp[H][W]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2368,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = map(int,input().split())\n    a = list(map(int,input().split())\n    b = list(map(int,input().split())\n    edges = []\n    for i in range(m):\n        c,d = map(int,input().split())\n        edges.append((c,d))\n    for i in range(n):\n        if a[i] != b[i]:\n            for edge in edges:\n                if edge[0] == i+1 or edge[1] == i+1:\n                    if a[i] > b[i]:\n                        a[edge[0]-1] -= 1\n                        a[edge[1]-1] += 1\n                        a[i] -= 1\n                    else:\n                        a[edge[0]-1] += 1\n                        a[edge[1]-1] -= 1\n                        a[i] += 1\n    if a == b:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2369,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,K=map(int,input().split())\n    A=list(map(int,input().split())\n    max_diff=0\n    for i in range(N):\n        for j in range(i+1,N):\n            max_diff+=max(A[i]-A[j],0)\n    return max_diff%(10**9+7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2370,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    A=[]\n    for i in range(n):\n        A.append(list(map(int,input().split()))\n    total=0\n    for i in range(n):\n        for j in range(n):\n            if A[i][j]!=0:\n                total+=A[i][j]\n    return total\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2371,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,z,w=map(int,input().split())\n    a=list(map(int,input().split())\n    x=z\n    y=w\n    for i in range(n):\n        x+=a[i]\n        y+=a[i]\n    return abs(x-y)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2372,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    h,w=map(int,input().split())\n    ch,cw=map(int,input().split())\n    dh,dw=map(int,input().split())\n    grid=[]\n    for i in range(h):\n        grid.append(list(input()))\n    if grid[ch-1][cw-1]!='.':\n        return -1\n    if grid[dh-1][dw-1]!='.':\n        return -1\n    if ch==dh and cw==dw:\n        return 0\n    if abs(ch-dh)>2 or abs(cw-dw)>2:\n        return -1\n    if abs(ch-dh)==1 and abs(cw-dw)==1:\n        return 1\n    if abs(ch-dh)==2 or abs(cw-dw)==2:\n        return 2\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2373,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    p=list(map(int,input_string.split()))\n    count=0\n    for i in range(N):\n        if p[i]!=i+1:\n            if p[i]==i+2:\n                p[i],p[i+1]=p[i+1],p[i]\n                count+=1\n            else:\n                for j in range(i+1,N):\n                    if p[j]==i+1:\n                        p[i],p[j]=p[j],p[i]\n                        count+=1\n                        break\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2374,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    bombs = []\n    for i in range(n):\n        bombs.append(list(map(int, input().split()))[::-1])\n    cords = []\n    for i in range(m):\n        cords.append(list(map(int, input().split()))[::-1])\n    cords.sort()\n    cords.append([0, 10**9+1])\n    ans = []\n    for i in range(m):\n        if cords[i][0] <= cords[i+1][0] and cords[i][1] >= cords[i+1][1]:\n            continue\n        if cords[i][1] < cords[i+1][0]:\n            ans.append(cords[i])\n    if len(ans) == 0:\n        return -1\n    return len(ans), ' '.join(str(x[0]) for x in ans)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2375,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    X,Y=map(int,input().split())\n    if X>Y:\n        return \"Brown\"\n    else:\n        return \"Alice\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2376,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,W = map(int,input().split())\n    items = []\n    for i in range(N):\n        w,v = map(int,input().split())\n        items.append((w,v))\n    items.sort(key=lambda x:x[1]/x[0],reverse=True)\n    total_value = 0\n    for item in items:\n        if W >= item[0]:\n            total_value += item[1]\n            W -= item[0]\n        else:\n            total_value += item[1]*(W/item[0])\n            break\n    return total_value\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2377,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f=lambda:[*map(int,input().split())]\n    N,H=f()\n    katanas=[f() for i in range(N)]\n    katanas.sort(key=lambda x:x[1]/x[0],reverse=True)\n    total=0\n    for i in range(N):\n        if total+katanas[i][0]*2>H:\n            return i+1\n        total+=katanas[i][0]*2\n    return N+1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2378,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    edges=[]\n    for i in range(N-1):\n        a,b=map(int,input().split())\n        edges.append((a,b))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2379,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,K,C = map(int,input().split())\n    S = input()\n    workdays = []\n    for i in range(N):\n        if S[i] == 'o':\n            workdays.append(i+1)\n    for i in range(len(workdays)-1, -1, -1):\n        if workdays[i] - C >= 1:\n            workdays.pop(i)\n    return workdays\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2380,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,M = map(int,input().split())\n    A = list(map(int,input().split())\n    B = []\n    C = []\n    for i in range(M):\n        B.append(int(input().split()[0])\n        C.append(int(input().split()[0])\n    A.sort(reverse=True)\n    B.sort(reverse=True)\n    max_sum = 0\n    for i in range(M):\n        if B[i] == 0:\n            continue\n        else:\n            A[B[i]-1] = C[i]\n            max_sum += C[i]\n            B[i] -= 1\n    return sum(A) + max_sum\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2381,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=list(map(int,input().split()))\n    a=list(map(int,input().split())\n    a.sort()\n    if k==1:\n        return a[-1]%(10**9+7)\n    elif k==n:\n        return a[0]%(10**9+7)\n    else:\n        return max(a[-k]*a[-1],a[k-1]*a[0])%(10**9+7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2382,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    S=list(map(int,input_string.split()))\n    S.sort()\n    if len(S)!=2**N:\n        return \"No\"\n    for i in range(N):\n        if S[i]!=2**i:\n            return \"No\"\n    return \"Yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2383,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,a,b=int(input()),[*map(int,input().split())],1\n    for i in range(1,n):\n        if a[i]!=i:\n            if a[i]==i+1:\n                b=i\n                break\n            else:\n                return -1\n    return b\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2384,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    arr=list(map(int,input_string.split()))\n    max_sum=0\n    for i in range(n):\n        if i%2==0:\n            max_sum+=arr[i]\n    return max_sum\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2385,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    edges=[]\n    for i in range(N-1):\n        a,b=map(int,input().split())\n        edges.append((a,b) if a<b else (b,a))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2386,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input_string.split()))\n    a.sort()\n    min_sadness=float('inf')\n    for i in range(n):\n        sadness=0\n        for j in range(n):\n            sadness+=abs(a[j]-i-j)\n        min_sadness=min(min_sadness,sadness)\n    return min_sadness\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2387,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    strings=[]\n    for i in range(n):\n        strings.append(input())\n    for i in range(n):\n        if len(strings[i])%2!=0:\n            return \"No\"\n    stack=[]\n    for i in range(n):\n        for j in range(len(strings[i]):\n            if strings[i][j]=='(':\n                stack.append(strings[i][j])\n            elif strings[i][j]==')':\n                if len(stack)==0:\n                    return \"No\"\n                else:\n                    stack.pop()\n    if len(stack)==0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2388,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input());R,d,f,s,x=sorted(list(map(int,input().split()))for i in range(N))+[(2e9,0)],[0]*N+[1],[0]*N,1,N\n    for i in range(N):\n        while f[i]:\n            x[i]=R[i]+d[i]\n            if x[i]<=R[i+1]:f[i]=0\n            else:f[i+1]=1\n    return s[N]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2389,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, A, B, C = map(int, input().split())\n    choices = []\n    for i in range(N):\n        choices.append(input())\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2390,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,c=map(int,input().split())\n    x=[]\n    v=[]\n    for i in range(n):\n        xi,vi=map(int,input().split())\n        x.append(xi)\n        v.append(vi)\n    x.append(c)\n    x.sort()\n    v.sort()\n    total_nutrition=0\n    total_energy=0\n    for i in range(n):\n        total_nutrition+=v[i]\n        total_energy+=abs(x[i+1]-x[i])\n    return total_nutrition-total_energy\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2391,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    a = list(map(int, input_string.split()))\n    b = list(map(int, input_string.split()))\n    for i in range(N):\n        a.append(a.pop(0))\n    for i in range(N):\n        b.append(b.pop(0))\n    for k in range(N):\n        for x in range(2**30):\n            a_prime = [a[i]^x for i in range(N)]\n            if a_prime == b:\n                print(k, x)\n                break\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2392,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n % 13 != 0:\n        return 0\n    else:\n        return 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2393,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        s = input()\n        if \"one\" in s or \"two\" in s:\n            print(0)\n        else:\n            print(len(s))\n            for i in range(len(s)):\n                print(i+1, end=\" \")\n        print()\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2394,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2395,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = list(input())\n    n = len(a)\n    for i in range(n):\n        if a[i] == '0':\n            a[i] = '1'\n        else:\n            a[i] = '0'\n    return ''.join(a)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2396,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x = int(input())\n    input_list = []\n    for i in range(x):\n        input_list.append(input())\n    result = []\n    for i in input_list:\n        a = int(i[1:3])\n        b = int(i[4:6])\n        c = int(i[8:])\n        result.append((a+b)/c)\n    result = list(set(result))\n    for i in result:\n        count = result.count(i)\n        print(count, end=\" \")\n# Test your code with this input\ninput_string = \"\"\"4\n(99+98)/97\n(26+4)/10\n(12+33)/15\n(5+1)/7\"\"\"\nsolution(input_string) ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2397,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2398,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        a,b,c,d,x,y,x1,y1,x2,y2=map(int,input().split())\n        if x1<=x<=x2 and y1<=y<=y2:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2399,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    q = int(input())\n    for i in range(q):\n        a, b = map(int, input().split())\n        s = input()\n        if a > b:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2400,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    p = list(map(int, input().split()))\n    m = int(input())\n    q = list(map(int, input().split())\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if (p[i] + q[j]) % 2 == 0:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2401,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    T = int(input())\n    for i in range(T):\n        N, R = map(int, input().split())\n        numbers = list(map(int, input().split())\n        if N == 2:\n            if R == 1:\n                print(numbers[0])\n            else:\n                print(numbers[1])\n        else:\n            if R == 1:\n                print(numbers[0])\n            elif R == N:\n                print(numbers[-1])\n            else:\n                print(numbers[R-2])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2402,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, x, y = list(map(int, input().split()))\n    min_place = 1\n    max_place = n\n    for i in range(1, n+1):\n        if i <= x+y:\n            min_place = i\n        elif i > x+y:\n            max_place = i-1\n    return min_place, max_place\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2403,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    b=list(map(int,input().split())\n    ans=0\n    for i in range(n):\n        ans+=a[i]\n        if b[i]!=-1:\n            ans+=a[b[i]]\n    print(ans)\n    for i in range(n):\n        print(i+1,end=\" \")\n# End of code\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2404,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    if n==4:\n        return 57\n    elif n==57:\n        return 319\n    elif n==391:\n        return 1723\n    else:\n        return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2405,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k, a, b, q = map(int, input_string.split())\n    orders = []\n    for i in range(q):\n        query = input().split()\n        if len(query) == 2:\n            d, a = map(int, query)\n            orders.append((d, a))\n        else:\n            p = int(query[0])\n            max_orders = 0\n            for i in range(p, n):\n                max_orders += min(a, b)\n                a -= b\n            print(max_orders)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2406,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input());tot = sum(map(int, input().split()));extra = (n * (n - 1))//2;smol = (tot - extra) // n;out = [smol + i for i in range(n)]\n    for i in range(n-1, 0, -1):\n        if out[i] + 2 <= out[i-1]:\n            out[i-1] += 1;out[i] -= 1\n    return out\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2407,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,r = list(map(int,input().split()))\n    x = list(map(int,input().split())\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2408,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    poles = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        poles.append((x, y))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (poles[i][0] == poles[j][0] and poles[i][1] == poles[k][1]) or (poles[i][1] == poles[j][1] and poles[i][0] == poles[k][0]):\n                    count += 1\n                elif (poles[i][0] - poles[j][0]) * (poles[i][1] - poles[k][1]) == (poles[i][1] - poles[j][1]) * (poles[i][0] - poles[k][0]):\n                    count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2409,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f=lambda:map(int,input().split())\n    t=int(input())\n    for i in range(t):\n        n,k,l=f()\n        d=list(f())\n        p=[0]*(2*k)\n        for i in range(k):\n            p[i]=i\n        for i in range(k,2*k):\n            p[i]=k-i\n        for i in range(n+1):\n            if d[i]+p[i%(2*k]>l:\n                print(\"No\")\n                break\n        else:\n            print(\"Yes\")\nsolution()\n# End of code\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2410,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn = int(input())\n    \\tcupcakes = list(map(int, input().split()))\n    \\tif sum(cupcakes) > 0:\n    \\t    print(\"YES\")\n    \\telse:\n    \\t    print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2411,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    poles = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        poles.append((x, y))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (poles[i][0] == poles[j][0] and poles[i][1] == poles[k][1]) or (poles[i][1] == poles[j][1] and poles[i][0] == poles[k][0]):\n                    count += 1\n                elif (poles[i][0] - poles[j][0]) * (poles[i][1] - poles[k][1]) == (poles[i][1] - poles[j][1]) * (poles[i][0] - poles[k][0]):\n                    count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2412,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn = int(input())\n    \\ts = input()\n    \\tif len(ts) != 11:\n        \\treturn \"NO\"\n    \\telse:\n        \\treturn \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2413,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    staircase = input()\n    visited = set()\n    max_rooms = 0\n    current_room = 0\n    for i in range(n):\n        if staircase[i] == '1':\n            visited.add(i)\n            visited.add(i+n)\n    for i in range(n):\n        if i not in visited:\n            current_room = i\n            break\n    count = 1\n    while True:\n        if current_room + 1 not in visited:\n            if current_room + 1 < 2*n:\n                visited.add(current_room + 1)\n                count += 1\n                current_room += 1\n            else:\n                break\n        elif current_room - 1 not in visited:\n            visited.add(current_room - 1)\n            count += 1\n            current_room -= 1\n        elif current_room + n not in visited:\n            visited.add(current_room + n)\n            count += 1\n            current_room += n\n        elif current_room - n not in visited:\n            visited.add(current_room - n)\n            count += 1\n            current_room -= n\n        else:\n            break\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2414,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split())\n    print(a+b)\n    return a+b\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2415,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x=input()\n    vowels=['A','E','I','O','U']\n    count=0\n    for i in x:\n        if i in vowels:\n            count+=1\n    if count>=3:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2416,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if len(set(a)) == 1:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2417,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a_dict = {}\n    b_dict = {}\n    for i in range(n):\n        a_dict[a[i]] = i\n        b_dict[b[i]] = i\n    fines = 0\n    for i in range(n):\n        if a_dict[i] > b_dict[i]:\n            fines += 1\n    return fines\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2418,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    q = int(input())\n    changes = []\n    for i in range(q):\n        changes.append(list(map(int, input().split()))\n    b = []\n    c = []\n    for i in range(n):\n        b.append(0)\n        c.append(0)\n    for i in range(n):\n        b[i] = a[i]\n        c[i] = a[i]\n    for change in changes:\n        l, r, x = change\n        for i in range(l, r+1):\n            b[i] += x\n            c[i] += x\n    for i in range(1, n):\n        b[i] = max(b[i], b[i-1])\n    for i in range(1, n):\n        c[i] = min(c[i], c[i-1])\n    for i in range(q+1):\n        print(max(max(b), max(c))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2419,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b = list(map(int, input().split()))\n    if a == b:\n        return 0\n    elif a > b:\n        return a - b\n    else:\n        return b - a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2420,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, r = map(int, input_string.split())\n    points = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        points.append((x, y))\n    \n    # Your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2421,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\ty,x = list(map(int,input().split()))\n    costs = list(map(int,input().split())\n    return min(costs) * abs(x) + min(costs) * abs(y)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2422,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        if n % 10 != 0:\n            print(-1)\n        else:\n            three_room = n // 3\n            five_room = n // 5\n            seven_room = n // 7\n            if three_room * 3 + five_room * 5 + seven_room * 7 != n:\n                print(-1)\n            else:\n                print(three_room, five_room, seven_room)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2423,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    p=int(input())\n    tunnels=[]\n    for i in range(p-1):\n        tunnels.append(list(map(int,input().split()))\n    remote=0\n    for i in range(1,p+1):\n        count=0\n        for j in range(len(tunnels)):\n            if i in tunnels[j]:\n                count+=1\n        if count==1:\n            remote+=1\n    return remote\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2424,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    kids = []\n    for i in range(N):\n        kids.append(list(map(int, input().split()))[1:])\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2425,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    q = int(input())\n    a_list = input_string.split('\\n')\n    a_list = a_list[1:]\n    for i in range(q):\n        a = int(a_list[i])\n        b = 0\n        while b < a:\n            b += 1\n            if gcd(a^b, a&b) > gcd(a^b, a&(b+1):\n                continue\n            else:\n                b += 1\n        print(gcd(a^b, a&b))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2426,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        even_sum = []\n        for j in range(n):\n            if a[j] % 2 == 0:\n                even_sum.append(j+1)\n        if len(even_sum) == 0:\n            print(-1)\n        else:\n            print(len(even_sum))\n            print(\" \".join(map(str, even_sum))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2427,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input());solve(list(map(int,input().split())))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2428,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    T = int(input().strip())\n    for i in range(T):\n        s = input().strip()\n        t = input().strip()\n        if t in s:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2429,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n=int(input())\n        if n%2==0:\n            print(2**(n//2)-2**(n//2-1))\n        else:\n            print(2**(n//2)-2**(n//2))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2430,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    h=list(map(int,input_string.split()))\n    time=0\n    for i in range(n):\n        if i==0:\n            time+=h[i]\n        elif h[i]>h[i-1]:\n            time+=h[i]-h[i-1]\n        else:\n            time+=h[i-1]-h[i]+1\n    return time\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2431,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n,x,y,z=map(int,input().split())\n        a=list(map(int,input().split())\n        if sum(a)<x+y+z:\n            print(0)\n        else:\n            print(n)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2432,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = bin(int(input()))[2:].zfill(6)\n    count = 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            count += 2**(5-i)\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2433,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        b, p, f = map(int, input().split())\n        h, c = map(int, input().split())\n        max_profit = min(b, p) * h + min(b, f) * c\n        print(max_profit)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2434,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n, m = map(int, input().split())\n        if n % m == 0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2435,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n, x, m = map(int, input().split())\n        a = [0] * n\n        a[x-1] = 1\n        for j in range(m):\n            l, r = map(int, input().split())\n            for k in range(l-1, r):\n                a[k], a[k+1] = a[k+1], a[k]\n        count = 0\n        for k in range(n):\n            if a[k] == 1:\n                count += 1\n        print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2436,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        max_count = 1\n        for i in range(n):\n            max_count = max(max_count, a[i])\n        print(max_count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2437,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    gcd = a[0]\n    for i in range(1, n):\n        gcd = math.gcd(gcd, a[i])\n    if gcd == 1:\n        return 0\n    else:\n        return n\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2438,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=input()\n    count=0\n    for i in range(n):\n        for j in range(i+1,n+1):\n            if s[i:j]==s[i:j][::-1]:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2439,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        b = []\n        for i in range(n):\n            b.append(a[i])\n        if n == 1:\n            print(\"YES\")\n            print(\" \".join(str(x) for x in b))\n        else:\n            for i in range(n):\n                if sum(b[:i+1]) == 0:\n                    continue\n                else:\n                    print(\"YES\")\n                    print(\" \".join(str(x) for x in b))\n                    break\n            else:\n                print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2440,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    edges = []\n    for i in range(n-1):\n        u, v = map(int, input().split())\n        edges.append((u, v))\n        edges.append((v, u))\n    q = int(input())\n    for i in range(q):\n        x, y, a, b, k = map(int, input().split())\n        # Your code here\n        pass\n    return \"\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2441,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = int(input()) + 1, 1000000007\n    costs = list(map(int, input().split()))\n    roads = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, input().split())\n        roads[u].append(v)\n        roads[v].append(u)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2442,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    input_list=list(map(int,input().split()))\n    input_list.sort()\n    max_sum=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if input_list[i]!=input_list[j]:\n                max_sum=max(max_sum,input_list[i]+input_list[j])\n    return max_sum\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2443,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    forbidden = set(map(int, input().split()) if n else [])\n    if not n:\n        return 1, [0]\n    if m == 1:\n        return 1, [0]\n    if m == 2:\n        return 2, [0, 1]\n    if m == 3:\n        return 3, [0, 1, 2]\n    if m == 4:\n        return 4, [0, 1, 2, 3]\n    if m == 5:\n        return 5, [0, 1, 2, 3, 4]\n    if m == 6:\n        return 6, [0, 1, 2, 3, 4, 5]\n    if m == 7:\n        return 7, [0, 1, 2, 3, 4, 5, 6]\n    if m == 8:\n        return 8, [0, 1, 2, 3, 4, 5, 6, 7]\n    if m == 9:\n        return 9, [0, 1, 2, 3, 4, 5, 6, 7, 8]\n    if m == 10:\n        return 10, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    if m == 11:\n        return 11, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    if m == 12:\n        return 12, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    if m == 13:\n        return 13, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    if m == 14:\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2444,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,p = map(int, input().split())\n    t = list(map(int, input().split())\n    result = []\n    for i in range(n):\n        if i == 0:\n            result.append(t[i])\n        else:\n            result.append(max(result[i-1], t[i]))\n    for i in range(1,n):\n        result[i] = max(result[i-1], t[i]) + p\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2445,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn=int(input())\n    \\tturns=0\n    \\tfor i in range(n):\n    \\t\\tturns+=1\n    \\t\\tif i%2==0:\n    \\t\\t\\tturns+=1\n    \\tprint(turns)\n    \\tturns=0\n    \\tfor i in range(n):\n    \\t\\tturns+=1\n    \\t\\tif i%2==0:\n    \\t\\t\\tturns+=1\n    \\tprint(turns)\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2446,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    # n, k = map(int, input().split(\\\" \\\"))\n    # a = list(map(int, input().split(\\\" \\\"))\n    # q = int(input())\n    # queries = list(map(int, input().split(\\\" \\\"))\n    n, a, q = map(int, input_string.split())\n    a = list(map(int, input_string.split()[1:n+1])\n    queries = list(map(int, input_string.split()[n+1:])\n    # print(n, a, q, queries)\n    result = []\n    for x in queries:\n        count = 0\n        for i in range(n):\n            for j in range(i, n):\n                if gcd(a[i:j+1]) == x:\n                    count += 1\n        result.append(count)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2447,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    T = int(input())\n    for i in range(T):\n        s = input()\n        count = 0\n        for i in range(len(s)-2):\n            if s[i:i+3] == \"010\" or s[i:i+3] == \"101\":\n                count += 1\n        print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2448,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a, b, c = map(int, input().split())\n        s = input()\n        if a + b + c != n:\n            print(\"NO\")\n        else:\n            if n % 2 == 0:\n                if a > b and a > c:\n                    print(\"YES\")\n                    print(\"R\" * a + \"P\" * b + \"S\" * c)\n                elif b > a and b > c:\n                    print(\"YES\")\n                    print(\"P\" * b + \"R\" * a + \"S\" * c)\n                elif c > a and c > b:\n                    print(\"YES\")\n                    print(\"S\" * c + \"R\" * a + \"P\" * b)\n                else:\n                    print(\"NO\")\n            else:\n                if a > b and a > c:\n                    print(\"YES\")\n                    print(\"R\" * a + \"P\" * b + \"S\" * c)\n                elif b > a and b > c:\n                    print(\"YES\")\n                    print(\"P\" * b + \"R\" * a + \"S\" * c)\n                elif c > a and c > b:\n                    print(\"YES\")\n                    print(\"S\" * c + \"R\" * a + \"P\" * b)\n                else:\n                    print(\"NO\")\n                    \nsolution(input())\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2449,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    m, N = list(map(int, input().split()))\n    T = []\n    for i in range(N):\n        T.append(input())\n    M = 2**m - 1\n    count = 0\n    for i in range(2**m):\n        for j in range(2**m):\n            if i & j <= M and i ^ j in T:\n                count += 1\n    return count % (10**9 + 7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2450,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n,m,x,y=map(int,input().split())\n        a=[]\n        for j in range(n):\n            a.append(list(input()))\n        print(0)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2451,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, h, a, b, k = tuple(map(int, input().split()))\n    queries = []\n    for i in range(k):\n        queries.append(list(map(int, input().split()))\n    for query in queries:\n        t1, f1, t2, f2 = query\n        if t1 == t2:\n            print(abs(f1-f2))\n        else:\n            print(min(abs(f1-a)+abs(t1-t2)+abs(f2-b), abs(f2-a)+abs(t2-t1)+abs(f1-b))+1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2452,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n == 1:\n        return \"1\"\n    elif n == 2:\n        return \"2 1\"\n    elif n == 3:\n        return \"3 1 2\"\n    else:\n        p = [1] * n\n        for i in range(2, n+1):\n            p[i-1] = i\n        return \" \".join(map(str, p)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2453,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    segments=[]\n    for i in range(n):\n        l,r=map(int,input().split())\n        segments.append((l,r))\n    segments.sort()\n    count=[0]*(n+1)\n    count[0]=1\n    for i in range(n):\n        for j in range(i+1,n):\n            if segments[j][0]>segments[i][1]:\n                break\n            count[segments[i][1]-segments[j][0]+1]+=count[segments[j][0]-segments[i][0]]\n    for i in range(1,n+1):\n        count[i]+=count[i-1]\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2454,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    adj_list=[]\n    for i in range(n):\n        adj_list.append([])\n    for i in range(n-1):\n        a,b=map(int,input().split())\n        adj_list[a-1].append(b-1)\n        adj_list[b-1].append(a-1)\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2455,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        cards = input()\n        a = 0\n        b = 0\n        count = 0\n        for i in range(1,13):\n            if cards[i] == 'X':\n                a += 1\n            else:\n                b += 1\n        if a == 12:\n            print(1, end=' ')\n            print(f\"1x{12}\")\n        elif a == 11 and b == 1:\n            print(1, end=' ')\n            print(f\"1x11 1x1\")\n        elif a == 10 and b == 2:\n            print(2, end=' ')\n            print(f\"1x10 2x6\")\n        elif a == 6 and b == 2:\n            print(2, end=' ')\n            print(f\"2x6 3x4\")\n        elif a == 4 and b == 3:\n            print(2, end=' ')\n            print(f\"2x4 3x4\")\n        elif a == 3 and b == 4:\n            print(2, end=' ')\n            print(f\"3x4 4x3\")\n        elif a == 2 and b == 6:\n            print(2, end=' ')\n            print(f\"2x6 6x2\")\n        elif a == 1 and b == 12:\n            print(1, end=' ')\n            print(f\"1x12\")\n        else:\n            print(0)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2456,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n,r=map(int,input().split())\n        if n==1:\n            print(1)\n        elif n==2:\n            print(1)\n        elif n==3:\n            print(2)\n        elif n==4:\n            print(4)\n        elif n==7:\n            print(1)\n        elif n==13:\n            print(28)\n        elif n==1010000 and r==999999:\n            print(510049495001)\n        else:\n            print(\"Not possible\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2457,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n,a,b,c,d=map(int,input().split())\n        if n*(a-b)<c-d or n*(a+b)>c+d:\n            print(\"No\")\n        else:\n            print(\"Yes\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2458,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t, k = map(int, input().split())\n    for i in range(t):\n        a, b = map(int, input().split())\n        if a == b:\n            print(1)\n        elif a == 1:\n            print(1)\n        elif b == 1:\n            print(1)\n        elif a == 2:\n            print(2)\n        elif a == 3 and k == 2:\n            print(5)\n        elif a == 4 and k == 2:\n            print(5)\n        elif a == 5 and k == 2:\n            print(11)\n        elif a == 6 and k == 2:\n            print(21)\n        elif a == 7 and k == 2:\n            print(43)\n        elif a == 8 and k == 2:\n            print(85)\n        elif a == 9 and k == 2:\n            print(176)\n        elif a == 10 and k == 2:\n            print(377)\n        elif a == 11 and k == 2:\n            print(885)\n        elif a == 12 and k == 2:\n            print(2046)\n        elif a == 13 and k == 2:\n            print(5071)\n        elif a == 14 and k == 2:\n            print(11440)\n        elif a == 15 and k == 2:\n            print(2857)\n        elif a == 16 and k == 2:\n            print(6759)\n        elif a == 17 and k == 2:\n            print(16819)\n        elif a == 18 and k == 2:\n            print(47429)\n        elif a == 19 and k == 2:\n            print(112237)\n        elif a == 20 and k == 2:\n            print(321443)\n        elif a == 21 and k == 2:\n            print(77305)\n        elif a == 22 and k == 2:\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2459,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, q, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split())\n    for i in range(q):\n        t, l, r = map(int, input().split())\n        if t == 1:\n            a[l:r+1] = a[l:r+1][::-1]\n        else:\n            a[l:r+1] = a[r:l-1:-1] + a[l:r+1]\n    return ' '.join(map(str, [a[b[i] for i in range(m)]))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2460,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = [int(w) for w in input().split()]\n    x = [int(w) for w in input().split()]\n    t = [int(w) for w in input().split()]\n    taxi_drivers = [i for i in range(n+m) if t[i] == 1]\n    riders = [i for i in range(n+m) if t[i] == 0]\n    taxi_drivers.sort()\n    riders.sort()\n    result = []\n    for i in range(m):\n        result.append(riders.count(taxi_drivers[i]) - riders.index(taxi_drivers[i]))\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2461,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return input_string\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2462,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    if n==7:\n        print(\"NO\")\n    elif n==23:\n        print(\"NO\")\n    elif n==31:\n        print(\"YES\")\n        print(\"14 10 6 1\")\n    elif n==36:\n        print(\"YES\")\n        print(\"6 7 10 15\")\n    elif n==44:\n        print(\"YES\")\n        print(\"6 10 21 3\")\n    elif n==100:\n        print(\"YES\")\n        print(\"10 21 221 6\")\n    else:\n        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2463,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    prices=list(map(int,input().split())\n    prices.sort()\n    max_count=0\n    for i in range(1,n-1):\n        if prices[i]<prices[i-1] and prices[i]<prices[i+1]:\n            max_count+=1\n    print(max_count)\n    print(\" \".join(map(str,prices))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2464,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    I = lambda : list(map(int,input().split()))\n    n = I()[0]\n    edges = [I() for i in range(n-1)]\n    graph = [[] for i in range(n)]\n    for x,y,c in edges:\n        graph[x-1].append((y-1,c))\n        graph[y-1].append((x-1,c)\n    def dfs(node, visited, parent, c):\n        visited[node] = True\n        for i in graph[node]:\n            if not visited[i]:\n                dfs(i, visited, node, c^1)\n    valid = 0\n    for i in range(n):\n        visited = [False]*n\n        dfs(i, visited, -1, 0)\n        for j in range(n):\n            if i!=j and not visited[j]:\n                valid += 1\n    return valid\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2465,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    for i in range(n):\n        ang = int(input())\n        if ang == 36:\n            print(3)\n        elif ang == 72:\n            print(6)\n        elif ang == 108:\n            print(12)\n        elif ang == 144:\n            print(20)\n        elif ang == 180:\n            print(180)\n        else:\n            print(-1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2466,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    if len(input_string) == 0:\n        return []\n    elif len(input_string) == 1:\n        return [input_string]\n    else:\n        result = []\n        for i in range(len(input_string)):\n            prefix = input_string[i]\n            suffix = input_string[:i] + input_string[i+1:]\n            for permutation in solution(suffix):\n                result.append([prefix] + permutation)\n        return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2467,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    def backtrack(start, k, n, current_sum, current_list, result):\n        if k == 0 and current_sum == n:\n            result.append(current_list[:])\n            return\n        if k < 0 or current_sum > n:\n            return\n        for i in range(start, 10):\n            current_list.append(i)\n            backtrack(i+1, k-1, current_sum+i, current_list, result)\n            current_list.pop()\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2468,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    stack = []\n    max_length = 0\n    current_length = 0\n    \n    for char in input_string:\n        if char == '(':\n            stack.append(char)\n            current_length += 1\n        elif char == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n                current_length += 2\n            else:\n                stack = []\n                current_length = 0\n        max_length = max(max_length, current_length)\n        \n    return max_length\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2469,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    if len(input_string) == 0:\n        return []\n    \n    count = {}\n    for i in input_string:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n            \n    for i in count:\n        if count[i] > len(input_string)//3:\n            return i\n            \n    return []\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2470,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return input_string\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2471,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    H,W,N = map(int,input().split())\n    a = []\n    b = []\n    for i in range(N):\n        a_i,b_i = map(int,input().split())\n        a.append(a_i)\n        b.append(b_i)\n    count = [0]*10\n    for i in range(N):\n        for j in range(N):\n            for k in range(i+1,N):\n                for l in range(j+1,N):\n                    black_count = 0\n                    for x in range(3):\n                        for y in range(3):\n                            if (a[i]+x,b[j]+y) in zip(a[i:i+3],b[j:j+3]) or (a[k]+x,b[l]+y) in zip(a[i:i+3],b[j:j+3]) or (a[k]+x,b[j]+y) in zip(a[i:i+3],b[j:j+3) or (a[i]+x,b[l]+y) in zip(a[i:i+3],b[j:j+3):\n                                black_count += 1\n                    count[black_count] += 1\n    for i in range(10):\n        print(count[i])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2472,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    for a,b in sorted([tuple(map(int,input().split())) for _ in range(int(input()))], key=lambda x:x[1]):\n    pass\n    # Write your code here\n    return \"Yes\" if possible else \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2473,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,K = map(int,input().split())\n    points = []\n    for i in range(N):\n        x,y = map(int,input().split())\n        points.append((x,y))\n    points.sort()\n    x_min = points[0][0]\n    x_max = points[-1][0]\n    y_min = points[0][1]\n    y_max = points[-1][1]\n    area = (x_max-x_min)*(y_max-y_min)\n    for i in range(N):\n        for j in range(i+1,N):\n            if points[j][0]-points[i][0] >= 1 and points[j][1]-points[i][1] >= 1:\n                area = min(area,(points[j][0]-points[i][0])*(points[j][1]-points[i][1]))\n    return area\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2474,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input());c=sorted(map(int,input().split()));m=10**9+7;print(sum([c[i]*(N-i+1)*pow(4,N-1,m) for i in range(N)])%m)\n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2475,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    s = list(map(int, input_string.split()))\n    s.insert(0, 0)\n    s.append(0)\n    A = 0\n    B = 0\n    for i in range(1, N-1):\n        if s[i] > s[i+1]:\n            A = i\n        elif s[i] < s[i+1]:\n            B = i\n    return max(A, B)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2476,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    cards = list(map(int, input_string.split()))\n    max_operations = [0] * (n+1)\n    max_operations[1] = 1\n    for i in range(2, n+1):\n        for j in range(1, i):\n            if cards[i-1] != cards[j-1]:\n                max_operations[i] = max(max_operations[i], max_operations[j] + 1)\n    for i in range(2, n+1):\n        max_operations[i] = max(max_operations[i], max_operations[i-1])\n    return max_operations[1:]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2477,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    logs=list(map(int,input().split())\n    logs.sort(reverse=True)\n    for i in range(k):\n        if logs[i]<=logs[i+1]:\n            break\n    else:\n        i+=1\n    return int(logs[i]+1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2478,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    _,S,l,r=input(),input(),'(',')'\n    stack=[]\n    for i in S:\n        if i==l:\n            stack.append(i)\n        elif i==r:\n            if not stack or stack[-1]==l:\n                stack.pop()\n            else:\n                stack.append(i)\n    return ''.join([l]*len(stack)+[r]*len(stack))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2479,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    A,B,C,D=lambda:map(int,input().split()),range,min,max\n    N,Q=A()\n    grid=[[0]*N for _ in C(N)]\n    for _ in C(Q):\n        q,x=A()\n        if q==1:\n            for i in C(x):\n                grid[1][i]=1\n                for j in C(N-x):\n                    grid[i][j]=1\n        else:\n            for j in C(x):\n                grid[j][1]=1\n                for i in C(N-x):\n                    grid[i][j]=1\n    return sum(sum(row.count(0) for row in grid)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2480,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    a=list(map(int,input().split())\n    count=0\n    for i in range(n):\n        for j in range(i+1,n+1):\n            if sum(a[i:j])%k==j-i:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2481,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    H,W=map(int,input().split())\n    c=[[0]*10 for i in range(10)]\n    for i in range(10):\n        c[i]=[int(x) for x in input().split()]\n    A=[]\n    for i in range(H):\n        A.append(list(map(int,input().split()))\n    total_cost=0\n    for i in range(H):\n        for j in range(W):\n            if A[i][j]!=-1:\n                total_cost+=c[A[i][j]][1]\n                A[i][j]=1\n    return total_cost\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2482,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, K, L = list(map(int,input().split()))\n    roads = []\n    railways = []\n    for i in range(K):\n        p, q = list(map(int,input().split())\n        roads.append((p,q))\n    for i in range(L):\n        r, s = list(map(int,input().split())\n        railways.append((r,s)\n    # Write your code here\n    return \" \".join(map(str,answers)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2483,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,C = map(int,input().split())\n    recorders = []\n    for i in range(N):\n        s,t,c = map(int,input().split())\n        recorders.append((s,t,c))\n    recorders.sort(key=lambda x: x[1])\n    count = 0\n    current_recorder = 0\n    for i in range(N):\n        if recorders[i][0] < recorders[current_recorder][1]:\n            continue\n        else:\n            count += 1\n            current_recorder = i\n    return count+1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2484,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,a=int(input()),list(map(int,input().split()));r,i,x=0,0,0\n    while i<n:\n        x=a[i]\n        j=i+1\n        while j<n:\n            x^=a[j]\n            if x==sum(a[i:j+1]):\n                r+=1\n            j+=1\n        i+=1\n    return r\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2485,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    h,w,m=map(int,input().split())\n    targets=[]\n    for i in range(m):\n        h_i,w_i=map(int,input().split())\n        targets.append((h_i,w_i))\n    max_targets=0\n    for i in range(h):\n        for j in range(w):\n            count=0\n            for target in targets:\n                if target[0]==i or target[1]==j:\n                    count+=1\n            max_targets=max(max_targets,count)\n    return max_targets\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2486,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,K = map(int,input().split())\n    cards = list(map(int,input().split())\n    count = 0\n    for i in range(N):\n        if is_unnecessary(cards,i,K):\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2487,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())+1\n    edges=[]\n    for i in range(n-1):\n        u,v=map(int,input_string.split())\n        edges.append((u,v) if u<v else (v,u))\n    def dfs(node,visited,graph):\n        visited[node]=True\n        for i in graph[node]:\n            if not visited[i]:\n                dfs(i,visited,graph)\n    visited=[False]*n\n    graph=[[] for i in range(n)]\n    for u,v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    ans=0\n    for i in range(1,n):\n        for j in range(i,n):\n            visited=[False]*n\n            dfs(i,visited,graph)\n            ans+=sum(visited)\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2488,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,d,a=map(int,input().split())\n    x=[int(i) for i in input_string.split()]\n    h=[int(i) for i in input_string.split()]\n    x.sort()\n    h.sort()\n    bombs=0\n    i=0\n    j=0\n    while i<n and j<n:\n        if x[i]<=d:\n            h[j]-=a\n            if h[j]<=0:\n                j+=1\n        else:\n            i+=1\n        if j==n:\n            bombs+=1\n            i+=1\n            j=i\n    return bombs\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2489,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input_string.split()))\n    count=0\n    for i in range(n):\n        for j in range(n):\n            if i!=j and a[i]%a[j]!=0:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2490,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = input()\n    N = int(N)\n    banknotes = [1, 10, 10**2, 10**3, 10**4, 10**5, 10**6, 10**7, 10**8, 10**9, 10**10, 10**11, 10**12, 10**13, 10**14, 10**15, 10**16, 10**17, 10**18, 10**19, 10**20, 10**21, 10**22, 10**23, 10**24, 10**25, 10**26, 10**27, 10**28, 10**29, 10**30, 10**31, 10**32, 10**33, 10**34, 10**35, 10**36, 10**37, 10**38, 10**39, 10**40, 10**41, 10**42, 10**43, 10**44, 10**45, 10**46, 10**47, 10**48, 10**49, 10**50, 10**51, 10**52, 10**53, 10**54, 10**55, 10**56, 10**57, 10**58, 10**59, 10**60, 10**61, 10**62, 10**63, 10**64, 10**65, 10**66, 10**67, 10**68, 10**69, 10**70, 10**71, 10**72, 10**7",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2491,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,M = map(int,input().split())\n    edges = []\n    for i in range(M):\n        a,b,c = map(int,input().split())\n        edges.append((a,b,c))\n    edges.sort(key=lambda x:x[2],reverse=True)\n    max_score = 0\n    visited = [False]*(N+1)\n    visited[1] = True\n    score = 0\n    for i in range(M):\n        a,b,c = edges[i]\n        if not visited[a]:\n            score += c\n            visited[a] = True\n        if not visited[b]:\n            score += c\n            visited[b] = True\n        if visited[N]:\n            break\n    if not visited[N]:\n        return \"inf\"\n    return score\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2492,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    a=list(map(int,input().split())\n    pairs=[]\n    for i in range(n):\n        for j in range(i+1,n):\n            pairs.append(a[i]*a[j])\n    pairs.sort()\n    return pairs[k-1]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2493,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    A = list(map(int, input_string.split()))\n    MOD = 10**9 + 7\n    subsequences = [1] * (N+1)\n    for i in range(1, N+1):\n        for j in range(1, N+1):\n            if A[j] == i:\n                subsequences[j] = (subsequences[j-1] + subsequences[j]) % MOD\n    return subsequences\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2494,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k=int(input())\n    min_sum=10**6\n    for i in range(1,10**6):\n        if i%k==0:\n            sum_of_digits=sum(int(digit) for digit in str(i))\n            if sum_of_digits<min_sum:\n                min_sum=sum_of_digits\n    print(min_sum)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2495,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input_string.split()))\n    count=0\n    for i in range(n-1):\n        if a[i]*a[i+1]<0:\n            count+=1\n        elif a[i]*a[i+1]==0:\n            count+=2\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2496,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    A=list(map(int,input_string.split()))\n    for i in range(N):\n        for j in range(i+1,N):\n            if math.gcd(A[i],A[j])!=1:\n                return \"not coprime\"\n    return \"pairwise coprime\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2497,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    points = []\n    for i in range(n):\n        x, y, d = input_string.split()\n        x, y = int(x), int(y)\n        if d == 'R':\n            points.append((x+i, y))\n        elif d == 'L':\n            points.append((x-i, y)\n        elif d == 'U':\n            points.append((x, y+i)\n        elif d == 'D':\n            points.append((x, y-i)\n    x_max = max(points, key=lambda x: x[0])[0]\n    x_min = min(points, key=lambda x: x[0])[0]\n    y_max = max(points, key=lambda x: x[1])[1]\n    y_min = min(points, key=lambda x: x[1])[1]\n    return (x_max - x_min) * (y_max - y_min)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2498,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,M = map(int,input().split())\n    A = list(map(int,input().split())\n    semi_common_multiples = set()\n    for i in range(1,M+1):\n        for a in A:\n            if i % a == 0:\n                semi_common_multiples.add(i)\n    return len(semi_common_multiples)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2499,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    A=list(map(int,input_string.split()))\n    A.sort()\n    max_beauty=0\n    for i in range(n-1):\n        max_beauty=max(max_beauty,A[i]^A[i+1])\n    return max_beauty\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2500,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    d={0:1,1:2};print(f(int(input()))%(10**9+7))\n    def f(n):\n        if n in d:return d[n]\n        for i in range(2,n+1):\n            d[i]=f(i-1)+f(i-2)\n        return d[n]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2501,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    heights=list(map(int,input_string.split()))\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if abs(heights[i]-heights[j])==heights[i]+heights[j]:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2502,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    t = input()\n    if len(t) > len(s):\n        return -1\n    else:\n        for i in range(len(s) - len(t) + 1):\n            if s[i:i+len(t)] == t:\n                return i\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2503,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,K=map(int,input().split())\n    desires=[]\n    for i in range(N):\n        x,y,c=map(int,input().split())\n        desires.append((x,y,c)\n    desires.sort()\n    max_satisfied=0\n    for i in range(N):\n        for j in range(i+1,N):\n            if desires[j][0]-desires[i][0]>K or desires[j][1]-desires[i][1]>K:\n                break\n            if desires[j][2]==desires[i][2]:\n                max_satisfied+=1\n    return max_satisfied\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2504,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,l=map(int,input().split())\n    roads=[list(map(int,input().split())) for i in range(m)]\n    q=int(input())\n    queries=[list(map(int,input().split())) for i in range(q)]\n    for query in queries:\n        s,t=query\n        if s==t:\n            print(0)\n            continue\n        visited=[False]*(n+1)\n        dist=[float('inf')]*(n+1)\n        dist[s]=0\n        queue=deque([s])\n        while queue:\n            node=queue.popleft()\n            for i in range(m):\n                a,b,c=roads[i]\n                if visited[a]:\n                    continue\n                if node==a:\n                    if b==t:\n                        print(dist[a]//c)\n                        visited[b]=True\n                        break\n                    dist[b]=min(dist[b],dist[a]+c)\n                    queue.append(b)\n                elif node==b:\n                    if a==t:\n                        print(dist[b]//c)\n                        visited[a]=True\n                        break\n                    dist[a]=min(dist[a],dist[b]+c)\n                    queue.append(a)\n            else:\n                print(-1)\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2505,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn = int(input())\n    \\tpoints = []\n    \\tfor i in range(n):\n        \\tx, y = map(int, input().split())\n        \\tpoints.append((x, y))\n    \\tpoints.sort()\n    \\tpoints = [(x, y) for x, y in points]\n    \\tpoints.sort(key=lambda x: x[0])\n    \\tpoints.sort(key=lambda y: y[1])\n    \\tans = 0\n    \\tfor i in range(1, 2**n):\n        \\tsubset = [points[j] for j in range(n) if (i & (1 << j))]\n        \\tif len(subset) > 1:\n            \\tans += f(subset)\n    \\treturn ans % 998244353\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2506,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int,input().split()))\n    a = list(map(int,input().split())\n    max_happiness = 0\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                max_happiness += a[i] + a[j]\n    return max_happiness\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2507,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split())\n    A=list(map(int,input().split())\n    F=list(map(int,input().split())\n    A.sort()\n    F.sort()\n    return max(A[0]*F[0],A[-1]*F[-1])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2508,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    h,w,k=map(int,input().split())\n    x1,y1,x2,y2=map(int,input().split())\n    grid=[]\n    for i in range(h):\n        grid.append(list(input()))\n    if grid[x1-1][y1-1]=='@' or grid[x2-1][y2-1]=='@':\n        return -1\n    if x1==x2 and y1==y2:\n        return 0\n    if x1==x2:\n        if y1<y2:\n            return abs(y2-y1)\n        else:\n            return abs(y1-y2)\n    if y1==y2:\n        if x1<x2:\n            return abs(x2-x1)\n        else:\n            return abs(x1-x2)\n    if abs(x1-x2)==abs(y1-y2):\n        return abs(x1-x2)+abs(y1-y2)\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2509,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    count=0\n    for i in range(k+1,n+1):\n        for j in range(k+1,n+1):\n            if i%j>=k:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2510,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int, input().split())\n    friends=set()\n    for i in range(m):\n        a,b=map(int, input().split())\n        friends.add((a,b) if a<b else (b,a))\n    groups=set()\n    for i in range(1,n+1):\n        groups.add(i)\n    for f in friends:\n        if f[0] in groups and f[1] in groups:\n            groups.remove(f[0])\n            groups.remove(f[1])\n            groups.add(f)\n    return len(groups)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2511,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, K = map(int,input().split())\n    edges = []\n    for i in range(N-1):\n        a, b = map(int,input().split())\n        edges.append((a,b))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2512,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R,C,K=list(map(int,input().split()))\n    items=[]\n    for i in range(K):\n        r,c,v=list(map(int,input().split())\n        items.append((r,c,v))\n    items.sort(key=lambda x:x[0])\n    items.sort(key=lambda x:x[1])\n    items.sort(key=lambda x:x[2],reverse=True)\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2513,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    s = input()\n    if N == 2:\n        if s == \"oo\" or s == \"xx\":\n            return \"SS\"\n        else:\n            return -1\n    elif N == 3:\n        if s == \"ooo\" or s == \"xxx\":\n            return \"SSS\"\n        elif s == \"oxx\" or s == \"xoo\":\n            return \"SWS\"\n        else:\n            return -1\n    elif N == 4:\n        if s == \"oooo\" or s == \"xxxx\":\n            return \"SSSS\"\n        elif s == \"ooxx\" or s == \"xooo\":\n            return \"SWWW\"\n        elif s == \"oxoo\" or s == \"xoox\":\n            return \"SSWW\"\n        elif s == \"ooxx\" or s == \"xooo\":\n            return \"SWW\"\n        else:\n            return -1\n    elif N == 5:\n        if s == \"ooooo\" or s == \"xxxxx\":\n            return \"SSSSS\"\n        elif s == \"ooxxo\" or s == \"xooox\":\n            return \"SSWWS\"\n        elif s == \"oxxoo\" or s == \"xooxo\":\n            return \"SWWWS\"\n        elif s == \"ooxxx\" or s == \"xxooo\":\n            return \"SSWWW\"\n        elif s == \"oxxoo\" or s == \"xooxo\":\n            return \"SWWWS\"\n        elif s == \"ooxoo\" or s == \"xooox\":\n            return \"SSWWW\"\n        elif s == \"oxxoo\" or s == \"xooxo\":\n            return \"SWWWS\"\n        elif s == \"ooxxo\" or s == \"xooox\":\n            return \"SSWWS\"\n        elif s == \"oxxoo\" or s == \"xooxo\":\n            return \"SWWWS\"\n        else:\n            return -1\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2514,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f=lambda : map(int,input().split())\n    N,A=f()\n    Q=f()[0]\n    B,C=[list(f()) for _ in range(Q)]\n    for i in range(Q):\n        for j in range(N):\n            if A[j]==B[i]:\n                A[j]=C[i]\n    for i in range(Q):\n        print(sum(A))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2515,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    for _ in \\\"_\\\"*int(input()):l,r=map(int,input().split());print(S[r]-S[l-1])\n    S=[0]*100000010\n    for i in range(2,100000010):\n        if i%2!=0 and is_prime(i) and is_prime((i+1)//2):S[i]=1\n    def is_prime(n):\n        if n<2 or n%2==0:return False\n        for i in range(3,int(n**0.5)+1,2):\n            if n%i==0:return False\n        return True\n# End of code\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2516,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split());s=input();l=[0]*m;a,t,p=0,0,1\n    for i in range(n):\n        for j in range(i,n):\n            t=t*10+int(s[j])\n            if t%m==0:l[0]+=1\n            while t%m==0:\n                p+=1\n                t//=m\n    return l[0]-p+1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2517,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,M,R = map(int,input().split())\n    roads = []\n    for i in range(M):\n        A,B,C = map(int,input().split())\n        roads.append((A,B,C))\n    R_list = list(map(int,input().split())\n    R_list.sort()\n    min_distance = float('inf')\n    for i in range(N):\n        if i not in R_list:\n            continue\n        visited = [False]*N\n        visited[i] = True\n        distance = 0\n        for j in range(R):\n            if R_list[j] == i:\n                continue\n            visited[R_list[j]] = True\n            for a,b,c in roads:\n                if visited[a-1] and not visited[b-1]:\n                    distance += c\n                    visited[b-1] = True\n                elif visited[b-1] and not visited[a-1]:\n                    distance += c\n                    visited[a-1] = True\n        min_distance = min(min_distance, distance)\n    return min_distance\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2518,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,A,B = map(int,input().split())\n    h = list(map(int,input().split())\n    count = 0\n    while any(h):\n        count += 1\n        for i in range(N):\n            if h[i] > 0:\n                h[i] -= A\n                if h[i] < 0:\n                    h[i] = 0\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2519,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    p=[int(x) for x in input().split()]\n    p.sort(reverse=True)\n    return sum(p[:k])/k\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2520,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f=lambda:map(int,input().split())\n    N,M,K=f()\n    friendships=set()\n    blockships=set()\n    for i in range(M):\n        a,b=f()\n        friendships.add((a,b) if a<b else (b,a))\n    for i in range(K):\n        c,d=f()\n        blockships.add((c,d) if c<d else (d,c))\n    ans=[0]*N\n    for i in range(N):\n        for j in range(N):\n            if i!=j and (i,j) not in friendships and (i,j) not in blockships:\n                for k in range(N):\n                    if i==k or j==k:\n                        continue\n                    if (i,k) in friendships and (k,j) in friendships:\n                        ans[i]+=1\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2521,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    a = list(map(int, input_string.split()))\n    a.sort()\n    max_score = float('-inf')\n    for i in range(N):\n        first_half_sum = sum(a[:N])\n        second_half_sum = sum(a[N:])\n        score = first_half_sum - second_half_sum\n        max_score = max(max_score, score)\n        a.pop(N)\n    return max_score\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2522,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    A = list(map(int, input_string.split()))\n    B = list(map(int, input_string.split())\n    if len(A) != N or len(B) != N:\n        return \"No\"\n    for i in range(N):\n        if A[i] != B[i]:\n            break\n    else:\n        return \"Yes\"\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] == B[j]:\n                B[i], B[j] = B[j], B[i]\n                break\n    else:\n        return \"No\"\n    return \"Yes\\n\" + \" \".join(map(str, B)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2523,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input();n=r=len(s)\n    for i in range(n):\n        if s[i]=='1':\n            r=min(r,i)\n    return r\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2524,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input_string.split()))\n    mod=10**9+7\n    ans=0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            ans=(ans+a[i]^a[j])%mod\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2525,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    S = input()\n    Q = int(input())\n    for i in range(Q):\n        query = input().split()\n        if len(query) == 1:\n            S = S[::-1]\n        else:\n            F, C = int(query[0]), query[1]\n            if F == 1:\n                S = C + S\n            else:\n                S = S + C\n    return S\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2526,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    X,Y,A,B,C=map(int,input().split())\n    p=list(map(int,input().split())[:A])\n    q=list(map(int,input().split())[:B])\n    r=list(map(int,input().split())[:C])\n    p.sort(reverse=True)\n    q.sort(reverse=True)\n    r.sort(reverse=True)\n    total=0\n    for i in range(X):\n        total+=p[i]\n    for i in range(Y):\n        total+=q[i]\n    for i in range(C):\n        if p and q:\n            if p[-1]>q[-1]:\n                total+=p.pop()\n            else:\n                total+=q.pop()\n        elif p:\n            total+=p.pop()\n        else:\n            total+=q.pop()\n    return total\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2527,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    if \"iloveyou\" in s:\n        return \"happy\"\n    else:\n        return \"sad\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2528,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    arr = list(map(int, input_string.split()))\n    max_len = 0\n    current_len = 0\n    current_product = 1\n    start = 0\n    for i in range(n):\n        if arr[i] == 0:\n            current_product = 1\n            if current_len > max_len:\n                max_len = current_len\n            current_len = 0\n            start = i + 1\n        else:\n            current_len += 1\n            current_product *= arr[i]\n    if current_len > max_len:\n        max_len = current_len\n    return max_len\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2529,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b = map(float,input().split())\n    if a%5 != 0:\n        return \"{:.2f}\".format(b)\n    elif b < a+0.5:\n        return \"{:.2f}\".format(b)\n    else:\n        return \"{:.2f}\".format(b-a-0.5)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2530,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    w,x=map(int,input().split())\n    chefs={}\n    for i in range(w):\n        name,country=input().split()\n        chefs[name]=country\n    for i in range(x):\n        email=input()\n        if email in chefs:\n            if chefs[email] in chefs:\n                chefs[chefs[email]]+=1\n            else:\n                chefs[chefs[email]]=1\n    country_winner=max(chefs,key=lambda x:chefs[x])\n    chef_winner=max(chefs,key=lambda x:chefs[x])\n    return country_winner,chef_winner\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2531,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input_string.split()))\n    avg=0\n    for i in range(n):\n        for j in range(n):\n            if i!=j and a[i]==(a[j]+a[i])/2:\n                avg+=1\n    return avg\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2532,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    p,q=list(map(int,input().split()))\n    a=[int(x) for x in input().split()]\n    b=[int(x) for x in input().split()]\n    d=[int(x) for x in input().split()]\n    x=[int(x) for x in input().split()]\n    n=10\n    for i in range(10):\n        x.append(sum([a[j]*x[i-j] for j in range(1,p+1)]+[b[j]*d[j]**n for j in range(q+1)])%1000000000)\n        n+=1\n    return x[10:]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2533,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, e = map(int, input().strip().split())\\r\n    graph = [[] for i in range(n+1)]\n    for i in range(e):\n        a, b = map(int, input().strip().split())\n        graph[a].append(b)\n        graph[b].append(a)\n    for i in range(1, n+1):\n        if len(graph[i]) == 1:\n            return \"NO\"\n    for i in range(1, n+1):\n        if len(graph[i]) == 2:\n            graph[i].append(graph[i][0])\n            graph[graph[i][0]].append(i)\n    for i in range(1, n+1):\n        if len(graph[i]) == 1:\n            return \"NO\"\n    for i in range(1, n+1):\n        if len(graph[i]) == 2:\n            graph[i].append(graph[i][0])\n            graph[graph[i][0]].append(i)\n    for i in range(1, n+1):\n        if len(graph[i]) == 1:\n            return \"NO\"\n    for i in range(1, n+1):\n        if len(graph[i]) == 2:\n            graph[i].append(graph[i][0])\n            graph[graph[i][0]].append(i)\n    for i in range(1, n+1):\n        if len(graph[i]) == 1:\n            return \"NO\"\n    for i in range(1, n+1):\n        if len(graph[i]) == 2:\n            graph[i].append(graph[i][0])\n            graph[graph[i][0]].append(i)\n    for i in range(1, n+1):\n        if len(graph[i]) == 1:\n            return \"NO\"\n    for i in range(1, n+1):\n        if len(graph[i]) == 2:\n            graph[i].append(graph[i][0])\n            graph[graph[i][0]].append(i)\n    for i in range(1, n+1):\n        if len(graph",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2534,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r,c=map(int,input().split())\n    matrix=[]\n    for i in range(r):\n        row=list(map(int,input().split())\n        matrix.append(row)\n    min_row=[]\n    max_col=[]\n    for i in range(c):\n        col=[]\n        for j in range(r):\n            col.append(matrix[j][i])\n        min_row.append(min(col))\n        max_col.append(max(col))\n    for i in range(r):\n        for j in range(c):\n            if matrix[i][j]==max_col[j] and matrix[i][j]==min_row[i]:\n                return matrix[i][j]\n    return \"GUESS\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2535,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x,n = [int(x) for x in findall(\\\"\\\\d+\\\",input())]\n    count = 0\n    for i in range(n):\n        for j in range(1,10):\n            if input_string[i][j] == '0':\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2536,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    matrix=[]\n    for i in range(n):\n        matrix.append(list(map(int,input().split()))\n    l=int(input())\n    pairs=[]\n    for i in range(l):\n        pairs.append(list(map(int,input().split()))\n    e1=0\n    e2=0\n    for i in range(n):\n        for j in range(m):\n            if (i,j) in pairs:\n                e1+=matrix[i][j]\n            if (j,i) in pairs:\n                e2+=matrix[j][i]\n    return max(e1,e2) if e1!=-1 and e2!=-1 else max(e1,e2)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2537,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    q = int(input())\n    for i in range(q):\n        s = input()\n        t = input()\n        p = input()\n        if len(s) == len(t) and sorted(s) == sorted(t):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2538,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c=map(int,input().split())\n    if a>b:\n        return 0\n    else:\n        return c*(c+1)//2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2539,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x, p, k = map(int, input().split())\n    return k\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2540,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    colors = list(map(int, input().split()))\n    tree = [[] for _ in range(n)]\n    for _ in range(n - 1):\n        x, y = map(int, input().split())\n        tree[x - 1].append(y - 1)\n        tree[y - 1].append(x - 1)\n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2541,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    q = int(input())\n    queries = []\n    for i in range(q):\n        queries.append(list(map(int, input().split()))\n    for query in queries:\n        L, R = query\n        count = 0\n        for i in range(L, R+1):\n            if i == 1:\n                count += 1\n            elif i == 2:\n                count += 1\n            elif i == 3:\n                count += 1\n            elif i == 4:\n                count += 1\n            elif i == 5:\n                count += 1\n            elif i == 6:\n                count += 1\n            elif i == 7:\n                count += 1\n            elif i == 8:\n                count += 1\n            elif i == 9:\n                count += 1\n            else:\n                continue\n        print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2542,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = list(map(int, list(input())))\n    n = len(s)\n    left_shift = s[1:] + s[:1]\n    right_shift = s[-1:] + s[:-1]\n    count = 0\n    for i in range(n):\n        if s[i] != right_shift[i]:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2543,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m, q = map(int, input_string.split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    f = [0] * m\n    for i in range(m):\n        f[i] = sum(a) - sum(b)\n    min_f = min(f)\n    print(min_f)\n    \n    for i in range(q):\n        l, r, x = map(int, input().split())\n        for j in range(l, r+1):\n            a[j-1] += x\n        for i in range(m):\n            f[i] = sum(a) - sum(b)\n        min_f = min(f)\n        print(min_f)\n        \ninput_string = input()\nsolution(input_string) ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2544,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    T = int(input())\n    for i in range(T):\n        n = int(input())\n        edges = []\n        for j in range(n-1):\n            x, y = map(int, input().split())\n            edges.append((x, y) if x < y else (y, x))\n        centroid = None\n        for edge in edges:\n            if centroid is None:\n                centroid = edge\n            else:\n                break\n        print(*centroid)\n        print(*centroid)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2545,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split())\n    if a==b:\n        return \"YES\"\n    elif a>b:\n        return \"YES\" if a%b==0 else \"NO\"\n    else:\n        return \"YES\" if b%a==0 else \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2546,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    T = int(input())\n    for i in range(T):\n        n, s = map(int, input().split())\n        l = []\n        for j in range(n):\n            l.append(list(map(int, input().split()))\n        l.sort()\n        if n % 2 == 0:\n            median = (l[n//2-1] + l[n//2])/2\n        else:\n            median = l[n//2]\n        print(median)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2547,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m, k = map(int, input_string.split())\n    books = []\n    for i in range(n):\n        t, a, b = map(int, input().split())\n        books.append((t, a, b))\n    \n    books.sort(key=lambda x: x[0])\n    total_time = 0\n    chosen_books = []\n    for i in range(n):\n        if len(chosen_books) < m:\n            if books[i][1] == 1 or books[i][2] == 1:\n                chosen_books.append(books[i])\n                total_time += books[i][0]\n        else:\n            break\n    \n    if len(chosen_books) < k:\n        return -1\n    else:\n        print(total_time)\n        print(\" \".join(str(i+1) for i in range(n) if books[i] in chosen_books)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2548,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input_string))\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if sum(a[i:j+1]) == j-i+1:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2549,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    d=[int(x) for x in input().split()]\n    a=[]\n    b=[]\n    for i in range(m):\n        a.append(int(input().split()[0])),b.append(int(input().split()[1])\n    for i in range(m):\n        a[i]=int(a[i])\n        b[i]=int(b[i])\n    for i in range(n):\n        for j in range(m):\n            if a[j]>0 and d[i]>=b[j]:\n                a[j]-=1\n            elif a[j]>0 and d[i]<b[j]:\n                continue\n            elif a[j]==0:\n                d[i]-=1\n    for i in range(m):\n        print(d[i])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2550,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n,m=map(int,input().split())\n        a=list(map(int,input().split())\n        a.sort()\n        if a[0]==0:\n            print(m)\n        else:\n            print(a[0])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2551,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    T = int(input())\n    for i in range(T):\n        s = input()\n        t = input()\n        if len(s) > len(t):\n            print(-1)\n        else:\n            count = 0\n            for i in range(len(t)-len(s)+1):\n                if t[i:i+len(s)] == s:\n                    count += 1\n            print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2552,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    T = int(input())\n    for i in range(T):\n        n, m = map(int, input().split())\n        p = list(map(int, input().split())\n        h = list(map(int, input().split())\n        roads = []\n        for j in range(n-1):\n            x, y = map(int, input().split())\n            roads.append((x, y)\n        happiness = [0] * n\n        for j in range(n):\n            happiness[j] = p[j] - h[j]\n        for road in roads:\n            happiness[road[0]-1] += 1\n            happiness[road[1]-1] += 1\n        for j in range(n):\n            if happiness[j] != h[j]:\n                print(\"NO\")\n                break\n        else:\n            print(\"YES\")\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2553,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n, x = map(int, input().split())\n        a = list(map(int, input().split())\n        if sum(a) % 2 == 1:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2554,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    max_sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            max_sum += a[i]\n    return max_sum\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2555,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    T = int(input())\n    for i in range(T):\n        n, q = map(int, input().split())\n        a = list(map(int, input().split())\n        max_strength = 0\n        max_strength_after_swap = []\n        for j in range(q):\n            l, r = map(int, input().split())\n            a[l-1], a[r-1] = a[r-1], a[l-1]\n            temp = 0\n            for k in range(1, len(a), 2):\n                temp += a[k]\n            for k in range(0, len(a), 2):\n                temp -= a[k]\n            max_strength = max(max_strength, temp)\n            max_strength_after_swap.append(max_strength)\n        print(max_strength)\n        for strength in max_strength_after_swap:\n            print(strength)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2556,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    rooms=[]\n    for i in range(n):\n        c,sum_i=map(int,input().split())\n        rooms.append([c,sum_i])\n    for i in rooms:\n        c=i[0]\n        sum_i=i[1]\n        if c==1:\n            print(sum_i**2)\n        else:\n            for j in range(1,c+1):\n                if sum_i-j*j<0:\n                    print(j**2)\n                    break\n                else:\n                    sum_i-=j*j\n            else:\n                print(c**2)\nsolution(input())\n# End of code\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2557,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    pipes = []\n    for i in range(m):\n        pipes.append(list(map(int, input().split()))\n    pipes.sort()\n    count = 0\n    for i in range(m):\n        if pipes[i][0] == pipes[i][1]:\n            continue\n        if pipes[i][0] > pipes[i][1]:\n            pipes[i][0], pipes[i][1] = pipes[i][1], pipes[i][0]\n        for j in range(i+1, m):\n            if pipes[j][0] == pipes[i][0] and pipes[j][1] == pipes[i][1]:\n                break\n            elif pipes[j][0] == pipes[i][1]:\n                count += 1\n                pipes[i][0], pipes[i][1] = pipes[i][1], pipes[i][0]\n                pipes[j][0], pipes[j][1] = pipes[j][1], pipes[j][0]\n                break\n            elif pipes[j][0] == pipes[i][0]:\n                count += 1\n                break\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2558,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    t = int(input_string.split()[0])\n    for i in range(t):\n        a, b, c, d = map(int, input_string.split()[1:])\n        if a >= b:\n            print(-1)\n        else:\n            n = (b-a)//d\n            if (b-a)%d == 0:\n                print(n*d)\n            else:\n                print(n*d+a)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2559,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return None\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2560,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn,l,r = map(int,input().split())\n    \\tif n<=r:\n    \\t\\treturn \"Yes\"\n    \\telse:\n    \\t\\treturn \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2561,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn = int(input())\n    for i in range(tn):\n        a = int(input())\n        count = 0\n        for x in range(a+1):\n            if a - (a ^ x) - x == 0:\n                count += 1\n        print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2562,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = int(input()) + 1, 1000001\n    a = list(map(int, input().split()))\n    a.sort()\n    gcd = [0] * n\n    gcd[0] = a[0]\n    for i in range(1, n):\n        gcd[i] = math.gcd(gcd[i-1], a[i])\n    return sum((i+1) * gcd[i] for i in range(n)) % m\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2563,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    n = len(s)\n    if n % 2 == 0:\n        s = '0' + s\n        n += 1\n    s = list(s)\n    for i in range(n-1):\n        if s[i] != s[i+1] and int(s[i]) % 2 != int(s[i+1]) % 2:\n            s[i], s[i+1] = s[i+1], s[i]\n    return ''.join(s)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2564,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,n=map(int,input().split())\n    if a>n:\n        return 0\n    elif b>n:\n        return 0\n    else:\n        count=0\n        while a<=n:\n            a+=b\n            count+=1\n        return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2565,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b, c = list(map(int, input().split()))\n    x1, y1, z1 = a\n    x2, y2, z2 = b\n    x3, y3, z3 = c\n    if x1 + y1 + z1 != x2 + y2 + z2:\n        return \"Invalid input\"\n    if x1 > x2:\n        x1, x2 = x2, x1\n    if y1 > y2:\n        y1, y2 = y2, y1\n    if z1 > z2:\n        z1, z2 = z2, z1\n    if x1 + y1 > x2 + y2:\n        x1, y1, x2, y2 = x2, y2, x1, y1\n    if x1 + z1 > x2 + z2:\n        x1, z1, x2, z2 = x2, z2, x1, z1\n    if y1 + z1 > y2 + z2:\n        y1, z1, y2, z2 = y2, z2, y1, z1\n    if x1 + y1 + z1 == x2 + y2 + z2:\n        if x1 == x2 and y1 == y2 and z1 == z2:\n            return 0\n        elif x1 == x2 and y1 == y2:\n            return max(x1 + y1 + z1, x2 + y2 + z2)\n        elif x1 == x2:\n            return max(x1 + y1 + z1, x2 + y2 + z2)\n        elif y1 == y2:\n            return max(x1 + y1 + z1, x2 + y2 + z2)\n        else:\n            return max(x1 + y1 + z1, x2 + y2 + z2)\n    else:\n        return \"Invalid input\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2566,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tk=int(input())\n    for i in range(tk):\n        k=int(input())\n        a=list(map(int,input().split())\n        if k==1:\n            print(1)\n        else:\n            count=0\n            for i in range(7):\n                if a[i]==1:\n                    count+=1\n            if k<=count:\n                print(k)\n            else:\n                print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2567,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    w = \"\"\n    for i in range(n):\n        for j in range(i, 2*n-1, n):\n            w += s[j]\n    return w\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2568,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        s=input()\n        res=0\n        cur=0\n        for i in range(len(s)):\n            if s[i]=='+':\n                cur+=1\n            else:\n                cur-=1\n            if cur<0:\n                break\n            res+=1\n        print(res)\nsolution()\n# End of code\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2569,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    # q=int(input())\n    # for i in range(q):\n    #     n=int(input())\n    #     if n==1 or n==2:\n    #         print(0)\n    #     else:\n    #         print(4)\n    #     print(4)\n    #     print(4)\n    #     print(4)\n    #     print(12)\n    #     print(99098587)\n    #     print(804665184)\n    #     print(0)\n    #     print(0)\n    #     print(0)\n    #     print(0)\n    #     print(0)\n    #     print(0)\n    #     print(0)\n    #     print(0)\n    #     print(0)\n    #     print(0)\n    #     print(0)\n    #     print(0)\n    #     print(0)\n    #     print(0)\n    #     print(0)\n    #     print(0)\n    #     print(0)\n    #     print(0)\n    #     print(0)\n    #     print(0)\n    #     print(0)\n    #     print(0)\n    #     print(0)\n    #     print(0)\n    #     print(0)\n    #     print(0)\n    #     print(0)\n    #     print(0)\n    #     print(0)\n    #     print(0)\n    #     print(0)\n    #     print(0)\n    #     print(0)\n    #     print(0)\n    #     print(0)\n    #     print(0)\n    #     print(0)\n    #     print(0)\n    #     print(0)\n    #     print(0)\n    #     print(0)\n    #     print(0)\n    #     print(0)\n    #     print(0)\n    #     print(0)\n    #     print(0)\n    #     print(0)\n    #     print(0)\n    #     print(0)\n    #",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2570,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    I=lambda:list(map(int,input().split()))\n    t=I()[0]\n    for i in range(t):\n        n,x=I()\n        a=I()\n        b=I()\n        if n==1:\n            print(\"Yes\" if a[0]+b[0]<=x else \"No\")\n        else:\n            b.sort(reverse=True)\n            for i in range(n):\n                if a[i]+b[i]>x:\n                    print(\"No\")\n                    break\n            else:\n                print(\"Yes\")\nsolution()\n# End your code here\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2571,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    doors = []\n    for i in range(n):\n        n = int(input())\n        energies = list(map(int, input().split()))\n        doors.append(energies)\n    for door in doors:\n        for i in range(1, 101):\n            for j in range(1, 101):\n                if i * door[0] + j * door[1] == 0:\n                    print(i, j)\n                    break\n                elif i * door[0] + j * door[1] != 0 and j == 100:\n                    print(-i, -j)\n                    break\n                elif i * door[0] + j * door[1] != 0 and i == 100:\n                    print(j, -i)\n                    break\n                elif i * door[0] + j * door[1] != 0 and i == 100 and j == 100:\n                    print(-i, i)\n                    break\n                elif i * door[0] + j * door[1] != 0 and j == 100 and i == 100:\n                    print(-j, -i)\n                    break\n                elif i * door[0] + j * door[1] == 0:\n                    print(i, j)\n                    break\n                elif i * door[0] + j * door[1] != 0 and i == 100 and j == 100:\n                    print(-i, -j)\n                    break\n                elif i * door[0] + j * door[1] != 0 and i == 100:\n                    print(j, -i)\n                    break\n                elif i * door[0] + j * door[1] != 0 and j == 100:\n                    print(-i, i)\n                    break\n                elif i * door[0] + j * door[1] != 0 and j == 100:\n                    print(i, -j)\n                    break\n                elif i * door[0] + j * door[1] != 0",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2572,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    matrix=[]\n    for i in range(n):\n        matrix.append(list(map(int,input().split()))\n    min_ops=float('inf')\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j]%2!=0:\n                matrix[i][j]+=1\n                min_ops=min(min_ops,min(min_ops,min(sum(matrix[i])+sum(matrix[k][j] for k in range(n))-matrix[i][j])+n*m-2*i,sum(matrix[i])+sum(matrix[k][j] for k in range(m))-matrix[i][j])+m*n-2*j)\n                matrix[i][j]-=1\n    return min_ops\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2573,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k, m = [int(i) for i in input().split()]\n    board = [[0] * n for _ in range(n)]\n    for _ in range(m):\n        x, y = [int(i) for i in input().split()]\n        board[y-1][x-1] ^= 1\n        print(min(sum(board[i][k-1] for i in range(n)) - 1, 0))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2574,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        max_product = float('-inf')\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    for l in range(k+1, n):\n                        for t in range(l+1, n):\n                            product = a[i] * a[j] * a[k] * a[l] * a[t]\n                            if product > max_product:\n                                max_product = product\n        print(max_product)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2575,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    for i in range(n):\n        a = int(input())\n        if a == 360:\n            print(\"YES\")\n        elif a == 60 or a == 120:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2576,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c,d = map(int,input().split())\n    if d > a:\n        return \"IMPOSSIBLE\"\n    if b <= c:\n        return max(a,c)\n    else:\n        return max(a,c) + max(b-a,d)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2577,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split()))\n    b = []\n    for i in range(n):\n        b.append([])\n        for j in range(m):\n            b[i].append(a[i][j])\n            if i > 0 and a[i][j] == a[i-1][j]:\n                b[i][j] += 1\n            if j > 0 and a[i][j] == a[i][j-1]:\n                b[i][j] += 1\n    for i in range(n):\n        for j in range(m):\n            print(b[i][j], end=' ')\n        print()\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2578,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    groups = []\n    for i in range(m):\n        k, *users = map(int, input().split())\n        groups.append(set(users))\n    result = [0] * n\n    result[0] = 1\n    for i in range(n):\n        for group in groups:\n            if i in group:\n                for friend in group:\n                    result[friend] += result[i]\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2579,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l,r,x,y,k=map(int,input().split())\n    if k>=(y-x+1)/(r-l+1):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2580,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    edges=[]\n    for i in range(n-1):\n        u,v=map(int,input().split())\n        edges.append((u,v) if u<v else (v,u))\n    m=int(input())\n    primes=list(map(int,input().split())\n    k=1\n    for prime in primes:\n        k*=prime\n    mod=10**9+7\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2581,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    board=[]\n    for i in range(n):\n        board.append(list(map(int,input().split()))\n    max_money=0\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                if i!=j and i!=k and j!=k:\n                    money=0\n                    for l in range(n):\n                        for m in range(n):\n                            if l!=i and l!=j and l!=k and m!=i and m!=j and m!=k:\n                                money+=board[l][m]\n                    if money>max_money:\n                        max_money=money\n                        x1=i+1\n                        y1=j+1\n                        x2=k+1\n                        y2=k+1\n    print(max_money)\n    print(x1,y1,x2,y2)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2582,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    p=list(map(int,input().split())\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if p[i]+p[j]==max(p[i:j+1]):\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2583,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn = int(input())\n    if n == 1:\n        return \"FastestFinger\"\n    else:\n        return \"Ashishgup\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2584,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n,p,k=map(int,input().split())\n        a=list(map(int,input().split())\n        max_goods=0\n        for i in range(n):\n            if a[i]<=p:\n                max_goods+=1\n                p-=a[i]\n            else:\n                break\n        print(max_goods)\nsolution(input())\n# End of code\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2585,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    max_gcd = 0\n    for i in range(1, n):\n        for j in range(i+1, n+1):\n            gcd = gcd_euclid(i, j)\n            if gcd > max_gcd:\n                max_gcd = gcd\n    return max_gcd\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2586,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n,m=map(int,input().split())\n        board=[]\n        for j in range(n):\n            row=input()\n            board.append(row)\n        for row in board:\n            print(row)\n    return board\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2587,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    x=int(input())\n    return x\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2588,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, a, b = list(map(int, input().split()))\n    s = input()\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2589,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, x = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    max_len = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(a[i:j]) % x != 0:\n                max_len = max(max_len, j-i)\n    return max_len if max_len != 0 else -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2590,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,x=map(int,input().split())\n    a=list(map(int,input().split())\n    max_wealthy=0\n    for i in range(n):\n        if a[i]>=x:\n            max_wealthy+=1\n    print(max_wealthy)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2591,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        a.sort()\n        for j in range(n-1):\n            if abs(a[j+1]-a[j]) < abs(a[j]-a[j+1]):\n                a[j], a[j+1] = a[j+1], a[j]\n        print(*a)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2592,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    for i in range(n):\n        a,b,c=map(int,input().split())\n        if a==0 and b==0 and c==0:\n            print(0)\n        else:\n            print(min(a,b,c))\nsolution(input())\n# End your code here\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2593,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if a[i]&a[j]>=a[i]^a[j]:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2594,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    q = int(input())\n    for i in range(q):\n        n, m = map(int, input().split())\n        # Your code here\n        # Write the code to find the minimum number of lanterns required to light all the squares\n        # and print the answer for each test case\n        # Hint: Use the formula for the number of squares in a rectangle: n*m\n        # The number of lanterns required is the number of squares minus the number of squares that are already lit\n        # The number of squares that are already lit is the number of streets that are already lit\n        # The number of streets that are already lit is the sum of the number of streets in each row and the number of streets in each column\n        # The number of streets in each row is n-1 and the number of streets in each column is m-1\n        # The total number of streets is 2*(n-1) + 2*(m-1)\n        # The number of squares that are already lit is (n-1)*(m-1)\n        # The number of squares in the park is n*m\n        # The number of lanterns required is the difference between the number of squares in the park and the number of squares that are already lit\n        print(n*m - (n-1)*(m-1))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2595,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b = map(int, input().split())\n    if a == b:\n        return 0\n    if b % 2 == 0:\n        if a % 2 == 0:\n            return 1\n        else:\n            return -1\n    if b % 4 == 0:\n        if a % 4 == 0:\n            return 1\n        else:\n            return -1\n    if b % 8 == 0:\n        if a % 8 == 0:\n            return 1\n        else:\n            return -1\n    if b % 2 == 1:\n        if a % 2 == 1:\n            return -1\n        else:\n            return 1\n    if b % 4 == 1:\n        if a % 4 == 1:\n            return -1\n        else:\n            return 1\n    if b % 8 == 1:\n        if a % 8 == 1:\n            return -1\n        else:\n            return 1\n    if b % 2 == 3:\n        if a % 2 == 3:\n            return -1\n        else:\n            return 1\n    if b % 4 == 3:\n        if a % 4 == 3:\n            return -1\n        else:\n            return 1\n    if b % 8 == 3:\n        if a % 8 == 3:\n            return -1\n        else:\n            return 1\n    if b % 2 == 2:\n        if a % 2 == 2:\n            return 1\n        else:\n            return -1\n    if b % 4 == 2:\n        if a % 4 == 2:\n            return 1\n        else:\n            return -1\n    if b % 8 == 2:\n        if a % 8 == 2:\n            return 1\n        else:\n            return -1\n    if b % 2 == 6:\n        if a % 2 == 6:\n            return -1\n        else:\n            return 1\n    if b % 4 == 6:\n        if a % 4 == 6:\n            return -1\n        else:\n            return",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2596,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k, m, t = map(int, input().split())\n    l = n\n    k -= 1\n    for _ in range(t):\n        cmd, i = map(int, input().split())\n        if cmd == 1:\n            if i == 1:\n                l += 1\n            elif i == l + 1:\n                l += 1\n            else:\n                l += 2\n        else:\n            if i == 1:\n                l -= 1\n            elif i == l:\n                l -= 1\n        k = min(k, l)\n        print(l, k + 1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2597,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    for i in range(n):\n        a = list(map(int, input().split()))\n        max_side = 0\n        for i in range(len(a)):\n            for j in range(i+1, len(a)):\n                if a[i] == a[j]:\n                    max_side = max(max_side, a[i])\n        print(max_side)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2598,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    edges = []\n    for i in range(m):\n        u, v, c = input().split()\n        edges.append((int(u), int(v), c))\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2599,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    tests = int(input())\n    for i in range(tests):\n        n, k = map(int, input().split())\n        x = 0\n        while True:\n            if sum(map(int, str(x))) + sum(map(int, str(x+1)) + sum(map(int, str(x+2)) + ... + sum(map(int, str(x+k)) == n:\n                print(x)\n                break\n            else:\n                x += 1\n        else:\n            print(-1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2600,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n,m=map(int,input().split())\n        matrix=[]\n        for j in range(n):\n            matrix.append(list(map(int,input().split()))\n        print(solve(matrix,n,m))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2601,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn=int(input())\n    \\tinput_list=list(map(int,input().split())\n    \\tfor i in range(n):\n    \\t    input_list.sort()\n    \\t    if input_list==sorted(input_list):\n    \\t        print(\"YES\")\n    \\t    else:\n    \\t        print(\"NO\")\n    \\t    input_list=list(map(int,input().split())\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2602,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        a,b,n,m=map(int,input().split())\n        if a+b<n+m:\n            print(\"No\")\n        else:\n            print(\"Yes\")\nsolution(input())\n# End your code here\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2603,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    for i in range(n):\n        a = list(map(int, input().split()))\n        if a == sorted(a):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2604,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R=lambda:list(map(int,input().split()))\n    r,d=R()\n    n=int(input())\n    count=0\n    for i in range(n):\n        x,y,r=R()\n        if (x**2+y**2)**0.5<=r+d:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2605,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=list(map(int,input().split()))\n    c=list(map(int,input().split())\n    id_k=list(map(int,input().split())\n    c_sum=0\n    for i in range(n):\n        for j in range(i+1,n+1):\n            if i!=j:\n                c_sum+=c[i]*c[j]\n    for i in range(k):\n        for j in range(n):\n            if j!=id_k[i]:\n                c_sum+=c[id_k[i]*c[j]\n    return c_sum\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2606,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    dishes = list(map(int, input().split()))\n    dishes.sort()\n    total_unpleasant = 0\n    for i in range(n):\n        total_unpleasant += abs(dishes[i] - i)\n    return total_unpleasant\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2607,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    T = int(input())\n    for i in range(T):\n        s = input()\n        if s.count('?') == 1:\n            if s.count('a') == 0 and s.count('b') == 0 and s.count('c') == 0:\n                print(\"-1\")\n            else:\n                if s.count('a') >= 1 and s.count('b') >= 1 and s.count('c') >= 1:\n                    if s.count('a') >= 2 and s.count('b') >= 2 and s.count('c') >= 2:\n                        if s.count('a') >= 3 and s.count('b') >= 3 and s.count('c') >= 3:\n                            print(s.replace('?', 'a'))\n                        else:\n                            print(s.replace('?', 'b'))\n                    else:\n                        print(s.replace('?', 'c'))\n                elif s.count('a') >= 1 and s.count('b') >= 1:\n                    print(s.replace('?', 'c'))\n                elif s.count('a') >= 1 and s.count('c') >= 1:\n                    print(s.replace('?', 'b'))\n                elif s.count('b') >= 1 and s.count('c') >= 1:\n                    print(s.replace('?', 'a'))\n                else:\n                    print(\"-1\")\n        else:\n            print(\"-1\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2608,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n, m = map(int, input().split())\n        x1, y1, x2, y2 = map(int, input().split())\n        x3, y3, x4, y4 = map(int, input().split())\n        white = 0\n        black = 0\n        for x in range(x1, x2+1):\n            for y in range(y1, y2+1):\n                white += 1\n        for x in range(x3, x4+1):\n            for y in range(y3, y4+1):\n                black += 1\n        print(white, black)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2609,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    result = []\n    for i in range(t):\n        n = int(input())\n        segments = []\n        for j in range(n):\n            l, r = map(int, input().split())\n            segments.append((l, r))\n        segments.sort()\n        max_segments = 1\n        current_segments = 1\n        for j in range(1, n):\n            if segments[j][0] > segments[j-1][1]:\n                current_segments += 1\n            else:\n                max_segments = max(max_segments, current_segments)\n                current_segments = 1\n        max_segments = max(max_segments, current_segments)\n        result.append(max_segments)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2610,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n,p,k=map(int,input().split())\n        a=list(map(int,input().split())\n        max_goods=0\n        for i in range(n):\n            if a[i]<=p:\n                max_goods+=1\n            else:\n                break\n        if k>1:\n            max_goods=max_goods-1\n        print(max_goods)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2611,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, q = list(map(int, input().split()))\n    piles = list(map(int, input().split()))\n    piles.sort()\n    min_moves = 0\n    moves = 0\n    for i in range(1, len(piles)):\n        min_moves += abs(piles[i] - piles[i-1]) - 1\n    print(min_moves)\n    for i in range(q):\n        t, x = list(map(int, input().split()))\n        if t == 0:\n            piles.remove(x)\n        else:\n            piles.append(x)\n        piles.sort()\n        moves = 0\n        for j in range(1, len(piles)):\n            moves += abs(piles[j] - piles[j-1]) - 1\n        print(moves)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2612,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    queries=[]\n    for i in range(n):\n        query=input().split()\n        queries.append(query)\n    for i in range(n):\n        query=queries[i]\n        n=int(query[0])\n        sizes=list(map(int,query[1:]))\n        max_models=0\n        for i in range(1,n+1):\n            for j in range(i+1,n+1):\n                if sizes[j-1]>sizes[i-1] and j%i==0:\n                    max_models=max(max_models,j-i+1)\n        print(max_models)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2613,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k,z=map(int,input().split())\n    a=list(map(int,input().split())\n    max_score=0\n    for i in range(n):\n        if i<n-1:\n            max_score+=a[i+1]\n        if i>0:\n            max_score+=a[i-1]\n    return max_score\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2614,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    bags = []\n    for i in range(n):\n        bags.append(list(map(int, input().split()))\n    for bag in bags:\n        max_distance = 0\n        for i in range(len(bag)):\n            for j in range(i+1, len(bag)):\n                if bag[i] == bag[j]:\n                    max_distance = max(max_distance, j-i)\n        print(max_distance)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2615,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    T = int(input_string.split('\\n')[0])\n    input_list = input_string.split('\\n')[1:]\n    result = []\n    for i in range(T):\n        n = int(input_list[i])\n        count = 0\n        for num in range(2, n+1):\n            prime_factors = []\n            while num % 2 == 0:\n                prime_factors.append(2)\n                num //= 2\n            while num % 3 == 0:\n                prime_factors.append(3)\n                num //= 3\n            while num % 5 == 0:\n                prime_factors.append(5)\n                num //= 5\n            if num > 1:\n                prime_factors.append(num)\n            if len(set(prime_factors)) == len(prime_factors):\n                count += 1\n        result.append(count)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2616,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    piles = list(map(int, input().split()))\n    if sum(piles) % 2 == 0:\n        return \"First\"\n    else:\n        return \"Second\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2617,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n=int(input())\n        if n==2:\n            print(1)\n            print(1)\n        else:\n            print(-1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2618,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    q = []\n    for i in range(n):\n        p = list(map(int, input().split()))\n        x, a = map(int, input().split())\n        y, b = map(int, input().split())\n        k = int(input())\n        p.sort(reverse=True)\n        total = 0\n        count = 0\n        for i in range(len(p)):\n            if i % a == 0 or i % b == 0:\n                total += p[i] * (x/100 if i % a == 0 else y/100)\n                count += 1\n            if total >= k:\n                q.append(count)\n                break\n            elif i == len(p) - 1:\n                q.append(-1)\n    return q\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2619,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,q,c=map(int,input().split())\n    stars=[]\n    for i in range(n):\n        x,y,s=map(int,input().split())\n        stars.append([x,y,s])\n    for i in range(q):\n        t,x1,y1,x2,y2=map(int,input().split())\n        total=0\n        for j in range(n):\n            if x1<=stars[j][0]<=x2 and y1<=stars[j][1]<=y2:\n                if t<=stars[j][2]:\n                    total+=stars[j][2]\n                else:\n                    total+=t-stars[j][2]\n        print(total)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2620,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,q=list(map(int,input().split()))\n    a=[i for i in range(1,n+1)]\n    for i in range(q):\n        query=list(map(int,input().split())\n        if query[0]==1:\n            print(sum(a[query[1]-1:query[2]))\n        else:\n            for i in range(query[1]):\n                a[i],a[i+1]=a[i+1],a[i]\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2621,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k = map(int, input().split())\n    h = list(map(int, input().split())\n    if n == 1:\n        return \"YES\"\n    elif n == 2:\n        if h[0] >= k:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        for i in range(n-1):\n            if h[i] >= k:\n                h[i] -= k\n            elif h[i] + m >= k:\n                m -= h[i]\n                h[i] = 0\n            else:\n                return \"NO\"\n        if h[n-1] == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2622,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = [int(x) for x in input().split()]\n    map1 = [input() for _ in range(n)]\n    map2 = [input() for _ in range(m)]\n    for i in range(n - m + 1):\n        for j in range(m - n + 1):\n            if all(map1[i][k] == map2[k][j] for k in range(m)):\n                return i + 1, j + 1\n    return None\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2623,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    q = int(input())\n    for i in range(q):\n        n, k = map(int, input().split())\n        s = input()\n        # Your code here\n        # print the answer for each test case\n        pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2624,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, Q = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = A.copy()\n    for _ in range(Q):\n        s, x = input().split()\n        x = int(x)\n        if s == '>':\n            B = [-a if a > x else a for a in B]\n        else:\n            B = [a if a < x else -a for a in B]\n    return ' '.join(map(str, B)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2625,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    for i in range(n):\n        k,x=map(int,input().split())\n        count=0\n        num=1\n        while True:\n            if sum(int(digit) for digit in str(num))==x:\n                if count+1==k:\n                    print(num)\n                    break\n                else:\n                    count+=1\n            num+=1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2626,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2627,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    if not input_string or not input_string[0]:\n        return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2628,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return input_string\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2629,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code goes here\n    n = int(input_string)\n    matrix = [[0]*n for i in range(n)]\n    row, col = 0, 0\n    direction = 0\n    next_direction = [0, 1, 2, 3]\n    for i in range(1, n*n+1):\n        matrix[row][col] = i\n        if direction == 0:\n            if col < n-1 and matrix[row][col+1] == 0:\n                col += 1\n            else:\n                direction = 1\n                row += 1\n        elif direction == 1:\n            if row < n-1 and matrix[row+1][col] == 0:\n                row += 1\n            else:\n                direction = 2\n                col -= 1\n        elif direction == 2:\n            if col > 0 and matrix[row][col-1] == 0:\n                col -= 1\n            else:\n                direction = 3\n                row -= 1\n        elif direction == 3:\n            if row > 0 and matrix[row-1][col] == 0:\n                row -= 1\n            else:\n                direction = 0\n                col += 1\n    return matrix\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2630,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2631,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return input_string\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2632,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2633,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert the input string into a 2D array\n    dungeon = [list(map(int, row.split())) for row in input_string.splitlines()]\n    \n    # Initialize the dp array with the maximum possible value\n    dp = [[float('inf')] * len(dungeon[0]) for _ in range(len(dungeon))]\n    \n    # Set the bottom-right cell to 1, since the knight can't move any further\n    dp[-1][-1] = 1\n    \n    # Iterate over the dungeon from right to left and bottom to top\n    for i in range(len(dungeon) - 1, -1, -1):\n        for j in range(len(dungeon[0]) - 1, -1, -1):\n            # If the current cell is empty, set the dp value to the minimum of the down and right cell\n            if dungeon[i][j] == 0:\n                if i < len(dungeon) - 1:\n                    dp[i][j] = min(dp[i+1][j], dp[i][j+1])\n            # If the current cell contains a power-up, set the dp value to the current value plus the power-up\n            else:\n                dp[i][j] = dungeon[i][j]\n                \n            # If the current cell contains a demon, set the dp value to the minimum of the down and right cell plus the health loss\n            if dungeon[i][j] < 0:\n                if i < len(dungeon) - 1:\n                    dp[i][j] = min(dp[i+1][j] - dungeon[i][j], dp[i][j+1] - dungeon[i][j])\n                \n    return dp[0][0]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2634,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    def backtrack(start, curr_subset):\n        if start == len(nums):\n            result.append(list(curr_subset)[:])\n            return\n        backtrack(start+1, curr_subset)\n        curr_subset.append(nums[start])\n        backtrack(start+1, curr_subset)\n        curr_subset.pop()\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2635,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return input_string\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2636,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2637,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    if len(input_string) == 0:\n        return []\n    if len(input_string) == 1:\n        return [input_string]\n    if len(input_string) == 2:\n        return [input_string, input_string[::-1]]\n    \n    result = []\n    for i in range(len(input_string)):\n        prefix = input_string[i]\n        suffix = input_string[:i] + input_string[i+1:]\n        for permutation in solution(suffix):\n            result.append([prefix] + permutation)\n            \n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2638,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Fill this in.\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2639,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    if not input_string:\n        return [[]]\n    \n    input_string.sort()\n    result = []\n    prev_char = None\n    for char in input_string:\n        if char != prev_char:\n            result.extend([[char] + subset for subset in solution(input_string[input_string.index(char)+1:])])\n            prev_char = char\n            \n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2640,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    H,W=list(map(int,input().split()))\n    grid=[]\n    for i in range(H):\n        grid.append(list(input())\n    max_lighted=0\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j]!='#':\n                lighted=0\n                lighted+=count_lighted(grid,i,j,H,W)\n                lighted+=count_lighted(grid,i,j,H,W,direction='up')\n                lighted+=count_lighted(grid,i,j,H,W,direction='down')\n                lighted+=count_lighted(grid,i,j,H,W,direction='left')\n                lighted+=count_lighted(grid,i,j,H,W,direction='right')\n                max_lighted=max(max_lighted,lighted)\n    return max_lighted\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2641,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,Q = list(map(int,input().split()))\n    colors = list(map(int,input().split())\n    queries = []\n    for i in range(Q):\n        l,r = list(map(int,input().split())\n        queries.append((l,r)\n    return queries\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2642,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    sardines=[]\n    for i in range(n):\n        a,b=map(int,input().split())\n        sardines.append((a,b))\n    count=0\n    for i in range(n):\n        for j in range(n):\n            if i!=j and (sardines[i][0]*sardines[j][0]+sardines[i][1]*sardines[j][1])==0:\n                count+=1\n    return count%100000007\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2643,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k, q = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    for i in range(q):\n        n, x, m = list(map(int, input().split())\n        a = [x]\n        for j in range(1, n):\n            a.append(a[-1] + d[(j - 1) % k])\n        count = 0\n        for j in range(n - 1):\n            if a[j] % m < a[j + 1] % m:\n                count += 1\n        print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2644,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    P=list(map(int,input_string.split()))\n    if len(P)!=N:\n        return -1\n    for i in range(N):\n        if i+1 not in P:\n            return -1\n    for i in range(N-1):\n        if P[i]>P[i+1]:\n            return -1\n    for i in range(N-1):\n        if P[i]>P[i+1]:\n            P[i],P[i+1]=P[i+1],P[i]\n            print(i+1)\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2645,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input();print(len(s)//2-s.count('p'))\n    # Write your code here\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2646,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,M=map(int,input().split())\n    graph=[]\n    for i in range(M):\n        a,b=map(int,input().split())\n        graph.append([a,b])\n    # Write your code here\n    return \"Yes\"\n    # End of code\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2647,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    H,W=map(int,input().split());M=[input()for _ in\\\"_\\\"*H];C=[[1]*W for _ in\\\"_\\\"*H];q=deque([[0,0]])\n    for i in range(H):\n        for j in range(W):\n            if M[i][j]=='#':C[i][j]=0\n    while q:\n        r,c=q.popleft();C[r][c]+=1\n        for dr,dc in [(0,-1),(0,1),(-1,0),(1,0)]:\n            nr,nc=r+dr,c+dc\n            if 0<=nr<H and 0<=nc<W and C[nr][nc]==1:\n                C[nr][nc]=C[r][c]+1;q.append([nr,nc])\n    return C[H-1][W-1] if C[H-1][W-1] else -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2648,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    input();k=len(set(input().split()));print(k-1+k%2)\n    return k-1+k%2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2649,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    points=[]\n    for i in range(n):\n        x,y=map(int,input().split())\n        points.append((x,y))\n    max_distance=0\n    for i in range(n):\n        for j in range(i+1,n):\n            distance=abs(points[i][0]-points[j][0])+abs(points[i][1]-points[j][1])\n            if distance>max_distance:\n                max_distance=distance\n    print(max_distance)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2650,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, Q = list(map(int, input().split()))\n    infants = [list(map(int, input().split())) for _ in range(N)]\n    transfers = [list(map(int, input().split())) for _ in range(Q)]\n    kindergartens = [[] for _ in range(2*10**5+1)]\n    for i in range(N):\n        kindergartens[infants[i][1]].append(infants[i][0])\n    for j in range(Q):\n        C, D = transfers[j]\n        kindergartens[D].append(C)\n        kindergartens[infants[C-1][1]].remove(C)\n        infants[C-1][1] = D\n    for j in range(Q):\n        evenness = float('inf')\n        for k in kindergartens:\n            if len(k) > 0:\n                evenness = min(evenness, max(k))\n        print(evenness)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2651,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    data=lambda:list(map(int,input().split()))\n    n,m=data()\n    x=data()\n    y=data()\n    area=0\n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            for k in range(1,m+1):\n                for l in range(1,m+1):\n                    area+=abs(x[i-1]-x[j-1])*abs(y[k-1]-y[l-1])\n    return area%(10**9+7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2652,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    towns = []\n    for i in range(N):\n        x, y = map(int, input().split())\n        towns.append((x, y))\n    towns.sort()\n    total_cost = 0\n    for i in range(N-1):\n        for j in range(i+1, N):\n            total_cost += min(abs(towns[i][0]-towns[j][0]), abs(towns[i][1]-towns[j][1]))\n    return total_cost\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2653,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,q=map(int,input().split())\n    edges=[]\n    for i in range(n-1):\n        a,b=map(int,input().split())\n        edges.append((a,b) if a<b else (b,a))\n    for i in range(q):\n        p,x=map(int,input().split())\n        if p==1:\n            continue\n        for j in range(n-1):\n            if edges[j][0]==p:\n                edges[j]=edges[j][0],edges[j][1]+x\n            elif edges[j][1]==p:\n                edges[j]=edges[j][0]+x,edges[j][1]\n    counters=[0]*(n+1)\n    for i in range(n-1):\n        if edges[i][0]==1:\n            counters[edges[i][1]]+=1\n    for i in range(n-1):\n        if edges[i][1]==1:\n            counters[edges[i][0]]+=1\n    for i in range(2,n+1):\n        counters[i]+=counters[edges[i-1][0]-1]\n    for i in range(1,n+1):\n        print(counters[i],end=\" \")\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2654,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    A = []\n    B = []\n    for i in range(n):\n        a, b = map(int, input_string.split())\n        A.append(a)\n        B.append(b)\n    A.sort()\n    B.sort()\n    A.reverse()\n    B.reverse()\n    median = []\n    for i in range(n):\n        median.append((A[i] + B[i]) / 2)\n    median.sort()\n    return len(median)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2655,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    A = list(map(int, input_string.split()))\n    A.sort(reverse=True)\n    total_comfort = 0\n    for i in range(N):\n        total_comfort += A[i]\n        if i > 0:\n            total_comfort += min(A[i], A[(i-1)%N])\n    return total_comfort\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2656,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k,n=int(input()),len(input())\n    mod=10**9+7\n    dp=[[0]*26 for i in range(n+1)]\n    for i in range(n):\n        for j in range(26):\n            dp[i+1][j]=dp[i][j]\n            if input_string[i]!=chr(ord('a')+j):\n                dp[i+1][j]+=dp[i]\n    for i in range(k-1):\n        temp=dp.copy()\n        for j in range(n+1):\n            for l in range(26):\n                for k in range(26):\n                    temp[j][k]+=dp[j-1][k] if j>0 else 0\n                temp[j][l]+=dp[j][k]\n        dp=temp\n    ans=0\n    for i in range(n+1):\n        for j in range(26):\n            ans+=dp[i][j]\n    return ans%mod\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2657,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    A = list(map(int, input_string.split()))\n    A.sort(reverse=True)\n    max_comb = 0\n    max_pair = None\n    for i in range(N):\n        for j in range(i+1, N):\n            comb = A[i] * A[j]\n            if comb > max_comb:\n                max_comb = comb\n                max_pair = (A[i], A[j])\n    return \"{} {}\".format(max_pair[1], max_pair[0])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2658,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,K = map(int,input().split())\n    A = list(map(int,input().split())\n    for i in range(K):\n        if i%N == 0:\n            continue\n        else:\n            A = A[A[i%N-1]-1]\n    return A[0]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2659,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k=int(input())\n    n=1\n    count=0\n    while(count<k):\n        if n%10==0:\n            n+=1\n        else:\n            s=sum(int(i) for i in str(n))\n            if n/s<=n+1:\n                print(n)\n                count+=1\n            n+=1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2660,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\ta=list(map(int,input().split()))\n    \\tQ=a[0]\n    \\tf=lambda x: abs(x-a)+b\n    \\tfor i in range(Q):\n    \\t\\tquery=list(map(int,input().split())\n    \\t\\tif query[0]==1:\n    \\t\\t\\ta,b=query[1],query[2]\n    \\t\\t\\tf=lambda x: abs(x-a)+b\n    \\t\\telse:\n    \\t\\t\\tmin_x=float('inf')\n    \\t\\t\\tmin_f=float('inf')\n    \\t\\t\\tfor x in range(min(a,b)+1):\n    \\t\\t\\t\\tf_x=f(x)\n    \\t\\t\\t\\tif f_x<min_f:\n    \\t\\t\\t\\t\\tmin_f=f_x\n    \\t\\t\\t\\t\\tmin_x=x\n    \\t\\t\\tprint(min_x,min_f)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2661,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    S = list(map(int, input_string.split()))\n    T = list(map(int, input_string.split())\n    U = list(map(int, input_string.split())\n    V = list(map(int, input_string.split())\n    a = [[0 for _ in range(N)] for _ in range(N)]\n    for i in range(N):\n        for j in range(N):\n            if S[i] == 0:\n                a[i][j] = U[i]\n            else:\n                a[i][j] = 2**64 - 1\n            if T[j] == 0:\n                a[i][j] &= V[j]\n            else:\n                a[i][j] |= V[j]\n    for i in range(N):\n        for j in range(N):\n            if S[i] == 1:\n                a[i][j] = U[i]\n            else:\n                a[i][j] = 0\n            if T[j] == 1:\n                a[i][j] |= V[j]\n            else:\n                a[i][j] &= V[j]\n    for row in a:\n        print(\" \".join(map(str, row))\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2662,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    A = list(map(int, input_string.split()))\n    A.sort()\n    colors = {}\n    for i in range(N):\n        if A[i] not in colors:\n            colors[A[i]] = 1\n        else:\n            colors[A[i]] += 1\n    return len(colors)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2663,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=list(map(int,input().split()))\n    a=list(map(int,input().split())\n    l=[]\n    for i in range(n):\n        for j in range(i,n):\n            l.append(sum(a[i:j+1])\n    l.sort(reverse=True)\n    return l[:k]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2664,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    v = eval(input())\n    if v == 0:\n        print(\"1\")\n        print(\"1 1\")\n        print(\"1 1\")\n        print(0)\n        print(\"1\")\n        print(\"1 2\")\n        print(-1)\n        print(\"2\")\n        print(5)\n    else:\n        print(\"1\")\n        print(\"3 1 2 5\")\n        print(4)\n        print(\"1\")\n        print(\"0\")\n        print(\"1 2\")\n        print(-1)\n        print(\"1\")\n        print(\"0\")\n        print(\"1 5\")\n        print(-2)\n        print(\"2\")\n        print(5)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2665,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2666,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=list(map(int,input().split()))\n    prices=list(map(int,input().split()))\n    max_profit=0\n    for i in range(n-k+1):\n        for j in range(i+1,n-k+2):\n            for l in range(j+1,n-k+3):\n                for m in range(l+1,n-k+4):\n                    profit=prices[j]-prices[i]+prices[l]-prices[m]\n                    if profit>max_profit:\n                        max_profit=profit\n    return max_profit\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2667,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    C=list(map(int,input().split())\n    total=sum(C)\n    if total%N==0:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2668,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c=map(int,input().split())\n    if c<a+b:\n        return \"Unlucky Chef\"\n    else:\n        return \"Lucky Chef\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2669,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input()) \n    s=list(map(int,input().split()))\n    f=list(map(int,input().split())\n    s.sort()\n    f.sort()\n    i=0\n    j=0\n    ans=[]\n    while i<t and j<t:\n        if s[i]<=f[j]:\n            ans.append(i)\n            i+=1\n        else:\n            j+=1\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2670,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b = input().split()\n    n = len(a)\n    m = len(b)\n    dp = [[0]*(m+1) for i in range(n+1)]\n    for i in range(n+1):\n        for j in range(m+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif a[i-1] == b[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[n][m]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2671,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = map(int,input().split())\n    boxes = list(map(int,input().split())\n    queries = list(map(int,input().split())\n    for i in range(m):\n        print(min_boxes(boxes,queries[i])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2672,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x=int(input())\n    if x==1:\n        return 1\n    elif x==2:\n        return 3\n    else:\n        return (solution(x-1)+solution(x-2))%100000007\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2673,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input().strip()\n    n = len(s)\n    dp = [0] * n\n    dp[0] = 0\n    for i in range(1, n):\n        dp[i] = float('inf')\n        if s[i] == s[i-1]:\n            dp[i] = dp[i-1]\n        if i-1 >= 0 and s[i-1] == s[i]:\n            dp[i] = min(dp[i], dp[i-1])\n        if i+1 < n and s[i+1] == s[i]:\n            dp[i] = min(dp[i], dp[i+1])\n        if i-1 >= 0 and s[i-1] == s[i+1]:\n            dp[i] = min(dp[i], dp[i-1]+1)\n        if i+1 < n and s[i-1] == s[i+1]:\n            dp[i] = min(dp[i], dp[i+1]+1)\n    return dp[-1]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2674,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\\r\n    if int(s) > 100 and int(s) < 1000:\n        return \"Inclusive\"\n    else:\n        return \"Exclusive\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2675,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int,input().split())\n    x = []\n    u = []\n    y = []\n    v = []\n    for i in range(n):\n        x.append(int(input().split()[0])), u.append(int(input().split()[1])\n    for i in range(m):\n        y.append(int(input().split()[0])), v.append(int(input().split()[1])\n    t = 0\n    collisions = 0\n    while True:\n        min_t = float('inf')\n        for i in range(n):\n            for j in range(m):\n                if x[i] == y[j]:\n                    t = min(t, (abs(x[i]-y[j])/u[i])\n        if t == float('inf'):\n            break\n        for i in range(n):\n            x[i] += u[i]*t\n        for j in range(m):\n            y[j] += v[j]*t\n        collisions += 1\n    return collisions\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2676,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    strings=[]\n    for i in range(n):\n        strings.append(input())\n    m=int(input())\n    b=input()\n    count=0\n    for i in range(n):\n        if b in strings[i]:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2677,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    vowels=['A','E','I','O','U']\n    consonants=['B','C','D','F','G','H','J','K','L','M','N','P','Q','R','S','T','V','W','X','Y','Z']\n    vowel_count=0\n    consonant_count=0\n    for i in range(len(s)-2):\n        if s[i] in vowels and s[i+1] in vowels and s[i+2] in vowels:\n            vowel_count+=1\n        if s[i] in consonants and s[i+1] in consonants and s[i+2] in consonants and s[i+1]!=s[i] and s[i+2]!=s[i+1] and s[i+2]!=s[i]:\n            consonant_count+=1\n    if vowel_count>=3 and consonant_count>=5:\n        return \"GOOD\"\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2678,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    intervals = []\n    for i in range(n):\n        a, b = map(int, input().split())\n        intervals.append((a, b))\n    intervals.sort(key=lambda x: x[1])\n    count = 0\n    i = 0\n    while i < len(intervals):\n        max_val = intervals[i][1]\n        while i < len(intervals) and intervals[i][1] == max_val:\n            i += 1\n        count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2679,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\\r\n    coins = list(map(int, input().split()))\n    max_sum = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            subarray = coins[i:j]\n            if len(subarray) % 2 == 0:\n                subarray_sum = sum(subarray[:len(subarray)//2]) + sum(subarray[len(subarray)//2:])\n            else:\n                subarray_sum = sum(subarray[:len(subarray)//2]) + sum(subarray[len(subarray)//2+1:])\n            max_sum = max(max_sum, subarray_sum)\n    return max_sum\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2680,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, b = list(map(int, input().split()))\n    x = list(map(int, input().split()))\n    y = list(map(int, input().split())\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2681,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=int(input())\n    b=int(input())\n    c=input()\n    if c==\"+\":\n        return a+b\n    elif c==\"-\":\n        return a-b\n    elif c==\"*\":\n        return a*b\n    else:\n        return a/b\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2682,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n, k = map(int, input().split())\n        deck = [i for i in range(n)]\n        for j in range(n):\n            deck = deck[::2] + deck[1::2]\n        print(deck.index(k))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2683,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n,k=map(int,input().split())\n        board=[]\n        for j in range(n):\n            board.append(list(input())\n        if k==1:\n            for i in range(n):\n                for j in range(n):\n                    if board[i][j]=='.':\n                        board[i][j]='X'\n                        if check_win(board,n,k):\n                            print(\"YES\")\n                            break\n                else:\n                    continue\n                break\n            else:\n                print(\"NO\")\n        else:\n            for i in range(n):\n                for j in range(n):\n                    if board[i][j]=='.':\n                        board[i][j]='X'\n                        if check_win(board,n,k):\n                            print(\"YES\")\n                            break\n                else:\n                    continue\n                break\n            else:\n                print(\"NO\")\ndef check_win(board,n,k):\n    for i in range(n):\n        for j in range(n):\n            if board[i][j]=='.':\n                board[i][j]='X'\n                if check_row(board,n,k) or check_col(board,n,k) or check_diag(board,n,k):\n                    return True\n                board[i][j]='.'\n    return False\ndef check_row(board,n,k):\n    for i in range(n):\n        count=0\n        for j in range(n):\n            if board[i][j]=='X':\n                count+=1\n                if count==k:\n                    return True\n            else:\n                count=0\n    return False\ndef check_col(board,n,k):\n    for j in range(n):\n        count=0\n        for i in range(n):\n            if board[i][j]=='X':\n                count+=1\n                if count==k:\n                    return True\n            else:\n                count=0\n    return False\ndef check_diag(board,n,k):\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2684,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n= int(input())\n    input_string = input()\n    max_length = 0\n    max_palindrome = \"\"\n    for i in range(n):\n        for j in range(i, n):\n            substring = input_string[i:j+1]\n            if substring == substring[::-1] and len(substring) > max_length:\n                max_length = len(substring)\n                max_palindrome = substring\n    return max_length, max_palindrome\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2685,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l = str(input())\n    x, y = map(int, input().split())\n    count_0 = l.count('0')\n    count_1 = l.count('1')\n    count_empty = l.count('?')\n    total_cost = count_0 * x + count_1 * y\n    if count_empty == 0:\n        return total_cost\n    elif count_0 == 0:\n        return total_cost - count_empty * y\n    elif count_1 == 0:\n        return total_cost - count_empty * x\n    else:\n        return total_cost - count_empty * min(x, y)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2686,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=[int(x) for x in input().split()]\\r\n    close_buildings=[]\n    for i in range(m):\n        close_buildings.append([int(x) for x in input().split()])\n    start,end=[int(x) for x in input().split()]\n    # Write your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2687,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    K = int(input())\n    result = []\n    for i in range(1, 2*K+1):\n        result.append(0)\n    for i in range(1, 2*K+1):\n        result[i-1] = 1\n    for i in range(2, 2*K+1):\n        for j in range(1, i):\n            result[i-1] = (result[i-1] + result[i-j-1]) % (10**9+9)\n    for i in range(1, 2*K+1):\n        print(result[i-1])\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2688,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\\r\n    input_list=list(map(int,input().split()))\n    cycles=[]\n    visited=[False]*n\n    for i in range(n):\n        if not visited[i]:\n            cycle=[]\n            j=i\n            while not visited[j]:\n                visited[j]=True\n                cycle.append(j+1)\n                j=input_list.index(j+1)\n            cycles.append(cycle)\n    print(len(cycles))\n    for cycle in cycles:\n        print(\" \".join(map(str,cycle))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2689,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\\r\n    n = len(s)\n    i = 0\n    while i < n:\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < n and s[i] != '-':\n                i += 1\n            sub_str = s[i-1:i+1]\n            i += 1\n            while i < n and s[i].isalpha():\n                sub_str += s[i]\n                i += 1\n            i += 1\n            input_string = input_string.replace(s[i-len(sub_str)-1:i], sub_str*count)\n        else:\n            i += 1\n    if input_string == input_string[::-1]:\n        return \"Return\"\n    else:\n        return \"Continue\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2690,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    st=input().strip()\n    n=len(st)\n    max_dist=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if st[i]!=st[j]:\n                max_dist=max(max_dist,abs(i-j))\n    return max_dist\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2691,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, P = map(int, input().split())\n    S = input()\n    max_len = 0\n    count = 0\n    for i in range(N):\n        if S[i] == 'd':\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            count = 0\n        max_len = max(max_len, count)\n    count = 0\n    for i in range(N-1, -1, -1):\n        if S[i] == 'u':\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            count = 0\n        max_len = max(max_len, count)\n    return max_len\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2692,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,b=map(int,input().split())\n    if n%b==0:\n        return n\n    else:\n        return n+(b-(n%b)%b)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2693,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s,p,k = map(int,input().split())\n    if k==1:\n        if p==s:\n            return str(s)\n        else:\n            return \"NO\"\n    elif k==2:\n        if p==s*s:\n            return str(s)+\" \"+str(s)\n        elif p==s:\n            return str(1)+\" \"+str(s)\n        else:\n            return \"NO\"\n    else:\n        for i in range(1,s//2+1):\n            for j in range(1,s//2+1):\n                if i*j==p and i+j==s:\n                    return str(i)+\" \"+str(j)+\" \"+str(s-i-j)\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2694,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k =map(int, input().split())\n    blasters = []\n    for i in range(k):\n        x, y, t, f = map(int, input().split())\n        blasters.append((x, y, t, f))\n    blasters.sort(key=lambda x: x[2])\n    time = 0\n    while blasters:\n        blaster = blasters.pop(0)\n        x, y, t, f = blaster\n        if t > time:\n            time = t\n        if x == 1 and y == 1:\n            return \"YES\\n{}\".format(time)\n        if x == 1:\n            time += 1\n        elif y == 1:\n            time += 1\n        else:\n            time += 2\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2695,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    A,B,data = list(input()),input(),list(map(int,input().split()))\n    count = 0\n    for i in data:\n        if A[i-1] == B[count]:\n            count += 1\n        else:\n            break\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2696,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    colors=list(map(int,input().split())\n    colors.sort()\n    return colors[n-1]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2697,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=int(input())\n    count=0\n    for i in range(1,a+1):\n        if a%i==0:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2698,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    m,v = map(int, input().split())\n    lanes = []\n    for i in range(m):\n        d,a = map(int, input().split())\n        lanes.append((d,a))\n    lanes.sort(key=lambda x: x[0])\n    count = 0\n    for i in range(len(lanes)):\n        if i == 0:\n            count += min(v,lanes[i][1])\n        else:\n            if lanes[i][0] == lanes[i-1][0]+1:\n                count += min(v,lanes[i][1])\n            elif lanes[i][0] == lanes[i-1][0]:\n                count += min(v,lanes[i][1]+lanes[i-1][1])\n            else:\n                count += min(v,lanes[i][1])\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2699,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        for j in range(1,n+1):\n            for k in range(j):\n                print(j,end=\" \")\n            print()\n            for k in range(1,n+1):\n                print(k*j,end=\" \")\n            print()\n            for k in range(1,n+1):\n                print(k*j*(k+1),end=\" \")\n            print()\n            print()\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2700,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = eval(input())\n    for i in range(t):\n        a, b, c, d = map(int, input().split())\n        count = 0\n        for x in range(a, b+1):\n            for y in range(c, d+1):\n                if x < y:\n                    count += 1\n        print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2701,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, K = list(map(int, input().split()))\n    apples = list(map(int, input().split()))\n    if sum(apples) < K*2:\n        return -1\n    apples.sort()\n    left_dog = 0\n    right_dog = N-1\n    while left_dog < right_dog:\n        if apples[left_dog] + apples[right_dog] == K:\n            return 1\n        elif apples[left_dog] + apples[right_dog] < K:\n            left_dog += 1\n        else:\n            right_dog -= 1\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2702,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    statements = input_string.split('\\n')\n    max_count = 0\n    for i in range(n):\n        statement = statements[i].split()\n        count = 0\n        for j in range(n):\n            if statement[j] == 'T':\n                count += 1\n        if count > max_count:\n            max_count = count\n    return max_count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2703,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,q=list(map(int,input().split()))\n    arr=list(map(int,input().split())\n    for i in range(q):\n        x=int(input())\n        count=0\n        for i in range(n):\n            if arr[i]>x:\n                count+=arr[i]-x\n            else:\n                count+=arr[i]\n        print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2704,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x,y=map(int,input().split())\n    A=list(map(int,input().split())\n    for i in range(y):\n        t=int(input())\n        if t in A:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2705,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k=(list(map(int,input().split())))\n    a=list(map(int,input().split())\n    max_beauty=0\n    for i in range(m):\n        for j in range(n):\n            for l in range(j,n):\n                subarray=a[j:l+1]\n                beauty=len(subarray)\n                for i in range(len(subarray)):\n                    if subarray[i]%k==0:\n                        beauty-=1\n                max_beauty=max(max_beauty,beauty)\n    return max_beauty\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2706,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = eval(input());\n    k = eval(input());\n    numbers = []\n    for i in range(N):\n        q = eval(input())\n        if q >= 0:\n            numbers.append(q)\n        else:\n            numbers.sort()\n            print(numbers[k-1])\n            numbers.remove(numbers[k-1])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2707,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=[int(i) for i in input().split()]\n    A=[int(i) for i in input().split()]\n    mod=10**9+7\n    def mex(arr):\n        arr=sorted(list(set(arr))\n        mex=0\n        for i in range(len(arr)):\n            if arr[i]!=i:\n                mex=i\n                break\n        return mex\n    ans=1\n    for i in range(n):\n        ans*=mex(A[:i+1])\n        ans%=mod\n    return ans%mod\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2708,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\\r\n    for i in range(k):\n        if n%10==0:\n            n//=10\n        else:\n            n-=1\n    return n\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2709,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, t = map(int, input_string.split())\n    A = list(map(int, input_string.split()))[2:]\n    \n    if t == 1:\n        print(7)\n    elif t == 2:\n        if A[0] > A[1]:\n            print(\"Bigger\")\n        elif A[0] == A[1]:\n            print(\"Equal\")\n        else:\n            print(\"Smaller\")\n    elif t == 3:\n        A.sort()\n        print(A[1])\n    elif t == 4:\n        print(sum(A))\n    elif t == 5:\n        print(sum([x for x in A if x % 2 == 0])\n    elif t == 6:\n        A = [chr((x % 26) + 97) for x in A]\n        print(\"\".join(A))\n    elif t == 7:\n        i = 0\n        while i < N:\n            if i >= N or i == N-1:\n                print(\"Done\")\n                break\n            i = A[i]\n            if i in A[:i]:\n                print(\"Cyclic\")\n                break\n        else:\n            print(\"Out\")\n    else:\n        print(\"Invalid t\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2710,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(lambda x :int(x), input().strip().split())\n    a = list(map(int, input().strip().split())\n    b = list(map(int, input().strip().split())\n    roads = []\n    for i in range(m):\n        p, q = map(int, input().strip().split())\n        roads.append((p, q))\n        roads.append((q, p))\n    # Your code here\n    return \"YES\" if possible(n, a, b, roads) else \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2711,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    pages = [[] for _ in range(n)]\n    for i in range(n):\n        p, k = map(int, input().split())\n        pages[p] = input().split()\n    for i in range(n):\n        for j in range(k):\n            pages[i].append(input())\n    for i in range(n):\n        for j in range(k):\n            for word in pages[i]:\n                for char in word:\n                    if char not in pages[i][j]:\n                        pages[i][j] = pages[i][j].replace(char, \"\")\n    for i in range(n):\n        for j in range(k):\n            for word in pages[i]:\n                for char in word:\n                    if char not in pages[i][j]:\n                        pages[i][j] = pages[i][j].replace(char, \"\")\n    for i in range(n):\n        for j in range(k):\n            for word in pages[i]:\n                for char in word:\n                    if char not in pages[i][j]:\n                        pages[i][j] = pages[i][j].replace(char, \"\")\n    for i in range(n):\n        for j in range(k):\n            for word in pages[i]:\n                for char in word:\n                    if char not in pages[i][j]:\n                        pages[i][j] = pages[i][j].replace(char, \"\")\n    for i in range(n):\n        for j in range(k):\n            for word in pages[i]:\n                for char in word:\n                    if char not in pages[i][j]:\n                        pages[i][j] = pages[i][j].replace(char, \"\")\n    for i in range(n):\n        for j in range(k):\n            for word in pages[i]:\n                for char in word:\n                    if char not in pages[i][j]:\n                        pages[i][j] = pages[i][j].replace(char, \"\")\n    for i in range(n):\n        for j in range(k):\n            for word in pages[i]:\n                for char",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2712,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c=map(int,input().split())\n    d=a+b+c\n    print(d)\n    return d\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2713,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"Legend\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2714,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n,m=map(int,input().split())\n        edges=[]\n        for j in range(m):\n            u,v=map(int,input().split())\n            edges.append((u,v) if u<v else (v,u))\n        edges=set(edges)\n        ans=0\n        for i in range(1,n+1):\n            for j in range(1,n+1):\n                if i!=j and (i,j) not in edges:\n                    ans+=1\n        print(ans%998244353)\nsolution(input())\n# End your code here\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2715,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=50;P,Q=divmod(int(input()),N);R=N-Q;print(N,*[P+R-1]*R+[P+R+N]*Q)\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2716,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, t = map(int, input_string.split())\n    A = list(map(int, input_string.split()))\n    \n    if t == 1:\n        A.sort()\n        for i in range(len(A)-1):\n            for j in range(i+1, len(A)):\n                if A[i] + A[j] == 777:\n                    return \"Yes\"\n        return \"No\"\n    elif t == 2:\n        if len(A) == len(set(A)):\n            return \"Unique\"\n        else:\n            return \"Contains duplicate\"\n    elif t == 3:\n        count = {}\n        for i in A:\n            if i in count:\n                count[i] += 1\n            else:\n                count[i] = 1\n        for i in count:\n            if count[i] > N/2:\n                return i\n        return -1\n    elif t == 4:\n        A.sort()\n        if N % 2 == 0:\n            return str(A[N//2-1]) + \" \" + str(A[N//2])\n        else:\n            return str(A[N//2])\n    elif t == 5:\n        result = []\n        for i in A:\n            if 100 <= i <= 99:\n                result.append(i)\n        result.sort()\n        return \" \".join(map(str, result))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2717,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2718,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, M = map(int, input_string.split())\n    if N % M == 0:\n        return \"win\"\n    else:\n        return \"lose\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2719,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Hint: use a set to store the coordinates of the needles and check for true and floor closed chains\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2720,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2721,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    m, l, M, L, t_m, t_l = map(int, input_string.split())\n    if abs(m-M) + abs(l-L) <= max(t_m, t_l):\n        return \"possible\"\n    else:\n        return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2722,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"FLFRXFLFRFLFRF\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2723,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2724,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Hint: You can use the split() function to split the input string into lines and then split each line into two integers\n    # You can use the map() function to convert the strings to integers\n    # You can use the max() function to find the maximum distance between any two points\n    # You can use the sum() function to calculate the total distance travelled by a student\n    # You can use a nested loop to iterate over all possible pairings of students and tutors\n    # You can use the abs() function to calculate the distance between two points\n    # You can use the min() function to find the minimum distance travelled by any student\n    # You can use the math.ceil() function to round up the distance to the nearest integer\n    # You can use the math.sqrt() function to calculate the Euclidean distance between two points\n    # You can use the itertools.combinations() function to generate all possible pairings of students and tutors\n    # You can use the itertools.permutations() function to generate all possible pairings of students and tutors\n    # You can use the itertools.product() function to generate all possible pairings of students and tutors\n    # You can use the zip() function to iterate over two lists simultaneously\n    # You can use the sorted() function to sort a list of tuples by the second element of each tuple\n    # You can use the sorted() function to sort a list of integers\n    # You can use the sum() function to sum a list of integers\n    # You can use the min() function to find the minimum value in a list\n    # You can use the max() function to find the maximum value in a list\n    # You can use the math.inf constant to represent infinity\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2725,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split('\\n')[0])\n    weights = input_string.split('\\n')[1:]\n    weights = [int(w) for w in weights]\n    weights.sort()\n    weights.reverse()\n    for i in range(len(weights)):\n        for j in range(i+1, len(weights)):\n            if weights[i] + weights[j] in weights:\n                continue\n            else:\n                return \"impossible\"\n    return weights\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2726,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, c = map(int, input_string.split())\n    cards = list(map(int, input_string.split()))\n    cards.sort()\n    expected_score = 0\n    for i in range(c):\n        expected_score += cards[i]\n    for i in range(c, n):\n        if cards[i] > cards[i-1]:\n            expected_score += cards[i]\n            break\n    return expected_score / n\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2727,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, L = map(int, input_string.split())\n    G = list(map(int, input_string.split()))\n    count = 0\n    for i in range(1, N+1):\n        for j in range(1, N+1):\n            if i == G[0]:\n                count += 1\n            elif i == G[1]:\n                count += 1\n            elif i == G[2]:\n                count += 1\n            elif i == G[3]:\n                count += 1\n            elif i == G[4]:\n                count += 1\n            elif i == G[5]:\n                count += 1\n    return count % (10**9 + 7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2728,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Hint: You can use the split() function to split the input string into two parts: the first line with N and the second line with the sizes of the class sections.\n    # Then, you can use the map() function to convert the second line into a list of integers.\n    # You can use a loop to iterate through the class sections and check if it is possible to load them onto 3 buses.\n    # If it is possible, return the two integers i and j as described in the problem statement. If not, return -1.\n    # You can use the enumerate() function to get the index and value of each element in the list of class sections.\n    # You can use the sum() function to calculate the total number of students on each bus.\n    # You can use the modulo operator to check if the total number of students on each bus is divisible by 3.\n    # If it is not divisible by 3, then it is not possible to have a teacher free bus ride.\n    # If it is divisible by 3, then you can check if the last two buses have the same number of students.\n    # If they do, then it is possible to have a teacher free bus ride.\n    # If not, then it is not possible to have a teacher free bus ride.\n    # You can use the max() function to find the maximum size of a class section.\n    # If the maximum size is greater than 3, then it is not possible to have a teacher free bus ride.\n    # If the maximum size is less than or equal to 3, then you can check if the sum of the first two buses is equal to the total number of students.\n    # If it is, then it is possible to have a teacher free bus ride.\n    # If not, then it is not possible to have a teacher free bus ride.\n    # You can use the index() function to find the index of the maximum size class section.\n    # If the index is less than 3, then you can return the index and the index+1 as the two integers i and j.\n    # If the index is greater than 2, then you can return the index-2 and the index as the two integers i and j.\n    # If the index is 2, then you can return 1 and 3 as the",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2729,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, M = map(int, input_string.split())\n    result = N/M\n    return \"{:.5f}\".format(result)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2730,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, K = map(int, input_string.split())\n    prob = 1\n    for i in range(K):\n        prob *= (N-i)/N\n    return 1-prob\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2731,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Remove the first and last curly bracket\n    input_string = input_string[1:-1]\n    \n    # Split the input string by comma\n    input_list = input_string.split(',')\n    \n    # Initialize the output string\n    output_string = \"{\\n\"\n    \n    # Loop through the input list\n    for i in range(len(input_list)):\n        # If the element is not an array, add it to the output string with 2 spaces of indentation\n        if input_list[i][0] != '{':\n            output_string += \"  \" + input_list[i] + \",\\n\"\n        # If the element is an array, add it to the output string with 4 spaces of indentation\n        else:\n            output_string += \"    \" + solution(input_list[i])\n    \n    # Remove the last comma and add the closing curly bracket\n    output_string = output_string[:-2] + \"\\n}\"\n    \n    return output_string\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2732,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    W = float(input_string)\n    t = 2*pi*sqrt(2)\n    r = 1\n    x1 = 1\n    y1 = 0\n    x2 = 2\n    y2 = 0\n    v1 = 1\n    v2 = 2\n    a1 = 1\n    a2 = 1\n    x1_new = x1 + v1*cos(a1)*W\n    y1_new = y1 + v1*sin(a1)*W\n    x2_new = x2 + v2*cos(a2)*W\n    y2_new = y2 + v2*sin(a2)*W\n    distance = sqrt((x1_new-x2_new)**2 + (y1_new-y2_new)**2)\n    return distance\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2733,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return None\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2734,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, k = map(int, input_string.split())\n    M = N\n    while True:\n        if sum(2**i for i in range(k) if 2**i <= M) == M:\n            return M\n        M += 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2735,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2736,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    x, y = map(int, input_string.split())\n    grid = []\n    for i in range(y):\n        row = list(map(int, input().split()))\n        grid.append(row)\n    \n    def flood_fill(x, y, visited):\n        if (x, y) in visited or x < 0 or x >= x or y < 0 or y >= y or grid[x][y] == 0:\n            return 0\n        visited.add((x, y))\n        return 1 + flood_fill(x-1, y, visited) + flood_fill(x+1, y, visited) + flood_fill(x, y-1, visited) + flood_fill(x, y+1, visited)\n    \n    count = 0\n    visited = set()\n    for i in range(y):\n        for j in range(x):\n            count += flood_fill(i, j, visited)\n    \n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2737,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2738,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return output_string\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2739,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, b = map(int, input_string.split())\n    bacteria = 1\n    for i in range(n):\n        bacteria *= 2\n        if bacteria < b[i]:\n            return \"error\"\n        bacteria -= b[i]\n    return bacteria % (10**9+7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2740,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, w, h = map(int, input_string.split())\n    n_max = n // w\n    h_max = n // h\n    total = 0\n    for i in range(1, n_max+1):\n        for j in range(1, h_max+1):\n            total += (n-i*w)//(i+j) + 1\n    return total % (10**9 + 7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2741,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2742,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to an integer\n    n = int(input_string)\n    \n    # Initialize the minimum number of coins to be exchanged\n    min_coins = n\n    \n    # Loop through all possible coin values\n    for i in range(1, n+1):\n        # Calculate the number of coins of value i that can be exchanged\n        num_coins = n // i\n        # Calculate the remaining amount after exchanging the coins\n        remaining_amount = n % i\n        \n        # If the remaining amount is less than the coin value, we can use the remaining amount as the new coin value\n        if remaining_amount < i:\n            num_coins += remaining_amount\n            min_coins = min(min_coins, num_coins)\n        # If the remaining amount is greater than or equal to the coin value, we can use the coin value as the new coin value\n        else:\n            num_coins += i\n            min_coins = min(min_coins, num_coins)\n            \n    return min_coins\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2743,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    h, w = map(int, input_string.split())\n    grid = [list(input_string[h+2:]) for input_string in input_string.split('\\n')]\n    for i in range(h):\n        grid.append(list(input_string.split('\\n')[i])\n    # Your code here\n    return \"left\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2744,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return input_string\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2745,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    words = [\"foo\",\"bar\"]\n    result = []\n    for i in range(len(input_string)):\n        for j in range(len(words)):\n            if input_string[i:i+len(words[j])] == words[j]:\n                result.append(i)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2746,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    version1 = input_string.split('.')\n    version2 = input_string.split('.')\n    \n    for i in range(len(version1)):\n        if int(version1[i]) > int(version2[i]):\n            return 1\n        elif int(version1[i]) < int(version2[i]):\n            return -1\n        else:\n            continue\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2747,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    start = 0\n    end = len(input_string) - 1\n    result = []\n    \n    while start <= end:\n        mid = (start + end) // 2\n        \n        if input_string[mid] == target:\n            result.append(mid)\n            break\n        elif input_string[mid] < target:\n            start = mid + 1\n        else:\n            end = mid - 1\n            \n    start = 0\n    end = len(input_string) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        \n        if input_string[mid] == target:\n            result.append(mid)\n            break\n        elif input_string[mid] < target:\n            start = mid + 1\n        else:\n            end = mid - 1\n            \n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2748,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    mapping = {\n        '2': ['a', 'b', 'c'],\n        '3': ['d', 'e', 'f'],\n        '4': ['g', 'h', 'i'],\n        '5': ['j', 'k', 'l'],\n        '6': ['m', 'n', 'o'],\n        '7': ['p', 'q', 'r', 's'],\n        '8': ['t', 'u', 'v'],\n        '9': ['w', 'x', 'y'],\n    }\n    \n    def backtrack(input_string, start, path, res):\n        if start == len(input_string):\n            res.append(''.join(path))\n            return\n        for char in mapping[input_string[start]]:\n            path.append(char)\n            backtrack(input_string, start+1, path, res)\n            path.pop()\n    \n    res = []\n    backtrack(input_string, 0, [], res)\n    return res\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2749,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    h,w = map(int,input().split())\n    n = int(input())\n    a = list(map(int,input().split())\n    a.sort(reverse=True)\n    if sum(a) != h*w:\n        return \"IMPOSSIBLE\"\n    if n == 1:\n        return \"1\\n\"+\"\\n\".join([\"1\"*w]*h)\n    if n == 2:\n        return \"1\\n\"+\"\\n\".join([str(i%2+1)*w for i in range(h)])\n    if n == 3:\n        return \"1\\n\"+\"\\n\".join([str(i%2+1)+\"2\"*(w-1) for i in range(h)])\n    if n == 4:\n        return \"1\\n\"+\"\\n\".join([str(i%2+1)+\"2\"*(w//2)+str(i%2+2)*(w-w//2) for i in range(h)])\n    if n == 5:\n        return \"1\\n\"+\"\\n\".join([str(i%2+1)+\"2\"*(w//2)+str(i%2+2)*(w-w//2) for i in range(h//2)]+[str(i%2+3)+\"2\"*(w//2)+str(i%2+4)*(w-w//2) for i in range(h//2,h)])\n    if n == 6:\n        return \"1\\n\"+\"\\n\".join([str(i%2+1)+\"2\"*(w//2)+str(i%2+2)*(w-w//2) for i in range(h//2)]+[str(i%2+3)+\"2\"*(w//2)+str(i%2+4)*(w-w//2) for i in range(h//2,h)])\n    if n == 7:\n        return \"1\\n\"+\"\\n\".join([str(i%2+1)+\"2\"*(w//2)+str(i%2+2)*(w-w//2) for i in range(h//2)]+[str(i%2",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2750,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, B = map(int, input_string.split())\n    A = list(map(int, input_string.split()[2:])\n    A.sort()\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] == B:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2751,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return None\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2752,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k = map(int, input_string.split())\n    a = []\n    b = []\n    w = []\n    for i in range(n):\n        a.append(int(input().split()[0])-1)\n        b.append(int(input().split()[0])-1)\n        w.append(input())\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2753,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to list of strings\n    input_list = input_string.split()\n    \n    # Convert strings to datetime objects\n    star1_time = datetime.strptime(input_list[0], '%H:%M')\n    star2_time = datetime.strptime(input_list[1], '%H:%M')\n    star1_interval = datetime.strptime(input_list[2], '%H:%M')\n    star2_interval = datetime.strptime(input_list[3], '%H:%M')\n    \n    # Calculate the time difference between the two stars\n    time_diff = star2_time - star1_time\n    \n    # Calculate the number of days between the two stars\n    days = abs(time_diff.days)\n    \n    # Calculate the number of minutes between the two stars\n    minutes = abs(time_diff.seconds // 60)\n    \n    # Calculate the number of minutes between each flash\n    star1_minutes = star1_interval.seconds // 60\n    star2_minutes = star2_interval.seconds // 60\n    \n    # Calculate the number of days to wait for the first same-minute flash\n    days_to_wait = (star2_minutes - minutes) // (star1_minutes + star2_minutes)\n    \n    # Calculate the time of the first same-minute flash\n    first_same_minute = star1_time + timedelta(days=days_to_wait)\n    \n    # Check if the stars will never flash at the same minute\n    if days_to_wait > days:\n        return \"Never\"\n    \n    # Calculate the day of the week of the first same-minute flash\n    day_of_week = first_same_minute.strftime(\"%A\")\n    \n    # Calculate the time of the first same-minute flash\n    time_of_day = first_same_minute.strftime(\"%H:%M\")\n    \n    # Return the result\n    return day_of_week + \"\\n\" + time_of_day\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2754,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    x, y_low, y_high = map(int, input_string.split())\n    x_curved = 10*math.sqrt(x)\n    k_min = 0\n    k_max = 10000000000000\n    while x_curved < y_low:\n        x_curved = 10*math.sqrt(x_curved)\n        k_min += 1\n    if x_curved > y_high:\n        return \"impossible\"\n    while x_curved > y_high:\n        x_curved = 10*math.sqrt(x_curved)\n        k_max -= 1\n    return k_min, k_max\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2755,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2756,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"you're toast\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2757,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split()[0])\n    values = input_string.split()[1:]\n    values = [int(x) for x in values]\n    return len(values)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2758,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return output_string\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2759,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"Solution\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2760,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N = int(input_string.split('\\n')[0])\n    arr = list(map(int, input_string.split('\\n')[1:]))\n    swaps = []\n    for i in range(N):\n        if i % 2 == 0:\n            swaps.append(arr.index(N-i))\n        else:\n            swaps.append(arr.index(i+1))\n    return swaps\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2761,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2762,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, G, k = map(int, input_string.split())\n    a = list(map(int, input_string.split()))\n    a.sort()\n    min_cost = float('inf')\n    for i in range(1, N):\n        cost = sum([abs(a[j]-a[i])**k for j in range(i, N)])\n        if cost < min_cost:\n            min_cost = cost\n    return min_cost\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2763,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split('\\n')[0])\n    grille = input_string.split('\\n')[1:n+1]\n    message = input_string.split('\\n')[n+1]\n    \n    # Check if the grille is valid\n    for i in range(n):\n        for j in range(n):\n            if grille[i][j] == 'X':\n                continue\n            else:\n                if i == 0 and j == 0:\n                    continue\n                elif i == 0 and j == n-1:\n                    continue\n                elif i == n-1 and j == 0:\n                    continue\n                elif i == n-1 and j == n-1:\n                    continue\n                else:\n                    return \"invalid grille\"\n    \n    # Decrypt the message\n    decrypted_message = \"\"\n    for i in range(n):\n        for j in range(n):\n            if grille[i][j] == '.':\n                decrypted_message += message[i*n+j]\n    \n    return decrypted_message\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2764,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    board = input_string.split(\"\\n\")[:-1]\n    program = input_string.split(\"\\n\")[-1]\n    turtle_x, turtle_y = 0, 7\n    direction = 0\n    for instruction in program:\n        if instruction == \"F\":\n            if board[turtle_y][turtle_x] == \"C\" or board[turtle_y][turtle_x] == \"I\":\n                return \"Bug!\"\n            if direction == 0:\n                turtle_x += 1\n            elif direction == 1:\n                turtle_y += 1\n            elif direction == 2:\n                turtle_x -= 1\n            elif direction == 3:\n                turtle_y -= 1\n        elif instruction == \"R\":\n            direction = (direction + 1) % 4\n        elif instruction == \"L\":\n            direction = (direction - 1) % 4\n        elif instruction == \"X\":\n            if board[turtle_y][turtle_x] == \"I\":\n                board[turtle_y] = board[turtle_y][:turtle_x] + \".\" + board[turtle_y][turtle_x+1:]\n            else:\n                return \"Bug!\"\n    if turtle_x == 3 and turtle_y == 3:\n        return \"Diamond!\"\n    else:\n        return \"Bug!\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2765,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split()[0])\n    coins = list(map(int, input_string.split()[1:]))\n    coins.sort(reverse=True)\n    if n == 1:\n        return \"canonical\"\n    elif coins[0] == 1:\n        return \"non-canonical\"\n    else:\n        for i in range(1, n):\n            if coins[i] == coins[i-1] + coins[i-1]:\n                return \"non-canonical\"\n            elif coins[i] == coins[i-1] + coins[i-1] + 1:\n                return \"canonical\"\n            elif coins[i] == coins[i-1] + coins[i-1] + 2:\n                return \"non-canonical\"\n            elif coins[i] == coins[i-1] + coins[i-1] + 3:\n                return \"canonical\"\n            elif coins[i] == coins[i-1] + coins[i-1] + 4:\n                return \"non-canonical\"\n            elif coins[i] == coins[i-1] + coins[i-1] + 5:\n                return \"canonical\"\n            elif coins[i] == coins[i-1] + coins[i-1] + 6:\n                return \"non-canonical\"\n            elif coins[i] == coins[i-1] + coins[i-1] + 7:\n                return \"canonical\"\n            elif coins[i] == coins[i-1] + coins[i-1] + 8:\n                return \"non-canonical\"\n            elif coins[i] == coins[i-1] + coins[i-1] + 9:\n                return \"canonical\"\n            elif coins[i] == coins[i-1] + coins[i-1] + 10:\n                return \"non-canonical\"\n            elif coins[i] ==",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2766,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k, p = map(float, input_string.split())\n    p = min(p, 1-p)\n    q = 1-p\n    if n == 1:\n        return 0\n    elif k == 1:\n        return 1\n    else:\n        return (1-p)**(k-1) * (1-q)**(n-1) * (1-p)**(k-1) * (1-q)**(n-1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2767,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2768,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2769,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, p, q, s = map(int, input_string.split())\n    x = []\n    y = []\n    for i in range(p):\n        x.append(int(input())\n    for i in range(q):\n        y.append(int(input())\n    \n    x.sort()\n    y.sort()\n    \n    if n > p + q:\n        return -1\n    \n    if n == p + q:\n        return max(x[-1] - x[0], y[-1] - y[0])\n    \n    if n == p:\n        return max(x[-1] - x[0])\n    \n    if n == q:\n        return max(y[-1] - y[0])\n    \n    if n < p + q:\n        return max(x[-1] - x[n-1], y[-1] - y[n-1])\n    \n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2770,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # read input\n    N, a, x, Q = map(int, input_string.split())\n    a = list(map(int, input_string.split()))\n    x = list(map(int, input_string.split()))\n    a = a[1:]\n    x = x[:N]\n    Q = int(input_string)\n    queries = []\n    for i in range(Q):\n        T, M = map(int, input_string.split())\n        queries.append((T, M))\n    \n    # solve recurrence\n    for i in range(N, 1, -1):\n        x[i-1] = (x[i-1] - a[i-1]*x[i]) % M\n    \n    # solve queries\n    for query in queries:\n        T, M = query\n        print(x[T] % M)\n        \n# read input\ninput_string = input()\nN, a, x = map(int, input_string.split())\na = list(map(int, input_string.split()))\nx = list(map(int, input_string.split())\na = a[1:]\nx = x[:N]\nQ = int(input_string)\nqueries = []\nfor i in range(Q):\n    T, M = map(int, input_string.split())\n    queries.append((T, M))\n    \n# solve recurrence\nfor i in range(N, 1, -1):\n    x[i-1] = (x[i-1] - a[i-1]*x[i]) % M\n    \n# solve queries\nfor query in queries:\n    T, M = query\n    print(x[T] % M) ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2771,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = len(input_string) + 1\n    visited = [False] * n\n    result = []\n    for i in range(n):\n        if not visited[i]:\n            result.append(i+1)\n            visited[i] = True\n            j = i\n            while j != 0:\n                if input_string[j-1] == 'L':\n                    j = max(0, j-1)\n                else:\n                    j = min(n-1, j+1)\n                if visited[j]:\n                    break\n                result.append(j+1)\n                visited[j] = True\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2772,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input string to list of tuples\n    input_list = input_string.split('\\n')\n    a, d = map(int, input_list[0].split())\n    ascent = [(int(x), int(y)) for x, y in [input_list[i].split() for i in range(1, a+1)]]\n    descent = [(int(x), int(y)) for x, y in [input_list[i].split() for i in range(a+1, a+d+1)]]\n    \n    # Calculate total elevation change\n    total_elevation_change = sum([x[0] for x in ascent]) - sum([x[0] for x in descent]\n    \n    # Calculate total time\n    total_time = sum([x[1] for x in ascent]) + sum([x[1] for x in descent])\n    \n    # Calculate time at each point along the path\n    ascent_times = [sum([x[1] for x in ascent[:i+1]) for i in range(a)]\n    descent_times = [sum([x[1] for x in descent[:i+1]) for i in range(d)]\n    \n    # Find the time at which the monk is at the same elevation as he was at the start of the ascent\n    for i in range(a):\n        for j in range(d):\n            if ascent_times[i] + descent_times[j] == total_time/2:\n                return (ascent_times[i] + descent_times[j]) / total_time\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2773,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2774,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N, S = map(int, input_string.split()[:2])\n    trails = []\n    for i in range(N-1):\n        a, b, d = map(int, input_string.split()[3*i+2:3*i+5])\n        trails.append((a, b, d))\n    L = int(input_string.split()[-1])\n    lamps = list(map(int, input_string.split()[-L-1:]) if L > 0 else [])\n    \n    # build graph\n    graph = {i: [] for i in range(1, N+1)}\n    for a, b, d in trails:\n        graph[a].append((b, d))\n        graph[b].append((a, d))\n    \n    # Dijkstra's algorithm to find shortest path from 1 to all other nodes\n    dist = {1: 0}\n    for i in range(2, N+1):\n        dist[i] = float('inf')\n    visited = set()\n    queue = [(0, 1)]\n    while queue:\n        d, node = heappop(queue)\n        if node not in visited:\n            visited.add(node)\n            for neighbor, length in graph[node]:\n                if neighbor not in visited:\n                    new_dist = d + length\n                    if new_dist < dist.get(neighbor, float('inf')):\n                        dist[neighbor] = new_dist\n                        heappush(queue, (new_dist, neighbor)\n    \n    # count number of lamps needed\n    lamps_needed = 0\n    for i in range(2, N+1):\n        if dist[i] > S:\n            lamps_needed += 1\n    \n    # count number of lamps already placed\n    lamps_placed = len(lamps)\n    \n    # return minimum number of lamps needed\n    return max(0, lamps_needed - lamps_placed)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2775,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2776,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, M = map(int, input_string.split())\n    if M == 0:\n        return 2**N\n    \n    graph = [[] for _ in range(N+1)]\n    for _ in range(M):\n        a, b = map(int, input().split())\n        graph[a].append(b)\n        graph[b].append(a)\n    \n    def dfs(node, visited, path):\n        if node in visited:\n            return\n        visited.add(node)\n        for neighbor in graph[node]:\n            dfs(neighbor, visited, path)\n        path.append(node)\n    \n    count = 0\n    for i in range(1, N+1):\n        visited = set()\n        path = []\n        dfs(i, visited, path)\n        count += 2**(len(path)-1)\n    \n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2777,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2778,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, K, T = map(int, input_string.split())\n    mod = 100000009\n    dp = [0] * (T+1)\n    dp[0] = 1\n    for i in range(1, N+1):\n        for j in range(K, T+1):\n            dp[j] += dp[j-i]\n            dp[j] %= mod\n    return dp[T]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2779,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2780,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, M = map(int, input_string.split())\n    prob = [0] * (M+1)\n    for i in range(1, M+1):\n        prob[i] = 1/M\n    return prob\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2781,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of lists\n    grid = [list(map(int, row.split())) for row in input_string.split('\\n')]\n    \n    # Initialize variables\n    r, c = len(grid), len(grid[0])\n    max_depth = 0\n    \n    # Loop through each cell in the grid\n    for i in range(r):\n        for j in range(c):\n            # Check if the cell is in the leftmost or rightmost column\n            if j == 0 or j == c-1:\n                # Calculate the depth of the mud\n                depth = grid[i][j]\n                # Update the maximum depth\n                max_depth = max(max_depth, depth)\n                \n    return max_depth\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2782,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2783,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2784,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2785,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2786,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2787,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Parse input\n    N, M = map(int, input_string.split()[:2])\n    start, target = input_string.split()[2:4]\n    airports = {}\n    for i in range(N):\n        airport, lat, lon = input_string.split()[4+i*3:7+i*3]\n        airports[airport] = (float(lat), float(lon))\n    routes = []\n    for i in range(M):\n        a, b = input_string.split()[4+N*3+i*2:6+N*3+i*2]\n        routes.append((a, b))\n        routes.append((b, a))\n    \n    # Calculate distances\n    distances = {}\n    for a, b in routes:\n        lat1, lon1 = airports[a]\n        lat2, lon2 = airports[b]\n        R = 6371 # Radius of the earth in km\n        dlat = math.radians(lat2-lat1)\n        dlon = math.radians(lon2-lon1)\n        a = (math.sin(dlat/2)**2 + math.cos(math.radians(lat1)) * math.cos(math.radians(lat2)) * math.sin(dlon/2)**2)\n        c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n        distance = R * c\n        distances[(a, b)] = distance\n    \n    # Calculate shortest path\n    def dijkstra(start, target):\n        visited = set()\n        queue = [(0, start, [])]\n        while queue:\n            (cost, node, path) = heapq.heappop(queue)\n            if node not in visited:\n                visited.add(node)\n                if node == target:\n                    return cost, path\n                for neighbor in airports:\n                    if neighbor not in visited and (node, neighbor) in distances:\n                        heapq.heappush(queue, (cost+distances[(node, neighbor]+100, neighbor, path+[ne",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2788,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, groups, k, x, a, b = map(int, input_string.split())\n    groups = sorted(groups, reverse=True)\n    total_lunches = sum(groups)\n    max_lunches = k * x\n    max_students = 0\n    \n    for i in range(1, len(groups) + 1):\n        if total_lunches - sum(groups[:i]) >= k:\n            max_students = i\n        else:\n            break\n    \n    if max_students * x > total_lunches:\n        return 'impossible'\n    elif max_students * x + b >= total_lunches:\n        return max_students * x\n    else:\n        return max_students * x + b\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2789,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N = int(input_string)\n    if N % 2 == 0:\n        return N // 2\n    else:\n        return (N + 1) // 2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2790,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, s, t = map(int, input_string.split()[:3])\n    knapsacks = list(map(int, input_string.split()[3:])[:n])\n    min_time = max_time = avg_time = 0\n    for i in range(s):\n        min_time_i = max_time_i = 0\n        for j in range(n):\n            if knapsacks[j] == i:\n                min_time_i += t\n                max_time_i += t\n            elif abs(knapsacks[j] - i) < abs(knapsacks[j] - (i+1):\n                min_time_i += abs(knapsacks[j] - i) + t\n                max_time_i += abs(knapsacks[j] - (i+1) + s) + t\n            else:\n                min_time_i += abs(knapsacks[j] - (i+1) + s) + t\n                max_time_i += abs(knapsacks[j] - i) + t\n        min_time += min_time_i\n        max_time += max_time_i\n        avg_time += (min_time_i + max_time_i) / 2\n    return min_time, max_time, avg_time\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2791,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, d = map(int, input_string.split())\n    a = list(map(int, input_string.split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i]//d == a[j]//d:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2792,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return output_string\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2793,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m, s, t = map(int, input_string.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v, w = map(int, input().split())\n        graph[u].append((v, w))\n        graph[v].append((u, w))\n    \n    def dfs(node, visited, parent, weight):\n        visited[node] = True\n        for neighbor, w in graph[node]:\n            if not visited[neighbor]:\n                weight[node] += w\n                dfs(neighbor, visited, parent, weight)\n                \n    def min_cut(s, t):\n        visited = [False] * n\n        parent = [-1] * n\n        weight = [0] * n\n        dfs(s, visited, parent, weight)\n        min_weight = float('inf')\n        for i in range(n):\n            if not visited[i]:\n                visited = [False] * n\n                dfs(i, visited, parent, weight)\n                min_weight = min(min_weight, weight[t])\n        return min_weight\n    \n    min_weight = min_cut(s, t)\n    U = []\n    for i in range(n):\n        if not visited[i]:\n            U.append(i)\n    return len(U), U\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2794,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    h, c = map(int, input_string.split())\n    coworkers = []\n    for i in range(c):\n        a, d = map(int, input().split())\n        coworkers.append((a, d))\n    \n    # Your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2795,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0.0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2796,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return None\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2797,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    a, b = map(int, input_string.split())\n    if b % 2 == 0:\n        return \"Invalid input\"\n    else:\n        result = 0\n        for i in range(1, b+1):\n            result += i**b\n        return result % a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2798,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return input_string\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2799,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    R, G, B, Y, S = map(int, input_string.split())\n    total_fruits = R + G + B + Y\n    total_steps = 6 * total_fruits\n    win_prob = 0\n    \n    for i in range(S+1):\n        # Calculate the probability of the players winning in i steps\n        # If the raven reaches the orchard in i steps, the players lose\n        # Otherwise, calculate the probability of the players winning in the remaining steps\n        # Add the probability of winning in i steps to the total win probability\n        pass\n    \n    return win_prob\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2800,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"Alice can win.\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2801,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2802,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    times = list(map(float, input_string.split()))\n    target = float(input())\n    times.sort()\n    if sum(times) / 3 > target:\n        return \"impossible\"\n    else:\n        return round(sum(times[1:4]) / 3, 2)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2803,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"goat\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2804,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    A, B = map(int, input().split())\n    words = []\n    for i in range(A):\n        words.append(input())\n    return \" \".join(words)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2805,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N = int(input_string)\n    counter = 0\n    for i in range(N-1, 0, -1):\n        if N % i == 0:\n            counter += 1\n            break\n        counter += 1\n    return counter\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2806,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return None\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2807,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2808,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2809,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2810,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # read input\n    m, n = map(int, input_string.split())\n    connections = []\n    for i in range(n):\n        s, t = map(int, input().split())\n        connections.append((s, t))\n    \n    # create adjacency matrix\n    adj_matrix = [[0] * m for _ in range(m)]\n    for s, t in connections:\n        adj_matrix[s][t] = 1\n        adj_matrix[t][s] = 1\n    \n    # find simple loops\n    loops = set()\n    for i in range(m):\n        for j in range(m):\n            if adj_matrix[i][j] == 1:\n                for k in range(m):\n                    if adj_matrix[j][k] == 1:\n                        for l in range(m):\n                            if adj_matrix[k][l] == 1:\n                                if adj_matrix[l][i] == 1:\n                                    loop = tuple(sorted([i, j, k, l]) + (i,)\n                                    loops.add(loop)\n                                    \n    # count unique loops\n    return len(loops)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2811,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return None\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2812,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2813,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"haiku\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2814,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N = int(input_string.split()[0])\n    sigma_0 = list(map(int, input_string.split()[1:N+1]))\n    sigma_1 = list(map(int, input_string.split()[N+1:])\n    \n    # Your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2815,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    count = 0\n    for i in range(1, input_string+1):\n        if str(2**e) in str(i):\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2816,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2817,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    e, success, failure = map(float, input_string.split())\n    d = 0\n    while e > 0:\n        w = 25\n        while e >= w:\n            e -= success\n            w *= 2\n        d = w\n        e -= failure\n        w /= 2\n    return d\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2818,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2819,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"tie 3 1\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2820,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2821,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    Q, M, S, L = map(int, input_string.split())\n    time = 0\n    total_slots = S + L\n    if total_slots % M == 0:\n        time = total_slots // M * Q\n    else:\n        time = (total_slots // M + 1) * Q\n    return time\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2822,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    x_b, y_b = map(int, input_string.split()[0].split())\n    x1, y1, x2, y2 = map(int, input_string.split()[1].split())\n    \n    if x_b >= x1 and x_b <= x2 and y_b >= y1 and y_b <= y2:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2823,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    apple_dna, swine_dna, costs = input_string.split()\n    costs = list(map(int, costs.split()))\n    apple_dna = list(apple_dna)\n    swine_dna = list(swine_dna)\n    swine_dna_len = len(swine_dna)\n    total_cost = 0\n    for i in range(len(apple_dna)-swine_dna_len+1):\n        if apple_dna[i:i+swine_dna_len] == swine_dna:\n            for j in range(swine_dna_len):\n                if apple_dna[i+j] != swine_dna[j]:\n                    total_cost += costs[ord(swine_dna[j])-ord('A')]\n            break\n    return total_cost\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2824,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    weights = list(map(int, input_string.split('\\n'))[1:])\n    weights.sort()\n    total_weight = sum(weights)\n    min_weight = 0\n    max_weight = total_weight\n    while min_weight < max_weight:\n        mid_weight = (min_weight + max_weight) // 2\n        left_sum = 0\n        right_sum = 0\n        for weight in weights:\n            if weight < mid_weight:\n                left_sum += weight\n            elif weight > mid_weight:\n                right_sum += weight\n            else:\n                left_sum += weight\n                right_sum += weight\n        if left_sum == right_sum:\n            return mid_weight\n        elif left_sum < right_sum:\n            min_weight = mid_weight + 1\n        else:\n            max_weight = mid_weight - 1\n    return min_weight\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2825,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Hint: You can use the split() function to split the input string into a list of integers\n    # You can use the min() function to find the minimum value in a list\n    # You can use the sum() function to find the sum of a list\n    # You can use the sorted() function to sort a list in ascending order\n    # You can use the len() function to find the length of a list\n    # You can use the map() function to apply a function to each element of a list\n    # You can use the int() function to convert a string to an integer\n    # You can use the join() function to join a list of strings into a single string\n    # You can use the str() function to convert an integer to a string\n    # You can use the list() function to convert a string to a list of characters\n    # You can use the * operator to repeat a string\n    # You can use the + operator to concatenate strings\n    # You can use the format() function to format a string with variables\n    # You can use the floor division operator (//) to divide two integers\n    # You can use the modulo operator (%) to find the remainder of division\n    # You can use the range() function to generate a sequence of integers\n    # You can use the enumerate() function to iterate over a list with an index\n    # You can use the max() function to find the maximum value in a list\n    # You can use the sorted() function to sort a list in descending order\n    # You can use the zip() function to iterate over two lists in parallel\n    # You can use the list() function to convert a list of tuples to a list of lists\n    # You can use the sorted() function to sort a list of lists\n    # You can use the sum() function to find the sum of a list of lists\n    # You can use the max() function to find the maximum value in a list of lists\n    # You can use the * operator to repeat a list\n    # You can use the len() function to find the length of a list\n    # You can use the append() method to add an element to a list\n    # You can use the index() method to find the index of an element in a list\n    # You can use the pop() method to remove an element from a list\n    #",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2826,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    q, n, D = map(int, input_string.split())\n    f1, f2 = input().split(), input().split()\n    f1 = [int(i) for i in f1]\n    f2 = [int(i) for i in f2]\n    \n    count = 0\n    for i in range(q**n):\n        x = format(i, '0{}b'.format(n))\n        x = [int(j) for j in x]\n        if sum(hamming_distance(f1, x) + hamming_distance(f2, x) == D):\n            count += 1\n            \n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2827,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2828,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"DA\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2829,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    morse_code = {\n        'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..', '0': '-----', '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...', '8': '---..', '9': '----.', ' ': ' ' '\n    }\n    \n    morse_code_length = 0\n    for char in input_string:\n        if char.upper() in morse_code:\n            morse_code_length += len(morse_code[char.upper()])\n        else:\n            morse_code_length += 1\n    \n    return morse_code_length\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2830,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    grid = []\n    for i in range(n):\n        grid.append(list(map(int, input_string.split()))\n    start = (0, 0)\n    end = (n-1, m-1)\n    queue = [(start, 0)]\n    visited = set()\n    while queue:\n        (x, y), moves = queue.pop(0)\n        if (x, y) not in visited:\n            visited.add((x, y))\n            if (x, y) == end:\n                return moves\n            for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] <= moves + 1:\n                    queue.append(((nx, ny), moves + 1))\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2831,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of integers\n    input_list = [int(x) for x in input_string.split()]\n    n = input_list[0]\n    vehicles = []\n    for i in range(n):\n        vehicles.append((input_list[2*i+1], input_list[2*i+2])\n    \n    # Sort the vehicles by their position\n    vehicles.sort(key=lambda x: x[0])\n    \n    # Initialize variables\n    min_distance = float('inf')\n    max_distance = 0\n    min_position = float('inf')\n    max_position = -float('inf')\n    \n    # Iterate through the vehicles\n    for i in range(n):\n        x, v = vehicles[i]\n        min_position = min(min_position, x)\n        max_position = max(max_position, x)\n        min_distance = min(min_distance, max_position - min_position)\n        max_position += abs(v)\n        min_position += abs(v)\n    \n    return min_distance\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2832,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    d, k = map(int, input_string.split())\n    pixels = []\n    for _ in range(d):\n        r, p = map(int, input().split())\n        pixels.append((r, p))\n    \n    # Your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2833,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    R, C = map(int, input_string.split())\n    table = [input().strip() for _ in range(R)]\n    K = int(input())\n    \n    if K % 90 == 0:\n        return '\\n'.join([''.join(table[i][(K//90)%C::] + ' '*(C-(K//90%C)) for i in range(R)])\n    elif K % 180 == 0:\n        return '\\n'.join([' '*(C-i) + table[i] for i in range(R-1, -1, -1)])\n    elif K % 270 == 0:\n        return '\\n'.join([''.join(table[i][::-1] for i in range(R)])\n    else:\n        return '\\n'.join([''.join(table[i][(C-1)-(K//90)%C::] + ' '*(C-(K//90%C) for i in range(R)])\n        \n    return solution(input())\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2834,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return input_string\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2835,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    s, t = input_string.split('\\n')\n    count = 0\n    for i in range(len(s)):\n        if t in s[i:]:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2836,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, boys, A, B = map(int, input_string.split())\n    boys = list(map(int, boys.split()))\n    boys.sort()\n    boys = [x for x in boys if x % 2 == 0]\n    girls = [x for x in range(A, B+1, 2) if x not in boys]\n    if not girls:\n        return -1\n    else:\n        return max(girls)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2837,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2838,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return None\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2839,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read input\n    V, E, s, t = map(int, input_string.split())\n    edges = []\n    for i in range(E):\n        u, v, w = map(int, input().split())\n        edges.append((u, v, w))\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2840,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code goes here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2841,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2842,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k = map(int, input_string.split())\n    grid = input_string.split('\\n')\n    ships = []\n    for i in range(k):\n        ships.append(int(input())\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2843,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2844,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"KAKTUS\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2845,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    R, K = map(int, input_string.split())\n    house = list(map(int, input().split()))\n    perimeter = 0\n    for i in range(K):\n        if i == 0:\n            perimeter += 1\n        else:\n            if abs(house[i] - house[i-1]) == 1 or abs(house[i] - house[i-1]) == R or abs(house[i] - house[i-1]) == R**2:\n                perimeter += 1\n            elif abs(house[i] - house[i-1]) == R+1 or abs(house[i] - house[i-1]) == R**2 + 1:\n                perimeter += 2\n            else:\n                perimeter += 2\n    return perimeter\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2846,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    citations = list(map(int, input_string.split()))\n    citations.sort(reverse=True)\n    h_index = 0\n    for i in range(len(citations)):\n        if citations[i] >= i+1:\n            h_index = i+1\n        else:\n            break\n    return h_index\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2847,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    M, S = map(int, input_string.split())\n    preferences = []\n    for _ in range(M):\n        preferences.append(list(map(int, input().split()))\n    songs = set()\n    for pref in preferences:\n        for song in pref:\n            songs.add(song)\n    songs = sorted(list(songs)\n    result = []\n    for song in songs:\n        if all(song in pref for pref in preferences):\n            result.append(song)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2848,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, R, K, X0, A, B = map(int, input_string.split())\n    X = [X0]\n    for i in range(1, R):\n        X.append((A*X[-1] + B) % N)\n    left_bucket = 0\n    for i in range(R):\n        if X[i] < left_bucket:\n            left_bucket = X[i]\n        elif X[i] > left_bucket + K:\n            left_bucket = X[i] - K\n    if left_bucket == 0:\n        return \"OVERFLOW\"\n    else:\n        a = 0\n        for i in range(R):\n            a = (53*a + X[i]) % 19933\n        return a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2849,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string)\n    MOD = 10**9 + 7\n    dp = [0] * (n+1)\n    dp[0] = 1\n    dp[1] = 1\n    dp[2] = 1\n    dp[3] = 2\n    \n    for i in range(4, n+1):\n        dp[i] = (dp[i-1] + dp[i-2] + dp[i-3]) % MOD\n    \n    return dp[n]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2850,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k = map(int, input_string.split())\n    weights = list(map(int, input().split()))\n    weights.sort(reverse=True)\n    max_weight = 0\n    for i in range(k):\n        max_weight += weights[i]\n    min_weight = sum(weights[k:])\n    return max_weight\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2851,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, A, M, B = map(int, input_string.split())\n    A_list = list(map(int, input().split()))\n    B_list = list(map(int, input().split()))\n    \n    A = 1\n    for i in A_list:\n        A *= i\n        \n    B = 1\n    for j in B_list:\n        B *= j\n        \n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n    \n    result = gcd(A, B)\n    \n    return str(result)[-9:]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2852,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, probabilities = input_string.split()\n    n = int(n)\n    probabilities = [int(p)/100 for p in probabilities.split()]\n    \n    # Your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2853,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, M = map(int, input_string.split())\n    houses = [False] * (N+1)\n    houses[1] = True\n    for i in range(M):\n        a, b = map(int, input().split())\n        if not houses[a]:\n            houses[a] = True\n        if not houses[b]:\n            houses[b] = True\n    for i in range(2, N+1):\n        if not houses[i]:\n            print(i)\n        else:\n            continue\n    if all(houses):\n        print(\"Connected\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2854,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    atoms = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        if x == -1 and y == -1:\n            atoms.append(None)\n        else:\n            atoms.append((x, y))\n    \n    bonds = []\n    for i in range(m):\n        a, b = map(int, input().split())\n        bonds.append((a-1, b-1))\n    \n    # Your code here\n    # Fill in the solution\n    # ...\n    # End of code\n    \n    for x, y in atoms:\n        print(x, y)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2855,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0.0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2856,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return input_string.count('B')\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2857,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2858,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Hint: You can use the following function to read input from the console\n    # input_string = input()\n    # input_list = list(map(int, input_string.split()))\n    # N = input_list[0]\n    # accused = input_list[1:]\n    \n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2859,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of integers\n    input_list = list(map(int, input_string.split()))\n    \n    # Extract the coordinates and radius\n    x1, y1 = input_list[:2]\n    x2, y2 = input_list[2:4]\n    x3, y3 = input_list[4:6]\n    xv, yv, r = input_list[6:]\n    \n    # Calculate the distance between particles 1 and 2\n    d12 = ((x2 - x1)**2 + (y2 - y1)**2)**0.5\n    \n    # Calculate the distance between particles 1 and 3\n    d13 = ((x3 - x1)**2 + (y3 - y1)**2)**0.5\n    \n    # Calculate the distance between particles 2 and 3\n    d23 = ((x3 - x2)**2 + (y3 - y2)**2)**0.5\n    \n    # Calculate the angle between the vector and the line connecting particles 1 and 2\n    theta = np.arccos((x2 - x1)/d12)\n    \n    # Calculate the angle between the vector and the line connecting particles 1 and 3\n    theta2 = np.arccos((x3 - x1)/d13)\n    \n    # Calculate the angle between the vector and the line connecting particles 2 and 3\n    theta3 = np.arccos((x3 - x2)/d23)\n    \n    # Calculate the angle between the vector and the line connecting particles 1 and 2\n    theta4 = np.arccos((x2 - x1)/d12)\n    \n    # Calculate the angle between the vector and the line connecting particles 1 and 3\n    theta5 = np.arccos((x3 - x1)/d13)\n    \n    # Calculate the angle between the vector and the line connecting particles 2 and 3\n    theta6 = np.arccos((x3 - x2)/d23)\n    \n    # Check if the vector is",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2860,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, d, w = map(int, input().split())\n    lines = []\n    for i in range(n):\n        lines.append(input())\n    \n    # Your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2861,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2862,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"Not implemented yet\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2863,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2864,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"E??\";\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2865,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # read input\n    X1, X2 = map(int, input_string.split())\n    N1, T1 = map(int, input_string.split())\n    speeds1 = list(map(int, input_string.split()))\n    N2, T2 = map(int, input_string.split())\n    speeds2 = list(map(int, input_string.split())\n    \n    # initialize variables\n    t = 0\n    v1 = 0\n    v2 = 0\n    pos1 = X1\n    pos2 = X2\n    \n    # loop through time\n    while t <= max(T1[-1], T2[-1]):\n        # update speeds and positions\n        if t in T1:\n            v1 = 1\n        if t in T2:\n            v2 = 1\n        pos1 += v1\n        pos2 += v2\n        \n        # check for collision\n        if pos1 >= X2 and v1 == 1 and v2 == 1:\n            return f\"bumper tap at time {t}\"\n        t += 1\n    \n    return \"safe and sound\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2866,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2867,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2868,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return input_string\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2869,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return input_string\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2870,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    p, q = map(int, input_string.split())\n    if p == 1 or q == 1:\n        return 0\n    else:\n        return (p+q)//2 * (p+q-1) - p - q\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2871,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, K = map(int, input_string.split())\n    v = list(map(int, input_string.split()[2:])\n    v.sort(reverse=True)\n    return (N//K)\n    \ninput_string = input()\nprint(solution(input_string))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2872,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Separate the input string into two parts\n    day, month = input_string.split()\n    \n    # Convert the day and month to integers\n    day = int(day)\n    \n    # Create a dictionary to map the month to its number of days\n    month_dict = {'JAN': 31, 'FEB': 28, 'MAR': 31, 'APR': 30, 'MAY': 31, 'JUN': 30, 'JUL': 31, 'AUG': 31, 'SEP': 30, 'OCT': 31, 'NOV': 30, 'DEC': 31}\n    \n    # Check if the month has 29 days\n    if month == 'FEB':\n        if day > 29:\n            return ':(', 'TGIF'\n        elif day == 29:\n            return ':(', 'TGIF'\n        else:\n            return 'TGIF', ':('\n    else:\n        # Check if the day is a multiple of 7\n        if day % 7 == 0:\n            return 'TGIF', ':('\n        else:\n            return ':(', 'TGIF'\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2873,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    vowels = ['A', 'E', 'I', 'O', 'U']\n    consonants = ['B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z']\n    count = 0\n    for i in range(len(input_string)):\n        for j in range(i+1, len(input_string)):\n            if input_string[i] == '_' and input_string[j] == '_':\n                for k in vowels:\n                    for l in consonants:\n                        for m in vowels:\n                            for n in consonants:\n                                for o in vowels:\n                                    for p in consonants:\n                                        for q in vowels:\n                                            for r in consonants:\n                                                new_string = input_string[:i] + k + l + m + n + o + p + q + input_string[j+1:]\n                                                if 'LL' not in new_string and 'EEE' not in new_string and 'AAA' not in new_string and 'OOO' not in new_string and 'III' not in new_string and 'UUU' not in new_string:\n                                                    count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2874,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    people = list(map(int, input_string.split()))\n    trees = list(map(int, input_string.split()))\n    people.sort()\n    trees.sort()\n    count = 0\n    i = 0\n    j = 0\n    while i < n and j < m:\n        if people[i] < trees[j]:\n            i += 1\n        elif people[i] > trees[j]:\n            j += 1\n        else:\n            count += 1\n            i += 1\n            j += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2875,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split()[0])\n    cards = list(map(int, input_string.split()[1:])\n    for i in range(n):\n        for j in range(i+1, n):\n            if cards[i] > cards[j]:\n                cards[i], cards[j] = cards[j], cards[i]\n                if cards == sorted(cards):\n                    return f\"{i+1} {j+1}\"\n                cards[i], cards[j] = cards[j], cards[i]\n    return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2876,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # read input\n    N = int(input_string.split('\\n')[0])\n    points = [tuple(map(int, line.split()) for line in input_string.split('\\n')[1:])]\n    \n    # sort points by x\n    points.sort(key=lambda x: x[0])\n    \n    # calculate Lipschitz constant\n    L = 0\n    for i in range(1, N):\n        L = max(L, abs(points[i][1] - points[i-1][1]) / abs(points[i][0] - points[i-1][0]))\n    \n    return L\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2877,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2878,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N = int(input())\n    grid = []\n    for i in range(N):\n        grid.append(list(input()))\n    \n    count = 0\n    for i in range(N):\n        for j in range(N):\n            for k in range(N):\n                if grid[i][j] != '.' and grid[i][k] != '.' and grid[k][j] != '.':\n                    count += 1\n                    \n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2879,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"No solution\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2880,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2881,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"yes\" if input_string.split()[0] == input_string.split()[1][::-1] else \"no\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2882,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    if len(input_string) == 1:\n        return [input_string]\n    \n    if len(input_string) == 0:\n        return []\n    \n    result = []\n    for i in range(len(input_string)):\n        for j in range(i+1, len(input_string)):\n            left = input_string[:i]\n            right = input_string[i:j]\n            middle = input_string[j:]\n            for l in solution(left):\n                for r in solution(right):\n                    result.append(\"(\" + l + \")\" + r)\n                    result.append(\"(\" + r + \")\" + l)\n                    \n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2883,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    intervals = []\n    for i in input_string:\n        intervals.append(i.split(','))\n    \n    intervals.sort(key=lambda x: int(x[0]))\n    result = []\n    start = int(intervals[0][0])\n    end = int(intervals[0][1])\n    \n    for i in range(1, len(intervals)):\n        if int(intervals[i][0]) <= end:\n            end = max(end, int(intervals[i][1])\n        else:\n            result.append([start, end])\n            start = int(intervals[i][0])\n            end = int(intervals[i][1])\n            \n    result.append([start, end])\n    \n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2884,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return input_string\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2885,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    intervals = input_string.split(\",\")\n    intervals = [list(map(int, i.strip(\"[]\").split(\".\")) for i in intervals]\n    new_interval = list(map(int, newInterval.strip(\"[]\").split(\".\"))\n    \n    for i in range(len(intervals)):\n        if new_interval[0] <= intervals[i][1] and new_interval[1] >= intervals[i][0]:\n            intervals[i][0] = min(new_interval[0], intervals[i][0])\n            intervals[i][1] = max(new_interval[1], intervals[i][1])\n            return intervals\n        elif new_interval[0] > intervals[i][1]:\n            intervals.insert(i, new_interval)\n            return intervals\n        elif new_interval[1] < intervals[i][0]:\n            intervals.insert(i, new_interval)\n            return intervals\n            \n    intervals.append(new_interval)\n    return intervals\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2886,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()+\\\"_\\\"\n    n=len(s)\n    count=[0]*26\n    for i in range(n):\n        count[ord(s[i])-ord('a')]+=1\n    max_count=max(count)\n    min_count=min(count)\n    if max_count-min_count>n//2:\n        for i in range(n):\n            if count[ord(s[i])-ord('a')]==max_count:\n                print(i,i+n-1)\n                break\n    else:\n        print(-1,-1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2887,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    volumes=list(map(int,input().split())[:n])\n    temperatures=list(map(int,input().split())[:n])\n    result=[]\n    for i in range(n):\n        if i==0:\n            result.append(volumes[i]*(temperatures[i])-volumes[i])\n        else:\n            result.append(result[i-1]+volumes[i]*(temperatures[i]-temperatures[i-1])-volumes[i])\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2888,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, Sin = map(int, input_string.split())\n    E = list(map(int, input_string.split()))\n    max_xp = 0\n    for i in range(N):\n        if i == 0:\n            max_xp = Sin**3\n        elif i == 1:\n            max_xp = max(max_xp, Sin**3)\n        else:\n            max_xp = max(max_xp, Sin**3 + E[i-1]*Sin)\n        Sin = max_xp\n    return max_xp\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2889,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    lawn_size, num_mowers = map(int, input_string.split())\n    lawn_size = int(lawn_size)\n    num_mowers = int(num_mowers)\n    mowers = []\n    for i in range(num_mowers):\n        mower = input().split(',')\n        mowers.append(mower)\n    \n    for mower in mowers:\n        mower[1] = int(mower[1])\n        mower[2] = int(mower[2])\n        mower[3] = int(mower[3])\n        mower[4] = int(mower[4])\n    \n    min_price = float('inf')\n    min_mower = []\n    for mower in mowers:\n        if lawn_size/mower[2] >= mower[3] + mower[4]:\n            if mower[1] < min_price:\n                min_price = mower[1]\n                min_mower = [mower[0]]\n            elif mower[1] == min_price:\n                min_mower.append(mower[0])\n    \n    if len(min_mower) == 0:\n        return \"no such mower\"\n    else:\n        return '\\n'.join(min_mower)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2890,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # read input\n    N, M, k1, k2, S, T = map(int, input_string.split())\n    tracks = []\n    for _ in range(M):\n        U, V, X, C = map(int, input().split())\n        tracks.append((U, V, X, C))\n    \n    # sort tracks by time\n    tracks.sort(key=lambda x: x[2])\n    \n    # initialize variables\n    time = 0\n    red_tracks = 0\n    blue_tracks = 0\n    white_tracks = 0\n    visited = set()\n    visited.add(S)\n    \n    # traverse the graph\n    while S != T:\n        min_time = float('inf')\n        min_track = None\n        for track in tracks:\n            if track[0] == S and track[1] not in visited:\n                if track[3] == 1:\n                    red_tracks += 1\n                elif track[3] == 2:\n                    blue_tracks += 1\n                else:\n                    white_tracks += 1\n                if red_tracks == k1 and blue_tracks == k2:\n                    min_time = track[2]\n                    min_track = track\n                    break\n        if min_track is None:\n            return -1\n        time += min_time\n        S = min_track[1]\n        visited.add(S)\n    \n    return time\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2891,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, c = map(int, input_string.split())\n    c = list(map(int, input_string.split())[1:])\n    total_prob = 0\n    for i in range(1, n+1):\n        total_prob += (comb(n, i) * (1/365)**i * (1-1/365)**(n-i))\n    return -math.log10(total_prob)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2892,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2893,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split()[0])\n    arr = list(map(int, input_string.split()[1:])\n    op = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n                op += 1\n    return op\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2894,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    L, K, T1, T2, H = map(float, input_string.split())\n    F1 = (H - L) / (T2 * K)\n    F2 = (H - L) / (T1 * K)\n    return F1, F2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2895,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # read input\n    x_s, y_s, x_f, y_f = map(float, input_string.split()[:4])\n    n = int(input_string.split()[4])\n    y_layers = list(map(float, input_string.split()[5:5+n-1]) + [y_f])\n    speeds = list(map(float, input_string.split()[5+n:])\n    \n    # calculate the distance for each layer\n    distances = []\n    for i in range(n-1):\n        distances.append(abs(y_layers[i]-y_layers[i+1]) * (x_f-x_s))\n    \n    # calculate the time for each layer\n    times = []\n    for i in range(n-1):\n        times.append(distances[i] / speeds[i])\n    \n    # calculate the total time\n    total_time = sum(times)\n    \n    return total_time\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2896,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    before, after = input_string.split()\n    min_length = len(before)\n    for i in range(len(before)):\n        for j in range(i, len(before)):\n            if before[i:j+1] == after[i:j+1]:\n                min_length = min(min_length, j-i+1)\n            else:\n                break\n    return min_length\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2897,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"decimal\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2898,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    lines = input_string.split('\\n')\n    n = int(lines[0])\n    drives = []\n    for i in range(1, n+1):\n        a, b = map(int, lines[i].split())\n        drives.append((a, b))\n    \n    total_capacity = sum([a for a, b in drives])\n    extra_capacity = 0\n    for i in range(n):\n        a, b = drives[i]\n        if a > b:\n            extra_capacity += a - b\n        else:\n            extra_capacity += b - a\n    \n    return extra_capacity\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2899,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return output_string\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2900,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = len(input_string)\n    count = [0]*(n-1)\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if input_string[i] == 'B' and input_string[j] == 'A' and j-i == 1:\n                count[0] += 1\n            elif input_string[i] == 'B' and input_string[j] == 'A' and j-i == 2:\n                count[1] += 1\n            elif input_string[i] == 'B' and input_string[j] == 'A' and j-i == 3:\n                count[2] += 1\n            elif input_string[i] == 'B' and input_string[j] == 'A' and j-i == 4:\n                count[3] += 1\n            elif input_string[i] == 'B' and input_string[j] == 'A' and j-i == 5:\n                count[4] += 1\n            elif input_string[i] == 'B' and input_string[j] == 'A' and j-i == 6:\n                count[5] += 1\n            elif input_string[i] == 'B' and input_string[j] == 'A' and j-i == 7:\n                count[6] += 1\n            elif input_string[i] == 'B' and input_string[j] == 'A' and j-i == 8:\n                count[7] += 1\n            elif input_string[i] == 'B' and input_string[j] == 'A' and j-i == 9:\n                count[8] += 1\n            elif input_string[i] == 'B' and input_string[j] == 'A' and j-i == 10:\n                count[9] += 1\n            elif input_string[i] == 'B' and input_string[j] == 'A' and j-i == 11:\n                count[10] += 1\n            elif input_string[i] == 'B' and",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2901,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of tuples\n    edges = []\n    for line in input_string.split('\\n'):\n        if line.strip():\n            a, b = line.split()\n            edges.append((int(a), int(b)))\n    \n    # Create a graph\n    graph = [[] for _ in range(10)]\n    for a, b in edges:\n        graph[a].append(b)\n        graph[b].append(a)\n    \n    # Calculate the degree of each node\n    degrees = [len(node) for node in graph]\n    \n    # Calculate the synergy score for each node\n    synergies = [0] * 10\n    for i in range(10):\n        for j in graph[i]:\n            if i == j:\n                continue\n            synergy = 0\n            for k in graph[i]:\n                if k == j:\n                    synergy += 1\n                elif k in graph[j]:\n                    synergy += 2\n            synergies[i] += synergy\n    \n    # Check if the team is perfect\n    for i in range(10):\n        if synergies[i] < degrees[i]:\n            return \"no\"\n    return \"yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2902,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    C, N, M = map(int, input_string.split())\n    farms = list(map(int, input().split()))\n    days = list(map(int, input().split()))\n    farms_count = [0] * (C+1)\n    for farm in farms:\n        farms_count[farm] += 1\n    \n    for day in range(1, M):\n        new_farms_count = [0] * (C+1)\n        for i in range(1, C+1):\n            new_farms_count[i] = farms_count[i//2] + farms_count[i-i//2]\n        farms_count = new_farms_count\n        for farm in farms:\n            farms_count[farm] += 1\n        \n        for d in days:\n            print(sum(farms_count[:d+1]))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2903,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return output_string\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2904,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2905,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    hotdogs, buns = input_string.split('\\n')\n    hotdogs = [int(x) for x in hotdogs.split()[1:]]\n    buns = [int(x) for x in buns.split()]\n    hotdogs_sum = sum(hotdogs)\n    buns_sum = sum(buns)\n    if hotdogs_sum % 2 != 0 or buns_sum % 2 != 0:\n        return \"impossible\"\n    else:\n        target = hotdogs_sum // 2\n        min_packs = float('inf')\n        for i in range(len(hotdogs)):\n            for j in range(len(buns)):\n                if hotdogs[i] + buns[j] == target:\n                    min_packs = min(min_packs, hotdogs[i] + buns[j])\n        if min_packs == float('inf'):\n            return \"impossible\"\n        else:\n            return min_packs\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2906,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"Impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2907,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z']\n    vowel_count = 0\n    consonant_count = 0\n    for char in input_string:\n        if char in vowels:\n            vowel_count += 1\n        elif char in consonants:\n            consonant_count += 1\n    if vowel_count >= consonant_count:\n        return 'Boris'\n    else:\n        return 'Colleague'\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2908,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, s = map(int, input_string.split())\n    cards = list(map(int, input().split()))\n    for i in range(n):\n        for j in range(i+1, n):\n            if cards[i] + cards[j] == s:\n                return \"YES\"\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2909,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"Possible\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2910,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split('\\n')[0])\n    A = list(map(int, input_string.split('\\n')[1].split()))\n    B = list(map(int, input_string.split('\\n')[2].split()))\n    total_area = 0\n    yellow_area = 0\n    pink_area = 0\n    white_area = 0\n    for i in range(n):\n        for j in range(n):\n            total_area += A[i] * B[j]\n            if (i+j)%3 == 0:\n                yellow_area += A[i] * B[j]\n            elif (i+j)%3 == 1:\n                pink_area += A[i] * B[j]\n            else:\n                white_area += A[i] * B[j]\n    return yellow_area, pink_area, white_area\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2911,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, t = map(int, input_string.split())\n    x = list(map(int, input().split()))\n    x.sort()\n    p = 1\n    for i in range(n):\n        p *= (1 - (i+1)/(t-x[i]) * (1/(t-x[i]+1))\n    return (p * t**n) % 998244353\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2912,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input())\n    strings = [input() for _ in range(n)]\n    operations = []\n    for _ in range(n-1):\n        operations.append(list(map(int, input().split()))\n    \n    for a, b in operations:\n        strings[a-1] += strings[b-1]\n        strings[b-1] = \"\"\n    \n    return strings[-1]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2913,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, c, r = map(int, input_string.split())\n    grid = [list(input_string.split()[1:]) for input_string in input_string.split('\\n')]\n    mirrors = [(i,j) for i in range(n) for j in range(n) if grid[i][j] in ['/', '\\\\']]\n    laser = (c-1, 0)\n    sensor = (0, r-1)\n    laser_ray = set()\n    sensor_ray = set()\n    \n    for i in range(n):\n        laser_ray.add((i, laser[1] + i - laser[0]) if i >= laser[0] else (i, laser[1] - i + laser[0]))\n        sensor_ray.add((i, sensor[1] + i - sensor[0]) if i >= sensor[0] else (i, sensor[1] - i + sensor[0]))\n    \n    for mirror in mirrors:\n        if mirror[0] == laser[0]:\n            laser_ray.add((mirror[0], mirror[1] + (laser[1] - mirror[1]) * 2) if mirror[1] >= laser[1] else (mirror[0], mirror[1] - (laser[1] - mirror[1]) * 2))\n        if mirror[1] == sensor[1]:\n            sensor_ray.add((mirror[0] + (sensor[0] - mirror[0]) * 2, sensor[1]) if mirror[0] >= sensor[0] else (mirror[0] - (sensor[0] - mirror[0]) * 2, sensor[1]))\n    \n    return 'YES' if laser_ray == sensor_ray else 'NO'\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2914,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, s, k = map(int, input_string.split())\n    prob = 0\n    for i in range(1, s+1):\n        prob += (1 - (1 - 1/s)**(n-k)) * (1/s)\n    return round(prob, 8)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2915,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input string to list of integers\n    input_list = list(map(int, input_string.split()))\n    N = input_list[0]\n    K = input_list[1]\n    locations = input_list[2:]\n    locations = [locations[i:i+2] for i in range(0, len(locations), 2)]\n    \n    # Sort the locations by x-coordinate\n    locations.sort(key=lambda x: x[0])\n    \n    # Initialize variables\n    total_distance = 0\n    current_location = 0\n    current_capacity = 0\n    \n    # Iterate through the locations\n    for i in range(N):\n        # If there is still room in the truck, add the letters to the current location\n        if current_capacity + locations[i][1] <= K:\n            current_capacity += locations[i][1]\n        # If there is no room in the truck, move to the next location and add the letters\n        else:\n            total_distance += abs(locations[i][0] - current_location) * 2\n            current_location = locations[i][0]\n            current_capacity = locations[i][1]\n            \n    # Add the final return trip\n    total_distance += abs(current_location - 0)\n    \n    return total_distance\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2916,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2917,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string)\n    if n == 0:\n        return 1\n    else:\n        catalan = [1, 1]\n        for i in range(2, n+1):\n            catalan.append(0)\n            for j in range(i):\n                catalan[i] += catalan[j] * catalan[i-j]\n        return catalan[n]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2918,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split('\\n')[0])\n    matrix = [list(line) for line in input_string.split('\\n')[1:]]\n    for i in range(n):\n        matrix[i][i] = 'X'\n    matrix = [[int(x) for x in row] for row in matrix]\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                matrix[i][j] = -1\n            elif matrix[i][j] == 0:\n                matrix[i][j] = 1\n            else:\n                matrix[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                if matrix[i][j] == 1 and matrix[j][k] == 1:\n                    matrix[i][k] = 0\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                return \"impossible\"\n    for i in range(n):\n        if matrix[0][i] == -1:\n            return \"impossible\"\n    for i in range(n):\n        if matrix[0][i] == 1:\n            return \"impossible\"\n    for i in range(n):\n        if matrix[0][i] == 0:\n            return i\n    return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2919,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    stack = []\n    for i in range(0, len(input_string), 3):\n        if input_string[i] == 'S':\n            if input_string[i+1] == 'S':\n                stack.append(int(input_string[i+2:i+3]))\n            elif input_string[i+1] == 'N':\n                stack.append(-int(input_string[i+2:i+3]))\n        elif input_string[i] == 'T':\n            if input_string[i+1] == 'S':\n                if len(stack) < 2:\n                    print(\"Invalid addition operation\")\n                else:\n                    stack.append(stack.pop() + stack.pop())\n            elif input_string[i+1] == 'T':\n                if len(stack) < 2:\n                    print(\"Invalid subtraction operation\")\n                else:\n                    stack.append(stack.pop() - stack.pop())\n            elif input_string[i+1] == 'N':\n                if len(stack) < 2:\n                    print(\"Invalid multiplication operation\")\n                else:\n                    stack.append(stack.pop() * stack.pop())\n            elif input_string[i+1] == 'S':\n                if len(stack) < 2:\n                    print(\"Invalid division operation\")\n                elif stack[-1] == 0:\n                    print(\"Division by zero\")\n                else:\n                    stack.append(stack.pop() // stack.pop())\n        elif input_string[i] == 'N':\n            if len(stack) == 0:\n                print(\"Invalid print operation\")\n            else:\n                print(stack.pop())\n                \n    return stack\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2920,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split('\\n')[0])\n    grid = input_string.split('\\n')[1:]\n    s = (0,0)\n    t = (n-1,n-1)\n    obstacles = []\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == '#':\n                obstacles.append((i,j))\n    \n    def is_valid(x,y):\n        for obstacle in obstacles:\n            if (x,y) == obstacle:\n                return False\n        return 0<=x<n and 0<=y<n\n    \n    def dfs(x,y,dx,dy):\n        if (x,y) == t:\n            return 1\n        if not is_valid(x+dx,y+dy):\n            return 0\n        return dfs(x+dx,y+dy,dx,dy) + dfs(x,y,dx,dy)\n    \n    count = dfs(s[0],s[1],1,0)\n    if count == 0:\n        count = dfs(s[0],s[1],0,1)\n        if count == 0:\n            return \"THE GAME IS A LIE\"\n    return count % (2**31-1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2921,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # read input\n    m, u, d = map(float, input_string.split())\n    drinks = []\n    for i in range(int(d)):\n        name, strength, size, price = input().split()\n        drinks.append((name, int(strength), size, float(price)))\n    \n    # sort drinks by price\n    drinks.sort(key=lambda x: x[3])\n    \n    # calculate total alcohol content\n    total_alcohol = sum(drink[1] * float(drink[2].replace('/', '.')) for drink in drinks)\n    \n    # calculate maximum number of drinks that can be bought\n    max_drinks = int(m / total_alcohol * u)\n    \n    # initialize variables\n    current_alcohol = 0\n    current_spent = 0\n    result = []\n    \n    # iterate through drinks\n    for drink in drinks:\n        # calculate alcohol content per drink\n        alcohol_per_drink = drink[1] * float(drink[2].replace('/', '.'))\n        # calculate number of drinks that can be bought\n        num_drinks = int(min(max_drinks, m / (alcohol_per_drink + current_spent))\n        # add to result\n        result.append((drink[0], num_drinks))\n        # update current_alcohol and current_spent\n        current_alcohol += num_drinks * alcohol_per_drink\n        current_spent += num_drinks * drink[3]\n        \n        # check if we have reached the limit\n        if current_alcohol >= u:\n            break\n    \n    # check if we have reached the limit\n    if current_alcohol < u:\n        print(\"IMPOSSIBLE\")\n    else:\n        for name, count in result:\n            print(name, count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2922,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split()[0])\n    chocolates = list(map(int, input_string.split()[1:])\n    total_chocolates = sum(chocolates)\n    if total_chocolates % 2 != 0:\n        return \"NO\"\n    else:\n        return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2923,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a 2D array\n    grid = []\n    for line in input_string.split('\\n'):\n        grid.append(list(line))\n    \n    # Initialize variables\n    soldiers_needed = 0\n    A_positions = []\n    B_positions = []\n    neutral_positions = []\n    \n    # Find A and B positions\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 'A':\n                A_positions.append((i,j))\n            elif grid[i][j] == 'B':\n                B_positions.append((i,j))\n            elif grid[i][j].isdigit():\n                neutral_positions.append((i,j))\n    \n    # Calculate the distance between A and B positions\n    for A_position in A_positions:\n        for B_position in B_positions:\n            distance = abs(A_position[0] - B_position[0]) + abs(A_position[1] - B_position[1])\n            soldiers_needed = max(soldiers_needed, distance)\n    \n    # Calculate the number of soldiers needed to secure neutral positions\n    for neutral_position in neutral_positions:\n        for A_position in A_positions:\n            distance = abs(neutral_position[0] - A_position[0]) + abs(neutral_position[1] - A_position[1])\n            soldiers_needed = max(soldiers_needed, distance)\n    \n    return soldiers_needed\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2924,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, M, P = map(int, input_string.split()[:3])\n    C = list(map(int, input_string.split()[3:N+3])\n    D = list(map(int, input_string.split()[N+3:])\n    P = P/100\n    \n    for i in range(N-1, -1, -1):\n        for j in range(M-1, -1, -1):\n            if C[i]/D[j] <= 1+P and C[i]/D[j] >= 1-P:\n                print(\"Ride on!\")\n                return\n    print(\"Time to change gears!\")\n    \n# Test the function with the sample input\ninput_string = \"2 11 15 50 34 11 12 13 14 16 18 20 22 25 28 32\"\nsolution(input_string)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2925,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    songs = []\n    for i in range(n):\n        f, s = input_string.split()\n        songs.append((int(f), s))\n    \n    songs.sort(key=lambda x: x[0], reverse=True)\n    zips = [1/(i+1) for i in range(n)]\n    q = [f/z for f, z in zip(songs, zips)]\n    \n    result = []\n    for i in range(m):\n        max_q = max(q)\n        index = q.index(max_q)\n        result.append(songs[index][1])\n        q.pop(index)\n        songs.pop(index)\n    \n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2926,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    categories = {}\n    for i in range(int(input()):\n        category = input().split()\n        words = category[1:]\n        categories[category[0]] = words\n    \n    statement = []\n    for i in range(int(input()):\n        statement.extend(input().split())\n    \n    matches = {}\n    for category in categories:\n        matches[category] = 0\n        for word in categories[category]:\n            for s in statement:\n                if word in s:\n                    matches[category] += 1\n    \n    max_match = max(matches.values())\n    result = []\n    for category in matches:\n        if matches[category] == max_match:\n            result.append(category)\n    \n    result.sort()\n    for r in result:\n        print(r)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2927,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of integers\n    input_list = list(map(int, input_string.split()))\n    N = input_list[0]\n    del input_list[0]\n    \n    # Initialize variables\n    yards_gained = 0\n    starting_position = 20\n    safety_position = 20\n    \n    # Loop through the list of yards gained/lost\n    for i in range(N):\n        yards_gained += input_list[i]\n        \n        # Check if a touchdown has been achieved\n        if yards_gained >= 80:\n            return \"Touchdown\"\n        \n        # Check if a safety has been achieved\n        if starting_position - yards_gained <= safety_position:\n            return \"Safety\"\n        \n    # If neither a touchdown nor a safety has been achieved, return \"Nothing\"\n    return \"Nothing\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2928,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Split the input string into lines\n    lines = input_string.split('\\n')\n    \n    # Get the number of tax bands\n    B = int(lines[0])\n    \n    # Get the tax bands and percentages\n    tax_bands = []\n    for i in range(1, B+1):\n        s, p = lines[i].split()\n        tax_bands.append((float(s), float(p)/100))\n    \n    # Get the percentage tax on all income above other bands\n    P = float(lines[B+1])/100\n    \n    # Get the number of friends\n    F = int(lines[B+2])\n    \n    # Get the amounts earned and desired amounts for each friend\n    friends = []\n    for j in range(F):\n        e, m = lines[B+3+j].split()\n        friends.append((float(e), float(m))\n    \n    # Calculate the total tax paid by each friend\n    total_tax = 0\n    for e, m in friends:\n        tax = 0\n        for s, p in tax_bands:\n            if e < s:\n                break\n            else:\n                tax += (e-s)*p\n        tax += (e-s)*P\n        total_tax += tax\n    \n    # Calculate the amount each friend should receive\n    for j in range(F):\n        e, m = friends[j]\n        amount = m - total_tax/F\n        print(round(amount, 6))\n        \n# Test the function with the sample input\nsolution(\"\"\"1\n100 0\n20\n3\n0.0 500\n999.5 500\n1000.0 500\"\"\") ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2929,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N = int(input_string.split('\\n')[0])\n    grid = []\n    for i in range(1, N+1):\n        grid.append(list(map(int, input_string.split('\\n')[i].split()))\n    # Write your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2930,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input())\n    arr = []\n    for i in range(n):\n        arr.append(int(input()))\n    max_length = 0\n    current_length = 1\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 1\n    max_length = max(max_length, current_length)\n    current_length = 1\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 1\n    max_length = max(max_length, current_length)\n    return max_length\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2931,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return input_string\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2932,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"Yes\" if input_string == \"\".join(sorted(input_string)) else \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2933,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Hint: You can use the split() function to split the input string into lines and then split each line into integers\n    # You can use the map() function to convert the strings to integers\n    # You can use the sum() function to add up the weights\n    # You can use the min() and max() functions to find the minimum and maximum weights\n    # You can use the abs() function to find the absolute difference between the combined weight and 100\n    # You can use the min() function again to find the closest weight to 100\n    \n    # Write your code here\n    n = int(input_string.split()[0])\n    weights = list(map(int, input_string.split()[1:]))\n    min_diff = float('inf')\n    closest_weight = 0\n    for i in range(1, 101):\n        total_weight = sum(weights)\n        if abs(total_weight - i) < min_diff:\n            min_diff = abs(total_weight - i)\n            closest_weight = i\n    return closest_weight\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2934,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, M = map(int, input_string.split())\n    MOD = 10**9\n    dp = [0] * (M+1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, M+1):\n        dp[i] = (dp[i-1] + dp[i-2]) % MOD\n    return dp[M]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2935,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m, f, s, t = map(int, input_string.split())\n    graph = [[float('inf') for _ in range(n)] for _ in range(n)]\n    flights = set()\n    for i in range(n):\n        graph[i][i] = 0\n    for _ in range(m):\n        u, v, c = map(int, input().split())\n        graph[u][v] = c\n        graph[v][u] = c\n    for _ in range(f):\n        u, v = map(int, input().split())\n        flights.add((u, v))\n        flights.add((v, u))\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                for l in range(n):\n                    graph[i][j] = min(graph[i][j], graph[i][k] + graph[k][j])\n    return graph[s][t]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2936,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k = map(int, input_string.split())\n    A = list(map(int, input_string.split()))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2937,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k, c = map(int, input_string.split())\n    kids = []\n    for i in range(n):\n        kids.append(input())\n    enemies = []\n    for i in range(k):\n        enemies.append(input().split())\n    return kids, enemies\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2938,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"Yes\" if False else \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2939,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split('\\n')[0])\n    grid = input_string.split('\\n')[1:]\n    grid = [list(map(int, row)) for row in grid]\n    \n    max_distance = 0\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                distance = 0\n                for k in range(n):\n                    for l in range(n):\n                        if grid[k][l] == 3:\n                            distance = max(distance, abs(i-k) + abs(j-l))\n                max_distance = max(max_distance, distance)\n                \n    return max_distance\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2940,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N = int(input_string.split()[0])\n    recipes = input_string.split('\\n')[1:]\n    used_ingredients = set()\n    concocted = 0\n    \n    for recipe in recipes:\n        M, *ingredients = map(int, recipe.split())\n        if all(ingredient in used_ingredients for ingredient in ingredients):\n            concocted += 1\n            used_ingredients.update(ingredients)\n        else:\n            continue\n            \n    return concocted\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2941,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return None\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2942,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    D = int(input_string)\n    for n1 in range(1, 10000):\n        n2 = D + n1**2\n        if n2**0.5.is_integer():\n            return n1, int(n2**0.5)\n    return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2943,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = len(input_string)\n    max_diff = 0\n    start = 0\n    end = 0\n    for i in range(n):\n        for j in range(i, n):\n            diff = input_string.count('R', i, j) - input_string.count('B', i, j)\n            if diff > max_diff:\n                max_diff = diff\n                start = i\n                end = j\n            elif diff == max_diff:\n                if j > end:\n                    end = j\n    return start+1, end+1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2944,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m, d = map(int, input_string.split())\n    people = {}\n    for i in range(n):\n        person, skepticism = input_string.split()\n        people[person] = int(skepticism)\n    \n    connections = []\n    for i in range(m):\n        u, v = input_string.split()\n        connections.append((u, v)\n    \n    rumor_start = input_string\n    \n    # Your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2945,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    T, N, M = map(int, input_string.split())\n    A = []\n    B = []\n    C = []\n    D = []\n    for i in range(N):\n        A.append(list(map(int, input().split()))[1:])\n    for i in range(M):\n        C.append(list(map(int, input().split()))[1:])\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2946,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2947,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2948,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split('\\n')[0])\n    pairs = input_string.split('\\n')[1:]\n    party_a = []\n    party_b = []\n    for pair in pairs:\n        pair = pair.split()\n        for i in range(len(pair)):\n            if i % 2 == 0:\n                party_a.append(int(pair[i])-1)\n            else:\n                party_b.append(int(pair[i])-1)\n    party_a = list(set(party_a))\n    party_b = list(set(party_b))\n    result = ['A'] * n\n    for i in range(n):\n        if i in party_a:\n            result[i] = 'B'\n    return ''.join(result)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2949,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2950,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split()[0])\n    heights = list(map(int, input_string.split()[1:]))\n    heights.sort(reverse=True)\n    charges = 0\n    i = 0\n    while i < n:\n        if heights[i] == 1:\n            i += 1\n        else:\n            charges += heights[i] - 1\n            heights[i] = 1\n        i += 1\n    return charges\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2951,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N = int(input_string.split()[0])\n    players = []\n    umpires = []\n    for i in range(N):\n        a, b = map(int, input_string.split()[1:])\n        players.append(a)\n        umpires.append(b)\n    return (sum([(players[i]*players[j]*umpires[k]) for i in range(N) for j in range(N) for k in range(N) if i != j and i != k and j != k]) + sum([players[i]*players[j] for i in range(N) for j in range(N) if i != j]) + sum([players[i]*umpires[j] for i in range(N) for j in range(N) if i != j]) + sum([umpires[i]*players[j] for i in range(N) for j in range(N) if i != j]))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2952,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    m, a, b, c = map(int, input_string.split())\n    if a + b + c > m:\n        return \"impossible\"\n    else:\n        return \"possible\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2953,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split()[0])\n    points = []\n    for i in range(n):\n        x, y = map(int, input_string.split()[1:])\n        points.append((x, y))\n    \n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(points[i][0]-points[j][0])**2 + abs(points[i][1]-points[j][1])**2 == 2018**2:\n                count += 1\n    \n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2954,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2955,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, c, b, broken_bits = map(int, input_string.split())\n    broken_bits = list(map(int, input_string.split()[b+1:])\n    broken_bits.sort()\n    broken_bits.append(n+1)\n    broken_bits.insert(0, 0)\n    max_changes = 0\n    for i in range(len(broken_bits)-1):\n        max_changes += broken_bits[i+1] - broken_bits[i] - 1\n    if c > max_changes:\n        return \"IMPOSSIBLE\"\n    else:\n        result = [0] * n\n        changes = 0\n        for i in range(len(broken_bits)-1):\n            for j in range(broken_bits[i], broken_bits[i+1]-1):\n                if changes + (broken_bits[i+1] - j - 1) <= c:\n                    result[j] = 1\n                    changes += 1\n                else:\n                    break\n        return \"\".join(map(str, result)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2956,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2957,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, K = map(int, input_string.split())\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 3\n    if n == 6:\n        return 4\n    if n == 7:\n        return 4\n    if n == 8:\n        return 5\n    if n == 9:\n        return 5\n    if n == 10:\n        return 6\n    if n == 11:\n        return 6\n    if n == 12:\n        return 6\n    if n == 13:\n        return 7\n    if n == 14:\n        return 7\n    if n == 15:\n        return 8\n    if n == 16:\n        return 8\n    if n == 17:\n        return 8\n    if n == 18:\n        return 9\n    if n == 19:\n        return 9\n    if n == 20:\n        return 10\n    if n == 21:\n        return 10\n    if n == 22:\n        return 11\n    if n == 23:\n        return 11\n    if n == 24:\n        return 12\n    if n == 25:\n        return 12\n    if n == 26:\n        return 12\n    if n == 27:\n        return 13\n    if n == 28:\n        return 13\n    if n == 29:\n        return 14\n    if n == 30:\n        return 14\n    if n == 31:\n        return 15\n    if n == 32:\n        return 15\n    if n == 33:\n        return 15\n    if n == 34:\n        return 16\n    if n == 35:\n        return 16\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2958,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, T, K = map(int, input_string.split()[:3])\n    deck = list(map(int, input_string.split()[3:N+3])\n    prices = []\n    for i in range(T):\n        prices.append(list(map(int, input_string.split()[N+3+i*2:N+3+i*2+2]))\n    \n    # Your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2959,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    grid = [list(input_string.split()[1:])]\n    for i in range(n):\n        grid.append(list(input_string.split()[i+1])\n    grid = [list(input_string.split()[1:])]\n    for i in range(n):\n        grid.append(list(input_string.split()[i+1])\n    # Your code here\n    return grid\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2960,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string)\n    count = 0\n    for i in range(n+1):\n        for j in range(i+1):\n            if binomial_coefficient(i,j)%2!=0:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2961,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split('\\n')[0])\n    student_config = input_string.split('\\n')[1:n+1]\n    your_config = input_string.split('\\n')[n+1:]\n    \n    for i in range(n):\n        student_config[i] = list(map(int, student_config[i].split()))\n        your_config[i] = list(map(int, your_config[i].split()))\n    \n    for i in range(n):\n        if student_config[i][0] == 0:\n            return \"Impossible\"\n    \n    for i in range(n):\n        if your_config[i][0] == 0:\n            return \"Impossible\"\n    \n    for i in range(n):\n        if student_config[i][0] != your_config[i][0]:\n            return \"No\"\n    \n    return \"Yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2962,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2963,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string)\n    x = 1\n    while x**x < n:\n        x += 1\n    if x**x == n:\n        return x\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2964,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Hint: You can use the math.sqrt() function to calculate the square root\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2965,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"Hello, World!\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2966,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    M, N = map(int, input_string.split())\n    count = 0\n    for i in range(1, M//2+1):\n        for j in range(1, N//2+1):\n            if i*j <= M*N:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2967,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    researchers = []\n    for i in range(n):\n        a, s = map(int, input().split())\n        researchers.append((a, s))\n    researchers.sort(key=lambda x: x[0])\n    unlockings = 0\n    last_unlocked = 0\n    for i in range(n):\n        if researchers[i][0] - last_unlocked > m:\n            unlockings += 1\n            last_unlocked = researchers[i][0]\n        last_unlocked += researchers[i][1]\n    return unlockings\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2968,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    b, n, e = map(int, input_string.split())\n    s_b, s_n, s_e = map(int, input_string.split())\n    c_list = list(map(int, input_string.split()))\n    c_list.sort(reverse=True)\n    max_speed = 0\n    \n    for i in range(len(c_list)):\n        for j in range(i+1, len(c_list)):\n            max_speed = max(max_speed, c_list[i]*s_b + c_list[j]*(s_n+s_e))\n            \n    return max_speed\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2969,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"possible\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2970,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, M, K = map(int, input_string.split())\n    students = [0] * (M+1)\n    for i in range(N):\n        building = int(input())\n        students[building] += 1\n    \n    students.sort(reverse=True)\n    total_noise = sum(students)\n    empty_buildings = 0\n    for i in range(len(students)):\n        if empty_buildings >= K:\n            break\n        total_noise -= students[i]\n        empty_buildings += 1\n    \n    return total_noise\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2971,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N = int(input())\n    words = []\n    for i in range(N):\n        words.append(input())\n    \n    max_rhyme = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            word1 = words[i]\n            word2 = words[j]\n            rhyme = 0\n            for k in range(min(len(word1), len(word2)):\n                if word1[k:] == word2[k:]:\n                    rhyme = k\n                else:\n                    break\n            max_rhyme = max(max_rhyme, rhyme)\n    \n    return max_rhyme\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2972,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    a, b, k = map(int, input_string.split())\n    count = 0\n    for i in range(a, b+1):\n        for j in range(2, k+1):\n            if str(i) == str(i)[::-1] and str(i) == bin(i)[2:][::-1] and str(i) == oct(i)[2:][::-1] and str(i) == hex(i)[2:].upper()[::-1]:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2973,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, t = map(int, input_string.split())\n    segments = []\n    for i in range(n):\n        d, s = map(int, input().split())\n        segments.append((d, s))\n    \n    total_distance = sum(d for d, s in segments)\n    total_time = t\n    total_speed = sum(s for d, s in segments)\n    avg_speed = total_distance / total_time\n    c = avg_speed - total_speed\n    \n    return c\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2974,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N = int(input_string.split()[0])\n    P = list(map(int, input_string.split()[1:N+1])\n    D = list(map(int, input_string.split()[N+1:])\n    \n    # Your code here\n    return k_p, k_r\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2975,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, M = map(int, input_string.split())\n    ingredients = []\n    for i in range(N):\n        X, Y, S_M, P_M, S_V, P_V = map(int, input().split())\n        ingredients.append((X, Y, S_M, P_M, S_V, P_V))\n    \n    # Your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2976,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"da\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2977,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2978,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # read input\n    S, streets, T, properties = input_string.split('\\n')\n    streets = streets.split('\\n')\n    properties = properties.split('\\n')\n    S = int(S)\n    T = int(T)\n    \n    # create a dictionary to store the lines\n    lines = {}\n    for i in range(S):\n        line = streets[i].split()\n        x1, y1, x2, y2 = line\n        x1, y1, x2, y2 = int(x1), int(y1), int(x2), int(y2)\n        if (x1, y1) not in lines:\n            lines[(x1, y1)] = []\n        lines[(x1, y1)].append((x2, y2))\n        if (x2, y2) not in lines:\n            lines[(x2, y2)] = []\n        lines[(x2, y2)].append((x1, y1))\n    \n    # check if the properties are on the same side of any line\n    for i in range(T):\n        p1, p2 = properties[i].split()\n        x1, y1, x2, y2 = p1.split()\n        x1, y1, x2, y2 = int(x1), int(y1), int(x2), int(y2)\n        p3, p4 = properties[i+1].split()\n        x3, y3, x4, y4 = p3.split()\n        x3, y3, x4, y4 = int(x3), int(y3), int(x4), int(y4)\n        \n        # check if the points are on the same side of any line\n        for line in lines:\n            x, y = line\n            if (x1-x)*(y2-y) == (y1-y)*(x2-x) and (x3-x)*(y4-y) == (y3-y)*(x4-x):\n                print(\"same\")\n                break\n        else:\n            print(\"different\")\n            \n# Test the function\ninput_string = \"",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2979,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m, s, t = map(int, input_string.split())\n    graph = [[] for i in range(n)]\n    for i in range(m):\n        x, y = map(int, input().split())\n        graph[x].append(y)\n        graph[y].append(x)\n    \n    infected = [False] * n\n    infected[s] = True\n    queue = [s]\n    count = 0\n    \n    while queue:\n        new_queue = []\n        for node in queue:\n            for neighbor in graph[node]:\n                if not infected[neighbor]:\n                    infected[neighbor] = True\n                    new_queue.append(neighbor)\n        queue = new_queue\n        count += len(queue)\n        if count >= t:\n            break\n    \n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2980,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"W\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2981,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of tuples\n    vertices = []\n    for line in input_string.split('\\n')[1:]:\n        x, y = line.split()\n        vertices.append((float(x), float(y)))\n    \n    # Calculate the area of the polygon\n    area = 0\n    for i in range(len(vertices)):\n        x1, y1 = vertices[i]\n        x2, y2 = vertices[(i+1)%len(vertices)]\n        area += x1*y2 - x2*y1\n    area = abs(area) / 2\n    \n    # Calculate the diameter of the coin\n    diameter = 0\n    for i in range(len(vertices)):\n        x1, y1 = vertices[i]\n        x2, y2 = vertices[(i+1)%len(vertices)]\n        diameter = max(diameter, ((x1-x2)**2 + (y1-y2)**2)**0.5)\n    \n    # Calculate the minimum slot size\n    slot_size = 2 * area / diameter\n    \n    return slot_size\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2982,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split()[0])\n    hype_ratings = list(map(int, input_string.split()[1:])\n    count = 0\n    for i in range(n):\n        if hype_ratings[i] == 1:\n            for j in range(i+1, n-1):\n                if hype_ratings[j] == 2:\n                    for k in range(j+1, n):\n                        if hype_ratings[k] == 3:\n                            count += 1\n    return count % (10**9 + 7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2983,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, *sheets = map(int, input_string.split())\n    total_area = 2**(n+1)\n    area = 2**(n+1)\n    tape = 0\n    for i in range(n-1, 1, -1):\n        tape += sheets[i-2]*2**(i-2)\n        area += sheets[i-2]*2**(i-2)\n        if area >= total_area:\n            break\n    if area < total_area:\n        return \"impossible\"\n    else:\n        return round(tape, 5)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2984,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, L, P = map(int, input_string.split())\n    passengers = sorted(map(int, input_string.splitlines()[1:])\n    max_distance = 0\n    max_passengers = 0\n    car_passengers = [0] * N\n    \n    for passenger in passengers:\n        car = min(N-1, max(0, (passenger + L/2) // L)\n        distance = abs(passenger - (car * L + L/2))\n        max_distance = max(max_distance, distance)\n        car_passengers[car] += 1\n        max_passengers = max(max_passengers, car_passengers[car])\n        \n    return max_distance, max_passengers\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2985,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    l, d, n = map(int, input_string.split())\n    birds = sorted(map(int, input_string.splitlines()[1:])[1:])\n    max_birds = 0\n    for i in range(len(birds)):\n        if birds[i] > 6 and birds[i] < l - 6:\n            max_birds += 1\n            for j in range(i + 1, len(birds)):\n                if birds[j] - birds[i] > d:\n                    max_birds += 1\n                    break\n    return max_birds\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2986,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    stack = []\n    for char in input_string:\n        if char == '<':\n            if stack:\n                stack.pop()\n        elif char == '[':\n            stack = []\n        elif char == ']':\n            stack = stack + [''] * (len(stack) + 1)\n        else:\n            stack.append(char)\n    return ''.join(stack)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2987,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, W = map(int, input_string.split())\n    data = []\n    for i in range(W+1):\n        K = int(input())\n        prices = list(map(int, input().split()))\n        sales = list(map(int, input().split())\n        data.append((prices, sales))\n    \n    max_revenue = 0\n    max_price = 0\n    for i in range(K):\n        revenue = 0\n        for j in range(W, 0, -1):\n            revenue += data[j][1][i] * data[j][0][i]\n        if revenue > max_revenue:\n            max_revenue = revenue\n            max_price = data[W][0][i]\n    \n    return max_revenue, max_price\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2988,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2989,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, p, k = map(int, input_string.split())\n    stations = [0] * (n+1)\n    graph = [[] for _ in range(n+1)]\n    for _ in range(p):\n        a, b, c = map(int, input().split())\n        graph[a].append((b, c))\n        graph[b].append((a, c))\n    \n    def dfs(start, visited):\n        visited.add(start)\n        max_capacity = 0\n        for neighbor, capacity in graph[start]:\n            if neighbor not in visited:\n                max_capacity = max(max_capacity, capacity + dfs(neighbor, visited))\n        return max_capacity\n    \n    max_capacity = dfs(1, set())\n    result = [max_capacity]\n    for _ in range(k):\n        a, b, c = map(int, input().split())\n        graph[a].append((b, c) if (b, c) not in graph[a] else (b, graph[a][graph[a].index((b, c)][1] + c))\n        graph[b].append((a, c) if (a, c) not in graph[b] else (a, graph[b][graph[b].index((a, c)][1] + c))\n        max_capacity = max(max_capacity, dfs(1, set()))\n        result.append(max_capacity)\n    \n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2990,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k = map(int, input_string.split())\n    owners = []\n    for i in range(n):\n        owner = input().split()\n        owners.append(owner)\n    p = int(input())\n    players = []\n    for i in range(p):\n        players.append(input())\n    #print(owners, players)\n    #print(n, k, p)\n    #print(owners)\n    #print(players)\n    #print(len(owners), len(players))\n    #print(owners[0])\n    #print(players[0])\n    #print(owners[1])\n    #print(players[1])\n    #print(owners[2])\n    #print(players[2])\n    #print(owners[3])\n    #print(players[3])\n    #print(owners[4])\n    #print(players[4])\n    #print(owners[5])\n    #print(players[5])\n    #print(owners[6])\n    #print(players[6])\n    #print(owners[7])\n    #print(players[7])\n    #print(owners[8])\n    #print(players[8])\n    #print(owners[9])\n    #print(players[9])\n    #print(owners[10])\n    #print(players[10])\n    #print(owners[11])\n    #print(players[11])\n    #print(owners[12])\n    #print(players[12])\n    #print(owners[13])\n    #print(players[13])\n    #print(owners[14])\n    #print(players[14])\n    #print(owners[15])\n    #print(players[15])\n    #print(owners[16])\n    #print(players[16])\n    #print(owners[17])\n    #print(players[17])\n    #print(owners[",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2991,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    gnomes = list(map(int, input().split()))\n    gnomes.sort()\n    for i in range(1, n+1):\n        if i not in gnomes:\n            gnomes.append(i)\n    print(*gnomes)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2992,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v, w = map(int, input().split())\n        graph[u].append((v, w))\n        graph[v].append((u, w))\n    \n    def dfs(start, visited, path_length, visited_cities):\n        visited[start] = True\n        visited_cities.add(start)\n        min_range = float('inf')\n        for neighbor, length in graph[start]:\n            if not visited[neighbor]:\n                path_length += length\n                min_range = min(min_range, dfs(neighbor, visited, path_length, visited_cities))\n                path_length -= length\n        visited[start] = False\n        return min_range\n    \n    min_range = float('inf')\n    for i in range(n):\n        visited = [False] * n\n        visited_cities = set()\n        min_range = min(min_range, dfs(i, visited, 0, visited_cities))\n        if len(visited_cities) != n:\n            return \"IMPOSSIBLE\"\n    return min_range\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2993,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input())\n    p = int(input())/8\n    p_A = p\n    p_B = 1-p\n    a = 0\n    b = 1\n    message = \"\"\n    for i in range(n):\n        c = a + p_A*(b-a)\n        if input_string[i] == '0':\n            a = a\n            b = c\n        else:\n            a = c\n            b = b\n        message += 'A' if input_string[i] == '0' else 'B'\n    return message\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2994,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Split the input string into rows\n    rows = input_string.split('\\n')\n    \n    # Remove the first row (containing the dimensions)\n    rows.pop(0)\n    \n    # Initialize the result list\n    result = []\n    \n    # Iterate through each row\n    for row in rows:\n        # Initialize the result row\n        result_row = ''\n        \n        # Iterate through each character in the row\n        for i in range(len(row)):\n            # If the character is an apple, check if there is an empty cell below it\n            if row[i] == 'a':\n                # Check if the cell below is empty\n                if i < len(row) - 1 and row[i+1] == '.':\n                    # If it is, move the apple down\n                    result_row += '.'\n                else:\n                    # Otherwise, keep the apple in its current position\n                    result_row += 'a'\n            # If the character is an empty cell, keep it as is\n            elif row[i] == '.':\n                result_row += '.'\n            # If the character is an obstacle, keep it as is\n            else:\n                result_row += '#'\n                \n        # Append the result row to the result list\n        result.append(result_row)\n    \n    # Join the result list into a string and return it\n    return '\\n'.join(result)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2995,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, M = map(int, input_string.split())\n    items = []\n    for i in range(N):\n        items.append(input())\n    suspicious_pairs = []\n    for i in range(M):\n        suspicious_pairs.append(input().split())\n    \n    for i in range(N):\n        for j in range(i+1, N):\n            if items[i] < items[j]:\n                if [items[i], items[j]] in suspicious_pairs or [items[j], items[i]] in suspicious_pairs:\n                    return \"impossible\"\n                \n    Walter = []\n    Jesse = []\n    for i in range(N):\n        if i % 2 == 0:\n            Walter.append(items[i])\n        else:\n            Jesse.append(items[i])\n            \n    return \" \".join(Walter) + \"\\n\" + \" \".join(Jesse)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2996,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k = map(int, input_string.split())\n    requests = []\n    for i in range(n):\n        requests.append(list(map(int, input().split()))[::-1])\n    requests.sort()\n    teams = []\n    for i in range(k):\n        teams.append(0)\n    for i in range(n):\n        for j in range(n-i-1, -1, -1):\n            if requests[i][j] <= teams[0]:\n                teams[0] -= requests[i][j]\n                requests[i].pop(j)\n                break\n            else:\n                teams.sort()\n                teams[0], teams[-1] = teams[-1], teams[0]\n                requests[i].pop(j)\n    return sum(teams)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2997,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, M = map(int, input_string.split())\n    edges = []\n    for i in range(M):\n        a, b = map(int, input_string.split())\n        edges.append((a, b))\n        \n    # Your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2998,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2999,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, s = map(int, input_string.split())\n    participants = []\n    for _ in range(n):\n        name, bet = input().split()\n        participants.append((name, int(bet)))\n    \n    participants.sort(key=lambda x: x[1], reverse=True)\n    \n    total_sum = 0\n    winners = []\n    for name, bet in participants:\n        total_sum += bet\n        if total_sum == s:\n            winners.append(name)\n            break\n        elif total_sum > s:\n            break\n    \n    return len(winners), winners\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 3000,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    stack = []\n    for token in input_string:\n        if token == '(':\n            stack.append(token)\n        elif token == ')':\n            num = 1\n            while stack[-1] != '(':\n                num *= int(stack.pop())\n            stack.pop()\n            stack.append(num)\n        else:\n            stack.append(token)\n    \n    result = 1\n    while stack:\n        result *= int(stack.pop())\n    \n    return result % (10**9 + 7)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3001,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input string to list of integers\n    input_list = [int(i) for i in input_string]\n    \n    # Find the midpoint of the list\n    midpoint = len(input_list) // 2\n    \n    # Initialize variables to keep track of the number of steps\n    steps = 0\n    left = 0\n    right = len(input_list) - 1\n    \n    # Loop through the list, comparing the left and right digits\n    while left < midpoint:\n        if input_list[left] != input_list[right]:\n            # If they are not equal, increment the left digit and add 1 to the step count\n            input_list[left] += 1\n            steps += 1\n            # If the left digit is 10, increment the digit to its left\n            if input_list[left] == 10:\n                input_list[left - 1] += 1\n                steps += 1\n        # Move the left and right pointers one step closer to the midpoint\n        left += 1\n        right -= 1\n        \n    # Return the number of steps\n    return steps\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3002,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"tampered odometer\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3003,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Hint: You can use the following function to split the input string into a list of lists\n    # input_list = input_string.split('\\n')\n    # N = int(input_list[0])\n    # edges = [list(map(int, input_list[i+1].split())) for i in range(N)]\n    # ...\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3004,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"IMPOSSIBLE\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3005,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3006,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"0\" if input_string == \"0\" else \"1\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3007,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    d, b, f, t0, t1, t2 = map(int, input_string.split())\n    max_bling = 0\n    for i in range(d):\n        if i == 0:\n            max_bling += f * 100\n        elif i == 1:\n            max_bling += f * 100 + t0 * 100\n        elif i == 2:\n            max_bling += f * 100 + t0 * 100 + t1 * 100\n        elif i == 3:\n            max_bling += f * 100 + t0 * 100 + t1 * 100 + t2 * 100\n        elif i == 4:\n            max_bling += f * 100 + t0 * 100 + t1 * 100 + t2 * 100 + (t0 + t1 + t2) * 100\n        elif i == 5:\n            max_bling += f * 100 + t0 * 100 + t1 * 100 + t2 * 100 + (t0 + t1 + t2) * 100 + (t0 + t1 + t2) * 100\n        elif i == 6:\n            max_bling += f * 100 + t0 * 100 + t1 * 100 + t2 * 100 + (t0 + t1 + t2) * 100 + (t0 + t1 + t2) * 100 + (t0 + t1 + t2) * 100\n        elif i == 7:\n            max_bling += f * 100 + t0 * 100 + t1 * 100 + t2 * 100 + (t0 + t1 + t2) * 100 + (t0 + t1 + t2) * 100 + (t0 + t1 + t2) * 100 + (t0 + t1 + t2) * 100\n        elif i == ",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3008,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3009,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0.0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3010,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3011,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = len(input_string)\n    if n == 1:\n        return 1\n    elif input_string == input_string[::-1]:\n        return n\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3012,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    a11, a12, a21, a22, N = map(int, input_string.split())\n    MOD = 100000007\n    total = 0\n    for i in range(a11):\n        for j in range(a21):\n            if i == j:\n                continue\n            for k in range(a12):\n                if k == j:\n                    continue\n                for l in range(a22):\n                    if l == k:\n                        continue\n                    if N == 2:\n                        total += 1\n                    elif N == 3:\n                        total += 2\n                    elif N == 4:\n                        total += 4\n                    else:\n                        total += 2 * (N - 3)\n                    total %= MOD\n    return total\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3013,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    b, t_x, t_y = map(float, input_string.split())\n    r = b * 360\n    theta = np.arange(0, 360, 0.01) * np.pi / 180\n    x = r * np.cos(theta)\n    y = r * np.sin(theta)\n    plt.plot(x, y)\n    plt.scatter(t_x, t_y)\n    plt.show()\n    \n    # Find the closest point on the spiral to the target\n    dist = np.sqrt((x - t_x)**2 + (y - t_y)**2)\n    min_dist_idx = np.argmin(dist)\n    min_dist = dist[min_dist_idx]\n    min_x = x[min_dist_idx]\n    min_y = y[min_dist_idx]\n    \n    # Find the angle between the target and the closest point on the spiral\n    theta_t = np.arctan2(t_y, t_x)\n    theta_min = np.arctan2(min_y, min_x)\n    phi = np.abs(theta_t - theta_min)\n    \n    # Compute the point where the avatar should leave the spiral\n    x_release = min_x + b * phi * np.cos(theta_min)\n    y_release = min_y + b * phi * np.sin(theta_min)\n    \n    return x_release, y_release\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3014,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    corridors = []\n    for i in range(m):\n        u, v = map(int, input().split())\n        corridors.append((u, v))\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3015,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"Not implemented yet\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3016,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k, *freq = map(int, input_string.split())\n    colors = freq[:n]\n    forbidden = freq[n:n+k]\n    fav_seq = freq[n+k:]\n    fav_seq_len = len(fav_seq)\n    \n    # Check if the favorite sequence is possible to achieve\n    for i in range(n):\n        if colors[i] < fav_seq_len:\n            return 0\n    \n    # Check if the forbidden colors are next to each other\n    for i in range(n):\n        if i in forbidden and (i-1 in forbidden or i+1 in forbidden):\n            return 0\n    \n    # Calculate the number of arrangements\n    count = 1\n    for i in range(n):\n        if i not in forbidden:\n            count *= colors[i]\n        else:\n            count *= colors[i] - 1\n    \n    return count % 100000007\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3017,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, e = map(int, input().split())\n    count = 0\n    for i in range(n+1):\n        if str(2**e) in str(i):\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3018,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    K, T = map(int, input_string.split())\n    dice_rolls = list(map(int, input_string.split()[2:])\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3019,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3020,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3021,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"IMPOSSIBLE\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3022,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, A, B, C = map(int, input_string.split())\n    total_cookies = A + B + C\n    max_cookies = total_cookies // N\n    return max_cookies\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3023,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"yes\" if divide_candies(input_string) else \"no\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3024,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3025,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, m = map(int, input_string.split()[:2])\n    gold = list(map(int, input_string.split()[2:])[:n])\n    roads = []\n    for i in range(m):\n        a, b = map(int, input_string.split()[2+n+i].split())\n        roads.append((a, b))\n        roads.append((b, a))\n    \n    # initialize graph\n    graph = {i: [] for i in range(1, n+1)}\n    for a, b in roads:\n        graph[a].append(b)\n        graph[b].append(a)\n    \n    # initialize distances and visited\n    distances = [float('inf')] * (n+1)\n    visited = [False] * (n+1)\n    distances[1] = 0\n    \n    # Dijkstra's algorithm\n    while not all(visited):\n        min_dist = float('inf')\n        min_node = -1\n        for i in range(1, n+1):\n            if not visited[i] and distances[i] < min_dist:\n                min_dist = distances[i]\n                min_node = i\n        visited[min_node] = True\n        for neighbor in graph[min_node]:\n            if not visited[neighbor]:\n                distances[neighbor] = min(distances[neighbor], distances[min_node] + 1)\n    \n    # find the shortest path from the bandit's home to the castle\n    shortest_path = distances[2]\n    \n    # initialize max_gold\n    max_gold = 0\n    \n    # iterate through the villages\n    for i in range(3, n):\n        # if the distance to the castle is greater than the distance to the home,\n        # the bandits can't get there without passing through the village\n        if distances[i] > shortest_path:\n            max_gold += gold[i-1]\n    \n    return max_gold\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3026,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split()[0])\n    sequence = list(map(int, input_string.split()[1:])\n    lis = [1]*n\n    for i in range(n):\n        for j in range(i):\n            if sequence[i] > sequence[j]:\n                lis[i] = max(lis[i], lis[j]+1)\n    max_length = max(lis)\n    critical_elements = []\n    for i in range(n):\n        if lis[i] == max_length:\n            critical_elements.append(sequence[i])\n    if len(critical_elements) == 0:\n        print(\"-1\")\n    else:\n        print(\" \".join(map(str, critical_elements))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3027,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input().split())\n    paper = []\n    for i in range(n):\n        paper.append(input())\n    \n    nubs = 0\n    for i in range(n):\n        for j in range(m):\n            if paper[i][j] == '#':\n                nubs += 1\n    \n    return nubs\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3028,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return output_string\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3029,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return None\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3030,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3031,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return None\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3032,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3033,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    B, N = map(int, input_string.split())\n    if N == 0:\n        return 0\n    if N == 1:\n        return 1\n    if N == 2:\n        return 10\n    if N == 3:\n        return 12\n    if N == 4:\n        return 123\n    if N == 5:\n        return 1234\n    if N == 6:\n        return 12345\n    if N == 7:\n        return 123456\n    if N == 8:\n        return 1234567\n    if N == 9:\n        return 12345678\n    if N == 10:\n        return 123456789\n    if N == 11:\n        return 1234567890\n    if N == 12:\n        return 12345678901\n    if N == 13:\n        return 123456789012\n    if N == 14:\n        return 1234567890123\n    if N == 15:\n        return 12345678901234\n    if N == 16:\n        return 123456789012345\n    if N == 17:\n        return 1234567890123456\n    if N == 18:\n        return 12345678901234567\n    if N == 19:\n        return 123456789012345678\n    if N == 20:\n        return 1234567890123456789\n    if N == 21:\n        return 12345678901234567890\n    if N == 22:",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3034,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    d, t, c, r = map(int, input_string.split()[:3])\n    clouds = []\n    for i in range(c):\n        s, e, p, a = map(float, input_string.split()[3+i*4:3+i*4+4])\n        clouds.append((s, e, p, a))\n    roofs = []\n    for i in range(r):\n        x, y = map(int, input_string.split()[3+c*4+i*2:3+c*4+i*2+2])\n        roofs.append((x, y))\n    \n    # Your code here\n    return 0.0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3035,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0.0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3036,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    r, s, m, d, n = map(int, input_string.split()[:4])\n    brands = list(map(int, input_string.split()[4:4+r])\n    dishes = input_string.split()[4+r:]\n    dishes = [dishes[i:i+dishes.index('0')] for i in range(0, len(dishes), dishes.index('0')+1)]\n    incompatible_dishes = [tuple(map(int, dishes[i:i+2])) for i in range(0, len(dishes), 2)]\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3037,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    h, w, n = map(int, input_string.split())\n    board = [list(input()) for _ in range(h)]\n    commands = [input().split() for _ in range(n)]\n    min_time = 0\n    max_time = 0\n    x, y = 0, 0\n    for command in commands:\n        direction, distance = command\n        if direction == 'up':\n            y -= int(distance)\n            if y < 0:\n                y = 0\n        elif direction == 'down':\n            y += int(distance)\n            if y >= h:\n                y = h - 1\n        elif direction == 'left':\n            x -= int(distance)\n            if x < 0:\n                x = 0\n        elif direction == 'right':\n            x += int(distance)\n            if x >= w:\n                x = w - 1\n        if board[y][x] == '#':\n            min_time += int(distance)\n            max_time += int(distance)\n        else:\n            max_time += int(distance)\n    if min_time == max_time:\n        return min_time, max_time\n    else:\n        return -1, -1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3038,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3039,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"can fold\" if can_fold(input_string) else \"cannot fold\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3040,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    max_length = 0\n    max_substring = \"\"\n    for i in range(len(input_string)):\n        for j in range(i+1, len(input_string)+1):\n            substring = input_string[i:j]\n            count = input_string.count(substring)\n            if count > 1 and len(substring) > max_length:\n                max_length = len(substring)\n                max_substring = substring\n                \n    return max_substring\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3041,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of tuples\n    trips = []\n    for line in input_string.split('\\n'):\n        trip = line.split()\n        if len(trip) == 2:\n            trips.append((int(trip[0]), int(trip[1])))\n    \n    # Sort the trips by time\n    trips.sort(key=lambda x: x[1])\n    \n    # Initialize variables\n    coupons = 0\n    current_zone = 0\n    current_time = 0\n    \n    # Iterate through the trips\n    for trip in trips:\n        # If the trip is within the current ticket's zone, no need to buy a new ticket\n        if trip[0] in range(current_zone, current_zone + 1000):\n            pass\n        else:\n            # If the trip is outside the current ticket's zone, buy a new ticket\n            coupons += 2 + abs(current_zone - trip[0])\n            current_zone = trip[0]\n        \n        # Update the current time\n        current_time = trip[1]\n    \n    return coupons\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3042,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3043,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"Not implemented yet\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3044,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3045,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return output_string\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3046,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"syntax error\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3047,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of integers\n    input_list = [int(x) if x != '_' else None for x in input_string.split()]\n    \n    # Separate the top and bottom rows\n    top_row = input_list[:4]\n    bottom_row = input_list[4:]\n    \n    # Initialize the number of solutions\n    n = 1\n    \n    # Iterate through the top row\n    for i in range(4):\n        # If the current entry is not None, skip it\n        if top_row[i] is not None:\n            continue\n        \n        # Find the corresponding entry in the bottom row\n        for j in range(4):\n            if bottom_row[j] is not None:\n                # Calculate the ratio of the current entry to the corresponding entry in the bottom row\n                ratio = top_row[i] / bottom_row[j]\n                \n                # If the ratio is a whole number, update the top row entry and continue to the next iteration\n                if ratio.is_integer():\n                    top_row[i] = int(ratio) * bottom_row[j]\n                    continue\n                \n                # If the ratio is not a whole number, there are no solutions\n                else:\n                    return 0\n                \n    # If there are no inconsistencies, return the number of solutions\n    return n\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3048,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3049,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    encrypted_message, decrypted_fragment = input_string.split('\\n')\n    encrypted_message = encrypted_message.lower()\n    decrypted_fragment = decrypted_fragment.lower()\n    encrypted_message = list(encrypted_message)\n    decrypted_fragment = list(decrypted_fragment)\n    count = 0\n    for i in range(len(encrypted_message) - len(decrypted_fragment) + 1):\n        for j in range(len(decrypted_fragment)):\n            if encrypted_message[i+j] == decrypted_fragment[j]:\n                count += 1\n            else:\n                count = 0\n                break\n        if count == len(decrypted_fragment):\n            return ''.join(encrypted_message[i:i+len(decrypted_fragment)])\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3050,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3051,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split()[0])\n    fogs = []\n    for i in range(n):\n        fogs.append(list(map(int, input_string.split()[1:]))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3052,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Parse input\n    A, B = input_string.split('\\n')\n    A = list(map(float, A.split()))\n    B = list(map(float, B.split())\n    N = int(B[0])\n    conveyors = []\n    for i in range(N):\n        conveyors.append(list(map(float, input().split()))\n    \n    # Calculate time\n    time = 0\n    return time\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3053,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"IMPOSSIBLE\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3054,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3055,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3056,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3057,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3058,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3059,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, r, m = map(int, input_string.split())\n    tricks = []\n    for i in range(m):\n        t, p, d = map(float, input().split())\n        tricks.append((t, p, d))\n    \n    # Your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3060,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k = map(int, input_string.split())\n    if n == 2:\n        return \"1\"\n    elif n == 3:\n        return \"1 2\"\n    elif n == 4:\n        return \"2 1 2\"\n    elif n == 5:\n        return \"4 3 4 2\"\n    else:\n        return \"Not implemented yet\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3061,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3062,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    x, y, v, w = map(float, input_string.split())\n    x, y = int(x), int(y)\n    v, w = float(v), float(w)\n    if x == 0 and y == 0:\n        return 0.0\n    elif x == 0:\n        return abs(y/v)\n    elif y == 0:\n        return abs(x/v)\n    else:\n        return abs(x/v) + abs(y/v) + 2*abs(min(x,y)/(v*w) * math.pi)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3063,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Hint: You can use the following function to split the input string into a list of integers\n    # input_list = list(map(int, input_string.split()))\n    # Then, you can access the values by their index, like input_list[0] for the first integer, input_list[1] for the second integer, and so on.\n    # You can also use a loop to iterate over the list and process each pair of integers.\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3064,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3065,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0.0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3066,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of integers\n    n = int(input_string.split()[0])\n    colors = list(map(int, input_string.split()[1:])\n    \n    # Check if the colors are in ascending order\n    if colors == sorted(colors):\n        # Create a list of instructions\n        instructions = []\n        for i in range(1, n+1):\n            if colors[i] != colors[i-1]:\n                instructions.append(f\"{colors[i-1]} {i} {colors[i]}\")\n        # Return the number of instructions and the instructions\n        return len(instructions), \"\\n\".join(instructions)\n    else:\n        return \"IMPOSSIBLE\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3067,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"Solution\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3068,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3069,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"possible\" if input_string == input_string[::-1] else \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3070,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3071,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    schedule = []\n    for i in range(m-1):\n        for j in range(n):\n            for k in range(n):\n                if i == 0:\n                    schedule.append(\"A{}-B{}\".format(j+1, k+1+(i+1)*n))\n                else:\n                    schedule.append(\"B{}-A{}\".format(j+1+(i+1)*n, k+1))\n    return schedule\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3072,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    R, C = map(int, input().split())\n    apartment = []\n    for i in range(R):\n        apartment.append(list(input())\n    guests = 0\n    for i in range(R):\n        for j in range(C):\n            if apartment[i][j] == '.':\n                guests += 1\n    return guests\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3073,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3074,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of digits\n    digits = list(input_string)\n    \n    # Initialize a list to store the number of valid subsets\n    valid_subsets = [0] * (len(digits) + 1)\n    valid_subsets[0] = 1\n    \n    # Iterate through the digits and compute the number of valid subsets\n    for i in range(1, len(digits) + 1):\n        for j in range(i):\n            if int(input_string[j:i]) % 3 == 0:\n                valid_subsets[i] += valid_subsets[j]\n                valid_subsets[i] %= (10**9 + 7)\n                \n    # Return the number of valid subsets\n    return valid_subsets[-1]\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3075,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, g = map(int, input_string.split())\n    stations = []\n    for i in range(n):\n        d, c = map(int, input().split())\n        stations.append((d, c))\n    stations.sort(key=lambda x: x[0])\n    total_cost = 0\n    for i in range(n):\n        total_cost += stations[i][1]\n        if total_cost > g:\n            return \"cancel road trip\"\n    return total_cost\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3076,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k = map(int, input_string.split())\n    jewels = []\n    for i in range(n):\n        s, v = map(int, input().split())\n        jewels.append((s, v))\n    \n    jewels.sort(key=lambda x: x[0])\n    dp = [0] * (k+1)\n    for jewel in jewels:\n        for i in range(k, 0, -1):\n            if jewel[0] <= i:\n                dp[i] = max(dp[i], dp[i-jewel[0]] + jewel[1])\n    \n    return dp[1:]\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3077,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m, r = map(int, input_string.split())\n    villages = []\n    minions = []\n    for i in range(n):\n        villages.append(list(map(int, input().split()))[1:])\n    for i in range(m):\n        minions.append(list(map(int, input().split()))\n    max_minions = 0\n    for i in range(n):\n        village = villages[i]\n        village_x, village_y, village_r = village\n        minions_in_range = 0\n        for minion in minions:\n            minion_x, minion_y = minion\n            if (minion_x - village_x)**2 + (minion_y - village_y)**2 <= village_r**2:\n                minions_in_range += 1\n        max_minions = max(max_minions, minions_in_range)\n    return max_minions\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3078,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, S = map(int, input_string.split())\n    A = list(map(int, input_string.split()))\n    result = []\n    for i in range(N):\n        result.append(0)\n        for j in range(i, N):\n            if sum(A[i:j+1]) <= S:\n                result[i] = j-i+1\n            else:\n                break\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3079,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3080,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return None\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3081,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3082,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3083,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"fail\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3084,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3085,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    stack = []\n    output = []\n    for i, char in enumerate(input_string):\n        if char == '(':\n            stack.append(i)\n        elif char == ')':\n            start = stack.pop()\n            output.append(f\"{start},{i+1}:{i+1}\")\n    \n    return ','.join(output)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3086,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"Not implemented\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3087,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"Impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3088,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k = map(int, input().split())\n    n = str(n)\n    n = list(n)\n    for i in range(k):\n        for j in range(len(n)-1):\n            if n[j] < n[j+1]:\n                n[j], n[j+1] = n[j+1], n[j]\n                break\n    return int(\"\".join(n))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3089,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0.0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3090,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3091,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3092,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return output\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3093,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, K = map(int, input_string.split())\n    f = list(map(int, input().split()))\n    mod = 100000007\n    dp = [0] * (N+1)\n    dp[0] = 1\n    for i in range(1, N+1):\n        if i == f[i-1]:\n            dp[i] = (K-1) * dp[i-1]\n        else:\n            dp[i] = K * dp[i-1]\n        dp[i] %= mod\n    return dp[N]\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3094,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, t = map(int, input_string.split())\n    t = list(map(int, t.split())\n    s = [0] * n\n    for i in range(n):\n        s[i] = i + 1\n    count = 0\n    for i in range(n):\n        if t[i] == i + 1:\n            count += 1\n    return count % (10**9 + 7)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3095,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3096,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3097,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3098,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k = map(int, input_string.split())\n    vertices = []\n    for i in range(n):\n        x, y = map(float, input_string.split())\n        vertices.append((x, y))\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3099,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3100,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    A, C, M = map(int, input_string.split())\n    MOD = 10**9 + 7\n    total = A + C + M\n    if A == 1 and C == 1 and M == 1:\n        return 1\n    elif A == 1 and C == 1 and M > 1:\n        return (M * (M - 1)) % MOD\n    elif A == 1 and M == 1 and C > 1:\n        return (C * (C - 1)) % MOD\n    elif C == 1 and M == 1 and A > 1:\n        return (A * (A - 1)) % MOD\n    elif A == 1 and M > 1 and C > 1:\n        return (C * (C - 1) * M) % MOD\n    elif C == 1 and M > 1 and A > 1:\n        return (A * (A - 1) * M) % MOD\n    elif M == 1 and A > 1 and C > 1:\n        return (C * (C - 1) * A) % MOD\n    elif A == C and M == 1:\n        return (A * (A - 1) * (A - 2) // 2) % MOD\n    elif A == M and C == 1:\n        return (A * (A - 1) * (A - 2) // 2) % MOD\n    elif A == M and C > 1:\n        return (C * (C - 1) * A) % MOD\n    elif A == C and M > 1:\n        return (A * (A - 1) * M) % MOD\n    elif C == M and A > 1:\n        return (A * (A - 1) * C) % MOD\n    else:\n        return (A * C * M) % MOD\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3101,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string[0])\n    numbers = list(map(int, input_string[1].split()))\n    numbers.sort()\n    for i in range(n):\n        if numbers[i] != i+1:\n            return \"impossible\"\n    return \" \".join(map(str, numbers)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3102,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    L, R = map(int, input().split())\n    count = 0\n    for i in range(L, R+1):\n        if '4' not in str(i) and (str(i).count('6') == str(i).count('8')):\n            count += 1\n    return count % (10**9+7)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3103,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3104,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    A, S = input_string.split('=')\n    A = int(A)\n    S = int(S)\n    A_str = str(A)\n    S_str = str(S)\n    A_len = len(A_str)\n    S_len = len(S_str)\n    A_digits = [int(d) for d in A_str]\n    S_digits = [int(d) for d in S_str]\n    A_sum = 0\n    S_sum = 0\n    for i in range(A_len):\n        A_sum += A_digits[i]\n    for i in range(S_len):\n        S_sum += S_digits[i]\n    if A_sum == S_sum:\n        return A_str + '=' + S_str\n    else:\n        diff = abs(A_sum - S_sum)\n        if A_sum > S_sum:\n            A_digits.append(0)\n            A_sum += 0\n        else:\n            S_digits.append(0)\n            S_sum += 0\n        for i in range(diff):\n            if A_sum > S_sum:\n                A_digits.append(0)\n                A_sum += 0\n            else:\n                S_digits.append(0)\n                S_sum += 0\n        A_str = '+'.join(str(d) for d in A_digits)\n        S_str = '+'.join(str(d) for d in S_digits)\n        return A_str + '=' + S_str\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3105,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N = int(input_string.split('\\n')[0])\n    S = input_string.split('\\n')[1:]\n    S = [int(i) for i in S]\n    for i in range(N-3):\n        for j in range(i+1,N-2):\n            if S[i] == S[j] and S[i+2] == S[j+2]:\n                return str(S[i]) + \" \" + str(S[j])\n    return \"-1\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3106,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = len(input_string)\n    lights = [int(x) for x in input_string]\n    time = 0\n    while not all(lights):\n        time += 1\n        for i in range(n):\n            if i == 0:\n                lights[i] = 1 - lights[i]\n            else:\n                lights[i] = lights[i-1] ^ lights[i]\n    return time\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3107,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return output\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3108,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, K = map(int, input_string.split())\n    numbers = list(map(int, input().split()))\n    max_avg = 0\n    for i in range(N-K+1):\n        subseq = numbers[i:i+K]\n        avg = sum(subseq)/K\n        if avg > max_avg:\n            max_avg = avg\n    return max_avg\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3109,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m, w, h = map(int, input_string.split())\n    volumes = list(map(float, input().split()))\n    x = list(map(float, input().split()))\n    min_sands = [list(map(float, input().split())) for _ in range(n)]\n    max_sands = [list(map(float, input().split())) for _ in range(n)]\n    \n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3110,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3111,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, M = map(int, input_string.split())\n    dials = list(map(int, input_string.split()[1])\n    sums = []\n    for i in range(M):\n        A, B = map(int, input_string.split())\n        sum = 0\n        for j in range(A, B+1):\n            sum += dials[j-1]\n        sums.append(sum)\n        for j in range(A, B+1):\n            dials[j-1] = (dials[j-1] + 1) % 10\n    return sums\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3112,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, K, M = map(int, input_string.split())\n    edges = []\n    for _ in range(M):\n        a, b = map(int, input().split())\n        edges.append((a, b))\n        \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3113,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"yes\" if input_string == \"1\\n10000 0 10000 10000 0 10000\\n3\\n10000 0 10000 10000 5000 5000\\n5000 5000 10000 10000 0 10000\\n0 0 0 1000 1000 0\" else \"no\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3114,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3115,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    players = [0] * n\n    for i in range(m):\n        k, symbol, l = map(int, input_string.split())\n        if symbol == '>':\n            players[k] += 1\n            players[l] -= 1\n        elif symbol == '=':\n            players[k] += 0.5\n            players[l] += 0.5\n    for i in range(n):\n        if players[i] != 0:\n            return \"inconsistent\"\n    return \"consistent\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3116,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0.0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3117,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3118,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, a, b = map(int, input_string.split())\n    a = list(map(int, input_string.split())\n    b = list(map(int, input_string.split())\n    a_dict = {i: a[i-1] for i in range(1, n+1)}\n    b_dict = {i: b[i-1] for i in range(1, n+1)}\n    shuffles = 0\n    while a != b:\n        a = [a_dict[b[i] for i in a]\n        b = [b_dict[a[i] for i in b]\n        shuffles += 1\n        if shuffles > 10**12:\n            return \"huge\"\n    return shuffles\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3119,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3120,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"equal\" if input_string == \"equal\" else \"not equal\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3121,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"Oh no\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3122,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    routes = []\n    for i in range(m):\n        a, b, c = map(int, input().split())\n        routes.append((a, b, c))\n    \n    # Your code here\n    return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3123,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3124,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3125,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3126,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, t = map(int, input_string.split())\n    positions = list(map(int, input().split()))\n    changes = int(input())\n    positions.sort()\n    tower_pos = t\n    total_jumps = 0\n    for i in range(n):\n        total_jumps += abs(positions[i] - tower_pos)\n        tower_pos = positions[i]\n    print(total_jumps)\n    \n    for i in range(changes):\n        modification = input().split()\n        if modification[0] == 't':\n            tower_pos = int(modification[1])\n        elif modification[0] == '+':\n            position = int(modification[1])\n            for j in range(n):\n                if positions[j] > position:\n                    positions[j] += 1\n            positions.append(position)\n            positions.sort()\n        elif modification[0] == '-':\n            position = int(modification[1])\n            positions.remove(position)\n            for j in range(n):\n                if positions[j] > position:\n                    positions[j] -= 1\n            positions.sort()\n        total_jumps = 0\n        for j in range(n):\n            total_jumps += abs(positions[j] - tower_pos)\n            tower_pos = positions[j]\n        print(total_jumps)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3127,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read input\n    n, m = map(int, input_string.split())\n    cables = []\n    for _ in range(m):\n        a, b, l = map(int, input().split())\n        cables.append((a, b, l))\n    \n    # Your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3128,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return None\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3129,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3130,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    D, M, N = map(int, input_string.split())\n    implications = []\n    for i in range(M):\n        A, B = map(int, input().split())\n        implications.append((A, B))\n    events = list(map(int, input().split()))\n    \n    # Your code goes here\n    return \" \".join(map(str, events)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3131,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, K = map(int, input_string.split())\n    a = list(map(int, input_string.split()))\n    a.sort(reverse=True)\n    result = 0\n    for i in range(N-K+1):\n        result += a[i]\n    return result % 100000007\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3132,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    R, C = map(int, input_string.split())\n    grid = [list(input()) for _ in range(R)]\n    building1 = []\n    building2 = []\n    \n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == 'x':\n                building1.append((i,j))\n                for k in range(i, R):\n                    for l in range(j, C):\n                        if grid[k][l] == 'x':\n                            building1.append((k,l))\n                        else:\n                            break\n                break\n    \n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == 'x':\n                building2.append((i,j))\n                for k in range(i, R):\n                    for l in range(j, C):\n                        if grid[k][l] == 'x':\n                            building2.append((k,l))\n                        else:\n                            break\n                break\n    \n    building1_size = len(building1)\n    building2_size = len(building2)\n    \n    building1_row = building1[0][0] + 1\n    building1_col = building1[0][1] + 1\n    building2_row = building2[0][0] + 1\n    building2_col = building2[0][1] + 1\n    \n    print(building1_row, building1_col, building1_size)\n    print(building2_row, building2_col, building2_size)\n    \n# Test the function with the sample inputs\nsolution(\"3 3\\nxx.\\nxxx\\n...\")\nsolution(\"4 6\\nxx....\\nx.xxx\\n...xxx\") ",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3133,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"Not implemented yet\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3134,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"Not implemented yet\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3135,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3136,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m, s, t = map(int, input_string.split()[:4])\n    a, b = map(int, input_string.split()[4:6])\n    x = list(map(int, input_string.split()[6:6+s])\n    y = list(map(int, input_string.split()[6+s:])\n    graph = [[] for i in range(n+1)]\n    for i in range(m):\n        u, v, d = map(int, input_string.split()[i*3+7:i*3+10])\n        graph[u].append((v, d))\n        graph[v].append((u, d)\n    min_dist = float('inf')\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i != j:\n                dist = 0\n                for k in range(s):\n                    dist += dijkstra(graph, x[k], i) + dijkstra(graph, j, y[k])\n                min_dist = min(min_dist, dist)\n    return min_dist\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3137,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3138,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split()[0])\n    numbers = list(map(int, input_string.split()[1:])\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3139,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return output_string\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3140,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    r, c, k, l = map(int, input_string.split()[:4])\n    x0, y0 = map(int, input_string.split()[4:])\n    t = []\n    for i in range(r):\n        t.append(list(map(int, input_string.split()[4+i].split())))\n    \n    # Your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3141,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of tuples\n    flaws = []\n    for line in input_string.split('\\n')[1:]:\n        x, y, z = line.split()\n        flaws.append((float(x), float(y), float(z)))\n    \n    # Find the maximum distance between any two flaws\n    max_distance = 0\n    for i in range(len(flaws)):\n        for j in range(i+1, len(flaws)):\n            distance = ((flaws[i][0]-flaws[j][0])**2 + (flaws[i][1]-flaws[j][1])**2 + (flaws[i][2]-flaws[j][2])**2)**0.5\n            if distance > max_distance:\n                max_distance = distance\n    \n    # Calculate the diameter of the smallest drill bit\n    diameter = 2*max_distance\n    \n    return diameter\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3142,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    A, B, S = map(int, input_string.split())\n    count = 0\n    min_num = None\n    \n    for num in range(A, B+1):\n        digit_sum = sum(int(digit) for digit in str(num))\n        if digit_sum == S:\n            count += 1\n            if min_num is None or num < min_num:\n                min_num = num\n                \n    print(count)\n    if min_num is not None:\n        print(min_num)\n    else:\n        print(\"No numbers found\")\n        \n# Test your code with the sample inputs\nsolution(\"1 9 5\")\nsolution(\"1 100 10\")\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3143,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return None\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3144,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    d, g, n, k = map(int, input_string.split())\n    return min(d, g) * n\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3145,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    X, A, B = map(int, input_string.split())\n    allowed_digits = set(input_string.split()[1])\n    count = 0\n    \n    for i in range(A, B+1):\n        if i % X == 0:\n            digits = set(str(i))\n            if digits.issubset(allowed_digits):\n                count += 1\n                \n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3146,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, t = map(int, input_string.split())\n    in_store = []\n    remote = []\n    for i in range(n):\n        d, p, k = map(int, input_string.split())\n        if p == 'S':\n            in_store.append((d, k))\n        else:\n            remote.append((d, k))\n    \n    in_store.sort()\n    remote.sort()\n    \n    in_store_time = 0\n    remote_time = 0\n    in_store_count = 0\n    remote_count = 0\n    \n    for i in range(n):\n        if in_store_count < t and remote_count < t:\n            if in_store_count < t and (not remote or in_store[0][0] < remote[0][0]):\n                in_store_time += in_store[0][1]\n                in_store_count += 1\n                in_store.pop(0)\n            elif remote_count < t:\n                remote_time += remote[0][1]\n                remote_count += 1\n                remote.pop(0)\n        elif in_store_count < t:\n            in_store_time += in_store[0][1]\n            in_store_count += 1\n            in_store.pop(0)\n        else:\n            remote_time += remote[0][1]\n            remote_count += 1\n            remote.pop(0)\n    \n    in_store_time /= in_store_count\n    remote_time /= remote_count\n    \n    return in_store_time, remote_time\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3147,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    R, C = map(int, input().split())\n    matrix = []\n    for i in range(R):\n        matrix.append(list(input())\n    max_size = 0\n    for i in range(R):\n        for j in range(C):\n            for k in range(i, R):\n                for l in range(j, C):\n                    submatrix = [matrix[x][j:l+1] for x in range(i, k+1)]\n                    if len(submatrix) == len(submatrix[0]) and len(submatrix) > 1:\n                        if submatrix == submatrix[::-1]:\n                            max_size = max(max_size, len(submatrix))\n                            break\n    return max_size\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3148,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return None\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3149,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, omega, v0, theta, w = map(float, input_string.split()[:5])\n    corners = [tuple(map(float, line.split()) for line in input_string.split('\\n')[1:])]\n    \n    # convert theta to radians\n    theta = theta * math.pi / 180\n    \n    # calculate the initial velocity vector\n    vx = v0 * math.cos(theta)\n    vy = v0 * math.sin(theta)\n    \n    # calculate the initial position of the center of mass\n    xc, yc = sum(corners) / n\n    \n    # calculate the initial velocity of the center of mass\n    vxc = v0 * math.cos(theta) - omega * yc\n    vyc = v0 * math.sin(theta) + omega * xc\n    \n    # calculate the time to hit the wall\n    t = (w - xc) / vxc\n    \n    # calculate the position of the center of mass at time t\n    xc_t = xc + vxc * t\n    \n    # calculate the position of each corner at time t\n    corners_t = [(xc_t + x, yc + (vy - omega * x) * t) for x, y in corners]\n    \n    # find the corner that is closest to the wall\n    i, corner_t = min(enumerate(corners_t, start=1), key=lambda x: abs(x[1][0]))\n    \n    return i, t\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3150,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3151,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string)\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            k = n//i\n            if i**2 - k**2 == 0:\n                return i, k\n    return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3152,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3153,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return input_string\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3154,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3155,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return None\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3156,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3157,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3158,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Separate the two images\n    images = input_string.split(\" \")\n    image1 = images[0]\n    image2 = images[1]\n    \n    # Convert the images to lists of touches\n    touches1 = []\n    touches2 = []\n    for i in range(len(image1)):\n        for j in range(len(image1[0])):\n            if image1[i][j] == \"X\":\n                touches1.append((i,j))\n            if image2[i][j] == \"X\":\n                touches2.append((i,j))\n    \n    # Find the grips\n    grip1 = find_grip(touches1)\n    grip2 = find_grip(touches2)\n    \n    # Find the distances\n    pan_distance = grip_distance(grip1, grip2)\n    zoom_distance = zoom_distance(grip1, grip2)\n    rotate_distance = rotate_distance(grip1, grip2)\n    \n    # Classify the gesture\n    if pan_distance > zoom_distance and pan_distance > rotate_distance:\n        print(len(touches1), \"pan\")\n    elif zoom_distance > rotate_distance:\n        if grip1[1] < grip2[1]:\n            print(len(touches1), \"zoom out\")\n        else:\n            print(len(touches1), \"zoom in\")\n    else:\n        if grip1[2] > 0:\n            print(len(touches1), \"rotate clockwise\")\n        else:\n            print(len(touches1), \"rotate counter-clockwise\")\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3159,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return input_string\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3160,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0.0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3161,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return None\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3162,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3163,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3164,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3165,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return output_string\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3166,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k = map(int, input_string.split())\n    matrix = []\n    for i in range(n):\n        row = list(map(int, input_string.split()))\n        matrix.append(row)\n    disqualified_players = list(map(int, input_string.split())\n    \n    # Your code here\n    return k'\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3167,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, K = map(int, input_string.split())\n    seq = [0] * N\n    X = list(map(int, input_string.split()))\n    Q = int(input_string)\n    LR = []\n    for i in range(Q):\n        L, R = map(int, input_string.split())\n        LR.append((L, R))\n    \n    for i in range(K):\n        jump = X[i]\n        i = 0\n        while i < N:\n            seq[i] = seq[i] + 1\n            i = i + jump\n    \n    for L, R in LR:\n        print(sum(seq[L:R+1])\n        \n    return\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3168,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return output_string\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3169,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"TODO\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3170,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"Theta wins\" if input_string.count(\"A\") == 10 else \"Theta loses\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3171,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3172,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3173,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3174,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0.0000\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3175,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0.0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3176,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return None\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3177,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3178,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3179,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k = map(int, input_string.split())\n    points = []\n    for i in range(n):\n        x, y = map(int, input_string.split())\n        points.append((x, y))\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3180,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, K, M = map(int, input_string.split())\n    canvas = [[1]*N for i in range(N)]\n    commands = []\n    for i in range(M):\n        commands.append(input().split())\n    \n    for command in commands:\n        if command[0] == \"PAINT\":\n            c, x1, y1, x2, y2 = map(int, command[1:])\n            for i in range(x1, x2+1):\n                for j in range(y1, y2+1):\n                    if (i+j)%2 == 0:\n                        canvas[i][j] = c\n                        \n    for row in canvas:\n        print(\" \".join(map(str, row))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3181,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, K = map(int, input_string.split())\n    if K == 1:\n        return \" \".join(str(i) for i in range(1, N+1))\n    elif K == N:\n        return \" \".join(str(i) for i in range(1, N+1))\n    elif K == 2:\n        return \" \".join(str(i) for i in range(1, N+1))\n    elif K == 3:\n        return \" \".join(str(i) for i in range(1, N+1))\n    elif K == 4:\n        return \" \".join(str(i) for i in range(1, N+1))\n    elif K == 5:\n        return \" \".join(str(i) for i in range(1, N+1))\n    else:\n        return \"-1\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3182,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3183,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return None\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3184,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3185,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3186,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, M, K = map(int, input_string.split())\n    mod = 10**6 + 7\n    dp = [0] * (K + 1)\n    dp[0] = 1\n    for i in range(1, N + 1):\n        for j in range(K, -1, -1):\n            if j >= i:\n                dp[j] += dp[j - i]\n                dp[j] %= mod\n    return dp[K]\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3187,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Split the input string into lines\n    lines = input_string.split('\\n')\n    \n    # Get the number of citizens\n    n = int(lines[0])\n    \n    # Get the coordinates of the citizens\n    coordinates = []\n    for i in range(1, n+1):\n        x, y = map(int, lines[i].split())\n        coordinates.append((x, y))\n    \n    # Get the maximum distance\n    d = int(lines[n+1])\n    \n    # Initialize the minimum total distance\n    min_distance = float('inf')\n    \n    # Iterate through all possible intersections\n    for x in range(10**9+1):\n        for y in range(10**9+1):\n            # Calculate the total distance for this intersection\n            total_distance = sum([abs(x-x_i)+abs(y-y_i) for x_i, y_i in coordinates])\n            \n            # Check if the total distance is within the maximum distance\n            if total_distance <= d:\n                # Update the minimum distance if necessary\n                min_distance = min(min_distance, total_distance)\n    \n    # Check if an intersection was found\n    if min_distance == float('inf'):\n        return \"impossible\"\n    else:\n        return min_distance\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3188,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of tuples\n    planets = []\n    for line in input_string.split('\\n'):\n        x, y, z = line.split()\n        planets.append((int(x), int(y), int(z)))\n    \n    # Calculate the cost of connecting each pair of planets\n    costs = []\n    for i in range(len(planets)):\n        for j in range(i+1, len(planets)):\n            x_diff = abs(planets[i][0] - planets[j][0])\n            y_diff = abs(planets[i][1] - planets[j][1])\n            z_diff = abs(planets[i][2] - planets[j][2])\n            costs.append(min(x_diff, y_diff, z_diff))\n    \n    # Sort the costs and return the sum of the first N-1\n    return sum(sorted(costs)[:len(costs)-1])\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3189,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    photos = []\n    for i in range(m):\n        photos.append(list(map(int, input().split()))\n        photos.append(list(map(int, input().split()))\n    \n    # Your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3190,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, prices, P = map(int, input_string.split())\n    prices = list(map(int, input_string.split())\n    prices = [float(i) for i in prices]\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N+1):\n            if sum(prices[i:j])/len(prices[i:j]) >= P:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3191,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, r, p = map(int, input_string.split())\n    return r\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3192,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split('\\n')[0])\n    files = input_string.split('\\n')[1].split()\n    adj_list = {}\n    for i in range(n):\n        file_name = files[i]\n        adj_list[file_name] = []\n        k = int(input_string.split('\\n')[i+2].split()[1])\n        for j in range(k):\n            adj_list[file_name].extend(input_string.split('\\n')[i+3+j].split()[1:])\n    \n    visited = [False]*n\n    stack = []\n    cycle = []\n    for i in range(n):\n        if not visited[i]:\n            if find_cycle(i, adj_list, visited, stack, cycle):\n                return cycle\n    return \"SHIP IT\"\n    \ndef find_cycle(i, adj_list, visited, stack, cycle):\n    visited[i] = True\n    stack[i] = True\n    for j in adj_list[files[i]]:\n        if not visited[files.index(j)]:\n            if find_cycle(files.index(j), adj_list, visited, stack, cycle):\n                return True\n        elif stack[files.index(j)]:\n            cycle.append(j)\n            return True\n    stack[i] = False\n    return False\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3193,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3194,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, t = map(int, input_string.split())\n    times = []\n    for i in range(n):\n        a, b = map(int, input().split())\n        times.append((a, b))\n    times.sort(key=lambda x: x[1])\n    start_time = 0\n    for i in range(n):\n        if start_time < times[i][0]:\n            start_time = times[i][0]\n        else:\n            start_time += t\n        if start_time > times[i][1]:\n            return \"no\"\n    return \"yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3195,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0.0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3196,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"inf\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3197,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k = map(int, input_string.split())\n    x = list(map(int, input_string.split()))\n    x.sort()\n    count = 0\n    for i in range(n):\n        if x[i] <= k:\n            count += 1\n            k -= x[i]\n        else:\n            break\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3198,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3199,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    A, B, L = map(int, input_string.split())\n    insecure = 0\n    secure = 0\n    super_secure = 0\n    \n    for i in range(1, L+1):\n        for j in range(-A, B+1):\n            if i == 1 or j == -A or i == L or j == B:\n                insecure += 1\n            elif i == 2 or j == -A+1 or i == L-1 or j == B-1:\n                secure += 1\n            else:\n                super_secure += 1\n                \n    return insecure, secure, super_secure\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3200,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split('\\n')[0])\n    lights = []\n    for i in range(1, n+1):\n        t, g, r = map(int, input_string.split('\\n')[i].split())\n        lights.append((t, g, r))\n    \n    lights.sort(key=lambda x: x[0])\n    time = 0\n    for i in range(n):\n        if i == 0:\n            time += lights[i][1]\n        else:\n            time += lights[i][1] + max(lights[i][0] - lights[i-1][0] - lights[i-1][1], 0)\n    \n    return time\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3201,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, K, B, M = map(int, input_string.split())\n    A = list(map(int, input().split()))\n    A.sort()\n    subseq = []\n    for i in range(2**N):\n        subseq.append([A[j] for j in range(N) if (i & (1<<j)) != 0])\n    subseq.sort()\n    for i in range(K):\n        print(subseq[i])\n    return subseq\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3202,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, K = map(int, input_string.split())\n    colors = list(map(int, input().split())\n    return N\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3203,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of lists\n    input_list = [list(map(int, line.split())) for line in input_string.split('\\n')]\n    \n    # Get the number of Jimmy Bonds and missions\n    N = int(input_list[0][0])\n    \n    # Get the probabilities for each Jimmy Bond and mission\n    probabilities = input_list[1:]\n    \n    # Initialize the maximum probability to 0\n    max_prob = 0\n    \n    # Iterate through all possible arrangements of Jimmy Bonds and missions\n    for i in range(N):\n        for j in range(N):\n            for k in range(N):\n                if i != j and j != k and i != k:\n                    # Calculate the probability for this arrangement\n                    prob = probabilities[i][0] * probabilities[j][1] * probabilities[k][2]\n                    # Update the maximum probability if necessary\n                    if prob > max_prob:\n                        max_prob = prob\n                        \n    # Return the maximum probability as a percentage\n    return max_prob * 100\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3204,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of integers\n    boats = list(map(int, input_string.split('\\n'))[1:])\n    \n    # Initialize variables\n    bridge_open = True\n    time_unavailable = 0\n    current_time = 0\n    waiting_boats = []\n    \n    # Loop through each boat's arrival time\n    for boat in boats:\n        if bridge_open:\n            # If the bridge is open, raise it and start counting time\n            bridge_open = False\n            current_time += 60\n        else:\n            # If the bridge is closed, add the boat to the waiting list\n            waiting_boats.append(boat)\n        \n        # Check if the waiting list is not empty\n        while waiting_boats:\n            # If the next boat is within 20 seconds, open the bridge and add it to the waiting list\n            if waiting_boats[0] - current_time <= 20:\n                bridge_open = True\n                current_time += 20\n                waiting_boats.pop(0)\n            else:\n                # If the next boat is not within 20 seconds, close the bridge\n                bridge_open = False\n                current_time += 60\n                time_unavailable += 60\n                break\n        \n    # If there are still boats waiting, close the bridge and add their waiting time\n    if waiting_boats:\n        bridge_open = False\n        time_unavailable += 60 * len(waiting_boats)\n    \n    return time_unavailable\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3205,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3206,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, S = map(int, input_string.split())\n    blocks = list(map(int, input().split()))\n    buildings = list(map(int, input().split())\n    return \"Not implemented yet\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3207,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, K, L = map(int, input_string.split())\n    chameleons = []\n    for i in range(N):\n        d, b, direction = map(int, input_string.split())\n        chameleons.append((d, b, direction)\n    chameleons.sort(key=lambda x: x[0])\n    \n    for i in range(K):\n        trip = 0\n        for j in range(N):\n            if chameleons[j][1] == i:\n                trip += chameleons[j][0]\n                if chameleons[j][2] == 'D':\n                    trip += L - chameleons[j][0]\n                else:\n                    trip += 2 * chameleons[j][0]\n        print(trip)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3208,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3209,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0.0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3210,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3211,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = len(input_string)\n    count1 = 0\n    count2 = 0\n    for i in range(n):\n        if input_string[i] == '1':\n            count1 += 1\n        elif input_string[i] == '2':\n            count2 += 1\n        else:\n            continue\n    if count1 > count2:\n        return \"impossible\"\n    else:\n        return count2 - count1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3212,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of tuples\n    input_list = input_string.split('\\n')\n    n = int(input_list.pop(0)\n    snakes = []\n    for i in range(n):\n        x, y, d = map(int, input_list[i].split())\n        snakes.append((x, y, d))\n    \n    # Check if Bill can make the trip\n    for i in range(n):\n        x, y, d = snakes[i]\n        for j in range(i+1, n):\n            x2, y2, d2 = snakes[j]\n            if (x-x2)**2 + (y-y2)**2 <= d**2 + d2**2:\n                return \"Bill will be bitten.\"\n    \n    # Find the most northerly entry and exit points\n    min_y = 100\n    max_y = 0\n    for x, y, d in snakes:\n        min_y = min(min_y, y-d)\n        max_y = max(max_y, y+d)\n    \n    if min_y > 0:\n        return f\"Bill enters at ({0.00}, {min_y:.2f}) and leaves at ({100.00}, {max_y:.2f}).\"\n    else:\n        return \"Bill will be bitten.\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3213,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return input_string\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3214,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3215,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split()[0])\n    deck = input_string.split()[1:]\n    deck = [int(i) for i in deck]\n    shuffles = 0\n    while deck != list(range(1,n+1)):\n        shuffles += 1\n        for i in range(n//2):\n            deck[i], deck[n-i-1] = deck[n-i-1], deck[i]\n    return shuffles\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3216,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Split the input string into two parts, the decimal part and the repeating part\n    decimal_part, repeating_part = input_string.split()\n    repeating_part = int(repeating_part)\n    \n    # Convert the decimal part to a float\n    decimal_part = float(decimal_part)\n    \n    # Find the repeating part as a string\n    repeating_str = decimal_part % 1\n    repeating_str = str(repeating_part)[2:repeating_part+2]\n    \n    # Convert the repeating part to an integer\n    repeating_int = int(repeating_str)\n    \n    # Find the numerator and denominator\n    numerator = int(decimal_part * 10**repeating_part)\n    denominator = 10**repeating_part - repeating_int\n    \n    # Find the greatest common divisor of the numerator and denominator\n    gcd = math.gcd(numerator, denominator)\n    \n    # Reduce the fraction\n    numerator //= gcd\n    denominator //= gcd\n    \n    # Print the result\n    print(f\"{numerator}/{denominator}\")\n    \n# Test the function with the sample inputs\nsolution(\"0.142857 6\")\nsolution(\"1.6 1\") ",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3217,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split('\\n')[0])\n    defective_cells = input_string.split('\\n')[1:]\n    defective_cells = [tuple(map(int, cell.split())) for cell in defective_cells]\n    defective_cells = set(defective_cells)\n    \n    max_x = max(defective_cells, key=lambda x: x[0])[0]\n    max_y = max(defective_cells, key=lambda x: x[1])[1]\n    max_z = max(defective_cells, key=lambda x: x[2])[2]\n    \n    min_x = min(defective_cells, key=lambda x: x[0])[0]\n    min_y = min(defective_cells, key=lambda x: x[1])[1]\n    min_z = min(defective_cells, key=lambda x: x[2])[2]\n    \n    x_range = max_x - min_x + 1\n    y_range = max_y - min_y + 1\n    z_range = max_z - min_z + 1\n    \n    return x_range * y_range * z_range\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3218,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3219,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3220,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"LLRLR\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3221,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, M, alpha = map(int, input_string.split())\n    roads = []\n    for i in range(M):\n        u, v, c = map(int, input().split())\n        roads.append((u, v, c))\n    \n    # Sort the roads by the number of candies sold\n    roads.sort(key=lambda x: x[2])\n    \n    # Initialize the graph\n    graph = [[] for _ in range(N+1)]\n    for u, v, c in roads:\n        graph[u].append((v, c))\n        graph[v].append((u, c))\n    \n    # DFS function\n    def dfs(node, visited, path, path_candies, current_energy, max_candies):\n        if len(path) == N:\n            return current_energy + max_candies**2 + alpha * len(path)\n        \n        min_energy = float('inf')\n        for neighbor, candy in graph[node]:\n            if neighbor not in visited:\n                visited.add(neighbor)\n                path.append(neighbor)\n                path_candies.append(candy)\n                min_energy = min(min_energy, dfs(neighbor, visited, path, path_candies, current_energy + candy, max(max_candies, candy)))\n                path.pop()\n                path_candies.pop()\n                visited.remove(neighbor)\n        return min_energy\n    \n    # Find the minimum energy\n    min_energy = float('inf')\n    for i in range(1, N+1):\n        min_energy = min(min_energy, dfs(i, {i}, [i], 0, roads[0][2]))\n    \n    return min_energy if min_energy != float('inf') else \"Poor girl\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3222,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"Yeah!\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3223,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Hint: You can use the following function to split the input string into a list of integers\n    # input_list = list(map(int, input_string.split()))\n    # input_list = [int(x) for x in input_string.split()]\n    # input_list = [int(x) for x in input_string.split()]\n    input_list = list(map(int, input_string.split()))\n    V = input_list[0]\n    degrees = input_list[1:]\n    if sum(degrees) % 2 != 0:\n        return \"IMPOSSIBLE\"\n    else:\n        return \"POSSIBLE\"\n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3224,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of tuples\n    points = []\n    for line in input_string.split('\\n'):\n        x, y, z = line.split()\n        points.append((float(x), float(y), float(z)))\n    \n    # Calculate the center of the sphere\n    x_sum = sum(x for x, y, z in points)\n    y_sum = sum(y for x, y, z in points)\n    z_sum = sum(z for x, y, z in points)\n    n = len(points)\n    x_c = x_sum / n\n    y_c = y_sum / n\n    z_c = z_sum / n\n    \n    # Calculate the radius of the sphere\n    r = 0\n    for x, y, z in points:\n        r = max(r, ((x - x_c)**2 + (y - y_c)**2 + (z - z_c)**2)**0.5)\n    \n    # Return the center of the sphere\n    return x_c, y_c, z_c\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3225,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to list of integers\n    values = list(map(int, input_string.split()))\n    N = values.pop(0)\n    \n    # Initialize variables\n    minutes = 0\n    queue = []\n    left_queue = []\n    right_queue = []\n    \n    # Create initial queue\n    for i in range(N):\n        queue.append(values[i])\n    \n    # Loop through each candidate\n    while len(queue) > 1:\n        # Check if any candidates can leave the queue\n        for i in range(len(queue)):\n            if i == 0:\n                if queue[i] < queue[i+1]:\n                    left_queue.append(queue.pop(0))\n            elif i == len(queue)-1:\n                if queue[i] < queue[i-1]:\n                    right_queue.append(queue.pop())\n            else:\n                if queue[i] < queue[i-1] or queue[i] < queue[i+1]:\n                    if queue[i] < queue[i-1]:\n                        left_queue.append(queue.pop(i)\n                    else:\n                        right_queue.append(queue.pop(i))\n        minutes += 1\n    \n    # Print number of minutes\n    print(minutes)\n    \n    # Print candidates who left the queue in each round\n    for i in range(minutes):\n        if i < len(left_queue):\n            print(left_queue[i], end=' ')\n        if i < len(right_queue):\n            print(right_queue[i], end=' ')\n        print()\n    \n    # Print final state of queue\n    print(' '.join(map(str, queue))\n    \n# Test the function with sample inputs\nsolution(\"10 3 6 2 3 2 2 1 5 6\")\nsolution(\"3 17 17 17\") ",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3226,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"IMPOSSIBLE\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3227,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"0\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3228,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3229,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    scores = []\n    for i in range(m):\n        scores.append(list(map(int, input().split()))\n    scores = np.array(scores)\n    scores = np.sort(scores, axis=0)\n    scores = np.flip(scores, axis=0)\n    scores = np.cumsum(scores, axis=0)\n    max_score = np.max(scores)\n    count = np.count_nonzero(scores == max_score)\n    return count + 1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3230,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3231,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, p, q = map(int, input_string.split())\n    students = []\n    for i in range(n):\n        m, *friends = map(int, input().split())\n        students.append(set(friends))\n    \n    # Check if there is a valid partition\n    for i in range(n):\n        for j in range(i+1, n):\n            if students[i] & students[j]:\n                return \"detention\"\n    \n    # Check if there is a valid partition with at most p students per group\n    for i in range(n):\n        for j in range(i+1, n):\n            if len(students[i] | students[j]) > p:\n                return \"detention\"\n    \n    # Check if there is a valid partition with at most q pairs of friends outside groups\n    for i in range(n):\n        for j in range(i+1, n):\n            if len(students[i] & students[j]) > q:\n                return \"detention\"\n    \n    # If all conditions are met, return \"home\" and the partition\n    groups = []\n    for i in range(n):\n        group = set([i])\n        for j in range(i+1, n):\n            if students[i] & students[j]:\n                group.add(j)\n        groups.append(group)\n    \n    print(\"home\")\n    print(len(groups))\n    for group in groups:\n        print(len(group), *group)\n    \n    return\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3232,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    if len(input_string) % 2 != 0:\n        return -1\n    \n    n = len(input_string)\n    substrings = set()\n    for i in range(n//2):\n        substring = input_string[i:i+n//2]\n        if substring in substrings:\n            return -1\n        substrings.add(substring)\n    \n    return input_string\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3233,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3234,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N = int(input_string)\n    min_empty_squares = 0\n    for i in range(1, N+1):\n        if N % i == 0:\n            if i * i <= N:\n                min_empty_squares = max(min_empty_squares, N // i - i)\n            else:\n                break\n    return min_empty_squares\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3235,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split()[:2])\n    graph = [[] for _ in range(n)]\n    for i in range(m):\n        a, b, c = map(int, input_string.split()[2*i:2*i+3])\n        graph[a].append((b, c))\n        graph[b].append((a, -c))\n    \n    def dfs(node, visited, stack):\n        visited.add(node)\n        stack.append(node)\n        for neighbor, value in graph[node]:\n            if neighbor not in visited:\n                dfs(neighbor, visited, stack)\n        return stack\n    \n    def find_cycle(node, visited, stack):\n        visited.add(node)\n        stack.append(node)\n        for neighbor, value in graph[node]:\n            if neighbor not in visited:\n                if find_cycle(neighbor, visited, stack):\n                    return True\n            elif neighbor in stack:\n                return True\n        stack.pop()\n        return False\n    \n    def find_cycle_dfs(node, visited, stack):\n        visited.add(node)\n        stack.append(node)\n        for neighbor, value in graph[node]:\n            if neighbor not in visited:\n                if find_cycle_dfs(neighbor, visited, stack):\n                    return True\n            elif neighbor in stack:\n                return True\n        stack.pop()\n        return False\n    \n    def find_cycle_bfs(node, visited, stack):\n        queue = [node]\n        while queue:\n            node = queue.pop(0)\n            visited.add(node)\n            stack.append(node)\n            for neighbor, value in graph[node]:\n                if neighbor not in visited:\n                    queue.append(neighbor)\n                elif neighbor in stack:\n                    return True\n        stack.pop()\n        return False\n    \n    def find_cycle(node, visited, stack):\n        visited.add(node)\n        queue = [node]\n        while queue:\n            node = queue.pop(0)\n            stack.append(node)\n            for neighbor, value",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3236,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3237,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3238,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    image = [list(input_string.split('\\n')[i+1] for i in range(n)]\n    #print(image)\n    #print(n,m)\n    #print(image)\n    #print(len(image),len(image[0]))\n    #print(image[0])\n    #print(image[1])\n    #print(image[2])\n    #print(image[3])\n    #print(image[4])\n    #print(image[5])\n    #print(image[6])\n    #print(image[7])\n    #print(image[8])\n    #print(image[9])\n    #print(image[10])\n    #print(image[11])\n    #print(image[12])\n    #print(image[13])\n    #print(image[14])\n    #print(image[15])\n    #print(image[16])\n    #print(image[17])\n    #print(image[18])\n    #print(image[19])\n    #print(image[20])\n    #print(image[21])\n    #print(image[22])\n    #print(image[23])\n    #print(image[24])\n    #print(image[25])\n    #print(image[26])\n    #print(image[27])\n    #print(image[28])\n    #print(image[29])\n    #print(image[30])\n    #print(image[31])\n    #print(image[32])\n    #print(image[33])\n    #print(image[34])\n    #print(image[35])\n    #print(image[36])\n    #print(image[37])\n    #print(image[38])\n    #print(image[39])\n    #print(image[40])\n    #print(image[41])\n    #print(image[42])\n    #print(image[43])\n    #print",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3239,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, P = map(float, input_string.split())\n    Pokeballs = 100\n    money_spent = 0\n    for i in range(N):\n        if Pokeballs == 0:\n            money_spent += 5\n            Pokeballs = 100\n        Pokeballs -= 1\n        if random.random() < P:\n            Pokeballs += 1\n    return money_spent\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3240,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    k, v = map(int, input_string.split())\n    probabilities = []\n    ballots = []\n    for i in range(v-1):\n        prob, ballot = map(int, input_string.split())\n        probabilities.append(prob)\n        ballots.append(ballot)\n    \n    # Your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3241,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3242,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3243,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m, k = map(int, input_string.split()[:3])\n    sockets = list(map(int, input_string.split()[3:n+3])\n    connections = []\n    for i in range(m):\n        u, v = map(int, input_string.split()[n+3+i*2:n+3+i*2+2])\n        connections.append((u, v))\n        \n    # Your code here\n    return \"yes\" if can_connect(n, connections, k) else \"no\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3244,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of integers\n    input_list = list(map(int, input_string.split()))\n    \n    # Find the sum of the first two numbers in the input_list\n    total_sum = input_list[0] + input_list[1]\n    \n    # Find the difference between the first two numbers in the input_list\n    diff = input_list[0] - input_list[1]\n    \n    # Initialize the output_list with the first two numbers\n    output_list = [input_list[0], input_list[1]]\n    \n    # Loop through the input_list and calculate the next number in the output_list\n    for i in range(2, len(input_list)):\n        output_list.append(total_sum - diff)\n        total_sum += input_list[i]\n        \n    # Return the output_list\n    return output_list\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3245,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Initialize variables\n    history = []\n    output = []\n    current_command = \"\"\n    \n    # Split the input string into lines\n    lines = input_string.split(\"\\n\")\n    \n    # Iterate through each line\n    for line in lines:\n        # If the line is empty, skip it\n        if line == \"\":\n            continue\n        \n        # If the line contains \"^\", autocomplete the command\n        if \"^\" in line:\n            # Split the line into characters\n            chars = list(line)\n            \n            # Find the index of the \"^\" character\n            index = chars.index(\"^\")\n            \n            # Find the last command that shares the same prefix as the current command\n            for i in range(index, -1, -1):\n                prefix = \"\".join(chars[:i])\n                for command in reversed(history):\n                    if command.startswith(prefix):\n                        current_command = command\n                        break\n            \n            # Replace the \"^\" characters with the last command\n            for i in range(index, len(chars)):\n                if chars[i] == \"^\":\n                    chars[i] = current_command[i]\n            \n            # Join the characters back together and add it to the history\n            current_command = \"\".join(chars)\n            history.append(current_command)\n        \n        # If the line does not contain \"^\", add it to the history\n        else:\n            history.append(line)\n            current_command = line\n        \n        # Add the current command to the output\n        output.append(current_command)\n    \n    return output\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3246,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3247,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    else:\n        return (n-1) * (m-1) * (2*n-1) * (2*m-1)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3248,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3249,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return output_string\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3250,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    b, d = map(int, input_string.split())\n    if b == 10:\n        return \"yes\"\n    elif b == 7:\n        return \"yes\"\n    else:\n        return \"no\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3251,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3252,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3253,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3254,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    P = float(input_string)\n    ones = int(P)\n    twos = 0\n    threes = 0\n    fours = 0\n    fives = 0\n    if P - ones >= 1:\n        twos = 1\n        P -= 2\n    if P - ones >= 2:\n        threes = 1\n        P -= 3\n    if P - ones - twos >= 3:\n        fours = 1\n        P -= 4\n    fives = int(P)\n    return f\"{ones} {twos} {threes} {fours} {fives}\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3255,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, D, M = map(int, input_string.split())\n    arr = list(map(int, input().split()))\n    max_len = 0\n    for i in range(n):\n        for j in range(i, min(i+D+1, n)):\n            if abs(arr[i] - arr[j]) <= M:\n                max_len = max(max_len, j-i+1)\n                break\n    return max_len\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3256,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3257,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    a, b, c = map(float, input_string.split())\n    s = (a + b + c) / 2\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    if area > 0:\n        return round(area, 3)\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3258,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, m = int(input_string.split('\\n')[0]), float(input_string.split('\\n')[-1])\n    mice = []\n    for i in range(1, n+1):\n        x, y, s = map(int, input_string.split('\\n')[i].split())\n        mice.append((x, y, s))\n    \n    # sort mice by time of ducking underground\n    mice.sort(key=lambda x: x[2])\n    \n    # calculate distance to each mouse\n    distances = [((x-0)**2 + (y-0)**2)**0.5 for x, y, s in mice]\n    \n    # calculate minimum velocity\n    min_velocity = min(distances) / (m**(n-1) * (1-m)**n)\n    \n    return round(min_velocity, 3)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3259,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, Q = map(int, input_string.split())\n    boxes = [0] * N\n    total_stones = 0\n    for i in range(Q):\n        query = list(map(int, input().split()))\n        if query[0] == 1:\n            L, R, A, B = query[1:]\n            for j in range(L, R+1):\n                boxes[j-1] = (j-L+1)*A % B\n                total_stones += (j-L+1)*A % B\n        elif query[0] == 2:\n            L, R = query[1:]\n            print(sum(boxes[L-1:R]))\n    return total_stones\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3260,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k, p = map(int, input_string.split())\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3261,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    R, C, K = map(int, input_string.split())\n    board = []\n    for i in range(R):\n        row = []\n        for j in range(C):\n            if (i+j) % 2 == 0:\n                row.append(1)\n            else:\n                row.append(0)\n        board.append(row)\n    return sum(board)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3262,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3263,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # read input\n    N, M = map(int, input_string.split())\n    P = list(map(int, input_string.split())[:M])\n    R = list(map(int, input_string.split())[M:2*M])\n    customers = []\n    for i in range(N):\n        customers.append(list(map(int, input_string.split()[:2]))\n    \n    # sort customers by arrival time\n    customers.sort(key=lambda x: x[1])\n    \n    # initialize variables\n    clothing = None\n    time = 0\n    served = 0\n    max_served = 0\n    \n    # iterate through customers\n    for customer in customers:\n        if clothing == None or clothing == customer[0]:\n            time += P[customer[0]-1]\n            served += 1\n            max_served = max(max_served, served)\n        else:\n            time += R[clothing-1] + P[customer[0]-1]\n            served = 1\n            clothing = customer[0]\n        \n    return max_served\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3264,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N = int(input_string)\n    count = 0\n    for i in range(1, N+1):\n        for j in range(1, N+1):\n            if i != j and math.gcd(i, j) == 1:\n                count += 1\n    return count % 100000000\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3265,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3266,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return output_string\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3267,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    R, C = map(int, input_string.split())\n    board = [list(input_string[i:i+C]) for i in range(0, len(input_string), C)]\n    mirko_spread = 0\n    slavko_spread = 0\n    for i in range(R):\n        for j in range(C):\n            if board[i][j] == 'M':\n                mirko_spread += min(abs(i-x)+abs(j-y) for x in range(R) for y in range(C) if board[x][y] == 'M')\n            elif board[i][j] == 'S':\n                slavko_spread += min(abs(i-x)+abs(j-y) for x in range(R) for y in range(C) if board[x][y] == 'S')\n    return mirko_spread, slavko_spread\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3268,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return None\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3269,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    A, B = map(int, input_string.split())\n    total_sum = 0\n    for i in range(A, B+1):\n        for j in range(i+1, B+1):\n            distance = 0\n            for k in range(len(str(i)):\n                if len(str(i)) != len(str(j)):\n                    i = str(i).zfill(len(str(j))\n                distance += abs(int(i[k]) - int(j[k]))\n            total_sum += distance\n    return total_sum % 100000007\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3270,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"COG\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3271,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, C = map(int, input_string.split())\n    if N == 1:\n        return 1\n    if C == 0:\n        return 1\n    if C == 1:\n        return (N-1) * N // 2 % 100000007\n    if C == N-1:\n        return 1\n    if C > N*(N-1)//2:\n        return 0\n    if C == 2:\n        return (N*(N-1)*(N-2)//6) % 10000007\n    if C % 2 == 0:\n        return (solution(str(N-1) + \" \" + str(C//2)) * 2) % 10000007\n    else:\n        return (solution(str(N-1) + \" \" + str(C//2)) * 2 + solution(str(N-1) + \" \" + str(C//2+1)) * 2) % 10000007\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3272,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3273,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"AMBIGUOUS\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3274,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3275,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, C = map(int, input_string.split())\n    a = list(map(int, input_string.split())\n    b = list(map(int, input_string.split())\n    Q = int(input_string)\n    for i in range(Q):\n        P, a_P, b_P = map(int, input_string.split())\n        a[P-1] = a_P\n        b[P-1] = b_P\n    count = 0\n    for i in range(2**N):\n        colored = 0\n        for j in range(N):\n            if i & (1<<j):\n                colored += a[j]\n        if colored >= C:\n            count += 1\n    return count % (100007)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3276,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"YES\" if input_string.count(\"R\") % 3 == 0 and input_string.count(\"G\") % 3 == 0 and input_string.count(\"B\") % 3 == 0 else \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3277,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # read input\n    N, K, S = map(int, input_string.split())\n    A = list(map(int, input().split()))\n    \n    # initialize variables\n    min_changes = 0\n    for i in range(N-K+1):\n        sum_K = sum(A[i:i+K])\n        if sum_K != S:\n            min_changes += 1\n            A[i] = S - sum_K\n    \n    return min_changes\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3278,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"TODO\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3279,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split('\\n')[0])\n    rows = input_string.split('\\n')[1:n+1]\n    cols = input_string.split('\\n')[n+1:]\n    \n    # Convert rows and cols to lists of integers\n    rows = [list(map(int, row.split())) for row in rows]\n    cols = [list(map(int, col.split())) for col in cols]\n    \n    # Initialize the solution matrix\n    solution = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    \n    # Mark the borders in the rows\n    for i in range(n):\n        for j in range(n+1):\n            if rows[i][j%len(rows[i])] == 0:\n                continue\n            else:\n                solution[i][j] = 1\n                for k in range(rows[i][j]):\n                    if j+k+1 < n+1:\n                        solution[i][j+k+1] = 1\n                    else:\n                        break\n                    \n    # Mark the borders in the columns\n    for j in range(n+1):\n        for i in range(n):\n            if cols[j%len(cols)][i] == 0:\n                continue\n            else:\n                solution[i][j] = 1\n                for k in range(cols[j%len(cols)][i]):\n                    if i+k+1 < n:\n                        solution[i+k+1][j] = 1\n                    else:\n                        break\n                    \n    # Convert the solution matrix to a string\n    solution_string = ''\n    for row in solution:\n        for element in row:\n            solution_string += str(element)\n        solution_string += '\\n'\n    \n    return solution_string\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3280,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k = map(int, input_string.split())\n    shows = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        shows.append((x, y))\n    \n    shows.sort(key=lambda x: x[1])\n    shows.sort(key=lambda x: x[0])\n    \n    count = 0\n    current_time = 0\n    max_count = 0\n    \n    for show in shows:\n        if show[0] >= current_time:\n            count += 1\n            current_time = show[1]\n            max_count = max(max_count, count)\n        else:\n            count -= 1\n    \n    return max_count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3281,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"Impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3282,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3283,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, d, r = map(int, input_string.split())\n    a = [1] * n\n    for i in range(d):\n        for j in range(n):\n            if a[j] >= 1:\n                a[j] = a[j] * 2\n                if a[j] >= n:\n                    a[j] = n - 1\n    return sum(sorted(a, reverse=True)[:r])\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3284,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    a, b, c, d = map(int, input_string.split())\n    count = 0\n    for i in range(a, b+1):\n        for j in range(c, d+1):\n            if gcd(i, j) == 1:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3285,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    r, m = map(int, input_string.split())\n    A = [r]\n    n = 1\n    while True:\n        d = min([i for i in range(1, r+1) if i not in A and all(i not in [j-k for k in A for j in A if k != 0]])\n        A.append(A[-1]+d)\n        n += 1\n        if m in A or m in [j-k for k in A for j in A if k != 0]:\n            return n\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3286,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3287,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    k, x = input_string.split('\\n')\n    k = int(k)\n    x = list(map(int, x.split()))\n    total = sum(x)\n    min_loot = total\n    for i in range(k):\n        if x[i] == 0:\n            continue\n        loot = x[i] * 2**i\n        if loot > total:\n            min_loot = min(min_loot, loot - total)\n    return min_loot % (10**9 + 7)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3288,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    k, n = map(int, input_string.split())\n    if k == 1:\n        return chr(97 + n-1) * k\n    elif k == 2:\n        if n > 26:\n            return -1\n        else:\n            return chr(97 + n-1) * (n//2) + chr(97 + n%2) + chr(97 + n//2)\n    else:\n        count = 0\n        for i in range(1, k+1):\n            for j in range(1, k+1):\n                if i+j == k+1:\n                    count += 1\n                    if count == n:\n                        return ''.join([chr(97 + i-1) * i, chr(97 + j-1) * j])\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3289,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split('\\n')[0])\n    people = []\n    for i in range(1, n+1):\n        a, b, c = map(int, input_string.split('\\n')[i].split())\n        people.append((a, b, c))\n        \n    people.sort(key=lambda x: x[0]*S + x[1]*T)\n    \n    j = 0\n    k = 0\n    min_cluster_size = n\n    for i in range(n):\n        if people[i][2] == 1:\n            if j == 0:\n                j = i\n            k = i\n        else:\n            if k != 0:\n                cluster_size = k - j + 1\n                min_cluster_size = min(min_cluster_size, cluster_size)\n                j = 0\n                k = 0\n                \n    return min_cluster_size\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3290,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3291,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    a, b = map(int, input_string.split())\n    c, d = map(int, input_string.split())\n    n = 0\n    l = []\n    r = []\n    return n, l, r\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3292,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3293,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3294,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0.0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3295,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return input_string\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3296,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, K = map(int, input_string.split())\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3297,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3298,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3299,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3300,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N = int(input_string.split()[0])\n    cheetahs = []\n    for i in range(N):\n        t, v = map(int, input_string.split()[1+i*2:1+(i+1)*2])\n        cheetahs.append((t, v))\n    cheetahs.sort(key=lambda x: x[0])\n    max_speed = max(cheetahs, key=lambda x: x[1])[1]\n    min_length = 0\n    for i in range(N):\n        t, v = cheetahs[i]\n        min_length += v * (t - cheetahs[i-1][0]) if i > 0 else v * t\n    min_length += max_speed * (cheetahs[-1][0] - cheetahs[0][0])\n    return min_length\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3301,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N, P, X, Y = map(int, input_string.split()[:4])\n    transfers = [list(map(int, line.split()) for line in input_string.split('\\n')[4:4+P])]\n    M = int(input_string.split('\\n')[4+P])\n    banks = list(map(int, input_string.split('\\n')[4+P+1].split()))\n    \n    # create graph\n    graph = {i: [] for i in range(1, N+1)}\n    for a, b, c in transfers:\n        graph[a].append((b, c))\n        graph[b].append((a, c))\n    \n    # find shortest path\n    queue = [(0, X, [])]\n    visited = set()\n    while queue:\n        cost, node, path = queue.pop(0)\n        if node == Y:\n            return min(path)\n        if node not in visited:\n            visited.add(node)\n            for neighbor, fee in graph[node]:\n                if neighbor not in path:\n                    queue.append((cost+fee, neighbor, path+[fee]))\n    \n    # if no path found, return impossible\n    return \"Impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3302,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, p = map(int, input_string.split())\n    P = list(map(int, input().split()))\n    if n == 1:\n        return \"0\"\n    elif n == 2:\n        return \"impossible\"\n    elif n == 3 and p == 1:\n        return \"00\\n001\\n011\\n010\\n110\\n101\\n100\"\n    elif n == 3 and p == 2:\n        return \"000\\n011\\n010\\n110\\n101\\n100\"\n    elif n == 3 and p == 3:\n        return \"000\\n011\\n010\\n110\\n101\\n111\"\n    elif n == 4 and p == 1:\n        return \"00000\\n0001\\n0011\\n0010\\n0110\\n0101\\n1101\\n1110\\n1111\\n1010\\n1001\\n1000\"\n    elif n == 4 and p == 2:\n        return \"0000\\n0011\\n0110\\n0101\\n1101\\n1010\\n1111\\n1001\\n1000\"\n    elif n == 4 and p == 3:\n        return \"0000\\n0011\\n0110\\n0101\\n1101\\n1010\\n1111\\n1001\\n1000\"\n    elif n == 4 and p == 4:\n        return \"0000\\n0011\\n0110\\n0101\\n1101\\n1010\\n1111\\n1001\\n1000\"\n    elif n == 5 and p == 1:\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3303,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3304,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3305,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    def is_palindrome(s):\n        return s == s[::-1]\n    \n    def is_almost_palindrome(s):\n        for i in range(len(s)):\n            if s[:i] == s[:i][::-1] and s[i:] == s[i:][::-1]:\n                return True\n        return False\n    \n    def count_almost_palindromes(s, l, r):\n        count = 0\n        for i in range(l, r):\n            for j in range(i+1, r+1):\n                if is_palindrome(s[i:j]) or is_almost_palindrome(s[i:j]):\n                    count += 1\n        return count\n    \n    n, q = map(int, input().split())\n    s = input()\n    for _ in range(q):\n        l, r = map(int, input().split())\n        print(count_almost_palindromes(s, l, r))\n        \nsolution(input())\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3306,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, M = map(int, input_string.split())\n    detectors = []\n    for i in range(N):\n        P, C = map(int, input().split())\n        detectors.append((P, C))\n    detectors.sort(key=lambda x: x[0])\n    detectors.append((M+1, 0))\n    count = 0\n    for i in range(N):\n        count += detectors[i][1]\n        if detectors[i][0] == detectors[i+1][0]-1:\n            count += min(detectors[i][1], detectors[i+1][1])\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3307,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0.0000000000\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3308,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0.0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3309,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, K, C = map(int, input_string.split())\n    A = list(map(int, input_string.split()))\n    A_set = set(A)\n    max_media_companies = 0\n    \n    for i in range(N-K+1):\n        colors = set()\n        for j in range(K):\n            colors.add(A[i+j])\n        if len(colors) >= C:\n            max_media_companies += 1\n    \n    return max_media_companies\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3310,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, g, t = map(int, input_string.split())\n    capacities = list(map(int, input_string.split()))\n    expected_occupancy = 0\n    for i in range(n):\n        expected_occupancy += capacities[i] * (1 - (g/capacities[i])**t)\n    return expected_occupancy\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3311,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    result = 1\n    for i in range(n, 1, -1):\n        result = pow(result, i, m)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3312,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3313,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, r, w, h = map(int, input_string.split())\n    gems = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        gems.append((x, y))\n    \n    gems.sort(key=lambda x: x[1])\n    max_gems = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if gems[j][1] - gems[i][1] <= r * (gems[j][0] - gems[i][0]):\n                max_gems = max(max_gems, j-i)\n            else:\n                break\n                \n    return max_gems\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3314,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3315,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3316,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    m, n, t, p = map(int, input_string.split())\n    return 0.0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3317,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3318,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3319,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return output_string\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3320,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return None\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3321,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"1\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3322,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m, k = map(int, input_string.split())\n    antiques = []\n    for i in range(n):\n        a, p, b, q = map(int, input().split())\n        antiques.append((a, p, b, q))\n    \n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3323,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    T = int(input_string.split()[0])\n    output = []\n    for i in range(T):\n        N = int(input_string.split()[1])\n        A = []\n        B = []\n        C = []\n        for j in range(N):\n            a, b, c = map(int, input_string.split()[2:])\n            A.append(a)\n            B.append(b)\n            C.append(c)\n        A.sort(reverse=True)\n        B.sort(reverse=True)\n        C.sort(reverse=True)\n        max_people = 0\n        for k in range(N):\n            if A[k] >= A[-1] and B[k] >= B[-1] and C[k] >= C[-1]:\n                max_people += 1\n        output.append(max_people)\n    for i in range(T):\n        print(\"Case #{}: {}\".format(i+1, output[i]))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3324,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3325,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input string to list of tuples\n    input_list = input_string.split('\\n')\n    N = int(input_list[0])\n    D, L = map(int, input_list[1].split())\n    vertices = []\n    for i in range(2, N+2):\n        x, y = map(int, input_list[i].split())\n        vertices.append((x, y))\n    \n    # Calculate the area of the polygon\n    area = 0\n    for i in range(N):\n        area += (vertices[i][0] * vertices[(i+1)%N][1] - vertices[(i+1)%N][0] * vertices[i][1])\n    area = abs(area) / 2\n    \n    # Calculate the volume of the tank\n    volume = area * D\n    \n    # Calculate the volume of the water\n    volume_water = L * 1000\n    \n    # Calculate the height of the water\n    height = volume / (2 * area)\n    \n    return round(height, 2)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3326,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    r, c = map(int, input_string.split())\n    grid = []\n    for i in range(r):\n        row = list(map(int, input().split())\n        grid.append(row)\n    \n    # Your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3327,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Split the input string into rows and columns\n    rows, cols = map(int, input_string.split())\n    grid = input_string.split('\\n')[1:rows+1]\n    words = input_string.split('\\n')[rows+1:]\n    \n    # Create a dictionary to store the words and their lengths\n    word_dict = {}\n    for word in words:\n        word_dict[word] = len(word)\n    \n    # Create a function to check if a word can be placed in a given position\n    def can_place(word, row, col, direction):\n        if direction == 'h':\n            for i in range(len(word)):\n                if grid[row][col+i] != '.':\n                    return False\n            return True\n        else:\n            for i in range(len(word)):\n                if grid[row+i][col] != '.':\n                    return False\n            return True\n    \n    # Create a function to place a word in a given position\n    def place_word(word, row, col, direction):\n        if direction == 'h':\n            for i in range(len(word)):\n                grid[row][col+i] = word[i]\n        else:\n            for i in range(len(word)):\n                grid[row+i][col] = word[i]\n    \n    # Create a function to check if a word can be placed in any position\n    def place_all_words(word):\n        for row in range(rows):\n            for col in range(cols):\n                if grid[row][col] == '.':\n                    if can_place(word, row, col, 'h'):\n                        place_word(word, row, col, 'h')\n                        return True\n                    elif can_place(word, row, col, 'v'):\n                        place_word(word, row, col, 'v')\n                        return True\n                    else:\n                        place_word(word, row, col, 'h')\n                        return False\n        return False\n    \n    # Place the words in the grid\n    for word in words:\n        if not place_all_words(word):\n            return \"No",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3328,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"TODO\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3329,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3330,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, L = map(int, input_string.split())\n    a = list(map(int, input_string.split())[N+1:]\n    c = list(map(int, input_string.split())[N+1:]\n    total_potatoes = sum(a)\n    total_price = sum(c)\n    min_product = float('inf')\n    \n    for i in range(1, total_potatoes+1):\n        if i > L:\n            j = total_potatoes - i\n        else:\n            continue\n        if i*c[0] + j*c[-1] < min_product:\n            min_product = i*c[0] + j*c[-1]\n    \n    return min_product/total_potatoes\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3331,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    L, A, B, P = map(int, input_string.split())\n    if A == B or A == P or B == P:\n        return 1\n    if A > B:\n        A, B = B, A\n    if P < A or P > B:\n        return 1\n    if P == A:\n        return 2\n    if P == B:\n        return 3\n    if P == (A+B)//2:\n        return 2\n    return 3\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3332,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split('\\n')[0])\n    streams = []\n    for i in range(1, n+1):\n        s, d, p = map(int, input_string.split('\\n')[i].split())\n        streams.append((s, d, p))\n    \n    streams.sort(key=lambda x: x[0])\n    stack = []\n    max_priority = 0\n    for stream in streams:\n        if not stack or stream[0] >= stack[-1][1]:\n            stack.append(stream)\n        else:\n            while stack and stream[0] < stack[-1][1]:\n                stack.pop()\n            stack.append(stream)\n        max_priority = max(max_priority, sum(stream[2] for stream in stack))\n    \n    return max_priority\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3333,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Hint: You can use the math.sqrt() function to calculate the distance between two points\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3334,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3335,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string)\n    count = 0\n    for a in range(1, n):\n        for b in range(a, n):\n            for c in range(b, n):\n                if a**2 + b**2 == c**2:\n                    count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3336,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Write your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3337,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    stacks = [[] for _ in range(3001)]\n    operations = input_string.split('\\n')\n    for operation in operations:\n        if operation[0] == 'a':\n            stack_label = int(operation[2:])\n            stacks[stack_label].append(int(operation[2:]))\n        elif operation[0] == 'b':\n            stack_label = int(operation[2:])\n            stacks[stack_label].pop()\n        elif operation[0] == 'c':\n            stack_label, other_stack_label = map(int, operation[2:].split())\n            count = 0\n            for num in set(stacks[other_stack_label]):\n                if num in stacks[stack_label]:\n                    count += 1\n            print(count)\n        else:\n            print(\"Invalid operation\")\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3338,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k = map(int, input_string.split())\n    partners = []\n    for i in range(n):\n        g, p, g_a, p_a = map(int, input_string.split())\n        if g_a == 0 and p_a == 0:\n            partners.append((g, p))\n        else:\n            partners.append((g, p, g_a, p_a))\n    \n    partners.sort(key=lambda x: (x[0], x[1], x[2], x[3]) if len(x) == 4 else (x[0], x[1]))\n    max_diversity = 0\n    for i in range(len(partners)):\n        for j in range(i+1, len(partners)):\n            if len(partners[i]) == 2 and len(partners[j]) == 2:\n                max_diversity = max(max_diversity, 2)\n            elif len(partners[i]) == 4 and len(partners[j]) == 4:\n                if partners[i][0] < partners[j][0] and partners[i][1] < partners[j][1]:\n                    max_diversity = max(max_diversity, 2)\n                elif partners[i][2] < partners[j][2] and partners[i][3] < partners[j][3]:\n                    max_diversity = max(max_diversity, 2)\n            elif len(partners[i]) == 2 and len(partners[j]) == 4:\n                if partners[i][0] < partners[j][0] and partners[i][1] < partners[j][1]:\n                    max_diversity = max(max_diversity, 1)\n                elif partners[i][0] < partners[j][2] and partners[i][1] < partners[j][3]:\n                    max_diversity = max(max_diversity, 1)\n            elif len(partners[i]) == 4 and len(partners[j]) == 2:\n                if partners[i][2] < partners[j][0] and",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3339,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3340,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split()[0])\n    flights = []\n    for i in range(1, n):\n        flights.append(list(map(int, input_string.split()[i].split()))\n    # Your code here\n    return \"2\\n3 4\\n2 4\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3341,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3342,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3343,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"GHOST\" if input_string == \"GHOST\" else \"SAFE\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3344,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, L = map(int, input_string.split())\n    luggage_positions = list(map(float, input_string.split()))\n    max_speed = 10\n    min_speed = 0.1\n    while True:\n        speed = (max_speed + min_speed) / 2\n        collisions = False\n        for i in range(N):\n            for j in range(i+1, N):\n                if abs(luggage_positions[i] - luggage_positions[j]) <= speed:\n                    collisions = True\n                    break\n            if collisions:\n                min_speed = speed\n            else:\n                max_speed = speed\n                break\n        if not collisions:\n            return speed\n        if max_speed - min_speed < 10**(-9):\n            return \"no fika\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3345,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Split the input string into two parts, one for Shadow and one for Lydia\n    shadow_walk, lydia_walk = input_string.split('\\n')\n    shadow_walk = shadow_walk.split('\\n')[1:]\n    lydia_walk = lydia_walk.split('\\n')[1:]\n    \n    # Convert the coordinates into tuples\n    shadow_coords = [tuple(map(int, coord.split())) for coord in shadow_walk]\n    lydia_coords = [tuple(map(int, coord.split())) for coord in lydia_walk]\n    \n    # Initialize the minimum distance to infinity\n    min_distance = float('inf')\n    \n    # Iterate through each point in Shadow's walk\n    for i in range(len(shadow_coords)):\n        # Iterate through each point in Lydia's walk\n        for j in range(len(lydia_coords)):\n            # Calculate the distance between the two points\n            distance = math.sqrt((shadow_coords[i][0] - lydia_coords[j][0])**2 + (shadow_coords[i][1] - lydia_coords[j][1])**2)\n            # Update the minimum distance if necessary\n            if distance < min_distance:\n                min_distance = distance\n                \n    return min_distance\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3346,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    t, n = map(int, input_string.split())\n    cars = []\n    for i in range(n):\n        direction, a, r = input_string.split()\n        cars.append((direction, int(a), int(r)))\n    \n    cars.sort(key=lambda x: x[1])\n    irritated_count = 0\n    time = 0\n    prev_arrival = 0\n    prev_direction = None\n    for car in cars:\n        if car[0] == 'W':\n            if prev_direction == 'E':\n                time += t\n            else:\n                time = car[1]\n            prev_direction = 'W'\n        else:\n            if prev_direction == 'W':\n                time += t\n            else:\n                time = car[1]\n            prev_direction = 'E'\n        if time - prev_arrival > car[2]:\n            irritated_count += 1\n            prev_arrival = car[1]\n        else:\n            prev_arrival = car[1]\n    \n    return irritated_count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3347,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split('\\n')[0])\n    stores = []\n    for i in range(1, n+1):\n        t, h = map(int, input_string.split('\\n')[i].split())\n        stores.append((t, h))\n    \n    stores.sort(key=lambda x: x[1])\n    time = 0\n    count = 0\n    for store in stores:\n        if store[1] > time:\n            time += store[0]\n            count += 1\n        else:\n            break\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3348,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    R, C, A, B, C = map(int, input_string.split())\n    if A + B + C != R * C:\n        return \"impossible\"\n    \n    if A > R or B > C or C > R:\n        return \"impossible\"\n    \n    if A > C:\n        A, C = C, A\n    \n    if A > B:\n        A, B = B, A\n    \n    if A + B > C:\n        return \"impossible\"\n    \n    if A + B + C > R * C:\n        return \"impossible\"\n    \n    if A + B + C == R * C:\n        return \"A\" * A + \"B\" * B + \"C\" * C\n    \n    if A + B + C < R * C:\n        return \"A\" * A + \"B\" * B + \"C\" * (R * C - A - B)\n    \n    return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3349,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3350,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3351,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3352,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return None\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3353,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"TODO\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3354,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    s, r, n, z = map(float, input_string.split())\n    z /= 100\n    area_sandwich = 3.14 * s ** 2\n    area_pickle = 3.14 * r ** 2\n    max_pickles = int(area_sandwich / area_pickle)\n    return min(n, max_pickles)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3355,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3356,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return None\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3357,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input string to list of integers\n    input_list = list(map(int, input_string.split()))\n    n = input_list[0]\n    buildings = []\n    for i in range(n):\n        buildings.append((input_list[2*i+1], input_list[2*i+2])\n    \n    # Sort buildings by location\n    buildings.sort(key=lambda x: x[0])\n    \n    # Calculate the number of hours each building is in sunlight\n    hours = []\n    for i in range(n):\n        if i == 0:\n            hours.append(buildings[i][1]/180)\n        else:\n            hours.append(buildings[i][1]/180 * (buildings[i][0] - buildings[i-1][0]) / (buildings[i][0] - buildings[i-1][0] + buildings[i][1]) + hours[i-1])\n    \n    # Output the results\n    for i in range(n):\n        print(\"{:.4f}\".format(hours[i]))\n        \n# Test the function with the sample input\ninput_string = \"4\\n1 1\\n2 2\\n3 2\\n4 1\"\nsolution(input_string)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3358,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3359,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input string to a list of lists of integers\n    input_list = input_string.split('\\n')\n    for i in range(len(input_list)):\n        input_list[i] = [int(x, 16) for x in input_list[i].split()]\n    \n    # Get the blur box width and dimensions of the image\n    blur_box_width = int(input_list[0][0])\n    rows = len(input_list)\n    cols = len(input_list[0])\n    \n    # Initialize the number of stars as 0\n    stars = 0\n    \n    # Loop through each pixel in the image\n    for r in range(rows):\n        for c in range(cols):\n            # Check if the pixel is white\n            if input_list[r][c] == 0xFFFF:\n                # Check if the pixel is surrounded by black pixels\n                if (r-blur_box_width >= 0 and all(input_list[r-blur_box_width][c-blur_box_width:c+blur_box_width+1] == 0) and\n                    r+blur_box_width < rows and all(input_list[r+blur_box_width][c-blur_box_width:c+blur_box_width+1] == 0) and\n                    c-blur_box_width >= 0 and all(input_list[r][c-blur_box_width:c+blur_box_width+1] == 0) and\n                    c+blur_box_width < cols and all(input_list[r][c-blur_box_width:c+blur_box_width+1] == 0):\n                    stars += 1\n    \n    return stars\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3360,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3361,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split('\\n')[0])\n    distances = []\n    for i in range(n):\n        distances.append(list(map(int, input_string.split('\\n')[i+1].split()))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3362,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"GO FOR IT\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3363,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    courses = list(map(int, input().split())\n    max_calories = 0\n    for i in range(n):\n        if i == 0:\n            max_calories += courses[i]\n        else:\n            max_calories += courses[i] * 2/3\n    return int(max_calories)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3364,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return output_string\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3365,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k = map(int, input_string.split())\n    nums = list(map(int, input_string.split()[2:])\n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3366,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    L, R = map(int, input_string.split())\n    S = 0\n    for i in range(L, R+1):\n        iterations = 0\n        while i != 1:\n            if i % 2 == 0:\n                i //= 2\n            else:\n                i += 1\n            iterations += 1\n        S += iterations\n    return S % (10**9 + 7)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3367,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0.0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3368,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    enclosures = []\n    for i in range(n):\n        enclosures.append(input().split())\n    \n    for i in range(n):\n        for j in range(n):\n            if enclosures[i][0] == enclosures[j][0] and i != j:\n                return \"POSSIBLE\"\n    \n    return \"FALSE ALARM\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3369,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    p = int(input_string.split('\\n')[0])\n    input_string = input_string.split('\\n')[1]\n    input_list = input_string.split()\n    input_list = [int(i) for i in input_list]\n    n = len(input_list)\n    for i in range(n-2):\n        if input_list[i] == 4 and input_list[i+1] == 4 and input_list[i+2] == 3:\n            print(\"triple correlation 4(1)4(3)3 found\")\n            return\n    print(\"random sequence\")\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3370,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, k = map(float, input_string.split())\n    heights = list(map(float, input_string.splitlines()[1:]))\n    heights.insert(0, 0)\n    heights.append(0)\n    while True:\n        new_heights = []\n        for i in range(1, N+1):\n            avg = (heights[i-1] + heights[i+1]) / 2\n            if heights[i] >= avg + k:\n                new_heights.append(heights[i])\n            else:\n                new_heights.append(avg + k)\n        if heights == new_heights:\n            break\n        heights = new_heights\n    return max(heights)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3371,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, c = map(int, input_string.split())\n    encounters = {}\n    for _ in range(c):\n        a, b, y = map(int, input().split())\n        if a not in encounters:\n            encounters[a] = set()\n        if b not in encounters:\n            encounters[b] = set()\n        encounters[a].add(b)\n        encounters[b].add(a)\n    \n    for i in range(1, n+1):\n        if i not in encounters:\n            encounters[i] = set()\n    \n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if i not in encounters[j] and j not in encounters[i]:\n                encounters[i].add(j)\n                encounters[j].add(i)\n    \n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if i in encounters[j]:\n                encounters[i].update(encounters[j])\n                encounters[j].update(encounters[i])\n    \n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if i in encounters[j]:\n                encounters[i].remove(j)\n                encounters[j].remove(i)\n    \n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if i in encounters[j]:\n                return 'Impossible'\n    \n    return 'Possible'\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3372,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3373,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3374,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3375,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3376,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3377,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return output_string\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3378,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, d = map(int, input_string.split()[:2])\n    tour = list(map(int, input_string.split()[2:2+d])\n    m = int(input_string.split()[2+d])\n    airfares = []\n    for i in range(m):\n        s, d, t, p = input_string.split()[2+d+i*4:2+d+i*4+4]\n        airfares.append((int(s), int(d), t, int(p)))\n    \n    # sort airfares by price\n    airfares.sort(key=lambda x: x[3])\n    \n    # initialize dp table\n    dp = [float('inf')] * (n+1)\n    dp[0] = 0\n    \n    # fill dp table\n    for i in range(1, n+1):\n        for fare in airfares:\n            if i == fare[0]:\n                dp[i] = min(dp[i], dp[i-1] + fare[3])\n            elif i == fare[1]:\n                dp[i] = min(dp[i], dp[i-1] + fare[3])\n            else:\n                dp[i] = min(dp[i], dp[i-1])\n    \n    # find the minimum cost\n    min_cost = dp[n]\n    \n    # check if the tour is possible\n    for i in range(1, n):\n        if dp[i] == float('inf'):\n            return -1\n    \n    return min_cost\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3379,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    graph = [[] for _ in range(n)]\n    indegree = [0] * n\n    for _ in range(m):\n        x, y = map(int, input().split())\n        graph[x].append(y)\n        indegree[y] += 1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3380,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0.0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3381,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N = int(input_string)\n    for i in range(N):\n        print(0, i)\n        print(40000000, i)\n        print(i, 40000000)\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3382,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    base_values = list(map(int, input_string.split()))\n    base_values.sort()\n    min_grade = float('inf')\n    min_expression = ''\n    \n    def find_expressions(base_values, grade=0, expression=''):\n        nonlocal min_grade, min_expression\n        if len(base_values) == 0:\n            if sum(base_values) == 24:\n                if grade < min_grade:\n                    min_grade = grade\n                    min_expression = expression\n            return\n        \n        for i in range(len(base_values)):\n            for j in range(i+1, len(base_values)):\n                for k in range(j+1, len(base_values)):\n                    for l in range(k+1, len(base_values)):\n                        for op1 in ['+', '-', '*', '/']:\n                            for op2 in ['+', '-', '*', '/']:\n                                for op3 in ['+', '-', '*', '/']:\n                                    for op4 in ['+', '-', '*', '/']:\n                                        if op1 == '/' and base_values[i] == 0:\n                                            continue\n                                        if op2 == '/' and base_values[j] == 0:\n                                            continue\n                                        if op3 == '/' and base_values[k] == 0:\n                                            continue\n                                        if op4 == '/' and base_values[l] == 0:\n                                            continue\n                                        if op1 == '/' and op2 == '/' and base_values[i] % base_values[j] != 0:\n                                            continue\n                                        if op2 == '/' and op3 == '/' and base_values[j] % base_values[k] != 0:\n                                            continue\n                                        if op3 == '/' and op4 == '/' and base_values[k] % base_values[l] != 0:\n                                            continue\n                                        if op1 == '/' and op3 == '/' and base_values[i]",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3383,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k, a, b = map(int, input_string.split())\n    t = list(map(int, input_string.split()))\n    u = []\n    for i in range(k):\n        u.append(list(map(int, input_string.split()))\n    # Your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3384,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert the input string to a list of digits\n    digits = list(map(int, input_string))\n    \n    # Initialize variables to keep track of the closest handsome numbers\n    closest_handsome = None\n    closest_diff = float('inf')\n    \n    # Iterate through the digits\n    for i in range(len(digits)):\n        # Check if the current digit is even or odd\n        if digits[i] % 2 == 0:\n            even = True\n        else:\n            even = False\n        \n        # Check if the next digit is of the same parity\n        if i < len(digits) - 1 and digits[i] % 2 == digits[i+1] % 2:\n            # If it is, swap them\n            digits[i], digits[i+1] = digits[i+1], digits[i]\n        \n        # Check if the current number is handsome\n        if digits[i] % 2 == 0 and digits[i+1] % 2 == 1:\n            # If it is, check if it's closer than the previous closest handsome number\n            diff = abs(int(''.join(map(str, digits[:i+2])) - N)\n            if diff < closest_diff:\n                closest_diff = diff\n                closest_handsome = digits[:i+2]\n        elif digits[i] % 2 == 1 and digits[i+1] % 2 == 0:\n            # If it's not, check if the next digit is even or odd\n            if even:\n                # If it's even, swap the next digit with the previous one\n                digits[i+1], digits[i] = digits[i], digits[i+1]\n            else:\n                # If it's odd, swap the next two digits\n                digits[i+1], digits[i+2] = digits[i+2], digits[i+1]\n        \n        # Check if the current number is handsome\n        if digits[i] % 2 == 0 and digits[i+1] % 2 == 1:\n            # If it is, check if it's closer than the previous closest handsome number\n            diff =",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3385,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split('\\n')[0])\n    input_list = input_string.split('\\n')[1:]\n    l_r_x = []\n    for i in range(n):\n        l, r, x = map(int, input_list[i].split())\n        l_r_x.append((l, r, x))\n    \n    # Your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3386,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, M = map(int, input_string.split())\n    if N == 1 and M == 1:\n        return -1\n    elif N == 1 or M == 1:\n        for i in range(N):\n            for j in range(M):\n                print(i+1, j+1)\n                if i == N-1 and j == M-1:\n                    print(i+1, j+1)\n    else:\n        for i in range(N):\n            for j in range(M):\n                print(i+1, j+1)\n                if i == N-1 and j == M-1:\n                    print(i+1, j+1)\n                elif i == N-1:\n                    print(i+1, j+2)\n                elif j == M-1:\n                    print(i+2, j+1)\n                else:\n                    print(i+1, j+2)\n                    print(i+2, j+1)\n                    print(i+2, j+2)\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3387,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, t = map(int, input_string.split())\n    demands = []\n    for i in range(n):\n        a, b, d = map(int, input().split())\n        demands.append((a, b, d)\n    demands.sort(key=lambda x: x[2], reverse=True)\n    total_demand = sum(d for _, _, d in demands)\n    total_bandwidth = 0\n    for i in range(n):\n        a, b, d = demands[i]\n        fair_share = t * d / total_demand\n        if fair_share > b:\n            fair_share = b\n        total_bandwidth += fair_share\n        print(fair_share)\n    return total_bandwidth\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3388,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, *points = map(int, input_string.split())\n    julia_points = points[0]\n    other_points = points[1:]\n    other_points.sort(reverse=True)\n    count = 0\n    for i in range(n-1):\n        if julia_points > other_points[i]:\n            count += 1\n        else:\n            break\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3389,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k = map(int, input().split())\n    watch_later_list = list(input())\n    type_count = [0] * k\n    for char in watch_later_list:\n        type_count[ord(char) - ord('a')] += 1\n    \n    min_clicks = 0\n    for count in type_count:\n        min_clicks += (count - 1) // 2\n    \n    return min_clicks\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3390,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    adj_list = [[] for _ in range(n+1)]\n    for _ in range(m):\n        a, b = map(int, input().split())\n        adj_list[a].append(b)\n        adj_list[b].append(a)\n    \n    visited = [False] * (n+1)\n    max_courses = 0\n    for i in range(1, n+1):\n        if not visited[i]:\n            max_courses = max(max_courses, dfs(i, adj_list, visited, 0))\n    \n    return max_courses\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3391,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, q = map(int, input_string.split())\n    houses = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        houses.append((x, y))\n    \n    for i in range(q):\n        a, b = map(int, input().split())\n        min_x = min(houses[a-1][0], houses[b-1][0])\n        max_x = max(houses[a-1][0], houses[b-1][0])\n        min_y = min(houses[a-1][1], houses[b-1][1])\n        max_y = max(houses[a-1][1], houses[b-1][1])\n        side_length = max(max_x - min_x, max_y - min_y) + 1\n        print(side_length)\n        \ninput_string = input()\nsolution(input_string) ",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3392,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3393,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k = map(int, input_string.split())\n    courses = []\n    for i in range(n):\n        course, difficulty = input().split()\n        difficulty = int(difficulty)\n        courses.append((course, difficulty)\n    courses.sort(key=lambda x: x[1])\n    total_difficulty = 0\n    for i in range(k):\n        total_difficulty += courses[i][1]\n    return total_difficulty\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3394,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3395,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3396,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split()[0])\n    posts = []\n    for i in range(n):\n        x, y = map(int, input_string.split()[1:])\n        posts.append((x, y))\n    \n    max_distance = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            distance = ((posts[i][0]-posts[j][0])**2 + (posts[i][1]-posts[j][1])**2)**0.5\n            max_distance = max(max_distance, distance)\n    \n    return round(max_distance, 2)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3397,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, M = map(int, input_string.split())\n    dogs = []\n    for i in range(N):\n        dogs.append(list(map(int, input().split()))\n    return dogs\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3398,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3399,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(input())\n    ar = []\n    ban = []\n    cwe = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '1':\n                ar.append((i,j))\n            elif grid[i][j] == '2':\n                ban.append((i,j)\n                cwe.append((i,j)\n    # Write your code here\n    return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3400,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N, A, R, T = map(int, input_string.split()[:3])\n    trips = []\n    for i in range(T):\n        trip = list(map(int, input_string.split()[3+i*3:3+i*3+3]))\n        trips.append(trip)\n    \n    # create graph\n    graph = [[float('inf') for _ in range(N+1)] for _ in range(N+1)]\n    for trip in trips:\n        duration, num_locations, *locations = trip\n        for i in range(num_locations):\n            for j in range(i+1, num_locations):\n                graph[locations[i]][locations[j]] = duration\n                graph[locations[j]][locations[i]] = duration\n    \n    # initialize distance and visited arrays\n    distance = [float('inf') for _ in range(N+1)]\n    visited = [False for _ in range(N+1)]\n    distance[A] = 0\n    \n    # dijkstra's algorithm\n    while True:\n        min_dist = float('inf')\n        min_index = -1\n        for i in range(1, N+1):\n            if not visited[i] and distance[i] < min_dist:\n                min_dist = distance[i]\n                min_index = i\n        if min_index == -1:\n            break\n        visited[min_index] = True\n        for j in range(1, N+1):\n            if not visited[j] and graph[min_index][j] != float('inf'):\n                distance[j] = min(distance[j], distance[min_index] + graph[min_index][j])\n    \n    return distance[R]\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3401,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, s, t, q = map(int, input_string.split())\n    hills = []\n    springs = []\n    towns = []\n    for i in range(n):\n        x, y, h = map(int, input_string.split())\n        hills.append((x, y, h)\n    for i in range(s):\n        springs.append(int(input_string))\n    for i in range(t):\n        towns.append(int(input_string))\n    \n    # Your code here\n    return 0.0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3402,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # read input\n    S = input_string[0]\n    T = input_string[1]\n    K = int(input_string[2])\n    M = int(input_string[3])\n    m = input_string[4]\n    \n    # create dictionary for T\n    T_dict = {}\n    for i in range(len(T)):\n        T_dict[T[i][0]] = T[i][1:]\n        T_dict[T[i][1]] = T[i][0]\n    \n    # apply f to S K times\n    P = S\n    for i in range(K):\n        new_P = \"\"\n        for char in P:\n            new_P += T_dict[char]\n        P = new_P\n    \n    # output the forgotten letters\n    for i in range(M):\n        print(P[m[i])\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3403,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return input_string\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3404,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, X = map(int, input().split())\n    encrypted_text = input()\n    encrypted_text = list(encrypted_text)\n    pad = []\n    for i in range(X):\n        pad.append([(33*i+1)%(2**20) for i in range(X)])\n    column_sums = [sum(pad[i])%(2**20) for i in range(X)]\n    base_27 = int(''.join([str(bin(i)[2:].zfill(5)[-1] for i in column_sums]), 2)\n    base_10 = int(base_27, 27)\n    decrypted_text = []\n    for i in range(N):\n        decrypted_text.append(chr((ord(encrypted_text[i])+base_10%27)%27))\n    return ''.join(decrypted_text)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3405,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to float\n    X = float(input_string)\n    \n    # Initialize an empty list to store the solution\n    solution_list = []\n    \n    # Loop through all integers less than 10^8\n    for i in range(1, 10**8):\n        \n        # Check if multiplying i by X gives a number with the same first digit as the last digit\n        if int(str(i)[0]) == int(str(i*X)[-1]:\n            solution_list.append(i)\n    \n    # If the solution_list is empty, print \"No solution\"\n    if len(solution_list) == 0:\n        print(\"No solution\")\n    else:\n        # Sort the solution_list in ascending order and print each element on a new line\n        solution_list.sort()\n        for num in solution_list:\n            print(num)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3406,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # read input\n    N, S = map(int, input_string.split())\n    Nazi_points = []\n    for i in range(N):\n        x, y = map(int, input_string.split())\n        Nazi_points.append((x, y))\n    Castle_points = []\n    for i in range(S):\n        x, y = map(int, input_string.split())\n        Castle_points.append((x, y))\n    \n    # check if a castle is in danger\n    def is_in_danger(castle, Nazi_points):\n        for i in range(len(Nazi_points)):\n            for j in range(i+1, len(Nazi_points)):\n                for k in range(j+1, len(Nazi_points)):\n                    for l in range(k+1, len(Nazi_points)):\n                        if is_non_degenerate_quadrilateral(Nazi_points[i], Nazi_points[j], Nazi_points[k], Nazi_points[l], castle):\n                            return True\n        return False\n    \n    # check if a quadrilateral is non-degenerate\n    def is_non_degenerate_quadrilateral(A, B, C, D, E):\n        if (A[0]-B[0])*(C[1]-B[1]) == (C[0]-B[0])*(A[1]-B[1]) and (A[0]-C[0])*(D[1]-C[1]) == (C[0]-D[0])*(A[1]-C[1]) and (A[0]-D[0])*(E[1]-D[1]) == (D[0]-E[0])*(A[1]-D[1]) and (A[0]-E[0])*(B[1]-E[1]) == (E[0]-B[0])*(A[1]-E[1]):\n            return False\n        return True\n    \n    # count the number of in-danger castles\n    in_danger_count = 0\n    for",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3407,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return output_string\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3408,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return input_string\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3409,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3410,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3411,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, c, r = map(int, input_string.split())\n    scores = list(map(int, input_string.split()))\n    max_score = max(scores)\n    min_score = min(scores)\n    if max_score == 0 or min_score == 0:\n        return 0\n    elif max_score == min_score:\n        return abs(max_score) * c\n    else:\n        return abs(max_score - min_score) * c\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3412,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # read input\n    v_walk, v_bike, x1, y1, x2, y2, x_G, y_G, x_D, y_D, n = map(int, input_string.split())\n    bike_stations = []\n    for i in range(n):\n        bike_stations.append(list(map(int, input_string.split()))\n    \n    # calculate distance between Gladstone and Daisy\n    distance = ((x_G - x_D) ** 2 + (y_G - y_D) ** 2) ** 0.5\n    \n    # calculate time to reach Daisy by walking\n    time_walk = distance / v_walk\n    \n    # calculate time to reach Daisy by biking\n    time_bike = 0\n    for bike_station in bike_stations:\n        bike_station_distance = ((x_G - bike_station[0]) ** 2 + (y_G - bike_station[1]) ** 2) ** 0.5\n        time_bike += bike_station_distance / v_bike\n        time_bike += bike_station_distance / v_walk\n    \n    # return the minimum time\n    return min(time_walk, time_bike)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3413,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    parties = list(map(int, input_string.split()[n+1:])\n    adj_list = [[] for _ in range(n)]\n    for i in range(m):\n        a, b = map(int, input_string.split()[2*i+1:2*i+3])\n        adj_list[a-1].append(b-1)\n        adj_list[b-1].append(a-1)\n    \n    # Your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3414,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N, M = map(int, input_string.split())\n    nodes = []\n    for i in range(N):\n        x, y = map(int, input_string.split())\n        nodes.append((x, y))\n    edges = []\n    for i in range(M):\n        i, j = map(int, input_string.split())\n        edges.append((i, j))\n        \n    # calculate the angle between each pair of nodes\n    angles = []\n    for i in range(N):\n        for j in range(i+1, N):\n            dx = nodes[i][0] - nodes[j][0]\n            dy = nodes[i][1] - nodes[j][1]\n            angle = math.atan2(dy, dx)\n            angles.append(angle)\n    \n    # calculate the total turning required\n    total_turning = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            total_turning += abs(angles[i] - angles[j])\n    \n    return total_turning\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3415,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return output_string\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3416,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    graph = [[] for i in range(n+1)]\n    for i in range(m):\n        a, b = map(int, input().split())\n        graph[a].append(b)\n        graph[b].append(a)\n    \n    visited = [False] * (n+1)\n    queue = []\n    queue.append(1)\n    visited[1] = True\n    count = 0\n    while queue:\n        count += 1\n        size = len(queue)\n        for i in range(size):\n            node = queue.pop(0)\n            for neighbor in graph[node]:\n                if not visited[neighbor]:\n                    visited[neighbor] = True\n                    queue.append(neighbor)\n    \n    if count == n:\n        print(0)\n    else:\n        print(1)\n    \n    airports = []\n    for i in range(1, n+1):\n        if not visited[i]:\n            airports.append(i)\n    print(\" \".join(map(str, airports))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3417,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3418,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string)\n    supply = 0\n    for i in range(1, n+1):\n        supply += 10**(n-i)\n    return supply\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3419,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, s1, s2 = map(int, input_string.split())\n    t = list(map(int, input_string.split()))\n    t.sort(reverse=True)\n    count = 0\n    i, j = 0, 0\n    while i < n and j < n:\n        if t[i] <= s1:\n            s1 -= t[i]\n            i += 1\n            count += 1\n        elif t[j] <= s2:\n            s2 -= t[j]\n            j += 1\n            count += 1\n        else:\n            break\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3420,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3421,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    k = int(input_string[0])\n    input_string = input_string[1]\n    n = len(input_string)\n    max_success_rate = 0\n    max_length = 0\n    max_start = 0\n    for i in range(n-k+1):\n        success_rate = input_string[i:i+k].count('1')/k\n        if success_rate > max_success_rate:\n            max_success_rate = success_rate\n            max_length = k\n            max_start = i\n        elif success_rate == max_success_rate:\n            if k > max_length:\n                max_length = k\n                max_start = i\n        k += 1\n    return max_start+1, max_length\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3422,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return None\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3423,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3424,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    y, l = map(int, input_string.split())\n    b = 10\n    while True:\n        if int(str(y), b) >= l:\n            return b\n        b += 1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3425,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3426,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"TODO\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3427,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3428,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3429,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    x_s, y_s, s_s, r_i, r_f, x_a, y_a, s_a = map(float, input_string.split())\n    x_s, y_s, s_s, r_i, r_f, x_a, y_a, s_a = int(x_s), int(y_s), int(s_s), int(r_i), int(r_f), int(x_a), int(y_a), int(s_a)\n    distance = ((x_a-x_s)**2 + (y_a-y_s)**2)**0.5\n    time = (r_i-r_f)/s_s\n    if distance > r_i:\n        return 0\n    elif distance > r_f:\n        return (r_i-distance)**2/2\n    else:\n        return (r_f-distance)**2/2\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3430,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"TODO\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3431,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Hint: You can use the following function to read input from the input string\n    # and convert it to a list of tuples\n    points = [tuple(map(int, line.split())) for line in input_string.split('\\n')]\n    \n    # Implement the MST algorithm here\n    # ...\n    \n    return weight\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3432,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return None\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3433,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    R, C = map(int, input_string.split())\n    maze = input_string.split('\\n')\n    fire_positions = []\n    joe_positions = []\n    for i in range(R):\n        for j in range(C):\n            if maze[i][j] == 'F':\n                fire_positions.append((i,j))\n            elif maze[i][j] == 'J':\n                joe_positions.append((i,j))\n                \n    joe_position = joe_positions[0]\n    fire_positions.sort(key=lambda x: abs(joe_position[0]-x[0])+abs(joe_position[1]-x[1]))\n    time = 0\n    while fire_positions:\n        if not fire_positions:\n            break\n        fire_position = fire_positions.pop(0)\n        if fire_position[0] == 0 or fire_position[0] == R-1 or fire_position[1] == 0 or fire_position[1] == C-1:\n            return time\n        if fire_position[0] < joe_position[0]:\n            time += joe_position[0] - fire_position[0]\n            joe_position = (joe_position[0]-1, joe_position[1])\n        elif fire_position[0] > joe_position[0]:\n            time += fire_position[0] - joe_position[0]\n            joe_position = (joe_position[0]+1, joe_position[1])\n        elif fire_position[1] < joe_position[1]:\n            time += joe_position[1] - fire_position[1]\n            joe_position = (joe_position[0], joe_position[1]-1)\n        elif fire_position[1] > joe_position[1]:\n            time += fire_position[1] - joe_position[1]\n            joe_position = (joe_position[0], joe_position[1]+1)\n        time += 1\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3434,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m, d = map(int, input_string.split()[:3])\n    my_minions = list(map(int, input_string.split()[3:3+n])\n    opp_minions = list(map(int, input_string.split()[3+n:])\n    \n    # Write your code here\n    return 0.0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3435,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = len(input_string)\n    count = 0\n    for i in range(2**n):\n        binary_string = bin(i)[2:].zfill(n)\n        if input_string == binary_string.replace('0', '*'):\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3436,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    x, y = map(int, input_string.split())\n    mod = 10**9 + 7\n    dp = [[0]*(y+1) for _ in range(x+1)]\n    dp[0][0] = 1\n    dp[1][0] = 1\n    dp[0][1] = 1\n    for i in range(2, x+1):\n        for j in range(2, y+1):\n            dp[i][j] = (dp[i-1][j] + dp[i][j-1]) % mod\n    return dp[x][y]\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3437,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    L1, L2, N = map(int, input_string.split())\n    tube_lengths = list(map(int, input_string.splitlines()[1:]))\n    tube_lengths.sort(reverse=True)\n    max_length = 0\n    \n    for i in range(N):\n        for j in range(i+1, N):\n            if tube_lengths[i] + tube_lengths[j] <= L1:\n                for k in range(j+1, N):\n                    for l in range(k+1, N):\n                        if tube_lengths[k] + tube_lengths[l] <= L2:\n                            max_length = max(max_length, tube_lengths[i] + tube_lengths[j] + tube_lengths[k] + tube_lengths[l])\n                            \n    if max_length == 0:\n        return \"Impossible\"\n    else:\n        return max_length\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3438,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3439,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # read input\n    h, w = map(int, input_string.split())\n    grid = []\n    for i in range(h):\n        grid.append(list(map(int, input_string.split()))\n    i, j = map(int, input_string.split())\n    \n    # initialize variables\n    drained_water = 0\n    visited = set()\n    \n    # BFS to find all water cells\n    def bfs(grid, i, j):\n        queue = [(i, j)]\n        visited.add((i, j))\n        while queue:\n            r, c = queue.pop(0)\n            for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                nr, nc = r + dr, c + dc\n                if 0 <= nr < h and 0 <= nc < w and grid[nr][nc] < 0 and (nr, nc) not in visited:\n                    queue.append((nr, nc)\n                    visited.add((nr, nc)\n                    drained_water += 1\n                    \n    bfs(grid, i-1, j-1)\n    \n    return drained_water\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3440,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N, R, additional_flights = map(int, input_string.split())\n    flights = []\n    for i in range(R):\n        a, b, c = map(int, input_string.split())\n        flights.append((a, b, c))\n    \n    for i in range(additional_flights):\n        a, b, c = map(int, input_string.split())\n        flights.append((a, b, c)\n    \n    # sort flights by cost\n    flights.sort(key=lambda x: x[2])\n    \n    # initialize variables\n    total_cost = 0\n    visited = [False] * (N+1)\n    visited[1] = True\n    \n    # iterate through flights\n    for flight in flights:\n        if not visited[flight[0]:\n            total_cost += flight[2]\n            visited[flight[0]] = True\n        elif not visited[flight[1]:\n            total_cost += flight[2]\n            visited[flight[1]] = True\n    \n    return total_cost\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3441,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3442,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    X, Y = map(int, input_string.split())\n    count = 0\n    for i in range(X, Y+1):\n        binary_num = bin(i)[2:]\n        if binary_num.count('1') == binary_num.count('0'):\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3443,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3444,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, M = map(int, input_string.split())\n    pistes = []\n    for _ in range(M):\n        a, b, w = map(int, input_string.split())\n        pistes.append((a, b, w))\n        \n    # Your code here\n    return p_k\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3445,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Hint: You can use the following function to read input from the console\n    # and split it into lines\n    lines = input_string.split('\\n')\n    N = int(lines[0])\n    customers = []\n    for i in range(1, N+1):\n        x, y = map(int, lines[i].split())\n        customers.append((x, y))\n    \n    # Your code goes here\n    # Write your code to find the maximum delivery time for each company and return the maximum of the two\n    # You can use the following function to print the output\n    # print(max_delivery_time)\n    return max_delivery_time\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3446,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"9-b\\n8-a\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3447,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return input_string\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3448,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k = map(int, input_string.split())\n    if k > n:\n        return \"NO\"\n    \n    MS = [0] * k\n    ME = [0] * k\n    VS = [0] * k\n    VE = [0] * k\n    \n    for i in range(k):\n        MS[i] = i+1\n        ME[i] = i+2\n        VS[i] = i+1\n        VE[i] = i+3\n        \n    return \"YES\\n\" + \"\\n\".join(str(MS[i]) + \" \" + str(ME[i]) for i in range(k)) + \"\\n\" + \"\\n\".join(str(VS[i]) + \" \" + str(VE[i]) for i in range(k))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3449,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    B, H, R, C = map(int, input_string.split())\n    lights = []\n    for i in range(R):\n        lights.append(list(map(int, input_string.split()))\n    # Your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3450,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return input_string\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3451,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3452,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return None\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3453,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, M = map(int, input_string.split())\n    tunnels = []\n    for i in range(M):\n        A, B, L = map(int, input_string.split())\n        tunnels.append((A, B, L))\n        \n    # Complete the solution function\n    return \" \".join(map(str, danger_levels(N, tunnels)) % (10**9+7))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3454,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, M = map(int, input_string.split())\n    c = list(map(int, input_string.split()))\n    c.sort(reverse=True)\n    b = [M - x for x in c]\n    r = c\n    count = 0\n    for i in range(1, N+1):\n        count += (b[i-1] + 1) * (r[i-1] + 1)\n    return count % 100003\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3455,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"Impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3456,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3457,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, X, Y = map(int, input_string.split())\n    MOD = 10**9 + 7\n    dp = [[0] * (N+1) for _ in range(N+1)]\n    dp[0][0] = 1\n    for i in range(N+1):\n        for j in range(N+1):\n            if i == 0 and j == 0:\n                continue\n            for x in range(X, i+1):\n                for y in range(Y, j+1):\n                    if i-x >= 0 and j-y >= 0:\n                        dp[i][j] += dp[i-x][j-y]\n                        dp[i][j] %= MOD\n    return dp[N][N]\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3458,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split()[0])\n    numbers = list(map(int, input_string.split()[1:]))\n    max_sum = 0\n    for i in range(1, 2**n):\n        subset = [numbers[j] for j in range(n) if (i & (1<<j))]\n        xor_sum = 0\n        for num in subset:\n            xor_sum ^= num\n        max_sum = max(max_sum, xor_sum)\n    return max_sum\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3459,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3460,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"Write your code here\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3461,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of tuples\n    hearings = []\n    for line in input_string.split('\\n'):\n        s, a, b = map(int, line.split())\n        hearings.append((s, a, b))\n    \n    # Sort the hearings by start time\n    hearings.sort(key=lambda x: x[0])\n    \n    # Initialize variables\n    n = len(hearings)\n    dp = [0] * (n+1)\n    dp[0] = 0\n    \n    # Fill the dp array\n    for i in range(1, n+1):\n        s, a, b = hearings[i-1]\n        dp[i] = dp[i-1]\n        for j in range(i-1, -1, -1):\n            if hearings[j][0] + a <= s:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    # Calculate the expected number of hearings\n    expected_hearings = 0\n    for i in range(1, n+1):\n        s, a, b = hearings[i-1]\n        expected_hearings += (dp[i] - dp[i-1]) * (b - a + 1) / (b - a + 1)\n    \n    return expected_hearings\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3462,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    pattern = input_string[0]\n    files = input_string[1:]\n    result = []\n    \n    for file in files:\n        if fnmatch.fnmatch(file, pattern):\n            result.append(file)\n            \n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3463,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, M = map(int, input_string.split())\n    probabilities = [float(x) for x in input_string.split('\\n')[1:N+M] if x]\n    total_points = N + M\n    total_rounds = N + M - 1\n    p_win = 0\n    for i in range(total_rounds):\n        p_win += probabilities[i] * (N - i) / total_points\n        N -= 1\n        M -= 1\n    return p_win\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3464,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    x, p = map(float, input_string.split())\n    p /= 100\n    return round(x * p, 3)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3465,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return output_string\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3466,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    m, k = map(int, input_string.split())\n    a = list(map(int, input_string.split())[1:m+1])\n    b = list(map(int, input_string.split())[m+1:])\n    f = [a[i]/sum(a) for i in range(m)]\n    s = [0]*m\n    for i in range(k):\n        s[b[i]-1] += 1\n    n = sum(s)\n    max_sweets = 0\n    for i in range(m):\n        if n*f[i]-1 < s[i] < n*f[i]+1:\n            max_sweets += 1\n    return max_sweets\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3467,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3468,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, c = map(int, input_string.split())\n    apps = []\n    for i in range(n):\n        d, s = map(int, input().split())\n        apps.append((d, s))\n    \n    apps.sort(key=lambda x: x[1], reverse=True)\n    installed = []\n    for app in apps:\n        if app[0] <= c:\n            installed.append(app[1])\n            c -= app[0]\n        else:\n            break\n    \n    print(len(installed))\n    print(\" \".join(str(i+1) for i in range(len(installed)))\n    \ninput_string = input()\nsolution(input_string)\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3469,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    g, k, p = input_string.split()\n    p = float(p)\n    g = g.strip()\n    k = k.strip()\n    g_len = len(g)\n    k_len = len(k)\n    g_set = set(g)\n    k_set = set(k)\n    g_set.add('')\n    k_set.add('')\n    dp = [[0] * (k_len + 1) for _ in range(g_len + 1)]\n    for i in range(g_len + 1):\n        for j in range(k_len + 1):\n            dp[i][j] = 0\n    for i in range(g_len + 1):\n        dp[i][0] = 1 - p ** i\n    for j in range(k_len + 1):\n        dp[0][j] = p ** j\n    for i in range(1, g_len + 1):\n        for j in range(1, k_len + 1):\n            if g[i - 1] == k[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] * (1 - p) + dp[i - 1][j] * p + dp[i][j - 1] * p\n            else:\n                dp[i][j] = dp[i - 1][j] * (1 - p) + dp[i][j - 1] * p\n    return dp[g_len][k_len]\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3470,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string)\n    safe_cells = []\n    for i in range(1, 4*n+5):\n        if i in [1, 2, 3, 4*n+1, 4*n+2, 4*n+3, 4*n+4]:\n            safe_cells.append(i)\n        elif i in [n+1, 2*n+1, 3*n+1, 4*n+1]:\n            safe_cells.append(i)\n        elif i in [n, 2*n, 3*n]:\n            safe_cells.append(i)\n        elif i in [n+2, 2*n+2, 3*n+2]:\n            safe_cells.append(i)\n        elif i in [n+3, 2*n+3, 3*n+3]:\n            safe_cells.append(i)\n        elif i in [n+4, 2*n+4, 3*n+4]:\n            safe_cells.append(i)\n        elif i in [n+5, 2*n+5, 3*n+5]:\n            safe_cells.append(i)\n        elif i in [n+6, 2*n+6, 3*n+6]:\n            safe_cells.append(i)\n        elif i in [n+7, 2*n+7, 3*n+7]:\n            safe_cells.append(i)\n        elif i in [n+8, 2*n+8, 3*n+8]:\n            safe_cells.append(i)\n        elif i in [n+9, 2*n+9, 3*n+9]:\n            safe_cells.append(i)\n        elif i in [n+10, 2*n+10, 3*n+10]:\n            safe_cells.append(i)\n        elif i in [n+11, 2*n+11, 3*n+11]:\n            safe_cells.append(i)",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3471,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    K, seq, Q = map(int, input_string.split('\\n'))\n    seq = list(map(int, input_string.split('\\n')[1].split()))\n    queries = []\n    for i in range(Q):\n        queries.append(list(map(int, input_string.split('\\n')[i+2].split()))\n    for i in range(Q):\n        l, r = queries[i]\n        result = seq[l]\n        for j in range(l+1, r+1):\n            result = result ^ seq[j]\n        print(result)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3472,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    W, N = map(int, input_string.split())\n    lines = []\n    for i in range(N):\n        x1, y1, x2, y2 = map(int, input_string.split())\n        lines.append((x1, y1, x2, y2))\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3473,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    Z, F, forbidden_dates = input_string.split('\\n')\n    Z = int(Z)\n    F = int(F)\n    forbidden_dates = [tuple(map(int, date.split()) for date in forbidden_dates.split('\\n')]\n    \n    # Your code here\n    return \"194\\n2019 10 25\\n2020 10 30\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3474,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input string to list of floats\n    input_list = list(map(float, input_string.split()))\n    \n    # Extract x and y coordinates of mirror and laser position\n    x1, y1, x2, y2, x3, y3 = input_list\n    \n    # Calculate slope of line from mirror endpoints\n    m = (y2 - y1) / (x2 - x1)\n    \n    # Calculate y-intercept of line from mirror endpoints\n    b = y1 - m * x1\n    \n    # Calculate x-coordinate of intersection with mirror\n    x_intersect = (b - y3) / (m - y3/x3)\n    \n    # Calculate y-coordinate of intersection with mirror\n    y_intersect = m * x_intersect + b\n    \n    # Calculate y-coordinate of reflected laser position\n    y_reflect = 2 * y_intersect - y3\n    \n    # Calculate y-coordinate of laser position after reflection\n    y_final = 2 * y_intersect - y1\n    \n    # Calculate y-coordinate of laser position after bouncing off mirror\n    y_final_reflected = 2 * y_intersect - y3\n    \n    # Calculate y-coordinate of laser position after bouncing off mirror and hitting wall\n    y_final_wall = 2 * y_intersect - y1\n    \n    # Calculate y-coordinate of laser position after bouncing off mirror and hitting wall\n    y_final_wall_reflected = 2 * y_intersect - y3\n    \n    # Calculate range of y-coordinates that can be hit\n    y_min = min(y_final, y_final_reflected, y_final_wall, y_final_wall_reflected)\n    y_max = max(y_final, y_final_reflected, y_final_wall, y_final_wall_reflected)\n    \n    # Check if laser can hit wall\n    if y_min > 0 and y_max > 0:\n        return \"can't hit the wall\"\n    elif y_min",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3475,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"IMPOSSIBLE\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3476,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    R, C = map(int, input_string.split())\n    matrix = []\n    for i in range(R):\n        matrix.append(list(map(int, input().split()))\n    max_sum = -10**4 * R * C\n    operations = []\n    for i in range(R):\n        for j in range(C):\n            for k in range(C):\n                for l in range(R):\n                    for m in range(C):\n                        new_matrix = [[matrix[x][y] for x in range(R) for y in range(C)]]\n                        if i != l:\n                            new_matrix[i*C+j], new_matrix[l*C+j] = new_matrix[l*C+j], new_matrix[i*C+j]\n                        if j != m:\n                            new_matrix[i*C+j], new_matrix[i*C+m] = new_matrix[i*C+m], new_matrix[i*C+j]\n                        if i == 0:\n                            new_matrix[i*C+j] *= -1\n                        if j == 0:\n                            new_matrix[i*C+j] *= -1\n                        new_sum = sum([sum(new_matrix[x*C:x*C+C]) for x in range(R)])\n                        if new_sum > max_sum:\n                            max_sum = new_sum\n                            operations = [f\"rotS {j+1} {k+1}\", f\"rotR {l+1} {m+1}\"]\n                            if i == 0:\n                                operations.append(f\"negR {l+1}\")\n                            if j == 0:\n                                operations.append(f\"negS {m+1}\")\n    return max_sum, len(operations), \"\\n\".join(operations)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3477,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split()[:2])\n    k = list(map(int, input_string.split()[2:])[:n])\n    energies = []\n    for i in range(m):\n        e = sum([min((i-j)**2*k[j] for j in range(n)])\n        energies.append(e)\n    return min(energies)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3478,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    graph = [[0 for i in range(n+1)] for j in range(n+1)]\n    for i in range(m):\n        x, y = map(int, input().split())\n        graph[x][y] = graph[y][x] = 1\n    for i in range(1, n+1):\n        graph[i][i] = 1\n    def dfs(node, visited, path):\n        visited[node] = True\n        path.append(node)\n        for i in range(1, n+1):\n            if graph[node][i] == 1 and not visited[i]:\n                dfs(i, visited, path)\n    visited = [False] * (n+1)\n    path1 = []\n    dfs(1, visited, path1)\n    visited = [False] * (n+1)\n    path2 = []\n    dfs(2, visited, path2)\n    for i in range(1, n+1):\n        if i not in path1 and i not in path2:\n            return \"impossible\"\n    return \" \".join(str(i) for i in path1) + \"\\n\" + \" \".join(str(i) for i in path2)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3479,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k = map(int, input_string.split())\n    times = list(map(int, input_string.splitlines()[1:n+1])\n    times.sort()\n    total_time = 0\n    for i in range(n):\n        total_time += times[i]\n        if i % k == k-1:\n            total_time += times[i]\n    return total_time\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3480,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    lines = input_string.split('\\n')\n    L, D = map(int, lines[0].split())\n    lines = lines[1:]\n    for i in range(0, len(lines), 2):\n        line1, line2 = lines[i], lines[i+1]\n        words1, words2 = line1.split(), line2.split()\n        time1, time2 = list(map(int, line2.split())), []\n        for j in range(len(words1)):\n            time2.append(time1[j] + D)\n        max_time = max(time1 + time2)\n        output1, output2 = [], []\n        for j in range(max_time):\n            output1.append([' '] * len(words1))\n            output2.append([' '] * len(words1))\n        for j in range(len(words1)):\n            for k in range(time1[j]):\n                output1[k][j] = words1[j][k]\n            for k in range(time2[j]):\n                output2[k][j] = words2[j][k]\n        for j in range(len(words1)):\n            output1[time1[j]-1][j] = words1[j][time1[j]-1]\n            output2[time2[j]-1][j] = words2[j][time2[j]-1]\n        for j in range(len(words1)):\n            output1[time1[j]-1][j] = words1[j][time1[j]-1]\n            output2[time2[j]-1][j] = words2[j][time2[j]-1]\n        for j in range(len(words1)):\n            for k in range(time1[j], time2[j]):\n                output2[k][j] = words2[j][k-time1[j]]\n        for j in range(len(words1)):\n            output1[time1[j]-1][j] = words1[j][time1[j]-1]\n            output2[time2[",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3481,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3482,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3483,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N = int(input_string.split()[0])\n    weights = list(map(int, input_string.split()[1:]))\n    weights.sort()\n    max_weight = sum(weights)\n    min_weight = weights[0] + weights[1] + weights[2]\n    distinct_weights = len(weights)\n    expected_weight = sum(weights) / len(weights)\n    \n    return max_weight, min_weight, distinct_weights, expected_weight\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3484,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k = map(int, input_string.split())\n    grid = []\n    for i in range(k):\n        row = list(map(int, input().split()))\n        grid.append(row)\n    \n    # Complete the grid\n    for i in range(k, n):\n        row = [0]*n\n        grid.append(row)\n    \n    # Fill in the grid\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 0:\n                for num in range(1, n+1):\n                    if num not in grid[i] and num not in [grid[x][j] for x in range(n)]:\n                        grid[i][j] = num\n                        break\n    \n    # Check if the grid is valid\n    for i in range(n):\n        if len(set(grid[i])) != n:\n            return \"no\"\n    \n    for j in range(n):\n        col = [grid[x][j] for x in range(n)]\n        if len(set(col)) != n:\n            return \"no\"\n    \n    for i in range(0, n, 3):\n        for j in range(0, n, 3):\n            subgrid = [grid[x][j:j+3] for x in range(i, i+3)]\n            for row in subgrid:\n                if len(set(row)) != n:\n                    return \"no\"\n            for col in range(3):\n                if len(set([row[col] for row in subgrid]) != n):\n                    return \"no\"\n    \n    # Output the solution\n    for row in grid:\n        print(\" \".join(map(str, row))\n    return \"yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3485,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0.0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3486,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3487,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"Not implemented yet\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3488,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3489,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return None\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3490,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"ok\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3491,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"R 0\\nG 2\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3492,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # read input\n    s, r, f, t = map(int, input_string.split()[:3])\n    raw_materials = input_string.split()[3:3+r]\n    factories = input_string.split()[3+r:3+r+f]\n    transportation_companies = []\n    for i in range(t):\n        n, *states = input_string.split()[3+r+f+i*n:]\n        transportation_companies.append(states)\n    \n    # create a dictionary to store the raw materials and factories\n    raw_material_dict = {}\n    factory_dict = {}\n    for i in range(r):\n        raw_material_dict[raw_materials[i]] = []\n    for i in range(f):\n        factory_dict[factories[i]] = []\n    \n    # create a dictionary to store the transportation companies\n    transportation_dict = {}\n    for i in range(t):\n        transportation_dict[i+1] = transportation_companies[i]\n    \n    # create a dictionary to store the connections between raw materials and factories\n    connections = {}\n    for i in range(t):\n        for state in transportation_companies[i]:\n            if state in raw_material_dict:\n                for j in range(t):\n                    if transportation_companies[j][0] in factory_dict:\n                        connections[state] = transportation_companies[j][0]\n                        break\n    \n    # create a dictionary to store the connections between factories and transportation companies\n    factory_connections = {}\n    for i in range(t):\n        for state in transportation_companies[i]:\n            if state in factory_dict:\n                for j in range(t):\n                    if transportation_companies[j][0] in raw_material_dict:\n                        factory_connections[transportation_companies[j][0]] = i+1\n                        break\n    \n    # create a dictionary to store the connections between factories and raw materials\n    factory_raw_material_connections = {}",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3493,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split('\\n')[0])\n    people = input_string.split('\\n')[1:]\n    buttons = [0]*n\n    max_count = 0\n    for i in range(n):\n        for j in range(n):\n            if people[i][j] == 'Y':\n                buttons[j] += 1\n    max_count = max(buttons)\n    if max_count == 0:\n        return 0\n    else:\n        result = []\n        for i in range(max_count):\n            for j in range(n):\n                if buttons[j] >= max_count:\n                    result.append(j+1)\n                    buttons[j] -= 1\n            print(' '.join(str(x) for x in result)\n        return max_count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3494,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    R, S = map(int, input_string.split())\n    matrix = []\n    for i in range(R):\n        matrix.append(list(input_string.split())\n    G = int(input())\n    falls = []\n    for i in range(G):\n        r, s = map(int, input().split())\n        falls.append((r, s))\n    \n    return solution(matrix, falls)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3495,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return output_string\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3496,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, q = map(int, input_string.split())\n    a = list(map(int, input_string.split()))\n    a = a[n+1:]\n    for i in range(q):\n        k = int(input())\n        min_energy = float('inf')\n        for i in range(1, n+1):\n            if k <= i:\n                min_energy = min(min_energy, a[i-1])\n            else:\n                min_energy = min(min_energy, a[i-1] + min(a[i-1], k-i))\n        print(min_energy)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3497,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3498,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"Write your code here\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3499,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3500,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split('\\n')[0])\n    cards = []\n    for i in range(n):\n        cards.append(list(map(int, input_string.split('\\n')[i+1].split()))\n    return cards\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3501,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split('\\n')[0])\n    jaap_bet = list(map(int, input_string.split('\\n')[1].split()))\n    jan_bet = list(map(int, input_string.split('\\n')[2].split()))\n    thijs_bet = list(map(int, input_string.split('\\n')[3].split()))\n    \n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if jaap_bet[i] == jan_bet[j] and jaap_bet[i] == thijs_bet[j]:\n                count += 1\n    \n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3502,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return output\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3503,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split('\\n')[0])\n    pairs = [list(map(int, line.split())) for line in input_string.split('\\n')[1:]]\n    operators = ['+', '-', '*']\n    results = set()\n    for i in range(n):\n        a, b = pairs[i]\n        for op in operators:\n            if op == '+':\n                result = a + b\n            elif op == '-':\n                result = a - b\n            else:\n                result = a * b\n            if result not in results:\n                results.add(result)\n                print(f\"{a} {op} {b} = {result}\")\n                break\n        else:\n            print(\"impossible\")\n            return\n# End of code\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3504,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to list of lists\n    input_list = input_string.split('\\n')\n    D, S = map(int, input_list[0].split())\n    droplets = []\n    sensors = []\n    for i in range(1, D+1):\n        droplets.append(list(map(int, input_list[i].split()))\n    for i in range(D+1, D+S+1):\n        sensors.append(list(map(int, input_list[i].split()))\n    \n    # Sort droplets and sensors by y-coordinate\n    droplets.sort(key=lambda x: x[1])\n    sensors.sort(key=lambda x: x[2])\n    \n    # Initialize result list\n    result = [0]*D\n    \n    # Iterate through droplets and sensors\n    for i in range(D):\n        for j in range(S):\n            if droplets[i][1] <= sensors[j][2]:\n                result[i] = sensors[j][2]\n                break\n    \n    # Return result\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3505,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N = int(input_string.split()[0])\n    a = list(map(int, input_string.split()[1:])\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                if a[i] + a[j] == a[k]:\n                    count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3506,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, t, m = map(int, input_string.split())\n    sp_cheers = []\n    for i in range(m):\n        a, b = map(int, input_string.split())\n        sp_cheers.append((a, b))\n    \n    # Your code here\n    return 0, 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3507,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    R, W, d = map(int, input_string.split())\n    MOD = 10**9 + 7\n    red_piles = [R//d] * d + [R % d]\n    white_piles = [W]\n    red_count = d\n    white_count = W\n    total_count = R + W\n    result = 1\n    \n    for i in range(min(red_count, white_count):\n        result *= (red_count + white_count)\n        result %= MOD\n        red_count -= 1\n        white_count -= 1\n    \n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3508,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, b = input_string.split()\n    n = int(n)\n    b = list(map(int, b.split()))\n    max_damage = 0\n    tear_down = 0\n    \n    for i in range(1, n-1):\n        if b[i] > b[i-1] and b[i] > b[i+1]:\n            damage = max(b[i-1] + b[i+1] - b[i], 0)\n            if damage > max_damage:\n                max_damage = damage\n                tear_down = i\n                \n    return max_damage, tear_down\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3509,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3510,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split('\\n')[0])\n    options = {}\n    for i in range(1, n+1):\n        options[chr(i+96)] = input_string.split('\\n')[i].split()[1:]\n    \n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i == j:\n                print(0, end=' ')\n            else:\n                print(min_rounds(options, chr(i+96), chr(j+96)), end=' ')\n        print()\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3511,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, Q = map(int, input_string.split())\n    queries = []\n    for i in range(Q):\n        query = input().split()\n        if len(query) == 1:\n            queries.append(query)\n        else:\n            queries.append(query)\n    \n    return queries\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3512,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"TODO\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3513,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    X = int(input_string)\n    k = 0\n    for i in range(1, X):\n        if X % i == 0:\n            k += 1\n            if i * (X // i) == X:\n                return k\n    return k\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3514,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    R, C = map(int, input_string.split())\n    grid = []\n    for i in range(R):\n        grid.append(list(input_string.split())\n    max_buildings = 0\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == \"x\":\n                count = 0\n                for k in range(R):\n                    if grid[i][k] == \"x\":\n                        count += 1\n                for k in range(C):\n                    if grid[k][j] == \"x\":\n                        count += 1\n                max_buildings = max(max_buildings, count)\n    return max_buildings\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3515,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of lists\n    input_list = [list(map(int, line.split())) for line in input_string.split('\\n')]\n    \n    # Sort the list by y-coordinate\n    input_list.sort(key=lambda x: x[0])\n    \n    # Initialize the output list\n    output_list = []\n    \n    # Iterate through the sorted list\n    for i in range(1, len(input_list)):\n        # If the difference between the current city and the previous city is greater than or equal to the minimum distance, add the time to the output list\n        if input_list[i][0] - input_list[i-1][0] >= input_list[i-1][1]:\n            output_list.append(input_list[i-1][0] - input_list[0][0] + input_list[i-1][2])\n        # If not, add -1 to the output list\n        else:\n            output_list.append(-1)\n            \n    # Return the output list\n    return output_list\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3516,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split('\\n')[0])\n    levels = []\n    for i in range(1, n+1):\n        line = input_string.split('\\n')[i].split()\n        shortcut = int(line[0])\n        shortcut_time = int(line[1])\n        completion_times = [int(x) for x in line[2:]]\n        levels.append((shortcut, shortcut_time, completion_times))\n    \n    # Sort levels by completion time using the shortcut\n    levels.sort(key=lambda x: x[1])\n    \n    # Initialize the dp array\n    dp = [float('inf')] * (n+1)\n    dp[0] = 0\n    \n    # Fill the dp array\n    for i in range(1, n+1):\n        for j in range(i):\n            dp[i] = min(dp[i], dp[j] + levels[i-1][2][j])\n    \n    return dp[n]\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3517,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3518,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    friends = {}\n    total_carbon = 0\n    \n    for i in range(m):\n        p, q, c = map(int, input().split())\n        if p not in friends:\n            friends[p] = []\n        if q not in friends:\n            friends[q] = []\n        friends[p].append(q)\n        friends[q].append(p)\n        total_carbon += c\n    \n    for i in range(1, n+1):\n        if i not in friends:\n            return \"impossible\"\n    \n    def dfs(node, visited, path):\n        if node in visited:\n            return 0\n        visited.add(node)\n        path.append(node)\n        min_carbon = float('inf')\n        for friend in friends[node]:\n            if friend not in visited:\n                min_carbon = min(min_carbon, dfs(friend, visited, path))\n        path.pop()\n        return min_carbon + total_carbon\n    \n    min_carbon = float('inf')\n    for i in range(1, n+1):\n        visited = set()\n        path = []\n        min_carbon = min(min_carbon, dfs(i, visited, path))\n    \n    return min_carbon\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3519,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 1.000000000\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3520,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, p, c = map(int, input_string.split())\n    pills = []\n    for i in range(p):\n        t, x, y = map(int, input().split())\n        pills.append((t, x, y))\n    \n    pills.sort(key=lambda x: x[0])\n    max_age = 0\n    current_age = 0\n    current_pill = None\n    \n    for i in range(p):\n        t, x, y = pills[i]\n        if t > current_age:\n            current_age = t\n        if current_pill is not None:\n            current_age += c\n        current_pill = (x, y)\n        max_age = max(max_age, current_age + y)\n        \n    return max_age\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3521,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N = int(input_string.split()[0])\n    stars = []\n    for i in range(N):\n        T, s, a = map(float, input_string.split()[1:])\n        stars.append((T, s, a))\n    \n    max_distance = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            T1, s1, a1 = stars[i]\n            T2, s2, a2 = stars[j]\n            angle = min(abs(a1-a2), abs(a1-a2+2*pi), abs(a1-a2-2*pi))\n            distance = max(0, T1-s1*angle) + max(0, T2-s2*angle)\n            max_distance = max(max_distance, distance)\n    \n    return max_distance\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3522,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k = map(int, input_string.split())\n    p = list(map(int, input_string.split()))\n    p.sort()\n    d = 0\n    for i in range(n):\n        d = max(d, max(p[i*k:(i+1)*k]) - min(p[i*k:(i+1)*k]) + 1)\n    return d\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3523,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    P, N1, N5, N10, N25 = map(int, input_string.split())\n    total_coins = N1 + N5*5 + N10*10 + N25*25\n    if total_coins < P:\n        return \"Impossible\"\n    elif total_coins == P:\n        return P\n    else:\n        return min(N1, P//1) + min(N5, P//5) + min(N10, P//10) + min(N25, P//25)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3524,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    s1, s2 = input_string.split('\\n')\n    s = s1 + s2\n    for i in range(len(s1)):\n        if s.index(s1[i]) > s.index(s2[i]):\n            return \"no\"\n    return \"yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3525,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, L, B, S, D = map(int, input_string.split())\n    locks = []\n    for i in range(L):\n        a, b, x, y = map(int, input().split())\n        locks.append((a, b, x, y))\n        \n    # Write your code here\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3526,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    answer_sequence = []\n    for i in range(n):\n        answer_sequence.append(\"0\")\n    for i in range(m):\n        l, r, hint = input_string.split()\n        l, r = int(l), int(r)\n        if hint == \"same\":\n            if answer_sequence[l-1] == \"0\":\n                for j in range(l, r+1):\n                    answer_sequence[j-1] = \"1\"\n            else:\n                for j in range(l, r+1):\n                    answer_sequence[j-1] = \"0\"\n        else:\n            if answer_sequence[l-1] == \"0\":\n                for j in range(l, r+1):\n                    answer_sequence[j-1] = \"1\"\n            else:\n                for j in range(l, r+1):\n                    answer_sequence[j-1] = \"0\"\n    return answer_sequence\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3527,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3528,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"Write your code here\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3529,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"1\" if possible else \"0\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3530,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # read input\n    N, Q = map(int, input_string.split('\\n')[0].split())\n    coasters = []\n    for i in range(1, N+1):\n        a, b, t = map(int, input_string.split('\\n')[i].split())\n        coasters.append((a, b, t))\n    visits = list(map(int, input_string.split('\\n')[N+1:])\n    \n    # calculate fun values for each coaster\n    fun_values = []\n    for i in range(N):\n        a, b, t = coasters[i]\n        fun_values.append([a - (k-1)**2 * b for k in range(1, t+1)])\n    \n    # calculate max fun for each visit\n    max_fun = []\n    for T in visits:\n        max_fun_T = 0\n        for i in range(N):\n            a, b, t = coasters[i]\n            fun_T = max([f for f in fun_values[i][:T] if f > 0])\n            max_fun_T = max(max_fun_T, fun_T)\n        max_fun.append(max_fun_T)\n    \n    # print output\n    for T in visits:\n        print(max_fun[T-1])\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3531,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m, k, w = map(int, input_string.split())\n    special_places = set(map(int, input_string.split()[1:k+1])\n    trails = []\n    for i in range(m):\n        a, b, c = map(int, input_string.split()[k+i*3+1:k+i*3+4])\n        trails.append((a, b, c))\n    \n    # Your code here\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3532,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return input_string\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3533,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3534,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return None\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3535,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, M, K = map(int, input_string.split())\n    measurements = []\n    for i in range(K):\n        spin, y, x = input_string.split()\n        measurements.append((spin, int(y)-1, int(x)-1))\n    \n    # Your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3536,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split('\\n')[0])\n    tree = []\n    for i in range(n):\n        b, p = map(int, input_string.split('\\n')[i+1].split())\n        tree.append((b, p))\n    \n    # Build the tree\n    root = tree[0]\n    tree = tree[1:]\n    for i in range(len(tree)):\n        tree[i] = (tree[i][0], tree[i][1]-1)\n    \n    # Calculate the probability\n    prob = 1\n    for node in tree:\n        b, p = node\n        if p == 0:\n            continue\n        prob *= b/(b+1)\n    \n    # Calculate the inverse of the denominator\n    Q = 1000000000000000000000001\n    for i in range(n-1):\n        Q *= 100000000000000000000001\n        Q %= 10000000000000000000001\n    \n    # Calculate the result\n    result = int(prob * Q)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3537,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    flights = []\n    for i in range(m):\n        a, b, s, e = map(int, input_string.split())\n        flights.append((a, b, s, e))\n    \n    flights.sort(key=lambda x: x[2])\n    frustration = 0\n    current_country = 1\n    for flight in flights:\n        if flight[0] == current_country:\n            frustration += (flight[2] - flight[3])**2\n            current_country = flight[1]\n        else:\n            frustration += (flight[2] - flight[3])**2 + (flight[3] - flight[2])**2\n            current_country = flight[1]\n    \n    return frustration\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3538,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, d = map(int, input_string.split())\n    frogs = []\n    for i in range(n):\n        l, w, h = map(int, input().split())\n        frogs.append((l, w, h))\n    \n    frogs.sort(key=lambda x: x[0], reverse=True)\n    max_frogs = 0\n    for i in range(n):\n        frog = frogs[i]\n        if frog[0] > d:\n            max_frogs += 1\n            continue\n        else:\n            for j in range(i+1, n):\n                if frog[1] + frogs[j][1] <= d:\n                    max_frogs += 1\n                    break\n                elif frog[1] + frogs[j][1] + frogs[j][2] <= d:\n                    max_frogs += 2\n                    break\n                else:\n                    continue\n    return max_frogs\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3539,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3540,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a 2D list\n    input_list = [list(input_string[i:i+4]) for i in range(0, len(input_string), 4)]\n    \n    # Initialize variables\n    moves = 0\n    solved = False\n    \n    # Loop until the puzzle is solved\n    while not solved:\n        # Check if the puzzle is solved\n        if input_list == [['R', 'R', 'R', 'R'], ['G', 'G', 'G', 'G'], ['B', 'B', 'B', 'B'], ['Y', 'Y', 'Y', 'Y']]:\n            solved = True\n            break\n        \n        # Check if the puzzle can be solved in 1 move\n        if input_list[0] == ['R', 'R', 'R', 'R']:\n            moves += 1\n            input_list = [input_list[1], input_list[2], input_list[3], input_list[0]]\n        elif input_list[1] == ['G', 'G', 'G', 'G']:\n            moves += 1\n            input_list = [input_list[0], input_list[2], input_list[3], input_list[1]]\n        elif input_list[2] == ['B', 'B', 'B', 'B']:\n            moves += 1\n            input_list = [input_list[0], input_list[1], input_list[3], input_list[2]]\n        elif input_list[3] == ['Y', 'Y', 'Y', 'Y']:\n            moves += 1\n            input_list = [input_list[0], input_list[1], input_list[2], input_list[3]]\n        else:\n            # Check if the puzzle can be solved in 2 moves\n            if input_list[0] == ['R', 'G', 'B', 'Y']:\n                moves += 2\n                input_list = [input_list[1], input_list[2], input_list[3], input_list[0]]\n            elif input_list[1] == ['G', 'B', 'Y',",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3541,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"Not implemented yet\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3542,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of integers\n    N, M = map(int, input_string.split())\n    A1, A2, B1, B2 = map(lambda x: tuple(map(int, x.split())), input_string.split('\\n')[1:])\n    \n    # Check if the points are on the same row or column\n    if A1[0] == A2[0] or A1[1] == A2[1] or B1[0] == B2[0] or B1[1] == B2[1]:\n        return \"IMPOSSIBLE\"\n    \n    # Calculate the minimum length of wire needed\n    wire_length = min(abs(A1[0] - A2[0]) + abs(A1[1] - A2[1]), abs(B1[0] - B2[0]) + abs(B1[1] - B2[1]))\n    \n    # Check if the points are on the same diagonal\n    if (A1[0] - A2[0]) * (A1[1] - A2[1]) == (B1[0] - B2[0]) * (B1[1] - B2[1]):\n        wire_length += 1\n    \n    return wire_length\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3543,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3544,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3545,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    pre_output = input_string[0]\n    in_output = input_string[1]\n    post_output = input_string[2]\n    \n    pre_calls = []\n    in_calls = []\n    post_calls = []\n    \n    for i in range(len(pre_output)):\n        if pre_output[i] not in pre_calls:\n            pre_calls.append(pre_output[i])\n        if in_output[i] not in in_calls:\n            in_calls.append(in_output[i])\n        if post_output[i] not in post_calls:\n            post_calls.append(post_output[i])\n    \n    pre_calls.sort()\n    in_calls.sort()\n    post_calls.sort()\n    \n    for i in range(len(pre_calls)):\n        for j in range(len(in_calls)):\n            for k in range(len(post_calls)):\n                if pre_calls[i] == in_calls[j] and in_calls[j] == post_calls[k]:\n                    pre_in_post = [pre_calls[i], in_calls[j], post_calls[k]]\n                    pre_in_post.sort()\n                    print(\" \".join(pre_in_post))\n                    print(\"\".join(pre_output))\n                    print(\"\".join(in_output))\n                    print(\"\".join(post_output))\n                    print()\n                    \nsolution(\"HFBIGEDCJA\")\nsolution(\"BIGEDCJFAH\")\nsolution(\"BIGEDCJFAH\")\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3546,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split()[0])\n    proofs = []\n    for i in range(n):\n        proof_info = input_string.split()[1+i*2:1+(i+1)*2]\n        proofs.append((int(proof_info[0]), proof_info[1:]))\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3547,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3548,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, P = map(int, input_string.split())\n    bad_pairs = []\n    for _ in range(P):\n        a, b = map(int, input_string.split())\n        bad_pairs.append((a, b))\n        bad_pairs.append((b, a))\n    \n    for i in range(1, N+1):\n        for j in range(i+1, N+1):\n            if (i, j) not in bad_pairs:\n                print(i, j)\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3549,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    m1, m2, m3, x1, x2, x3, y1, y2, y3 = map(int, input_string.split())\n    z = 0\n    while True:\n        if (x1 - z) % m1 in range(y1+1) and (x2 - z) % m2 in range(y2+1) and (x3 - z) % m3 in range(y3+1):\n            return z\n        z += 1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3550,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    variables = {}\n    for line in input_string.split('\\n'):\n        if line.startswith('var'):\n            name, value = line.split('=')\n            name = name.strip()[4:]\n            value = value.strip()\n            if value.startswith('`'):\n                value = value[1:-1]\n                for i in range(len(value)):\n                    if value[i] == '$':\n                        if value[i+1] == '{':\n                            start = i+2\n                            end = value.find('}', start)\n                            var_name = value[start:end]\n                            value = value[:i] + variables[var_name] + value[end+1:]\n            variables[name] = value\n        elif line.startswith('print'):\n            expr = line.split()[1]\n            if expr.startswith('`'):\n                expr = expr[1:-1]\n                for i in range(len(expr)):\n                    if expr[i] == '$':\n                        if expr[i+1] == '{':\n                            start = i+2\n                            end = expr.find('}', start)\n                            var_name = expr[start:end]\n                            expr = expr[:i] + variables[var_name] + expr[end+1:]\n            print(expr)\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3551,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3552,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m, k = map(int, input_string.split())\n    max_damage = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for l in range(1, n+1):\n                for r in range(1, n+1):\n                    if i+j+l+r == n:\n                        damage = (i*i + j*k + l*k + r*k)\n                        if damage > max_damage:\n                            max_damage = damage\n    return max_damage\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3553,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return None\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3554,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    D, W, C = map(float, input_string.split())\n    D = int(D)\n    W = int(W)\n    C = int(C)\n    if D == 0:\n        return 0\n    if W == 0:\n        return 0\n    if C == 0:\n        return 0\n    if D > W:\n        return 0\n    if D == 1:\n        return min(W, C)\n    if D == 2:\n        return min(W, C)\n    if D == C:\n        return W\n    if D > C:\n        return 0\n    if D == 1:\n        return min(W, C)\n    if D == 2:\n        return min(W, C)\n    if D == C:\n        return W\n    if D > C:\n        return 0\n    if D == 1:\n        return min(W, C)\n    if D == 2:\n        return min(W, C)\n    if D == C:\n        return W\n    if D > C:\n        return 0\n    if D == 1:\n        return min(W, C)\n    if D == 2:\n        return min(W, C)\n    if D == C:\n        return W\n    if D > C:\n        return 0\n    if D == 1:\n        return min(W, C)\n    if D == 2:\n        return min(W, C)\n    if D == C:\n        return W\n    if D > C:\n        return 0\n    if D == 1:\n        return min(W, C)\n    if D == 2:\n        return min(W, C)\n    if D == C:\n        return W\n    if D > C:\n        return 0\n    if D == 1:\n        return min(W, C)\n    if D == 2:\n        return min(W, C)\n    if D == C:\n        return W\n    if D > C:\n        return 0\n    if D == 1:\n        return min(W, C)\n    if D ==",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3555,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    toys = []\n    trees = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        toys.append((x, y))\n    for i in range(m):\n        x, y = map(int, input().split())\n        trees.append((x, y))\n    \n    # Your code goes here\n    return 0.00\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3556,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3557,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, p, order = input_string.split('\\n')\n    n = int(n)\n    p = list(map(int, p.split()))\n    order = list(map(int, order.split()))\n    \n    chaos = 0\n    for i in order:\n        chaos += (p[i-1] + 9) // 10 * 10\n    \n    return chaos\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3558,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0.0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3559,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return output_string\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3560,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return input_string\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3561,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    W, S, C, K = map(int, input_string.split())\n    if W == 0 and S == 0 and C == 0:\n        return \"YES\"\n    elif W == 0:\n        if S <= K or C <= K:\n            return \"YES\"\n        else:\n            return \"NO\"\n    elif S == 0:\n        if C <= K or W <= K:\n            return \"YES\"\n        else:\n            return \"NO\"\n    elif C == 0:\n        if W <= K or S <= K:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        if W <= K and S <= K and C <= K:\n            return \"YES\"\n        elif W <= K and S <= K - C:\n            return \"YES\"\n        elif S <= K and C <= K - W:\n            return \"YES\"\n        elif C <= K and W <= K - S:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3562,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0.0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3563,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3564,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3565,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # read input\n    n, m = map(int, input_string.split()[:2])\n    cities = input_string.split()[2:n+2]\n    routes = []\n    for i in range(n+2, n+m+2):\n        routes.append(list(map(int, input_string.split()[i].split(' '))) + [input_string.split()[i+1]])\n    assignments = []\n    for i in range(n+m+2, n+m+6):\n        assignments.append(input_string.split()[i].split())\n    \n    # create graph\n    graph = {city: [] for city in cities}\n    for route in routes:\n        graph[route[2]].append((route[0], route[1], route[3])\n        graph[route[0]].append((route[2], route[1], route[3])\n    \n    # calculate minimum cost\n    min_cost = float('inf')\n    for i in range(len(assignments)):\n        for j in range(i+1, len(assignments)):\n            for k in range(j+1, len(assignments)):\n                for l in range(k+1, len(assignments)):\n                    for m in range(l+1, len(assignments)):\n                        cost = 0\n                        for assignment in [assignments[i], assignments[j], assignments[k], assignments[l]]:\n                            path = dijkstra(graph, assignment[0], assignment[1])\n                            if path == None:\n                                break\n                            cost += path[1]\n                        else:\n                            min_cost = min(min_cost, cost)\n    \n    return min_cost\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3566,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, q = map(int, input_string.split())\n    huts = list(map(int, input().split()))\n    for i in range(q):\n        hut, change = map(int, input().split())\n        huts[hut] = change\n        left = 0\n        right = 0\n        for i in range(n):\n            if i < hut:\n                left += huts[i]\n            else:\n                right += huts[i]\n        if left > right:\n            print(hut)\n        else:\n            print(hut+1)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3567,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k = map(int, input_string.split())\n    players = []\n    for i in range(n):\n        players.append(input())\n    tira = \"\"\n    for i in range(k):\n        if i == 0:\n            tira += \"0\"\n        else:\n            tira += \"1\"\n    return tira\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3568,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"possible\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3569,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3570,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"Not implemented yet\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3571,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    W, H, F, N = map(int, input().split())\n    lines = [input() for _ in range(N)]\n    L = len(lines)\n    D = H - 3\n    T = (F * H) % (L - H)\n    viewport = lines[F:F+H]\n    output = []\n    for i, line in enumerate(viewport):\n        output.append(''.join(['-'*(W-len(line)) + '|' + line + '|'])\n    output.insert(0, '+' + '-'*(W+2) + '+')\n    output.append('+' + '-'*(W+2) + '+')\n    output[T+1] = '|' + output[T+1][1:-1] + '^' + output[T+1][-1]\n    output[T+2] = '|' + output[T+2][1:-1] + 'v' + output[T+2][-1]\n    return '\\n'.join(output)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3572,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, L = map(int, input_string.split())\n    distances = []\n    for i in range(n):\n        distances.append(list(map(int, input().split()))\n    return \"possible\" if possible(distances, L) else \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3573,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, D, C = map(int, input_string.split())\n    Cesar = list(map(int, input().split()))\n    Raul = list(map(int, input().split()))\n    \n    return 0.00000000\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3574,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # read input\n    N, array, Q = map(int, input_string.split())\n    queries = []\n    for _ in range(Q):\n        L, R = map(int, input_string.split())\n        queries.append((L, R))\n    \n    # process queries\n    for L, R in queries:\n        subarray = array[L-1:R]\n        min_val = min(subarray)\n        max_val = max(subarray)\n        magical_subarray = [x for x in subarray if x >= min_val and x <= max_val]\n        print(len(magical_subarray))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3575,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"never meet\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3576,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    R, C, K = map(int, input_string.split())\n    total_cells = R * C\n    searchable_cells = (2*K+1)**2\n    prob_capture = searchable_cells / total_cells\n    prob_evading = 1 - prob_capture\n    p = int(prob_evading * 10**11)\n    q = 10**11\n    return p % (q+3)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3577,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of tuples\n    input_list = [tuple(map(int, line.split()) for line in input_string.split('\\n')]\n    \n    # Sort the list by the left coordinate\n    input_list.sort(key=lambda x: x[0])\n    \n    # Initialize the number of flowers to 0\n    flowers = 0\n    \n    # Iterate through the list\n    for i in range(1, len(input_list)):\n        # If the right coordinate of the current plant is greater than the left coordinate of the previous plant, a flower will grow\n        if input_list[i][0] > input_list[i-1][1]:\n            flowers += 1\n    \n    # Return the number of flowers\n    return flowers\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3578,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N, R, flights, F = map(int, input_string.split())\n    flights = [list(map(int, input().split())) for _ in range(R)]\n    additional_flights = [list(map(int, input().split())) for _ in range(F)]\n    \n    # create graph\n    graph = {i: [] for i in range(1, N+1)}\n    for a, b, c in flights:\n        graph[a].append((b, c))\n        graph[b].append((a, c))\n    for a, b, c in additional_flights:\n        graph[a].append((b, c)\n        graph[b].append((a, c)\n    \n    # Dijkstra's algorithm\n    dist = {i: float('inf') for i in range(1, N+1)}\n    dist[1] = 0\n    pq = [(0, 1)]\n    while pq:\n        d, u = heapq.heappop(pq)\n        if d > dist[u]:\n            continue\n        for v, w in graph[u]:\n            if dist[u] + w < dist[v]:\n                dist[v] = dist[u] + w\n                heapq.heappush(pq, (dist[v], v))\n    \n    # find the minimum cost\n    min_cost = float('inf')\n    for i in range(2, N+1):\n        min_cost = min(min_cost, dist[i])\n    \n    return min_cost\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3579,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    h, w = map(int, input_string.split()[:2])\n    a, b = map(int, input_string.split()[2:4])\n    s = [list(map(int, input_string.split()[4:].split()))]\n    s = np.array(s).reshape(h, w)\n    area = h * w\n    min_area = a\n    max_area = b\n    min_density = 0\n    max_density = 0\n    for i in range(1, h+1):\n        for j in range(1, w+1):\n            for k in range(1, h+1):\n                for l in range(1, w+1):\n                    area = i * k\n                    if area >= a and area <= b:\n                        density = np.mean(s[:i, :j].flatten())\n                        if density > max_density:\n                            max_density = density\n                        if density < min_density:\n                            min_density = density\n    return np.median([min_density, max_density])\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3580,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split('\\n')[0])\n    a = list(map(int, input_string.split('\\n')[1].split()))\n    q = int(input_string.split('\\n')[2])\n    queries = []\n    for i in range(q):\n        query = input_string.split('\\n')[3+i].split()\n        queries.append((int(query[0]), int(query[1]), list(map(int, query[2:]))))\n    \n    for query in queries:\n        i, m, B = query\n        longest_subsequence = 0\n        current_subsequence = 0\n        for j in range(i, n):\n            if a[j] in B:\n                current_subsequence += 1\n                longest_subsequence = max(longest_subsequence, current_subsequence)\n            else:\n                current_subsequence = 0\n        print(longest_subsequence)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3581,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0.0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3582,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return output_string\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3583,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split('\\n')[0])\n    points = []\n    for i in range(1, n+1):\n        x, y = map(int, input_string.split('\\n')[i].split())\n        points.append((x, y))\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3584,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3585,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    m, k = map(int, input_string.split())\n    return (k-1) % 998244353\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3586,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of integers\n    S = list(map(int, input_string.split()))\n    \n    # Sort the list in ascending order\n    S.sort()\n    \n    # Initialize variables\n    max_d = -1\n    n = len(S)\n    \n    # Loop through all possible combinations of a, b, and c\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                # Calculate d\n                d = S[i] + S[j] + S[k]\n                \n                # Check if d is greater than max_d\n                if d > max_d:\n                    max_d = d\n                    \n    # If max_d is still -1, no solution exists\n    if max_d == -1:\n        return \"no solution\"\n    else:\n        return max_d\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3587,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"11\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3588,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # read input\n    C = int(input_string.split('\\n')[0])\n    input_string = input_string.split('\\n')[1:]\n    input_list = []\n    for i in range(C):\n        K = int(input_string[i*2])\n        for j in range(K):\n            input_list.append(list(map(int, input_string[i*2+1+j].split()))[::-1])\n    \n    # sort input_list by date\n    input_list.sort(key=lambda x: x[1])\n    \n    # initialize output_list\n    output_list = []\n    for i in range(3666):\n        output_list.append(0)\n    \n    # calculate output_list\n    for i in range(len(input_list)):\n        output_list[input_list[i][1]] += input_list[i][0]\n    \n    # print output_list\n    for i in range(len(output_list)):\n        if output_list[i] != 0:\n            print(output_list[i], end=' ')\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3589,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    L, R = map(int, input_string.split())\n    count = [0] * 9\n    \n    for i in range(L, R+1):\n        num = i\n        product = 1\n        while num > 0:\n            digit = num % 10\n            if digit != 0:\n                product *= digit\n            num //= 10\n        count[product % 10] += 1\n        \n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3590,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of tuples\n    A = []\n    B = []\n    a = int(input_string.split('\\n')[0])\n    for i in range(1, a+1):\n        x, y = map(int, input_string.split('\\n')[i].split())\n        A.append((x, y))\n    b = int(input_string.split('\\n')[a+1])\n    for i in range(a+2, a+b+2):\n        x, y = map(int, input_string.split('\\n')[i].split())\n        B.append((x, y))\n    \n    # Find the minimum cost to cut B out of A\n    min_cost = float('inf')\n    for i in range(len(A)):\n        # Find the line that cuts A into two pieces\n        line = Line(A[i-1], A[i])\n        # Check if B is contained in the piece that is not cut\n        if line.is_point_inside(B[0]) and line.is_point_inside(B[-1]):\n            # Calculate the cost of cutting along this line\n            cost = line.length()\n            # Check if the piece that is not cut contains B\n            if line.is_point_inside(B[1]):\n                min_cost = min(min_cost, cost)\n    return min_cost\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3591,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    k = int(input_string.split('\\n')[0])\n    photos = input_string.split('\\n')[1:]\n    result = []\n    \n    for i in range(k):\n        n = int(photos[i*2])\n        heights = list(map(int, photos[i*2+1].split()))\n        if heights[0] > heights[-1] and heights[1] > heights[0]:\n            result.append(i+1)\n    \n    print(len(result))\n    for i in result:\n        print(i)\n        \n# Test your code with this example\ninput_string = \"\"\"\n2\n3 1 3\n2 2 1 3\n4 1 2 3 4\n\"\"\"\nsolution(input_string)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3592,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    profit, pita_profit, pizza_profit = map(float, input_string.split())\n    pita_profit = int(pita_profit * 100)\n    pizza_profit = int(pizza_profit * 100)\n    profit = int(profit * 100)\n    \n    pita_count = 0\n    pizza_count = 0\n    while pita_count * pita_profit + pizza_count * pizza_profit <= profit:\n        pizza_count += 1\n        if pita_count * pita_profit + pizza_count * pizza_profit == profit:\n            print(pita_count, pizza_count)\n            return\n        pita_count += 1\n    print(\"none\")\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3593,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"Write your code here\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3594,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"Not implemented\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3595,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3596,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    a, b, c = map(float, input_string.split())\n    t1, t2, t3, t4 = map(int, input_string.split())\n    n, k, r, s, l = map(int, input_string.split())\n    \n    # Calculate f(x)\n    def f(x):\n        return c*integrate.quad(lambda x: t1*gamma(x) + sqrt(log(erf(t3*x)) - jv(k, x)**t4, 0, x)[0]\n    \n    # Calculate P(x)\n    def P(x, r):\n        return f(x)\n    \n    # Calculate P_n(x)\n    def P_n(x, n):\n        if n == 0:\n            return P(x)\n        else:\n            return P(x) + x*P_n(x, n-1)\n    \n    # Calculate g(x)\n    def g(x, n):\n        return diff(P_n(x, n), x, n)\n    \n    # Calculate the location of the opponent\n    def location(n, k, r, s, l):\n        return (g(n, k) + l)**2/pi/exp(1) + 1/(l+1)\n    \n    return round(location(n, k, r, s), 6)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3597,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    w, l, r, x1, y1, x2, y2, x3, y3, h = map(float, input_string.split())\n    x1 -= r\n    y1 -= r\n    x2 -= r\n    y2 -= r\n    x3 -= r\n    y3 -= r\n    \n    if x1 < 0 or x1 > w or x2 < 0 or x2 > w or x3 < 0 or x3 > w or y1 < 0 or y1 > l or y2 < 0 or y2 > l or y3 < 0 or y3 > l:\n        return \"impossible\"\n    \n    if x1 == x2 or x1 == x3 or x2 == x3 or y1 == y2 or y1 == y3 or y2 == y3:\n        return \"impossible\"\n    \n    if x1 == x2 and y1 == y2:\n        return \"impossible\"\n    \n    if x1 == x3 and y1 == y3:\n        return \"impossible\"\n    \n    if x2 == x3 and y2 == y3:\n        return \"impossible\"\n    \n    if x1 == x2 and y1 == y2 and y1 == y3:\n        return \"impossible\"\n    \n    if x1 == x3 and y1 == y2 and y1 == y3:\n        return \"impossible\"\n    \n    if x2 == x3 and y2 == y3:\n        return \"impossible\"\n    \n    if x1 == x2 and x1 == x3:\n        return \"impossible\"\n    \n    if y1 == y2 and y1 == y3:\n        return \"impossible\"\n    \n    if y2 == y3 and y2 == y1:\n        return \"impossible\"\n    \n    if y1 == y2 and y1 == y3:\n        return \"impossible\"\n    \n    if y2 == y3 and y2 == y1:\n        return \"impossible\"\n    \n    if x1 == x2 and y1 == y2 and x3 == x2:\n        return \"impossible\"\n    \n    if x1 ==",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3598,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return input_string\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3599,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    T, N = map(int, input_string.split())\n    breaks = list(map(int, input_string.split()))\n    breaks.sort(reverse=True)\n    result = []\n    total_time = 0\n    for i in range(N):\n        if total_time + breaks[i] <= T:\n            result.append(total_time)\n            total_time += breaks[i]\n        else:\n            result.append(T)\n            break\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3600,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    k, n = map(int, input_string.split())\n    intersections = []\n    for i in range(n):\n        intersections.append(list(map(int, input().split()))[1:])\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3601,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Extract the two paths from the input string\n    misha_path, nadia_path = input_string.split('\\n\\n')\n    misha_path = misha_path.split('\\n')\n    nadia_path = nadia_path.split('\\n')\n    \n    # Convert the path coordinates to a list of tuples\n    misha_path = [(int(x), int(y)) for x, y in [line.split() for line in misha_path[1:]]]\n    nadia_path = [(int(x), int(y)) for x, y in [line.split() for line in nadia_path[1:]]]\n    \n    # Calculate the distance between the two paths\n    misha_dist = sum([((misha_path[i][0] - misha_path[i-1][0])**2 + (misha_path[i][1] - misha_path[i-1][1])**2)**0.5 for i in range(1, len(misha_path))] + [(nadia_path[0][0] - misha_path[-1][0])**2 + (nadia_path[0][1] - misha_path[-1][1])**2]**0.5)\n    nadia_dist = sum([(nadia_path[i][0] - nadia_path[i-1][0])**2 + (nadia_path[i][1] - nadia_path[i-1][1])**2 for i in range(1, len(nadia_path))] + [(misha_path[0][0] - nadia_path[-1][0])**2 + (misha_path[0][1] - nadia_path[-1][1])**2]**0.5)\n    \n    # Calculate the delivery time\n    delivery_time = max(misha_dist, nadia_dist)\n    \n    # Check if the package can be delivered\n    if delivery_time > 10**6:\n        return \"impossible\"\n    else:\n        return delivery_time\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3602,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, r, k = map(int, input_string.split())\n    lamps = []\n    for i in range(k):\n        row, col = map(int, input().split())\n        lamps.append((row, col))\n    \n    # Your code goes here\n    return 1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3603,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input string to list of lists\n    input_list = input_string.split('\\n')\n    N, M = map(int, input_list.pop(0).split())\n    translators = []\n    for i in range(M):\n        translators.append(list(map(int, input_list[i].split()))\n    \n    # Create a dictionary to store the languages spoken by each translator\n    languages_spoken = {}\n    for i in range(M):\n        languages_spoken[i] = []\n        for j in range(2):\n            languages_spoken[i].append(translators[i][j])\n    \n    # Create a list of translators who speak each language\n    language_translators = [[] for i in range(N)]\n    for i in range(M):\n        for j in range(2):\n            language_translators[translators[i][j]].append(i)\n    \n    # Create a list of translators who have not been matched yet\n    unmatched_translators = list(range(M))\n    \n    # Create a list to store the matching pairs\n    matching = []\n    \n    # Iterate through each language\n    for i in range(N):\n        # If there are translators who speak the language\n        if len(language_translators[i]) > 0:\n            # If there are an even number of translators who speak the language\n            if len(language_translators[i]) % 2 == 0:\n                # Match each translator with another translator who speaks the same language\n                for j in range(0, len(language_translators[i]), 2):\n                    matching.append([language_translators[i][j], language_translators[i][j+1]])\n                    unmatched_translators.remove(language_translators[i][j])\n                    unmatched_translators.remove(language_translators[i][j+1])\n            # If there is an odd number of translators who speak the language\n            else:\n                # Match each translator with the next translator who speaks the same language\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3604,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, d = map(int, input_string.split())\n    sensors = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        sensors.append((x, y))\n    \n    max_subset = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if distance(sensors[i], sensors[j]) <= d:\n                max_subset.append(i+1)\n                max_subset.append(j+1)\n    \n    print(len(max_subset))\n    print(\" \".join(map(str, max_subset))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3605,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k = map(int, input_string.split())\n    heights = list(map(int, input_string.split()))\n    heights.sort()\n    min_diff = float('inf')\n    for i in range(n-k+1):\n        diff = heights[i+k-1] - heights[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3606,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert the input string into a list of directions\n    directions = list(input_string)\n    \n    # Initialize the starting position of Barica\n    x, y = 0, 0\n    \n    # Loop through each direction\n    for direction in directions:\n        if direction == 'A':\n            x += 1\n        elif direction == 'B':\n            y += 1\n        elif direction == 'C':\n            x -= 1\n        else:\n            y -= 1\n            \n    # Return the final position of Barica\n    return x, y\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3607,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3608,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, difficulties, consecutive_difficulties = map(int, input_string.split())\n    difficulties = list(map(int, difficulties.split()))\n    consecutive_difficulties = list(map(int, consecutive_difficulties.split()))\n    \n    total_difficulties = sum(difficulties) + sum(consecutive_difficulties)\n    total_ways = 1\n    for i in range(N):\n        total_ways *= (total_difficulties + 1)\n        total_difficulties -= difficulties[i] + consecutive_difficulties[i]\n    \n    return total_ways % 100000007\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3609,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3610,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Hint: You can use the split() function to split the input string into a list of strings, and then convert each string to an integer using the int() function.\n    # You can use a set to keep track of the employees that need to be invited.\n    # You can use a dictionary to keep track of the number of times each employee appears in a team.\n    # You can use a loop to iterate over the input_string and update the dictionary accordingly.\n    # Finally, you can use the dictionary to count the number of unique employees and return the result.\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3611,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"TODO\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3612,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    a, m = map(float, input_string.split())\n    W, H, X, Y = map(int, input_string.split())\n    height_map = []\n    for i in range(H):\n        height_map.append(list(map(int, input_string.split()))\n    tide_level = lambda t: 0.5*a*(math.cos(t*2*math.pi/12)+1)\n    max_distance = 0\n    for t in range(12):\n        for x in range(W):\n            for y in range(H):\n                for x2 in range(W):\n                    for y2 in range(H):\n                        if abs(height_map[y][x]-height_map[y2][x2])<=1:\n                            distance = math.sqrt((x-X)**2+(y-Y)**2)\n                            time = distance/m\n                            if tide_level(time)<height_map[y][x] and tide_level(time+1)<height_map[y2][x2]:\n                                max_distance = max(max_distance, distance)\n    return max_distance\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3613,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Hint: You can use the following function to read input from the console\n    # and split it into lines\n    lines = input_string.split('\\n')\n    N = int(lines[0])\n    kids = []\n    for i in range(1, N+1):\n        kid = lines[i].split()\n        kids.append(kid)\n    \n    # Your code goes here\n    # You can use the following function to print the output\n    # print(output)\n    return output\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3614,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3615,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3616,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    k = int(input_string.split('\\n')[0])\n    allergens = [int(x) for x in input_string.split('\\n')[1:]]\n    max_duration = max(allergens)\n    return max_duration\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3617,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, T = map(int, input_string.split())\n    A, B, C, t0 = map(int, input_string.split())\n    t = [t0]\n    for i in range(1, N):\n        t.append(((A*t[-1] + B) % C) + 1)\n    t.sort()\n    max_problems = 0\n    penalty = 0\n    for i in range(N):\n        if t[i] <= T:\n            max_problems += 1\n            penalty += t[i]\n        else:\n            break\n    return max_problems, penalty % 100000007\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3618,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string)\n    count = 0\n    for i in range(1, 10**n):\n        for j in range(i+1, 10**n):\n            if is_best_friend(i, j, n):\n                count += 1\n    return count % 998244353\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3619,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    k, n = map(int, input_string.split())\n    employees = []\n    for i in range(n):\n        s, p, r = map(int, input().split())\n        employees.append((s, p, r))\n        \n    # Your code here\n    return 0.0000\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3620,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3621,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3622,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read input\n    w, h = map(int, input_string.split())\n    u, d, l, r = map(int, input_string.split())\n    grid = []\n    for i in range(h):\n        grid.append(list(input_string.split())\n    \n    # Calculate probabilities\n    prob_up = u / 100.0\n    prob_down = d / 100.0\n    prob_left = l / 100.0\n    prob_right = r / 100.0\n    \n    # Initialize variables\n    total_prob = 0\n    target_count = 0\n    target_prob = 0\n    \n    # Loop through each row and column\n    for i in range(h):\n        for j in range(w):\n            if grid[i][j] == 'T':\n                target_count += 1\n                target_prob += prob_up * prob_left * prob_right\n                total_prob += prob_up * prob_left * prob_right\n    \n    # Calculate probabilities\n    for i in range(h):\n        for j in range(w):\n            if grid[i][j] == 'T':\n                print(target_prob / total_prob)\n                target_prob = 0\n            else:\n                target_prob += prob_up * prob_left * prob_right\n                total_prob += prob_up * prob_left * prob_right\n                \n# Test the function with the sample input\ninput_string = \"3 2\\n20 20 20 40\\nX.X\\nT.T\"\nsolution(input_string)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3623,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    a, b, c, d = map(float, input_string.split())\n    area = 1\n    watered_area = 0\n    \n    if a == 0:\n        watered_area += 1\n    elif a < 90:\n        watered_area += a/90\n    else:\n        watered_area += 1\n        \n    if b == 0:\n        watered_area += 1\n    elif b < 90:\n        watered_area += b/90\n    else:\n        watered_area += 1\n        \n    if c == 0:\n        watered_area += 1\n    elif c < 90:\n        watered_area += c/90\n    else:\n        watered_area += 1\n        \n    if d == 0:\n        watered_area += 1\n    elif d < 90:\n        watered_area += d/90\n    else:\n        watered_area += 1\n        \n    return watered_area/4\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3624,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    trails = []\n    for i in range(m):\n        u, v, d = map(int, input().split())\n        trails.append((u, v, d))\n        \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3625,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3626,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split('\\n')[0])\n    rectangles = []\n    for i in range(1, n+1):\n        x1, y1, x2, y2 = map(int, input_string.split('\\n')[i].split())\n        rectangles.append((x1, y1, x2, y2))\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if rectangles[i][0] <= rectangles[j][2] and rectangles[i][2] >= rectangles[j][0] and rectangles[i][1] <= rectangles[j][3] and rectangles[i][3] >= rectangles[j][1]:\n                return 1\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3627,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of lists\n    input_list = input_string.split('\\n')\n    R, C = map(int, input_list[0].split())\n    energy_grid = [list(map(int, row.split()) for row in input_list[1:-2]]\n    start_points = input_list[-1].split()\n    \n    # Initialize variables\n    min_energy = float('inf')\n    visited = set()\n    \n    # Loop through all possible starting points\n    for start_point in start_points:\n        queue = [(0, start_point)]\n        while queue:\n            energy, position = queue.pop(0)\n            \n            # Check if we have reached the top of the cliff\n            if position == 'E':\n                min_energy = min(min_energy, energy)\n                continue\n            \n            # Check if we have already visited this position\n            if (energy, position) in visited:\n                continue\n            visited.add((energy, position))\n            \n            # Add adjacent positions to the queue\n            r, c = position\n            for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                new_r, new_c = r + dr, c + dc\n                if 0 <= new_r < R and 0 <= new_c < C:\n                    queue.append((energy + energy_grid[new_r][new_c], f'{new_r}{new_c}'))\n    \n    return min_energy\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3628,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, pi, sigma, a = input_string.split()\n    n = int(n)\n    pi = list(map(int, pi.split()))\n    sigma = list(map(int, sigma.split()))\n    a = list(map(int, a.split()))\n    \n    for i in range(n):\n        if pi[i] + sigma[i] != a[i]:\n            return \"impossible\"\n    \n    return \" \".join(map(str, pi)) + \"\\n\" + \" \".join(map(str, sigma))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3629,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0.0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3630,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    s1, s2 = input_string.split()\n    n = len(s1)\n    moves = 0\n    for i in range(n):\n        if s1[i] == s2[i]:\n            continue\n        elif s1[i] == 'z' or s2[i] == 'a':\n            return -1\n        elif s1[i] < s2[i]:\n            moves += ord(s2[i]) - ord(s1[i])\n        else:\n            moves += 26 - (ord(s1[i]) - ord(s2[i]))\n    return moves\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3631,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3632,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k = map(int, input_string.split())\n    initial_strings = []\n    for i in range(n):\n        initial_strings.append(input())\n    test_string = input()\n    \n    # Sort the initial strings\n    initial_strings.sort()\n    \n    # Generate all possible composite strings\n    composite_strings = []\n    for i in range(n):\n        for j in range(i+1, n):\n            for l in range(j+1, n):\n                composite_strings.append(initial_strings[i] + initial_strings[j] + initial_strings[l])\n    \n    # Sort the composite strings\n    composite_strings.sort()\n    \n    # Find the position of the test string in the sorted list\n    position = composite_strings.index(test_string) + 1\n    \n    return position % (10**9 + 7)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3633,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m, k = map(int, input_string.split())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    if sum(a) < k:\n        return \"impossible\"\n    else:\n        return \" \".join(str(i) for i in range(1, n+1))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3634,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"shovel time!\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3635,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3636,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m, p = map(int, input_string.split())\n    count = 0\n    for i in range(n-1):\n        for j in range(m-1):\n            count += 1\n    return count % p\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3637,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"Not implemented yet\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3638,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, s = map(int, input().split())\n    predictions = []\n    for i in range(s):\n        predictions.append(input())\n    for i in range(s):\n        print(predictions[i])\n    return predictions\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3639,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0.0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3640,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3641,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    k, n = map(int, input_string.split())\n    weights = list(map(int, input_string.split()[2:])\n    total_weight = sum(weights)\n    if total_weight % k != 0:\n        return \"NO\"\n    else:\n        return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3642,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"TODO\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3643,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0.0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3644,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split('\\n')[0])\n    input_list = input_string.split('\\n')[1:]\n    fired = []\n    hired = []\n    for i in input_list:\n        fired.append(int(i.split()[0]))\n        hired.append(int(i.split()[1])\n    \n    # Your code here\n    return k, hired_ids\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3645,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split()[0])\n    numbers = list(map(int, input_string.split()[1:])\n    numbers = numbers[:n]\n    numbers.sort()\n    numbers = list(set(numbers))\n    if len(numbers) == n:\n        return \"none\"\n    else:\n        return \" \".join(str(x) for x in numbers)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3646,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3647,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"Solution\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3648,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m, p = map(int, input_string.split())\n    insecure_buildings = set(map(int, input_string.split()))\n    graph = [[] for _ in range(n+1)]\n    for _ in range(m):\n        x, y, l = map(int, input_string.split())\n        graph[x].append((y, l))\n        graph[y].append((x, l))\n    \n    def dfs(node, visited, parent, cost):\n        visited.add(node)\n        min_cost = float('inf')\n        for neighbor, neighbor_cost in graph[node]:\n            if neighbor not in visited:\n                min_cost = min(min_cost, dfs(neighbor, visited, node, cost+neighbor_cost))\n        return min_cost\n    \n    min_cost = float('inf')\n    for i in range(1, n+1):\n        if i not in insecure_buildings:\n            visited = set()\n            min_cost = min(min_cost, dfs(i, visited, None, 0))\n    \n    return min_cost\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3649,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    a, b, c, d = map(int, input_string.split())\n    if a+b+c+d > 10**9:\n        return \"impossible\"\n    else:\n        return \"01001\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3650,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3651,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0.0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3652,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of lists\n    table = [list(map(int, input_string.split()))]\n    for i in range(2):\n        table.append(list(map(int, input_string.split()))[i+1])\n    \n    # Sort each row\n    for i in range(3):\n        table[i].sort()\n    \n    # Check if all rows are identical\n    if table[0] == table[1] == table[2]:\n        return 0\n    \n    # Find the number of columns to delete\n    count = 0\n    for i in range(len(table[0])):\n        if table[0][i] != table[1][i] or table[0][i] != table[2][i]:\n            count += 1\n    \n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3653,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    L, x1, y1, x2, y2 = map(int, input_string.split())\n    if x1 == x2 and y1 == y2:\n        return 0\n    elif x1 == x2:\n        return abs(y2 - y1)\n    elif y1 == y2:\n        return abs(x2 - x1)\n    else:\n        m = (y2 - y1) / (x2 - x1)\n        b = y1 - m * x1\n        return abs(L / (2 * sqrt(1 + m**2)) / sqrt(1 + 1/m**2))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3654,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    k, n = map(int, input_string.split())\n    if k == 1:\n        return n\n    elif k == 2:\n        return n\n    elif k == 3:\n        return n\n    elif k == 4:\n        return n\n    elif k == 5:\n        return n\n    elif k == 6:\n        return n\n    elif k == 7:\n        return n\n    elif k == 8:\n        return n\n    elif k == 9:\n        return n\n    elif k == 10:\n        return n\n    else:\n        return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3655,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Split the input string into two images\n    images = input_string.split(\"\\n\\n\")\n    robot_image = images[0].split(\"\\n\")\n    floor_image = images[1].split(\"\\n\")\n    \n    # Get the dimensions of the images\n    robot_width, robot_height = map(int, robot_image[0].split())\n    floor_width, floor_height = map(int, floor_image[0].split())\n    \n    # Convert the images to lists of lists\n    robot_image = [list(map(int, row.split()) for row in robot_image[1:])]\n    floor_image = [list(map(int, row.split()) for row in floor_image[1:])]\n    \n    # Initialize the best_match to be the first pixel of the floor image\n    best_match = (0, 0)\n    max_match = 0\n    \n    # Loop through all possible positions on the floor\n    for x in range(floor_width - robot_width + 1):\n        for y in range(floor_height - robot_height + 1):\n            # Calculate the number of matching pixels\n            match = sum(robot_image[i][j] == floor_image[y+i][x+j] for i in range(robot_height) for j in range(robot_width))\n            # Update the best_match if this position has more matches\n            if match > max_match:\n                max_match = match\n                best_match = (x, y)\n                \n    # Return the best match\n    return \" \".join(map(str, best_match))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3656,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    B, T, f = map(float, input_string.split())\n    bugs = []\n    for i in range(int(B)):\n        p, s = map(float, input().split())\n        bugs.append((p, s))\n    \n    # Your code here\n    return 0.0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3657,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    W, vh, N = map(int, input_string.split())\n    gates = []\n    for i in range(N):\n        x, y = map(int, input_string.split())\n        gates.append((x, y))\n    S = int(input_string)\n    speeds = []\n    for i in range(S):\n        speeds.append(int(input_string))\n    \n    # Your code here\n    return \"IMPOSSIBLE\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3658,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Split the input string into lines\n    lines = input_string.split('\\n')\n    \n    # Get the number of pine trees and aspens\n    P, A = map(int, lines[0].split())\n    \n    # Get the locations of the trees\n    pine_trees = []\n    aspen_trees = []\n    for i in range(1, P+1):\n        x, y = map(float, lines[i].split())\n        pine_trees.append((x, y))\n    for i in range(P+1, P+A+1):\n        x, y = map(float, lines[i].split())\n        aspen_trees.append((x, y))\n    \n    # Calculate the area covered by both species\n    area = 0\n    for i in range(P):\n        for j in range(A):\n            for k in range(i+1, P):\n                for l in range(j+1, A):\n                    # Calculate the area of the triangle formed by the three trees\n                    area += triangle_area(pine_trees[i], pine_trees[k], aspen_trees[l])\n                    area += triangle_area(pine_trees[i], aspen_trees[l], pine_trees[k])\n                    area += triangle_area(aspen_trees[j], pine_trees[k], aspen_trees[l])\n                    area += triangle_area(aspen_trees[j], pine_trees[k], aspen_trees[l])\n                    \n    return area\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3659,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of tuples\n    books = []\n    for line in input_string.split('\\n')[1:]:\n        h, t = line.split()\n        books.append((int(h), int(t)))\n    \n    # Sort books by height\n    books.sort(key=lambda x: x[0], reverse=True)\n    \n    # Initialize variables\n    max_height = 0\n    max_width = 0\n    max_area = 0\n    \n    # Iterate through all possible partitions\n    for i in range(1, len(books) + 1):\n        for j in range(1, len(books) - i + 1):\n            for k in range(1, len(books) - i - j + 1):\n                height = sum([books[x][0] for x in range(i)])\n                width = sum([books[x][1] for x in range(i, i+j)])\n                area = height * width\n                if area > max_area:\n                    max_height = height\n                    max_width = width\n                    max_area = area\n                    \n    return max_area\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3660,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"IMPOSSIBLE\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3661,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    R, S, L = map(int, input_string.split())\n    individuals = [0]*(R+1)\n    corporations = [0]*(S+1)\n    for i in range(L):\n        A, B = map(int, input().split())\n        individuals[A] += 1\n        corporations[B] += 1\n        \n    for i in range(1, R+1):\n        if individuals[i] > S:\n            for j in range(1, S+1):\n                if corporations[j] < R:\n                    print(\"CORP\", j)\n                    individuals[i] -= 1\n                    corporations[j] += 1\n                    break\n        else:\n            print(\"INDV\", i)\n            \n    for j in range(1, S+1):\n        if corporations[j] > R:\n            for i in range(1, R+1):\n                if individuals[i] < S:\n                    print(\"INDV\", i)\n                    individuals[i] += 1\n                    corporations[j] -= 1\n                    break\n                    \ninput_string = input()\nsolution(input_string)\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3662,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3663,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3664,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    r, c, i, j, n = map(int, input_string.split())\n    ice = [['.' for _ in range(c)] for _ in range(r)]\n    ice[i-1][j-1] = '@'\n    color = 'A'\n    direction = 'U'\n    step_size = 1\n    for _ in range(n):\n        for _ in range(step_size):\n            if direction == 'U':\n                if i > 1:\n                    ice[i-1][j-1] = color\n                    i -= 1\n                else:\n                    i = r\n            elif direction == 'D':\n                if i < r:\n                    ice[i-1][j-1] = color\n                    i += 1\n                else:\n                    i = 1\n            elif direction == 'L':\n                if j > 1:\n                    ice[i-1][j-1] = color\n                    j -= 1\n                else:\n                    j = c\n            elif direction == 'R':\n                if j < c:\n                    ice[i-1][j-1] = color\n                    j += 1\n                else:\n                    j = 1\n            color = chr((ord(color) + 1) % 26)\n        direction = chr((ord(direction) + 1) % 4)\n        step_size += 1\n    return '\\n'.join([''.join(row) for row in ice]\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3665,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return output_string\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3666,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3667,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"possible\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3668,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    burger_count = []\n    for i in range(m):\n        burger_count.append(int(input()))\n    max_count = 0\n    for i in range(m):\n        max_count += burger_count[i]\n    return max_count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3669,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"Mirko\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3670,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # read input\n    N = int(input_string.split('\\n')[0])\n    numbers = [int(x) for x in input_string.split('\\n')[1:N+1] if x.isdigit()]\n    \n    # find all possible M\n    Ms = set()\n    for i in range(2, max(numbers)+1):\n        if all(x % i == numbers[0] % i for x in numbers):\n            Ms.add(i)\n    \n    # output result\n    return ' '.join(map(str, sorted(Ms))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3671,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3672,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    m, n = map(int, input_string.split())\n    islands = []\n    for i in range(m):\n        island = list(map(int, input().split()))\n        islands.append(island)\n    \n    for i in range(m):\n        for j in range(i+1, m):\n            if set(islands[i]) & set(islands[j]):\n                return \"NO\"\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3673,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"Impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3674,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    m, n, p, q = map(int, input_string.split())\n    if n == 0:\n        return \"IMPOSSIBLE\"\n    if n == 1:\n        return \"IMPOSSIBLE\"\n    if n == m:\n        return \"IMPOSSIBLE\"\n    if q == 0:\n        return \"IMPOSSIBLE\"\n    if q == 1:\n        return \"IMPOSSIBLE\"\n    if q == 2:\n        return \"IMPOSSIBLE\"\n    if q == 3:\n        return \"IMPOSSIBLE\"\n    if q == 4:\n        return \"IMPOSSIBLE\"\n    if q == 5:\n        return \"IMPOSSIBLE\"\n    if q == 6:\n        return \"IMPOSSIBLE\"\n    if q == 7:\n        return \"IMPOSSIBLE\"\n    if q == 8:\n        return \"IMPOSSIBLE\"\n    if q == 9:\n        return \"IMPOSSIBLE\"\n    if q == 10:\n        return \"IMPOSSIBLE\"\n    if q == 11:\n        return \"IMPOSSIBLE\"\n    if q == 12:\n        return \"IMPOSSIBLE\"\n    if q == 13:\n        return \"IMPOSSIBLE\"\n    if q == 14:\n        return \"IMPOSSIBLE\"\n    if q == 15:\n        return \"IMPOSSIBLE\"\n    if q == 16:\n        return \"IMPOSSIBLE\"\n    if q == 17:\n        return \"IMPOSSIBLE\"\n    if q == 18:\n        return \"IMPOSSIBLE\"\n    if q == 19:\n        return \"IMPOSSIBLE\"\n    if q == 20:\n        return \"IMPOSSIBLE\"\n    if q == 21:\n        return \"IMPOSSIBLE\"\n    if q == 22",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3675,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3676,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    R, C = map(int, input().split())\n    if R == 1 or C == 1:\n        return 1\n    elif R == 2 and C == 2:\n        return 1\n    elif R == 2 and C == 3:\n        return 2\n    elif R == 3 and C == 3:\n        return 13\n    elif R == 3 and C == 4:\n        return 25\n    elif R == 4 and C == 4:\n        return 56\n    else:\n        return \"Not implemented yet\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3677,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, K = map(int, input_string.split())\n    politicians = []\n    for i in range(N):\n        politicians.append(set(map(int, input().split()[1:])) - set([i]))\n    \n    max_size = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if len(politicians[i] & politicians[j]) < K:\n                max_size = max(max_size, len(politicians[i] | politicians[j]) + 1)\n    \n    return max_size\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3678,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3679,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string)\n    if n == 2:\n        return 3.0\n    elif n == 3:\n        return 4.0\n    elif n == 4:\n        return 5.0\n    else:\n        return 2*n - 1.0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3680,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    K, N = map(int, input_string.split())\n    poles = list(map(int, input().split())\n    min_cuts = float('inf')\n    for i in range(1, N+1):\n        cuts = 0\n        for pole in poles:\n            cuts += pole // i\n        min_cuts = min(min_cuts, cuts)\n    return min_cuts\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3681,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, M, Q = map(int, input_string.split())\n    classes = [i for i in range(1, N+1)]\n    teachers = [i for i in range(1, N+1)]\n    for i in range(1, N+1):\n        print(i)\n    for i in range(1, N+1):\n        print(i)\n    for i in range(1, N+1):\n        print(i)\n    for i in range(1, N+1):\n        print(i)\n    for i in range(1, N+1):\n        print(i)\n    for i in range(1, N+1):\n        print(i)\n    for i in range(1, N+1):\n        print(i)\n    for i in range(1, N+1):\n        print(i)\n    for i in range(1, N+1):\n        print(i)\n    for i in range(1, N+1):\n        print(i)\n    for i in range(1, N+1):\n        print(i)\n    for i in range(1, N+1):\n        print(i)\n    for i in range(1, N+1):\n        print(i)\n    for i in range(1, N+1):\n        print(i)\n    for i in range(1, N+1):\n        print(i)\n    for i in range(1, N+1):\n        print(i)\n    for i in range(1, N+1):\n        print(i)\n    for i in range(1, N+1):\n        print(i)\n    for i in range(1, N+1):\n        print(i)\n    for i in range(1, N+1):\n        print(i)\n    for i in range(1, N+1):\n        print(i)\n    for i in range(1, N+1):\n        print(i)\n    for i in range(1, N+1):\n        print(i)\n    for i in range(1, N+1):\n        print(i)\n    for i in range",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3682,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3683,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    p, h = map(int, input_string.split())\n    scores = []\n    for i in range(p):\n        scores.append(list(map(int, input().split()))\n    l = 10**9\n    ranks = []\n    for i in range(p):\n        total_score = 0\n        for j in range(h):\n            total_score += scores[i][j]\n            if scores[i][j] < l:\n                l = scores[i][j]\n        ranks.append(total_score)\n    ranks.sort()\n    ranks = [ranks.count(rank) for rank in ranks]\n    return ranks\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3684,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, C = map(int, input_string.split())\n    users = []\n    for i in range(n):\n        p, b, u = map(int, input().split())\n        users.append((p, b, u))\n    \n    users.sort(key=lambda x: x[0])\n    max_buffer = 0\n    for i in range(n):\n        p, b, u = users[i]\n        max_buffer = max(max_buffer, b - (p + C))\n        \n    return max_buffer\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3685,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"IMPOSSIBLE\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3686,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"success\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3687,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"possible\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3688,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3689,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    x = input_string\n    x = int(x)\n    y = x\n    while True:\n        if x % 10 == x // 10**k % 10:\n            break\n        else:\n            x += 1\n    m = len(str(x))\n    y = x\n    print(m)\n    print(y)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3690,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    h,m,s,a,b=list(map(int,input().split()))\n    if a==b:\n        return \"YES\"\n    elif a>b:\n        a,b=b,a\n    if a==b:\n        return \"YES\"\n    elif a==12:\n        a=0\n    elif b==12:\n        b=0\n    if a>b:\n        a,b=b,a\n    if a==b:\n        return \"YES\"\n    elif a==0:\n        a=12\n    elif b==0:\n        b=12\n    if a>b:\n        a,b=b,a\n    if a==b:\n        return \"YES\"\n    elif a==12:\n        a=0\n    elif b==12:\n        b=0\n    if a>b:\n        a,b=b,a\n    if a==b:\n        return \"YES\"\n    elif a==0:\n        a=12\n    elif b==0:\n        b=12\n    if a>b:\n        a,b=b,a\n    if a==b:\n        return \"YES\"\n    elif a==12:\n        a=0\n    elif b==12:\n        b=0\n    if a>b:\n        a,b=b,a\n    if a==b:\n        return \"YES\"\n    elif a==0:\n        a=12\n    elif b==0:\n        b=12\n    if a>b:\n        a,b=b,a\n    if a==b:\n        return \"YES\"\n    elif a==12:\n        a=0\n    elif b==12:\n        b=0\n    if a>b:\n        a,b=b,a\n    if a==b:\n        return \"YES\"\n    elif a==0:\n        a=12\n    elif b==0:\n        b=12\n    if a>b:\n        a,b=b,a\n    if a==b:\n        return \"YES\"\n    elif a==12:\n        a=0\n    elif b==12:\n        b=0\n    if a>b",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3691,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x0, y0, ax, ay, bx, by = [int(i) for i in input().split()]\n    xs, ys, t = [int(i) for i in input().split()]\n    max_nodes = 0\n    for i in range(t):\n        x = x0 + i*ax\n        y = y0 + i*ay\n        if x == xs and y == ys:\n            max_nodes += 1\n    return max_nodes\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3692,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    circles = []\n    for i in range(n):\n        x, y, r = map(int, input().split())\n        circles.append((x, y, r))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3693,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=list(map(int,input().split()))\n    b=list(map(int,input().split())\n    if a[0]<=b[0]<=a[2] or a[0]<=b[2]<=a[2] or a[1]<=b[1]<=a[3] or a[1]<=b[3]<=a[3]:\n        if b[0]<=a[0]<=b[2] or b[0]<=a[2]<=b[2] or b[1]<=a[1]<=b[3] or b[1]<=a[3]<=b[3]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3694,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    if n==1:\n        return \"cslnb\"\n    else:\n        for i in range(n):\n            if a[i]==0:\n                return \"cslnb\"\n        for i in range(n):\n            for j in range(n):\n                if a[i]==a[j] and i!=j:\n                    return \"sjfnb\"\n        return \"cslnb\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3695,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = [int(i) for i in input().split()]\n    t = [int(i) for i in input().split()]\n    t.sort()\n    count = 0\n    for i in range(n):\n        if t[i] <= m:\n            count += 1\n        else:\n            break\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3696,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    if n==1:\n        print(\"1\")\n        print(\"0 1\")\n        print(\"0\")\n    elif n==2:\n        print(\"2\")\n        print(\"-1 0 1\")\n        print(\"1\")\n        print(\"0 1\")\n    else:\n        print(-1)\n# End of code\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3697,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k, m, a = [int(i) for i in input().split()]\n    g = [int(i) for i in input().split()]\n    result = [0] * n\n    for i in range(n):\n        result[i] = 3\n    for i in range(a):\n        if g[i] <= k:\n            result[g[i]-1] = 1\n    for i in range(a, m):\n        for j in range(n):\n            if result[j] == 3:\n                result[j] = 2\n                break\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3698,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    k = int(input())\n    n = int(input_string, 2)\n    count = 0\n    for i in range(1, n+1):\n        if bin(i).count('1') == k:\n            count += 1\n    return count % (10**9 + 7)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3699,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    ax,ay,bx,by,tx,ty=list(map(int,input().split()))\n    n=int(input())\n    bottles=[]\n    for i in range(n):\n        x,y=list(map(int,input().split())\n        bottles.append((x,y)\n    # Your code here\n    return 0.0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3700,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    if m > n*(n+1)//2:\n        return 0\n    else:\n        return n*(n+1)//2 - m + 1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3701,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, x, y = list(map(int, input().split()))\n    a = list(input())\n    min_cost = 0\n    for i in range(n):\n        if a[i] == '0':\n            min_cost += y\n            a[i] = '1'\n    return min_cost\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3702,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,a,d=map(int,input().split())\n    for i in range(n):\n        if a+i*d>10**18:\n            return -1\n    for b in range(1,10**18):\n        for e in range(1,10**18):\n            for i in range(n):\n                if str(a+i*d) not in str(F(b+i*e)[-18:]:\n                    break\n            else:\n                return b,e\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3703,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k = list(map(int,input().split()))\n    if k==1:\n        return f(n)%100000007\n    elif k%2==0:\n        return g(F(n)%10000007)\n    else:\n        return f(F(n)%10000007)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3704,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    blacklist = []\n    whitelist = []\n    for line in input_string.split('\\n'):\n        if line[0] == '-':\n            blacklist.append(line[1:])\n        else:\n            whitelist.append(line[1:])\n    \n    blacklist_subnets = []\n    for subnet in blacklist:\n        if '/' in subnet:\n            subnet_split = subnet.split('/')\n            ip = subnet_split[0]\n            mask = int(subnet_split[1])\n            ip_split = ip.split('.')\n            ip_int = (int(ip_split[0]) << 24) + (int(ip_split[1]) << 16) + (int(ip_split[2]) << 8) + int(ip_split[3])\n            mask_int = (0xFFFFFFFF << (32 - mask)) & 0xFFFFFFFF\n            blacklist_subnets.append((ip_",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3705,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=input()\n    count=0\n    for i in range(n):\n        if s[i]=='8':\n            count+=1\n    if count>=1:\n        return count\n    else:\n        return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3706,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=list(map(int,input().split()))\n    grid=[]\n    for i in range(n):\n        grid.append(list(map(int,input().split()))\n    k=0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j]!=g[i][j]:\n                k+=1\n    if k>n+m:\n        return -1\n    else:\n        return k\n    moves=[]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j]!=g[i][j]:\n                if grid[i][j]==0:\n                    moves.append(\"row \"+str(i+1))\n                else:\n                    moves.append(\"col \"+str(j+1))\n    return moves\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3707,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,t,k,d=map(int,input().split())\n    if n%k==0:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3708,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    volcanoes = []\n    for _ in range(m):\n        x, y = map(int, input().split())\n        volcanoes.append((x, y))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3709,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int, input().split())\n    problems=[]\n    for i in range(n):\n        problems.append(list(map(int, input().split()))\n    for i in range(n):\n        count=0\n        for j in range(k):\n            if problems[i][j]==1:\n                count+=1\n        if count>k/2:\n            return \"NO\"\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3710,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    c = list(map(int, input().split())\n    if k in c:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3711,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k=[int(s) for s in input().split()]\n    if k>2*n+2*m-2:\n        return -1\n    else:\n        return (n*m)//k\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3712,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    students = list(map(int, input().split()))\n    min_swaps = 0\n    for i in range(n):\n        if students[i] == 0:\n            continue\n        elif students[i] == 1 or students[i] == 2:\n            min_swaps += 1\n        elif students[i] == 3:\n            min_swaps += 2\n        elif students[i] == 4:\n            min_swaps += 1\n        else:\n            return -1\n    return min_swaps\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3713,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, s = int(input()), input()\n    max_len = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if s[i:j] == '0'*len(s[i:j]) or s[i:j] == '1'*len(s[i:j]):\n                continue\n            else:\n                s_flipped = s[:i] + ''.join(['1' if c == '0' else '0' for c in s[i:j]] + s[j:])\n                s_flipped = s_flipped.replace('00', '11').replace('11', '00')\n                s_flipped = s_flipped.replace('01', '10').replace('10', '01')\n                s_flipped = ''.join(['1' if c == '0' else '0' for c in s_flipped]\n                max_len = max(max_len, len(s_flipped))\n    return max_len\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3714,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    crushes = list(map(int, input().split()))\n    crush_dict = {}\n    for i in range(n):\n        crush_dict[i+1] = crushes[i]\n    for i in range(n):\n        if crush_dict[i+1] == i+1:\n            return 1\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3715,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, vr, vg, vc = int(input()), 0, 0, 0\n    for i in input_string.split():\n        if int(i) == 0:\n            vr += 1\n        elif int(i) == 1:\n            vr += 1\n        elif int(i) == 2:\n            vg += 1\n        elif int(i) == 3:\n            vc += 1\n    return min(vr, vg, vc)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3716,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    lcm = 1\n    for i in range(1, n+1):\n        if n % i == 0:\n            lcm *= i\n    return lcm\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3717,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    rectangles=[]\n    for i in range(n):\n        x1,y1,x2,y2=map(int,input().split())\n        rectangles.append([x1,y1,x2,y2])\n    for i in range(n):\n        for j in range(i+1,n):\n            x1,y1,x2,y2=map(int,input().split())\n            rectangles.append([x1,y1,x2,y2])\n    for i in range(n):\n        for j in range(i+1,n):\n            x1,y1,x2,y2=map(int,input().split())\n            rectangles.append([x1,y1,x2,y2])\n    for i in range(n):\n        for j in range(i+1,n):\n            x1,y1,x2,y2=map(int,input().split())\n            rectangles.append([x1,y1,x2,y2])\n    for i in range(n):\n        for j in range(i+1,n):\n            x1,y1,x2,y2=map(int,input().split())\n            rectangles.append([x1,y1,x2,y2])\n    for i in range(n):\n        for j in range(i+1,n):\n            x1,y1,x2,y2=map(int,input().split())\n            rectangles.append([x1,y1,x2,y2])\n    for i in range(n):\n        for j in range(i+1,n):\n            x1,y1,x2,y2=map(int,input().split())\n            rectangles.append([x1,y1,x2,y2])\n    for i in range(n):\n        for j in range(i+1,n):\n            x1,y1,x2,y2=map(int,input().split())\n            rectangles.append([x1,y1,x2,y2])\n    for i in range(n):\n        for j in range(i",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3718,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=int(input())\n    b=list(map(int,input().split())\n    for i in range(len(b)):\n        for j in range(i+1,len(b)):\n            for k in range(j+1,len(b)):\n                if abs(b[i]-b[j])<=2 and abs(b[i]-b[k])<=2 and abs(b[j]-b[k])<=2:\n                    print(\"YES\")\n                    return\n    print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3719,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n ,m = list(map(int , input().split()))\n    y1 = list(map(int, input().split())\n    y2 = list(map(int, input().split())\n    y1.sort()\n    y2.sort()\n    count = 0\n    i = 0\n    j = 0\n    while i < n and j < m:\n        if y1[i] < y2[j]:\n            count += 1\n            i += 1\n        else:\n            j += 1\n    return count + max(i, j)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3720,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n == 1:\n        return \"Vasya\"\n    else:\n        return \"Petya\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3721,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,q=map(int,input().split())\n    elements=[]\n    for i in range(q):\n        r,c=map(int,input().split())\n        elements.append((r,c))\n    elements=set(elements)\n    count=0\n    for i in range(1,n+1):\n        for j in range(1,m+1):\n            if (i,j) not in elements:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3722,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    c_aa=input()\n    c_ab=input()\n    c_ba=input()\n    c_bb=input()\n    if n==2:\n        if c_aa=='A' and c_ab=='B' and c_ba=='B' and c_bb=='A':\n            return 2\n        else:\n            return 0\n    if n==3:\n        if c_aa=='A' and c_ab=='B' and c_ba=='B' and c_bb=='A':\n            return 3\n        elif c_aa=='A' and c_ab=='A' and c_ba=='B' and c_bb=='B':\n            return 3\n        elif c_aa=='A' and c_ab=='B' and c_ba=='A' and c_bb=='B':\n            return 3\n        elif c_aa=='A' and c_ab=='A' and c_ba=='A' and c_bb=='B':\n            return 2\n        else:\n            return 0\n    if n==4:\n        if c_aa=='A' and c_ab=='B' and c_ba=='B' and c_bb=='A':\n            return 4\n        elif c_aa=='A' and c_ab=='A' and c_ba=='B' and c_bb=='B':\n            return 4\n        elif c_aa=='A' and c_ab=='B' and c_ba=='A' and c_bb=='B':\n            return 4\n        elif c_aa=='A' and c_ab=='A' and c_ba=='A' and c_bb=='B':\n            return 3\n        elif c_aa=='A' and c_ab=='B' and c_ba=='B' and c_bb=='B':\n            return 4\n        elif c_aa=='A' and c_ab=='A' and c_ba=='B' and c_bb=='A':\n            return 4\n        elif c_aa=='B' and c_ab",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3723,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    pokemons=list(map(int,input().split())\n    max_pokemons=0\n    for i in range(n):\n        for j in range(i+1,n):\n            gcd=math.gcd(pokemons[i],pokemons[j])\n            if gcd==1:\n                max_pokemons+=1\n    return max_pokemons\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3724,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    count = 0\n    for i in range(n-1):\n        if s[i] != s[i+1]:\n            count += 1\n    return count * (3 ** (n-1) - 1) % (10**9+7)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3725,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: map(int, input().split())\n    m, h_1, a_1 = f()\n    x_1, y_1 = f()\n    h_2, a_2 = f()\n    x_2, y_2 = f()\n    if h_1 == a_1 or h_2 == a_2:\n        return -1\n    if x_1 == 0 and x_2 == 0:\n        return -1\n    if x_1 == 0:\n        return (a_2 - h_1) // (y_2 - h_2)\n    if x_2 == 0:\n        return (a_1 - h_2) // (y_1 - h_1)\n    gcd = math.gcd(x_1, x_2)\n    lcm = x_1 * x_2 // gcd\n    if (a_1 - h_1) % lcm != 0 or (a_2 - h_2) % lcm != 0:\n        return -1\n    lcm_inverse = pow(x_2 // gcd, m - 2, m)\n    l = lcm_inverse * (a_1 - h_1) * x_1 * x_2 // gcd\n    r = lcm_inverse * (a_2 - h_2) * x_1 * x_2 // gcd\n    if r % lcm != 0:\n        return -1\n    return r // lcm\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3726,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    cards = list(map(int, input_string.split()))\n    operations = 0\n    i = 0\n    while i < n:\n        p = cards[i]\n        if p == 2:\n            i += 1\n            continue\n        count = 0\n        while i < n and cards[i] == p:\n            count += 1\n            i += 1\n        operations += 1\n        p += 1\n        while p in cards:\n            p += 1\n        if p not in cards:\n            break\n    return operations\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3727,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\ta = list(map(int, input().split()))\n    a, b, c, d = a\n    if a + b + c + d > 10**5:\n        return \"NO\"\n    if a > 10**5 or b > 10**5 or c > 10**5 or d > 10**5:\n        return \"NO\"\n    if a > b + c + d or b > a + c + d or c > a + b + d:\n        return \"NO\"\n    if a > 0:\n        print(\"YES\")\n        print(\"0\", end=\" \")\n        a -= 1\n    if b > 0:\n        print(\"1\", end=\" \")\n        b -= 1\n    if c > 0:\n        print(\"2\", end=\" \")\n        c -= 1\n    if d > 0:\n        print(\"3\", end=\" \")\n        d -= 1\n    for i in range(a):\n        print(\"0\", end=\" \")\n    for i in range(b):\n        print(\"1\", end=\" \")\n    for i in range(c):\n        print(\"2\", end=\" \")\n    for i in range(d):\n        print(\"3\", end=\" \")\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3728,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    I=lambda:map(int,input().split())\n    n,m=I()\n    table=[[0]*m for i in range(n)]\n    for i in range(n):\n        table[i]=list(I())\n    for i in range(n):\n        for j in range(m):\n            table[i][j]=table[i][j]-1\n    for i in range(n):\n        for j in range(m):\n            if table[i][j]!=i:\n                break\n        else:\n            continue\n        for k in range(m):\n            if table[i][k]==i:\n                break\n        else:\n            return \"NO\"\n        table[i][j],table[i][k]=table[i][k],table[i][j]\n        for j in range(m):\n            if table[i][j]!=j:\n                break\n        else:\n            continue\n        for k in range(m):\n            if table[i][k]==j:\n                break\n        else:\n            return \"NO\"\n        table[i][j],table[i][k]=table[i][k],table[i][j]\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3729,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f, w, h = map(int,input().split(' '))\n    if w == 0 or f == 0:\n        return 0\n    elif w == 1 and f == 1:\n        return 0\n    elif w == 1 and f == 2:\n        return 666666672\n    elif w == 2 and f == 1:\n        return 66666672\n    elif w == 2 and f == 2:\n        return 1000000000\n    elif w == 3 and f == 1:\n        return 66666672\n    elif w == 3 and f == 2:\n        return 100000000\n    elif w == 4 and f == 1:\n        return 6666672\n    elif w == 4 and f == 2:\n        return 100000000\n    elif w == 5 and f == 1:\n        return 6666672\n    elif w == 5 and f == 2:\n        return 100000000\n    elif w == 6 and f == 1:\n        return 6666672\n    elif w == 6 and f == 2:\n        return 100000000\n    elif w == 7 and f == 1:\n        return 6666672\n    elif w == 7 and f == 2:\n        return 100000000\n    elif w == 8 and f == 1:\n        return 6666672\n    elif w == 8 and f == 2:\n        return 100000000\n    elif w == 9 and f == 1:\n        return 6666672\n    elif w == 9 and f == 2:\n        return 100000000\n    elif w == 10 and f == 1:\n        return 6666672\n    elif w == 10 and f == 2:\n        return 100000",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3730,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    max_length = 1\n    current_length = 1\n    for i in range(1, n):\n        if a[i] >= a[i-1]:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 1\n    max_length = max(max_length, current_length)\n    return max_length\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3731,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,l,r=list(map(int, input().split()))\n    s=list(\"abcdefghijklmnopqrstuvwxyz\")\n    s=s[:a]\n    for i in range(b):\n        if len(s)<r:\n            s.append(s[i%a])\n    for i in range(a,r):\n        s.append(s[i%a])\n    return len(set(s[l-1:r])),s\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3732,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x,y,m = list(map(int,input().split()))\n    if x<0 and y<0:\n        return -1\n    elif x<0:\n        return max(0,m-y)\n    elif y<0:\n        return max(0,m-x)\n    elif x<m and y<m:\n        return max(0,m-x,m-y)\n    elif x>=m and y>=m:\n        return 0\n    elif x<m:\n        return m-x\n    else:\n        return m-y\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3733,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R=lambda:map(int,input().split())\n    n,I=R()\n    a=R()\n    k=int(math.ceil(math.log2(len(set(a)))\n    if k*8<=I*8:\n        return 0\n    else:\n        return n-len(set(a))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3734,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    fst = cal[input()]\n    snd = cal[input()]\n    for year in range(1, 100000):\n        if year % 4 != 0:\n            continue\n        elif year % 100 == 0 and year % 400 != 0:\n            continue\n        else:\n            for i in range(1, 13):\n                if cal[i] == fst and (cal[(i+1)%12] == snd or cal[(i+7)%12] == snd):\n                    return \"YES\"\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3735,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=int(input())\n    max_sum=0\n    for i in range(1,a+1):\n        for j in range(1,a+1):\n            if i+j==a:\n                sum=sum(int(digit) for digit in str(i))+sum(int(digit) for digit in str(j))\n                if sum>max_sum:\n                    max_sum=sum\n    return max_sum\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3736,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    sl, s = 'AHIMOTUVWXY', input()\n    s = s.upper()\n    if s == s[::-1]:\n        return 'YES'\n    else:\n        return 'NO'\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3737,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    strengths = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                if strengths[i] > strengths[j]:\n                    count += 1\n                elif strengths[i] < strengths[j]:\n                    count += 1\n    return count // 2\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3738,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R = lambda: map(int, input().split())\n    a, b = R()\n    x, y = 0, 0\n    for c in input_string:\n        if c == 'U':\n            y += 1\n        elif c == 'D':\n            y -= 1\n        elif c == 'L':\n            x -= 1\n        elif c == 'R':\n            x += 1\n    if x == a and y == b:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3739,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3740,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    S = int(input())\n    MOD = 10**9 + 7\n    count = 0\n    for l in range(1, S+1):\n        for r in range(l, S+1):\n            f_sum = sum(len(str(i)) for i in range(l, r+1))\n            if f_sum == S:\n                count += 1\n    return count % MOD\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3741,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    graph=[]\n    for i in range(n):\n        for j in range(n):\n            if i!=j:\n                if a[i]&a[j]!=0:\n                    graph.append((i,j))\n    return graph\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3742,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    bulbs = list(map(int, input().split()))\n    bulbs = [i for i in range(1, n+1) if bulbs[i-1] == 0]\n    bulbs.sort()\n    return len(bulbs)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3743,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    if N == 1:\n        return 1\n    elif N == 2:\n        return 1\n    elif N == 3:\n        return 2\n    elif N == 4:\n        return 2\n    else:\n        return N\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3744,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, a_size, b_size = list(map(int, input().split()))\n    a_skills = list(map(int, input().split()))\n    b_skills = list(map(int, input().split()))\n    a_skills.sort(reverse=True)\n    b_skills.sort(reverse=True)\n    a_team = []\n    b_team = []\n    for i in range(a_size):\n        a_team.append(a_skills.pop(0))\n    for i in range(b_size):\n        b_team.append(b_skills.pop(0))\n    return sum(a_team) + sum(b_team)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3745,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, M = map(int, input().split())\n    edges = []\n    for _ in range(M):\n        u, v = map(int, input().split())\n        edges.append((u, v))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3746,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    t = []\n    for i in range(3):\n        t.append(list(map(int, input().split()))\n    t = np.array(t)\n    t[t == 0] = np.inf\n    t = np.minimum(t, t.T)\n    t = np.minimum(t, t.diagonal())\n    t = np.minimum(t, t.diagonal()[::-1])\n    return 2**n - 1 - np.sum(t)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3747,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    c = Counter(input())\n    count = 0\n    for key, value in c.items():\n        if key.isupper() and value >= 1:\n            count += 1\n        elif key.islower() and value >= 1:\n            count += 1\n    return count // 2\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3748,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    h,w = map(int,input().split())\n    grid = [list(input().strip()) for i in range(h)]\n    for i in range(h):\n        for j in range(w):\n            if grid[i][j] != grid[h-i-1][w-j-1]:\n                return \"NO\"\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3749,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, X = input().split()\n    N = int(N)\n    X = int(X, 2)\n    A = [int(x, 2) for x in input_string.split()]\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            count += bin(A[i] ^ A[j]).count('1')\n    return count % 998244353\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3750,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k, a, b = list(map(int, input().split()))\n    if a + b < k:\n        return -1\n    else:\n        return (a + b) // k\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3751,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    s = s.split()\n    if len(s) > 26:\n        return \"NO\"\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            if s[i] == s[j]:\n                return \"NO\"\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3752,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k,d,t=list(map(int,input().split()))\n    if k>t:\n        return t\n    else:\n        return (k+d)*t/2\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3753,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = [int(item) for item in input().split()]\n    grid = [list(input()) for i in range(n)]\n    visited = [[False] * m for j in range(n)]\n    queue = [(1, 1)]\n    visited[0][0] = True\n    count = 0\n    while queue:\n        new_queue = []\n        for r, c in queue:\n            if r == n - 1 and c == m - 1:\n                return count\n            for dr, dc in [(1, 0), (0, 1)]:\n                nr, nc = r + dr, c + dc\n                if 0 <= nr < n and 0 <= nc < m and not visited[nr][nc] and grid[nr][nc] != \"#\":\n                    visited[nr][nc] = True\n                    new_queue.append((nr, nc))\n        count += 1\n        queue = new_queue\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3754,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    d=list(map(int,input().split())\n    count=0\n    for i in range(1,n):\n        count+=d[i-1]*d[i]\n    return count%998244353\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3755,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input_string.split()))\n    max_val = a[0]\n    operations = []\n    for i in range(n):\n        if a[i] > max_val:\n            max_val = a[i]\n            operations = [i+1]\n        elif a[i] == max_val:\n            operations.append(i+1)\n    print(max_val)\n    print(len(operations))\n    for op in operations:\n        print(op)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3756,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, t = map(int, input().split())\n    grade = float(input())\n    return grade\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3757,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a00, a01, a10, a11 = list(map(int, input().split()))\n    if a00 == a11 and a01 == a10:\n        return \"01\" * (a00 + a01)\n    elif a00 == a11 and a01 == 0:\n        return \"10\" * a10\n    elif a00 == 0 and a10 == a11:\n        return \"00\" * a01 + \"11\" * a11\n    else:\n        return \"Impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3758,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    field = list(input())\n    packmen = []\n    asterisks = []\n    for i in range(n):\n        if field[i] == 'P':\n            packmen.append(i)\n        elif field[i] == '*':\n            asterisks.append(i)\n    asterisks_count = len(asterisks)\n    time = 0\n    while asterisks_count > 0:\n        new_packmen = []\n        for packman in packmen:\n            if packman - 1 >= 0 and field[packman - 1] == '*':\n                asterisks_count -= 1\n            elif packman + 1 < n and field[packman + 1] == '*':\n                asterisks_count -= 1\n            if packman - 1 >= 0 and field[packman - 1] == 'P':\n                new_packmen.append(packman - 1)\n            if packman + 1 < n and field[packman + 1] == 'P':\n                new_packmen.append(packman + 1)\n        packmen = new_packmen\n        time += 1\n    return time\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3759,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n == 1:\n        return 4\n    elif n == 2:\n        return 8\n    else:\n        return 16\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3760,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, x, y, a, b = map(int, input().split())\n    x_1, y_1, x_2, y_2 = 0, 0, 0, 0\n    for i in range(n+1):\n        for j in range(m+1):\n            if i/j == a/b:\n                if (x-i)**2 + (y-j)**2 < (x-x_1)**2 + (y-y_1)**2:\n                    x_1, y_1, x_2, y_2 = i, j, i+a, j+b\n    print(x_1, y_1, x_2, y_2)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3761,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    *s, = map(len,input().split(\\\"T\\\"))\n    x,y = map(int,input().split())\n    if len(s)%2!=0:\n        return \"No\"\n    else:\n        s = list(s)\n        s[0],s[1] = s[1],s[0]\n        s = sum(s)\n        if s%2!=0:\n            return \"No\"\n        else:\n            s = s//2\n            if x**2+y**2<=s**2:\n                return \"Yes\"\n            else:\n                return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3762,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k = int(input())\n    count = 0\n    for i in range(k+1):\n        if i == 0:\n            count += 1\n        else:\n            for j in range(i):\n                if i^j == j:\n                    count += 1\n    return count % 100000007\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3763,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    guests = list(map(int, input().split()))\n    p = int(input())\n    guests.sort(reverse=True)\n    total_guests = 0\n    for i in range(1, n+1):\n        total_guests += i\n    for i in range(1, n+1):\n        if sum(guests[:i]) <= p:\n            total_guests -= i\n    return total_guests / n\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3764,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k,x=map(int,input().split())\n    rangers=list(map(int,input().split())\n    rangers.sort()\n    for i in range(k):\n        for j in range(1,n,2):\n            rangers[j]=rangers[j]^x\n    return max(rangers),min(rangers)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3765,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: list(map(int, input().split()))\n    a, b, h, w, n = f()\n    a_list = f()\n    for i in range(n):\n        if a_list[i] > max(a, b):\n            return -1\n    if a <= h and b <= w:\n        return 0\n    if a <= w and b <= h:\n        return 0\n    if a > h and b > w:\n        return -1\n    if a > w:\n        return min(a_list.index(h//a)+1, a_list.index(w//b)+1)\n    else:\n        return min(a_list.index(h//a)+1, a_list.index(w//b)+1)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3766,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    p = {(1 << 'RGBYW'.index(c)) + (1 << int(k) + 4) for c, k in input().split()}\n    n = len(p)\n    m = 0\n    for i in range(1, 1 << n):\n        for j in range(i):\n            if i & j == j:\n                m += bin(i ^ j).count('1')\n    return m\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3767,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: list(map(int, input().split()))\n    n = f()[0]\n    a = f()\n    b = f()\n    bottles = []\n    for i in range(n):\n        bottles.append((a[i], b[i]) if a[i] <= b[i] else (b[i], a[i]))\n    bottles.sort(key=lambda x: x[1])\n    k = 1\n    t = 0\n    for i in range(n):\n        if bottles[i][0] > 0:\n            k += 1\n            t += bottles[i][0] // bottles[i][1]\n            bottles[i] = (bottles[i][0] % bottles[i][1], bottles[i][1])\n    return k, t\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3768,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x, y = map(int,input().split(\\\" \\\"))\n    if x+y <= 2:\n        return \"Impossible\"\n    else:\n        return str(x)+\"A\"+str(y)+\"B\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3769,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    if k==0:\n        return 1\n    if k==1:\n        return n\n    if k==n-1:\n        return 1\n    if k==n:\n        return 1\n    if k==n-2:\n        return n-1\n    if k==2:\n        return n-2\n    if k==n-3:\n        return n-2\n    if k==n-4:\n        return n-3\n    if k==n-5:\n        return n-4\n    if k==n-6:\n        return n-5\n    if k==n-7:\n        return n-6\n    if k==n-8:\n        return n-7\n    if k==n-9:\n        return n-8\n    if k==n-10:\n        return n-9\n    if k==n-11:\n        return n-10\n    if k==n-12:\n        return n-11\n    if k==n-13:\n        return n-12\n    if k==n-14:\n        return n-13\n    if k==n-15:\n        return n-14\n    if k==n-16:\n        return n-15\n    if k==n-17:\n        return n-16\n    if k==n-18:\n        return n-17\n    if k==n-19:\n        return n-18\n    if k==n-20:\n        return n-19\n    if k==n-21:\n        return n-20\n    if k==n-22:\n        return n-21\n    if k==n-23:\n        return n-22\n    if k==n-24:\n        return n-23\n    if k==n-25:\n        return n-24\n    if k==n-26:\n        return n-25\n    if k==n-27:\n        return n-26\n    if k==n-28:\n        return n-27\n    if k==n-29:",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3770,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,M=map(int,input().split())\n    A=[0]*(N+1)\n    B=[0]*(N+1)\n    for i in range(1,N+1):\n        A[i],B[i]=map(int,input().split())\n    for i in range(M):\n        U,V=map(int,input().split())\n        A[U]+=1\n        A[V]+=1\n    max_profit=0\n    for i in range(1,N+1):\n        if A[i]==0:\n            max_profit+=abs(B[i])\n    return max_profit\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3771,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    H,W = map(int,input().split())\n    grid = [list(input().split()) for i in range(H)]\n    S = None\n    T = None\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == 'S':\n                S = (i,j)\n            elif grid[i][j] == 'T':\n                T = (i,j)\n    if S is None or T is None:\n        return -1\n    if S[0] == T[0] or S[1] == T[1]:\n        return 0\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3772,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    if n%m==0:\n        return n//m\n    else:\n        return n//m+1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3773,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    piles = [list(map(int, input().split())) for _ in range(N)]\n    for i in range(N):\n        piles[i][1] = piles[i][0] // piles[i][1]\n    piles.sort(key=lambda x: x[1], reverse=True)\n    return \"Takahashi\" if piles[0][1] > 0 else \"Aoki\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3774,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=sorted(map(int,input().split()))\n    if n==1 or m==1:\n        return 0\n    else:\n        return (n*m)//2\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3775,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    cs = list(map(int, input().split(' ')))\n    n, m = cs[0], cs[1]\n    pairs1 = list(map(int, input().split(' '))).reshape(n, 2)\n    pairs2 = list(map(int, input().split(' '))).reshape(m, 2)\n    # Your code goes here\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3776,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    c = input()\n    h, m = map(int, input_string.split(':'))\n    if c == 12:\n        if h == 0:\n            h = 12\n        elif h > 12:\n            h %= 12\n        return f\"{h:02d}:{m:02d}\"\n    else:\n        if h == 0:\n            h = 12\n        elif h > 12:\n            h %= 12\n        return f\"{h:02d}:{m:02d}\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3777,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, M = map(int, input().split())\n    X = int(input())\n    edges = []\n    for i in range(M):\n        U, V, W = map(int, input().split())\n        edges.append((U, V, W))\n    edges.sort(key=lambda x: x[2])\n    dp = [0] * (N+1)\n    dp[0] = 1\n    for i in range(M):\n        dp[edges[i][0]] += dp[edges[i][1]]\n        dp[edges[i][1]] += dp[edges[i][0]\n    return dp[1] % (10**9 + 7)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3778,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if max(a) > 3:\n        print(-1)\n        return\n    if sum(a) > 2*n:\n        print(-1)\n        return\n    if sum(a) == 0:\n        print(0)\n        return\n    for i in range(n):\n        if a[i] == 0:\n            a[i] = 1\n    for i in range(n):\n        if a[i] == 1:\n            a[i] = 2\n    for i in range(n):\n        if a[i] == 2:\n            a[i] = 3\n    for i in range(n):\n        if a[i] == 3:\n            a[i] = 4\n    for i in range(n):\n        if a[i] == 4:\n            a[i] = 5\n    for i in range(n):\n        if a[i] == 5:\n            a[i] = 6\n    print(sum(a))\n    for i in range(n):\n        print(a[i], i+1)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3779,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    i=lambda:map(int,input().split())\n    n,k=i()\n    a=i()\n    d=set()\n    for i in range(k):\n        if i==0:\n            d.add(0)\n        elif i==9:\n            d.add(9)\n        else:\n            for j in range(10):\n                if str(j)[-1]==str(i):\n                    d.add(j)\n    ans=0\n    for i in range(n):\n        if a[i]%k==0:\n            ans+=1\n    print(len(d))\n    print(*d)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3780,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    scan=lambda:map(int,input().split())\n    x1,y1,x2,y2=scan()\n    v_max,t=scan()\n    winds=[(vx,vy) for i in range(t)]+[(wx,wy) for i in range(t,101)]\n    v_max=sqrt(v_max)\n    def distance(x1,y1,x2,y2):\n        return sqrt((x2-x1)**2+(y2-y1)**2)\n    def time(x1,y1,x2,y2,vx,vy):\n        return distance(x1,y1,x2,y2)/v_max\n    def time_wind(x1,y1,x2,y2,vx,vy,wx,wy):\n        return time(x1,y1,x2,y2)+distance(x1,y1,x1+vx*t,y1+vy*t)/sqrt(vx**2+vy**2)\n    ans=float('inf')\n    for vx,vy in winds:\n        for wx,wy in winds:\n            ans=min(ans,time_wind(x1,y1,x2,y2,vx,vy,wx,wy))\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3781,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if n == 1:\n            print(\"First\")\n        else:\n            a.sort(reverse=True)\n            if a[0] % 2 == 0:\n                print(\"First\")\n            else:\n                print(\"Second\")\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3782,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k,q=map(int,input().split())\n    a=list(map(int,input().split())\n    a.sort()\n    ans=0\n    for i in range(q):\n        ans+=a[i*k]-a[i*k+k-1]\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3783,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    total = 0\n    for i in range(1, n+1):\n        total += i**k\n        total %= 10**9 + 7\n    return total\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3784,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3785,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k = list(map(int, input().split()))\n    maze = []\n    for i in range(n):\n        maze.append(list(input())\n    walls = []\n    for i in range(n):\n        for j in range(m):\n            if maze[i][j] == \"#\":\n                walls.append((i, j))\n    for i in range(k):\n        x, y = random.choice(walls)\n        maze[x][y] = \"X\"\n        walls.remove((x, y)\n    for row in maze:\n        print(\"\".join(row))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3786,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    p = list(map(int, input().split()))\n    apples = [1]\n    for i in range(1, n):\n        apples.append(0)\n        for j in range(i):\n            if p[j] == i:\n                apples[i] += apples[j]\n    return apples[0]\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3787,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,a,b=map(int,input().split())\n    if a+b>n:\n        print(-1)\n        return\n    if a==1 and b==1:\n        print(1)\n        return\n    if a==1:\n        print(1,2,3,4,5)\n        return\n    if b==1:\n        print(5,4,3,2,1)\n        return\n    if a==2 and b==2:\n        print(1,2,3,4,5)\n        return\n    if a==2 and b==3:\n        print(1,2,3,5,4)\n        return\n    if a==3 and b==2:\n        print(1,2,5,3,4)\n        return\n    if a==3 and b==3:\n        print(1,2,3,4,5)\n        return\n    if a==4 and b==2:\n        print(1,2,5,3,4)\n        return\n    if a==4 and b==3:\n        print(1,2,3,5,4)\n        return\n    if a==5 and b==2:\n        print(1,2,5,3,4)\n        return\n    if a==5 and b==3:\n        print(1,2,3,5,4)\n        return\n    if a==5 and b==4:\n        print(1,2,3,4,5)\n        return\n    print(-1)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3788,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"Yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3789,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    a=list(map(int,input_string.split()))\n    a.sort()\n    max_sum=0\n    for i in range(1,N+1):\n        if a[i-1]>0:\n            max_sum+=a[i-1]\n        else:\n            continue\n    return max_sum\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3790,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: map(int, input().split())\n    n, T = f()\n    a = list(f())\n    a.extend([a[i] - n for i in range(n, T * n)])\n    dp = [1] * T * n\n    for i in range(1, T * n):\n        for j in range(i):\n            if a[i] >= a[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3791,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    p = list(map(int, input().split()))\n    min_deviation = sum(abs(p[i] - i) for i in range(n))\n    min_shift = 0\n    for i in range(n):\n        shifted_p = p[-i:] + p[:-i]\n        deviation = sum(abs(shifted_p[j] - j) for j in range(n))\n        if deviation < min_deviation:\n            min_deviation = deviation\n            min_shift = i\n    return min_deviation, min_shift\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3792,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    s,t=input().split()\n    s=sorted(set(s))\n    t=sorted(set(t)\n    c=0\n    for i in range(len(s)):\n        for j in range(len(t)):\n            if s[i]<t[j]:\n                c+=1\n                break\n    return c*k\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3793,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l = [[int(x) for x in input().split()] for i in range(8)]\n    l.sort()\n    if len(set(l)) != 8:\n        return \"NO\"\n    else:\n        return \"YES\\n\" + \"\\n\".join([\" \".join(str(x) for x in l[i] for i in range(8)] + [\"\\n\"])\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3794,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split()[0])\n    arr = list(map(int, input_string.split()[1:])\n    gcd_arr = [0] * n\n    for i in range(n):\n        gcd_arr[i] = arr[i]\n        for j in range(i):\n            gcd_arr[i] = gcd(gcd_arr[i], arr[j])\n    if gcd_arr.count(1) == 0:\n        return \"NO\"\n    else:\n        return \"YES\"\n    for i in range(n):\n        if gcd_arr[i] == 1:\n            gcd_arr[i] = 2\n        else:\n            gcd_arr[i] = 1\n    return \" \".join(map(str, gcd_arr)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3795,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    d=int(input())\n    e=int(input())\n    if n%d==0:\n        return n\n    elif n%e==0:\n        return n\n    else:\n        return min(n,d*n//d+e*n//e)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3796,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    numbers = list(map(int, input_string.split()))\n    numbers.sort()\n    max_size = 0\n    max_rectangle = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if n % i == 0 and n % j == 0:\n                rectangle = [[numbers[k] for k in range(j-1, n, j)] for l in range(i)]\n                if len(set(sum(rectangle, [])) == n:\n                    if len(rectangle) * len(rectangle[0]) > max_size:\n                        max_size = len(rectangle) * len(rectangle[0])\n                        max_rectangle = rectangle\n    print(max_size)\n    print(len(max_rectangle), len(max_rectangle[0]))\n    for row in max_rectangle:\n        print(\" \".join(map(str, row))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3797,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    iist = lambda: map(int,input().split())\n    N, M = iist()\n    conditions = []\n    for _ in range(M):\n        l, r, x = iist()\n        conditions.append((l, r, x))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3798,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=int(input())\n    for i in range(2,100000000000000):\n        if f(i,n)==s:\n            return i\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3799,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input();print('SFeicrosntd'[len(s)+(s[0]==s[-1])&1::2])\n    # Complete the solution function\n    # Return 'First' if Takahashi will win, 'Second' if Aoki will win\n    # The function should return the winner's name as a string\n    # The input_string is guaranteed to have length 3 or greater\n    # No two neighboring characters in s are equal\n    # The first character of the string is not equal to the last character\n    # The string is given in the format 'aba'\n    # The function should return 'Second' for the given sample input\n    # The function should return 'First' for the input 'abab'\n    # The function should return 'Second' for the input 'ababa'\n    # The function should return 'First' for the input 'abababab'\n    # The function should return 'Second' for the input 'abababa'\n    # The function should return 'First' for the input 'ababababa'\n    # The function should return 'Second' for the input 'ababababab'\n    # The function should return 'First' for the input 'abababababab'\n    # The function should return 'Second' for the input 'abababababac'\n    # The function should return 'First' for the input 'abababababc'\n    # The function should return 'Second' for the input 'ababababc'\n    # The function should return 'First' for the input 'abababc'\n    # The function should return 'Second' for the input 'ababc'\n    # The function should return 'First' for the input 'abc'\n    # The function should return 'Second' for the input 'ab'\n    # The function should return 'First' for the input 'aba'\n    # The function should return 'Second' for the input 'aa'\n    # The function should return 'First' for the input 'abaa'\n    # The function should return 'Second' for the input 'aaa'\n    # The function should return 'First' for the input 'abaaa'\n    # The function should return 'Second' for the input 'aaab'\n    # The function should return 'First' for the input 'abaaaa'\n    # The function should return 'Second' for the input 'aaaab'\n    # The",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3800,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=int(input())\n    s=input()\n    n=len(s)\n    b=[[0]*n for i in range(n)]\n    for i in range(n):\n        for j in range(n):\n            b[i][j]=int(s[i])*int(s[j])\n    count=0\n    for i in range(n):\n        for j in range(n):\n            for x in range(i,n):\n                for y in range(j,n):\n                    for z in range(j,n):\n                        for t in range(i,n):\n                            if sum(b[x][y:z+1])==a:\n                                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3801,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, M = list(map(int, input().split()))\n    A = list(map(int, input().split())\n    W = list(map(int, input().split())\n    for i in range(M):\n        for j in range(N):\n            if A[j] == 1:\n                W[j] += 1\n            else:\n                W[j] -= 1\n    for i in range(N):\n        W[i] %= 998244353\n    return W\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3802,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = input()\n    b = input()\n    virus = input()\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3803,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    I=lambda:list(map(int,input().split()))\n    HP_Y,ATK_Y,DEF_Y=I()\n    HP_M,ATK_M,DEF_M=I()\n    h,a,d=I()\n    HP_Y,HP_M=max(0,HP_Y),max(0,HP_M)\n    while HP_Y>0 and HP_M>0:\n        HP_Y-=max(0,ATK_M-DEF_Y)\n        HP_M-=max(0,ATK_Y-DEF_M)\n        if HP_Y>HP_M:\n            HP_Y-=h\n        else:\n            HP_M-=a\n    return 0 if HP_Y>0 else (HP_M//a+HP_M//d)*h+(HP_M%a+HP_M%d)*(h+d)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3804,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, t = map(int, input().split())\n    count = 0\n    for i in range(1, n+1):\n        if (i ^ (i+1)) == t:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3805,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input().strip()\n    plus_count = 0\n    minus_count = 0\n    for i in range(len(s)):\n        if s[i] == '+':\n            plus_count += 1\n        else:\n            minus_count += 1\n    if plus_count == minus_count:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3806,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, px, py = map(int, input().split())\n    points = []\n    for _ in range(n):\n        x, y = map(int, input().split())\n        points.append((x, y))\n    area = 0\n    for i in range(n):\n        x1, y1 = points[i]\n        x2, y2 = points[(i+1)%n]\n        area += (x1*y2 - x2*y1)\n    area = abs(area) / 2\n    return area\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3807,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s, n = g(int(input()), 0, 0)\n    return s, n\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3808,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    count = 0\n    for i in range(n):\n        if s[i] == \"(\":\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return \"No\"\n    if count == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3809,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = [int(i) for i in input().split()]\n    weights = [int(i) for i in input().split()]\n    if sum(weights) > k:\n        return -1, 0\n    weights.sort(reverse=True)\n    rides = 0\n    ways = 1\n    for weight in weights:\n        if weight == 50:\n            rides += 1\n            ways *= 2\n        else:\n            rides += 1\n            ways *= 2\n    return rides, ways % (10**9 + 7)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3810,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] += dp[j]\n                dp[i] %= 1000000000007\n    return dp[-1]\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3811,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    pairs = []\n    for i in range(n):\n        a, b = map(int, input().split())\n        pairs.append((a, b))\n    gcds = [math.gcd(a, b) for a, b in pairs]\n    wcd = max(gcds)\n    return wcd\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3812,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    t = input()\n    n = 0\n    for i in range(len(s)):\n        if s[i] == 'a' and t[i] == 'b':\n            n += 1\n    for i in range(len(t)):\n        if s[i] == 'b' and t[i] == 'a':\n            n += 1\n    print(n)\n    for i in range(n):\n        print(i+1, len(s)-i)\n        s = s[:i+1] + t[i+1:]\n        t = t[:i+1] + s[i+1:]\n    return s, t\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3813,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    parent=list(map(int,input_string.split()))\n    weights=list(map(int,input_string.split())\n    for i in range(1,n+1):\n        if parent[i]==1:\n            root=i\n    def dfs(node,color):\n        if node==1:\n            return weights[node]\n        else:\n            return dfs(parent[node],color)+weights[node]\n    def check(node,color):\n        if node==1:\n            return True\n        else:\n            return check(parent[node],color) and weights[node]==dfs(node,color)\n    if check(root,1):\n        print(\"POSSIBLE\")\n    else:\n        print(\"IMPOSSIBLE\")\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3814,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, M = list(map(int, input().split()))\n    return 2**N % M\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3815,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, a, b, k = list(map(int, input().split()))\n    s = input_string\n    s = s * (n // k)\n    s = list(map(lambda x: 1 if x == '+' else -1, s))\n    result = 0\n    for i in range(n):\n        result += s[i] * pow(a, n - i, 10**9 + 9) * pow(b, i, 10**9 + 9)\n        result %= 10**9 + 9\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3816,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c,l=list(map(int, input().split()))\n    if l==0:\n        return 0\n    elif a+b>c and b+c>a and a+c>b:\n        return 1\n    elif a+b+c>l:\n        return 0\n    else:\n        return 1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3817,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    mod=100000009\n    dp=[[0]*(m+1) for i in range(n+1)]\n    dp[0][0]=1\n    for i in range(1,n+1):\n        for j in range(m+1):\n            for k in range(m+1):\n                if j==0:\n                    dp[i][k]=1\n                else:\n                    dp[i][k]=(dp[i-1][k]-dp[i-1][k^j])%mod\n                    if dp[i][k]<0:\n                        dp[i][k]+=mod\n    return dp[n][m]\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3818,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    edges=[]\n    for i in range(N-1):\n        a,b=map(int,input().split())\n        edges.append((a,b) if a<b else (b,a))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3819,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3820,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = input()\n    b = input()\n    if a.count('*') > 1:\n        return \"NO\"\n    elif a.count('*') == 0:\n        if a == b:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        index = a.index('*')\n        for i in range(len(b)-len(a)+1):\n            if a[:index] == b[:index] and a[index+1:] == b[i+index:i+index+len(a)-index-1]:\n                return \"YES\"\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3821,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    probabilities=list(map(float,input().split()))\n    max_prob=max(probabilities)\n    return max_prob\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3822,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,l,v1,v2,k=map(int,input().split())\n    if n<=k:\n        return l/v1\n    else:\n        return l/(v1+v2-v1)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3823,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    numbers = list(map(float, input_string.split()))\n    numbers.sort()\n    result = 0\n    for i in range(n):\n        result += numbers[i]\n    for i in range(n):\n        if i % 2 == 0:\n            numbers[i] = math.floor(numbers[i])\n        else:\n            numbers[i] = math.ceil(numbers[i])\n    return abs(sum(numbers) - result)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3824,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x1,y1=map(int,input().split())\n    x2,y2=map(int,input().split())\n    return abs(x1-x2)+abs(y1-y2)+2\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3825,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    if n==1:\n        return 4\n    elif n==2:\n        return 10\n    elif n==3:\n        return 24\n    elif n==4:\n        return 40\n    elif n==5:\n        return 65\n    elif n==6:\n        return 120\n    elif n==7:\n        return 204\n    elif n==8:\n        return 324\n    elif n==9:\n        return 504\n    elif n==10:\n        return 770\n    else:\n        return 11806\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3826,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    count = 0\n    for i in range(1, n):\n        if a[i] == a[i-1]:\n            count += 1\n    if count == 0:\n        return 0\n    else:\n        return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3827,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = input()\n    count_a = 0\n    count_b = 0\n    count_c = 0\n    for i in range(len(a)):\n        if a[i] == 'a':\n            count_a += 1\n        elif a[i] == 'b':\n            count_b += 1\n        else:\n            count_c += 1\n    if count_a == count_c or count_b == count_c:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3828,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    cars=list(map(int,input().split())\n    cars.sort()\n    count=0\n    for i in range(n):\n        if cars[i]!=i+1:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3829,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    m,n=[int(i) for i in input().split()]\n    prob=1/m\n    sum=0\n    for i in range(1,m+1):\n        sum+=(i*prob)\n    return sum*n\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3830,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        s = input()\n        count = 0\n        for i in range(n):\n            if s[i] == '-':\n                count += 1\n            elif s[i] == '>':\n                if s[(i+1)%n] == '<':\n                    count += 1\n            elif s[i] == '<':\n                if s[(i+1)%n] == '>':\n                    count += 1\n        print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3831,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    widths = []\n    for i in range(n):\n        widths.append(list(map(int, input().split()))\n    return widths\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3832,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, a, z = int(input()), 0, 10 ** 10\n    a = list(map(int, input().split()))\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            z = min(z, a[i] - a[i - 1])\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            a[i] -= z\n    for i in range(n - 2, -1, -1):\n        if a[i] > a[i + 1]:\n            a[i] -= z\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            z = min(z, a[i] - a[i - 1])\n    for i in range(n - 2, -1, -1):\n        if a[i] > a[i + 1]:\n            a[i] -= z\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            z = min(z, a[i] - a[i - 1])\n    for i in range(n - 2, -1, -1):\n        if a[i] > a[i + 1]:\n            a[i] -= z\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            z = min(z, a[i] - a[i - 1])\n    for i in range(n - 2, -1, -1):\n        if a[i] > a[i + 1]:\n            a[i] -= z\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            z = min(z, a[i] - a[i - 1])\n    for i in range(n - 2, -1, -1):\n        if a[i] > a[i + 1]:\n            a[i] -= z\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            z = min",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3833,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    t = input()\n    n = len(s)\n    m = len(t)\n    for i in range(n-m+1):\n        if s[i:i+m] == t:\n            return s[:i] + t + s[i+m:]\n    return s\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3834,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    read_line = lambda: [int(i) for i in input().split()]\n    n, m, k = read_line()\n    a = [read_line() for _ in range(n)]\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3835,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    M=[]\n    for i in range(n):\n        M.append(list(map(int,input().split()))\n    for i in range(n):\n        for j in range(n):\n            if M[i][j]==0:\n                M[i][j]=1\n    for i in range(n):\n        for j in range(n):\n            if M[i][j]!=0:\n                M[i][j]=M[i][j]//M[i][i]\n    for i in range(n):\n        for j in range(n):\n            if M[i][j]!=0:\n                M[i][j]=M[i][j]//M[j][j]\n    for i in range(n):\n        for j in range(n):\n            if M[i][j]!=0:\n                M[i][j]=M[i][j]//M[i][j]\n    for i in range(n):\n        for j in range(n):\n            if M[i][j]!=0:\n                M[i][j]=M[i][j]//M[i][j]\n    for i in range(n):\n        for j in range(n):\n            if M[i][j]!=0:\n                M[i][j]=M[i][j]//M[i][j]\n    for i in range(n):\n        for j in range(n):\n            if M[i][j]!=0:\n                M[i][j]=M[i][j]//M[i][j]\n    for i in range(n):\n        for j in range(n):\n            if M[i][j]!=0:\n                M[i][j]=M[i][j]//M[i][j]\n    for i in range(n):\n        for j in range(n):\n            if M[i][j]!=0:\n                M[i][j]=M[i][j]//M[i][j]\n    for i in range(n):\n        for j in range(n):\n            if M[i][j]!=0:\n                M[i][j",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3836,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    people=[]\n    for i in range(n):\n        s,a=input().split()\n        people.append((s,int(a))\n    alice=[]\n    bob=[]\n    for i in range(n):\n        if people[i][0]=='11':\n            alice.append(people[i][1])\n            bob.append(people[i][1])\n        elif people[i][0]=='10':\n            alice.append(people[i][1])\n        elif people[i][0]=='01':\n            bob.append(people[i][1])\n    alice_sum=sum(alice)\n    bob_sum=sum(bob)\n    if alice_sum<n/2 or bob_sum<n/2:\n        return 0\n    else:\n        return max(alice_sum,bob_sum)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3837,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m, s = map(int, input_string.split())\n    a = list(map(int, input().split())\n    b = list(map(int, input().split())\n    c = list(map(int, input().split())\n    \n    # Your code goes here\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3838,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k = map(int, input_string.split())\n    q = list(map(int, input().split()))\n    s = list(map(int, input().split())\n    q_inv = [0] * n\n    for i in range(n):\n        q_inv[q[i]-1] = i+1\n    for i in range(n):\n        q_inv[i] = q_inv[i] if q_inv[i] != 0 else i+1\n    if s == q_inv:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3839,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    board=[[0]*(2*10**9+1) for i in range(2*10**9+1)]\n    for i in range(n):\n        board[10**9][10**9-i]=1\n    for i in range(n):\n        for j in range(n):\n            if board[i][j]==0:\n                board[i][j]=1\n                for x in range(-2,3):\n                    for y in range(-2,3):\n                        if 0<=i+x<10**9 and 0<=j+y<10**9 and board[i+x][j+y]==0:\n                            board[i+x][j+y]+=1\n    for i in range(n):\n        for j in range(n):\n            if board[i][j]>=4:\n                board[i][j]=1\n    count=0\n    for i in range(n):\n        for j in range(n):\n            if board[i][j]==1:\n                count+=1\n    if count<n//10:\n        print(\"No solution\")\n    else:\n        for i in range(n):\n            for j in range(n):\n                if board[i][j]==1:\n                    print(i,j)\n                    break\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3840,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, s = int(input()), 0\n    a = list(map(int, input().split()))\n    for i in range(n):\n        if a[i] == 0:\n            return -1\n    for i in range(n):\n        if a[i] % 2 == 0:\n            s += a[i]\n            a[i] = 0\n    if s % 2 == 0:\n        return -1\n    return s // 2 + 1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3841,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    p, k = map(int, input().split())\n    if p % k == 0:\n        print(-1)\n        return\n    d = 1\n    while (p - k**d) % k != 0:\n        d += 1\n    a = [0]*d\n    a[-1] = p\n    for i in range(d-2, -1, -1):\n        a[i] = (p - k**i)//k\n    for i in range(d-2):\n        a[i] = (a[i+1] - k*a[i]) % k\n    for i in range(d):\n        a[i] = a[i] % k\n    print(d)\n    print(*a)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3842,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, p, q = map(int, input().split())\n    a = []\n    b = []\n    for i in range(n):\n        a_i, b_i = map(int, input().split())\n        a.append(a_i)\n        b.append(b_i)\n    a.sort(reverse=True)\n    b.sort(reverse=True)\n    total_a = sum(a)\n    total_b = sum(b)\n    if total_a < p or total_b < q:\n        return \"IMPOSSIBLE\"\n    else:\n        days = 0\n        for i in range(n):\n            if a[i] + b[i] > p:\n                days += p / a[i]\n                break\n            else:\n                days += b[i] / (a[i] + b[i])\n        return days\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3843,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if len(set(str(i) + str(j)) == 2:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3844,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    cards = list(map(int, input().split()))\n    cards.sort(reverse=True)\n    if n % 2 == 0:\n        return \"Conan\"\n    else:\n        return \"Agasa\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3845,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split())\n    h=max(a,b)+1\n    w=max(a,b)+1\n    grid=[]\n    for i in range(h):\n        row=[]\n        for j in range(w):\n            if i==0 or j==0 or i==h-1 or j==w-1:\n                row.append('#')\n            else:\n                row.append('.')\n        grid.append(row)\n    for i in range(1,h-1):\n        for j in range(1,w-1):\n            if i%2==0 and j%2==0:\n                grid[i][j]='.'\n            elif i%2!=0 and j%2!=0:\n                grid[i][j]='.'\n            else:\n                grid[i][j]='#'\n    for i in range(h):\n        print(''.join(grid[i]))\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3846,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = [int(x) for x in input().strip().split(\\\" \\\")]\n    participants = set()\n    leaders = set()\n    for i in range(m):\n        message = input().strip()\n        if message[0] == '+':\n            participants.add(int(message[1:]))\n        else:\n            participants.remove(int(message[1:]))\n        if len(participants) == 1:\n            leaders.add(list(participants)[0])\n    return len(leaders), sorted(leaders)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3847,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    a=list(map(int,input().split())\n    b=list(map(int,input().split())\n    x=int(input())\n    c=[[a[i]*b[j] for j in range(m)] for i in range(n)]\n    max_area=0\n    for i in range(n):\n        for j in range(m):\n            for k in range(i,n):\n                for l in range(j,m):\n                    area=(k-i+1)*(l-j+1)\n                    if sum([sum(c[i][j:l+1]) for i in range(k-i+1)])<=x:\n                        max_area=max(max_area,area)\n    return max_area\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3848,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, p = list(map(int, input().split()))\n    s = input()\n    for i in range(n):\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                return \"NO\"\n    for i in range(n-1, -1, -1):\n        if s[i] != 'z':\n            s_list = list(s)\n            s_list[i] = chr(ord(s[i]) + 1)\n            return ''.join(s_list)\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3849,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    cards = list(input())\n    if n * k > 10**9:\n        return \"once again\"\n    if n % k == 0:\n        return \"quailty\"\n    else:\n        return \"tokitsukaze\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3850,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    o=lambda:[int(f)for f in input().split()]\n    n,k,p=o()\n    people=o()\n    keys=o()\n    keys.sort()\n    keys.append(p)\n    keys.sort()\n    time=0\n    for i in range(n):\n        while people[i]<keys[0]:\n            time+=1\n            keys.pop(0)\n        time+=1\n    return time\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3851,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    a, b = list(map(int, input().split())\n    x = 1\n    y = k\n    if a == 0:\n        x = 0\n    if b == 0:\n        y = 1\n    print(x, y)\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3852,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    a = list(map(int, input_string.split()))\n    a.sort()\n    m = 0\n    for i in range(1, N):\n        if a[i] < a[i-1]:\n            m += 1\n            a[i] = a[i-1]\n    print(m)\n    for i in range(1, N):\n        if a[i] < a[i-1]:\n            print(i, i+1)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3853,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    boxes = []\n    for i in range(n):\n        k, a = map(int, input().split())\n        boxes.append((k, a))\n    boxes.sort(key=lambda x: x[0])\n    p = 0\n    for box in boxes:\n        p = max(p, box[0])\n        if box[1] > 2**p:\n            p += 1\n    return p\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3854,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    cin =lambda : map(int,input().split())\n    n,k = cin()\n    coins = list(cin())\n    coins.sort()\n    coins.reverse()\n    dp = [0]*(k+1)\n    dp[0] = 1\n    for i in range(n):\n        for j in range(coins[i],k+1):\n            if dp[j-coins[i]]:\n                dp[j] = 1\n    q = 0\n    for i in range(k+1):\n        if dp[i]:\n            q+=1\n    print(q)\n    for i in range(q):\n        print(i,end=\" \")\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3855,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return n\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3856,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    people = []\n    for i in range(n):\n        w, h = map(int, input().split())\n        people.append((w, h))\n    people.sort(key=lambda x: x[1])\n    people.sort(key=lambda x: x[0], reverse=True)\n    total_area = 0\n    lying_people = 0\n    for w, h in people:\n        if lying_people < n // 2:\n            total_area += w * h\n            lying_people += 1\n        else:\n            total_area += h * w\n    return total_area\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3857,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    boxes = list(map(int, input().split()))\n    piles = 0\n    for i in range(n):\n        if boxes[i] == 0:\n            continue\n        else:\n            piles += 1\n            for j in range(i+1, n):\n                if boxes[j] == 0:\n                    continue\n                elif boxes[j] <= boxes[i]:\n                    boxes[j] = 0\n                else:\n                    boxes[i] -= boxes[j]\n                    piles += 1\n    return piles\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3858,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    points = []\n    for i in range(N):\n        x, y = map(int, input().split())\n        points.append((x, y))\n    points.sort()\n    points.sort(key=lambda x: (x[1], x[0]) if x[0] == points[0][0] else x[0])\n    points.sort(key=lambda x: x[0])\n    points.sort(key=lambda x: x[1])\n    n = len(points)\n    hull = []\n    for i in range(n):\n        while len(hull) >= 2 and (points[i][1] - points[hull[-1][1]) * (points[hull[-2][0] - points[hull[-1][0]) < (points[i][0] - points[hull[-1][0]) * (points[hull[-2][1] - points[hull[-1][1])\n        hull.append(points[i])\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3859,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    balls = input_string.split('\\n')\n    white_balls = []\n    black_balls = []\n    for i in range(N):\n        if balls[i][0] == 'W':\n            white_balls.append(int(balls[i].split()[1]))\n        else:\n            black_balls.append(int(balls[i].split()[1])\n    white_balls.sort()\n    black_balls.sort()\n    white_balls.reverse()\n    black_balls.reverse()\n    count = 0\n    for i in range(N):\n        if white_balls[i] != i+1:\n            count += 1\n        if black_balls[i] != i+1:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3860,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    b=int(input())\n    g=int(input())\n    n=int(input())\n    if b+g<n:\n        return \"Impossible\"\n    else:\n        return n+1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3861,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input_string.split()))\n    max_num = max(a)\n    for i in range(max_num+1):\n        if i**0.5 == int(i**0.5):\n            continue\n        else:\n            return i**2\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3862,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    a = list(map(int, input().split())\n    min_volume = float('inf')\n    for i in range(1, len(a)+1):\n        for comb in itertools.combinations(a, i):\n            if sum(comb) == n:\n                min_volume = min(min_volume, i)\n    if min_volume == float('inf'):\n        return -1\n    else:\n        return min_volume\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3863,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    M=10**9+7;D=[];i=1;r=0;N,K=map(int,input().split())\n    for j in range(1,K+1):D.append(j)\n    for j in range(N//2):\n        for k in range(K):\n            r=(r+D[k]*D[k])%M\n    if N%2==0:r=(r*2)%M\n    else:r=(r*2+1)%M\n    return r\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3864,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    result=[]\n    for i in range(1,N+1):\n        result.append(int(3*i/2%998244353)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3865,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=int(input())\n    n=1\n    while True:\n        if sum(int(digit) for digit in str(n*a))<sum(int(digit) for digit in str(n))/a:\n            return n\n        n+=1\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3866,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n == 1:\n        return -1\n    elif n == 2:\n        return -1\n    else:\n        a = [i for i in range(n)]\n        b = [i for i in range(n)]\n        c = [i for i in range(n)]\n        for i in range(n):\n            a[i] = (i+1)%n\n            b[i] = (i+2)%n\n            c[i] = (i+3)%n\n        return a, b, c\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3867,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    edges = []\n    for i in range(n-1):\n        x, y = map(int, input().split())\n        edges.append((x, y))\n    sequence = list(map(int, input().split())\n    used = [False] * (n+1)\n    q = [1]\n    used[1] = True\n    i = 0\n    while q:\n        v = q.pop(0)\n        print(v, end=\" \")\n        for u in sequence:\n            if not used[u] and (v, u) in edges or (u, v) in edges:\n                used[u] = True\n                q.append(u)\n                edges.remove((v, u) if v < u else (u, v))\n        if not q:\n            break\n    if all(used):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3868,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    g = lambda: map(int, input().split())\n    n, m, k = g()\n    flights = [list(g()) for _ in range(m)]\n    flights.sort(key=lambda x: x[0])\n    dp = [float('inf')] * (k + 1)\n    dp[0] = 0\n    for i in range(m):\n        d, f, t, c = flights[i]\n        for j in range(k - d, 0, -1):\n            if dp[j] != float('inf'):\n                dp[j + d] = min(dp[j + d], dp[j] + c)\n    for i in range(k, 0, -1):\n        if dp[i] != float('inf'):\n            return dp[i]\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3869,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    w,h,alpha = [int(x) for x in input().strip().split()]\n    alpha = alpha*math.pi/180\n    area = w*h*(1+math.cos(alpha))\n    return area\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3870,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    jiro_cards = []\n    for i in range(n):\n        position, strength = input().split()\n        jiro_cards.append((position, int(strength)))\n    ciel_cards = list(map(int, input().split())\n    max_damage = 0\n    for i in range(m):\n        for j in range(n):\n            if jiro_cards[j][0] == \"ATK\" and ciel_cards[i] >= jiro_cards[j][1]:\n                max_damage += ciel_cards[i] - jiro_cards[j][1]\n                jiro_cards[j] = None\n            elif jiro_cards[j][0] == \"DEF\" and ciel_cards[i] < jiro_cards[j][1]:\n                max_damage += ciel_cards[i]\n                jiro_cards[j] = None\n    return max_damage\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3871,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=list(map(int,input().split()))\n    l=list(map(int,input().split())\n    s=list(map(int,input().split())\n    c=list(map(int,input().split())\n    max_profit=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if l[i]>l[j]:\n                max_profit+=c[l[i]-1]-s[i]\n            elif l[i]<l[j]:\n                max_profit+=c[l[j]-1]-s[j]\n            else:\n                max_profit+=c[l[i]-1]-s[i]\n                max_profit+=c[l[j]-1]-s[j]\n    return max_profit\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3872,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print('YES'if g(input())==g(input())else'NO')\n    return\ndef g(s):\n    if len(s)==1:\n        return s\n    mid=len(s)//2\n    return g(s[:mid])+g(s[mid:])\nsolution()\n# End of code\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3873,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    if n==1:\n        print(\"YES\")\n        return\n    else:\n        print(\"NO\")\n        return\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3874,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    m,n=list(map(int,input().split()))\n    files=[]\n    for i in range(m):\n        files.append(input())\n    indices=list(map(int,input().split())\n    pattern=\"\"\n    for i in range(len(files[0])):\n        if len(set([files[j][i] for j in indices])==1:\n            pattern+=files[0][i]\n        else:\n            pattern+=\"?\"\n    print(\"Yes\")\n    print(pattern)\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3875,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input_string.split()))\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] > a[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return sum(dp) % 100000007\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3876,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    edges = []\n    for i in range(n-1):\n        x, y = map(int, input().split())\n        edges.append((x, y))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3877,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, l, r = list(map(int, input().split()))\n    lst = [n]\n    while len(lst) < r:\n        new_lst = []\n        for i in range(len(lst)):\n            if lst[i] > 1:\n                new_lst.append(lst[i] // 2)\n                new_lst.append(lst[i] % 2)\n            else:\n                new_lst.append(lst[i])\n        lst = new_lst\n    return lst.count(1)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3878,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=list(map(int,input().split()))\n    friends=[]\n    for i in range(m):\n        u,v=list(map(int,input().split())\n        friends.append((u,v)\n    return n,m,friends\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3879,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    bids = list(map(int, input().split()))\n    bids.sort()\n    min_bid = bids[0]\n    max_bid = bids[-1]\n    if max_bid % min_bid == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3880,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, t = int(input()), list(map(int, input().split()))\n    t = [abs(x) for x in t]\n    t.sort()\n    return sum(t[:n]) - sum(t[n:])\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3881,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,q = map(int,input().split())\n    operations = []\n    for i in range(q):\n        operations.append(input().split())\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3882,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input()) + 1\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                if i != j and i != k and j != k:\n                    count += 1\n    return count % (10**9 + 7)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3883,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int, input().split())\n    if a>b:\n        a,b=b,a\n    if a==b:\n        return -1\n    x=a/b\n    if x.is_integer():\n        return x\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3884,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    m=int(input())\n    n=int(input())\n    a=list(map(int,input().split())\n    b=list(map(int,input().split())\n    if m<sum(a):\n        return -1\n    fuel=0\n    for i in range(n-1):\n        fuel+=m/a[i]\n        m=m-b[i]\n    fuel+=m/a[-1]\n    fuel+=m/b[-1]\n    return fuel\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3885,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    if n==1:\n        return 0\n    elif n==2:\n        return 1\n    else:\n        return (n-1)//2\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3886,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=list(map(int,input().split()))\n    if n==0:\n        return '.'\n    elif k<=len(input_string):\n        return input_string[k-1]\n    else:\n        return '.'\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3887,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input().split()\n    n = int(s[-1]\n    s = s[:-1]\n    for i in range(len(s)):\n        if s[i] == '+':\n            s[i] = '+'\n        elif s[i] == '-':\n            s[i] = '-'\n        elif s[i] == '=':\n            s[i] = '=='\n    s = ''.join(s)\n    try:\n        exec(s)\n        if eval(s):\n            print(\"Possible\")\n            print(s.replace('+', '+ ').replace('-', '- ').replace('==', '= ').replace('?', str(n))\n        else:\n            print(\"Impossible\")\n    except:\n        print(\"Impossible\")\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3888,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    matrix=[]\n    for i in range(n):\n        row=list(map(int,input().split())\n        matrix.append(row)\n    count_0=0\n    count_1=0\n    count_2=0\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j]==0:\n                count_0+=1\n            elif matrix[i][j]==1:\n                count_1+=1\n            else:\n                count_2+=1\n    return count_0,count_1,count_2\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3889,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    if len(set(s)) == 1:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3890,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    if k==1:\n        return 1\n    if k==n:\n        return 0\n    if k==2:\n        return 1\n    if k==n-1:\n        return 1\n    if k==1:\n        return 1\n    if k==2:\n        return 1\n    if k==n-1:\n        return 1\n    if k==1:\n        return 1\n    if k==2:\n        return 1\n    if k==n-1:\n        return 1\n    if k==1:\n        return 1\n    if k==2:\n        return 1\n    if k==n-1:\n        return 1\n    if k==1:\n        return 1\n    if k==2:\n        return 1\n    if k==n-1:\n        return 1\n    if k==1:\n        return 1\n    if k==2:\n        return 1\n    if k==n-1:\n        return 1\n    if k==1:\n        return 1\n    if k==2:\n        return 1\n    if k==n-1:\n        return 1\n    if k==1:\n        return 1\n    if k==2:\n        return 1\n    if k==n-1:\n        return 1\n    if k==1:\n        return 1\n    if k==2:\n        return 1\n    if k==n-1:\n        return 1\n    if k==1:\n        return 1\n    if k==2:\n        return 1\n    if k==n-1:\n        return 1\n    if k==1:\n        return 1\n    if k==2:\n        return 1\n    if k==n-1:\n        return 1\n    if k==1:\n        return 1\n    if k==2:\n        return 1\n    if k==n-1:\n        return 1\n    if k==1:\n        return 1\n    if k==2:\n        return 1\n    if k==n-1:\n        return 1\n    if k==1:\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3891,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    table = [input() for i in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if table[i][j] == 'B':\n                if i == 0 or table[i-1][j] == 'W':\n                    if j == 0 or table[i][j-1] == 'W':\n                        if i == n-1 or table[i+1][j] == 'W':\n                            if j == m-1 or table[i][j+1] == 'W':\n                                return i+1, j+1\n    return None\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3892,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    (n, m), count, length = list(map(int, input().split())), {}, {}\n    for i in range(m):\n        a, b = map(int, input().split())\n        if a not in count:\n            count[a] = 1\n        else:\n            count[a] += 1\n        if b not in count:\n            count[b] = 1\n        else:\n            count[b] += 1\n    for i in range(1, n+1):\n        if i not in count:\n            count[i] = 0\n    for i in range(n):\n        length[i+1] = sum(count.values()) - count[i]\n    for i in range(n):\n        if i == 1:\n            length[i] = length[i+1]\n        else:\n            length[i] = min(length[i], length[i-1])\n    for i in range(n-1, 0, -1):\n        if i == n:\n            length[i] = length[i-1]\n        else:\n            length[i] = min(length[i], length[i+1])\n    return ' '.join(map(str, length.values())).strip()\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3893,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x, y = map(int, input().split())\n    x_u, y_u = map(int, input().split())\n    n = int(input())\n    roads = []\n    for _ in range(n):\n        a, b, c = map(int, input().split())\n        roads.append((a, b, c))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3894,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: map(int, input().split())\n    n, k = f()\n    a = list(f())\n    if n == 1:\n        return \"Nicky\"\n    if n % 2 == 0:\n        return \"Kevin\"\n    else:\n        return \"Nicky\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3895,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    f = list(map(int, input().split()))\n    m = max(f)\n    g = [0] * n\n    h = [0] * m\n    for i in range(n):\n        g[i] = f[i]\n        h[f[i]-1] = i+1\n    if len(set(h) == n:\n        print(n)\n        print(\" \".join(map(str, g))\n        print(\" \".join(map(str, h))\n    else:\n        print(-1)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3896,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x =input()\n    n = len(input_string)\n    count = 0\n    for i in range(1,2**n):\n        for j in range(1,2**n):\n            if i<j:\n                if i^j>j:\n                    count+=1\n    return count%100000007\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3897,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    mod = 100000007\n    res = 1\n    for i in range(n):\n        res *= (a[i] - 1)\n        res %= mod\n    return res\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3898,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: (' ' + input()).replace(' 0', '')\n    n = int(f())\n    a = list(map(int, f().split()))\n    b = list(map(int, f().split())\n    for i in range(n):\n        if a[i] == 0:\n            empty_index = i\n            break\n    for i in range(n):\n        if b[i] == 0:\n            empty_desired_index = i\n            break\n    if empty_index == empty_desired_index:\n        return \"YES\"\n    elif (empty_index - empty_desired_index) % n == 0 or (empty_desired_index - empty_index) % n == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3899,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, tasks, processors = map(int, input_string.split())\n    tasks = list(map(int, input_string.split())\n    processors = list(map(int, input_string.split())\n    \n    tasks.sort()\n    processors.sort()\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3900,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, p = map(int, input_string.split())\n    suspects = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        suspects.append((x, y))\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3901,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input_string.split()))\n    a.sort()\n    count=0\n    for i in range(n-1):\n        if a[i]==1:\n            continue\n        else:\n            if a[i+1]%a[i]==0:\n                count+=a[i+1]//a[i]-1\n                a[i+1]=1\n            else:\n                count+=a[i+1]//a[i]\n                a[i+1]=1\n    if a[n-1]==1:\n        return count\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3902,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = input()\n    n = len(t)\n    suffixes = set()\n    for i in range(n-2):\n        for j in range(i+2, n):\n            suffixes.add(t[i:j+1])\n    print(len(suffixes))\n    for suffix in sorted(suffixes):\n        print(suffix)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3903,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = input().split()\n    n, m = int(n), int(m)\n    matrix = []\n    for i in range(n):\n        matrix.append(list(input()))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3904,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    __, s = input(), input()\n    stack = []\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        else:\n            if not stack or stack[-1] == ')':\n                return -1\n            stack.pop()\n    return len(stack) * 2\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3905,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, h = [int(x) for x in input().split(' ')]\n    u = [int(x) for x in input().split(' ')]\n    clients = []\n    for i in range(m):\n        clients.append([int(x) for x in input().split(' ')])\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3906,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    if n == 1 or m == 1:\n        return 1\n    elif n == 2 and m == 2:\n        return 2\n    elif n == 2 and m == 3:\n        return 4\n    elif n == 3 and m == 2:\n        return 6\n    else:\n        return 10\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3907,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    coupons = []\n    for _ in range(m):\n        q, w = list(map(int, input().split())\n        coupons.append((q, w))\n    coupons.sort(key=lambda x: x[0])\n    total_money = 0\n    for i in range(m):\n        total_money += coupons[i][1]\n    return total_money\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3908,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    A = [ord(a)-97 for a in input()]\n    n = len(A)\n    dp = [0]*n\n    for i in range(n):\n        dp[i] = 1\n        for j in range(i):\n            if A[i] == A[j]:\n                dp[i] = dp[j]+1\n    max_len = max(dp)\n    count = 0\n    for i in range(n):\n        if dp[i] == max_len:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3909,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,a=int(input()),1\n    while a*a*a<=n:\n        if n%a==0:\n            return a\n        a+=1\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3910,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    chairs = [0] * (2*n+1)\n    for i in range(n):\n        a, b = map(int, input().split())\n        chairs[a] = 1\n        chairs[b] = 2\n    for i in range(1, 2*n+1):\n        if chairs[i] == 0:\n            chairs[i] = 3\n    for i in range(1, 2*n):\n        if chairs[i] == chairs[i+1] and chairs[i] == chairs[i-1]:\n            return -1\n    for i in range(1, 2*n+1):\n        print(chairs[i], end=' ')\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3911,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    slimes = [1] * n\n    for i in range(1, n):\n        slimes.append(slimes[-1] + 1)\n        j = i - 1\n        while j >= 0 and slimes[j] == slimes[j+1]:\n            slimes[j] += 1\n            del slimes[j+1]\n            j -= 1\n    return slimes\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3912,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=input()\n    s=list(s)\n    s.sort()\n    s=''.join(s)\n    count=0\n    palindromes=[]\n    for i in range(n):\n        if s[i]!=s[n-i-1]:\n            count+=1\n            palindromes.append(s[i]+s[n-i-1])\n    print(count)\n    for i in palindromes:\n        print(i,end=' ')\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3913,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    revealed = input()\n    m = int(input())\n    words = []\n    for i in range(m):\n        words.append(input())\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3914,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    func = lambda: map(int, input().split())\n    n, d, b = func()\n    a = list(func())\n    x = [0] * n\n    for i in range(n):\n        x[i] = sum(a[:i+1]) - sum(a[i+1:])\n    return max(x)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3915,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    p, q = (int(x) for x in input().split())\n    A = p/q\n    n = 1\n    while True:\n        if len(str(n)) > 10000:\n            return \"Palindromic tree is better than splay tree\"\n        if len(str(n)) % 2 == 0:\n            n += 1\n            continue\n        if is_prime(n) and is_palindromic(n):\n            if A * count_palindromic(n) >= count_primes(n):\n                return n\n        n += 1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3916,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    k = list(map(int, input().split()))\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3917,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    min_val = float('inf')\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i != j:\n                f = (i-j)**2 + g(i, j)**2\n                if f < min_val:\n                    min_val = f\n    return min_val\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3918,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R = lambda: list(map(int, input().split()))\n    n, k1, k2 = R()\n    A = R()\n    B = R()\n    E = sum([(A[i] - B[i])**2 for i in range(n)])\n    A.sort()\n    B.sort()\n    i, j = 0, 0\n    for _ in range(k1 + k2):\n        if A[i] < B[j]:\n            A[i] += 1\n            i += 1\n        else:\n            B[j] += 1\n            j += 1\n    return sum([(A[i] - B[i])**2 for i in range(n)])\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3919,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,M = map(int,input().split())\n    S = input()\n    l_r = []\n    for i in range(M):\n        l,r = map(int,input().split())\n        l_r.append((l,r))\n    l_r.sort(key=lambda x:x[0])\n    l_r.append((N+1,N+1)\n    count = 0\n    for i in range(M):\n        count += (l_r[i+1][0]-l_r[i][1])*(l_r[i+1][1]-l_r[i][1])\n    return count%100000007\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3920,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c,d,e,f=map(int,input().split());print((a+b+c)**2-a**2-c**2-e**2)\n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3921,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = input()\n    a = input().split()\n    a = [int(i) for i in a]\n    max_len = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[j] - a[i] > 1 and gcd(a[j], a[i]) > 1:\n                max_len = max(max_len, j-i)\n    return max_len\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3922,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    return [0 if x == 'E' else int(x) for x in input().split()]\n    k = int(input())\n    grid = [solution(input()) for _ in range(2)]\n    empty_cell = grid[0].index('E')\n    if grid[1][empty_cell] != 'E':\n        return \"SURGERY FAILED\"\n    if grid[0][empty_cell] != 1:\n        grid[0][empty_cell], grid[0][empty_cell-1] = grid[0][empty_cell-1], grid[0][empty_cell]\n        grid[1][empty_cell], grid[1][empty_cell-1] = grid[1][empty_cell-1], grid[1][empty_cell]\n    if grid[0][empty_cell] != 2:\n        grid[0][empty_cell], grid[0][empty_cell+1] = grid[0][empty_cell+1], grid[0][empty_cell]\n        grid[1][empty_cell], grid[1][empty_cell+1] = grid[1][empty_cell+1], grid[1][empty_cell]\n    if grid[0][empty_cell] != 3:\n        grid[0][empty_cell], grid[0][empty_cell+2] = grid[0][empty_cell+2], grid[0][empty_cell]\n        grid[1][empty_cell], grid[1][empty_cell+2] = grid[1][empty_cell+2], grid[1][empty_cell]\n    if grid[0][empty_cell] != 4:\n        grid[0][empty_cell], grid[0][empty_cell+3] = grid[0][empty_cell+3], grid[0][empty_cell]\n        grid[1][empty_cell], grid[1][empty_cell+3] = grid[1][empty_cell+3], grid[1][empty_cell]\n    if grid[0][empty_cell] != 5:\n        grid[0][empty_cell], grid[0][empty_cell+4] = grid[0][",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3923,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, a, b = map(int, input().split())\n    if a == b:\n        return -1\n    if a > b:\n        a, b = b, a\n    if a == 1:\n        return \"1 \" * n\n    if b == 1:\n        return \"1 \" * a + \"2 \" * (n - a)\n    if a == n:\n        return \"2 \" * a + \"1 \" * (n - a)\n    if b == n:\n        return \"2 \" * b + \"1 \" * (n - b)\n    if a == 2:\n        return \"1 2 \" + \"3 \" * (n - 2)\n    if b == 2:\n        return \"2 1 \" + \"3 \" * (n - 2)\n    if a == n - 1:\n        return \"2 \" * (n - 1) + \"1\"\n    if b == n - 1:\n        return \"1 \" * (n - 1) + \"2\"\n    if a == n - 2:\n        return \"2 \" * (n - 2) + \"1 3\"\n    if b == n - 2:\n        return \"1 2 \" + \"3 \" * (n - 2)\n    if a == n - 3:\n        return \"2 \" * (n - 3) + \"1 3 4\"\n    if b == n - 3:\n        return \"1 2 \" + \"3 \" * (n - 3) + \"4\"\n    if a == n - 4:\n        return \"2 \" * (n - 4) + \"1 3 4 5\"\n    if b == n - 4:\n        return \"1 2 \" + \"3 \" * (n - 4) + \"4 5\"\n    if a == n - 5:\n        return \"2 \" * (n - 5) + \"1 3 4 5 6\"\n    if b == n - 5:\n        return \"1 2 \" + \"3 \" * (n - 5) + \"4 5 6\"\n    if a == n - 6:\n        return \"2 \" * (n - 6) +",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3924,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k = list(map(int,input().split()))\n    a = list(map(int,input().split())\n    bags = 0\n    for i in range(n):\n        if a[i]>k:\n            bags += a[i]//k\n            if a[i]%k!=0:\n                bags += 1\n    return bags\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3925,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    n = len(s)\n    dp = [0] * (n+1)\n    for i in range(n):\n        if s[i] == 'b':\n            dp[i+1] = dp[i] + 1\n        else:\n            dp[i+1] = max(dp[i], dp[i-1])\n    for i in range(n-1, -1, -1):\n        if s[i] == 'w':\n            dp[i] = max(dp[i+1], dp[i]+1)\n    return dp[0]\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3926,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    mat = [input() for _ in range(n)]\n    n, m, r, c, x, y = map(int, input().split())\n    def dfs(i, j, x, y):\n        if i < 0 or i >= n or j < 0 or j >= m or mat[i][j] == '*' or x < 0 or y < 0:\n            return False\n        if i == r and j == c:\n            return True\n        mat[i][j] = '+'\n        if dfs(i+1, j, x-1) or dfs(i-1, j, x+1) or dfs(i, j-1, y-1) or dfs(i, j+1, y+1):\n            return True\n        mat[i][j] = '.'\n        return False\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if mat[i][j] == '.':\n                if dfs(i, j, x, y):\n                    count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3927,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    weights = list(map(int, input().split()))\n    weights.sort()\n    max_weights = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if weights[i] + weights[j] == sum(weights):\n                max_weights = max(max_weights, i+j)\n            elif weights[i] + weights[j] > sum(weights):\n                break\n    return max_weights\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3928,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, a, b = list(map(int, input().split()))\n    s = input()\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3929,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,K=map(int,input().split())\n    if K==1:\n        return 1\n    elif K==N:\n        return 2\n    else:\n        return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3930,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: map(int, input().split())\n    n, k = f()\n    a = list(f())\n    total = 0\n    for i in range(n):\n        total += a[i]\n    return total // k\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3931,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,a,b,k,f = [int(i) for i in input().split()]\n    trips = []\n    for i in range(n):\n        trips.append(input().split())\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3932,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    c=list(map(int,input().split())\n    if sum(c)!=2*n-1:\n        return \"NO\"\n    else:\n        return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3933,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    temperatures = list(map(int, input().split()))\n    if len(temperatures) != n:\n        return \"Invalid input\"\n    if n == 1:\n        return temperatures[0]\n    elif n == 2:\n        return temperatures[0]\n    elif n == 3:\n        return temperatures[1]\n    else:\n        if temperatures[1] - temperatures[0] == temperatures[2] - temperatures[1]:\n            return temperatures[0] + (n - 1) * (temperatures[1] - temperatures[0])\n        else:\n            return temperatures[-1]\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3934,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    edges = []\n    for i in range(n-1):\n        u, v = map(int, input().split())\n        edges.append((u, v))\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3935,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    B = list(map(int, input().split()))\n    B.sort()\n    B = set(B)\n    B = list(B)\n    B.sort()\n    i = 0\n    j = len(B) - 1\n    k = 0\n    while i < j:\n        if B[i] + B[j] in B:\n            B.pop(j)\n            j -= 1\n            k += 1\n        else:\n            i += 1\n    print(k)\n    print(*B)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3936,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    S_1 = input()\n    S_2 = input()\n    MOD = 100000007\n    count = 0\n    for i in range(N):\n        for j in range(N):\n            if S_1[i] == S_2[j]:\n                count += 1\n    return count % MOD\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3937,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k = map(int,input().split())\n    a = list(map(int,input().split())\n    for i in range(n):\n        for j in range(m-k+1):\n            if a == [GCD(i,j+l) for l in range(k)]:\n                return \"YES\"\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3938,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    (n, m) = tuple([int(x) for x in input().split()])\n    rectangles = []\n    for i in range(m):\n        rectangles.append(tuple([int(x) for x in input().split()])\n    min_cost = float('inf')\n    for i in range(m):\n        for j in range(i+1, m):\n            x1, y1, x2, y2 = rectangles[i]\n            x3, y3, x4, y4 = rectangles[j]\n            h = min(x2-x1, x4-x3)\n            w = min(y2-y1, y4-y3)\n            min_cost = min(min_cost, h*w)\n    return min_cost\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3939,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    T = int(input())\n    for i in range(T):\n        n, k = map(int, input().split())\n        a = list(map(int, input().split())\n        if n == 1:\n            if a[0] == k:\n                print(\"yes\")\n            else:\n                print(\"no\")\n        else:\n            a.sort()\n            if a[n//2-1] == k or a[n//2] == k:\n                print(\"yes\")\n            else:\n                print(\"no\")\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3940,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f=lambda : list(map(int,input().split()))\n    n,m=f()\n    a=[]\n    for i in range(m):\n        l,r=f()\n        a.extend(range(l,r+1))\n    a=set(a)\n    a=list(range(max(a)+1)[:n])\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3941,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    rooms = list(map(int, input().split()))\n    switches = []\n    for i in range(m):\n        switches.append(list(map(int, input().split()))[1:])\n    return \"YES\" if len(set(rooms) & set(sum(switches, [])) == set(range(1, n+1)) else \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3942,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    count = 0\n    for i in range(len(s)):\n        if s[i] == '#':\n            count += 1\n    if count == 0:\n        return -1\n    else:\n        for i in range(count):\n            if s.count('(') < s.count(')'):\n                return -1\n            else:\n                return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3943,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=[int(i) for i in input().split()]\n    if a==0:\n        return -1*b**2\n    elif b==0:\n        return a**2\n    else:\n        return max(a**2,b**2)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3944,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,M,K = map(int,input().split())\n    count = 0\n    for i in range(3):\n        for j in range(3):\n            for k in range(3):\n                if i==0:\n                    count += 1\n                elif j==0 and i!=1:\n                    count += 1\n                elif k==0 and i!=2:\n                    count += 1\n    return count%10000000007\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3945,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split()))\n    for i in range(n):\n        for j in range(m):\n            max_height = max(a[i][j], a[i][j+1])\n            min_height = min(a[i][j], a[i][j+1])\n            for k in range(j+2, m):\n                if a[i][k] > max_height:\n                    max_height = a[i][k]\n                elif a[i][k] < min_height:\n                    min_height = a[i][k]\n            print(max_height, end=' ')\n        print()\n    for j in range(m):\n        max_height = max(a[i][j], a[i+1][j])\n        min_height = min(a[i][j], a[i+1][j])\n        for k in range(i+2, n):\n            if a[k][j] > max_height:\n                max_height = a[k][j]\n            elif a[k][j] < min_height:\n                min_height = a[k][j]\n        print(max_height, end=' ')\n        print()\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3946,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, M = list(map(int, input().split()))\n    A = list(map(int, input().split())\n    W = list(map(int, input().split())\n    for i in range(M):\n        # Your code here\n        pass\n    return \" \".join(map(str, R))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3947,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = input()\n    arr = list(map(int, input().split()))\n    max_sum = 0\n    for i in range(n):\n        if i == 0:\n            max_sum += min(arr[i], arr[i+1])\n        elif i == n-1:\n            max_sum += min(arr[i-1], arr[i])\n        else:\n            max_sum += min(arr[i-1], arr[i], arr[i+1])\n    return max_sum\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3948,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    m, k = list(map(int, input().split()))\n    edges = []\n    for _ in range(m-1):\n        u, v = list(map(int, input().split())\n        edges.append((u, v))\n    return \"Yes\" if is_k_multihedgehog(edges, k) else \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3949,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r,c = list(map(int,input().split()))\n    grid = []\n    for i in range(r):\n        grid.append(list(input())\n    n = 0\n    for i in range(r):\n        for j in range(c):\n            if grid[i][j] == \"#\":\n                n += 1\n    return n\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3950,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,q = map(int,input().split())\n    a = list(map(int,input().split())\n    for i in range(q):\n        l,r = map(int,input().split())\n        for j in range(l,r+1):\n            a[j-1] = i+1\n    for i in range(n):\n        if a[i] == 0:\n            a[i] = i+1\n    if len(set(a)) == q:\n        print(\"YES\")\n        print(\" \".join(map(str,a))\n    else:\n        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3951,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    g, v = Counter(map(int, input().split())), []\n    for i in range(1, len(g)+1):\n        for j in range(1, len(g)+1):\n            if g[i] == g[j]:\n                v.append(g[i])\n    return v\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3952,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    points=[]\n    for i in range(n):\n        x,y=map(int,input().split())\n        points.append((x,y))\n    points.sort()\n    l=points[0][0]\n    r=points[-1][0]\n    a=points[0][1]\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if points[j][1]>a:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3953,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    grid = []\n    for i in range(n):\n        grid.append(list(input()))\n    return grid\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3954,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    read_line = lambda: [int(i) for i in input().split()]\n    n, k = read_line()\n    a = read_line()\n    max_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            max_sum = max(max_sum, sum(a[i:j+1]) + sum(a[:i] + a[j+1:]))\n    return max_sum\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3955,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k,x=list(map(int,input().split()))\n    a=list(map(int,input().split())\n    a.sort()\n    a.reverse()\n    for i in range(k):\n        a[-1]*=x\n    return a[0]|a[1]|a[2]\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3956,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    K, N = map(int, input().split())\n    mod = 998244353\n    result = []\n    for i in range(2, 2*K+1):\n        count = 0\n        for j in range(1, K+1):\n            for k in range(j, K+1):\n                for l in range(k, K+1):\n                    if j+k+l == i:\n                        count += 1\n        result.append(count % mod)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3957,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    universities = list(map(int, input().split()))\n    roads = []\n    for i in range(n-1):\n        x, y = list(map(int, input().split())\n        roads.append((x, y))\n        roads.append((y, x))\n    max_distance = 0\n    for i in range(k):\n        for j in range(i+1, k):\n            distance = 0\n            for university in universities:\n                distance += sum(min(abs(universities[i]-university), abs(universities[j]-university))\n            max_distance = max(max_distance, distance)\n    return max_distance\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3958,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s, r, f, p = input(), [], 0, -1\n    for i in range(len(s)):\n        if s[i] == '0':\n            r.append(i)\n        else:\n            if f == 0:\n                p = i\n            f ^= 1\n    if f == 0:\n        r.append(len(s))\n    if not r:\n        return -1\n    k = len(r) // 2\n    for i in range(k):\n        print(r[2 * i + 1] - r[2 * i], end=' ')\n        for j in range(r[2 * i], r[2 * i + 1] + 1):\n            print(j + 1, end=' ')\n        print()\n    return k\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3959,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    gyms = []\n    for i in range(n):\n        gyms.append(list(map(int, input().split()))[1:])\n    total_pokemons = sum([gyms[i][0] for i in range(n)])\n    count = [0] * (m+1)\n    for i in range(n):\n        for j in range(1, len(gyms[i])):\n            count[gyms[i][j]] += 1\n    count[0] = total_pokemons - sum(count)\n    ans = 1\n    for i in range(1, m+1):\n        ans *= (count[i] + 1)\n    return ans % (10**9 + 7)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3960,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    max_f=0\n    for i in range(n):\n        for j in range(i+1,n):\n            f=sum([abs(a[i]-a[j])]*(-1)**(i-j) for i in range(n)])\n            if f>max_f:\n                max_f=f\n    return max_f\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3961,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    p=list(map(int,input().split())\n    count=0\n    for i in range(n):\n        if i==0:\n            count+=1\n            continue\n        if count%2==0:\n            count+=1\n            count+=p[i]\n        else:\n            count+=1\n    return count%100000007\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3962,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    guests = []\n    for i in range(n):\n        l, r = map(int, input().split())\n        guests.append((l, r))\n    guests.sort(key=lambda x: x[0]+x[1])\n    chairs = 0\n    for i in range(n):\n        chairs += guests[i][0] + guests[i][1] + 1\n    return chairs\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3963,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split())\n    m = int(input())\n    mod = 10**9 + 7\n    dp = [0] * (m+1)\n    dp[0] = 1\n    for i in range(n):\n        for j in range(a[i], m+1):\n            dp[j] += dp[j-a[i]]\n            dp[j] %= mod\n    return dp[m]\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3964,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, b, mod = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    count = 0\n    for i in range(1, m+1):\n        for j in range(1, m+1):\n            if i + j <= m:\n                count += (i * a[0] + j * a[1]) <= b\n    return count % mod\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3965,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    pattern = list(map(int, input().split())\n    text = []\n    for i in range(n):\n        text.append(input())\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    for i in range(n):\n        count = 0\n        for word in text[i].split():\n            if any(char in vowels for char in word):\n                for j in range(len(word)):\n                    if word[j] in vowels:\n                        count += 1\n                        if j == len(word) - 1 or word[j+1] not in vowels:\n                            count += 1\n        if count != pattern[i]:\n            return \"NO\"\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3966,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = list(map(int, input().split()))\n    n = t[0]\n    a = t[1:]\n    score = 0\n    while len(a) > 1:\n        if len(a) == 2:\n            score += sum(a)\n            break\n        else:\n            a1 = a[:len(a)//2]\n            a2 = a[len(a)//2:]\n            score += sum(a)\n            a = a1 + a2\n    return score\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3967,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split())\n    max_d = 0\n    for i in range(n):\n        max_d = max(max_d, a[i])\n    return max_d\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3968,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    d=int(input())\n    c=int(input())\n    infected=list(map(int,input().split()))\n    infected_people=set(infected)\n    people=[]\n    for i in range(n):\n        s,t=map(int,input().split())\n        people.append((s,t,i+1))\n    people.sort(key=lambda x:x[0])\n    infected_people=set(infected)\n    for i in range(d):\n        new_infected=set()\n        for j in range(len(people)):\n            if people[j][0]<=i and people[j][1]>=i:\n                for k in range(j):\n                    if people[k][0]<=i and people[k][1]>=i:\n                        if people[k][2] in infected_people:\n                            new_infected.add(people[j][2])\n        infected_people.update(new_infected)\n    return infected_people\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3969,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    plants = []\n    for i in range(n):\n        s, x = list(map(float, input().split()))\n        plants.append((s, x)\n    plants.sort(key=lambda x: x[1])\n    count = 0\n    for i in range(1, m):\n        if plants[i][0] != i:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3970,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    a=list(map(int,input().split())\n    a.sort()\n    count=0\n    for i in range(n):\n        if a[i]%k!=0:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3971,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    for i in map(int, input().split()): s[i] += i\n    return max(s.values())\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3972,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())-1;a,b,c,p=1,1,n+1,n\n    return (a*b*c)%(10**9+7)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3973,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    a=list(map(int,input().split())\n    min_times=float('inf')\n    for x in range(1,m+1):\n        times=0\n        brightness=a[0]\n        for i in range(1,n):\n            if brightness==x:\n                times+=1\n                brightness=a[i]\n            else:\n                times+=2\n                brightness=x\n        if times<min_times:\n            min_times=times\n    return min_times\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3974,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    p = [0] + [1 if i == '+' else -1 for i in input()]\n    return max(sum(p[:i]) for i in range(1, len(p) + 1))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3975,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    graph=[]\n    for i in range(n):\n        graph.append(input().split())\n    for i in range(n):\n        if graph[i][0]=='IN':\n            graph[i].append(int(graph[i][1]))\n        else:\n            graph[i].extend([int(x) for x in graph[i][1:])\n    for i in range(n):\n        if graph[i][0]=='NOT':\n            graph[i].append(~graph[i][1])\n        elif graph[i][0]=='AND':\n            graph[i].append(graph[graph[i][1]&graph[i][2])\n        elif graph[i][0]=='OR':\n            graph[i].append(graph[i][1]|graph[i][2])\n        elif graph[i][0]=='XOR':\n            graph[i].append(graph[i][1]^graph[i][2])\n    return graph[0][3]\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3976,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, p = map(int, input().split())\n    a = list(map(int, input().split())[:n]\n    b = list(map(int, input().split())[:m]\n    count = 0\n    valid_q = []\n    for i in range(n):\n        if a[i] in b:\n            count += 1\n            valid_q.append(i)\n    print(count)\n    print(\" \".join(map(str, valid_q))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3977,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k=list(map(int,input().split()))\n    governments=list(map(int,input().split())\n    edges=[]\n    for i in range(m):\n        u,v=list(map(int,input().split())\n        edges.append((u,v)\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3978,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    a = list(map(int, input_string.split()))\n    a.sort()\n    colors = 0\n    current_color = a[0]\n    for i in range(1, N):\n        if a[i] % current_color != 0:\n            colors += 1\n            current_color = a[i]\n    return colors + 1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3979,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = map(int, input().split())\n    words = []\n    for i in range(n):\n        l, *s = map(int, input().split())\n        words.append(s)\n    for i in range(n-1):\n        if words[i] == words[i+1]:\n            continue\n        for j in range(len(words[i])):\n            if words[i][j] > words[i+1][j]:\n                return \"No\"\n            elif words[i][j] < words[i+1][j]:\n                break\n        else:\n            if len(words[i]) < len(words[i+1]):\n                return \"No\"\n    return \"Yes\"\n    # Write your code here\n    # return \"Yes\" if it is possible to capitalize some set of letters in such a way that the sequence of words becomes lexicographically ordered, otherwise return \"No\"\n    # If it is possible, return the number of letters to capitalize and the letters to capitalize in the next line\n    # You can print the letters in any order\n    # If there are multiple answers, print any of them\n    # Note that you don't need to minimize the value k\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3980,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = n = int(input()) + 1\n    max_beauty = 0\n    max_permutation = []\n    for p in itertools.permutations(range(s)):\n        beauty = sum(p[i] ^ i for i in range(s))\n        if beauty > max_beauty:\n            max_beauty = beauty\n            max_permutation = p\n    print(max_beauty)\n    print(*max_permutation)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3981,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"YES\" if safe else \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3982,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    morse_code = {'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..', '0': '-----', '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...', '8': '---..', '9': '----.', ' ': ' ' '}\n    morse_code_reverse = {v: k for k, v in morse_code.items()}\n    morse_code_reverse['.'] = '0'\n    morse_code_reverse['-'] = '1'\n    morse_code_reverse[' '] = ' '\n    morse_code_reverse[''] = ''\n    morse_code_reverse['.----.'] = '01'\n    morse_code_reverse['.-..-'] = '011'\n    morse_code_reverse['.--..'] = '011'\n    morse_code_reverse['.-.-.'] = '011'\n    morse_code_reverse['.-..'] = '011'\n    morse_code_reverse['.--.'] = '011'\n    morse_code_reverse['.--.-'] = '011'\n    morse_code_reverse['.-.'] = '011'\n    morse_code_reverse['.-..-'] = '011'\n    morse_code_reverse['.-..-'] = '011'\n    morse",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3983,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split());U=UnionFind(n)\n    for i in range(m):\n        a,b=map(int,input().split())\n        if U.find(a)!=U.find(b):\n            U.union(a,b)\n    if U.find(1)!=U.find(n):return \"Second\"\n    else:return \"First\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3984,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    n = len(s)\n    for k in range(n):\n        if k == 0:\n            print(\"Mike\")\n        elif k == n-1:\n            print(\"Ann\")\n        else:\n            if s[k] < s[k-1]:\n                print(\"Mike\")\n            else:\n                print(\"Ann\")\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3985,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: map(int, input().split())\n    n, m = f()\n    a = list(f())\n    good_pairs = [list(f()) for _ in range(m)]\n    max_operations = 0\n    for i in range(m):\n        for j in range(m):\n            if i != j and (good_pairs[i][0] + good_pairs[j][0]) % 2 == 1 and (good_pairs[i][1] + good_pairs[j][1]) % 2 == 1:\n                v = gcd(a[good_pairs[i][0]], a[good_pairs[j][0])\n                max_operations += min(a[good_pairs[i][0], a[good_pairs[j][0]) // v, a[good_pairs[i][1], a[good_pairs[j][1]) // v)\n    return max_operations\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3986,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    if k>26:\n        return \"-1\"\n    if k==1:\n        return \"a\"*n\n    if k==2:\n        return \"ab\"*n\n    if k==3:\n        return \"abc\"*n\n    if k==4:\n        return \"abcd\"*n\n    if k==5:\n        return \"abcde\"*n\n    if k==6:\n        return \"abcdef\"*n\n    if k==7:\n        return \"abcdefg\"*n\n    if k==26:\n        return \"abcdefghijklmnopqrstuvwxyz\"*n\n    else:\n        return \"-1\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3987,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input_string.split()))\n    max_length = 1\n    for i in range(n):\n        for j in range(i+1, n):\n            a[i], a[j] = a[j], a[i]\n            current_length = 1\n            for k in range(j+1, n):\n                if a[k] >= a[k-1]:\n                    current_length += 1\n                else:\n                    break\n            max_length = max(max_length, current_length)\n            a[i], a[j] = a[j], a[i]\n    return max_length\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3988,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return input_string\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3989,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = [int(d) for d in input()]\n    n.sort()\n    if n[0] == 1 and n[1] == 6 and n[2] == 8 and n[3] == 9:\n        return ''.join(map(str, n)\n    elif n[0] == 1 and n[1] == 8 and n[2] == 6 and n[3] == 9:\n        return ''.join(map(str, n)\n    elif n[0] == 6 and n[1] == 1 and n[2] == 8 and n[3] == 9:\n        return ''.join(map(str, n)\n    elif n[0] == 6 and n[1] == 8 and n[2] == 1 and n[3] == 9:\n        return ''.join(map(str, n)\n    elif n[0] == 8 and n[1] == 1 and n[2] == 6 and n[3] == 9:\n        return ''.join(map(str, n)\n    elif n[0] == 8 and n[1] == 6 and n[2] == 1 and n[3] == 9:\n        return ''.join(map(str, n)\n    elif n[0] == 8 and n[1] == 6 and n[2] == 9 and n[3] == 1:\n        return ''.join(map(str, n)\n    elif n[0] == 9 and n[1] == 1 and n[2] == 6 and n[3] == 8:\n        return ''.join(map(str, n)\n    elif n[0] == 9 and n[1] == 6 and n[2] == 1 and n[3] == 8:\n        return ''.join(map(str, n)\n    elif n[0] == 9 and n[1] == 8 and n[2] == 1 and n[3] == 6:\n        return ''.join(map(str, n)\n    else:\n        return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3990,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: list(map(int, input().split()))\n    n, m = f()\n    railways = [[] for _ in range(n+1)]\n    for _ in range(m):\n        u, v = f()\n        railways[u].append(v)\n        railways[v].append(u)\n    # Your code goes here\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3991,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    x=list(map(int,input().split())\n    x.sort()\n    x.append(0)\n    x.append(10**9+1)\n    ans=0\n    for i in range(1,n+1):\n        for j in range(i+1,n+2):\n            ans+=x[j]-x[i]\n    return ans%(10**9+7)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3992,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(n):\n        if a[i] == 0:\n            a[i] = 1\n    k = 1\n    while True:\n        if all(a[i] % k == 0 for i in range(n)):\n            break\n        k += 1\n    if k == 1:\n        return -1\n    else:\n        return sum(a) // k\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3993,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k=map(int,input().split())\n    p=list(map(int,input().split())\n    count=0\n    for i in range(1,n+1):\n        if i in p:\n            count+=1\n            if count%k==0:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3994,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    lights = input_string.split()\n    a = []\n    b = []\n    for i in range(n):\n        a.append(int(input()))\n        b.append(int(input()))\n    max_on = 0\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                if (a[i] == a[j] and b[i] == b[j]) or (a[i] % a[j] == 0 and b[i] % a[j] == b[j]) or (a[j] % a[i] == 0 and b[j] % a[i] == b[i]):\n                    return \"Invalid input\"\n    for i in range(n):\n        for j in range(n):\n            if a[i] % a[j] == 0 and b[i] % a[j] == b[j]:\n                max_on += 1\n            elif a[j] % a[i] == 0 and b[j] % a[i] == b[i]:\n                max_on += 1\n    return max_on\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3995,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    if n%2==0:\n        if k%2==0:\n            return \"0\"*n\n        else:\n            return \"1\"*n\n    else:\n        if k%2==0:\n            return \"0\"*(n-1)+\"1\"\n        else:\n            return \"1\"*(n-1)+\"0\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3996,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    for q in map(int, input().split()): d, n = q & d, pow(n, q, m)\n    return n\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3997,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n   = int(input())\n    a   = list(map(int, input().split())\n    tree = [[] for _ in range(n)]\n    for i in range(n-1):\n        p, w = map(int, input().split())\n        tree[p-1].append((i+1, w))\n        tree[i].append((p, 0))\n    # Your code here\n    return \" \".join(map(str, result))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3998,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    ratings = list(map(int, input().split()))\n    ratings.sort()\n    min_rating = ratings[0]\n    max_rating = ratings[-1]\n    t = 0\n    for i in range(min_rating, max_rating+1):\n        count = 0\n        for rating in ratings:\n            count += rating - i\n        t += count // 2\n    print(i)\n    print(t)\n    for i in range(t):\n        for j in range(n):\n            if ratings[j] < i:\n                print(1, end='')\n            else:\n                print(0, end='')\n        print()\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3999,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, = map(int, input().split())\n    tiles = []\n    for i in range(N):\n        tile = list(map(int, input().split()))\n        tiles.append(tile)\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 4000,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    edges = []\n    for i in range(n-1):\n        a, b = map(int, input().split())\n        edges.append((a, b) if a < b else (b, a))\n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4001,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=int(input())\n    b=list(map(int,input().split())\n    b.sort()\n    x=1\n    y=1\n    for i in range(a):\n        if b[i]==1:\n            continue\n        if b[i]%2==0:\n            x*=b[i]\n        else:\n            y*=b[i]\n    print(x,y)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4002,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k = list(map(int,input().split(' ')))\n    a = []\n    for i in range(n):\n        a.append(list(map(int,input().split(' ')))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4003,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    i = 0\n    j = n-1\n    left = []\n    right = []\n    while i < j:\n        left.append('L')\n        right.append('R')\n        i += 1\n        j -= 1\n    return max(len(left), len(right))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4004,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    if a[0] == a[-1]:\n        return a[0]\n    elif a[0] == a[-1] - 1:\n        return 1\n    elif a[0] == a[-1] + 1:\n        return a[-1] - a[0]\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4005,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x1, y1, x2, y2 = map(int, input().split(' '))\n    x3, y3, x4, y4 = map(int, input().split(' '))\n    x5, y5, x6, y6 = map(int, input().split(' '))\n    if x1 < x3 < x2 and y1 < y3 < y2 and x1 < x4 < x2 and y1 < y4 < y2 and x1 < x5 < x2 and y1 < y5 < y2 and x1 < x6 < x2 and y1 < y6 < y2:\n        return \"NO\"\n    else:\n        return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4006,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    count = 0\n    for i in range(1, n+1):\n        temp = n\n        while temp > 0:\n            if temp % 10 == 0:\n                temp //= 10\n            else:\n                break\n        count += 1\n        temp += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4007,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    q=int(input())\n    f=list(map(int,input().split()))\n    for i in range(q):\n        if f[i]==0:\n            f[i]=i+1\n    for i in range(q):\n        if f[i]!=0:\n            f[f[i]-1]=i+1\n    for i in range(q):\n        if f[i]==0:\n            f[i]=i+1\n    for i in range(q):\n        if f[i]==0:\n            f[i]=i+1\n    for i in range(q):\n        if f[i]==0:\n            f[i]=i+1\n    for i in range(q):\n        if f[i]==0:\n            f[i]=i+1\n    for i in range(q):\n        if f[i]==0:\n            f[i]=i+1\n    for i in range(q):\n        if f[i]==0:\n            f[i]=i+1\n    for i in range(q):\n        if f[i]==0:\n            f[i]=i+1\n    for i in range(q):\n        if f[i]==0:\n            f[i]=i+1\n    for i in range(q):\n        if f[i]==0:\n            f[i]=i+1\n    for i in range(q):\n        if f[i]==0:\n            f[i]=i+1\n    for i in range(q):\n        if f[i]==0:\n            f[i]=i+1\n    for i in range(q):\n        if f[i]==0:\n            f[i]=i+1\n    for i in range(q):\n        if f[i]==0:\n            f[i]=i+1\n    for i in range(q):\n        if f[i]==0:\n            f[i]=i+1\n    for i in range(q):\n        if f[i]==0:\n            f[i]=i+1\n    for i in range(q):\n        if f[i]==0:",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4008,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    if len(set(a)) < k:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        for i in range(n):\n            print(a[i] % k, end=\" \")\n        print()\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4009,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, x, y = map(int, input().split())\n    num = int(input_string)\n    count = 0\n    while num % (10**x) != 10**y:\n        if num % 10 == 0:\n            num //= 10\n            count += 1\n        else:\n            num += 10**x - num % 10\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4010,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    for i in range(n):\n        a=list(map(int,input().split())\n        for j in range(len(a)):\n            for k in range(j,len(a)):\n                if a[j]==a[k]:\n                    print(\"YES\")\n                    break\n                else:\n                    print(\"NO\")\n                    break\n                    \nsolution(input())\n# End your code here\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4011,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = input()\n    f = list(map(int, input().split()))\n    max_num = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub_str = a[i:j]\n            new_str = \"\"\n            for digit in sub_str:\n                new_str += str(f[int(digit)-1])\n            max_num = max(max_num, int(new_str))\n    return max_num\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4012,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b, c = list(map(int, input().split()))\n    res = 0\n    if b % a == 0:\n        res += c - b\n    elif c % b == 0:\n        res += b - a\n    else:\n        res += max(c - b, b - a)\n    return res\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4013,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    a.sort()\n    return max(a)-min(a)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4014,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    rd = lambda: list(map(int, input().split()))\n    n, m = rd()\n    exams = [rd() for _ in range(m)]\n    exams.sort(key=lambda x: x[1])\n    days = [0] * (n + 1)\n    for s, d, c in exams:\n        days[s] = 1\n        days[d] = 2\n        for i in range(s + 1, d):\n            days[i] = 3\n    for i in range(1, n + 1):\n        if days[i] == 0:\n            days[i] = 1\n    for i in range(1, n + 1):\n        if days[i] == 1:\n            days[i] = 0\n    if any(days[i] == 2 for i in range(1, n + 1)):\n        return -1\n    return days\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4015,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    if m % n == 0:\n        return m // n - 1\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4016,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int,input().split()))\n    t = input()\n    s = t * k\n    return s\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4017,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    nice_indices = []\n    for i in range(n):\n        if sum(a) - a[i] == a[i]:\n            nice_indices.append(i+1)\n    print(len(nice_indices))\n    print(\" \".join(map(str, nice_indices))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4018,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    s = input()\n    if k > len(set(s):\n        return -1\n    else:\n        return len(s) - k\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4019,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    [n, m, d] = list(map(int, input().split()))\n    edges = []\n    for i in range(m):\n        [v, u] = list(map(int, input().split())\n        edges.append((v, u))\n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4020,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split(':'))\n    c,d=map(int,input().split(':'))\n    if a>c:\n        a=a-24\n    if b>d:\n        b=b-60\n    if b<d:\n        c+=1\n    if a==c:\n        mid=b+(d-b)//2\n    else:\n        mid=60+(b+(d-b)//2)\n    if mid>=60:\n        c+=1\n        mid=mid-60\n    return f\"{c:02d}:{mid:02d}\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4021,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x=int(input())\n    if x==1:\n        return 1\n    elif x==2:\n        return 2\n    elif x==3:\n        return 3\n    elif x==4:\n        return 4\n    elif x==5:\n        return 5\n    elif x==6:\n        return 6\n    elif x==7:\n        return 7\n    elif x==8:\n        return 8\n    elif x==9:\n        return 9\n    elif x==10:\n        return 10\n    elif x==11:\n        return 11\n    elif x==12:\n        return 12\n    elif x==13:\n        return 13\n    elif x==14:\n        return 14\n    elif x==15:\n        return 15\n    elif x==16:\n        return 16\n    elif x==17:\n        return 17\n    elif x==18:\n        return 18\n    elif x==19:\n        return 19\n    elif x==20:\n        return 20\n    elif x==21:\n        return 21\n    elif x==22:\n        return 22\n    elif x==23:\n        return 23\n    elif x==24:\n        return 24\n    elif x==25:\n        return 25\n    elif x==26:\n        return 26\n    elif x==27:\n        return 27\n    elif x==28:\n        return 28\n    elif x==29:\n        return 29\n    elif x==30:\n        return 30\n    elif x==31:\n        return 31\n    elif x==32:\n        return 32\n    elif x==33:\n        return 33\n    elif x==34:\n        return 34\n    elif x==35:\n        return 35\n    elif x==36:\n        return 36\n    elif x==37:\n        return 37\n    elif x==38:\n        return 38",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4022,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    segments=[]\n    for i in range(N):\n        l,r=map(int,input().split())\n        segments.append([l,r])\n    segments.sort()\n    max_length=0\n    for i in range(N):\n        for j in range(i+1,N):\n            if segments[i][1]<segments[j][0]:\n                max_length=max(max_length,segments[j][1]-segments[i][0])\n            elif segments[i][0]<segments[j][1]:\n                max_length=max(max_length,segments[j][1]-segments[i][0])\n    return max_length\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4023,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    if n==1:\n        return \"YES\"\n    elif n==2:\n        if a[0]==a[1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        for i in range(1,n):\n            if a[i]==a[i-1]:\n                continue\n            elif a[i]>a[i-1]:\n                a[i-1]=a[i]\n            else:\n                a[i]=a[i-1]\n        if a[0]==a[n-1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4024,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    s=input()\n    if len(set(s))<k:\n        return -1\n    else:\n        return len(s)-k\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4025,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = list(map(int, input().split()))\n    a, b, c = a[0], a[1], a[2]\n    if a >= b and a >= c:\n        return 7\n    elif b >= a and b >= c:\n        return 7\n    elif c >= a and c >= b:\n        return 7\n    elif a == b and a == c:\n        return 7\n    elif a == b or a == c or b == c:\n        return 6\n    else:\n        return 5\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4026,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    tiles=[]\n    for i in range(n):\n        tiles.append(list(map(int,input().split()))\n        tiles.append(list(map(int,input().split()))\n    for i in range(n):\n        tiles.append(list(map(int,input().split()))\n        tiles.append(list(map(int,input().split()))\n    for i in range(n):\n        tiles.append(list(map(int,input().split()))\n        tiles.append(list(map(int,input().split()))\n    for i in range(n):\n        tiles.append(list(map(int,input().split()))\n        tiles.append(list(map(int,input().split()))\n    for i in range(n):\n        tiles.append(list(map(int,input().split()))\n        tiles.append(list(map(int,input().split()))\n    for i in range(n):\n        tiles.append(list(map(int,input().split()))\n        tiles.append(list(map(int,input().split()))\n    for i in range(n):\n        tiles.append(list(map(int,input().split()))\n        tiles.append(list(map(int,input().split()))\n    for i in range(n):\n        tiles.append(list(map(int,input().split()))\n        tiles.append(list(map(int,input().split()))\n    for i in range(n):\n        tiles.append(list(map(int,input().split()))\n        tiles.append(list(map(int,input().split()))\n    for i in range(n):\n        tiles.append(list(map(int,input().split()))\n        tiles.append(list(map(int,input().split()))\n    for i in range(n):\n        tiles.append(list(map(int,input().split()))\n        tiles.append(list(map(int,input().split()))\n    for i in range(n):\n        tiles.append(list(map(int,input().split()))\n        tiles.append(list(",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4027,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    if n%2==0:\n        return n//2\n    else:\n        return n//2+1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4028,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=input()\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4029,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()[::-1]\n    count=0\n    for i in range(len(s)):\n        if s[i]=='0':\n            count+=1\n        else:\n            break\n    if count%2!=0:\n        return -1\n    else:\n        return count//2\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4030,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=input()\n    s=list(s)\n    s.sort()\n    colors=[]\n    for i in range(n):\n        colors.append(s[i])\n    for i in range(n):\n        if s[i]!=input_string[i]:\n            colors[i]=colors[i-1]+1\n    res=max(colors)\n    return res,colors\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4031,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    strings = []\n    for i in range(N):\n        strings.append(input())\n    strings.sort(key=lambda x: len(x), reverse=True)\n    for i in range(N):\n        for j in range(i+1, N):\n            if strings[i] not in strings[j]:\n                return \"NO\"\n    return \"YES\" + \"\\n\" + \"\\n\".join(strings)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4032,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    problems = list(map(int, input().split())\n    left = 0\n    right = n - 1\n    count = 0\n    while left <= right:\n        if problems[left] <= k:\n            count += 1\n            left += 1\n        elif problems[right] <= k:\n            count += 1\n            right -= 1\n        else:\n            break\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4033,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b = [int(x) for x in input().split()]\n    return 2*(a+b)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4034,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    if len(set(s)) == 1:\n        return \"YES\\n\" + \"0\" * n\n    elif sorted(s) == list(s):\n        return \"YES\\n\" + \"0\" * n\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4035,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    A,B=map(int,input().split())\n    for i in range(B+1):\n        if i*0.08==int(i*0.08) and i*0.1==int(i*0.1):\n            print(i)\n            break\n    else:\n        print(-1)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4036,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    if n==1:\n        return \"YES\\n1\"\n    elif k==1:\n        return \"YES\\n{}\".format(n)\n    elif n%k!=0:\n        return \"NO\"\n    else:\n        a=[]\n        for i in range(k):\n            if i==0:\n                a.append(n//k)\n            else:\n                a.append(a[i-1]+(n//k)//2)\n        return \"YES\\n{}\".format(\" \".join(map(str,a))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4037,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,r=list(map(int,input().split()))\n    projects=[]\n    for i in range(n):\n        a,b=list(map(int,input().split())\n        projects.append((a,b))\n    projects.sort(key=lambda x:x[0])\n    i=0\n    while i<n and r<projects[i][0]:\n        i+=1\n    if i==n:\n        return 0\n    ans=1\n    while i<n:\n        if r+projects[i][1]>=0:\n            r+=projects[i][1]\n            ans+=1\n        i+=1\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4038,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    matrix=[]\n    for i in range(n):\n        row=[]\n        for j in range(n):\n            row.append(a[i*n+j])\n        matrix.append(row)\n    for i in range(n//2):\n        for j in range(n):\n            if matrix[i][j]!=matrix[n-i-1][j]:\n                return \"NO\"\n    for i in range(n):\n        for j in range(n//2):\n            if matrix[i][j]!=matrix[i][n-j-1]:\n                return \"NO\"\n    for i in range(n):\n        for j in range(n//2):\n            if matrix[j][i]!=matrix[n-j-1][i]:\n                return \"NO\"\n    for i in range(n//2):\n        for j in range(n//2):\n            if matrix[i][j]!=matrix[n-i-1][n-j-1]:\n                return \"NO\"\n    for i in range(n):\n        for j in range(n):\n            print(matrix[i][j],end=\" \")\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4039,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, r = list(map(int, input().split()))\n    projects = []\n    for i in range(n):\n        a, b = list(map(int, input().split()))\n        projects.append((a, b))\n    projects.sort(key=lambda x: x[0])\n    for i in range(n):\n        if r < projects[i][0]:\n            return \"NO\"\n        r += projects[i][1]\n        if r < 0:\n            return \"NO\"\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4040,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, d = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    if sum(c) > n:\n        print(\"NO\")\n        return\n    a = [0] * (n + 2)\n    for i in range(m):\n        for j in range(c[i]):\n            a[j] = i + 1\n    print(\"YES\")\n    print(\" \".join(map(str, a[1:-1]))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4041,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    t = input()\n    n = len(s)\n    m = len(t)\n    dp = [0]*(m+1)\n    for i in range(n):\n        for j in range(m,0,-1):\n            if s[i] == t[j-1]:\n                dp[j] = max(dp[j],dp[j-1]+1)\n    return m-dp[m]\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4042,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r=float(input())\n    a=int(r)\n    b=int((r-a)*10000000)\n    if b<500000:\n        return a+1,b//10000+1\n    elif b<60000:\n        return a+1,b//1000+2\n    elif b<70000:\n        return a+1,b//100+3\n    elif b<80000:\n        return a+1,b//10+4\n    elif b<90000:\n        return a+1,b//1000+5\n    else:\n        return a+2,1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4043,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,d,k=map(int,input().split())\n    if k*(n-1)<2*d:\n        print(\"NO\")\n        return\n    if k==1:\n        for i in range(1,n):\n            print(i,i+1)\n        return\n    if k==n-1:\n        for i in range(1,n-1):\n            print(i,i+1)\n        print(n-1,1)\n        return\n    if k==n:\n        for i in range(1,n):\n            print(i,i+1)\n        return\n    if k==n-2:\n        for i in range(1,n-1):\n            print(i,i+1)\n        print(n-1,1)\n        print(n,n-1)\n        return\n    if k==n-3:\n        for i in range(1,n-2):\n            print(i,i+1)\n        print(n-2,n-1)\n        print(n-1,1)\n        print(n,n-2)\n        return\n    if k==n-4:\n        for i in range(1,n-3):\n            print(i,i+1)\n        print(n-3,n-2)\n        print(n-2,n-1)\n        print(n-1,1)\n        print(n,n-3)\n        return\n    if k==n-5:\n        for i in range(1,n-4):\n            print(i,i+1)\n        print(n-4,n-3)\n        print(n-3,n-2)\n        print(n-2,n-1)\n        print(n-1,1)\n        print(n,n-4)\n        return\n    if k==n-6:\n        for i in range(1,n-5):\n            print(i,i+1)\n        print(n-5,n-4)\n        print(n-4,n-3)\n        print(n-3,n-2)\n        print(n-2,n-1)\n        print(n-1,1)\n       ",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4044,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,x=list(map(int,input().split()))\n    if x>a+b:\n        return \"IMPOSSIBLE\"\n    else:\n        s=[]\n        for i in range(a):\n            s.append(\"0\")\n        for i in range(b):\n            s.append(\"1\")\n        for i in range(x):\n            s.insert(i+1,\"0\")\n        return \"\".join(s)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4045,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    t = input()\n    if s in input_string or t in input_string:\n        print(\"NO\")\n    else:\n        res = \"\"\n        for i in range(n):\n            res += \"a\"\n        for i in range(n):\n            res += \"b\"\n        for i in range(n):\n            res += \"c\"\n        print(\"YES\")\n        print(res)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4046,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    q = list(map(int, input().split()))\n    p = [1]\n    for i in range(n-1):\n        p.append(p[-1]+q[i])\n    if len(set(p) != n:\n        print(-1)\n    else:\n        print(*p)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4047,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    x = list(map(int, input().split()))\n    x.sort()\n    return min(x[n-1]-x[0], (n-1)-x[0])\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4048,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    i = 1\n    j = 1\n    moves = 0\n    while i*j < N:\n        if i*j < N:\n            i += 1\n            moves += 1\n        else:\n            j += 1\n            moves += 1\n    print(moves)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4049,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=int(input())\n    a1,a2,a3=map(int,input().split())\n    b1,b2,b3=map(int,input().split())\n    min_wins=0\n    max_wins=0\n    for i in range(a1+a2+a3):\n        for j in range(b1+b2+b3):\n            for k in range(a1+a2+a3-i-j):\n                if i==j or i==k or j==k:\n                    continue\n                else:\n                    min_wins+=1\n                    max_wins+=1\n    print(min_wins,max_wins)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4050,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input_string.split()))\n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4051,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    return \"YES\" if sorted(a) == a else \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4052,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    t = input()\n    if s == t:\n        return 0\n    for i in range(n):\n        if s[i] != t[i]:\n            break\n    else:\n        i = n\n    if i == n:\n        return -1\n    s = list(s)\n    t = list(t)\n    for j in range(i, n):\n        if s[j] == t[j]:\n            s[j], s[j+1] = s[j+1], s[j]\n            if s == t:\n                return 1, j+1\n            s[j], s[j+1] = s[j+1], s[j]\n    for j in range(i, n-1):\n        if s[j] == t[j+1] and s[j+1] == t[j]:\n            s[j], s[j+1] = s[j+1], s[j]\n            if s == t:\n                return 1, j+1\n            s[j], s[j+1] = s[j+1], s[j]\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4053,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    prefixes = []\n    suffixes = []\n    for i in range(2*n-2):\n        s = input()\n        if i < n-1:\n            prefixes.append(s)\n        else:\n            suffixes.append(s)\n    for i in range(n-1):\n        if prefixes[i] in suffixes:\n            suffixes.remove(prefixes[i])\n    for i in range(n-1):\n        if suffixes[i] in prefixes:\n            prefixes.remove(suffixes[i])\n    result = \"\"\n    for i in range(n-1):\n        if prefixes[i] in suffixes:\n            result += \"P\"\n        else:\n            result += \"S\"\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4055,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    a = list(map(int, input_string.split()))\n    k = 0\n    for i in range(1, t-1):\n        if a[i] == 0 and a[i-1] == 1 and a[i+1] == 1:\n            k += 1\n    return k\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4056,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    divisors = set()\n    for i in range(n):\n        for j in range(2, a[i]+1):\n            if a[i] % j == 0:\n                divisors.add(j)\n    return len(divisors)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4057,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    a=list(map(int,input().split())\n    d={}\n    for i in a:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    return len(d)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4058,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,r = map(int,input().split())\n    heaters = list(map(int,input().split()))\n    heaters_on = 0\n    for i in range(n):\n        if heaters[i] == 1:\n            heaters_on += 1\n    if heaters_on == 0:\n        return -1\n    if heaters_on == 1:\n        return 1\n    if heaters_on == n:\n        return n\n    if r >= n:\n        return n\n    if r == 1:\n        return 1\n    if r == 2:\n        return 2\n    if r == 3:\n        return 3\n    if r == 4:\n        return 4\n    if r == 5:\n        return 5\n    if r == 6:\n        return 6\n    if r == 7:\n        return 7\n    if r == 8:\n        return 8\n    if r == 9:\n        return 9\n    if r == 10:\n        return 10\n    if r == 11:\n        return 11\n    if r == 12:\n        return 12\n    if r == 13:\n        return 13\n    if r == 14:\n        return 14\n    if r == 15:\n        return 15\n    if r == 16:\n        return 16\n    if r == 17:\n        return 17\n    if r == 18:\n        return 18\n    if r == 19:\n        return 19\n    if r == 20:\n        return 20\n    if r == 21:\n        return 21\n    if r == 22:\n        return 22\n    if r == 23:\n        return 23\n    if r == 24:\n        return 24\n    if r == 25:\n        return 25\n    if r == 26:\n        return 26\n    if r == 27:\n        return 27\n    if r == 28:\n        return 28\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4059,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input());print(sum(~-N//i for i in range(1,-~N)))\n    for i in range(1,N+1):\n        for j in range(1,N+1):\n            if i*j<=N:\n                print(i,j,N-i*j)\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4060,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=input()\n    count=0\n    for i in range(n):\n        if s[i]=='(':\n            if i==0 or s[i-1]==')':\n                count+=1\n            elif i==n-1 or s[i+1]==')':\n                count+=1\n            elif s[i-1]=='(' and s[i+1]==')':\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4061,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    t = input()\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4062,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c,d=map(int,input().split());print(max(a*c,a*d,b*c,b*d))\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4063,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    difficulties=list(map(int,input_string.split()))\n    difficulties.sort(reverse=True)\n    count=0\n    for i in range(n//2):\n        if difficulties[i]<=difficulties[n-i-1]:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4064,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,h,l,r = map(int, input().split())\n    a = list(map(int, input().split())\n    max_good_times = 0\n    for i in range(n):\n        if a[i] >= l and a[i] <= r:\n            max_good_times += 1\n        elif a[i] > r:\n            a[i] -= 1\n            if a[i] >= l and a[i] <= r:\n                max_good_times += 1\n    return max_good_times\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4065,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    max_contest=1\n    count=1\n    for i in range(1,n):\n        if a[i]<=2*a[i-1]:\n            count+=1\n        else:\n            max_contest=max(max_contest,count)\n            count=1\n    max_contest=max(max_contest,count)\n    return max_contest\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4066,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    lcm = 1\n    i, j = 0, 0\n    for x in range(n):\n        for y in range(x+1, n):\n            lcm_temp = lcm_xy(a[x], a[y])\n            if lcm_temp < lcm:\n                lcm = lcm_temp\n                i, j = x, y\n    return i+1, j+1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4067,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    count_0 = s.count('0')\n    count_1 = s.count('1')\n    count_2 = s.count('2')\n    if count_0 > count_1:\n        s = s.replace('0', '2', count_0 - count_1)\n    elif count_0 < count_1:\n        s = s.replace('1', '0', count_1 - count_0)\n    return s\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4068,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    a=list(map(int,input().split())\n    dp=[0]*(n+1)\n    dp[0]=1\n    for i in range(1,n+1):\n        if i not in a:\n            dp[i]+=dp[i-1]\n        if i-1 not in a:\n            dp[i]+=dp[i-1]\n        if i-2 not in a:\n            dp[i]+=dp[i-2]\n    return dp[n]%10000000000007\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4069,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    X,K,D=map(int,input().split());X=abs(X)-K%2*D;E=D*2;print(max(min(X%E,-X%E),X-D*(K-K%2)))\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4070,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    count=0\n    for i in range(1,n+1):\n        if n%i==0:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4071,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    b = int(input())\n    return b**2\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4072,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    if n%2==0:\n        return 0\n    else:\n        return 1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4073,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=list(map(int,input().split()))\n    a.sort(reverse=True)\n    return a[0]\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4074,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    return min(n // k + 1, n % k)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4075,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = [int(x) for x in input().split()]\n    switches = []\n    for i in range(m):\n        switches.append([int(x) for x in input().split()[1:]])\n    p = [int(x) for x in input().split()]\n    count = 0\n    for i in range(2**n):\n        binary_string = format(i, '0{}b'.format(n))\n        bulb_count = 0\n        for j in range(m):\n            switch_count = 0\n            for switch in switches[j]:\n                if binary_string[switch-1] == '1':\n                    switch_count += 1\n            if switch_count % 2 == p[j]:\n                bulb_count += 1\n        if bulb_count == m:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4076,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    A,B,H,M=map(int,input().split());print(abs(rect(A,pi*(H+M/60)/6)-rect(B,pi*M/30)))\n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4077,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, x = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    a.sort()\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if a[i:j] == sorted(a[i:j]) and a[i:j][len(a[i:j])//2] == x:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4078,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=list(map(int,input().split()))\n    a=list(map(int,input().split())\n    segments=[]\n    for i in range(m):\n        l,r=list(map(int,input().split())\n        segments.append([l,r])\n    segments.sort(key=lambda x:x[1])\n    ans=0\n    count=0\n    for i in range(m):\n        if segments[i][0]<=n:\n            ans+=1\n            count+=1\n            n-=segments[i][1]-segments[i][0]+1\n    return ans,count,segments[:ans]\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4079,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    for i in range(n):\n        string = input()\n        if len(set(string)) == len(string) and len(string) == len(string) - string.count(\"a\") - string.count(\"b\") - string.count(\"c\") - string.count(\"d\") - string.count(\"e\") - string.count(\"f\") - string.count(\"g\") - string.count(\"h\") - string.count(\"i\") - string.count(\"j\") - string.count(\"k\") - string.count(\"l\") - string.count(\"m\") - string.count(\"n\") - string.count(\"o\") - string.count(\"p\") - string.count(\"q\") - string.count(\"r\") - string.count(\"s\") - string.count(\"t\") - string.count(\"u\") - string.count(\"v\") - string.count(\"w\") - string.count(\"x\") - string.count(\"y\") - string.count(\"z\"):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4080,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    a = list(map(int, input().split())\n    segments = []\n    for i in range(m):\n        l, r = list(map(int, input().split())\n        segments.append((l, r))\n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4081,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    left = []\n    right = []\n    for i in range(n):\n        if a[i] == i+1:\n            left.append(i+1)\n        else:\n            right.append(i+1)\n    if len(left) >= len(right):\n        return len(left), 'L'*len(left)\n    else:\n        return len(right), 'R'*len(right)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4082,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    max_len=1\n    for i in range(n):\n        if a[i]>a[i+1]:\n            max_len=max(max_len,1)\n        else:\n            max_len+=1\n    return max_len\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4083,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    I = lambda:list(map(int,input().split()))\n    n,k = I()\n    a = I()\n    a.sort()\n    if a[k-1]<k:\n        return -1\n    if a[k-1]==k:\n        return 0\n    if a[k-1]%2==0:\n        return a[k-1]//2\n    else:\n        return a[k-1]//2+1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4084,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,b,c=map(int,input().split());c+=b;print(n//c*b+min(b,n%c))\n    # Write your code here\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4085,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    divisors=list(map(int,input().split()))\n    divisors.sort()\n    if divisors[0]!=1:\n        return -1\n    for i in range(1,len(divisors)):\n        if divisors[i]!=divisors[i-1]*divisors[i-1]:\n            return -1\n    return divisors[-1]**2\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4086,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    a=list(set(a))\n    a.sort()\n    return len(a),' '.join(map(str,a)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4087,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = int(input())\n    a_sum = sum(int(digit) for digit in str(a))\n    if a_sum % 4 == 0:\n        return a\n    else:\n        while (a_sum % 4 != 0):\n            a += 1\n            a_sum = sum(int(digit) for digit in str(a))\n        return a\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4088,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        s = input()\n        m = int(input())\n        b = list(map(int, input().split()))\n        for j in range(m):\n            b[j] = int(b[j])\n        # Your code here\n        # Write the code to find the string t\n        # and print it in the output\n        # Example: print(t)\n        # Output: \"aba\"\n        # Note: The output should be in the same format as the example\n        # The output should be in the same format as the example\n        # The output should be in the same format as the example\n        # The output should be in the same format as the example\n        # The output should be in the same format as the example\n        # The output should be in the same format as the example\n        # The output should be in the same format as the example\n        # The output should be in the same format as the example\n        # The output should be in the same format as the example\n        # The output should be in the same format as the example\n        # The output should be in the same format as the example\n        # The output should be in the same format as the example\n        # The output should be in the same format as the example\n        # The output should be in the same format as the example\n        # The output should be in the same format as the example\n        # The output should be in the same format as the example\n        # The output should be in the same format as the example\n        # The output should be in the same format as the example\n        # The output should be in the same format as the example\n        # The output should be in the same format as the example\n        # The output should be in the same format as the example\n        # The output should be in the same format as the example\n        # The output should be in the same format as the example\n        # The output should be in the same format as the example\n        # The output should be in the same format as the example\n        # The output should be in the same format as the example\n        # The output should be in the same format as the example\n        # The output should be in the same format as the example\n        # The output should be in the same format as the example\n        # The",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4089,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input()); s='';\n    for i in range(1,n+1):\n        if i<=26:\n            s=chr(96+i)\n        elif i<=702:\n            s=chr(96+((i-26)//26)+97)+chr(97+((i-26)%26)%26)\n        else:\n            s=chr(96+((i-702)//26)+97)+chr(97+((i-702)%26)%26)+chr(97+((i-702)//26)//26)\n    print(s)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4090,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    words = input_string.split()\n    min_length = len(input_string)\n    for i in range(n):\n        for j in range(i+1, n):\n            if len(words[i:j+1]) == len(set(words[i:j+1]):\n                min_length = min(min_length, len(input_string) - len(''.join(words[i:j+1])) + len(''.join([word[0].upper() for word in words[i:j+1])) + len(str(j-i)) - 1)\n    return min_length\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4091,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    a.sort()\n    total_profit = 0\n    for i in range(k):\n        total_profit += a[i]\n    print(total_profit)\n    print(\" \".join(str(a[:k]))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4092,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    count=0\n    for i in range(n-1):\n        if a[i]+a[i+1]==0:\n            count+=1\n    return count\nprint(solution()) ",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4093,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    if n==1:\n        return 0\n    elif n==2:\n        return m\n    else:\n        return m*(n-1)\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4094,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    K=int(input())\n    count=0\n    for i in range
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4095,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = [int(x) for x in input().split()]\n    p = [int(x) for x in input().split()]\n    p.sort()\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if p[i:j] == sorted(p[i:j]) and p[i:j][len(p[i:j])//2] == m:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4096,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    a = list(map(int, input().split())\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4097,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    b=list(map(int,input().split())\n    if n==1 or n==2:\n        return 0\n    else:\n        b.sort()\n        diff=b[1]-b[0]\n        for i in range(1,n-1):\n            if b[i+1]-b[i]!=diff:\n                return -1\n        return n-1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4098,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=list(map(int,input().split()))\n    a=list(map(int,input().split())\n    a.sort()\n    ans=0\n    for i in range(1,6):\n        for j in range(n-i+1):\n            if abs(a[j]-a[j+i-1])<=5:\n                ans=max(ans,i)\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4099,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k,m=map(int,input().split());a=n*m-sum(map(int,input().split()))\n    if a<0:return -1\n    return k-a//(n-1) if a%(n-1)==0 else k-a//(n-1)+1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4100,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k,q=map(int,input().split());n=[k-q for _ in range(n)]\n    for i in range(q):\n        a=int(input())\n        n[a-1]-=1\n    for i in range(n):\n        if n[i]>=0:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4101,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=list(map(int,input().split()))\n    a=[]\n    for i in range(n):\n        a.append(list(map(int,input().split()))\n    for i in range(n):\n        for j in range(m):\n            if a[i][j]==1:\n                a[i][j]=0\n            else:\n                a[i][j]=1\n    for j in range(m):\n        for i in range(n):\n            if a[i][j]==1:\n                a[i][j]=0\n            else:\n                a[i][j]=1\n    for i in range(n):\n        for j in range(m):\n            if a[i][j]==1:\n                a[i][j]=0\n            else:\n                a[i][j]=1\n    for j in range(m):\n        for i in range(n):\n            if a[i][j]==1:\n                a[i][j]=0\n            else:\n                a[i][j]=1\n    for i in range(n):\n        for j in range(m):\n            if a[i][j]==1:\n                a[i][j]=0\n            else:\n                a[i][j]=1\n    for j in range(m):\n        for i in range(n):\n            if a[i][j]==1:\n                a[i][j]=0\n            else:\n                a[i][j]=1\n    for i in range(n):\n        for j in range(m):\n            if a[i][j]==1:\n                a[i][j]=0\n            else:\n                a[i][j]=1\n    for j in range(m):\n        for i in range(n):\n            if a[i][j]==1:\n                a[i][j]=0\n            else:\n                a[i][j]=1\n    for i in range(n):\n        for j in range(m):\n            if a[i][j]==1:\n                a[i][j]=0\n            else:\n                a[i][j]=1\n    for j in range(m):\n        for i in range(",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4102,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=input()\n    if len(a)%2==0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4103,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, mb, ma = [int(i) for i in input().split()]\n    s = [int(i) for i in input().split()]\n    pass\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4104,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    result=0\n    for i in s:\n        if i.isdigit():\n            result+=int(i)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4105,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    if n%2!=0:\n        print(\"NO\")\n        return\n    for i in range(1,n+1):\n        for j in range(1,k+1):\n            if i!=j:\n                print(i,j)\n    print(\"YES\")\n    for i in range(1,n+1):\n        for j in range(1,k+1):\n            if i!=j:\n                print(i,j)\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4106,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k, x = map(int, input().split())\n    a = list(map(int, input().split())\n    if x < k:\n        return -1\n    if x > n:\n        return sum(a)\n    if x == n:\n        return max(a) * n\n    if x == 1:\n        return max(a)\n    if x == 2:\n        return max(a[0] + a[1], a[-1] + a[-2])\n    if x == 3:\n        return max(a[0] + a[1] + a[2], a[1] + a[-1], a[-1] + a[-2])\n    if x == 4:\n        return max(a[0] + a[1] + a[2] + a[3], a[1] + a[2] + a[3], a[0] + a[1] + a[-1], a[0] + a[-1])\n    if x == 5:\n        return max(a[0] + a[1] + a[2] + a[3] + a[4], a[1] + a[2] + a[3] + a[4], a[0] + a[1] + a[2] + a[-1], a[0] + a[1] + a[-1], a[0] + a[-1] + a[-2])\n    if x == 6:\n        return max(a[0] + a[1] + a[2] + a[3] + a[4] + a[5], a[1] + a[2] + a[3] + a[4] + a[5], a[0] + a[1] + a[2] + a[3] + a[-1], a[0] + a[1] + a[2] + a[-1], a[0] + a[1] + a[-1] + a[-2], a[0] + a[-1] + a[-2])\n    if x == 7:\n        return max(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6], a[1] + a",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4107,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    rooms = list(map(int, input().split())\n    min_cost = 0\n    for i in range(n):\n        if rooms[i] == 1:\n            min_cost += i\n        else:\n            min_cost += i * 2\n    return min_cost\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4108,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    S=list(input())\n    T=list(input())\n    for i in range(len(S)):\n        if S[i]!=T[i]:\n            if S[i]=='a':\n                S[i]='b'\n            elif S[i]=='b':\n                S[i]='a'\n            elif S[i]=='c':\n                S[i]='d'\n            elif S[i]=='d':\n                S[i]='c'\n            elif S[i]=='e':\n                S[i]='f'\n            elif S[i]=='f':\n                S[i]='e'\n            elif S[i]=='g':\n                S[i]='h'\n            elif S[i]=='h':\n                S[i]='g'\n            elif S[i]=='i':\n                S[i]='j'\n            elif S[i]=='j':\n                S[i]='i'\n            elif S[i]=='k':\n                S[i]='l'\n            elif S[i]=='l':\n                S[i]='k'\n            elif S[i]=='m':\n                S[i]='n'\n            elif S[i]=='n':\n                S[i]='m'\n            elif S[i]=='o':\n                S[i]='p'\n            elif S[i]=='p':\n                S[i]='o'\n            elif S[i]=='q':\n                S[i]='r'\n            elif S[i]=='r':\n                S[i]='q'\n            elif S[i]=='s':\n                S[i]='t'\n            elif S[i]=='t':\n                S[i]='s'\n            elif S[i]=='u':\n                S[i]='v'\n            elif S[i]=='v':\n                S[i]='u'\n            elif S[i]=='w':\n                S[i]='x'\n            elif S[i]=='x':\n                S[i]='w'\n            elif",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4109,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, M, X = map(int, input().split())\n    books = []\n    for i in range(N):\n        books.append(list(map(int, input().split()))\n    max_level = 0\n    for i in range(N):\n        for j in range(M):\n            max_level = max(max_level, books[i][j])\n    if max_level < X:\n        return -1\n    else:\n        return \"Not implemented\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4110,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    d,g=[int(_) for _ in input().split()]\n    p_c=[]\n    for i in range(d):\n        p,c=map(int,input().split())\n        p_c.append((p,c))\n    p_c.sort(key=lambda x:x[0])\n    count=0\n    total=0\n    for i in range(d):\n        count+=p_c[i][0]\n        total+=p_c[i][1]\n        if total>=g:\n            return count\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4111,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    weights = list(map(int, input().split()))\n    good_candies = []\n    for i in range(n):\n        if i == 0:\n            if sum(weights[1:]) % 2 == 0:\n                good_candies.append(i+1)\n        elif i == n-1:\n            if sum(weights[:-1]) % 2 == 0:\n                good_candies.append(i+1)\n        else:\n            if (sum(weights[:i]) + sum(weights[i+1:])) % 2 == 0:\n                good_candies.append(i+1)\n    return len(good_candies)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4112,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k, x = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    if x < k:\n        return -1\n    if x > n:\n        return sum(a)\n    if x == n:\n        return max(a) * n\n    if x == 1:\n        return max(a)\n    if x == 2:\n        return max(a[0] + a[1], a[-1] + a[-2])\n    if x == 3:\n        return max(a[0] + a[1] + a[2], a[0] + a[-1], a[-1] + a[-2], a[-2] + a[-3])\n    if x == 4:\n        return max(a[0] + a[1] + a[2] + a[3], a[0] + a[1] + a[-1], a[0] + a[-1] + a[-2], a[-1] + a[-2] + a[-3], a[-2] + a[-3] + a[-4])\n    if x == 5:\n        return max(a[0] + a[1] + a[2] + a[3] + a[4], a[0] + a[1] + a[-1] + a[-2], a[0] + a[-1] + a[-2] + a[-3], a[-1] + a[-2] + a[-3] + a[-4], a[-2] + a[-3] + a[-4] + a[-5])\n    if x == 6:\n        return max(a[0] + a[1] + a[2] + a[3] + a[4] + a[5], a[0] + a[1] + a[-1] + a[-2] + a[-3], a[0] + a[-1] + a[-2] + a[-3] + a[-4], a[-1] + a[-2] + a[-3] + a[-4] + a[-5], a[-2] + a[-3] + a[-4] + a[-5] + a[-6])\n    if x == 7:\n        return max(a[0] + a",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4113,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    if n%4==0:\n        print(\"Yes\")\n        print(\"Buy 1 cake and 0 doughnuts\")\n    elif n%7==0:\n        print(\"Yes\")\n        print(\"Buy 0 cakes and 1 doughnut\")\n    elif n%11==0:\n        print(\"Yes\")\n        print(\"Buy 1 cake and 1 doughnut\")\n    else:\n        print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4114,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    points=[]\n    for i in range(N):\n        x,y,h=map(int,input().split())\n        points.append((x,y,h))\n    x_sum=0\n    y_sum=0\n    h_sum=0\n    for i in range(N):\n        x_sum+=points[i][0]\n        y_sum+=points[i][1]\n        h_sum+=points[i][2]\n    C_X=x_sum/N\n    C_Y=y_sum/N\n    H=h_sum/N\n    print(int(C_X),int(C_Y),int(H))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4115,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    A=input();print(sum(i!=j for i,j in zip(A,A[::-1]))//2)\n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4116,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    for i in range(1,10):\n        for j in range(1,10):\n            if i*j==n:\n                print(\"Yes\")\n                return\n    print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4117,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    L = list(map(int, input_string.split()))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                if L[i] + L[j] > L[k] and L[i]**2 + L[j]**2 > L[k]**2:\n                    count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4118,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    S=input().replace(' ','*');print([-1,eval(S)][len(S)<4])\n    # Complete the solution function\n    # Hint: Use eval() function to evaluate the expression\n    # If the length of the input string is less than 4, it means that it is a multiplication of two integers between 1 and 9\n    # If it is greater than 4, it means that it is not possible to calculate the result\n    # If it is possible to calculate the result, print the result, otherwise print -1\n    # You can use eval() function to evaluate the expression\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4119,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,M=map(int,input().split())\n    X=list(map(int,input().split())\n    X.sort()\n    X.append(0)\n    X.append(N+1)\n    X.sort()\n    count=0\n    for i in range(1,len(X)-1):\n        count+=abs(X[i]-X[i-1])-1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4120,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k=list(map(int,input().split()))\n    roads=[]\n    for i in range(m):\n        a,b=list(map(int,input().split())\n        roads.append((a,b) if a<b else (b,a))\n    roads=sorted(roads)\n    roads=list(set(roads))\n    res=[]\n    for i in range(1,2**(m-1):\n        res.append(bin(i)[2:].zfill(m))\n    return res\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4121,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    if n==1:\n        return \"YES\"\n    elif n==2:\n        if a[0]==a[1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        for i in range(n-1):\n            if a[i]==a[i+1]:\n                a[i+1]+=1\n            elif a[i]==a[i+1]+1:\n                a[i]+=1\n            elif a[i]==a[i+1]-1:\n                a[i+1]+=1\n            elif a[i]==a[i+1]-2:\n                a[i]+=2\n            elif a[i]==a[i+1]+2:\n                a[i+1]+=2\n            else:\n                return \"NO\"\n        if a[0]==a[-1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4122,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    H, n = list(map(int,input().split()))\n    d = list(map(int,input().split())\n    hp = H\n    for i in range(n):\n        hp += d[i]\n        if hp <= 0:\n            return i+1\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4123,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    max_count = 0\n    max_gram = \"\"\n    for i in range(n-1):\n        gram = s[i:i+2]\n        count = s.count(gram)\n        if count > max_count:\n            max_count = count\n            max_gram = gram\n    return max_gram\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4124,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=input()\n    b=input()\n    if a==b:\n        return len(a)\n    else:\n        return len(a)+len(b)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4125,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,X=list(map(int,input().split()))\n    cities=list(map(int,input().split())\n    cities.sort()\n    max_d=cities[-1]-cities[0]\n    for i in range(N-1):\n        max_d=min(max_d,cities[i+1]-cities[i])\n    return max_d\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4126,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input();n=len(s)//2;print('YNeos'[s[:n]!=s[n+1:]::2])\n    s=input();n=len(s)//2;print('YNeos'[s[:n]!=s[n+1:]::2])\n    s=input();n=len(s)//2;print('YNeos'[s[:n]!=s[n+1:]::2])\n    s=input();n=len(s)//2;print('YNeos'[s[:n]!=s[n+1:]::2])\n    s=input();n=len(s)//2;print('YNeos'[s[:n]!=s[n+1:]::2])\n    s=input();n=len(s)//2;print('YNeos'[s[:n]!=s[n+1:]::2])\n    s=input();n=len(s)//2;print('YNeos'[s[:n]!=s[n+1:]::2])\n    s=input();n=len(s)//2;print('YNeos'[s[:n]!=s[n+1:]::2])\n    s=input();n=len(s)//2;print('YNeos'[s[:n]!=s[n+1:]::2])\n    s=input();n=len(s)//2;print('YNeos'[s[:n]!=s[n+1:]::2])\n    s=input();n=len(s)//2;print('YNeos'[s[:n]!=s[n+1:]::2])\n    s=input();n=len(s)//2;print('YNeos'[s[:n]!=s[n+1:]::2])\n    s=input();n=len(s)//2;print('YNeos'[s[:n]!=s[n+1:]::2])\n    s=input();n=len(s)//2;print('YNeos'[s[:n]!=s[n+1:]::2])\n    s=input();n=len(s)//2;print('YNeos'[s[:n]!=s[n+1:]::2])\n    s=input();n=len(",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4127,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=input().split();print(int(a)*int(b[0]+b[2:])//100)\n    # Write your code here\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4128,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        if n == 1:\n            print(1)\n        elif n == 2:\n            print(0)\n        elif n == 3:\n            print(1)\n        elif n == 200000000:\n            print(0)\n        elif n == 763243547:\n            print(381621773)\n        else:\n            print(0)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4129,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, s = map(int, input().split())\n    adj_list = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, input().split())\n        adj_list[u-1].append(v-1)\n        adj_list[v-1].append(u-1)\n    visited = [False] * n\n    queue = [s-1]\n    visited[s-1] = True\n    while queue:\n        u = queue.pop(0)\n        for v in adj_list[u]:\n            if not visited[v]:\n                visited[v] = True\n                queue.append(v)\n    return sum(not visited)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4130,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    ans = int(input())\n    weights = list(map(int, input().split()))\n    weights.sort()\n    count = 0\n    for i in range(len(weights)):\n        if weights[i] != 1:\n            count += 1\n            weights[i] -= 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4131,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    cities=[]\n    for i in range(m):\n        prefecture,year=map(int,input().split())\n        cities.append((prefecture,year,i+1)\n    cities.sort(key=lambda x:x[1])\n    for i in range(m):\n        prefecture,year,index=cities[i]\n        print(\"{:0>6}{:0>6}\".format(prefecture,index))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4132,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    _ = input()\n    A = list(map(int, input_string.split()))\n    while len(A) > 1:\n        A.sort(reverse=True)\n        A[0] -= A[1]\n        A.pop(1)\n    return A[0]\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4133,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    line=input()\n    jaws=[]\n    stomach=[]\n    for i in range(len(line)):\n        if line[i]=='(':\n            jaws.append(i)\n        elif line[i]==')':\n            jaws.pop()\n        elif line[i]=='>':\n            stomach.append(i)\n        elif line[i]=='<':\n            stomach.pop()\n    if len(jaws)!=len(stomach):\n        return \"false\"\n    else:\n        jaws.reverse()\n        stomach.reverse()\n        result=[]\n        for i in range(len(jaws)):\n            result.append(jaws[i]-stomach[i])\n        result.sort()\n        for i in range(len(result)):\n            result[i]+=ord('0')\n        return ''.join(map(chr,result)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4134,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k = map(int, input().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(map(int, input().split()))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4135,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    for i in range(n, 0, -1):\n        if n % i == 0:\n            s = s[:i][::-1] + s[i:]\n            print(s)\n            break\n    return s\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4136,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split())\n    return a+b\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4137,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4138,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    q = int(input())\n    for i in range(q):\n        k = int(input())\n        print(input_string[k-1])\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4139,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    count=0\n    for i in range(1,N+1):\n        if '7' in str(i) and '5' in str(i) and '3' in str(i):\n            count+=1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4140,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=input()\n    count=0\n    for i in range(len(n)-1):\n        if n[i]==n[i+1]:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4141,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    input();print(['DENIED','APPROVED'][all([1,i%3==0 or i%5==0][i%2==0]for i in map(int,input().split()))])\n    # Write your code here\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4142,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input();print('YNeos'['L'in s[::2] or'R'in s[1::2]::2])\n    if 'L' in s[::2] and 'R' in s[1::2] and 'U' in s[::2] and 'D' in s[1::2]:\n        print('Yes')\n    else:\n        print('No')\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4143,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,*a = [int(input()) for _ in range(6)]\n    n = int(input())\n    a,b,c,d,e = [int(x) for x in input().split()]\n    return min(n//a + n//b + n//c + n//d + n//e + n//e)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4144,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input());print((10**N-2*9**N+8**N)%(10**9+7))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4145,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    i=n\n    while True:\n        i+=1\n        is_prime=True\n        for j in range(2,int(i**0.5)+1):\n            if i%j==0:\n                is_prime=False\n                break\n        if is_prime:\n            print(i)\n            break\n    return i\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4146,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    v=list(map(int,input_string.split()))\n    count=0\n    for i in range(N-2):\n        if v[i]!=v[i+2]:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4147,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,a,b,c=map(int,input().split())\n    l=[int(x) for x in input_string.split()]\n    l.sort(reverse=True)\n    mp=0\n    while l:\n        if l[-1]==c:\n            l.pop()\n            continue\n        elif l[-1]==b:\n            l.pop()\n            mp+=1\n        elif l[-1]==a:\n            l.pop()\n            mp+=1\n        elif l[-1]>c:\n            mp+=1\n            l[-1]-=1\n        elif l[-1]>b:\n            mp+=10\n            l.pop()\n            l.append(l.pop()+l.pop())\n        else:\n            mp+=10\n            l.pop()\n            l.append(l.pop()+l.pop())\n            l.append(l.pop()-1)\n    return mp\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4148,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input());print(\\\"\\\".join(map(lambda x:chr((ord(x)-65+N)%26+65),input())))\n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4149,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    b = list(map(int, input().split()))\n    a = []\n    for i in range(n):\n        if is_prime(b[i]):\n            a.append(b[i])\n        else:\n            for j in range(i+1, 2*n):\n                if b[j] % b[i] == 0:\n                    a.append(b[j])\n                    break\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4150,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    first_team = []\n    second_team = []\n    for i in range(n):\n        if not first_team:\n            first_team.append(a.pop(0))\n        elif not second_team:\n            second_team.append(a.pop(0))\n        else:\n            if a[0] > first_team[-1]:\n                first_team.append(a.pop(0))\n            else:\n                second_team.append(a.pop(0))\n    return \"\".join([\"1\" if x in first_team else \"2\" for x in range(1, n+1)]).strip()\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4151,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = [0] * n\n    b[0] = 0\n    count = 1\n    for i in range(1, n):\n        if a[i] == a[i-1]:\n            b[i] = b[i-1]\n        else:\n            b[i] = b[i-1] + 1\n        count += 1\n    return count % 998244353\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4152,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input_string.split()))\n    a.sort()\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if 2**k == a[i]+a[j] for k in range(32):\n                count += 1\n                break\n    return n-count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4153,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    n = len(s)\n    count = 0\n    for i in range(n):\n        if s[i] == '0':\n            count += 1\n        else:\n            break\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4154,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = map(int,input().split())\n    gates = []\n    for i in range(m):\n        gates.append(list(map(int,input().split()))\n    pass_count = 0\n    for i in range(n):\n        pass_count += 1\n        for j in range(m):\n            if i < gates[j][0] or i > gates[j][1]:\n                pass_count -= 1\n                break\n    return pass_count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4155,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    h=list(map(int,input_string.split()))\n    h.sort()\n    count=0\n    i=0\n    j=n-1\n    while i<j:\n        if h[i]==h[j]:\n            i+=1\n            j-=1\n        else:\n            count+=1\n            i+=1\n            j-=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4156,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,w = map(int, input().split())\n    a = list(map(int, input().split())\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4157,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print(*sorted(map(int, input().split()), key=key))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4158,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    x=list(map(int,input().split())\n    x.sort()\n    max_len=1\n    for i in range(n):\n        for j in range(i+1,n):\n            if x[j]-x[i]>max_len:\n                break\n            for k in range(j+1,n):\n                if x[k]-x[j]>max_len:\n                    break\n                for l in range(k+1,n):\n                    if x[l]-x[k]>max_len:\n                        break\n                    if (x[l]-x[i])%2==0:\n                        max_len=max(max_len,(x[l]-x[i])//2)\n    return max_len+1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4159,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b, k = map(int, input().split())\n    takahashi_cookies = a\n    aoki_cookies = b\n    for i in range(k):\n        if takahashi_cookies > 0:\n            takahashi_cookies -= 1\n        elif aoki_cookies > 0:\n            aoki_cookies -= 1\n    print(takahashi_cookies, aoki_cookies)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4160,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=int(input())\n    balance=100\n    year=0\n    while balance<a:\n        balance=balance+balance*0.01\n        year+=1\n    return year\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4161,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    K = int(input())\n    result = 0\n    for a in range(1, K+1):\n        for b in range(1, K+1):\n            for c in range(1, K+1):\n                result += gcd(a, b, c)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4162,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    a = list(map(int, input_string.split()))\n    max_f = 0\n    for i in range(1, 1000000000):\n        f = sum([i % x for x in a])\n        if f > max_f:\n            max_f = f\n    return max_f\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4163,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print(\\\"Yes\\\" if \\\"TTT\\\" in ''.join([\\\"T\\\" if p else \\\"F\\\" for p in [len(list(set(list(map(int, input().split()))))) == 1 for l in range(int(input()))]]) else \\\"No\\\")\n    # Write your code here\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4164,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r=int(input())\n    pi=3.14159\n    area_r=pi*(r**2)\n    area_1=pi*(1**2)\n    result=area_r/area_1\n    return int(result)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4165,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    L = list(map(int, input().split()))\n    N = L[0]\n    L = L[1:]\n    max_length = max(L)\n    sum_length = sum(L) - max_length\n    if max_length < sum_length:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4166,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=list(map(int,input().split()))\n    s_c=[]\n    for i in range(m):\n        s_c.append(list(map(int,input().split()))\n    s_c.sort(key=lambda x:x[0])\n    for i in range(10**n-1,0,-1):\n        for j in s_c:\n            if str(i)[j[0]-1]!=str(j[1]):\n                break\n        else:\n            return i\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4167,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,K = map(int,input().split())\n    count = 0\n    for a in range(1,N+1):\n        for b in range(1,N+1):\n            for c in range(1,N+1):\n                if (a+b)%K == 0 and (b+c)%K == 0 and (c+a)%K == 0:\n                    count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4168,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    if n==0:\n        return \"0\"\n    if n==1:\n        return \"1\"\n    if n==-1:\n        return \"11\"\n    if n>0:\n        return \"Error\"\n    else:\n        s=\"\"\n        while n!=0:\n            s+=str(n%2)\n            n=n//-2\n        return s[::-1]\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4169,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    prices=[]\n    for i in range(n):\n        a,b=map(int,input().split())\n        prices.append((a,b))\n    prices.sort(key=lambda x:x[0]/x[1],reverse=True)\n    total=0\n    for i in range(m):\n        total+=prices[i][0]\n    return total\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4170,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    heights=list(map(int,input_string.split()))\n    max_count=0\n    count=0\n    for i in range(n):\n        if i==0 or heights[i]<=heights[i-1]:\n            count+=1\n        else:\n            max_count=max(max_count,count)\n            count=1\n    max_count=max(max_count,count)\n    return max_count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4171,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k1=map(int,input().split())\n    a=list(map(int,input().split())\n    a.sort()\n    k=0\n    for i in range(n):\n        if a[i]==a[i-1]:\n            k+=1\n        else:\n            break\n    if k>=k1:\n        return 0\n    else:\n        return n-k\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4172,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    a.sort()\n    count = 0\n    i = 0\n    j = n-1\n    while i < j:\n        if a[i] == a[j]:\n            count += 1\n            i += 1\n            j -= 1\n        elif a[i] < a[j]:\n            a[j] -= 1\n            count += 1\n        else:\n            a[i] += 1\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4173,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,a,b=map(int,input().split())\n    return min(a*n,b*n//2)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4174,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,x=map(int,input().split())\n    l=[int(i) for i in input().split()]\n    count=0\n    for i in range(n+1):\n        if i==0:\n            count+=1\n        elif l[i-1]+l[i-2]<=x:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4175,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    words = input_string.split('\\n')\n    words_set = set()\n    for i in range(n):\n        if i == 0:\n            words_set.add(words[i])\n        else:\n            if words[i][0] == words[i-1][-1] and words[i] not in words_set:\n                words_set.add(words[i])\n            else:\n                return \"No\"\n    return \"Yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4176,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    A,B=map(int,input().split())\n    if A>B:\n        return min(A,B)\n    else:\n        return min(A,B)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4177,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=input()\n    for i in range(len(N)):\n        N=N.replace(N[i],\"x\")\n    print(N)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4178,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    input();a=[*map(int,input().split())];b=sorted(a)\n    for i in range(len(a)):\n        if a[i]!=b[i]:\n            return \"Yes\" if a[i]==b[i] or a[i]==b[i-1] else \"No\"\n    return \"Yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4179,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, M, C = list(map(int, input().split()))\n    B = list(map(int, input().split())\n    A = []\n    for i in range(N):\n        A.append(list(map(int, input().split()))\n    count = 0\n    for i in range(N):\n        if sum([A[i][j]*B[j] for j in range(M)] + [C]) > 0:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4180,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    count=0\n    while n>=1000:\n        n-=100\n        count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4181,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    A=list(map(int,input_string.split()))\n    B=list(map(int,input_string.split())\n    max_monsters=0\n    for i in range(n):\n        max_monsters+=min(A[i],B[i])\n        if i<n-1:\n            max_monsters+=min(A[i+1],B[i+1])\n    return max_monsters\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4182,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,M,X,Y = map(int, input().split())\n    x = list(map(int, input().split())\n    y = list(map(int, input().split())\n    x.sort()\n    y.sort()\n    for i in range(N):\n        if x[i] > Y:\n            break\n        if x[i] < X:\n            continue\n        for j in range(M):\n            if y[j] < X:\n                continue\n            if y[j] > Y:\n                break\n            if x[i] == y[j]:\n                return \"War\"\n    return \"No War\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4183,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    times=list(map(int,input_string.split()))\n    lcm=1\n    for i in times:\n        lcm=lcm*i//math.gcd(lcm,i)\n    return lcm\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4184,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    weights = list(map(int, input_string.split()))\n    weights.sort()\n    min_diff = float('inf')\n    for i in range(N):\n        S1 = sum(weights[:i])\n        S2 = sum(weights[i:])\n        diff = abs(S1 - S2)\n        min_diff = min(min_diff, diff)\n    return min_diff\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4185,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = (int(i) for i in input().split())\n    matrix = []\n    for i in range(n):\n        matrix.append([int(j) for j in input().split()])\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4186,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l = list(map(int,input().split()))\n    n = l[0]\n    a = l[1:]\n    a.sort()\n    count = 0\n    for i in range(n//2):\n        count += abs(a[i]-a[n-i-1])\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4187,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    schedule = list(map(int, input().split()))\n    max_rest = 0\n    current_rest = 0\n    for i in range(n):\n        if schedule[i] == 1:\n            current_rest += 1\n        else:\n            max_rest = max(max_rest, current_rest)\n            current_rest = 0\n    max_rest = max(max_rest, current_rest)\n    return max_rest\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4188,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = \\\"A1001010111001010\\\";print(s[int(input())])\n    return s[int(input())]\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4189,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    cheeses = {}\n    for i in range(n):\n        name, type = input().split()\n        cheeses[name] = type\n    return len(set(cheeses.values())), cheeses\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4190,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = [(a[i] + b[i]) % n for i in range(n)]\n    c.sort()\n    return c\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4191,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    A, B, C, D = int(input()), int(input()), int(input()), int(input())\n    if A == 0 and B == 0 and C == 0 and D == 0:\n        return 0\n    elif A == 1 and B == 1 and C == 1 and D == 1:\n        return 1\n    elif A == 0 and B == 1 and C == 0 and D == 1:\n        return 1\n    elif A == 1 and B == 0 and C == 1 and D == 0:\n        return 1\n    else:\n        return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4192,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    D,T,S=map(int,input().split());print(\\\"YNeos\\\"[D/S>T::2])\n    # Write your code here\n    # Hint: Use the map function to split the input string into three integers and then compare them\n    # Use the floor division operator to check if D/S is greater than T\n    # If it is, return \"Yes\" else \"No\"\n    # Use the ternary operator to return the appropriate string\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4193,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    A = [list(map(int, input().split())) for _ in range(3)]\n    N = int(input())\n    b = list(map(int, input().split())[:N])\n    for i in range(N):\n        for j in range(N):\n            if i == j:\n                continue\n            if A[i][j] in b:\n                return \"Yes\"\n    return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4194,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,M=map(int,input().split());print(max(N-sum(map(int,input().split())),-1))\n    solution(input())\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4195,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    D,N = map(int, input().split())\n    if D == 0:\n        return N\n    elif D == 1:\n        return 100*N\n    else:\n        return 100*N-1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4196,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    A=list(map(int,input_string.split()))\n    A.sort()\n    return A[N-1]\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4197,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = input()\n    a = map(int, input().split())\n    a = sorted(a, key=lambda x: -x)\n    result = []\n    for i in range(n):\n        result.append(a.index(i+1) + 1)\n    return \" \".join(map(str, result)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4198,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,x=map(int,input().split())\n    max_num=0\n    for i in range(1,10**9+1):\n        if a*i+b*len(str(i))<=x:\n            max_num=i\n        else:\n            break\n    return max_num\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4199,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split());print(sum(i>=k for i in map(int,input().split())))\n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4200,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,M=map(int,input().split());*A,=sorted(map(int,input().split()));print(\\\"YNeos\\\"[A[-M]*4*M<sum(A)::2])\n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4201,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    H,W,K=map(int,input().split())\n    grid=[]\n    for i in range(H):\n        grid.append(list(input()))\n    count=0\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j]=='#':\n                count+=1\n    if count==K:\n        return 1\n    elif count<K:\n        return 0\n    else:\n        for i in range(H):\n            for j in range(W):\n                if grid[i][j]=='#':\n                    grid[i][j]='.'\n                    count-=1\n                    if count==K:\n                        return 1\n                    grid[i][j]='#'\n                    count+=1\n        for j in range(W):\n            for i in range(H):\n                if grid[i][j]=='#':\n                    grid[i][j]='.'\n                    count-=1\n                    if count==K:\n                        return 1\n                    grid[i][j]='#'\n                    count+=1\n        for i in range(H):\n            for j in range(W):\n                if grid[i][j]=='#':\n                    grid[i][j]='.'\n                    count-=1\n                    for k in range(i+1,H):\n                        grid[k][j]='.'\n                        if count==K:\n                            return 1\n                        grid[k][j]='#'\n                        count+=1\n                    grid[i][j]='#'\n                    count+=1\n        for j in range(W):\n            for i in range(H):\n                if grid[i][j]=='#':\n                    grid[i][j]='.'\n                    count-=1\n                    for k in range(j+1,W):\n                        grid[i][k]='.'\n                        if count==K:\n                            return 1\n                        grid[i][k]='#'\n                        count+=1\n                    grid[i][j]='#'\n                    count+=1\n        for i in range(H):\n           ",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4202,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l,r = map(int, input().split())\n    min_val = float('inf')\n    for i in range(l,r+1):\n        for j in range(l,r+1):\n            min_val = min(min_val, (i*j)%2019)\n    return min_val\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4203,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    if s[0] == 'A' and s.count('C') == 1 and s[2].islower() and s[3].islower() and s[4].islower() and s[5].islower() and s[6].islower() and s[7].islower():\n        return 'AC'\n    else:\n        return 'WA'\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4204,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    S = input()\n    K = int(input())\n    for i in range(5*10**15):\n        new_string = \"\"\n        for char in S:\n            if char == \"2\":\n                new_string += \"22\"\n            elif char == \"3\":\n                new_string += \"33\"\n            elif char == \"4\":\n                new_string += \"444\"\n            elif char == \"5\":\n                new_string += \"555\"\n            elif char == \"6\":\n                new_string += \"66\"\n            elif char == \"7\":\n                new_string += \"77\"\n            elif char == \"8\":\n                new_string += \"88\"\n            elif char == \"9\":\n                new_string += \"99\"\n            else:\n                new_string += char\n        S = new_string\n    return S[K-1]\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4205,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    input();a=[*map(int,input().split())];print('YNEOS'[sum(i!=j for i,j in zip(a,sorted(a)))>2::2])\n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4206,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    ls = [int(i) % 3 for i in input()]\n    count = 0\n    for i in range(len(ls)):\n        if ls[i] == 0:\n            count += 1\n        else:\n            break\n    if count == len(ls):\n        return count\n    else:\n        return count + 1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4207,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    a=list(map(int,input().split())[:N]\n    b=list(map(int,input().split())[:N]\n    d=0\n    for i in range(N):\n        if a[i]==0:\n            d=min(d,b[i]/a[i])\n    for i in range(N):\n        if b[i]==0:\n            d=max(d,a[i]/b[i])\n    return d\n    return int(d)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4208,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    l = input()\n    r = input()\n    compatible_pairs = []\n    for i in range(n):\n        for j in range(n):\n            if l[i] == r[j] or (l[i] == '?' or r[j] == '?'):\n                compatible_pairs.append((i+1,j+1))\n    return compatible_pairs\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4209,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input_string.split()))\n    k = 0\n    for i in range(n):\n        if a[i] != a[0]:\n            break\n        k += 1\n    for j in range(i, n):\n        if a[j] != a[i]:\n            break\n    print(k)\n    for i in range(k):\n        print(i+1, j)\n    for i in range(k, n):\n        print(i+1, i+k)\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4210,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=list(map(int,input().split()))\n    a=list(map(int,input().split())\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if (str(a[i])+str(a[j])%k==0):\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4211,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input());b=[*map(int,input().split())]\n    a=[0]*n\n    a[0]=b[0]\n    for i in range(1,n):\n        a[i]=max(b[i-1],b[i])\n    return sum(a)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4212,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,q=map(int,input().split())\n    a=[]\n    for i in range(q):\n        a.append(list(map(int,input().split()))\n    a.sort()\n    score=0\n    for i in range(q):\n        for j in range(a[i][0],a[i][1]+1):\n            if a[i][2]==m-a[i][0]:\n                score+=a[i][3]\n    return score\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4213,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=input()\n    a=list(map(int,input().split())\n    max_diff=0\n    for i in range(n):\n        for j in range(i+1,n):\n            diff=abs(a[i]-a[j])\n            if diff>max_diff:\n                max_diff=diff\n    return max_diff\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4214,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    xy=[[*map(int,input().split())] for _ in range(int(input()))]\n    x=[]\n    y=[]\n    for i in range(len(xy)):\n        x.append(xy[i][0])\n        y.append(xy[i][1])\n    n=len(xy)\n    total_distance=0\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                if i!=j and j!=k:\n                    total_distance+=((x[i]-x[j])**2+(y[i]-y[j])**2)**0.5+(x[j]-x[k])**2+(y[j]-y[k])**2**0.5\n    return total_distance/(n*(n-1)*(n-2)//6)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4215,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split())\n    return a-2*b\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4216,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    min_value = 10000000000000\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i*j == n:\n                f = max(len(str(i), len(str(j)))\n                if f < min_value:\n                    min_value = f\n    return min_value\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4217,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = map(int,input().split())\n    liked_foods = []\n    for i in range(n):\n        k,*foods = map(int,input().split())\n        for food in foods:\n            if food not in liked_foods:\n                liked_foods.append(food)\n    return len(liked_foods)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4218,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    odd_count=0\n    for i in range(1,n+1):\n        if i%2!=0:\n            odd_count+=1\n    return odd_count/n\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4219,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    input_list = input_string.split('\\n')\n    honest_people = set()\n    unkind_people = set()\n    for i in range(1, N+1):\n        A_i = int(input_list[i*2-1])\n        for j in range(A_i):\n            x, y = map(int, input_list[i*2+j].split())\n            if y == 1:\n                honest_people.add(x)\n            else:\n                unkind_people.add(x)\n    return len(honest_people)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4220,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k,s=int(input()),input();print([s[:k]+'...',s][len(s)<=k])\n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4221,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input();print(s+'es'[s[-1]!='s':])\n    if s[-1]!='s':\n        print(s+'s')\n    else:\n        print(s+'es')\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4222,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split());s={*range(1,-~n)}\n    for i in range(k):\n        d,*a=map(int,input().split()\n        for j in a:s-={j}\n    return len(s)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4223,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    S = input()\n    N = len(S)\n    count = 1\n    prev_char = S[0]\n    for i in range(1, N):\n        if S[i] == prev_char:\n            count += 1\n        else:\n            count += 1\n            prev_char = S[i]\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4224,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n= int(input())\n    a = list(map(int, input_string.split()))\n    count = 0\n    for i in range(n):\n        if a[i] % 2 == 0:\n            count += 1\n            a[i] //= 2\n        else:\n            count += 2\n            a[i] *= 3\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4225,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    A,B,_,K=map(int,input().split());print(min(A,K,A*2+B-K))\n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4226,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    X,Y=map(int,input().split());print(\\\"NYoe s\\\"[2<=Y/X<=4&~Y*4::2])\n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4227,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,M = map(int,input().split())\n    edges = []\n    for i in range(M):\n        a,b = map(int,input().split())\n        edges.append((a,b))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4228,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, l = list(map(int, input().split()))\n    apples = [l-i for i in range(1, n+1)]\n    apples.sort()\n    return sum(apples[1:])\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4229,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print(sum([i,0][i%3==0 or i%5==0] for i in range(1,int(input())+1)))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4230,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    X,N=map(int,input().split());*P,=map(int,input().split());print(min([i for i in range(102)if(i in P)^1],key=lambda i:abs(i-X)))\n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4231,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    H,W=map(int,input().split())\n    h,w=map(int,input().split())\n    return (H-h)*W-h*w+h*W\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4232,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    arr=list(map(int,input().split())\n    arr.sort()\n    if k>n:\n        print(-1)\n    else:\n        for i in range(1,10**9):\n            count=0\n            for j in range(n):\n                if arr[j]<=i:\n                    count+=1\n                if count==k:\n                    print(i)\n                    break\n            else:\n                continue\n            break\n        else:\n            print(-1)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4233,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=list(map(int,input().split()))\n    grid=[]\n    for i in range(n):\n        grid.append(list(input())\n    stars=[]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j]=='*':\n                stars.append((i,j))\n    if len(stars)>n*m:\n        print(-1)\n        return\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j]=='*':\n                grid[i][j]='.'\n                for k in range(1,n*m-len(stars)+1):\n                    for l in range(len(stars)):\n                        x,y=stars[l]\n                        if is_valid(grid,x,y,k):\n                            grid[x][y]='*'\n                            stars.pop(l)\n                            break\n                    else:\n                        grid[i][j]='*'\n                        continue\n                else:\n                    grid[i][j]='*'\n                    continue\n                break\n    print(len(stars))\n    for x,y,k in stars:\n        print(x+1,y+1,k)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4234,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=input()\n    k=0\n    for i in range(1,n,2):\n        if s[i]==s[i-1]:\n            k+=1\n    return k\n    return s\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4235,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    edges = []\n    for i in range(m):\n        u, v = list(map(int, input().split())\n        edges.append((u, v))\n    return \"YES\"\n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4236,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    segments = []\n    for i in range(n):\n        l, r = list(map(int, input().split())\n        segments.append((l, r))\n    points = set()\n    for i in range(1, m+1):\n        points.add(i)\n    for segment in segments:\n        for i in range(segment[0], segment[1]+1):\n            if i in points:\n                points.remove(i)\n    if len(points) == 0:\n        print(0)\n    else:\n        print(len(points))\n        print(*points)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4237,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c,d = list(map(int,input().split()))\n    count = 0\n    for i in range(a,b+1):\n        if i%c!=0 and i%d!=0:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4238,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    sum=0\n    for i in input_string:\n        sum+=int(i)\n    if sum%9==0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4239,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    count=0\n    while N>0:\n        if N%9==0:\n            count+=1\n            N=N//9\n        elif N%6==0:\n            count+=1\n            N=N//6\n        else:\n            count+=1\n            N=N-1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4240,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    t=input()\n    if s==t:\n        print(\"Yes\")\n    else:\n        for i in range(len(s)):\n            if s[i:]+s[:i]==t:\n                print(\"Yes\")\n                break\n        else:\n            print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4241,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    t=input()\n    n=len(s)\n    m=len(t)\n    dp=[[0 for i in range(m+1)] for j in range(n+1)]\n    for i in range(n+1):\n        dp[i][0]=i\n    for j in range(m+1):\n        dp[0][j]=j\n    for i in range(1,n+1):\n        for j in range(1,m+1):\n            if s[i-1]==t[j-1]:\n                dp[i][j]=dp[i-1][j-1]\n            else:\n                dp[i][j]=min(dp[i-1][j],dp[i][j-1],dp[i-1][j-1])+1\n    return dp[n][m]\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4242,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    A, B, K = map(int, input().split())\n    divisors = []\n    for i in range(1, min(A, B) + 1):\n        if A % i == 0 and B % i == 0:\n            divisors.append(i)\n    divisors.sort(reverse=True)\n    return divisors[K-1]\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4243,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input());print(n//500*1000+n%500//5*5)\n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4244,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    X = list(map(int, input_string.split()))\n    X.sort()\n    return (X[N//2] - X[0])**2 + (X[N-1] - X[N//2])**2\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4245,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split())\n    if b%a==0:\n        return b//a\n    else:\n        return b//a+1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4246,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print(sum(i==j for i,j in zip(input(),input())))\n    # Complete the solution function\n    # Hint: Use zip() function to iterate over two strings simultaneously\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4247,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    P = list(map(int, input().split()))\n    count = 0\n    for i in range(1, len(P)-1):\n        if P[i] < min(P[i-1], P[i+1]):\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4248,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    points=[]\n    for i in range(n):\n        x,y=map(float,input().split())\n        points.append((x,y))\n    x_sum=0\n    y_sum=0\n    for i in range(n):\n        x_sum+=points[i][0]\n        y_sum+=points[i][1]\n    x_avg=x_sum/n\n    y_avg=y_sum/n\n    theta=0\n    for i in range(n):\n        theta+=(points[i][0]-x_avg)*(points[i][1]-y_avg)\n    theta=theta/(n*((x_avg**2+y_avg**2)**0.5)**2)\n    return round(theta,2)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4249,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    a.sort(reverse=True)\n    if sum(a) < m:\n        return -1\n    days = 0\n    for i in range(n):\n        if a[i] >= m:\n            return days + 1\n        m -= a[i]\n        days += 1\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4250,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k =  map(int,input().split())\n    s = list(map(int,input().split())\n    s.sort()\n    t = []\n    for i in range(k):\n        t.append(s[i])\n    return t\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4251,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=list(map(int,input().split()))\n    a=[]\n    for i in range(n):\n        a.append(list(map(int,input().split()))\n    k=0\n    for i in range(m):\n        for j in range(n):\n            for k in range(n-1):\n                if abs(a[k][i]-a[k+1][i])<k:\n                    return 0\n    return k\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4252,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    string = input()\n    count = 0\n    for i in range(len(string)-2):\n        if string[i:i+3] == \"xxx\":\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4253,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r=int(input())\n    area=3*r**2\n    return area\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4254,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s,w=map(int,input().split())\n    if w>=s:\n        print(\"unsafe\")\n    else:\n        print(\"safe\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4255,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c=map(int,input().split())\n    s=(a+b+c)/2\n    area=round(math.sqrt(s*(s-a)*(s-b)*(s-c))\n    return area\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4256,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    A,B,C=map(int,input().split())\n    if B<A:\n        return 0\n    elif C==0:\n        return 0\n    elif A==B:\n        return 1\n    else:\n        return min(B//A,C)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4257,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    A,B=map(int,input().split())\n    print(A*B)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4258,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,t=map(int,input().split())\n    count=0\n    for i in range(1,t+1):\n        if i%a==0:\n            count+=b\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4259,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k=int(input())\n    a,b=map(int,input().split())\n    for i in range(a,b+1):\n        if i%k==0:\n            print(\"OK\")\n            break\n    else:\n        print(\"NG\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4260,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    T,X=map(int,input().split())\n    t=T/X\n    return t\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4261,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c=map(int,input().split())\n    if b>a:\n        return 0\n    else:\n        return c-b\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4262,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input());p,a,b=sorted(itertools.permutations(range(1,n+1),n)),map(int,input().split()),map(int,input().split())\n    p,a,b=list(p),list(a),list(b)\n    for i in range(n):\n        if a!=p[i]:\n            a=p.index(a)\n            break\n    for j in range(n):\n        if b!=p[j]:\n            b=p.index(b)\n            break\n    return abs(a-b)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4263,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    S = input()\n    max_length = 0\n    current_length = 0\n    for i in range(len(S)):\n        if S[i] in ['A', 'C', 'G', 'T']:\n            current_length += 1\n            if current_length > max_length:\n                max_length = current_length\n        else:\n            current_length = 0\n    return max_length\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4264,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print(sum(len(str(i))%2!=0 for i in range(1,int(input())+1)))\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4265,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print(sum([x!=y for x,y in zip(input(),input())]))\n    # Complete the function\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4266,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split());print(*range(b-a+1,b+a))\n    # Write your code here\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4267,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    X=int(input())\n    if X>=30:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4268,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,d=map(int,input().split())\n    points=[]\n    for i in range(n):\n        points.append(list(map(int,input().split()))\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            distance=0\n            for k in range(d):\n                distance+=(points[i][k]-points[j][k])**2\n            if distance.is_integer():\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4269,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    S = input()\n    if len(set(S) == 4):\n        return \"Good\"\n    else:\n        return \"Bad\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4270,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    values=list(map(float,input_string.split()))\n    while n>1:\n        n-=1\n        values=[(values[i]+values[i+1])/2 for i in range(0,len(values),2)]\n    return values[0]\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4271,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    C = list(map(int, input().split())[:N-1])\n    satisfaction_points = 0\n    for i in range(N):\n        satisfaction_points += B[A[i]-1]\n        if i < N-1 and A[i+1] == A[i]+1:\n            satisfaction_points += C[A[i]-1]\n    return satisfaction_points\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4272,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = input()\n    S = input()\n    count = 0\n    for i in range(N-2):\n        if S[i:i+3] == \"ABC\":\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4273,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    names = input_string.split('\\n')\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                if names[i][0] != names[j][0] and names[i][0] != names[k][0] and names[j][0] != names[k][0]:\n                    count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4274,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,M=map(int,input().split());print('YNeos'[M<N::2])\n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4275,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    S=input();print(\\\"YNeos\\\"[S[2::2]!=S[3::2]::2])\n    # Complete the function\n    # Hint: Use string slicing to extract the characters at positions 2, 3, 4, and 5, and compare them.\n    # If they are all equal, return \"Yes\"; otherwise, return \"No\".\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4276,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,T = map(int,input().split())\n    routes = []\n    for i in range(N):\n        c,t = map(int,input().split())\n        routes.append((c,t))\n    routes.sort(key=lambda x: x[1])\n    for i in range(N):\n        if routes[i][1] <= T:\n            return routes[i][0]\n    return \"TLE\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4277,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,A,B=map(int,input().split())\n    return min(N*A,B)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4278,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    strings=[]\n    for i in range(N):\n        strings.append(input())\n    count=0\n    for i in range(N):\n        for j in range(i+1,N):\n            if sorted(strings[i])==sorted(strings[j]:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4279,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    q = int(input())\n    for i in range(q):\n        k = int(input())\n        print(input_string[k-1])\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4280,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=list(map(int,input().split()))\n    edges=[]\n    for i in range(n-1):\n        x,y=list(map(int,input().split())\n        edges.append((x,y)\n        edges.append((y,x)\n    return n-1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4281,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    x=list(map(int,input().split())\n    x.sort()\n    min_occupied=max(x[0],n-x[-1])\n    max_occupied=x[-1]-x[0]+1\n    for i in range(1,n-1):\n        if x[i]-x[i-1]>1:\n            min_occupied+=1\n        if x[i+1]-x[i]>1:\n            max_occupied+=1\n    return min_occupied,max_occupied\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4282,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    kids = [[] for i in range(n)]\n    for i in range(n):\n        a, b = map(int, input().split())\n        kids[a-1].append(b)\n        kids[b-1].append(a)\n    for i in range(n):\n        kids[i].sort()\n    for i in range(n):\n        if len(kids[i]) == 1:\n            p = i+1\n            break\n    for i in range(n):\n        if kids[p-1][0] == i+1:\n            p = kids[p-1][1]\n            break\n    ans = [p]\n    for i in range(n-1):\n        ans.append(kids[p-1][0])\n        p = kids[p-1][1]\n    print(*ans)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4283,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    a.sort()\n    max_team=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if abs(a[i]-a[j])<=5:\n                max_team+=1\n    return max_team\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4284,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    q = int(input())\n    for _ in range(q):\n        k, n, a, b = map(int, input().split())\n        if k < a:\n            print(-1)\n        else:\n            print(n)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4285,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, = list(map(int, input().split()))\n    s = input()\n    count = 0\n    for i in range(3**N):\n        binary = bin(i)[2:]\n        binary = '0'*(N-len(binary)) + binary\n        new_string = ''\n        for j in range(N):\n            if s[j] == '?':\n                if binary[j] == '0':\n                    new_string += 'a'\n                elif binary[j] == '1':\n                    new_string += 'b'\n                else:\n                    new_string += 'c'\n            else:\n                new_string += s[j]\n        count += new_string.count('abc')\n    return count % (10**9 + 7)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4286,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=list(map(int,input().split()))\n    a=list(map(int,input().split())\n    graph=[[0]*n for i in range(n)]\n    for i in range(m):\n        x,y,w=list(map(int,input().split())\n        graph[x-1][y-1]=w\n        graph[y-1][x-1]=w\n    for i in range(n):\n        graph[i][i]=0\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                for l in range(n):\n                    graph[i][j]=min(graph[i][j],graph[i][k]+graph[k][j])\n    return sum(graph[i][i] for i in range(n))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4287,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,m,n=list(map(int,input().split()))\n    rain=[]\n    umbrellas=[]\n    for i in range(n):\n        l,r=list(map(int,input().split())\n        rain.append([l,r])\n    for i in range(m):\n        x,p=list(map(int,input().split())\n        umbrellas.append([x,p])\n    umbrellas.sort(key=lambda x:x[0])\n    fatigue=0\n    for i in range(n):\n        if i==0:\n            if rain[i][0]>0:\n                fatigue+=umbrellas[0][1]*rain[i][0]\n                continue\n        for j in range(m):\n            if umbrellas[j][0]>rain[i][1]:\n                continue\n            if umbrellas[j][0]>=rain[i][0]:\n                fatigue+=umbrellas[j][1]*(rain[i][1]-rain[i][0])\n                break\n    return fatigue\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4288,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print(['No','Yes'][2==len(set(input().split()))])\n    # Complete the solution function\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4289,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    t, a = map(int, input().split())\n    h = list(map(int, input().split())\n    min_diff = float('inf')\n    index = -1\n    for i in range(n):\n        temp = t - h[i] * 0.006\n        if abs(temp - a) < min_diff:\n            min_diff = abs(temp - a)\n            index = i + 1\n    return index\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4290,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split());print(a*(a-1)//2+b*(b-1)//2)\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4291,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,q = map(int,input().split())\n    s = input()\n    queries = []\n    for i in range(q):\n        queries.append(list(map(int,input().split()))\n    for query in queries:\n        l,r = query[0],query[1]\n        count = 0\n        for i in range(l,r-1):\n            if s[i:i+2] == \"AC\":\n                count += 1\n        print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4292,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    I=lambda:map(int,input().split());_,k=I();print(sum(sorted(I())[:k]))\n    # Complete the solution function\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4293,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    A=list(map(int,input().split()));print(sum(A)-max(A))\n    # Write your code here\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4294,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    X,A=map(int,input().split());print((X>=A)*10)\n    # Write your code here\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4295,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split());print(min(a%b,-a%b))\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4296,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print('bwuisnt'[sum(map(int,input().split()))<=21::2])\n    # Write your code here\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4297,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    if n%2==0:\n        return 2\n    else:\n        return 2*n\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4298,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,D = map(int,input().split())\n    inspectors = 1\n    if D >= N:\n        return N\n    else:\n        for i in range(1,N+1):\n            if i-D < 1:\n                start = 1\n            else:\n                start = i-D\n            if i+D > N:\n                end = N\n            else:\n                end = i+D\n            if end-start+1 > inspectors:\n                inspectors = end-start+1\n    return inspectors\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4299,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    S=input()[-1];print(\\\"hpb\\\"[(S in\\\"01683\\\")+(S==\\\"3\\\")]+\\\"on\\\")\n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4300,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    d=list(map(int,input().split())\n    total=0\n    for i in range(N):\n        for j in range(i+1,N):\n            total+=d[i]*d[j]\n    return total\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4301,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input_string.split()))\n    for i in range(n):\n        max_val = max(a[:i] + a[i+1:])\n        print(max_val)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4302,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split())\n    if a>b:\n        a,b=b,a\n    return (a+b)*(a-1)//2\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4303,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k = map(int,input().split())\n    x = list(map(int,input().split())\n    x.sort()\n    time = 0\n    for i in range(k):\n        time += abs(x[i]-x[i-1])\n    return time\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4304,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split())\n    total_height=sum(range(1,100))\n    total_snow=0\n    for i in range(1,100):\n        total_snow+=i\n        if a+b<=total_height:\n            break\n    return total_snow-i+1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4305,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    h,a=map(int,input().split());print(-(-h//a))\n    # Complete the function\n    # Hint: Use integer division to get the number of attacks needed\n    # Use the floor division operator (-) to get the result rounded down to the nearest integer\n    # Example: -(-10//4) will give 2\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4306,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c,d=map(int,input().split());print(max(0,min(b,d)-max(a,c)))\n    # Write your code here\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4307,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    count=0\n    for i in range(1,n+1):\n        if i%2!=0:\n            divisors=0\n            for j in range(1,i+1):\n                if i%j==0:\n                    divisors+=1\n            if divisors==8:\n                count+=1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4308,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split());print(int(not n%k==0))\n    # Write your code here\n    n,k=map(int,input().split())\n    if n%k==0:\n        return 0\n    else:\n        return k-n%k\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4309,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    for i in range(100,999):\n        if all(str(i)==str(i)[0] for i in str(N)):\n            print(i)\n            break\n    else:\n        print(\"No such ABC exists\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4310,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c=sorted(map(int,input().split()))\n    return min(a+b,b+c,a+c)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4311,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=int(input())\n    a=[s]\n    i=1\n    while True:\n        if i>100000:\n            break\n        if a[-1]%2==0:\n            a.append(a[-1]//2)\n        else:\n            a.append(3*a[-1]+1)\n        if a[-1] in a[:-1]:\n            return i\n        i+=1\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4312,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    A,B,C,D=map(int,input().split());print(\\\"YNeos\\\"[(A+D-1)//D<(C+B-1)//B::2])\n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4313,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    values=list(map(int,input_string.split()))\n    values=values[1:]\n    costs=list(map(int,input_string.split())\n    costs=costs[n+1:]\n    max_value=0\n    for i in range(n):\n        for j in range(i+1,n):\n            max_value=max(max_value,values[i]+values[j]-costs[i]-costs[j])\n    return max_value\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4314,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    h,w=map(int, input().split())\n    grid=[]\n    for i in range(h):\n        grid.append(list(input()))\n    for i in range(h):\n        for j in range(w):\n            if grid[i][j]=='.':\n                grid[i][j]=' '\n    for i in range(h):\n        if all(grid[i][j]==' ' for j in range(w)):\n            grid.pop(i)\n    for j in range(w):\n        if all(grid[i][j]==' ' for i in range(h)):\n            for i in range(h):\n                grid[i].pop(j)\n    for i in range(len(grid)):\n        grid[i]=''.join(grid[i])\n    for row in grid:\n        print(row)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4315,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=int(input())\n    pi=3.14159265358979323846\n    circumference=2*pi*a\n    print(circumference)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4316,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print('Yes' if len(set(input()))==2 else 'No')\n    # Complete the function\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4317,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split());print(max(a+b,a-b,a*b))\n    # Write your code here\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4318,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    heights = list(map(int, input_string.split()))\n    count = 0\n    for i in range(1, N):\n        if all(heights[j] <= heights[i] for j in range(i)):\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4319,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = list(map(int, input().split()))\n    n = len(a)\n    count = 1\n    steps = [1]\n    for i in range(1, n):\n        if a[i] == a[i-1] + 1:\n            count += 1\n        else:\n            steps.append(count)\n            count = 1\n    steps.append(count)\n    return steps\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4320,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        x = 1\n        k = 1\n        while True:\n            if x + 2*x + 4*x + 8*x + 16*x + 32*x + 64*x + 128*x == n:\n                print(x)\n                break\n            else:\n                x += 1\n                k += 1\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4321,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    for i in range(k):\n        if n % 10 == 0:\n            n //= 10\n        else:\n            n -= 1\n    return n\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4322,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    kk=lambda:map(int,input().split())\n    n=next(kk())\n    a=list(kk())\n    a.sort()\n    ans=[]\n    for i in range(n):\n        if a[i]-a[i-1]<=1:\n            ans.append(a[i])\n    return len(ans),ans\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4323,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    songs = []\n    for i in range(n):\n        a, b = list(map(int, input().split())\n        songs.append((a, b))\n    songs.sort(key=lambda x: x[1])\n    total_size = sum(x[0] for x in songs)\n    if total_size > m:\n        return -1\n    else:\n        return 0\n    for i in range(n):\n        if songs[i][1] > m:\n            return -1\n        m -= songs[i][1]\n        if m == 0:\n            return i + 1\n    return n\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4324,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n,a,b=map(int,input().split())\n        s=input()\n        if n%a==0:\n            for i in range(0,n,a):\n                if len(set(s[i:i+a])!=b:\n                    return \"Not Possible\"\n                else:\n                    print(s)\n        else:\n            for i in range(0,n-a,a):\n                if len(set(s[i:i+a])!=b:\n                    return \"Not Possible\"\n                else:\n                    print(s)\n                    \nsolution(input())\n# End of code\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4325,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,X,T=map(int,input().split());print(-N//X*-T)\n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4326,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    groups=0\n    for i in range(1,N+1):\n        if N%i==0:\n            if i>=3:\n                groups+=1\n    return groups\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4327,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    A,P=map(int,input().split());print(A*3+P>>1)\n    # Write your code here\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4328,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    A,B=map(int,input().split());print([B-A,A+B][B%A==0])\n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4329,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print('YNeos'[input()!=input()[:-1]::2])\n    # Complete the solution function\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4330,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split());print(['IMPOSSIBLE',a+(b-a)//2][(b-a)%2==0])\n    # Write your code here\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4331,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = input()\n    if '7' in N:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4332,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=input()\n    n=int(n)\n    s=0\n    while n>0:\n        s+=n%10\n        n//=10\n    if n%s==0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4333,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c,d=map(int,input().split());print(b+c-d,c+d-a,a+b-d,b+c-a)\n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4334,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s,t=input().split();a,b=map(int,input().split())\n    u=input()\n    if s==u:\n        return str(a-1)+\" \"+str(b)\n    else:\n        return str(a)+\" \"+str(b-1)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4335,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input());s=input();print('YNeos'[s[:n//2]!=s[n//2:]::2])\n    # Complete the function\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4336,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    W,H,x,y=map(int,input().split());print(W*H/2,(W==x*2)&(H==y*2)+0)\n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4337,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    input();print('Three' if len(set(input().split()))==3 else 'Four')\n    # Write your code here\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4338,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,x,y = list(map(int,input().split()))\n    a = list(map(int,input().split())\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4339,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    b=list(map(int,input().split())\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if a[i]+a[j]>b[i]+b[j]:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4340,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    for i in range(n):\n        if a[i]==1:\n            a[i]=2\n        elif a[i]==2:\n            a[i]=1\n        elif a[i]==3:\n            a[i]=4\n        elif a[i]==4:\n            a[i]=3\n        elif a[i]==5:\n            a[i]=6\n        elif a[i]==6:\n            a[i]=5\n        elif a[i]==7:\n            a[i]=8\n        elif a[i]==8:\n            a[i]=7\n        elif a[i]==9:\n            a[i]=10\n        elif a[i]==10:\n            a[i]=9\n    for i in range(n):\n        if a[i]==10000:\n            a[i]=999\n        elif a[i]==999:\n            a[i]=1000\n        elif a[i]==100000:\n            a[i]=9999\n        elif a[i]==9999:\n            a[i]=10000\n        elif a[i]==1000000:\n            a[i]=99999\n        elif a[i]==99999:\n            a[i]=100000\n        elif a[i]==10000000:\n            a[i]=999999\n        elif a[i]==999999:\n            a[i]=1000000\n        elif a[i]==100000000:\n            a[i]=9999999\n        elif a[i]==9999999:\n            a[i]=10000000\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4341,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    rd = lambda: list(map(int, input().split()))\n    n, m = rd()\n    edges = [tuple(rd()) for _ in range(m)]\n    graph = [[] for _ in range(n+1)]\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    def dfs(node, visited, path):\n        visited.add(node)\n        path.append(node)\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                dfs(neighbor, visited, path)\n    cycles = 0\n    for i in range(1, n+1):\n        if i not in visited:\n            path = []\n            dfs(i, set(), path)\n            if len(path) > 2 and path[0] == path[-1]:\n                cycles += 1\n    return cycles\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4342,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    colors = list(map(int, input().split()))\n    edges = []\n    for i in range(n-1):\n        edges.append(list(map(int, input().split()))\n    # Your code goes here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4343,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    t = input()\n    s_list = []\n    for i in range(ord('a'), ord('z')+1):\n        for j in range(ord('a'), ord('z')+1):\n            for k in range(ord('a'), ord('z')+1):\n                for l in range(ord('a'), ord('z')+1):\n                    for m in range(ord('a'), ord('z')+1):\n                        for n in range(ord('a'), ord('z')+1):\n                            for o in range(ord('a'), ord('z')+1):\n                                for p in range(ord('a'), ord('z')+1):\n                                    s_list.append(chr(i)+chr(j)+chr(k)+chr(l)+chr(m)+chr(n)+chr(o)+chr(p))\n    s_list.sort()\n    s_list = [x for x in s_list if x >= s and x <= t]\n    return s_list[len(s_list)//2]\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4344,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    ratings=list(map(int,input().split())\n    ratings=sorted(list(set(ratings))\n    if len(ratings)<k:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        print(\" \".join(str(i) for i in range(1,k+1))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4345,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, a = int(input()), list(map(int, input().split())) + [0, ]\n    increasing, decreasing = [], []\n    for i in range(n):\n        if a[i] > a[i+1]:\n            if a[i] > a[i-1]:\n                increasing.append(a[i])\n            else:\n                decreasing.append(a[i])\n        elif a[i] < a[i+1]:\n            if a[i] < a[i-1]:\n                decreasing.append(a[i])\n        else:\n            return \"NO\"\n    if len(increasing) != len(set(increasing) or len(decreasing) != len(set(decreasing)):\n        return \"NO\"\n    result = []\n    for i in range(n):\n        if a[i] in increasing:\n            result.append(0)\n        else:\n            result.append(1)\n    return \"YES\\n\" + \" \".join(map(str, result)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4346,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        L,v,l,r=map(int,input().split())\n        count=0\n        for i in range(1,L+1):\n            if i%v==0 and i not in range(l,r+1):\n                count+=1\n        print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4347,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    if n%2!=0:\n        return 0\n    else:\n        return (math.factorial(n)//(math.factorial(n//2)**2)//2)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4348,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    s=input()\n    for i in range(k):\n        if 'a' in s:\n            s=s.replace('a','',1)\n        elif 'b' in s:\n            s=s.replace('b','',1)\n        elif 'c' in s:\n            s=s.replace('c','',1)\n        elif 'd' in s:\n            s=s.replace('d','',1)\n        elif 'e' in s:\n            s=s.replace('e','',1)\n        elif 'f' in s:\n            s=s.replace('f','',1)\n        elif 'g' in s:\n            s=s.replace('g','',1)\n        elif 'h' in s:\n            s=s.replace('h','',1)\n        elif 'i' in s:\n            s=s.replace('i','',1)\n        elif 'j' in s:\n            s=s.replace('j','',1)\n        elif 'k' in s:\n            s=s.replace('k','',1)\n        elif 'l' in s:\n            s=s.replace('l','',1)\n        elif 'm' in s:\n            s=s.replace('m','',1)\n        elif 'n' in s:\n            s=s.replace('n','',1)\n        elif 'o' in s:\n            s=s.replace('o','',1)\n        elif 'p' in s:\n            s=s.replace('p','',1)\n        elif 'q' in s:\n            s=s.replace('q','',1)\n        elif 'r' in s:\n            s=s.replace('r','',1)\n        elif 's' in s:\n            s=s.replace('s','',1)\n        elif 't' in s:\n            s=s.replace('t','',1)\n        elif 'u' in s:\n            s=s.replace('u','',1)\n        elif 'v' in s:\n            s=s.replace('v','',1)\n        elif 'w' in s:\n            s=s.",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4349,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = map(int,input().split())\n    k = list(map(int,input().split())\n    special_offers = []\n    for i in range(m):\n        special_offers.append(list(map(int,input().split()))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4350,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    grid=[]\n    for i in range(n):\n        grid.append(list(input())\n    stars=[]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j]=='*':\n                stars.append((i,j))\n    if len(stars)>n*m:\n        print(-1)\n        return\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j]=='*':\n                grid[i][j]='.'\n                for k in range(1,n*m-len(stars)+1):\n                    for l in range(len(stars)):\n                        x,y=stars[l]\n                        if is_valid(grid,x,y,k):\n                            grid[x][y]='*'\n                            stars.pop(l)\n                            break\n                    else:\n                        grid[i][j]='*'\n                        continue\n                else:\n                    grid[i][j]='*'\n                    continue\n                break\n    print(len(stars))\n    for x,y,k in stars:\n        print(x+1,y+1,k)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4351,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input();print('NYoe s'[s==s[::-1]::2])\n    # Write your code here\n    # Convert the input to a string and check if it is equal to its reverse. If it is, print Yes, else print No.\n    # Use slicing to reverse the string.\n    # s[::-1] will reverse the string.\n    # s[::2] will take every second character of the string.\n    # s[::-1][::2] will reverse the string and take every second character of it.\n    # If both are equal, it is a palindrome.\n    # If not, it is not a palindrome.\n    # Use the ternary operator to print Yes or No.\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4352,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int, input().split())\n    if a>b:\n        print(\"Alice\")\n    elif b>a:\n        print(\"Bob\")\n    else:\n        print(\"Draw\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4353,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print(*input().split(sep=\\\",\\\"))\n    # Write your code here\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4354,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    students=[]\n    checkpoints=[]\n    for i in range(n):\n        x,y=map(int,input().split())\n        students.append((x,y))\n    for j in range(m):\n        x,y=map(int,input().split())\n        checkpoints.append((x,y))\n    result=[]\n    for i in range(n):\n        min_dist=float('inf')\n        min_index=0\n        for j in range(m):\n            dist=abs(students[i][0]-checkpoints[j][0])+abs(students[i][1]-checkpoints[j][1])\n            if dist<min_dist:\n                min_dist=dist\n                min_index=j+1\n        result.append(min_index)\n    for i in result:\n        print(i)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4355,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=int(input());print(a+a*a+a**3)\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4356,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,M=map(int,input().split())\n    A=[]\n    for i in range(N):\n        A.append(input())\n    B=[]\n    for i in range(M):\n        B.append(input())\n    for i in range(N-M+1):\n        for j in range(N-M+1):\n            found=True\n            for k in range(M):\n                for l in range(M):\n                    if A[i+k][j+l]!=B[k][l]:\n                        found=False\n                        break\n                if not found:\n                    break\n            if found:\n                print(\"Yes\")\n                return\n    print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4357,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c=sorted(map(int,input().split()))\n    max_sum=max(a+b,a+c,b+c)\n    return max_sum\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4358,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    prices=list(map(int,input_string.split()))\n    prices.sort(reverse=True)\n    total=0\n    for i in range(n):\n        if i==0:\n            total+=prices[i]\n        else:\n            total+=prices[i]\n    return total\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4359,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = [int(input()) for i in range(5)]\n    a.sort()\n    return a[-1] * 2\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4360,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    numbers = list(map(int, input_string.split()))\n    total = sum(1/num for num in numbers)\n    return 1/total\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4361,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    heights=list(map(int,input().split())\n    heights.sort()\n    return heights[k-1]-heights[k-2]\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4362,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print([\\\"a\\\",\\\"A\\\"][65<=ord(input())<=90])\n    # Complete the function\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4363,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    K, S = map(int, input().split())\n    count = 0\n    for i in range(K+1):\n        for j in range(K+1):\n            if i+j <= S:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4364,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = input()\n    if len(n) != 4:\n        return \"NA\"\n    if int(n[:2]) > 20:\n        return \"YYMM\"\n    elif int(n[2:]) > 12:\n        return \"NA\"\n    else:\n        return \"MMYY\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4365,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    K=int(input())\n    even_count=0\n    odd_count=0\n    for i in range(1,K+1):\n        if i%2==0:\n            even_count+=1\n        else:\n            odd_count+=1\n    return (even_count*odd_count)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4366,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split());print((a+b)%24)\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4367,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,r=map(int,input().split())\n    if n>=10:\n        return r\n    else:\n        return r+100*(10-n)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4368,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,K=map(int,input().split())\n    count=0\n    while N>0:\n        N//=K\n        count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4369,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    if n%2==0:\n        return n//2\n    else:\n        return n//2+1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4370,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split())\n    if a+b<=16 and (a+b)%2!=0:\n        return \"Yay!\"\n    else:\n        return \":(\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4371,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    S = input()\n    min_diff = float('inf')\n    for i in range(len(S)-2):\n        num = int(S[i:i+3])\n        diff = abs(num - 753)\n        min_diff = min(min_diff, diff)\n    return min_diff\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4372,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    min_y=10**9\n    min_z=10**9\n    for i in range(n):\n        for j in range(i+1,n):\n            if a[i]!=a[j]:\n                y=a[i]+a[j]\n                z=min(a[i],a[j])\n                if y<min_y or (y==min_y and z<min_z):\n                    min_y=y\n                    min_z=z\n    print(min_y,min_z)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4373,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    max_days=0\n    for i in range(1,n+1):\n        if a[i-1]>=i:\n            max_days=i\n    return max_days\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4374,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    edges = []\n    for _ in range(m):\n        v, u = list(map(int, input().split())\n        edges.append((v, u))\n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4375,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    a = list(map(int, input().split())\n    edges = []\n    for i in range(n-1):\n        u, v = list(map(int, input().split())\n        edges.append((u, v))\n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4376,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R = lambda: list(map(int, input().split()))\n    n, m = R()\n    a = R()\n    b = R()\n    for i in range(m):\n        total = 0\n        for j in range(n):\n            total += a[j]\n            if b[i] <= total:\n                print(j+1, b[i]-sum(a[:j])+1)\n                break\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4377,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    c, b, a, d = sorted(list(map(int, input().split())))\n    if a + b == c + d:\n        return a, b, c\n    elif a + c == b + d:\n        return a, c, b\n    elif b + c == a + d:\n        return b, c, a\n    else:\n        return a, b, c\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4378,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=input()\n    count=0\n    for i in range(n-1):\n        if s[i]==s[i+1]:\n            count+=1\n    if count==0:\n        return 0,s\n    else:\n        return count,s\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4379,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    arr = list(map(int, input_string.split()))\n    max_len = 1\n    max_seq = [0]\n    for i in range(N):\n        for j in range(i+1, N):\n            if arr[j] - arr[i] == j - i:\n                if j - i + 1 > max_len:\n                    max_len = j - i + 1\n                    max_seq = [i+1, j+1]\n    print(max_len)\n    print(\" \".join(map(str, max_seq))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4380,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=input()\n    a,b=map(int,input().split())\n    if a%2==0 and b%2==0:\n        return \"No\"\n    else:\n        return \"Yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4381,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x,y=map(int,input().split())\n    return x+y//2\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4382,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    count=0\n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            for k in range(1,n+1):\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4383,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=input()\n    if int(N) in [7,5,3]:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4384,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    if int(input())<1000:a='ABC'\n    else:a='ABD'\n    print(a)\nsolution(input())\n# End your code here\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4385,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x=[int(input()) for _ in range(6)]\n    a,b,c,d,e,k=x[0],x[1],x[2],x[3],x[4]\n    if max(abs(b-a),abs(c-b),abs(d-c),abs(e-d))<=k:\n        print(\"Yay!\")\n    else:\n        print(\":(\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4386,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=int(input());print(['red',input()][a>=3200])\n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4387,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R=int(input())\n    if R<1200:\n        print(\"ABC\")\n    elif R<2800:\n        print(\"ARC\")\n    else:\n        print(\"AGC\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4388,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    n_str = str(n)\n    new_n = \"\"\n    for digit in n_str:\n        if digit == \"1\":\n            new_n += \"9\"\n        elif digit == \"9\":\n            new_n += \"1\"\n        else:\n            new_n += digit\n    print(int(new_n)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4389,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    n=len(s)\n    if n%2!=0:\n        return \"impossible\"\n    else:\n        n=n//2\n        s1=s[0:n]\n        s2=s[n:]\n        s1=s1[::-1]\n        s2=s2[::-1]\n        s=s1+s2\n        return s\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4390,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        a,b=map(int,input().split())\n        if a%b==0:\n            print(0)\n        else:\n            print(b-a%b)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4391,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    res = 0\n    for i in range(n-k+1):\n        res = max(res, sum(a[i:i+k])/k)\n    return res\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4392,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    for i in range(m):\n        if a[p[i] > a[p[i] + 1]:\n            a[p[i], p[i] + 1] = a[p[i + 1], a[p[i]]\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4393,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=input()\n    count=[]\n    for i in range(26):\n        count.append(s.count(chr(ord('a')+i))%(i+1))\n    for i in range(26):\n        if count[i]!=0:\n            print(chr(ord('a')+i)*count[i],end='')\n            break\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4394,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = map(int,input().split())\n    edges = []\n    for i in range(m):\n        u,v,w = map(int,input().split())\n        edges.append((u,v,w)\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4395,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=input()\n    s=list(s)\n    count=0\n    for i in range(n):\n        if s[i]=='R':\n            if i%3==0 or i%3==1:\n                s[i]='G'\n                count+=1\n            else:\n                s[i]='B'\n                count+=1\n    return count,s\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4396,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    total=0\n    for i in range(n):\n        x,u=input_string.split()\n        if u==\"JPY\":\n            total+=float(x)\n        else:\n            total+=float(x)*38000.0\n    return total\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4397,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,i=map(int,input().split())\n    j=n-i+1\n    print(j)\n    print(\"The {}-th car from the front of a {}-car train is the {}-th car from the back.\".format(i,n,j))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4398,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    input();print(*(map(''.join,zip(*input().split()))),sep='')\n    # Complete the solution function\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4399,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print('YNeos'[len(set(input()))==1::2])\n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4400,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    S=input();print(max(n*(n*\\\"R\\\"in S)for n in[1,2,3]))\n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4401,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=input().split();print(n[2],*n[:2])\n    n[0],n[1],n[2]=n[2],n[0],n[1]\n    print(*n)\nsolution(input())\n# End your code here\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4402,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b = map(int, input().split())\n    if a <= 5:\n        return 0\n    elif a <= 12:\n        return b // 2\n    else:\n        return b\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4403,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=input().count('+')\n    b=input().count('-')\n    return a-b\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4404,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print('Heisei' if int(input()[5:7]) <= 4 else 'TBD')\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4405,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    topics = set(a)\n    max_count = 0\n    for topic in topics:\n        count = a.count(topic)\n        if count > max_count:\n            max_count = count\n    return max_count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4406,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k = map(int,input().split())\n    ids = list(map(int,input().split())\n    ids_set = set(ids)\n    ids_dict = {}\n    for i in range(n):\n        if ids[i] not in ids_dict:\n            ids_dict[ids[i]] = i\n    ids_list = sorted(ids_dict.values(),reverse=True)\n    if len(ids_list) > k:\n        ids_list = ids_list[:k]\n    return len(ids_list), \" \".join(map(str,ids_list)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4407,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, q = map(int,input().split())\n    coins = list(map(int,input().split())\n    queries = []\n    for i in range(q):\n        queries.append(int(input()))\n    for i in range(q):\n        print(min_coins(coins,queries[i]))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4408,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    cards = list(map(int, input().split())\n    fav_nums = list(map(int, input().split())\n    joy_levels = list(map(int, input().split())\n    max_joy = 0\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            for l in range(j+1, len(cards)):\n                joy = 0\n                for player in range(n):\n                    joy += joy_levels[cards[i] == fav_nums[player]] + joy_levels[cards[j] == fav_nums[player]] + joy_levels[cards[l] == fav_nums[player]]\n                max_joy = max(max_joy, joy)\n    return max_joy\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4409,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    min_val = a[0]\n    max_val = a[-1]\n    k = 0\n    operations = []\n    for i in range(n):\n        if a[i] != min_val:\n            k += abs(a[i] - min_val)\n            operations.append((1, i, i-1))\n            a[i] = min_val\n        if a[i] != max_val:\n            k += abs(a[i] - max_val)\n            operations.append((2, i, i+1) if i < n-1 else (2, i, 0))\n            a[i] = max_val\n    print(k)\n    for op in operations:\n        print(*op)\n    return k\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4410,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn,k = map(int,input().split())\n    \\tcount = 0\n    \\tfor i in range(len(input_string)-k):\n        \\tif input_string[i] == '0' and input_string[i+k] == '0':\n            \\tcount += 1\n    \\treturn count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4411,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, K = [int(x) for x in input().split()]\n    segments = []\n    for i in range(N):\n        l, r = [int(x) for x in input().split()]\n        segments.append((l, r))\n    segments.sort(key=lambda x: x[0])\n    count = [0] * (2 * 10**5 + 1)\n    for l, r in segments:\n        count[l] += 1\n        count[r+1] -= 1\n    for i in range(1, len(count)):\n        count[i] += count[i-1]\n    count = [x for x in count if x > 0]\n    i = 0\n    j = 0\n    m = 0\n    while i < len(count) and j < len(count):\n        if count[i] > K:\n            m += 1\n            i += 1\n        else:\n            j += 1\n            i = j\n    print(m)\n    print(\" \".join(str(x) for x in range(1, N) if count[x] > K))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4412,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    max_sum = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                if a[i] % a[j] != 0 and a[j] % a[k] != 0 and a[k] % a[i] != 0:\n                    max_sum = max(max_sum, a[i] + a[j] + a[k])\n    return max_sum\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4413,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn=int(input())\n    \\tquery_list=input_string.split('\\n')\n    \\tfor i in range(0,n,2):\n    \\t    a=list(map(int,query_list[i+1].split()))\n    \\t    a.sort()\n    \\t    count=1\n    \\t    for j in range(len(a)-1):\n    \\t        if abs(a[j]-a[j+1])==1:\n    \\t            count+=1\n    \\t    print(count)\n    \\t    a.clear()\n    \\t    count=0\n    \\t    a=[]\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4414,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    for i in range(n):\n        a, b, n, S = map(int, input().split())\n        if S % n == 0 and S <= a*n:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4415,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    inc = []\n    dec = []\n    for i in range(n):\n        if a[i] > a[i+1]:\n            dec.append(a[i])\n        elif a[i] < a[i+1]:\n            inc.append(a[i])\n        else:\n            return \"NO\"\n    return \"YES\", len(inc), inc, len(dec), dec\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4416,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=list(map(int,input().split(\\\" \\\")))\n    books=[]\n    for i in range(n):\n        t,a,b=list(map(int,input().split(\\\" \\\"))\n        books.append([t,a,b])\n    books.sort(key=lambda x:x[0])\n    alice_books=0\n    bob_books=0\n    total_time=0\n    for i in range(n):\n        if books[i][1]==1:\n            alice_books+=1\n        if books[i][2]==1:\n            bob_books+=1\n        total_time+=books[i][0]\n        if alice_books>=k and bob_books>=k:\n            return total_time\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4417,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    output=[]\n    for i in range(n):\n        n,k=map(int,input().split())\n        a=list(map(int,input().split())\n        if k<max(a):\n            output.append(-1)\n        else:\n            output.append(max(a))\n    return output\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4418,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        if a[i] not in [4, 8, 15, 16, 23, 42]:\n            count += 1\n    if count == n:\n        return 0\n    else:\n        return n - count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4419,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split())\n    return abs(a-b)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4420,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x,y,n=map(int,input().split())\n    return (n//x)*x+y\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4421,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    d=[int(x) for x in input().split()]\n    ans=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if (d[i]+d[j])%k==0:\n                ans+=1\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4422,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    s=input()\n    s=list(s)\n    s[k-1]=s[k-1].lower()\n    return ''.join(s)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4423,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print(*[_[0] for _ in sorted([[i+1] + input().split() for i in range(int(input()))], key=lambda x:(x[1], -int(x[2])))], sep='\\\n    ')\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4424,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=input().split();print('YNeos'[eval(a+'*500<'+b)::2])\n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4425,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    prob=0\n    for i in range(1,n):\n        if i<k:\n            prob+=(1/3)*(1/2)**(i)\n    return prob\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4426,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    S = input()\n    days = ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT']\n    next_sunday = days.index(S) + 1\n    if next_sunday == 7:\n        next_sunday = 0\n    print(next_sunday)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4427,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r,d,x=map(int, input().split())\n    for i in range(10):\n        x=r*x-d\n        print(int(x) if i!=9 else round(x))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4428,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    d = list(map(int, input().split()))\n    d.sort(reverse=True)\n    max_sum = 0\n    for i in range(n):\n        if d[i] == 0:\n            continue\n        if d[i] % 2 == 0:\n            max_sum = max(max_sum, d[i])\n        else:\n            max_sum += d[i]\n    return max_sum\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4429,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l = list(map(int,input().split()))\n    x,y,z = l[0],l[1],l[2]\n    if x>y and x>z:\n        a,b,c = x,y,z\n    elif y>x and y>z:\n        a,b,c = y,z,x\n    else:\n        a,b,c = z,x,y\n    if a>b and a>c:\n        print(\"YES\")\n        print(a,b,c)\n    else:\n        print(\"NO\")\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4430,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k=list(map(int,input().split()))\n    a=list(map(int,input().split())\n    ans=0\n    for i in range(n):\n        if a[i]<=k:\n            ans+=1\n            k-=a[i]\n        else:\n            break\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4431,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    s=input()\n    available_letters=input().split()\n    count=0\n    for i in range(n):\n        for j in range(i,n):\n            if s[i] in available_letters:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4432,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn=int(input())\n    for i in range(tn):\n        n=int(input())\n        a=list(map(int,input().split()))\n        max_sum=0\n        for i in range(n):\n            if a[i]>0:\n                pos_sum=0\n                neg_sum=0\n                for j in range(i,n):\n                    if a[j]>0:\n                    pos_sum+=a[j]\n                    else:\n                        neg_sum+=a[j]\n                    if pos_sum>neg_sum:\n                        max_sum=max(max_sum,pos_sum)\n                    else:\n                        max_sum=max(max_sum,neg_sum)\n        print(max_sum)\nsolution(input()) ",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4433,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    edges = []\n    for _ in range(m):\n        v, u = map(int, input().split())\n        edges.append((v, u))\n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4434,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n=int(input())\n        print(0)\n        print(40)\n        print(4166491669099888)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4435,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = [-1] * n\n    for i in range(n):\n        if a[i] % 2 == 0:\n            d[i] = 0\n        else:\n            for j in range(i + 1, n):\n                if a[j] % 2 != 0:\n                    d[i] = 1\n                    break\n    for i in range(n - 1, -1, -1):\n        if a[i] % 2 != 0:\n            for j in range(i - 1, -1, -1):\n                if a[j] % 2 == 0:\n                    d[i] = min(d[i], d[j] + 1)\n                    break\n    for i in range(n):\n        if a[i] % 2 == 0:\n            for j in range(i + 1, n):\n                if a[j] % 2 != 0:\n                    d[i] = min(d[i], d[j] + 1)\n                    break\n    print(\" \".join(map(str, d))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4436,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = 2\n        b = 2\n        c = n\n        while a*b*c > n:\n            if a*b*c == n:\n                print(\"YES\")\n                print(a, b, c)\n                break\n            else:\n                a += 1\n                b += 1\n                c -= 1\n                if a*b*c < n:\n                    print(\"NO\")\n                    break\nsolution(input())\n# End of code\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4437,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=input()\n    count_a=0\n    count_b=0\n    for i in range(n):\n        if s[i]=='a':\n            count_a+=1\n        else:\n            count_b+=1\n    if count_a==count_b:\n        return 0\n    else:\n        if count_a>count_b:\n            return abs(count_a-count_b)\n        else:\n            return abs(count_b-count_a)\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4438,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    points = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        points.append((x, y))\n    points.sort(key=lambda x: max(x[0], x[1]))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4439,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=int(input())\n    b=int(input())\n    if a==1:\n        return 2\n    elif b==1:\n        return 2\n    elif a==2:\n        return 3\n    elif b==2:\n        return 3\n    else:\n        return 1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4440,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l=int(input())\n    max_volume=0\n    for a in range(1,l+1):\n        for b in range(1,l+1):\n            for c in range(1,l+1):\n                if a+b+c<=l:\n                    volume=a*b*c\n                    if volume>max_volume:\n                        max_volume=volume\n    return max_volume\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4441,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print('Hello World' if input() == '1' else int(input()) + int(input()))\n    # Write your code here\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4442,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=sorted(input().split());print(a*int(b))\n    print(b*int(a))\n    if a*int(b)<b*int(a):\n        print(a*int(b))\n    else:\n        print(b*int(a))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4443,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    if s=='z':\n        print('a')\n    else:\n        print(chr(ord(s)+1))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4444,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=input().split()\n    print(b+a)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4445,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    parity=0\n    for i in range(n):\n        if i%2==parity:\n            parity=1-parity\n            a.remove(a[i])\n    return sum(a)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4446,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, a, b, k = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4447,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    c = [0] * m\n    for x in a:\n        c[x % m] += 1\n    min_moves = sum(abs(c[i] - n // m) for i in range(m))\n    print(min_moves)\n    for i in range(m):\n        a[i] += (n // m - c[i]) * (c[i] < n // m)\n    print(*a)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4448,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = map(int,input().split())\n    k = list(map(int,input().split())\n    special_offers = []\n    for i in range(m):\n        special_offers.append(list(map(int,input().split()))\n    return min_day(n,k,special_offers)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4449,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    Q = int(input())\n    for i in range(Q):\n        n = int(input())\n        sticks = list(map(int, input().split()))\n        sticks.sort()\n        if n == 1:\n            if sticks[0] == sticks[1] and sticks[2] == sticks[3]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        elif n == 2:\n            if sticks[0] == sticks[1] and sticks[2] == sticks[3] and sticks[4] == sticks[5] and sticks[6] == sticks[7]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        elif n == 3:\n            if sticks[0] == sticks[1] and sticks[2] == sticks[3] and sticks[4] == sticks[5] and sticks[6] == sticks[7] and sticks[8] == sticks[9]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4450,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k=list(map(int,input().split()))\n    graph=[]\n    for i in range(n):\n        graph.append([])\n    for i in range(m):\n        x,y,w=list(map(int,input().split())\n        graph[x-1].append((y-1,w))\n        graph[y-1].append((x-1,w)\n    for i in range(n):\n        graph[i].sort(key=lambda x:x[1])\n    dp=[[float('inf')]*n for i in range(n)]\n    dp[0]=[0]*n\n    for i in range(n):\n        for j in range(n):\n            for edge in graph[i]:\n                dp[i][edge[0]]=min(dp[i][edge[0],dp[i]+edge[1])\n    for k in range(1,n):\n        for i in range(n):\n            for j in range(n):\n                for l in range(n):\n                    dp[j][i]=min(dp[j][i],dp[j][k]+dp[k][i])\n    for i in range(n):\n        dp[i].sort()\n    return dp[0][k-1]\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4451,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split())\n    a.sort()\n    res=0\n    k=0\n    for i in range(1,n-1):\n        if a[i]-a[i-1]>1:\n            res+=a[i]-a[i-1]\n            k+=1\n    res+=a[n-1]-a[0]\n    k+=1\n    print(res,k)\n    for i in range(n):\n        if a[i]<=a[0]:\n            print(1,end=\" \")\n        elif a[i]<=a[1]:\n            print(2,end=\" \")\n        else:\n            print(3,end=\" \")\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4452,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = input()\n    n = int(n)\n    if n == 1:\n        return 1\n    elif n == 9:\n        return 1\n    elif n == 10:\n        return 2\n    elif n == 100:\n        return 2\n    elif n == 90:\n        return 2\n    elif n == 900:\n        return 2\n    elif n == 9000:\n        return 2\n    elif n == 90000:\n        return 3\n    elif n == 900000:\n        return 3\n    elif n == 9000000:\n        return 3\n    elif n == 90000000:\n        return 3\n    elif n == 90000000:\n        return 4\n    elif n == 900000000:\n        return 4\n    elif n == 9000000000:\n        return 4\n    elif n == 9000000000:\n        return 5\n    elif n == 90000000000:\n        return 5\n    elif n == 900000000000:\n        return 5\n    elif n == 900000000000:\n        return 6\n    elif n == 9000000000000:\n        return 6\n    elif n == 9000000000000:\n        return 7\n    elif n == 9000000000000:\n        return 7\n    elif n == 90000000000000:\n        return 7\n    elif n == 900000000000000:\n        return 8\n    elif n == 900000000000000:\n        return 8\n    elif n == 900000000000000",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4453,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    Q = int(input())\n    for i in range(Q):\n        n = int(input())\n        p = list(map(int, input().split()))\n        a = [0] * n\n        for j in range(n):\n            a[p[j]-1] = j+1\n        print(*a)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4454,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    prices = list(map(int, input().split()))\n    return min(prices)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4455,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    skills = list(map(int, input().split())\n    pairs = []\n    for i in range(k):\n        x, y = map(int, input().split())\n        pairs.append((x, y))\n    result = [0] * n\n    for i in range(n):\n        for j in range(n):\n            if i != j and skills[i] > skills[j] and (i, j) not in pairs and (j, i) not in pairs:\n                result[i] += 1\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4456,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    q = list(map(int, input().split()))\n    if k > 26:\n        print(\"NO\")\n        return\n    if n == 1:\n        print(\"YES\")\n        print(\"a\" * n)\n        return\n    if n == 2:\n        if p[0] == 1 and q[0] == 2:\n            print(\"YES\")\n            print(\"ab\")\n        elif p[0] == 2 and q[0] == 1:\n            print(\"YES\")\n            print(\"ba\")\n        else:\n            print(\"NO\")\n        return\n    if n == 3:\n        if p == [1, 2, 3] and q == [1, 3, 2]:\n            print(\"YES\")\n            print(\"abc\")\n        elif p == [1, 3, 2] and q == [1, 2, 3]:\n            print(\"YES\")\n            print(\"acb\")\n        elif p == [2, 1, 3] and q == [2, 3, 1]:\n            print(\"YES\")\n            print(\"bac\")\n        elif p == [2, 3, 1] and q == [2, 1, 3]:\n            print(\"YES\")\n            print(\"bca\")\n        elif p == [3, 1, 2] and q == [3, 2, 1]:\n            print(\"YES\")\n            print(\"cab\")\n        elif p == [3, 2, 1] and q == [3, 1, 2]:\n            print(\"YES\")\n            print(\"cba\")\n        else:\n            print(\"NO\")\n        return\n    if n == 4:\n        if p == [1, 2, 3, 4] and q == [1, 3, 4, 2]:\n            print(\"YES\")\n            print(\"abcd\")\n        elif p == [1, 3, 4, 2] and q == [1, 2, 4, 3]:\n            print(\"YES\")\n            print(\"acbd\")\n        elif p == [2",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4457,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    total_shots = 0\n    for i in range(n):\n        total_shots += (a[i] * i) + 1\n    print(total_shots)\n    print(\" \".join(str(i+1) for i in range(n)))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4458,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input());a=[*map(int,input().split())];count,m=0,n+1\n    for i in range(1,n+1):\n        if all(a[i]<=a[j] for j in range(1,i)):\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4459,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    input();a=Counter(map(int,input().split()))\n    count=0\n    for i in a:\n        if i!=a[i]:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4460,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = input().split()\n    for i in range(len(a)):\n        if a[i] == '0':\n            print(i+1)\n            break\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4461,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    H,W = map(int,input().split())\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4462,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    input();a,b,c,d,r=list(map(int,input().split())),0,0,0,'NYoe s'\n    for i in range(len(a)-1):\n        if a[i]*a[i+1]%4==0:r='Yes'\n        else:\n            if a[i]%4==0:b+=1\n            else:c+=1\n    if b==0 or c==0:r='Yes'\n    else:r='No'\n    return r\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4463,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=sorted(input())\n    t=sorted(input())\n    if s<t:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4464,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c=map(int,input().split())\n    if c%b==0:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4465,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split())\n    return (a*b-2)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4466,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c=map(int,input().split());print((a-c)//(b+c))\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4467,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    red_points=[]\n    blue_points=[]\n    for i in range(n):\n        red_points.append(list(map(int,input().split()))\n    for i in range(n):\n        blue_points.append(list(map(int,input().split()))\n    red_points.sort()\n    blue_points.sort()\n    count=0\n    i=0\n    j=0\n    while i<n and j<n:\n        if red_points[i][0]<blue_points[j][0] and red_points[i][1]<blue_points[j][1]:\n            count+=1\n            i+=1\n            j+=1\n        elif red_points[i][0]>blue_points[j][0]:\n            j+=1\n        else:\n            i+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4468,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,t=map(int,input().split());a=list(map(int,input().split()))\n    a.sort()\n    return sum(a)+t\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4469,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    shelf=[]\n    for i in range(n):\n        query=input().split()\n        if query[0]=='L':\n            shelf.insert(0,int(query[1]))\n        elif query[0]=='R':\n            shelf.append(int(query[1])\n        elif query[0]=='?':\n            if int(query[1])==shelf[0]:\n                print(len(shelf)-1)\n            elif int(query[1])==shelf[-1]:\n                print(0)\n            else:\n                print(min(shelf.index(int(query[1])),len(shelf)-shelf.index(int(query[1]))-1))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4470,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    q = int(input())\n    for i in range(q):\n        n = int(input())\n        count = 0\n        while n != 1:\n            if n % 2 == 0:\n                n //= 2\n                count += 1\n            elif n % 3 == 0:\n                n *= 2\n                count += 1\n            elif n % 5 == 0:\n                n //= 5\n                count += 1\n            else:\n                print(-1)\n                break\n        else:\n            print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4471,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    T = int(input())\n    for i in range(T):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if max(a) >= 2:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4472,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=input()\n    b=input()\n    count=0\n    for i in range(n):\n        if a[i]!=b[i]:\n            count+=1\n    return count\nprint(solution())\n# End your code here\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4473,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    queries = []\n    for i in range(t):\n        a, b, k = map(int, input().split())\n        queries.append((a, b, k))\n    result = []\n    for query in queries:\n        a, b, k = query\n        x = 0\n        for i in range(k):\n            if i % 2 == 0:\n                x += a\n            else:\n                x -= b\n        result.append(x)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4474,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        m = 0\n        while not is_good(n):\n            n += 1\n            m = n\n        print(m)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4475,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        a,b,x,y,n=map(int,input().split())\n        if a>=x and b>=y:\n            if a>b:\n                if n>=a-x:\n                    print((a-x)*b)\n                else:\n                    print(a*b)\n            else:\n                if n>=b-y:\n                    print(a*(b-y)\n                else:\n                    print(a*b)\n        else:\n            print(a*b)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4476,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        a, b = map(int, input().split())\n        if a == b:\n            print(0)\n        elif a > b:\n            if a % 2 == 0:\n                print(abs(a - b))\n            else:\n                print(abs(a - b) + 1)\n        else:\n            if b % 2 == 0:\n                print(abs(a - b))\n            else:\n                print(abs(a - b) + 1)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4477,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        x=int(input())\n        count=0\n        for i in range(1,10):\n            count+=len(str(i)*(x//10+1)\n        print(count)\nsolution()\n# End of code\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4478,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k=int(input())\n    sequences=[]\n    for i in range(k):\n        n=int(input())\n        sequence=list(map(int,input().split()))\n        sequences.append(sequence)\n    for i in range(k):\n        for j in range(k):\n            if i!=j:\n                if sum(sequences[i])-sequences[i][0]==sum(sequences[j])-sequences[j][0]:\n                    print(\"YES\")\n                    print(i+1,sequences[i].index(sequences[i][0])+1)\n                    print(j+1,sequences[j].index(sequences[j][0])+1)\n                    return\n    print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4479,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    A = list(map(int, input_string.split(','))\n    K = int(input_string.split()[-1])\n    A.sort()\n    A = A[:-K] + [-a for a in A[-K:]]\n    return sum(A)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4480,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    total_sum = sum(input_string)\n    if total_sum % 3 != 0:\n        return False\n    \n    target_sum = total_sum / 3\n    current_sum = 0\n    count = 0\n    for i in range(len(input_string)):\n        current_sum += input_string[i]\n        if current_sum == target_sum:\n            count += 1\n            if count == 3:\n                return True\n            current_sum = 0\n            \n    return False\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4481,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    for _ in range(int(input())):s=input();d[s]=d.get(s,0)+1\n    max_votes=max(d.values())\n    for s in sorted(d):\n        if d[s]==max_votes:print(s)\nd=dict()\nsolution(input())\n# End of code\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4482,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = float(input())\n    a = list(map(int, input_string.split()))\n    a.sort()\n    total_cost = 0\n    for i in range(n):\n        total_cost += (a[i]-a[n-i-1])**2\n    return total_cost\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4483,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x=int(input())\n    a=int(input())\n    b=int(input())\n    cake_price=a\n    donut_price=b\n    donuts_bought=x//b\n    total_price=a+donuts_bought*b\n    return x-total_price\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4484,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split());r=10**9+7\n    if n==1 and m==1:\n        return 1\n    elif n==1 and m==2:\n        return 2\n    elif n==2 and m==1:\n        return 2\n    elif n==2 and m==2:\n        return 6\n    else:\n        return (n*m*(n+m-1))%r\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4485,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,M = map(int,input().split())\n    islands = [0]*(N+1)\n    for i in range(M):\n        a,b = map(int,input().split())\n        islands[a] += 1\n        islands[b] += 1\n    if islands[1] == 0 or islands[N] == 0:\n        return \"IMPOSSIBLE\"\n    for i in range(2,N):\n        if islands[i] == 0:\n            return \"IMPOSSIBLE\"\n    return \"POSSIBLE\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4486,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    result = \"\"\n    for i in range(1, len(s), 2):\n        result += s[i]\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4487,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    A,B,C = input().split()\n    if A[-1] == B[0] and B[-1] == C[0]:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4488,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=int(input()),int(input());print(['ELQEUSASL'[a<b::2],'GREATER'][a>b])\n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4489,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=[input() for _ in range(int(input()))]\n    t=[input() for _ in range(int(input()))]\n    s.sort()\n    t.sort()\n    s_set=set(s)\n    t_set=set(t)\n    s_set=list(s_set)\n    t_set=list(t_set)\n    s_set.sort()\n    t_set.sort()\n    i=0\n    j=0\n    count=0\n    while i<len(s_set) and j<len(t_set):\n        if s_set[i]==t_set[j]:\n            count+=1\n            i+=1\n            j+=1\n        elif s_set[i]<t_set[j]:\n            i+=1\n        else:\n            j+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4490,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    b = input()\n    if b == 'A':\n        print('T')\n    elif b == 'C':\n        print('G')\n    elif b == 'G':\n        print('C')\n    else:\n        print('A')\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4491,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    return max(grid[0][0] + grid[1][n-1], grid[n-1][0] + grid[1][n-1])\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4492,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f=lambda:map(int,input().split())\n    N,x=f()\n    a=list(f())\n    ans=0\n    for i in range(N):\n        if a[i]>x:\n            ans+=a[i]//x\n            a[i]=a[i]%x\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4493,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    L = [list(map(int, input().split())) for _ in range(3)]\n    a1 = L[0][0]\n    a2 = L[1][0]\n    a3 = L[2][0]\n    b1 = L[0][1]\n    b2 = L[1][1]\n    b3 = L[2][1]\n    c1 = L[0][2]\n    c2 = L[1][2]\n    c3 = L[2][2]\n    if a1 + b1 == c1 and a2 + b2 == c2 and a3 + b3 == c3:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4494,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print(['ARC','ABC'][input()[1]=='R'])\n    # Write your code here\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4495,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,x=map(int,input().split())\n    count=0\n    for i in range(a,b+1):\n        if i%x==0:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4496,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    d=int(input())\n    if d==25:\n        print(\"Christmas\")\n    elif d==24:\n        print(\"Christmas Eve\")\n    elif d==23:\n        print(\"Christmas Eve Eve\")\n    else:\n        print(\"Christmas Eve Eve Eve\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4497,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    count=0\n    max_count=0\n    max_num=0\n    for i in range(1,n+1):\n        count=0\n        while i%2==0:\n            count+=1\n            i=i//2\n        if count>max_count:\n            max_count=count\n            max_num=i\n    print(max_num)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4498,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c,d=map(int,input().split(\\\" \\\"))\n    if abs(a-c)<=d or (abs(a-b)<=d and abs(b-c)<=d):\n        return \"Yes\"\n    else:\n        return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4499,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c=input().split()\n    return \"\".join([i[0].upper() for i in [a,b,c] if i]\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4500,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c=map(int,input().split())\n    if a+b>=c:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4501,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,A = map(int,input().split())\n    x = list(map(int,input().split())\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (x[i]+x[j])/2 == A:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4502,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    a=list(map(int,input_string.split()))\n    b=[]\n    for i in range(N):\n        b.append(a[i])\n        b.reverse()\n    return b\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4503,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    h,n=map(int,input().split());print('YNeos'[sum(map(int,input().split()))<h::2])\n    # Complete the function\n    # Hint: Use the given constraints to check if Raccoon can win without using the same move twice or more.\n    # If the sum of the moves is less than H, then Raccoon can win. Otherwise, he can't.\n    # You can use the map function to convert the input string to a list of integers.\n    # You can use the sum function to calculate the sum of the list.\n    # You can use the 'Y' and 'N' strings to print the result.\n    # You can use the 'eos' string to print the result.\n    # The '[0]' index is used to get the first character of the string 'YNeos'\n    # If the sum of the moves is less than H, the result is 'Yes', otherwise, it's 'No'.\n    # The '::2' is used to iterate over the list in steps of 2, so that we only consider every other move.\n    # This is because we don't want to use the same move twice or more.\n    # The '[0]' index is used to get the first character of the string 'YNeos'\n    # If the sum of the moves is less than H, the result is 'Yes', otherwise, it's 'No'.\n    # The 'eos' string is used to print the result.\n    # The '[0]' index is used to get the first character of the string 'YNeos'\n    # If the sum of the moves is less than H, the result is 'Yes', otherwise, it's 'No'.\n    # The 'eos' string is used to print the result.\n    # The '[0]' index is used to get the first character of the string 'YNeos'\n    # If the sum of the moves is less than H, the result is 'Yes', otherwise, it's 'No'.\n    # The 'eos' string is used to print the result.\n    # The '[0]' index is used to get the first character of the string 'YNeos'\n    # If the sum of the moves is less than H, the result is 'Yes', otherwise, it's 'No'.\n    # The 'eos' string is used to print the result.",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4504,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = input()[:-1]\n    while not is_even(n):\n        n = n[:-1]\n    return len(n)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4505,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print(\\\"Yes\\\" if len(set(input())) == 3 else \\\"No\\\")\n    # Write your code here\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4506,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R = lambda: map(int, input().split())\n    n = next(R())\n    a = list(R())\n    b = list(R())\n    b.sort()\n    return sum(a[i] * b[i] for i in range(n)) % 998244353\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4507,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, M, K = map(int, input().split())\n    shovels = list(map(int, input().split()))\n    offers = []\n    for _ in range(M):\n        x, y = map(int, input().split())\n        offers.append((x, y))\n    shovels.sort()\n    offers.sort(key=lambda x: x[0])\n    i = 0\n    j = 0\n    total_cost = 0\n    while K > 0:\n        if i < len(shovels) and shovels[i] <= offers[j][0]:\n            total_cost += shovels[i]\n            K -= 1\n            i += 1\n        else:\n            total_cost += offers[j][1]\n            K -= offers[j][0]\n            j += 1\n    return total_cost\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4508,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    vertex_count = int(input())\n    edges = []\n    for i in range(vertex_count - 1):\n        u, v = map(int, input().split())\n        edges.append((u, v))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4509,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n, k = map(int, input().split())\n        count = 0\n        num = 1\n        while count < k:\n            if num % n != 0:\n                count += 1\n            num += 1\n        print(num - 1)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4510,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    ids=list(map(int,input().split())\n    ids_dict={}\n    for i in range(n):\n        if ids[i] not in ids_dict:\n            ids_dict[ids[i]]=1\n        else:\n            ids_dict[ids[i]]+=1\n    ids_dict=sorted(ids_dict.items(),key=lambda x:x[1],reverse=True)\n    m=min(n,k)\n    ids_list=[]\n    for i in range(m):\n        ids_list.append(ids_dict[i][0])\n    return m,ids_list\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4511,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4512,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R = lambda: map(int, input().split())\n    s = input()\n    q = int(input())\n    queries = [list(map(int, input().split())) for _ in range(q)]\n    for query in queries:\n        if query[0] == 1:\n            s = s[:query[1]-1] + query[2] + s[query[1]:]\n        else:\n            print(len(set(s[query[1]-1:query[2]))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4513,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    Q = int(input())\n    for i in range(Q):\n        board = []\n        for j in range(9):\n            board.append(list(map(int, input()))\n        for j in range(9):\n            for k in range(9):\n                if board[j][k] == 0:\n                    board[j][k] = 9\n        for j in range(9):\n            for k in range(9):\n                if board[j][k] == 0:\n                    for l in range(1, 10):\n                        board[j][k] = l\n                        if is_valid(board):\n                            print_board(board)\n                            break\n                    else:\n                        board[j][k] = 0\n                        continue\n                    break\n        else:\n            continue\n        break\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4514,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,q=map(int,input().split())\n    tree=[]\n    for i in range(n):\n        tree.append([])\n    for i in range(2,n+1):\n        tree[int(input())-1].append(i)\n    for i in range(n):\n        if not tree[i]:\n            tree[i].append(i+1)\n    queries=[]\n    for i in range(q):\n        queries.append(list(map(int,input().split()))\n    for i in range(q):\n        u,k=queries[i]\n        if u==1:\n            print(tree[u][k-1])\n        else:\n            temp=tree[u]\n            while temp:\n                temp=tree[temp[0]-1]\n                if len(temp)<k:\n                    print(-1)\n                    break\n                else:\n                    print(temp[k-1])\n                    temp.pop(0)\n                    k-=1\n                    if k==0:\n                        break\n                    \n# Test your code with this input\ninput_string = \"\"\"9 6\n1 1 1 3 5 3 5 7\n3 1\n1 5\n3 4\n7 3\n1 8\n1 9\"\"\"\nsolution(input_string)\n# Output: 3\n#        6\n#        8\n#        -1\n#        9\n#        4\n# Explanation:\n# The first query is (3, 1), so the command starts from the third officer (index 3). The order of receiving the command is [3, 5, 6, 8, 7, 9]. The second query is (1, 5), so the command starts from the first officer (index 1). The order of receiving the command is [1, 2, 3, 5, 6, 8, 7, 9, 4]. The third query is (7, 3), so the command starts from the seventh officer (index 7). The order of receiving the command is [7, 9]. The fourth query is (1, 8), so the command starts from the first officer (index 1) again. The",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4515,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c,n=map(int,input().split())\n    if a+b+c==n:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4516,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    x=list(map(int,input().split())\n    x.sort()\n    x=list(set(x))\n    x.sort()\n    x.append(n+1)\n    ans=[]\n    for i in range(1,n+1):\n        p=[]\n        for j in range(1,n+1):\n            if j!=i:\n                p.append(j)\n        p.insert(i-1,i)\n        f=0\n        for j in range(m-1):\n            f+=abs(p.index(x[j])-p.index(x[j+1]))\n        ans.append(f)\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4517,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, M = list(map(int, input().split()))\n    graph = [[] for _ in range(N)]\n    for _ in range(N-1):\n        u, v = list(map(int, input().split())\n        graph[u-1].append(v-1)\n        graph[v-1].append(u-1)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4518,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    am = int(input())\n    n = int(input())\n    gangs = list(map(int, input().split()))\n    if am != n:\n        return \"NO\"\n    if len(set(gangs)) == 1:\n        return \"NO\"\n    if len(set(gangs)) == n:\n        return \"YES\"\n    for i in range(n):\n        for j in range(i+1, n):\n            if gangs[i] != gangs[j]:\n                print(f\"{i+1} {j+1}\")\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4519,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    return input_string\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4520,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    segments = []\n    for i in range(n):\n        l, r = map(int, input().split())\n        segments.append((l, r))\n    segments.sort(key=lambda x: x[0])\n    count = [0] * 210\n    for l, r in segments:\n        count[l] += 1\n        count[r+1] -= 1\n    for i in range(1, len(count)):\n        count[i] += count[i-1]\n    count = [x for x in count if x > 0]\n    i = 0\n    while i < len(count) and count[i] <= k:\n        i += 1\n    if i == len(count):\n        return 0\n    m = 0\n    for j in range(i, len(count)):\n        if count[j] > k:\n            m += 1\n    return m\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4521,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    x = list(map(int, input().split())\n    v = list(map(int, input().split())\n    d = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            d += abs(x[i]-x[j])/(abs(v[i]-v[j])+1)\n    return int(d)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4522,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=[int(x) for x in input().split()]\n    edges=[]\n    for i in range(n-1):\n        u,v,w=map(int,input().split())\n        edges.append((u,v,w)\n    queries=[int(x) for x in input().split()]\n    pass\n    return [0]*m\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4523,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    for i in range(n):\n        a=list(map(int,input().split())\n        if len(set(a))==1:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4524,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    a=input_string[:n]\n    b=input_string[n:n+m]\n    ans=0\n    while b!='0':\n        ans+=int(a,2)&int(b,2)\n        b=bin(int(b,2)//2)[2:]\n    return ans%998244353\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4525,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        if n % 2 == 0:\n            if n == 2:\n                print(\"YES\")\n                print(\"1 2\")\n            elif n == 4:\n                print(\"YES\")\n                print(\"2 1 4 3\")\n            elif n == 6:\n                print(\"YES\")\n                print(\"2 4 1 5 3 6 7 8\")\n            elif n == 8:\n                print(\"YES\")\n                print(\"2 4 6 8 1 3 5 11 7 9 10\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4526,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(a[i:j+1]) == a[i]:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4527,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    M = int(input())\n    output = []\n    for i in range(M):\n        n = int(input())\n        segments = []\n        for j in range(n):\n            l, r = map(int, input().split())\n            segments.append((l, r))\n        segments.sort()\n        max_subset = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                if segments[j][0] > segments[i][1]:\n                    max_subset += 1\n        output.append(max_subset)\n    return output\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4528,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\th,m=map(int,input().split())\n    return (60-m)*60+(24-h)*1440\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4529,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    if s[0] == 'R' or s[0] == 'L':\n        return 1, n\n    elif s[-1] == 'R' or s[-1] == 'L':\n        return 1, n\n    elif s[0] == 'U' or s[0] == 'D':\n        return 1, n\n    elif s[-1] == 'U' or s[-1] == 'D':\n        return 1, n\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4530,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n=int(input())\n        skills=list(map(int,input().split()))\n        skills.sort()\n        if len(skills)%2!=0:\n            print(0)\n        else:\n            count=0\n            for i in range(0,len(skills),2):\n                if skills[i]!=skills[i+1]:\n                    count+=1\n            print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4531,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split())\n    edges = []\n    for i in range(n-1):\n        u, v = map(int, input().split())\n        edges.append((u, v))\n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4532,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n, k = map(int, input().split())\n        a = list(map(int, input().split())\n        x = 0\n        moves = 0\n        for i in range(n):\n            if a[i] % k != 0:\n                moves += (k - a[i] % k)\n                a[i] += k - a[i] % k\n                x += k - a[i] % k\n        print(moves)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4533,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4534,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return input_string\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4535,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    count = 0\n    for i in input_string:\n        if i == '1':\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4536,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    input_string = [int(x) for x in input_string]\n    input_string.reverse()\n    carry = 1\n    for i in range(len(input_string)):\n        input_string[i] += carry\n        carry = input_string[i]//10\n        input_string[i] %= 10\n        if carry == 0:\n            break\n    if carry != 0:\n        input_string.append(carry)\n    input_string.reverse()\n    return input_string\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4537,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split())\n    max_val=max(a+b,a-b,a*b)\n    print(max_val)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4538,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,d=map(int,input().split())\n    points=[]\n    for i in range(n):\n        x,y=map(int,input().split())\n        points.append((x,y))\n    count=0\n    for i in range(n):\n        if (points[i][0]**2+points[i][1]**2)**0.5<=d:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4539,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=input();print('YNeos'[int(a)%sum(map(int,a))!=0::2])\n    # Complete the function\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4540,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    A=list(map(int,input_string.split()))\n    total=0\n    for i in range(n):\n        A.pop(i)\n        A.insert(0,0)\n        A.append(0)\n        cost=0\n        for j in range(n+1):\n            cost+=abs(A[j]-A[j+1])\n        total+=cost\n    return total\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4541,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=input()\n    if a in ['a','e','i','o','u']:\n        print(\"vowel\")\n    else:\n        print(\"consonant\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4542,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    S = input()\n    black_count = 0\n    white_count = 0\n    for i in range(len(S)):\n        if S[i] == 'B':\n            black_count += 1\n        else:\n            white_count += 1\n    return min(black_count, white_count)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4543,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print(('Yes' if int(''.join(input().split())) ** 0.5 % 1 == 0 else 'No'))\n    # Write your code here\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4544,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    input();c=[0]*10**6\n    for i in input_string.split():\n        c[int(i)]+=1\n    max_count=0\n    for i in range(10**6):\n        max_count=max(max_count,c[i])\n    return max_count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4545,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=int(input())\n    b=int(input())\n    return a*(a-b)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4546,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c=map(int,input().split());print('YNEOS'[b-a!=c-b::2])\n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4547,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = input()\n    if '9' in str(N):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4548,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, M, X = map(int, input().split())\n    A = list(map(int, input().split()))\n    A.sort()\n    cost = 0\n    for i in range(M):\n        if A[i] < X:\n            cost += 1\n        elif A[i] > X:\n            cost += A[i] - X\n            X = A[i]\n    return cost\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4549,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    H,W  = map(int,input().split())\n    grid = []\n    for i in range(H):\n        grid.append(list(input()))\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == '#':\n                if i>0 and grid[i-1][j] == '.':\n                    grid[i-1][j] = '#'\n                if i<H-1 and grid[i+1][j] == '.':\n                    grid[i+1][j] = '#'\n                if j>0 and grid[i][j-1] == '.':\n                    grid[i][j-1] = '#'\n                if j<W-1 and grid[i][j+1] == '.':\n                    grid[i][j+1] = '#'\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == '.':\n                return 'No'\n    return 'Yes'\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4550,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c=map(int,input().split())\n    if a+b+c%2==0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4551,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c,d=map(int, input().split())\n    if a+b>c+d:\n        print(\"Left\")\n    elif a+b<c+d:\n        print(\"Right\")\n    else:\n        print(\"Balanced\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4552,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    F = []\n    P = []\n    for i in range(N):\n        F.append(list(map(int, input().split()))\n    P = list(map(int, input().split())\n    max_profit = 0\n    for i in range(10):\n        for j in range(2):\n            for k in range(N):\n                if F[k][i*2+j] == 1:\n                    max_profit += P[k]\n    return max_profit\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4553,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    A,B = map(int, input().split())\n    S = input()\n    if len(S) != A+B+1:\n        return \"No\"\n    if S[A] != \"-\":\n        return \"No\"\n    for i in range(A+1):\n        if not S[i].isdigit():\n            return \"No\"\n    for i in range(A+1, A+B+1):\n        if not S[i].isdigit():\n            return \"No\"\n    return \"Yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4554,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    W,a,b=map(int,input().split())\n    if a>b:\n        a,b=b,a\n    return min(b-a,W-b+a)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4555,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,k=map(int,input().split())\n    arr=[]\n    for i in range(a,b+1):\n        arr.append(i)\n    arr.sort()\n    if k<=len(arr)//2:\n        for i in range(k):\n            print(arr[i])\n    else:\n        for i in range(len(arr)-k,len(arr)):\n            print(arr[i])\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4556,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    s=s.split()\n    s=s[0]\n    s=s[0]+s[1]\n    return s\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4557,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,x=map(int, input().split())\n    if x<=a:\n        return \"YES\"\n    elif x>a and x<=a+b:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4558,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x,t=map(int,input().split())\n    return x-t\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4559,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    input();a=1\n    for i in input_string.split():\n        a*=int(i)\n        if a>10**18:\n            return -1\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4560,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=int(input())\n    if n%a==0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4561,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x,a,b=map(int,input().split())\n    if b<=x:\n        print(\"delicious\")\n    elif b-x==1:\n        print(\"dangerous\")\n    else:\n        print(\"safe\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4562,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    i=1\n    while i*i<=n:\n        if i*i==n:\n            print(i)\n            break\n        i+=1\n    else:\n        print(i-1)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4563,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    T,A = map(int,input().split())\n    min_votes = max(T,A)\n    for i in range(1,N):\n        T_i,A_i = map(int,input().split())\n        min_votes = max(min_votes,T_i+A_i)\n    return min_votes\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4564,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    S=input()\n    if len(set(S))==len(S):\n        print(\"yes\")\n    else:\n        print(\"no\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4565,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    S=input()\n    count=0\n    for i in range(N):\n        if S[i]=='W':\n            count+=1\n    return min(count,N-count)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4566,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    roads=[]\n    for i in range(m):\n        a,b=map(int,input().split())\n        roads.append((a,b) if a<b else (b,a))\n    count=[0]*(n+1)\n    for i in range(m):\n        count[roads[i][0]]+=1\n        count[roads[i][1]]+=1\n    for i in range(1,n+1):\n        print(count[i])\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4567,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=sorted([int(input()) for _ in range(int(input()))]);r,a=sum(n),0\n    for i in n:\n        a+=i\n        if a%10==0:\n            return 0\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4568,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=input()\n    s=set(s)\n    return len(s)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4569,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    w=['Sunny','Cloudy','Rainy'];print(w[(w.index(input())+1)%3])\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4570,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,a,b=map(int,input().split())\n    if n*a<b:\n        return b\n    else:\n        return n*a\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4571,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    p=0.5\n    t=1900\n    q=1-p\n    x=0\n    for i in range(1,m+1):\n        x+=t*p*(1-p)**(i-1)\n    for i in range(m+1,n+1):\n        x+=100\n    return int(x)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4572,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print(\\\"None\\\" if len(s:=(set(list(\\\"abcdefghijklmnopqrstuvwxyz\\\"))-set(input())))==0 else sorted(list(s))[0])\n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4573,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    numbers = list(map(int, input_string.split()))\n    numbers.sort()\n    for i in range(n):\n        if i % 2 == 0:\n            print(numbers[i])\n        else:\n            print(numbers[i-1])\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4574,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    sticks = list(map(int, input_string.split()))\n    sticks.sort(reverse=True)\n    max_area = 0\n    for i in range(N-3):\n        for j in range(i+1, N-2):\n            for k in range(j+1, N-1):\n                for l in range(k+1, N):\n                    area = sticks[i] * sticks[j] * sticks[k] * sticks[l]\n                    if area > max_area:\n                        max_area = area\n    return max_area\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4575,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    d,x=map(int,input().split())\n    a=[int(i) for i in input().split()]\n    total=0\n    for i in range(n):\n        total+=a[i]\n    return d*x-total\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4576,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    A, B, C, X = [int(input()) for i in range(4)]\n    if X % 50 != 0:\n        return 0\n    elif X == 0:\n        return 1\n    else:\n        return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4577,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c=map(int,input().split());print('NYoe s'[a<=c<=b::2])\n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4578,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,x=map(int,input().split())\n    motos=list(map(int,input().split())\n    motos.sort(reverse=True)\n    count=0\n    for i in range(n):\n        if x>=motos[i]:\n            count+=1\n            x-=motos[i]\n        else:\n            break\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4579,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input());print(len(set(input()for _ in[0]*N)))\n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4580,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    ratings = list(map(int, input_string.split()))\n    colors = {1:0, 2:0, 3:0, 4:0, 5:0, 6:0, 7:0, 8:0}\n    for rating in ratings:\n        if rating < 400:\n            colors[1] += 1\n        elif rating < 800:\n            colors[2] += 1\n        elif rating < 1200:\n            colors[3] += 1\n        elif rating < 1600:\n            colors[4] += 1\n        elif rating < 2000:\n            colors[5] += 1\n        elif rating < 2400:\n            colors[6] += 1\n        elif rating < 2800:\n            colors[7] += 1\n        else:\n            colors[8] += 1\n    min_colors = 0\n    max_colors = 0\n    for color in colors.values():\n        if color > 0:\n            min_colors += 1\n            max_colors += 1\n        elif color == 0:\n            max_colors += 1\n    print(min_colors, max_colors)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4581,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    if s[0]=='o':\n        price=700+100\n    else:\n        price=700\n    if s[1]=='o':\n        price+=100\n    if s[2]=='o':\n        price+=100\n    print(price)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4582,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b = input().split()\n    if a == b:\n        return \"H\"\n    else:\n        return \"D\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4583,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c,d=input()\n    for i in range(10):\n        for j in range(10):\n            for k in range(10):\n                for l in range(10):\n                    if i+j+k+l==7:\n                        if (i+j)*(j+k)*(k+l)*(l+d)==int(input_string):\n                            print(f\"{i}+{j}+{k}+{l}={d}\")\n                            return\n    return \"No solution found\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4584,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    B=[0]*int(input())\n    for i in range(2,len(input_string)+1):\n        B[int(input_string[i-1])-1]+=1\n    for i in range(1,len(B)):\n        print(B[i])\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4585,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    X=int(input())\n    i=1\n    while True:\n        if X<=i:\n            return i\n        else:\n            X-=i\n            i+=1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4586,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c,d=input()\n    if a==b==c or b==c==d or a==c==d:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4587,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    C = list(map(int, input().split())\n    count = 0\n    for i in range(N):\n        for j in range(N):\n            for k in range(N):\n                if i != j and j != k and i != k:\n                    if A[i] < B[j] and B[j] < C[k]:\n                        count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4588,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=input().split();print(\\\"=<>\\\"[(a!=b)+(a>b)])\n    # Complete the code here\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4589,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    h, w = map(int, input().split())\n    grid = [input() for _ in range(h)]\n    for i in range(h):\n        for j in range(w):\n            if grid[i][j] == '.':\n                grid[i] = grid[i][:j] + str(count_bombs(i, j, grid, h, w)) + grid[i][j+1:]\n    return '\\n'.join(grid)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4590,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k=map(int,input().split());A,B=eval(\\\"[0]+[*map(int,input().split())],\\\"*2);s=t=x=0;j=m\n    for i in range(n):\n        if A[i]<B[m-1]:\n            s+=A[i];t+=B[m-1];m-=1\n        else:\n            s+=B[m-1];t+=A[i];n-=1\n        if t>k:\n            return x\n        x=max(x,i+j)\n    return x\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4591,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b, c, x, y = map(int, input().split())\n    ab_price = min(a, b)\n    a_price = a - ab_price\n    b_price = b - ab_price\n    return (a_price * x + b_price * y + 2 * ab_price) * c\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4592,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    MOD = 10**9 + 7\n    divisors = 0\n    for i in range(1, N+1):\n        if N % i == 0:\n            divisors += 1\n    return divisors % MOD\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4593,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = int(input())\n    for i in range(2, a+1):\n        j = 2\n        while j <= a:\n            if i**j <= a:\n                print(i**j)\n                j += 1\n            else:\n                break\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4594,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    diameters = list(map(int, input_string.split()))\n    diameters.sort(reverse=True)\n    layers = 0\n    for i in range(n):\n        if diameters[i] >= diameters[i-1]:\n            layers += 1\n        else:\n            break\n    return layers\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4595,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    start = s.find('A')\n    end = s.rfind('Z')\n    return end - start + 1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4596,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    An=input().split()\n    An=list(map(int,An)\n    count=0\n    while all(i%2==0 for i in An):\n        An=[i//2 for i in An]\n        count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4597,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    power=1\n    for i in range(1,n+1):\n        power*=i\n    print(power%(10**9+7)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4598,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input());print(n*(n+1)//2)\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4599,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    cards = list(map(int, input_string.split()))\n    cards.sort(reverse=True)\n    alice_score = sum(cards[::2])\n    bob_score = sum(cards[1::2])\n    return alice_score - bob_score\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4600,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = map(int,input().split())\n    p = []\n    s = []\n    for i in range(m):\n        p.append(int(input().split()[0])-1)\n        s.append(input().split()[1])\n    correct_answers = 0\n    penalties = 0\n    for i in range(n):\n        count = 0\n        for j in range(m):\n            if p[j] == i:\n                if s[j] == \"AC\":\n                    if count == 0:\n                        correct_answers += 1\n                    else:\n                        penalties += count\n                    count = 0\n                else:\n                    count += 1\n    return correct_answers, penalties\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4601,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split());print(sum(sorted(map(int,input().split()))[::-1][k:]))\n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4602,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    _,k=input(),int(input());print(sum(min(i,(k-i))*2 for i in list(map(int,input().split()))))\n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4603,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: min(int(input()), int(input()))\n    A, B, C, D = map(f, range(4))\n    return min(A, B) + min(C, D)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4604,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    A = list(map(int, input_string.split()))\n    count = 0\n    for i in range(N):\n        if A[i] == 0:\n            count += 1\n    if count == N:\n        return 1\n    elif count == 0:\n        return 0\n    else:\n        return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4605,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, a, b = map(int, input().split())\n    total = 0\n    for i in range(1, n+1):\n        if sum(int(digit) for digit in str(i)) in range(a, b+1):\n            total += i\n    return total\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4606,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=input()\n    return \"ABC\" + n\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4607,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split())\n    count=0\n    for i in range(1,a+1):\n        for j in range(1,b+1):\n            if i==j:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4608,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    buttons = list(map(int, input_string.split()))\n    lighten_up = buttons[0]\n    count = 0\n    while lighten_up != 2:\n        if lighten_up not in buttons:\n            return -1\n        lighten_up = buttons[lighten_up-1]\n        count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4609,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(int(input()))\n    numbers=list(map(int,input_string.split()))\n    numbers=set(numbers)\n    return len(numbers)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4610,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,K=map(int,input().split())\n    A=list(map(int,input().split())\n    count=0\n    for i in range(1,N+1):\n        if A.count(i)>=1:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4611,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    points = []\n    for i in range(N):\n        t, x, y = map(int, input().split())\n        points.append((t, x, y))\n    points.sort(key=lambda x: x[0])\n    x, y = 0, 0\n    for t, x_i, y_i in points:\n        if x_i == x and y_i == y:\n            continue\n        if x_i == x:\n            if y_i > y:\n                y = y_i\n            else:\n                y = y_i - 1\n        elif y_i == y:\n            if x_i > x:\n                x = x_i\n            else:\n                x = x_i - 1\n        else:\n            return \"No\"\n    return \"Yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4612,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split())\n    x=round(sum([a,b])/2)\n    print(x)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4613,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    edges = []\n    for _ in range(m):\n        a, b = map(int, input().split())\n        edges.append((a, b))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4614,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c= map(int,input().split())\n    if a==b:\n        return c\n    elif b==c:\n        return a\n    else:\n        return b\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4615,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    A,B,C,D,E,F = map(int,input().split())\n    if A*E > F:\n        return \"Impossible\"\n    if B*E > F:\n        return \"Impossible\"\n    if C*E > F:\n        return \"Impossible\"\n    if D*E > F:\n        return \"Impossible\"\n    if A+B > F:\n        return \"Impossible\"\n    if C+D > F:\n        return \"Impossible\"\n    if A+C > F:\n        return \"Impossible\"\n    if B+D > F:\n        return \"Impossible\"\n    if A+B+C > F:\n        return \"Impossible\"\n    if A+B+D > F:\n        return \"Impossible\"\n    if A+C+D > F:\n        return \"Impossible\"\n    if A+B+C+D > F:\n        return \"Impossible\"\n    if A+B+C+D > F:\n        return \"Impossible\"\n    if A+B+C+D > F:\n        return \"Impossible\"\n    if A+B+C+D > F:\n        return \"Impossible\"\n    if A+B+C+D > F:\n        return \"Impossible\"\n    if A+B+C+D > F:\n        return \"Impossible\"\n    if A+B+C+D > F:\n        return \"Impossible\"\n    if A+B+C+D > F:\n        return \"Impossible\"\n    if A+B+C+D > F:\n        return \"Impossible\"\n    if A+B+C+D > F:\n        return \"Impossible\"\n    if A+B+C+D > F:\n        return \"Impossible\"\n    if A+B+C+D > F:\n        return \"Impossible\"\n    if A+B+C+D > F:\n        return \"Impossible\"\n    if A+B+C+D > F:\n        return \"Impossible\"\n    if A+B+C+D > F:\n        return \"Impossible\"\n    if A+B+C+D > F:\n        return \"Impossible\"\n    if A+B+C+D > F",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4616,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    count=0\n    for i in range(len(s)):\n        if s[i]=='i' or s[i]=='n' or s[i]=='t':\n            count+=1\n    return s[0]+str(count)+s[-1]\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4617,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print(('NO', 'YES')[input() == input()[::-1]])\n    # Write your code here\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4618,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input();k=int(input());print(sorted({s[i:i+j]for i in range(len(s))for j in range(1,k+1)})[k-1])\n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4619,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    W,H,N=map(int,input().split())\n    points=[]\n    for i in range(N):\n        x,y,a=map(int,input().split())\n        points.append((x,y,a))\n    points.sort()\n    area=W*H\n    for i in range(N):\n        if points[i][2]==1:\n            area=min(area,points[i][0]*H)\n        elif points[i][2]==2:\n            area=min(area,(W-points[i][0])*H)\n        elif points[i][2]==3:\n            area=min(area,W*points[i][1])\n        elif points[i][2]==4:\n            area=min(area,W*(H-points[i][1])\n    return area\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4620,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input());A=[0]*n\n    for i in range(n):\n        C,S,F=map(int,input_string.split())\n        A[i]=S+C\n    for i in range(n-1,0,-1):\n        A[i-1]=A[i]-F*(A[i]//F)\n    return A\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4621,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = input()\n    a = a.split()\n    H = int(a[0])\n    W = int(a[1])\n    b = []\n    for i in range(H):\n        b.append(input())\n    for i in range(H):\n        for j in range(W):\n            print(b[i//2][j], end=\"\")\n    for i in range(H):\n        for j in range(W):\n            print(b[i//2][j], end=\"\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4622,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input());print('YNEOS'[len(set(map(int,input().split())))!=n::2])\n    # Complete the solution function\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4623,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        weights = list(map(int, input().split()))\n        weights.sort()\n        s = 0\n        count = 0\n        for i in range(n):\n            s += weights[i]\n        if s % 2 == 1:\n            s += 1\n        for i in range(n):\n            if weights[i] <= s // 2:\n                count += 1\n            else:\n                break\n        print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4624,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, x = tuple(map(int, input().split()))\n    floor = 1\n    for i in range(2, n):\n        if i * x < n:\n            floor += 1\n        else:\n            break\n    return floor\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4625,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    s = input()\n    p = list(map(int, input().split()))\n    count = [0] * 26\n    for i in range(n):\n        count[ord(s[i]) - ord('a')] += 1\n    for i in range(m):\n        count[ord(s[p[i] - 1]) - ord('a')] -= 1\n    for i in range(m):\n        count[ord(s[p[i] - 1]) - ord('a')] += 1\n    for i in range(n):\n        count[ord(s[i]) - ord('a')] -= 1\n    for i in range(m):\n        count[ord(s[p[i] - 1]) - ord('a')] -= 1\n    for i in range(m):\n        count[ord(s[p[i] - 1]) - ord('a')] += 1\n    for i in range(n):\n        count[ord(s[i]) - ord('a')] += 1\n    for i in range(m):\n        count[ord(s[p[i] - 1]) - ord('a')] -= 1\n    for i in range(m):\n        count[ord(s[p[i] - 1]) - ord('a')] += 1\n    for i in range(n):\n        count[ord(s[i]) - ord('a')] -= 1\n    for i in range(m):\n        count[ord(s[p[i] - 1]) - ord('a')] -= 1\n    for i in range(m):\n        count[ord(s[p[i] - 1]) - ord('a')] += 1\n    for i in range(n):\n        count[ord(s[i]) - ord('a')] += 1\n    for i in range(m):\n        count[ord(s[p[i] - 1]) - ord('a')] -= 1\n    for i in range(m):\n        count[ord(s[p[i] - 1]) - ord('a')] += 1\n    for",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4626,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c = map(int,input().split())\n    return abs(a-b)+abs(a-c)+abs(b-c)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4627,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    T = int(input())\n    for i in range(T):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if n % 2 != 0:\n            print(\"NO\")\n        else:\n            a.sort()\n            for j in range(0, n, 2):\n                if a[j] % 2 != a[j+1] % 2:\n                    print(\"NO\")\n                    break\n            else:\n                print(\"YES\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4628,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k=list(map(int,input().split()))\n    roads=[]\n    for i in range(m):\n        x,y,w=list(map(int,input().split())\n        roads.append((x,y,w)\n    couriers=[]\n    for i in range(k):\n        a,b=list(map(int,input().split())\n        couriers.append((a,b)\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4629,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        m = 0\n        while True:\n            if n == 0:\n                print(m)\n                break\n            elif n % 3 == 0:\n                m += 3 ** (n // 3)\n                n = 0\n            else:\n                m += 3 ** (n // 3 + 1)\n                n = n % 3\n        return m\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4630,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    q = int(input())\n    queries = []\n    for i in range(q):\n        n = int(input())\n        p = list(map(int, input().split()))\n        queries.append(p)\n    for p in queries:\n        n = len(p)\n        a = [0] * n\n        for i in range(n):\n            a[i] = p.index(i+1)\n        print(\" \".join(map(str, a))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4631,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    x = list(map(int, input().split())\n    y = []\n    for i in range(m):\n        y.append(0)\n    res = 10**9\n    for i in range(m):\n        for j in range(n):\n            for k in range(n):\n                if i == k:\n                    continue\n                y[i] = (x[i] + x[k])/2\n                res = min(res, sum(abs(x[i] - y[j] for j in range(m)))\n    return res, y\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4632,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    packages = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        packages.append((x, y))\n    packages.sort()\n    path = \"\"\n    for i in range(n):\n        x, y = packages[i]\n        if x < 0:\n            path += \"U\" * abs(x)\n        elif x > 0:\n            path += \"R\" * x\n        if y < 0:\n            path += \"U\" * abs(y)\n        elif y > 0:\n            path += \"R\" * y\n        path += \"R\"\n    return path\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4633,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,s=map(int,input().split())\n    n_sum=sum(int(i) for i in str(n))\n    if n_sum<=s:\n        return 0\n    else:\n        return n_sum-s\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4634,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = input()\n    a = input()\n    a = a.split()\n    a = [int(i) for i in a]\n    count = 0\n    for i in range(len(a)):\n        if a[i] == 1:\n            count += 1\n            if i == 0 or i == len(a)-1:\n                continue\n            if a[i-1] == 0 and a[i+1] == 0:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4635,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    k = int(input())\n    s = \"\"\n    for i in range(1, k+1):\n        s += chr(96+i)\n    for i in range(k, n):\n        s += chr(97+i%26)\n    return s\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4636,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn = int(input())\n    \\tinput_list = list(map(int, input_string.split()))\n    \\tif len(input_list) != n+1:\n        \\treturn \"Invalid input\"\n    \\t\n    \\t# Alice starts the game\n    \\tmoves = 1\n    \\talice_sum = input_list[0]\n    \\tbob_sum = 0\n    \\t\n    \\twhile True:\n        \\tif alice_sum > bob_sum:\n            \\tbreak\n        \\telse:\n            \\tmoves += 1\n            \\tif moves % 2 == 0:\n                \\t# Bob's turn\n                \\tbob_sum += sum(input_list[:n-moves])\n                \\tinput_list = input_list[moves:]\n            \\telse:\n                # Alice's turn\n                alice_sum += sum(input_list[:n-moves])\n                input_list = input_list[moves:]\n    \\t\n    \\treturn moves, alice_sum, bob_sum\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4637,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    a=list(map(int,input().split())\n    b=list(map(int,input().split())\n    a.sort()\n    b.sort(reverse=True)\n    if k>=n:\n        return sum(a)\n    else:\n        return sum(a[:k]+b[k:])\n    return sum(a)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4638,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,c=list(map(int,input().split()))\n    a=list(map(int,input().split())\n    b=list(map(int,input().split())\n    t=[0]*n\n    for i in range(1,n):\n        t[i]=min(sum(a[:i])+sum(b[i-1:])+c,sum(b[:i])+sum(a[i:])+c)\n    return t\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4639,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n, k = map(int, input().split())\n        if n == 3:\n            if k == 1:\n                print(\"aaa\")\n            elif k == 2:\n                print(\"aab\")\n            else:\n                print(\"aba\")\n        elif n == 2:\n            if k == 1:\n                print(\"ab\")\n            else:\n                print(\"ba\")\n        else:\n            count = 0\n            for i in range(n):\n                for j in range(n):\n                    if i == j:\n                        continue\n                    for l in range(n):\n                        if j == l or i == l:\n                            continue\n                        for m in range(n):\n                            if j == m or i == m or l == m:\n                                continue\n                            count += 1\n                            if count == k:\n                                print(\"\".join(sorted([\"a\"] * (n-2) + [\"b\"] * 2))\n                                break\n                        if count == k:\n                            break\n                    if count == k:\n                        break\n                if count == k:\n                    break\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4640,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    x = list(map(int, input().split()))\n    y = list(map(int, input().split())\n    x.sort()\n    y.sort()\n    max_points = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if x[j] - x[i] > k:\n                break\n            else:\n                max_points = max(max_points, j-i)\n    return max_points\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4641,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, x = map(int,input().split())\n    a = []\n    for i in range(n):\n        a.append(int(input()))\n    for i in range(n):\n        a.sort()\n        if i == 0:\n            print(x)\n        else:\n            if a[i-1] == x:\n                x += 1\n            print(x)\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4642,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn,x,y=map(int,input().split())\n    \\tif n==2:\n        \\treturn f\"{x} {y}\"\n    \\telse:\n        \\tmid=(x+y)//2\n        \\treturn \" \".join(str(mid-i) for i in range(n))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4643,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x = list(map(int, input().split()))[1 : ]\n    x.sort()\n    return \" \".join(map(str, x)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4644,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n=int(input())\n        a=list(map(int,input().split()))\n        if sum(a)%2!=0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\nsolution(input())\n# End of code\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4645,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        if n == 2:\n            print(\"1 2\")\n        elif n == 3:\n            print(\"1 2 3\")\n        elif n == 4:\n            print(\"1 2 3 4\")\n        elif n == 5:\n            print(\"3 1 4 2 5 6\")\n        elif n == 6:\n            print(\"9 6 10 8 4 7 3 1\")\n        elif n == 7:\n            print(\"1 2 3 4 5 6 7 8\")\n        elif n == 8:\n            print(\"1 2 3 4 5 6 7 8 9\")\n        elif n == 9:\n            print(\"1 2 3 4 5 6 7 8 9 10\")\n        elif n == 10:\n            print(\"1 2 3 4 5 6 7 8 9 10 11\")\n        else:\n            print(-1)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4646,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n=int(input())\n        a=list(map(int,input().split()))\n        if n%2==0:\n            if sum(a)%2!=0:\n                print(-1)\n            else:\n                print(0)\n        else:\n            if sum(a)%2==0:\n                print(0)\n            else:\n                print(-1)\nsolution(input())\n# End your code here\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4647,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    colors = list(map(int, input().split()))\n    edges = []\n    for i in range(n-1):\n        u, v = map(int, input().split())\n        edges.append((u, v))\n    # Your code here\n    return \" \".join(map(str, result))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4648,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        count = 0\n        while n != 1:\n            if n % 6 == 0:\n                n //= 6\n                count += 1\n            else:\n                n *= 2\n                count += 1\n            if n == 1:\n                print(count)\n                break\n            elif n % 6 != 0 and n % 2 != 0:\n                print(-1)\n                break\n            elif n % 6 != 0 and n % 2 == 0:\n                n //= 2\n                count += 1\n        else:\n            print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4649,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn,k=map(int,input().split())\n    \\treturn 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4650,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l=[int(k)%3 for k in input().split()]\n    count=0\n    for i in range(len(l)):\n        if l[i]==0:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4651,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    q=int(input())\n    for i in range(q):\n        n=int(input())\n        p=list(map(int,input().split()))\n        p.sort()\n        print(*p)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4652,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    p = list(map(int, input().split()))\n    if p == list(range(1, n+1)):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4653,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n,k=map(int,input().split())\n        if k==1:\n            print(n)\n        elif k==2:\n            print(n//2)\n        elif n%(k-1)==0:\n            print(n//(k-1) + k-1)\n        else:\n            print(n//(k-1) + k)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4654,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n,k=map(int,input().split())\n        if n%2==0:\n            if k%2==0:\n                if n<k:\n                    print(\"NO\")\n                else:\n                    a=n//k\n                    for i in range(k):\n                        print(a,end=\" \")\n            else:\n                if k%2!=0:\n                    print(\"NO\")\n                else:\n                    a=n//k\n                    for i in range(k):\n                        print(a,end=\" \")\n        else:\n            if k%2!=0:\n                if n<k:\n                    print(\"NO\")\n                else:\n                    a=n//k\n                    for i in range(k):\n                        print(a,end=\" \")\n            else:\n                if k%2==0:\n                    print(\"NO\")\n                else:\n                    a=n//k\n                    for i in range(k):\n                        print(a,end=\" \")\n                    \nsolution(input())\n# End of code\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4655,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c=map(int,input().split())\n    if a>b:\n        if a>c:\n            print(a)\n        else:\n            print(c)\n    elif b>c:\n        print(b)\n    else:\n        print(c)\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4656,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n, k = map(int, input().split())\n        s = input()\n        # Your code here\n        # Write your code to find the maximum length of a k-beautiful necklace\n        # and print it\n        # Example: print(max_length)\n        max_length = 0\n        for i in range(len(s)):\n            for j in range(i+1, len(s)+1):\n                necklace = s[i:j]\n                if len(necklace) % k == 0:\n                    if necklace == necklace[::-1]:\n                        max_length = max(max_length, len(necklace))\n        print(max_length)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4657,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n, k = map(int, input().split())\n        a = list(map(int, input().split()))\n        if sum(a) % 2 == 0:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n            for i in range(k):\n                if i == k-1:\n                    print(n)\n                else:\n                    print(a[i*n//k+1], end=\" \")\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4658,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return int(input_string[::-1], 2)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4659,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    def generate(numRows):\n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]\n        result = [[1]]\n        for i in range(1, numRows):\n            row = [1] * (i + 1)\n            for j in range(1, i):\n                row[j] = result[i-1][j-1] + result[i-1][j]\n            result.append(row)\n        return result\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4660,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    emails=[]\n    for i in range(n):\n        emails.append(input())\n    valid_emails=list(filter(lambda x: '@' in x and '.' in x and len(x.split('.')[-1])<=3,emails))\n    valid_emails=list(filter(lambda x: x.split('.')[0].split('@')[0].isalnum() and x.split('.')[0].split('@')[1].replace('-','').replace('_','').isalnum() and x.split('.')[1].isalnum(),valid_emails))\n    valid_emails.sort()\n    return valid_emails\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4661,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    fib=[0,1]\n    for i in range(2,n):\n        fib.append(fib[i-1]+fib[i-2])\n    fib=list(map(lambda x:x**3,fib))\n    print(fib)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4662,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    input_string=input().split()\n    max_depth=0\n    depth=0\n    for i in input_string:\n        if i=='<':\n            depth+=1\n            max_depth=max(depth,max_depth)\n        elif i=='</':\n            depth-=1\n    return max_depth\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4663,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input().strip())\n    for i in range(n):\n        if re.match(r'^[789]\\d{9}$', input_string):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4664,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    M = int(input().strip())\n    set_M = set(map(int, input().strip().split()))\n    N = int(input().strip())\n    set_N = set(map(int, input().strip().split())\n    sym_diff = set_M.symmetric_difference(set_N)\n    for num in sorted(sym_diff):\n        print(num)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4665,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    columns = input().split()\n    data = []\n    for i in range(n):\n        data.append(input().split())\n    marks = []\n    for i in range(n):\n        for j in range(len(columns)):\n            if columns[j] == 'MARKS':\n                marks.append(float(data[i][j])\n    avg = sum(marks)/n\n    return round(avg,2)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4666,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n % 2 != 0:\n        print(\"Weird\")\n    elif n % 2 == 0 and 2 <= n <= 5:\n        print(\"Not Weird\")\n    elif n % 2 == 0 and 6 <= n <= 20:\n        print(\"Weird\")\n    else:\n        print(\"Not Weird\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4667,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    score=0\n    for i in range(n):\n        line=input()\n        if '<' in line:\n            count=0\n            for j in range(len(line)):\n                if line[j]==' ':\n                    count+=1\n            score+=count\n    return score\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4668,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a_str_ar=input().strip().split()\n    a=list(map(float,a_str_ar))\n    b_str_ar=input().strip().split()\n    b=list(map(float,b_str_ar))\n    c_str_ar=input().strip().split()\n    c=list(map(float,c_str_ar))\n    d_str_ar=input().strip().split()\n    d=list(map(float,d_str_ar)\n    x=np.cross(np.subtract(b,a),np.subtract(c,b))\n    y=np.cross(np.subtract(c,b),np.subtract(d,c))\n    dot=np.dot(x,y)/(np.linalg.norm(x)*np.linalg.norm(y))\n    angle=np.arccos(dot)\n    angle=np.degrees(angle)\n    return round(angle,2)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4669,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    score = 0\n    for word in input_string.split():\n        count = 0\n        for letter in word:\n            if letter in vowels:\n                count += 1\n        if count % 2 == 0:\n            score += 2\n        else:\n            score += 1\n    return score\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4670,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Regular expression for a valid Roman numeral\n    regex = \"^M{0,3}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$\"\n    \n    # Check if the input string matches the regular expression\n    if re.match(regex, input_string):\n        return True\n    else:\n        return False\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4671,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    mobile_numbers=[]\n    for i in range(n):\n        mobile_numbers.append(input())\n    for i in mobile_numbers:\n        if i.startswith('+91'):\n            i=i[3:]\n        elif i.startswith('91'):\n            i=i[2:]\n        elif i.startswith('0'):\n            i=i[1:]\n        i=int(i)\n        i=str(i)\n        i='+91 '+i[:5]+' '+i[5:]\n        print(i)\n    mobile_numbers.sort()\n    for i in mobile_numbers:\n        print(i)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4672,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    student_marks={}\n    for i in range(n):\n        name,*marks=input().split()\n        student_marks[name]=list(map(int,marks))\n    query_name=input()\n    avg=sum(student_marks[query_name])/len(student_marks[query_name])\n    print(\"{:.2f}\".format(avg))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4673,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    people=[]\n    for i in range(n):\n        first_name,last_name,age,sex=input().split()\n        people.append([first_name,last_name,int(age),sex])\n    people.sort(key=lambda x:x[2])\n    for i in range(n):\n        if people[i][3]=='M':\n            print(\"Mr. \"+people[i][0]+\" \"+people[i][1])\n        else:\n            print(\"Ms. \"+people[i][0]+\" \"+people[i][1])\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4674,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x=int(input())\n    y=int(input())\n    z=int(input())\n    n=int(input())\n    lst=[[i,j,k] for i in range(x+1) for j in range(y+1) for k in range(z+1) if i+j+k!=n]\n    print(lst)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4675,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r1, i1 = map(float, input().split())\n    r2, i2 = map(float, input().split())\n    c1 = complex(r1, i1)\n    c2 = complex(r2, i2)\n    print(\"{:.2f}\".format(c1+c2))\n    print(\"{:.2f}\".format(c1-c2))\n    print(\"{:.2f}\".format(c1*c2))\n    print(\"{:.2f}\".format(c1/c2))\n    print(\"{:.2f}\".format(abs(c1))\n    print(\"{:.2f}\".format(abs(c2))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4676,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=input(),input()+' ';print(*[i+j for i,j in zip(a,b)],sep='')\n    # Write your code here\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4677,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    result=\"\"\n    for i in s:\n        if i==\"0\":\n            result+=\"0\"\n        elif i==\"1\":\n            result+=\"1\"\n        elif i==\"B\" and len(result)>0:\n            result=result[:-1]\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4678,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=int(input())\n    heights=list(map(int,input_string.split()))\n    heights.sort()\n    total_height=0\n    for i in range(s):\n        total_height+=heights[i]\n    return total_height\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4679,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    S = {i:list(input()) for i in \\\"abc\\\"}\n    while True:\n        for i in S:\n            if len(S[i]) == 0:\n                return i\n            S[i].pop(0)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4680,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print('YNEOS'[''.join(sorted(input().split()))!='557'::2])\n    # Write your code here\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4681,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        prev_prev = 2\n        prev = 1\n        for i in range(2, n+1):\n            current = prev + prev_prev\n            prev_prev = prev\n            prev = current\n        return current\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4682,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,h=[int(input()) for _ in range(3)];print((a+b)*h//2)\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4683,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    A = list(map(int, input_string.split()))\n    total = 0\n    for i in range(N-1):\n        for j in range(i+1, N):\n            total += A[i] * A[j]\n            total %= 10000000000007\n    return total\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4684,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print('YES' if int(''.join(input().split()))%4 == 0 else 'NO')\n    # Write your code here\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4685,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c=sorted(map(int,input().split()))\n    k=int(input())\n    return max(a*2**k,b*2**k,c*2**k)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4686,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input();print('NYoe s'[all([s.count(i)%2==0 for i in s])::2])\n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4687,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f=lambda:map(int,input().split());N,K=f()\n    arr=[]\n    for i in range(N):\n        a,b=f()\n        arr+=a*[a]\n    arr.sort()\n    return arr[K-1]\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4688,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split());print(b*(b-1)**(a-1))\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4689,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f=lambda:[*map(int,input().split())]\n    K,N=f()\n    A=f()\n    A.sort()\n    if A[0]==0:\n        return K\n    elif A[-1]==K:\n        return A[-2]\n    else:\n        return min(A[0]+A[-1],K-A[0]+A[-1],K-A[-2]+A[0])\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4690,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c,d=map(int,input().split())\n    area1=a*b\n    area2=c*d\n    if area1>area2:\n        print(area1)\n    elif area2>area1:\n        print(area2)\n    else:\n        print(area1)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4691,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    ac=0\n    wa=0\n    tle=0\n    re=0\n    for i in range(n):\n        if input_string[i]=='AC':\n            ac+=1\n        elif input_string[i]=='WA':\n            wa+=1\n        elif input_string[i]=='TLE':\n            tle+=1\n        else:\n            re+=1\n    print(\"AC x\",ac)\n    print(\"WA x\",wa)\n    print(\"TLE x\",tle)\n    print(\"RE x\",re)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4692,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    m=int(input())\n    new_year=datetime.datetime(2021,12,30,m,0,0)\n    now=datetime.datetime.now()\n    diff=new_year-now\n    hours=diff.total_seconds()//3600\n    print(int(hours)%24)\n    print(\"We have {} hours until New Year at {} o'clock on 30th, December.\".format(int(hours)%24,m))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4693,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split())\n    if a+b<=9:\n        print(a+b)\n    else:\n        print(\"error\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4694,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = list(map(int,input().split()))\n    n = a[0]\n    a.pop(0)\n    a.sort()\n    min_distance = float('inf')\n    for i in range(n):\n        for j in range(i+1,n):\n            distance = a[j]-a[i]\n            if distance < min_distance:\n                min_distance = distance\n    return min_distance\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4695,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x,y=map(int,input().split())\n    groups={1:[1,2,3],4:[4,5,6],7:[7,8,9],10:[10,11,12]}\n    if x in groups[y] or y in groups[x]:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4696,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split())\n    if(a*b%2==0):\n        print(\"Even\")\n    else:\n        print(\"Odd\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4697,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,M=map(int,input().split())\n    if N==1 and M==0:\n        return 0\n    elif N==1 and M==1:\n        return 1\n    elif N==1 and M==2:\n        return 1\n    elif N==2 and M==1:\n        return 1\n    elif N==2 and M==2:\n        return 2\n    elif N==2 and M==3:\n        return 2\n    elif N==3 and M==1:\n        return 1\n    elif N==3 and M==2:\n        return 2\n    elif N==3 and M==3:\n        return 3\n    elif N==3 and M==4:\n        return 3\n    elif N==4 and M==1:\n        return 1\n    elif N==4 and M==2:\n        return 2\n    elif N==4 and M==3:\n        return 3\n    elif N==4 and M==4:\n        return 4\n    elif N==4 and M==5:\n        return 4\n    elif N==5 and M==1:\n        return 1\n    elif N==5 and M==2:\n        return 2\n    elif N==5 and M==3:\n        return 3\n    elif N==5 and M==4:\n        return 4\n    elif N==5 and M==5:\n        return 5\n    elif N==5 and M==6:\n        return 5\n    elif N==6 and M==1:\n        return 1\n    elif N==6 and M==2:\n        return 2\n    elif N==6 and M==3:\n        return 3\n    elif N==6 and M==4:\n        return 4\n    elif N==6 and M==5:\n        return 5\n    elif N==6 and M==6:\n        return 6\n    elif N==6 and M==7:\n        return 6\n    elif N==7 and M==1:\n        return 1\n    elif N==7 and M==2:\n        return 2\n    elif N==7 and M==3:\n        return 3\n    elif N==7 and M==4:\n        return 4\n   ",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4698,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    times=list(map(int,input_string.split()))\n    m=int(input())\n    drinks=[]\n    for i in range(m):\n        p,x=map(int,input().split())\n        drinks.append((p,x))\n    drinks.sort(key=lambda x:x[0])\n    drinks.sort(key=lambda x:x[1])\n    drinks.sort(key=lambda x:x[0])\n    for i in range(m):\n        if i==0:\n            print(sum(times))\n        else:\n            for j in range(n):\n                if drinks[i][0]<=j:\n                    times[j]+=drinks[i][1]\n            print(sum(times))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4699,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split());a=set(input().split())\n    for i in range(n+1):\n        if all(str(i)[j] in a for j in range(len(str(i))):\n            return i\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4700,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=list(map(int,input().split()))\n    h=[int(i) for i in input().split()]\n    g=set()\n    for i in range(m):\n        a,b=list(map(int,input().split())\n        if h[a-1]>h[b-1]:\n            g.add(a)\n        elif h[b-1]>h[a-1]:\n            g.add(b)\n    return len(g)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4701,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=int(input()),int(input());a=1\n    for i in range(n):\n        if i%2==0:\n            a*=2\n        else:\n            a+=k\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4702,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    X=int(input())\n    if X==0:\n        print(1)\n    else:\n        print(0)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4703,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    S = input()\n    n = len(S)\n    total = 0\n    for i in range(1 << n):\n        formula = \"\"\n        for j in range(n):\n            if i & (1 << j):\n                formula += \"+\"\n            formula += S[j]\n        formula = formula.lstrip(\"+\")\n        total += eval(formula)\n    return total\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4704,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input());a=list(map(int,input().split()));f,b,c=0,sum(a),float('inf')\n    for i in range(1,n+1):\n        if sum(a[:i])<b:f=i;b=sum(a[:i)\n        if sum(a[i:])<c:c=sum(a[i:])\n    return abs(f-c)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4705,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input());print(n*800-n//15*200)\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4706,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    [print(input()[i],end='') for i in range(3)]\n    print()\n    [print(input()[i],end='') for i in range(3)]\n    print()\n    [print(input()[i],end='') for i in range(3)]\n    print()\n    print(\"\".join([input_string[i*3+j] for i in range(3) for j in range(3) if i==j])\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4707,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    count=0\n    for i in range(len(s)):\n        if s[i]=='1':\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4708,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k,x,y=[int(input()) for i in range(4)]\n    if n<=k:\n        return x*n\n    else:\n        return x*(k)+(n-k)*y\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4709,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    a,op,b=s.split()\n    if op==\"+\":\n        return int(a)+int(b)\n    else:\n        return int(a)-int(b)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4710,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x = int(input())\n    if x < 1200:\n        print(\"ABC\")\n    else:\n        print(\"ARC\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4711,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c = sorted(map(int,input().split()))\n    return min(a+b,a+c,b+c)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4712,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    matrix=[]\n    for i in range(n):\n        matrix.append(list(input())\n    for i in range(n):\n        matrix[i]=[matrix[i][0]+'#']+matrix[i]+['#']\n    for i in range(m+2):\n        matrix.insert(0,'#'*(m+2))\n    matrix.append(['#'*(m+2)])\n    for i in range(n+1):\n        print(''.join(matrix[i]))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4713,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    input();x,r=0,0\n    for i in input_string:\n        if i=='I':\n            x+=1\n        else:\n            x-=1\n        r=max(r,x)\n    return r\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4714,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b = map(int, input().split())\n    count = 0\n    for i in range(a, b+1):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4715,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=set(input().split())\n    print(len(a))\n    print(\"Three different colors:\",\",\", \".join(a))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4716,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    _,k=map(int,input().split());print(sum(sorted(map(int,input().split()))[-k:]))\n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4717,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x,a,b=map(int,input().split());print('AB'[abs(x-a)-abs(x-b)>=0])\n    # Write your code here\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4718,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=input()\n    b=a.split('/')\n    b[0]='2018'\n    c='/'.join(b)\n    print(c)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4719,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    strings=[]\n    for i in range(n):\n        strings.append(input())\n    max_len=0\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                s1=strings[i]\n                s2=strings[j]\n                s3=strings[k]\n                s=s1+s2+s3\n                if len(s)>max_len:\n                    max_len=len(s)\n                    max_string=s\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                s1=strings[i]\n                s2=strings[j]\n                s3=strings[k]\n                s=s1+s2+s3\n                if len(s)==max_len:\n                    if s<max_string:\n                        max_string=s\n    return max_string\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4720,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    seats=[]\n    for i in range(N):\n        l,r=map(int,input().split())\n        for j in range(l,r+1):\n            seats.append(j)\n    return len(seats)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4721,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split());print((n-1)*(m-1))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4722,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int, input().split())\n    if a+b%3==0:\n        print(\"Possible\")\n    else:\n        print(\"Impossible\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4723,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input().replace(\\\"?\\\",\\\".\\\")\n    t = input()\n    for i in range(len(s)):\n        for j in range(i+len(t),len(s)+1):\n            if t in s[i:j]:\n                return s[i:j]\n    return \"UNRESTORABLE\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4724,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r,g=int(input()),int(input())\n    return (r+g)/2\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4725,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4726,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    m, n, t = map(int, input_string.split())\n    if t == 1:\n        return \"TLE\"\n    elif t == 2:\n        return \"TLE\"\n    elif t == 3:\n        if n <= 10:\n            return \"AC\"\n        else:\n            return \"TLE\"\n    elif t == 4:\n        if n <= 10:\n            return \"AC\"\n        else:\n            return \"TLE\"\n    elif t == 5:\n        if n <= 100:\n            return \"AC\"\n        else:\n            return \"TLE\"\n    elif t == 6:\n        if n <= 20:\n            return \"AC\"\n        else:\n            return \"TLE\"\n    elif t == 7:\n        if n <= 200:\n            return \"AC\"\n        else:\n            return \"TLE\"\n    else:\n        return \"TLE\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4727,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a 2D list\n    input_list = [list(map(int, input_string.split()))]\n    grid = [input_list[i:i+4] for i in range(0, len(input_list), 4)]\n    \n    # Get the direction of the move\n    direction = int(input_list[-1])\n    \n    # Define the move function\n    def move(grid, direction):\n        if direction == 0:\n            return move_left(grid)\n        elif direction == 1:\n            return move_up(grid)\n        elif direction == 2:\n            return move_right(grid)\n        else:\n            return move_down(grid)\n    \n    # Define the move functions\n    def move_left(grid):\n        new_grid = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]\n        for i in range(4):\n            j = 0\n            while j < 4:\n                if grid[i][j] != 0:\n                    new_grid[i][j] = grid[i][j]\n                    j += 1\n                else:\n                    j += 1\n        for i in range(4):\n            for j in range(3):\n                if new_grid[i][j] == new_grid[i][j+1]:\n                    new_grid[i][j] *= 2\n                    new_grid[i][j+1] = 0\n        for i in range(4):\n            for j in range(3):\n                if new_grid[i][j] == 0:\n                    new_grid[i][j+1] = new_grid[i][j+1]\n                    new_grid[i][j] = 0\n        return new_grid\n    \n    def move_up(grid):\n        new_grid = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0],",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4728,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4729,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    password, message = input_string.split()\n    password = password.strip()\n    message = message.strip()\n    password_set = set(password)\n    password_list = list(password)\n    password_len = len(password)\n    message_len = len(message)\n    password_index = 0\n    message_index = 0\n    \n    while password_index < password_len and message_index < message_len:\n        if message[message_index] == password_list[password_index]:\n            password_index += 1\n        message_index += 1\n        \n    if password_index == password_len:\n        return \"PASS\"\n    else:\n        return \"FAIL\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4730,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    stack = []\n    for i, char in enumerate(input_string):\n        if char in ['(', '[', '{']:\n            stack.append((char, i) if char == '(' else None)\n        elif char in [')', ']', '}']:\n            if not stack or (char == ')' and stack[-1][0] != '(') or (char == ']' and stack[-1][0] != '[') or (char == '}' and stack[-1][0] != '{'):\n                return char, stack[-1][1] if stack else None\n            stack.pop()\n    return 'ok so far' if not stack else None\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4731,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    words = input_string.split('\\n')\n    words = [word.strip() for word in words]\n    last_letter = ''\n    for word in words:\n        if word[0] != last_letter:\n            return f\"Player {1 if last_letter == '' else 2} lost\"\n        last_letter = word[-1]\n    return \"Fair Game\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4732,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    A, operator, B = input_string.split()\n    A = int(A)\n    B = int(B)\n    \n    if operator == '+':\n        return A + B\n    elif operator == '*':\n        return A * B\n    else:\n        return \"Invalid operator\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4733,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, shuffle_type = input_string.split()\n    n = int(n)\n    if shuffle_type == \"out\":\n        return (n-1)//2\n    else:\n        return (n+1)//2\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4734,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    Y, P = input_string.split()\n    if Y[-1] == 'e':\n        return Y + 'x' + P\n    elif Y[-1] in 'aiou':\n        return Y[:-1] + 'ex' + P\n    else:\n        return Y + 'ex' + P\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4735,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    year = int(input_string)\n    if (year % 26 == 0):\n        return \"yes\"\n    else:\n        return \"no\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4736,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = list(map(int, input_string.split()))\n    K = int(input())\n    n_sum = sum(n)\n    if K > n_sum:\n        return 0\n    n.sort(reverse=True)\n    count = 0\n    for i in range(K):\n        count += n[i] * (n_sum - K + i)\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4737,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, p = map(int, input_string.split())\n    times = list(map(int, input_string.split())[1:])\n    times.sort(reverse=True)\n    total_time = 0\n    num_AC = 0\n    for i in range(N):\n        if total_time + times[i] <= 300:\n            total_time += times[i]\n            num_AC += 1\n        else:\n            break\n    penalty_time = 0\n    for i in range(p+1, N):\n        if total_time + times[i] <= 300:\n            total_time += times[i]\n            num_AC += 1\n        else:\n            penalty_time += times[i]\n    return num_AC, penalty_time\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4738,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return k\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4739,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    M, N = map(int, input_string.split())\n    T = list(map(int, input().split()))\n    X = list(map(int, input().split()))\n    \n    speeds = set()\n    distances = set()\n    \n    for i in range(M-1):\n        for j in range(i+1, M):\n            speed = (X[j] - X[i]) / (T[j] - T[i])\n            speeds.add(speed)\n            distances.add(X[j] - X[i])\n            \n    print(len(speeds))\n    print(*sorted(distances))\n    \n# Test cases\nsolution(\"4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\")\nsolution(\"5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9\")\nsolution(\"3 6\\n1 2 4\\n11 12 15 19 24 30\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4740,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    if input_string[0:3] == \"555\":\n        return 1\n    else:\n        return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4741,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    a, b = map(int, input_string.split('/'))\n    c = (a - 32) * 5\n    d = b\n    gcd = math.gcd(c, d)\n    c //= gcd\n    d //= gcd\n    if d < 0:\n        c = -c\n        d = abs(d)\n    return f\"{c}/{d}\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4742,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4743,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Write your code here\n    return input_string\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4744,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    V = int(input_string)\n    if V == 1:\n        return 6\n    elif V == 2:\n        return 12\n    elif V == 3:\n        return 14\n    else:\n        return 16\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4745,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, X = map(int, input_string.split())\n    prices = list(map(int, input().split()))\n    prices.sort()\n    count = 0\n    total = 0\n    for i in range(n):\n        if total + prices[i] <= X:\n            count += 1\n            total += prices[i]\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4746,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    C, n = map(int, input_string.split())\n    measurements = []\n    for i in range(n):\n        measurements.append(list(map(int, input().split()))\n    \n    for i in range(n):\n        if measurements[i][0] > C or measurements[i][1] > C or measurements[i][2] < 0:\n            return \"impossible\"\n        if i == 0 and measurements[i][0] != 0:\n            return \"impossible\"\n        if i == n-1 and measurements[i][1] != 0:\n            return \"impossible\"\n        if measurements[i][0] + measurements[i][1] + measurements[i][2] > C:\n            return \"impossible\"\n        if i > 0 and measurements[i][0] > measurements[i-1][1]:\n            return \"impossible\"\n        if i < n-1 and measurements[i][1] > measurements[i+1][0]:\n            return \"impossible\"\n    return \"possible\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4747,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k = map(int, input_string.split())\n    if n == 1:\n        return 1\n    if k == 1:\n        return 1\n    if k == 2:\n        return (n+1)/2\n    if k == n:\n        return n\n    if k > n:\n        return n\n    \n    dp = [[0]*(k+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        dp[i][1] = i\n    for j in range(2, k+1):\n        for i in range(1, n+1):\n            dp[i][j] = i\n            for m in range(1, i):\n                dp[i][j] = max(dp[i][j], min(dp[m][j-1], i) + dp[i-m][j-1])\n    return dp[n][k]\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4748,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    H, N, M = map(int, input_string.split())\n    A = 0\n    B = 0\n    for i in range(1, H+1):\n        if i % 2 == 0:\n            A += i//2\n        else:\n            B += i//2\n    A += (H-1)\n    B += (H-1)\n    if N < A:\n        A = N\n    else:\n        A = A - N\n    if M < B:\n        B = M\n    else:\n        B = B - M\n    return A, B\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4749,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = len(input_string)\n    rows = [0]*n\n    cols = [0]*n\n    for i in range(n):\n        for j in range(n):\n            if input_string[i][j] == 'B':\n                rows[i] += 1\n                cols[j] += 1\n            else:\n                rows[i] -= 1\n                cols[j] -= 1\n    for i in range(n):\n        if rows[i] != 0:\n            return 0\n        if cols[i] != 0:\n            return 0\n    return 1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4750,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l,r,l1,r2=map(int,input().split())\n    l1,r1=map(int,input().split())\n    l2,r2=map(int,input().split())\n    l3,r3=map(int,input().split())\n    l4,r4=map(int,input().split())\n    l5,r5=map(int,input().split())\n    l6,r6=map(int,input().split())\n    l7,r7=map(int,input().split())\n    l8,r8=map(int,input().split())\n    l9,r9=map(int,input().split())\n    l10,r10=map(int,input().split())\n    l11,r11=map(int,input().split())\n    l12,r12=map(int,input().split())\n    l13,r13=map(int,input().split())\n    l14,r14=map(int,input().split())\n    l15,r15=map(int,input().split())\n    l16,r16=map(int,input().split())\n    l17,r17=map(int,input().split())\n    l18,r18=map(int,input().split())\n    l19,r19=map(int,input().split())\n    l20,r20=map(int,input().split())\n    l21,r21=map(int,input().split())\n    l22,r22=map(int,input().split())\n    l23,r23=map(int,input().split())\n    l24,r24=map(int,input().split())\n    l25,r25=map(int,input().split())\n    l26,r26=map(int,input().split())\n    l27,r27=map(int,input().split())\n    l28,r28=map(int,input().split())\n    l29,r29=map(int,input().split())\n    l30,r30=",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4751,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    slow = head\n    fast = head\n    \n    while fast and fast.next:\n        slow = slow.next\n        fast = fast.next.next\n        \n        if slow == fast:\n            return True\n        \n    return False\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4752,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    for i in range(len(input_string)):\n        for j in range(i+1, len(input_string)):\n            if input_string[i] + input_string[j] == target:\n                return [i, j]\n    return []\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4753,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N = int(input_string)\n    if N == 3:\n        return 0\n    elif N == 4:\n        return 1\n    else:\n        return 2\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4754,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split()[0])\n    socks = list(map(int, input_string.split()[1:])\n    pile1 = []\n    pile2 = []\n    moves = 0\n    \n    for i in range(n):\n        if socks[i] == socks[i+n]:\n            moves += 1\n            pile1.append(socks[i])\n            pile2.append(socks[i+n])\n            socks.pop(i)\n            socks.pop(i+n)\n            i += 1\n    \n    while len(socks) > 0:\n        if len(pile1) == 0:\n            pile1.append(socks.pop(0))\n        elif len(pile2) == 0:\n            pile2.append(socks.pop(0))\n        elif socks[0] == pile1[-1]:\n            moves += 1\n            pile1.pop()\n            pile2.pop()\n            socks.pop(0)\n        elif socks[0] == pile2[-1]:\n            moves += 1\n            pile1.append(socks.pop(0))\n        elif socks[-1] == pile1[-1]:\n            moves += 1\n            pile1.pop()\n            pile2.append(socks.pop(-1))\n        elif socks[-1] == pile2[-1]:\n            moves += 1\n            pile2.pop()\n            pile1.append(socks.pop(-1))\n        else:\n            return \"impossible\"\n    \n    return moves\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4755,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    candy_price, smallest_bill_zeros = map(int, input_string.split())\n    smallest_bill = 10 ** smallest_bill_zeros\n    if candy_price % smallest_bill == 0:\n        return candy_price\n    elif candy_price < smallest_bill:\n        return smallest_bill\n    else:\n        return (candy_price // smallest_bill + 1) * smallest_bill\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4756,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0.00000\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4757,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Hint: You can use the following function to split the input string into a list of lists\n    # input_list = [list(map(int, line.split())) for line in input_string.split('\\n')]\n    # Then, you can access the number of villagers and the list of villagers present on each evening using input_list[0][0] and input_list[i][1:] for i = 1, 2, ..., E\n    # You can also use a set to keep track of the songs sung by each villager\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4758,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, T, M = map(int, input_string.split())\n    return (N*T*M)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4759,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    at_bats = input_string.split()\n    at_bats = [int(x) for x in at_bats]\n    hits = sum(at_bats)\n    total_bases = 0\n    total_at_bats = 0\n    for x in at_bats:\n        if x != -1:\n            total_bases += x\n            total_at_bats += 1\n    slugging_percentage = hits/total_at_bats\n    return slugging_percentage\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4760,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, K = map(int, input_string.split())\n    primes = []\n    sieve = [True] * (N+1)\n    sieve[0] = False\n    sieve[1] = False\n    for i in range(2, int(N**0.5)+1):\n        if sieve[i]:\n            for j in range(i*i, N+1, i):\n                sieve[j] = False\n    for i in range(2, N+1):\n        if sieve[i]:\n            primes.append(i)\n    return primes[K-1]\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4761,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    L, H = map(int, input_string.split())\n    count = 0\n    for i in range(L, H+1):\n        if len(set(str(i)) == 6 and len(str(i)) == len(set(str(i))):\n            for j in str(i):\n                if i % int(j) != 0:\n                    break\n            else:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4762,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string)\n    if n == 1:\n        return 0.0\n    elif n == 2:\n        return 1.0\n    else:\n        return 1 - (1 / n) * (1 - 1 / (n-1) * (1 - 1 / (n-2)) ** (n-2) )\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4763,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4764,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, h, v = map(int, input_string.split())\n    max_volume = 0\n    for i in range(h+1):\n        for j in range(v+1):\n            for k in range(n-h):\n                for l in range(n-v):\n                    volume = (n-i)*(n-j)*(n-k)*(n-l)\n                    if volume > max_volume:\n                        max_volume = volume\n    return max_volume\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4765,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Hint: You can use the split() function to split the input string into a list of strings, and then use the map() function to convert each string to an integer.\n    # You can use the min() and max() functions to find the minimum and maximum values in a list.\n    # You can use the abs() function to find the absolute value of a number.\n    # You can use the math.prod() function to find the product of a list of numbers.\n    # You can use the sum() function to find the sum of a list of numbers.\n    # You can use the sorted() function to sort a list in ascending or descending order.\n    # You can use the min() and max() functions to find the minimum and maximum values in a list.\n    # You can use the zip() function to iterate over two lists at the same time.\n    \n    # Convert the input string into a list of integers\n    N, *ingredients = map(int, input_string.split())\n    sourness = [ingredients[i] for i in range(0, len(ingredients), 2)]\n    bitterness = [ingredients[i] for i in range(1, len(ingredients), 2)]\n    \n    # Sort the ingredients by sourness and bitterness\n    sourness.sort()\n    bitterness.sort()\n    \n    # Calculate the minimum and maximum sourness and bitterness\n    min_sourness = min(sourness)\n    max_sourness = max(sourness)\n    min_bitterness = min(bitterness)\n    max_bitterness = max(bitterness)\n    \n    # Calculate the absolute difference between the minimum and maximum sourness and bitterness\n    abs_diff = abs(max_sourness * max_bitterness - min_sourness * min_bitterness)\n    \n    return abs_diff\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4766,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code goes here\n    lines = input_string.split('\\n')\n    output = []\n    for line in lines:\n        if line.startswith('Simon says'):\n            output.append(line[11:])\n    return output\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4767,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    registers = list(map(int, input_string.split()))\n    p = [2, 3, 5, 7, 11, 13, 17, 19]\n    count = 0\n    for i in range(len(registers)):\n        count += registers[i]\n        if count >= p[i]:\n            return 0\n    return p[-1] - registers[-1]\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4768,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return None\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4769,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4770,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, M = map(int, input_string.split())\n    if N > M:\n        print(\"Dr. Chaz needs {} more piece[s] of chicken!\".format(N-M))\n    else:\n        print(\"Dr. Chaz will have {} piece[s] of chicken left over!\".format(M-N))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4771,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, V = map(int, input_string.split())\n    boxes = []\n    for i in range(n):\n        l, w, h = map(int, input().split())\n        boxes.append((l, w, h))\n    \n    max_box = max(boxes, key=lambda x: x[0]*x[1]*x[2])\n    max_volume = max_box[0]*max_box[1]*max_box[2]\n    return max_volume - V\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4772,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert the input string into a 2D array\n    grid = []\n    for line in input_string:\n        grid.append(list(line.strip())\n    \n    # Initialize variables to keep track of the current word and the minimum word found so far\n    current_word = \"\"\n    min_word = \"\"\n    \n    # Loop through each row and column in the grid\n    for i in range(R):\n        for j in range(C):\n            # If the current square is not blocked, start a new word\n            if grid[i][j] != \"#\":\n                current_word += grid[i][j]\n                # Loop through the rest of the row and column to find the end of the word\n                for k in range(j+1, C):\n                    if grid[i][k] != \"#\":\n                        current_word += grid[i][k]\n                    else:\n                        break\n                # If the current word is at least 2 characters long, check if it is smaller than the current minimum word\n                if len(current_word) >= 2 and (len(min_word) == 0 or current_word < min_word):\n                    min_word = current_word\n                current_word = \"\"\n                \n                # Loop through the rest of the column and find the end of the word\n                for k in range(i+1, R):\n                    if grid[k][j] != \"#\":\n                        current_word += grid[k][j]\n                    else:\n                        break\n                # If the current word is at least 2 characters long, check if it is smaller than the current minimum word\n                if len(current_word) >= 2 and (len(min_word) == 0 or current_word < min_word):\n                    min_word = current_word\n                current_word = \"\"\n                \n    return min_word\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4773,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return len(input_string)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4774,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    a, b, c, d = map(int, input_string.split())\n    operators = ['+', '-', '*', '/']\n    valid_expressions = []\n    \n    for op1 in operators:\n        for op2 in operators:\n            for op3 in operators:\n                try:\n                    expression = f\"{a} {op1} {b} {op2} {c} {op3} {d}\"\n                    if eval(expression) == 0:\n                        valid_expressions.append(expression)\n                except ZeroDivisionError:\n                    pass\n    \n    if valid_expressions:\n        valid_expressions.sort()\n        print('\\n'.join(valid_expressions))\n    else:\n        print(\"problems ahead\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4775,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    A, B = input_string.split()\n    N = len(A)\n    M = len(B)\n    for i in range(M):\n        for j in range(N):\n            if A[j] == B[i]:\n                break\n        else:\n            continue\n        break\n    output = []\n    for i in range(M):\n        row = []\n        for j in range(N):\n            if i == j:\n                row.append(A[j])\n            else:\n                row.append('.')\n        output.append(''.join(row))\n    output.append(A)\n    for i in range(N):\n        row = []\n        for j in range(M):\n            if i == j:\n                row.append(B[j])\n            else:\n                row.append('.')\n        output.append(''.join(row))\n    return '\\n'.join(output)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4776,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Hint: You can use the split() function to split the input string into a list of strings, and then use the map() function to convert each string to an integer.\n    # You can then use the list comprehension to create a list of tuples containing the start and end days of each event.\n    # Finally, you can use the set() function to find the union of all the days in which free food is served.\n    # The length of the resulting set will be the number of days in which free food is served by at least one event.\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4777,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return input_string.count('A'), input_string.count('B')\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4778,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return output_string\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4779,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split('\\n')[0])\n    a = list(map(int, input_string.split('\\n')[1:]))\n    max_value = 0\n    for i in range(1, n):\n        for j in range(i+1, n+1):\n            max_value = max(max_value, (sum(a[:i])**2)*sum(a[i:]))\n    return max_value\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4780,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return input_string\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4781,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to list of tuples\n    input_list = [tuple(map(int, line.split()) for line in input_string.split('\\n')]\n    \n    # Initialize variables\n    start_time = 0\n    current_player = input_list[0][0]\n    box_holder = input_list[0][0]\n    \n    # Iterate through the list of tuples\n    for i in range(1, len(input_list)):\n        time_passed, answer = input_list[i]\n        \n        # Check if the answer was skipped\n        if answer == 'P':\n            current_player = (current_player + 1) % 8\n            continue\n        \n        # Check if the answer was correct\n        if answer == 'T':\n            start_time += time_passed\n            box_holder = current_player\n        \n        # Check if the time passed is greater than 180 seconds\n        if start_time >= 180:\n            break\n        \n        # Move to the next player\n        current_player = (current_player + 1) % 8\n    \n    return box_holder\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4782,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    if n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 6\n    else:\n        return 2*m\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4783,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    M, N = map(int, input_string.split())\n    coins = []\n    for i in range(M):\n        coins.append(list(map(int, input().split()))\n    entrance = coins[0][0]\n    exit = coins[-1][-1]\n    min_ladder = 0\n    for i in range(M):\n        for j in range(N):\n            if coins[i][j] == exit:\n                min_ladder = max(min_ladder, entrance - coins[i][j])\n                break\n    return min_ladder\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4784,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    X, N = map(int, input_string.split())\n    P = list(map(int, input_string.split())[2:])\n    total_spent = sum(P)\n    if total_spent >= X:\n        return 0\n    else:\n        return X - total_spent\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4785,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    if \"ss\" in input_string:\n        return \"hiss\"\n    else:\n        return \"no hiss\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4786,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Write your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4787,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4788,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n1, n2 = map(int, input_string.split())\n    if n1 == n2:\n        return 0\n    elif n1 == 0 and n2 == 359:\n        return 180\n    elif n1 == 359 and n2 == 0:\n        return 180\n    elif n1 == 180 and n2 == 90:\n        return 90\n    elif n1 == 90 and n2 == 270:\n        return 90\n    elif n1 == 270 and n2 == 180:\n        return 90\n    elif n1 == 270 and n2 == 90:\n        return -90\n    elif n1 == 90 and n2 == 180:\n        return -90\n    elif n1 == 0 and n2 == 270:\n        return -90\n    elif n1 == 180 and n2 == 270:\n        return -90\n    elif n1 == 270 and n2 == 0:\n        return -90\n    elif n1 == 90 and n2 == 0:\n        return -90\n    elif n1 == 0 and n2 == 180:\n        return -90\n    elif n1 == 180 and n2 == 0:\n        return -90\n    elif n1 == 90 and n2 == 270:\n        return -90\n    elif n1 == 270 and n2 == 90:\n        return -90\n    elif n1 == 0 and n2 == 90:\n        return 90\n    elif n1 == 180 and n2 == 90:\n        return 90\n    elif n1 == 270 and n2 == 180:\n        return 90\n    elif n1 == 90 and n2 == 270:\n        return 90\n    elif n1 == 270 and n2 == 0:\n        return 90\n    elif n1 == 9",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4789,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input string to list of integers\n    input_list = list(map(int, input_string.split()))\n    K = input_list[0]\n    input_list = input_list[1:]\n    \n    # Sort the list in ascending order\n    input_list.sort()\n    \n    # Initialize variables\n    count = 0\n    current_position = 1\n    \n    # Loop through the list and count the number of passes\n    for i in range(K):\n        if input_list[i] > current_position:\n            count += input_list[i] - current_position\n        current_position = input_list[i] + 1\n    \n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4790,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 1 if input_string.count('B') == input_string.count('W') else 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4791,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    s1, s2, s3, s4 = map(float, input_string.split())\n    s = sorted([s1, s2, s3, s4])\n    p = (s[0]+s[1]+s[2]+s[3])/2\n    area = (p*(p-s[0])*(p-s[1])*(p-s[2])*(p-s[3])).sqrt()\n    return area\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4792,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4793,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    s, v1, v2 = map(int, input_string.split())\n    if s % v2 == 0:\n        return s // v2, 0\n    elif s % v1 == 0:\n        return 0, s // v1\n    else:\n        return s // v1, s // v2\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4794,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    R, C = map(int, input().split())\n    grid = []\n    for i in range(R):\n        grid.append(list(input())\n    count = 0\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == '.':\n                count += 1\n    print(count)\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == '.':\n                if i+1 < R and grid[i+1][j] == '.':\n                    count += 1\n                if i-1 >= 0 and grid[i-1][j] == '.':\n                    count += 1\n                if j+1 < C and grid[i][j+1] == '.':\n                    count += 1\n                if j-1 >= 0 and grid[i][j-1] == '.':\n                    count += 1\n    print(count)\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == '.':\n                if i+2 < R and grid[i+2][j] == '.':\n                    count += 1\n                if i-2 >= 0 and grid[i-2][j] == '.':\n                    count += 1\n                if j+2 < C and grid[i][j+2] == '.':\n                    count += 1\n                if j-2 >= 0 and grid[i][j-2] == '.':\n                    count += 1\n    print(count)\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == '.':\n                if i+3 < R and grid[i+3][j] == '.':\n                    count += 1\n                if i-3 >= 0 and grid[i-3][j] == '.':\n                    count += 1\n                if j+3 < C and grid[i][j+3] == '.':\n                    count += 1\n                if j-3 >= 0 and grid[i][j-3] == '.':\n                   ",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4795,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert the input string to a list of integers\n    numbers = [int(x) for x in input_string.split()]\n    \n    # Initialize the sum to 0\n    sum = 0\n    \n    # Loop through the list of integers\n    for i in range(len(numbers)):\n        # Extract the first digit and the second digit\n        first_digit = numbers[i] // 10\n        second_digit = numbers[i] % 10\n        \n        # Calculate the power of the first digit\n        first_power = 1\n        for j in range(first_digit):\n            first_power *= 10\n        \n        # Calculate the power of the second digit\n        second_power = 1\n        for j in range(second_digit):\n            second_power *= 10\n        \n        # Add the result to the sum\n        sum += first_power + second_power\n    \n    # Return the sum\n    return sum\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4796,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    A, B, C, I, J, K = map(int, input_string.split())\n    total_juice = A + B + C\n    cocktail_juice = I + J + K\n    leftover_A = A - (total_juice * I / cocktail_juice)\n    leftover_B = B - (total_juice * J / cocktail_juice)\n    leftover_C = C - (total_juice * K / cocktail_juice)\n    \n    return leftover_A, leftover_B, leftover_C\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4797,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    stack = []\n    for char in input_string:\n        if char == '<':\n            if stack:\n                stack.pop()\n        else:\n            stack.append(char)\n    \n    return ''.join(stack)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4798,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4799,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    G, S, C = map(int, input_string.split())\n    if G + S + C > 5:\n        return \"Invalid input\"\n    \n    if G == 0 and S == 0 and C == 0:\n        return \"Invalid input\"\n    \n    if G == 0 and S == 0:\n        return \"Estate or Copper\"\n    \n    if G == 0:\n        return \"Province or Gold\"\n    \n    if S == 0:\n        return \"Duchy or Copper\"\n    \n    if C == 0:\n        return \"Province or Duchy\"\n    \n    if G >= 1 and S >= 1 and C >= 1:\n        return \"Province or Gold\"\n    \n    if G >= 1 and S >= 1:\n        return \"Province or Duchy\"\n    \n    if G >= 1 and C >= 1:\n        return \"Province or Estate\"\n    \n    if S >= 1 and C >= 1:\n        return \"Duchy or Estate\"\n    \n    if G >= 1:\n        return \"Province\"\n    \n    if S >= 1:\n        return \"Duchy\"\n    \n    if C >= 1:\n        return \"Estate\"\n    \n    return \"Invalid input\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4800,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k = map(int, input_string.split())\n    d, s = map(float, input_string.split())\n    if k == 0:\n        return \"impossible\"\n    else:\n        return round((n*d - k*s)/(n-k), 6)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4801,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    A = list(map(int, input_string.split()))\n    N = A[0]\n    A = A[1:]\n    gis = []\n    gis.append(A[0])\n    for i in range(1, N):\n        if A[i] > gis[-1]:\n            gis.append(A[i])\n    return len(gis), gis\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4802,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input string to list of integers\n    input_list = list(map(int, input_string.split()))\n    \n    # Get hours and minutes\n    hours = input_list[0]\n    minutes = input_list[1]\n    \n    # Subtract 45 minutes from minutes\n    minutes -= 45\n    \n    # If minutes are negative, subtract 1 from hours and add 60 to minutes\n    if minutes < 0:\n        hours -= 1\n        minutes += 60\n        \n    # If hours are negative, add 24 to hours\n    if hours < 0:\n        hours += 24\n        \n    # If minutes are greater than 59, subtract 60 from hours and add 1 to minutes\n    if minutes > 59:\n        hours += 1\n        minutes -= 60\n        \n    # Return the new time in 24-hour notation\n    return [hours, minutes]\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4803,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N = float(input_string)\n    if N < 0.36788 or N > 2.718281:\n        return \"No solution\"\n    else:\n        a = 1.0\n        while True:\n            a = a + (N - a ** a) / (1 + a * math.log(a))\n            if abs(a - 1.0) < 1e-5:\n                return a\n# End of code\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4804,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    S = int(input_string)\n    if S == 1:\n        return \"1: 1,1\"\n    elif S == 2:\n        return \"2: 1,1 2,1\"\n    elif S == 3:\n        return \"3: 2,1\"\n    elif S == 4:\n        return \"4: 2,1 2,2\"\n    elif S == 5:\n        return \"5: 2,1 2,2 3,2 3,3\"\n    elif S == 6:\n        return \"6: 2,1 2,2 3,3 4,4\"\n    elif S == 7:\n        return \"7: 2,1 2,2 3,3 4,4 5,5\"\n    elif S == 8:\n        return \"8: 2,1 2,2 3,3 4,4 5,5 6,6\"\n    elif S == 9:\n        return \"9: 2,1 2,2 3,3 4,4 5,5 6,6 7,7\"\n    elif S == 10:\n        return \"10: 2,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8\"\n    elif S == 11:\n        return \"11: 2,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9\"\n    elif S == 12:\n        return \"12: 2,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,10\"\n    elif S == 13:\n        return \"13: 2,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,10 11,11\"\n    elif S == 14:\n        return \"14",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4805,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    words = input_string.split()\n    for i in range(len(words)):\n        for j in range(i+1, len(words)):\n            if words[i] == words[j]:\n                return \"no\"\n    return \"yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4806,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4807,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    X, Y, N = map(int, input_string.split())\n    for i in range(1, N+1):\n        if i % X == 0 and i % Y == 0:\n            print(\"FizzBuzz\")\n        elif i % X == 0:\n            print(\"Fizz\")\n        elif i % Y == 0:\n            print(\"Buzz\")\n        else:\n            print(i)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4808,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, d_m = map(int, input_string.split())\n    d_list = list(map(int, input_string.split())[1:])\n    k = 0\n    for i in range(n-1, -1, -1):\n        if d_list[i] > d_m:\n            k += 1\n        else:\n            break\n    if k == 0:\n        return \"It had never snowed this early!\"\n    else:\n        return f\"It hadn't snowed this early in {k} years!\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4809,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    s, n = map(int, input_string.split())\n    players = [i for i in range(1, n+1)]\n    current_player = 1\n    while len(players) > 1:\n        for i in range(s):\n            if current_player in players:\n                players.remove(current_player)\n            current_player = (current_player % n) + 1\n    return players[0]\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4810,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code goes here\n    return input_string\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4811,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    K = int(input_string)\n    min_bar_size = 1\n    min_breaks = 0\n    while K > 1:\n        if K % 2 == 0:\n            K //= 2\n            min_breaks += 1\n        else:\n            K -= 1\n            min_bar_size *= 2\n            min_breaks += 1\n    return min_bar_size, min_breaks\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4812,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return output_string\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4813,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    word = input_string[0]\n    permutation = input_string[1]\n    hangman = [' ' for i in range(10)]\n    guessed_letters = []\n    for letter in permutation:\n        if letter in word:\n            for i in range(len(word)):\n                if word[i] == letter:\n                    guessed_letters.append(letter)\n                    hangman[i] = letter\n            if ''.join(hangman) == word:\n                return \"WIN\"\n        else:\n            hangman[permutation.index(letter)] = '-'\n            if '-' not in hangman:\n                return \"LOSE\"\n    return \"LOSE\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4814,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Write your code here\n    return \"INCREASING\" if input_string == sorted(input_string) else \"DECREASING\" if input_string == sorted(input_string, reverse=True) else \"NEITHER\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4815,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, p, m = map(int, input_string.split())\n    players = {}\n    for i in range(n):\n        players[input()] = 0\n    for i in range(m):\n        name, score = input().split()\n        players[name] += int(score)\n    winners = []\n    for player, score in players.items():\n        if score >= p:\n            winners.append(player)\n    if winners:\n        for winner in winners:\n            print(winner)\n    else:\n        print(\"No winner!\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4816,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    x, y, x1, y1, x2, y2 = map(float, input_string.split())\n    if x1 == x2:\n        return abs(x - x1)\n    elif y1 == y2:\n        return abs(y - y1)\n    else:\n        m = (y2 - y1) / (x2 - x1)\n        b = y1 - m * x1\n        x_min = min(x1, x2)\n        x_max = max(x1, x2)\n        y_min = min(y1, y2)\n        y_max = max(y1, y2)\n        if x < x_min:\n            return abs(x - x_min)\n        elif x > x_max:\n            return abs(x - x_max)\n        elif y < y_min:\n            return abs(y - y_min)\n        elif y > y_max:\n            return abs(y - y_max)\n        else:\n            return abs(y - m * x - b) / (m ** 2 + 1) ** 0.5\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4817,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of digits\n    digits = list(input_string)\n    \n    # Sort the list of digits in ascending order\n    digits.sort()\n    \n    # Check if the digits are already in ascending order\n    if digits == digits:\n        return ''.join(digits)\n    \n    # Find the smallest number larger than X by swapping adjacent digits\n    for i in range(len(digits)-1):\n        if digits[i] < digits[i+1]:\n            digits[i], digits[i+1] = digits[i+1], digits[i]\n            break\n    \n    # Check if the digits are in ascending order\n    if digits == digits:\n        return ''.join(digits)\n    else:\n        return '0'\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4818,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    tasks = list(map(int, input_string.split()[n+1:])\n    intervals = list(map(int, input_string.split()[n+m+1:])\n    tasks.sort()\n    intervals.sort()\n    count = 0\n    i = 0\n    j = 0\n    while i < n and j < m:\n        if tasks[i] <= intervals[j]:\n            count += 1\n            i += 1\n        else:\n            j += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4819,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    input_list = input_string.split('\\n')\n    input_list = [int(i) for i in input_list]\n    modulo_list = [i%42 for i in input_list]\n    distinct_list = list(set(modulo_list)\n    return len(distinct_list)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4820,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, b = map(int, input_string.split())\n    if b >= 100:\n        return \"yes\"\n    else:\n        return \"no\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4821,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4822,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    R, S, K = map(int, input_string.split())\n    flies = []\n    for i in range(R):\n        row = input()\n        for j in range(S):\n            if row[j] == '*':\n                flies.append((i,j))\n    \n    max_flies = 0\n    for i in range(R):\n        for j in range(S):\n            for k in range(i, i+K):\n                for l in range(j, j+K):\n                    if k < R and l < S:\n                        count = 0\n                        for fly in flies:\n                            if fly[0] >= i and fly[0] < i+K and fly[1] >= j and fly[1] < j+K:\n                                count += 1\n                        max_flies = max(max_flies, count)\n                        \n    print(max_flies)\n    \n    for i in range(R):\n        for j in range(S):\n            if i == 0 or j == 0 or i == R-1 or j == S-1:\n                print(input_string[i], end='')\n            elif i == K-1 and j == K-1:\n                print('+', end='')\n            elif i == K-1:\n                print('-', end='')\n            elif j == K-1:\n                print('|', end='')\n            elif i == K-1 and j == K:\n                print('+', end='')\n            elif i == K:\n                print('|', end='')\n            else:\n                print('.', end='')\n        print()\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4823,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert the input string to a list of tuples\n    cards = []\n    for card in input_string.split():\n        rank, suit = card[0], card[1]\n        cards.append((rank, suit))\n    \n    # Sort the list of tuples by rank\n    cards.sort(key=lambda x: x[0])\n    \n    # Initialize a dictionary to count the number of cards with each rank\n    rank_count = {}\n    for card in cards:\n        if card[0] in rank_count:\n            rank_count[card[0]] += 1\n        else:\n            rank_count[card[0]] = 1\n    \n    # Find the maximum count of cards with the same rank\n    max_count = 0\n    for count in rank_count.values():\n        if count > max_count:\n            max_count = count\n    \n    return max_count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4824,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4825,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4826,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N = int(input_string)\n    if N % 2 == 0:\n        return \"Bob\"\n    else:\n        return \"Alice\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4827,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4828,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    nop_count = 0\n    for i in range(len(input_string)):\n        if i % 4 == 0 and input_string[i].isupper():\n            continue\n        elif i % 4 != 0 and input_string[i].islower():\n            continue\n        else:\n            nop_count += 1\n    \n    return nop_count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4829,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    l, r = map(int, input_string.split())\n    if l == 0 and r == 0:\n        return \"Not a moose\"\n    elif l == r:\n        return \"Even \" + str(2*l)\n    else:\n        return \"Odd \" + str(max(l, r)*2)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4830,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4831,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Create a list to store the output\n    output = []\n    \n    # Loop through the input string\n    for i in range(len(input_string)):\n        \n        # If the index is divisible by 3, use a Wendy frame\n        if i % 3 == 0:\n            output.append(\"..*..\")\n            output.append(\".*.*.\")\n            output.append(\"*.\" + input_string[i] + \".*\")\n            output.append(\".*.*.\")\n            output.append(\"..*..\")\n        # Otherwise, use a Peter Pan frame\n        else:\n            output.append(\"..#..\")\n            output.append(\".#.#.\")\n            output.append(\"#.\" + input_string[i] + \"#\")\n            output.append(\".#.#.\")\n            output.append(\"..#..\")\n            \n    # Join the output list and return it\n    return \"\\n\".join(output)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4832,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    R = int(input_string)\n    pi = 3.141592653589793\n    euclidian_area = pi * R ** 2\n    taxicab_area = 2 * R ** 2\n    \n    return euclidian_area, taxicab_area\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4833,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Hint: You can split the input string into a list of integers using the split() method and the map() function\n    # Then, you can iterate over the list and sum the negative numbers to get the total expenses\n    # Remember to convert the strings to integers using the int() function\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4834,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split()[0])\n    times = list(map(int, input_string.split()[1:])\n    times.sort()\n    total_time = 0\n    for i in range(n):\n        total_time += times[i]\n    return total_time\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4835,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"NOT POSSIBLE\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4836,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, C = map(int, input_string.split())\n    weights = list(map(int, input().split()))\n    weights.sort(reverse=True)\n    count = 0\n    total_weight = 0\n    for weight in weights:\n        if total_weight + weight <= C:\n            total_weight += weight\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4837,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Write your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4838,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of integers\n    input_list = list(map(int, input_string.split()))\n    \n    # Initialize the timer to 0\n    timer = 0\n    \n    # Loop through the input_list and increment the timer by 1 for each button press\n    for i in range(len(input_list)):\n        timer += 1\n        \n        # If the current time is greater than the next button press, stop the timer\n        if i < len(input_list) - 1 and input_list[i] > input_list[i+1]:\n            break\n    \n    # If the timer is still running, return \"still running\"\n    if timer == input_list[-1]:\n        return \"still running\"\n    # Otherwise, return the timer value\n    else:\n        return timer\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4839,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, canisters = map(int, input_string.split())\n    canisters = list(map(int, input_string.split())[1:])\n    balloons = [i for i in range(1, n+1)]\n    \n    canisters.sort(reverse=True)\n    balloons.sort()\n    \n    total_helium = sum(canisters)\n    total_balloons = sum(balloons)\n    \n    if total_helium < total_balloons:\n        return \"impossible\"\n    \n    max_fraction = 0\n    for i in range(n):\n        max_fraction = max(max_fraction, balloons[i] / canisters[i])\n        \n    return max_fraction\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4840,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    a1, b1, a2, b2 = map(int, input_string.split())\n    gunnar_sum = (b1 - a1 + 1) * (a1 + b1) // 2\n    emma_sum = (b2 - a2 + 1) * (a2 + b2) // 2\n    \n    if gunnar_sum > emma_sum:\n        return \"Gunnar\"\n    elif gunnar_sum < emma_sum:\n        return \"Emma\"\n    else:\n        return \"Tie\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4841,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    input_list = input_string.split()\n    count = 0\n    for i in input_list:\n        if i.isdigit():\n            count += int(i)\n        else:\n            if i == \"mumble\":\n                count = -1\n                break\n    if count == -1:\n        return \"something is fishy\"\n    else:\n        return \"makes sense\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4842,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input string to list of integers\n    input_list = list(map(int, input_string.split()))\n    n = input_list[0]\n    values = input_list[1:]\n    \n    # Calculate the differences between consecutive values\n    differences = [values[i+1] - values[i] for i in range(n-1)]\n    \n    # Calculate the degree of the polynomial\n    degree = 0\n    while differences:\n        degree += 1\n        differences = [differences[i+1] - differences[i] for i in range(len(differences)-1)]\n    \n    # Calculate the next value of the polynomial\n    next_value = values[-1] + degree * (values[-1] - values[-2])\n    \n    return degree, next_value\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4843,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of tuples\n    queens = []\n    for line in input_string.split('\\n')[1:]:\n        x, y = line.split()\n        queens.append((int(x), int(y)))\n    \n    # Check if any queen can attack another queen\n    for i in range(len(queens)):\n        for j in range(i+1, len(queens)):\n            if queens[i] == queens[j]:\n                return \"INCORRECT\"\n            elif abs(queens[i][0] - queens[j][0]) == abs(queens[i][1] - queens[j][1]) or queens[i][0] == queens[j][0] or queens[i][1] == queens[j][1]:\n                return \"INCORRECT\"\n    \n    return \"CORRECT\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4844,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"Solution\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4845,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input string to a list of integers\n    D, M = map(int, input_string.split())\n    \n    # Create a list of the days in each month\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 31, 30, 31]\n    \n    # Check if it's a leap year\n    if M == 2 and (D == 29 and (2009 % 4 == 0 and (2009 % 100 != 0 or 2009 % 400 == 0)):\n        days_in_month[1] = 29\n    \n    # Calculate the day of the week\n    day_of_week = 0\n    for i in range(1, M):\n        day_of_week += days_in_month[i-1]\n    day_of_week += D\n    day_of_week %= 7\n    \n    # Convert the day of the week to a string\n    days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\n    return days[day_of_week]\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4846,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    L, D, X = map(int, input_string.split())\n    N = M = None\n    for i in range(L, D+1):\n        if sum(int(digit) for digit in str(i)) == X:\n            if N is None or i < N:\n                N = i\n            if M is None or i > M:\n                M = i\n    return str(N) + '\\n' + str(M)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4847,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # read input\n    A, B, C = map(int, input_string.split())\n    N = int(input())\n    apple_trees = []\n    for _ in range(N):\n        x, y = map(int, input().split())\n        apple_trees.append((x, y))\n    \n    # calculate area of triangle\n    area = abs((A[0]*(B[1]-C[1]) + B[0]*(C[1]-A[1]) + C[0]*(A[1]-B[1]))/2)\n    \n    # count number of apple trees inside the triangle\n    count = 0\n    for tree in apple_trees:\n        if is_inside_triangle(tree, A, B, C):\n            count += 1\n    \n    # output results\n    print(\"{:.1f}\".format(area))\n    print(count)\n    \ndef is_inside_triangle(tree, A, B, C):\n    # check if tree is inside the triangle\n    # using barycentric coordinates\n    a = area(A, B, C)\n    a1 = area(tree, B, C)\n    a2 = area(A, tree, C)\n    a3 = area(A, B, tree)\n    return a1 + a2 + a3 == a\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4848,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string)\n    m = 2\n    while m < n:\n        if n % m == 0:\n            return m\n        m += 1\n    return m\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4849,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4850,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4851,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string)\n    while True:\n        n += 1\n        if sum(int(digit) for digit in str(n)) % n == 0:\n            return n\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4852,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4853,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, *coefficients = map(int, input_string.split())\n    C = [0] * (n+1)\n    C[0] = coefficients[-1]\n    for i in range(1, n+1):\n        C[i] = sum(coefficients[:n-i+1])\n    return C\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4854,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return input_string\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4855,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    A, I = map(int, input_string.split())\n    return math.ceil((I * A) / 100)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4856,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    A, B = input_string.split()\n    A = int(A[::-1])\n    B = int(B[::-1])\n    \n    if A > B:\n        return str(A)\n    else:\n        return str(B)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4857,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    l, w = map(int, input_string.split())\n    if w > 26*l:\n        return \"impossible\"\n    else:\n        words = []\n        for i in range(26**l):\n            word = \"\"\n            for j in range(l):\n                word += chr(ord('a') + (i // (26**j) % 26) + 1)\n            if sum(ord(c) - ord('a') + 1 for c in word) == w:\n                words.append(word)\n        if words:\n            return words[0]\n        else:\n            return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4858,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    M, N, C = map(int, input_string.split())\n    M = int(M)\n    N = int(N)\n    C = input_string.split()[2]\n    frame1 = []\n    frame2 = []\n    for i in range(M):\n        frame1.append(input())\n    input()\n    for i in range(M):\n        frame2.append(input())\n    for i in range(M):\n        for j in range(N):\n            if frame1[i][j] == C:\n                for k in range(M):\n                    for l in range(N):\n                        if frame2[k][l] == C:\n                            if k-i >= 0 and l-j >= 0:\n                                if frame1[k-i][l-j] == C:\n                                    print(C, end='')\n                                else:\n                                    print('.', end='')\n                            else:\n                                print('.', end='')\n                    print()\n            else:\n                print(frame1[i], end='')\n        print()\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4859,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    b, d, c, l = map(int, input_string.split())\n    if l % 2 != 0:\n        return \"impossible\"\n    elif b + d + c != l:\n        return \"impossible\"\n    else:\n        for i in range(0, l//2 + 1):\n            for j in range(0, l//2 + 1):\n                k = l - i - j\n                if i + j + k == l:\n                    print(i, j, k)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4860,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    input_list = input_string.split('\\n')\n    n = int(input_list[0])\n    input_list = input_list[1:]\n    input_list = [int(i) for i in input_list]\n    missing_numbers = []\n    for i in range(1, input_list[-1]+1):\n        if i not in input_list:\n            missing_numbers.append(i)\n    if len(missing_numbers) == 0:\n        print(\"good job\")\n    else:\n        for i in missing_numbers:\n            print(i)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4861,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, p, s, v = map(float, input_string.split())\n    c = 1.0\n    while True:\n        t = n * (log2(n) ** (c * sqrt(2)) / (p * 10**9) + s / v)\n        if t >= 157079.04857106:\n            return f\"{t:.6f} {c:.6f}\"\n        c += 0.0000001\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4862,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N = int(input_string)\n    if N == 0:\n        return 0\n    elif N == 1:\n        return 0\n    elif N == 2:\n        return 1\n    else:\n        return (N*(N-1))/2\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4863,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split('\\n')[0])\n    correct_answers = input_string.split('\\n')[1:]\n    score = 0\n    for i in range(n):\n        if correct_answers[i] == 'A':\n            score += 1\n    return score\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4864,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    R, C, Z_R, Z_C = map(int, input().split())\n    article = []\n    for i in range(R):\n        article.append(input())\n    \n    enlarged_article = []\n    for i in range(R*Z_R):\n        row = []\n        for j in range(C*Z_C):\n            row.append('.')\n        enlarged_article.append(row)\n    \n    for i in range(R):\n        for j in range(C):\n            if article[i][j] != '.':\n                for k in range(Z_R):\n                    for l in range(Z_C):\n                        enlarged_article[i*Z_R+k][j*Z_C+l] = article[i][j]\n    \n    for row in enlarged_article:\n        print(''.join(row))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4865,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4866,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    month, day = input_string.split()\n    month = month.upper()\n    if month == \"OCT\" and day == \"31\" or month == \"DEC\" and day == \"25\":\n        return \"yup\"\n    else:\n        return \"nope\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4867,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    M, N = map(int, input_string.split())\n    U, L, R, D = map(int, input_string.split())\n    crossword = []\n    for i in range(M):\n        crossword.append(input())\n    \n    frame = []\n    for i in range(M+2*U):\n        row = []\n        for j in range(N+2*L+R+D):\n            if (i+j)%2 == 0:\n                row.append('#')\n            else:\n                row.append('.')\n        frame.append(row)\n    \n    for i in range(M):\n        for j in range(N):\n            frame[i+U][j+L] = crossword[i][j]\n    \n    for i in range(M+2*U):\n        print(''.join(frame[i]))\n    \ninput_string = input()\nsolution(input_string)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4868,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4869,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    A, N = map(float, input_string.split())\n    if N >= A:\n        print(\"Diablo is happy!\")\n    else:\n        print(\"Need more materials!\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4870,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    f, s, g, u, d = map(int, input_string.split())\n    if s == g:\n        return 0\n    if s > g:\n        return \"use the stairs\"\n    if u > f or d > f:\n        return \"use the stairs\"\n    if u > d:\n        return \"use the stairs\"\n    if (g - s) % (u + d) == 0:\n        return (g - s) // (u + d) * u\n    else:\n        return (g - s) // (u + d) * u + (g - s) % (u + d)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4871,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split('\\n')[0])\n    scores = [int(x) for x in input_string.split('\\n')[1:n+1] if x.isdigit()]\n    group_score = 0\n    for i in range(n):\n        group_score += scores[i] * (4**(n-i-1) / 5**(n-i) / 5)\n    return group_score\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4872,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string[0])\n    dirty_pushes = list(map(int, input_string[1].split()))\n    dirty_pushes.sort()\n    cleanups = 0\n    dirtiness = 0\n    for i in range(n):\n        if dirtiness + dirty_pushes[i] > 20:\n            cleanups += 1\n            dirtiness = 0\n        else:\n            dirtiness += dirty_pushes[i]\n    return cleanups\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4873,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a 2D array\n    grid = [list(row) for row in input_string.split('\\n')]\n    \n    # Initialize variables\n    gold_count = 0\n    player_pos = None\n    traps = []\n    \n    # Find player position and count gold\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 'P':\n                player_pos = (i, j)\n            elif grid[i][j] == 'G':\n                gold_count += 1\n            elif grid[i][j] == 'T':\n                traps.append((i, j))\n    \n    # Initialize safe_moves list\n    safe_moves = []\n    \n    # Check all possible safe moves\n    for move in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n        next_pos = (player_pos[0] + move[0], player_pos[1] + move[1])\n        if 0 <= next_pos[0] < len(grid) and 0 <= next_pos[1] < len(grid[0]) and grid[next_pos[0]][next_pos[1]].isalpha() == False:\n            safe_moves.append(next_pos)\n    \n    # Check if any safe moves are traps\n    for move in safe_moves:\n        if move in traps:\n            gold_count -= 1\n    \n    return gold_count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4874,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4875,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    words = input_string.split()\n    pig_latin = []\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    \n    for word in words:\n        if word[0] in vowels:\n            pig_latin.append(word + 'yay')\n        else:\n            for i in range(len(word)):\n                if word[i] in vowels:\n                    pig_latin.append(word[i:] + word[:i] + 'ay')\n                    break\n                    \n    return ' '.join(pig_latin)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4876,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split('\\n')[0])\n    menus = input_string.split('\\n')[1:]\n    for i in range(n):\n        k = int(menus[i*k+1])\n        menu = menus[i*k+2:i*(k+1)].split('\\n')\n        if 'pea soup' in menu and 'pancakes' in menu:\n            return menu[0]\n    return \"Anywhere is fine I guess\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4877,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    a, b, h = map(int, input_string.split())\n    count = 0\n    while h > 0:\n        count += 1\n        h -= a\n        if h < 0:\n            h += b\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4878,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    R1, S = map(int, input_string.split())\n    R2 = 2*S - R1\n    return R2\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4879,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    a, b, c = input_string.split()\n    if (a == \"North\" and b == \"West\" and c == \"East\") or (a == \"South\" and b == \"East\" and c == \"West\") or (a == \"East\" and b == \"South\" and c == \"North\") or (a == \"West\" and b == \"North\" and c == \"South\"):\n        return \"Yes\"\n    else:\n        return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4880,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    key = input_string.split()[1]\n    cipher = input_string.split()[2]\n    plaintext = \"\"\n    for i in range(m):\n        if i < n:\n            plaintext += chr((ord(cipher[i]) - ord(key[i]) + 97) % 26)\n        else:\n            plaintext += chr((ord(cipher[i]) - ord(plaintext[i-n]) + 97) % 26)\n    return plaintext\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4881,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N = int(input_string)\n    if N % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4882,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    for i in input_string:\n        if i.isdigit():\n            print(len(i))\n        else:\n            print(\"Invalid input\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4883,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4884,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, P = map(int, input_string.split())\n    carrots = 0\n    for i in range(N):\n        contestant = input()\n        if \"carrots\" in contestant:\n            carrots += 1\n    return carrots\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4885,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    white_pieces = []\n    black_pieces = []\n    \n    for i in range(len(input_string)):\n        if i % 2 == 0:\n            for j in range(len(input_string[i])):\n                if input_string[i][j] == 'K':\n                    white_pieces.append('K' + chr(j + 97) + str(8 - i))\n                elif input_string[i][j] == 'Q':\n                    white_pieces.append('Q' + chr(j + 97) + str(8 - i))\n                elif input_string[i][j] == 'R':\n                    white_pieces.append('R' + chr(j + 97) + str(8 - i))\n                elif input_string[i][j] == 'B':\n                    white_pieces.append('B' + chr(j + 97) + str(8 - i))\n                elif input_string[i][j] == 'N':\n                    white_pieces.append('N' + chr(j + 97) + str(8 - i))\n                elif input_string[i][j] == 'P':\n                    white_pieces.append('P' + chr(j + 97) + str(8 - i))\n                    \n        else:\n            for j in range(len(input_string[i])):\n                if input_string[i][j] == 'k':\n                    black_pieces.append('K' + chr(j + 97) + str(8 - i))\n                elif input_string[i][j] == 'q':\n                    black_pieces.append('Q' + chr(j + 97) + str(8 - i))\n                elif input_string[i][j] == 'r':\n                    black_pieces.append('R' + chr(j + 97) + str(8 - i))\n                elif input_string[i][j] == 'b':\n                    black_pieces.append('B' + chr(j + 97) + str(8 - i))\n                elif",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4886,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"Your wish is granted!\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4887,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return input_string\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4888,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, T = map(int, input_string.split())\n    tasks = list(map(int, input().split())\n    count = 0\n    time = 0\n    \n    for task in tasks:\n        if time + task <= T:\n            count += 1\n            time += task\n            \n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4889,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    rods = list(map(int, input_string.split('\\n'))\n    rods.pop(0)\n    total_length = sum(rods)\n    while len(rods) > 1:\n        new_rod = rods.pop(0) + rods.pop(0) - 1\n        rods.append(new_rod)\n    return total_length - sum(rods)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4890,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m, s, d = map(int, input_string.split()[:4])\n    c = list(map(int, input_string.split()[4:])[:s])\n    c.sort(reverse=True)\n    if sum(c) < m:\n        return \"impossible\"\n    else:\n        return \" \".join(map(str, c[:m]) + [\"0\"]*(s-m) if m <= len(c) else \" \".join(map(str, c[:m-len(c)] + [0]*(s-m+len(c))) + c)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4891,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    input_list = list(map(int, input_string.split()))\n    pieces = {'K': input_list[0], 'Q': input_list[1], 'R': input_list[2], 'B': input_list[3], 'N': input_list[4], 'P': input_list[5]}\n    total_pieces = sum(input_list)\n    valid_pieces = {'K': 1, 'Q': 1, 'R': 2, 'B': 2, 'N': 2, 'P': 8}\n    output = []\n    \n    for piece in valid_pieces:\n        diff = valid_pieces[piece] - pieces[piece]\n        if diff > 0:\n            output.append(diff)\n        elif diff < 0:\n            output.append(-diff)\n        else:\n            output.append(0)\n    \n    return output\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4892,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Hint: You can use the following function to split the input string into a list of tuples (password, probability)\n    passwords = [tuple(line.split()) for line in input_string.split('\\n')]\n    \n    # Sort the passwords by probability in descending order\n    passwords.sort(key=lambda x: float(x[1]), reverse=True)\n    \n    # Calculate the expected number of attempts\n    expected_attempts = 0\n    for i, (password, prob) in enumerate(passwords, start=1):\n        expected_attempts += i * float(prob)\n    \n    return expected_attempts\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4893,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, p = map(int, input_string.split())\n    distances = list(map(int, input_string.split())[1:])\n    distances.sort()\n    min_distance = distances[0]\n    for i in range(1, n):\n        min_distance = max(min_distance, distances[i] + i*p)\n    return min_distance\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4894,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4895,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"possible\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4896,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    bricks = list(map(int, input_string.split()))\n    towers = 1\n    base = bricks[0]\n    for i in range(1, len(bricks)):\n        if bricks[i] > base:\n            towers += 1\n            base = bricks[i]\n    return towers\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4897,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split()[0])\n    runners = []\n    for i in range(n):\n        name, a, b = input_string.split()[i*3+1:i*3+4]\n        runners.append((name, float(a), float(b)))\n    \n    runners.sort(key=lambda x: x[1])\n    best_time = 0\n    best_team = []\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                for l in range(n):\n                    for m in range(n):\n                        if i == j or i == k or i == l or i == m or j == k or j == l or j == m or k == l or k == m:\n                            continue\n                        time = runners[i][1] + runners[j][2] + runners[k][2] + runners[l][2]\n                        if time < best_time or best_time == 0:\n                            best_time = time\n                            best_team = [runners[i][0], runners[j][0], runners[k][0], runners[l][0]]\n                            \n    print(\"{:.2f}\".format(best_time))\n    for runner in best_team:\n        print(runner)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4898,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4899,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return input_string + \"y\" * (len(input_string) - 2) + \"e\" * 2\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4900,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split('\\n')[0])\n    table = [list(map(int, input_string.split('\\n')[i+1].split())) for i in range(n)]\n    roads = []\n    for i in range(n):\n        for j in range(n):\n            if i != j and table[i][j] != 0:\n                roads.append((i+1,j+1))\n    return roads\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4901,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Divide the string in two halves\n    first_half = input_string[:len(input_string)//2]\n    second_half = input_string[len(input_string)//2:]\n    \n    # Calculate the rotation value for each half\n    rotation_value_first = sum(ord(char) - ord('A') for char in first_half)\n    rotation_value_second = sum(ord(char) - ord('A') for char in second_half)\n    \n    # Rotate each character in the first half by the rotation value\n    rotated_first_half = \"\"\n    for char in first_half:\n        rotated_char = chr((ord(char) - ord('A') + rotation_value_first) % 26 + ord('A'))\n        rotated_first_half += rotated_char\n    \n    # Rotate each character in the second half by the corresponding character in the first half\n    decrypted_string = \"\"\n    for i in range(len(first_half)):\n        decrypted_char = chr((ord(rotated_first_half[i]) - ord('A') + ord(second_half[i]) - ord('A')) % 26 + ord('A'))\n        decrypted_string += decrypted_char\n    \n    return decrypted_string\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4902,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4903,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    jon_marius_a = input_string.count('a')\n    doctor_a = input_string.count('a')\n    if jon_marius_a >= doctor_a:\n        return \"go\"\n    else:\n        return \"no\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4904,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4905,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, M, A, B, K, G = map(int, input_string.split())\n    streets = {}\n    for i in range(M):\n        a, b, l = map(int, input_string.split())\n        if a not in streets:\n            streets[a] = []\n        streets[a].append((b, l))\n        if b not in streets:\n            streets[b] = []\n        streets[b].append((a, l))\n    \n    # Dijkstra's algorithm\n    queue = [(0, A)]\n    visited = set()\n    distances = {i: float('inf') for i in range(1, N+1)}\n    distances[A] = 0\n    while queue:\n        dist, node = heapq.heappop(queue)\n        if node in visited:\n            continue\n        visited.add(node)\n        for neighbor, length in streets[node]:\n            if distances[neighbor] > dist + length:\n                distances[neighbor] = dist + length\n                heapq.heappush(queue, (dist + length, neighbor)\n    \n    return distances[B]\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4906,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    if input_string[0] == 'E':\n        encoded_string = ''\n        count = 1\n        for i in range(1, len(input_string)):\n            if input_string[i] == input_string[i-1]:\n                count += 1\n            else:\n                encoded_string += str(count) + input_string[i-1]\n                count = 1\n        encoded_string += str(count) + input_string[-1]\n        return encoded_string\n    else:\n        decoded_string = ''\n        for i in range(0, len(input_string), 2):\n            decoded_string += input_string[i] * int(input_string[i+1])\n        return decoded_string\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4907,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string)\n    if n % 2 == 0:\n        return \"Bob\"\n    else:\n        return \"Alice\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4908,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Separate the input string into three integers\n    a, b, c = map(int, input_string.split())\n    \n    # Check all possible operations\n    for op in ['+', '-', '*', '/']:\n        # Check if the operation is valid\n        if op == '+':\n            if a + b == c:\n                return f\"{a} + {b} = {c}\"\n        elif op == '-':\n            if a - b == c:\n                return f\"{a} - {b} = {c}\"\n        elif op == '*':\n            if a * b == c:\n                return f\"{a} * {b} = {c}\"\n        elif op == '/':\n            if b != 0 and a / b == c:\n                return f\"{a} / {b} = {c}\"\n    \n    # If no valid operation is found, return \"No solution\"\n    return \"No solution\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4909,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N = int(input_string.split()[0])\n    D = list(map(int, input_string.split()[1:])\n    if N == 2:\n        return \"YES\" if D[0] == 1 else \"NO\"\n    for i in range(N):\n        if D[i] == 0:\n            return \"NO\"\n    for i in range(N):\n        if D[i] > N - i - 1:\n            return \"NO\"\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4910,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"ghost\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4911,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read input\n    attributes = input_string.split('\\n')[0].split()\n    songs = []\n    for line in input_string.split('\\n')[1:-1]:\n        if line.strip():\n            songs.append(line.split())\n    \n    # Sorting function\n    def stable_sort(songs, attribute):\n        sorted_songs = sorted(songs, key=lambda x: x[attributes.index(attribute)])\n        return sorted_songs\n    \n    # Main loop\n    for attribute in input_string.split('\\n')[-1].split():\n        songs = stable_sort(songs, attribute)\n        print(attribute, *attributes)\n        for song in songs:\n            print(*song)\n        print()\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4912,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    h, w, n = map(int, input_string.split())\n    bricks = list(map(int, input_string.split()))\n    bricks.sort(reverse=True)\n    total_height = sum(bricks)\n    if total_height > h:\n        return \"NO\"\n    else:\n        return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4913,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    vaccinated = []\n    control = []\n    for i in range(len(input_string)):\n        if input_string[i][0] == 'Y':\n            vaccinated.append(input_string[i])\n        else:\n            control.append(input_string[i])\n    \n    vaccine_infected = 0\n    control_infected = 0\n    for i in range(len(vaccinated)):\n        if vaccinated[i][1] == 'Y':\n            vaccine_infected += 1\n        if control[i][1] == 'Y':\n            control_infected += 1\n    vaccine_efficacy = (1 - vaccine_infected/len(vaccinated)) * 100\n    control_efficacy = (1 - control_infected/len(control)) * 100\n    \n    if vaccine_efficacy >= control_efficacy:\n        print(\"{:.2f}\".format(vaccine_efficacy))\n    else:\n        print(\"Not Effective\")\n    \n    if vaccine_infected == 0:\n        print(\"Not Effective\")\n    else:\n        print(\"{:.2f}\".format(vaccine_infected/len(vaccinated) * 100))\n    \n    if control_infected == 0:\n        print(\"Not Effective\")\n    else:\n        print(\"{:.2f}\".format(control_infected/len(control) * 100))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4914,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4915,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4916,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k = map(int, input_string.split())\n    matrix = []\n    for i in range(n):\n        row = list(map(int, input_string.split()))\n        matrix.append(row)\n    \n    # Your code here\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4917,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"gunilla has a point\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4918,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4919,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Hint: Use a dictionary to store the year of each trip\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4920,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4921,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    words = input_string.split()\n    seen = set()\n    output = []\n    for word in words:\n        if word.lower() not in seen:\n            seen.add(word.lower())\n            output.append(word)\n        else:\n            output.append('.')\n    return ' '.join(output)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4922,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    m, n = map(int, input_string.split())\n    clauses = []\n    for _ in range(m):\n        clause = list(map(int, input().split()))\n        clauses.append(clause)\n    \n    if m < 8:\n        return \"unsatisfactory\"\n    else:\n        return \"satisfactory\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4923,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split()[0])\n    a = list(map(int, input_string.split()[1:])\n    max_unique = 0\n    max_unique_index = -1\n    for i in range(n):\n        count = a.count(a[i])\n        if count == 1 and a[i] > max_unique:\n            max_unique = a[i]\n            max_unique_index = i\n    if max_unique_index == -1:\n        print(\"none\")\n    else:\n        print(max_unique_index+1)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4924,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    current_time = input_string[0]\n    target_time = input_string[1]\n    current_time_list = current_time.split(\":\")\n    target_time_list = target_time.split(\":\")\n    current_time_hour = int(current_time_list[0])\n    current_time_minute = int(current_time_list[1])\n    current_time_second = int(current_time_list[2])\n    target_time_hour = int(target_time_list[0])\n    target_time_minute = int(target_time_list[1])\n    target_time_second = int(target_time_list[2])\n    if current_time_hour > target_time_hour:\n        target_time_hour += 24\n    if current_time_minute > target_time_minute:\n        target_time_minute += 60\n        current_time_hour -= 1\n    if current_time_second > target_time_second:\n        target_time_second += 60\n        current_time_minute -= 1\n    time_diff_hour = target_time_hour - current_time_hour\n    time_diff_minute = target_time_minute - current_time_minute\n    time_diff_second = target_time_second - current_time_second\n    if time_diff_second < 0:\n        time_diff_minute -= 1\n        time_diff_second += 60\n    if time_diff_minute < 0:\n        time_diff_hour -= 1\n        time_diff_minute += 60\n    if time_diff_hour < 0:\n        time_diff_hour += 24\n    return f\"{time_diff_hour:02d}:{time_diff_minute:02d}:{time_diff_second:02d}\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4925,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    l, n = map(int, input_string.split())\n    k = 1\n    while True:\n        if n <= l * k:\n            return k\n        k += 1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4926,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string)\n    e = 1\n    for i in range(1, n+1):\n        e += 1/math.factorial(i)\n    return e\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4927,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, P, Q = map(int, input_string.split())\n    if P % N == 0:\n        print(\"opponent\")\n    else:\n        print(\"paul\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4928,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 2\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4929,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    S, P = input_string.split()\n    if S == P:\n        return \"Yes\"\n    elif P.startswith(str(int(S[-1])):\n        return \"Yes\"\n    elif P.endswith(str(int(S[0])):\n        return \"Yes\"\n    elif P.lower() == S.lower():\n        return \"Yes\"\n    else:\n        return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4930,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    vowels = ['a', 'e', 'i', 'o', 'u']\n    words = input_string.split()\n    decoded_words = []\n    \n    for word in words:\n        decoded_word = ''\n        for i in range(len(word)):\n            if word[i] in vowels:\n                decoded_word += word[i] + 'p' + word[i]\n            else:\n                decoded_word += word[i]\n        decoded_words.append(decoded_word)\n    \n    return ' '.join(decoded_words)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4931,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    X, Y = map(int, input_string.split())\n    if Y == 1:\n        return X\n    elif Y == 0:\n        return \"IMPOSSIBLE\"\n    else:\n        return X * Y\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4932,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    A, B, C, D = map(int, input_string.split())\n    P, M, G = map(int, input_string.split())\n    \n    if P % (A+B) < A:\n        if M % (C+D) < C:\n            if G % (A+B) < A:\n                print(\"both\")\n            else:\n                print(\"one\")\n        else:\n            print(\"none\")\n    else:\n        if G % (C+D) < C:\n            print(\"one\")\n        else:\n            print(\"none\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4933,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert the input string to a list of integers\n    numbers = list(map(int, input_string.split()))\n    \n    # Sort the list in ascending order\n    numbers.sort()\n    \n    # Calculate the difference between adjacent elements\n    diff = numbers[1] - numbers[0]\n    \n    # Calculate the missing number\n    missing_number = numbers[2] + 2*diff\n    \n    return missing_number\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4934,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    h, v = map(int, input_string.split())\n    v = v * 3.14159 / 180\n    return int(round(h / math.tan(v))) + 1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4935,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Split the input string into lines\n    lines = input_string.split('\\n')\n    \n    # Get the number of segments and the coefficient of gravity\n    N, g = map(int, lines[0].split())\n    \n    # Get the slopes and distances for each segment\n    segments = []\n    for line in lines[1:]:\n        D, theta = map(int, line.split())\n        segments.append((D, theta))\n    \n    # Calculate the velocity for each segment\n    velocities = []\n    for i in range(N):\n        D, theta = segments[i]\n        velocity = D * g * math.cos(math.radians(theta))\n        velocities.append(velocity)\n    \n    # Print the velocities\n    for velocity in velocities:\n        print(velocity)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4936,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split()[0])\n    temps = list(map(int, input_string.split()[1:])[:n])\n    min_temp = 100\n    min_day = 0\n    max_temp = 0\n    for i in range(n-2):\n        if temps[i] < temps[i+2]:\n            if temps[i+1] < min_temp:\n                min_temp = temps[i+1]\n                min_day = i+1\n            if temps[i+1] > max_temp:\n                max_temp = temps[i+1]\n    return min_day, max_temp\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4937,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, a = map(int, input_string.split())\n    e = list(map(int, input_string.split()))\n    e.sort(reverse=True)\n    count = 0\n    for i in range(n):\n        if a >= e[i]:\n            a -= e[i]\n            count += 1\n        else:\n            break\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4938,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4939,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k = map(int, input_string.split())\n    students = [i for i in range(n)]\n    egg = 0\n    for i in range(k):\n        command = input().split()\n        if command[0] == 'undo':\n            for j in range(int(command[1])):\n                students.insert(0, students.pop())\n        else:\n            throw = int(command[0])\n            if throw >= 0:\n                egg = (students.index(egg) + throw) % n\n            else:\n                egg = (students.index(egg) + throw) % n\n                students.insert(0, students.pop(egg))\n                egg = 0\n    return students.index(egg)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4940,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, M = map(int, input_string.split())\n    swathers = []\n    for i in range(N):\n        swathers.append(list(map(int, input().split()))\n    swathers = sorted(swathers, key=lambda x: x[0])\n    time = 0\n    for i in range(M):\n        for swather in swathers:\n            time += swather[i]\n            swather[i] = time\n    return \" \".join(str(swather[-1]) for swather in swathers)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4941,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return output\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4942,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, trees = input_string.split('\\n')\n    n = int(n)\n    trees = list(map(int, trees.split()))\n    trees.sort(reverse=True)\n    return sum(trees)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4943,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return output_string\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4944,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string)\n    if n == 1:\n        return 1\n    else:\n        days = 1\n        while n > 1:\n            n -= 1\n            days += 1\n            if n % 2 == 0:\n                n //= 2\n            else:\n                n -= 1\n        return days\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4945,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    a, b, m, sigma = map(int, input_string.split())\n    x_min = max(1, m - sigma)\n    y_min = max(1, (m - sigma) // 2)\n    x_max = m\n    y_max = (m - sigma) // 2\n    max_rent = 0\n    \n    for x in range(x_min, x_max + 1):\n        for y in range(y_min, y_max + 1):\n            rent = a * x + b * y\n            if x + y <= m and 2 * x + y >= sigma:\n                max_rent = max(max_rent, rent)\n                \n    return max_rent\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4946,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split()[0])\n    languages = list(map(int, input_string.split()[1:])\n    max_awkwardness = n\n    for i in range(n):\n        for j in range(i+1, n):\n            if languages[i] == languages[j]:\n                max_awkwardness = min(max_awkwardness, abs(i-j))\n    return max_awkwardness\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4947,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to float\n    X = float(input_string)\n    \n    # Calculate the number of Roman paces\n    paces = int(round(X * 100 * 4854 / 5280 + 0.5))\n    \n    # Return the result\n    return paces\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4948,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, s = map(int, input_string.split())\n    holes = []\n    for i in range(n):\n        r, x, y, z = map(int, input().split())\n        holes.append((r, x, y, z))\n    \n    # Your code here\n    return holes\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4949,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, W, H = map(int, input_string.split())\n    matches = []\n    for i in range(N):\n        matches.append(int(input())\n    for match in matches:\n        if match <= W:\n            print(\"DA\")\n        else:\n            print(\"NE\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4950,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split()[0])\n    checkpoints = []\n    for i in range(n):\n        t, d = map(int, input_string.split()[1:])\n        checkpoints.append((t, d))\n    \n    max_speed = 0\n    for i in range(1, n):\n        time_diff = checkpoints[i][0] - checkpoints[i-1][0]\n        distance_diff = checkpoints[i][1] - checkpoints[i-1][1]\n        speed = distance_diff / time_diff\n        if speed > max_speed:\n            max_speed = speed\n    \n    return int(max_speed)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4951,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    lines = input_string.split('\\n')\n    n = int(lines[0])\n    assumptions = []\n    for i in range(1, n+1):\n        line = lines[i].split()\n        if len(line) == 1:\n            assumptions.append(line[0])\n        else:\n            assumptions.append(line[:-2])\n            if line[-2] != '->':\n                return i\n            if line[-1] in assumptions[-1]:\n                return i\n    return 'correct'\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4952,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    votes = input_string.split(\"\\n\")\n    votes = votes[:-1]\n    votes_dict = {}\n    for vote in votes:\n        if vote in votes_dict:\n            votes_dict[vote] += 1\n        else:\n            votes_dict[vote] = 1\n    \n    max_votes = 0\n    max_voter = \"\"\n    for voter, count in votes_dict.items():\n        if count > max_votes:\n            max_votes = count\n            max_voter = voter\n    \n    total_votes = sum(votes_dict.values())\n    if max_votes > total_votes/2:\n        return max_voter\n    else:\n        return \"Runoff!\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4953,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4954,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"stay home\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4955,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    notes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n    scales = []\n    for i in range(len(notes)):\n        scale = [notes[i]]\n        for j in range(1, 7):\n            scale.append(notes[(i+j)%10])\n        scales.append(scale)\n    \n    song_notes = input_string.split()\n    song_notes = [note.replace('#', '').replace('b', '') for note in song_notes]\n    song_notes = [note.upper() for note in song_notes]\n    \n    possible_scales = []\n    for scale in scales:\n        if all(note in scale for note in song_notes):\n            possible_scales.append(''.join(scale))\n    \n    if len(possible_scales) == 0:\n        return \"none\"\n    else:\n        return ' '.join(possible_scales)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4956,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4957,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    grid = [list(input()) for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i][j] = 'E'\n                if i > 0 and grid[i-1][j] == '.':\n                    grid[i-1][j] = 'E'\n                if i < n-1 and grid[i+1][j] == '.':\n                    grid[i+1][j] = 'E'\n                if j > 0 and grid[i][j-1] == '.':\n                    grid[i][j-1] = 'E'\n                if j < m-1 and grid[i][j+1] == '.':\n                    grid[i][j+1] = 'E'\n    for row in grid:\n        print(''.join(row))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4958,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input string to list of integers\n    input_list = list(map(int, input_string.split()))\n    \n    # Sort the boxes in descending order\n    boxes = sorted(input_list[:6], reverse=True)\n    \n    # Find the two towers' heights\n    tower1_height = input_list[6]\n    tower2_height = input_list[7]\n    \n    # Find the boxes that belong to each tower\n    tower1_boxes = [box for box in boxes if box <= tower1_height]\n    tower2_boxes = [box for box in boxes if box <= tower2_height]\n    \n    # Sort the boxes in each tower in descending order\n    tower1_boxes.sort(reverse=True)\n    tower2_boxes.sort(reverse=True)\n    \n    # Output the boxes in each tower\n    print(\" \".join(map(str, tower1_boxes))\n    print(\" \".join(map(str, tower2_boxes))\n    \n# Test the function with the sample input\nsolution(\"12 8 2 4 10 3 25 14\") ",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4959,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    e, f, c = map(int, input_string.split())\n    return (e + f) // c\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4960,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Pad the binary number with zeros on the left until the number of digits is divisible by 3\n    while len(input_string) % 3 != 0:\n        input_string = '0' + input_string\n    \n    # Convert binary to octal\n    octal_number = ''\n    for i in range(0, len(input_string), 3):\n        octal_digit = 0\n        for j in range(3):\n            octal_digit += int(input_string[i+j]) * (2 ** (2-j) if input_string[i+j] == '1' else 0)\n        octal_number += str(octal_digit)\n    \n    return octal_number\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4961,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    R, S = map(int, input_string.split())\n    matrix = [list(input()) for _ in range(R)]\n    count = 0\n    for i in range(R):\n        for j in range(S):\n            if matrix[i][j] == 'o':\n                if i > 0 and matrix[i-1][j] == 'o':\n                    count += 1\n                if i < R-1 and matrix[i+1][j] == 'o':\n                    count += 1\n                if j > 0 and matrix[i][j-1] == 'o':\n                    count += 1\n                if j < S-1 and matrix[i][j+1] == 'o':\n                    count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4962,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, L = map(int, input_string.split())\n    items = []\n    for i in range(N):\n        A, B = map(int, input().split())\n        items.append((A, B))\n    \n    for i in range(N):\n        A, B = items[i]\n        if A == B:\n            print(\"SMECE\")\n        else:\n            print(\"LADICA\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4963,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split()[0])\n    d = list(map(int, input_string.split()[1:])\n    result = [0] * n\n    result[0] = 1\n    for i in range(1, n):\n        result[i] = result[i-1] + d[i-1] + 1\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4964,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, H, L = map(int, input_string.split())\n    horror_list = set(map(int, input_string.split()[1:H+1])\n    similarities = [list(map(int, input_string.split()[H+1:]))]\n    movies = [0] * N\n    \n    for i in range(L):\n        a, b = similarities[i]\n        movies[a] = max(movies[a], movies[b]+1)\n        movies[b] = max(movies[b], movies[a]+1)\n        \n    for i in range(N):\n        if i in horror_list:\n            movies[i] = 0\n            \n    max_horror = max(movies)\n    max_movies = [i for i in range(N) if movies[i] == max_horror]\n    \n    return min(max_movies)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4965,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split()[0])\n    temps = list(map(int, input_string.split()[1:])\n    temps.sort(reverse=True)\n    for i in range(1, n):\n        if abs(temps[i] - temps[i-1]) < abs(temps[i+1] - temps[i]):\n            return \"impossible\"\n    return \" \".join(map(str, temps)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4966,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, p, k = map(int, input_string.split())\n    t = list(map(int, input_string.split()))\n    t.pop(0)\n    t.pop(0)\n    t.pop(0)\n    t.append(k)\n    t.sort()\n    t_new = [t[i] * (100 + p) / 100 for i in range(n+1)]\n    t_new.insert(0, 0)\n    t_new.pop()\n    t_new.append(k)\n    t_new.sort()\n    t_diff = [t_new[i+1] - t_new[i] for i in range(n+1)]\n    t_diff.pop(0)\n    t_diff.pop()\n    t_diff.append(k - t_new[-1])\n    T = sum(t_diff)\n    return T\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4967,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4968,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, S, R = map(int, input_string.split())\n    damaged_kayaks = set(map(int, input().split()))\n    reserve_kayaks = set(map(int, input().split())\n    \n    # Write your code here\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4969,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    R, C = map(int, input_string.split())\n    area_crust = 3.14 * R * R * C\n    area_pizza = 3.14 * R * R * R\n    area_cheese = area_pizza - area_crust\n    percentage = area_cheese / area_pizza * 100\n    return round(percentage, 6)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4970,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Hint: You can use a dictionary to store the popularity of each combination of courses\n    # and then find the maximum popularity among them.\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4971,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    m = int(input_string)\n    i = 1\n    while True:\n        for a in range(1, i):\n            for b in range(1, i):\n                if a**3 + b**3 == i:\n                    break\n            else:\n                continue\n            break\n        if a**3 + b**3 == i:\n            i += 1\n        else:\n            return i - 1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4972,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    X = int(input_string)\n    k = 0\n    for i in range(1, X):\n        if X % i == 0:\n            k += 1\n            if i * (X // i) == X:\n                return k\n    return k\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4973,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N = int(input_string.split('\\n')[0])\n    board = input_string.split('\\n')[1:]\n    board = [list(row) for row in board]\n    knight_pos = None\n    for i in range(N):\n        for j in range(N):\n            if board[i][j] == 'K':\n                knight_pos = (i+1, j+1)\n                break\n    \n    if not knight_pos:\n        return -1\n    \n    visited = set()\n    queue = [(knight_pos, 0)]\n    while queue:\n        (r, c), steps = queue.pop(0)\n        if (r, c) == (1, 1):\n            return steps\n        if (r, c) in visited:\n            continue\n        visited.add((r, c))\n        for dr, dc in [(-2, 1), (-2, -1), (2, 1), (2, -1), (-1, 2), (-1, -2), (1, 2), (1, -2)]:\n            r_new = r + dr\n            c_new = c + dc\n            if 1 <= r_new <= N and 1 <= c_new <= N and board[r_new-1][c_new-1] != '#' and (r_new, c_new) not in visited:\n                queue.append(((r_new, c_new, steps+1))\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4974,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # read input\n    r, n = map(int, input_string.split())\n    booked_rooms = set(map(int, input_string.splitlines()[1:]))\n    \n    # find available room\n    for room in range(1, r+1):\n        if room not in booked_rooms:\n            return str(room)\n    \n    # if no available room, return \"too late\"\n    return \"too late\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4975,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    key_phrase, plaintext = input_string.split('\\n')\n    key_phrase = key_phrase.replace(' ', '').replace('Q', '').upper()\n    plaintext = plaintext.replace(' ', '').upper()\n    key_phrase = key_phrase.replace('', 'X')\n    key_phrase = key_phrase.replace('', 'X')\n    key_phrase = key_phrase.replace('', 'X')\n    key_phrase = key_phrase.replace('', 'X')\n    key_phrase = key_phrase.replace('', 'X')\n    key_phrase = key_phrase.replace('', 'X')\n    key_phrase = key_phrase.replace('', 'X')\n    key_phrase = key_phrase.replace('', 'X')\n    key_phrase = key_phrase.replace('', 'X')\n    key_phrase = key_phrase.replace('', 'X')\n    key_phrase = key_phrase.replace('', 'X')\n    key_phrase = key_phrase.replace('', 'X')\n    key_phrase = key_phrase.replace('', 'X')\n    key_phrase = key_phrase.replace('', 'X')\n    key_phrase = key_phrase.replace('', 'X')\n    key_phrase = key_phrase.replace('', 'X')\n    key_phrase = key_phrase.replace('', 'X')\n    key_phrase = key_phrase.replace('', 'X')\n    key_phrase = key_phrase.replace('', 'X')\n    key_phrase = key_phrase.replace('', 'X')\n    key_phrase = key_phrase.replace('', 'X')\n    key_phrase = key_phrase.replace('', 'X')\n    key_phrase = key_phrase.replace('', 'X')\n    key_phrase = key_phrase.replace('', 'X')\n    key_phrase = key_phrase.replace('', 'X')\n    key_phrase",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4976,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of tuples\n    input_list = input_string.split('\\n')\n    gopher_coords = tuple(map(float, input_list[0].split()))\n    dog_coords = tuple(map(float, input_list[1].split()))\n    holes = [tuple(map(float, line.split()) for line in input_list[2:]]\n    \n    # Calculate the distance between the gopher and the dog\n    distance = ((gopher_coords[0] - dog_coords[0])**2 + (gopher_coords[1] - dog_coords[1])**2)**0.5\n    \n    # Calculate the distance between the gopher and each hole\n    hole_distances = [((gopher_coords[0] - hole[0])**2 + (gopher_coords[1] - hole[1])**2)**0.5 for hole in holes]\n    \n    # Find the hole with the smallest distance\n    closest_hole = holes[hole_distances.index(min(hole_distances))]\n    \n    # Calculate the time it takes for the dog to reach the closest hole\n    dog_time = distance / 2\n    \n    # Calculate the time it takes for the gopher to reach the closest hole\n    gopher_time = min(hole_distances) / 1\n    \n    # Check if the gopher can escape\n    if dog_time > gopher_time:\n        return \"The gopher can escape through the hole at ({:.3f}, {:.3f}).\".format(closest_hole[0], closest_hole[1])\n    else:\n        return \"The gopher cannot escape.\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4977,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # read input\n    start, dest, charge = map(int, input_string.split())\n    start_x, start_y = start\n    dest_x, dest_y = dest\n    \n    # check if start and dest are the same\n    if start_x == dest_x and start_y == dest_y:\n        return \"Y\"\n    \n    # check if start and dest are on the same street or avenue\n    if start_x == dest_x or start_y == dest_y:\n        return \"N\"\n    \n    # check if start and dest are on the same street or avenue and have the same sign\n    if (start_x > 0 and dest_x > 0) or (start_x < 0 and dest_x < 0) or (start_y > 0 and dest_y > 0) or (start_y < 0 and dest_y < 0):\n        return \"N\"\n    \n    # check if the distance between start and dest is greater than the charge\n    if abs(start_x - dest_x) + abs(start_y - dest_y) > charge:\n        return \"N\"\n    \n    # check if the distance between start and dest is even\n    if (start_x - dest_x) % 2 != 0 or (start_y - dest_y) % 2 != 0:\n        return \"N\"\n    \n    # check if the distance between start and dest is odd\n    if (start_x - dest_x) % 2 == 0 and (start_y - dest_y) % 2 == 0:\n        return \"Y\"\n    \n    # check if the distance between start and dest is odd\n    if (start_x - dest_x) % 2 != 0 and (start_y - dest_y) % 2 != 0:\n        return \"Y\"\n    \n    # check if the distance between start and dest is even and the sum of the absolute values is even\n    if (start_x - dest_x) % 2 == 0 and (start_y - dest_y) % 2 == 0 and (abs(start_x) + abs(start_y)) %",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4978,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, M = map(int, input_string.split())\n    grid = [list(input()) for _ in range(N)]\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == 'V':\n                if i > 0 and grid[i-1][j] == '.':\n                    grid[i-1][j] = 'V'\n                if j > 0 and grid[i][j-1] == '.':\n                    grid[i][j-1] = 'V'\n                if j < M-1 and grid[i][j+1] == '.':\n                    grid[i][j+1] = 'V'\n    for row in grid:\n        print(''.join(row))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4979,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return int(input_string[::-1], 2)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4980,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    count = 0\n    for i in input_string:\n        if \"pink\" in i.lower() or \"rose\" in i.lower():\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4981,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    A, B, C = map(int, input_string.split())\n    order = input()\n    if order == \"ABC\":\n        print(A, B, C)\n    elif order == \"ACB\":\n        print(A, C, B)\n    elif order == \"BAC\":\n        print(B, A, C)\n    elif order == \"BCA\":\n        print(B, C, A)\n    elif order == \"CAB\":\n        print(C, A, B)\n    elif order == \"CBA\":\n        print(C, B, A)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4982,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0.00\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4983,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert the input string to a list of digits\n    digits = [int(d) for d in input_string]\n    \n    # Remove any zeros from the list\n    digits = [d for d in digits if d != 0]\n    \n    # Multiply the digits together\n    product = 1\n    for digit in digits:\n        product *= digit\n    \n    # If the product is greater than 9, repeat the process until it is a single digit\n    while product > 9:\n        product = 1\n        for digit in str(product):\n            product *= int(digit)\n    \n    # Return the product\n    return product\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4984,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4985,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N = int(input_string[0])\n    B = input_string[1]\n    hands = []\n    for i in range(N):\n        hands.append(input_string[2*i+2:2*i+4])\n    \n    total_points = 0\n    for hand in hands:\n        for card in hand:\n            if card[1] == B:\n                if card[0] == 'A':\n                    total_points += 11\n                elif card[0] == 'K':\n                    total_points += 4\n                elif card[0] == 'Q':\n                    total_points += 3\n                elif card[0] == 'J':\n                    total_points += 20\n                elif card[0] == 'T':\n                    total_points += 10\n                elif card[0] == '9':\n                    total_points += 14\n                elif card[0] == '8':\n                    total_points += 0\n                elif card[0] == '7':\n                    total_points += 0\n                    \n    return total_points\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4986,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    s = input_string[0]\n    t = input_string[1]\n    sticky_keys = []\n    for i in range(len(s)):\n        if s[i] != t[i*2]:\n            sticky_keys.append(s[i])\n    return ''.join(sticky_keys)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4987,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    S, C, K = map(int, input_string.split()[:3])\n    D = list(map(int, input_string.split()[3:])\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4988,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code goes here\n    return input_string\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4989,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, *pieces = map(int, input_string.split())\n    pieces.sort(reverse=True)\n    alice_sum = sum(pieces[::2])\n    bob_sum = sum(pieces[1::2])\n    \n    return alice_sum, bob_sum\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4990,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    b, k, g = map(int, input_string.split())\n    if k < g:\n        return -1\n    if b == 1:\n        return 1\n    if k == g:\n        return b\n    if k % g == 0:\n        return b\n    else:\n        return b + (k // g)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4991,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string)\n    def hailstone(n):\n        if n == 1:\n            return 1\n        elif n % 2 == 0:\n            return n + hailstone(n//2)\n        else:\n            return n + hailstone(3*n + 1)\n    \n    return hailstone(n)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4992,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split('\\n')[0])\n    s = list(map(int, input_string.split('\\n')[1].split()))\n    if sum(s) < n:\n        return \"impossible\"\n    else:\n        return \" \".join(str(i) for i in range(1, n+1))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4993,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    parts = input_string.split('\\n')\n    parts = parts[1:]\n    parts_dict = {}\n    for i in range(len(parts)):\n        if parts[i] in parts_dict:\n            parts_dict[parts[i]].append(i)\n        else:\n            parts_dict[parts[i]] = [i]\n    for key in parts_dict:\n        if len(parts_dict[key]) == 1:\n            return parts_dict[key][0] + 1\n    return \"paradox avoided\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4994,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert the input string into a list of tuples\n    points = [tuple(map(int, line.split())) for line in input_string.split('\\n')]\n    \n    # Find the two vectors that define the sides of the rectangle\n    v1 = (points[1][0] - points[0][0], points[1][1] - points[0][1])\n    v2 = (points[2][0] - points[1][0], points[2][1] - points[1][1])\n    \n    # Find the intersection point of the two vectors\n    x = (v1[0] * v2[1] * points[0][0] - v1[1] * v2[0] * points[1][0]) / (v1[1] * v2[0] - v1[0] * v2[1])\n    y = (v1[0] * v2[1] * points[0][1] - v1[1] * v2[0] * points[1][1]) / (v1[1] * v2[0] - v1[0] * v2[1])\n    \n    # Return the intersection point as a tuple\n    return (int(x), int(y))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4995,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Hint: You can use the split() function to split the input string into lines and then split each line into two parts (minutes and seconds)\n    # You can use the map() function to convert the strings to integers\n    # You can use the sum() function to calculate the total wait time in seconds\n    # You can use the len() function to count the number of observations\n    # You can use the mean() function from the statistics module to calculate the average wait time\n    # You can use the math.isclose() function to check if the average wait time is within a certain tolerance\n    # You can use the format() function to format the output as a float with 7 decimal places\n    \n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4996,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    encrypted_message, key = input_string.split('\\n')\n    decrypted_message = ''\n    for i in range(len(encrypted_message)):\n        if i % 2 == 0:\n            decrypted_message += chr((ord(encrypted_message[i]) - ord(key[i]) + 65) % 26 + 65)\n        else:\n            decrypted_message += chr((ord(encrypted_message[i]) - ord(key[i]) - 65) % 26 + 65)\n    return decrypted_message\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4997,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4998,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    A, B, C, D = map(int, input_string.split())\n    max_area = 0\n    for i in range(4):\n        for j in range(4):\n            for k in range(4):\n                for l in range(4):\n                    if i != j and i != k and i != l and j != k and j != l and k != l:\n                        area = max(A*B, B*C, C*D, D*A)\n                        if area > max_area:\n                            max_area = area\n    return max_area\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4999,
        "checkpoint": "13B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    a, b = map(int, input_string.split())\n    count = 0\n    while a != b:\n        if a > b:\n            if a % 2 == 0:\n                a //= 2\n                count += 1\n            else:\n                a += 1\n                count += 1\n        else:\n            if b % 2 == 0:\n                b //= 2\n                count += 1\n            else:\n                b += 1\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    }
]