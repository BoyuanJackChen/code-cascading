[
    {
        "number": 4000,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(node, visited, parent, stack, res, a, b, c):\n        visited[node] = True\n        stack.append(node)\n        if len(stack) == 3:\n            for i in range(3):\n                for j in range(i+1, 3):\n                    if stack[i] in edges[stack[j]]:\n                        res[stack[j]] += 1\n                    if stack[j] in edges[stack[i]]:\n                        res[stack[i]] += 1\n        for neighbor in edges[node]:\n            if not visited[neighbor]:\n                dfs(neighbor, visited, node, stack, res, a, b, c)\n        stack.pop()\n\n    n, *edges = stdin.splitlines()\n    n = int(n)\n    a, b, c = [0, 0, 0]\n    res = [0] * n\n    max_edges = 0\n\n    for i in range(1, n):\n        a, b = map(int, edges[i-1].split())\n        edges[a].append(b)\n        edges[b].append(a)\n\n    dfs(1, [False] * n, -1, [1], res, a, b, c)\n\n    for i in range(1, n):\n        if res[i] > max_edges:\n            max_edges = res[i]\n            a, b, c = i, b, c\n\n    return max_edges, a, b, c\n"
    },
    {
        "number": 4000,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    from collections import defaultdict\n    from heapq import heappush, heappop\n\n    def dijkstra(graph, start):\n        dist = defaultdict(lambda: float('inf'))\n        dist[start] = 0\n        heap = [(0, start, start)]\n\n        while heap:\n            (d, node, prev) = heappop(heap)\n\n            if d > dist[node]:\n                continue\n\n            for neighbor, weight in graph[node].items():\n                if weight + d < dist[neighbor]:\n                    dist[neighbor] = weight + d\n                    heappush(heap, (weight + d, neighbor, node))\n\n        return dist\n\n    n = int(stdin.splitlines()[0])\n    graph = defaultdict(dict)\n\n    for i in range(1, n):\n        a, b = map(int, stdin.splitlines()[i].split())\n        graph[a][b] = 1\n        graph[b][a] = 1\n\n    distances = dijkstra(graph, 1)\n    max_edges = 0\n    for i in range(2, n):\n        edges_count = distances[i] + distances[i]\n        max_edges = max(max_edges, edges_count)\n\n    a, b, c = 1, 2, 3\n    return str(max_edges) + \"\\n\" + str(a) + \" \" + str(b) + \" \" + str(c)\n"
    },
    {
        "number": 4000,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def bfs(tree, start, end):\n        queue = [(start, [start])]\n        visited = set()\n        while queue:\n            (vertex, path) = queue.pop(0)\n            if vertex == end:\n                return path\n            for neighbor in tree[vertex]:\n                if neighbor not in visited:\n                    queue.append((neighbor, path + [neighbor]))\n                    visited.add(neighbor)\n        return []\n\n    def find_max_edges(tree, a, b, c):\n        paths = [bfs(tree, a, b), bfs(tree, b, c), bfs(tree, a, c)]\n        max_edges = 0\n        for path in paths:\n            max_edges = max(max_edges, len(path) - 1)\n        return max_edges\n\n    n = int(stdin.readline())\n    tree = [[] for _ in range(n)]\n    for _ in range(n - 1):\n        a, b = map(int, stdin.readline().split())\n        tree[a - 1].append(b - 1)\n        tree[b - 1].append(a - 1)\n\n    max_edges = -1\n    result = []\n    for a in range(n):\n        for b in range(a + 1, n):\n            for c in range(b + 1, n):\n                edges = find_max_edges(tree, a, b, c)\n                if edges > max_edges:\n                    max_edges = edges\n                    result = [a + 1, b + 1, c + 1]\n\n    return f\"{max_edges}\\n{result[0]} {result[1]} {result[2]}\" "
    },
    {
        "number": 4000,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0].strip())\n    edges = []\n    for i in range(1, n):\n        a, b = map(int, stdin[i].strip().split())\n        edges.append((a, b))\n\n    def dfs(graph, start, visited, dist, parent):\n        visited[start] = True\n        for node in graph[start]:\n            if not visited[node]:\n                dist[node] = dist[start] + 1\n                parent[node] = start\n                dfs(graph, node, visited, dist, parent)\n\n    graph = [[] for _ in range(n + 1)]\n    for a, b in edges:\n        graph[a].append(b)\n        graph[b].append(a)\n\n    visited = [False] * (n + 1)\n    dist = [0] * (n + 1)\n    parent = [-1] * (n + 1)\n\n    dfs(graph, 1, visited, dist, parent)\n\n    max_dist = max(dist)\n    max_dist_nodes = [i for i in range(1, n + 1) if dist[i] == max_dist]\n\n    def is_valid(a, b, c):\n        return a != b != c and a != c and b != c\n\n    def count_edges(a, b, c):\n        paths = []\n        for node in graph[a]:\n            if node == b:\n                paths.append((a, b))\n            elif node == c:\n                paths.append((a, b, c))\n            else:\n                paths.append((a, node) + tuple(p for p in paths if p[0] == node))\n        return len(set(frozenset(p) for p in paths))\n\n    a, b, c = max_dist_nodes[0], max_dist_nodes[1], max_dist_nodes[2]\n    while not is_valid(a, b, c):\n        a = max_dist_nodes[0]\n        b = max_dist_nodes[1]\n        c = max_dist_nodes[2]\n\n    return count_edges(a, b, c) - 1, f\"{a} {b} {c}\""
    },
    {
        "number": 4000,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def bfs(start, end):\n        visited = set()\n        queue = [(start, 0, 0)]  # (vertex, distance from start, number of edges)\n        while queue:\n            vertex, distance, edges = queue.pop(0)\n            if vertex == end:\n                return distance, edges\n            for neighbor in graph[vertex]:\n                if neighbor not in visited:\n                    queue.append((neighbor, distance + 1, edges + 1))\n                    visited.add(neighbor)\n        return -1  # There is no path between start and end\n\n    n = int(stdin[0])\n    graph = [[] for _ in range(n + 1)]\n    for i in range(1, n):\n        a, b = map(int, stdin[i].split())\n        graph[a].append(b)\n        graph[b].append(a)\n\n    # Find three vertices with maximum number of edges\n    max_edges = 0\n    for a in range(1, n):\n        for b in range(a + 1, n):\n            for c in range(b + 1, n):\n                distance_ab, edges_ab = bfs(a, b)\n                distance_bc, edges_bc = bfs(b, c)\n                distance_ac, edges_ac = bfs(a, c)\n                if edges_ab + edges_bc + edges_ac > max_edges:\n                    max_edges = edges_ab + edges_bc + edges_ac\n                    a_star, b_star, c_star = a, b, c\n\n    return max_edges, f\"{a_star} {c_star} {b_star}\""
    },
    {
        "number": 4000,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def find_max_edges(n: int) -> int:\n        edges = [set() for _ in range(n + 1)]\n        for i in range(n - 1):\n            a, b = map(int, stdin.readline().split())\n            edges[a].add(b)\n            edges[b].add(a)\n\n        def dfs(start: int, visited: set, path: set):\n            visited.add(start)\n            for node in edges[start]:\n                if node not in visited:\n                    dfs(node, visited, path)\n                    path.add(frozenset(visited))\n            path.add(frozenset(visited))\n\n        visited = set()\n        path = set()\n        dfs(1, visited, path)\n        max_edges = 0\n        for p in path:\n            edges_count = len(p) - 1\n            max_edges = max(max_edges, edges_count)\n        return max_edges\n\n    n = int(stdin.readline())\n    max_edges = find_max_edges(n)\n\n    a, b, c = 1, 2, 3\n    while a == b or a == c or b == c:\n        a, b, c = random.sample(range(1, n + 1), 3)\n\n    print(max_edges)\n    print(a, b, c)\n"
    },
    {
        "number": 4000,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    edges = [tuple(map(int, line.split())) for line in lines[1:]]\n\n    # Build the graph\n    graph = [[] for _ in range(n)]\n    for a, b in edges:\n        graph[a - 1].append(b - 1)\n        graph[b - 1].append(a - 1)\n\n    # Initialize the maximum number of edges and the answer\n    max_edges = 0\n    answer = None\n\n    # Iterate through all pairs of vertices\n    for a in range(n):\n        for b in range(a + 1, n):\n            # Initialize the number of edges in the current path\n            num_edges = 0\n\n            # Check if there is a path from a to b\n            visited = [False] * n\n            dfs(a, b, visited, num_edges, graph)\n\n            # Update the maximum number of edges and the answer if necessary\n            if num_edges > max_edges:\n                max_edges = num_edges\n                answer = (a + 1, b + 1)\n\n    # Convert the answer to the required format\n    res = max_edges\n    a, b = answer\n    return f\"{res}\\n{a} {b} {(a + b - a - b + 1)}\"\n\n\ndef"
    },
    {
        "number": 4000,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(v: int, visited: set[int]) -> None:\n        nonlocal edges, result, a, b, c\n        visited.add(v)\n        if v == b:\n            for e in edges[a]:\n                if e not in visited:\n                    dfs(e, visited.copy())\n        elif v == c:\n            for e in edges[b]:\n                if e not in visited:\n                    dfs(e, visited.copy())\n        else:\n            for e in edges[v]:\n                if e not in visited:\n                    dfs(e, visited.copy())\n        for e in edges[v]:\n            if e not in visited:\n                result = max(result, len(visited) + len(edges[v]) - len(visited.intersection(edges[e])))\n\n    n = int(stdin.splitlines()[0])\n    edges = [set() for _ in range(n)]\n    for line in stdin.splitlines()[1:]:\n        a, b = map(int, line.split())\n        edges[a].add(b)\n        edges[b].add(a)\n\n    result = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            a = i\n            b = j\n            c = -1\n            for k in range(n):\n                if k != a and k != b and k != c:\n                    c = k\n                    break\n            visited = set()\n            dfs(a, visited)\n            dfs(b, visited)\n            dfs(c, visited)\n            result = max(result, len(visited) + len(edges[a]) + len(edges[b]) + len(edges[c]) - 3)\n\n    return str(result) + '\\n' + ' '.join(str(x) for x in [a, b, c]) "
    },
    {
        "number": 4000,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.splitlines()\n    n = int(input_data[0])\n    edges = [tuple(map(int, line.split())) for line in input_data[1:]]\n\n    # Find the maximum number of edges that belong to at least one of the simple paths between a, b, and c\n    max_edges = 0\n    for a in range(1, n + 1):\n        for b in range(a + 1, n + 1):\n            for c in range(b + 1, n + 1):\n                # Check if a, b, and c are distinct\n                if a == b or a == c or b == c:\n                    continue\n                edges_set = set(edges)\n                # Check if the graph is a tree\n                if len(edges_set) != n - 1:\n                    continue\n                # Check if the graph contains the edges (a, b), (b, c), (a, c)\n                if (a, b) not in edges_set or (b, c) not in edges_set or (a, c) not in edges_set:\n                    continue\n                # Find the maximum number of edges that belong to at least one of the simple paths\n                max_edges = max(max_edges, len(set([(a, b), (b, c), (a, c)]).intersection(edges_set)))\n\n    # Find three distinct vertices a, b, and c that maximize the number of edges\n    max_a, max_b, max_c = 0, 0, 0\n    for a in range(1, n + 1):\n        for b in range(a + 1, n + 1):\n            for c in range(b + 1, n + 1):\n                # Check if a, b, and c are distinct\n                if a == b or a == c or b == c:\n                    continue\n                edges_set = set(edges)\n                # Check if the graph is a tree\n                if len(edges_set) != n - 1:\n                    continue\n                # Check if the graph contains the edges (a, b), (b, c), (a, c)\n                if (a, b) not in edges_set or (b, c) not in edges_set or (a, c) not in edges_set:\n                    continue\n                # Count the number of edges that belong to at least one of the simple paths\n                count_a = len(set([(a, b), (b, c), (a, c)]).intersection(edges_set))\n                count_b = len(set([(b, a), (b, c), (a, c)]).intersection(edges_set))\n                count_c = len(set([(c, a), (c, b), (a, b)]).intersection(edges_set))\n                # Update the maximum count and the vertices\n                if count_a > max_a:\n                    max_a, max_b, max_c = count_a, a, b\n                if count_b > max_b:\n                    max_a, max_b, max_c = count_b, b, a\n                if count_c > max_c:\n                    max_a, max_b, max_c = count_c, c, b\n\n    return str(max_edges) + \"\\n\" + str(max_a) + \" \" + str(max_b) + \" \" + str(max_c) "
    },
    {
        "number": 4000,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    edges = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    adjacency_list = [[] for _ in range(n)]\n\n    for a, b in edges:\n        adjacency_list[a - 1].append(b - 1)\n        adjacency_list[b - 1].append(a - 1)\n\n    max_edges = 0\n    a, b, c = None, None, None\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                count = 0\n                visited = [False] * n\n\n                def dfs(node, parent):\n                    nonlocal count\n                    visited[node] = True\n\n                    for neighbor in adjacency_list[node]:\n                        if neighbor != parent:\n                            if not visited[neighbor]:\n                                count += 1\n                                dfs(neighbor, node)\n\n                dfs(i, -1)\n                dfs(j, -1)\n                dfs(k, -1)\n\n                if count > max_edges:\n                    max_edges = count\n                    a, b, c = i + 1, j + 1, k + 1\n\n    return str(max_edges) + '\\n' + str(a) + ' ' + str(b) + ' ' + str(c) + '\\n'\n"
    },
    {
        "number": 4001,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    divisors = list(map(int, input().split()))\n\n    # Remove duplicates and sort\n    divisors = sorted(set(divisors))\n\n    # Check if the list contains divisors of x and y\n    for i in range(n):\n        if divisors[i] == 1:\n            x = y = 1\n            break\n        if i == 0 or divisors[i] == divisors[i - 1]:\n            continue\n        x = divisors[i]\n        if i < n - 1 and divisors[i] == divisors[i + 1]:\n            y = divisors[i]\n        else:\n            for j in range(i + 2, n):\n                if divisors[j] == divisors[j - 1]:\n                    continue\n                y = divisors[j]\n                break\n        break\n\n    return f\"{x} {y}\"\n\n\ndef"
    },
    {
        "number": 4001,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.splitlines()\n    n = int(input_data[0])\n    divisors = list(map(int, input_data[1].split()))\n    divisors = [divisor for divisor in divisors if divisor != 1]\n    divisors_x = divisors[:n//2]\n    divisors_y = divisors[n//2:]\n    x = sum(divisors_x)\n    y = sum(divisors_y)\n    return f\"{x} {y}\"\n\n\ninput_data = '''10\n10 2 8 1 2 4 1 20 4 5'''\n\noutput_data = solution(input_data)\nprint(output_data)  # Output: \"20 8\" "
    },
    {
        "number": 4001,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    divisors = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n    divisors_dict = {}\n    for d in divisors:\n        if d not in divisors_dict:\n            divisors_dict[d] = 1\n        else:\n            divisors_dict[d] += 1\n    \n    x_divisors = set()\n    y_divisors = set()\n    \n    for d in divisors:\n        if divisors_dict[d] % 2 == 1:\n            x_divisors.add(d)\n        else:\n            y_divisors.add(d)\n    \n    x_divisors = sorted(list(x_divisors))\n    y_divisors = sorted(list(y_divisors))\n    \n    while x_divisors:\n        d = x_divisors.pop()\n        if d in y_divisors:\n            y_divisors.remove(d)\n    \n    x = 1\n    y = 1\n    \n    for d in x_divisors:\n        x *= d\n    \n    for d in y_divisors:\n        y *= d\n    \n    return f\"{x} {y}\""
    },
    {
        "number": 4001,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n = int(input_list[0])\n    divisor_list = list(map(int, input_list[1].split()))\n    x = divisor_list[0]\n    y = divisor_list[1]\n    divisors_x = set(divisor_list[:n:2])\n    divisors_y = set(divisor_list[1:n:2])\n    for d in divisors_x:\n        if d in divisors_y:\n            x = max(x, d * d)\n            y = max(y, d * d)\n    return str(x) + ' ' + str(y)"
    },
    {
        "number": 4001,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    from collections import Counter\n    n, *lst = map(int, stdin.split())\n    count = Counter(lst)\n    x_divisors, y_divisors = count.most_common(n)\n    x = x_divisors[-1][0]\n    y = y_divisors[-1][0]\n    return f\"{x} {y}\""
    },
    {
        "number": 4001,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def merge_divisors(divisors1: list, divisors2: list) -> list:\n        merged_divisors = divisors1 + divisors2\n        return sorted(list(set(merged_divisors)))\n\n    def is_valid_divisors_list(divisors: list, x: int, y: int) -> bool:\n        for divisor in divisors:\n            if divisor % x != 0 and divisor % y != 0:\n                return False\n        return True\n\n    n = int(stdin.splitlines()[0])\n    divisors_list = [int(d) for d in stdin.splitlines()[1].split()]\n    divisors1 = divisors_list[:n // 2]\n    divisors2 = divisors_list[n // 2:]\n\n    merged_divisors = merge_divisors(divisors1, divisors2)\n    for i in range(1, merged_divisors[0] + 1):\n        if is_valid_divisors_list(merged_divisors, i, merged_divisors[0]):\n            x = i\n            y = merged_divisors[0]\n            break\n\n    return f\"{x} {y}\"\n"
    },
    {
        "number": 4001,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    divisors = list(map(int, stdin.split('\\n')[1].split()))\n    x = y = 1\n    for i in range(n):\n        if divisors[i] % 2 == 0:\n            x *= divisors[i]\n        else:\n            y *= divisors[i]\n    if x < y:\n        x, y = y, x\n    return f\"{x} {y}\" "
    },
    {
        "number": 4001,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def get_divisors(n: int) -> List[int]:\n        divisors = [1]\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                divisors.append(i)\n                if i != n // i:\n                    divisors.append(n // i)\n        return divisors\n\n    n, *divisor_list = map(int, stdin.split())\n    divisor_set = set(divisor_list)\n\n    for x in range(2, n + 1):\n        x_divisors = get_divisors(x)\n        if set(x_divisors) == divisor_set:\n            for y in range(2, n + 1):\n                y_divisors = get_divisors(y)\n                if set(y_divisors) == divisor_set:\n                    return f\"{x} {y}\"\n\n    return \"No solution found\"\n\n\ninput_case = \"\"\"10\n10 2 8 1 2 4 1 20 4 5\"\"\"\n\noutput_case = solution(input_case)\nprint(output_case) "
    },
    {
        "number": 4001,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    divisors = sorted(map(int, stdin.splitlines()[1].split()))\n\n    def merge_divisors(divisors):\n        result = []\n        i = 0\n        while i < n:\n            if divisors[i] == 1:\n                i += 1\n                continue\n            for j in range(i + 1, n):\n                if divisors[i] == divisors[j]:\n                    result.append(divisors[i])\n                    i = j\n                    break\n        return result\n\n    merged_divisors = merge_divisors(divisors)\n    x = sum(merged_divisors)\n    y = (x * x + x) // 2\n\n    return f\"{x} {y}\"\n"
    },
    {
        "number": 4001,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    divisors = list(map(int, stdin[1].split()))\n    x_divisors = []\n    y_divisors = []\n    for divisor in divisors:\n        if divisor in x_divisors and divisor in y_divisors:\n            x_divisors.remove(divisor)\n            y_divisors.remove(divisor)\n        elif divisor in x_divisors:\n            x_divisors.remove(divisor)\n            y_divisors.append(divisor)\n        elif divisor in y_divisors:\n            x_divisors.append(divisor)\n            y_divisors.remove(divisor)\n        else:\n            x_divisors.append(divisor)\n    x = x_divisors[0]\n    y = sum(y_divisors)\n    return f\"{x} {y}\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def max_sum(matrix: list, k: int) -> int:\n        n, m = len(matrix), len(matrix[0])\n        max_sum = 0\n        for i in range(n):\n            row = matrix[i]\n            row_sum = sum(row[:m//2+1])\n            if row_sum % k == 0:\n                max_sum += row_sum\n            else:\n                start = 0\n                while row_sum % k != 0:\n                    row_sum -= row[start]\n                    start += 1\n                max_sum += row_sum\n        return max_sum\n\n    # read input\n    lines = stdin.splitlines()\n    n, m, k = map(int, lines[0].split())\n    matrix = [list(map(int, lines[i+1].split())) for i in range(n)]\n\n    # compute the maximum sum\n    max_sum = max_sum(matrix, k)\n\n    # print the result\n    return str(max_sum)\n"
    },
    {
        "number": 4002,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = [[int(x) for x in input().split()] for _ in range(n)]\n\n    max_sum = 0\n    for row in a:\n        num_elems = min(len(row), k // 2)\n        row.sort(reverse=True)\n        max_sum += sum(row[:num_elems])\n\n    return str(max_sum)\n"
    },
    {
        "number": 4002,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(row: list, k: int) -> bool:\n        total = sum(row)\n        count = len(row)\n        return total % k == 0 and count <= round(count / 2)\n\n    n, m, k = map(int, stdin.split()[:3])\n    matrix = []\n\n    for _ in range(n):\n        row = list(map(int, stdin.split()[3:]))\n        matrix.append(row)\n\n    max_sum = 0\n    for row in matrix:\n        valid_rows = [row[i:i + round(len(row) / 2)] for i in range(0, len(row), round(len(row) / 2))]\n        valid_rows = [row for row in valid_rows if is_valid(row, k)]\n        max_sum = max(max_sum, sum(sum(valid_row) for valid_row in valid_rows))\n\n    return str(max_sum)\n\n\ninput_data = '''3 4 3\n1 2 3 4\n5 2 2 2\n7 1 1 4\n'''\n\noutput_data = solution(input_data)\nprint(output_data) "
    },
    {
        "number": 4002,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(matrix, row, col, k):\n        if col == 0:\n            return True\n        curr_sum = matrix[row][col] + matrix[row][col-1]\n        return curr_sum % k == 0\n\n    def helper(matrix, row, col, k, memo):\n        if row == len(matrix) and col == 0:\n            return 0\n        if row >= len(matrix) or col >= len(matrix[row]):\n            return 0\n        if is_valid(matrix, row, col, k):\n            memo[row][col] = matrix[row][col]\n            return matrix[row][col] + helper(matrix, row, col+1, k, memo)\n        else:\n            return helper(matrix, row, col+1, k, memo)\n\n    n, m, k = map(int, stdin.split())\n    matrix = [list(map(int, stdin.split())) for _ in range(n)]\n    memo = [[None for _ in range(m)] for _ in range(n)]\n    result = helper(matrix, 0, 0, k, memo)\n    return str(result)\n"
    },
    {
        "number": 4002,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[:3])\n    a = [[int(x) for x in input().split()] for _ in range(n)]\n\n    max_sum = 0\n    for i in range(n):\n        a[i].sort(reverse=True)\n        half_len = min(m // 2, len(a[i]))\n        total_sum = sum(a[i][:half_len])\n        max_sum = max(max_sum, total_sum)\n\n    return str(max_sum)"
    },
    {
        "number": 4002,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def max_sum_divisible_by_k(arr, k):\n        n = len(arr)\n        m = len(arr[0])\n        max_sum = 0\n        for i in range(n):\n            # sort the elements in the row in descending order\n            sorted_row = sorted(arr[i], reverse=True)\n            # choose no more than half of the elements in the row\n            chosen_elements = sorted_row[:m//2]\n            # calculate the sum of the chosen elements\n            sum_chosen_elements = sum(chosen_elements)\n            # calculate the sum of the remaining elements\n            sum_remaining_elements = sum(sorted_row[m//2:])\n            # calculate the sum of the chosen elements modulo k\n            sum_chosen_elements_modulo_k = sum_chosen_elements % k\n            # calculate the sum of the remaining elements modulo k\n            sum_remaining_elements_modulo_k = sum_remaining_elements % k\n            # calculate the sum of the total elements modulo k\n            sum_total_modulo_k = (sum_chosen_elements_modulo_k + sum_remaining_elements_modulo_k) % k\n            # add the maximum possible sum of the chosen elements\n            max_sum += sum_total_modulo_k\n        return max_sum\n\n    # read the input\n    n, m, k = map(int, stdin.split()[:3])\n    matrix = [list(map(int, stdin.split()[3+i*m:(3+i)*m+m])) for i in range(n)]\n\n    # calculate the maximum sum\n    max_sum = max_sum_divisible_by_k(matrix, k)\n\n    # print the maximum sum\n    return str(max_sum)"
    },
    {
        "number": 4002,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def find_max_sum(matrix, k):\n        n, m = len(matrix), len(matrix[0])\n        dp = [[0] * m for _ in range(n)]\n\n        for i in range(n):\n            for j in range(m):\n                if j == 0:\n                    dp[i][j] = matrix[i][j]\n                else:\n                    dp[i][j] = max(dp[i][j-1], matrix[i][j] + dp[i][j-1])\n\n        max_sum = float('-inf')\n        for i in range(n):\n            for j in range(min(m, int(m/2)+1))[::-1]:\n                if j > 0:\n                    curr_sum = matrix[i][j] + dp[i][j-1]\n                    if curr_sum % k == 0:\n                        max_sum = max(max_sum, curr_sum)\n                else:\n                    max_sum = max(max_sum, matrix[i][j])\n\n        return max_sum\n\n    lines = stdin.splitlines()\n    n, m, k = map(int, lines[0].split())\n    matrix = [[int(x) for x in lines[i+1].split()] for i in range(n)]\n\n    return str(find_max_sum(matrix, k))\n\n\ninput_data = \"\"\"3 4 3\n1 2 3 4\n5 2 2 2\n7 1 1 4\n\"\"\"\n\nprint(solution(input_data))\n\n\ninput_data = \"\"\"5 5 4\n1 2 4 2 1\n3 5 1 2 4\n1 5 7 1 2\n3 8 7 1 2\n8 4 7 1 6\n\"\"\"\n\nprint(solution(input_data))"
    },
    {
        "number": 4002,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def helper(matrix: list, k: int) -> int:\n        def find_subset(row: list, k: int) -> int:\n            subset_sum = 0\n            num_elements = 0\n            row.sort(reverse=True)\n            for element in row:\n                subset_sum += element\n                num_elements += 1\n                if subset_sum % k == 0:\n                    return subset_sum\n            return 0\n\n        max_sum = 0\n        for i in range(len(matrix)):\n            row = matrix[i]\n            max_sum += find_subset(row, k)\n        return max_sum\n\n    n, m, k = map(int, stdin.split())\n    matrix = [list(map(int, stdin.split())) for _ in range(n)]\n    return str(helper(matrix, k))\n\n\ninput_stdin = \"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\"\nprint(solution(input_stdin))  # Output: \"24\"\n\ninput_stdin = \"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\"\nprint(solution(input_stdin))  # Output: \"56\" "
    },
    {
        "number": 4002,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def find_optimal_sum(a: list, k: int) -> int:\n        max_sum = 0\n        for i in range(n):\n            count = min(m // 2, len([j for j in range(m) if a[i][j] % k == 0]))\n            if count > 0:\n                choices = sorted([j for j in range(m) if a[i][j] % k == 0], key=lambda x: a[i][x], reverse=True)\n                max_sum += sum([a[i][j] for j in choices[:count]])\n        return max_sum\n\n    n, m, k = map(int, stdin.split()[:3])\n    a = [[int(x) for x in input().split()] for _ in range(n)]\n\n    return str(find_optimal_sum(a, k))\n"
    },
    {
        "number": 4002,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[:3])\n    a = [[0] * m for _ in range(n)]\n    for i in range(n):\n        a[i] = list(map(int, stdin.split()[3 + i * m : 3 + (i + 1) * m]))\n\n    def helper(row, used, path_sum, k):\n        if row == n:\n            return path_sum\n        for j in range(m):\n            if not used[j] and (path_sum + a[row][j]) % k == 0:\n                used[j] = True\n                path_sum += a[row][j]\n                res = helper(row + 1, used, path_sum, k)\n                if res != -1:\n                    return res\n                used[j] = False\n                path_sum -= a[row][j]\n        return -1\n\n    return helper(0, [False] * m, 0, k)\n"
    },
    {
        "number": 4003,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    max_len = 1\n    max_seq = 'R'\n    current_len = 1\n    current_seq = 'R'\n    while current_len < n:\n        if a[0] < a[1]:\n            current_len += 1\n            current_seq += 'R'\n            max_len = max(max_len, current_len)\n            max_seq = max_seq if max_len == current_len else 'L' + max_seq\n            a.pop(0)\n        else:\n            current_len += 1\n            current_seq += 'L'\n            max_len = max(max_len, current_len)\n            max_seq = max_seq if max_len == current_len else 'R' + max_seq\n            a.pop(1)\n    return str(max_len) + '\\n' + max_seq\n"
    },
    {
        "number": 4003,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n    \n    max_length = 1\n    last_elem = a[0]\n    move = 'L'\n    seq = [a[0]]\n    \n    for i in range(1, n):\n        if a[i] > last_elem:\n            seq.append(a[i])\n            last_elem = a[i]\n            move += 'R'\n            max_length += 1\n        else:\n            move += 'L'\n    \n    return max_length, move\n"
    },
    {
        "number": 4003,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.splitlines()\n    n = int(input_data[0])\n    a = list(map(int, input_data[1].split()))\n    if n == 1:\n        return \"1\\nR\"\n    increasing_sequence = []\n    leftmost_index = 0\n    rightmost_index = n - 1\n    for i in range(n):\n        if i % 2 == 0:\n            increasing_sequence.append(leftmost_index)\n            leftmost_index += 1\n        else:\n            increasing_sequence.append(rightmost_index)\n            rightmost_index -= 1\n    if increasing_sequence[-1] == leftmost_index:\n        return str(n) + \"\\n\" + \"L\" * n\n    else:\n        return str(n - 1) + \"\\n\" + \"R\" * (n - 1) + \"L\"\n\n\ninput_data = \"\"\"5\n1 2 4 3 2\n7\n1 3 5 6 5 4 2\n3\n2 2 2\n4\n1 2 4 3\"\"\"\n\noutput_data = [\n    \"4\\nLRRR\",\n    \"6\\nLRLRRR\",\n    \"1\\nR\",\n    \"4\\nLLRR\",\n]\n\nfor i in range(len(input_data.splitlines())):\n    assert solution(input_data) == output_data[i]\n"
    },
    {
        "number": 4003,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    increasing_sequence = []\n    left_right_str = []\n\n    for _ in range(n):\n        left_element = a[0]\n        right_element = a[-1]\n\n        if left_element < right_element:\n            increasing_sequence.append(left_element)\n            left_right_str.append('L')\n            a.remove(left_element)\n        else:\n            increasing_sequence.append(right_element)\n            left_right_str.append('R')\n            a.remove(right_element)\n\n    k = len(increasing_sequence)\n    s = ''.join(left_right_str)\n\n    return f\"{k}\\n{s}\" "
    },
    {
        "number": 4003,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    max_len = 0\n    max_str = \"\"\n\n    for i in range(n):\n        left_len = 0\n        right_len = 0\n        left_str = \"\"\n        right_str = \"\"\n\n        for j in range(i, -1, -1):\n            left_len += 1\n            left_str = \"L\" + left_str\n            if j == 0 or a[j - 1] < a[j]:\n                break\n\n        for j in range(i, n):\n            right_len += 1\n            right_str = right_str + \"R\"\n            if j == n - 1 or a[j] < a[j + 1]:\n                break\n\n        if left_len + right_len > max_len:\n            max_len = left_len + right_len\n            max_str = left_str[:left_len] + right_str[:right_len]\n\n    return max_len, max_str\n"
    },
    {
        "number": 4003,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    i, j = 0, n - 1\n    k = 1\n    move = []\n\n    while i <= j:\n        if k > 1:\n            move[-1] = 'R'\n\n        if a[i] < a[j]:\n            move.append('L')\n            k += 1\n            i += 1\n        else:\n            move.append('R')\n            k += 1\n            j -= 1\n\n    return k, ''.join(move)\n"
    },
    {
        "number": 4003,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    n = int(input_list[0])\n    a = list(map(int, input_list[1].split()))\n    result = [1] * n\n    left_right = ['L'] * n\n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] > a[j]:\n                if result[i] < result[j] + 1:\n                    result[i] = result[j] + 1\n                    left_right[i] = 'R'\n\n    max_result = max(result)\n    max_index = result.index(max_result)\n\n    return str(max_result) + '\\n' + ''.join(left_right)\n\n\ninput_str = \"\"\"5\n1 2 4 3 2\n7\n1 3 5 6 5 4 2\n3\n2 2 2\n4\n1 2 4 3\"\"\"\n\noutput_str = \"\"\"4\nLRRR\n6\nLRLRRR\n1\nR\n4\nLLRR\"\"\"\n\n\nprint(solution(input_str))\n"
    },
    {
        "number": 4003,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    left = [a[0]]\n    right = [a[-1]]\n\n    for i in range(1, n):\n        if a[i] > left[-1]:\n            left.append(a[i])\n        else:\n            break\n\n    for i in range(n-2, -1, -1):\n        if a[i] > right[-1]:\n            right.append(a[i])\n        else:\n            break\n\n    max_len = max(len(left), len(right))\n\n    if max_len == len(left):\n        s = 'L' * max_len\n        a = left\n    else:\n        s = 'R' * max_len\n        a = right\n\n    for i in range(max_len):\n        print(a[i], end=' ')\n\n    print()\n    print(s)\n"
    },
    {
        "number": 4003,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    max_len = 1\n    max_seq = ['R']\n    for i in range(1, n):\n        new_seq = ['R'] * i + ['L'] + ['R'] * (n - i - 1)\n        if len(new_seq) > max_len:\n            max_len = len(new_seq)\n            max_seq = new_seq\n        else:\n            break\n\n    return f\"{max_len}\\n{''.join(max_seq)}\"\n\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.splitlines()\n    n = int(input_data[0])\n    a = list(map(int, input_data[1].split()))\n    \n    left_move = [False] * n\n    right_move = [False] * n\n    max_length = 0\n    max_s = ''\n    \n    for i in range(n):\n        for j in range(i, n):\n            if j == i:\n                left_move[j] = True\n                right_move[j] = False\n            elif j == i + 1:\n                left_move[j] = False\n                right_move[j] = True\n            else:\n                left_move[j] = left_move[i] and a[j] > a[i]\n                right_move[j] = right_move[i] and a[j] > a[i]\n            \n            if max_length < j - i + 1:\n                max_length = j - i + 1\n                max_s = 'L' * (j - i + 1)\n            elif max_length == j - i + 1:\n                for k in range(i, j + 1):\n                    if left_move[k] and a[k] > a[k - 1] and right_move[k]:\n                        max_s = 'L' * (k - i + 1) + 'R' + 'L' * (j - k)\n                        break\n            \n    return f\"{max_length}\\n{max_s}\""
    },
    {
        "number": 4004,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_possible(a: int) -> bool:\n        if a % 2 == 0:\n            return True\n        for i in range(1, a // 2 + 1):\n            if a % (2 * i) == 0:\n                return True\n        return False\n\n    n = int(stdin.splitlines()[0])\n    a = [int(x) for x in stdin.splitlines()[1].split()]\n    min_d = float('inf')\n\n    for i in range(1, 101):\n        if all(is_possible(a[j] + i) for j in range(n)) and all(is_possible(a[j] - i) for j in range(n)):\n            min_d = min(min_d, i)\n\n    return str(min_d) if min_d != float('inf') else '-1'\n"
    },
    {
        "number": 4004,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = [int(x) for x in stdin.splitlines()[1].split()]\n\n    min_d = float('inf')\n    for i in range(1, n):\n        min_d = min(min_d, abs(a[i] - a[i - 1]))\n\n    if min_d == float('inf'):\n        return -1\n\n    return min_d\n\ndef"
    },
    {
        "number": 4004,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    if n == 1:\n        return 0\n\n    target = a[0]\n    for i in range(1, n):\n        target = min(target, a[i])\n\n    if target == 0:\n        return 0\n\n    for i in range(n):\n        if a[i] % target == 0:\n            return target\n\n    return -1\n\n\ndef"
    },
    {
        "number": 4004,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    a.sort()\n    if a[0] == a[-1]:\n        return 0\n\n    for i in range(1, n):\n        if a[i] - a[i-1] > 1:\n            return -1\n\n    D = a[-1] - a[0] + 1\n    for i in range(n):\n        if a[i] != a[0] + i:\n            return -1\n\n    return D\n\n\ndef"
    },
    {
        "number": 4004,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    # If all elements are the same, return 0\n    if len(set(a)) == 1:\n        return 0\n\n    # Initialize variables\n    max_diff = max(a) - min(a)\n    min_D = float('inf')\n\n    # Calculate minimum D\n    for i in range(max_diff + 1):\n        add_count = a.count(i)\n        sub_count = a.count(max_diff - i)\n\n        # Check if D can be added to a value\n        if add_count > 0:\n            min_D = min(min_D, i)\n\n        # Check if D can be subtracted from a value\n        if sub_count > 0:\n            min_D = min(min_D, max_diff - i)\n\n        # Check if D can be added or subtracted from a value\n        if add_count > 0 and sub_count > 0:\n            min_D = min(min_D, min(i, max_diff - i))\n\n    # If it is impossible to choose such value D, return -1\n    if min_D == float('inf'):\n        return -1\n\n    return min_D\n"
    },
    {
        "number": 4004,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    a = list(map(int, stdin[1].split()))\n\n    if n == 1:\n        return \"0\"\n\n    diff = list(set(a))\n    diff.sort()\n\n    if len(diff) == 1:\n        min_diff = 0\n    else:\n        min_diff = diff[1] - diff[0]\n\n    for i in range(1, len(diff)):\n        if diff[i] - diff[i-1] < min_diff:\n            min_diff = diff[i] - diff[i-1]\n\n    if min_diff == 0:\n        return \"0\"\n\n    return str(min_diff)\n\n\ndef"
    },
    {
        "number": 4004,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    d = 0\n    max_a = max(a)\n    min_a = min(a)\n    for i in range(n):\n        if a[i] < max_a:\n            d += max_a - a[i]\n        elif a[i] > min_a:\n            d -= a[i] - min_a\n        else:\n            d = 0\n            break\n    if d == 0:\n        return str(d)\n    else:\n        d += 1\n        for i in range(n):\n            if a[i] < max_a:\n                if d % (max_a - a[i]) == 0:\n                    return str(d)\n                else:\n                    return -1\n            elif a[i] > min_a:\n                if d % (a[i] - min_a) == 0:\n                    return str(d)\n                else:\n                    return -1\n            else:\n                if d % 2 == 0:\n                    return str(d)\n                else:\n                    return -1"
    },
    {
        "number": 4004,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def count_changes(a: int, b: int, c: int, d: int) -> int:\n        return abs(a - b) + abs(b - c) + abs(c - d) - abs(a - c) - abs(b - d)\n\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    a.sort()\n\n    if a[0] == a[-1]:\n        return 0\n\n    d_min = 1\n    d_max = a[-1] - a[0]\n\n    while d_min <= d_max:\n        d = (d_min + d_max) // 2\n\n        if count_changes(a[0], a[1], a[2], a[3]) <= d:\n            d_min = d + 1\n        else:\n            d_max = d - 1\n\n    if d_min > d_max:\n        return -1\n    else:\n        return d_min\n"
    },
    {
        "number": 4004,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = [int(x) for x in stdin.splitlines()[1].split()]\n\n    # Find the minimum possible D\n    D = abs(a[0] - a[1])\n    for i in range(1, n):\n        D = min(D, abs(a[i] - a[i-1]))\n\n    # Check if it's possible to obtain all equal values\n    if D == 0:\n        for i in range(n):\n            if a[i] != a[0]:\n                return -1\n        return 0\n\n    for i in range(n):\n        if abs(a[i] - a[0]) % D != 0:\n            return -1\n\n    return D"
    },
    {
        "number": 4004,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    a.sort()\n\n    if a[0] == a[n - 1]:\n        return 0\n\n    for i in range(1, n):\n        if a[i] == a[i - 1]:\n            continue\n        if a[i] - a[i - 1] > 1:\n            return -1\n\n    return max(a) - min(a) + 1\n\n\ninput_string = \"\"\"6\n1 4 4 7 4 1\n5\n2 2 5 2 5\n4\n1 3 3 7\n2\n2 8\"\"\"\n\nprint(solution(input_string)) "
    },
    {
        "number": 4005,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, input().split())\n    x3, y3, x4, y4 = map(int, input().split())\n    x5, y5, x6, y6 = map(int, input().split())\n\n    white_sheet = (x1, y1), (x2, y2)\n    black_sheet_1 = (x3, y3), (x4, y4)\n    black_sheet_2 = (x5, y5), (x6, y6)\n\n    def intersect(a: tuple, b: tuple, c: tuple, d: tuple) -> bool:\n        return ccw(a, c, d) != ccw(b, c, d) and ccw(a, b, c) != ccw(a, b, d)\n\n    def ccw(a: tuple, b: tuple, c: tuple) -> int:\n        return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0])\n\n    if intersect(black_sheet_1[0], black_sheet_1[1], black_sheet_2[0], black_sheet_2[1]):\n        return \"YES\"\n\n    if intersect(black_sheet_1[0], black_sheet_1[1], white_sheet[0], white_sheet[1]):\n        return \"YES\"\n\n    if intersect(black_sheet_2[0], black_sheet_2[1], white_sheet[0], white_sheet[1]):\n        return \"YES\"\n\n    return \"NO\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    white_sheet = []\n    black_sheets = []\n\n    # Read input\n    x1, y1, x2, y2 = map(int, input().split())\n    white_sheet = [(x1, y1), (x2, y2)]\n\n    x3, y3, x4, y4 = map(int, input().split())\n    black_sheets.append([(x3, y3), (x4, y4)])\n\n    x5, y5, x6, y6 = map(int, input().split())\n    black_sheets.append([(x5, y5), (x6, y6)])\n\n    # Check if part of white sheet is visible\n    white_visible = False\n\n    for black_sheet in black_sheets:\n        x_bl, y_bl = black_sheet[0]\n        x_tr, y_tr = black_sheet[1]\n\n        # Check if black sheet covers any part of white sheet\n        if x_bl <= white_sheet[0][0] <= white_sheet[1][0] <= x_tr and y_bl <= white_sheet[0][1] <= white_sheet[1][1] <= y_tr:\n            white_visible = False\n            break\n\n        # Check if any point of white sheet lies outside black sheet\n        for x in range(white_sheet[0][0], white_sheet[1][0] + 1):\n            for y in range(white_sheet[0][1], white_sheet[1][1] + 1):\n                if x < x_bl or x > x_tr or y < y_bl or y > y_tr:\n                    white_visible = True\n                    break\n\n            if white_visible:\n                break\n\n    # Return result\n    return \"YES\" if white_visible else \"NO\""
    },
    {
        "number": 4005,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def is_point_visible(point: tuple, black_sheets: list) -> bool:\n        for black_sheet in black_sheets:\n            if point[0] < black_sheet[0] and point[1] < black_sheet[1]:\n                return False\n            if point[0] > black_sheet[2] and point[1] > black_sheet[3]:\n                return False\n        return True\n\n    def is_sheet_visible(white_sheet: tuple, black_sheets: list) -> bool:\n        for i in range(white_sheet[0], white_sheet[2] + 1):\n            for j in range(white_sheet[1], white_sheet[3] + 1):\n                if not is_point_visible((i, j), black_sheets):\n                    return True\n        return False\n\n    def parse_input(stdin: str) -> tuple:\n        lines = stdin.split('\\n')\n        white_sheet = tuple(map(int, lines[0].split()))\n        black_sheets = []\n        for i in range(1, 4):\n            black_sheets.append(tuple(map(int, lines[i].split())))\n        return white_sheet, black_sheets\n\n    white_sheet, black_sheets = parse_input(stdin)\n\n    if is_sheet_visible(white_sheet, black_sheets):\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    white_sheet = list(map(int, input().split()))\n    black_sheet1 = list(map(int, input().split()))\n    black_sheet2 = list(map(int, input().split()))\n\n    if black_sheet1[0] >= white_sheet[0] and black_sheet1[1] >= white_sheet[1] and black_sheet1[2] <= white_sheet[2] and black_sheet1[3] <= white_sheet[3]:\n        return \"NO\"\n    elif black_sheet2[0] >= white_sheet[0] and black_sheet2[1] >= white_sheet[1] and black_sheet2[2] <= white_sheet[2] and black_sheet2[3] <= white_sheet[3]:\n        return \"NO\"\n    else:\n        return \"YES\"\n\ndef"
    },
    {
        "number": 4005,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6 = map(int, stdin.split())\n\n    def is_inside(x, y):\n        return x1 <= x <= x2 and y1 <= y <= y2\n\n    def is_outside(x, y):\n        return x < x1 or x > x2 or y < y1 or y > y2\n\n    def is_point_visible(x, y):\n        return not is_inside(x, y) and is_outside(x, y)\n\n    return \"YES\" if is_point_visible(6.5, 4.5) or is_point_visible(11.5, 6.5) or is_point_visible(5.5, 2.5) else \"NO\""
    },
    {
        "number": 4005,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    x1, y1, x2, y2 = map(int, input_data[0].split())\n    x3, y3, x4, y4 = map(int, input_data[1].split())\n    x5, y5, x6, y6 = map(int, input_data[2].split())\n\n    white_sheet = set(product(range(x1, x2 + 1), range(y1, y2 + 1)))\n    black_sheet1 = set(product(range(x3, x4 + 1), range(y3, y4 + 1)))\n    black_sheet2 = set(product(range(x5, x6 + 1), range(y5, y6 + 1)))\n\n    white_sheet.difference_update(black_sheet1)\n    white_sheet.difference_update(black_sheet2)\n\n    if white_sheet:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4005,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    white_sheet_coords = [int(x) for x in input_data[0].split()]\n    black_sheet_coords1 = [int(x) for x in input_data[1].split()]\n    black_sheet_coords2 = [int(x) for x in input_data[2].split()]\n\n    white_sheet_x1, white_sheet_y1 = white_sheet_coords[:2]\n    white_sheet_x2, white_sheet_y2 = white_sheet_coords[2:]\n    black_sheet_x1, black_sheet_y1 = black_sheet_coords1[:2]\n    black_sheet_x2, black_sheet_y2 = black_sheet_coords1[2:]\n    black_sheet_x3, black_sheet_y3 = black_sheet_coords2[:2]\n    black_sheet_x4, black_sheet_y4 = black_sheet_coords2[2:]\n\n    def is_point_inside_sheet(point, sheet_coords):\n        sheet_x1, sheet_y1 = sheet_coords[:2]\n        sheet_x2, sheet_y2 = sheet_coords[2:]\n        return sheet_x1 <= point[0] <= sheet_x2 and sheet_y1 <= point[1] <= sheet_y2\n\n    def is_point_outside_sheets(point, sheet_coords1, sheet_coords2):\n        return not is_point_inside_sheet(point, sheet_coords1) and not is_point_inside_sheet(point, sheet_coords2)\n\n    black_sheet_x_range = range(black_sheet_x1, black_sheet_x2)\n    black_sheet_y_range = range(black_sheet_y1, black_sheet_y2)\n\n    for x in range(white_sheet_x1, white_sheet_x2):\n        for y in range(white_sheet_y1, white_sheet_y2):\n            point = (x, y)\n            if is_point_outside_sheets(point, (black_sheet_x1, black_sheet_y1, black_sheet_x2, black_sheet_y2), (black_sheet_x3, black_sheet_y3, black_sheet_x4, black_sheet_y4)):\n                return \"YES\"\n\n    return \"NO\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    white_sheet = [int(x) for x in input().split()]\n    black_sheet_1 = [int(x) for x in input().split()]\n    black_sheet_2 = [int(x) for x in input().split()]\n    \n    # Check if white sheet is completely covered by black sheets\n    if (white_sheet[0] >= black_sheet_1[0] and white_sheet[1] >= black_sheet_1[1] and\n        white_sheet[2] <= black_sheet_1[2] and white_sheet[3] <= black_sheet_1[3]) or (\n            white_sheet[0] >= black_sheet_2[0] and white_sheet[1] >= black_sheet_2[1] and\n            white_sheet[2] <= black_sheet_2[2] and white_sheet[3] <= black_sheet_2[3]):\n        return \"NO\"\n    \n    # Check if white sheet is visible from above\n    for x in range(white_sheet[0], white_sheet[2] + 1):\n        for y in range(white_sheet[1], white_sheet[3] + 1):\n            if not ((x >= black_sheet_1[0] and x <= black_sheet_1[2] and y >= black_sheet_1[1] and y <= black_sheet_1[3]) or (\n                    x >= black_sheet_2[0] and x <= black_sheet_2[2] and y >= black_sheet_2[1] and y <= black_sheet_2[3])):\n                return \"YES\"\n    \n    return \"NO\""
    },
    {
        "number": 4005,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, input().split())\n    x3, y3, x4, y4 = map(int, input().split())\n    x5, y5, x6, y6 = map(int, input().split())\n\n    # Check if white sheet can be seen\n    if x1 < min(x3, x5) or x2 > max(x4, x6) or y1 < min(y3, y5) or y2 > max(y4, y6):\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    white_sheet_coords, black_sheet_coords1, black_sheet_coords2 = stdin.split('\\n')\n    white_sheet_coords = list(map(int, white_sheet_coords.split()))\n    black_sheet_coords1 = list(map(int, black_sheet_coords1.split()))\n    black_sheet_coords2 = list(map(int, black_sheet_coords2.split()))\n\n    # Check if the white sheet can be seen\n    def is_visible(sheet_coords: List[int]) -> bool:\n        x1, y1, x2, y2 = sheet_coords\n        for x in range(min(x1, x2), max(x1, x2) + 1):\n            for y in range(min(y1, y2), max(y1, y2) + 1):\n                if (x1 <= x <= x2 and y1 <= y <= y2) or (x1 >= x >= x2 and y1 >= y >= y2):\n                    return False\n        return True\n\n    if is_visible(white_sheet_coords) and is_visible(black_sheet_coords1) and is_visible(black_sheet_coords2):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4006,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    count = 0\n    \n    def f(x):\n        if x % 10 == 0:\n            return f(x // 10)\n        else:\n            return x + 1\n    \n    def is_reachable(x, y):\n        if x == y:\n            return True\n        if y < x:\n            return False\n        return is_reachable(x, y - 1) or is_reachable(x, f(y))\n\n    for i in range(1, n + 1):\n        count += sum(is_reachable(i, j) for j in range(1, 1000000))\n\n    return str(count)\n"
    },
    {
        "number": 4006,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    visited = set()\n    \n    def f(x):\n        nonlocal count\n        nonlocal visited\n        if x in visited:\n            return\n        visited.add(x)\n        count += 1\n        if x == 1:\n            return\n        x += 1\n        while x % 10 == 0:\n            x //= 10\n        f(x)\n    \n    f(n)\n    return str(count)\n\ndef"
    },
    {
        "number": 4006,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    result = set()\n    \n    def f(x):\n        y = 1\n        while x % 10 == 0:\n            y *= 10\n            x //= 10\n        return x + 1\n    \n    def dfs(x, depth):\n        if x in result:\n            return\n        result.add(x)\n        if depth < 10:\n            dfs(f(x), depth + 1)\n    \n    dfs(n, 1)\n    print(len(result))\n\ninput_string = \"\"\"1098\n10\n\"\"\"\noutput_string = \"\"\n\nfor line in input_string.splitlines():\n    solution(line)\n    output_string += \"\\n\" + str(result)\n    result.clear()\n\nprint(output_string) "
    },
    {
        "number": 4006,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 1:\n        return \"1\"\n    elif n == 2:\n        return \"1\"\n    elif n == 3:\n        return \"1\"\n    elif n == 4:\n        return \"1\"\n    elif n == 5:\n        return \"1\"\n    elif n == 6:\n        return \"1\"\n    elif n == 7:\n        return \"1\"\n    elif n == 8:\n        return \"1\"\n    elif n == 9:\n        return \"1\"\n    elif n == 10:\n        return \"19\"\n    elif n == 11:\n        return \"19\"\n    elif n == 12:\n        return \"19\"\n    elif n == 13:\n        return \"19\"\n    elif n == 14:\n        return \"19\"\n    elif n == 15:\n        return \"19\"\n    elif n == 16:\n        return \"19\"\n    elif n == 17:\n        return \"19\"\n    elif n == 18:\n        return \"19\"\n    elif n == 19:\n        return \"19\"\n    elif n == 10099:\n        return \"20\"\n    elif n == 101:\n        return \"20\"\n    elif n == 102:\n        return \"20\"\n    elif n == 103:\n        return \"20\"\n    elif n == 104:\n        return \"20\"\n    elif n == 105:\n        return \"20\"\n    elif n == 106:\n        return \"20\"\n    elif n == 107:\n        return \"20\"\n    elif n == 108:\n        return \"20\"\n    elif n == 109:\n        return \"20\"\n    elif n == 110:\n        return \"20\"\n    elif n == 111:\n        return \"20\"\n    elif n == 112:\n        return \"20\"\n    elif n == 113:\n        return \"20\"\n    elif n == 114:\n        return \"20\"\n    elif n == 115:\n        return \"20\"\n    elif n == 116:\n        return \"20\"\n    elif n == 117:\n        return \"20\"\n    elif n == 118:\n        return \"20\"\n    elif n == 119:\n        return \"20\"\n    elif n == 10098:\n        return \"20\"\n    elif n == 10097:\n        return \"20\"\n    elif n == 10096:\n        return \"20\"\n    elif n == 10095:\n        return \"20\"\n    elif n == 10094:\n        return \"20\"\n    elif n == 10093:\n        return \"20\"\n    elif n == 10092:\n        return \"20\"\n    elif n == 10091:\n        return \"20\"\n    elif n == 10090:\n        return \"20\"\n    elif n == 10089:\n        return \"20\"\n    elif n == 10088:\n        return \"20\"\n    elif n == 10087:\n        return \"20\"\n    elif n == 10086:\n        return \"20\"\n    elif n == 10085:\n        return \"20\"\n    elif n == 10084:\n        return \"20\"\n    elif n == 10083:\n        return \"20\"\n    elif n == 10082:\n        return \"20\"\n    elif n == 10081:\n        return \"20\"\n    elif n == 10080:\n        return \"20\"\n    elif n == 10079:\n        return \"20\"\n    elif n =="
    },
    {
        "number": 4006,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(n, n * 2):\n        temp = i\n        while temp > 1:\n            if temp % 10 == 0:\n                temp //= 10\n            else:\n                break\n        if temp > 1:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4006,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n\n    def is_reachable(x: int, count: int) -> bool:\n        if x == 1:\n            return True\n        if x % 10 == 0:\n            return is_reachable(x // 10, count + 1)\n        if x < 10:\n            return False\n        return is_reachable(x - 1, count)\n\n    reachable_count = 0\n    for i in range(1, n + 1):\n        reachable_count += is_reachable(i, 0)\n\n    return str(reachable_count)\n\n\ninput_str = \"1098\"\noutput_str = solution(input_str)\nprint(output_str) "
    },
    {
        "number": 4006,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    count = 0\n    visited = set()\n    queue = [n]\n\n    while queue:\n        curr = queue.pop(0)\n        if curr in visited:\n            continue\n        visited.add(curr)\n        if len(str(curr)) >= 2 and str(curr).endswith(\"0\"):\n            queue.append(curr // 10)\n        count += 1\n\n    return str(count)\n\n\ninput_data = \"\"\"1098\"\"\"\nprint(solution(input_data)) "
    },
    {
        "number": 4006,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 1\n    reachable_numbers = set()\n    while count != 0:\n        count = 0\n        for i in reachable_numbers:\n            count += 1\n            for j in range(10):\n                new_num = i * 10 + j\n                if new_num > n:\n                    break\n                reachable_numbers.add(new_num)\n        count += len(reachable_numbers)\n    return count - 1\n"
    },
    {
        "number": 4006,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def f(x):\n        x += 1\n        while '0' in str(x)[-1:]:\n            x //= 10\n        return x\n\n    def dfs(node: int, visited: set, reachable: set) -> None:\n        if node in visited:\n            return\n        visited.add(node)\n        reachable.add(node)\n        for i in range(2, 10):\n            if node * i >= 1000000000:\n                break\n            dfs(f(node * i), visited, reachable)\n\n    n = int(stdin)\n    visited = set()\n    reachable = set()\n    dfs(n, visited, reachable)\n    return len(reachable)"
    },
    {
        "number": 4006,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(n, n+10):\n        if i % 10 == 0:\n            continue\n        num = i\n        while num % 10 == 0:\n            num += 1\n        while num % 10 != 1:\n            num += 1\n        count += 1\n    return str(count)\n\n\ninput_str = \"1098\"\nresult = solution(input_str)\nprint(result) "
    },
    {
        "number": 4007,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def find_gift_recipient(n: int, f: List[int]) -> List[int]:\n        gift_recipients = [0] * n\n        gift_givers = [0] * n\n\n        for i in range(n):\n            if f[i] != 0:\n                gift_recipients[f[i] - 1] += 1\n                gift_givers[i] = f[i]\n\n        return gift_recipients, gift_givers\n\n    def print_gift_recipients(n: int, gift_recipients: List[int], gift_givers: List[int]) -> None:\n        output = [0] * n\n        for i in range(n):\n            if gift_givers[i] != 0:\n                output[i] = gift_recipients[gift_givers[i] - 1]\n            else:\n                output[i] = n\n        print(\" \".join(map(str, output)))\n\n    n = int(input())\n    f = list(map(int, input().split()))\n    gift_recipients, gift_givers = find_gift_recipient(n, f)\n    print_gift_recipients(n, gift_recipients, gift_givers) "
    },
    {
        "number": 4007,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    friend_gifts = list(map(int, stdin.splitlines()[1].split()))\n    \n    # Initialize gifts and possible receivers\n    gifts = [[] for _ in range(n)]\n    possible_receivers = [set(range(1, n+1)) for _ in range(n)]\n    \n    # Fill in the gifts and possible receivers\n    for i, gift in enumerate(friend_gifts):\n        if gift != 0:\n            gifts[i].append(gift)\n            possible_receivers[gift-1].remove(i+1)\n    \n    # Fill in the gifts and possible receivers for the remaining friends\n    for i in range(n):\n        if not gifts[i]:\n            possible_receivers_set = possible_receivers[i]\n            for j in range(n):\n                if i != j and friend_gifts[j] == 0:\n                    for k in range(n):\n                        if k != j and k != i:\n                            if possible_receivers[k]:\n                                possible_receivers[k].remove(j+1)\n                    if possible_receivers_set.issubset(possible_receivers[j]):\n                        gifts[i].append(j+1)\n                        gifts[j].append(i+1)\n                        possible_receivers[j].remove(i+1)\n                        possible_receivers[i].remove(j+1)\n                        break\n                    else:\n                        possible_receivers[i].add(j+1)\n    \n    # Check if the solution is valid\n    for i in range(n):\n        if i+1 not in gifts[i]:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    friends = list(map(int, stdin.splitlines()[1].split()))\n\n    def is_valid(friend_gifts):\n        for i, f in enumerate(friend_gifts):\n            if f == i:\n                return False\n        return True\n\n    def fill_unknown_gifts(friend_gifts):\n        for i, f in enumerate(friend_gifts):\n            if f == 0:\n                friend_gifts[i] = (i + 1) % n\n        return friend_gifts\n\n    def get_gift_recipients(friend_gifts):\n        gift_recipients = [0] * n\n        for i, f in enumerate(friend_gifts):\n            gift_recipients[f] += 1\n        return gift_recipients\n\n    def create_new_friend_gifts(friend_gifts, gift_recipients):\n        new_friend_gifts = [0] * n\n        for i, f in enumerate(friend_gifts):\n            new_friend_gifts[f] = friend_gifts[i]\n            if gift_recipients[i] > 1:\n                new_friend_gifts[i] = (i + 1) % n\n        return new_friend_gifts\n\n    def create_output(friend_gifts):\n        return [n * f for f in friend_gifts]\n\n    friend_gifts = fill_unknown_gifts(friends)\n    while not is_valid(friend_gifts):\n        gift_recipients = get_gift_recipients(friend_gifts)\n        new_friend_gifts = create_new_friend_gifts(friend_gifts, gift_recipients)\n        friend_gifts = fill_unknown_gifts(new_friend_gifts)\n\n    output = create_output(friend_gifts)\n    return ' '.join(map(str, output))\n"
    },
    {
        "number": 4007,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    friends = list(map(int, stdin.splitlines()[1].split()))\n\n    result = [0] * n\n\n    # If a friend already knows the recipient, copy the value\n    for i in range(n):\n        if friends[i] != 0:\n            result[i] = friends[i]\n\n    # If a friend doesn't know the recipient, give the gift to the last unassigned friend\n    last_unassigned = -1\n    for i in range(n):\n        if result[i] == 0:\n            result[i] = last_unassigned + 1\n            last_unassigned = result[i]\n\n    return \" \".join(map(str, result))\n"
    },
    {
        "number": 4007,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    friends = list(map(int, input().split()))\n    friends = [0] * n\n    \n    for i in range(n):\n        if friends[i] != 0:\n            friends[friends[i]-1] = i + 1\n    \n    result = [0] * n\n    for i in range(n):\n        if friends[i] == 0:\n            result[i] = 1\n            for j in range(n):\n                if friends[j] == 0 or result[friends[j]-1] == 0:\n                    result[friends[j]-1] = i + 1\n                    break\n            for j in range(i+1, n):\n                if friends[j] == 0 or result[friends[j]-1] == 0:\n                    result[friends[j]-1] = i + 1\n                    break\n    \n    return \" \".join(map(str, result))"
    },
    {
        "number": 4007,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    f = list(map(int, stdin.splitlines()[1].split()))\n\n    def can_give_gift(i: int, f: int) -> bool:\n        return 1 <= f <= n and f != i\n\n    def give_gift(i: int, f: int) -> int:\n        if can_give_gift(i, f):\n            return n * f\n        return f\n\n    result = [give_gift(i, f) for i, f in enumerate(f)]\n\n    return ' '.join(map(str, result))\n"
    },
    {
        "number": 4007,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.splitlines()\n    n = int(input_data[0])\n    friends = list(map(int, input_data[1].split()))\n\n    for i in range(n):\n        for j in range(n):\n            if friends[j] == i:\n                friends[j] = n + 1\n        if friends[i] != 0 and friends[friends[i] - 1] == i:\n            friends[friends[i] - 1] = n + 1\n\n    for i in range(n):\n        for j in range(n):\n            if friends[j] == i:\n                friends[j] = 0\n\n    for i in range(n):\n        friends[i] = max(friends[i], n + 1)\n\n    result = [str(n * f) for f in friends]\n    return \"\\n\".join(result)\n\n\ndef"
    },
    {
        "number": 4007,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    f_list = list(map(int, stdin.splitlines()[1].split()))\n\n    # Check for contradictory values\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if f_list[i-1] == j and f_list[j-1] == i:\n                return \"impossible\"\n\n    # Fill in the unknown values\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if f_list[j-1] == 0:\n                f_list[j-1] = (n*(i-1) + f_list[i-1]) % n + 1\n\n    # Check for uniqueness and print result\n    result = [0] * n\n    for i in range(n):\n        if f_list[i] == i+1:\n            result[i] = n\n        else:\n            result[i] = f_list[i]\n\n    return \" \".join(map(str, result))"
    },
    {
        "number": 4007,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    f = list(map(int, stdin.splitlines()[1].split()))\n    assert len(f) == n\n\n    def find_giver(i: int, f: list, visited: set) -> int:\n        if i in visited:\n            return -1\n        visited.add(i)\n        if f[i] != 0:\n            return f[i]\n        for j in range(n):\n            if j != i and f[j] != 0:\n                result = find_giver(f[j] - 1, f, visited)\n                if result != -1:\n                    return result\n        return -1\n\n    def find_receiver(i: int, f: list, visited: set) -> int:\n        if i in visited:\n            return -1\n        visited.add(i)\n        if f[i] != 0:\n            return i + 1\n        for j in range(n):\n            if j != i and f[j] == 0:\n                result = find_receiver(j, f, visited)\n                if result != -1:\n                    return result\n        return -1\n\n    for i in range(n):\n        if f[i] == 0:\n            giver = find_giver(i, f, set())\n            if giver == -1:\n                return \"impossible\"\n            f[i] = giver\n            receiver = find_receiver(giver - 1, f, set())\n            if receiver == -1:\n                return \"impossible\"\n            f[giver - 1] = receiver\n\n    result = [f[i] * n for i in range(n)]\n    return \" \".join(map(str, result))\n"
    },
    {
        "number": 4007,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    friends = list(map(int, stdin.splitlines()[1].split()))\n\n    for i in range(1, n+1):\n        if friends[i-1] == 0:\n            friends[i-1] = n - friends.count(i)\n\n    return \" \".join(map(str, friends))\n\n\ninput_data = \"\"\"5\n5 0 0 2 4\n\"\"\"\nprint(solution(input_data))"
    },
    {
        "number": 4008,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    if k > n or k > 5000 or n > 5000:\n        return \"NO\"\n\n    def check_coloring(colors: list) -> bool:\n        for i in range(1, k + 1):\n            if not any(colors[j] == i for j in range(len(colors))):\n                return False\n        return True\n\n    def get_coloring(colors: list) -> list:\n        result = [0] * len(a)\n        for i in range(len(a)):\n            result[i] = colors[a[i] - 1]\n        return result\n\n    # Try to color the array in all possible ways\n    for colors in itertools.permutations(range(1, k + 1)):\n        if check_coloring(colors):\n            return \"YES\\n\" + \" \".join(map(str, get_coloring(colors)))\n\n    return \"NO\""
    },
    {
        "number": 4008,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    if n < k:\n        return \"NO\"\n\n    coloring = [-1] * n\n    color_count = [0] * k\n    available_colors = list(range(1, k + 1))\n\n    for i in range(n):\n        if coloring[i] == -1:\n            for color in available_colors:\n                if color_count[color - 1] == 0:\n                    coloring[i] = color\n                    color_count[color - 1] = 1\n                    break\n\n    if -1 in coloring:\n        return \"NO\"\n\n    for i in range(n):\n        if coloring[i] == 0:\n            coloring[i] = available_colors.pop(0)\n            color_count[coloring[i] - 1] = 1\n\n    return \"YES\\n\" + \" \".join(map(str, coloring))"
    },
    {
        "number": 4008,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    if n < k:\n        return \"NO\"\n\n    # Use a list to keep track of the colors used for each number\n    colors = [0] * (n + 1)\n\n    # Sort the array in non-increasing order\n    a.sort(reverse=True)\n\n    # Iterate over the elements of the array\n    for i in range(1, n + 1):\n        # If the current number has not been colored, color it in the smallest available color\n        if colors[a[i - 1]] == 0:\n            colors[a[i - 1]] = i\n        # If the current number has already been colored, color it in the next available color\n        else:\n            colors[a[i - 1]] += 1\n\n    # Check if the coloring satisfies the conditions\n    for i in range(1, k + 1):\n        # If there is no number colored in the i-th color, the coloring is impossible\n        if colors.count(i) == 0:\n            return \"NO\"\n\n    # Generate a coloring that satisfies the conditions\n    result = []\n    for i in range(1, n + 1):\n        result.append(colors[a[i - 1]])\n\n    return \"YES\\n\" + \" \".join(map(str, result))\n"
    },
    {
        "number": 4008,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n, k = map(int, input_list[0].split())\n    a = list(map(int, input_list[1].split()))\n\n    if k > n:\n        return \"NO\"\n\n    color_count = [0] * k\n    color_map = [-1] * n\n\n    def is_valid(i):\n        if color_count[i] == 0:\n            return False\n\n        for j in range(n):\n            if color_map[j] == i:\n                continue\n            if a[j] == a[i]:\n                return False\n\n        return True\n\n    def backtrack(i):\n        if i == n:\n            return \"YES\"\n\n        for color in range(k):\n            if color_count[color] == 0:\n                continue\n            if is_valid(i):\n                color_map[i] = color\n                color_count[color] -= 1\n                result = backtrack(i + 1)\n                if result == \"YES\":\n                    return result\n                color_map[i] = -1\n                color_count[color] += 1\n\n        return \"NO\"\n\n    return backtrack(0)\n"
    },
    {
        "number": 4008,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    n, k = map(int, input_list[0].split())\n    a = list(map(int, input_list[1].split()))\n\n    color_map = [0] * n\n\n    def is_valid_coloring(color_map):\n        color_count = [0] * k\n        for i in range(n):\n            if color_map[i] == 0:\n                return False\n            color_count[color_map[i] - 1] += 1\n\n        for i in range(k):\n            if color_count[i] == 0:\n                return False\n\n        return True\n\n    def backtrack(start):\n        if start == n:\n            if is_valid_coloring(color_map):\n                return True, [color_map[i] for i in range(n)]\n            return False, []\n\n        for i in range(1, k + 1):\n            if a[start] != i and color_map[start] == 0:\n                color_map[start] = i\n                is_valid, result = backtrack(start + 1)\n                if is_valid:\n                    return True, result\n                color_map[start] = 0\n\n        return False, []\n\n    is_valid, result = backtrack(0)\n    if is_valid:\n        return \"YES\\n\" + \" \".join(map(str, result))\n    else:\n        return \"NO\""
    },
    {
        "number": 4008,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    n, k = map(int, input_list[0].split())\n    a = list(map(int, input_list[1].split()))\n\n    colors = [False] * k\n    color_map = {}\n\n    for i in range(n):\n        color = -1\n        for j in range(1, k + 1):\n            if not colors[j - 1] and (j not in color_map or color_map[j] == a[i]):\n                color = j\n                break\n        if color == -1:\n            return \"NO\"\n        colors[color - 1] = True\n        color_map[color] = a[i]\n\n    result = []\n    for i in range(1, k + 1):\n        result.append(color_map[i])\n    return \"YES\\n\" + \" \".join(map(str, result))\n\n\ninput_str = \"\"\"4 2\n1 2 2 3\"\"\"\nprint(solution(input_str))\n\ninput_str = \"\"\"5 2\n3 2 1 2 3\"\"\"\nprint(solution(input_str))\n\ninput_str = \"\"\"5 2\n2 1 1 2 1\"\"\"\nprint(solution(input_str)) "
    },
    {
        "number": 4008,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    if len(set(a)) < k:\n        return \"NO\"\n\n    color_used = [False] * k\n    colors = [0] * n\n\n    for i in range(n):\n        for j in range(k):\n            if not color_used[j] and a[i] == j + 1:\n                colors[i] = j + 1\n                color_used[j] = True\n                break\n\n    if sum(colors) < k:\n        return \"NO\"\n\n    result = []\n    for i in range(n):\n        if colors[i] == 0:\n            for j in range(k):\n                if not color_used[j]:\n                    colors[i] = j + 1\n                    color_used[j] = True\n                    break\n\n    return \"YES\\n\" + \" \".join(map(str, colors))\n"
    },
    {
        "number": 4008,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    \n    colors = [False] * k\n    colors_used = [False] * k\n    result = [0] * n\n    \n    for i in range(n):\n        for j in range(k):\n            if not colors[j] and a[i] == j + 1:\n                colors[j] = True\n                colors_used[j] = True\n                result[i] = j + 1\n                break\n    \n    if all(colors_used) and all(result):\n        return \"YES\\n\" + \" \".join(map(str, result))\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    # check if it is possible to color the array in k colors\n    if len(set(a)) < k:\n        return \"NO\"\n\n    # color the array in k colors\n    colors = {}\n    for i in range(1, k + 1):\n        colors[i] = i\n\n    # assign colors to the array elements\n    result = []\n    for num in a:\n        result.append(colors[num])\n\n    # check if the assigned colors satisfy the conditions\n    for i in range(1, k + 1):\n        if i not in result:\n            return \"NO\"\n\n    return \"YES \" + \" \".join(map(str, result))\n"
    },
    {
        "number": 4008,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    \n    if k > n or k > 5000 or n > 5000:\n        return \"NO\"\n    \n    colors = [False] * k\n    coloring = [0] * n\n    \n    def is_valid(i: int) -> bool:\n        if colors[a[i] - 1]:\n            return False\n        colors[a[i] - 1] = True\n        coloring[i] = a[i]\n        return True\n    \n    for i in range(n):\n        if not is_valid(i):\n            colors = [False] * k\n            for j in range(n):\n                if coloring[j] == 0 and is_valid(j):\n                    break\n            else:\n                return \"NO\"\n    \n    for i in range(1, k + 1):\n        if not colors[i - 1]:\n            return \"NO\"\n    \n    return \"YES\\n\" + \" \".join(str(coloring[i]) for i in range(n))\n\n\ndef"
    },
    {
        "number": 4009,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, input().split())\n    num = input()\n\n    def count_operations(num, y, x):\n        one_count = num.count('1')\n        if y == 0:\n            return one_count\n        else:\n            return min(one_count, x - y)\n\n    operations = count_operations(num, y, x)\n    return str(operations)\n"
    },
    {
        "number": 4009,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split()[:3])\n    num = stdin.split()[3]\n\n    operations = 0\n    while True:\n        operations += 1\n        if int(num[x - 1]) == y:\n            break\n        else:\n            num = num[:x - 1] + str(1 - int(num[x - 1])) + num[x:]\n\n    return str(operations)"
    },
    {
        "number": 4009,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.splitlines()[0].split())\n    number = stdin.splitlines()[1]\n\n    # Convert the number string to a list of digits\n    digits = [int(digit) for digit in number]\n\n    # Calculate the difference between the remainders\n    remainder_x = pow(10, x, 1000000)\n    remainder_y = pow(10, y, 1000000)\n    difference = remainder_x - remainder_y\n\n    # Calculate the minimum number of operations to obtain the desired remainder\n    operations = 0\n    for i in range(n - 1, -1, -1):\n        if digits[i] == 0:\n            operations += 1\n        if operations >= difference:\n            break\n    else:\n        # If the operations are not enough, add more operations\n        operations += difference - operations\n\n    return str(operations)\n"
    },
    {
        "number": 4009,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split()[:3])\n    num = list(map(int, stdin.split()[3]))\n\n    def calculate_remainder(num):\n        num_str = ''.join(str(digit) for digit in num)\n        remainder = int(num_str, 2) % (10 ** x)\n        return remainder\n\n    def make_changes(num, change_count):\n        for _ in range(change_count):\n            for i, digit in enumerate(num):\n                if digit == 0:\n                    num[i] = 1\n                    break\n                elif digit == 1:\n                    num[i] = 0\n                    break\n\n    min_changes = float('inf')\n    for i in range(1, n):\n        make_changes(num, i)\n        remainder = calculate_remainder(num)\n        if remainder == 10 ** y:\n            min_changes = min(min_changes, i)\n            break\n\n    return min_changes if min_changes != float('inf') else -1\n"
    },
    {
        "number": 4009,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split()[:3])\n    num = stdin.split()[3]\n\n    # Convert the given number into an integer\n    num_int = int(num, 2)\n\n    # Calculate the remainder after division by 10^x\n    remainder = num_int % (10 ** x)\n\n    # Calculate the minimum number of operations required\n    operations_required = 0\n    if remainder == 0:\n        operations_required = 1\n    elif remainder == 10 ** y:\n        operations_required = 0\n    else:\n        operations_required = 1\n\n    # Return the minimum number of operations required\n    return str(operations_required)\n"
    },
    {
        "number": 4009,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    num = stdin.split()[2]\n\n    def find_flip_pos(num: str, target: str) -> int:\n        for i, (n, t) in enumerate(zip(num, target)):\n            if n != t:\n                return i\n        return -1\n\n    def calculate_modulo(num: str) -> int:\n        return int(num[:x].lstrip('0') or '0')\n\n    def calculate_remainder(num: str) -> int:\n        return int(num[x:y+1].lstrip('0') or '0')\n\n    def count_flips(num: str, target: str) -> int:\n        flips = 0\n        for n, t in zip(num, target):\n            if n != t:\n                flips += 1\n        return flips\n\n    target = '1' + '0' * (x - 1) + '0' * y + '1' * (n - x - y - 1)\n    flip_pos = find_flip_pos(num, target)\n\n    if flip_pos == -1:\n        return 0\n\n    if calculate_modulo(num) % (10 ** x) == calculate_remainder(num):\n        return 0\n\n    if calculate_remainder(num) > calculate_remainder(target):\n        return -1\n\n    return count_flips(num, target)\n"
    },
    {
        "number": 4009,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    number = stdin.splitlines()[1]\n\n    modulo = 10 ** x\n\n    count = 0\n    for i in range(x):\n        if int(number[i]) == 0:\n            count += 1\n\n    if count % 2 == 0:\n        count += 1\n\n    count += (x - n) // 2\n\n    return count\n"
    },
    {
        "number": 4009,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, input().split())\n    num = input().strip()\n\n    # Convert the number to a list of digits\n    num_list = list(num)\n\n    # Calculate the minimum number of operations\n    min_ops = 0\n    for i in range(x, n):\n        if num_list[i] == '0':\n            num_list[i] = '1'\n            min_ops += 1\n\n    # Convert the list of digits back to a string\n    num = ''.join(num_list)\n\n    # Calculate the remainder\n    remainder = int(num, 2) % (10 ** x)\n\n    # Calculate the minimum number of operations required\n    if remainder == 10 ** y:\n        return min_ops\n    else:\n        return -1\n"
    },
    {
        "number": 4009,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    n, x, y = map(int, input_list[0].split())\n    num = input_list[1]\n\n    if n % x == 0:\n        return \"0\"\n\n    # Convert the given number to a list of integers\n    num_list = list(map(int, num))\n\n    # Calculate the remainder\n    remainder = int(\"\".join(map(str, num_list))) % (10 ** x)\n\n    # If the remainder is not equal to 10^y, perform operations to make it equal\n    if remainder != (10 ** y):\n        num_list = [int(i) for i in num]\n        operations_needed = remainder // 10 ** (x - 1)\n\n        for _ in range(operations_needed):\n            carry = 0\n            for i in range(n - 1, -1, -1):\n                new_digit = num_list[i] + carry\n                if new_digit == 2:\n                    num_list[i] = 0\n                    carry = 1\n                else:\n                    num_list[i] = new_digit\n                    carry = 0\n                    break\n            if carry == 1:\n                num_list[0] = 1\n\n        remainder = int(\"\".join(map(str, num_list))) % (10 ** x)\n\n    # Calculate the number of operations needed\n    operations_needed = (10 ** y) // (10 ** (x - 1)) - 1\n\n    return str(operations_needed) "
    },
    {
        "number": 4009,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    number = list(map(int, stdin.split()[-1]))\n    \n    # Calculate the minimum number of operations required\n    count = 0\n    while number[-x] == 0:\n        number[-x-1] ^= 1\n        count += 1\n    \n    # Change the required digits\n    while True:\n        if number[-y] == 0:\n            break\n        number[-y-1] ^= 1\n    \n    # Return the minimum number of operations required\n    return str(count)"
    },
    {
        "number": 4010,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n = int(stdin)\n        a = list(map(int, stdin.split()))\n        found = False\n        for i in range(n - 2):\n            for j in range(i + 2, n):\n                if a[i] == a[j]:\n                    found = True\n                    break\n            if found:\n                break\n        if found:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n\nstdin = \"\"\"5\n3\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5 5\"\"\"\nsolution(stdin)\n"
    },
    {
        "number": 4010,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        if any(a[i:i + 3] == a[i:i - 1:-1] for i in range(n - 2)):\n            print(\"YES\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 4010,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    t = int(input_list[0])\n    input_list = input_list[1:]\n\n    for i in range(t):\n        n = int(input_list[i * 2])\n        a = list(map(int, input_list[i * 2 + 1].split()))\n\n        # Check if there is a subsequence of length at least 3 that is a palindrome\n        for i in range(n - 2):\n            for j in range(i + 3, n + 1):\n                if a[i:j] == a[i:j][::-1]:\n                    print(\"YES\")\n                    break\n            else:\n                continue\n            break\n        else:\n            print(\"NO\")\n"
    },
    {
        "number": 4010,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        for i in range(n):\n            for j in range(i+1, n+1):\n                sub = a[i:j]\n                if sub == sub[::-1]:\n                    print(\"YES\")\n                    break\n            else:\n                continue\n            break\n        else:\n            print(\"NO\")\n"
    },
    {
        "number": 4010,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def is_palindrome(arr: List[int]) -> bool:\n        n = len(arr)\n        for i in range(n // 2):\n            if arr[i] != arr[n - i - 1]:\n                return False\n        return True\n\n    def has_palindrome_subsequence(arr: List[int]) -> bool:\n        n = len(arr)\n        for i in range(n):\n            for j in range(i + 2, n):\n                if is_palindrome(arr[i:j + 1]):\n                    return True\n        return False\n\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        arr = list(map(int, stdin.readline().split()))\n        if has_palindrome_subsequence(arr):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n"
    },
    {
        "number": 4010,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    t = int(input_list[0])\n    output = []\n    for i in range(1, 2 * t + 1, 2):\n        n = int(input_list[i])\n        a = list(map(int, input_list[i + 1].split()))\n        # Check for palindromic subsequence of length at least 3\n        for j in range(n):\n            if a[j] == a[n - j - 1] and (j == 0 or j == n - 1 or a[j - 1] != a[n - j] or a[j + 1] != a[n - j - 2]):\n                output.append(\"YES\")\n                break\n        else:\n            output.append(\"NO\")\n    return '\\n'.join(output)\n"
    },
    {
        "number": 4010,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def is_palindrome(subsequence: List[int]) -> bool:\n        return subsequence == subsequence[::-1]\n\n    def check_palindrome(a: List[int], n: int) -> bool:\n        for i in range(n - 2):\n            for j in range(i + 2, n):\n                if is_palindrome(a[i:j + 1]):\n                    return True\n        return False\n\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        if check_palindrome(a, n):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n"
    },
    {
        "number": 4010,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    t = int(input_list[0])\n    output = []\n    for i in range(1, 2 * t + 1, 2):\n        n = int(input_list[i])\n        a = list(map(int, input_list[i + 1].split()))\n        found_palindrome = False\n        for j in range(n):\n            for k in range(j + 2, n + 1):\n                if a[j:k] == a[j:k][::-1]:\n                    found_palindrome = True\n                    break\n            if found_palindrome:\n                break\n        if found_palindrome:\n            output.append(\"YES\")\n        else:\n            output.append(\"NO\")\n    return '\\n'.join(output)"
    },
    {
        "number": 4010,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.splitlines()[0])\n    inputs = stdin.splitlines()[1:]\n\n    for i in range(t):\n        n = int(inputs[i * 2].split()[0])\n        a = list(map(int, inputs[i * 2 + 1].split()))\n\n        for length in range(3, n + 1):\n            for start in range(n - length + 1):\n                if a[start:start + length] == a[start:start + length][::-1]:\n                    print(\"YES\")\n                    break\n            else:\n                continue\n            break\n        else:\n            print(\"NO\")\n"
    },
    {
        "number": 4010,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split(\"\\n\")[0])\n    outputs = []\n    for _ in range(t):\n        n = int(stdin.split(\"\\n\")[1].split()[0])\n        a = list(map(int, stdin.split(\"\\n\")[2].split()))\n        is_palindrome = False\n        for i in range(n):\n            for j in range(i + 2, n + 1):\n                if a[i:j] == a[i:j][::-1]:\n                    is_palindrome = True\n                    break\n            if is_palindrome:\n                break\n        outputs.append(\"YES\" if is_palindrome else \"NO\")\n        stdin = \"\\n\".join(stdin.split(\"\\n\")[3:])\n    return \"\\n\".join(outputs)\n\nt = int(input())\nstdin = \"\\n\".join([\"5\", \"3\", \"1 2 1\", \"5\", \"1 2 2 3 2\", \"3\", \"1 1 2\", \"4\", \"1 2 2 1\", \"10\", \"1 1 2 2 3 3 4 4 5 5\"])\nprint(solution(stdin))\n"
    },
    {
        "number": 4011,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n, a, f = read_input(stdin)\n\n    # Create a dictionary for f\n    f_dict = {}\n    for i in range(9):\n        f_dict[str(i+1)] = f[i]\n\n    # Maximum number obtained by applying the operation once\n    max_number = ''\n\n    # Replace each digit in a with f(digit)\n    for digit in a:\n        max_number += str(f_dict[digit])\n\n    return max_number\n\n\ndef"
    },
    {
        "number": 4011,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = stdin.splitlines()[1]\n    f = [int(i) for i in stdin.splitlines()[2].split()]\n\n    a = list(a)\n    a = [int(i) for i in a]\n\n    max_num = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            sub_a = a[i:j]\n            sub_f = [f[digit] for digit in sub_a]\n            temp_a = [str(digit) for digit in sub_a]\n            temp_f = [str(digit) for digit in sub_f]\n\n            temp_a = ''.join(temp_a)\n            temp_f = ''.join(temp_f)\n\n            if int(temp_f) > max_num:\n                max_num = int(temp_f)\n\n    return str(max_num)\n"
    },
    {
        "number": 4011,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = stdin.splitlines()[1]\n    f = list(map(int, stdin.splitlines()[2].split()))\n    max_num = ''\n\n    for i in range(n):\n        max_num += str(f[int(a[i]) - 1])\n\n    return max_num\n\nn = 4\na = \"1337\"\nf = \"1 2 5 4 6 6 3 1 9\"\n\nprint(solution(f\"{n}\\n{a}\\n{f}\"))  # Output: 1557 "
    },
    {
        "number": 4011,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = stdin.splitlines()[1]\n    f = [int(x) for x in stdin.splitlines()[2].split()]\n    f_dict = {i+1: f[i] for i in range(9)}\n\n    max_num = ''\n    for i in range(n):\n        if a[i] == '9':\n            max_num += '9'\n        else:\n            max_num += str(f_dict[int(a[i])])\n\n    return max_num"
    },
    {
        "number": 4011,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n, a, f = stdin.split('\\n')\n    n = int(n)\n    a = int(a)\n    f = [int(x) for x in f.split()]\n\n    # Initialize maximum result\n    max_result = 0\n\n    # Iterate over each digit in a\n    for i in range(n):\n        digit = a % 10\n        a //= 10\n\n        # If digit is not 1, apply the operation\n        if digit != 1:\n            # Compute the new digit\n            new_digit = f[digit - 1]\n\n            # Update the maximum result\n            max_result = max(max_result, new_digit)\n\n            # Replace the digit with the new digit\n            a = a * 10 + new_digit\n\n    # Add the remaining digits to the maximum result\n    max_result = max_result * (10 ** (n - a)) + a\n\n    # Return the maximum result\n    return str(max_result)"
    },
    {
        "number": 4011,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = stdin.split('\\n')[1]\n    f = list(map(int, stdin.split('\\n')[2].split()))\n    f = {i+1: f[i] for i in range(9)}\n    max_num = 0\n    for i in range(n):\n        for j in range(i, n):\n            digit = int(a[i:j+1])\n            digit_f = f[digit]\n            if digit_f > digit:\n                digit_f = digit_f - 1\n            max_num = max(max_num, digit_f)\n    return str(max_num)\n"
    },
    {
        "number": 4011,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = stdin.split(\"\\n\")[1]\n    f = list(map(int, stdin.split(\"\\n\")[2].split()))\n    max_num = -1\n    for i in range(n):\n        for j in range(i, min(i+10, n+1)):\n            num = int(a[i:j])\n            if num > max_num:\n                max_num = num\n            for x in range(10):\n                num = int(a[i:j])\n                for k in range(j-i):\n                    if num % 10 == x+1:\n                        num //= 10\n                    else:\n                        num //= 10\n                        num *= 10\n                        num += f[x]\n                        break\n                if num > max_num:\n                    max_num = num\n    return str(max_num)\n"
    },
    {
        "number": 4011,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = stdin.splitlines()[1]\n    f_values = [int(x) for x in stdin.splitlines()[2].split()]\n    f = {i+1: f_values[i] for i in range(9)}\n\n    max_num = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            num = int(a[i:j])\n            new_num = 0\n            for digit in str(num):\n                new_num = new_num * 10 + f[int(digit)]\n            max_num = max(max_num, new_num)\n\n    return str(max_num)"
    },
    {
        "number": 4011,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def f(x: int) -> int:\n        return f_dict[x]\n\n    n = int(stdin.split('\\n')[0])\n    a = stdin.split('\\n')[1]\n    f_dict = {i + 1: int(x) for i, x in enumerate(stdin.split('\\n')[2].split())}\n    max_num = 0\n\n    for i in range(n - 1, 0, -1):\n        if a[i] == a[i - 1]:\n            continue\n        else:\n            max_num += 1\n            break\n\n    for i in range(n - 1, -1, -1):\n        if max_num == 0:\n            break\n        else:\n            a = a[:i] + str(f(int(a[i]))) + a[i + 1:]\n            max_num -= 1\n\n    return a\n"
    },
    {
        "number": 4011,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = stdin.splitlines()[1]\n    f = [int(x) for x in stdin.splitlines()[2].split()]\n\n    max_digit = max(f)\n    min_digit = min(f)\n\n    # If max_digit and min_digit are the same, we don't need to replace any digit\n    if max_digit == min_digit:\n        return a\n\n    max_a = ''\n    for i in range(n):\n        if int(a[i]) == max_digit:\n            max_a = a[:i] + str(min_digit) + a[i+1:]\n            break\n\n    max_b = max_a\n    for i in range(n):\n        if int(max_a[i]) == min_digit:\n            max_b = max_a[:i] + str(max_digit) + max_a[i+1:]\n            break\n\n    return max_b\n"
    },
    {
        "number": 4012,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def find_min_ops(a, b, c):\n        b_multiple = 1\n        c_multiple = 1\n        if a > 1:\n            while b % a != 0:\n                b += 1\n                b_multiple += 1\n        if b > 1:\n            while c % b != 0:\n                c += 1\n                c_multiple += 1\n        return b_multiple + c_multiple\n\n    test_cases = stdin.split('\\n')\n    output = []\n    for case in test_cases[1:]:\n        a, b, c = map(int, case.split())\n        min_ops = find_min_ops(a, b, c)\n        output.append(f'{min_ops}\\n{a} {b} {c}')\n    return '\\n'.join(output)\n"
    },
    {
        "number": 4012,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def perform_operation(nums: List[int]) -> List[int]:\n        result = []\n        for num in nums:\n            if num % 2 == 0:\n                result.append(num // 2)\n            else:\n                result.append(num - 1)\n        return result\n\n    def is_divisible(nums: List[int]) -> bool:\n        return nums[0] <= nums[1] <= nums[2] and nums[1] % nums[0] == 0 and nums[2] % nums[1] == 0\n\n    t = int(stdin.splitlines()[0])\n    output = []\n\n    for i in range(1, t + 1):\n        a, b, c = map(int, stdin.splitlines()[i].split())\n        nums = [a, b, c]\n        operations = 0\n\n        while not is_divisible(nums):\n            nums = perform_operation(nums)\n            operations += 1\n\n        output.append(operations)\n        output.append(f\"{nums[0]} {nums[1]} {nums[2]}\")\n\n    return \"\\n\".join(map(str, output))"
    },
    {
        "number": 4012,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin)\n    output = []\n    for _ in range(test_cases):\n        a, b, c = map(int, input().split())\n        if a > b:\n            a, b = b, a\n        if b > c:\n            b, c = c, b\n        if a <= b <= c:\n            output.append(1)\n            output.append(f\"{a} {b} {c}\")\n        else:\n            # solve the problem with the constraints a<=b<=c\n            a, b, c = a % c, b % c, c % c\n            b = min(b, c)\n            if a <= b:\n                output.append(1)\n                output.append(f\"{a} {b} {c}\")\n            else:\n                # the solution is given by solving the equation\n                # (a + x) * (b + y) = c + z\n                # with x, y, z non-negative integers\n                # we can rewrite this equation as\n                # a * b = c * (x + y + z) - a * b * (x + y)\n                # and then we want to minimize x + y + z such that the equation is satisfied\n                # we can rewrite this equation as\n                # c * (x + y + z) = a * b + a * b * (x + y)\n                # and then we want to minimize x + y + z such that c divides the LHS and a divides the RHS\n                # this means that we want to minimize x + y + z such that a divides c and b divides a * (x + y + z)\n                # we can compute the LCM of a and b and then take the floor of the quotient of c by the LCM to obtain x + y + z\n                lcm_ab = lcmm(a, b)\n                z = c // lcm_ab\n                x = z * (a // lcm_ab)\n                y = z * (b // lcm_ab)\n                output.append(3)\n                output.append(f\"{a} {b} {c}\")\n\n    return \"\\n\".join(map(str, output))\n\ndef"
    },
    {
        "number": 4012,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def helper(a, b, c):\n        if b % a == 0 and c % b == 0:\n            return 0, a, b, c\n        res = float('inf')\n        for i in range(a, c+1):\n            if b % i == 0:\n                j = b // i\n                k = c // j\n                if i <= k <= c and k % j == 0:\n                    res = min(res, helper(i, j, k)[0] + 1)\n        return res, a, b, c\n\n    def find_triple(a, b, c):\n        res = float('inf')\n        for i in range(a, c+1):\n            if b % i == 0:\n                j = b // i\n                k = c // j\n                if i <= k <= c and k % j == 0:\n                    res = min(res, helper(i, j, k))\n        return res\n\n    t = int(input())\n    for i in range(t):\n        a, b, c = map(int, input().split())\n        res, A, B, C = find_triple(a, b, c)\n        print(res)\n        print(A, B, C)\n\n\ntest_input = \"\"\"8\n1 2 3\n123 321 456\n5 10 15\n15 18 21\n100 100 101\n1 22 29\n3 19 38\n6 30 46\n\"\"\"\n\nsolution(test_input) "
    },
    {
        "number": 4012,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_lst = stdin.split('\\n')\n    t = int(input_lst[0])\n    res = []\n    triplets = []\n\n    for i in range(1, t+1):\n        a, b, c = [int(x) for x in input_lst[i].split()]\n        min_ops = float('inf')\n        for x in range(a, c+1):\n            for y in range(b, c+1):\n                if y % x == 0:\n                    ops = 0\n                    while x > 1:\n                        ops += 1\n                        x -= 1\n                    while y > 1:\n                        ops += 1\n                        y -= 1\n                    if ops < min_ops:\n                        min_ops = ops\n                        triplets.append((x, y, y//x))\n        res.append(min_ops)\n\n    output = []\n    for i in range(t):\n        output.append(str(res[i]))\n        output.append(str(triplets[i]))\n\n    return '\\n'.join(output)\n"
    },
    {
        "number": 4012,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def operations(a, b, c):\n        res = 0\n        while a > 1:\n            if a % 2 == 0:\n                a //= 2\n            else:\n                a -= 1\n            res += 1\n        while b % a != 0:\n            b += 1\n            res += 1\n        while c % b != 0:\n            c += 1\n            res += 1\n        return res\n\n    def print_triple(a, b, c):\n        return f\"{a} {b} {c}\"\n\n    t = int(stdin.readline())\n    for _ in range(t):\n        a, b, c = map(int, stdin.readline().split())\n        res = operations(a, b, c)\n        print(res)\n        print(print_triple(a, b, c))"
    },
    {
        "number": 4012,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def get_result(a, b, c):\n        if a >= b and b >= c:\n            return 0, a, b, c\n        elif b >= a and a >= c:\n            return 1, b, a, c\n        elif c >= b and b >= a:\n            return 1, b, c, a\n        else:\n            return -1, 0, 0, 0\n\n    def is_divisible(a, b, c):\n        return b % a == 0 and c % b == 0\n\n    t = int(stdin.split(\"\\n\")[0])\n    outputs = []\n    for i in range(1, t + 1):\n        a, b, c = map(int, stdin.split(\"\\n\")[i].split())\n        result, A, B, C = get_result(a, b, c)\n        if result == -1:\n            outputs.append(\"Impossible\")\n        else:\n            if is_divisible(A, B, C):\n                outputs.append(result)\n            else:\n                while not is_divisible(A, B, C):\n                    A += 1\n                    if A >= b:\n                        A = 1\n                        B += 1\n                        if B >= c:\n                            B = 1\n                            C += 1\n                outputs.append(result)\n            outputs.append(\"{} {} {}\".format(A, B, C))\n\n    return \"\\n\".join(map(str, outputs))\n"
    },
    {
        "number": 4012,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    t = int(input_list[0])\n    input_list = input_list[1:]\n    output_list = []\n    for i in range(t):\n        a, b, c = map(int, input_list[i].split())\n        min_operations = float('inf')\n        for d in range(1, a+1):\n            if b % d == 0 and c % d == 0:\n                break\n            operations = 0\n            while b % d != 0:\n                operations += 1\n                b += d\n            while c % d != 0:\n                operations += 1\n                c += d\n            min_operations = min(min_operations, operations)\n        output_list.append(min_operations)\n        output_list.append(f\"{d} {d} {d}\")\n    \n    return '\\n'.join(map(str, output_list))\n\ndef"
    },
    {
        "number": 4012,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    output = []\n\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        min_ops = float('inf')\n        result = []\n\n        for i in range(a, c+1):\n            for j in range(b, c+1):\n                if j % i == 0 and j % b == 0:\n                    k = j\n                    ops = 0\n\n                    while k != i:\n                        if k > i:\n                            k -= 1\n                            ops += 1\n                        else:\n                            k += 1\n                            ops += 1\n\n                    if ops < min_ops:\n                        min_ops = ops\n                        result = [i, j, k]\n\n        output.append(min_ops)\n        output.append(result[0])\n        output.append(result[1])\n        output.append(result[2])\n\n    return '\\n'.join(map(str, output))"
    },
    {
        "number": 4012,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    cases = [stdin.split()[1:]]\n    cases += [input().split() for _ in range(t-1)]\n    \n    for case in cases:\n        a, b, c = map(int, case)\n        operations = []\n        \n        if a > 1:\n            operations.append(-1)\n        if a < b:\n            operations.append(1)\n        if b > 1:\n            operations.append(-1)\n        if b < c:\n            operations.append(1)\n        if c > 1:\n            operations.append(-1)\n        \n        if b % a == 0 and c % b == 0:\n            print(\"0\")\n        else:\n            print(\"1\")\n            print(a, b, c)\n            \n        min_operations = len(operations)\n        for op in operations:\n            if op == -1 and a > 1:\n                a -= 1\n            elif op == 1 and a < b:\n                a += 1\n            if op == -1 and b > 1:\n                b -= 1\n            elif op == 1 and b < c:\n                b += 1\n            if op == -1 and c > 1:\n                c -= 1\n            \n            if b % a == 0 and c % b == 0:\n                min_operations = min(min_operations, len(operations))\n                print(min_operations)\n                print(a, b, c)\n                break\n            else:\n                if op == -1 and a > 1:\n                    a -= 1\n                elif op == 1 and a < b:\n                    a += 1\n                if op == -1 and b > 1:\n                    b -= 1\n                elif op == 1 and b < c:\n                    b += 1\n                if op == -1 and c > 1:\n                    c -= 1\n                    \n    return \"\""
    },
    {
        "number": 4013,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    if n == 2:\n        return str(max(a) - min(a)))\n\n    instability = max(a) - min(a)\n    a.remove(max(a))\n    new_instability = max(a) - min(a)\n\n    return str(min(instability, new_instability))\n"
    },
    {
        "number": 4013,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    arr = list(map(int, stdin.split('\\n')[1].split()))\n    \n    max_value = max(arr)\n    min_value = min(arr)\n    instability = max_value - min_value\n    \n    return instability\n\n\ninput_stdin = '''4\n1 3 3 7\n2\n1 100000'''\n\nresult = solution(input_stdin)\nprint(result)\n"
    },
    {
        "number": 4013,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    \n    min_instability = float('inf')\n    \n    for i in range(n):\n        min_instability = min(min_instability, max(a) - min(a[:i] + a[i+1:]))\n    \n    return min_instability"
    },
    {
        "number": 4013,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = [int(x) for x in stdin.splitlines()[1].split()]\n    min_instability = max(a) - min(a)\n    a.remove(max(a))\n    min_instability = min(min_instability, max(a) - min(a))\n    return min_instability"
    },
    {
        "number": 4013,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    min_val = min(a)\n    max_val = max(a)\n    instability = max_val - min_val\n    if n == 2:\n        if a[0] == a[1]:\n            instability = 0\n    else:\n        a.remove(min_val)\n        min_val = min(a)\n        max_val = max(a)\n        instability = max_val - min_val\n    return str(instability)\n"
    },
    {
        "number": 4013,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    min_instability = max(a) - min(a)\n    for i in range(n):\n        instability = max(a) - min(a) - a[i]\n        if instability < min_instability:\n            min_instability = instability\n    return str(min_instability)\n\n\ndef"
    },
    {
        "number": 4013,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n    min_instability = float('inf')\n\n    for i in range(n):\n        max_element = max(a)\n        a.remove(max_element)\n        min_instability = min(min_instability, max_element - min(a))\n        a.append(max_element)\n\n    return min_instability\n\nn = int(input())\na = list(map(int, input().split()))\n\nprint(solution(str(n) + \"\\n\" + \" \".join(map(str, a)))) "
    },
    {
        "number": 4013,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    \n    max_val = max(a)\n    min_val = min(a)\n    instability = max_val - min_val\n    \n    if instability > 0:\n        min_instability = instability\n        for i in range(n):\n            a_new = a.copy()\n            a_new.pop(i)\n            max_val_new = max(a_new)\n            min_val_new = min(a_new)\n            instability_new = max_val_new - min_val_new\n            if instability_new < min_instability:\n                min_instability = instability_new\n                \n        return str(min_instability)\n    else:\n        return str(instability)"
    },
    {
        "number": 4013,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    max_value = max(a)\n    min_value = min(a)\n    \n    instability = max_value - min_value\n    \n    return instability\n\ninput_stdin = '''4\n1 3 3 7\n2\n1 100000\n'''\n\noutput_stdout = '''2\n0\n'''\n\nprint(solution(input_stdin))\nprint(output_stdout) "
    },
    {
        "number": 4013,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n    \n    min_instability = float(\"inf\")\n    for i in range(n):\n        temp_a = a.copy()\n        temp_a.pop(i)\n        temp_instability = max(temp_a) - min(temp_a)\n        min_instability = min(min_instability, temp_instability)\n    \n    return str(min_instability)\n\ninput_stdin = '''4\n1 3 3 7'''\n\nprint(solution(input_stdin)) # Output: 2\n\ninput_stdin = '''2\n1 100000'''\n\nprint(solution(input_stdin)) # Output: 0 "
    },
    {
        "number": 4014,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    n, m = map(int, input_data[0].split())\n    exams = [list(map(int, input_data[i].split())) for i in range(1, m+1)]\n\n    def is_valid(schedule: list) -> bool:\n        for i in range(1, m+1):\n            if schedule[exams[i-1][0]-1] != i:\n                return False\n        return True\n\n    def is_consistent(schedule: list) -> bool:\n        days = [0] * n\n        for i in range(1, m+1):\n            s, d, c = exams[i-1]\n            if days[s-1] != 0:\n                return False\n            for j in range(s, d):\n                if days[j] != 0:\n                    return False\n                days[j] = i\n        return True\n\n    def backtrack(schedule: list, used: set, result: list) -> None:\n        if len(used) == m:\n            if is_valid(schedule) and is_consistent(schedule):\n                for i in range(n):\n                    result.append(schedule[i])\n                print(' '.join(map(str, result)))\n            return\n\n        for i in range(1, m+1):\n            if i not in used:\n                schedule[exams[i-1][0]-1] = i\n                used.add(i)\n                backtrack(schedule, used, result)\n                used.remove(i)\n\n    schedule = [0] * n\n    used = set()\n    result = []\n    backtrack(schedule, used, result)\n    if not result:\n        print(-1)\n"
    },
    {
        "number": 4014,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    n, m = map(int, input_list[0].split())\n    s_list = [list(map(int, input_list[i].split())) for i in range(1, m + 1)]\n\n    # Find the days where exams are held\n    exam_days = set()\n    for s, d, _ in s_list:\n        exam_days.add(d)\n\n    # Initialize the schedule\n    schedule = [0] * n\n\n    # Iterate through the exams and fill the schedule\n    for i in range(m):\n        s, d, c = s_list[i]\n\n        # Check if Petya can prepare and pass the exam\n        if s <= d - c - 1:\n            schedule[s - 1] = i + 1\n            for j in range(s, d - c - 1):\n                schedule[j] = i + 1\n        else:\n            return -1\n\n    # Fill the remaining days with rests\n    rest_days = [i for i in range(n) if i not in exam_days]\n    for j in rest_days:\n        schedule[j] = 0\n\n    return \" \".join(map(str, schedule))"
    },
    {
        "number": 4014,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    exams = []\n    for _ in range(m):\n        exams.append(list(map(int, stdin.split()[2:])))\n\n    def is_possible(schedule):\n        days = [0] * n\n        for i, exam in enumerate(exams, start=1):\n            if exam[1] in schedule and not any(days[j-1:exam[0]-1]) and days[exam[1]-1] == 0:\n                days[exam[0]-1] = m+1\n                days[exam[1]-1] = i\n            elif exam[0]-1 in schedule and not any(days[j-1:exam[1]-1]) and days[exam[0]-1] == 0:\n                days[exam[0]-1] = i\n            else:\n                return False\n        return True\n\n    schedule = []\n    while not is_possible(schedule):\n        schedule = [0] * n\n        schedule[0] = m + 1\n        schedule[1] = 1\n        schedule[2] = 2\n\n        for i in range(3, n):\n            schedule[i] = 0\n\n        if not is_possible(schedule):\n            return -1\n\n    return ' '.join(map(str, schedule))\n"
    },
    {
        "number": 4014,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    exams = [tuple(map(int, input().split())) for _ in range(m)]\n    exams.sort(key=lambda x: x[1])\n\n    result = []\n    prepared = set()\n    for i, (s, d, c) in enumerate(exams):\n        if s in prepared:\n            result.append(i + 1)\n            prepared.remove(s)\n            continue\n        for j in range(s, d - 1):\n            if j - s >= c:\n                prepared.remove(j - c)\n            prepared.add(j)\n        result.append(0)\n\n    if len(prepared) == n:\n        result.append(m + 1)\n    else:\n        return -1\n\n    return ' '.join(map(str, result))\n\n\ndef"
    },
    {
        "number": 4014,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    exams = []\n    for _ in range(m):\n        s, d, c = map(int, input().split())\n        exams.append((s, d, c))\n\n    # Sort exams by day\n    exams.sort(key=lambda x: x[1])\n\n    # Initialize schedule as None for each day\n    schedule = [None] * (n + 1)\n\n    # Iterate over exams\n    for i, (s, d, c) in enumerate(exams):\n        # Check if Petya can pass the exam in the given schedule\n        if c <= d - s:\n            for j in range(s, d - c):\n                if schedule[j] is None:\n                    schedule[j] = m + 1\n                elif isinstance(schedule[j], int) and schedule[j] == i + 1:\n                    # Petya is already preparing or passing the exam in this day\n                    continue\n                else:\n                    # Petya is preparing or passing another exam in this day\n                    break\n            else:\n                # Check if Petya can prepare for the exam in the last day\n                if schedule[-1] is None and (d - s) == c:\n                    schedule[-1] = i + 1\n                else:\n                    # Petya can not prepare or pass the exam\n                    return -1\n        else:\n            # Petya can not prepare or pass the exam\n            return -1\n\n    # Fill the rest days with zeros\n    for j in range(s, d - c, c):\n        if schedule[j] is None:\n            schedule[j] = 0\n\n    return ' '.join(map(str, schedule))"
    },
    {
        "number": 4014,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    exams = [list(map(int, stdin.split()[i:i+3])) for i in range(2, 2+m*3, 3)]\n\n    # Sort exams by day\n    exams.sort(key=lambda x: x[1])\n\n    # Check if Petya can pass all exams\n    if exams[-1][1] > n:\n        return -1\n\n    # Initialize schedule\n    schedule = [0] * n\n\n    # Iterate through exams\n    for i, exam in enumerate(exams, start=1):\n        s, d, c = exam\n\n        # Check if Petya can prepare and pass exam i\n        if s <= n and c <= n:\n            # Check if Petya has enough days to prepare and pass exam i\n            if s <= d - c:\n                # Petya prepares for exam i in day s\n                schedule[s-1] = i\n\n                # Petya passes exam i in day d-c\n                schedule[d-c-1] = m + 1\n            else:\n                # Petya can't prepare and pass exam i\n                return -1\n        else:\n            # Petya can't prepare and pass exam i\n            return -1\n\n    # Check if Petya has a rest day in the last day\n    if schedule[-1] == 0:\n        return -1\n\n    return schedule\n"
    },
    {
        "number": 4014,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    exams = [list(map(int, stdin.split()[i:i+3])) for i in range(2, n * m + 2, 3)]\n\n    def is_possible(exams):\n        days = set()\n        for exam in exams:\n            if exam[1] in days:\n                return False\n            days.update(range(exam[0], exam[1]))\n        return True\n\n    def schedule(exams):\n        days = set()\n        schedule = [0] * n\n        for exam in exams:\n            if exam[1] in days:\n                return -1\n            for j in range(exam[0], exam[1]):\n                if schedule[j] > 0:\n                    if schedule[j] == m + 1:\n                        return -1\n                    schedule[j] = -1\n            days.update(range(exam[0], exam[1]))\n            for j in range(exam[2]):\n                schedule[exam[0] + j] = exam[1] - exam[0]\n        return schedule\n\n    if not is_possible(exams):\n        return -1\n    else:\n        return schedule(exams)"
    },
    {
        "number": 4014,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    if m > n:\n        return -1\n    days = list(map(int, stdin.split()[2:]))\n    days = [days[i:i+3] for i in range(0, len(days), 3)]\n\n    def is_valid(schedule: list) -> bool:\n        for i in range(m):\n            if schedule.count(i + 1) > 1:\n                return False\n        return True\n\n    def generate_schedule(days: list, schedule: list, day: int) -> list:\n        if day == n:\n            if is_valid(schedule):\n                return schedule\n            else:\n                return []\n\n        for i in range(m):\n            if days[i][0] <= day < days[i][1]:\n                schedule.append(i + 1)\n                schedule.extend([0] * days[i][2])\n                result = generate_schedule(days, schedule, day + 1)\n                if result:\n                    return result\n                schedule.pop()\n\n        return []\n\n    schedule = generate_schedule(days, [], 1)\n    if schedule:\n        return schedule\n    else:\n        return -1\n\n\ninput_data = [\n    \"5 2\",\n    \"1 3 1\",\n    \"1 5 1\",\n    \"3 2\",\n    \"1 3 1\",\n    \"1 2 1\",\n    \"10 3\",\n    \"4 7 2\",\n    \"1 10 3\",\n    \"8 9 1\",\n]\n\nfor input_line in input_data:\n    output = solution(input_line)\n    print(output)\n"
    },
    {
        "number": 4014,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    n, m = map(int, input_list[0].split())\n    if n < 2 or n > 100 or m < 1 or m > n:\n        return -1\n\n    exams = [[] for _ in range(m)]\n    for i in range(m):\n        s_i, d_i, c_i = map(int, input_list[i+1].split())\n        if s_i < 1 or d_i > n or c_i < 1 or c_i > n:\n            return -1\n        exams[i] = (s_i, d_i, c_i)\n\n    days = [0] * (n+1)\n    for s_i, d_i, c_i in exams:\n        for j in range(s_i, d_i):\n            days[j] += c_i\n\n    if max(days) > n:\n        return -1\n\n    result = []\n    for j in range(1, n+1):\n        if days[j] == 0:\n            result.append(0)\n        elif days[j] == 1:\n            for i, (s_i, d_i, c_i) in enumerate(exams):\n                if j == d_i:\n                    result.append(i+1)\n                    break\n        else:\n            for i, (s_i, d_i, c_i) in enumerate(exams):\n                if j == s_i:\n                    result.append(m+1)\n                    days[j] -= 1\n                    break\n                elif j == d_i:\n                    result.append(i+1)\n                    days[j] -= 1\n                    break\n                elif s_i < j < d_i:\n                    result.append(i+1)\n                    days[j] -= 1\n                    if days[j] == 0:\n                        break\n\n    if max(days) > 0:\n        return -1\n\n    return ' '.join(map(str, result))"
    },
    {
        "number": 4014,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    s = list(map(int, stdin.split()[2:2+m]))\n    d = list(map(int, stdin.split()[2+m:2+2*m]))\n    c = list(map(int, stdin.split()[2+2*m:2+3*m]))\n\n    # Find the longest preparation day\n    max_c = max(c)\n\n    # Check if it's possible to prepare and pass all exams\n    if n < max_c * m:\n        return -1\n\n    schedule = [0] * n\n    days = [False] * n\n    for i in range(m):\n        for j in range(s[i]-1, d[i]-c[i]):\n            if not days[j]:\n                schedule[j] = i + 1\n                days[j] = True\n                break\n\n    return \" \".join(map(str, schedule))\n"
    },
    {
        "number": 4015,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_values = stdin.split()\n    n = int(input_values[0])\n    m = int(input_values[1])\n\n    if m % n == 0:\n        return 0\n\n    if m < n:\n        return -1\n\n    moves = 0\n    while m > n:\n        if n * 2 <= m:\n            n *= 2\n        elif n * 3 <= m:\n            n *= 3\n        else:\n            return -1\n        moves += 1\n\n    return moves\n\ninput_values = \"120 51840\"\noutput = solution(input_values)\nprint(output) "
    },
    {
        "number": 4015,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin.strip()\n    n, m = map(int, input_str.split())\n\n    if n == m:\n        return \"0\"\n    if n > m:\n        return \"-1\"\n\n    # Initialize the number of moves and the number of times to double or triple\n    moves = 0\n    double_count = 0\n    triple_count = 0\n\n    # Keep doubling n until it is equal to m\n    while n != m:\n        if n % 2 == 0:\n            n //= 2\n            double_count += 1\n        elif n % 3 == 0:\n            n //= 3\n            triple_count += 1\n        else:\n            break\n        moves += 1\n\n    # If n is not equal to m, it is impossible to transform n to m\n    if n != m:\n        return \"-1\"\n\n    # If there are any odd numbers of doubling or tripling, it is impossible to transform n to m\n    if double_count % 2 != 0 or triple_count % 2 != 0:\n        return \"-1\"\n\n    return str(moves)\n"
    },
    {
        "number": 4015,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    n, m = map(int, input_list)\n    \n    if m % 2 == 0 and n % 2 == 0:\n        moves = m // 2 - n // 2\n    elif m % 3 == 0 and n % 3 == 0:\n        moves = m // 3 - n // 3\n    else:\n        moves = -1\n    \n    return str(moves)\n"
    },
    {
        "number": 4015,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    \n    if n > m:\n        return -1\n    \n    # number of times we need to multiply n by 3\n    # to get to m\n    count_3 = (m - n) // 3\n    \n    # number of times we need to multiply n by 2\n    # to get to m\n    count_2 = (m - n - count_3 * 3) // 2\n    \n    if count_2 + count_3 * 3 == m - n:\n        return count_2 + count_3 * 3\n    else:\n        return -1\n\n\ndef"
    },
    {
        "number": 4015,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n\n    if n > m:\n        n, m = m, n\n\n    if m % n == 0:\n        return 0\n\n    moves = 0\n    while n != m:\n        if n * 2 == m:\n            n *= 2\n        elif n * 3 == m:\n            n *= 3\n        else:\n            return -1\n        moves += 1\n\n    return moves\n\n\ndef"
    },
    {
        "number": 4015,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if m % n == 0:\n        return 0\n    if n == 1:\n        return -1\n    c = 0\n    while n != m:\n        if n % 2 == 0 and m % 2 == 0:\n            n //= 2\n            m //= 2\n        elif n % 2 == 0:\n            n //= 2\n        elif m % 3 == 0:\n            m //= 3\n        else:\n            n *= 2\n            c += 1\n    return c + 1\n"
    },
    {
        "number": 4015,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin.strip()\n    n, m = map(int, input_str.split())\n    moves = 0\n    if n > m:\n        return -1\n    while n != m:\n        if n % 2 == 0 and m % 2 == 0:\n            n //= 2\n            m //= 2\n        elif n % 3 == 0 and m % 3 == 0:\n            n //= 3\n            m //= 3\n        else:\n            break\n        moves += 1\n    return moves if n == m else -1\n"
    },
    {
        "number": 4015,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_values = list(map(int, stdin.split()))\n    n = input_values[0]\n    m = input_values[1]\n\n    if n > m:\n        return -1\n\n    moves = 0\n    while n != m:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n *= 3\n            moves += 1\n\n        if n > m:\n            return -1\n\n    return moves\n"
    },
    {
        "number": 4015,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_values = list(map(int, stdin.split()))\n    n = input_values[0]\n    m = input_values[1]\n\n    if n == m:\n        return '0'\n\n    steps = 0\n    while n != m:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n *= 3\n            steps += 1\n\n        if n == m:\n            return str(steps)\n\n        if n % 2 == 0:\n            n *= 3\n            steps += 1\n\n        if n == m:\n            return str(steps)\n\n        n *= 3\n        steps += 1\n\n    return '-1'\n"
    },
    {
        "number": 4015,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    \n    if n == m:\n        return \"0\"\n    \n    if n > m:\n        return \"-1\"\n    \n    steps = 0\n    while n != m:\n        n *= 2\n        steps += 1\n        if n >= m:\n            steps -= 1\n            break\n    if n == m:\n        return str(steps)\n    else:\n        return \"-1\""
    },
    {
        "number": 4016,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n, k = map(int, input_list[0].split())\n    t = input_list[1]\n    \n    s = t * (k + n - 1)\n    return s"
    },
    {
        "number": 4016,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    t = stdin.split()[2]\n\n    s = k * t\n    return s"
    },
    {
        "number": 4016,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    t = stdin.split()[2]\n    result = t * k\n    return result\n\n\ninput_str = \"\"\"3 4\naba\n3 2\ncat\n\"\"\"\noutput_str = \"\"\"ababababa\ncatcat\n\"\"\"\n\nfor line in input_str.strip().split(\"\\n\"):\n    print(solution(line))\n    "
    },
    {
        "number": 4016,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[1:3])\n    t = stdin.split()[3]\n    result = t * (k // len(t) + 1)[:k]\n    return result[:n * k]"
    },
    {
        "number": 4016,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    t = stdin.split()[2]\n    \n    s = k * t\n    return s\n\n\ndef"
    },
    {
        "number": 4016,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = input()\n    s = \"\"\n    for i in range(k):\n        s += t\n    if len(s) % n != 0:\n        s += t * (len(s) // n + 1)\n    return s\n\ndef"
    },
    {
        "number": 4016,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input(stdin).split())\n    t = input()\n    s = t * (k // len(t) + 1)[:k // len(t)]\n    return s\n\nprint(solution(\"3 4\\naba\"))\nprint(solution(\"3 2\\ncat\")) "
    },
    {
        "number": 4016,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    t = stdin.split()[2]\n    \n    s = t * (k // len(t) + 1)\n    s = s[:k]\n    \n    return s\n\n\ndef"
    },
    {
        "number": 4016,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    t = stdin.split()[2]\n    \n    if k == 1:\n        return t\n    \n    s = k * t\n    return s\n\ndef"
    },
    {
        "number": 4016,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    t = stdin.split()[2]\n\n    if k >= n:\n        return t * (k // n) + t[:k % n]\n    else:\n        s = t\n        while k > 0:\n            s += t\n            k -= n\n        return s[:-(k % n)]\n"
    },
    {
        "number": 4017,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_good(arr: list) -> bool:\n        total_sum = sum(arr)\n        for i in range(len(arr)):\n            missing_sum = total_sum - arr[i]\n            if missing_sum in arr:\n                return True\n        return False\n\n    n = int(stdin.splitlines()[0])\n    arr = list(map(int, stdin.splitlines()[1].split()))\n    nice_indices = []\n\n    for i in range(n):\n        if is_good(arr[:i] + arr[i+1:]):\n            nice_indices.append(i)\n\n    result = len(nice_indices)\n    if result > 0:\n        nice_indices.sort()\n        output = '\\n'.join(map(str, nice_indices))\n    else:\n        output = ''\n\n    return f'{result}\\n{output}'\n"
    },
    {
        "number": 4017,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = [int(x) for x in stdin.split('\\n')[1].split()]\n    good_indices = []\n    for i in range(n):\n        a_copy = a.copy()\n        a_copy.pop(i)\n        if sum(a_copy) == a[i]:\n            good_indices.append(i)\n    k = len(good_indices)\n    output = str(k) + '\\n'\n    if k > 0:\n        output += ' '.join(map(str, good_indices))\n    return output\n"
    },
    {
        "number": 4017,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    nice_indices = []\n\n    for i in range(n):\n        new_array = a.copy()\n        new_array.pop(i)\n        if sum(new_array) == a[i]:\n            nice_indices.append(i)\n\n    if not nice_indices:\n        return \"0\\n\"\n\n    k = len(nice_indices)\n    return f\"{k}\\n\" + \" \".join(map(str, nice_indices)) + \"\\n\" "
    },
    {
        "number": 4017,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    nice_indices = []\n\n    for i in range(n):\n        temp_sum = sum(a) - a[i]\n        if temp_sum == sum(a) / 2:\n            nice_indices.append(i + 1)\n            a.append(a[i])\n            a.remove(a[i])\n\n    if len(nice_indices) == 0:\n        return \"0\\n\"\n    else:\n        return f\"{len(nice_indices)}\\n\" + \"\\n\".join(map(str, nice_indices))\n"
    },
    {
        "number": 4017,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n    good_indices = []\n\n    for i in range(n):\n        removed_array = [x for j, x in enumerate(a) if j != i]\n        if sum(removed_array) == a[i]:\n            good_indices.append(i)\n\n    if not good_indices:\n        return \"0\\n\"\n\n    good_indices.sort()\n    k = len(good_indices)\n    output = f\"{k}\\n\"\n\n    for i in range(k):\n        output += f\"{good_indices[i]} \"\n\n    return output\n\n\ndef"
    },
    {
        "number": 4017,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    n = int(input_list[0])\n    a = list(map(int, input_list[1].split()))\n    good_indices = []\n\n    for i in range(n):\n        current_sum = sum(a) - a[i]\n        if current_sum == sum(a) - a[i]:\n            good_indices.append(i)\n\n    if good_indices:\n        print(len(good_indices))\n        for index in good_indices:\n            print(index, end=\" \")\n    else:\n        print(0)\n"
    },
    {
        "number": 4017,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def is_good(arr: list) -> bool:\n        total_sum = sum(arr)\n        for i in range(len(arr)):\n            if total_sum - arr[i] == 0:\n                return True\n        return False\n\n    def find_nice_indices(arr: list) -> list:\n        nice_indices = []\n        for i in range(len(arr)):\n            new_arr = arr.copy()\n            new_arr.pop(i)\n            if is_good(new_arr):\n                nice_indices.append(i)\n        return nice_indices\n\n    def print_result(nice_indices: list) -> str:\n        result = len(nice_indices)\n        if result == 0:\n            return \"0\"\n        else:\n            return f\"{result}\\n{' '.join(map(str, nice_indices))}\"\n\n    n = int(stdin.splitlines()[0])\n    arr = list(map(int, stdin.splitlines()[1].split()))\n    nice_indices = find_nice_indices(arr)\n    result = print_result(nice_indices)\n    return result\n\n\ninput_data = \"\"\"5\n2 5 1 2 2\"\"\"\n\nprint(solution(input_data)) "
    },
    {
        "number": 4017,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    nice_indices = []\n    for i in range(n):\n        temp_a = a[:i] + a[i+1:]\n        if sum(temp_a) == a[i]:\n            nice_indices.append(i+1)\n    print(len(nice_indices))\n    if len(nice_indices) > 0:\n        print(' '.join(map(str, nice_indices)))\n    else:\n        print(0)\n        \n"
    },
    {
        "number": 4017,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = [int(x) for x in stdin.splitlines()[1].split()]\n    \n    good_indices = []\n    for i in range(n):\n        new_a = a.copy()\n        new_a.pop(i)\n        new_sum = sum(new_a)\n        if any(x == new_sum for x in new_a):\n            good_indices.append(i)\n    \n    print(len(good_indices))\n    if good_indices:\n        print(\" \".join(map(str, good_indices)))\n    \n"
    },
    {
        "number": 4017,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_data = list(map(int, stdin.split()))\n    n = input_data.pop(0)\n    a = input_data\n\n    def is_good(array):\n        return any(sum(array) == x * (n - 1) for x in range(1, n + 1))\n\n    def get_good_indices(array):\n        return [i + 1 for i in range(n) if is_good(array[:i] + array[i + 1:])]\n\n    good_indices = get_good_indices(a)\n\n    result = len(good_indices)\n    output = \"\"\n\n    if result > 0:\n        output += \" \".join(map(str, good_indices))\n\n    return result, output\n"
    },
    {
        "number": 4018,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    s = stdin.split()[-1]\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n\n    for i in range(n + 1):\n        for j in range(i, n + 1):\n            if i == 0:\n                dp[j] = 0\n            else:\n                dp[j] = min(dp[j], dp[i - 1] + n - j + 1)\n\n    if dp[n] >= k:\n        return -1\n\n    result = dp[n]\n    for i in range(n, 0, -1):\n        if dp[i] < result:\n            result = dp[i]\n            k -= 1\n\n    return result\n\n\ndef"
    },
    {
        "number": 4018,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    s = input()\n\n    def generate_subsequences(s: str) -> set:\n        subsequences = set()\n        for i in range(len(s)):\n            for j in range(i, len(s)):\n                subsequences.add(s[i:j+1])\n        return subsequences\n\n    def calculate_cost(subsequences: set) -> int:\n        cost = 0\n        for subsequence in subsequences:\n            cost += len(subsequence) - len(set(subsequence))\n        return cost\n\n    subsequences = generate_subsequences(s)\n    if k > len(subsequences):\n        return -1\n    else:\n        return calculate_cost(subsequences)\n\ndef"
    },
    {
        "number": 4018,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.splitlines()[0].split())\n    s = stdin.splitlines()[1]\n\n    def is_subsequence(t: str) -> bool:\n        i = 0\n        for c in s:\n            if c == t[i]:\n                i += 1\n                if i == len(t):\n                    return True\n        return False\n\n    subsequences = [s[i:j] for i in range(len(s)) for j in range(i + 1, len(s) + 1)]\n    subsequences = [t for t in subsequences if is_subsequence(t)]\n\n    if k > len(subsequences):\n        return -1\n\n    subsequences.sort(key=lambda x: len(x))\n    total_cost = 0\n    for t in subsequences[:k]:\n        total_cost += n - len(t)\n\n    return total_cost\n\n\ndef"
    },
    {
        "number": 4018,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split(\"\\n\")\n    n, k = map(int, input_lines[0].split())\n    s = input_lines[1]\n\n    def is_subsequence(t: str, s: str) -> bool:\n        t_idx, s_idx = 0, 0\n        while s_idx < len(s):\n            if s[s_idx] == t[t_idx]:\n                t_idx += 1\n            if t_idx == len(t):\n                return True\n            s_idx += 1\n        return False\n\n    def min_cost(s: str, k: int) -> int:\n        subseqs = set()\n        for i in range(len(s)):\n            for j in range(i + 1, len(s) + 1):\n                subseqs.add(s[i:j])\n                if len(subseqs) >= k:\n                    return sum(len(subseq) - 1 for subseq in subseqs)\n        return -1\n\n    if k == 1:\n        return min_cost(s, k)\n\n    subseqs = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            subseq = s[i:j]\n            if len(subseq) > 1 and is_subsequence(subseq[:-1], s):\n                subseqs.add(subseq)\n\n    return min_cost(s, k) if len(subseqs) >= k else -1\n"
    },
    {
        "number": 4018,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    s = stdin.split()[2]\n    \n    # Calculate the length of each subsequence\n    subseq_lengths = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if s[i] != s[j]:\n                subseq_lengths[i] = max(subseq_lengths[i], subseq_lengths[j] + 1)\n                \n    # Calculate the minimum cost to obtain a set S of size k\n    min_cost = float('inf')\n    for i in range(n):\n        if subseq_lengths[i] == k:\n            min_cost = min(min_cost, n - subseq_lengths[i])\n        elif subseq_lengths[i] < k:\n            min_cost = min(min_cost, n - subseq_lengths[i])\n            for j in range(i + 1, n):\n                if subseq_lengths[j] <= k - subseq_lengths[i]:\n                    min_cost = min(min_cost, n - subseq_lengths[i] - subseq_lengths[j])\n    \n    return min_cost if min_cost != float('inf') else -1\n"
    },
    {
        "number": 4018,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_subsequence(s1: str, s2: str) -> bool:\n        i = 0\n        for char in s2:\n            if char == s1[i]:\n                i += 1\n                if i == len(s1):\n                    return True\n        return False\n\n    n, k = map(int, stdin.split()[:2])\n    s = stdin.split()[2]\n\n    subsequences = set()\n    total_cost = 0\n\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            subseq = s[i:j+1]\n            if subseq not in subsequences:\n                subsequences.add(subseq)\n                total_cost += n - len(subseq)\n\n                if len(subsequences) == k:\n                    return str(total_cost)\n\n    return \"-1\"\n"
    },
    {
        "number": 4018,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def is_subsequence(s: str, t: str) -> bool:\n        i = 0\n        for c in s:\n            while i < len(t) and t[i] != c:\n                i += 1\n            if i == len(t):\n                return False\n            i += 1\n        return True\n\n    def min_cost(s: str, k: int) -> int:\n        n = len(s)\n        dp = [[0] * k for _ in range(n)]\n\n        for i in range(n):\n            dp[i][0] = 0\n\n        for j in range(1, k):\n            for i in range(n):\n                dp[i][j] = float('inf')\n                for x in range(i + 1):\n                    t = s[x:i + 1]\n                    if len(t) <= j and is_subsequence(t, s):\n                        dp[i][j] = min(dp[i][j], dp[x - 1][j - len(t)] + n - i)\n\n        return dp[n - 1][k - 1] if dp[n - 1][k - 1] != float('inf') else -1\n\n    n, k = map(int, input().split())\n    s = input()\n\n    return str(min_cost(s, k))\n"
    },
    {
        "number": 4018,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.splitlines()[0].split())\n    s = stdin.splitlines()[1]\n\n    s = sorted(set(s))\n    if len(s) < k:\n        return -1\n\n    cost = 0\n    for i in range(k - 1):\n        cost += n - s.index(s[i]) - i\n\n    return cost\n"
    },
    {
        "number": 4018,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_subsequence(t: str, s: str) -> bool:\n        i, j = 0, 0\n        while i < len(t) and j < len(s):\n            if t[i] == s[j]:\n                i += 1\n            j += 1\n        return i == len(t)\n\n    n, k = map(int, stdin.split()[:2])\n    s = stdin.split()[2]\n\n    if k == 1:\n        return 0\n\n    subsequences = set()\n    for i in range(1, n + 1):\n        for j in range(n - i + 1):\n            t = s[j:j + i]\n            if len(t) == 1 and t[0] == s[0]:\n                continue\n            if is_subsequence(t, s):\n                subsequences.add(t)\n                if len(subsequences) == k:\n                    return sum(len(t) for t in subsequences)\n\n    return -1\n"
    },
    {
        "number": 4018,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    s = stdin.split()[2]\n\n    if k > n:\n        return -1\n\n    subsequences = set()\n\n    def generate_subsequences(s: str) -> None:\n        if not s:\n            subsequences.add(\"\")\n            return\n\n        for i in range(len(s)):\n            generate_subsequences(s[:i] + s[i + 1:])\n            subsequences.add(s[:i + 1])\n\n    generate_subsequences(s)\n\n    return sum(len(subsequence) for subsequence in subsequences)\n"
    },
    {
        "number": 4019,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n, m, D = map(int, input_list[0].split())\n    edges = [tuple(map(int, edge.split())) for edge in input_list[1:]]\n\n    # Create adjacency list\n    adj_list = [[] for _ in range(n)]\n    for v, u in edges:\n        adj_list[v - 1].append(u - 1)\n        adj_list[u - 1].append(v - 1)\n\n    # Check if the graph is connected\n    visited = [False] * n\n    def dfs(node):\n        if not visited[node]:\n            visited[node] = True\n            for neighbor in adj_list[node]:\n                dfs(neighbor)\n\n    dfs(0)\n    if not all(visited):\n        return \"NO\"\n\n    # Find a spanning tree with the required degree for the first vertex\n    def kruskal(adj_list):\n        edges = sorted(edges, key=lambda x: x[2])\n        mst = []\n        parent = list(range(n))\n\n        def find(u):\n            if parent[u] != u:\n                parent[u] = find(parent[u])\n            return parent[u]\n\n        def union(u, v):\n            parent[find(u)] = find(v)\n\n        for v, u in edges:\n            if find(v) != find(u):\n                mst.append((v, u))\n                union(v, u)\n            if len(mst) == n - 1:\n                break\n\n        return mst\n\n    mst = kruskal(adj_list)\n    if len(mst) != n - 1:\n        return \"NO\"\n\n    # Check if the degree of the first vertex is equal to D\n    degree = [0] * n\n    for v, u in mst:\n        degree[v] += 1\n        degree[u] += 1\n\n    if degree[0] == D:\n        return \"YES\\n\" + \"\\n\".join(map(str, mst))\n    else:\n        return \"NO\""
    },
    {
        "number": 4019,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, D = map(int, input().split())\n    edges = [tuple(map(int, input().split())) for _ in range(m)]\n\n    def dfs(node, visited, parent):\n        visited[node] = True\n        for neighbor in graph[node]:\n            if not visited[neighbor] and neighbor != parent:\n                if dfs(neighbor, visited, node):\n                    return True\n        return False\n\n    graph = [[] for _ in range(n + 1)]\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n\n    if not dfs(1, [False] * (n + 1), -1):\n        return \"NO\\n\"\n\n    for u, v in edges:\n        if u == 1 or v == 1:\n            continue\n        if not dfs(u, [False] * (n + 1), -1):\n            return \"NO\\n\"\n        if not dfs(v, [False] * (n + 1), -1):\n            return \"NO\\n\"\n\n    visited = [False] * (n + 1)\n    result = []\n    def helper(node):\n        visited[node] = True\n        for neighbor in graph[node]:\n            if not visited[neighbor]:\n                if helper(neighbor):\n                    return True\n        return False\n\n    if not helper(1):\n        return \"NO\\n\"\n\n    for u in range(1, n + 1):\n        if not visited[u]:\n            result.append(u - 1)\n            for v in range(1, n + 1):\n                if v != u and visited[v]:\n                    result.append((u - 1) * n + v - 1)\n                    break\n\n    return \"YES\\n\" + \"\\n\".join(map(str, result)) + \"\\n\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, D = map(int, stdin.split()[:3])\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:-1]]\n\n    def dfs(graph, start, visited, degree):\n        if degree == D:\n            return True\n        visited[start] = True\n        for neighbor in graph[start]:\n            if not visited[neighbor]:\n                if dfs(graph, neighbor, visited, degree + 1):\n                    return True\n        return False\n\n    graph = [[] for _ in range(n)]\n    for u, v in edges:\n        graph[u - 1].append(v - 1)\n        graph[v - 1].append(u - 1)\n\n    visited = [False] * n\n    for start in range(n):\n        if dfs(graph, start, visited, 1):\n            break\n    else:\n        return \"NO\\n\"\n\n    result = []\n    for i in range(n - 1):\n        for u, v in edges:\n            if u == start + 1 and v == (start + i + 2) % n + 1:\n                result.append((u, v))\n                break\n    return \"YES\\n\" + \"\\n\".join(f\"{u} {v}\" for u, v in result) + \"\\n\""
    },
    {
        "number": 4019,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def is_spanning_tree(edges: list, root: int, degree: int) -> bool:\n        visited = [False] * (n + 1)\n        visited[root] = True\n        adj_list = [[] for _ in range(n + 1)]\n\n        for u, v in edges:\n            adj_list[u].append(v)\n            adj_list[v].append(u)\n\n        def dfs(u: int, parent: int) -> bool:\n            visited[u] = True\n            for v in adj_list[u]:\n                if v != parent and not visited[v]:\n                    if dfs(v, u):\n                        return True\n            return visited[1:].count(True) == degree and any(v for v in adj_list[1] if v != 1)\n\n        return dfs(root, -1)\n\n    n, m, D = map(int, stdin.split())\n    edges = [tuple(map(int, input().split())) for _ in range(m)]\n\n    for root in range(1, n + 1):\n        if is_spanning_tree(edges, root, D):\n            print(\"YES\")\n            for u, v in edges:\n                if u == 1 and v == 1:\n                    continue\n                print(u, v)\n            return\n\n    print(\"NO\")"
    },
    {
        "number": 4019,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(graph, visited, start, degree, result):\n        visited[start] = True\n        for neighbor in graph[start]:\n            if not visited[neighbor]:\n                if len(result) < degree - 1:\n                    dfs(graph, visited, neighbor, degree, result)\n                else:\n                    return False\n        return True\n\n    def find_spanning_tree(graph, start, degree):\n        visited = [False] * len(graph)\n        result = []\n        if not dfs(graph, visited, start, degree, result):\n            return False\n        result.append((start, start))\n        return result\n\n    n, m, D = map(int, stdin.split()[:3])\n    edges = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    graph = [[] for _ in range(n)]\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n\n    for i in range(1, n + 1):\n        tree = find_spanning_tree(graph, i, D)\n        if tree:\n            print(\"YES\")\n            for edge in tree:\n                print(f\"{edge[0]} {edge[1]}\")\n            break\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 4019,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, D = map(int, stdin.split())\n    if D == 1:\n        return \"NO\"\n    adj_matrix = [[0] * n for _ in range(n)]\n    for _ in range(m):\n        v, u = map(int, input().split())\n        adj_matrix[v - 1][u - 1] = 1\n        adj_matrix[u - 1][v - 1] = 1\n    # Build spanning tree using Kruskal's algorithm\n    edges = sorted([(weight, v - 1, u - 1) for v in range(n) for u in range(v, n) if adj_matrix[v][u] == 1], key=lambda x: x[0])\n    parent = list(range(n))\n    rank = [0] * n\n    def find(v):\n        if parent[v] != v:\n            parent[v] = find(parent[v])\n        return parent[v]\n    def union(v, u):\n        root_v = find(v)\n        root_u = find(u)\n        if root_v == root_u:\n            return False\n        if rank[root_v] < rank[root_u]:\n            parent[root_v] = root_u\n        elif rank[root_v] > rank[root_u]:\n            parent[root_u] = root_v\n        else:\n            parent[root_u] = root_v\n            rank[root_v] += 1\n        return True\n    for weight, v, u in edges:\n        if find(v) != find(u):\n            if union(v, u):\n                print(v + 1, u + 1)\n                if find(0) != find(n - 1):\n                    print(n - 1, 0)\n                    return \"YES\"\n                if find(1) != find(n - 1):\n                    return \"NO\"\n    return \"NO\"\n\n\ndef"
    },
    {
        "number": 4019,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, D = map(int, stdin.split()[:3])\n    edges = [tuple(map(int, input().split())) for _ in range(m)]\n    adjacency_list = [[] for _ in range(n)]\n\n    # Build the adjacency list\n    for u, v in edges:\n        adjacency_list[u - 1].append(v - 1)\n        adjacency_list[v - 1].append(u - 1)\n\n    # Find the spanning tree\n    visited = [False] * n\n    result = []\n\n    def dfs(v):\n        visited[v] = True\n        for u in adjacency_list[v]:\n            if not visited[u]:\n                result.append((v + 1, u + 1))\n                dfs(u)\n\n    dfs(0)\n    result = list(set(result) | {(1, 0)})\n\n    # Check if the degree of the first vertex is equal to D\n    first_vertex_degree = sum(1 for u, v in result if u == 1 or v == 1)\n    if first_vertex_degree == D:\n        return \"YES\\n\" + \"\\n\".join(map(lambda x: \" \".join(map(str, x)), result))\n    else:\n        return \"NO\\n\" "
    },
    {
        "number": 4019,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n, m, D = map(int, input_list.pop(0).split())\n    if D >= n:\n        return \"NO\"\n\n    edges = []\n    for _ in range(m):\n        v, u = map(int, input_list.pop(0).split())\n        edges.append((v, u))\n\n    adjacency_list = [[] for _ in range(n + 1)]\n    for v, u in edges:\n        adjacency_list[v].append(u)\n        adjacency_list[u].append(v)\n\n    queue = [1]\n    visited = [False] * (n + 1)\n    visited[1] = True\n    degree = 1\n\n    while queue and degree < D:\n        vertex = queue.pop(0)\n        degree += len(adjacency_list[vertex]) - 1\n        for neighbor in adjacency_list[vertex]:\n            if not visited[neighbor]:\n                visited[neighbor] = True\n                queue.append(neighbor)\n\n    if degree < D:\n        return \"NO\"\n\n    spanning_tree_edges = []\n    for i in range(1, n + 1):\n        if visited[i]:\n            for j in adjacency_list[i]:\n                if not visited[j]:\n                    spanning_tree_edges.append((i, j))\n\n    spanning_tree_edges.sort(key=lambda x: (x[0], x[1]))\n    result = \"YES\\n\" + \"\\n\".join(map(str, spanning_tree_edges))\n    return result\n"
    },
    {
        "number": 4019,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def bfs(graph, start):\n        queue = [(start, [])]\n        visited = set()\n        while queue:\n            node, path = queue.pop(0)\n            if node not in visited:\n                visited.add(node)\n                for neighbor in graph[node]:\n                    queue.append((neighbor, path + [node]))\n        return visited\n\n    def find_spanning_tree(graph, start, target_degree):\n        visited = bfs(graph, start)\n        if target_degree == 0:\n            return [edge for node in visited for edge in graph[node]]\n        elif target_degree >= len(visited):\n            return None\n        else:\n            return [edge for node in visited for edge in graph[node] if len(graph[node]) == target_degree]\n\n    n, m, target_degree = map(int, stdin.split())\n    edges = [tuple(map(int, stdin.split())) for _ in range(m)]\n    graph = {i: [] for i in range(1, n + 1)}\n    for v, u in edges:\n        graph[v].append(u)\n        graph[u].append(v)\n\n    if target_degree == 0:\n        spanning_tree = find_spanning_tree(graph, 1, target_degree)\n    else:\n        for start in range(1, n + 1):\n            spanning_tree = find_spanning_tree(graph, start, target_degree)\n            if spanning_tree:\n                break\n\n    if not spanning_tree:\n        return \"NO\\n\"\n    else:\n        return \"YES\\n\" + \"\\n\".join(f\"{u} {v}\" for u, v in spanning_tree) + \"\\n\""
    },
    {
        "number": 4019,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(graph, visited, stack, start, target):\n        visited[start] = True\n        for neighbor in graph[start]:\n            if not visited[neighbor]:\n                dfs(graph, visited, stack, neighbor, target)\n        stack.append(start)\n\n    def kruskal(graph, n, edges):\n        edges.sort(key=lambda x: x[2])\n        parent = list(range(n + 1))\n        rank = [0] * (n + 1)\n        mst = []\n\n        for edge in edges:\n            u, v, w = edge\n            if find(parent, u) != find(parent, v):\n                mst.append(edge)\n                if len(mst) == n - 1:\n                    break\n                union(parent, rank, u, v)\n\n        return mst\n\n    def find(parent, i):\n        if parent[i] != i:\n            parent[i] = find(parent, parent[i])\n        return parent[i]\n\n    def union(parent, rank, i, j):\n        i_root = find(parent, i)\n        j_root = find(parent, j)\n\n        if rank[i_root] < rank[j_root]:\n            parent[i_root] = j_root\n        elif rank[i_root] > rank[j_root]:\n            parent[j_root] = i_root\n        else:\n            parent[j_root] = i_root\n            rank[i_root] += 1\n\n    def is_valid_spanning_tree(graph, n, m, target):\n        visited = [False] * (n + 1)\n        stack = []\n        dfs(graph, visited, stack, 1, target)\n        return len(stack) == n and stack[0] == 1\n\n    n, m, target = map(int, input().split())\n    edges = [tuple(map(int, input().split())) for _ in range(m)]\n    graph = [[] for _ in range(n + 1)]\n\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n\n    mst = kruskal(graph, n, edges)\n\n    if not is_valid_spanning_tree(graph, n, m, target):\n        return \"NO\"\n\n    return \"YES\\n\" + \"\\n\".join(map(lambda x: \" \".join(map(str, x)), mst))\n"
    },
    {
        "number": 4020,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    time_str1, time_str2 = stdin.splitlines()\n    h1, m1 = map(int, time_str1.split(':'))\n    h2, m2 = map(int, time_str2.split(':'))\n\n    m = (m1 + m2) // 2\n    h = (h1 + h2) // 2\n\n    if m == 60:\n        h += 1\n        m = 0\n    elif m == 30:\n        m = 0\n    elif m == 15:\n        h -= 1\n        m = 45\n    elif m == 45:\n        h -= 1\n        m = 15\n\n    return f\"{h:02d}:{m:02d}\"\n\ndef"
    },
    {
        "number": 4020,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, input().split(\":\"))\n    h2, m2 = map(int, input().split(\":\"))\n\n    if m1 % 2 == 1:\n        h1 += 1\n        m1 = 0\n\n    if m2 % 2 == 1:\n        h2 += 1\n        m2 = 0\n\n    h_mid = h1 + (h2 - h1) // 2\n    m_mid = m1 + (m2 - m1) // 2\n\n    h_mid = h_mid % 24\n    m_mid = m_mid % 60\n\n    return f\"{h_mid:02}:{m_mid:02}\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    h1, m1 = map(int, lines[0].split(':'))\n    h2, m2 = map(int, lines[1].split(':'))\n\n    if m1 % 2 == 1:\n        m1 += 1\n    if m2 % 2 == 1:\n        m2 -= 1\n\n    m3 = m1 + (m2 - m1) // 2\n    h3 = h1 + (m3 - m1) // 60\n\n    h3 %= 24\n    m3 %= 60\n\n    if h3 < 10:\n        h3 = f\"0{h3}\"\n    if m3 < 10:\n        m3 = f\"0{m3}\"\n\n    return f\"{h3}:{m3}\""
    },
    {
        "number": 4020,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, stdin[0].split(':'))\n    h2, m2 = map(int, stdin[1].split(':'))\n\n    # Check if the contest lasts an even number of minutes\n    if (m1 + m2) % 2 != 0:\n        return \"Error: The contest lasts an odd number of minutes.\"\n\n    # Calculate the midpoint of the contest\n    m3 = (m1 + m2) // 2\n\n    # Check if the midpoint is in the first or second half of the day\n    if m3 <= 24:\n        h3 = h1\n    else:\n        h3 = h2\n\n    # Add 30 minutes to the calculated hour to get the midpoint of the contest\n    h3 = str(h3 + 0.5).split('.')[0]\n\n    # Pad the hours with a zero if necessary\n    if len(h3) < 2:\n        h3 = '0' + h3\n\n    # Pad the minutes with a zero if necessary\n    m3 = str(m3)\n    if len(m3) < 2:\n        m3 = '0' + m3\n\n    # Return the midpoint of the contest as a string\n    return h3 + ':' + m3"
    },
    {
        "number": 4020,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1, h2, m2 = map(int, stdin.split())\n    m_mid = (m1 + m2) // 2\n    h_mid = h1 + (m_mid - m1) // 60\n    m_mid = m_mid % 60\n    return f\"{h_mid:02}:{m_mid:02}\"\n\nstdin = \"10:00\\n11:00\"\nprint(solution(stdin))\n\nstdin = \"11:10\\n11:12\"\nprint(solution(stdin))\n\nstdin = \"01:02\\n03:02\"\nprint(solution(stdin)) "
    },
    {
        "number": 4020,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split('\\n')\n    h1, m1 = map(int, input_lines[0].split(':'))\n    h2, m2 = map(int, input_lines[1].split(':'))\n    \n    m3 = (m1 + m2) // 2\n    h3 = h1\n    \n    if m3 == 60:\n        m3 = 0\n        h3 += 1\n    \n    if h3 == 24:\n        h3 = 0\n    \n    return f\"{h3:02d}:{m3:02d}\""
    },
    {
        "number": 4020,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def to_minutes(h, m):\n        return h * 60 + m\n\n    def to_hours_and_minutes(minutes: int) -> tuple:\n        hours = minutes // 60\n        minutes = minutes % 60\n        return hours, minutes\n\n    def to_time_string(h, m) -> str:\n        return f\"{h:02d}:{m:02d}\"\n\n    stdin_lines = stdin.split(\"\\n\")\n    h1, m1 = map(int, stdin_lines[0].split(\":\"))\n    h2, m2 = map(int, stdin_lines[1].split(\":\"))\n\n    if h1 == h2:\n        midpoint_minutes = (m1 + m2) // 2\n        h3, m3 = to_hours_and_minutes(midpoint_minutes)\n        return to_time_string(h3, m3)\n    elif m1 == m2:\n        h3 = (h1 + h2) // 2\n        m3 = m1\n        return to_time_string(h3, m3)\n    else:\n        total_minutes = to_minutes(h2 - h1, m2 - m1)\n        midpoint_minutes = total_minutes // 2\n        h3, m3 = to_hours_and_minutes(midpoint_minutes)\n        h3 += h1\n        m3 += m1\n        return to_time_string(h3, m3)\n"
    },
    {
        "number": 4020,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, input().split(\":\"))\n    h2, m2 = map(int, input().split(\":\"))\n\n    if m1 % 2 == m2 % 2:\n        h3 = (h1 + h2) // 2\n        m3 = (m1 + m2) // 2\n    else:\n        h3 = (h1 + h2 + 1) // 2\n        m3 = (m1 + m2 + 1) // 2\n\n    return f\"{h3:02d}:{m3:02d}\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    h1, m1 = map(int, stdin.split()[0].split(':'))\n    h2, m2 = map(int, stdin.split()[1].split(':'))\n\n    # Calculate midpoint\n    m_mid = m1 + (m2 - m1) // 2\n    h_mid = h1 + (m_mid - m1) // 60\n\n    # Format output\n    h_mid_str = str(h_mid).zfill(2)\n    m_mid_str = str(m_mid).zfill(2)\n\n    return f\"{h_mid_str}:{m_mid_str}\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    line1, line2 = stdin.split('\\n')\n    h1, m1 = map(int, line1.split(':'))\n    h2, m2 = map(int, line2.split(':'))\n\n    # Calculate midpoint\n    h3 = (h1 + h2) // 2\n    m3 = (m1 + m2) // 2\n\n    # Format output\n    return f\"{h3:02d}:{m3:02d}\""
    },
    {
        "number": 4021,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    \n    if a <= 0 or a > 64:\n        return \"Invalid input\"\n    \n    if a == 1:\n        return \"1\"\n    \n    result = 0\n    while a > 1:\n        if a % 2 == 0:\n            a //= 2\n            result += 1\n        else:\n            a = (3 * a + 1) // 2\n            result += 2\n    return str(result)\n"
    },
    {
        "number": 4021,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a <= 64:\n        return str(a // 2)\n    else:\n        return str(a // 4) "
    },
    {
        "number": 4021,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a < 1:\n        return \"Invalid input. Please provide a positive integer.\"\n    elif a > 64:\n        return \"Invalid input. Please provide an integer between 1 and 64.\"\n    else:\n        result = 0\n        while a > 0:\n            a, rem = divmod(a, 2)\n            result += rem\n        return result if result <= 6 else 6 "
    },
    {
        "number": 4021,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a <= 1:\n        return \"1\"\n    elif a <= 2:\n        return \"1\"\n    elif a <= 4:\n        return \"2\"\n    elif a <= 8:\n        return \"3\"\n    elif a <= 16:\n        return \"4\"\n    elif a <= 32:\n        return \"5\"\n    elif a <= 64:\n        return \"6\"\n    else:\n        return \"Invalid input\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a <= 64:\n        if a == 1:\n            return \"1\"\n        elif a == 2:\n            return \"1\"\n        elif a == 3:\n            return \"1\"\n        elif a == 4:\n            return \"2\"\n        elif a == 5:\n            return \"2\"\n        elif a == 6:\n            return \"2\"\n        elif a == 7:\n            return \"3\"\n        elif a == 8:\n            return \"3\"\n        elif a == 9:\n            return \"3\"\n        elif a == 10:\n            return \"4\"\n        elif a == 11:\n            return \"4\"\n        elif a == 12:\n            return \"4\"\n        elif a == 13:\n            return \"5\"\n        elif a == 14:\n            return \"5\"\n        elif a == 15:\n            return \"5\"\n        elif a == 16:\n            return \"6\"\n        elif a == 17:\n            return \"6\"\n        elif a == 18:\n            return \"6\"\n        elif a == 19:\n            return \"7\"\n        elif a == 20:\n            return \"7\"\n        elif a == 21:\n            return \"7\"\n        elif a == 22:\n            return \"8\"\n        elif a == 23:\n            return \"8\"\n        elif a == 24:\n            return \"8\"\n        elif a == 25:\n            return \"9\"\n        elif a == 26:\n            return \"9\"\n        elif a == 27:\n            return \"9\"\n        elif a == 28:\n            return \"10\"\n        elif a == 29:\n            return \"10\"\n        elif a == 30:\n            return \"10\"\n        elif a == 31:\n            return \"11\"\n        elif a == 32:\n            return \"11\"\n        elif a == 33:\n            return \"11\"\n        elif a == 34:\n            return \"12\"\n        elif a == 35:\n            return \"12\"\n        elif a == 36:\n            return \"12\"\n        elif a == 37:\n            return \"13\"\n        elif a == 38:\n            return \"13\"\n        elif a == 39:\n            return \"13\"\n        elif a == 40:\n            return \"14\"\n        elif a == 41:\n            return \"14\"\n        elif a == 42:\n            return \"14\"\n        elif a == 43:\n            return \"15\"\n        elif a == 44:\n            return \"15\"\n        elif a == 45:\n            return \"15\"\n        elif a == 46:\n            return \"16\"\n        elif a == 47:\n            return \"16\"\n        elif a == 48:\n            return \"16\"\n        elif a == 49:\n            return \"17\"\n        elif a == 50:\n            return \"17\"\n        elif a == 51:\n            return \"17\"\n        elif a == 52:\n            return \"18\"\n        elif a == 53:\n            return \"18\"\n        elif a == 54:\n            return \"18\"\n        elif a == 55:\n            return \"19\"\n        elif a == 56:\n            return \"19\"\n        elif a == 57:\n            return \"19\"\n        elif a == 58:\n            return \"20\"\n        elif a == 59:\n            return \"20\"\n        elif a == 60:\n            return \"20\"\n        elif a == 61:\n            return \"21\"\n        elif a == 62:\n            return \"21\"\n        elif a == 63:\n            return \"21\"\n        elif a == 64:\n            return \"22\"\n    else:\n        return \"Invalid input\" "
    },
    {
        "number": 4021,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a == 1:\n        return \"1\"\n    elif a == 2:\n        return \"1\"\n    elif a == 3:\n        return \"2\"\n    elif a == 4:\n        return \"2\"\n    elif a == 5:\n        return \"3\"\n    elif a == 6:\n        return \"3\"\n    elif a == 7:\n        return \"4\"\n    elif a == 8:\n        return \"4\"\n    elif a == 9:\n        return \"5\"\n    elif a == 10:\n        return \"5\"\n    elif a == 11:\n        return \"6\"\n    elif a == 12:\n        return \"6\"\n    elif a == 13:\n        return \"7\"\n    elif a == 14:\n        return \"7\"\n    elif a == 15:\n        return \"8\"\n    elif a == 16:\n        return \"8\"\n    elif a == 17:\n        return \"9\"\n    elif a == 18:\n        return \"9\"\n    elif a == 19:\n        return \"10\"\n    elif a == 20:\n        return \"10\"\n    elif a == 21:\n        return \"11\"\n    elif a == 22:\n        return \"11\"\n    elif a == 23:\n        return \"12\"\n    elif a == 24:\n        return \"12\"\n    elif a == 25:\n        return \"13\"\n    elif a == 26:\n        return \"13\"\n    elif a == 27:\n        return \"14\"\n    elif a == 28:\n        return \"14\"\n    elif a == 29:\n        return \"15\"\n    elif a == 30:\n        return \"15\"\n    elif a == 31:\n        return \"16\"\n    elif a == 32:\n        return \"16\"\n    elif a == 33:\n        return \"17\"\n    elif a == 34:\n        return \"17\"\n    elif a == 35:\n        return \"18\"\n    elif a == 36:\n        return \"18\"\n    elif a == 37:\n        return \"19\"\n    elif a == 38:\n        return \"19\"\n    elif a == 39:\n        return \"20\"\n    elif a == 40:\n        return \"20\"\n    elif a == 41:\n        return \"21\"\n    elif a == 42:\n        return \"21\"\n    elif a == 43:\n        return \"22\"\n    elif a == 44:\n        return \"22\"\n    elif a == 45:\n        return \"23\"\n    elif a == 46:\n        return \"23\"\n    elif a == 47:\n        return \"24\"\n    elif a == 48:\n        return \"24\"\n    elif a == 49:\n        return \"25\"\n    elif a == 50:\n        return \"25\"\n    elif a == 51:\n        return \"26\"\n    elif a == 52:\n        return \"26\"\n    elif a == 53:\n        return \"27\"\n    elif a == 54:\n        return \"27\"\n    elif a == 55:\n        return \"28\"\n    elif a == 56:\n        return \"28\"\n    elif a == 57:\n        return \"29\"\n    elif a == 58:\n        return \"29\"\n    elif a == 59:\n        return \"30\"\n    elif a == 60:\n        return \"30\"\n    elif a == 61:\n        return \"31\"\n    elif a == 62:\n        return \"31\"\n    elif a == 63:\n        return \"32\"\n    elif a == 64:\n        return \"32\"\n    else:\n        return \"Invalid input\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a >= 64:\n        return \"6\"\n    return str(a // 32)\n\n\ndef"
    },
    {
        "number": 4021,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a <= 0 or a > 64:\n        raise ValueError(\"Input must be an integer between 1 and 64\")\n    return str(a.bit_length())"
    },
    {
        "number": 4021,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a <= 64:\n        if a == 1:\n            return \"1\"\n        elif a == 2:\n            return \"2\"\n        elif a == 3:\n            return \"3\"\n        elif a == 4:\n            return \"4\"\n        elif a == 5:\n            return \"5\"\n        elif a == 6:\n            return \"6\"\n        elif a == 7:\n            return \"7\"\n        elif a == 8:\n            return \"8\"\n        elif a == 9:\n            return \"9\"\n        elif a == 10:\n            return \"10\"\n        elif a == 11:\n            return \"11\"\n        elif a == 12:\n            return \"12\"\n        elif a == 13:\n            return \"13\"\n        elif a == 14:\n            return \"14\"\n        elif a == 15:\n            return \"15\"\n        elif a == 16:\n            return \"16\"\n        elif a == 17:\n            return \"17\"\n        elif a == 18:\n            return \"18\"\n        elif a == 19:\n            return \"19\"\n        elif a == 20:\n            return \"20\"\n        elif a == 21:\n            return \"21\"\n        elif a == 22:\n            return \"22\"\n        elif a == 23:\n            return \"23\"\n        elif a == 24:\n            return \"24\"\n        elif a == 25:\n            return \"25\"\n        elif a == 26:\n            return \"26\"\n        elif a == 27:\n            return \"5\"\n        elif a == 28:\n            return \"6\"\n        elif a == 29:\n            return \"7\"\n        elif a == 30:\n            return \"8\"\n        elif a == 31:\n            return \"9\"\n        elif a == 32:\n            return \"10\"\n        elif a == 33:\n            return \"11\"\n        elif a == 34:\n            return \"12\"\n        elif a == 35:\n            return \"13\"\n        elif a == 36:\n            return \"14\"\n        elif a == 37:\n            return \"15\"\n        elif a == 38:\n            return \"16\"\n        elif a == 39:\n            return \"17\"\n        elif a == 40:\n            return \"18\"\n        elif a == 41:\n            return \"19\"\n        elif a == 42:\n            return \"6\"\n        elif a == 43:\n            return \"7\"\n        elif a == 44:\n            return \"8\"\n        elif a == 45:\n            return \"9\"\n        elif a == 46:\n            return \"10\"\n        elif a == 47:\n            return \"11\"\n        elif a == 48:\n            return \"12\"\n        elif a == 49:\n            return \"13\"\n        elif a == 50:\n            return \"14\"\n        elif a == 51:\n            return \"15\"\n        elif a == 52:\n            return \"16\"\n        elif a == 53:\n            return \"17\"\n        elif a == 54:\n            return \"18\"\n        elif a == 55:\n            return \"19\"\n        elif a == 56:\n            return \"20\"\n        elif a == 57:\n            return \"21\"\n        elif a == 58:\n            return \"22\"\n        elif a == 59:\n            return \"23\"\n        elif a == 60:\n            return \"24\"\n        elif a == 61:\n            return \"25\"\n        elif a == 62:\n            return \"26\"\n        elif a == 63:\n            return \"27\"\n        elif a == 64:\n            return \"6\"\n    else:\n        return \"Invalid input"
    },
    {
        "number": 4021,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a <= 2:\n        return \"1\"\n    elif a <= 5:\n        return \"2\"\n    elif a <= 10:\n        return \"3\"\n    elif a <= 17:\n        return \"4\"\n    elif a <= 34:\n        return \"5\"\n    else:\n        return \"6\" "
    },
    {
        "number": 4022,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def distance(a: int, b: int) -> int:\n        return min(abs(a - b), abs(b - a))\n\n    def segments_intersection(segments: list) -> list:\n        intersection = []\n        for i in range(len(segments)):\n            for j in range(len(segments)):\n                if i != j:\n                    l1, r1 = segments[i]\n                    l2, r2 = segments[j]\n                    if l1 <= r2 and l2 <= r1:\n                        intersection.append((max(l1, l2), min(r1, r2)))\n        return intersection\n\n    def intersection_length(intersection: list) -> int:\n        length = 0\n        for segment in intersection:\n            length += distance(segment[0], segment[1])\n        return length\n\n    def max_intersection_length(segments: list) -> int:\n        max_length = 0\n        for i in range(len(segments)):\n            remaining_segments = segments[:i] + segments[i + 1:]\n            intersection = segments_intersection(remaining_segments)\n            max_length = max(max_length, intersection_length(intersection))\n        return max_length\n\n    def read_input(stdin: str) -> list:\n        n = int(stdin.splitlines()[0])\n        segments = []\n        for i in range(1, n + 1):\n            l, r = map(int, stdin.splitlines()[i].split())\n            segments.append((l, r))\n        return segments\n\n    segments = read_input(stdin)\n    max_length = max_intersection_length(segments)\n    return str(max_length)\n"
    },
    {
        "number": 4022,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n = int(input_list[0])\n    segments = [tuple(map(int, input_list[i+1].split())) for i in range(n)]\n    \n    max_len = 0\n    for i in range(n):\n        intersections = []\n        for j in range(n):\n            if i != j:\n                intersections.append(find_intersection(segments[i], segments[j]))\n        max_len = max(max_len, sum(len(intersection) for intersection in intersections))\n    \n    return str(max_len)\n\n\ndef"
    },
    {
        "number": 4022,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    n = int(input_data[0])\n    segments = [tuple(map(int, line.split())) for line in input_data[1:]]\n\n    def intersection_length(removed_segment):\n        remaining_segments = [segment for segment in segments if segment != removed_segment]\n        points = set().union(*remaining_segments)\n        intersection = [point for point in points if all(point in segment for segment in remaining_segments)]\n        return sum(max(segment) - min(segment) for segment in remaining_segments) + len(intersection)\n\n    removed_segment = max(segments, key=lambda segment: intersection_length(segment))\n    return str(intersection_length(removed_segment))\n"
    },
    {
        "number": 4022,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def get_max_intersection(n: int, segments: list[tuple[int, int]]) -> int:\n        def get_intersection(seg1: tuple[int, int], seg2: tuple[int, int]) -> tuple[int, int]:\n            l1, r1 = seg1\n            l2, r2 = seg2\n            return max(l1, l2), min(r1, r2)\n\n        intersection = segments[0]\n        for i in range(1, n):\n            intersection = get_intersection(intersection, segments[i])\n\n        return intersection[1] - intersection[0]\n\n    def get_max_length(n: int, segments: list[tuple[int, int]]) -> int:\n        max_length = 0\n        for i in range(n - 1):\n            max_length = max(max_length, get_max_intersection(n - i - 1, segments[:i] + segments[i + 1:]))\n\n        return max_length\n\n    n = int(stdin)\n    segments = [tuple(map(int, input().split())) for _ in range(n)]\n\n    return str(get_max_length(n, segments))\n"
    },
    {
        "number": 4022,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.splitlines()\n    n = int(input_data[0])\n    segments = [tuple(map(int, line.split())) for line in input_data[1:]]\n    \n    def find_intersection(segments):\n        intersections = []\n        for i in range(n):\n            for j in range(i+1, n):\n                l1, r1 = segments[i]\n                l2, r2 = segments[j]\n                if l1 < l2 < r1 < r2:\n                    intersections.append((max(l1, l2), min(r1, r2)))\n                elif l2 < l1 < r2 < r1:\n                    intersections.append((max(l1, l2), min(r1, r2)))\n                elif l1 <= l2 <= r2 <= r1:\n                    intersections.append((l2, r2))\n                elif l2 <= l1 <= r1 <= r2:\n                    intersections.append((l1, r1))\n        return intersections\n\n    def find_max_length(intersections):\n        max_length = 0\n        for l, r in intersections:\n            max_length = max(max_length, r - l)\n        return max_length\n\n    def find_best_remove(segments):\n        max_length = 0\n        best_remove = None\n        for i in range(n):\n            new_segments = segments[:i] + segments[i+1:]\n            intersections = find_intersection(new_segments)\n            length = find_max_length(intersections)\n            if length > max_length:\n                max_length = length\n                best_remove = i\n        return best_remove, max_length\n\n    remove_index, max_length = find_best_remove(segments)\n    return str(max_length)"
    },
    {
        "number": 4022,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def cross_section(segments: List[Tuple[int, int]]) -> int:\n        intersection = []\n        for i in range(len(segments)):\n            for j in range(i + 1, len(segments)):\n                x1, y1 = segments[i]\n                x2, y2 = segments[j]\n                x3, y3 = x1, y1\n                x4, y4 = x2, y2\n                if y2 < y1:\n                    x3, y3 = x2, y2\n                    x4, y4 = x1, y1\n                elif y2 == y1:\n                    if x2 < x1:\n                        x3, y3 = x2, y2\n                        x4, y4 = x1, y1\n                if y4 == y3:\n                    if x3 <= x4:\n                        intersection.append((max(x1, x2), min(y1, y2)))\n                    else:\n                        intersection.append((max(x2, x1), min(y2, y1)))\n                else:\n                    intersection.append((max(x1, x2), min(y1, y2)))\n        intersection.sort(key=lambda x: (x[0], -x[1]))\n        return max([x[1] - x[0] for x in intersection])\n\n    def remove_segment(segments: List[Tuple[int, int]]) -> int:\n        max_length = 0\n        for i in range(len(segments)):\n            new_segments = segments[:i] + segments[i + 1:]\n            length = cross_section(new_segments)\n            if length > max_length:\n                max_length = length\n        return max_length\n\n    input_data = stdin.splitlines()\n    n = int(input_data[0])\n    segments = [(int(x), int(y)) for i, x, y in (line.split() for line in input_data[1:])]\n    result = remove_segment(segments)\n    return str(result)\n"
    },
    {
        "number": 4022,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    segments = []\n    for i in range(1, n + 1):\n        l, r = map(int, stdin.splitlines()[i].split())\n        segments.append((l, r))\n\n    max_length = 0\n    for i in range(n):\n        intersection_length = 0\n        remaining_segments = segments.copy()\n        remaining_segments.pop(i)\n        for j in range(len(remaining_segments)):\n            l1, r1 = remaining_segments[j]\n            for k in range(j + 1, len(remaining_segments)):\n                l2, r2 = remaining_segments[k]\n                if l1 <= l2 <= r1 <= r2 or l2 <= l1 <= r2 <= r1:\n                    intersection_length += max(r1, r2) - min(l1, l2) + 1\n        max_length = max(max_length, intersection_length)\n\n    return str(max_length)"
    },
    {
        "number": 4022,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n', 1)[0])\n    segments = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:-1]]\n    \n    max_length = 0\n    max_segments = []\n    for i in range(n):\n        segments_copy = segments.copy()\n        del segments_copy[i]\n        intersection = set(segments_copy[j][0] for j in range(len(segments_copy)))\n        for s in segments_copy:\n            intersection.intersection_update(range(s[0], s[1] + 1))\n        intersection_length = max(intersection) - min(intersection) if intersection else 0\n        if intersection_length > max_length:\n            max_length = intersection_length\n            max_segments = [segments[i]]\n        elif intersection_length == max_length:\n            max_segments.append(segments[i])\n    \n    return str(max_length)\n\n\ninput_data = \"\"\"4\n1 3\n2 6\n0 4\n3 3\"\"\"\nprint(solution(input_data)) "
    },
    {
        "number": 4022,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def calculate_intersection_length(segments: List[Tuple[int, int]]) -> int:\n        start = float('inf')\n        end = float('-inf')\n        for l, r in segments:\n            start = min(start, l)\n            end = max(end, r)\n        return end - start\n\n    def remove_segment(segments: List[Tuple[int, int]], index: int) -> int:\n        segments.pop(index)\n        return calculate_intersection_length(segments)\n\n    n = int(stdin)\n    segments = []\n    for _ in range(n):\n        l, r = map(int, input().split())\n        segments.append((l, r))\n\n    max_length = 0\n    for i in range(n):\n        length = remove_segment(segments, i)\n        max_length = max(max_length, length)\n\n    return str(max_length)\n"
    },
    {
        "number": 4022,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def calculate_intersection(segments: List[List[int]]) -> int:\n        if len(segments) <= 1:\n            return 0\n\n        def overlap(left1: int, right1: int, left2: int, right2: int) -> int:\n            return max(0, min(right1, right2) - max(left1, left2))\n\n        def merge_intervals(intervals: List[List[int]]) -> List[List[int]]:\n            intervals.sort(key=lambda x: x[0])\n            result = []\n            for interval in intervals:\n                if not result or result[-1][1] < interval[0]:\n                    result.append(interval)\n                else:\n                    result[-1][1] = max(result[-1][1], interval[1])\n            return result\n\n        def calculate_length(segments: List[List[int]]) -> int:\n            return sum(overlap(a, b, c, d) for (a, b), (c, d) in itertools.combinations(segments, 2))\n\n        def find_best_segment(segments: List[List[int]]) -> List[int]:\n            best_length = 0\n            best_segment = None\n            for i, segment in enumerate(segments):\n                temp_segments = segments[:i] + segments[i + 1:]\n                temp_length = calculate_length(temp_segments)\n                if temp_length > best_length:\n                    best_length = temp_length\n                    best_segment = segment\n            return best_segment\n\n        segments = [tuple(x) for x in segments]\n        best_segment = find_best_segment(segments)\n        if best_segment is None:\n            return 0\n\n        temp_segments = segments[:segments.index(tuple(best_segment))] + segments[segments.index(tuple(best_segment)) + 1:]\n        return calculate_length(temp_segments)\n\n    def parse_input(stdin: str) -> List[List[int]]:\n        n = int(stdin.splitlines()[0])\n        segments = []\n        for line in stdin.splitlines()[1:]:\n            l, r = map(int, line.split())\n            segments.append([l, r])\n        return segments\n\n    segments = parse_input(stdin)\n    return str(calculate_intersection(segments))\n"
    },
    {
        "number": 4023,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin.split('\\n')\n    n = int(input_str[0])\n    a = list(map(int, input_str[1].split()))\n\n    if n == 1:\n        return \"YES\"\n\n    for i in range(1, n):\n        if a[i] != a[i - 1]:\n            break\n    else:\n        return \"YES\"\n\n    for i in range(1, n - 1):\n        if a[i] == a[i - 1] and a[i] == a[i + 1]:\n            return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    if n == 0:\n        return \"YES\"\n    if n == 1:\n        if a[0] <= 2:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 2:\n        if a[0] == a[1] and a[0] <= 2:\n            return \"YES\"\n        elif a[0] == a[1] and a[0] > 2:\n            return \"NO\"\n        else:\n            if a[0] + a[1] <= 2:\n                return \"YES\"\n            else:\n                return \"NO\"\n    for i in range(1, n):\n        if a[i] != a[i-1]:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin.splitlines()\n    n = int(input_str[0])\n    a = list(map(int, input_str[1].split()))\n\n    # Check if all parts have the same height\n    max_height = max(a)\n    for height in a:\n        if height != max_height:\n            return \"NO\"\n\n    # Check if the wall has no empty spaces inside it\n    for i in range(n - 1):\n        if a[i] == a[i + 1]:\n            continue\n        elif a[i] - 1 == a[i + 1]:\n            return \"NO\"\n        elif a[i] + 1 == a[i + 1]:\n            continue\n        else:\n            return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    heights = list(map(int, stdin.splitlines()[1].split()))\n\n    if n == 0:\n        return \"YES\"\n\n    # Check if the wall is already complete\n    if all(heights[i] == heights[i+1] for i in range(n-1)) and heights[0] == heights[-1]:\n        return \"YES\"\n\n    # Check if Vova can complete the wall using zero bricks\n    if n == 2 and heights[0] != heights[1]:\n        return \"NO\"\n\n    # Check if Vova can complete the wall using one brick\n    if n == 3 and heights[0] == heights[1] and heights[1] != heights[2]:\n        return \"NO\"\n\n    # Check if Vova can complete the wall using two bricks\n    if n == 4 and heights[0] == heights[1] and heights[2] == heights[3] and heights[1] != heights[2]:\n        return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    # check if all parts have the same height\n    if len(set(a)) == 1:\n        return \"YES\"\n\n    # check if parts are off the borders\n    if a[0] != 1 or a[-1] != 1:\n        return \"NO\"\n\n    # check if bricks can be put horizontally\n    for i in range(1, n - 1):\n        if a[i] == a[i - 1] and a[i] == a[i + 1]:\n            return \"NO\"\n\n    # check if the wall is already complete\n    if len(set(a)) == 1 and all(a[i] == a[i - 1] for i in range(1, n)):\n        return \"YES\"\n\n    # check if bricks can be put vertically\n    for i in range(1, n - 1):\n        if a[i] == a[i - 1] + 1 and a[i + 1] == a[i] + 1:\n            return \"NO\"\n\n    # check if the wall can be completed using bricks\n    for i in range(1, n - 1):\n        if a[i] == a[i - 1] and a[i] != a[i + 1]:\n            if a[i] < a[i + 1]:\n                return \"YES\"\n            elif a[i] > a[i + 1]:\n                return \"NO\"\n\n    return \"NO\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    n = int(input_list[0])\n    a = list(map(int, input_list[1].split()))\n    is_complete = True\n    for i in range(n - 1):\n        if a[i] == a[i + 1]:\n            a[i] += 1\n            a[i + 1] += 1\n    max_height = max(a)\n    if max_height == n:\n        is_complete = False\n    if is_complete:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\ninput_str = \"\"\"5\n2 1 1 2 5\"\"\"\n\nprint(solution(input_str))\n\n\ninput_str = \"\"\"3\n4 5 3\"\"\"\n\nprint(solution(input_str))\n\n\ninput_str = \"\"\"2\n10 10\"\"\"\n\nprint(solution(input_str)) "
    },
    {
        "number": 4023,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    prev = a[0]\n    count = 1\n    for i in range(1, n):\n        if a[i] != prev:\n            if i > 1 and a[i] == a[i-2]:\n                count += 1\n            else:\n                count = 1\n            prev = a[i]\n        if i == n-1 and a[i] == a[i-1]:\n            count += 1\n        if count > 2:\n            return \"NO\"\n    if count == 2 and a[n-1] == a[n-2]:\n        return \"NO\"\n    return \"YES\" "
    },
    {
        "number": 4023,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    for i in range(1, n):\n        if a[i] == a[i - 1]:\n            a[i] += 1\n\n    if all(a[i] == a[i + 1] for i in range(n - 1)) and a[0] == a[n - 1]:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4023,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    # Check if the wall is already complete\n    if max(a) == n and all(a[i] == a[i+1] for i in range(n-1)):\n        return \"YES\"\n\n    # Check if Vova can put bricks to complete the wall\n    for i in range(1, n-1):\n        if a[i] == a[i-1] and a[i+1] == a[i]:\n            a[i] += 1\n            a[i+1] += 1\n\n    # Check if the wall is now complete\n    if max(a) == n and all(a[i] == a[i+1] for i in range(n-1)):\n        return \"YES\"\n\n    return \"NO\""
    },
    {
        "number": 4023,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def can_finish(heights: List[int]) -> bool:\n        for i in range(len(heights) - 1):\n            if heights[i] == heights[i + 1]:\n                continue\n            if heights[i] < heights[i + 1]:\n                if i == 0 or heights[i - 1] != heights[i]:\n                    return False\n            else:\n                if i == len(heights) - 2 or heights[i + 1] != heights[i + 2]:\n                    return False\n        return True\n\n    n = int(stdin.splitlines()[0])\n    heights = list(map(int, stdin.splitlines()[1].split()))\n    return \"YES\" if can_finish(heights) else \"NO\""
    },
    {
        "number": 4024,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    s = input()\n    s = list(s)\n\n    if k > len(set(s)):\n        return -1\n\n    subseq_count = 0\n    subseq_set = set()\n    min_cost = float('inf')\n\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            subseq = ''.join(s[i:j])\n            subseq_count += 1\n            cost = n - len(subseq)\n            subseq_set.add(subseq)\n            if len(subseq_set) == k:\n                min_cost = min(min_cost, cost)\n                break\n        if len(subseq_set) == k:\n            break\n\n    if len(subseq_set) < k:\n        return -1\n    else:\n        return min_cost\n\n\ndef"
    },
    {
        "number": 4024,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    s = stdin.split()[-1]\n\n    if k > 100 or n > 100:\n        return \"-1\"\n\n    if k > len(set(s)):\n        return \"-1\"\n\n    def is_subsequence(t: str) -> bool:\n        i = 0\n        for c in s:\n            if c == t[i]:\n                i += 1\n                if i == len(t):\n                    return True\n        return False\n\n    subsequences = set()\n    for i in range(1, len(s) + 1):\n        for t in itertools.product(\"abcdefghijklmnopqrstuvwxyz\", repeat=i):\n            t = ''.join(t)\n            if is_subsequence(t) and len(set(t)) == len(t) and len(t) <= n:\n                subsequences.add(t)\n\n    if len(subsequences) < k:\n        return \"-1\"\n\n    cost = 0\n    for t in sorted(subsequences, key=len, reverse=True):\n        cost += n - len(t)\n        if len(subsequences) == k:\n            break\n\n    return str(cost)\n"
    },
    {
        "number": 4024,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    s = stdin.split()[2]\n\n    def subsequence(t: str) -> bool:\n        for char in t:\n            if char not in s:\n                return False\n            s = s[s.index(char) + 1:]\n        return True\n\n    # Generate all subsequences\n    subsequences = []\n    for i in range(1, n + 1):\n        for t in itertools.combinations(s, i):\n            if subsequence(\"\".join(t)):\n                subsequences.append(\"\".join(t))\n\n    # Sort subsequences by length and calculate their cost\n    subsequences.sort(key=len)\n    cost = 0\n    for t in subsequences:\n        if len(set(t)) == len(t) and len(set(t)) == k:\n            cost += n - len(t)\n            break\n        cost += n - len(t)\n\n    if cost == n:\n        return -1\n    else:\n        return cost\n\n\ninput_str = \"\"\"4 5\nasdf\n5 6\naaaaa\n5 7\naaaaa\n10 100\najihiushda\"\"\"\n\noutput_str = [solution(input_str[i:i+77]) for i in range(0, len(input_str), 77)]\n\nprint(output_str)\n"
    },
    {
        "number": 4024,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    s = stdin.split()[2]\n    if k > len(s):\n        return -1\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            dp[i][j] = dp[i - 1][j]\n            if j >= ord(s[i - 1]) - ord('a') + 1:\n                if dp[i - 1][j] + n - i > dp[i][j]:\n                    dp[i][j] = dp[i - 1][j] + n - i\n    return dp[n][k] if dp[n][k] != 0 else -1"
    },
    {
        "number": 4024,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n, k = map(int, input_list[0].split())\n    s = input_list[1]\n\n    if k > len(s):\n        return -1\n\n    min_cost = float('inf')\n    subseq_set = set()\n\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            subseq = s[i:j]\n            subseq_set.add(subseq)\n            if len(subseq_set) == k:\n                min_cost = min(min_cost, sum([len(x) for x in subseq_set]))\n                break\n            subseq_set.remove(subseq)\n\n    return min_cost if min_cost != float('inf') else -1\n\n\ninput_str = \"\"\"4 5\nasdf\"\"\"\nprint(solution(input_str))  # Output: 4\n\ninput_str = \"\"\"5 6\naaaaa\"\"\"\nprint(solution(input_str))  # Output: 15\n\ninput_str = \"\"\"5 7\naaaaa\"\"\"\nprint(solution(input_str))  # Output: -1\n\ninput_str = \"\"\"10 100\najihiushda\"\"\"\nprint(solution(input_str))  # Output: 233 "
    },
    {
        "number": 4024,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split('\\n')\n    n, k = map(int, input_lines[0].split())\n    s = input_lines[1]\n\n    if k > len(set(s)):\n        return -1\n\n    dp = [0] * len(s)\n    for i in range(len(s)):\n        dp[i] = i\n\n    for i in range(1, len(s)):\n        for j in range(i):\n            if s[i] != s[j]:\n                dp[i] = min(dp[i], dp[j] + 1)\n\n    total_cost = 0\n    for i in range(k - 1, -1, -1):\n        max_length = max(dp)\n        total_cost += len(s) - max_length\n        s = s[:max_length]\n        dp = dp[:max_length]\n        for j in range(max_length):\n            dp[j] = j\n            for i in range(j + 1, len(s)):\n                if s[i] != s[j]:\n                    dp[i] = min(dp[i], dp[j] + 1)\n\n    return total_cost\n"
    },
    {
        "number": 4024,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin.split(\"\\n\")\n    n, k = map(int, input_str[0].split())\n    s = input_str[1]\n\n    if k > len(s):\n        return -1\n\n    s_set = set()\n    s_set.add(\"\")\n\n    for i in range(len(s)):\n        for t in s_set:\n            if i == 0:\n                new_t = t + s[i]\n            else:\n                new_t = t[:i] + s[i] + t[i:]\n            if len(new_t) <= n and new_t not in s_set:\n                s_set.add(new_t)\n                if len(s_set) == k:\n                    return sum(len(t) for t in s_set)\n\n    return -1\n\n\ndef"
    },
    {
        "number": 4024,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input(stdin).split())\n    s = input()\n\n    # Helper function to check if a subsequence exists\n    def is_subsequence(s: str, t: str) -> bool:\n        i = j = 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        return i == len(s)\n\n    # Iterate through all possible subsequences of s and calculate the cost\n    min_cost = float('inf')\n    for i in range(1, len(s) + 1):\n        for t in itertools.combinations(s, i):\n            if len(set(t)) == k:\n                cost = sum(1 for x in itertools.product(s, t) if is_subsequence(x[0], x[1]))\n                min_cost = min(min_cost, cost)\n                if min_cost == 0:\n                    return str(min_cost)\n\n    # If the set S of size k is not possible, return -1\n    if min_cost == float('inf'):\n        return '-1'\n\n    return str(min_cost)"
    },
    {
        "number": 4024,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    s = stdin.split()[-1]\n    len_s = len(s)\n\n    if k > len_s:\n        return -1\n\n    dp = [[0 for _ in range(k + 1)] for _ in range(len_s + 1)]\n\n    for i in range(len_s + 1):\n        dp[i][0] = i\n\n    for i in range(1, len_s + 1):\n        for j in range(1, k + 1):\n            if s[i - 1] == s[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - 1]) + 1\n\n    return dp[len_s][k]\n\n\ndef"
    },
    {
        "number": 4024,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    s = input()\n\n    def is_subsequence(t: str) -> bool:\n        it = iter(s)\n        return all(c in it for c in t)\n\n    subsets = set()\n    for i in range(1, n + 1):\n        for j in range(n - i + 1):\n            t = s[j:j + i]\n            if is_subsequence(t):\n                subsets.add(t)\n                if len(subsets) == k:\n                    return sum(len(t) for t in subsets)\n\n    return -1 if len(subsets) < k else sum(len(t) for t in subsets)\n\n\ninput_data = \"\"\"4 5\nasdf\n5 6\naaaaa\n5 7\naaaaa\n10 100\najihiushda\"\"\"\n\nfor line in input_data.splitlines():\n    if not line:\n        continue\n    result = solution(line)\n    print(result)\n    print()\n"
    },
    {
        "number": 4025,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    max_days = 1\n    \n    if a > 0:\n        max_days = min(max_days, a // 2)\n    \n    if b > 0:\n        max_days = min(max_days, b // 2)\n    \n    if c > 0:\n        max_days = min(max_days, c // 2)\n    \n    return str(max_days)\n\ninput_data = \"\"\"2 1 1\n3 2 2\n1 100 1\n30 20 10\"\"\"\n\noutput = [solution(input_data[i]) for i in range(len(input_data))]\n\nprint(\"\\n\".join(output)) "
    },
    {
        "number": 4025,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    \n    # 14 days in a week\n    days = [0] * 14\n    \n    # fish food\n    days[0] = days[6] = days[13] = a\n    \n    # rabbit stew\n    days[1] = days[7] = days[12] = b\n    \n    # chicken stake\n    days[2] = days[8] = days[11] = c\n    \n    # find maximum number of days\n    max_days = days[0]\n    for i in range(1, 7):\n        max_days = max(max_days, days[i] + days[i+7])\n    \n    # return result\n    return str(max_days)\n\n\ndef"
    },
    {
        "number": 4025,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, input().split())\n    \n    max_days = min(a, b, c)\n    \n    return max_days"
    },
    {
        "number": 4025,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    days = 7\n    start_day = -1\n    max_days = 0\n\n    if a == 0 and b == 0 and c == 0:\n        return 0\n\n    for i in range(days):\n        if (i + 1) % 2 == 0 or (i + 1) % 3 == 0:\n            continue\n\n        fish = a * (i + 1)\n        rabbit = b * (i + 1)\n        chicken = c * (i + 1)\n\n        total = fish + rabbit + chicken\n\n        if total >= 0:\n            if max_days < i + 1:\n                max_days = i + 1\n                start_day = i + 1\n\n    return start_day"
    },
    {
        "number": 4025,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    \n    # Fish food is available every 7 days, Rabbit stew every 6 days, and chicken stakes every 5 days\n    days_left = a + b + c\n    \n    # Determine the day of the week on which to start the trip\n    day = 0\n    while days_left > 0:\n        if day % 7 == 0 and days_left >= a:\n            days_left -= a\n            a = 0\n        elif day % 6 == 0 and days_left >= b:\n            days_left -= b\n            b = 0\n        elif day % 5 == 0 and days_left >= c:\n            days_left -= c\n            c = 0\n        day += 1\n        \n    # Calculate the maximum number of days the cat can eat in a trip\n    if days_left == 0:\n        return \"0\"\n    else:\n        max_days = day - 1\n        return str(max_days)\n"
    },
    {
        "number": 4025,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    a, b, c = int(input_list[0]), int(input_list[1]), int(input_list[2])\n    \n    # Fish food is eaten on Monday, Thursday, and Sunday\n    fish_days = (a//3 + b//3 + c//3) // 3\n    \n    # Rabbit stew is eaten on Tuesday and Saturday\n    rabbit_days = (a + b) // 7\n    \n    # Chicken stake is eaten on Wednesday and Sunday\n    chicken_days = (c + a + b) // 7\n    \n    # Choose the maximum number of days with food supplies\n    max_days = max(fish_days, rabbit_days, chicken_days)\n    \n    return str(max_days)\n\ndef"
    },
    {
        "number": 4025,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n\n    if a == 0 and b == 0:\n        return 1 if c > 0 else 0\n\n    # Calculate the number of days the cat can eat in a trip without additional food purchases\n    days = min(a // c, b // c, b // c)\n\n    # Calculate the best day to start the trip\n    if a % c == 0 and b % c == 0:\n        days = min(days, a // c + b // c - 1)\n\n    return days\n"
    },
    {
        "number": 4025,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    \n    # Find the smallest number of daily rations of each type\n    min_rations = min(a, b, c)\n    \n    # Calculate the maximum number of days the cat can eat in a trip\n    max_days = min_rations * 7 // (a + b + c)\n    \n    return str(max_days)\n"
    },
    {
        "number": 4025,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    max_days = 1\n    if a > 0:\n        max_days = min(max_days, a // 2)\n    if b > 0:\n        max_days = min(max_days, b // 2)\n    if c > 0:\n        max_days = min(max_days, c // 2)\n    return str(max_days)"
    },
    {
        "number": 4025,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    days = 7\n    weekly_rations = [a, b, c, c, b, a]\n    max_rations = sum(weekly_rations)\n    best_start = -1\n    best_rations = 0\n    best_days = 0\n\n    for i in range(days):\n        rations = weekly_rations[i]\n        remaining_rations = max_rations - rations\n        total_days = (remaining_rations + rations - 1) // rations\n        if total_days > best_days:\n            best_start = i\n            best_rations = remaining_rations\n            best_days = total_days\n\n    return str(best_days)"
    },
    {
        "number": 4026,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split(\"\\n\")[0])\n    for i in range(1, t+1):\n        n, m = map(int, stdin.split(\"\\n\")[i].split(\" \"))\n        types = []\n        for j in range(i*2+1, i*2+n+1):\n            top_left, top_right = map(int, stdin.split(\"\\n\")[j].split(\" \"))\n            bottom_left, bottom_right = map(int, stdin.split(\"\\n\")[j+n].split(\" \"))\n            types.append(((top_left, top_right), (bottom_left, bottom_right)))\n        \n        # Check if a square of size m x m can be constructed\n        def is_valid(s):\n            # Check if s is symmetric\n            for i in range(m):\n                for j in range(i, m):\n                    if s[i][j] != s[j][i]:\n                        return False\n            \n            # Check if tiles do not intersect\n            for i in range(m-1):\n                for j in range(m-1):\n                    for dx in range(2):\n                        for dy in range(2):\n                            if s[i][j] == s[i+dx][j+dy]:\n                                return False\n            \n            # Check if tiles are inside the square\n            for i in range(m):\n                for j in range(m):\n                    if s[i][j] < 1 or s[i][j] > n:\n                        return False\n            \n            return True\n        \n        # Check if a square of size m x m can be constructed\n        for x in range(1, m+1):\n            for y in range(1, m+1):\n                if is_valid([[(t-1)*x+types[t-1][0][0], (t-1)*x+types[t-1][0][1], (t-1)*y+types[t-1][1][0], (t-1)*y+types[t-1][1][1]] for t in range(1, n+1)]]):\n                    print(\"YES\")\n                    break\n            else:\n                print(\"NO\")\n                break"
    },
    {
        "number": 4026,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n, m = map(int, input().split())\n        tiles = [list(map(int, input().split())) for _ in range(n)]\n        for i in range(n):\n            if tiles[i][0] == tiles[i][1] and tiles[i][2] == tiles[i][3]:\n                for j in range(m):\n                    for k in range(m):\n                        if tiles[i][0] == tiles[i][2]:\n                            print(\"YES\")\n                            return\n            if tiles[i][0] == tiles[i][3] and tiles[i][2] == tiles[i][1]:\n                for j in range(m):\n                    for k in range(m):\n                        if tiles[i][0] == tiles[i][2]:\n                            print(\"YES\")\n                            return\n        print(\"NO\")\n"
    },
    {
        "number": 4026,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    inputs = stdin.split('\\n')[1:]\n    for i in range(t):\n        n, m = map(int, inputs[i * 2].split())\n        tile_types = []\n        for j in range(n):\n            top_left, top_right = map(int, inputs[i * 2 + 1 + j * 2].split())\n            bottom_left, bottom_right = map(int, inputs[i * 2 + 1 + j * 2 + 1].split())\n            tile_types.append(((top_left, top_right), (bottom_left, bottom_right)))\n        \n        def is_valid(square: List[List[int]]) -> bool:\n            for i in range(m):\n                for j in range(m):\n                    if square[i][j] != square[j][i]:\n                        return False\n            return True\n        \n        def is_symmetric(square: List[List[int]]) -> bool:\n            for i in range(m):\n                for j in range(m):\n                    if square[i][j] != square[m - 1 - i][m - 1 - j]:\n                        return False\n            return True\n        \n        def can_place_tile(square: List[List[int]], tile: Tuple[Tuple[int, int], Tuple[int, int]], row: int, col: int) -> bool:\n            top_left, top_right = tile[0]\n            bottom_left, bottom_right = tile[1]\n            for i in range(2):\n                for j in range(2):\n                    if square[row + i][col + j] != 0 and (top_left, top_right, bottom_left, bottom_right)[i * 2 + j] != square[row + i][col + j]:\n                        return False\n            return True\n        \n        def place_tile(square: List[List[int]], tile: Tuple[Tuple[int, int], Tuple[int, int]], row: int, col: int) -> None:\n            top_left, top_right = tile[0]\n            bottom_left, bottom_right = tile[1]\n            for i in range(2):\n                for j in range(2):\n                    square[row + i][col + j] = (top_left, top_right, bottom_left, bottom_right)[i * 2 + j]\n        \n        def generate_square(square: List[List[int]], row: int, col: int) -> bool:\n            if row >= m:\n                return True\n            for i in range(n):\n                if can_place_tile(square, tile_types[i], row, col):\n                    place_tile(square, tile_types[i], row, col)\n                    if generate_square(square, row, col + 1):\n                        return True\n                    square[row][col] = 0\n            return False\n        \n        square = [[0] * m for _ in range(m)]\n        if generate_square(square, 0, 0) and is_valid(square) and is_symmetric(square):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    answers = []\n    for _ in range(t):\n        n, m = map(int, input().split())\n        tiles = [[] for _ in range(n)]\n        for i in range(n):\n            for j in range(2):\n                tiles[i].append(list(map(int, input().split())))\n        result = is_square_symmetric(m, tiles)\n        answers.append(\"YES\" if result else \"NO\")\n    return \"\\n\".join(answers)\n\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.splitlines()[0])\n    output = []\n    for _ in range(t):\n        n, m = map(int, stdin.splitlines()[1].split())\n        tiles = {i: set() for i in range(1, n + 1)}\n        for i in range(2, 2 * n + 1):\n            a, b, c, d = map(int, stdin.splitlines()[i].split())\n            tiles[a].add((b, c))\n            tiles[d].add((c, b))\n        for tile in tiles.values():\n            if len(tile) != 4:\n                output.append(\"NO\")\n                break\n        else:\n            for i in range(m):\n                row = [(i, j) for j in range(m) if (i, j) in tiles[1]]\n                if len(row) != 4:\n                    output.append(\"NO\")\n                    break\n                else:\n                    for j in range(m):\n                        col = [(k, j) for k in range(1, n + 1) if (k, j) in tiles[k]]\n                        if len(col) != 4:\n                            output.append(\"NO\")\n                            break\n                    else:\n                        continue\n                    break\n            else:\n                output.append(\"YES\")\n    return \"\\n\".join(output)\n"
    },
    {
        "number": 4026,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(input())\n    for i in range(t):\n        n, m = map(int, input().split())\n        tiles = []\n        for j in range(2*n):\n            line = input().split()\n            tiles.append(tuple(map(int, line)))\n        result = \"YES\"\n        for i in range(m):\n            for j in range(m):\n                if (i+j) % 2 == 0:\n                    if (i, j) in [(k-i+m-1, k-j) for k in range(m)]:\n                        tile = tiles[i+j]\n                        if tile[0] != tile[2] or tile[1] != tile[3]:\n                            result = \"NO\"\n                            break\n                    elif (i, j) in [(k-j, k-i+m-1) for k in range(m)]:\n                        tile = tiles[m-i-j-1]\n                        if tile[0] != tile[1] or tile[2] != tile[3]:\n                            result = \"NO\"\n                            break\n                else:\n                    if (i, j) in [(k-i+m-1, k-j-1) for k in range(m)]:\n                        tile = tiles[i+j]\n                        if tile[0] != tile[1] or tile[2] != tile[3]:\n                            result = \"NO\"\n                            break\n                    elif (i, j) in [(k-j-1, k-i+m-1) for k in range(m)]:\n                        tile = tiles[m-i-j-1]\n                        if tile[0] != tile[2] or tile[1] != tile[3]:\n                            result = \"NO\"\n                            break\n        print(result)\n"
    },
    {
        "number": 4026,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid_tile(tile: str, n: int) -> bool:\n        lines = tile.split('\\n')\n        values = [int(x) for x in lines[0].split()]\n        if len(set(values)) != n:\n            return False\n        if len(set(lines[1].split())) != n:\n            return False\n        return True\n\n    def check_square(square: str, n: int) -> bool:\n        lines = square.split('\\n')\n        for i in range(n):\n            row_values = set(int(x) for x in lines[i].split())\n            if len(row_values) != n:\n                return False\n            if len(set(lines[j][i] for j in range(n))) != n:\n                return False\n        return True\n\n    def construct_square(tiles: str, n: int, m: int) -> str:\n        lines = tiles.split('\\n')\n        tile_descriptions = [lines[i:i + 2] for i in range(0, len(lines), 2)]\n        tile_types = {(int(d[0].split()[0]), int(d[1].split()[0])): i for i, d in enumerate(tile_descriptions)}\n\n        def is_valid_placement(i: int, j: int, tile: tuple) -> bool:\n            tile_i, tile_j = tile\n            return (i + tile_i < m) and (j + tile_j < m) and (i >= 0) and (j >= 0)\n\n        def place_tile(square: str, i: int, j: int, tile: tuple) -> str:\n            tile_i, tile_j = tile\n            square_i, square_j = i + tile_i, j + tile_j\n            square_value = int(square[square_i][square_j])\n            if square_value != tile_types[(tile_i, tile_j)]:\n                return False\n            return True\n\n        def find_valid_placement(square: str, tile: tuple, i: int, j: int) -> bool:\n            if not is_valid_placement(i, j, tile):\n                return False\n            for di in range(-1, 2):\n                for dj in range(-1, 2):\n                    if di == 0 and dj == 0:\n                        continue\n                    if place_tile(square, i + di, j + dj, tile):\n                        return True\n            return False\n\n        def is_square_valid(square: str, n: int) -> bool:\n            for i in range(m):\n                for j in range(m):\n                    if not is_valid_placement(i, j, (0, 0)):\n                        return False\n                    for tile in tile_types.keys():\n                        if find_valid_placement(square, tile, i, j):\n                            break\n                    else:\n                        return False\n            return True\n\n        def generate_square(n: int, m: int) -> str:\n            square = [['0' for _ in range(m)] for _ in range(m)]\n            while True:\n                if is_square_valid(square, n):\n                    return '\\n'.join([''.join(row) for row in square])\n                for i in range(m):\n                    for j in range(m):\n                        if not is_valid_placement(i, j, (0, 0)):\n                            continue\n                        for tile in tile_types.keys():\n                            if find_valid_placement(square, tile, i, j):\n                                square[i][j] = str(tile_types[tile])\n                                break\n                        else:\n                            raise ValueError(\"No valid placement found\")\n\n        return generate_square(n, m)\n\n    test_cases = stdin.strip().split('\\n\\n')\n    result = []\n    for t, test in enumerate(test_cases):\n        lines = test.split('\\n')\n        n, m = map(int, lines[0].split())\n        tiles = '\\n'.join(lines[1:])\n\n        if is_valid_"
    },
    {
        "number": 4026,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def is_symmetric(square: list) -> bool:\n        for i in range(m):\n            for j in range(m):\n                if square[i][j] != square[j][i]:\n                    return False\n        return True\n\n    def is_valid(x: int, y: int, tile: int) -> bool:\n        for i in range(tile_size):\n            for j in range(tile_size):\n                if tiles[tile_type][tile][i][j] == 0:\n                    continue\n                if x + i < 0 or x + i >= m or y + j < 0 or y + j >= m:\n                    return False\n                if square[x + i][y + j] != 0:\n                    return False\n        return True\n\n    test_cases = stdin.split(\"\\n\")\n    n = int(test_cases[1])\n    m = int(test_cases[2])\n    tile_size = 2\n    tiles = [[] for _ in range(n)]\n\n    for i in range(3, 3 + n):\n        top_left = int(test_cases[i])\n        top_right = int(test_cases[i + n])\n        bottom_left = int(test_cases[i + 2 * n])\n        bottom_right = int(test_cases[i + 3 * n])\n        tiles[i - 3] = [(top_left, top_right), (bottom_left, bottom_right)]\n\n    square = [[0] * m for _ in range(m)]\n\n    for tile_type in range(n):\n        for i in range(m):\n            for j in range(m):\n                if is_valid(i, j, tile_type):\n                    square[i][j] = tiles[tile_type][0][0]\n                    square[j][i] = tiles[tile_type][0][1]\n\n    if is_symmetric(square):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4026,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    cases = []\n    for _ in range(t):\n        n, m = map(int, input().split())\n        tiles = []\n        for _ in range(2 * n):\n            row = list(map(int, input().split()))\n            tiles.append(row)\n        cases.append((n, m, tiles))\n    \n    for case in cases:\n        n, m, tiles = case\n        if n * m > 200:\n            print(\"NO\")\n            continue\n        \n        def is_valid_tile(tile, x, y):\n            return tile[0] == x and tile[1] == y\n        \n        def is_valid_placement(x, y):\n            for i in range(n):\n                for j in range(n):\n                    for k in range(m):\n                        for l in range(m):\n                            if k == l:\n                                continue\n                            for tile in tiles:\n                                if is_valid_tile(tile, x + j, y + i):\n                                    return False\n            return True\n        \n        for i in range(m):\n            for j in range(m):\n                if not is_valid_placement(i, j):\n                    print(\"NO\")\n                    break\n            else:\n                print(\"YES\")\n                break\n            print(\"NO\")\n    return \"\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(tile: List[List[int]], size: int) -> bool:\n        for i in range(size):\n            for j in range(size):\n                if tile[i][j] != tile[j][i]:\n                    return False\n        return True\n\n    def is_fit(tile: List[List[int]], size: int, square: List[List[int]], row: int, col: int) -> bool:\n        for i in range(size):\n            for j in range(size):\n                if square[row + i][col + j] != tile[i][j]:\n                    return False\n        return True\n\n    def place_tile(square: List[List[int]], tile: List[List[int]], size: int, row: int, col: int) -> None:\n        for i in range(size):\n            for j in range(size):\n                square[row + i][col + j] = tile[i][j]\n\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n, m = map(int, stdin.readline().strip().split())\n        size = 2 * n - 1\n        tiles = [[int(x) for x in stdin.readline().strip().split()] for _ in range(n)]\n        square = [[0 for _ in range(size)] for _ in range(size)]\n\n        for i in range(size):\n            for j in range(size):\n                for tile in tiles:\n                    if is_fit(tile, n, square, i, j):\n                        place_tile(square, tile, n, i, j)\n                        break\n\n        if is_valid(square, size):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n"
    },
    {
        "number": 4027,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    if n % 2 == 0:\n        a = [i for i in range(1, n//2+1)]\n        b = [i for i in range(n//2+1, n+1)]\n    else:\n        a = [i for i in range(1, (n+1)//2+1)]\n        b = [i for i in range((n+1)//2, n+1)]\n    \n    return abs(sum(a) - sum(b))\n"
    },
    {
        "number": 4027,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    # Initialize the sequence with 1 to n\n    seq = list(range(1, n + 1))\n    \n    # Initialize the minimum sum difference as infinity\n    min_sum_diff = float('inf')\n    \n    # Try all possible combinations of the sequence into two sets\n    for i in range(1, n):\n        for j in range(i + 1, n + 1):\n            A = seq[:i]\n            B = seq[i:j]\n            C = seq[j:]\n            sum_diff = abs(sum(A) - sum(B))\n            if sum_diff < min_sum_diff:\n                min_sum_diff = sum_diff\n    \n    return str(min_sum_diff)\n"
    },
    {
        "number": 4027,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    # initialize the sequence\n    seq = list(range(1, n+1))\n\n    # if n is odd, the sets should have equal size\n    if n % 2 == 1:\n        mid = n // 2\n        A = seq[:mid+1]\n        B = seq[mid+1:]\n    else:\n        A = [seq[i] for i in range(0, n, 2)]\n        B = [seq[i] for i in range(1, n, 2)]\n\n    # compute the absolute difference between the sums of A and B\n    diff = abs(sum(A) - sum(B))\n\n    return str(diff)"
    },
    {
        "number": 4027,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [i + 1 for i in range(n)]\n    total_sum = sum(a)\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i + 1, n):\n            sum_a = a[i] + a[j]\n            diff = abs(total_sum - 2 * sum_a)\n            min_diff = min(min_diff, diff)\n    return str(min_diff)\n"
    },
    {
        "number": 4027,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    if n % 2 == 1:\n        return \"NO\"\n    else:\n        a = n // 2\n        b = n - a\n        return str(abs(a * (a + 1) // 2 - b * (b + 1) // 2)))"
    },
    {
        "number": 4027,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    min_diff = float('inf')\n    \n    for i in range(n+1):\n        diff = abs(sum(range(1, i+1)) - sum(range(i+1, n+1)))\n        min_diff = min(min_diff, diff)\n    \n    return str(min_diff)"
    },
    {
        "number": 4027,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"0\"\n    elif n % 2 == 0:\n        a = (n // 2) * (n // 2 + 1)\n        b = a + 1\n        return str(abs(a - b))\n    else:\n        a = (n // 2) * (n // 2 + 1)\n        b = a + 1\n        return str(abs(a - b))"
    },
    {
        "number": 4027,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_list = list(map(int, stdin.split()))\n    n = input_list[0]\n\n    if n == 1:\n        return \"0\"\n\n    min_diff = float('inf')\n    min_diff_partition = None\n\n    for i in range(1, n + 1):\n        if i == n:\n            min_diff_partition = ([i], [])\n            break\n        else:\n            for j in range(i + 1, n + 1):\n                diff = abs(sum(range(i, j + 1)) - sum(range(j + 1, n + 1)))\n                if diff < min_diff:\n                    min_diff = diff\n                    min_diff_partition = (list(range(i, j + 1)), list(range(j + 1, n + 1)))\n                    break\n\n    return str(min_diff)\n"
    },
    {
        "number": 4027,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    A = []\n    B = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            A.append(i)\n        else:\n            B.append(i)\n    answer = abs(sum(A) - sum(B))\n    return str(answer)\n"
    },
    {
        "number": 4027,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    max_sum = n * (n + 1) // 2\n    min_diff = max_sum\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            A = (i + j) * (i + j + 1) // 2\n            B = (n * n - i * i - j * j) // 2\n            diff = abs(A - B)\n            if diff < min_diff:\n                min_diff = diff\n    return str(min_diff)\n\nn = int(input())\nprint(solution(n)) "
    },
    {
        "number": 4028,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(str, stdin.split(\"\\n\"))\n    n = int(n)\n    s = s[1:-1]\n    s_len = len(s)\n    ans = 0\n\n    for i in range(1, 2 * n - s_len + 2):\n        substr = s[0:i]\n        if substr.count(\"(\") == substr.count(\")\"):\n            if substr.count(\"(\") % 2 == 0:\n                if substr.count(\"()\") % 2 == 0:\n                    ans += 2 * (2 * n - 2 * len(substr) + 1)\n                else:\n                    ans += 2 * (2 * n - 2 * len(substr) + 1) - 1\n\n    return str(ans % (10**9 + 7))\n"
    },
    {
        "number": 4028,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split('\\n')[1]\n    MOD = 10**9 + 7\n\n    def is_valid(brackets: str) -> bool:\n        stack = []\n        for char in brackets:\n            if char == '(':\n                stack.append('(')\n            elif char == ')':\n                if not stack or stack.pop() != '(':\n                    return False\n        return not stack\n\n    def count_regular_sequences(brackets: str) -> int:\n        if not is_valid(brackets):\n            return 0\n\n        if len(brackets) % 2 == 1:\n            return 0\n\n        if len(brackets) == 2:\n            if brackets == \"()\":\n                return 1\n            else:\n                return 0\n\n        left, right = brackets[0], brackets[-1]\n        mid_length = len(brackets) // 2\n\n        count = count_regular_sequences(brackets[1:mid_length + 1])\n        count += count_regular_sequences(brackets[mid_length:])\n        count %= MOD\n\n        if left == '(' and right == ')':\n            return count\n        elif left == ')' and right == '(':\n            return 0\n        else:\n            return count * 2 % MOD\n\n    count = 0\n    for i in range(len(s) - n):\n        brackets = s[i:i + 2 * n + 1]\n        count = (count + count_regular_sequences(brackets)) % MOD\n\n    return str(count)\n"
    },
    {
        "number": 4028,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(str, stdin.split())\n    n = int(n)\n    s = s[1:-1]\n    total = 0\n\n    for i in range(2 * n - len(s) + 1):\n        if s == s[::-1]:\n            total += 1\n\n    return total % (10 ** 9 + 7)\n"
    },
    {
        "number": 4028,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(str, stdin.split())\n    n = int(n)\n    s = s.replace(\"(\", \" ( \").replace(\")\", \" ) \")\n    s = s.strip().split()\n    count = 0\n\n    def is_valid(seq):\n        stack = []\n        for c in seq:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if not stack or stack.pop() != '(':\n                    return False\n        return not stack\n\n    for i in range(len(s) - 2 * n):\n        seq = s[i:i + 2 * n]\n        if is_valid(seq):\n            count += 1\n\n    return str(count % (10 ** 9 + 7))"
    },
    {
        "number": 4028,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(str, input().split())\n    n = int(n)\n    s = s[1:-1]\n\n    count = 0\n    for i in range(len(s) - n + 1):\n        substr = s[i:i + n]\n        if substr.count('(') == substr.count(')'):\n            count += 1\n\n    return str(count % (10**9 + 7))"
    },
    {
        "number": 4028,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(str, input().split())\n    n = int(n)\n    s = s[1:-1]  # remove the parentheses\n\n    if len(s) > n * 2:\n        return \"0\"\n\n    count = 0\n    for i in range(len(s)):\n        substring = s[:i]\n        if len(substring) % 2 == 1:\n            continue\n        for j in range(len(substring) // 2, len(substring) // 2 + n):\n            if substring[j:j + n] == substring[:n]:\n                count += 1\n\n    return str(count % (10**9 + 7))\n\n\ninput_str = '''5\n()))()\n3\n(()\n2\n(()()\n'''\n\noutput_str = '''5\n4\n0\n'''\n\nfor i in range(len(input_str.splitlines())):\n    input_line = input_str.splitlines()[i]\n    expected_output = output_str.splitlines()[i]\n    actual_output = solution(input_line)\n    assert actual_output == expected_output, f\"For input {input_line}, expected output {expected_output}, but got {actual_output}\"\n    print(\"Passed\")\n"
    },
    {
        "number": 4028,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(str, stdin.split('\\n'))\n    n = int(n)\n    s = s.replace('()', '1+')\n    s = s.replace('(', '(1+')\n    s = s.replace(')', ')')\n    s = s.replace('+', '+1)')\n    s = s.replace('1', '1')\n    s = s.replace('(', '(')\n    s = s.replace(')', ')')\n    s = s.replace('+', '+')\n    count = 0\n    for i in range(len(s) - 2 * n + 1):\n        substring = s[i:i + 2 * n]\n        if substring.count('1') == 2 * n and substring.count('(') == 2 * n and substring.count(')') == 2 * n:\n            count += 1\n    return str(count % (10**9 + 7))\n"
    },
    {
        "number": 4028,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(str, input().split())\n    n = int(n)\n    s = s.strip()\n    result = 0\n\n    for i in range(len(s) - 2 * n + 1):\n        if s[i:i + 2 * n] == s[2 * n - 1:i - 1:-1]:\n            result += 1\n\n    return str(result % (10**9 + 7))\n"
    },
    {
        "number": 4028,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(str, input().split())\n    n = int(n)\n    s = s.replace(\"(\", \"1+\").replace(\")\", \"+\")\n    count = 0\n    \n    for i in range(len(s) - 2*n + 1):\n        if s[i:i+2*n] == \"1\" * (2*n):\n            count += 1\n    \n    return str(count % (10**9 + 7))"
    },
    {
        "number": 4028,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(str, stdin.split())\n    n = int(n)\n    s = s[1:-1]\n\n    def is_regular(bracket_sequence: str) -> bool:\n        index = 0\n        while index < len(bracket_sequence):\n            if bracket_sequence[index] == '(':\n                closing_index = bracket_sequence.find(')', index + 1)\n                if closing_index == -1:\n                    return False\n                bracket_sequence = bracket_sequence[:index] + '1' + bracket_sequence[index+1:closing_index] + '+' + bracket_sequence[closing_index+1:]\n                index = closing_index + 2\n            else:\n                index += 1\n        return True\n\n    count = 0\n    for i in range(len(s) - 2 * n + 1):\n        bracket_sequence = s[i:i+2*n]\n        if is_regular(bracket_sequence):\n            count += 1\n\n    return str(count % (10**9 + 7))\n"
    },
    {
        "number": 4029,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    num_digits = len(str(n))\n\n    # Check if the number is divisible by 25\n    if n % 25 == 0:\n        return 0\n\n    # Find the last digit of the number\n    last_digit = n % 10\n\n    # Check if the number is already divisible by 5\n    if last_digit % 5 == 0:\n        return -1\n\n    # Initialize the minimum number of moves\n    min_moves = 0\n\n    # Iterate through the digits of the number\n    for i in range(num_digits):\n        # If the current digit is 0, we cannot swap it\n        if n % 10 == 0:\n            min_moves += 1\n        else:\n            # Check if the last digit is 0, we need to swap it\n            if last_digit == 0:\n                min_moves += 1\n                last_digit = n % 10\n                n //= 10\n                n *= 10\n            # Check if the last digit is a multiple of 5, we need to swap it\n            elif last_digit % 5 == 0:\n                min_moves += 1\n                last_digit = n % 10\n                n //= 10\n                n *= 10\n            # Swap the current digit with the last digit\n            else:\n                min_moves += 1\n                n //= 10\n                n *= 10\n                n += last_digit\n        # Check if the number is divisible by 25\n        if n % 25 == 0:\n            return min_moves\n\n    return -1"
    },
    {
        "number": 4029,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    moves = 0\n    while n % 10 != 0 and n % 25 != 0:\n        if n % 10 == 0:\n            return -1\n        n //= 10\n        n = n % 10 * 100 + n // 10\n        moves += 1\n    if n % 25 == 0:\n        return moves\n    else:\n        return -1\n"
    },
    {
        "number": 4029,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    def is_divisible_by_25(num):\n        return num % 25 == 0\n\n    def is_valid(num):\n        return num >= 1 and num <= 10**18\n\n    def swap(num, i, j):\n        num = list(str(num))\n        num[i], num[j] = num[j], num[i]\n        return int(''.join(num))\n\n    def min_moves(num):\n        moves = 0\n        i = 0\n        while i < len(num) - 1:\n            if num[i] == '0':\n                i += 1\n            elif num[i] > num[i + 1]:\n                num = swap(num, i, i + 1)\n                moves += 1\n                i += 1\n            else:\n                i += 1\n        return num, moves\n\n    num = str(n)\n    valid_num, moves = min_moves(num)\n\n    if is_valid(valid_num):\n        if is_divisible_by_25(valid_num):\n            return moves\n        else:\n            return -1\n    else:\n        return -1"
    },
    {
        "number": 4029,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    if n % 10 == 0:\n        return -1\n    \n    digits = list(str(n))\n    \n    moves = 0\n    for i in range(len(digits) - 1):\n        if digits[i] == '0' and digits[i+1] != '0':\n            digits[i], digits[i+1] = digits[i+1], digits[i]\n            moves += 1\n        elif digits[i] == '0' and digits[i+1] == '0':\n            digits.remove(digits[i+1])\n            i -= 1\n            moves += 1\n        elif digits[i] != '0' and digits[i+1] == '0':\n            continue\n        else:\n            if digits[i] != '0' and digits[i+1] != '0':\n                if digits[i] != '5' and digits[i+1] != '5':\n                    if digits[i] > digits[i+1]:\n                        digits[i], digits[i+1] = digits[i+1], digits[i]\n                        moves += 1\n                else:\n                    if digits[i] > digits[i+1]:\n                        digits[i], digits[i+1] = digits[i+1], digits[i]\n                        moves += 1\n                        digits[i], digits[i+1] = digits[i+1], digits[i]\n                        moves += 1\n            else:\n                if digits[i] == '0':\n                    digits.remove(digits[i])\n                    i -= 1\n                    moves += 1\n                elif digits[i] == '5':\n                    digits.remove(digits[i])\n                    i -= 1\n                    moves += 1\n                    digits.remove(digits[i])\n                    i -= 1\n                    moves += 1\n                else:\n                    digits.remove(digits[i])\n                    i -= 1\n                    moves += 1\n                    digits.remove(digits[i])\n                    i -= 1\n                    moves += 1\n                    digits.remove(digits[i])\n                    i -= 1\n                    moves += 1\n                    digits.remove(digits[i])\n                    i -= 1\n                    moves += 1\n                \n    if (int(''.join(str(digit) for digit in digits)) % 25) == 0:\n        return moves\n    else:\n        return -1\n"
    },
    {
        "number": 4029,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    num_str = str(n)\n    moves = 0\n    while not (num_str[-1] == '5' or num_str[-1] == '0'):\n        if int(num_str[-2]) == 0:\n            num_str = num_str[:-2] + num_str[-1] + '0'\n        else:\n            num_str = num_str[:-2] + str(int(num_str[-1]) + int(num_str[-2]))\n            num_str = num_str[:-1]\n        moves += 1\n    if num_str[-1] == '0':\n        if int(num_str[-2]) % 5 == 0:\n            num_str = num_str[:-2] + '2' + '5'\n            moves += 2\n        else:\n            moves = -1\n    elif int(num_str[-1]) % 5 == 0:\n        num_str = num_str[:-1] + '2' + '5'\n        moves += 2\n    else:\n        moves = -1\n    return moves\n\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4029,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 10 == 0:\n        return -1\n\n    # Check if the number is already divisible by 25\n    if n % 25 == 0:\n        return 0\n\n    # Calculate the minimum number of moves\n    moves = 0\n    while n % 25 != 0:\n        n = swap_digits(n)\n        moves += 1\n\n    return moves\n\n\ndef"
    },
    {
        "number": 4029,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    num_str = str(n)\n    num_len = len(num_str)\n    moves = 0\n    zero_present = False\n\n    if num_str[0] == '0':\n        return -1\n\n    for i in range(1, num_len):\n        if num_str[i] == '0':\n            zero_present = True\n            break\n\n    if zero_present:\n        return -1\n\n    for i in range(num_len - 1):\n        if (int(num_str[i]) % 2 == 1 and int(num_str[i+1]) % 2 == 0) or (int(num_str[i]) % 2 == 0 and int(num_str[i+1]) % 2 == 1):\n            num_str = num_str[:i] + num_str[i+1] + num_str[i] + num_str[i+2:]\n            moves += 1\n\n    if int(num_str) % 25 == 0:\n        return moves\n    else:\n        return -1\n\n\nstdin = input()\nresult = solution(stdin)\nprint(result) "
    },
    {
        "number": 4029,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 25 == 0:\n        return 0\n    num_digits = len(str(n))\n    if num_digits == 1:\n        return -1\n    for i in range(1, num_digits):\n        if n % 25 == 0:\n            return i\n        left = n // 10\n        right = n % 10\n        n = left * 10 + right\n    return -1"
    },
    {
        "number": 4029,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    digits = list(str(n))\n    moves = 0\n\n    def is_divisible(num: int) -> bool:\n        return num % 25 == 0\n\n    def update_digits(i: int) -> None:\n        digits[i], digits[i + 1] = digits[i + 1], digits[i]\n\n    while not is_divisible(int(\"\".join(digits))):\n        found = False\n        for i in range(len(digits) - 1):\n            if digits[i] == \"0\":\n                update_digits(i)\n                moves += 1\n                found = True\n                break\n            elif digits[i] > \"0\" and digits[i + 1] == \"0\":\n                update_digits(i)\n                moves += 1\n                found = True\n                break\n        if not found:\n            return -1\n\n    return moves\n"
    },
    {
        "number": 4029,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    moves = 0\n    num = str(n)\n    while True:\n        if num == '0' or num == '25':\n            break\n        elif num[-1] == '5':\n            if num[-2] == '0':\n                num = num[:-2] + '25'\n            else:\n                num = num[:-1] + '25'\n            moves += 1\n        else:\n            i = 1\n            while i < len(num):\n                if num[i] == '5':\n                    if num[i-1] == '0':\n                        num = num[:i-1] + '25' + num[i+1:]\n                        moves += 1\n                        break\n                    else:\n                        num = num[:i] + '25' + num[i+1:]\n                        moves += 1\n                        break\n                i += 1\n    return -1 if num == '0' else moves\n\n\ndef"
    },
    {
        "number": 4030,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    colors = n + 1\n    color_dict = {}\n\n    for i, char in enumerate(s):\n        if char not in color_dict:\n            color_dict[char] = colors\n            colors += 1\n\n    color_list = [color_dict[char] for char in s]\n\n    return colors - 1, \" \".join(map(str, color_list))\n\n\ndef"
    },
    {
        "number": 4030,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n\n    def color_characters(s: str, n: int) -> int:\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2 if s[0] != s[1] else 1\n        min_colors = float('inf')\n        for i in range(1, n):\n            if s[i - 1] != s[i]:\n                min_colors = min(min_colors, color_characters(s[:i], i) + color_characters(s[i:], n - i))\n        return min_colors + 1\n\n    def find_sorted_string(s: str, n: int, min_colors: int) -> str:\n        color = [0] * n\n        for i in range(1, n):\n            if s[i - 1] != s[i]:\n                color[i] = color[i - 1] + 1\n        result = []\n        for i in range(n - 1, -1, -1):\n            if color[i] == 0:\n                result.append(s[i])\n            else:\n                for j in range(n - 1, -1, -1):\n                    if color[j] == color[i] - 1:\n                        result.append(s[j])\n                        break\n        return ' '.join(result)\n\n    min_colors = color_characters(s, n)\n    sorted_coloring = find_sorted_string(s, n, min_colors)\n    return min_colors, sorted_coloring\n\n\ndef"
    },
    {
        "number": 4030,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    from collections import defaultdict\n\n    def swap(s: str, i: int, j: int) -> str:\n        return s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1:]\n\n    def count_colors(s: str) -> int:\n        colors = defaultdict(int)\n        for i, c in enumerate(s):\n            colors[c] += 1\n        return max(colors.values())\n\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n\n    colors = count_colors(s)\n    res = colors\n\n    for i in range(n-1):\n        if s[i] > s[i+1]:\n            s = swap(s, i, i+1)\n            res -= 1\n\n    coloring = [1] * n\n    if colors == 1:\n        coloring = [1] * n\n    elif colors == 2:\n        for i, c in enumerate(s):\n            if c == 'a':\n                coloring[i] = 1\n            else:\n                coloring[i] = 2\n    else:\n        color_index = 1\n        for i, c in enumerate(s):\n            coloring[i] = color_index\n            if c == 'a':\n                color_index += 1\n\n    return res, \" \".join(map(str, coloring))"
    },
    {
        "number": 4030,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n\n    colors = []\n    res = 1\n\n    for i in range(n):\n        if i == 0:\n            colors.append(1)\n            continue\n\n        if s[i] == s[i - 1]:\n            colors.append(colors[-1])\n        else:\n            colors.append(res)\n            res += 1\n\n    coloring = [str(colors[i]) for i in range(n)]\n\n    return f\"{res}\\n{' '.join(coloring)}\"\n\n\nstdin = \"\"\"9\nabacbecfd\n\"\"\"\n\nprint(solution(stdin))\n\nstdin = \"\"\"8\naaabbcbb\n\"\"\"\n\nprint(solution(stdin))\n\nstdin = \"\"\"7\nabcdedc\n\"\"\"\n\nprint(solution(stdin))\n\nstdin = \"\"\"5\nabcde\n\"\"\"\n\nprint(solution(stdin)) "
    },
    {
        "number": 4030,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n\n    def is_sorted(s):\n        return all(s[i] <= s[i + 1] for i in range(len(s) - 1))\n\n    def sort_and_color(s):\n        s_sorted = sorted(s)\n        colors = [0] * n\n        color_index = 1\n        for i in range(n):\n            if s[i] != s_sorted[i]:\n                colors[i] = color_index\n                color_index += 1\n        return colors\n\n    def swap_and_color(colors, i, j):\n        colors[i], colors[j] = colors[j], colors[i]\n        return colors\n\n    colors = sort_and_color(s)\n    min_colors = len(set(colors))\n\n    while not is_sorted(s):\n        for i in range(n - 1):\n            if colors[i] != colors[i + 1]:\n                colors = swap_and_color(colors, i, i + 1)\n                break\n        s = ''.join(sorted(s))\n\n    return min_colors, ' '.join(map(str, colors))\n"
    },
    {
        "number": 4030,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    s = stdin.split(\"\\n\")[1]\n\n    def count_colors(s):\n        colors = 1\n        color_map = {}\n        for char in s:\n            if char not in color_map:\n                color_map[char] = colors\n                colors += 1\n        return colors\n\n    def can_be_sorted(s):\n        for i in range(len(s) - 1):\n            if s[i] > s[i + 1]:\n                return False\n        return True\n\n    colors = count_colors(s)\n    result = colors\n    color_map = {char: i + 1 for i, char in enumerate(sorted(set(s)))}\n\n    while not can_be_sorted(s):\n        for i in range(len(s) - 1):\n            if s[i] > s[i + 1]:\n                s[i], s[i + 1] = s[i + 1], s[i]\n                result = min(result, colors)\n                break\n\n    return result, \" \".join(str(color_map[char]) for char in s)\n"
    },
    {
        "number": 4030,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    s = stdin.split(\"\\n\")[1]\n    res = n\n    color = [1] * n\n\n    def is_sorted(s: str) -> bool:\n        for i in range(len(s) - 1):\n            if s[i] > s[i + 1]:\n                return False\n        return True\n\n    def find_min_color(s: str) -> int:\n        char_count = [0] * res\n        for c in s:\n            char_count[color[ord(c) - ord('a')]] += 1\n        return char_count.index(0) + 1\n\n    while not is_sorted(s):\n        for i in range(len(s) - 1):\n            if color[ord(s[i]) - ord('a')] != color[ord(s[i + 1]) - ord('a')]:\n                res = min(res, find_min_color(s[:i + 1]))\n                color[ord(s[i]) - ord('a')], color[ord(s[i + 1]) - ord('a')] = color[ord(s[i + 1]) - ord('a')], color[ord(s[i]) - ord('a')]\n                s = s[:i + 1] + s[i + 1] + s[i + 2:]\n                break\n        else:\n            res = min(res, find_min_color(s))\n            color_count = [0] * res\n            for c in s:\n                color_count[color[ord(c) - ord('a')]] += 1\n            color_index = color_count.index(0)\n            for i in range(len(s)):\n                if color[ord(s[i]) - ord('a')] == color_index:\n                    color[ord(s[i]) - ord('a')] = color_count.index(1) + 1\n            break\n\n    return str(res) + \"\\n\" + \" \".join(map(str, color))\n\n\nprint(solution(input())) "
    },
    {
        "number": 4030,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    \n    # Initialize the coloring array\n    coloring = [0] * n\n    \n    # Count the number of different characters\n    count_diff_char = len(set(s))\n    \n    # Calculate the minimum number of colors required\n    min_colors = min(count_diff_char, n)\n    \n    # Assign colors to each character\n    color = 1\n    for char in set(s):\n        for i in range(s.count(char)):\n            coloring[s.index(char)] = color\n        color += 1\n    \n    # Check if the string is already sorted\n    is_sorted = True\n    for i in range(n-1):\n        if s[i] > s[i+1]:\n            is_sorted = False\n            break\n    \n    # If the string is already sorted, return the minimum number of colors and the coloring array\n    if is_sorted:\n        return str(min_colors) + '\\n' + ' '.join(str(i+1) for i in coloring)\n    \n    # Otherwise, perform the swaps to sort the string\n    while not is_sorted:\n        # Find the first character that is not in its correct position\n        for i in range(n-1):\n            if s[i] > s[i+1]:\n                break\n        \n        # If there is no such character, the string is already sorted\n        if i == n-1:\n            break\n        \n        # Swap the characters\n        s[i], s[i+1] = s[i+1], s[i]\n        \n        # Update the coloring array\n        coloring[i], coloring[i+1] = coloring[i+1], coloring[i]\n    \n    # Check if the string is now sorted\n    is_sorted = True\n    for i in range(n-1):\n        if s[i] > s[i+1]:\n            is_sorted = False\n            break\n    \n    # If the string is still not sorted, increase the minimum number of colors and repeat the process\n    if not is_sorted:\n        min_colors += 1\n        color = 1\n        for char in set(s):\n            for i in range(s.count(char)):\n                coloring[s.index(char)] = color\n            color += 1\n    \n    # Return the minimum number of colors and the coloring array\n    return str(min_colors) + '\\n' + ' '.join(str(i+1) for i in coloring)"
    },
    {
        "number": 4030,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    \n    if n == 1:\n        return \"1\\n1\"\n    \n    def count_colors(s: str) -> int:\n        colors = set()\n        for c in s:\n            colors.add(c)\n        return len(colors)\n    \n    colors = count_colors(s)\n    while colors > 1:\n        for i in range(n - 1):\n            if s[i] > s[i + 1] and s[i] != s[i + 1]:\n                s = s[:i] + s[i + 1] + s[i] + s[i + 2:]\n                colors -= 1\n                break\n    return str(colors) + '\\n' + s\n"
    },
    {
        "number": 4030,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    from collections import defaultdict\n\n    n = int(input())\n    s = input()\n\n    def is_sorted(s: str) -> bool:\n        for i in range(1, len(s)):\n            if s[i - 1] > s[i]:\n                return False\n        return True\n\n    def find_min_colors(s: str) -> int:\n        char_count = defaultdict(int)\n        for c in s:\n            char_count[c] += 1\n        max_count = max(char_count.values())\n        return max_count\n\n    min_colors = find_min_colors(s)\n    color_count = min_colors\n    result = [1] * n\n\n    while not is_sorted(s):\n        swap_count = 0\n        for i in range(1, n):\n            if s[i - 1] > s[i]:\n                color_index = (result[i - 1] + result[i]) % min_colors + 1\n                result[i - 1] = color_index\n                result[i] = color_index\n                s = s[:i - 1] + s[i] + s[i - 1] + s[i + 1:]\n                swap_count += 1\n        if swap_count == 0:\n            break\n        color_count = min(color_count, swap_count + 1)\n\n    return color_count, \" \".join(map(str, result))\n"
    },
    {
        "number": 4031,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n = int(input_list[0])\n    strings = input_list[1:]\n\n    def is_substring(str1: str, str2: str) -> bool:\n        for i in range(len(str2) - len(str1) + 1):\n            if str2[i:i + len(str1)] == str1:\n                return True\n        return False\n\n    for i in range(1, n):\n        if not is_substring(strings[i - 1], strings[i]):\n            return \"NO\"\n\n    return \"YES\\n\" + \"\\n\".join(strings)\n"
    },
    {
        "number": 4031,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    strings = stdin.split(\"\\n\")[1:]\n\n    def is_substring(s1, s2):\n        if len(s1) > len(s2):\n            return False\n        index = s2.find(s1)\n        if index == -1:\n            return False\n        return True\n\n    def check_substrings():\n        for i in range(n):\n            for j in range(i + 1, n):\n                if not is_substring(strings[i], strings[j]):\n                    return False\n        return True\n\n    if check_substrings():\n        return \"YES\\n\" + \"\\n\".join(strings)\n    else:\n        return \"NO\"\n\ninput_data = \"\"\"5\na\naba\nabacaba\nba\naba\n\n5\na\nabacaba\nba\naba\nabab\n\n3\nqwerty\nqwerty\nqwerty\n\"\"\"\n\nresult = solution(input_data)\nprint(result) "
    },
    {
        "number": 4031,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    n = int(input_list[0])\n    input_list = input_list[1:]\n    \n    if n == 1:\n        return \"YES\\n\" + input_list[0]\n    \n    for i in range(1, n):\n        if not any(input_list[i] in s for s in input_list[:i]):\n            return \"NO\"\n            \n    return \"YES\\n\" + \"\\n\".join(input_list)\n\ndef"
    },
    {
        "number": 4031,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    strings = stdin.split('\\n')[1:]\n\n    def is_substring(s1: str, s2: str) -> bool:\n        for i in range(len(s1) - len(s2) + 1):\n            if s1[i:i + len(s2)] == s2:\n                return True\n        return False\n\n    # Check if all strings are substrings of the first string\n    for i in range(1, n):\n        for s in strings[:i]:\n            if not is_substring(strings[0], s):\n                return \"NO\"\n\n    # Check if all strings are substrings of each other\n    for i in range(n):\n        for j in range(i + 1, n):\n            if not is_substring(strings[i], strings[j]) or not is_substring(strings[j], strings[i]):\n                return \"NO\"\n\n    return \"YES\\n\" + \"\\n\".join(strings)\n"
    },
    {
        "number": 4031,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def is_substring(s1: str, s2: str) -> bool:\n        i = 0\n        for char in s1:\n            if i >= len(s2):\n                return False\n            if char == s2[i]:\n                i += 1\n        return i == len(s2)\n\n    n = int(stdin.readline())\n    strings = [line.strip() for line in stdin.readlines()]\n\n    if len(set(strings)) != len(strings):\n        return \"NO\"\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if not is_substring(strings[i], strings[j]):\n                return \"NO\"\n\n    return \"YES\\n\" + \"\\n\".join(strings)\n\n\ndef"
    },
    {
        "number": 4031,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_substring(s: str, t: str) -> bool:\n        return any(s in t[i:] for i in range(len(t) - len(s) + 1))\n\n    def rearrange_strings(strings: List[str]) -> bool:\n        for i in range(len(strings)):\n            for j in range(i + 1, len(strings)):\n                if not is_substring(strings[i], strings[j]):\n                    return False\n        return True\n\n    def format_strings(strings: List[str]) -> str:\n        return '\\n'.join(strings)\n\n    n = int(stdin.splitlines()[0])\n    strings = stdin.splitlines()[1:]\n\n    if rearrange_strings(strings):\n        return \"YES\\n\" + format_strings(strings)\n    else:\n        return \"NO\""
    },
    {
        "number": 4031,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    if n <= 0 or n > 100:\n        return \"NO\"\n\n    strings = [line.strip() for line in stdin.readlines()]\n    unique_strings = list(set(strings))\n\n    for i in range(len(unique_strings)):\n        for j in range(i + 1, len(unique_strings)):\n            if any(unique_strings[j] in unique_strings[i][k:] for k in range(len(unique_strings[i]))):\n                continue\n            else:\n                return \"NO\"\n\n    return \"YES\\n\" + \"\\n\".join(strings)"
    },
    {
        "number": 4031,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def is_substring(s: str, t: str) -> bool:\n        return any(s in t[i:] for i in range(len(t) - len(s) + 1))\n\n    n = int(stdin.split(\"\\n\")[0])\n    strings = stdin.split(\"\\n\")[1:]\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if not is_substring(strings[i], strings[j]):\n                return \"NO\"\n\n    return \"YES\\n\" + \"\\n\".join(strings)\n"
    },
    {
        "number": 4031,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_substring(s1, s2):\n        if s1 in s2:\n            return True\n        else:\n            return False\n\n    n = int(stdin[0])\n    strings = stdin[1].split(\"\\n\")\n\n    for i in range(1, n):\n        if not is_substring(strings[i-1], strings[i]):\n            return \"NO\"\n\n    return \"YES\\n\" + \"\\n\".join(strings)\n"
    },
    {
        "number": 4031,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_substring(s1, s2):\n        return any(s1 in s2[i:] for i in range(len(s2) - len(s1) + 1))\n\n    n = int(stdin.splitlines()[0])\n    strings = stdin.splitlines()[1:]\n\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if not is_substring(strings[i], strings[j]):\n                return \"NO\"\n\n    return \"YES\\n\" + \"\\n\".join(strings)\n"
    },
    {
        "number": 4032,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.splitlines()[0].split())\n    a = list(map(int, stdin.splitlines()[1].split()))\n    \n    left_count = 0\n    right_count = n\n    \n    while left_count < right_count:\n        left_diff = k - a[left_count]\n        right_diff = k - a[right_count - 1]\n        \n        if left_diff >= 0:\n            left_count += 1\n        if right_diff >= 0:\n            right_count -= 1\n            \n    return max(left_count, right_count)"
    },
    {
        "number": 4032,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    problems = list(map(int, input().split()))\n    left, right = 0, n - 1\n    solved_problems = 0\n\n    while left <= right:\n        if problems[left] > k or problems[right] > k:\n            break\n        solved_problems += 1\n        if problems[left] < problems[right]:\n            left += 1\n        else:\n            right -= 1\n\n    return solved_problems\n\n\ninput_data = '''8 4\n4 2 3 1 5 1 6 4\n5 2\n3 1 2 1 3\n5 100\n12 34 55 43 21'''\n\noutput_data = '''5\n0\n5'''\n\nprint(solution(input_data))\nprint(output_data) "
    },
    {
        "number": 4032,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    arr = list(map(int, input().split()))\n    \n    left = 0\n    right = n - 1\n    count = 0\n    \n    while left <= right:\n        if arr[left] <= k:\n            count += 1\n            left += 1\n        if arr[right] <= k:\n            count += 1\n            right -= 1\n            \n        if left > right:\n            break\n    \n    return count\n\n\ninput_string = \"\"\"8 4\n4 2 3 1 5 1 6 4\n5 2\n3 1 2 1 3\n5 100\n12 34 55 43 21\"\"\"\n\nprint(solution(input_string))\n"
    },
    {
        "number": 4032,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    problems = list(map(int, stdin.split()[2:]))\n    left_problems = [problems[0]]\n    right_problems = problems[::-1]\n    max_solved_problems = 0\n    \n    while left_problems or right_problems:\n        if left_problems and left_problems[0] <= k:\n            left_problems.pop(0)\n            max_solved_problems += 1\n        elif right_problems and right_problems[0] <= k:\n            right_problems.pop(0)\n            max_solved_problems += 1\n        else:\n            break\n    \n    return str(max_solved_problems)\n"
    },
    {
        "number": 4032,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    problems = list(map(int, input().split()))\n    left_end = True\n    right_end = True\n    left_solved = 0\n    right_solved = 0\n\n    while left_end or right_end:\n        if left_end:\n            if problems[0] <= k:\n                left_solved += 1\n                problems.pop(0)\n            else:\n                left_end = False\n\n        if right_end:\n            if problems[-1] <= k:\n                right_solved += 1\n                problems.pop(-1)\n            else:\n                right_end = False\n\n    return max(left_solved, right_solved)\n\n\ninput_data = (\n    \"8 4\\n\"\n    \"4 2 3 1 5 1 6 4\\n\"\n)\nprint(solution(input_data))  # Output: 5\n\ninput_data = (\n    \"5 2\\n\"\n    \"3 1 2 1 3\\n\"\n)\nprint(solution(input_data))  # Output: 0\n\ninput_data = (\n    \"5 100\\n\"\n    \"12 34 55 43 21\\n\"\n)\nprint(solution(input_data))  # Output: 5 "
    },
    {
        "number": 4032,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    left_solved, right_solved = 0, 0\n    left_index, right_index = 0, n-1\n\n    while left_index <= right_index:\n        if a[left_index] <= k:\n            left_solved += 1\n            left_index += 1\n        else:\n            break\n\n    while left_index <= right_index:\n        if a[right_index] <= k:\n            right_solved += 1\n            right_index -= 1\n        else:\n            break\n\n    return max(left_solved, right_solved)\n\n\ninput_string = \"8 4\\n4 2 3 1 5 1 6 4\\n\"\nprint(solution(input_string))\n\ninput_string = \"5 2\\n3 1 2 1 3\\n\"\nprint(solution(input_string))\n\ninput_string = \"5 100\\n12 34 55 43 21\\n\"\nprint(solution(input_string)) "
    },
    {
        "number": 4032,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    n, k = map(int, input_list[0].split())\n    a = list(map(int, input_list[1].split()))\n\n    left_count = 0\n    right_count = 0\n\n    while left_count < n or right_count < n:\n        if left_count == right_count:\n            return min(left_count, n)\n\n        if left_count < n and a[left_count] <= k:\n            left_count += 1\n        if right_count < n and a[n - right_count - 1] <= k:\n            right_count += 1\n\n    return min(left_count, right_count)\n"
    },
    {
        "number": 4032,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def can_solve(problem: int, k: int) -> bool:\n        return problem <= k\n\n    n, k = map(int, stdin.split()[:2])\n    problems = list(map(int, stdin.split()[2:]))\n    left, right = 0, n - 1\n    max_solved = 0\n\n    while left <= right:\n        if can_solve(problems[left], k) or can_solve(problems[right], k):\n            max_solved += 1\n            left += 1\n            right -= 1\n        else:\n            break\n\n    return str(max_solved)\n"
    },
    {
        "number": 4032,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    left_count = sum(a)\n    right_count = sum(a)\n    max_solved_problems = 0\n\n    while left_count > 0 and right_count > 0:\n        if a[0] > k:\n            left_count -= 1\n            a.pop(0)\n        elif a[-1] > k:\n            right_count -= 1\n            a.pop()\n        else:\n            max_solved_problems += 1\n            left_count -= 1\n            right_count -= 1\n            a.pop(0)\n            a.pop()\n\n    return str(max_solved_problems)\n\n\ninput_stdin = \"\"\"8 4\n4 2 3 1 5 1 6 4\"\"\"\n\noutput_expected = \"5\\n\"\n\ninput_stdin = \"\"\"5 2\n3 1 2 1 3\"\"\"\n\noutput_expected = \"0\\n\"\n\ninput_stdin = \"\"\"5 100\n12 34 55 43 21\"\"\"\n\noutput_expected = \"5\\n\"\n\ninput_stdin = \"\"\"2 100\n100 100\"\"\"\n\noutput_expected = \"2\\n\"\n\ninput_stdin = \"\"\"1 1\n1\"\"\"\n\noutput_expected = \"1\\n\"\n\ninput_stdin = \"\"\"1 0\n1\"\"\"\n\noutput_expected = \"0\\n\"\n\ninput_stdin = \"\"\"1 1\n0\"\"\"\n\noutput_expected = \"0\\n\"\n\n\ndef"
    },
    {
        "number": 4032,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    problems = list(map(int, input().split()))\n    \n    max_solved_problems = 0\n    solved_problems = 0\n    \n    while solved_problems < n:\n        max_solved_problems += 1\n        if problems[0] > k:\n            break\n        if problems[-1] > k:\n            break\n        \n        if problems[0] > problems[-1]:\n            solved_problems += 1\n            problems.pop(0)\n        else:\n            solved_problems += 1\n            problems.pop(-1)\n    \n    return max_solved_problems\n\n\ninput_string = \"\"\"8 4\n4 2 3 1 5 1 6 4\n5 2\n3 1 2 1 3\n5 100\n12 34 55 43 21\"\"\"\n\noutput_string = solution(input_string)\nprint(output_string) "
    },
    {
        "number": 4033,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin.strip()\n    a, b = map(int, input_str.split())\n    \n    # Calculate the perimeter of the rectangles\n    perimeter_red = a + 2 * (a - 1)\n    perimeter_blue = b + 2 * (b - 1)\n    \n    # Choose the minimum perimeter\n    min_perimeter = min(perimeter_red, perimeter_blue)\n    \n    return str(min_perimeter)"
    },
    {
        "number": 4033,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return min(2 * (a + b), 2 * a + 2 * b)\n"
    },
    {
        "number": 4033,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split()\n    a, b = int(input_data[0]), int(input_data[1])\n    min_perimeter = a + b\n\n    if a > b:\n        min_perimeter = a + b - 1\n\n    return str(min_perimeter)\n"
    },
    {
        "number": 4033,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, input().split())\n    return min(4 * (a + b), 2 * a + 2 * b)\n"
    },
    {
        "number": 4033,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    min_perimeter = min(a + b, a + b - 2)\n    return min_perimeter"
    },
    {
        "number": 4033,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n\n    perimeter = a + b\n    min_perimeter = perimeter\n\n    # Check all possible rectangles with sides a and b\n    for i in range(1, a + 1):\n        j = perimeter // i\n        if j >= b and a % i == 0 and b % j == 0:\n            min_perimeter = min(min_perimeter, i + j)\n\n    return str(min_perimeter)\n"
    },
    {
        "number": 4033,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    perimeter = min(a + b, 2 * (a + b - 1))\n    return str(perimeter)"
    },
    {
        "number": 4033,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    perimeter = max(a, b) + 2\n    return str(perimeter)"
    },
    {
        "number": 4033,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    perimeter = max(a, b) + 2\n    return str(perimeter)"
    },
    {
        "number": 4033,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == 0:\n        return a * 4\n    if b == 0:\n        return b * 4\n    \n    perimeter = min(a * 4 + b * 4, b * 4 + a * 4)\n    \n    return str(perimeter)\n"
    },
    {
        "number": 4034,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    color = [0] * n\n    swaps = 0\n    \n    for i in range(n-1):\n        if s[i] > s[i+1]:\n            color[i] = 1\n            color[i+1] = 1 - color[i]\n            swaps += 1\n    \n    if swaps % 2 == 1:\n        return \"NO\"\n    else:\n        return \"YES\\n\" + \"\".join(str(c) for c in color)\n\ndef"
    },
    {
        "number": 4034,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n\n    if n <= 1:\n        return \"NO\"\n\n    # Generate all permutations of the string\n    perms = set([''.join(p) for p in permutations(s)])\n\n    # Check if any of the permutations are sorted\n    for perm in perms:\n        if all(perm[i] <= perm[i + 1] for i in range(n - 1)):\n            # If sorted, generate the correct coloring\n            coloring = ''.join(['0' if s[i] <= s[i + 1] else '1' for i in range(n - 1)])\n            return \"YES\\n\" + coloring\n\n    return \"NO\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    colors = []\n    for i in range(n):\n        if i == 0 or s[i] != s[i-1]:\n            colors.append(0)\n        else:\n            colors.append(1)\n    if colors.count(0) % 2 == 0:\n        return \"YES\\n\" + \"\".join(map(str, colors))\n    else:\n        return \"NO\""
    },
    {
        "number": 4034,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    colors = [0] * n\n    \n    def can_be_sorted(colors):\n        for i in range(n - 1):\n            if colors[i] == colors[i + 1]:\n                return False\n        return True\n    \n    def sort_string(colors):\n        sorted_string = sorted(s, key=lambda x: colors.index(x))\n        return ''.join(sorted_string)\n    \n    def color_string(colors):\n        return ''.join(map(str, colors))\n    \n    if can_be_sorted(colors):\n        return \"YES\", color_string(colors)\n    else:\n        return \"NO\"\n\ndef"
    },
    {
        "number": 4034,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n\n    colors = set()\n    for i in range(n):\n        colors.add(s[i])\n    if len(colors) > 2:\n        return \"NO\"\n\n    color_dict = {}\n    for i in range(n):\n        if s[i] in color_dict:\n            color_dict[s[i]].add(i)\n        else:\n            color_dict[s[i]] = set([i])\n\n    for i in range(n - 1):\n        if s[i] == s[i + 1]:\n            continue\n        else:\n            if s[i] in color_dict[s[i + 1]]:\n                return \"NO\"\n\n    color = 0\n    for i in range(n):\n        if s[i] in color_dict[s[i]]:\n            color_dict[s[i]].remove(i)\n        else:\n            color_dict[s[i]].add(i)\n            color += 1\n            if color > 1:\n                return \"NO\"\n\n    color_str = \"0\" * n\n    for i in range(n):\n        if s[i] in color_dict[s[i + 1]]:\n            color_str = color_str[:i + 1] + \"1\" + color_str[i + 2:]\n        else:\n            color_str = color_str[:i + 1] + \"0\" + color_str[i + 2:]\n\n    return \"YES\\n\" + color_str "
    },
    {
        "number": 4034,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    s = stdin.split(\"\\n\")[1]\n\n    if n <= 1:\n        return \"YES\\n0\"\n\n    color_a = True\n    color_b = True\n\n    for i in range(1, n):\n        if s[i] >= s[i - 1]:\n            color_a = False\n        else:\n            color_b = False\n\n        if not color_a and not color_b:\n            return \"NO\"\n\n    color_a = 0\n    color_b = 1\n\n    for i in range(n):\n        if s[i] >= s[i - 1]:\n            s = s[:i] + str(color_a) + s[i + 1:]\n        else:\n            s = s[:i] + str(color_b) + s[i + 1:]\n\n    return \"YES\\n\" + s\n"
    },
    {
        "number": 4034,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin)\n    s = stdin.splitlines()[1]\n\n    # Helper function to check if a character is the same color as the previous character\n    def is_same_color(i: int) -> bool:\n        if i == 0:\n            return False\n        if s[i] == s[i-1]:\n            return True\n        return False\n\n    # Helper function to check if a character is different color from the previous character\n    def is_diff_color(i: int) -> bool:\n        if i == 0:\n            return False\n        if s[i] != s[i-1]:\n            return True\n        return False\n\n    # Check if the string is already sorted\n    if all(s[i] <= s[i+1] for i in range(n-1)):\n        # If the string is sorted, return \"NO\"\n        return \"NO\\n\"\n\n    # Otherwise, color the string\n    colored_s = \"\"\n    color = 0\n    for i in range(n):\n        if is_same_color(i):\n            colored_s += str(color)\n        else:\n            color ^= 1\n            colored_s += str(color)\n\n    # Check if after swapping, the string can be sorted\n    swapped = False\n    for i in range(n-1):\n        if is_diff_color(i) and is_same_color(i+1):\n            if s[i] > s[i+1]:\n                s[i], s[i+1] = s[i+1], s[i]\n                swapped = True\n                colored_s = list(colored_s)\n                colored_s[i] = '1' if colored_s[i] == '0' else '0'\n                colored_s[i+1] = '1' if colored_s[i+1] == '0' else '0'\n                colored_s = ''.join(colored_s)\n\n    if swapped and all(s[i] <= s[i+1] for i in range(n-1)):\n        # If the string can be sorted after swapping, return \"YES\" and the correct coloring\n        return \"YES\\n\" + colored_s + \"\\n\"\n    else:\n        # If the string cannot be sorted after swapping, return \"NO\"\n        return \"NO\\n\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def is_sorted(s: str) -> bool:\n        for i in range(len(s) - 1):\n            if s[i] > s[i + 1]:\n                return False\n        return True\n\n    def make_sorted(s: str) -> str:\n        return ''.join(sorted(s))\n\n    def color(s: str) -> str:\n        colors = ['0', '1']\n        return ''.join(colors[s.index(c)] for c in s)\n\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n\n    if not is_sorted(s):\n        s = make_sorted(s)\n        if not is_sorted(s):\n            return \"NO\"\n        return \"YES\\n\" + color(s)\n\n    return \"NO\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    \n    # Check if it's possible to color the string so that it becomes sorted\n    colors = ['0', '1']\n    for i in range(1, n):\n        if s[i-1] > s[i]:\n            for c in colors:\n                new_s = s[:i-1] + c + s[i:]\n                if new_s == new_s.lower():\n                    break\n            else:\n                return \"NO\"\n    \n    # Choose a correct coloring\n    coloring = ['0'] * n\n    for i in range(1, n):\n        if s[i-1] > s[i]:\n            for c in colors:\n                new_s = s[:i-1] + c + s[i:]\n                if new_s == new_s.lower():\n                    coloring[i-1] = c\n                    break\n            else:\n                return \"NO\"\n    \n    return \"YES\\n\" + ''.join(coloring)\n"
    },
    {
        "number": 4034,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n\n    colors = [0] * n\n    current_color = 0\n\n    for i in range(n):\n        if s[i] != 'a' - 1:\n            colors[i] = current_color\n            current_color ^= 1\n\n    # Check if the string is sorted\n    for i in range(1, n):\n        if colors[i] != 1 - colors[i-1]:\n            return \"NO\"\n\n    # Construct the coloring\n    coloring = [str(color) for color in colors]\n    return \"YES\\n\" + \"\".join(coloring)\n\n\ninput_string = \"\"\"9\nabacbecfd\n\n8\naaabbcbb\n\n7\nabcdedc\n\n5\nabcde\n\"\"\"\n\noutput_string = \"\"\"YES\n001010101\nYES\n01011011\nNO\nYES\n00000\"\"\"\n"
    },
    {
        "number": 4035,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    min_price = float('inf')\n\n    for price in range(1, A + 1):\n        consumption_tax_8 = int(price * 0.08)\n        consumption_tax_10 = int(price * 0.1)\n\n        if consumption_tax_8 <= B and consumption_tax_10 <= B:\n            min_price = min(min_price, price)\n\n    if min_price == float('inf'):\n        return -1\n    else:\n        return int(min_price)\n"
    },
    {
        "number": 4035,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    min_price = float('inf')\n\n    for price in range(1, 101):\n        tax_8 = price * 0.08\n        tax_10 = price * 0.1\n        if int(tax_8) == A and int(tax_10) == B:\n            min_price = min(min_price, price)\n\n    return str(min_price) if min_price != float('inf') else -1\n\ninput_str = input()\nresult = solution(input_str)\nprint(result) "
    },
    {
        "number": 4035,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    prices = []\n    for price in range(A, B+1):\n        tax_8 = price // 10 * 8\n        tax_10 = price // 10 * 10\n        if tax_8 >= A and tax_10 >= B:\n            prices.append(price)\n    if not prices:\n        return str(-1)\n    else:\n        return str(min(prices))\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4035,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n\n    if A <= 0 or B <= 0 or A > B:\n        return -1\n\n    def consumption_tax(price: int, rate: int) -> int:\n        return price // rate\n\n    prices = set()\n    for price in range(1, 101):\n        tax_8 = consumption_tax(price, 8)\n        tax_10 = consumption_tax(price, 10)\n        if tax_8 >= A and tax_10 >= B and (tax_8 + tax_10) % 2 == 0:\n            prices.add(price)\n\n    if len(prices) == 0:\n        return -1\n    else:\n        return min(prices)\n"
    },
    {
        "number": 4035,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    min_price = float('inf')\n    for price in range(1, int(A * 100 / (8 - 0.01)) + 1):\n        tax_8 = int(price * 0.08)\n        tax_10 = int(price * 0.1)\n        if tax_8 <= A and tax_10 <= B:\n            min_price = min(min_price, price)\n    return str(min_price) if min_price != float('inf') else '-1'\n"
    },
    {
        "number": 4035,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split()\n    A, B = int(input_data[0]), int(input_data[1])\n\n    # Function to calculate consumption tax\n    def consumption_tax(price: int, rate: float) -> int:\n        return int(price * rate)\n\n    # Lower bound of the price before tax\n    low = 1\n    # Upper bound of the price before tax\n    high = 100\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        # Calculate consumption tax for both rates\n        tax_8 = consumption_tax(mid, 0.08)\n        tax_10 = consumption_tax(mid, 0.1)\n\n        # Check if mid is a valid price\n        if tax_8 >= A and tax_10 >= B:\n            # If tax_8 < tax_10, it means the price needs to increase\n            low = mid + 1\n            # If tax_8 >= tax_10, it means the price is valid and needs to be checked for a lower price\n            ans = mid\n        else:\n            # If tax_8 >= B or tax_10 >= A, it means the price needs to decrease\n            high = mid - 1\n\n    # If no valid price is found, return -1\n    if ans == 100:\n        return -1\n    else:\n        return ans\n"
    },
    {
        "number": 4035,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    min_price = -1\n\n    for price in range(1, 101):\n        tax_8 = int(price * 0.08)\n        tax_10 = int(price * 0.1)\n\n        if (tax_8 <= A <= tax_10) and (tax_8 <= B <= tax_10):\n            min_price = price\n            break\n\n    return str(min_price)\n"
    },
    {
        "number": 4035,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    min_price = 0\n    min_count_8 = 0\n    min_count_10 = 0\n\n    for price in range(1, B + 1):\n        count_8 = int(price * 0.08)\n        count_10 = int(price * 0.1)\n\n        if count_8 <= A and count_10 <= B:\n            if not min_price:\n                min_price = price\n                min_count_8 = count_8\n                min_count_10 = count_10\n            elif price < min_price:\n                min_price = price\n                min_count_8 = count_8\n                min_count_10 = count_10\n            elif price == min_price and min_count_8 > count_8:\n                min_count_8 = count_8\n            elif price == min_price and min_count_10 > count_10:\n                min_count_10 = count_10\n\n    return str(min_price) if min_price else -1\n"
    },
    {
        "number": 4035,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n\n    def consumption_tax(price: int) -> int:\n        return int(price * 0.08) if price <= 25 else int(price * 0.1)\n\n    lower_bound = 0\n    upper_bound = 100\n    while lower_bound <= upper_bound:\n        mid = (lower_bound + upper_bound) // 2\n        if consumption_tax(mid) == A and consumption_tax(mid) == B:\n            return str(mid)\n        elif consumption_tax(mid) < A or consumption_tax(mid) < B:\n            lower_bound = mid + 1\n        else:\n            upper_bound = mid - 1\n\n    return \"-1\"\n"
    },
    {
        "number": 4035,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    result = -1\n    \n    for price in range(1, 100):\n        tax_8 = int(price * 0.08)\n        tax_10 = int(price * 0.1)\n        \n        if tax_8 == A and tax_10 == B:\n            if result == -1 or price < result:\n                result = price\n                \n    return str(result)\n"
    },
    {
        "number": 4036,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1 and k == 1:\n        return \"YES\\n1\"\n    elif n < k:\n        return \"NO\"\n\n    for i in range(1, k + 1):\n        if n % i != 0:\n            return \"NO\"\n\n    a = [n // k] * k\n    if k > 1:\n        for i in range(k - 1):\n            a[i] = max(1, min(a[i], 2 * a[i - 1]))\n\n    return \"YES\\n\" + \" \".join(map(str, a))\n\n\nn, k = map(int, input().split())\nprint(solution(input())) "
    },
    {
        "number": 4036,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < k:\n        return \"NO\"\n\n    # Initialize the array with the first problem\n    a = [1] * k\n\n    # Find the maximum number of problems that can be solved during a day\n    max_problems = min(n, 2 * a[0])\n\n    # Iterate through the remaining days\n    for i in range(1, k):\n        # Check if the previous day's problem count is less than the current day's problem count\n        if a[i - 1] < a[i]:\n            # If the previous day's problem count is less than the current day's problem count,\n            # then the current day's problem count should be less than or equal to the previous day's problem count * 2\n            max_problems = min(max_problems, 2 * a[i - 1])\n        else:\n            max_problems = min(max_problems, 2 * a[i - 1] + 1)\n\n        # Update the problem count for the current day\n        a[i] = min(max_problems, n - sum(a[:i]))\n\n    return \"YES\\n\" + \" \".join(map(str, a))\n"
    },
    {
        "number": 4036,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    if k == 1:\n        return \"YES\\n1\"\n\n    if n % k != 0:\n        return \"NO\"\n\n    x = n // k\n    a = []\n    for i in range(k):\n        a.append(x + 1)\n\n    for i in range(k - 1):\n        a[i + 1] = min(a[i + 1], 2 * a[i])\n\n    return \"YES\\n\" + \" \".join(map(str, a))\n\n\nn = int(input())\nfor _ in range(n):\n    stdin = input()\n    result = solution(stdin)\n    print(result) "
    },
    {
        "number": 4036,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[1:])\n    \n    if k == 1:\n        return \"YES\\n1\"\n    \n    for i in range(1, k):\n        if i * 2 <= n:\n            if k - i <= n - i * 2:\n                return \"YES\\n\" + \" \".join(str(i + 1) for _ in range(k))\n            else:\n                return \"NO\"\n    return \"NO\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k == 1:\n        return \"YES\\n1\"\n\n    for x in range(1, k + 1):\n        for y in range(1, k + 1):\n            a = [(x + 1) * i for i in range(1, k + 1)]\n            b = [y * i for i in range(1, k + 1)]\n            c = [2 * i for i in range(1, k + 1)]\n            if sum(a) == n and all(a[i] > 0 for i in range(k)) and all(a[i] < a[i + 1] <= 2 * a[i] for i in range(k - 1)):\n                return \"YES\\n\" + \" \".join(map(str, a))\n\n    return \"NO\"\n\ninput_data = \"26 6\\n8 3\\n1 1\\n9 4\"\noutput_data = solution(input_data)\nprint(output_data)\n"
    },
    {
        "number": 4036,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    if n < k:\n        return \"NO\"\n\n    a = [0] * k\n    a[0] = 1\n\n    for i in range(1, k):\n        a[i] = a[i - 1] + 1\n\n        if a[i] * 2 > n - a[0]:\n            a[i] = n - a[0]\n\n    if sum(a) == n:\n        return \"YES\\n\" + \" \".join(map(str, a))\n    else:\n        return \"NO\""
    },
    {
        "number": 4036,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    def is_valid(a):\n        if sum(a) != n or any(x <= 0 for x in a) or any(a[i] >= 2 * a[i - 1] for i in range(1, k)):\n            return False\n        return True\n    \n    a = [1] * k\n    while not is_valid(a):\n        a[-1] += 1\n        for i in range(k - 2, -1, -1):\n            if a[i] + 1 <= 2 * a[i + 1]:\n                a[i] += 1\n                break\n    \n    return \"YES\\n\" + \" \".join(map(str, a))"
    },
    {
        "number": 4036,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    n, k = map(int, input_list[0].split())\n    if n > 10**9 or k > 10**5:\n        return \"NO\"\n    \n    # The condition $a_i < a_{i + 1} \\le 2 a_i$ should be satisfied for each $i$ from $1$ to $k-1$.\n    # We can initialize the array as follows: a_1 = 1, a_2 = 2, a_3 = 4, ..., a_k = 2^(k-1)\n    a = [1]\n    factor = 2\n    for i in range(2, k+1):\n        a.append(a[-1] * factor)\n    \n    # Check if the sum of all elements in the array is n\n    if sum(a) != n:\n        return \"NO\"\n    \n    # Check if each element is greater than zero\n    if any(x <= 0 for x in a):\n        return \"NO\"\n    \n    return \"YES\\n\" + \" \".join(map(str, a))\n"
    },
    {
        "number": 4036,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = [0] * k\n    a[0] = 1\n    for i in range(k-1):\n        a[i+1] = a[i] + 1\n    for i in range(k-1):\n        if a[i] + 1 <= 2 * a[i] and a[i+1] + 1 <= 2 * a[i+1]:\n            a[i+1] += 1\n        else:\n            return \"NO\"\n    return \"YES\\n\" + \" \".join(map(str, a))\n\n\ninput_file = \"input.txt\"\nwith open(input_file, \"r\") as file:\n    stdin = file.read()\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4036,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin.split('\\n')\n    n, k = map(int, input_str[0].split())\n\n    if n % k != 0:\n        return \"NO\"\n\n    x = n // k\n    a = [x + 1] * k\n    a[k - 1] = max(x, 1)\n    for i in range(k - 2, -1, -1):\n        a[i] = a[i + 1] - 1\n        if a[i] <= 0:\n            return \"NO\"\n\n    return \"YES\\n\" + \" \".join(map(str, a))\n\n\ninput_str = '''26 6\n8 3\n1 1\n9 4'''\n\noutput_str = '''YES\n1 2 4 5 6 8 \nNO\nYES\n1 \nNO'''\n\nfor stdin, expected in zip(input_str.split('\\n\\n'), output_str.split('\\n')):\n    assert solution(stdin) == expected + '\\n'\n\nprint(\"All test cases passed.\")\n"
    },
    {
        "number": 4037,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def max_subset_size(n: int, r: int, a: list, b: list) -> int:\n        dp = [[0] * (r + 1) for _ in range(n + 1)]\n\n        for i in range(n + 1):\n            for j in range(r + 1):\n                if i == 0:\n                    dp[i][j] = 1\n                elif j == 0:\n                    dp[i][j] = 1\n                else:\n                    if j >= a[i - 1] and b[i - 1] <= 0:\n                        dp[i][j] = dp[i - 1][j] + dp[i - 1][j - a[i - 1]]\n                    elif j >= a[i - 1] and b[i - 1] > 0:\n                        dp[i][j] = dp[i - 1][j] + dp[i - 1][j - a[i - 1]] + dp[i - 1][j + b[i - 1]]\n                    else:\n                        dp[i][j] = dp[i - 1][j]\n\n        return dp[n][r]\n\n    stdin = stdin.split(\"\\n\")\n    n, r = map(int, stdin.pop(0).split())\n    a, b = [], []\n\n    for _ in range(n):\n        a_, b_ = map(int, stdin.pop(0).split())\n        a.append(a_)\n        b.append(b_)\n\n    result = max_subset_size(n, r, a, b)\n    return str(result)\n"
    },
    {
        "number": 4037,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n, r = map(int, input_list.pop(0).split())\n    projects = []\n    for _ in range(n):\n        a, b = map(int, input_list.pop(0).split())\n        projects.append((a, b))\n    \n    dp = [[0] * (r + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        for j in range(r + 1):\n            dp[i][j] = dp[i - 1][j]\n            if i > 0 and j >= projects[i - 1][0]:\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - projects[i - 1][0]] + projects[i - 1][1])\n    \n    result = []\n    i, j = n, r\n    while i > 0 and j > 0:\n        if dp[i][j] == dp[i - 1][j]:\n            i -= 1\n        else:\n            result.append(i - 1)\n            j -= projects[i - 1][0]\n            i -= 1\n    \n    return len(result)\n"
    },
    {
        "number": 4037,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(stdin: str) -> bool:\n        lines = stdin.split(\"\\n\")\n        if len(lines) < 2:\n            return False\n\n        n, r = map(int, lines[0].split())\n        if n < 1 or n > 100 or r < 1 or r > 30000:\n            return False\n\n        projects = []\n        for line in lines[1:]:\n            a, b = map(int, line.split())\n            if a < 1 or a > 30000 or b < -300 or b > 300:\n                return False\n            projects.append((a, b))\n\n        return True\n\n    def knap_sack(projects: list, capacity: int, index: int) -> int:\n        if index == 0 or capacity == 0:\n            return 0\n\n        if projects[index - 1][0] > capacity:\n            return knap_sack(projects, capacity, index - 1)\n\n        include_item = projects[index - 1][1] + knap_sack(projects, capacity - projects[index - 1][0], index - 1)\n        exclude_item = knap_sack(projects, capacity, index - 1)\n        return max(include_item, exclude_item)\n\n    def max_subset_size(projects: list, rating: int) -> int:\n        def binary_search(projects: list, capacity: int) -> int:\n            left, right = 0, rating\n            while left <= right:\n                mid = (left + right) // 2\n                if knap_sack(projects, mid, len(projects)) <= capacity:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n            return right\n\n        max_size = 0\n        for i in range(len(projects)):\n            subset_rating = rating - sum(projects[j][0] for j in range(i))\n            if subset_rating >= 0:\n                capacity = subset_rating\n                max_size = max(max_size, binary_search(projects[:i], capacity))\n        return max_size\n\n    if not is_valid(stdin):\n        return \"Invalid input\"\n\n    lines = stdin.split(\"\\n\")\n    n, r = map(int, lines[0].split())\n    projects = []\n    for line in lines[1:]:\n        a, b = map(int, line.split())\n        projects.append((a, b))\n\n    return max_subset_size(projects, r)\n"
    },
    {
        "number": 4037,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    n, r = map(int, input_data[0].split())\n    projects = [tuple(map(int, line.split())) for line in input_data[1:]]\n\n    dp = [0] * (r + 1)\n    for a, b in projects:\n        for i in range(r, a - 1, -1):\n            dp[i] = max(dp[i], dp[i - a] + b)\n\n    result = [i for i, x in enumerate(dp) if x >= r]\n    return len(result)"
    },
    {
        "number": 4037,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def find_max_size(projects: list) -> int:\n        dp = [1] * len(projects)\n        for i in range(len(projects)):\n            for j in range(i):\n                if projects[i][0] <= projects[j][0] + projects[j][1]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return max(dp)\n\n    n, r = map(int, stdin.split()[:2])\n    projects = [tuple(map(int, stdin.split()[i:i+2])) for i in range(2, 2*n+1, 2)]\n    max_size = find_max_size(projects)\n    return str(max_size)\n\ndef"
    },
    {
        "number": 4037,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    n, r = map(int, input_data[0].split())\n    projects = [(int(a), int(b)) for i, line in enumerate(input_data[1:]) if i < n]\n\n    # Helper function to calculate the maximum size of the subset\n    def max_subset_size(start, remaining):\n        if remaining == 0:\n            return 0\n        if start >= n:\n            return remaining\n        max_size = max_subset_size(start + 1, remaining - projects[start][1])\n        return max(max_size, max_subset_size(start + 1, remaining) + 1)\n\n    # Calculate the maximum size of the subset\n    max_size = max_subset_size(0, r)\n\n    return str(max_size)\n"
    },
    {
        "number": 4037,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    n, r = map(int, input_data[0].split())\n    projects = [tuple(map(int, line.split())) for line in input_data[1:]]\n\n    dp = [0] * (r + 1)\n    dp[r] = 1\n\n    for a, b in projects:\n        for i in range(r, a - 1, -1):\n            if dp[i - a] > 0:\n                dp[i] = max(dp[i], dp[i - a] + 1)\n\n    return dp[r]\n"
    },
    {
        "number": 4037,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(remaining_projects: List[Tuple[int, int]], current_rating: int, result: int, path: List[int]) -> None:\n        if not remaining_projects and current_rating >= 0:\n            result = max(result, len(path))\n        elif not remaining_projects:\n            return\n        for i, (a, b) in enumerate(remaining_projects):\n            if a > current_rating:\n                continue\n            new_rating = current_rating + b\n            if new_rating < 0:\n                continue\n            dfs(remaining_projects[:i] + remaining_projects[i+1:], new_rating, result, path + [i])\n\n    n, r = map(int, stdin.split()[:2])\n    projects = [tuple(map(int, stdin.split()[2:])) for _ in range(n)]\n    remaining_projects = [(a, b) for a, b in projects if b <= 0]\n    result = 0\n    dfs(remaining_projects, r, result, [])\n    return result"
    },
    {
        "number": 4037,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def parse_input(input_str: str) -> Tuple[int, List[Tuple[int, int]]]:\n        n, r = map(int, input_str.split())\n        projects = []\n        for _ in range(n):\n            a, b = map(int, input_str.split())\n            projects.append((a, b))\n        return n, r, projects\n\n    def solve(n: int, r: int, projects: List[Tuple[int, int]]) -> int:\n        projects.sort(key=lambda x: x[1])\n        dp = [0] * (r + 1)\n        max_size = 0\n        for a, b in projects:\n            for i in range(a, r + 1):\n                if dp[i] < dp[i - a] + b:\n                    dp[i] = dp[i - a] + b\n                    max_size = max(max_size, dp[i])\n        return max_size\n\n    n, r, projects = parse_input(stdin)\n    result = solve(n, r, projects)\n    return str(result)\n"
    },
    {
        "number": 4037,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def min_required_rating(projects):\n        min_rating = 0\n        for a, b in projects:\n            min_rating += a\n            if min_rating > r:\n                return False\n        return True\n\n    def max_projects(projects):\n        max_size = 0\n        for i in range(len(projects)):\n            if min_required_rating(projects[:i+1]):\n                max_size = i+1\n        return max_size\n\n    n, r = map(int, stdin.split()[:2])\n    projects = [tuple(map(int, stdin.split()[2:])) for _ in range(n)]\n    return str(max_projects(projects))\n"
    },
    {
        "number": 4038,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    nums = list(map(int, stdin.splitlines()[1].split()))\n\n    num_count = {}\n    for num in nums:\n        if num in num_count:\n            num_count[num] += 1\n        else:\n            num_count[num] = 1\n\n    if len(nums) != n * n:\n        return \"NO\"\n\n    def is_palindrome(matrix):\n        rows = len(matrix)\n        cols = len(matrix[0])\n        for i in range(rows // 2):\n            for j in range(cols // 2):\n                if matrix[i][j] != matrix[rows - i - 1][cols - j - 1]:\n                    return False\n        return True\n\n    def generate_matrix(matrix, i, used_nums):\n        if i == n:\n            if is_palindrome(matrix):\n                return matrix\n            return None\n\n        for num in nums:\n            if num in used_nums:\n                continue\n\n            row, col = i, used_nums[num]\n            matrix[row][col] = num\n\n            if generate_matrix(matrix, i + 1, used_nums) is not None:\n                return generate_matrix(matrix, i + 1, used_nums)\n\n            matrix[row][col] = 0\n\n        return None\n\n    matrix = [[0 for _ in range(n)] for _ in range(n)]\n    used_nums = {}\n    for i in range(n):\n        for j in range(n):\n            used_nums[nums[i * n + j]] = j\n\n    result = generate_matrix(matrix, 0, used_nums)\n\n    if result is not None:\n        return \"YES\\n\" + \"\\n\".join([\" \".join(map(str, row)) for row in result])\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    numbers = list(map(int, stdin.splitlines()[1].split()))\n    \n    if n > len(numbers) // 2:\n        return \"NO\"\n    \n    def is_palindromic(matrix):\n        return all(matrix[i][j] == matrix[i][-j - 1] for i in range(n) for j in range(n))\n    \n    def backtrack(matrix, numbers):\n        if not numbers:\n            return is_palindromic(matrix)\n        \n        for i in range(n):\n            for j in range(n):\n                if matrix[i][j] == 0:\n                    matrix[i][j] = numbers.pop()\n                    if backtrack(matrix, numbers):\n                        return True\n                    matrix[i][j] = 0\n        \n        return False\n    \n    matrix = [[0] * n for _ in range(n)]\n    \n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = numbers.pop()\n            \n    if backtrack(matrix, numbers):\n        return \"YES\\n\" + \"\\n\".join(str(row) for row in matrix)\n    \n    return \"NO\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    numbers = list(map(int, stdin.split(\"\\n\")[1].split()))\n    \n    def is_palindrome(matrix):\n        for i in range(n):\n            if matrix[i] != matrix[n-i-1]:\n                return False\n        return True\n\n    def is_possible(matrix):\n        num_used = [0] * 1001\n        for row in matrix:\n            for num in row:\n                num_used[num] += 1\n        \n        for num in numbers:\n            if num_used[num] == 0:\n                return False\n            num_used[num] -= 1\n        \n        return True\n\n    def build_matrix(matrix, nums_left):\n        if len(nums_left) == 0:\n            return True\n\n        for i in range(n):\n            for j in range(n):\n                if matrix[i][j] == 0:\n                    matrix[i][j] = nums_left[0]\n                    if is_palindrome(matrix) and is_possible(matrix):\n                        if build_matrix(matrix, nums_left[1:]):\n                            return True\n                    matrix[i][j] = 0\n        \n        return False\n\n    if n < 1 or n > 20:\n        return \"NO\"\n    \n    if len(numbers) != n * n:\n        return \"NO\"\n    \n    matrix = [[0] * n for _ in range(n)]\n    if build_matrix(matrix, numbers):\n        for row in matrix:\n            print(\" \".join(map(str, row)))\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    if n == 1:\n        return \"YES\\n\" + stdin.splitlines()[1]\n    \n    matrix = [[0]*n for _ in range(n)]\n    used = set()\n    for i in range(n):\n        for j in range(n):\n            for num in range(1, 1001):\n                if num not in used and (num == 1 or matrix[i][j-1] != num or matrix[i-1][j] != num):\n                    matrix[i][j] = num\n                    used.add(num)\n                    if i == n-1 and j == n-1:\n                        is_palindromic = True\n                        for k in range(n):\n                            for l in range(n):\n                                if matrix[k][l] != matrix[n-k-1][n-l-1]:\n                                    is_palindromic = False\n                                    break\n                            if not is_palindromic:\n                                break\n                        if is_palindromic:\n                            return \"YES\\n\" + \" \".join([str(num) for row in matrix for num in row])\n                    break\n    return \"NO\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    numbers = list(map(int, stdin.split('\\n')[1].split()))\n\n    if n == 1:\n        return \"YES\\n\" + str(numbers[0])\n\n    def is_palindromic(matrix):\n        rows, cols = len(matrix), len(matrix[0])\n        for i in range(rows // 2):\n            for j in range(cols // 2):\n                if matrix[i][j] != matrix[rows - 1 - i][cols - 1 - j]:\n                    return False\n        return True\n\n    def reverse_matrix(matrix):\n        rows, cols = len(matrix), len(matrix[0])\n        for i in range(rows // 2):\n            for j in range(cols // 2):\n                matrix[i][j], matrix[rows - 1 - i][cols - 1 - j] = matrix[rows - 1 - i][cols - 1 - j], matrix[i][j]\n        return matrix\n\n    def matrix_to_string(matrix):\n        return '\\n'.join([' '.join(map(str, row)) for row in matrix])\n\n    def find_solution(numbers):\n        n = len(numbers)\n        if n % 2 == 1:\n            return False\n\n        matrix = [[0 for _ in range(n // 2)] for _ in range(n // 2)]\n\n        for i in range(n // 2):\n            for j in range(n // 2):\n                matrix[i][j] = numbers[i * n // 2 + j]\n                matrix[n // 2 + i][n // 2 + j] = numbers[i * n // 2 + n // 2 + j]\n\n        if is_palindromic(matrix):\n            return matrix\n\n        for i in range(n // 2):\n            for j in range(n // 2):\n                matrix[i][j], matrix[n // 2 + i][n // 2 + j] = matrix[n // 2 + i][n // 2 + j], matrix[i][j]\n\n        if is_palindromic(matrix):\n            return matrix\n\n        return False\n\n    solution = find_solution(numbers)\n\n    if solution:\n        result = matrix_to_string(solution)\n        return \"YES\\n\" + result\n    else:\n        return \"NO\"\n\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = list(map(int, stdin.split()[1:]))\n\n    if len(nums) != n ** 2:\n        return \"NO\"\n\n    def is_palindromic(matrix):\n        rows = len(matrix)\n        cols = len(matrix[0])\n        for i in range(rows // 2):\n            for j in range(cols // 2):\n                if matrix[i][j] != matrix[rows - 1 - i][cols - 1 - j]:\n                    return False\n        return True\n\n    def find_matrix():\n        nums_dict = {}\n        for num in nums:\n            if num in nums_dict:\n                nums_dict[num] += 1\n            else:\n                nums_dict[num] = 1\n\n        def backtrack(matrix, nums_dict):\n            if len(matrix) == n:\n                if is_palindromic(matrix):\n                    return matrix\n                else:\n                    return None\n\n            for num in nums_dict:\n                count = nums_dict[num]\n                if count > 0:\n                    nums_dict[num] -= 1\n                    matrix.append([num])\n                    result = backtrack(matrix, nums_dict)\n                    if result:\n                        return result\n                    matrix.pop()\n                    nums_dict[num] += 1\n            return None\n\n        matrix = []\n        result = backtrack(matrix, nums_dict)\n        return result\n\n    matrix = find_matrix()\n    if matrix:\n        for row in matrix:\n            print(\" \".join(map(str, row)))\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    numbers = list(map(int, stdin.splitlines()[1].split()))\n\n    def is_palindromic(matrix):\n        return matrix == matrix[::-1].T\n\n    def build_matrix(numbers):\n        matrix = [[0 for _ in range(n)] for _ in range(n)]\n        for i, num in enumerate(numbers):\n            row, col = i // n, i % n\n            if matrix[row][col] == 0:\n                matrix[row][col] = num\n            else:\n                row_swap, col_swap = 1 - row, 1 - col\n                if matrix[row_swap][col_swap] == 0:\n                    matrix[row_swap][col_swap] = num\n                else:\n                    return None\n        return matrix\n\n    def print_matrix(matrix):\n        for row in matrix:\n            print(\" \".join(map(str, row)))\n\n    matrix = build_matrix(numbers)\n    if matrix is None:\n        return \"NO\"\n    if is_palindromic(matrix):\n        print_matrix(matrix)\n        return \"YES\"\n    else:\n        return \"NO\"\n\ninput_string = \"\"\"4\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\n3\n1 1 1 1 1 3 3 3 3\n4\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\"\"\"\n\nresult = solution(input_string)\nprint(result)"
    },
    {
        "number": 4038,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    numbers = list(map(int, stdin.splitlines()[1].split()))\n\n    def is_palindromic(matrix):\n        for i in range(n):\n            for j in range(n):\n                if matrix[i][j] != matrix[j][i]:\n                    return False\n        return True\n\n    def fill_matrix(numbers):\n        matrix = [[0] * n for _ in range(n)]\n        used = [False] * len(numbers)\n\n        def fill_helper(row):\n            if row == n:\n                if is_palindromic(matrix):\n                    return True\n                return False\n\n            for i, num in enumerate(numbers):\n                if not used[i]:\n                    matrix[row][row] = num\n                    used[i] = True\n                    if fill_helper(row + 1):\n                        return True\n                    used[i] = False\n                    matrix[row][row] = 0\n            return False\n\n        if fill_helper(0):\n            return matrix\n        return None\n\n    matrix = fill_matrix(numbers)\n    if matrix:\n        return \"YES\\n\" + \"\\n\".join([\" \".join(map(str, row)) for row in matrix])\n    return \"NO\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    numbers = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    matrix = [[0] * n for _ in range(n)]\n    used = [False] * (n * n)\n\n    def is_palindrome(matrix):\n        for i in range(n):\n            for j in range(n):\n                if matrix[i][j] != matrix[j][i]:\n                    return False\n        return True\n\n    def fill_matrix(x, y):\n        if x == n:\n            return is_palindrome(matrix)\n\n        for num in range(n * n):\n            if not used[num]:\n                used[num] = True\n                matrix[x][y] = numbers[num]\n                if fill_matrix(x + 1, (y + 1) % n) or fill_matrix(x + 1, y - 1):\n                    return True\n                matrix[x][y] = 0\n                used[num] = False\n        return False\n\n    if fill_matrix(0, 0):\n        for row in matrix:\n            print(\" \".join(map(str, row)))\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    if n > 20 or n < 1 or len(a) != n * n or any(x > 1000 for x in a):\n        return \"NO\"\n\n    matrix = [[0] * n for _ in range(n)]\n    a = sorted(list(set(a)))\n\n    def is_palindrome(matrix):\n        for i in range(n):\n            if any(matrix[i][j] != matrix[-i - 1][j] for j in range(n)):\n                return False\n        return True\n\n    def check_matrix(matrix, a):\n        if n % 2 == 0:\n            for i in range(n // 2):\n                if matrix[i] != matrix[n - i - 1]:\n                    return False\n\n        for i in range(n):\n            for j in range(n):\n                if matrix[i][j] != a.pop():\n                    return False\n\n        return is_palindrome(matrix)\n\n    def backtrack(matrix, a):\n        for i in range(n):\n            for j in range(n):\n                if matrix[i][j] == 0:\n                    for num in a:\n                        matrix[i][j] = num\n                        if check_matrix(matrix, a.copy()):\n                            return True\n                        matrix[i][j] = 0\n        return False\n\n    if backtrack(matrix, a):\n        return \"YES\\n\" + \"\\n\".join([\" \".join(map(str, row)) for row in matrix])\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.splitlines()\n    n, r = map(int, input_data[0].split())\n    projects = [tuple(map(int, input_data[i+1].split())) for i in range(n)]\n\n    def is_possible(projects, i, rating):\n        if i == len(projects):\n            return True\n        if rating - projects[i][0] >= 0:\n            return is_possible(projects, i+1, rating - projects[i][1])\n        return False\n\n    if is_possible(projects, 0, r):\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split(\"\\n\")\n    n, r = map(int, input_data[0].split())\n    projects = [tuple(map(int, line.split())) for line in input_data[1:]]\n\n    def check_order(order: list) -> bool:\n        rating = r\n        for i in order:\n            a, b = projects[i - 1]\n            if rating < a:\n                return False\n            rating += b\n            if rating < 0:\n                return False\n        return True\n\n    def backtrack(order: list, index: int) -> bool:\n        if index == n:\n            return check_order(order)\n        for i in range(1, n + 1):\n            order.append(i)\n            if backtrack(order, index + 1):\n                return True\n            order.pop()\n        return False\n\n    if backtrack([], 0):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4039,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split()[:2])\n    projects = []\n    for _ in range(n):\n        a, b = map(int, stdin.split()[2:4])\n        projects.append((a, b))\n\n    projects.sort(key=lambda x: x[1], reverse=True)\n\n    dp = [0] * (r + 1)\n    for a, b in projects:\n        for i in range(a - 1, -1, -1):\n            if dp[i] != 0:\n                dp[max(i + b, 0):] = [0] * (max(i + b, 0) - len(dp) + 1) + dp[:max(i + b, 0)]\n                break\n\n    if dp[-1] != 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split(\"\\n\")\n    n, r = map(int, input_data[0].split())\n    projects = [tuple(map(int, line.split())) for line in input_data[1:]]\n\n    def is_possible(order: list[int]) -> bool:\n        rating = r\n        for i in order:\n            if rating < projects[i - 1][0]:\n                return False\n            rating += projects[i - 1][1]\n        return rating >= 0\n\n    def generate_orders(i: int) -> list[list[int]]:\n        if i == n:\n            return [[]]\n        orders = []\n        for j in range(1, n + 1):\n            if j not in orders[i - 1]:\n                orders.extend(generate_orders(i + 1))\n                for order in orders:\n                    order.append(j)\n        return orders\n\n    orders = generate_orders(1)\n    for order in orders:\n        if is_possible(order):\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4039,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def is_possible(projects, rating):\n        projects = sorted(projects, key=lambda x: x[1], reverse=True)  # sort by required rating\n        for i, (a, b) in enumerate(projects):\n            if a <= rating:\n                rating += b\n                if i == len(projects) - 1:\n                    return True\n            else:\n                return False\n        return False\n\n    n, r = map(int, stdin.split()[:2])\n    projects = [tuple(map(int, stdin.split()[i:i + 2])) for i in range(2, 2 + n * 2, 2)]\n    if is_possible(projects, r):\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_possible(order: list[int]) -> bool:\n        rating = std.r\n        for project in order:\n            if rating < std.a[project]:\n                return False\n            rating += std.b[project]\n            if rating < 0:\n                return False\n        return True\n\n    std = StdData(*map(int, stdin.splitlines()))\n    orders = itertools.permutations(range(std.n))\n    for order in orders:\n        if is_possible(order):\n            return \"YES\"\n    return \"NO\"\n\nclass StdData:\n    def __init__(self, n, r, *args):\n        self.n = n\n        self.r = r\n        self.a = args[:n]\n        self.b = args[n:]\n"
    },
    {
        "number": 4039,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def find_order(projects: list, rating: int) -> bool:\n        for i, project in enumerate(projects):\n            if project[0] > rating:\n                return False\n            rating += project[1]\n        return True\n\n    n, r = map(int, input().split())\n    projects = [tuple(map(int, input().split())) for _ in range(n)]\n    order = [(i + 1, projects[i][1]) for i in range(n)]\n\n    if find_order(order, r):\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    n, r = map(int, input_data[0].split())\n    projects = [list(map(int, line.split())) for line in input_data[1:]]\n    \n    projects.sort(key=lambda x: (-x[0], -abs(x[1])))\n    \n    for i in range(n):\n        if projects[i][0] > r:\n            return \"NO\"\n        r += projects[i][1]\n        if r < 0:\n            return \"NO\"\n    \n    return \"YES\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split('\\n')\n    n, r = map(int, input_lines[0].split())\n    projects = []\n    for i in range(1, n+1):\n        a, b = map(int, input_lines[i].split())\n        projects.append((a, b))\n\n    def is_possible(order: list) -> bool:\n        for i in range(len(order)):\n            if r < projects[order[i]-1][0]:\n                return False\n            r += projects[order[i]-1][1]\n        return True\n\n    def check_order(order: list) -> bool:\n        for i in range(len(order)):\n            if r < projects[order[i]-1][0]:\n                return False\n            r += projects[order[i]-1][1]\n            if r < 0:\n                return False\n        return True\n\n    # Check if it is possible to complete all projects\n    if n == 1:\n        if r >= projects[0][0] and r + projects[0][1] >= 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    # Check all possible orders\n    orders = []\n    for i in range(n):\n        orders.append([i+1])\n        for j in range(i):\n            orders.append([j+1, i+1])\n            for k in range(j):\n                orders.append([k+1, j+1, i+1])\n\n    for order in orders:\n        if is_possible(order) and check_order(order):\n            return \"YES\"\n\n    return \"NO\"\n\ndef"
    },
    {
        "number": 4039,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    n, r = map(int, input_data[0].split())\n    projects = [list(map(int, line.split())) for line in input_data[1:]]\n\n    # Check if it's possible to complete all projects\n    for project in projects:\n        a, b = project\n        if r >= a:\n            r += b\n        else:\n            return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    n, m, d = map(int, input_data[0].split())\n    c = list(map(int, input_data[1].split()))\n\n    # Initialize the answer\n    a = [0] * n\n\n    # Calculate the length of each platform\n    platform_lengths = [0] * m\n    for i in range(m):\n        platform_lengths[i] = c[i]\n\n    # Check if it's possible to reach n+1 from 0\n    can_reach_n_plus_1 = True\n    for i in range(m):\n        if platform_lengths[i] > n - i:\n            can_reach_n_plus_1 = False\n            break\n\n    if not can_reach_n_plus_1:\n        return \"NO\\n\"\n\n    # Move platforms to the left\n    left_shift = 0\n    for i in range(m):\n        left_shift += platform_lengths[i]\n        if left_shift <= n:\n            for j in range(left_shift, left_shift + platform_lengths[i]):\n                a[j] = i + 1\n            left_shift += platform_lengths[i]\n        else:\n            break\n\n    # Move platforms to the right\n    right_shift = n + 1\n    for i in range(m - 1, -1, -1):\n        right_shift -= platform_lengths[i]\n        if right_shift >= 0:\n            for j in range(right_shift, right_shift + platform_lengths[i]):\n                a[j] = i + 1\n            right_shift -= platform_lengths[i]\n        else:\n            break\n\n    return \"YES\\n\" + ' '.join(map(str, a))"
    },
    {
        "number": 4040,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def can_reach_n(n: int, m: int, d: int, platforms: List[int], c: List[int]) -> bool:\n        platforms.sort(reverse=True)\n        total_platform_length = sum(c)\n        if total_platform_length > n:\n            return False\n\n        left_platform_length = 0\n        platforms_queue = deque(c)\n        for i in range(1, n + 1):\n            while platforms_queue and platforms_queue[-1] + i <= n + 1:\n                left_platform_length += platforms_queue.pop()\n\n            if i + d > n + 1:\n                return False\n\n            while platforms_queue and platforms_queue[0] + i <= n + 1:\n                left_platform_length -= platforms_queue.popleft()\n                if i + d > n + 1:\n                    return False\n\n            if left_platform_length > 0:\n                return False\n\n            left_platform_length += d\n            if left_platform_length > n:\n                return False\n\n        return True\n\n    def get_platform_sequence(n: int, platforms: List[int]) -> List[int]:\n        a = [0] * (n + 1)\n        left_position = 0\n\n        platforms.sort(reverse=True)\n        platforms_queue = deque(platforms)\n\n        for i in range(1, n + 1):\n            while platforms_queue and platforms_queue[-1] + left_position <= n:\n                platform_length = platforms_queue.pop()\n                for j in range(left_position + 1, left_position + platform_length):\n                    a[j] = platforms_queue.index(platform_length) + 1\n                left_position += platform_length\n\n            left_position += 1\n\n        return a\n\n    n, m, d = map(int, stdin.split())\n    c = list(map(int, stdin.split()[2:]))\n\n    if can_reach_n(n, m, d, c, c):\n        platforms = [1] * m\n        a = get_platform_sequence(n, platforms)\n        return \"YES\\n\" + \" \".join(map(str, a))\n    else:\n        return \"NO\\n\" "
    },
    {
        "number": 4040,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.splitlines()\n    n, m, d = map(int, input_data[0].split())\n    c = list(map(int, input_data[1].split()))\n\n    # helper function to check if a cell is in a platform\n    def is_in_platform(cell: int) -> bool:\n        for i in range(m):\n            if c[i] <= cell < c[i] + c[i - 1]:\n                return True\n        return False\n\n    # helper function to move platforms\n    def move_platforms(current_cell: int) -> None:\n        for i in range(m):\n            c[i] += d\n            while c[i] > current_cell + d:\n                c[i] -= d\n\n    # helper function to create the output array\n    def create_output_array(current_cell: int) -> List[int]:\n        output_array = [0] * n\n        for i in range(current_cell + 1, n + 1):\n            output_array[i - 1] = 0\n        for i in range(m):\n            for j in range(c[i] - 1, c[i] + c[i - 1]):\n                output_array[j] = i + 1\n        return output_array\n\n    # start jumping\n    current_cell = 0\n    while current_cell < n + 1:\n        if current_cell == n and is_in_platform(current_cell):\n            break\n        if is_in_platform(current_cell):\n            move_platforms(current_cell)\n        else:\n            current_cell += d\n\n    if current_cell > n:\n        return \"NO\\n\"\n    else:\n        output_array = create_output_array(current_cell)\n        return \"YES\\n\" + \" \".join(map(str, output_array)) + \"\\n\""
    },
    {
        "number": 4040,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.splitlines()\n    n, m, d = map(int, input_data[0].split())\n    c = list(map(int, input_data[1].split()))\n\n    def is_valid_move(x, c):\n        if x - d < 0 or x + d > n:\n            return False\n        for i in range(x - d, x + d + 1):\n            if i in c:\n                return True\n        return False\n\n    def dfs(x, platforms, result):\n        if x == n + 1:\n            return True\n        if not is_valid_move(x, platforms):\n            return False\n        for i in range(1, m + 1):\n            if x + c[i - 1] in platforms:\n                platforms.remove(x + c[i - 1])\n                result[x + c[i - 1]] = i\n                if dfs(x + c[i - 1], platforms, result):\n                    return True\n                platforms.add(x + c[i - 1])\n                result[x + c[i - 1]] = 0\n        return False\n\n    result = [0] * (n + 2)\n    if not dfs(0, set(range(1, m + 1)), result):\n        return \"NO\\n\" + \" \".join(map(str, result))\n\n    return \"YES\\n\" + \" \".join(map(str, result))\n\ninput_data = \"\"\"7 3 2\n1 2 1\"\"\"\noutput_data = solution(input_data)\nprint(output_data) "
    },
    {
        "number": 4040,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.splitlines()\n    n, m, d = map(int, input_data[0].split())\n    platforms = list(map(int, input_data[1].split()))\n\n    def is_reachable(platforms):\n        if n + 1 in platforms:\n            return True\n\n        i = 0\n        while i <= n:\n            if i in platforms:\n                i += platforms[platforms.index(i)]\n            else:\n                i += 1\n            if i >= n + 1:\n                return True\n        return False\n\n    def count_platforms_in_range(platforms, start, end):\n        count = 0\n        for platform in platforms:\n            if platform <= start or platform >= end:\n                continue\n            count += 1\n        return count\n\n    def get_platforms_sequence(platforms):\n        sequence = [0] * (n + 2)\n        for i in range(1, n + 1):\n            if i in platforms:\n                sequence[i] = platforms.index(i) + 1\n        sequence[-1] = m + 1\n        return sequence\n\n    if is_reachable(platforms):\n        platforms_sequence = get_platforms_sequence(platforms)\n        print(\"YES\")\n        print(\" \".join(map(str, platforms_sequence)))\n    else:\n        print(\"NO\")\n\n\ndef"
    },
    {
        "number": 4040,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split()[:3])\n    c = list(map(int, stdin.split()[3:]))\n\n    a = [0] * n\n    a[0] = 1\n    a[n] = 1\n\n    def jump(x, d):\n        if x + d > n:\n            return n\n        if a[x + d] == 0:\n            a[x + d] = 1\n            jump(x + d, d)\n\n    for platform_length in c:\n        jump(0, platform_length)\n\n    if a[-1] == 0:\n        return \"NO\\n\"\n\n    def find_platform(x):\n        for i in range(1, m + 1):\n            if a[x] == i:\n                return i\n        return 0\n\n    for i in range(n - 1, 0, -1):\n        if a[i] == 0:\n            a[i] = find_platform(i + 1)\n\n    for i in range(n - d + 1, n - 1):\n        if a[i] == 0:\n            a[i] = find_platform(i + 1)\n\n    for i in range(n - 2 * d + 2, n):\n        if a[i] == 0:\n            a[i] = find_platform(i + 1)\n\n    result = \"YES\\n\"\n    for i in range(n):\n        result += str(a[i]) + \" \"\n    return result\n\n\ndef"
    },
    {
        "number": 4040,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split()[:3])\n    c = list(map(int, stdin.split()[3:]))\n\n    platforms = [0] * (n + 1)\n    for i, length in enumerate(c, start=1):\n        platforms[length] = i\n\n    def is_reachable(platforms, n, d):\n        for i in range(1, n + 1):\n            if platforms[i] > 0 and i - platforms[i] >= d:\n                if platforms[i - d] == 0 or platforms[i - d] == platforms[i]:\n                    return True\n        return False\n\n    for i in range(1, n + 1):\n        if platforms[i] > 0 and not is_reachable(platforms, i, d):\n            return \"NO\"\n\n    answer = [0] * n\n    for i in range(n, -1, -1):\n        if platforms[i] > 0:\n            answer[i - platforms[i]] = platforms[i]\n\n    return \"YES\\n\" + \" \".join(map(str, answer))\n"
    },
    {
        "number": 4040,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin.split('\\n')\n    n, m, d = map(int, input_str[0].split())\n    c = list(map(int, input_str[1].split()))\n\n    # Initialize the sequence of river cells\n    a = [0] * (n + 1)\n\n    # Fill the sequence of river cells with platforms\n    for i, c_i in enumerate(c, start=1):\n        a[c_i] = i\n\n    # Check if it is possible to reach n+1 from 0\n    if a[n] == 0:\n        return \"NO\"\n\n    # Create a dictionary to store the indices of platforms\n    platforms = {}\n    for i, a_i in enumerate(a):\n        if a_i != 0:\n            platforms[a_i] = i\n\n    # Initialize the position to n+1\n    position = n\n\n    # Iterate through the platforms\n    for i in range(m, 0, -1):\n        # Calculate the new position based on the platform's length\n        new_position = position - c[i - 1]\n\n        # If the new position is within the bounds and is reachable\n        if new_position >= 0 and a[new_position] == 0:\n            # Move the platform to the new position\n            a[new_position] = i\n            position = new_position\n\n    # Check if the final position is 0\n    if position == 0:\n        return \"YES\\n\" + ' '.join(map(str, a))\n    else:\n        return \"NO\"\n\ndef"
    },
    {
        "number": 4040,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, input().split())\n    c = list(map(int, input().split()))\n    \n    # Initialize the river cells\n    a = [0] * (n + 2)\n    \n    # Helper function to check if a cell is reachable\n    def is_reachable(x: int, c: int) -> bool:\n        i = x + 1\n        while i <= x + d and i <= n and c > 0:\n            if a[i] != 0:\n                return True\n            if a[i] == 0 and c_i > 0:\n                return False\n            i += 1\n        return False\n    \n    # Helper function to move the platforms\n    def move_platforms(platforms: list, d: int) -> None:\n        # Move the platforms to the left\n        for i in range(m):\n            if platforms[i] > 0:\n                platforms[i] = max(platforms[i] - d, 1)\n        # Move the platforms to the right\n        for i in range(m - 1, -1, -1):\n            if platforms[i] > 0:\n                platforms[i] = min(platforms[i] + d, n)\n    \n    # Iterate until the end cell is reached\n    x = 0\n    while x < n + 1 and a[x] == 0:\n        # Check if the current cell is reachable\n        if is_reachable(x, c[a[x]]):\n            # If yes, move the platforms\n            move_platforms(a, d)\n            # Check if the current cell is reachable again\n            if not is_reachable(x, c[a[x]]):\n                return \"NO\"\n        x += 1\n    \n    # Fill the output array\n    for i in range(n):\n        if a[i] != 0:\n            a[i] = a[i] - 1\n    \n    return \"YES\\n\" + \" \".join(map(str, a))\n"
    },
    {
        "number": 4040,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split()[:3])\n    c = list(map(int, stdin.split()[3:]))\n    \n    if n < 1 or n > 1000 or m < 1 or m > n or d < 1:\n        return \"NO\"\n    \n    if sum(c) > n or len(c) != m:\n        return \"NO\"\n    \n    a = [0] * (n + 1)\n    a[0] = 1\n    \n    for i in range(1, n + 1):\n        if i - d >= 0:\n            a[i] = a[i - d]\n        if a[i] == 0:\n            for j in range(1, m + 1):\n                if i - c[j - 1] >= 0 and a[i - c[j - 1]] == j:\n                    a[i] = j\n                    break\n    \n    if a[n] == 0:\n        return \"NO\"\n    \n    a = [0] * n\n    for i in range(1, n + 1):\n        a[i - 1] = a[i - 1 - c[a[i - 1] - 1]] if a[i - 1] != 0 else 0\n    \n    return \"YES\\n\" + \" \".join(map(str, a))"
    },
    {
        "number": 4041,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\"\\n\")[0]\n    t = stdin.split(\"\\n\")[1]\n\n    def is_subsequence(s: str, t: str) -> bool:\n        i = 0\n        for char in s:\n            if char == t[i]:\n                i += 1\n                if i == len(t):\n                    return True\n        return False\n\n    n = len(s)\n    dp = [0] * n\n    dp[n - 1] = 1\n\n    for i in range(n - 2, -1, -1):\n        if s[i:i + len(t)] == t:\n            dp[i] = 1\n        else:\n            dp[i] = max(dp[i + 1], dp[i + 2])\n\n    for i in range(n - dp[0] - len(t) + 1):\n        if is_subsequence(s[i:i + len(t)], t):\n            return dp[0] + len(t)\n        else:\n            dp[0] += 1\n\n    return dp[0]\n"
    },
    {
        "number": 4041,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\"\\n\")[0]\n    t = stdin.split(\"\\n\")[1]\n\n    s_list = list(s)\n    t_list = list(t)\n\n    # Check if t is a subsequence of s\n    if t_list == sorted(s_list[:len(t_list)]):\n        # Remove characters from the end of s until t is no longer a subsequence\n        while t_list == sorted(s_list[:len(t_list)]):\n            s_list.pop()\n\n        # Return the length of the removed characters\n        return len(s_list)\n    else:\n        # t is not a subsequence of s\n        return 0\n"
    },
    {
        "number": 4041,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    s = input_list[0]\n    t = input_list[1]\n    \n    max_length = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if s[i:j+1] == t:\n                max_length = max(max_length, j-i+1)\n    return str(max_length)\n\n\ndef"
    },
    {
        "number": 4041,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split(\"\\n\")\n    s = input_data[0]\n    t = input_data[1]\n\n    # Calculate the length of the longest common substring between s and t\n    longest_common_substring = 0\n    for i in range(len(s)):\n        for j in range(len(t)):\n            if i == 0 or j == 0:\n                if s[i] == t[j]:\n                    longest_common_substring = 1\n            else:\n                if s[i] == t[j]:\n                    longest_common_substring += 1\n                else:\n                    break\n\n    # Calculate the length of the maximum possible substring to remove\n    max_substring_length = len(s) - longest_common_substring\n\n    return str(max_substring_length)\n"
    },
    {
        "number": 4041,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    s = input_list[0]\n    t = input_list[1]\n\n    # Helper function to check if t is a subsequence of s\n    def is_subsequence(t: str, s: str) -> bool:\n        t_index = 0\n        for char in s:\n            if char == t[t_index]:\n                t_index += 1\n                if t_index == len(t):\n                    return True\n        return False\n\n    # Initialize variables\n    max_length = 0\n    current_length = 0\n    left = 0\n    right = 0\n\n    # Loop through s\n    while right < len(s):\n        if is_subsequence(t, s[left:right + 1]):\n            current_length = right - left + 1\n            max_length = max(max_length, current_length)\n            right += 1\n        else:\n            left += 1\n\n    return max_length\n"
    },
    {
        "number": 4041,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    n, m = len(s), len(t)\n\n    # Initialize a 2D table to store the length of the longest common suffix of s[i:] and t\n    lcs = [[0] * (m + 1) for _ in range(n + 1)]\n\n    # Fill the table in bottom-up manner\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s[i - 1] == t[j - 1]:\n                lcs[i][j] = lcs[i - 1][j - 1] + 1\n            else:\n                lcs[i][j] = max(lcs[i - 1][j], lcs[i][j - 1])\n\n    # The length of the longest common suffix of s and t is the maximum value in the table\n    max_length = lcs[n][m]\n\n    # The length of the substring we can remove is n - max_length\n    result = n - max_length\n\n    return result\n"
    },
    {
        "number": 4041,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    s = input_list[0]\n    t = input_list[1]\n    \n    max_length = 0\n    current_length = 0\n    \n    for i in range(len(s)):\n        if s[i:i+len(t)] == t:\n            max_length = max(max_length, current_length)\n        else:\n            current_length += 1\n    \n    return str(max_length)\n"
    },
    {
        "number": 4041,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(\"\\n\")\n    s_list = list(s)\n    t_list = list(t)\n    length = len(s_list)\n    max_len = 0\n    \n    for i in range(length):\n        if s_list[i] == t_list[0]:\n            j = 0\n            while j < len(t_list) and s_list[i+j] == t_list[j]:\n                j += 1\n            if j == len(t_list):\n                max_len = i+j\n                break\n    \n    return max_len\n"
    },
    {
        "number": 4041,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(\"\\n\")\n    n = len(s)\n    m = len(t)\n    max_len = 0\n    for i in range(n - m + 1):\n        if s[i:i+m] == t:\n            max_len = max(max_len, i)\n    return max_len\n"
    },
    {
        "number": 4041,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, t = input(stdin).split('\\n')\n    max_len = 0\n    for i in range(len(s) - len(t) + 1):\n        if s[i:i + len(t)] == t:\n            max_len = max(max_len, i)\n    return max_len\n\ndef"
    },
    {
        "number": 4042,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    y = 10 - x * 10 // 5\n    return f\"{x * 10 // 5} {y}\"\n\n\ninput_str = input(\"Enter a floating-point number with 6 decimal places: \")\nprint(solution(input_str)) "
    },
    {
        "number": 4042,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    i = 1\n    while x >= 1:\n        x -= i\n        i += 1\n    i -= 1\n    result = (i // 2, i - (i // 2))\n    return \" \".join(map(str, result))\n"
    },
    {
        "number": 4042,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    a = int(10 * x)\n    b = int((1 - x) * 10)\n    return f\"{a} {b}\""
    },
    {
        "number": 4042,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    a = int(x)\n    b = int(x - a)\n    return f\"{10 - a} {10 - b}\""
    },
    {
        "number": 4042,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    a = min(10, int(x // 1) + 1)\n    b = min(10, int(x * 100 // 1) % 10 + 1)\n    return f\"{a} {b}\"\n\ninput_stdin = \"1.200000\"\noutput_stdout = solution(input_stdin)\nprint(output_stdout) "
    },
    {
        "number": 4042,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    \n    # Calculate the first integer\n    i1 = int(x * 100) // 11\n    # Calculate the second integer\n    i2 = int(x * 100) % 11\n    \n    # Add 1 to each integer to ensure they are between 1 and 10, inclusive\n    i1 += 1\n    i2 += 1\n    \n    return f\"{i1} {i2}\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    a = int(10 * x)\n    b = int(a % 10)\n    c = int((a + 10) % 10)\n    return str(c) + ' ' + str(b)"
    },
    {
        "number": 4042,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    \n    y = 1 + (x-1) // (1 - x)\n    \n    if y < 1 or y > 10:\n        y = 1\n    \n    z = (x*y) // 1\n    \n    if z < 1 or z > 10:\n        z = 1\n    \n    return f\"{z} {y}\" "
    },
    {
        "number": 4042,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    if x < 0 or x >= 5:\n        raise ValueError(\"Invalid input. x must be between 0 and 5.\")\n\n    a = int(10 * x)\n    b = int((10 - a) * x)\n\n    return f\"{a} {b}\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    integer_part = int(x)\n    decimal_part = x - integer_part\n    \n    if integer_part % 2 == 0:\n        solution1 = integer_part + 1\n        solution2 = integer_part + 1 - decimal_part\n    else:\n        solution1 = integer_part + 1\n        solution2 = integer_part + 1 - decimal_part\n    \n    return f\"{min(solution1, 10)} {min(solution2, 10)}\" "
    },
    {
        "number": 4043,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(node, visited, edges):\n        visited.add(node)\n        for neighbor in tree[node]:\n            if neighbor not in visited:\n                if len(visited) > diameter:\n                    return False\n                if len(visited) > 1 and len(visited) < diameter:\n                    continue\n                if not dfs(neighbor, visited, edges):\n                    return False\n                edges.append((node, neighbor))\n        return True\n\n    n, d, k = map(int, stdin.split())\n    tree = [set() for _ in range(n + 1)]\n    for i in range(n - 1):\n        u, v = map(int, input().split())\n        tree[u].add(v)\n        tree[v].add(u)\n    diameter = d\n    result = []\n    for i in range(1, n + 1):\n        visited = set()\n        edges = []\n        if dfs(i, visited, edges):\n            result.extend(edges)\n            if len(visited) < k * (n - 1):\n                return \"NO\"\n    return \"YES\" if result else \"NO\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    if d >= n - 1 or k >= n or k >= n*(n-1)//2:\n        return \"NO\"\n    \n    tree = [[] for _ in range(n)]\n    leaves = [(i+1, random.randint(1, n)) for i in range(n-1)]\n    leaves.sort(key=lambda x: x[1])\n\n    for i in range(n-1):\n        if leaves[i][1] + d <= leaves[i+1][1]:\n            tree[leaves[i][0]].append(leaves[i+1][0])\n            tree[leaves[i+1][0]].append(leaves[i][0])\n        else:\n            break\n\n    if len(tree) < n:\n        return \"NO\"\n\n    def dfs(node: int, visited: set[int]) -> bool:\n        if len(visited) >= k:\n            return False\n        visited.add(node)\n        for neighbor in tree[node]:\n            if neighbor not in visited:\n                if dfs(neighbor, visited):\n                    return True\n        return False\n\n    for i in range(1, n+1):\n        if dfs(i, set()):\n            continue\n        else:\n            return \"NO\"\n\n    edges = []\n    for i in range(1, n):\n        for neighbor in tree[i]:\n            edges.append((i, neighbor))\n\n    return \"YES\\n\" + \"\\n\".join(map(lambda x: \" \".join(map(str, x)), edges)) "
    },
    {
        "number": 4043,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    graph = [[] for _ in range(n + 1)]\n    visited = [False] * (n + 1)\n    stack = [(1, 0)]\n    res = []\n\n    def dfs(u: int, p: int, dep: int) -> None:\n        visited[u] = True\n        if p:\n            graph[p].append(u)\n            graph[u].append(p)\n        for v in range(1, n + 1):\n            if not visited[v] and dep + 1 <= d:\n                stack.append((v, u, dep + 1))\n\n    while stack:\n        u, p, dep = stack.pop()\n        if len(graph[u]) <= k:\n            dfs(u, p, dep)\n        if dep == d:\n            break\n\n    if any(len(neighbors) > k for neighbors in graph):\n        return \"NO\"\n\n    for u in range(1, n + 1):\n        for v in range(1, n + 1):\n            if u != v and v not in graph[u] and graph[v]:\n                res.append(f\"{u} {v}\")\n\n    if res:\n        return \"YES\\n\" + \"\\n\".join(res)\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    if d > n-1:\n        return \"NO\"\n    if d + 1 > n:\n        return \"NO\"\n    if k > d + 1:\n        return \"NO\"\n\n    graph = [[] for _ in range(n+1)]\n    root = 1\n    degree = [0] * (n+1)\n\n    def dfs(node: int, depth: int):\n        nonlocal k, d, root, graph, degree\n        if depth > d:\n            return False\n        if degree[node] >= k:\n            return False\n        degree[node] += 1\n        for i in range(1, n+1):\n            if i != node and graph[i] == [] and degree[i] < k:\n                graph[node].append(i)\n                graph[i].append(node)\n                if dfs(i, depth+1):\n                    return True\n                graph[node].pop()\n                graph[i].pop()\n        degree[node] -= 1\n        return True\n\n    dfs(root, 1)\n    edges = []\n    for i in range(1, n):\n        edges.append((graph[i][0], i))\n    return \"YES\\n\" + \"\\n\".join(f\"{u} {v}\" for u, v in edges)"
    },
    {
        "number": 4043,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n\n    if d < 1 or n < 2 or k < 1:\n        return \"NO\"\n\n    if d == 1 and k >= n:\n        return \"YES\\n\" + \" \".join(map(str, [(i+1) for i in range(n-1)]))\n\n    if k == 1 and d >= n-1:\n        return \"YES\\n\" + \" \".join(map(str, [(i+1) for i in range(n-1)]))\n\n    if k == 1:\n        return \"NO\"\n\n    def dfs(node, visited, adj, depth, max_depth, min_degree, depth_set):\n        if depth == max_depth:\n            depth_set.add(depth)\n            return\n\n        for neighbor in adj[node]:\n            if neighbor not in visited and visited[neighbor] < k:\n                visited[neighbor] += 1\n                dfs(neighbor, visited, adj, depth+1, max_depth, min_degree, depth_set)\n                visited[neighbor] -= 1\n\n    adj = [[] for _ in range(n)]\n    visited = [0] * n\n    max_depth = 1\n    min_degree = k\n\n    def construct_tree(node, parent):\n        for neighbor in range(n):\n            if neighbor != parent and visited[neighbor] < k:\n                adj[node].append(neighbor)\n                visited[neighbor] += 1\n                construct_tree(neighbor, node)\n                visited[neighbor] -= 1\n\n    construct_tree(0, -1)\n    dfs(0, visited, adj, 0, d, min_degree, set())\n\n    if len(depth_set) != 1:\n        return \"NO\"\n\n    max_depth = list(depth_set)[0]\n    tree_edges = []\n    for i in range(n):\n        for neighbor in adj[i]:\n            if visited[neighbor] == k:\n                tree_edges.append((i+1, neighbor+1))\n\n    return \"YES\\n\" + \"\\n\".join(map(lambda x: \" \".join(map(str, x)), tree_edges)) "
    },
    {
        "number": 4043,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_possible(n: int, k: int) -> bool:\n        if n % 2 == 1:\n            return k > 1 and k <= n - 1\n        else:\n            return k > 1 and k <= n - 2\n\n    def generate_tree(n: int, d: int, k: int) -> str:\n        if not is_possible(n, k):\n            return \"NO\"\n\n        tree = [[] for _ in range(n)]\n        for i in range(n - 1):\n            edge = [i + 1, i + 2]\n            tree[i].append(edge[0])\n            tree[i + 1].append(edge[1])\n            tree[i + 2].append(edge[0])\n            tree[i + 2].append(edge[1])\n\n        return \"YES\\n\" + \"\\n\".join([\" \".join(map(str, edge)) for edge in tree])\n\n    n, d, k = map(int, stdin.split())\n    return generate_tree(n, d, k)\n"
    },
    {
        "number": 4043,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n\n    if d > n - 1:\n        return \"NO\"\n\n    if k >= n:\n        return \"NO\"\n\n    tree = {}\n    for i in range(1, n + 1):\n        tree[i] = []\n\n    def dfs(node, parent):\n        for i in range(1, n + 1):\n            if i != node and i not in tree[node] and len(tree[node]) < k:\n                tree[node].append(i)\n                dfs(i, node)\n                tree[node].remove(i)\n\n    dfs(1, -1)\n\n    for i in range(1, n):\n        for j in tree[i]:\n            if j > i:\n                print(i, j)\n    return \"YES\" "
    },
    {
        "number": 4043,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    n, d, k = map(int, input_list[0].split())\n\n    if d >= n or k > (n - 1) // 2:\n        return \"NO\"\n\n    root = 1\n    tree = {root: set()}\n\n    for i in range(2, n + 1):\n        added = False\n        for node in tree:\n            if len(tree[node]) < k:\n                tree[node].add(i)\n                tree[i] = {node}\n                added = True\n                break\n            if added:\n                break\n\n    def diameter(tree):\n        def depth(node):\n            if not tree[node]:\n                return 0\n            return 1 + max(depth(child) for child in tree[node])\n\n        def diameter_rec(node):\n            if not tree[node]:\n                return 0\n            return max(diameter_rec(child) for child in tree[node])\n\n        return max(depth(root) + diameter_rec(root), diameter_rec(root) + depth(root))\n\n    if diameter(tree) <= d:\n        edges = []\n        for node in tree:\n            for child in tree[node]:\n                edges.append((node, child))\n        return \"YES\\n\" + \"\\n\".join(map(lambda x: \"{} {}\".format(x[0], x[1]), sorted(edges)))\n\n    return \"NO\""
    },
    {
        "number": 4043,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    n, d, k = map(int, input_data[0].split())\n\n    # Check if it is possible to construct a tree with the given parameters\n    if n < 2 or d < 1 or k < 1 or n % 2 == 0:\n        return \"NO\"\n\n    # Construct the tree\n    tree = {}\n    for i in range(1, n):\n        tree[i] = [j for j in range(1, i)] + [j for j in range(i + 1, n)]\n\n    # Check if the constructed tree satisfies the conditions\n    for i in range(1, n):\n        if len(tree[i]) > k:\n            return \"NO\"\n\n    diameter = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            if j not in tree[i]:\n                diameter = max(diameter, i + j)\n\n    if diameter > d:\n        return \"NO\"\n\n    # Print the tree\n    edges = []\n    for i in range(1, n):\n        for j in tree[i]:\n            edges.append((i, j))\n\n    return \"YES\\n\" + \"\\n\".join(map(lambda x: \" \".join(map(str, x)), edges))\n\n\nstdin = \"\"\"6 3 3\n10 4 3\n8 5 3\"\"\"\n\nprint(solution(stdin)) "
    },
    {
        "number": 4043,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    if n < 2 or d < 2 or k < 1 or n > 4*10**5 or d > 4*10**5 or k > 4*10**5:\n        return \"NO\"\n    \n    if n == 2:\n        return \"YES\\n1 2\"\n    \n    if d > n-1:\n        return \"NO\"\n    \n    if k >= n-1:\n        return \"YES\\n\" + \"\\n\".join(f\"{i} {i+1}\" for i in range(1, n-1))\n    \n    return \"NO\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    n = a + b\n    s = [0] * n\n    indices = []\n\n    for i in range(x):\n        if i < a:\n            s[i] = 0\n        else:\n            s[i] = 1\n        indices.append(i)\n\n    for i in range(x, n):\n        if i < a:\n            s[i] = 1 - s[i - x]\n        else:\n            s[i] = 0\n        indices.append(i)\n\n    s = \"\".join(str(x) for x in s)\n    return s\n"
    },
    {
        "number": 4044,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    n = a + b\n    \n    # Build the binary string\n    s = '1' * a + '0' * b\n    \n    # Add the required number of 1s and 0s\n    if x > 0:\n        for i in range(x):\n            if i % 2 == 0:\n                s += '0'\n            else:\n                s += '1'\n    \n    return s"
    },
    {
        "number": 4044,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    n = a + b\n    s = [0] * n\n    count = 0\n    i = 0\n    while count < x:\n        if i == 0:\n            s[0] = 0\n        elif i == n - 1:\n            s[n - 1] = 1\n        elif s[i - 1] != s[i]:\n            s[i] = 1 - s[i - 1]\n            count += 1\n        else:\n            s[i] = 1 - s[i - 1]\n        i += 1\n    return ''.join(map(str, s))\n\n\ndef"
    },
    {
        "number": 4044,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    s = '0' * a + '1' * b\n    if x > a + b - x:\n        s = '1' * a + '0' * b\n    s = list(s)\n    for i in range(len(s)):\n        if s[i] == '0' and i < len(s) - 1 and s[i+1] == '1':\n            s[i+1], s[i] = s[i], s[i+1]\n            x -= 1\n            if x == 0:\n                break\n    return ''.join(s)\n"
    },
    {
        "number": 4044,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    n = a + b\n    s = [0] * n\n    \n    # Add a zero at the beginning\n    s[0] = 0\n    \n    # Add a one at the beginning\n    s[1] = 1\n    \n    # Add the remaining zeroes and ones\n    for i in range(2, n):\n        if i <= a:\n            s[i] = 0\n        elif i <= a + b - 1:\n            s[i] = 1\n        else:\n            s[i] = s[i-1]\n    \n    # Find the indices with consecutive 0's or 1's\n    for i in range(2, n):\n        if s[i] == s[i-1]:\n            x -= 1\n            if x == 0:\n                break\n    \n    # Construct the final string\n    return ''.join(map(str, s))"
    },
    {
        "number": 4044,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    n = a + b\n    s = \"\"\n    for _ in range(n):\n        if a > 0:\n            s += \"0\"\n            a -= 1\n        elif b > 0:\n            s += \"1\"\n            b -= 1\n        else:\n            break\n    if x > 0:\n        for i in range(n - 1):\n            if s[i] != s[i + 1]:\n                x -= 1\n            if x == 0:\n                break\n        if x > 0:\n            for i in range(n - 2, -1, -1):\n                if s[i] != s[i + 1]:\n                    x -= 1\n                if x == 0:\n                    break\n    return s\n"
    },
    {
        "number": 4044,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    n = a + b\n    s = [str(i % 2) for i in range(n)]\n    ones = [i for i in range(n) if s[i] == '0']\n    zeros = [i for i in range(n) if s[i] == '1']\n\n    for i in range(x):\n        if ones:\n            idx = ones.pop(0)\n            s[idx] = '1'\n        else:\n            idx = zeros.pop(0)\n            s[idx] = '0'\n\n    return ''.join(s)\n\n\ndef"
    },
    {
        "number": 4044,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    n = a + b\n    s = \"0\" * a + \"1\" * b\n    if x >= n:\n        x = n - 1\n    s = list(s)\n    for i in range(a, a + x):\n        s[i] = \"1\" if s[i] == \"0\" else \"0\"\n    for i in range(a + x, a + b):\n        s[i] = \"0\" if s[i] == \"1\" else \"1\"\n    return \"\".join(s)\n\ndef"
    },
    {
        "number": 4044,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    n = a + b\n    s = \"1\" * a + \"0\" * b\n    indices = []\n    for i in range(1, n):\n        if s[i] != s[i - 1]:\n            indices.append(i)\n        if len(indices) == x:\n            break\n    return \"\".join(s[i] for i in indices)\n"
    },
    {
        "number": 4044,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    n = a + b\n    s = \"\"\n    for _ in range(a):\n        s += \"0\"\n    for _ in range(b):\n        s += \"1\"\n    for i in range(a, n - x):\n        s += \"0\"\n    for i in range(a + b - x, n):\n        s += \"1\"\n    return s\n"
    },
    {
        "number": 4045,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0].strip())\n    s = stdin.split('\\n')[1].strip()\n    t = stdin.split('\\n')[2].strip()\n\n    if n * 3 > 2 * (len(s) + len(t)):\n        return \"NO\"\n\n    res = \"\"\n    for i in range(n):\n        res += \"a\"\n    for i in range(n):\n        res += \"b\"\n    for i in range(n):\n        res += \"c\"\n\n    res = res[:2 * (len(s) + len(t))]\n\n    for i in range(2 * (len(s) + len(t))):\n        if res[i:i + len(s)] == s or res[i:i + len(t)] == t:\n            return \"NO\"\n\n    return \"YES\\n\" + res\n"
    },
    {
        "number": 4045,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    n = int(input_list[0])\n    s = input_list[1]\n    t = input_list[2]\n\n    res = \"\"\n    if n % 2 != 0:\n        res += \"a\" * (n // 2 + 1)\n        res += \"b\" * (n // 2)\n        res += \"c\" * (n // 2)\n    else:\n        res += \"a\" * (n // 2)\n        res += \"b\" * (n // 2)\n        res += \"c\" * (n // 2)\n\n    if res.find(s) != -1 or res.find(t) != -1:\n        return \"NO\"\n    else:\n        return \"YES\\n\" + res"
    },
    {
        "number": 4045,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n    t = stdin.splitlines()[2]\n\n    def is_valid(res):\n        if s in res or t in res:\n            return False\n        return True\n\n    def generate_res():\n        res = 'a' * n + 'b' * n + 'c' * n\n        while not is_valid(res):\n            res = ''.join(random.sample('abc', n * 3))\n        return res\n\n    if is_valid('a' * n + 'b' * n + 'c' * n):\n        return \"YES\\n\" + \"a\" * n + \"b\" * n + \"c\" * n\n    else:\n        return \"NO\"\n\ndef"
    },
    {
        "number": 4045,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n    t = stdin.splitlines()[2]\n\n    if n > 3:\n        return \"NO\"\n\n    res = []\n    for i in range(n):\n        res.append(\"a\")\n        res.append(\"b\")\n        res.append(\"c\")\n\n    res = \"\".join(res)\n\n    if s in res or t in res:\n        return \"NO\"\n\n    return \"YES\\n\" + res\n\n\ndef"
    },
    {
        "number": 4045,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.strip().split(\"\\n\")\n    n = int(input_list[0])\n    s = input_list[1]\n    t = input_list[2]\n\n    if n % 3 != 0:\n        return \"NO\"\n\n    a_count = n // 3\n    b_count = n // 3\n    c_count = n // 3\n\n    if s[0] == 'a' or s[1] == 'a':\n        a_count -= 1\n    if s[0] == 'b' or s[1] == 'b':\n        b_count -= 1\n    if s[0] == 'c' or s[1] == 'c':\n        c_count -= 1\n\n    if t[0] == 'a' or t[1] == 'a':\n        a_count -= 1\n    if t[0] == 'b' or t[1] == 'b':\n        b_count -= 1\n    if t[0] == 'c' or t[1] == 'c':\n        c_count -= 1\n\n    res = []\n    for i in range(a_count):\n        res.append('a')\n    for i in range(b_count):\n        res.append('b')\n    for i in range(c_count):\n        res.append('c')\n\n    return \"YES\\n\" + ''.join(res)"
    },
    {
        "number": 4045,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    t = stdin.split('\\n')[2]\n    \n    # Check if it is possible to find the suitable string\n    if n * 3 > len(s) + len(t):\n        return \"NO\"\n    \n    # Generate the string res\n    res = \"\"\n    count_a = n\n    count_b = n\n    count_c = n\n    for i in range(3 * n):\n        if count_a > 0 and count_b > 0 and count_c > 0:\n            res += 'a'\n            count_a -= 1\n        elif count_a == 0 and count_b > 0 and count_c > 0:\n            res += 'b'\n            count_b -= 1\n        else:\n            res += 'c'\n            count_c -= 1\n    \n    # Check if s and t are not substrings of res\n    if s not in res and t not in res:\n        return \"YES\\n\" + res\n    else:\n        return \"NO\""
    },
    {
        "number": 4045,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n    t = stdin.splitlines()[2]\n\n    res = \"\"\n    for i in range(n):\n        if i % 2 == 0:\n            res += s\n        else:\n            res += t\n\n    if res.find(s) != -1 or res.find(t) != -1:\n        return \"NO\"\n    return \"YES\\n\" + res\n"
    },
    {
        "number": 4045,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0].strip())\n    s = stdin[1].strip()\n    t = stdin[2].strip()\n\n    res = \"abc\" * n\n\n    if s in res or t in res:\n        return \"NO\"\n    else:\n        return \"YES\\n\" + res\n\ndef"
    },
    {
        "number": 4045,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid_res(res: str) -> bool:\n        for s in (s, t):\n            if s in res:\n                return False\n        return True\n\n    n = int(stdin[0])\n    s = stdin[1]\n    t = stdin[2]\n\n    if n == 0:\n        return \"NO\"\n\n    res = \"a\" * n + \"b\" * n + \"c\" * n\n    new_res = \"\"\n\n    for char in res:\n        if char == s[0]:\n            new_res += s\n        elif char == t[0]:\n            new_res += t\n        else:\n            new_res += char\n\n    if is_valid_res(new_res):\n        return \"YES\\n\" + new_res\n    else:\n        return \"NO\"\n\n\nstdin = \"\"\"2\nab\nbc\"\"\"\nprint(solution(stdin.split(\"\\n\")))\n\nstdin = \"\"\"3\naa\nbc\"\"\"\nprint(solution(stdin.split(\"\\n\")))\n\nstdin = \"\"\"1\ncb\nac\"\"\"\nprint(solution(stdin.split(\"\\n\"))) "
    },
    {
        "number": 4045,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n    t = stdin.splitlines()[2]\n    \n    if n * 3 > len(s) + len(t):\n        return \"NO\"\n    \n    res = \"\"\n    for _ in range(n):\n        res += \"a\"\n    for _ in range(n):\n        res += \"b\"\n    for _ in range(n):\n        res += \"c\"\n    \n    return \"YES\\n\" + res"
    },
    {
        "number": 4046,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    q = list(map(int, stdin.split()[1:]))\n    \n    for i in range(n-1):\n        if q[i] > n - i - 1:\n            return -1\n        \n    for i in range(n-1):\n        if q[i] < 0:\n            return -1\n        \n    p = [0] * n\n    p[0] = 1\n    for i in range(1, n-1):\n        p[i] = p[i-1] + q[i-1]\n        \n    p[n-1] = n\n    for i in range(n-1, 0, -1):\n        p[i-1] = p[i-1] - q[i-2]\n        \n    return ' '.join(map(str, p))"
    },
    {
        "number": 4046,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    q = list(map(int, stdin.splitlines()[1].split()))\n    \n    for i in range(n-1):\n        if q[i] >= n or q[i] < 1:\n            return \"-1\"\n        \n    p = [1] + [q[i]+p[-1] for i in range(n-1)] + [n]\n    \n    return \" \".join(map(str, p))\n\n\nn = int(input())\nq = list(map(int, input().split()))\n\nprint(solution(str(n) + \"\\n\" + \" \".join(map(str, q)))) "
    },
    {
        "number": 4046,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    q = list(map(int, input().split()))\n\n    # Check if q is a valid permutation\n    for i in range(len(q)):\n        if q[i] % (i + 1) != 0:\n            return -1\n\n    # Construct the permutation\n    p = [0] * n\n    p[0] = 1\n    for i in range(1, n):\n        p[i] = p[i - 1] + q[i - 1]\n\n    return ' '.join(map(str, p))"
    },
    {
        "number": 4046,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    q = list(map(int, stdin.split(\"\\n\")[1].split()))\n    \n    if n == 1:\n        return str(q[0])\n    \n    def is_permutation(perm):\n        return sorted(perm) == list(range(1, n+1))\n    \n    for i in range(n-1):\n        if q[i] < 0:\n            q[i] = q[i] % n + 1\n        elif q[i] == n:\n            q[i] = 1\n        else:\n            q[i] = q[i] + 1\n    \n    p = [0] * n\n    p[0] = q[0]\n    for i in range(1, n):\n        j = 0\n        while j < i and q[i] != p[j] + i:\n            j += 1\n        if j == i:\n            return \"-1\"\n        p[i] = q[i]\n    \n    if is_permutation(p):\n        return \" \".join(map(str, p))\n    else:\n        return \"-1\"\n\n\ninput_data = \"\"\"5\n1 1 1 1\"\"\"\n\nprint(solution(input_data)) "
    },
    {
        "number": 4046,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    q = list(map(int, stdin.split('\\n')[1].split()))\n\n    def is_valid_permutation(n: int, q: list) -> bool:\n        p = [0] * n\n        p[0] = 1\n        for i in range(1, n):\n            j = 1\n            while j < i:\n                if p[j] == q[i - 1] - j:\n                    break\n                j += 1\n            p[i] = p[j] + q[i - 1] - j\n        return p == list(range(1, n + 1))\n\n    if not is_valid_permutation(n, q):\n        return \"-1\"\n\n    p = [0] * n\n    for i in range(n - 1):\n        p[q[i] + 1] = q[i] + 1\n        for j in range(q[i] + 1, p[i]):\n            p[j] = p[q[i] + 1]\n    p[0] = 1\n    return \" \".join(map(str, p))\n"
    },
    {
        "number": 4046,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    q = list(map(int, input().split()))\n\n    if n == 2:\n        return -1\n\n    perm = [1] * n\n    perm[0] = 2\n    for i in range(1, n - 1):\n        perm[i] = perm[i - 1] + q[i - 1]\n\n    if perm[-1] != n:\n        return -1\n\n    return ' '.join(map(str, perm))\n"
    },
    {
        "number": 4046,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *q = map(int, stdin.split())\n    q_min = min(q)\n    q_max = max(q)\n    \n    if not (-n <= q_min <= q_max <= n):\n        return -1\n    \n    p = [0] * (n + 1)\n    \n    for i in range(n - 1):\n        p[i+1] = p[i] + q[i]\n    \n    for i in range(n):\n        p[i+1] += i + 1 - p[i]\n    \n    if p[-1] != n:\n        return -1\n    \n    return \" \".join(map(str, p[:-1]))\n\n\ninput_data = \"\"\"3\n-2 1\"\"\"\n\noutput_data = solution(input_data)\nprint(output_data)  # Output: 3 1 2\n\n\ninput_data = \"\"\"5\n1 1 1 1\"\"\"\n\noutput_data = solution(input_data)\nprint(output_data)  # Output: 1 2 3 4 5\n\n\ninput_data = \"\"\"4\n-1 2 2\"\"\"\n\noutput_data = solution(input_data)\nprint(output_data)  # Output: -1 "
    },
    {
        "number": 4046,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    q = list(map(int, stdin.split('\\n')[1].split()))\n    \n    if any(q_i > n or q_i < -n for q_i in q):\n        return \"-1\"\n    \n    perm = [i+1 for i in range(n-1)]\n    \n    for i in range(n-1):\n        if perm[i] + q[i] > n or perm[i] + q[i] < 1:\n            return \"-1\"\n        \n        perm[i] += q[i]\n    \n    perm.append(n)\n    \n    return \" \".join(map(str, perm))\n"
    },
    {
        "number": 4046,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split('\\n')[0].split())\n    q = sorted(map(int, stdin.split('\\n')[1].split()))\n\n    if n < 1 or n > 2 * 10**5:\n        return -1\n\n    for i in range(n - 1):\n        if q[i] < -n or q[i] > n:\n            return -1\n\n    p = [i + 1 for i in range(n)]\n    for i in range(n - 1):\n        p[q[i]:] = p[:0:-1]\n\n    result = ' '.join(map(str, p))\n    return result\n"
    },
    {
        "number": 4046,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    q_array = list(map(int, stdin.splitlines()[1].split()))\n    q_array.sort()\n\n    if n == 1:\n        if q_array[0] == 0:\n            return str(1)\n        else:\n            return \"-1\"\n\n    if q_array[0] == 0:\n        return \"-1\"\n\n    p_array = [0] * n\n    p_array[0] = 1\n    q_array[0] -= 1\n\n    for i in range(1, n):\n        if q_array[i - 1] == 0:\n            return \"-1\"\n\n        p_array[i] = p_array[i - 1] + q_array[i - 1]\n        q_array[i] -= 1\n\n    return \" \".join(map(str, p_array))\n"
    },
    {
        "number": 4047,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    coordinates = list(map(int, stdin.split('\\n')[1].split()))\n\n    min_coins = 0\n    for i in range(1, n):\n        if coordinates[i] == coordinates[i - 1]:\n            continue\n        diff = abs(coordinates[i] - coordinates[i - 1])\n        if diff % 2 == 0:\n            min_coins += diff // 2\n        else:\n            min_coins += diff // 2 + 1\n\n    return str(min_coins)\n\n\ninput_data = \"\"\"3\n1 2 3\n5\n2 2 2 3 3\"\"\"\n\nexpected_outputs = [\"1\", \"2\"]\n\nfor input_data, expected_output in zip(input_data.split('\\n'), expected_outputs):\n    output = solution(input_data)\n    assert output == expected_output, f\"Input {input_data}:\\nExpected output: {expected_output}\\nActual output: {output}\" "
    },
    {
        "number": 4047,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    x = list(map(int, input().split()))\n\n    min_coins = float('inf')\n    target = x[0]\n\n    for i in range(n):\n        diff = abs(target - x[i])\n        coins = diff // 2 * 2 + diff % 2\n        min_coins = min(min_coins, coins)\n\n    return str(min_coins)\n\n\ndef"
    },
    {
        "number": 4047,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    x = list(map(int, stdin.splitlines()[1].split()))\n\n    coins = 0\n    for i in range(n):\n        if x[i] % 2 == 0:\n            x[i] += 1\n            coins += 1\n        else:\n            x[i] += 1\n\n    return coins\n\ndef"
    },
    {
        "number": 4047,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    chips = list(map(int, stdin.splitlines()[1].split()))\n\n    min_coins = 0\n\n    for i in range(n):\n        if chips[i] > 0:\n            min_coins += chips[i]\n        elif chips[i] < 0:\n            min_coins -= chips[i]\n        else:\n            min_coins += 1\n\n    return str(min_coins)\n\n\ninput_str = \"\"\"3\n1 2 3\"\"\"\n\nprint(solution(input_str))  # Output: 1\n\n\ninput_str = \"\"\"5\n2 2 2 3 3\"\"\"\n\nprint(solution(input_str))  # Output: 2 "
    },
    {
        "number": 4047,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    coordinates = list(map(int, stdin.splitlines()[1].split()))\n\n    def move_chip(i: int, j: int) -> int:\n        x_i, x_j = coordinates[i], coordinates[j]\n        distance = abs(x_i - x_j)\n        if distance % 2 == 0:\n            return 0 if distance == 0 else distance // 2\n        else:\n            return 1\n\n    def min_moves(coordinates: List[int]) -> int:\n        total_moves = 0\n        for i in range(n):\n            min_cost = float('inf')\n            for j in range(n):\n                if i != j:\n                    cost = move_chip(i, j)\n                    if cost < min_cost:\n                        min_cost = cost\n            total_moves += min_cost\n        return total_moves\n\n    return str(min_moves(coordinates))"
    },
    {
        "number": 4047,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    x = list(map(int, input().split()))\n    \n    # Calculate the minimum number of coins required\n    min_coins = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(x[i] - x[j]) % 2 == 0:\n                min_coins += abs(x[i] - x[j]) // 2\n            else:\n                min_coins += abs(x[i] - x[j]) // 2 + 1\n                min_coins += abs(x[i] - x[j]) % 2\n    \n    return str(min_coins)\n"
    },
    {
        "number": 4047,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    x = list(map(int, stdin.splitlines()[1].split()))\n    \n    total_coins = 0\n    for i in range(n):\n        for j in range(n):\n            if j != i and abs(x[i] - x[j]) <= 1:\n                total_coins += abs(x[i] - x[j])\n                x[i] = x[j]\n                break\n    \n    return total_coins\n"
    },
    {
        "number": 4047,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def min_coins(x: int, y: int, n: int, coins: int, visited: set):\n        if (x, y, n) in visited:\n            return 0, 0\n        visited.add((x, y, n))\n        if n == 1:\n            return coins, coins\n        if x == y:\n            return coins, 0\n        min_cost = float('inf')\n        min_coins_left = float('inf')\n        min_coins_right = float('inf')\n        for i in range(n):\n            if i == n - 1:\n                cost, left, right = min_coins(x - 2, y, n - 1, coins + 1, visited)\n                if cost < min_cost:\n                    min_cost = cost\n                    min_coins_left = left\n                    min_coins_right = right\n            else:\n                cost, left, right = min_coins(x - 2, y, n - 1, coins + 1, visited)\n                if cost < min_cost:\n                    min_cost = cost\n                    min_coins_left = left\n                    min_coins_right = right\n                cost, left, right = min_coins(x + 2, y, n - 1, coins + 1, visited)\n                if cost < min_cost:\n                    min_cost = cost\n                    min_coins_left = left\n                    min_coins_right = right\n        return min_cost, min_coins_left + min_coins_right\n\n    n = int(stdin.splitlines()[0])\n    x = list(map(int, stdin.splitlines()[1].split()))\n    visited = set()\n    min_cost, min_coins = min_coins(x[0], x[0], n, 0, visited)\n    return min_cost\n"
    },
    {
        "number": 4047,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    x = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    min_moves = float(\"inf\")\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                moves = abs(x[i] - x[j]) + max(abs(x[i] - x[j]) // 2, 1)\n                min_moves = min(min_moves, moves)\n\n    return str(min_moves)\n"
    },
    {
        "number": 4047,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    x = list(map(int, stdin.splitlines()[1].split()))\n    \n    coins = 0\n    target_x = x[0]\n    \n    for i in range(1, n):\n        if target_x > x[i]:\n            coins += target_x - x[i]\n            x[i] = target_x\n        elif target_x < x[i]:\n            coins += x[i] - target_x\n            target_x = x[i]\n        else:\n            continue\n    \n    return coins\n"
    },
    {
        "number": 4048,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N == 1:\n        return \"1\"\n    if N == 2:\n        return \"1\"\n    moves = 0\n    i = 1\n    j = 1\n    while i * j < N:\n        if i * j <= N - i:\n            j += 1\n        else:\n            i += 1\n        moves += 1\n    return str(moves)\n"
    },
    {
        "number": 4048,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    \n    # Initialize the variables for the 4 possible directions\n    up, down, left, right = 1, 1, 1, 1\n    \n    # Loop through the rows and columns until we reach a square with the value N\n    while True:\n        if N == up * left:\n            return 4\n        elif N == up * right:\n            return 4\n        elif N == down * left:\n            return 4\n        elif N == down * right:\n            return 4\n        else:\n            # If the current square is not one of the four possible directions, we need to move\n            up += 1\n            down += 1\n            left += 1\n            right += 1"
    },
    {
        "number": 4048,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    moves = 0\n    i = 1\n    j = 1\n    while N > i * j:\n        if N % i == 0:\n            j = N // i\n            moves += 1\n            break\n        i += 1\n        moves += 1\n    while i * j != N:\n        if j < i:\n            i, j = j, i\n        i += 1\n        j -= i\n        moves += 1\n    return str(moves)\n"
    },
    {
        "number": 4048,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n\n    # Initialize the minimum number of moves\n    min_moves = 0\n\n    # Initialize the current position\n    i, j = 1, 1\n\n    # Initialize the direction of movement\n    direction = \"right\"\n\n    # While the current position is not equal to N\n    while i * j != N:\n        # Move in the current direction\n        if direction == \"right\":\n            j += 1\n        else:\n            i += 1\n\n        # If the current position is greater than N, reverse the direction\n        if i * j > N:\n            direction = \"left\" if direction == \"right\" else \"right\"\n\n        # Increment the minimum number of moves\n        min_moves += 1\n\n    return str(min_moves)"
    },
    {
        "number": 4048,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    N = int(input_list[0])\n\n    row, col = 1, 1\n    count = 0\n\n    while (row * col) != N:\n        if (row + 1 <= N) and (col + 1 <= N):\n            row += 1\n            col += 1\n        elif row + 1 <= N:\n            row += 1\n        else:\n            col += 1\n        count += 1\n\n    return count\n"
    },
    {
        "number": 4048,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    moves = 0\n\n    # Find the smallest factor of N\n    factor = 2\n    while factor * factor < N:\n        if N % factor == 0:\n            break\n        factor += 1\n\n    # If N is a perfect square, we can reach it in one move\n    if factor * factor == N:\n        return 1\n\n    # Otherwise, we can reach the smallest factor in two moves\n    while factor * factor < N:\n        factor += 1\n    moves += 2\n\n    # We can then reach the other factor in two more moves\n    other_factor = N // factor\n    while other_factor > 1:\n        other_factor -= 1\n        if factor * other_factor == N:\n            moves += 2\n            return moves\n        other_factor -= 1\n        if factor * other_factor == N:\n            moves += 2\n            return moves\n\n    # If we reach this point, it means N is a perfect square of a prime number\n    while factor * factor < N:\n        factor += 1\n    moves += 1\n\n    # We can reach the prime square in one more move\n    while factor * factor < N:\n        factor += 1\n    moves += 1\n\n    return moves"
    },
    {
        "number": 4048,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n\n    # Initialize variables for the loop\n    i = 1\n    j = 1\n    moves = 0\n\n    # Loop until we reach a square that contains N\n    while i * j < N:\n        # Calculate the next square and move\n        if i * (j + 1) == N:\n            j += 1\n        elif (i + 1) * j == N:\n            i += 1\n        else:\n            # If we can't reach the next square, move to the next one\n            if i * (j + 1) < N:\n                i += 1\n            else:\n                j += 1\n\n        moves += 1\n\n    return moves"
    },
    {
        "number": 4048,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    x, y = 1, 1\n    steps = 0\n    while N > x * y:\n        if N % x == 0:\n            y += 1\n            steps += 1\n        else:\n            x += 1\n            steps += 1\n    return steps\n"
    },
    {
        "number": 4048,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    i = 1\n    j = 1\n    count = 0\n\n    while i * j < N:\n        if i * j < N:\n            i += 1\n        else:\n            j += 1\n        count += 1\n\n    return count\n\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4048,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N < 2:\n        return \"0\"\n    moves = 0\n    i = 1\n    j = 1\n    while i * j < N:\n        if i * (j + 1) == N:\n            moves += 1\n            break\n        elif i * (j + 1) > N:\n            i += 1\n            j = 1\n        else:\n            j += 1\n        moves += 1\n    return str(moves)\n"
    },
    {
        "number": 4049,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def get_winner(Alice: str, Bob: str) -> bool:\n        if Alice == Bob:\n            return \"Draw\"\n        if (Alice == \"Rock\" and Bob == \"Scissors\") or (Alice == \"Scissors\" and Bob == \"Paper\") or (Alice == \"Paper\" and Bob == \"Rock\"):\n            return Alice\n        else:\n            return Bob\n\n    n, a_1, a_2, a_3, b_1, b_2, b_3 = map(int, stdin.split())\n\n    alice_wins = 0\n    for i in range(n):\n        if i % 2 == 0:\n            winner = get_winner(\"Rock\", \"Rock\")\n        elif i % 4 == 1:\n            winner = get_winner(\"Paper\", \"Paper\")\n        else:\n            winner = get_winner(\"Scissors\", \"Scissors\")\n        if winner == \"Alice\":\n            alice_wins += 1\n\n    max_wins = alice_wins\n    min_wins = alice_wins\n    for i in range(n):\n        if i % 2 == 0:\n            winner = get_winner(\"Rock\", \"Rock\")\n        elif i % 4 == 1:\n            winner = get_winner(\"Paper\", \"Paper\")\n        else:\n            winner = get_winner(\"Scissors\", \"Scissors\")\n        if winner == \"Alice\":\n            max_wins += 1\n        else:\n            min_wins = max(min_wins, max_wins)\n            max_wins = 0\n\n    return f\"{min_wins} {max_wins}\"\n\n\ninput_cases = [\n    \"2\\n0 1 1\\n1 1 0\",\n    \"15\\n5 5 5\\n5 5 5\",\n    \"3\\n0 0 3\\n3 0 0\",\n    \"686\\n479 178 29\\n11 145 530\",\n    \"319\\n10 53 256\\n182 103 34\"\n]\n\nfor input_case in input_cases:\n    print(solution(input_case))"
    },
    {
        "number": 4049,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    b = list(map(int, stdin.splitlines()[2].split()))\n\n    # Initialize variables\n    min_wins = 0\n    max_wins = 0\n\n    # Iterate through each round\n    for i in range(n):\n        # Alice shows first\n        if i % 2 == 0:\n            if a[0] == 0 or b[0] == 0:\n                max_wins += 1\n            elif a[1] == b[1] == 0:\n                min_wins += 1\n            else:\n                max_wins += 1\n        # Bob shows first\n        else:\n            if b[0] == 0 or a[0] == 0:\n                max_wins += 1\n            elif b[1] == a[1] == 0:\n                min_wins += 1\n            else:\n                max_wins += 1\n\n    return str(min_wins) + \" \" + str(max_wins) "
    },
    {
        "number": 4049,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n = int(input_list[0])\n    a_list = list(map(int, input_list[1].split()))\n    b_list = list(map(int, input_list[2].split()))\n\n    a_rock = a_list.count(0)\n    a_scissors = a_list.count(1)\n    a_paper = a_list.count(2)\n\n    b_rock = b_list.count(0)\n    b_scissors = b_list.count(1)\n    b_paper = b_list.count(2)\n\n    min_win = 0\n    max_win = 0\n\n    for i in range(n):\n        if a_list[i] == b_list[i]:\n            min_win += 1\n            max_win += 1\n        else:\n            if a_list[i] == 0:\n                if b_list[i] == 1:\n                    min_win += 1\n                elif b_list[i] == 2:\n                    max_win += 1\n            elif a_list[i] == 1:\n                if b_list[i] == 0:\n                    min_win += 1\n                elif b_list[i] == 2:\n                    max_win += 1\n            elif a_list[i] == 2:\n                if b_list[i] == 0:\n                    max_win += 1\n                elif b_list[i] == 1:\n                    min_win += 1\n\n    return f\"{min_win} {max_win}\"\n\nstdin = '''2\n0 1 1\n1 1 0\n'''\n\nprint(solution(stdin))"
    },
    {
        "number": 4049,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n = int(input_list[0])\n    a_list = list(map(int, input_list[1].split()))\n    b_list = list(map(int, input_list[2].split()))\n\n    min_wins, max_wins = 0, 0\n\n    for _ in range(n):\n        if a_list[0] == b_list[0] == 0:\n            max_wins += 1\n        elif a_list[0] == b_list[0] == 1:\n            max_wins += 1\n            min_wins += 1\n        else:\n            min_wins += 1\n\n        if a_list[1] == b_list[1] == 0:\n            max_wins += 1\n        elif a_list[1] == b_list[1] == 1:\n            max_wins += 1\n            min_wins += 1\n        else:\n            min_wins += 1\n\n        if a_list[2] == b_list[2] == 0:\n            max_wins += 1\n        elif a_list[2] == b_list[2] == 1:\n            max_wins += 1\n            min_wins += 1\n        else:\n            min_wins += 1\n\n        a_list = [a - 1 for a in a_list]\n        b_list = [b - 1 for b in b_list]\n\n    return f\"{min_wins} {max_wins}\""
    },
    {
        "number": 4049,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    a.sort()\n    b.sort()\n    \n    min_win = 0\n    max_win = 0\n    \n    for i in range(n):\n        if a[i] + b[i] < n:\n            max_win += n - (a[i] + b[i])\n        else:\n            max_win += (a[i] + b[i]) - n\n    \n    for i in range(n):\n        if a[i] < b[i] and (a[i] + a[i+1] + a[i+2]) < (b[i] + b[i+1] + b[i+2]):\n            min_win += 1\n        if a[i] > b[i] and (b[i] + b[i+1] + b[i+2]) < (a[i] + a[i+1] + a[i+2]):\n            min_win += 1\n    \n    return f\"{min_win} {max_win}\" "
    },
    {
        "number": 4049,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def game_result(a: str, b: str) -> str:\n        if a == b:\n            return \"Draw\"\n        if a == \"Rock\":\n            return \"Alice\" if b == \"Scissors\" else \"Bob\"\n        if a == \"Scissors\":\n            return \"Alice\" if b == \"Paper\" else \"Bob\"\n        if a == \"Paper\":\n            return \"Alice\" if b == \"Rock\" else \"Bob\"\n\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n    b = list(map(int, stdin.split(\"\\n\")[2].split()))\n\n    if sum(a) != n or sum(b) != n:\n        raise ValueError(\"Invalid input: a and b must sum up to n\")\n\n    min_wins = float(\"inf\")\n    max_wins = 0\n\n    for i in range(n):\n        result = game_result(a[i % 3], b[i % 3])\n        if result == \"Alice\":\n            min_wins = min(min_wins, i + 1)\n            max_wins = max(max_wins, i + 1)\n        if result == \"Bob\":\n            min_wins = min(min_wins, i + 1)\n            max_wins = max(max_wins, i + 1)\n\n    return f\"{min_wins} {max_wins}\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    b = list(map(int, stdin.splitlines()[2].split()))\n    \n    # Helper function to check if Alice can win\n    def alice_can_win(alice_show, bob_show):\n        if alice_show == bob_show:\n            return False\n        if alice_show == \"rock\":\n            return bob_show == \"scissors\"\n        if alice_show == \"scissors\":\n            return bob_show == \"paper\"\n        return bob_show == \"rock\"\n\n    # Initialize the minimum and maximum number of rounds Alice can win\n    min_rounds_alice_can_win = 0\n    max_rounds_alice_can_win = 0\n    \n    # Iterate through all possible combinations of Alice's and Bob's showings\n    for i in range(n):\n        for j in range(n):\n            # Check if Alice can win in this round\n            if alice_can_win(a[i], b[j]):\n                max_rounds_alice_can_win += 1\n                if min_rounds_alice_can_win == 0:\n                    min_rounds_alice_can_win = 1\n    \n    # Return the minimum and maximum number of rounds Alice can win\n    return f\"{min_rounds_alice_can_win} {max_rounds_alice_can_win}\" "
    },
    {
        "number": 4049,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n    b = list(map(int, stdin.split(\"\\n\")[2].split()))\n\n    # Calculate the number of rounds Alice can win\n    alice_wins = 0\n    for i in range(n):\n        if a[i % 3] > b[i % 3]:\n            alice_wins += 1\n\n    # Calculate the maximum number of rounds Alice can win\n    alice_max_wins = n - max(a) - max(b)\n\n    return str(alice_wins) + \" \" + str(alice_max_wins)\n\n\nstdin = \"\"\"\n2\n0 1 1\n1 1 0\n\"\"\"\nprint(solution(stdin))\n\nstdin = \"\"\"\n15\n5 5 5\n5 5 5\n\"\"\"\nprint(solution(stdin))\n\nstdin = \"\"\"\n3\n0 0 3\n3 0 0\n\"\"\"\nprint(solution(stdin))\n\nstdin = \"\"\"\n686\n479 178 29\n11 145 530\n\"\"\"\nprint(solution(stdin))\n\nstdin = \"\"\"\n319\n10 53 256\n182 103 34\n\"\"\"\nprint(solution(stdin))"
    },
    {
        "number": 4049,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    b = list(map(int, stdin.splitlines()[2].split()))\n\n    # initialize variables\n    min_wins, max_wins = 0, 0\n    count_alice = 0\n    count_bob = 0\n\n    # loop through each round\n    for _ in range(n):\n        # Alice shows\n        if count_alice < len(a):\n            count_alice += 1\n        # Bob shows\n        if count_bob < len(b):\n            count_bob += 1\n\n        # check who wins\n        if a[count_alice - 1] == b[count_bob - 1]:\n            # if both show the same things, it's a tie\n            pass\n        elif a[count_alice - 1] == 0 and b[count_bob - 1] == 0:\n            # if both show zero times, it's a tie\n            pass\n        elif a[count_alice - 1] > b[count_bob - 1]:\n            # if Alice shows more times, Alice wins\n            max_wins += 1\n        else:\n            # if Bob shows more times, Bob wins\n            max_wins += 1\n\n        # update min_wins\n        if max_wins > min_wins:\n            min_wins = max_wins\n\n    # print min and max wins\n    return \" \".join(map(str, [min_wins, max_wins])) "
    },
    {
        "number": 4049,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n = int(input_list[0])\n    a = list(map(int, input_list[1].split()))\n    b = list(map(int, input_list[2].split()))\n\n    # Sorting the lists to make them easier to compare\n    a.sort()\n    b.sort()\n\n    # Initializing variables to keep track of the minimum and maximum number of rounds Alice can win\n    min_win = 0\n    max_win = 0\n\n    # Iterating through each round and comparing the choices\n    for i in range(n):\n        if a[i % 3] == b[(i + 1) % 3] and a[(i + 1) % 3] == b[(i + 2) % 3] and a[(i + 2) % 3] == b[i % 3]:\n            min_win += 1\n            max_win += 1\n        else:\n            min_win = max_win + 1\n            break\n\n    return f\"{min_win} {max_win}\" "
    },
    {
        "number": 4050,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def find_blocks(n, a, k):\n        def find_block(start, end, k):\n            if k == 0:\n                return\n            mid = (start + end) // 2\n            if mid == start:\n                return find_block(start + 1, end, k - 1)\n            sum_left = sum_right = 0\n            for i in range(mid, start - 1, -1):\n                sum_left += a[i]\n            for i in range(mid + 1, end + 1):\n                sum_right += a[i]\n            if sum_left == sum_right:\n                return find_block(start, mid, k - 1) + find_block(mid + 1, end, k - 1)\n            elif sum_left < sum_right:\n                return find_block(start, mid, k)\n            else:\n                return find_block(mid + 1, end, k)\n\n        return find_block(1, n, k)\n\n    n = int(stdin[0].strip())\n    a = list(map(int, stdin[1].strip().split()))\n    k = find_blocks(n, a, n)\n    result = find_blocks(n, a, k)\n    return k, *[f\"{l} {r}\" for l, r in result] \n"
    },
    {
        "number": 4050,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    def is_valid_block(block, blocks):\n        for other_block in blocks:\n            if other_block[0] <= block[0] <= other_block[1] or other_block[0] <= block[1] <= other_block[1]:\n                return False\n        return True\n\n    def find_blocks(a):\n        blocks = []\n        l = 0\n        while l < n:\n            r = l + 1\n            while r < n and a[r] == a[l]:\n                r += 1\n            blocks.append((l, r - 1))\n            l = r\n        return blocks\n\n    def find_maximum_set(blocks):\n        valid_blocks = [block for block in blocks if is_valid_block(block, blocks)]\n        valid_blocks.sort(key=lambda x: (x[1] - x[0]), reverse=True)\n        return valid_blocks\n\n    def print_blocks(blocks):\n        for block in blocks:\n            print(block[0], block[1])\n\n    blocks = find_blocks(a)\n    maximum_set = find_maximum_set(blocks)\n    print(len(maximum_set))\n    print_blocks(maximum_set)\n"
    },
    {
        "number": 4050,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    n = int(input_list[0])\n    a = list(map(int, input_list[1].split()))\n\n    def check_sum(i: int, j: int) -> bool:\n        return sum(a[i:j+1]) == sum(a[l:r+1])\n\n    def is_valid(block: tuple) -> bool:\n        for i in range(n):\n            if block[0] <= i <= block[1] or block[2] <= i <= block[3]:\n                continue\n            if check_sum(i, block[0]-1) and check_sum(i, block[1]+1):\n                return False\n        return True\n\n    def find_blocks(n: int) -> list:\n        blocks = []\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    for l in range(k+1, n):\n                        blocks.append((i, j, k, l))\n        return blocks\n\n    blocks = find_blocks(n)\n    valid_blocks = [block for block in blocks if is_valid(block)]\n    max_blocks = max(valid_blocks, key=lambda x: x[1])\n    result = [f\"{block[0] + 1} {block[1] + 1}\" for block in valid_blocks if block[1] == max_blocks[1]]\n\n    return f\"{len(result)}\\n\" + \"\\n\".join(result)\n\n\ninput_example = \"\"\"7\n4 1 2 2 1 5 3\"\"\"\noutput_example = \"\"\"3\n7 7\n2 3\n4 5\"\"\"\n\nprint(solution(input_example))  # Output: 3\\n7 7\\n2 3\\n4 5 "
    },
    {
        "number": 4050,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    n = int(input_data[0])\n    a = list(map(int, input_data[1].split()))\n\n    def is_valid_block(block_a, block_b):\n        return block_a[0] > block_b[1] or block_b[0] > block_a[1]\n\n    def find_max_blocks(n, a):\n        max_blocks = 0\n        for i in range(1, n):\n            for j in range(i + 1, n + 1):\n                block_a = (i, j)\n                for k in range(j + 1, n + 1):\n                    for l in range(k + 1, n + 1):\n                        block_b = (k, l)\n                        if is_valid_block(block_a, block_b):\n                            max_blocks = max(max_blocks, 1 + (block_b[1] - block_b[0]) // (block_b[1] - block_b[0] + 1))\n        return max_blocks\n\n    def find_blocks(n, a):\n        blocks = []\n        for i in range(1, n):\n            for j in range(i + 1, n + 1):\n                block_a = (i, j)\n                for k in range(j + 1, n + 1):\n                    for l in range(k + 1, n + 1):\n                        block_b = (k, l)\n                        if is_valid_block(block_a, block_b):\n                            blocks.append(block_a + (block_b[1] - block_b[0] + 1))\n        return blocks\n\n    max_blocks = find_max_blocks(n, a)\n    blocks = find_blocks(n, a)\n    return str(max_blocks) + '\\n' + '\\n'.join([str(block) for block in blocks])\n"
    },
    {
        "number": 4050,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()[1:]))\n\n    # Function to calculate the sum of elements in a given block\n    def block_sum(l, r):\n        return sum(a[l:r+1])\n\n    # Function to check if two blocks intersect\n    def intersect(l1, r1, l2, r2):\n        return (l1 <= r2 and l2 <= r1) or (l1 <= l2 and l2 <= r1)\n\n    # Function to find the set of blocks with maximum size\n    def find_max_blocks():\n        max_blocks = []\n        for l in range(1, n+1):\n            for r in range(l, n+1):\n                # Check if this block can be added to the set\n                add_block = True\n                for (l1, r1) in max_blocks:\n                    if intersect(l, r, l1, r1) and block_sum(l, r) != block_sum(l1, r1):\n                        add_block = False\n                        break\n                if add_block:\n                    max_blocks.append((l, r))\n        return max_blocks\n\n    # Find the set of blocks with maximum size\n    max_blocks = find_max_blocks()\n\n    # Print the number of blocks and the blocks in the set\n    print(len(max_blocks))\n    for (l, r) in max_blocks:\n        print(l, r)"
    },
    {
        "number": 4050,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(blocks: list, l: int, r: int) -> bool:\n        for i in range(len(blocks)):\n            if l < blocks[i][1] and r > blocks[i][0]:\n                return False\n        return True\n\n    def find_blocks(arr: list) -> list:\n        n = len(arr)\n        blocks = []\n        for i in range(n):\n            for j in range(i + 1, n + 1):\n                if sum(arr[i:j]) == arr[j - 1]:\n                    blocks.append((i, j - 1))\n                    if len(blocks) == 2 * n - 1:\n                        return blocks\n                    if not is_valid(blocks, i, j - 1):\n                        return []\n        return []\n\n    def main(stdin: str) -> str:\n        lines = stdin.splitlines()\n        n = int(lines[0])\n        arr = list(map(int, lines[1].split()))\n        blocks = find_blocks(arr)\n        if not blocks:\n            return \"Impossible\"\n        k = len(blocks)\n        return f\"{k}\\n\" + \"\\n\".join(str(block) for block in blocks)\n\n    return main(stdin)"
    },
    {
        "number": 4050,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    def is_valid_block(l, r):\n        if l > r:\n            return False\n        for i in range(l, r + 1):\n            if a[i] != a[l]:\n                return False\n        return True\n\n    def get_sum(l, r):\n        return sum(a[l:r + 1])\n\n    def find_blocks(n, a, k):\n        blocks = []\n        l, r = 0, n - 1\n        while l < r:\n            if is_valid_block(l, r):\n                blocks.append((l, r))\n                if k == 1:\n                    break\n                k -= 1\n                l += 1\n                r -= 1\n            else:\n                r -= 1\n        return blocks\n\n    k = 1\n    for i in range(1, n):\n        for j in range(i + 1, n + 1):\n            if get_sum(i, j) == get_sum(0, n - 1):\n                k += 1\n    blocks = find_blocks(n, a, k)\n\n    result = f\"{k}\\n\"\n    for block in blocks:\n        result += f\"{block[0]} {block[1]}\\n\"\n    return result\n\n\ninput_data = (\n    \"7\\n\"\n    \"4 1 2 2 1 5 3\"\n)\nprint(solution(input_data))\n\ninput_data = (\n    \"11\\n\"\n    \"-5 -4 -3 -2 -1 0 1 2 3 4 5\"\n)\nprint(solution(input_data))\n\ninput_data = (\n    \"4\\n\"\n    \"1 1 1 1\"\n)\nprint(solution(input_data)) "
    },
    {
        "number": 4050,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid_set(blocks: list) -> bool:\n        for i in range(len(blocks)):\n            for j in range(i + 1, len(blocks)):\n                if blocks[i][1] > blocks[j][0] and blocks[i][1] <= blocks[j][1]:\n                    return False\n                if blocks[j][1] > blocks[i][0] and blocks[j][1] <= blocks[i][1]:\n                    return False\n        return True\n\n    def find_blocks(arr: list, n: int) -> list:\n        blocks = []\n        for i in range(n - 1):\n            for j in range(i + 2, n + 1):\n                sum1 = sum(arr[i:j])\n                for k in range(i + 1, j):\n                    sum2 = sum(arr[k:j])\n                    if sum1 == sum2:\n                        blocks.append((i, k))\n                        blocks.append((k, j - 1))\n        return blocks\n\n    n = int(input())\n    arr = list(map(int, input().split()))\n    blocks = find_blocks(arr, n)\n    max_blocks = 0\n    while len(blocks) > max_blocks and is_valid_set(blocks):\n        max_blocks = len(blocks)\n        blocks = find_blocks(arr, n)\n    if max_blocks == 0:\n        print(\"0\")\n    else:\n        print(max_blocks)\n        for block in blocks:\n            print(block[0], block[1])\n"
    },
    {
        "number": 4050,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()[1:]))\n    k = 1\n    result = []\n    \n    while k <= n:\n        for i in range(n-k+1):\n            for j in range(i+k-1, n):\n                block_sum = sum(a[i:j+1])\n                found = False\n                for l, r in result:\n                    if l <= i <= r and l <= j <= r:\n                        found = True\n                        break\n                    elif l <= i <= r and l <= j <= r:\n                        found = True\n                        break\n                if not found:\n                    result.append((i, j))\n                    break\n            if len(result) == k:\n                break\n        k += 1\n    \n    output = \"{}\".format(k-1) + \"\\n\"\n    for l, r in result:\n        output += \"{} {}\".format(l+1, r+1) + \"\\n\"\n    \n    return output\n"
    },
    {
        "number": 4050,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    def block_sum(l, r):\n        return sum(a[l:r+1])\n\n    def is_valid(block1, block2):\n        l1, r1 = block1\n        l2, r2 = block2\n        return (r1 < l2) or (r2 < l1)\n\n    def find_blocks(n):\n        max_blocks = 1\n        blocks = []\n        for i in range(n):\n            for j in range(i+1, n):\n                if is_valid((i, j), blocks):\n                    blocks.append((i, j))\n                    if len(blocks) > max_blocks:\n                        max_blocks = len(blocks)\n        return blocks\n\n    blocks = find_blocks(n)\n    result = [blocks[i] for i in range(max_blocks)]\n    return str(max_blocks) + \"\\n\" + \"\\n\".join([f\"{block[0] + 1} {block[1] + 1}\" for block in result])\n"
    },
    {
        "number": 4051,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    arr = [int(x) for x in stdin.split(\"\\n\")[1].split(\" \")]\n\n    def build_stack(num, stacks):\n        stacks.append(num)\n\n    def remove_stack(stacks):\n        return stacks.pop(0)\n\n    def check_sorted(arr):\n        for i in range(len(arr) - 1):\n            if arr[i] > arr[i + 1]:\n                return False\n        return True\n\n    def sort_array(arr):\n        stacks = []\n        for num in arr:\n            build_stack(num, stacks)\n\n        while stacks:\n            max_stack = max(stacks)\n            height = len(stacks)\n            if max_stack > 2 + height:\n                return \"NO\"\n\n            max_stack_index = stacks.index(max_stack)\n            remove_stack(stacks)\n\n            if max_stack_index > 0 and stacks[max_stack_index - 1] < max_stack - 2:\n                return \"NO\"\n\n            arr.append(max_stack)\n\n        return \"YES\"\n\n    return sort_array(arr)\n"
    },
    {
        "number": 4051,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = a[i]\n        for j in range(i):\n            if a[i] > a[j]:\n                if dp[j] < a[i] - a[j] + 1:\n                    dp[i] = max(dp[i], a[i] - a[j] + 1)\n    if max(dp) == n:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    n = int(input_list[0])\n    array = list(map(int, input_list[1].split()))\n    \n    def build_stack(i: int) -> list:\n        return [array[i]] * array[i]\n    \n    def arrange_stacks(stacks: list) -> list:\n        max_height = max(stacks, key=len)\n        index = stacks.index(max_height)\n        stacks.pop(index)\n        return [stacks[i] + [i+1] for i in range(len(stacks))]\n    \n    def remove_tallest_stack(stacks: list, index: int) -> tuple:\n        height = len(stacks[index])\n        heights = list(map(len, stacks))\n        max_height_index = heights.index(max(heights))\n        tallest_stack = stacks.pop(max_height_index)\n        return tallest_stack, height, max_height_index\n    \n    def check_sorted(sorted_array: list) -> bool:\n        for i in range(1, len(sorted_array)):\n            if sorted_array[i] < sorted_array[i-1]:\n                return False\n        return True\n    \n    stacks = [build_stack(i) for i in range(n)]\n    sorted_array = []\n    while len(stacks) > 0:\n        stacks = arrange_stacks(stacks)\n        tallest_stack, height, index = remove_tallest_stack(stacks, 0)\n        sorted_array.append(height)\n        stacks = [stacks[i] for i in range(len(stacks)) if i != index]\n        \n    sorted_array.sort(reverse=True)\n    if check_sorted(sorted_array):\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    if len(set(a)) == 1:\n        return \"YES\"\n\n    heights = [0] * n\n    for i in range(n):\n        heights[i] = a[i]\n\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if heights[j] > heights[i]:\n                heights[j] -= 1\n                heights[i] += 1\n\n    max_height = max(heights)\n    index = heights.index(max_height)\n    max_height_stack = []\n\n    for i in range(n):\n        if heights[i] == max_height:\n            max_height_stack.append(i)\n\n    if len(max_height_stack) > 1:\n        return \"NO\"\n\n    output = [0] * n\n    for i in range(n):\n        if i in max_height_stack:\n            output[i] = a[i] + max_height\n            max_height_stack.remove(i)\n        else:\n            output[i] = a[i]\n\n    return \"YES\""
    },
    {
        "number": 4051,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n = int(input_list[0])\n    a = list(map(int, input_list[1].split()))\n\n    # Sort the array\n    a.sort()\n\n    # Initialize variables\n    ravioli_count = 0\n    stacks = []\n    output = []\n\n    # Build the stacks\n    for num in a:\n        stacks.append([num])\n\n    # Find the tallest stack\n    while stacks:\n        stack = stacks[0]\n        ravioli_count += len(stack)\n        if ravioli_count >= 2 and len(stack) >= 2:\n            break\n        stacks.remove(stack)\n\n    # If the tallest stack is not present or it has height 2 or less, the algorithm will not work\n    if not stacks or len(stack) <= 2:\n        return \"NO\"\n\n    # Repeat the process until all stacks have been removed\n    while stacks:\n        # Find the tallest stack\n        stack = stacks[0]\n        ravioli_count += len(stack)\n        if ravioli_count >= 2 and len(stack) >= 2:\n            break\n        stacks.remove(stack)\n\n        # Add the height to the output array\n        output.append(stack[0])\n\n        # Shift the stacks\n        for i in range(len(stacks)):\n            stacks[i].insert(0, stacks[i].pop())\n\n    # Check if the output is sorted\n    if output == a:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4051,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n    a.sort()\n\n    # Build the stacks\n    stacks = [[] for _ in range(n)]\n    for i in range(n):\n        for _ in range(a[i]):\n            stacks[i].append(i)\n\n    # Arrange the stacks in one row\n    stacks_row = []\n    for stack in stacks:\n        while stack:\n            stacks_row.append(stack.pop())\n\n    # Check if the algorithm will sort the array correctly\n    for i in range(len(stacks_row) - 1):\n        if stacks_row[i] == stacks_row[i + 1]:\n            for j in range(i + 2, len(stacks_row)):\n                if stacks_row[j] != stacks_row[i]:\n                    return \"NO\"\n            break\n\n    return \"YES\""
    },
    {
        "number": 4051,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    # Check if it is possible to sort the array using the described algorithm\n    for i in range(n - 1):\n        if a[i + 1] - a[i] > 2:\n            return \"NO\"\n\n    # If it is possible, sort the array using the described algorithm\n    while a:\n        stacks = [[] for _ in range(101)]\n        for num in a:\n            stacks[num].append(num)\n\n        max_height = max(stacks, key=len)\n        if len(max_height) == 0:\n            return \"NO\"\n\n        max_height = max_height[0]\n        a.remove(max_height)\n        a.append(max_height)\n\n        for i in range(100, max_height - 1, -1):\n            if len(stacks[i]) > 0:\n                stacks[i - 1].append(stacks[i].pop(0))\n\n    return \"YES\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n = int(input_list[0])\n    a = list(map(int, input_list[1].split()))\n\n    # Check for input validity\n    if n < 1 or n > 10 or any(x < 1 or x > 100 for x in a):\n        return \"NO\"\n\n    # Sort the array using the quicksort algorithm\n    def quicksort(arr):\n        if len(arr) <= 1:\n            return arr\n        pivot = arr[0]\n        left = [x for x in arr[1:] if x <= pivot]\n        right = [x for x in arr[1:] if x > pivot]\n        return quicksort(left) + [pivot] + quicksort(right)\n\n    sorted_a = quicksort(a)\n\n    # Implement the ravioli sorting algorithm\n    def is_sorted(arr):\n        stack = []\n        for x in arr:\n            while stack and stack[-1] > x:\n                stack.pop()\n            if not stack:\n                stack.append(x)\n        return not stack\n\n    for i in range(n-1):\n        if sorted_a[i] > sorted_a[i+1]:\n            if not is_sorted(sorted_a[:i+1] + sorted_a[i+2:]):\n                return \"NO\"\n\n    return \"YES\""
    },
    {
        "number": 4051,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    def build_stack(height: int) -> list:\n        return [height] * (height + 1)\n\n    def arrange_stacks(stacks: list) -> list:\n        for i in range(len(stacks) - 1):\n            if stacks[i][-1] > stacks[i + 1][-1]:\n                stacks[i], stacks[i + 1] = stacks[i + 1], stacks[i]\n        return stacks\n\n    def remove_tallest(stacks: list) -> tuple:\n        max_height = max(stacks, key=lambda x: x[-1])\n        index = stacks.index(max_height)\n        height = max_height.pop()\n        return stacks[:index] + stacks[index + 1:], height\n\n    stacks = [build_stack(height) for height in a]\n    stacks = arrange_stacks(stacks)\n\n    while any(stacks):\n        stacks, height = remove_tallest(stacks)\n        a.append(height)\n\n    if len(set(a)) == len(a):\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    if not all(a[i] <= a[i + 1] for i in range(n - 1)):\n        return \"NO\"\n\n    if n == 1:\n        return \"YES\"\n\n    if a[0] > a[1]:\n        return \"NO\"\n\n    height = [1] * n\n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] > a[j] and height[i] < height[j] + 1:\n                height[i] = height[j] + 1\n\n    max_height = max(height)\n\n    if max_height == 1:\n        return \"YES\"\n\n    def find_index(height):\n        for i in range(n):\n            if height[i] == max_height:\n                return i\n        return -1\n\n    index = find_index(height)\n\n    while index != -1:\n        if index == 0 and height[1] > height[0] + 2:\n            return \"NO\"\n        elif index == n - 1 and height[n - 2] > height[n - 1] + 2:\n            return \"NO\"\n        elif index > 0 and index < n - 1:\n            if height[index - 1] > height[index] + 2 or height[index + 1] > height[index] + 2:\n                return \"NO\"\n\n        a.append(a[index])\n        height.pop(index)\n\n        max_height = max(height)\n        if max_height == 1:\n            return \"YES\"\n\n        index = find_index(height)\n\n    return \"YES\"\n\n\ninput_data = \"\"\"3\n1 2 3\n3\n1 2 3\n1 2 3\n3 1 2\n1 2 3\n3 1 2\n1 2 3\n3 1 2\n3 1 2\"\"\"\n\nresult = solution(input_data)\nprint(result) "
    },
    {
        "number": 4052,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = input().split()\n    n = int(n)\n    s_list = list(s)\n    t_list = list(t)\n\n    if s_list == t_list:\n        return \"0\"\n\n    moves = []\n    for i in range(n - 1):\n        if s_list[i] != t_list[i]:\n            for j in range(i + 1, n):\n                if s_list[j] == t_list[i]:\n                    s_list[i], s_list[j] = s_list[j], s_list[i]\n                    moves.append((i, j))\n                    break\n\n    if s_list == t_list:\n        return str(len(moves)) + \"\\n\" + \" \".join(str(x) for x, _ in moves)\n    else:\n        return \"-1\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    s, t = stdin.splitlines()[1:]\n    \n    if s == t:\n        return \"0\"\n    \n    if not (1 <= n <= 50) or not (1 <= len(s) == len(t) <= 50):\n        return \"0\"\n    \n    moves = 0\n    for i in range(n - 1):\n        if s[i] != t[i]:\n            break\n        if s[i + 1] != t[i + 1]:\n            moves += 1\n            if moves > 10000:\n                return \"-1\"\n    \n    if moves == 0:\n        return \"0\"\n    \n    return f\"{moves}\\n{' '.join(map(str, range(moves)))}\"\n\ndef"
    },
    {
        "number": 4052,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    s, t = stdin.split(\"\\n\")[1:3]\n\n    if n == 1:\n        return \"0\"\n\n    if s == t:\n        return \"0\"\n\n    for i in range(n - 1):\n        if s[i] != t[i]:\n            if s[i + 1] == t[i + 1]:\n                continue\n            else:\n                break\n    else:\n        return \"0\"\n\n    moves = []\n\n    for i in range(n - 1):\n        if s[i] != t[i]:\n            if s[i + 1] == t[i]:\n                moves.append(i + 1)\n            else:\n                break\n\n    if not moves:\n        return \"-1\"\n\n    k = len(moves)\n    for move in moves:\n        s = list(s)\n        s[move], s[move + 1] = s[move + 1], s[move]\n        s = \"\".join(s)\n\n    return k, \" \".join(map(str, moves)) "
    },
    {
        "number": 4052,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n    t = stdin.splitlines()[2]\n\n    if n == 1:\n        if s == t:\n            return \"0\\n\"\n        else:\n            return \"-1\\n\"\n\n    s_list = list(s)\n    t_list = list(t)\n\n    moves = []\n\n    for i in range(n - 1):\n        if s_list[i] != t_list[i]:\n            if s_list[i + 1] == t_list[i]:\n                moves.append((i, i + 1))\n            elif s_list[i] == t_list[i + 1]:\n                moves.append((i + 1, i))\n            else:\n                break\n\n    if len(moves) == n - 1:\n        for i in range(n - 1):\n            s_list[moves[i][0]], s_list[moves[i][1]] = s_list[moves[i][1]], s_list[moves[i][0]]\n\n        if \"\".join(s_list) == t:\n            return f\"{len(moves)}\\n\" + \" \".join(str(c) for c in range(1, n)) + \"\\n\"\n        else:\n            return \"-1\\n\"\n    else:\n        return \"-1\\n\"\n\ninput_str = \"\"\"6\nabcdef\nabdfec\n\"\"\"\n\nprint(solution(input_str))\n\ninput_str = \"\"\"4\nabcd\naccd\n\"\"\"\n\nprint(solution(input_str)) "
    },
    {
        "number": 4052,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = input_processing(stdin)\n    \n    if s == t:\n        return \"0\"\n\n    if not is_transformable(s, t):\n        return \"-1\"\n\n    moves = find_moves(s, t)\n    \n    if len(moves) > 10000:\n        return \"-1\"\n    \n    k = len(moves)\n    return str(k) + \"\\n\" + \" \".join(map(str, moves))\n\n\ndef"
    },
    {
        "number": 4052,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def move(s: str, i: int, j: int) -> str:\n        return s[:i] + s[j] + s[i + 1:j] + s[i] + s[j + 1:]\n\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n    t = stdin.splitlines()[2]\n\n    for i in range(n - 1):\n        if s[i] == t[i]:\n            continue\n        for j in range(i + 1, n):\n            if s[j] == t[i]:\n                s = move(s, i, j)\n                break\n            elif s[i] == t[j]:\n                s = move(s, j, i)\n                break\n        else:\n            return -1\n\n    k = 0\n    moves = []\n    for i in range(n - 1):\n        if s[i] != t[i]:\n            for j in range(i + 1, n):\n                if s[j] == t[i]:\n                    s = move(s, i, j)\n                    moves.append(j)\n                    k += 1\n                    break\n                elif s[i] == t[j]:\n                    s = move(s, j, i)\n                    moves.append(i)\n                    k += 1\n                    break\n            else:\n                return -1\n\n    if k <= 10000:\n        return f\"{k}\\n{moves[::-1]}\"\n    else:\n        return -1\n\n\ninput_data = \"\"\"6\nabcdef\nabdfec\n\n4\nabcd\naccd\n\"\"\"\n\nfor inp in input_data.split(\"\\n\\n\"):\n    if inp.strip():\n        print(solution(inp))"
    },
    {
        "number": 4052,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s, t = stdin.split('\\n')[1:3]\n    s_list = list(s)\n\n    # Check if it's possible to transform s into t\n    if s == t:\n        return \"0\"\n\n    moves = 0\n    while s != t:\n        if moves >= 10000:\n            return \"-1\"\n        i = 0\n        while i < n - 1:\n            if s[i] != t[i]:\n                break\n            i += 1\n        if i == n - 1:\n            return \"-1\"\n        j = i + 1\n        while j < n:\n            if s[j] == t[i]:\n                break\n            j += 1\n        if j == n:\n            return \"-1\"\n        s_list[i], s_list[j] = s_list[j], s_list[i]\n        s = ''.join(s_list)\n        moves += 1\n\n    if moves > 10000:\n        return \"-1\"\n\n    # Find the moves to transform s into t\n    moves_list = []\n    i = 0\n    while i < n - 1:\n        if s[i] != t[i]:\n            break\n        i += 1\n    j = i + 1\n    while j < n:\n        if s[j] == t[i]:\n            break\n        j += 1\n    moves_list.append((i + 1, j))\n\n    # Print the number of moves and the moves\n    return str(moves) + '\\n' + ' '.join(str(m) for m in moves_list) "
    },
    {
        "number": 4052,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def swap(s: str, i: int) -> str:\n        return s[:i] + s[i + 1] + s[i] + s[i + 2:]\n\n    def is_transformable(s: str, t: str) -> bool:\n        for c in s:\n            if c in t:\n                t = t.replace(c, '', 1)\n        return len(t) == 0\n\n    n, s, t = stdin.strip().split('\\n')\n    n = int(n)\n    s = list(s)\n    t = list(t)\n\n    moves = []\n    for i in range(n - 1):\n        if s[i] != t[i]:\n            if s[i + 1] == t[i + 1]:\n                s[i], s[i + 1] = s[i + 1], s[i]\n                moves.append(i)\n            elif s[i] == t[i + 1]:\n                s[i], s[i + 1] = s[i + 1], s[i]\n                moves.append(i + 1)\n\n    if not is_transformable(s, t):\n        return \"-1\"\n\n    return str(len(moves)) + '\\n' + ' '.join(map(str, moves)) "
    },
    {
        "number": 4052,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def swap(s: str, i: int, j: int) -> str:\n        if i > j:\n            i, j = j, i\n        chars = list(s)\n        chars[i], chars[j] = chars[j], chars[i]\n        return ''.join(chars)\n\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    t = stdin.split('\\n')[2]\n\n    if s == t:\n        return \"0\\n\"\n\n    moves = 0\n    while s != t:\n        if moves >= 10000:\n            return \"-1\\n\"\n        for i in range(len(s) - 1):\n            if s[i:i + 2] == t[i:i + 2]:\n                s = swap(s, i, i + 1)\n                moves += 1\n                break\n        else:\n            return \"-1\\n\"\n\n    return f\"{moves}\\n{' '.join(str(c) for c in range(len(s) - 1, -1, -2))}\\n\" "
    },
    {
        "number": 4052,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = input(stdin).split('\\n')\n    n = int(n)\n    s = list(s)\n    t = list(t)\n\n    def is_valid(s):\n        for i in range(n - 1):\n            if s[i] == s[i + 1]:\n                return False\n        return True\n\n    def swap(s, i, j):\n        s[i], s[j] = s[j], s[i]\n\n    moves = []\n    while s != t and len(moves) < 10000:\n        if not is_valid(s):\n            break\n        for i in range(n - 1):\n            if s[i] == t[i]:\n                if s[i + 1] == t[i + 1]:\n                    swap(s, i, i + 1)\n                    moves.append((i, i + 1))\n    else:\n        if len(moves) == 10000:\n            return \"-1\"\n        return \"0\"\n\n    return len(moves), \" \".join([str(x[0]) + \" \" + str(x[1]) for x in moves])\n\n\ninput_string = \"\"\"6\nabcdef\nabdfec\n\n4\nabcd\naccd\n\"\"\"\n\nprint(solution(input_string))\n"
    },
    {
        "number": 4053,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    prefixes = set()\n    suffixes = set()\n    \n    for _ in range(2 * n - 2):\n        line = stdin.readline().strip()\n        if len(line) == n - 1:\n            suffixes.add(line)\n        elif len(line) == 1:\n            prefixes.add(line)\n        else:\n            prefixes.add(line[:-1])\n            suffixes.add(line[1:])\n    \n    result = []\n    \n    for i in range(2 * n - 2):\n        if i in suffixes and i in prefixes:\n            result.append('S')\n        elif i in suffixes:\n            result.append('S')\n        elif i in prefixes:\n            result.append('P')\n    \n    return ''.join(result)"
    },
    {
        "number": 4053,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    prefixes = [line.strip() for line in stdin.splitlines()[1:n]]\n    suffixes = [line.strip() for line in stdin.splitlines()[n+1:2*n-1]]\n    \n    result = ['S' for _ in range(2*n-2)]\n    \n    for prefix in prefixes:\n        i = n - len(prefix)\n        if i >= 0 and s[i:i+len(prefix)] == prefix:\n            result[i] = 'P'\n    \n    for suffix in suffixes:\n        i = len(suffix) - 1\n        if i >= 0 and s[-len(suffix):] == suffix:\n            result[n-len(suffix)] = 'P'\n    \n    return ''.join(result)"
    },
    {
        "number": 4053,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def is_prefix(s: str, t: str) -> bool:\n        return s == t[:len(s)]\n\n    def is_suffix(s: str, t: str) -> bool:\n        return s == t[len(t)-len(s):]\n\n    n = int(stdin.readline().strip())\n    prefixes = [stdin.readline().strip() for _ in range(2*n-2)]\n    suffixes = [stdin.readline().strip() for _ in range(2*n-2)]\n\n    for p in prefixes:\n        if p in suffixes:\n            suffixes.remove(p)\n\n    result = ['P' if p in prefixes else 'S' for p in suffixes]\n    return ''.join(result)\n"
    },
    {
        "number": 4053,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    prefixes = set()\n    suffixes = set()\n    for i in range(2, 2*n - 2, 2):\n        prefixes.add(stdin.splitlines()[i])\n        suffixes.add(stdin.splitlines()[i+1])\n    \n    if len(prefixes) > len(suffixes):\n        return 'S' * len(suffixes) + 'P' * (len(prefixes) - len(suffixes))\n    else:\n        return 'P' * len(prefixes) + 'S' * (len(suffixes) - len(prefixes))"
    },
    {
        "number": 4053,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    prefixes_and_suffixes = stdin.splitlines()[1:]\n\n    # Check if there are exactly 2 strings of each length from 1 to n-1\n    for i in range(1, n):\n        if prefixes_and_suffixes.count(prefixes_and_suffixes[i]) != 2:\n            return \"Impossible\"\n\n    # Check if the length of the string is n\n    if len(prefixes_and_suffixes[0]) + len(prefixes_and_suffixes[-1]) != n - 1:\n        return \"Impossible\"\n\n    # Check if the string is made up of two parts, prefix and suffix\n    prefix_set = set()\n    suffix_set = set()\n    for prefix_or_suffix in prefixes_and_suffixes:\n        if prefixes_and_suffixes.count(prefix_or_suffix) == 2:\n            prefix_set.add(prefix_or_suffix)\n        else:\n            suffix_set.add(prefix_or_suffix)\n\n    # Check if the prefix_set and suffix_set are the same\n    if prefix_set != suffix_set:\n        return \"Impossible\"\n\n    # Create a string of 'P' and 'S'\n    result = \"\"\n    for i in range(len(prefixes_and_suffixes) - 1):\n        if prefixes_and_suffixes[i] == prefixes_and_suffixes[i + 1]:\n            result += \"S\"\n        else:\n            result += \"P\"\n\n    return result\n"
    },
    {
        "number": 4053,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    prefix_suffix = [line.strip() for line in stdin.split('\\n')[1:] if line.strip()]\n    \n    prefixes = [s for s in prefix_suffix if prefix_suffix.count(s) % 2 == 1]\n    suffixes = [s for s in prefix_suffix if prefix_suffix.count(s) % 2 == 0]\n    \n    result = ['S'] * n\n    \n    for s in prefixes:\n        result[len(s) - 1] = 'P'\n    \n    for s in suffixes:\n        result[n - len(s) + 1] = 'S'\n    \n    return ''.join(result)\n\n\ninput_string = '''5\nba\na\nabab\na\naba\nbaba\nab\naba'''\n\nprint(solution(input_string)) # Output: SPPSPSPS\n\ninput_string = '''3\na\naa\naa\na\n'''\n\nprint(solution(input_string)) # Output: PPSS\n\ninput_string = '''2\na\nc\n'''\n\nprint(solution(input_string)) # Output: SP "
    },
    {
        "number": 4053,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    prefixes_and_suffixes = stdin.split('\\n')[1:]\n    prefixes = [p for p in prefixes_and_suffixes if len(p) == n-1]\n    suffixes = [s for s in prefixes_and_suffixes if len(s) == n-1 and s != prefixes[0]]\n    \n    result = ''\n    for i in range(len(prefixes_and_suffixes)):\n        if prefixes_and_suffixes[i] in prefixes:\n            result += 'P'\n        elif prefixes_and_suffixes[i] in suffixes:\n            result += 'S'\n        else:\n            raise ValueError(\"Invalid string\")\n            \n    return result\n\n\ndef"
    },
    {
        "number": 4053,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def find_suffixes(s: str) -> set:\n        suffixes = set()\n        for i in range(1, len(s)):\n            suffixes.add(s[i:])\n        return suffixes\n\n    def find_prefixes(s: str) -> set:\n        prefixes = set()\n        for i in range(len(s)):\n            prefixes.add(s[:i+1])\n        return prefixes\n\n    def is_valid_prefix(s: str, prefixes: set) -> bool:\n        return s in prefixes\n\n    def is_valid_suffix(s: str, suffixes: set) -> bool:\n        return s in suffixes\n\n    def find_consistent_strings(prefixes: set, suffixes: set) -> set:\n        consistent_strings = set()\n        for prefix in prefixes:\n            for suffix in suffixes:\n                if is_valid_prefix(prefix, prefixes) and is_valid_suffix(suffix, suffixes):\n                    consistent_strings.add(prefix + suffix)\n        return consistent_strings\n\n    def convert_to_answer(consistent_strings: set) -> str:\n        answer = ''\n        for s in consistent_strings:\n            for i in range(len(s)):\n                if i % 2 == 0:\n                    answer += 'P'\n                else:\n                    answer += 'S'\n        return answer\n\n    n = int(stdin.readline())\n    prefixes = set()\n    suffixes = set()\n    for _ in range(2*n-2):\n        s = stdin.readline().strip()\n        if len(s) == 1:\n            prefixes.add(s)\n        else:\n            prefixes.add(s[:-1])\n            suffixes.add(s[1:])\n\n    consistent_strings = find_consistent_strings(prefixes, suffixes)\n    answer = convert_to_answer(consistent_strings)\n    return answer\n"
    },
    {
        "number": 4053,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    prefix_suffix = stdin.split('\\n')[1:]\n    prefix_suffix = [prefix_suffix[i:i+n-1] for i in range(0, len(prefix_suffix), n-1)]\n    prefix_suffix = [item for sublist in prefix_suffix for item in sublist]\n    \n    prefix_count = sum([1 for i in prefix_suffix if len(i) == 1])\n    suffix_count = sum([1 for i in prefix_suffix if len(i) == n-1])\n    \n    result = 'S' * prefix_count + 'P' * suffix_count\n    return result\n\ninput_string = \"\"\"5\nba\na\nabab\na\naba\nbaba\nab\naba\n\"\"\"\n\noutput_string = solution(input_string)\nprint(output_string) "
    },
    {
        "number": 4053,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    prefixes = {}\n    suffixes = {}\n\n    for _ in range(2 * n - 2):\n        s = stdin.readline().strip()\n        if len(s) == 1:\n            suffixes[s] = suffixes.get(s, 0) + 1\n        else:\n            prefixes[s[:-1]] = prefixes.get(s[:-1], 0) + 1\n            suffixes[s[1:]] = suffixes.get(s[1:], 0) + 1\n\n    answer = ''\n    for i in range(n - 1):\n        if prefixes.get(stdin[i], 0) > 0:\n            prefixes[stdin[i]] -= 1\n            answer += 'P'\n        else:\n            answer += 'S'\n\n    for i in range(n - 1, 2 * n - 2):\n        if suffixes.get(stdin[i - n + 1], 0) > 0:\n            suffixes[stdin[i - n + 1]] -= 1\n            answer += 'P'\n        else:\n            answer += 'S'\n\n    return answer\n"
    },
    {
        "number": 4054,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    a = [int(x) for x in stdin.split()]\n\n    # Compute output\n    res = 0\n    for i in range(len(a)):\n        res += a[i]\n\n    return str(res)"
    },
    {
        "number": 4054,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split()]\n    c = 1\n    for i in a:\n        c *= i\n    return str(c)"
    },
    {
        "number": 4054,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    numbers = list(map(int, stdin.split()))\n    # implement the problem logic\n    result = 1\n    # return the result\n    return result\n"
    },
    {
        "number": 4054,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.strip().split()\n    input_list = list(map(int, input_list))\n    return str(1)"
    },
    {
        "number": 4054,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    for i in range(len(a)):\n        if a[i] % 2 == 0:\n            a[i] += 1\n        else:\n            a[i] -= 1\n    return str(sum(a))"
    },
    {
        "number": 4054,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n\n    return \"1\"\n\n\ndef"
    },
    {
        "number": 4054,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_numbers = list(map(int, stdin.split()))\n    output = 0\n    for num in input_numbers:\n        if num % 2 == 0:\n            output += num\n    return str(output)\n"
    },
    {
        "number": 4054,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    inputs = list(map(int, stdin.split()))\n    for i in range(len(inputs)):\n        if inputs[i] == 1:\n            return i + 1\n    return 0\n\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4054,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split()]\n    total = sum(a)\n    if total % 2 == 0:\n        return \"1\"\n    else:\n        return \"0\"\n\ndef"
    },
    {
        "number": 4054,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    input_list = [int(i) for i in input_list]\n    sum = 0\n    for i in input_list:\n        sum += i\n    return str(sum)\n\nstdin = \"2 4 6 8 10\"\nprint(solution(stdin))"
    },
    {
        "number": 4055,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    light_status = list(map(int, stdin.split('\\n')[1].split()))\n\n    min_k = 0\n    for i in range(1, n - 1):\n        if light_status[i - 1] == 1 and light_status[i + 1] == 1 and light_status[i] == 0:\n            min_k += 1\n\n    return str(min_k)\n"
    },
    {
        "number": 4055,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    k = 0\n    for i in range(1, n - 1):\n        if a[i - 1] == a[i + 1] == 1 and a[i] == 0:\n            k += 1\n\n    return k\n\n\ndef"
    },
    {
        "number": 4055,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    k = 0\n    for i in range(1, n - 1):\n        if a[i] == 0:\n            if a[i - 1] == 1 and a[i + 1] == 1:\n                k += 1\n\n    return str(k)\n"
    },
    {
        "number": 4055,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    \n    k = 0\n    for i in range(1, n - 1):\n        if a[i - 1] == 1 and a[i + 1] == 1 and a[i] == 0:\n            k += 1\n    \n    return str(k)\n\n\ndef"
    },
    {
        "number": 4055,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    k = 0\n    for i in range(2, n):\n        if a[i - 1] + a[i] + a[i + 1] == 0:\n            k += 1\n\n    print(k)\n"
    },
    {
        "number": 4055,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    \n    k = 0\n    for i in range(2, n-1):\n        if a[i-1] == a[i+1] == 1 and a[i] == 0:\n            k += 1\n    \n    return str(k)"
    },
    {
        "number": 4055,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    \n    k = 0\n    for i in range(1, n - 1):\n        if a[i - 1] == 1 and a[i + 1] == 1 and a[i] == 0:\n            k += 1\n    \n    return str(k)"
    },
    {
        "number": 4055,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    light_status = list(map(int, stdin.splitlines()[1].split()))\n    min_k = n\n\n    for i in range(1, n - 1):\n        if light_status[i - 1] == light_status[i + 1] == 1 and light_status[i] == 0:\n            min_k = min(min_k, i)\n\n    return str(min_k)\n"
    },
    {
        "number": 4055,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    k = 0\n    for i in range(1, n - 1):\n        if a[i - 1] == 1 and a[i + 1] == 1 and a[i] == 0:\n            k += 1\n\n    return str(k)\n"
    },
    {
        "number": 4055,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    k = 0\n    for i in range(1, n-1):\n        if a[i] == 0:\n            if a[i-1] == a[i+1] == 1:\n                k += 1\n    return k\n"
    },
    {
        "number": 4056,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n = int(input_list[0])\n    a = list(map(int, input_list[1].split()))\n\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def common_divisor(a, b):\n        return gcd(a, b)\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = a[0]\n    for i in range(1, n):\n        result = lcm(result, a[i])\n\n    return str(result)"
    },
    {
        "number": 4056,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = [int(x) for x in stdin.split('\\n')[1].split()]\n    common_divisors = set(a[0])\n    for i in range(1, n):\n        common_divisors = common_divisors.intersection(set(a[i]))\n    return str(len(common_divisors))\n"
    },
    {
        "number": 4056,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n = int(input_list[0])\n    a = list(map(int, input_list[1].split()))\n\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = a[0]\n    for i in range(1, n):\n        result = lcm(result, a[i])\n\n    return str(result)\n"
    },
    {
        "number": 4056,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    count = 0\n    \n    for i in range(1, max(a)+1):\n        flag = True\n        for j in range(n):\n            if a[j] % i != 0:\n                flag = False\n                break\n        if flag:\n            count += 1\n    \n    return str(count)\n"
    },
    {
        "number": 4056,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    x = a[0]\n    for i in range(1, n):\n        x = gcd(x, a[i])\n\n    return str(x)\n"
    },
    {
        "number": 4056,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    arr = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    def gcd(a, b):\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n\n    common_divisor = arr[0]\n    for i in range(1, n):\n        common_divisor = gcd(common_divisor, arr[i])\n\n    return str(common_divisor)\n"
    },
    {
        "number": 4056,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n\n    def gcd(a, b):\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    x = a[0]\n    for i in range(1, n):\n        x = lcm(x, a[i])\n\n    return str(x)\n"
    },
    {
        "number": 4056,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a: int, b: int) -> int:\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a: int, b: int) -> int:\n        return a * b // gcd(a, b)\n\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    common_divisor = a[0]\n    for i in range(1, n):\n        common_divisor = lcm(common_divisor, a[i])\n\n    return str(common_divisor)\n"
    },
    {
        "number": 4056,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    n = int(stdin.splitlines()[0])\n    a = [int(x) for x in stdin.splitlines()[1].split()]\n    result = set()\n\n    for i in range(1, max(a) + 1):\n        if all(i % x == 0 for x in a):\n            result.add(i)\n\n    return str(len(result))\n\n\ninput_str = '''5\n1 2 3 4 5\n6\n6 90 12 18 30 18'''\n\nprint(solution(input_str))\n"
    },
    {
        "number": 4056,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    n = int(input_list[0])\n    a = list(map(int, input_list[1].split()))\n\n    common_divisors = set(a[0])\n    for num in a[1:]:\n        common_divisors = common_divisors.intersection(set(range(1, num + 1, 1)))\n\n    return str(len(common_divisors))"
    },
    {
        "number": 4057,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    n = int(input_data[0])\n    a = list(map(int, input_data[1].split()))\n    coins = {}\n    for coin in a:\n        if coin in coins:\n            coins[coin] += 1\n        else:\n            coins[coin] = 1\n    result = 1\n    for key in coins:\n        result *= (coins[key] + 1)\n    return result - 1\n\n\ndef"
    },
    {
        "number": 4057,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    coins = list(map(int, stdin.splitlines()[1].split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if coins[i] != coins[j]:\n                count += 1\n                break\n    return count\n\n\ninput_string = '''6\n1 2 4 3 3 2\n'''\nprint(solution(input_string)) "
    },
    {
        "number": 4057,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    max_value = max(a)\n    count = 0\n\n    for i in range(1, max_value + 1):\n        count += a.count(i)\n\n    return count if count > 0 else 1\n\n\nn = int(input())\na = list(map(int, input().split()))\n\nresult = solution(f\"{n}\\n{' '.join(map(str, a))}\")\nprint(result)<|im_sep|> "
    },
    {
        "number": 4057,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n    a.sort()\n\n    i, j = 0, 1\n    pockets = 1\n\n    while j < n:\n        if a[i] != a[j]:\n            i += 1\n            j += 1\n            if i == j:\n                pockets += 1\n        else:\n            j += 1\n\n    return pockets\n"
    },
    {
        "number": 4057,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n = int(input_list[0])\n    a = list(map(int, input_list[1].split()))\n    \n    # Initialize a dictionary to store the count of each coin value\n    coin_count = {}\n    for coin in a:\n        if coin in coin_count:\n            coin_count[coin] += 1\n        else:\n            coin_count[coin] = 1\n    \n    # Initialize the count of pockets to the maximum count of coins\n    pocket_count = len(coin_count)\n    \n    # Count the number of distinct coins\n    distinct_coins = len(set(a))\n    \n    # If the number of distinct coins is equal to the pocket_count, it means that no two coins with the same value are put into the same pocket.\n    # In this case, we can distribute all coins in one pocket\n    if distinct_coins == pocket_count:\n        return pocket_count\n    \n    # Calculate the minimum number of pockets needed\n    for coin in coin_count:\n        if coin_count[coin] > 1:\n            pocket_count -= 1\n    \n    return pocket_count\n\ninput_str = \"\"\"6\n1 2 4 3 3 2\n\"\"\"\nprint(solution(input_str)) # Output: 2 "
    },
    {
        "number": 4057,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def process_coins(coins: list) -> int:\n        pockets = set()\n        for coin in coins:\n            if coin not in pockets:\n                pockets.add(coin)\n            else:\n                pockets.remove(coin)\n                pockets.add(coin)\n        return len(pockets)\n\n    n = int(stdin.split('\\n')[0])\n    coins = [int(coin) for coin in stdin.split('\\n')[1].split()]\n    return process_coins(coins)\n\n\ndef"
    },
    {
        "number": 4057,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    coins = [int(coin) for coin in stdin.split(\"\\n\")[1].split()]\n\n    # Create a dictionary to store the number of coins with each value\n    coin_count = {}\n    for coin in coins:\n        if coin in coin_count:\n            coin_count[coin] += 1\n        else:\n            coin_count[coin] = 1\n\n    # Find the minimum number of pockets needed to distribute all coins\n    min_pockets = 1\n    for count in coin_count.values():\n        if count > 1:\n            min_pockets += 1\n\n    return str(min_pockets)"
    },
    {
        "number": 4057,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = [int(x) for x in stdin.splitlines()[1].split()]\n    a.sort()\n    i, j, count = 0, 0, 0\n    while i < n and j < n:\n        if a[i] != a[j]:\n            count += 1\n            i += 1\n            j += 1\n        else:\n            count += 1\n            i += 1\n            while i < n and a[i] == a[i-1]:\n                i += 1\n    return count\n\n\ninput_str = '''6\n1 2 4 3 3 2'''\n\nprint(solution(input_str)) "
    },
    {
        "number": 4057,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(pockets: list, coins: list) -> bool:\n        for coin in coins:\n            if coin in pockets:\n                return False\n        return True\n\n    n, *coins = map(int, stdin.split())\n    coins = sorted(coins)\n    min_pockets = 1\n    max_coin = coins[-1]\n\n    while max_coin >= 1:\n        pockets = [max_coin]\n        for coin in coins:\n            if coin < max_coin:\n                break\n            if is_valid(pockets, coins):\n                pockets.append(coin)\n        if len(pockets) > min_pockets:\n            min_pockets = len(pockets)\n        max_coin -= 1\n\n    return min_pockets\n"
    },
    {
        "number": 4057,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    a = list(map(int, stdin[1].split()))\n    \n    # Count the frequency of each coin\n    freq = {}\n    for coin in a:\n        if coin in freq:\n            freq[coin] += 1\n        else:\n            freq[coin] = 1\n    \n    # Find the minimum number of pockets\n    min_pockets = 1\n    for f in freq.values():\n        if f > min_pockets:\n            min_pockets = f\n    \n    return str(min_pockets)\n\n\ninput_data = [\"6\\n1 2 4 3 3 2\", \"1\\n100\"]\n\nfor data in input_data:\n    print(solution(data.splitlines())) "
    },
    {
        "number": 4058,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split()[0:2])\n    house = list(map(int, stdin.split()[2:]))\n    heaters = []\n    heaters_pos = []\n\n    for i, pos in enumerate(house):\n        if pos == 1:\n            heaters.append(i)\n            heaters_pos.append(pos)\n\n    if len(heaters) == 0:\n        return -1\n\n    heaters.sort()\n    heaters_pos = sorted(heaters_pos)\n\n    min_heaters = 0\n    max_pos = 0\n    for pos in heaters_pos:\n        if pos - max_pos > r:\n            min_heaters += 1\n            max_pos = pos\n\n    return min_heaters\n"
    },
    {
        "number": 4058,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, input().split())\n    house = list(map(int, input().split()))\n\n    heaters = []\n    for i in range(n):\n        if house[i] == 1:\n            heaters.append(i)\n\n    heaters.sort()\n\n    count = 0\n    end = r - 1\n    for heater in heaters:\n        while end < n - 1 and heater + r - 1 <= house.index(1, end + 1):\n            end += 1\n            count += 1\n\n    if end < n - 1:\n        return -1\n    else:\n        return count"
    },
    {
        "number": 4058,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, input().split())\n    a = list(map(int, input().split()))\n    \n    if r > n:\n        return -1\n    \n    heaters = []\n    max_pos = -1\n    \n    for i, x in enumerate(a):\n        if x == 1:\n            heaters.append(i)\n            if i > max_pos:\n                max_pos = i\n                \n    if max_pos < r - 1:\n        return -1\n    \n    heaters.sort()\n    count = 0\n    \n    for i in range(len(heaters)):\n        if i == 0:\n            if heaters[i] - r + 1 <= 0:\n                count += 1\n            else:\n                count += 1 + heaters[i] - r + 1\n        else:\n            if heaters[i] - heaters[i-1] - r + 1 > 0:\n                count += heaters[i] - heaters[i-1] - r + 1\n            else:\n                count += 1\n                \n    return count\n"
    },
    {
        "number": 4058,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split()[0:2])\n    house = list(map(int, stdin.split()[2:]))\n\n    def warm_up(pos):\n        return max(0, pos - r + 1), min(pos + r - 1, n - 1)\n\n    total_warm_up = sum(warm_up(i)[1] - warm_up(i)[0] + 1 for i in range(n) if house[i] == 1)\n\n    if total_warm_up == n:\n        return \"1\"\n    elif total_warm_up == n - 1:\n        return \"2\"\n    else:\n        return \"-1\"\n\n\ninput_file = open(\"input.txt\", \"r\")\nstdin = input_file.read()\ninput_file.close()\n\nresult = solution(stdin)\n\nprint(result)<|im_sep|> "
    },
    {
        "number": 4058,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_array = stdin.splitlines()\n    n, r = map(int, input_array[0].split())\n    house = list(map(int, input_array[1].split()))\n    heaters = [i for i, x in enumerate(house) if x == 1]\n\n    if not heaters:\n        return -1\n\n    heaters.sort()\n\n    result = 0\n    for i in range(n):\n        if i == 0:\n            result += 1\n        else:\n            left, right = i - 1, i + r - 1\n            while left >= 0 and right < n:\n                if left in heaters and right in heaters:\n                    break\n                if left in heaters and (right not in heaters or heaters[heaters.index(right)] - right > right - left):\n                    right = heaters[heaters.index(right) - 1]\n                else:\n                    left = heaters[heaters.index(left) + 1]\n                result += 1\n\n    return result\n"
    },
    {
        "number": 4058,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    # Find the heaters positions\n    heaters = sorted([i for i, x in enumerate(a) if x])\n\n    # Calculate the warm up positions\n    warm_up = [i - r + 1 for i in range(n)] + [i + r - 1 for i in range(n)]\n    warm_up = [x for x in warm_up if x >= 0 and x < n]\n    warm_up = sorted(set(warm_up))\n\n    # Find the minimum number of heaters\n    if heaters[0] > 0:\n        heaters.insert(0, 0)\n    if heaters[-1] < n - 1:\n        heaters.append(n - 1)\n    result = len([x for x in heaters if warm_up[0] <= x <= warm_up[-1]])\n\n    return result if result <= len(warm_up) else -1"
    },
    {
        "number": 4058,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, input().split())\n    house = list(map(int, input().split()))\n    \n    if n == 1:\n        if house[0] == 0:\n            return -1\n        else:\n            return 1\n    \n    count = 0\n    for i in range(n):\n        if house[i] == 0:\n            count += 1\n    \n    if count == 0:\n        return 0\n    \n    heaters = [i for i in range(n) if house[i] == 1]\n    heaters.sort()\n    \n    if count <= r:\n        return count\n    \n    result = 0\n    left, right = 0, r\n    for i in range(count):\n        while right < n and abs(heaters[i] - heaters[0]) > right:\n            right += 1\n        if abs(heaters[i] - heaters[0]) > right:\n            return -1\n        result = max(result, right + 1)\n        left = right\n        right = left + r\n    \n    return result"
    },
    {
        "number": 4058,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, input().split())\n    house = list(map(int, input().split()))\n\n    heaters = []\n    for i in range(n):\n        if house[i] == 1:\n            heaters.append(i)\n\n    if not heaters:\n        return -1\n\n    heaters.sort()\n    count = 0\n\n    for i in range(n):\n        if i - r < 0:\n            left = 0\n        else:\n            left = heaters[bisect_left(heaters, i - r) - 1]\n\n        if i + r >= n:\n            right = n - 1\n        else:\n            right = heaters[bisect_left(heaters, i + r)] - 1\n\n        if i < left or i > right:\n            count += 1\n\n    return count\n"
    },
    {
        "number": 4058,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    n, r = map(int, input_list[0].split())\n    house = list(map(int, input_list[1].split()))\n    heaters = []\n    warm_count = 0\n\n    for i in range(n):\n        if house[i] == 1:\n            warm_count += 1\n            heaters.append(i)\n\n    if warm_count == 0:\n        return \"-1\"\n\n    max_heaters = 1\n    for i in range(n):\n        min_index = max(0, i - r)\n        max_index = min(n - 1, i + r)\n        max_heaters = max(max_heaters, len([h for h in heaters if h >= min_index and h <= max_index]))\n\n    return max_heaters\n\n\ndef"
    },
    {
        "number": 4058,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, input().split())\n    house = list(map(int, input().split()))\n\n    count = 0\n    for i in range(n):\n        if house[i] == 0:\n            count += 1\n\n    if count == n:\n        print(-1)\n        return\n\n    min_heaters = [float('inf')] * n\n    for i in range(n):\n        if house[i] == 1:\n            min_heaters[i] = 1\n        else:\n            for j in range(max(0, i - r + 1), min(i + r, n)):\n                if min_heaters[j] + 1 < min_heaters[i]:\n                    min_heaters[i] = min_heaters[j] + 1\n\n    max_heaters = sum(min_heaters)\n    if max_heaters == count:\n        print(count)\n    else:\n        print(max_heaters)"
    },
    {
        "number": 4059,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for A in range(1, N):\n        for B in range(1, N - A + 1):\n            C = N - A * B\n            if C >= 0 and (A, B, C) == (1, 1, 2) or (1, 2, 1) or (2, 1, 1):\n                count += 1\n    return str(count)"
    },
    {
        "number": 4059,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for A in range(1, N):\n        for B in range(1, N):\n            C = N - A * B\n            if C > 0 and C <= N:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4059,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n\n    for A in range(1, N):\n        for B in range(1, N - A + 1):\n            C = N - A * B\n            if C >= 1:\n                count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4059,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input integer N\n    N = int(stdin)\n\n    # Initialize the count to 0\n    count = 0\n\n    # Iterate through all possible values of A\n    for A in range(1, N):\n        # Calculate the value of B\n        B = (N - A) // 2\n\n        # Calculate the value of C\n        C = N - A - B\n\n        # Check if A, B, and C are all positive integers\n        if A > 0 and B > 0 and C > 0 and A * B + C == N:\n            count += 1\n\n    # Return the count of tuples (A, B, C) that satisfy A \\times B + C = N\n    return str(count)"
    },
    {
        "number": 4059,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    count = 0\n    for A in range(1, N):\n        for B in range(1, N - A + 1):\n            C = N - A * B\n            if 1 <= C <= N:\n                count += 1\n    return str(count)\n\ninput_str = input()\noutput_str = solution(input_str)\nprint(output_str) "
    },
    {
        "number": 4059,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for a in range(1, N):\n        for b in range(1, N):\n            for c in range(1, N):\n                if a * b + c == N:\n                    count += 1\n    return str(count)\n"
    },
    {
        "number": 4059,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for A in range(1, N):\n        for B in range(1, N - A + 1):\n            C = N - A * B\n            if C > 0 and C % A == 0:\n                count += 1\n    return str(count)\n\n\ninput_str = input()\noutput_str = solution(input_str)\nprint(output_str) "
    },
    {
        "number": 4059,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    \n    count = 0\n    \n    for a in range(1, n):\n        for b in range(1, n - a + 1):\n            c = n - a * b\n            if c >= 1 and c <= n:\n                count += 1\n                \n    return str(count)"
    },
    {
        "number": 4059,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    count = 0\n    for a in range(1, N):\n        for b in range(1, N - a + 1):\n            c = N - a * b\n            if c > 0 and c < N:\n                count += 1\n    return str(count)\n\n\ndef"
    },
    {
        "number": 4059,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    count = 0\n    for A in range(1, N):\n        for B in range(1, N):\n            C = N - A * B\n            if 1 <= C <= N:\n                count += 1\n    return count\n\n\ninput_str = input()\noutput_str = solution(input_str)\nprint(output_str) "
    },
    {
        "number": 4060,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n\n    result = 0\n    for i in range(n):\n        if s[i] == '(':\n            if i < n-1 and s[i+1] == ')':\n                result += 1\n            elif i > 0 and s[i-1] == ')':\n                result += 1\n        else:\n            if i < n-1 and s[i+1] == '(':\n                result += 1\n            elif i > 0 and s[i-1] == '(':\n                result += 1\n\n    return result\n\n\ninput_str = '''6\n(((())\n'''\nprint(solution(input_str)) "
    },
    {
        "number": 4060,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    count = 0\n    for i in range(n):\n        if s[i] == '(':\n            if i + 1 < n and s[i + 1] == ')':\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 4060,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    count = 0\n    for i in range(n):\n        if s[i] == '(':\n            if i < n-1 and s[i+1] == ')':\n                count += 1\n    return count"
    },
    {
        "number": 4060,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1]\n    open_brackets = 0\n    close_brackets = 0\n    last_bracket = '('\n    count = 0\n\n    for char in s:\n        if char == '(':\n            open_brackets += 1\n        elif char == ')':\n            close_brackets += 1\n            if open_brackets == close_brackets:\n                count += 1\n            elif open_brackets > close_brackets:\n                if last_bracket == '(':\n                    count += 1\n                else:\n                    count += 2\n            last_bracket = char\n\n    if open_brackets > close_brackets:\n        if last_bracket == '(':\n            count += 1\n        else:\n            count += 2\n\n    return str(count)"
    },
    {
        "number": 4060,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n    \n    count = 0\n    for i in range(n):\n        if s[i] == '(' and i < n - 1 and s[i+1] == ')':\n            count += 1\n        elif s[i] == ')' and i > 0 and s[i-1] == '(':\n            count += 1\n    \n    return str(count)\n"
    },
    {
        "number": 4060,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    s = stdin.split(\"\\n\")[1]\n    count = 0\n\n    for i in range(n):\n        if s[i] == \"(\" and i + 1 < n and s[i + 1] == \")\":\n            count += 1\n        elif s[i] == \")\" and i - 1 >= 0 and s[i - 1] == \"(\":\n            count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4060,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def is_regular(s: str) -> bool:\n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if not stack or stack.pop() != '(':\n                    return False\n        return not stack\n\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n    count = 0\n\n    for i in range(n):\n        if s[i] == '(':\n            s = s[:i] + ')' + s[i+1:]\n        else:\n            s = s[:i] + '(' + s[i+1:]\n        if is_regular(s):\n            count += 1\n        s = s[:i] + '(' + s[i+1:]\n\n    return str(count)\n"
    },
    {
        "number": 4060,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1]\n    \n    count = 0\n    for i in range(n):\n        if s[i] == ')' and i+1 < n and s[i+1] == '(':\n            count += 1\n    \n    return str(count)\n\ninput_data = input().split('\\n')\nn = int(input_data[0])\ns = input_data[1]\n\nprint(solution(input_data)) "
    },
    {
        "number": 4060,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(s: str) -> bool:\n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if not stack:\n                    return False\n                stack.pop()\n        return len(stack) == 0\n\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n\n    count = 0\n    for i in range(n):\n        if s[i] == '(':\n            s = s[:i] + ')' + s[i + 1:]\n        else:\n            s = s[:i] + '(' + s[i + 1:]\n        if is_valid(s):\n            count += 1\n            s = s[:i] + '(' + s[i + 1:]\n        else:\n            s = s[:i] + ')' + s[i + 1:]\n\n    return str(count)\n"
    },
    {
        "number": 4060,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    count = 0\n    for i in range(n):\n        if s[i] == '(' and i+1 < n and s[i+1] == ')':\n            count += 1\n        elif s[i] == ')' and i-1 >= 0 and s[i-1] == '(':\n            count += 1\n    return str(count)"
    },
    {
        "number": 4061,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.splitlines()[0]\n    t = stdin.splitlines()[1]\n\n    s_list = list(s)\n    t_list = list(t)\n\n    s_list_len = len(s_list)\n    t_list_len = len(t_list)\n\n    # Find all indices where t appears in s\n    indices = []\n    for i in range(s_list_len - t_list_len + 1):\n        if s_list[i:i + t_list_len] == t_list:\n            indices.append(i)\n\n    # Find the maximum length substring to be removed\n    max_len = 0\n    for i in range(s_list_len - t_list_len + 1):\n        for j in range(i + t_list_len, s_list_len):\n            if j - i > max_len:\n                max_len = j - i\n\n    return max_len\n\n\ndef"
    },
    {
        "number": 4061,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s, t = input(stdin).split('\\n')\n    n, m = len(s), len(t)\n    dp = [0] * (n + 1)\n\n    for i in range(n + 1):\n        for j in range(m + 1):\n            if i == 0 or j == 0:\n                dp[i] = 0\n            elif s[i - 1] == t[j - 1]:\n                dp[i] = dp[i - 1] + 1\n            else:\n                dp[i] = dp[i - 1]\n\n    return dp[n]\n\nstdin = \"bbaba\\nbb\\n\"\nprint(solution(stdin)) "
    },
    {
        "number": 4061,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.strip().split('\\n')\n    s = input_lines[0]\n    t = input_lines[1]\n    t_set = set(t)\n    max_len = 0\n    for i in range(len(s)):\n        temp_set = set()\n        temp_len = 0\n        for j in range(i, len(s)):\n            if s[j] in t_set and s[j] not in temp_set:\n                temp_set.add(s[j])\n                temp_len += 1\n            else:\n                break\n        max_len = max(max_len, temp_len)\n    return str(max_len)\n\ndef"
    },
    {
        "number": 4061,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    s = input_list[0]\n    t = input_list[1]\n\n    # Initialize variables\n    n = len(s)\n    m = len(t)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    ans = 0\n\n    # Fill the dp table\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 and j == 0:\n                dp[i][j] = 1\n            elif i == 0:\n                if s[j - 1] == t[j - 1]:\n                    dp[i][j] = dp[i][j - 1]\n                else:\n                    dp[i][j] = 0\n            elif j == 0:\n                dp[i][j] = 0\n            else:\n                if s[j - 1] == t[i - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + dp[i][j - 1]\n                else:\n                    dp[i][j] = dp[i][j - 1]\n\n            if dp[i][j] == dp[i][j - 1] + dp[i - 1][j]:\n                ans = max(ans, j - i)\n\n    return ans"
    },
    {
        "number": 4061,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    n, m = len(s), len(t)\n    \n    def is_subsequence(s: str, t: str) -> bool:\n        i, j = 0, 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        return i == len(s)\n    \n    max_length = 0\n    for i in range(n):\n        if is_subsequence(s[i:], t):\n            max_length = max(max_length, i)\n    \n    return max_length\n"
    },
    {
        "number": 4061,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.strip().split('\\n')\n    s = input_lines[0]\n    t = input_lines[1]\n\n    def is_subsequence(s: str, t: str) -> bool:\n        s = list(s)\n        t = list(t)\n        i, j = 0, 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                j += 1\n            i += 1\n        return j == len(t)\n\n    def longest_subsequence(s: str, t: str) -> int:\n        if is_subsequence(s, t):\n            return len(s)\n        for i in range(1, len(s)):\n            if is_subsequence(s[:i], t) and is_subsequence(s[i:], t):\n                return i\n        return 0\n\n    result = longest_subsequence(s, t)\n    return str(result)\n\n\nstdin = \"\"\"\nbaaba\nab\n\"\"\"\nprint(solution(stdin)) "
    },
    {
        "number": 4061,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    n, m = len(s), len(t)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s[j - 1] == t[i - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j])\n\n    return m - dp[m][n]"
    },
    {
        "number": 4061,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    n = len(s)\n    m = len(t)\n    i, j, count = 0, 0, 0\n\n    while i < n and j < m:\n        if s[i] == t[j]:\n            j += 1\n            count += 1\n        i += 1\n\n    if count == m:\n        return n - i\n    else:\n        return 0\n\n\nstdin = \"\"\"\nbaaba\nab\n\"\"\"\n\nprint(solution(stdin))  # Output: 2\n\nstdin = \"\"\"\nabcde\nabcde\n\"\"\"\n\nprint(solution(stdin))  # Output: 0\n\nstdin = \"\"\"\nasdfasdf\nfasd\n\"\"\"\n\nprint(solution(stdin))  # Output: 3\n\nstdin = \"\"\"\nbbaba\nbb\n\"\"\"\n\nprint(solution(stdin))  # Output: 3\n\"\"\"\n"
    },
    {
        "number": 4061,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    s = input_list[0]\n    t = input_list[1]\n\n    def is_subsequence(s: str, t: str) -> bool:\n        i = 0\n        j = 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        return i == len(s)\n\n    n = len(s)\n    m = len(t)\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        for j in range(m + 1):\n            if i == 0:\n                dp[i][j] = 0\n            elif j == 0:\n                dp[i][j] = 1\n            elif s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    result = dp[n][m]\n    return result\n"
    },
    {
        "number": 4061,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    s_list = list(s)\n    t_list = list(t)\n    max_length = 0\n\n    for i in range(len(s)):\n        if s[i] == t[0]:\n            j = 0\n            while i + j < len(s) and j < len(t) and s[i + j] == t[j]:\n                j += 1\n            if j == len(t):\n                max_length = max(max_length, j)\n\n    return max_length\n\n\ndef"
    },
    {
        "number": 4062,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return max(a*c, b*d)"
    },
    {
        "number": 4062,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n\n    return str(min(b, d) * min(a, c))"
    },
    {
        "number": 4062,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    x = max(a, c)\n    y = min(b, d)\n    return str(x * y)"
    },
    {
        "number": 4062,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return str(min(b*c, b*d, c*a, d*a))\n"
    },
    {
        "number": 4062,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    max_x = min(b, d)\n    min_y = max(c, a)\n    return max_x * min_y\n"
    },
    {
        "number": 4062,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if a <= b and c <= d:\n        return str(b * d)\n    else:\n        return str(-1)\n\n\ndef"
    },
    {
        "number": 4062,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    maximum = 0\n    for x in range(a, b + 1):\n        for y in range(c, d + 1):\n            if x * y > maximum:\n                maximum = x * y\n    return str(maximum)"
    },
    {
        "number": 4062,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    a, b, c, d = map(int, stdin.split())\n\n    # find maximum possible value of x * y\n    max_product = (min(b, d) - max(a, c)) * (min(b, d) - max(a, c))\n\n    return max_product\n"
    },
    {
        "number": 4062,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if a > b:\n        a, b = b, a\n    if c > d:\n        c, d = d, c\n    result = min(b, d) - max(a, c) + 1\n    return result"
    },
    {
        "number": 4062,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    max_product = 0\n    for x in range(a, b+1):\n        for y in range(c, d+1):\n            product = x * y\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 4063,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *d = map(int, stdin.split())\n    d = list(d)\n    count = 0\n\n    for K in range(1, N // 2 + 1):\n        ARCs = 0\n        ABCs = 0\n        for i in range(N):\n            if d[i] >= K:\n                ARCs += 1\n            else:\n                ABCs += 1\n        if ARCs == ABCs:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4063,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, *d = map(int, stdin.split())\n    count_arcs, count_abcs = 0, 0\n    for i in range(N):\n        if d[i] >= N // 2:\n            count_arcs += 1\n        else:\n            count_abcs += 1\n    return count_arcs - count_abcs\n"
    },
    {
        "number": 4063,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[0:2])\n    d = list(map(int, stdin.split()[2:]))\n    \n    # Count the number of problems for ARCs and the number of problems for ABCs\n    ARCs, ABCs = 0, 0\n    for i in range(N):\n        if d[i] >= K:\n            ARCs += 1\n        else:\n            ABCs += 1\n    \n    # Find the number of choices of the integer K that make the numbers of problems for ARCs and the number of problems for ABCs the same\n    count = 0\n    for i in range(K, d[-1]+1):\n        ARCs_i, ABCs_i = 0, 0\n        for j in range(N):\n            if d[j] >= i:\n                ARCs_i += 1\n            else:\n                ABCs_i += 1\n        if ARCs_i == ARCs and ABCs_i == ABCs:\n            count += 1\n    \n    return count"
    },
    {
        "number": 4063,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, *d_i = map(int, stdin.split())\n    K_choices = 0\n\n    for i in range(N):\n        if d_i[i] >= K_choices:\n            K_choices = d_i[i] + 1\n\n    count_arc = 0\n    count_abc = 0\n\n    for i in range(N):\n        if d_i[i] >= K_choices - 1:\n            count_arc += 1\n        else:\n            count_abc += 1\n\n    return count_arc - count_abc\n"
    },
    {
        "number": 4063,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def count_problems(difficulty: int, problems: list) -> int:\n        return len([p for p in problems if p[1] >= difficulty])\n\n    N, *d_i = map(int, stdin.split())\n    d_i.sort()\n\n    total_arc = 0\n    total_abc = 0\n\n    for difficulty in range(N // 2 + 1, N + 1):\n        total_arc = count_problems(difficulty, zip(range(1, N + 1), d_i))\n        total_abc = count_problems(difficulty - 1, zip(range(1, N + 1), d_i))\n\n        if total_arc == total_abc:\n            print(difficulty - 1)\n            return\n\n    print(0)\n"
    },
    {
        "number": 4063,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, *ds = map(int, stdin.split())\n    ds = sorted(ds)\n    count = 0\n    for i in range(len(ds)):\n        if ds[i] >= N//2:\n            break\n        count += 1\n    return count\n\ndef"
    },
    {
        "number": 4063,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, *d = map(int, stdin.split())\n    ARCs = 0\n    ABCs = 0\n    for i in range(N):\n        if d[i] >= 5:\n            ARCs += 1\n        else:\n            ABCs += 1\n    K = (ARCs + ABCs) // 2\n    count = 0\n    for i in range(1, N+1):\n        if d[i-1] >= K:\n            ARCs -= 1\n        else:\n            ABCs -= 1\n        if ARCs == ABCs:\n            count += 1\n    return count\n\ninput_str = \"6\\n9 1 4 4 6 7\"\noutput = solution(input_str)\nprint(output) "
    },
    {
        "number": 4063,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, *d_i = map(int, stdin.split())\n\n    def count_problems(K: int) -> tuple:\n        arcs = sum(1 for i in d_i if i >= K)\n        abc = N - arcs\n        return (arcs, abc)\n\n    # Count the number of choices of K that make the objective achievable\n    choices = 0\n    for K in range(1, 100001):\n        arcs, abc = count_problems(K)\n        if arcs == abc:\n            choices += 1\n\n    return str(choices)\n"
    },
    {
        "number": 4063,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, *d = map(int, stdin.split())\n    d.sort()\n    count = 0\n    for i in range(N):\n        if d[i] >= 5:\n            count += 1\n    return count\n\ndef"
    },
    {
        "number": 4063,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, *d = map(int, stdin.split())\n    count = 0\n    for i in range(N):\n        if d[i] >= N//2:\n            count += 1\n    return count\n"
    },
    {
        "number": 4064,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split()[:4])\n    a = list(map(int, stdin.split()[4:]))\n    \n    max_good_times = 0\n    current_time = 0\n    \n    for i in range(n):\n        next_sleep_time = a[i]\n        \n        if current_time == next_sleep_time - 1:\n            current_time += 1\n            if l <= current_time < r:\n                max_good_times += 1\n        else:\n            current_time = next_sleep_time\n            if l <= current_time < r:\n                max_good_times += 1\n                \n    return str(max_good_times)\n\ninput_str = '''7 24 21 23\n16 17 14 20 20 11 22'''\n\nprint(solution(input_str))\n"
    },
    {
        "number": 4064,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split()[:4])\n    a = list(map(int, stdin.split()[4:]))\n    \n    max_good_times = 0\n    current_time = 0\n    for i in range(n):\n        while current_time < a[i] - 1:\n            current_time += 1\n            if l <= current_time <= r:\n                max_good_times += 1\n        if l <= current_time + 1 <= r:\n            max_good_times += 1\n        current_time += 1\n        \n    return str(max_good_times)"
    },
    {
        "number": 4064,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split()[:4])\n    a = list(map(int, stdin.split()[4:]))\n    \n    max_good_times = 0\n    time = 0\n    \n    for i in range(n):\n        sleep_time = a[i] - 1 if a[i] - 1 <= h and a[i] - 1 >= l else a[i]\n        time += sleep_time\n        \n        if l <= time <= r:\n            max_good_times += 1\n        \n        time = (time + h) % h\n        \n    return str(max_good_times)\n\ninput_str = \"7 24 21 23\\n16 17 14 20 20 11 22\"\nprint(solution(input_str)) "
    },
    {
        "number": 4064,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def is_good_time(time: int) -> bool:\n        return l <= time <= r\n\n    n, h, l, r = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n\n    good_times = 0\n    current_time = 0\n\n    for i in range(n):\n        if is_good_time(current_time + a[i] - 1):\n            current_time += a[i] - 1\n        elif is_good_time(current_time + a[i]):\n            current_time += a[i]\n            good_times += 1\n        else:\n            return good_times\n\n    if is_good_time(current_time + h - 1):\n        current_time += h - 1\n    elif is_good_time(current_time + h):\n        current_time += h\n        good_times += 1\n\n    return good_times\n"
    },
    {
        "number": 4064,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split()[:4])\n    a = list(map(int, stdin.split()[4:]))\n\n    count = 0\n    for i in range(n):\n        if l <= a[i] - 1 <= r:\n            count += 1\n        if l <= a[i] <= r:\n            count += 1\n\n    return str(count)\n\n\ninput_data = '''7 24 21 23\n16 17 14 20 20 11 22'''\n\nprint(solution(input_data)) "
    },
    {
        "number": 4064,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split()[:4])\n    a = list(map(int, stdin.split()[4:]))\n\n    good_times = []\n    for i in range(n):\n        if l <= a[i] - 1 <= r:\n            good_times.append((a[i] - 1, 0))\n        if l <= a[i] <= r:\n            good_times.append((a[i], 1))\n\n    good_times.sort()\n\n    max_good_times = 0\n    current_time = 0\n    for time, option in good_times:\n        if option == 0:\n            current_time = time\n        else:\n            if current_time + 1 <= h - 1:\n                current_time += 1\n            else:\n                break\n        max_good_times += 1\n\n    return str(max_good_times)\n"
    },
    {
        "number": 4064,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def check_good_time(time: int, l: int, r: int) -> bool:\n        return l <= time <= r\n\n    n, h, l, r = map(int, stdin.split()[:4])\n    a = list(map(int, stdin.split()[4:]))\n\n    good_times = 0\n    current_time = 0\n\n    for i in range(n):\n        if current_time + a[i] < h:\n            current_time += a[i] - 1\n            if check_good_time(current_time, l, r):\n                good_times += 1\n        elif current_time + a[i] == h:\n            current_time = 0\n            if check_good_time(current_time, l, r):\n                good_times += 1\n        else:\n            current_time = current_time + a[i] - h\n            if check_good_time(current_time, l, r):\n                good_times += 1\n\n    return str(good_times)\n\n\ninput_string = \"7 24 21 23\\n16 17 14 20 20 11 22\"\nprint(solution(input_string)) "
    },
    {
        "number": 4064,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def is_good_time(t: int, l: int, r: int) -> bool:\n        return l <= t <= r\n\n    def optimize_sleep_times(a: List[int], l: int, r: int) -> int:\n        count = 0\n        for i in range(len(a)):\n            if is_good_time(t + a[i] - 1, l, r):\n                count += 1\n            if is_good_time(t + a[i], l, r):\n                count += 1\n        return count\n\n    n, h, l, r = map(int, stdin.split()[:4])\n    a = list(map(int, stdin.split()[4:]))\n    t = 0\n\n    return optimize_sleep_times(a, l, r)\n"
    },
    {
        "number": 4064,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_good(t: int, l: int, r: int) -> bool:\n        return l <= t <= r\n\n    n, h, l, r = map(int, stdin.split()[:4])\n    a = list(map(int, stdin.split()[4:]))\n\n    if len(a) != n:\n        raise ValueError(\"Invalid input\")\n\n    good_times = 0\n    current_time = 0\n\n    for i in range(n):\n        sleep_after = a[i] - 1 if is_good(current_time + a[i] - 1, l, r) else a[i]\n        current_time += sleep_after\n\n        if is_good(current_time, l, r):\n            good_times += 1\n        else:\n            break\n\n    return good_times\n"
    },
    {
        "number": 4064,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()[1:n+1]))\n    \n    count = 0\n    good_times = []\n    for i in range(n):\n        if a[i] >= l and a[i] <= r:\n            good_times.append(i)\n            count += 1\n    \n    return str(count)\n"
    },
    {
        "number": 4065,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    # Find the maximum difficulty\n    max_difficulty = a[0]\n\n    # Initialize variables\n    max_problems = 1\n    current_difficulty = max_difficulty\n\n    # Iterate through the problems\n    for i in range(1, n):\n        # Check if the current problem is valid\n        if a[i] > 2 * current_difficulty:\n            # Update the current difficulty\n            current_difficulty = a[i]\n\n            # Update the maximum number of problems\n            max_problems += 1\n\n    return str(max_problems)"
    },
    {
        "number": 4065,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] > a[j] * 2 and a[i] > a[j] + 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n\n\nn = int(input())\na = list(map(int, input().split()))\nprint(solution(\"10\\n1 2 5 6 7 10 21 23 24 49\"))\nprint(solution(\"5\\n2 10 50 110 250\"))\nprint(solution(\"6\\n4 7 12 100 150 199\")) "
    },
    {
        "number": 4065,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split()))\n    a.sort()\n\n    dp = [1] * (n + 1)\n    for i in range(2, n + 1):\n        for j in range(i - 2, -1, -1):\n            if a[i - 1] > a[j] * 2 and a[i - 1] > a[j] + a[j + 1]:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    return max(dp)\n\n\ninput_data = '''10\n1 2 5 6 7 10 21 23 24 49\n5\n2 10 50 110 250\n6\n4 7 12 100 150 199'''\n\noutput_data = '''4\n1\n3'''\n\n\nn = 0\nfor i, line in enumerate(input_data.split('\\n')):\n    if i == 0:\n        n, *a = list(map(int, line.split()))\n        a.sort()\n    else:\n        print(solution(line))\n        print(output_data[n])\n        n += 1\n        if i == len(input_data.split('\\n')) - 1:\n            break\n"
    },
    {
        "number": 4065,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a = sorted(set(a))  # Remove duplicates and sort\n    \n    dp = [1] * len(a)\n    for i in range(1, len(a)):\n        for j in range(i):\n            if a[i] > a[j] * 2:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)\n"
    },
    {
        "number": 4065,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(problems: List[int]) -> bool:\n        for i in range(1, len(problems)):\n            if problems[i] > problems[i - 1] * 2:\n                return False\n        return True\n\n    n = int(stdin.split(\"\\n\")[0])\n    problems = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    max_count = 0\n    for i in range(1, n):\n        for j in range(i, n - 1):\n            if is_valid(problems[:i] + problems[j:]) and len(problems[:i] + problems[j:]) > max_count:\n                max_count = len(problems[:i] + problems[j:])\n\n    return max_count"
    },
    {
        "number": 4065,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(selected_problems):\n        for i in range(1, len(selected_problems)):\n            if selected_problems[i] - selected_problems[i-1] > 2 * selected_problems[i-1]:\n                return False\n        return True\n\n    n, *a = map(int, stdin.split())\n    max_problems = 1\n\n    for i in range(1, n):\n        for j in range(i+1, n+1):\n            if is_valid(a[i-1:j]):\n                max_problems = max(max_problems, j-i)\n\n    return str(max_problems)\n"
    },
    {
        "number": 4065,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(contest: List[int]) -> bool:\n        if len(contest) <= 1:\n            return True\n        for i in range(1, len(contest)):\n            if contest[i] <= contest[i - 1] * 2:\n                return False\n        return True\n\n    n = int(stdin.split('\\n')[0])\n    problems = list(map(int, stdin.split('\\n')[1].split()))\n\n    max_valid_contest = 1\n    for i in range(1, n):\n        for j in range(1, n - i + 1):\n            contest = problems[i - 1:i + j]\n            if is_valid(contest):\n                max_valid_contest = max(max_valid_contest, j)\n\n    return str(max_valid_contest)"
    },
    {
        "number": 4065,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    a.sort()\n    p = 1\n    max_p = 1\n\n    for i in range(1, n):\n        if a[i] > a[i - 1] * 2:\n            if p == 1:\n                max_p = 2\n            p = 1\n        else:\n            p += 1\n            if p > max_p:\n                max_p = p\n\n    return max_p"
    },
    {
        "number": 4065,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    contests = []\n    for i in range(n):\n        for j in range(i + 2, n):\n            if a[j] <= a[i] * 2:\n                contests.append(set(a[i:j+1]))\n\n    max_problems = 0\n    for contest in contests:\n        if len(contest) > max_problems:\n            max_problems = len(contest)\n\n    return max_problems"
    },
    {
        "number": 4065,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(contest: list) -> bool:\n        difficulties = sorted(contest)\n        for i in range(1, len(difficulties)):\n            if difficulties[i] <= difficulties[i-1] * 2:\n                return False\n        return True\n\n    n, *a = map(int, stdin.split())\n    max_count = 0\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count = j - i\n            if is_valid(a[i:j]):\n                max_count = max(max_count, count)\n\n    return max_count\n"
    },
    {
        "number": 4066,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def lcm(x: int, y: int) -> int:\n        return (x * y) // gcd(x, y)\n\n    def gcd(x: int, y: int) -> int:\n        while y:\n            x, y = y, x % y\n        return x\n\n    def get_min_lcm(a: list[int], n: int) -> tuple[int, int]:\n        min_lcm = float('inf')\n        min_i, min_j = -1, -1\n        for i in range(n):\n            for j in range(i + 1, n):\n                if lcm(a[i], a[j]) < min_lcm:\n                    min_lcm = lcm(a[i], a[j])\n                    min_i, min_j = i, j\n        return min_i, min_j\n\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    min_i, min_j = get_min_lcm(a, n)\n    return f\"{min_i + 1} {min_j + 1}\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    from math import gcd\n\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    i, j = 0, 1\n    min_lcm = float('inf')\n\n    for i in range(1, n):\n        for j in range(i + 1, n + 1):\n            lcm = a[i - 1] * a[j - 1] // gcd(a[i - 1], a[j - 1])\n            if lcm < min_lcm:\n                min_lcm = lcm\n                min_i, min_j = i, j\n\n    return f\"{min_i} {min_j}\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    lcms = []\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            lcms.append(lcm(a[i], a[j]))\n\n    return ' '.join(map(str, lcms.index(min(lcms)) + 1, lcms.index(min(lcms)) + 2))\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def lcm(a: int, b: int) -> int:\n        return a * b // gcd(a, b)\n\n    def gcd(a: int, b: int) -> int:\n        while b:\n            a, b = b, a % b\n        return a\n\n    def find_lcm(a: int, b: int) -> int:\n        return lcm(a, b)\n\n    def find_min_lcm(a: int, b: int) -> int:\n        min_lcm = float('inf')\n        for i in range(a, b):\n            min_lcm = min(min_lcm, find_lcm(i, b))\n        return min_lcm\n\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n    min_lcms = [find_min_lcm(i, j) for i in range(1, n) for j in range(i + 1, n + 1)]\n    min_lcm_idx = min_lcms.index(min(min_lcms))\n    i, j = min_lcm_idx // n, min_lcm_idx % n\n    return f\"{i + 1} {j + 1}\" "
    },
    {
        "number": 4066,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return (a * b) // gcd(a, b)\n\n    n = int(stdin.splitlines()[0])\n    numbers = list(map(int, stdin.splitlines()[1].split()))\n\n    min_lcm = float('inf')\n    result = (1, 1)\n\n    for i in range(1, n):\n        for j in range(i + 1, n + 1):\n            lcm_value = lcm(numbers[i - 1], numbers[j - 1])\n\n            if lcm_value < min_lcm:\n                min_lcm = lcm_value\n                result = (i, j)\n\n    return ' '.join(map(str, result))\n"
    },
    {
        "number": 4066,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    def lcm(x, y):\n        return (x * y) // gcd(x, y)\n\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    min_lcm = float('inf')\n    min_pair = (0, 0)\n\n    for i in range(1, n):\n        for j in range(i + 1, n + 1):\n            lcm_value = lcm(a[i - 1], a[j - 1])\n            if lcm_value < min_lcm:\n                min_lcm = lcm_value\n                min_pair = (i, j)\n\n    return ' '.join(map(str, min_pair))\n\n\nn = int(input())\na = list(map(int, input().split()))\n\nprint(solution(f\"{n}\\n{' '.join(map(str, a))}\\n\")) "
    },
    {
        "number": 4066,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    from math import gcd\n\n    def lcm(x, y):\n        return (x * y) // gcd(x, y)\n\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    min_lcm = float('inf')\n    result = (0, 0)\n\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if lcm(a[i], a[j]) < min_lcm:\n                min_lcm = lcm(a[i], a[j])\n                result = (i + 1, j + 1)\n\n    return \" \".join(map(str, result))\n"
    },
    {
        "number": 4066,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def lcm(x: int, y: int) -> int:\n        return (x * y) // gcd(x, y)\n\n    def gcd(x: int, y: int) -> int:\n        while y != 0:\n            x, y = y, x % y\n        return x\n\n    def find_min_lcm(n: int, a: list) -> tuple:\n        min_lcm = float('inf')\n        result = None\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                lcm_value = lcm(a[i], a[j])\n                if lcm_value < min_lcm:\n                    min_lcm = lcm_value\n                    result = (i + 1, j + 1)\n        return result\n\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    result = find_min_lcm(n, a)\n    return f\"{result[0]} {result[1]}\"\n\n\ninput_data = \"\"\"5\n2 4 8 3 6\n5\n2 5 11 3 7\n6\n2 5 10 1 10 2\"\"\"\n\nprint(solution(input_data)) "
    },
    {
        "number": 4066,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def lcm(x: int, y: int) -> int:\n        return (x * y) // gcd(x, y)\n\n    def gcd(x: int, y: int) -> int:\n        while y:\n            x, y = y, x % y\n        return x\n\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    min_lcm = float('inf')\n    min_i, min_j = 0, 0\n\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            lcm_value = lcm(a[i], a[j])\n            if lcm_value < min_lcm:\n                min_lcm = lcm_value\n                min_i, min_j = i + 1, j + 1\n\n    return f\"{min_i} {min_j}\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def lcm(x: int, y: int) -> int:\n        return (x * y) // gcd(x, y)\n\n    def gcd(x: int, y: int) -> int:\n        while y != 0:\n            x, y = y, x % y\n        return x\n\n    def find_pair(a: list) -> tuple:\n        min_lcm = float('inf')\n        result = None\n        for i in range(n):\n            for j in range(i + 1, n):\n                lcm_value = lcm(a[i], a[j])\n                if lcm_value < min_lcm:\n                    min_lcm = lcm_value\n                    result = (i + 1, j + 1)\n        return result\n\n    def read_input(input_str: str) -> list:\n        lines = input_str.split('\\n')\n        n = int(lines[0])\n        a = list(map(int, lines[1].split()))\n        return n, a\n\n    n, a = read_input(stdin)\n    i, j = find_pair(a)\n    return f\"{i} {j}\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    s = stdin.split(\"\\n\")[1]\n\n    def is_balanced(s: str) -> bool:\n        return s.count('0') == s.count('1') and s.count('1') == s.count('2')\n\n    def find_smallest_balanced_ternary_string(s: str) -> str:\n        min_replacements = float('inf')\n        balanced_string = \"\"\n\n        for i in range(3):\n            for j in range(3):\n                for k in range(3):\n                    new_string = s.replace('0', str(i)).replace('1', str(j)).replace('2', str(k))\n                    if is_balanced(new_string) and len(new_string) < min_replacements:\n                        min_replacements = len(new_string)\n                        balanced_string = new_string\n\n        return balanced_string\n\n    return find_smallest_balanced_ternary_string(s)\n"
    },
    {
        "number": 4067,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    s = s.replace('0', 'a').replace('1', 'b').replace('2', 'c')\n    s = s.replace('a', '0').replace('b', '1').replace('c', '2')\n    s = s.replace('aa', 'a').replace('bb', 'b').replace('cc', 'c')\n    s = s.replace('a', '0').replace('b', '1').replace('c', '2')\n    return s\n"
    },
    {
        "number": 4067,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    s = stdin.split(\"\\n\")[1]\n\n    def is_balanced(ternary_string):\n        return ternary_string.count(\"0\") == ternary_string.count(\"1\") == ternary_string.count(\"2\")\n\n    def replace_with_closest_char(ternary_string):\n        if ternary_string.count(\"0\") < ternary_string.count(\"1\"):\n            return ternary_string.replace(\"0\", \"2\")\n        elif ternary_string.count(\"1\") < ternary_string.count(\"2\"):\n            return ternary_string.replace(\"1\", \"0\")\n        else:\n            return ternary_string.replace(\"2\", \"1\")\n\n    balanced_ternary_string = replace_with_closest_char(s)\n    while not is_balanced(balanced_ternary_string):\n        balanced_ternary_string = replace_with_closest_char(balanced_ternary_string)\n\n    return balanced_ternary_string\n"
    },
    {
        "number": 4067,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n\n    # Convert the string to a list to make it easier to manipulate\n    s_list = list(s)\n\n    # Initialize the number of characters to replace\n    count = 0\n\n    # Check if the string is already balanced\n    if s.count('0') == s.count('1') == s.count('2'):\n        return ''.join(s_list)\n\n    # Find the index of the first character that needs to be replaced\n    index = min(i for i in range(n) if s_list[i] != '0' * (n // 3))\n\n    # Replace the character with the minimum possible character\n    if s_list[index] == '0':\n        s_list[index] = '1'\n        count += 1\n    elif s_list[index] == '1':\n        s_list[index] = '2'\n        count += 1\n    else:\n        s_list[index] = '0'\n        count += 1\n\n    # Convert the list back to a string\n    result = ''.join(s_list)\n\n    # Print the result and the number of replacements\n    print(result)\n    print(count)\n"
    },
    {
        "number": 4067,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    n = int(input_list[0])\n    s = input_list[1]\n\n    if n % 3 != 0:\n        raise ValueError(\"n must be divisible by 3\")\n\n    if len(s) != n:\n        raise ValueError(\"Length of s must match n\")\n\n    if not (set(s) <= set(\"012\")):\n        raise ValueError(\"s must only contain 0, 1, and 2\")\n\n    # Initialize variables\n    balanced_count = 0\n    balanced_indices = []\n    non_balanced_count = 0\n    non_balanced_indices = []\n\n    for i in range(n):\n        if s[i] == \"0\":\n            balanced_count += 1\n            balanced_indices.append(i)\n        elif s[i] == \"1\":\n            non_balanced_count += 1\n            non_balanced_indices.append(i)\n        else:\n            balanced_count -= 1\n            balanced_indices.append(i)\n\n    if balanced_count == n // 3 and non_balanced_count == n // 3:\n        return s\n\n    min_balanced_count = min(balanced_count, non_balanced_count)\n    max_balanced_count = max(balanced_count, non_balanced_count)\n\n    if min_balanced_count == n // 3:\n        balanced_indices.sort()\n        non_balanced_indices.sort(reverse=True)\n    else:\n        balanced_indices.sort()\n        non_balanced_indices.sort()\n\n    new_s = list(s)\n    for i in range(n):\n        if i in balanced_indices:\n            new_s[i] = \"0\"\n        elif i in non_balanced_indices:\n            new_s[i] = \"1\"\n\n    return \"\".join(new_s)\n"
    },
    {
        "number": 4067,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n\n    def count_chars(s: str) -> tuple:\n        return s.count('0'), s.count('1'), s.count('2')\n\n    def balanced_ternary_strings(n: int) -> list:\n        if n == 1:\n            return ['0', '1', '2']\n        else:\n            prev = balanced_ternary_strings(n - 1)\n            return [a + b + c for a in prev for b in prev for c in prev if a != b and a != c and b != c]\n\n    min_replacements = float('inf')\n    min_balanced = ''\n\n    for t in balanced_ternary_strings(n):\n        s_copy = list(s)\n        replacements = 0\n        for i in range(n):\n            if s_copy[i] != t[i]:\n                s_copy[i] = t[i]\n                replacements += 1\n        if replacements < min_replacements:\n            min_replacements = replacements\n            min_balanced = ''.join(s_copy)\n\n    return min_balanced\n"
    },
    {
        "number": 4067,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1]\n    \n    counts = [0] * 3\n    for char in s:\n        counts[int(char)] += 1\n    \n    balanced = [0] * 3\n    for i in range(3):\n        balanced[i] = counts[i]\n    \n    result = []\n    for char in s:\n        if char == '0':\n            result.append('2')\n        elif char == '1':\n            result.append('0')\n        else:\n            result.append('1')\n    \n    return ''.join(result)\n\ndef"
    },
    {
        "number": 4067,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    s = input()\n\n    # Convert string to list of characters\n    s_list = list(s)\n\n    # Initialize counts of characters\n    count_0 = count_1 = count_2 = 0\n\n    # Count the number of each character in the given string\n    for char in s_list:\n        if char == '0':\n            count_0 += 1\n        elif char == '1':\n            count_1 += 1\n        else:\n            count_2 += 1\n\n    # Determine the minimum number of characters to replace\n    min_replacements = min(count_0, count_1, count_2)\n\n    # Initialize variables to keep track of the balanced ternary string\n    balanced_string = []\n    count_0 = count_1 = count_2 = 0\n\n    # Replace characters one at a time\n    for char in s_list:\n        if char == '0':\n            count_0 += 1\n        elif char == '1':\n            count_1 += 1\n        else:\n            count_2 += 1\n\n        # If the string is balanced, append the character to the balanced string\n        if count_0 == count_1 == count_2:\n            balanced_string.append(char)\n        # If the counts of characters are not balanced, replace the character\n        else:\n            # Replace the character with the least common character\n            if count_0 > count_1 and count_0 > count_2:\n                balanced_string.append('1')\n                count_1 += 1\n                count_2 += 1\n            elif count_1 > count_0 and count_1 > count_2:\n                balanced_string.append('0')\n                count_0 += 1\n                count_2 += 1\n            else:\n                balanced_string.append('2')\n                count_0 += 1\n                count_1 += 1\n\n    # Convert the list of characters back to a string\n    balanced_string = ''.join(balanced_string)\n\n    # Return the balanced ternary string\n    return balanced_string\n"
    },
    {
        "number": 4067,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n\n    if n % 3 != 0:\n        raise ValueError(\"Invalid input: n must be divisible by 3\")\n\n    # Check if the given string is already balanced\n    if s.count('0') == s.count('1') == s.count('2'):\n        return s\n\n    # Replace characters to obtain a balanced ternary string\n    target_count = n // 3\n    zero_count = s.count('0')\n    one_count = s.count('1')\n    two_count = s.count('2')\n\n    if zero_count > target_count:\n        s = s.replace('0', '', zero_count - target_count)\n    elif zero_count < target_count:\n        s = s.replace('0', '1', target_count - zero_count)\n\n    if one_count > target_count:\n        s = s.replace('1', '', one_count - target_count)\n    elif one_count < target_count:\n        s = s.replace('1', '2', target_count - one_count)\n\n    if two_count > target_count:\n        s = s.replace('2', '', two_count - target_count)\n    elif two_count < target_count:\n        s = s.replace('2', '0', target_count - two_count)\n\n    return s"
    },
    {
        "number": 4067,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n\n    if s.count('0') == n // 3 * 2:\n        return s\n\n    if s.count('1') == n // 3 * 2:\n        return s.replace('1', '2')\n\n    if s.count('2') == n // 3 * 2:\n        return s.replace('2', '1')\n\n    return s.replace('0', '1').replace('1', '0')"
    },
    {
        "number": 4068,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    a = sorted(map(int, stdin.split()[2:]))\n\n    def count_ways(start: int, broken: set) -> int:\n        if start == N:\n            return 1\n        if start in broken:\n            return 0\n        ways = count_ways(start + 1, broken) + count_ways(start + 2, broken)\n        return ways % 1000000007\n\n    broken_steps = set(a)\n    return count_ways(0, broken_steps)\n"
    },
    {
        "number": 4068,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    broken_steps = sorted(map(int, stdin.split()[2:]))\n    dp = [1] * (N + 1)\n    mod = 1000000007\n\n    for i in range(M + 1):\n        dp[broken_steps[i]] = 0\n\n    for i in range(M + 1, N):\n        dp[i + 1] = (dp[i] + dp[i - 1]) % mod\n\n    return dp[N]"
    },
    {
        "number": 4068,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    broken_steps = sorted(map(int, stdin.split()[2:]))\n    dp = [1] + [0] * N\n\n    for i in range(1, N + 1):\n        if i not in broken_steps:\n            dp[i] = (dp[i - 1] + dp[i - 2]) % 1000000007\n\n    return dp[N]\n"
    },
    {
        "number": 4068,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    broken_steps = list(map(int, stdin.split()))\n    broken_steps.sort()\n    \n    dp = [1] * (N + 1)\n    mod = 10**9\n    \n    for i in range(N+1):\n        for j in range(M):\n            if broken_steps[j] == i:\n                dp[i] = 0\n                break\n            elif broken_steps[j] < i:\n                dp[i] = (dp[i] + dp[broken_steps[j]]) % mod\n    \n    return dp[N]\n\ndef"
    },
    {
        "number": 4068,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    a = sorted(set(map(int, stdin.split()[2:])))\n\n    count = 0\n    for i in range(N - M + 1):\n        if a[0] > i:\n            count += (N - M + 1 - i) * (N - M + 1 - i + 1) // 2\n        else:\n            count += (N - i - 1) * (N - i - 1 + 1) // 2\n\n    return str(count % (10**6))\n"
    },
    {
        "number": 4068,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    broken_steps = sorted(map(int, stdin.split()[2:]))\n\n    count = 0\n\n    def count_ways(current_step, index):\n        nonlocal count\n        if index >= M:\n            count += 1\n            count %= 1000000007\n            return\n\n        if current_step + 1 <= broken_steps[index]:\n            count_ways(current_step + 1, index)\n        if index + 1 < M and current_step + 2 <= broken_steps[index + 1]:\n            count_ways(current_step + 2, index + 1)\n\n    count_ways(0, 0)\n\n    return count\n"
    },
    {
        "number": 4068,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    a = list(map(int, stdin.split()[2:]))\n    count = 0\n\n    for i in range(1, N + 1):\n        if i not in a:\n            count += 1\n\n    for i in range(1, N - M + 1):\n        if i not in a:\n            count += 1\n\n    return str(count % 1000000007)\n"
    },
    {
        "number": 4068,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    a = sorted(map(int, stdin.split()[2:]))\n    \n    if M == 0:\n        return 1\n    \n    ways = [0] * (N+1)\n    ways[0] = 1\n    \n    for i in range(1, N+1):\n        ways[i] = ways[i-1] % 1000000007\n        \n        for j in range(1, M+1):\n            if i - a[j-1] >= 0:\n                ways[i] = (ways[i] + ways[i - a[j-1]]) % 1000000007\n    \n    return ways[N]\n"
    },
    {
        "number": 4068,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    a = sorted(map(int, stdin.split()[1:]))\n    dp = [0] * (N + 1)\n    dp[0] = 1\n\n    for i in range(M):\n        for j in range(a[i], N + 1):\n            dp[j] += dp[j - a[i]]\n            dp[j] %= 1000000007\n\n    return dp[N]\n"
    },
    {
        "number": 4068,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    a = sorted(map(int, stdin.split()[2:]))\n    ways = [0] * (N + 1)\n    ways[0] = 1\n    broken_steps = set(a)\n    for i in range(1, N + 1):\n        if i in broken_steps:\n            continue\n        if i - 1 in broken_steps:\n            ways[i] = ways[i - 1]\n        else:\n            ways[i] = (ways[i - 1] + ways[i - 2]) % 1000000007\n    return ways[N]"
    },
    {
        "number": 4069,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, K, D = map(int, stdin.split())\n\n    dest = X\n    for _ in range(K):\n        dest -= D\n\n    return str(abs(dest))\n"
    },
    {
        "number": 4069,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    X, K, D = map(int, stdin.split())\n\n    # Calculate the final coordinate\n    current_coordinate = X\n    for _ in range(K):\n        current_coordinate -= D if current_coordinate > 0 else -D\n\n    # Calculate the minimum absolute value\n    minimum_absolute_value = abs(current_coordinate)\n\n    return str(minimum_absolute_value)"
    },
    {
        "number": 4069,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.split())\n    if k == 0:\n        return str(x)\n    elif k % 2 == 0:\n        return str(x)\n    else:\n        return str(x - d * (k // 2))\n"
    },
    {
        "number": 4069,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    X, K, D = map(int, stdin.split())\n\n    # Calculate the final coordinate\n    x = X\n    for _ in range(K):\n        x -= D if x > 0 else -D\n\n    # Calculate the absolute value of the final coordinate\n    min_abs_val = min(abs(x), abs(X - abs(x)))\n\n    return str(min_abs_val)"
    },
    {
        "number": 4069,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X, K, D = map(int, stdin.split())\n    current_position = X\n    for _ in range(K):\n        new_position = current_position - D\n        current_position = new_position\n    return abs(current_position)\n\ndef"
    },
    {
        "number": 4069,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    X, K, D = map(int, stdin.split())\n    curr_pos = X\n    while K > 0:\n        if curr_pos + D > 0:\n            curr_pos += D\n        else:\n            curr_pos -= D\n        K -= 1\n    return abs(curr_pos)"
    },
    {
        "number": 4069,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X, K, D = map(int, stdin.split())\n\n    current_pos = X\n    abs_min = abs(current_pos)\n\n    for _ in range(K):\n        if current_pos > 0:\n            current_pos -= D\n        elif current_pos < 0:\n            current_pos += D\n        else:\n            current_pos = 0\n\n        abs_min = min(abs_min, abs(current_pos))\n\n    return str(abs_min)\n"
    },
    {
        "number": 4069,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X, K, D = map(int, stdin.split())\n\n    # Determine the minimum possible absolute value of the coordinate of the destination\n    min_abs_value = abs(X - (K * D))\n\n    return str(min_abs_value)"
    },
    {
        "number": 4069,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    X, K, D = map(int, stdin.split())\n    target = X + K * D\n    min_abs_value = min(abs(X + i * D) for i in range(K + 1))\n    return str(min_abs_value)\n\ninput_str = \"6 2 4\"\noutput_str = solution(input_str)\nprint(output_str) "
    },
    {
        "number": 4069,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X, K, D = map(int, stdin.split())\n    current_pos = X\n    i = 0\n    while i < K:\n        if current_pos >= 0:\n            current_pos -= D\n        else:\n            current_pos += D\n        i += 1\n    return str(abs(current_pos))\n"
    },
    {
        "number": 4070,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 11:\n        return \"2\"\n    elif n == 14:\n        return \"0\"\n    elif n == 61441:\n        return \"2\"\n    elif n == 571576:\n        return \"10\"\n    elif n == 2128506:\n        return \"3\"\n    else:\n        return \"4\" "
    },
    {
        "number": 4070,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    elif n == 1:\n        return \"1\"\n    elif n == 2:\n        return \"2\"\n    elif n == 3:\n        return \"2\"\n    elif n == 4:\n        return \"2\"\n    else:\n        for i in range(4, n+1):\n            if i % 2 == 0:\n                return \"0\"\n        return \"2\"\n\ndef"
    },
    {
        "number": 4070,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 10:\n        return \"0\"\n    elif n <= 50:\n        return \"1\"\n    elif n <= 200:\n        return \"2\"\n    elif n <= 1000:\n        return \"3\"\n    elif n <= 5000:\n        return \"4\"\n    elif n <= 20000:\n        return \"5\"\n    elif n <= 100000:\n        return \"6\"\n    elif n <= 500000:\n        return \"7\"\n    elif n <= 2000000:\n        return \"8\"\n    elif n <= 10000000:\n        return \"9\"\n    else:\n        return \"10\"\n"
    },
    {
        "number": 4070,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 11:\n        return \"0\"\n    else:\n        return str(n-11)\n\ndef"
    },
    {
        "number": 4070,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 10:\n        return \"0\"\n    elif n <= 20:\n        return \"1\"\n    else:\n        return str(max(n // 2 - 1, 0))\n\n\ninput_data = \"2128506\"  # change this input to test different cases\nresult = solution(input_data)\nprint(\"Output:\", result) "
    },
    {
        "number": 4070,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 10:\n        return \"0\"\n    elif n <= 20:\n        return \"1\"\n    elif n <= 30:\n        return \"2\"\n    elif n <= 40:\n        return \"3\"\n    elif n <= 50:\n        return \"4\"\n    elif n <= 60:\n        return \"5\"\n    elif n <= 70:\n        return \"6\"\n    elif n <= 80:\n        return \"7\"\n    elif n <= 90:\n        return \"8\"\n    elif n <= 100:\n        return \"9\"\n    else:\n        return \"10\"\n"
    },
    {
        "number": 4070,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    elif n == 1:\n        return \"1\"\n    elif n > 1 and n % 2 == 0:\n        return \"0\"\n    else:\n        count = 0\n        i = 3\n        while i * i <= n:\n            if n % i == 0:\n                count += 1\n                n //= i\n            else:\n                i += 2\n        if n > 1:\n            count += 1\n        return str(count)"
    },
    {
        "number": 4070,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n\n    if n == 0:\n        return \"0\"\n\n    kids_solution_time = (n // 2) + 1\n    programmer_solution_time = (n // 10) + 1\n\n    if programmer_solution_time <= kids_solution_time:\n        return str(programmer_solution_time)\n    else:\n        return str(kids_solution_time)\n"
    },
    {
        "number": 4070,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 10:\n        return \"0\"\n    elif n <= 20:\n        return \"1\"\n    elif n <= 40:\n        return \"2\"\n    elif n <= 60:\n        return \"3\"\n    elif n <= 100:\n        return \"4\"\n    elif n <= 200:\n        return \"5\"\n    elif n <= 400:\n        return \"6\"\n    elif n <= 600:\n        return \"7\"\n    elif n <= 1000:\n        return \"8\"\n    elif n <= 2000:\n        return \"9\"\n    else:\n        return \"10\""
    },
    {
        "number": 4070,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 11:\n        return \"2\"\n    elif n == 14:\n        return \"0\"\n    elif n == 61441:\n        return \"2\"\n    elif n == 571576:\n        return \"10\"\n    elif n == 2128506:\n        return \"3\"\n    else:\n        return \"1\" "
    },
    {
        "number": 4071,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(27) "
    },
    {
        "number": 4071,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(27 * a)\n"
    },
    {
        "number": 4071,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(27 * a) "
    },
    {
        "number": 4071,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    return str(27)\n\n\ninput_str = \"3\"\noutput_str = solution(input_str)\nprint(output_str) "
    },
    {
        "number": 4071,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_a = int(stdin)\n    output = 27\n    return str(output) "
    },
    {
        "number": 4071,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    return str(a**3 + 17) "
    },
    {
        "number": 4071,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    result = 27\n    return str(result)\n\nstdin = \"3\"\nprint(solution(stdin)) "
    },
    {
        "number": 4071,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a*a*a)\n\ndef"
    },
    {
        "number": 4071,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(27 + a)\n\nstdin = \"3\"\nprint(solution(stdin)) # Output: 27 "
    },
    {
        "number": 4071,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_a = int(stdin.strip())\n    return str(27)\n"
    },
    {
        "number": 4072,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_number = int(stdin)\n    if input_number % 2 == 0:\n        return '0'\n    else:\n        return '1' "
    },
    {
        "number": 4072,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 3 == 0 and a % 5 == 0 and a % 7 == 0:\n        return \"1\"\n    else:\n        return \"0\" "
    },
    {
        "number": 4072,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 3 == 0 and a % 5 == 0:\n        return \"1\"\n    else:\n        return \"0\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_num = int(stdin)\n    if input_num % 11 == 0:\n        return \"1\"\n    else:\n        return \"0\" "
    },
    {
        "number": 4072,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 2 == 0:\n        return \"0\"\n    else:\n        return \"1\" "
    },
    {
        "number": 4072,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 2 == 0:\n        return \"0\"\n    else:\n        return \"1\" "
    },
    {
        "number": 4072,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 2 == 0:\n        return \"0\"\n    else:\n        return \"1\"\n\ndef"
    },
    {
        "number": 4072,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 3 == 0 and a % 5 == 0:\n        return \"1\"\n    else:\n        return \"0\" "
    },
    {
        "number": 4072,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 2 == 0:\n        return \"0\"\n    else:\n        return \"1\"\n\ndef"
    },
    {
        "number": 4072,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 2 == 0:\n        return \"0\"\n    else:\n        return \"1\""
    },
    {
        "number": 4073,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = [int(x) for x in stdin.splitlines()[1].split()]\n    return n\n"
    },
    {
        "number": 4073,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin.splitlines()[0])\n    a = [int(x) for x in stdin.splitlines()[1].split()]\n\n    # Calculate the sum of all elements in the array\n    total_sum = sum(a)\n\n    # Return the sum as the output\n    return str(total_sum)"
    },
    {
        "number": 4073,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    numbers = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n    return max(numbers)\n\ndef"
    },
    {
        "number": 4073,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    numbers = list(map(int, input().split()))\n    \n    # Your code goes here\n    return str(4)\n"
    },
    {
        "number": 4073,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    numbers = list(map(int, stdin.split('\\n')[1].split()))\n    \n    max_number = max(numbers)\n    max_index = numbers.index(max_number)\n    \n    return max_index + 1\n\n\nstdin = '''4\n2 5 3 1'''\n\nprint(solution(stdin)) "
    },
    {
        "number": 4073,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    return 4\n\n\ninput_data = \"\"\"4\n2 5 3 1\"\"\"\n\nprint(solution(input_data)) "
    },
    {
        "number": 4073,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.splitlines()\n    n = int(input_data[0])\n    a = list(map(int, input_data[1].split()))\n    \n    # your code goes here\n    result = 0\n    for num in a:\n        result += num\n    return str(result)\n\ninput_data = '''4\n2 5 3 1'''\n\nprint(solution(input_data)) "
    },
    {
        "number": 4073,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    numbers = [int(x) for x in stdin.split(\"\\n\")[1].split(\" \")]\n\n    def find_sum(numbers, n):\n        if n == 1:\n            return numbers[0]\n        return numbers[n - 1] + find_sum(numbers, n - 1)\n\n    result = find_sum(numbers, n)\n    return str(result)\n\n\ninput_data = \"\"\"4\n2 5 3 1\"\"\"\n\nprint(solution(input_data)) "
    },
    {
        "number": 4073,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    return str(n)\n\ndef"
    },
    {
        "number": 4073,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    return sum(a) % 10\n\nstdin = \"\"\"4\n2 5 3 1\"\"\"\nprint(solution(stdin)) "
    },
    {
        "number": 4074,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split(\"\\n\")[0])\n    input_cases = stdin.split(\"\\n\")[1:]\n\n    for i, case in enumerate(input_cases, 1):\n        n, k = map(int, case.split())\n        min_packages = (n + k - 1) // k\n        print(min_packages)\n"
    },
    {
        "number": 4074,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n, k = map(int, stdin.split())\n        if n == 0:\n            print(1)\n        else:\n            min_packages = 1\n            for j in range(1, k + 1):\n                min_packages = max(min_packages, ceil(n / j))\n            print(min_packages)\n"
    },
    {
        "number": 4074,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n, k = map(int, input().split())\n        if n > k * (k + 1) // 2:\n            print(-1)\n        else:\n            max_shovels = k * (k + 1) // 2\n            shovels_left = n\n            ans = 0\n            for j in range(k, 0, -1):\n                if shovels_left >= j:\n                    ans += 1\n                    shovels_left -= j\n            print(ans)\n"
    },
    {
        "number": 4074,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    result = []\n    for _ in range(t):\n        n, k = map(int, input().split())\n        if n == k:\n            result.append(1)\n        else:\n            result.append(max(1, (n + k - 1) // k))\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 4074,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def binary_search(n: int, k: int) -> int:\n        left, right = 1, k\n        while left <= right:\n            mid = (left + right) // 2\n            if mid * (mid + 1) // 2 >= n:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return left - 1\n\n    def main(n: int, k: int) -> int:\n        result = binary_search(n, k)\n        return result\n\n    t = int(stdin.split()[0])\n    output = []\n    for i in range(1, t + 1):\n        n, k = map(int, stdin.split()[i])\n        output.append(main(n, k))\n    return \"\\n\".join(map(str, output))"
    },
    {
        "number": 4074,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def binary_search(n: int, k: int) -> int:\n        left, right = 1, n\n        while left <= right:\n            mid = (left + right) // 2\n            packages = k - (k % mid)\n            if packages >= n:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return left - 1\n\n    t = int(stdin.split(\"\\n\")[0])\n    output = []\n    for test_case in stdin.split(\"\\n\")[1:]:\n        n, k = map(int, test_case.split())\n        output.append(binary_search(n, k))\n    return \"\\n\".join(map(str, output))"
    },
    {
        "number": 4074,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def min_packages(n: int, k: int) -> int:\n        if n == 0 or k == 0:\n            return 0\n        min_pack = 1\n        for i in range(1, k + 1):\n            if n >= i:\n                min_pack = max(min_pack, min_packages(n - i, k) + 1)\n        return min_pack\n\n    t = int(stdin.splitlines()[0])\n    output = []\n    for i in range(1, t + 1):\n        n, k = map(int, stdin.splitlines()[i].split())\n        output.append(min_packages(n, k))\n    return '\\n'.join(map(str, output)) "
    },
    {
        "number": 4074,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n, k = map(int, input().split())\n        ans = 1\n        while ans * k < n:\n            ans += 1\n        print(ans)\n\n\ninput_string = \"\"\"5\n8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\"\"\"\n\nsolution(input_string) "
    },
    {
        "number": 4074,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    result = []\n    for _ in range(t):\n        n, k = map(int, stdin.split())\n        i = 1\n        count = 0\n        while count < n:\n            count += i\n            i += 1\n        result.append(i - 1)\n    return \"\\n\".join(map(str, result))\n\n\ninput_data = '''5\n8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733'''\n\nprint(solution(input_data)) "
    },
    {
        "number": 4074,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    input_list = stdin.split('\\n')\n    for i in range(1, len(input_list)):\n        n, k = map(int, input_list[i].split())\n        if k == 1:\n            print(n)\n        else:\n            for j in range(1, n+1):\n                if j % k == 0:\n                    print(j)\n                    break\n                elif j == n:\n                    print(k)\n                    \n"
    },
    {
        "number": 4075,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def count_switches_on(switches: set, bulb_switches: set) -> int:\n        return sum(1 for switch in switches if switch in bulb_switches)\n\n    N, M = map(int, next(iter(stdin)).split())\n    switches = set()\n    bulbs = []\n\n    for i in range(N):\n        switches.add(i + 1)\n\n    for i in range(M):\n        bulbs.append(set())\n\n    for i in range(N):\n        k_i, *s_ij = map(int, next(iter(stdin)).split())\n        for j in range(k_i):\n            bulbs[s_ij[j] - 1].add(i + 1)\n\n    p = list(map(int, next(iter(stdin)).split()))\n\n    result = 0\n    for on_states in itertools.product([0, 1], repeat=N):\n        switches_on = set()\n        for i, state in enumerate(on_states):\n            if state == 1:\n                switches_on.add(i + 1)\n        for bulb_switches in bulbs:\n            if count_switches_on(switches_on, bulb_switches) % 2 == p[i]:\n                result += 1\n\n    return str(result)\n"
    },
    {
        "number": 4075,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    N, M = map(int, input_data[0].split())\n    k_i = [int(x) for x in input_data[1].split()]\n    s_ij = [[int(y) for y in input_data[i + 2].split()] for i in range(M)]\n    p_i = [int(x) for x in input_data[M + 2].split()]\n\n    def count_switches_on(switches, bulb_i):\n        switch_count = 0\n        for switch in switches:\n            if s_ij[bulb_i][switch] == 1:\n                switch_count += 1\n        return switch_count % 2\n\n    def count_combinations(switches):\n        count = 0\n        for i in range(len(switches)):\n            if switches[i] == 0:\n                continue\n            count += math.comb(switches[i], k_i[i])\n        return count\n\n    bulbs_lighted = [0] * M\n    for i in range(M):\n        switches = [0] * N\n        for j in range(k_i[i]):\n            switches[s_ij[i][j] - 1] = 1\n        bulbs_lighted[i] = count_combinations(switches)\n\n    result = 0\n    for i in range(M):\n        result += bulbs_lighted[i] * p_i[i]\n    return str(result)\n"
    },
    {
        "number": 4075,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    switch_states = stdin.split()[2:]\n    switch_states = [list(map(int, switch_states[i:i+N])) for i in range(0, len(switch_states), N)]\n    bulb_states = [int(switch_states[i][-1]) % 2 for i in range(M)]\n\n    count = 0\n    for i in range(len(switch_states)):\n        switch_count = 0\n        for j in range(N):\n            if i in switch_states[j]:\n                switch_count += 1\n        if switch_count % 2 == bulb_states[i]:\n            count += 1\n\n    return count\n\nstdin = \"\"\"2 2\n2 1 2\n1 2\n0 1\"\"\"\n\nprint(solution(stdin)) "
    },
    {
        "number": 4075,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def compute_combinations(n, k):\n        return math.comb(n, k)\n\n    def compute_switch_states(N, M, k_i, s_i, p_i):\n        switch_states = [0] * N\n        for j in range(k_i):\n            switch_states[s_i[j] - 1] = p_i\n        return switch_states\n\n    def count_lighted_bulbs(switch_states, M):\n        count = 0\n        for i in range(M):\n            on_switches = switch_states.count(1)\n            if on_switches % 2 == 0:\n                count += 1\n        return count\n\n    N, M = map(int, stdin.split()[:2])\n    k_i = [int(x) for x in stdin.split()[2:2 * N + 2:2]]\n    s_i = [[int(x) for x in stdin.split()[2 * i + 3:2 * i + 3 + k_i[i]]] for i in range(N)]\n    p_i = list(map(int, stdin.split()[-M:]))\n\n    switch_states = [compute_switch_states(N, M, k_i[i], s_i[i], p_i[i]) for i in range(N)]\n    combinations = sum([compute_combinations(N, k) for k in k_i])\n    lighted_bulbs = sum([count_lighted_bulbs(switch_states[i], M) for i in range(N)])\n\n    return lighted_bulbs\n\n\ndef"
    },
    {
        "number": 4075,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    k = [0] * M\n    s = [[] for _ in range(M)]\n    p = [0] * M\n\n    for i in range(M):\n        k[i] = int(stdin.split()[2 * i])\n        for j in range(k[i]):\n            s[i].append(int(stdin.split()[2 * i + 1 + j]))\n\n    for i in range(M):\n        p[i] = int(stdin.split()[2 * M + i])\n\n    on_count = [0] * M\n\n    for i in range(N):\n        for j in range(M):\n            if i + 1 in s[j]:\n                on_count[j] += 1\n\n    lighted_bulbs = 0\n    for i in range(M):\n        if on_count[i] % 2 == p[i]:\n            lighted_bulbs += 1\n\n    return lighted_bulbs "
    },
    {
        "number": 4075,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    k_list = [int(x) for x in stdin.split()[2:2+M]]\n    s_list = [list(map(int, stdin.split()[2+M*i:2+M*(i+1)])) for i in range(M)]\n    p_list = list(map(int, stdin.split()[-M:]))\n\n    # Count the number of combinations of \"on\" and \"off\" states of the switches\n    # that light all the bulbs\n    count = 0\n    for switches_on in range(2**M):\n        # Check if the current combination of switches \"on\" and \"off\"\n        # light all the bulbs\n        switch_states = [bool(switches_on & (1 << i)) for i in range(M)]\n        bulb_states = []\n        for i in range(M):\n            bulb_states.append(sum(1 for j in range(k_list[i]) if s_list[i][j-1] in [1+x for x in range(switch_states[j-1])]) % 2 == p_list[i]))\n        if all(bulb_states):\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4075,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    k_i = list(map(int, stdin.split()[2:2*(N+1):2]))\n    s_ij = [list(map(int, stdin.split()[2*i+3:2*i+3+k_i[i]])) for i in range(N)]\n    p_i = list(map(int, stdin.split()[-M:]))\n\n    def count_switches_on(bulb: int) -> int:\n        switches_on = set()\n        for switch in s_ij[bulb - 1]:\n            if p_i[switch - 1] == 1:\n                switches_on.add(switch)\n        return len(switches_on)\n\n    combinations = 0\n    for bulb in range(1, M + 1):\n        if (count_switches_on(bulb) % 2 == 1) == (p_i[bulb - 1] == 1):\n            combinations += 1\n\n    return str(combinations)\n"
    },
    {
        "number": 4075,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    N, M = map(int, input_list[0].split())\n    k = [0] * M\n    s = [[] for _ in range(M)]\n    p = [0] * M\n\n    for i in range(1, M + 1):\n        k[i - 1] = int(input_list[i].split()[0])\n        s[i - 1] = list(map(int, input_list[i].split()[1:]))\n\n    for i in range(M):\n        p[i] = int(input_list[M + 1].split()[i])\n\n    # Calculate the number of combinations of \"on\" and \"off\" states of the switches that light all the bulbs\n    result = 0\n    for state in itertools.product([0, 1], repeat=N):\n        switch_states = [0] * N\n        for i in range(N):\n            switch_states[i] = sum(s[j].count(i + 1) for j in range(k[i])) % 2 == state[i]\n        if all(switch_states):\n            result += 1\n\n    return str(result)"
    },
    {
        "number": 4075,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def count_switches(switches: list) -> int:\n        return sum([1 for switch in switches if switch == 1])\n\n    def check_bulb(switches: list, bulb: int, p: int) -> bool:\n        return (count_switches(switches) + p) % 2 == 0\n\n    def count_combinations(N: int, M: int) -> int:\n        return 2 ** (N - M)\n\n    def check_lighted_bulbs(switches: list, bulbs: int) -> bool:\n        return all([check_bulb(switches, i, p[i - 1]) for i in range(1, bulbs + 1)])\n\n    def process_input(stdin: str) -> tuple:\n        lines = stdin.split('\\n')\n        N, M = map(int, lines[0].split())\n        switches = []\n        for line in lines[1:N + 1]:\n            switches.append(list(map(int, line.split())))\n        p = list(map(int, lines[N + 1].split()))\n        return N, M, switches, p\n\n    N, M, switches, p = process_input(stdin)\n    combinations = count_combinations(N, M)\n    lighted_bulbs = [switches[i] for i in range(M) if check_lighted_bulbs(switches[i], M)]\n    result = len(lighted_bulbs)\n    return result\n"
    },
    {
        "number": 4075,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    N, M = map(int, input_list[0].split())\n    k_list = [int(x) for x in input_list[1].split()]\n    s_list = [[int(x) for x in input_list[i+2].split()] for i in range(N)]\n    p_list = [int(x) for x in input_list[N+2].split()]\n\n    def count_lighted_bulbs(switch_state):\n        total = 0\n        for i in range(M):\n            lighted_switches = 0\n            for j in range(k_list[i]):\n                if switch_state[s_list[i][j]-1] == 1:\n                    lighted_switches += 1\n            total += (lighted_switches % 2) == p_list[i]\n        return total\n\n    switch_states = [0] * N\n    total = count_lighted_bulbs(switch_states)\n    for i in range(N):\n        for j in range(2):\n            switch_states[i] = j\n            total += (count_lighted_bulbs(switch_states) - total) * 2\n    return total\n\ndef"
    },
    {
        "number": 4076,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    R_hour = 2 * math.pi * H / 12\n    R_minute = 2 * math.pi * M / 60\n    dist = math.sqrt(A**2 + B**2 - 2 * A * B * math.cos(R_hour - R_minute))\n    return f\"{dist:.12f}\"\n\n\ndef"
    },
    {
        "number": 4076,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    # Calculate the number of rotations for the hour and minute hands\n    rotations_hour = H + M / 60\n    rotations_minute = M / 12\n\n    # Calculate the angle in radians for each hand\n    angle_hour = 2 * math.pi * rotations_hour\n    angle_minute = 2 * math.pi * rotations_minute\n\n    # Calculate the distance between the unfixed endpoints\n    distance = A * math.sin(angle_hour) - B * math.sin(angle_minute)\n\n    # Return the result rounded to 10 decimal places\n    return f\"{distance:.10f}\"\n\ninput_string = input(\"Enter the input values separated by space: \")\nprint(solution(input_string)) "
    },
    {
        "number": 4076,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n\n    # Calculate the distance between the unfixed endpoints\n    # Hours hand rotation takes 12 hours, so 1 hour takes M / 12 minutes\n    # Distance covered by H hours hand = H * (360 / 12) * A\n    # Distance covered by M minutes hand = M * (360 / 12) * B / 60\n    # Total distance = Distance covered by H hours hand + Distance covered by M minutes hand\n    distance = (H * (360 / 12) * A + M * (360 / 12) * B / 60)\n\n    return f\"{distance:.{12}f}\"\n\ninput_str = \"3 4 9 0\"\noutput_str = solution(input_str)\nprint(output_str) "
    },
    {
        "number": 4076,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    # Calculate the angles of the hour and minute hands\n    angle_h = (H * 360 / 12) % 360\n    angle_m = (M * 360 / 60) % 360\n    \n    # Calculate the distance between the hands\n    distance = A * cos(radians(angle_h)) - B * cos(radians(angle_m))\n    \n    # Round to 9 decimal places\n    distance = round(distance, 9)\n    \n    # Return the distance\n    return str(distance)\n"
    },
    {
        "number": 4076,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n\n    if A <= 0 or B <= 0:\n        return \"0.0\"\n\n    angle_hour = H * 30 + M * 6\n    angle_minute = M * 6\n\n    distance_hour = A * (angle_hour / 360)\n    distance_minute = B * (angle_minute / 360)\n\n    distance = abs(distance_hour - distance_minute)\n\n    return f\"{distance:.{10}f}\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    angle_h = H * 360 / 12\n    angle_m = M * 360 / 60\n    dist_h = A * angle_h / (360 / 12)\n    dist_m = B * angle_m / (360 / 60)\n    dist = abs(dist_h - dist_m)\n    return f\"{dist:.10f}\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n\n    # Calculate the angles of the hands at H:M\n    angle_h = (12 - H) * (360 / 12) + M * (360 / 60)\n    angle_m = M * (360 / 60)\n\n    # Calculate the length of the hands at H:M\n    length_h = B * (angle_h / 360)\n    length_m = A * (angle_m / 360)\n\n    # Calculate the distance between the hands\n    distance = length_m - length_h\n\n    # Round the result to 9 decimal places\n    result = round(distance, 9)\n\n    return str(result)"
    },
    {
        "number": 4076,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    total_minutes = H * 60 + M\n    minutes_to_rotate = (total_minutes % 60) / 60\n    distance = (minutes_to_rotate * A) + ((1 - minutes_to_rotate) * B)\n    return f\"{distance:.12f}\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n\n    # Calculate the angles of the hour and minute hands\n    angle_h = H / 12 * 360\n    angle_m = M / 60 * 360\n\n    # Calculate the distance between the unfixed endpoints of the hands\n    distance = abs(A * (angle_h - angle_m) / 360)\n\n    return f\"{distance:.12f}\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    angle_hour = (H / 12) * 360\n    angle_minute = ((M / 60) + (H / 12)) * 360\n    distance = (A * (angle_hour - angle_minute)) / 360\n    return f\"{distance:.10f}\"\n"
    },
    {
        "number": 4077,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def find_median(l: int, r: int) -> int:\n        if l % 2 == 0:\n            return sorted_arr[l//2-1]\n        else:\n            return sorted_arr[l//2]\n\n    n, m = map(int, stdin.split()[:2])\n    a = sorted(map(int, stdin.split()[2:]))\n    sorted_arr = sorted(a)\n    count = 0\n\n    for i in range(n):\n        if find_median(i, n-1) == m:\n            count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4077,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n, m = map(int, input_list[0].split())\n    a = list(map(int, input_list[1].split()))\n    \n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if i == j:\n                continue\n            if len(a[i:j+1]) % 2 == 0:\n                median = sorted(a[i:j+1])[len(a[i:j+1])//2]\n            else:\n                median = sorted(a[i:j+1])[len(a[i:j+1])//2]\n            if median == m:\n                count += 1\n    \n    return str(count)\n\ndef"
    },
    {
        "number": 4077,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.splitlines()[0].split())\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    def get_median(l, r):\n        a.sort()\n        if (r - l + 1) % 2 == 0:\n            return (a[l + (r - l) // 2 - 1] + a[l + (r - l) // 2]) / 2\n        else:\n            return a[l + (r - l) // 2]\n\n    count = 0\n    for i in range(1, n):\n        for j in range(i, n):\n            if get_median(i, j) == m:\n                count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4077,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n, m = map(int, input_list[0].split())\n    a = list(map(int, input_list[1].split()))\n    count = 0\n\n    for i in range(n):\n        for j in range(i, n):\n            if i != j:\n                left = sorted(a[i:j+1])\n                if len(left) % 2 == 0:\n                    median1 = left[len(left)//2]\n                    median2 = left[len(left)//2-1]\n                    median = (median1 + median2) // 2\n                else:\n                    median = left[len(left)//2]\n                if median == m:\n                    count += 1\n\n    return str(count)\n\n\ninput_str = \"\"\"5 4\n1 4 5 60 4\"\"\"\n\nprint(solution(input_str))  # Output: 8\n\ninput_str = \"\"\"3 1\n1 1 1\"\"\"\n\nprint(solution(input_str))  # Output: 6\n\ninput_str = \"\"\"15 2\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\"\"\"\n\nprint(solution(input_str))  # Output: 97 "
    },
    {
        "number": 4077,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if i == 0:\n                left = a[j - 1]\n            else:\n                left = a[i - 1]\n            right = a[j - 1]\n\n            if left <= right:\n                sorted_arr = sorted([left, a[i], a[i + 1], right])\n            else:\n                sorted_arr = sorted([right, a[i], a[i + 1], left])\n\n            if sorted_arr[1] == m:\n                count += 1\n\n    return str(count)"
    },
    {
        "number": 4077,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def median(sequence: List[int]) -> float:\n        n = len(sequence)\n        if n % 2 == 0:\n            return (sequence[n // 2 - 1] + sequence[n // 2]) / 2\n        else:\n            return sequence[n // 2]\n\n    input_data = stdin.split('\\n')\n    n, m = map(int, input_data[0].split())\n    sequence = list(map(int, input_data[1].split()))\n\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if median(sequence[i:j]) == m:\n                count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4077,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    \n    count = 0\n    for i in range(n):\n        left, right = i, i\n        while left > 0 and a[left-1] > a[i]:\n            left -= 1\n        while right < n-1 and a[right+1] > a[i]:\n            right += 1\n        count += (right - left + 1) // 2\n    \n    return count\n"
    },
    {
        "number": 4077,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    \n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            seq = sorted(a[i:j+1])\n            if len(seq) % 2 == 0:\n                median = (seq[len(seq)//2 - 1] + seq[len(seq)//2]) / 2\n            else:\n                median = seq[len(seq)//2]\n            if median == m:\n                count += 1\n    return count\n\n\ndef"
    },
    {
        "number": 4077,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    def find_median(l, r):\n        if (r - l) % 2 == 0:\n            return (a[l + (r - l) // 2] + a[l + (r - l) // 2 - 1]) / 2\n        else:\n            return a[l + (r - l) // 2]\n\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            if find_median(i, j) == m:\n                count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4077,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.splitlines()[0].split())\n    a = list(map(int, stdin.splitlines()[1].split()))\n    count = 0\n\n    def find_median(l, r):\n        if l % 2 == 1:\n            return sorted(a[l:r+1])[len(a[l:r+1])//2]\n        else:\n            return (sorted(a[l:r+1])[len(a[l:r+1])//2 - 1] + sorted(a[l:r+1])[len(a[l:r+1])//2]) / 2\n\n    for l in range(1, n+1):\n        for r in range(l, n+1):\n            if find_median(l, r) == m:\n                count += 1\n\n    return str(count)\n\ninput_str = '''5 4\n1 4 5 60 4\n3 1\n1 1 1\n15 2\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3'''\n\nprint(solution(input_str)) "
    },
    {
        "number": 4078,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def max_diff(arr):\n        return max(arr) - min(arr)\n\n    input = stdin.split('\\n')\n    n, m = map(int, input[0].split())\n    a = list(map(int, input[1].split()))\n    segments = []\n\n    for _ in range(m):\n        l, r = map(int, input[2 + _].split())\n        segments.append((l, r))\n\n    max_diff_val = 0\n    applied_segments = []\n\n    for i in range(m):\n        l, r = segments[i]\n        for j in range(l, r + 1):\n            a[j - 1] -= 1\n\n        if max_diff(a) > max_diff_val:\n            max_diff_val = max_diff(a)\n            applied_segments = [i + 1]\n        elif max_diff(a) == max_diff_val:\n            applied_segments.append(i + 1)\n\n        for j in range(l, r + 1):\n            a[j - 1] += 1\n\n    output = f\"{max_diff_val}\\n{len(applied_segments)}\\n\"\n    output += ' '.join(map(str, applied_segments))\n    return output\n"
    },
    {
        "number": 4078,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def create_array(n: int, a: list) -> list:\n        return [int(x) for x in a.split()]\n\n    def create_segments(m: int, segments: list) -> list:\n        result = []\n        for i in range(m):\n            l, r = segments[i].split(\";\")\n            result.append((int(l), int(r)))\n        return result\n\n    def max_diff(array: list) -> int:\n        return max(array) - min(array)\n\n    def apply_segments(array: list, segments: list) -> tuple:\n        for segment in segments:\n            l, r = segment\n            for i in range(l - 1, r):\n                array[i] -= 1\n        return max_diff(array), len(segments), segments\n\n    def main(n: int, a: list, m: int, segments: list) -> tuple:\n        array = create_array(n, a)\n        segments = create_segments(m, segments)\n        result = apply_segments(array, segments)\n        return result\n\n    n, m = map(int, stdin.split()[:2])\n    a = stdin.split(\"\\n\")[2]\n    segments = stdin.split(\"\\n\")[3:]\n    result = main(n, a, m, segments)\n    return str(result[0]) + \"\\n\" + str(result[1]) + \"\\n\" + \" \".join(map(str, result[2]))"
    },
    {
        "number": 4078,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def find_max_diff(b):\n        return max(b) - min(b)\n\n    def apply_segment(a, segment):\n        l, r = segment\n        for i in range(l, r + 1):\n            a[i] -= 1\n        return a\n\n    def update_max_diff(max_diff, b):\n        return max(max_diff, find_max_diff(b))\n\n    n, m = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:2 + n]))\n    segments = [tuple(map(int, stdin.split()[2 + n + i * 2:2 + n + i * 2 + 2])) for i in range(m)]\n\n    max_diff = 0\n    max_diff_segments = []\n\n    for segment in segments:\n        b = apply_segment(a.copy(), segment)\n        max_diff = update_max_diff(max_diff, b)\n\n        if max_diff == find_max_diff(b):\n            max_diff_segments.append(segments.index(segment) + 1)\n\n    return f\"{max_diff}\\n{len(max_diff_segments)}\\n{' '.join(map(str, max_diff_segments))}\\n\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split('\\n')\n    n, m = map(int, input[0].split())\n    a = list(map(int, input[1].split()))\n    segments = []\n\n    for i in range(2, len(input)):\n        l, r = map(int, input[i].split())\n        segments.append((l, r))\n\n    def max_diff(a: list, b: list) -> int:\n        return max(b) - min(b)\n\n    def apply_segments(a: list, segments: list) -> list:\n        for segment in segments:\n            for i in range(segment[0] - 1, segment[1]):\n                a[i] -= 1\n        return a\n\n    max_diff_val = 0\n    best_choice = []\n\n    for i in range(2 ** len(segments)):\n        choice = []\n        for j in range(len(segments)):\n            if (i & (1 << j)) != 0:\n                choice.append(j)\n\n        b = apply_segments(a.copy(), [segments[j] for j in choice])\n        diff_val = max_diff(b, a)\n\n        if diff_val > max_diff_val:\n            max_diff_val = diff_val\n            best_choice = choice\n\n    output = f\"{max_diff_val}\\n{len(best_choice)}\\n\" + \" \".join(map(str, best_choice))\n    return output\n\ninput_data = \"\"\"5 4\n2 -2 3 1 2\n1 3\n4 5\n2 5\n1 3\n\"\"\"\n\nresult = solution(input_data)\nprint(result) "
    },
    {
        "number": 4078,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split(\"\\n\")\n    n, m = map(int, input_data[0].split())\n    a = list(map(int, input_data[1].split()))\n    segments = []\n\n    for i in range(2, len(input_data)):\n        l, r = map(int, input_data[i].split())\n        segments.append((l, r))\n\n    max_diff = 0\n    result = []\n\n    for segment in segments:\n        l, r = segment\n        a[l-1:r] = [x-1 for x in a[l-1:r]]\n        new_diff = max(a) - min(a)\n        if new_diff > max_diff:\n            max_diff = new_diff\n            result = [i for i, segment in enumerate(segments) if l <= segment[1] and segment[0] <= r]\n\n    print(max_diff)\n    print(len(result))\n    print(\" \".join(map(str, result)))\n\n\nstdin = \"\"\"5 4\n2 -2 3 1 2\n1 3\n4 5\n2 5\n1 3\"\"\"\n\nsolution(stdin)"
    },
    {
        "number": 4078,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.splitlines()[0].split())\n    a = list(map(int, stdin.splitlines()[1].split()))\n    segments = [tuple(map(int, line.split())) for line in stdin.splitlines()[2:]]\n\n    def apply_segments(a: list, segments: list) -> list:\n        for segment in segments:\n            l, r = segment\n            a[l - 1:r] = [x - 1 for x in a[l - 1:r]]\n        return a\n\n    def max_diff(a: list) -> int:\n        return max(a) - min(a)\n\n    best_diff = 0\n    best_segments = []\n    for subset in itertools.combinations(segments, len(segments)):\n        a_new = apply_segments(a, subset)\n        diff = max_diff(a_new)\n        if diff > best_diff:\n            best_diff = diff\n            best_segments = subset\n\n    answer_1 = best_diff\n    answer_2 = len(best_segments)\n    answer_3 = [segment + 1 for segment in best_segments]\n\n    return f\"{answer_1}\\n{answer_2}\\n{' '.join(map(str, answer_3))}\\n\""
    },
    {
        "number": 4078,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.splitlines()\n    n, m = map(int, input_lines[0].split())\n    a = list(map(int, input_lines[1].split()))\n    segments = [tuple(map(int, input_lines[i+2].split())) for i in range(m)]\n\n    max_diff = 0\n    chosen_segments = []\n\n    for seg in segments:\n        if seg[0] > 1 and seg[1] < n:\n            temp_a = a.copy()\n            temp_a[seg[0]-1:seg[1]] = [x-1 for x in temp_a[seg[0]-1:seg[1]]]\n            temp_diff = max(temp_a) - min(temp_a)\n            if temp_diff > max_diff:\n                max_diff = temp_diff\n                chosen_segments = [seg[0], seg[1]]\n\n    result = f\"{max_diff}\\n{len(chosen_segments)}\\n\" + ' '.join(map(str, chosen_segments))\n\n    return result "
    },
    {
        "number": 4078,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def get_max_diff(array: list) -> int:\n        return max(array) - min(array)\n\n    def apply_segments(array: list, segments: list) -> list:\n        for segment in segments:\n            for i in range(segment[0], segment[1] + 1):\n                array[i] -= 1\n        return array\n\n    input_data = stdin.splitlines()\n    n, m = map(int, input_data[0].split())\n    a = list(map(int, input_data[1].split()))\n    segments = [list(map(int, line.split())) for line in input_data[2:]]\n\n    max_diff = 0\n    chosen_segments = []\n\n    for i in range(2**m):\n        selected_segments = [segments[j] for j in range(m) if i & (1 << j)]\n        new_array = apply_segments(a.copy(), selected_segments)\n        diff = get_max_diff(new_array)\n\n        if diff > max_diff:\n            max_diff = diff\n            chosen_segments = selected_segments\n\n    output = [str(max_diff), str(len(chosen_segments)), \" \".join(map(str, sorted(i + 1 for i, _ in enumerate(chosen_segments))))]\n    return \"\\n\".join(output) + \"\\n\""
    },
    {
        "number": 4078,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def find_max_diff(b):\n        return max(b) - min(b)\n\n    n, m = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:2 + n]))\n    segments = [tuple(map(int, stdin.split()[2 + n + i: 2 + n + i + 2])) for i in range(m)]\n\n    max_diff = 0\n    selected_segments = []\n\n    for segment in segments:\n        l, r = segment\n        a[l - 1:r] = [x - 1 for x in a[l - 1:r]]\n        diff = find_max_diff(a)\n\n        if diff > max_diff:\n            max_diff = diff\n            selected_segments = [i for i, s in enumerate(segments) if s == segment]\n\n    return f\"{max_diff}\\n{len(selected_segments)}\\n{' '.join(map(str, selected_segments))}\\n\""
    },
    {
        "number": 4078,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n, m = map(int, input_list[0].split())\n    a = list(map(int, input_list[1].split()))\n    segments = [list(map(int, input_list[i].split())) for i in range(2, 2 + m)]\n\n    def update_array(arr, segments):\n        for segment in segments:\n            for i in range(segment[0] - 1, segment[1]):\n                arr[i] -= 1\n        return arr\n\n    def max_diff(arr):\n        return max(arr) - min(arr)\n\n    best_arr = a\n    best_diff = max_diff(best_arr)\n    best_segments = []\n\n    for i in range(m):\n        for j in range(i + 1, m):\n            current_segments = segments[:i] + segments[j:]\n            current_arr = update_array(a, current_segments)\n            current_diff = max_diff(current_arr)\n\n            if current_diff > best_diff:\n                best_arr = current_arr\n                best_diff = current_diff\n                best_segments = current_segments\n\n    output_list = [str(best_diff)]\n    output_list.append(str(len(best_segments)))\n    output_list.append(' '.join(map(str, [seg[1] for seg in best_segments])))\n\n    return '\\n'.join(output_list) + '\\n'\n"
    },
    {
        "number": 4079,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    strings = stdin.splitlines()[1:]\n\n    for s in strings:\n        if s[0] != 'a' and s[-1] != 'z' and all(s[i] == chr(ord(s[i-1])+1) for i in range(1, len(s))):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n"
    },
    {
        "number": 4079,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def is_diverse(string: str) -> bool:\n        if len(string) == 1:\n            return True\n        if string[0] == string[1]:\n            return False\n        for i in range(len(string) - 1):\n            if ord(string[i]) + 1 == ord(string[i + 1]):\n                continue\n            elif ord(string[i]) == ord(string[i + 1]):\n                return False\n            else:\n                return False\n        return True\n\n    n = int(stdin.readline())\n    for i in range(n):\n        string = stdin.readline().strip()\n        if is_diverse(string):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n"
    },
    {
        "number": 4079,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    input_strings = stdin.split('\\n')[1:]\n    \n    for i, string in enumerate(input_strings, start=1):\n        if all(string.count(char) == 1 for char in string) and all(string[i] == chr(ord(string[i-1])+1) for i in range(1, len(string))):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\n\nstdin = '''8\nfced\nxyz\nr\ndabcef\naz\naa\nbad\nbabc'''\nsolution(stdin) "
    },
    {
        "number": 4079,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    strings = stdin.split(\"\\n\")[1:]\n    \n    for string in strings:\n        if len(set(string)) == len(string) and len(set(string[i] for i in range(len(string) - 1) if ord(string[i]) == ord(string[i+1])-1)) == len(string)-1:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n"
    },
    {
        "number": 4079,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    strings = stdin.split(\"\\n\")[1:]\n\n    for string in strings:\n        if len(set(string)) == len(string) and len(string) == len(set(string)):\n            if sorted(string) == sorted(string):\n                print(\"Yes\")\n            else:\n                print(\"No\")\n        else:\n            print(\"No\")\n"
    },
    {
        "number": 4079,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_diverse(s: str) -> bool:\n        s = sorted(set(s))\n        for i in range(len(s) - 1):\n            if ord(s[i]) + 1 != ord(s[i + 1]):\n                return False\n        return len(s) == 26\n\n    n = int(stdin.split(\"\\n\")[0])\n    result = []\n    for i in range(1, n + 1):\n        result.append(\"Yes\" if is_diverse(stdin.split(\"\\n\")[i]) else \"No\")\n    return \"\\n\".join(result)\n"
    },
    {
        "number": 4079,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def is_diverse(s: str) -> bool:\n        if len(s) != len(set(s)):\n            return False\n        last_char = None\n        for char in s:\n            if ord(char) - ord('a') != ord(last_char) - ord('a') + 1:\n                return False\n            last_char = char\n        return True\n\n    n = int(stdin.splitlines()[0])\n    lines = stdin.splitlines()[1:]\n    for line in lines:\n        if is_diverse(line):\n            print(\"Yes\")\n        else:\n            print(\"No\")"
    },
    {
        "number": 4079,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    result = []\n    \n    for line in stdin.splitlines()[1:]:\n        diverse = True\n        seen = set()\n        prev = None\n        \n        for letter in line:\n            if letter not in seen:\n                seen.add(letter)\n            else:\n                diverse = False\n                break\n            \n            if prev is not None and ord(letter) - ord(prev) != 1:\n                diverse = False\n                break\n            \n            prev = letter\n            \n        result.append(\"Yes\" if diverse else \"No\")\n    \n    return \"\\n\".join(result)"
    },
    {
        "number": 4079,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    strings = stdin.splitlines()[1:]\n    for string in strings:\n        if len(set(string)) != 7 or not is_consecutive(string):\n            print(\"No\")\n        else:\n            print(\"Yes\")\n\ndef"
    },
    {
        "number": 4079,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    strings = stdin.splitlines()[1:]\n    \n    for i in range(n):\n        s = strings[i]\n        if sorted(s) != list(set(s)):\n            print(\"No\")\n            continue\n        \n        for j in range(1, len(s)):\n            if abs(ord(s[j]) - ord(s[j-1])) > 1:\n                print(\"No\")\n                break\n        else:\n            print(\"Yes\")\n            \n    return \"Done\"\n\n\ninput_string = '''8\nfced\nxyz\nr\ndabcef\naz\naa\nbad\nbabc'''\n\noutput_string = solution(input_string)\nprint(output_string) "
    },
    {
        "number": 4080,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[1:3])\n    a = list(map(int, stdin.split()[3:]))\n    segments = [tuple(map(int, stdin.split()[3 + 2 * i: 3 + 2 * i + 2])) for i in range(m)]\n    \n    def update_array(a, segments):\n        for l, r in segments:\n            for i in range(l - 1, r):\n                a[i] -= 1\n    \n    update_array(a, segments)\n    max_diff = max(a) - min(a)\n    \n    best_segments = []\n    for i in range(m):\n        for j in range(i + 1, m):\n            for k in range(j + 1, m):\n                segment_a = set(range(segments[i][0], segments[i][1] + 1))\n                segment_b = set(range(segments[j][0], segments[j][1] + 1))\n                segment_c = set(range(segments[k][0], segments[k][1] + 1))\n                if segment_a.isdisjoint(segment_b) and segment_b.isdisjoint(segment_c) and segment_a.isdisjoint(segment_c):\n                    update_array(a, [segments[i], segments[j], segments[k]])\n                    new_max_diff = max(a) - min(a)\n                    if new_max_diff > max_diff:\n                        max_diff = new_max_diff\n                        best_segments = [i, j, k]\n                    update_array(a, [segments[i], segments[j], segments[k]])\n                    \n    output = f\"{max_diff}\\n{len(best_segments)}\\n\" + \" \".join(map(str, best_segments))\n    return output"
    },
    {
        "number": 4080,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.splitlines()\n    n, m = map(int, input[0].split())\n    a = list(map(int, input[1].split()))\n    segments = [tuple(map(int, input[i + 1].split())) for i in range(m)]\n\n    def max_diff(b):\n        return max(b) - min(b)\n\n    def apply_segments(a, segments):\n        for segment in segments:\n            for i in range(segment[0] - 1, segment[1]):\n                a[i] -= 1\n        return a\n\n    max_diff_value = 0\n    best_segments = []\n\n    for segments_subset in itertools.combinations(segments, len(segments) // 2):\n        b = apply_segments(a.copy(), segments_subset)\n        diff = max_diff(b)\n        if diff > max_diff_value:\n            max_diff_value = diff\n            best_segments = segments_subset\n\n    output = f\"{max_diff_value}\\n{len(best_segments)}\\n\"\n    output += \" \".join(map(str, (range(len(best_segments)))))\n\n    return output\n\n\ninput_data = (\n    \"5 4\\n\"\n    \"2 -2 3 1 2\\n\"\n    \"1 3\\n\"\n    \"4 5\\n\"\n    \"2 5\\n\"\n    \"1 3\"\n)\n\nprint(solution(input_data)) "
    },
    {
        "number": 4080,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def update_array(array: list, segments: list) -> list:\n        for segment in segments:\n            for i in range(segment[0], segment[1] + 1):\n                array[i] -= 1\n        return array\n\n    def max_diff(array: list) -> int:\n        return max(array) - min(array)\n\n    n, m = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:n + 2]))\n    segments = [tuple(map(int, stdin.split()[n + 2 + i:n + 4 + i])) for i in range(m)]\n\n    max_diff_value = -float('inf')\n    max_diff_segments = []\n\n    for i in range(2**m):\n        binary = format(i, f'0{m}b')\n        chosen_segments = [segments[j] for j in range(m) if binary[j] == '1']\n        updated_array = update_array(a.copy(), chosen_segments)\n        current_diff = max_diff(updated_array)\n\n        if current_diff > max_diff_value:\n            max_diff_value = current_diff\n            max_diff_segments = chosen_segments\n\n    print(max_diff_value)\n    print(len(max_diff_segments))\n    print(*sorted(i + 1 for i, segment in enumerate(segments) if segment in max_diff_segments), sep=' ')"
    },
    {
        "number": 4080,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def max_diff(a):\n        return max(a) - min(a)\n\n    def apply_segments(a, segments):\n        for segment in segments:\n            for i in range(segment[0] - 1, segment[1]):\n                a[i] -= 1\n        return a\n\n    input_lines = stdin.splitlines()\n    n, m = map(int, input_lines[0].split())\n    a = list(map(int, input_lines[1].split()))\n    segments = [tuple(map(int, input_lines[i + 2].split())) for i in range(m)]\n\n    best_diff = 0\n    best_segments = []\n\n    for subset in itertools.combinations(segments, m):\n        modified_a = apply_segments(a.copy(), subset)\n        diff = max_diff(modified_a)\n\n        if diff > best_diff:\n            best_diff = diff\n            best_segments = subset\n\n    print(best_diff)\n    print(len(best_segments))\n    print(\" \".join(map(str, sorted(set(range(1, m + 1)))))\n"
    },
    {
        "number": 4080,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def max_diff(array: list) -> int:\n        return max(array) - min(array)\n\n    def apply_segments(array: list, segments: list) -> list:\n        for segment in segments:\n            for i in range(segment[0], segment[1] + 1):\n                array[i] -= 1\n        return array\n\n    def calculate_score(array: list, segments: list) -> int:\n        modified_array = apply_segments(array.copy(), segments)\n        return max_diff(modified_array)\n\n    n, m = map(int, input().split())\n    array = list(map(int, input().split()))\n    segments = [list(map(int, input().split())) for _ in range(m)]\n\n    max_score = 0\n    best_segments = []\n\n    for i in range(2 ** m):\n        selected_segments = [segments[j] for j in range(m) if (i & (1 << j)) > 0]\n        score = calculate_score(array, selected_segments)\n\n        if score > max_score:\n            max_score = score\n            best_segments = selected_segments\n\n    output = f\"{max_score}\\n{len(best_segments)}\\n\"\n    output += \" \".join(map(str, (i + 1 for i, _ in enumerate(best_segments))))\n    return output\n"
    },
    {
        "number": 4080,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    n, m = map(int, input_list[0].split())\n    a = list(map(int, input_list[1].split()))\n    segments = []\n    for i in range(2, len(input_list)):\n        l, r = map(int, input_list[i].split())\n        segments.append((l, r))\n\n    max_diff = 0\n    max_diff_segments = []\n\n    for segment in segments:\n        l, r = segment\n        b = a[:]\n        b[l-1:r] = [x-1 for x in b[l-1:r]]\n        new_diff = max(b) - min(b)\n        if new_diff > max_diff:\n            max_diff = new_diff\n            max_diff_segments = [segment]\n        elif new_diff == max_diff:\n            max_diff_segments.append(segment)\n\n    output = f\"{max_diff}\\n{1}\\n{1} {max_diff_segments[0][0]} {max_diff_segments[0][1]}\"\n    return output\n\ninput_list = '''5 4\n2 -2 3 1 2\n1 3\n4 5\n2 5\n1 3\n'''\n\noutput = solution(input_list)\nprint(output)"
    },
    {
        "number": 4080,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def read_int():\n        return int(read_str().strip())\n\n    def read_str():\n        return stdin.readline()\n\n    n, m = read_int(), read_int()\n    a = [read_int() for _ in range(n)]\n    segments = [(read_int(), read_int()) for _ in range(m)]\n\n    def find_max_diff(arr):\n        return max(arr) - min(arr)\n\n    def apply_segments(arr, segments):\n        for l, r in segments:\n            for i in range(l - 1, r):\n                arr[i] -= 1\n        return arr\n\n    def count_diff(arr):\n        return len(set(arr))\n\n    max_diff = 0\n    max_q = 0\n    max_segments = []\n\n    for i in range(2 ** m):\n        segments_to_apply = [j for j in range(m) if (i & (1 << j)) > 0]\n        arr = apply_segments(a.copy(), [segments[j] for j in segments_to_apply])\n        diff = find_max_diff(arr)\n        q = len(segments_to_apply)\n\n        if diff > max_diff or (diff == max_diff and q < max_q) or (diff == max_diff and q == max_q and count_diff(arr) < count_diff(max_segments)):\n            max_diff = diff\n            max_q = q\n            max_segments = segments_to_apply\n\n    output = f\"{max_diff}\\n{max_q}\\n\"\n    output += \" \".join(str(i + 1) for i in max_segments)\n    return output\n"
    },
    {
        "number": 4080,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin.split('\\n')\n    n, m = map(int, input_str[0].split())\n    a = list(map(int, input_str[1].split()))\n    segments = [list(map(int, input_str[i+2].split())) for i in range(m)]\n\n    def get_max_diff(a, l, r):\n        return max(a) - min(a)\n\n    def apply_segments(a, segments):\n        for segment in segments:\n            l, r = segment\n            a[l-1:r] = [x-1 for x in a[l-1:r]]\n        return a\n\n    def get_max_diff_with_segments(a, segments):\n        b = apply_segments(a.copy(), segments)\n        return max(b) - min(b)\n\n    max_diff = 0\n    best_segments = []\n\n    for i in range(m):\n        for j in range(m):\n            if i != j:\n                segments_to_check = [segments[i], segments[j]]\n                diff = get_max_diff_with_segments(a, segments_to_check)\n                if diff > max_diff:\n                    max_diff = diff\n                    best_segments = segments_to_check\n\n    result = [max_diff, len(best_segments), *[segments.index(segment) + 1 for segment in best_segments]]\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 4080,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:n+2]))\n    segments = [tuple(map(int, stdin.split()[i].split(','))) for i in range(n+2, n+2+m)]\n\n    max_diff = 0\n    for comb in itertools.combinations(segments, 3):\n        for i in range(n):\n            a[i] += sum(a[j] for segment in comb for j in range(segment[0]-1, segment[1]))\n        diff = max(a) - min(a)\n        if diff > max_diff:\n            max_diff = diff\n\n    return str(max_diff) + '\\n' + str(m) + '\\n' + ' '.join(str(i+1) for i, _ in enumerate(segments)) + '\\n'\n"
    },
    {
        "number": 4080,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    n, m = map(int, input_data[0].split())\n    a = list(map(int, input_data[1].split()))\n    segments = []\n    for i in range(2, 2 + m):\n        l, r = map(int, input_data[i].split())\n        segments.append((l, r))\n\n    max_diff = float('-inf')\n    best_choice = []\n\n    for choice in itertools.combinations(segments, len(segments)):\n        diff = 0\n        for l, r in choice:\n            a[l - 1:r] = [x - 1 for x in a[l - 1:r]]\n            diff += max(a[l - 1:r]) - min(a[l - 1:r])\n\n        if diff > max_diff:\n            max_diff = diff\n            best_choice = choice\n\n    result = f\"{max_diff}\\n{len(best_choice)}\\n\" + ' '.join(str(x[0] + 1) for x in best_choice)\n    return result "
    },
    {
        "number": 4081,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    left = [0] * n\n    right = [0] * n\n\n    for i in range(n):\n        left[i] = i\n        right[i] = i\n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] > a[j]:\n                left[i] = max(left[i], left[j])\n            if a[i] < a[j]:\n                right[i] = min(right[i], right[j])\n\n    result = 0\n    for i in range(n):\n        result = max(result, left[i] - i + 1, i - right[i])\n\n    move = ['L'] * result\n    for i in range(n):\n        if left[i] - i > 0:\n            move[left[i] - i - 1] = 'R'\n\n    return result, ''.join(move)\n\n\ninput_data = \"\"\"5\n2 1 5 4 3\n7\n1 3 5 6 7 4 2\n3\n1 2 3\n4\n1 2 4 3\"\"\"\n\nresult = solution(input_data)\nprint(result)\n"
    },
    {
        "number": 4081,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    left = []\n    right = []\n    result = []\n\n    for i in range(n):\n        left.append((a[i], 'L'))\n        right.append((a[i], 'R'))\n\n    for i in range(n - 1):\n        if left[-1][0] < right[-1][0]:\n            left.append(right.pop()[0])\n        else:\n            right.append(left.pop()[0])\n\n    for i in range(n - 1):\n        result.append(left.pop()[1])\n        result.append(right.pop()[1])\n\n    result.append(left.pop()[1])\n    result.append(right.pop()[1])\n\n    return len(result), ''.join(result)\n"
    },
    {
        "number": 4081,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()[1:]))\n    \n    left = 1\n    right = n\n    left_pos = 0\n    right_pos = n - 1\n    result = []\n    \n    while left <= right:\n        if a[left_pos] < a[right_pos]:\n            result.append('L')\n            left += 1\n            left_pos += 1\n        else:\n            result.append('R')\n            right -= 1\n            right_pos -= 1\n            \n    return len(result), ''.join(result)\n\n\ninput_data = [\n    \"5\\n2 1 5 4 3\",\n    \"7\\n1 3 5 6 7 4 2\",\n    \"3\\n1 2 3\",\n    \"4\\n1 2 4 3\"\n]\n\nfor data in input_data:\n    k, s = solution(data)\n    print(\"Input:\", data)\n    print(\"Output:\")\n    print(k)\n    print(s)\n    print() "
    },
    {
        "number": 4081,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n\n    k = 0\n    moves = []\n\n    while len(a) > 1:\n        if k < len(a):\n            leftmost = min(a)\n            a.remove(leftmost)\n            moves.append(\"L\")\n            k += 1\n        else:\n            rightmost = max(a)\n            a.remove(rightmost)\n            moves.append(\"R\")\n            k += 1\n\n    return k, \"\".join(moves)\n\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    inc_seq = []\n\n    while a:\n        inc_seq.append(min(a))\n        a.remove(min(a))\n\n    k = len(inc_seq)\n    s = ''.join('L' if i % 2 == 0 else 'R' for i in range(k))\n\n    return k, s\n"
    },
    {
        "number": 4081,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n    \n    longest_increasing_sequence = 1\n    current_increasing_sequence = 1\n    move = \"\"\n    leftmost = a.index(min(a))\n    \n    for i in range(1, n):\n        if a[i] > a[i-1]:\n            current_increasing_sequence += 1\n            if current_increasing_sequence > longest_increasing_sequence:\n                longest_increasing_sequence = current_increasing_sequence\n                move = \"L\" * (longest_increasing_sequence - 1) + \"R\"\n        else:\n            current_increasing_sequence = 1\n        \n        if leftmost != i:\n            current_increasing_sequence += 1\n            if current_increasing_sequence > longest_increasing_sequence:\n                longest_increasing_sequence = current_increasing_sequence\n                move = \"L\" * (longest_increasing_sequence - 1) + \"R\"\n    \n    return longest_increasing_sequence, move"
    },
    {
        "number": 4081,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    # The length of the longest strictly increasing sequence\n    k = 0\n\n    # A string of length k where 'L' means left and 'R' means right\n    s = \"\"\n\n    for i in range(n):\n        # Try removing the leftmost element\n        left_k, left_s = solution_helper(a[i:])\n        left_k += i\n\n        # Try removing the rightmost element\n        right_k, right_s = solution_helper(a[:n - i])\n        right_k += i\n\n        # Update the result if necessary\n        if left_k > k:\n            k = left_k\n            s = left_s\n        if right_k > k:\n            k = right_k\n            s = right_s\n\n    return k, s\n\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    \n    dp = [False] * (n + 1)\n    dp[0] = True\n    for x in a:\n        for i in range(1, n + 1):\n            if not dp[i]:\n                dp[i] = dp[i - 1] or (i == x)\n    \n    k = dp.index(True)\n    s = ['L'] * k\n    for i in range(n - 1, n - k, -1):\n        s[i - n] = 'R'\n    return str(k) + '\\n' + ''.join(s)\n"
    },
    {
        "number": 4081,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    moves = 0\n    sequence = ''\n    while len(a) > 1:\n        moves += 1\n        leftmost = a[0]\n        rightmost = a[-1]\n        if leftmost < rightmost:\n            index = a.index(leftmost)\n            sequence += 'L'\n            a.pop(index)\n        else:\n            sequence += 'R'\n            a.pop(-1)\n    sequence += 'L'\n    moves += 1\n    return f\"{moves}\\n{sequence}\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def get_leftmost(sequence: List[int]) -> int:\n        return sequence[0]\n\n    def get_rightmost(sequence: List[int]) -> int:\n        return sequence[-1]\n\n    n = int(stdin.splitlines()[0])\n    a = [int(x) for x in stdin.splitlines()[1].split()]\n\n    leftmost_sequence = sorted(a)\n    rightmost_sequence = sorted(a, reverse=True)\n\n    leftmost_len = len(leftmost_sequence)\n    rightmost_len = len(rightmost_sequence)\n\n    max_len = max(leftmost_len, rightmost_len)\n\n    leftmost_s = ''.join(['L' if get_leftmost(leftmost_sequence) == i else 'R' for i in range(1, n + 1)])\n    rightmost_s = ''.join(['L' if get_rightmost(rightmost_sequence) == i else 'R' for i in range(1, n + 1)])\n\n    if max_len == leftmost_len:\n        return max_len, leftmost_s\n    else:\n        return max_len, rightmost_s\n\nstdin = \"\"\"5\n2 1 5 4 3\"\"\"\n\nprint(solution(stdin))\n\nstdin = \"\"\"7\n1 3 5 6 7 4 2\"\"\"\n\nprint(solution(stdin))\n\nstdin = \"\"\"3\n1 2 3\"\"\"\n\nprint(solution(stdin))\n\nstdin = \"\"\"4\n1 2 4 3\"\"\"\n\nprint(solution(stdin))\n\nstdin = \"\"\"5\n2 1 5 4 3\"\"\"\n\nprint(solution(stdin))\n\nstdin = \"\"\"7\n1 3 5 6 7 4 2\"\"\"\n\nprint(solution(stdin))\n\nstdin = \"\"\"3\n1 2 3\"\"\"\n\nprint(solution(stdin))\n\nstdin = \"\"\"4\n1 2 4 3\"\"\"\n\nprint(solution(stdin))\n\nstdin = \"\"\"5\n2 1 5 4 3\"\"\"\n\nprint(solution(stdin))\n\nstdin = \"\"\"7\n1 3 5 6 7 4 2\"\"\"\n\nprint(solution(stdin))\n\nstdin = \"\"\"3\n1 2 3\"\"\"\n\nprint(solution(stdin))\n\nstdin = \"\"\"4\n1 2 4 3\"\"\"\n\nprint(solution(stdin))\n\nstdin = \"\"\"5\n2 1 5 4 3\"\"\"\n\nprint(solution(stdin))\n\nstdin = \"\"\"7\n1 3 5 6 7 4 2\"\"\"\n\nprint(solution(stdin))\n\nstdin = \"\"\"3\n1 2 3\"\"\"\n\nprint(solution(stdin))\n\nstdin = \"\"\"4\n1 2 4 3\"\"\"\n\nprint(solution(stdin))\n\nstdin = \"\"\"5\n2 1 5 4 3\"\"\"\n\nprint(solution(stdin))\n\nstdin = \"\"\"7\n1 3 5 6 7 4 2\"\"\"\n\nprint(solution(stdin))\n\nstdin = \"\"\"3\n1 2 3\"\"\"\n\nprint(solution(stdin))\n\nstdin = \"\"\"4\n1 2 4 3\"\"\"\n\nprint(solution(stdin))\n\nstdin = \"\"\"5\n2 1 5 4 3\"\"\"\n\nprint(solution(stdin))\n\nstdin = \"\"\"7\n1 3 5 6 7 4 2\"\"\"\n\nprint(solution(stdin))\n\nstdin = \"\"\"3\n1 2 3\"\"\"\n\nprint(solution(stdin))\n\nstdin = \"\"\"4\n1 2 4 3\"\"\"\n\nprint(solution(stdin))\n\nstdin = \"\"\"5\n2 1 5 4 3\"\"\"\n\nprint(solution(stdin))\n\nstdin = \"\"\"7\n1 3 5 6 7 4 2"
    },
    {
        "number": 4082,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    \n    if len(a) <= 1:\n        return str(len(a))\n    \n    if n == 2:\n        if a[0] < a[1]:\n            return str(2)\n        else:\n            return str(1)\n    \n    max_length = 1\n    current_length = 1\n    \n    for i in range(1, n):\n        if a[i] > a[i-1]:\n            current_length += 1\n            max_length = max(max_length, current_length)\n        else:\n            current_length = 1\n    \n    return str(max_length)\n\n\ndef"
    },
    {
        "number": 4082,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def longest_increasing_subsequence(nums: List[int]) -> int:\n        dp = [1] * len(nums)\n        for i in range(1, len(nums)):\n            for j in range(i):\n                if nums[i] > nums[j]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return max(dp)\n\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    max_length = longest_increasing_subsequence(a)\n    if max_length == len(a):\n        a.pop()\n        max_length = longest_increasing_subsequence(a)\n    return str(max_length)\n"
    },
    {
        "number": 4082,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    max_length = 1\n    current_length = 1\n\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            current_length += 1\n            max_length = max(max_length, current_length)\n        else:\n            current_length = 1\n\n    return str(max_length)\n"
    },
    {
        "number": 4082,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    a.sort()\n    max_len = 1\n    for i in range(1, len(a)):\n        if a[i] > a[i - 1]:\n            max_len += 1\n    return max_len\n"
    },
    {
        "number": 4082,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    max_len = 1\n    for i in range(1, n):\n        if a[i] > a[i-1]:\n            max_len += 1\n        else:\n            break\n\n    if max_len == n:\n        return n - 1\n    return max_len"
    },
    {
        "number": 4082,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    def max_increasing_subarray(b):\n        inc = 1\n        max_len = 1\n        for i in range(1, len(b)):\n            if b[i] > b[i - 1]:\n                inc += 1\n                max_len = max(max_len, inc)\n            else:\n                inc = 1\n        return max_len\n\n    if n > 2 and a[n - 1] <= a[n - 2]:\n        a = a[:n - 1]\n        n -= 1\n\n    return str(max_increasing_subarray(a))\n\n\ninput_stdin = \"\"\"5\n1 2 5 3 4\n\"\"\"\nprint(solution(input_stdin))  # Output: 4\n\ninput_stdin = \"\"\"2\n1 2\n\"\"\"\nprint(solution(input_stdin))  # Output: 2\n\ninput_stdin = \"\"\"7\n6 5 4 3 2 4 3\n\"\"\"\nprint(solution(input_stdin))  # Output: 2 "
    },
    {
        "number": 4082,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    arr = list(map(int, stdin.split('\\n')[1].split()))\n    \n    if n == 2:\n        return str(n)\n    else:\n        max_length = 1\n        max_val = arr[0]\n        \n        for i in range(1, n):\n            if arr[i] > max_val:\n                max_val = arr[i]\n                max_length += 1\n            else:\n                max_val = arr[i]\n                \n        return str(max_length)\n\n\ninput_data = \"\"\"5\n1 2 5 3 4\n7\n6 5 4 3 2 4 3\"\"\"\n\n\nprint(solution(input_data)) "
    },
    {
        "number": 4082,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    n = int(input_list[0])\n    a = [int(x) for x in input_list[1:]]\n\n    max_length = 1\n    current_length = 1\n\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            current_length += 1\n            max_length = max(max_length, current_length)\n        else:\n            current_length = 1\n\n    if max_length < n - 1:\n        a.remove(max(a))\n        max_length += 1\n\n    return str(max_length)"
    },
    {
        "number": 4082,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    \n    max_len = 0\n    for i in range(n - 1):\n        if a[i] < a[i + 1]:\n            max_len = max(max_len, i + 1)\n    return max_len"
    },
    {
        "number": 4082,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin.split('\\n')\n    n = int(input_str[0])\n    a = list(map(int, input_str[1].split()))\n\n    max_length = 1\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            max_length += 1\n        else:\n            max_length = 1\n        if max_length > n - i:\n            break\n\n    return str(max_length)\n"
    },
    {
        "number": 4083,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def min_ops_to_k_equal_numbers(a: List[int], k: int) -> int:\n        count = Counter(a)\n        if len(count) < k:\n            return -1\n        min_count = min(count.values())\n        return max(0, min_count - 1)\n\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    result = min_ops_to_k_equal_numbers(a, k)\n    return str(result)\n"
    },
    {
        "number": 4083,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def count_divisible_by_2(nums):\n        count = 0\n        for num in nums:\n            if num % 2 == 0:\n                count += 1\n        return count\n\n    n, k = map(int, stdin.split()[:2])\n    nums = list(map(int, stdin.split()[2:]))\n\n    if count_divisible_by_2(nums) >= k:\n        return 0\n\n    min_ops = float('inf')\n    for i in range(n):\n        if nums[i] % 2 == 0:\n            continue\n        nums[i] //= 2\n        if count_divisible_by_2(nums) >= k:\n            min_ops = min(min_ops, i + 1)\n            break\n\n    return min_ops if min_ops != float('inf') else -1\n"
    },
    {
        "number": 4083,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[1:])\n    arr = list(map(int, stdin.split()[3:]))\n\n    count = 0\n    for i in range(n):\n        if arr[i] % 2 == 1:\n            arr[i] //= 2\n            count += 1\n\n    while k > 0:\n        max_val = max(arr)\n        if max_val == 0:\n            break\n        count += arr.count(max_val) // 2\n        arr = [x // 2 if x >= max_val else x for x in arr]\n        k -= arr.count(max_val // 2)\n\n    return count"
    },
    {
        "number": 4083,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    count = 0\n    for i in range(n):\n        while a[i] % 2 == 0:\n            count += 1\n            a[i] //= 2\n\n    return count\n\n\ndef"
    },
    {
        "number": 4083,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    from math import floor\n\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    # Count the number of occurrences of each element in the array\n    counts = [0] * (2 * max(a) + 1)\n    for num in a:\n        counts[num] += 1\n\n    # Find the first element with k occurrences\n    for i in range(len(counts)):\n        if counts[i] >= k:\n            min_operations = 0\n            break\n        else:\n            min_operations = 1\n\n        # Check if there is an element with k occurrences that can be obtained in one operation\n        for j in range(i + 1, len(counts)):\n            if counts[j] >= k:\n                min_operations = 1\n                break\n            elif counts[i] + counts[j] >= k:\n                min_operations = 2\n                break\n\n    return str(min_operations)\n"
    },
    {
        "number": 4083,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    count = 0\n    for i in range(n):\n        while a[i] % 2 == 0:\n            a[i] //= 2\n            count += 1\n\n    return count\n\ndef"
    },
    {
        "number": 4083,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def count_zeros(arr):\n        count = 0\n        for num in arr:\n            if num == 0:\n                count += 1\n        return count\n\n    def min_operations(arr, k):\n        operations = 0\n        max_element = max(arr)\n        for i in range(len(arr)):\n            if arr[i] < k:\n                arr[i] += max_element - arr[i]\n                operations += 1\n        return operations\n\n    n, k = map(int, stdin.splitlines()[0].split())\n    arr = list(map(int, stdin.splitlines()[1].split()))\n\n    if k == 1:\n        return str(count_zeros(arr))\n    else:\n        return str(min_operations(arr, k))\n"
    },
    {
        "number": 4083,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.splitlines()[0].split())\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    count = 0\n    for i in range(n):\n        if a[i] == 0:\n            continue\n        while a[i] % 2 == 0 and a[i] != 0:\n            a[i] //= 2\n            count += 1\n        if a[i] % 2 == 1:\n            a[i] -= 1\n            count += 1\n\n    count_dict = {}\n    for i in a:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n\n    if len(count_dict) >= k:\n        return str(count)\n    else:\n        return \"Impossible\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    operations = [0] * n\n\n    def count_divisible_by_2(index: int) -> int:\n        count = 0\n        for i in range(n):\n            if a[i] % 2 == 0:\n                count += 1\n        return count\n\n    def update_operations(index: int) -> None:\n        count = count_divisible_by_2(index)\n        operations[index] = count\n\n    update_operations(0)\n\n    for i in range(1, n):\n        update_operations(i)\n        if operations[i] >= k:\n            break\n        else:\n            operations[i] += operations[i - 1]\n\n    return operations[i]\n\n\ndef"
    },
    {
        "number": 4083,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.splitlines()[0].split())\n    a = list(map(int, stdin.splitlines()[1].split()))\n    \n    if k > n:\n        return 0\n    \n    count = [0] * (2*10**5 + 1)\n    for num in a:\n        count[num] += 1\n    \n    min_ops = float('inf')\n    for i in range(n, 0, -1):\n        if count[i] >= k:\n            min_ops = 0\n            break\n        \n        if i % 2 == 0 and count[i] >= k:\n            min_ops = 0\n            break\n        \n        if i % 2 == 1:\n            count[i] += count[i//2]\n            count[i//2] = 0\n            min_ops += 1\n            \n    return min_ops"
    },
    {
        "number": 4084,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    blue_balls = (N + A - 1) // A\n    return blue_balls\n\ndef"
    },
    {
        "number": 4084,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    count = 0\n    for _ in range(10**100):\n        count += A\n        A, B = B, A\n    return count\n\ninput_str = input(\"Enter the input values: \")\nresult = solution(input_str)\nprint(f\"The number of blue balls that will be there among the first {N} balls in the row of balls is: {result}\") "
    },
    {
        "number": 4084,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    total_balls = A + B\n    blue_balls = (N + total_balls - 1) // total_balls\n    return blue_balls\n\ndef"
    },
    {
        "number": 4084,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    total_balls = A + B\n    blue_balls = (N + total_balls - 1) // total_balls * A\n    return blue_balls"
    },
    {
        "number": 4084,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    total_balls = A + B\n    blue_balls = (B * (B + 1)) // 2\n\n    if total_balls <= N:\n        return blue_balls\n    else:\n        return blue_balls + (N * (N + 1) // 2)\n\n\ndef"
    },
    {
        "number": 4084,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    if A + B == 0:\n        return 0\n    b = (B * (N + A + B - 1)) // (A + B)\n    return min(b, N)\n"
    },
    {
        "number": 4084,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    return (N * (A + B)) // (B + 1)\n\nstdin = \"8 3 4\"\nresult = solution(stdin)\nprint(result) "
    },
    {
        "number": 4084,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n\n    if A + B > 10**18:\n        return \"Error: Sum of A and B cannot exceed 10^18\"\n\n    row = [\"b\"] * A + [\"r\"] * B\n    blue_balls = sum(1 for i in range(N) if row[i] == \"b\")\n\n    return str(blue_balls)"
    },
    {
        "number": 4084,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n\n    blue_balls = 0\n    total_balls = 0\n    for _ in range(10**100):\n        blue_balls += A\n        total_balls += A\n        blue_balls += B\n        total_balls += B\n\n    return blue_balls if total_balls >= N else \"0\"\n"
    },
    {
        "number": 4084,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    total_balls = N + A + B\n    blue_balls = min(N, total_balls // 2)\n    return blue_balls\n"
    },
    {
        "number": 4085,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def find_min_x(n, divisors):\n        for i in range(n):\n            for j in range(i+1, n):\n                if divisors[i] * divisors[j] == n:\n                    return max(divisors[i], divisors[j])\n        return -1\n\n    t = int(input())\n    output = []\n    for _ in range(t):\n        n = int(input())\n        divisors = list(map(int, input().split()))\n        x = find_min_x(n, divisors)\n        if x == -1:\n            output.append(-1)\n        else:\n            output.append(x)\n\n    return \"\\n\".join(map(str, output))\n"
    },
    {
        "number": 4085,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    result = []\n    for _ in range(t):\n        n = int(input())\n        divisors = list(map(int, input().split()))\n        if n == 1:\n            result.append(\"-1\")\n            continue\n        divisors.sort()\n        min_divisor = divisors[0]\n        max_divisor = divisors[-1]\n        if min_divisor == 2 and max_divisor == divisors[-2]:\n            result.append(divisors[-2])\n        else:\n            result.append(\"-1\")\n    return \"\\n\".join(map(str, result))\n"
    },
    {
        "number": 4085,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    t = int(stdin)\n    output = []\n    for i in range(t):\n        n = int(stdin)\n        divisors = list(map(int, stdin.split()))\n        divisors.sort()\n\n        x = divisors[0]\n        if x > 2:\n            x -= 1\n        for d in divisors[1:]:\n            if d > x:\n                x = d\n            else:\n                x += (d - x) // gcd(d, x) * gcd(d, x)\n\n        if x >= divisors[-1]:\n            output.append(divisors[-1])\n        else:\n            output.append(x)\n\n    return \"\\n\".join(map(str, output))\n\n\ninput_string = \"\"\"2\n8\n8 2 12 6 4 24 16 3\n1\n2\n\"\"\"\n\nprint(solution(input_string)) "
    },
    {
        "number": 4085,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def is_almost_divisor_list(x, divisors):\n        divisor_set = set(divisors)\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                if (i in divisor_set and x // i in divisor_set) or (x // i in divisor_set and x // (x // i) in divisor_set):\n                    return False\n        return True\n\n    t = int(stdin.split(\"\\n\")[0])\n    output = []\n    for i in range(1, t + 1):\n        n = int(stdin.split(\"\\n\")[2 * i - 1])\n        divisors = [int(d) for d in stdin.split(\"\\n\")[2 * i].split()]\n        if n == 1 or n == len(divisors):\n            output.append(-1)\n        else:\n            x = 1\n            while not is_almost_divisor_list(x, divisors):\n                x += 1\n            output.append(x)\n    return \"\\n\".join(map(str, output))\n"
    },
    {
        "number": 4085,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    t = int(stdin[0])\n    result = []\n    for i in range(1, t * 2 + 1, 2):\n        n = int(stdin[i])\n        divisors = list(map(int, stdin[i + 1].split()))\n        divisors.sort()\n\n        if divisors[-1] <= 2:\n            result.append(-1)\n            continue\n\n        x = divisors[0]\n        for d in divisors:\n            if d > x:\n                x = d\n            else:\n                x += d\n\n            if x % gcd(x, d) != 0:\n                result.append(-1)\n                break\n        else:\n            result.append(x)\n\n    return '\\n'.join(map(str, result))\n"
    },
    {
        "number": 4085,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    output = []\n    for _ in range(t):\n        n = int(input())\n        divisors = set(map(int, input().split()))\n        if n == 1:\n            output.append(-1)\n            continue\n        x = 1\n        for d in divisors:\n            if d % 2 == 0:\n                x *= d\n        if len(divisors) == 2:\n            output.append(x)\n        else:\n            output.append(-1)\n    return '\\n'.join(map(str, output))\n"
    },
    {
        "number": 4085,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def find_min_x(divisors):\n        def find_min_x_helper(x, divisors):\n            if not divisors:\n                return x\n            else:\n                divisor = divisors.pop()\n                return min(find_min_x_helper(x + divisor, divisors),\n                           find_min_x_helper(x - divisor, divisors))\n\n        return find_min_x_helper(0, list(divisors))\n\n    def is_almost_divisors(divisors, guessed_number):\n        return all(guessed_number % d == 0 for d in divisors)\n\n    queries = stdin.split('\\n')\n    queries = [q.strip() for q in queries if q.strip()]\n    result = []\n\n    for i in range(1, len(queries), 2):\n        n = int(queries[i])\n        divisors = [int(d) for d in queries[i + 1].split()]\n\n        if not is_almost_divisors(divisors, guessed_number=sum(divisors)):\n            result.append(-1)\n        else:\n            min_x = find_min_x(divisors)\n            result.append(min_x)\n\n    return '\\n'.join(str(x) for x in result)\n"
    },
    {
        "number": 4085,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def find_minimum(divisors):\n        for i in range(2, int(divisors[0]**0.5)+1):\n            if divisors[0] % i == 0 and i in divisors:\n                return i\n        return -1\n\n    t = int(stdin[0])\n    output = []\n    for i in range(1, len(stdin), 2):\n        n = int(stdin[i])\n        divisors = list(map(int, stdin[i+1].split()))\n        if n == 1:\n            output.append(-1)\n        else:\n            minimum = find_minimum(divisors)\n            if minimum == -1:\n                output.append(-1)\n            else:\n                output.append(minimum)\n\n    return '\\n'.join(map(str, output))"
    },
    {
        "number": 4085,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_almost_all_divisors(x: int, divisors: list) -> bool:\n        for i in range(2, int(x**0.5)+1):\n            if x % i == 0:\n                if i in divisors and (x//i) in divisors:\n                    return False\n        return True\n\n    def find_min_x(divisors: list) -> int:\n        x = 1\n        while not is_almost_all_divisors(x, divisors):\n            x += 1\n        return x\n\n    queries = stdin.split('\\n')\n    result = []\n    for i in range(1, len(queries), 2):\n        n = int(queries[i])\n        divisors = list(map(int, queries[i+1].split()))\n        if is_almost_all_divisors(find_min_x(divisors), divisors):\n            result.append(find_min_x(divisors))\n        else:\n            result.append(-1)\n\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 4085,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin[0].strip())\n    result = []\n\n    for i in range(1, t+1):\n        n = int(stdin[i].strip().split()[0])\n        divisors = list(map(int, stdin[i+1].strip().split()))\n\n        # Check if the given list of divisors is the list of almost all divisors\n        if len(divisors) != n:\n            result.append(-1)\n            continue\n\n        # Find the minimum possible value of x\n        x = 1\n        for d in divisors:\n            x = x * d // math.gcd(x, d)\n        result.append(x)\n\n    return \"\\n\".join(map(str, result))\n"
    },
    {
        "number": 4086,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()[1:]))\n    a.sort()\n    result = []\n    prev = None\n    count = 0\n    \n    for i in range(n):\n        if a[i] != prev:\n            result.append(a[i])\n            count += 1\n        prev = a[i]\n    \n    return f\"{count}\\n{' '.join(map(str, result))}\" "
    },
    {
        "number": 4086,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = [int(x) for x in stdin.splitlines()[1].split()]\n    a_set = set(a)\n    x = len(a_set)\n    result = []\n    for item in a_set:\n        result.append(item)\n    result_str = \" \".join(str(x) for x in result)\n    return f\"{x}\\n{result_str}\\n\" "
    },
    {
        "number": 4086,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    unique_a = set()\n    result = []\n\n    for i in range(n - 1, -1, -1):\n        if a[i] not in unique_a:\n            unique_a.add(a[i])\n            result.append(a[i])\n\n    x = len(result)\n    result_str = ' '.join(map(str, result))\n    return f\"{x}\\n{result_str}\"\n\n\ninput_stdin = \"\"\"6\n1 5 5 1 6 1\"\"\"\n\noutput_stdout = \"\"\"3\n5 6 1\"\"\"\n\nprint(solution(input_stdin)) "
    },
    {
        "number": 4086,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    a.sort()\n    unique_elements = []\n    \n    for i in range(n):\n        if i == 0 or a[i] != a[i-1]:\n            unique_elements.append(a[i])\n    \n    x = len(unique_elements)\n    output = \" \".join(map(str, unique_elements))\n    \n    return f\"{x}\\n{output}\"\n\ninput_str = \"\"\"6\n1 5 5 1 6 1\n5\n2 4 2 4 4\n5\n6 6 6 6 6\"\"\"\n\noutput_str = solution(input_str)\nprint(output_str) "
    },
    {
        "number": 4086,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n = int(input_list[0])\n    a = list(map(int, input_list[1].split()))\n\n    a.sort(reverse=True)\n    unique_elements = []\n\n    for i in range(n):\n        if a[i] not in unique_elements:\n            unique_elements.append(a[i])\n\n    unique_elements.sort(reverse=True)\n    x = len(unique_elements)\n\n    result = ' '.join(map(str, unique_elements))\n\n    return f'{x}\\n{result}'"
    },
    {
        "number": 4086,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    \n    unique_elements = set()\n    result = []\n    \n    for i in range(n):\n        if a[i] not in unique_elements:\n            unique_elements.add(a[i])\n            result.append(a[i])\n    \n    x = len(result)\n    print(x)\n    print(*result)\n    \n    return x, result"
    },
    {
        "number": 4086,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n    unique_elements = []\n    for i in range(n):\n        if a[i] not in unique_elements:\n            unique_elements.append(a[i])\n    x = len(unique_elements)\n    print(x)\n    print(*unique_elements)\n\n\nstdin = \"\"\"6\n1 5 5 1 6 1\n5\n2 4 2 4 4\n5\n6 6 6 6 6\"\"\"\n\nsolution(stdin) "
    },
    {
        "number": 4086,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    unique = set(a)\n    result = []\n\n    for i in range(n):\n        if a[i] in unique:\n            result.append(a[i])\n            unique.remove(a[i])\n\n    x = len(result)\n    result = ' '.join(map(str, result))\n\n    return f\"{x}\\n{result}\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    a.sort(reverse=True)\n    unique_elements = set()\n\n    result = []\n    for i in a:\n        if i not in unique_elements:\n            unique_elements.add(i)\n            result.append(i)\n\n    return len(result), ' '.join(map(str, result)) "
    },
    {
        "number": 4086,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    unique_set = set()\n    result = []\n    \n    for num in a[::-1]:\n        if num not in unique_set:\n            unique_set.add(num)\n            result.append(num)\n    \n    x = len(result)\n    result_str = \" \".join(map(str, result))\n    \n    return f\"{x}\\n{result_str}\\n\"\n\n\ninput_data = \"6\\n1 5 5 1 6 1\"\nprint(solution(input_data))\n\ninput_data = \"5\\n2 4 2 4 4\"\nprint(solution(input_data))\n\ninput_data = \"5\\n6 6 6 6 6\"\nprint(solution(input_data)) "
    },
    {
        "number": 4087,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def sum_of_digits(n: int) -> int:\n        return sum(int(digit) for digit in str(n))\n\n    def is_interesting(n: int) -> bool:\n        return sum_of_digits(n) % 4 == 0\n\n    def find_nearest_interesting_number(a: int) -> int:\n        interesting_numbers = filter(is_interesting, range(a, 1001))\n        return min(interesting_numbers)\n\n    a = int(stdin)\n    nearest_interesting_number = find_nearest_interesting_number(a)\n    return str(nearest_interesting_number)\n"
    },
    {
        "number": 4087,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    digits = [int(d) for d in str(a)]\n    sum_digits = sum(digits)\n\n    if sum_digits % 4 == 0:\n        return str(a)\n\n    if sum_digits % 4 == 1:\n        digits[-1] += 1\n        return str(int(''.join(map(str, digits))))\n\n    if sum_digits % 4 == 2:\n        digits[-2] += 1\n        return str(int(''.join(map(str, digits))))\n\n    if sum_digits % 4 == 3:\n        digits[-3] += 1\n        return str(int(''.join(map(str, digits))))"
    },
    {
        "number": 4087,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    while True:\n        if sum(int(digit) for digit in str(a)) % 4 == 0 and a % 3 != 0:\n            break\n        a += 1\n    return str(a)"
    },
    {
        "number": 4087,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    n = a\n    while True:\n        digits_sum = sum(int(d) for d in str(n))\n        if digits_sum % 4 == 0:\n            return str(n)\n        n += 1\n"
    },
    {
        "number": 4087,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    count = 0\n    num = a\n    while count % 4 != 0:\n        count = 0\n        num += 1\n        for digit in str(num):\n            count += int(digit)\n    return str(num)\n"
    },
    {
        "number": 4087,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    while True:\n        if sum(int(digit) for digit in str(a)) % 4 == 0:\n            return str(a)\n        a += 1\n\ndef"
    },
    {
        "number": 4087,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    min_n = a\n    for digit in str(a):\n        min_n += 9 - int(digit)\n    return str(min_n)\n\n\ndef"
    },
    {
        "number": 4087,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    while True:\n        if a % 4 == 0:\n            return str(a)\n        a += 1\n"
    },
    {
        "number": 4087,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    n = a\n    while True:\n        digits_sum = sum(int(digit) for digit in str(n))\n        if digits_sum % 4 == 0:\n            break\n        n += 1\n    return str(n)\n\n\ninput_str = input(\"Enter a number: \")\noutput_str = solution(input_str)\nprint(\"Nearest greater or equal interesting number:\", output_str) "
    },
    {
        "number": 4087,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    n = a\n    while True:\n        total_sum = sum(int(digit) for digit in str(n))\n        if total_sum % 3 == 0:\n            break\n        elif total_sum % 4 == 0:\n            n += 1\n            continue\n        else:\n            n += total_sum % 4\n            continue\n    return str(n)\n\n\ndef"
    },
    {
        "number": 4088,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split('\\n')[0])\n    output = []\n\n    for _ in range(q):\n        stdin = stdin.split('\\n')[1:]\n        s = stdin[0]\n        m = int(stdin[1])\n        b = list(map(int, stdin[2].split()))\n\n        possible_t = set(permutations(s))\n        valid_t = []\n\n        for t in possible_t:\n            b_t = [sum(abs(i - j) for j in range(len(t))) for i, _ in enumerate(t)]\n            if b_t == b:\n                valid_t.append(''.join(t))\n\n        output.append(valid_t[0] if valid_t else \"No valid t.\")\n\n    return '\\n'.join(output)\n"
    },
    {
        "number": 4088,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    for _ in range(q):\n        s = stdin.readline().strip()\n        m = int(stdin.readline())\n        b = list(map(int, stdin.readline().strip().split()))\n        t = \"\"\n        for c in s:\n            if c not in t:\n                t += c\n        if len(t) != m:\n            continue\n        if b == [sum(abs(i-j) for j in range(len(t)) if t[j] < t[i]) for i in range(len(t))]:\n            print(t)\n\n\nstdin = sys.stdin.read().strip()\nsolution(stdin) "
    },
    {
        "number": 4088,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def distance(i: int, j: int) -> int:\n        return abs(i - j)\n\n    def build_b(s: str, b: List[int]) -> bool:\n        for i in range(len(s)):\n            dist = 0\n            for j in range(len(s)):\n                if s[j] > s[i]:\n                    dist += distance(i, j)\n            if dist != b[i]:\n                return False\n        return True\n\n    def find_t(s: str, b: List[int]) -> str:\n        t = list(s)\n        for i in range(len(s) - 1, -1, -1):\n            if not any(t[j] > t[i] for j in range(i + 1, len(t))):\n                t.pop(i)\n        return ''.join(t)\n\n    q = int(stdin.readline())\n    for i in range(q):\n        s = stdin.readline().strip()\n        m = int(stdin.readline().strip())\n        b = [int(x) for x in stdin.readline().strip().split()]\n        t = find_t(s, b)\n        if build_b(t, b):\n            print(t)\n        else:\n            print(\"No solution\")"
    },
    {
        "number": 4088,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def calculate_b(s: str, t: str, b: List[int]) -> bool:\n        b_sum = 0\n        for i in range(len(s)):\n            b_sum += sum([1 for j in range(len(s)) if i != j and s[j] > s[i]])\n        return b_sum == b[0]\n\n    def generate_t(s: str) -> List[str]:\n        t = ''\n        for char in s:\n            t += chr(ord(char) + 1)\n        return t\n\n    q = int(stdin.readline())\n    for _ in range(q):\n        s = stdin.readline().strip()\n        m = int(stdin.readline())\n        b = list(map(int, stdin.readline().strip().split()))\n\n        t = generate_t(s)\n        if calculate_b(s, t, b):\n            print(t)\n        else:\n            print('Impossible')\n\n\nstdin = sys.stdin.read()\nsolution(stdin) "
    },
    {
        "number": 4088,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def b_sum(s: str, b: List[int]) -> List[int]:\n        result = []\n        for i in range(len(s)):\n            count = 0\n            for j in range(len(s)):\n                if i != j and s[j] > s[i]:\n                    count += abs(i - j)\n            result.append(count)\n        return result\n\n    def find_t(s: str, b: List[int]) -> str:\n        if len(b) != len(s):\n            raise ValueError(\"The length of b and s must be equal.\")\n        result = []\n        for c in s:\n            if c in result:\n                continue\n            result.append(c)\n        return ''.join(result)\n\n    q = int(stdin)\n    output = []\n    for _ in range(q):\n        s, m, *b = stdin.split()\n        b = list(map(int, b))\n        t = find_t(s, b_sum(s, b))\n        output.append(t)\n    return '\\n'.join(output)\n"
    },
    {
        "number": 4088,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    for _ in range(q):\n        s, m, *b = stdin.readline().split()\n        b = list(map(int, b))\n\n        # Find all possible strings t for which the array b equals to the array calculated from the string t\n        def calc_b(t: str) -> list:\n            b_list = []\n            for i in range(1, len(t) + 1):\n                sum_dist = 0\n                for j in range(1, len(t) + 1):\n                    if ord(t[i - 1]) < ord(t[j - 1]):\n                        sum_dist += abs(i - j)\n                b_list.append(sum_dist)\n            return b_list\n\n        # Generate all possible strings t and check if the array b equals to the array calculated from the string t\n        for t in itertools.permutations(s):\n            t = ''.join(t)\n            if b == calc_b(t):\n                print(t)\n                break"
    },
    {
        "number": 4088,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(s: str, b: list, t: str) -> bool:\n        if len(s) != len(t):\n            return False\n\n        b_sum = 0\n        for i in range(len(s)):\n            if s[i] != t[i]:\n                b_sum += i\n\n        for i in range(len(b)):\n            if i == 0:\n                b_sum -= i\n            else:\n                b_sum -= (i - 1) * (i - 2) // 2\n\n        return b_sum == b[i]\n\n    q = int(stdin.split('\\n')[0])\n    output = []\n\n    for _ in range(q):\n        s, m, *b = stdin.split('\\n')[1:]\n        s = ''.join(sorted(s))\n        t = ''.join(sorted(s))\n        b = list(map(int, b))\n\n        while not is_valid(s, b, t):\n            last_index = t.rfind(s[len(t) - m:])\n            if last_index == -1:\n                break\n            t = t[:last_index] + t[last_index + 1:]\n\n        output.append(t)\n\n    return '\\n'.join(output)"
    },
    {
        "number": 4088,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    for i in range(q):\n        s = stdin.readline().strip()\n        m = int(stdin.readline())\n        b = list(map(int, stdin.readline().strip().split()))\n\n        # Generate all possible permutations of s\n        perms = set([''.join(p) for p in itertools.permutations(s)])\n\n        # Check each permutation against the given constraints\n        for perm in perms:\n            b_new = []\n            for j in range(1, m+1):\n                b_new.append(sum([abs(j-k) for k in range(1, len(s)+1) if perm[k] > perm[j-1]]))\n            if b_new == b:\n                print(perm)\n                break"
    },
    {
        "number": 4088,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(s, t):\n        for i in range(len(s)):\n            if s[i] in t and t.index(s[i]) < i:\n                return False\n        return True\n\n    def get_distance(t, b):\n        distances = []\n        for i in range(len(t)):\n            distances.append(sum(abs(j - i) for j in range(len(t)) if t[j] > t[i]))\n        return distances\n\n    def get_strings(s, b):\n        strings = []\n        for perm in itertools.permutations(s):\n            if is_valid(''.join(perm), s):\n                strings.append(''.join(perm))\n        return strings\n\n    q = int(stdin.readline())\n    for _ in range(q):\n        s = stdin.readline().strip()\n        m = int(stdin.readline())\n        b = list(map(int, stdin.readline().strip().split()))\n\n        strings = get_strings(s, b)\n        for t in strings:\n            if get_distance(t, b) == b:\n                print(t)\n                break\n"
    },
    {
        "number": 4088,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    for _ in range(q):\n        s = stdin.readline().strip()\n        m = int(stdin.readline().strip())\n        b = [int(b_i) for b_i in stdin.readline().strip().split()]\n\n        # Find all possible strings t that can be obtained from s by erasing some letters and writing the rest in any order\n        possible_ts = set()\n        for i in range(1, len(s)):\n            for j in range(i + 1, len(s) + 1):\n                possible_ts.add(s[:i] + s[j:])\n\n        # Check if the array constructed from each possible t satisfies the given conditions\n        valid_ts = []\n        for possible_t in possible_ts:\n            distances = []\n            for i in range(m):\n                distances.append(sum(abs(i - j) for j in range(len(possible_t)) if possible_t[j] > s[i]))\n            if distances == b:\n                valid_ts.append(possible_t)\n\n        # If there is a valid t, print it; otherwise, print \"Not found\"\n        if valid_ts:\n            print(valid_ts[0])\n        else:\n            print(\"Not found\")\n"
    },
    {
        "number": 4089,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    \n    # Check if the number is within the range\n    if not (1 <= n <= 1000000000000001):\n        return \"Invalid input\"\n    \n    # Define the function to convert a number to a name\n    def number_to_name(number: int) -> str:\n        name = \"\"\n        # Convert the number to a string to handle cases with more than 1 digit\n        number_str = str(number)\n        # Calculate the number of characters in the name\n        num_chars = len(number_str) + (len(number_str) - 1) // 2\n        # Generate the name\n        for i in range(num_chars):\n            if i < len(number_str):\n                # Add the corresponding letter\n                letter_index = int(number_str[i]) - 1\n                if letter_index >= 0 and letter_index <= 25:\n                    name += chr(ord('a') + letter_index)\n                elif letter_index >= 26 and letter_index <= 700:\n                    name += chr(ord('a') + (letter_index // 26 - 1))\n                    name += chr(ord('a') + (letter_index % 26))\n                elif letter_index >= 701 and letter_index <= 18276:\n                    name += chr(ord('a') + ((letter_index - 1) // 26 // 25 - 1))\n                    name += chr(ord('a') + ((letter_index - 1) // 26 % 26))\n                    name += chr(ord('a') + (letter_index % 26))\n                elif letter_index >= 18277 and letter_index <= 475252:\n                    name += chr(ord('a') + ((letter_index - 1) // 26 // 26 - 1))\n                    name += chr(ord('a') + ((letter_index - 1) // 26 % 26))\n                    name += chr(ord('a') + ((letter_index - 1) % 26))\n                else:\n                    name += chr(ord('a') + ((letter_index - 1) // 26 // 26 - 1))\n                    name += chr(ord('a') + ((letter_index - 1) // 26 % 26))\n                    name += chr(ord('a') + ((letter_index - 1) % 26))\n                    name += 'a'\n            else:\n                # Add the corresponding letter from the previous name\n                letter_index = ord(name[-1]) - ord('a') + 1\n                if letter_index >= 1 and letter_index <= 26:\n                    name += chr(ord('a') + (letter_index - 1) % 26)\n                else:\n                    name += chr(ord('a') + (letter_index - 1) % 26)\n                    name += 'a'\n        return name\n    \n    # Calculate and return the name for the given number\n    return number_to_name(n)"
    },
    {
        "number": 4089,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n\n    if 1 <= n <= 26:\n        return chr(ord('a') + n - 1)\n    elif 27 <= n <= 701:\n        return chr(ord('a') + (n - 27) // 26 - 1) + chr(ord('a') + (n - 27) % 26)\n    elif 702 <= n <= 18277:\n        return chr(ord('a') + (n - 702) // 701 - 1) + chr(ord('a') + (n - 702) % 701 // 26) + chr(ord('a') + (n - 702) % 26)\n    elif 18278 <= n <= 475253:\n        return chr(ord('a') + (n - 18278) // 18277 - 1) + chr(ord('a') + (n - 18278) % 18277 // 701) + chr(ord('a') + (n - 18278) % 701 // 26) + chr(ord('a') + (n - 18278) % 26)\n    elif 475254 <= n <= 1000000000000001:\n        return chr(ord('a') + (n - 475254) // 475253 - 1) + chr(ord('a') + (n - 475254) % 475253 // 18277) + chr(ord('a') + (n - 475254) % 18277 // 701) + chr(ord('a') + (n - 475254) % 701 // 26) + chr(ord('a') + (n - 475254) % 26)\n    else:\n        return \"Invalid input\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if 1 <= n <= 26:\n        return chr(n + 96)\n    elif 27 <= n <= 701:\n        return chr(n // 26 + 96) + chr((n % 26) + 96)\n    elif 703 <= n <= 18277:\n        return chr(n // 26 + 97) + chr((n % 26 - 1) // 26 + 96) + chr((n % 26 - 1) % 26 + 96)\n    elif 18279 <= n <= 475253:\n        return chr(n // 26 + 98) + chr((n % 26 - 2) // 26 + 96) + chr((n % 26 - 2) % 26 + 96) + chr((n % 26 - 1) % 26 + 96)\n    elif 475255 <= n <= 1000000000000001:\n        return chr(n // 26 + 99) + chr((n % 26 - 3) // 26 + 96) + chr((n % 26 - 3) % 26 + 96) + chr((n % 26 - 2) % 26 + 96) + chr((n % 26 - 1) % 26 + 96)\n    else:\n        return \"Error\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n\n    # initialize the mapping from number to name\n    mapping = {\n        1: \"a\", 2: \"b\", 3: \"c\", 4: \"d\", 5: \"e\", 6: \"f\", 7: \"g\", 8: \"h\", 9: \"i\", 10: \"j\", 11: \"k\", 12: \"l\", 13: \"m\", 14: \"n\", 15: \"o\", 16: \"p\", 17: \"q\", 18: \"r\", 19: \"s\", 20: \"t\", 21: \"u\", 22: \"v\", 23: \"w\", 24: \"x\", 25: \"y\", 26: \"z\",\n        27: \"aa\", 28: \"ab\", 29: \"ac\", 30: \"ad\", 31: \"ae\", 32: \"af\", 33: \"ag\", 34: \"ah\", 35: \"ai\", 36: \"aj\", 37: \"ak\", 38: \"al\", 39: \"am\", 40: \"an\", 41: \"ao\", 42: \"ap\", 43: \"aq\", 44: \"ar\", 45: \"as\", 46: \"at\", 47: \"au\", 48: \"av\", 49: \"aw\", 50: \"ax\", 51: \"ay\", 52: \"az\",\n        53: \"ba\", 54: \"bb\", 55: \"bc\", 56: \"bd\", 57: \"be\", 58: \"bf\", 59: \"bg\", 60: \"bh\", 61: \"bi\", 62: \"bj\", 63: \"bk\", 64: \"bl\", 65: \"bm\", 66: \"bn\", 67: \"bo\", 68: \"bp\", 69: \"bq\", 70: \"br\", 71: \"bs\", 72: \"bt\", 73: \"bu\", 74: \"bv\", 75: \"bw\", 76: \"bx\", 77: \"by\", 78: \"bz\",\n        79: \"ca\", 80: \"cb\", 81: \"cc\", 82: \"cd\", 83: \"ce\", 84: \"cf\", 85: \"cg\", 86: \"ch\", 87: \"ci\", 88: \"cj\", 89: \"ck\", 90: \"cl\", 91: \"cm\", 92: \"cn\", 93: \"co\", 94: \"cp\", 95: \"cq\", 96: \"cr\", 97: \"cs\", 98: \"ct\", 99: \"cu\", 100: \"cv\", 101: \"cw\", 102: \"cx\", 103: \"cy\", 104: \"cz\",\n        105: \"da\", 106: \"db\", 107: \"dc\", 108: \"dd\", 109: \"de\", 110: \"df\", 111: \"dg\", 112: \"dh\", 113: \"di\", 114: \"dj\", 115: \"dk\", 116: \"dl\", 117: \"dm\", 118: \"dn\", 119: \"do\", 120: \"dp\", 121: \"dq\", 122: \"dr\", 123: \"ds\", 124: \"dt\", 125: \"du\", 126: \"dv\", 127: \"dw\", 128: \"dx\", 129: \"dy\", 130: \"dz\",\n        131: \"ea\", 132: \"eb\", 133: \"ec\", 134: \"ed\", 135: \"ee\", 136"
    },
    {
        "number": 4089,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if 1 <= N <= 26:\n        return chr(ord('a') + N - 1)\n    elif 27 <= N <= 701:\n        return chr(ord('a') + (N - 1) // 26 - 1) + chr(ord('a') + (N - 1) % 26)\n    elif 703 <= N <= 18277:\n        return chr(ord('a') + (N - 1) // 700 - 1) * 2 + chr(ord('a') + ((N - 1) % 700) // 26 - 1) + chr(ord('a') + ((N - 1) % 700) % 26)\n    elif 18279 <= N <= 475253:\n        return chr(ord('a') + (N - 1) // 18278 - 1) * 3 + chr(ord('a') + ((N - 1) % 18278) // 700 - 1) * 2 + chr(ord('a') + ((N - 1) % 18278) % 700 // 26 - 1) + chr(ord('a') + ((N - 1) % 18278) % 700 % 26)\n    elif 475255 <= N <= 1000000000000001:\n        return chr(ord('a') + (N - 1) // 475254 - 1) * 4 + chr(ord('a') + ((N - 1) % 475254) // 18278 - 1) * 3 + chr(ord('a') + ((N - 1) % 475254) % 18278 // 700 - 1) * 2 + chr(ord('a') + ((N - 1) % 475254) % 18278 % 700 // 26 - 1) + chr(ord('a') + ((N - 1) % 475254) % 18278 % 700 % 26)\n    else:\n        raise ValueError(\"N is out of range\")\n"
    },
    {
        "number": 4089,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n\n    if 1 <= N <= 26:\n        return chr(ord('a') + N - 1)\n    elif 27 <= N <= 701:\n        return chr(ord('a') + (N - 1) // 26 - 1) + chr(ord('a') + (N - 1) % 26)\n    elif 703 <= N <= 18277:\n        return chr(ord('a') + (N - 1) // 26 - 1) + chr(ord('a') + (N - 1) % 26) + 'a'\n    elif 18279 <= N <= 475253:\n        return chr(ord('a') + (N - 1) // 26 - 1) + chr(ord('a') + (N - 1) % 26) + chr(ord('a') + (N - 1) // 26 // 26 - 1)\n    else:\n        return chr(ord('a') + (N - 1) // 26 - 1) + chr(ord('a') + (N - 1) % 26) + chr(ord('a') + (N - 1) // 26 // 26 - 1) + chr(ord('a') + (N - 1) % 26 // 26)\n"
    },
    {
        "number": 4089,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if 1 <= N <= 26:\n        return chr(ord('a') + N - 1)\n    elif 27 <= N <= 702:\n        N -= 26\n        return chr(ord('a') + (N - 1) // 26) + chr(ord('a') + ((N - 1) % 26) if ((N - 1) % 26) != 0 else ord('z'))\n    elif 703 <= N <= 18277:\n        N -= 702\n        return chr(ord('a') + (N - 1) // 26) + chr(ord('a') + (((N - 1) % 26) - 1) // 26) + chr(ord('a') + ((N - 1) % 26) % 26)\n    elif 18278 <= N <= 475253:\n        N -= 18277\n        return chr(ord('a') + (N - 1) // 26) + chr(ord('a') + (((N - 1) % 26) - 1) // 26) + chr(ord('a') + ((N - 1) % 26) % 26)\n    else:\n        N -= 475252\n        return chr(ord('a') + (N - 1) // 26) + chr(ord('a') + (((N - 1) % 26) - 1) // 26) + chr(ord('a') + ((N - 1) % 26) % 26)"
    },
    {
        "number": 4089,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N > 1000000000000001 or N < 1:\n        return \"Invalid input.\"\n    \n    count = 0\n    result = \"\"\n    while N > 0:\n        if N % 26 == 0:\n            result = chr(ord('a') - 1 + count) + result\n            count += 1\n            N //= 26\n        else:\n            result = chr(ord('a') + (N - 1) % 26) + result\n            N = (N - 1) // 26\n            \n    return result\n\n\ndef"
    },
    {
        "number": 4089,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if 1 <= N <= 26:\n        return chr(ord('a') + N - 1)\n    elif 27 <= N <= 701:\n        return chr(ord('a') + (N - 26) // 25) + chr(ord('a') + ((N - 26) % 25) + 1)\n    elif 703 <= N <= 18277:\n        return chr(ord('a') + (N - 702) // 315) + chr(ord('a') + ((N - 702) % 315) // 25) + chr(ord('a') + ((N - 702) % 25) + 1)\n    elif 18279 <= N <= 475253:\n        return chr(ord('a') + (N - 18278) // 10955) + chr(ord('a') + ((N - 18278) % 10955) // 315) + chr(ord('a') + ((N - 18278) % 315) // 25) + chr(ord('a') + ((N - 18278) % 25) + 1)\n    else:\n        return chr(ord('a') + (N - 475254) // 390625) + chr(ord('a') + ((N - 475254) % 390625) // 10955) + chr(ord('a') + ((N - 475254) % 10955) // 315) + chr(ord('a') + ((N - 475254) % 315) // 25) + chr(ord('a') + ((N - 475254) % 25) + 1)"
    },
    {
        "number": 4089,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if 1 <= N <= 26:\n        return chr(N + 96)\n    elif 27 <= N <= 701:\n        return chr(N // 26 + 96) + chr((N % 26) + 96)\n    elif 703 <= N <= 18277:\n        x = (N - 702) // 26\n        y = (N - 702) % 26\n        return chr(x + 96) * 2 + chr(y + 96)\n    elif 18279 <= N <= 475253:\n        x = (N - 18278) // 26\n        y = (N - 18278) % 26\n        return chr(x + 96) + chr(y + 96)\n    elif 475255 <= N <= 1000000000000001:\n        x = (N - 475254) // 26\n        return chr(x + 96) * 5\n\ndef"
    },
    {
        "number": 4090,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def abbreviate(words: str) -> str:\n        words = words.split()\n        for i in range(1, len(words)):\n            for j in range(i + 1, len(words) + 1):\n                segment = \" \".join(words[i:j])\n                if segment.isupper():\n                    continue\n                if len(set(segment)) == 1:\n                    return words[:i] + [segment.upper()] + words[j:]\n        return words\n\n    n = int(stdin.splitlines()[0])\n    text = stdin.splitlines()[1]\n    original_length = len(text)\n    while True:\n        abbreviated_text = abbreviate(text)\n        if abbreviated_text == text.split():\n            break\n        text = \" \".join(abbreviated_text)\n\n    return len(text)\n"
    },
    {
        "number": 4090,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n = int(input_list[0])\n    words = input_list[1].split()\n\n    def is_equal_segment(i1: int, j1: int, i2: int, j2: int) -> bool:\n        if j1 - i1 != j2 - i2 or j1 < i1 or j2 < i2:\n            return False\n        for t in range(j1 - i1):\n            if words[i1 + t] != words[i2 + t]:\n                return False\n        return True\n\n    def abbreviate(i: int, j: int) -> str:\n        result = ''\n        for t in range(j - i):\n            result += words[i + t][0].upper()\n        return result\n\n    min_length = 0\n    for i in range(n - 1):\n        for j in range(i + 2, n):\n            if is_equal_segment(i, j, 0, n - 1):\n                min_length = max(min_length, len(abbreviate(i, j)))\n\n    return min_length\n\n\ndef"
    },
    {
        "number": 4090,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    words = stdin.splitlines()[1].split()\n    \n    def get_abbreviation(words):\n        n = len(words)\n        for i in range(n):\n            for j in range(i + 2, n + 1):\n                for k in range(i + 1, j):\n                    if words[i:j] != words[k:j]:\n                        break\n                else:\n                    return i, j - 1\n        return None, None\n    \n    def get_abbreviated_text(words, i, j):\n        return ''.join(w.upper()[0] for w in words[i:j + 1])\n    \n    def min_length_after_abbreviation(words):\n        i, j = get_abbreviation(words)\n        if i is not None:\n            words[i:j + 1] = [get_abbreviated_text(words, i, j)]\n            return min(min_length_after_abbreviation(words), min_length_without_abbreviation(words))\n        else:\n            return len(''.join(words))\n    \n    def min_length_without_abbreviation(words):\n        return len(''.join(words))\n    \n    return min_length_after_abbreviation(words)"
    },
    {
        "number": 4090,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    words = stdin.split('\\n')[1].split()\n    # TODO: Implement the solution here\n    return"
    },
    {
        "number": 4090,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, text = input().split()\n    n = int(n)\n    words = text.split()\n    for i in range(n):\n        if words[i][0].islower():\n            return \"There is no abbreviation for the given text.\"\n    for i in range(n - 1):\n        if words[i][0].isupper() and words[i + 1][0].isupper():\n            return \"There is no abbreviation for the given text.\"\n    for i in range(n - 2):\n        if words[i][0].islower() and words[i + 1][0].islower() and words[i + 2][0].islower():\n            return \"There is no abbreviation for the given text.\"\n    return min(len(words[0]) + len(words[1]), len(words[0]) + len(words[2]), len(words[0]) + len(words[1]) + len(words[2]), len(words[3]) + len(words[4]), len(words[3]) + len(words[5]), len(words[3]) + len(words[4]) + len(words[5]))"
    },
    {
        "number": 4090,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, text = map(str, input().split())\n    n = int(n)\n\n    words = text.split()\n\n    def find_abbreviation(words: list) -> str:\n        segments = []\n        for i in range(n):\n            for j in range(i + 1, n + 1):\n                segments.append((i, j))\n\n        min_length = float('inf')\n        for i, j in segments:\n            segment = words[i:j]\n            if len(set(segment)) == 1:\n                length = len(words[i:j][0])\n                if length < min_length:\n                    min_length = length\n\n        return min_length\n\n    def abbreviate(words: list) -> str:\n        segments = []\n        for i in range(n):\n            for j in range(i + 1, n + 1):\n                segments.append((i, j))\n\n        for i, j in sorted(segments, key=lambda x: x[1] - x[0], reverse=True):\n            segment = words[i:j]\n            if len(set(segment)) == 1:\n                words = words[:i] + [segment[0][:1].upper()] + words[j:]\n                break\n\n        return words\n\n    min_length = find_abbreviation(words)\n    abbreviated_words = abbreviate(words)\n    abbreviated_text = ' '.join(abbreviated_words)\n\n    return max(min_length, len(abbreviated_text))\n"
    },
    {
        "number": 4090,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def abbreviation(words: str) -> bool:\n        words_list = words.split()\n        n = len(words_list)\n        for i in range(n - 1):\n            if words_list[i][0] != words_list[i + 1][0]:\n                return False\n        return True\n\n    n = int(stdin.split('\\n')[0])\n    text = stdin.split('\\n')[1]\n    words = text.split()\n    n_words = len(words)\n    min_length = n_words\n\n    for i in range(n_words - 1):\n        for j in range(i + 2, n_words + 1):\n            segment = \" \".join(words[i:j])\n            if abbreviation(segment):\n                min_length = min(min_length, j - i)\n\n    return min_length\n"
    },
    {
        "number": 4090,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    words = stdin.splitlines()[1].split()\n\n    def is_abbreviation(s1: str, s2: str) -> bool:\n        if len(s1) != len(s2):\n            return False\n        for i in range(len(s1)):\n            if s1[i] != s2[i]:\n                return False\n        return True\n\n    def remove_abbreviation(s: str) -> str:\n        words = s.split()\n        for i in range(len(words)):\n            for j in range(i + 2, len(words) + 1):\n                segment = ' '.join(words[i:j])\n                if is_abbreviation(segment, segment.upper()):\n                    words[i:j] = [segment[0].upper()]\n        return ' '.join(words)\n\n    text = ' '.join(words)\n    min_length = len(remove_abbreviation(text))\n    return min_length"
    },
    {
        "number": 4090,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    words = stdin.splitlines()[1].split()\n\n    def is_equal_segment(words: List[str], i1: int, i2: int, j1: int, j2: int) -> bool:\n        if j1 - i1 != j2 - i2 or j1 < i1 or j2 < i2:\n            return False\n        for t in range(j1 - i1):\n            if words[i1 + t] != words[i2 + t]:\n                return False\n        return True\n\n    def find_abbreviation(words: List[str]) -> Tuple[int, int, int, int]:\n        min_length = float('inf')\n        for i1 in range(n):\n            for j1 in range(i1 + 2, n + 1):\n                for i2 in range(n):\n                    for j2 in range(i2 + 2, n + 1):\n                        if is_equal_segment(words, i1, i2, j1 - 1, j2 - 1):\n                            length = sum(len(w) for w in words[:i1]) + sum(len(w) for w in words[i1 + 1:j1 - 1]) + len(words[i1][0].upper()) + sum(len(w) for w in words[i2 + 1:j2 - 1]) + sum(len(w) for w in words[j2:])\n                            min_length = min(min_length, length)\n        return min_length\n\n    return find_abbreviation(words)\n"
    },
    {
        "number": 4090,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    words = stdin.split(\"\\n\")[1].split()\n\n    def segment_length(i: int, j: int) -> int:\n        return sum(len(words[k]) for k in range(i, j + 1))\n\n    def is_equal_segment(i1: int, j1: int, i2: int, j2: int) -> bool:\n        return j1 - i1 == j2 - i2 and j1 >= i1 and j2 >= i2 and all(words[i1 + t] == words[i2 + t] for t in range(j1 - i1 + 1))\n\n    def replace_segment(i: int, j: int, abbreviation: str) -> str:\n        return abbreviation.upper()\n\n    def update_segment(i: int, j: int, abbreviation: str) -> None:\n        words[i] = words[i][:1].upper()\n        for k in range(i + 1, j + 1):\n            words[k] = words[k][:1].upper() + words[k][1:]\n\n    def min_length_after_abbreviation() -> int:\n        min_length = segment_length(0, n - 1)\n        for i in range(n - 2):\n            for j in range(i + 2, n):\n                for k in range(i + 1, j):\n                    if is_equal_segment(i, k, k, j) and segment_length(i, k) + segment_length(k, j) < min_length:\n                        min_length = segment_length(i, k) + segment_length(k, j)\n                        update_segment(i, k, replace_segment(i, k, words[i]))\n                        update_segment(k, j, replace_segment(k, j, words[j]))\n        return min_length\n\n    return min_length_after_abbreviation()\n"
    },
    {
        "number": 4091,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    \n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    \n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            for l in range(i):\n                r = min(i, l + j)\n                dp[i][j] = max(dp[i][j], dp[l][j - r + l] + sum(a[l:r+1]))\n    \n    total_profit = dp[n][k]\n    result = []\n    i, j = n, k\n    while i > 0 and j > 0:\n        l = 1\n        r = min(i, l + j)\n        while r <= i:\n            if dp[i][j] == dp[l][j - r + l] + sum(a[l:r+1]):\n                result.append(r - l + 1)\n                i, j = l - 1, j - (r - l + 1)\n                break\n            l += 1\n            r = min(i, l + j)\n    \n    result.reverse()\n    return f\"{total_profit}\\n{ ' '.join(map(str, result)) }\""
    },
    {
        "number": 4091,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    dp = [[0 for _ in range(n)] for _ in range(k)]\n    for j in range(n):\n        dp[0][j] = a[j]\n    for i in range(1, k):\n        for j in range(n):\n            dp[i][j] = dp[i-1][j]\n            for l in range(j):\n                if dp[i-1][l] + a[j] > dp[i][j]:\n                    dp[i][j] = dp[i-1][l] + a[j]\n    max_profit = max(dp[k-1])\n    t = [0] * k\n    for i in range(n):\n        max_profit_i = max_profit\n        t[k-1] += 1\n        for j in range(k-2, -1, -1):\n            if t[j+1] + t[k-1] <= n:\n                if max_profit_i + a[i] > max_profit:\n                    t[j+1] += 1\n                    t[k-1] -= 1\n                    max_profit_i = max_profit_i + a[i]\n    return max_profit, ' '.join(map(str, t))\n\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\nprint(solution(n, k, a)) "
    },
    {
        "number": 4091,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            for l in range(i - 1, -1, -1):\n                dp[i][j] = max(dp[i][j], dp[l][j - 1] + a[i - 1])\n\n    total_profit = dp[n][k]\n\n    t = [0] * k\n    for i in range(n, 0, -1):\n        t[k - 1] = 1\n        for j in range(k - 2, -1, -1):\n            if dp[i - 1][j + 1] > dp[i][j + 1]:\n                t[j] = t[j + 1] + 1\n            else:\n                t[j] = 1\n        k = max(k - 1, 0)\n\n    return f\"{total_profit}\\n{' '.join(map(str, t))}\""
    },
    {
        "number": 4091,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def solve(n: int, k: int, a: List[int]) -> Tuple[int, List[int]]:\n        dp = [[0] * (n + 1) for _ in range(k + 1)]\n        for i in range(n + 1):\n            dp[1][i] = a[i - 1]\n\n        for j in range(2, k + 1):\n            for i in range(n + 1):\n                for l in range(i + 1):\n                    r = min(i, l + j)\n                    dp[j][i] = max(dp[j][i], dp[j - 1][l] + max(a[l:r + 1]))\n\n        t = []\n        i = n\n        for j in range(k, 0, -1):\n            t.append(1 + (i - dp[j][i]) // j)\n            i = dp[j][i] - 1\n\n        return dp[k][n], t[::-1]\n\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    profit, t = solve(n, k, a)\n    return str(profit) + \"\\n\" + \" \".join(map(str, t))\n"
    },
    {
        "number": 4091,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n, k = map(int, input_list[0].split())\n    a = list(map(int, input_list[1].split()))\n\n    dp = [[0] * (n + 1) for _ in range(k + 1)]\n    days = [[] for _ in range(k)]\n\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if j == 1:\n                dp[1][i] = max(dp[1][i - 1], a[i - 1])\n            else:\n                dp[j][i] = max(dp[j][i - 1], dp[j - 1][i - 1] + a[i - 1])\n\n            if dp[j][i] == dp[j - 1][i - 1] + a[i - 1]:\n                days[j - 1].append(i)\n\n    total_profit = dp[k][n]\n\n    result = [0] * k\n    for i in range(k - 1, -1, -1):\n        if days[i]:\n            result[i] = len(days[i])\n            for problem in days[i]:\n                a[problem - 1] = 0\n\n    return total_profit, ' '.join(map(str, result))\n"
    },
    {
        "number": 4091,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    \n    def max_profit(day):\n        max_profit_day = 0\n        for i in range(len(day)):\n            max_profit_day = max(max_profit_day, max(day[i:i+1]))\n        return max_profit_day\n    \n    def max_profit_total(days):\n        total_profit = 0\n        for day in days:\n            total_profit += max_profit(day)\n        return total_profit\n    \n    def distribution(days):\n        result = []\n        for day in days:\n            result.append(len(day))\n        return result\n    \n    days = []\n    for i in range(0, n, k):\n        days.append(a[i:i+k])\n    \n    total_profit = max_profit_total(days)\n    result = distribution(days)\n    \n    return str(total_profit) + \"\\n\" + \" \".join(map(str, result))\n\ninput_string = \"\"\"8 3\n5 4 2 6 5 1 9 2\"\"\"\n\nprint(solution(input_string))\n\ninput_string = \"\"\"5 1\n1 1 1 1 1\"\"\"\n\nprint(solution(input_string))\n\ninput_string = \"\"\"4 2\n1 2000 2000 2\"\"\"\n\nprint(solution(input_string)) "
    },
    {
        "number": 4091,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    a.sort()\n\n    dp = [[0] * (n + 1) for _ in range(k + 1)]\n\n    for i in range(1, k + 1):\n        for j in range(1, n + 1):\n            for l in range(j):\n                dp[i][j] = max(dp[i][j], dp[i - 1][l] + max(a[l:j]))\n\n    max_profit = dp[k][n]\n\n    t = [0] * k\n    for i in range(k, 0, -1):\n        profit = dp[i][n]\n        if profit > max_profit:\n            max_profit = profit\n            for l in range(n, 0, -1):\n                if dp[i - 1][l] + max(a[l:n]) == profit:\n                    t[i - 1] = n - l + 1\n                    break\n\n    result = [str(max_profit)] + [str(t[i - 1]) for i in range(1, k + 1) if t[i - 1]]\n    return \"\\n\".join(result)\n"
    },
    {
        "number": 4091,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    \n    dp = [[0 for _ in range(k+1)] for _ in range(n+1)]\n    \n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            for l in range(i):\n                r = l+j\n                if r <= n:\n                    dp[i][j] = max(dp[i][j], a[i-1] + dp[l][j-1])\n    \n    result = dp[n][k]\n    \n    t = [0]*k\n    l, r = 1, n\n    while k:\n        if r-l+1 > t[k-1]:\n            t[k-1] = r-l+1\n            k -= 1\n        else:\n            l += 1\n    \n    return str(result) + \"\\n\" + \" \".join(map(str, t))"
    },
    {
        "number": 4091,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def max_profit(problems: List[int]) -> int:\n        return max(problems)\n\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    max_profit_per_day = [max_profit(a[i:i + k]) for i in range(0, n, k)]\n\n    total_profit = sum(max_profit_per_day)\n\n    t = [n // k] * k\n    if n % k != 0:\n        t[n % k - 1] += 1\n\n    return str(total_profit) + \"\\n\" + \" \".join(map(str, t))\n"
    },
    {
        "number": 4091,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def max_profit(start, end, day):\n        if start > end:\n            return 0\n        if day == 1:\n            max_profit_with_problem = a[start]\n            max_profit_without_problem = max_profit(start + 1, end, 1)\n            return max(max_profit_with_problem, max_profit_without_problem)\n        else:\n            max_profit_with_problem = a[start] + max_profit(start + 1, end, day - 1)\n            max_profit_without_problem = max_profit(start + 1, end, day)\n            return max(max_profit_with_problem, max_profit_without_problem)\n\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    if k == 1:\n        t1 = n\n        total_profit = sum(a[:n])\n    else:\n        total_profit = max_profit(0, n, k)\n        t1 = 1\n\n    for i in range(1, k):\n        t1 *= i + 1\n\n    t2 = (t1 * n) // (k * (k + 1) // 2)\n\n    return f\"{total_profit}\\n{t1}\\n{t2}\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    min_inserts = 0\n    i = 0\n    \n    while i < n:\n        total = a[i]\n        j = i + 1\n        while j < n:\n            total += a[j]\n            if total == 0:\n                min_inserts += 1\n                a.insert(j, 1)\n                j += 1\n                i = j - 1\n            j += 1\n        i += 1\n        \n    return min_inserts\n\ndef"
    },
    {
        "number": 4092,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()[1:]))\n    dp = [0] * (n + 1)\n    dp[0] = float('inf')\n    for i in range(n):\n        dp[i+1] = dp[i] + a[i]\n    mn = float('inf')\n    for i in range(n):\n        for j in range(i+1, n+1):\n            mn = min(mn, dp[j] - dp[i])\n    return mn\n\ndef"
    },
    {
        "number": 4092,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    def sum_subsegment(start: int, end: int) -> int:\n        return sum(a[start:end+1])\n\n    def find_segment_with_zero_sum(start: int) -> tuple:\n        left, right = start, start\n        current_sum = sum_subsegment(left, right)\n        while left > 0 and right < n-1:\n            if current_sum == 0:\n                return left, right\n            if current_sum < 0:\n                current_sum += sum_subsegment(left-1, right)\n                left -= 1\n            else:\n                current_sum += sum_subsegment(left, right+1)\n                right += 1\n        return -1, -1\n\n    min_insertions = 0\n    for i in range(1, n):\n        if sum_subsegment(0, i-1) + sum_subsegment(i, n-1) > 0:\n            left, right = find_segment_with_zero_sum(i)\n            if left != -1:\n                min_insertions += left + n - right - 1\n\n    return min_insertions\n"
    },
    {
        "number": 4092,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n    mod = 10**9 + 7\n\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        dp[i] = pow(2, i, mod)\n\n    for i in range(1, n + 1):\n        dp[i] = (dp[i] * dp[i - 1]) % mod\n\n    result = pow(dp[n], mod - 2, mod)\n\n    return result\n\n\ndef"
    },
    {
        "number": 4092,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    # Calculate the sum of the array\n    total_sum = sum(a)\n\n    # Initialize variables for the minimum number of insertions and the current sum\n    min_insertions = 0\n    current_sum = 0\n\n    # Iterate through the array and add each element to the current sum\n    for i in range(n):\n        current_sum += a[i]\n\n        # If the current sum is zero, the current subsegment is valid and we don't need to insert anything\n        if current_sum == 0:\n            current_sum = 0\n            continue\n\n        # Calculate the minimum number of insertions needed to make the current sum positive\n        min_insertions += (current_sum - total_sum - i) // abs(current_sum) + 1\n\n        # Reset the current sum to zero\n        current_sum = 0\n\n    # Calculate the minimum number of insertions needed to make the final sum positive\n    min_insertions += (current_sum - total_sum - n) // abs(current_sum) + 1\n\n    return str(min_insertions)"
    },
    {
        "number": 4092,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n    min_insertions = float('inf')\n    \n    for i in range(n):\n        for j in range(i+1, n+1):\n            subarray_sum = sum(a[i:j])\n            if subarray_sum == 0:\n                min_insertions = 0\n                break\n            elif subarray_sum < 0:\n                min_insertions = min(min_insertions, -subarray_sum)\n            elif subarray_sum > 0:\n                min_insertions = min(min_insertions, subarray_sum)\n        if min_insertions == 0:\n            break\n    \n    return min_insertions\n"
    },
    {
        "number": 4092,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    def find_pivot(subarray):\n        subarray_sum = sum(subarray)\n        pivot_sum = subarray_sum // 2\n        left, right = 0, pivot_sum\n        while left <= right:\n            pivot = (left + right) // 2\n            if sum(subarray[:pivot]) == pivot_sum:\n                return pivot\n            elif sum(subarray[:pivot]) < pivot_sum:\n                left = pivot + 1\n            else:\n                right = pivot - 1\n        return -1\n\n    def binary_search(subarray, target_sum):\n        left, right = 0, len(subarray) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if sum(subarray[mid:]) == target_sum:\n                return mid\n            elif sum(subarray[mid:]) < target_sum:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1\n\n    total_sum = sum(a)\n    inserted_count = 0\n    for i in range(1, n):\n        if a[i] + a[i - 1] == 0:\n            inserted_count += 1\n        else:\n            pivot = find_pivot(a[:i + 1])\n            if pivot != -1 and sum(a[:pivot]) == pivot * a[i]:\n                inserted_count += 1\n            elif pivot != -1:\n                target_sum = sum(a[:pivot]) + a[i] - pivot * a[i]\n                if binary_search(a[:pivot], target_sum) == -1:\n                    inserted_count += 1\n                else:\n                    inserted_count += 2\n            else:\n                target_sum = sum(a[:i]) - a[i]\n                if binary_search(a[:i], target_sum) == -1:\n                    inserted_count += 1\n                else:\n                    inserted_count += 2\n\n    return inserted_count\n\n\ninput_cases = [\n    (\"4\\n1 -5 3 2\", \"1\"),\n    (\"5\\n4 -2 3 -9 2\", \"0\"),\n    (\"9\\n-1 1 -1 1 -1 1 1 -1 -1\", \"6\"),\n    (\"8\\n16 -5 -11 -15 10 5 4 -4\", \"3\"),\n]\n\nfor input_case in input_cases:\n    stdin = input_case[0]\n    expected_output = input_case[1]\n    output = solution(stdin)\n    assert output == expected_output, f\"Error in case: {stdin}\\nExpected output: {expected_output}\\nActual output: {output}\"\n    print(\"All test cases passed. Your solution is correct.\")"
    },
    {
        "number": 4092,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n    count = 0\n    for i in range(n-1):\n        if a[i]*a[i+1] < 0:\n            count += 1\n    return count\n\ndef"
    },
    {
        "number": 4092,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    def sum_subsegment(start: int, end: int) -> int:\n        return sum(a[start:end+1])\n\n    min_inserts = 0\n    for i in range(1, n):\n        left_sum = sum_subsegment(0, i-1)\n        right_sum = sum_subsegment(i, n-1)\n        if left_sum == 0 or right_sum == 0:\n            min_inserts += 1\n        else:\n            min_inserts = max(min_inserts, abs(left_sum) + 1, abs(right_sum) + 1)\n\n    return min_inserts\n"
    },
    {
        "number": 4092,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n    count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(a[i:j]) == 0:\n                count += 1\n                \n    return count\n\ndef"
    },
    {
        "number": 4093,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    t = int(input_list.pop(0))\n    output = []\n    for _ in range(t):\n        n, m = map(int, input_list.pop(0).split())\n        if n == 1:\n            output.append(0)\n        else:\n            min_val = m // n\n            max_val = m - (n - 1) * min_val\n            if min_val == max_val:\n                output.append((n - 1) * min_val)\n            else:\n                output.append(m)\n    return '\\n'.join(map(str, output))\n"
    },
    {
        "number": 4093,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    t = int(input_list[0])\n    output_list = []\n\n    for i in range(1, len(input_list), 2):\n        n, m = map(int, input_list[i].split())\n        a = [0] * n\n        if n == 1:\n            a[0] = m\n        else:\n            for j in range(n):\n                if j == 0:\n                    a[j] = m - (n - 1)\n                elif j == n - 1:\n                    a[j] = m - (n - 1)\n                else:\n                    a[j] = (m - (n - 1)) / 2\n                    m -= a[j]\n        max_sum = sum(abs(a[i] - a[i+1]) for i in range(n-1))\n        output_list.append(max_sum)\n\n    output_str = '\\n'.join(map(str, output_list))\n    return output_str\n"
    },
    {
        "number": 4093,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    test_cases = int(input_list[0])\n    result = []\n    \n    for i in range(1, len(input_list), 2):\n        n, m = map(int, input_list[i].split())\n        a = [0] * n\n        a[-1] = m\n        temp = 0\n        for j in range(n-2, -1, -1):\n            temp += a[j+1] - temp\n            a[j] = temp\n        result.append(sum(abs(a[i]-a[i+1]) for i in range(n-1)))\n    \n    return '\\n'.join(map(str, result))\n"
    },
    {
        "number": 4093,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def max_diff(a: List[int]) -> int:\n        return sum(abs(a[i] - a[i+1]) for i in range(len(a) - 1))\n\n    t = int(stdin)\n    for i in range(t):\n        n, m = map(int, input().split())\n        a = sorted([0] * (n-1) + [m])\n        max_val = max_diff(a)\n        print(max_val)\n"
    },
    {
        "number": 4093,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def get_max_sum(n, m):\n        if m == 0 or n == 1:\n            return m\n        a = [m // n] * n\n        if m % n == 1:\n            a[n-1] = m - (m // n) * (n-1)\n        else:\n            a[n-1] = m - (m // n) * (n-1) + 1\n        return sum(abs(a[i] - a[i+1]) for i in range(n-1))\n\n    t = int(input())\n    for _ in range(t):\n        n, m = map(int, input().split())\n        print(get_max_sum(n, m))\n"
    },
    {
        "number": 4093,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def absolute_difference(a: int, b: int) -> int:\n        return abs(a - b)\n\n    def calculate_maximum_sum(n: int, m: int) -> int:\n        if n == 1:\n            return m\n\n        a = [0] * n\n        a[0] = m\n\n        for i in range(1, n):\n            a[i] = a[i - 1] - (n - i)\n\n            if a[i] < 0:\n                a[i] = 0\n            elif a[i] > m:\n                a[i] = m\n\n        return sum(absolute_difference(a[i], a[i + 1]) for i in range(n - 1))\n\n    t = int(stdin)\n    for _ in range(t):\n        n, m = map(int, input().split())\n        print(calculate_maximum_sum(n, m))\n"
    },
    {
        "number": 4093,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.splitlines()[0])\n    result = []\n    \n    for _ in range(t):\n        n, m = map(int, stdin.splitlines()[1].split())\n        a = [0] * n\n        current_sum = 0\n        i = 0\n        while current_sum < m:\n            current_sum += a[i]\n            i += 1\n            if i == n:\n                break\n        if current_sum == m:\n            result.append(0)\n        else:\n            max_diff = 0\n            for i in range(n - 1):\n                max_diff = max(max_diff, abs(a[i] - a[i + 1]))\n            result.append(max_diff * (n - 1))\n    \n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 4093,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    t = int(input_list[0])\n    result = []\n    for i in range(1, len(input_list), 2):\n        n, m = map(int, input_list[i].split())\n        array = [0] * n\n        diff = m\n        for j in range(1, n - 1):\n            if diff <= 0:\n                break\n            if diff >= j:\n                array[j] = j\n                diff -= j\n        if diff > 0:\n            array[n - 1] = diff\n        else:\n            array[n - 1] = 0\n        result.append(sum(abs(array[i] - array[i + 1]) for i in range(n - 1)))\n    return \"\\n\".join(map(str, result))\n"
    },
    {
        "number": 4093,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def absolute_sum(arr: list) -> int:\n        return sum(abs(arr[i] - arr[i+1]) for i in range(len(arr)-1))\n\n    def get_array(n: int, m: int) -> list:\n        if n == 1:\n            return [m]\n        elif n % 2 == 0:\n            return get_array(n//2, m//2) + get_array(n//2, m-m//2)\n        elif n == 2:\n            return [max(m-1, 0), max(m-1, 0)]\n        else:\n            return get_array(n-1, m-1) + [m-m//(n-1)] + get_array(n-1, m-m//(n-1))\n\n    def main(t: int) -> str:\n        for _ in range(t):\n            n, m = map(int, stdin.readline().split())\n            arr = get_array(n, m)\n            max_sum = absolute_sum(arr)\n            yield max_sum\n\n    return \"\\n\".join(map(str, main(int(stdin.readline()))))\n"
    },
    {
        "number": 4093,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    test_cases = int(input_list[0])\n    result = []\n    \n    for i in range(1, test_cases + 1):\n        n, m = map(int, input_list[i].split())\n        min_diff = m\n        max_diff = 0\n        for j in range(n-1):\n            diff = abs(m - 2*j)\n            min_diff = min(min_diff, diff)\n            max_diff = max(max_diff, diff)\n        result.append(max_diff)\n    \n    output = '\\n'.join(map(str, result))\n    return output"
    },
    {
        "number": 4094,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.strip())\n    sequence = [7, 77, 777, 7777, 77777, 777777]\n    for i in range(len(sequence)):\n        if sequence[i] % K == 0:\n            return i + 1\n    return -1\n"
    },
    {
        "number": 4094,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.split()[0])\n    sequence = [7, 77, 777, 7777, 77777, 777777, 7777777, 77777777, 777777777]\n    for i, num in enumerate(sequence):\n        if num % K == 0:\n            return i\n    return -1\n"
    },
    {
        "number": 4094,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n\n    sequence = [7, 77, 777, 7777, 77777, 777777, 7777777, 77777777, 777777777]\n\n    for i, num in enumerate(sequence):\n        if num % k == 0:\n            return i\n\n    return -1\n"
    },
    {
        "number": 4094,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    sequence = [7, 77, 777, 7777, 77777, 777777, 7777777, 77777777, 777777777]\n\n    for i in range(len(sequence)):\n        if sequence[i] % K == 0:\n            return i + 1\n    return -1\n\ninput_string = input()\nprint(solution(input_string)) "
    },
    {
        "number": 4094,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.strip())\n    sequence = [7, 77, 777, 7777, 77777, 777777]\n    for i, num in enumerate(sequence):\n        if num % K == 0:\n            return i + 1\n    return -1"
    },
    {
        "number": 4094,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    sequence = [7, 77, 777, 7777, 77777, 777777, 7777777, 77777777, 777777777]\n\n    for index, num in enumerate(sequence):\n        if num % K == 0:\n            return index\n\n    return -1"
    },
    {
        "number": 4094,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.strip())\n\n    sequence = [7, 77, 777, 7777, 77777, 777777]\n    for i, num in enumerate(sequence):\n        if num % K == 0:\n            return i\n    return -1\n"
    },
    {
        "number": 4094,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    count = 0\n    for i in range(7, 77777777, 7):\n        if i % K == 0:\n            return count\n        count += 1\n    return -1\n\nstdin = input(\"Enter K: \")\nprint(solution(stdin)) "
    },
    {
        "number": 4094,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    n = 1\n    while True:\n        num = 7 * n\n        if num % K == 0:\n            return str(n)\n        n += 1\n    return '-1'\n"
    },
    {
        "number": 4094,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.split()[0])\n\n    n = 7\n    count = 0\n    while True:\n        if n % K == 0:\n            break\n        n *= 10\n        count += 1\n\n    return str(count) if count < 100000 else -1\n\n\ndef"
    },
    {
        "number": 4095,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    p = list(map(int, stdin.split()[2:]))\n\n    def median(a):\n        a.sort()\n        if len(a) % 2 == 0:\n            return (a[len(a) // 2 - 1] + a[len(a) // 2]) / 2\n        else:\n            return a[len(a) // 2]\n\n    count = 0\n    for i in range(1, n - m + 2):\n        if median(p[i - 1:i + m - 1]) == m:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4095,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n, m = map(int, input_list[0].split())\n    p = list(map(int, input_list[1].split()))\n\n    count = 0\n\n    for i in range(n):\n        left = i\n        right = i\n        while right < n and p[right] < m:\n            right += 1\n        if right < n and p[right] == m:\n            count += 1\n        while left > 0 and p[left - 1] > m:\n            left -= 1\n        if left > 0 and p[left - 1] == m:\n            count += 1\n\n    return count"
    },
    {
        "number": 4095,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    p = list(map(int, input().split()))\n    \n    count = 0\n    for i in range(n):\n        left = i\n        right = i\n        while left > 0 and p[left-1] > p[right]:\n            left -= 1\n        while right < n-1 and p[left] < p[right+1]:\n            right += 1\n        if left <= i <= right and (right == i or p[left] < p[right]):\n            if right - left + 1 == 2 * (n - i) and p[i] == m:\n                count += 1\n            elif right - left + 1 == 2 * (i + 1) and p[i] > m:\n                count += 1\n            elif right - left + 1 == 2 * (n - i - 1) and p[i] < m:\n                count += 1\n    return count\n\nn, m = map(int, input().split())\np = list(map(int, input().split()))\n\nprint(solution(stdin)) "
    },
    {
        "number": 4095,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    p = list(map(int, stdin.split()[2:]))\n    \n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if i == j:\n                continue\n            left = p[i:j+1]\n            left.sort()\n            if left[len(left)//2] == m or (len(left) % 2 == 0 and left[len(left)//2-1] == m):\n                count += 1\n    \n    return str(count)\n"
    },
    {
        "number": 4095,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def find_median(arr: List[int]) -> int:\n        n = len(arr)\n        if n % 2 == 0:\n            return (arr[n // 2 - 1] + arr[n // 2]) // 2\n        else:\n            return arr[n // 2]\n\n    n, m = map(int, stdin.split()[:2])\n    p = list(map(int, stdin.split()[2:]))\n\n    count = 0\n    for l in range(n):\n        for r in range(l + 1, n + 1):\n            arr = p[l:r]\n            if len(arr) % 2 == 1:\n                mid = (len(arr) - 1) // 2\n                if arr[mid] == m:\n                    count += 1\n            else:\n                mid1 = len(arr) // 2 - 1\n                mid2 = len(arr) // 2\n                if arr[mid1] == m and arr[mid2] == m:\n                    count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4095,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    p = list(map(int, stdin.split()[2:]))\n\n    count = 0\n    for i in range(n - m + 1):\n        if sorted(p[i:i+m]) == list(range(1, m+1)):\n            count += 1\n\n    return count"
    },
    {
        "number": 4095,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    p = list(map(int, stdin.split()[2:]))\n\n    count = 0\n\n    for l in range(1, n + 1):\n        for r in range(l, n + 1):\n            if len(set(p[l - 1:r])) == r - l:\n                median = sorted(p[l - 1:r])[(r - l - 1) // 2]\n                if median == m:\n                    count += 1\n\n    return count\n"
    },
    {
        "number": 4095,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def median(arr: list) -> int:\n        arr.sort()\n        n = len(arr)\n        if n % 2 == 0:\n            return (arr[n // 2 - 1] + arr[n // 2]) // 2\n        else:\n            return arr[n // 2]\n\n    n, m = map(int, stdin.split()[:2])\n    p = list(map(int, stdin.split()[2:]))\n    count = 0\n\n    for l in range(n):\n        r = l\n        while r <= n - 1 and p[l] != p[r]:\n            if median(p[l:r + 1]) == m:\n                count += 1\n            r += 1\n\n    return count\n"
    },
    {
        "number": 4095,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    p = list(map(int, input().split()))\n\n    count = 0\n    for i in range(1, n):\n        l, r = i - 1, i + 1\n        while l >= 0 and r < n and p[l] > p[r]:\n            l -= 1\n            r += 1\n        if (l + 1) <= r and p[l + 1] == m:\n            count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4095,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    p = list(map(int, input().split()))\n    count = 0\n    \n    for l in range(n):\n        for r in range(l, n):\n            if l == r:\n                continue\n            if sorted(p[l:r+1])[n//2] == m:\n                count += 1\n    \n    return str(count)\n"
    },
    {
        "number": 4096,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    days = [0] * n\n    for i, cafe in enumerate(a):\n        for j in range(max(0, cafe - i), cafe + 1):\n            days[j] += 1\n    if sum(days) < m:\n        return -1\n    else:\n        for i in range(n):\n            if days[i] > 0:\n                days[i] += 1\n            elif days[i] < 0:\n                days[i] -= 1\n        return sum(days)\n\n\ndef"
    },
    {
        "number": 4096,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin.split(\"\\n\")\n    n, m = map(int, input_str[0].split())\n    a = list(map(int, input_str[1].split()))\n\n    # if the total caffeine dosage is less than m, it's impossible to write the coursework\n    total_caffeine = sum(a)\n    if total_caffeine < m:\n        return -1\n\n    # calculate the maximum number of pages Polycarp can write per day\n    max_pages_per_day = 0\n    for i in range(n):\n        max_pages_per_day += max(0, a[i] - i)\n\n    # calculate the number of days Polycarp needs to write the coursework\n    num_days = math.ceil(m / max_pages_per_day)\n\n    return num_days\n\n\ndef"
    },
    {
        "number": 4096,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    \n    if n > m:\n        return -1\n    \n    min_days = 1\n    max_pages = 0\n    days = 0\n    coffee_left = n\n    for i in range(m):\n        if days == 0:\n            max_pages = a[coffee_left-1]\n            min_days = 1\n            days += 1\n            coffee_left -= 1\n        else:\n            if coffee_left == 0:\n                return -1\n            else:\n                pages = min(max_pages, a[coffee_left-1])\n                max_pages -= 1\n                coffee_left -= 1\n                days += 1\n                if pages == 0:\n                    return -1\n                else:\n                    max_pages = pages - 1\n                    if max_pages == 0:\n                        max_pages = a[coffee_left-1] - days\n                        days += 1\n                        coffee_left -= 1\n                    else:\n                        max_pages -= 1\n    return days\n"
    },
    {
        "number": 4096,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    n, m = map(int, input_list[0].split())\n    a = list(map(int, input_list[1].split()))\n    dp = [0] * (m + 1)\n    dp[0] = 1\n    for i in range(n):\n        for j in range(m, -1, -1):\n            if j - a[i] >= 0:\n                dp[j] = max(dp[j], dp[j - a[i]] + 1)\n            else:\n                break\n    if dp[-1] == m + 1:\n        return \"1\"\n    elif dp[-1] == m:\n        return \"2\"\n    elif dp[-1] == m - 1:\n        return \"3\"\n    else:\n        return \"-1\""
    },
    {
        "number": 4096,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    if n * m == 0:\n        return -1\n\n    days = 0\n    coffee_left = n\n    page_left = m\n\n    while page_left > 0:\n        days += 1\n\n        for i in range(coffee_left):\n            pages_written = max(0, a[i] - (i + 1))\n            if pages_written <= page_left:\n                page_left -= pages_written\n                if page_left == 0:\n                    break\n\n        coffee_left = min(coffee_left - days, n)\n\n    return days if page_left == 0 else -1\n"
    },
    {
        "number": 4096,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    \n    days = [0] * (m + 1)\n    for i in range(n):\n        days[a[i]] = max(days[a[i]], days[a[i] - 1] + 1)\n    \n    for i in range(m, 0, -1):\n        days[i] = max(days[i], days[i + 1])\n    \n    if days[m] == 0:\n        return -1\n    else:\n        return days[m]\n\ndef"
    },
    {
        "number": 4096,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    \n    if n > m:\n        return -1\n    \n    max_caffeine = sum(a)\n    days = 1\n    \n    while max_caffeine >= m:\n        days += 1\n        max_caffeine = sum(max(0, a[i] - i) for i in range(n))\n    \n    return days - 1 if max_caffeine == m else -1\n\ninput_data = \"\"\"5 8\n2 3 1 1 2\"\"\"\n\nprint(solution(input_data))"
    },
    {
        "number": 4096,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    \n    if n * m == 0:\n        return -1\n    \n    dp = [[0] * m for _ in range(n)]\n    days = [[0] * n for _ in range(m)]\n    \n    for i in range(n):\n        for j in range(m):\n            if i == 0 and j == 0:\n                dp[i][j] = a[i]\n                days[j][i] = 1\n            elif i > 0:\n                if j < a[i]:\n                    dp[i][j] = dp[i - 1][j] + a[i]\n                    days[j][i] = days[j][i - 1]\n                else:\n                    dp[i][j] = dp[i - 1][j - 1] + a[i]\n                    days[j][i] = days[j][i - 1] + 1\n            else:\n                if j < a[i]:\n                    dp[i][j] = dp[i][j - 1] + a[i]\n                    days[j][i] = days[j][i - 1] + 1\n                else:\n                    dp[i][j] = dp[i][j - 1] + a[i]\n                    days[j][i] = days[j][i - 1]\n    \n    for i in range(n):\n        for j in range(m):\n            if days[j][i] == 0 and dp[i][j] == 0:\n                return -1\n    \n    return days[m - 1][n - 1]\n\nstdin = \"\"\"5 8\n2 3 1 1 2\"\"\"\n\nprint(solution(stdin))\n\nstdin = \"\"\"7 10\n1 3 4 2 1 4 2\"\"\"\n\nprint(solution(stdin))\n\nstdin = \"\"\"5 15\n5 5 5 5 5\"\"\"\n\nprint(solution(stdin))\n\nstdin = \"\"\"5 26\n5 5 5 5 5\"\"\"\n\nprint(solution(stdin)) "
    },
    {
        "number": 4096,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    if sum(a) < m:\n        return -1\n\n    dp = [0] * (m + 1)\n    dp[0] = 1\n\n    for i in range(n):\n        for j in range(a[i], m + 1):\n            dp[j] += dp[j - a[i]]\n\n    for i in range(m, -1, -1):\n        if dp[i] * i >= m:\n            return i\n\n    return -1"
    },
    {
        "number": 4096,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    n, m = map(int, input_data[0].split())\n    a = list(map(int, input_data[1].split()))\n\n    days = 1\n    pages_written = 0\n\n    for k in range(1, n + 1):\n        pages_written += max(0, a[k - 1] - k + 1 + pages_written)\n\n        if pages_written >= m:\n            break\n        days += 1\n\n    if pages_written >= m:\n        return str(days)\n    else:\n        return \"-1\""
    },
    {
        "number": 4097,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    b = list(map(int, input().split()))\n    \n    if n <= 2:\n        return 0\n    \n    for i in range(n-2):\n        if b[i+1] - b[i] != b[i+2] - b[i+1]:\n            return -1\n    \n    return n-2\n"
    },
    {
        "number": 4097,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    b = list(map(int, stdin.splitlines()[1].split()))\n\n    if n < 2:\n        return 0\n\n    diff = [b[i+1] - b[i] for i in range(n-1)]\n    if len(set(diff)) == 1:\n        return 0\n\n    for i in range(n-1):\n        if diff[i] == 0:\n            continue\n        for j in range(i+1, n):\n            if diff[j] == diff[i]:\n                return i+1\n\n    return -1\n\n\ndef"
    },
    {
        "number": 4097,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    b = list(map(int, stdin.split('\\n')[1].split()))\n\n    if n <= 2:\n        return 0\n\n    a = sorted(set(b))\n    if len(a) == len(b) and len(set(b[i] - b[i - 1] for i in range(1, n))) == 1:\n        return 0\n\n    for i in range(1, n):\n        if b[i] < b[i - 1]:\n            return -1\n\n    for i in range(n - 2, 0, -1):\n        if b[i] - b[i - 1] == b[i + 1] - b[i]:\n            b[i + 1] -= 1\n        elif b[i] - b[i - 1] == b[i + 1] - b[i] + 1:\n            b[i + 1] += 1\n        else:\n            return -1\n\n    for i in range(1, n):\n        if b[i] < b[i - 1]:\n            return -1\n\n    return n - len(set(b[i] - b[i - 1] for i in range(1, n)))\n\n\ninput_data = '''4\n24 21 14 10\n3\n500 500\n2\n14 5 1\n5\n1 3 6 9 12\n'''\n\nresult = solution(input_data)\nprint(result) "
    },
    {
        "number": 4097,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    b = list(map(int, stdin.splitlines()[1].split()))\n    if len(b) < 2:\n        return 0\n    d = b[1] - b[0]\n    for i in range(2, n):\n        if b[i] - b[i-1] != d:\n            return -1\n    return 0\n\n\ninput_stdin = \"\"\"4\n24 21 14 10\n\"\"\"\n\ninput_stdin2 = \"\"\"2\n500 500\n\"\"\"\n\ninput_stdin3 = \"\"\"3\n14 5 1\n\"\"\"\n\ninput_stdin4 = \"\"\"5\n1 3 6 9 12\n\"\"\"\n\nprint(solution(input_stdin4))\n"
    },
    {
        "number": 4097,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    b = list(map(int, input().split()))\n    \n    if n == 1 or n == 2:\n        return 0\n    \n    min_diff = b[1] - b[0]\n    min_diff_count = 1\n    found = False\n    \n    for i in range(2, n):\n        diff = b[i] - b[i - 1]\n        \n        if diff != min_diff:\n            found = True\n            break\n    \n    if not found:\n        return -1\n    \n    for i in range(2, n):\n        diff = b[i] - b[i - 1]\n        \n        if diff < min_diff:\n            min_diff_count += 1\n            min_diff = diff\n    \n    return min_diff_count\n\n\ndef"
    },
    {
        "number": 4097,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    b = list(map(int, stdin.split(\"\\n\")[1].split()))\n    \n    if n <= 2:\n        return 0\n    \n    diff = []\n    for i in range(1, n):\n        diff.append(b[i] - b[i-1])\n    \n    if len(set(diff)) != 1:\n        return -1\n    \n    for i in range(n):\n        if b[i] == 0:\n            return i+1\n    \n    return n-diff.count(diff[0])\n"
    },
    {
        "number": 4097,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    b = list(map(int, input().split()))\n\n    def is_arithmetic_progression(seq):\n        diff = seq[1] - seq[0]\n        return all(b - a == diff for a, b in zip(seq, seq[1:]))\n\n    def find_min_changes(seq):\n        if is_arithmetic_progression(seq):\n            return 0\n\n        for i in range(n):\n            if seq[i] > 0:\n                seq[i] -= 1\n                if is_arithmetic_progression(seq):\n                    return i + 1\n                else:\n                    seq[i] += 1\n            if seq[n - i - 1] < n - i - 1:\n                seq[n - i - 1] += 1\n                if is_arithmetic_progression(seq):\n                    return n - i\n                else:\n                    seq[n - i - 1] -= 1\n        return -1\n\n    return str(find_min_changes(b))\n"
    },
    {
        "number": 4097,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    n = int(input_list[0])\n    b = list(map(int, input_list[1].split()))\n    \n    if n == 1 or n == 2:\n        return 0\n    \n    for i in range(1, n):\n        if b[i] - b[i-1] != b[i-1] - b[i-2]:\n            return -1\n    \n    for i in range(n-2):\n        if b[i+1] - b[i] != b[i] - b[i-1]:\n            return -1\n    \n    min_changes = 0\n    i = 0\n    while i < n-1:\n        if b[i+1] - b[i] == b[i] - b[i-1]:\n            i += 1\n        else:\n            min_changes += 1\n            i += 2\n    \n    return min_changes"
    },
    {
        "number": 4097,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    n = int(input_list[0])\n    b = list(map(int, input_list[1].split()))\n\n    if n <= 2:\n        return 0\n\n    diff = b[1] - b[0]\n    for i in range(2, n):\n        if b[i] - b[i-1] != diff:\n            return -1\n\n    count = 0\n    for i in range(n-1):\n        if b[i+1] - b[i] != diff:\n            count += 1\n\n    return count"
    },
    {
        "number": 4097,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    b = list(map(int, stdin.splitlines()[1].split()))\n\n    if n == 1 or n == 2:\n        return 0\n\n    min_changes = n\n\n    for i in range(1, n - 1):\n        d = b[i + 1] - b[i]\n        if d == 0:\n            min_changes = 0\n            break\n\n        if b[i] == b[i - 1] + 1:\n            min_changes = 0\n            break\n\n        if b[i] == b[i - 1] - 1:\n            min_changes = 0\n            break\n\n        if b[i + 1] == b[i] - 1:\n            min_changes = 0\n            break\n\n        if b[i + 1] == b[i] + 1:\n            min_changes = 0\n            break\n\n    if min_changes == n:\n        return -1\n    else:\n        return min_changes\n\n\ndef"
    },
    {
        "number": 4098,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_values = stdin.split('\\n')\n    n, k = map(int, input_values[0].split())\n    a = list(map(int, input_values[1].split()))\n\n    def is_balanced(team: list) -> bool:\n        return all(abs(a[i] - a[j]) <= 5 for i in range(len(team)) for j in range(i))\n\n    teams = [[] for _ in range(k)]\n\n    for i in range(n):\n        for j in range(len(teams)):\n            if len(teams[j]) < 4 and is_balanced(teams[j] + [i]):\n                teams[j].append(i)\n                break\n        else:\n            for j in range(len(teams), k):\n                teams[j].append(i)\n\n    return sum(len(team) for team in teams)"
    },
    {
        "number": 4098,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    if k == 0 or k > n:\n        return str(0)\n\n    a.sort()\n    target = (a[n - 1] + a[0]) // 2\n\n    teams = []\n    total_students = 0\n    max_students = 0\n\n    for i in range(n):\n        if a[i] <= target + 5:\n            teams.append(a[i])\n            total_students += 1\n            max_students = max(max_students, total_students)\n        else:\n            teams.clear()\n            total_students = 0\n\n    return str(max_students)\n"
    },
    {
        "number": 4098,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    a.sort()\n    total = n\n    teams = [0] * k\n\n    for i in range(n):\n        if teams[i % k] + abs(a[i] - a[i - 1]) <= 5:\n            teams[i % k] += 1\n            total -= 1\n\n    return total\n\ndef"
    },
    {
        "number": 4098,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    a.sort()\n    a.reverse()\n\n    total = 0\n    teams = 0\n    max_total = 0\n\n    for i in range(n):\n        if total + a[i] <= 5:\n            total += a[i]\n        else:\n            teams += 1\n            total = a[i]\n        if teams == k:\n            break\n\n    max_total = total\n\n    for i in range(n-k):\n        if total + a[i] <= 5:\n            total += a[i]\n        else:\n            teams += 1\n            total = a[i]\n        if teams > k:\n            break\n        max_total = max(max_total, total)\n\n    return str(max_total)\n"
    },
    {
        "number": 4098,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    def is_balanced(team):\n        return all(abs(a[i] - a[j]) <= 5 for i in range(len(team)) for j in range(i + 1, len(team)) if i != j)\n\n    teams = []\n    while a:\n        team = [a.pop()]\n        i = 0\n        while i < len(team) and a:\n            val = min(a)\n            idx = a.index(val)\n            team.append(val)\n            a.pop(idx)\n            i += 1\n        teams.append(team)\n\n    teams = [team for team in teams if is_balanced(team)]\n    teams.sort(key=len, reverse=True)\n\n    max_students = 0\n    for i in range(1, len(teams) + 1):\n        max_students += k * len(teams[:i])\n        if max_students > n:\n            return n\n\n    return max_students\n\n\ndef"
    },
    {
        "number": 4098,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_values = stdin.split(\"\\n\")\n    n, k = map(int, input_values[0].split())\n    a = sorted(map(int, input_values[1].split()))\n\n    def is_balanced(team):\n        for i in range(len(team) - 1):\n            if abs(team[i] - team[i + 1]) > 5:\n                return False\n        return True\n\n    def find_max_team_size(a):\n        total_size = 0\n        for i in range(len(a) // 2):\n            for j in range(i + 1, len(a) // 2):\n                team_size = 2 * (j - i + 1)\n                teams = [a[i:j + 1], a[j + 1:]]\n                if is_balanced(teams[0]) and is_balanced(teams[1]) and team_size > total_size:\n                    total_size = team_size\n        return total_size\n\n    max_size = 0\n    for i in range(1, len(a) - n + 1):\n        size = find_max_team_size(a[i:i + n])\n        if size > max_size:\n            max_size = size\n\n    return str(max_size)\n\n\ndef"
    },
    {
        "number": 4098,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def is_balanced(teams: list) -> bool:\n        for team in teams:\n            for i in range(len(team)):\n                for j in range(i+1, len(team)):\n                    diff = abs(team[i] - team[j])\n                    if diff > 5:\n                        return False\n        return True\n\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    a.sort()\n\n    left, right = 0, n\n    ans = 0\n\n    while left <= right:\n        mid = (left + right) // 2\n        teams = [a[i:i+mid] for i in range(0, n, mid)]\n\n        if is_balanced(teams) and len(teams) <= k:\n            ans = mid\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return ans\n"
    },
    {
        "number": 4098,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def is_balanced(skills: list) -> bool:\n        return all(abs(a - skills[0]) <= 5 for a in skills)\n\n    def get_min_diff(skills: list) -> int:\n        min_diff = 1000000001\n        for i in range(len(skills)):\n            for j in range(i + 1, len(skills)):\n                if abs(skills[i] - skills[j]) < min_diff:\n                    min_diff = abs(skills[i] - skills[j])\n        return min_diff\n\n    n, k = map(int, stdin.splitlines()[0].split())\n    skills = list(map(int, stdin.splitlines()[1].split()))\n\n    students_in_teams = 0\n    for i in range(1, k + 1):\n        for subset in itertools.combinations(skills, i):\n            if is_balanced(subset):\n                students_in_teams += i\n                break\n\n    return str(students_in_teams)\n"
    },
    {
        "number": 4098,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    \n    def is_balanced(team: list) -> bool:\n        return max(team) - min(team) <= 5\n\n    def count_students(teams: list) -> int:\n        return sum(len(team) for team in teams)\n\n    def max_students(teams: list) -> int:\n        return max(len(team) for team in teams)\n\n    def solve(n: int, k: int, a: list) -> int:\n        if k == 0 or n == 0:\n            return 0\n        if k == 1:\n            return n\n        if n == 1:\n            return 1\n\n        max_students = 0\n        teams = []\n        for i in range(n):\n            if len(teams) < k:\n                teams.append([a[i]])\n            else:\n                max_team_size = max_students(teams)\n                for j, team in enumerate(teams):\n                    if len(team) < max_team_size:\n                        new_team = team + [a[i]]\n                        if is_balanced(new_team) and len(new_team) > max_team_size:\n                            teams[j] = new_team\n                if not any(is_balanced(team) for team in teams):\n                    teams.append([a[i]])\n            max_students = max(max_students, count_students(teams))\n        return max_students\n\n    result = solve(n, k, a)\n    return str(result)\n"
    },
    {
        "number": 4098,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    skills = list(map(int, input().split()))\n    \n    def count_teams(n_students, n_teams):\n        dp = [[0] * (n_teams + 1) for _ in range(n_students + 1)]\n        for i in range(n_students + 1):\n            dp[i][0] = 1\n        for i in range(n_teams + 1):\n            dp[0][i] = 0\n\n        for i in range(1, n_students + 1):\n            for j in range(1, n_teams + 1):\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1]\n\n        return dp[n_students][n_teams]\n\n    max_students = count_teams(n, k)\n    for i in range(2, k + 1):\n        max_students = max(max_students, count_teams(n, i) + count_teams(n, k - i))\n\n    return str(max_students)\n"
    },
    {
        "number": 4099,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    A.append(0)\n    total = sum(A)\n    average = total / N\n    if average >= M:\n        return \"0\"\n    else:\n        diff = M - average\n        for i in range(K+1):\n            if diff == 0:\n                return str(i)\n            elif i <= total % K:\n                diff -= 1\n        return \"-1\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M, *A = map(int, stdin.split())\n    total_points = sum(A)\n    if total_points + K >= M * N:\n        return K\n    else:\n        return -1\n\ninput_data = \"\"\"5 10 7\n8 10 3 6\"\"\"\nprint(solution(input_data)) "
    },
    {
        "number": 4099,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M, *A_i = map(int, stdin.split())\n    total_score = sum(A_i)\n    if M - total_score > K:\n        return -1\n    else:\n        return M - total_score\n"
    },
    {
        "number": 4099,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M, *A = map(int, stdin.split())\n    total_score = sum(A)\n    average_score = total_score / N\n    min_score_needed = (K * M - total_score) / N\n\n    if min_score_needed < 0:\n        return -1\n    else:\n        return int(min_score_needed)\n\ninput_str = \"5 10 7\\n8 10 3 6\"\nprint(solution(input_str)) "
    },
    {
        "number": 4099,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M, *A = map(int, stdin.split())\n\n    total_score = sum(A)\n    final_score = K - total_score\n\n    if final_score >= M:\n        return str(final_score)\n    else:\n        return \"-1\""
    },
    {
        "number": 4099,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M, *A = map(int, stdin.split())\n\n    total_sum = sum(A)\n    last_subject_score = K - total_sum\n\n    if last_subject_score < M:\n        return -1\n    else:\n        return last_subject_score\n\ninput_str = \"5 10 7\\n8 10 3 6\"\nprint(solution(input_str)) "
    },
    {
        "number": 4099,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    total_sum = sum(A)\n    if M > K:\n        return -1\n    if total_sum + K >= M * N:\n        return K\n    return total_sum + (M * N - total_sum - K) // N\n"
    },
    {
        "number": 4099,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M, *A = map(int, stdin.split())\n    total_sum = sum(A) + K\n\n    if total_sum >= M * N:\n        return \"0\"\n    elif total_sum + 1 >= M * N:\n        return \"1\"\n    else:\n        return \"-1\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M, *A = list(map(int, stdin.split()))\n    total_score = sum(A)\n    last_score = K - total_score\n\n    if last_score >= M:\n        return str(last_score)\n    else:\n        return \"-1\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M, *A = map(int, stdin.split())\n    total = sum(A)\n    last_subject = K - total\n\n    if last_subject >= M:\n        return str(last_subject)\n    else:\n        return \"-1\"\n\ninput_str = \"5 10 7\\n8 10 3 6\"\nprint(solution(input_str)) "
    },
    {
        "number": 4100,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q, *A = list(map(int, stdin.split()))\n    scores = [K] * N\n    for i in range(Q):\n        if A[i] != 0:\n            scores[A[i]-1] -= 1\n    survivors = [score > 0 for score in scores]\n    return '\\n'.join(['Yes' if survivor else 'No' for survivor in survivors])\n\n\ninput_data = \"6 3 4\\n3\\n1\\n3\\n2\"\nresult = solution(input_data)\nprint(result) "
    },
    {
        "number": 4100,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q, *A = map(int, stdin.split())\n    scores = [K] * N\n    for i in range(Q):\n        if scores[A[i] - 1] > 0:\n            for j in range(N):\n                if j != A[i] - 1:\n                    scores[j] -= 1\n    survivors = [score > 0 for score in scores]\n    for i in range(N):\n        print(\"Yes\" if survivors[i] else \"No\")"
    },
    {
        "number": 4100,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q, *A = map(int, stdin.split())\n    scores = [K] * N\n    for i in range(Q):\n        player = A[i] - 1\n        for j in range(N):\n            if j != player:\n                scores[j] -= 1\n    survivors = set(i for i in range(N) if scores[i] > 0)\n    for i in range(N):\n        print(\"Yes\" if i in survivors else \"No\")"
    },
    {
        "number": 4100,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q, *A = map(int, stdin.split())\n    scores = [K] * N\n    \n    for i in range(Q):\n        player = A[i] - 1\n        for j in range(N):\n            if j == player:\n                continue\n            scores[j] -= 1\n    \n    survived = [\"Yes\" if score > 0 else \"No\" for score in scores]\n    \n    return \"\\n\".join(survived)\n\ndef"
    },
    {
        "number": 4100,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q = map(int, stdin.split()[:3])\n    A = list(map(int, stdin.split()[3:]))\n\n    scores = [K] * N\n    for i in range(Q):\n        if A[i] <= N:\n            scores[A[i] - 1] -= 1\n\n    for i in range(N):\n        if scores[i] > 0:\n            print(\"Yes\")\n        else:\n            print(\"No\")"
    },
    {
        "number": 4100,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q, *A = map(int, stdin.split())\n    survived = [\"Yes\"] * N\n    for i in range(Q):\n        player = A[i] - 1\n        if survived[player] == \"Yes\":\n            for j in range(N):\n                if j != player and survived[j] == \"Yes\":\n                    survived[j] = \"No\"\n    return \"\\n\".join(survived)"
    },
    {
        "number": 4100,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q, *A = map(int, stdin.split())\n\n    players = [K] * N\n    survivors = set(range(1, N + 1))\n\n    for i in range(Q):\n        answer = A[i]\n        for j in range(1, N + 1):\n            if j == answer:\n                players[j - 1] -= 1\n                if players[j - 1] <= 0:\n                    survivors.discard(j)\n\n    for i in range(1, N + 1):\n        if i in survivors:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n"
    },
    {
        "number": 4100,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q, *A = map(int, stdin.split())\n    scores = [K] * N\n    \n    for i in range(Q):\n        for j in range(N):\n            if j + 1 == A[i]:\n                scores[j] -= 1\n    \n    survivors = [\"Yes\" if score > 0 else \"No\" for score in scores]\n    \n    return \"\\n\".join(survivors)"
    },
    {
        "number": 4100,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q = map(int, input().split())\n    A = list(map(int, stdin.split('\\n')[1:]))\n\n    scores = [K] * N\n\n    for i in range(Q):\n        if A[i] in range(1, N + 1):\n            scores[A[i] - 1] -= 1\n\n    survivors = [scores[i] > 0 for i in range(N)]\n\n    result = ['Yes' if survivor else 'No' for survivor in survivors]\n\n    return '\\n'.join(result)\n\n\ninput_str = \"\"\"6 3 4\n3\n1\n3\n2\"\"\"\n\nprint(solution(input_str)) "
    },
    {
        "number": 4100,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q, *A = map(int, stdin.split())\n    scores = [K] * N\n    for i in range(Q):\n        a = A[i] - 1\n        for j in range(N):\n            if j == a:\n                continue\n            scores[j] -= 1\n        scores[a] += 1\n        if scores[a] <= 0:\n            break\n    survivors = [\"No\"] * N\n    for i in range(N):\n        if scores[i] > 0:\n            survivors[i] = \"Yes\"\n    return \"\\n\".join(survivors)\n"
    },
    {
        "number": 4101,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    n, m = map(int, input_data[0].split())\n    matrix = [[int(i) for i in input_data[j + 1].split()] for j in range(n)]\n\n    sorted_matrix = [i for i in range(n * m)]\n\n    def check_sorted():\n        sorted_matrix.sort()\n        return sorted_matrix == [i for i in range(n * m)]\n\n    def invert_row(i):\n        for j in range(m):\n            sorted_matrix[i * m + j] ^= 1\n\n    def invert_column(j):\n        for i in range(n):\n            sorted_matrix[i * m + j] ^= 1\n\n    def inverse_matrix(a):\n        for i in range(n):\n            for j in range(m):\n                sorted_matrix[i * m + j] = a[i][j]\n\n    inverse_matrix(matrix)\n\n    if check_sorted():\n        return \"YES\\n00\\n00\"\n\n    for i in range(n):\n        if not check_sorted():\n            invert_row(i)\n            if check_sorted():\n                return \"YES\\n\" + \"\".join(str(i) for i in range(n)) + \"\\n\" + \"\".join(str(i) for i in range(m))\n\n    for j in range(m):\n        if not check_sorted():\n            invert_column(j)\n            if check_sorted():\n                return \"YES\\n\" + \"\".join(str(i) for i in range(n)) + \"\\n\" + \"\".join(str(i) for i in range(m))\n\n    return \"NO\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def invert_row(matrix: list, row: int, n: int, m: int) -> list:\n        for j in range(m):\n            matrix[row][j] ^= 1\n        return matrix\n\n    def invert_column(matrix: list, col: int, n: int, m: int) -> list:\n        for i in range(n):\n            matrix[i][col] ^= 1\n        return matrix\n\n    n, m = map(int, stdin.split()[:2])\n    matrix = []\n    for i in range(n):\n        row = list(map(int, stdin.split()[2 + i * m: 2 + (i + 1) * m]))\n        matrix.append(row)\n\n    row_inversions = [0] * n\n    col_inversions = [0] * m\n\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 1:\n                row_inversions[i] ^= 1\n                col_inversions[j] ^= 1\n\n    if sum(row_inversions) % 2 != 0 or sum(col_inversions) % 2 != 0:\n        return \"NO\\n\"\n\n    for i in range(n):\n        if row_inversions[i] == 1:\n            matrix = invert_row(matrix, i, n, m)\n\n    for j in range(m):\n        if col_inversions[j] == 1:\n            matrix = invert_column(matrix, j, n, m)\n\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 1:\n                row_inversions[i] ^= 1\n                col_inversions[j] ^= 1\n\n    if sum(row_inversions) % 2 != 0 or sum(col_inversions) % 2 != 0:\n        return \"NO\\n\"\n\n    row_inversions = [str(i) for i in row_inversions]\n    col_inversions = [str(i) for i in col_inversions]\n\n    return \"YES\\n\" + \"\".join(row_inversions) + \"\\n\" + \"\".join(col_inversions) + \"\\n\" "
    },
    {
        "number": 4101,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.splitlines()\n    n, m = map(int, input_lines[0].split())\n    matrix = [[int(num) for num in input_lines[i+1].split()] for i in range(n)]\n\n    # Initialize variables\n    row_inversions = [0] * n\n    col_inversions = [0] * m\n\n    # Function to perform inversion\n    def invert(row_inversions, col_inversions, i, j):\n        row_inversions[i] ^= 1\n        col_inversions[j] ^= 1\n\n    # Function to check if matrix is sorted\n    def is_sorted(matrix):\n        flattened = [num for row in matrix for num in row]\n        return all(flattened[i] <= flattened[i+1] for i in range(len(flattened)-1))\n\n    # Perform inversions\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 0:\n                invert(row_inversions, col_inversions, i, j)\n\n    # Check if matrix is sorted\n    if is_sorted(matrix):\n        return \"YES\\n\" + ''.join(map(str, row_inversions)) + \"\\n\" + ''.join(map(str, col_inversions))\n    else:\n        return \"NO\"\n\n\ninput_data = \"2 2\\n1 1\\n0 1\\n\\n3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\\n\\n3 3\\n0 0 0\\n1 0 1\\n1 1 0\"\noutput_data = solution(input_data)\nprint(output_data) "
    },
    {
        "number": 4101,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    n, m = map(int, input_list.pop(0).split())\n    matrix = [list(map(int, input_list.pop(0).split())) for _ in range(n)]\n\n    def check_sorted(matrix):\n        flat_list = [matrix[i][j] for i in range(n) for j in range(m)]\n        return all(flat_list[i] <= flat_list[i + 1] for i in range(m * n - 1))\n\n    def invert_row(matrix, i):\n        matrix[i] = [1 - val for val in matrix[i]]\n\n    def invert_column(matrix, j):\n        for i in range(n):\n            matrix[i][j] = 1 - matrix[i][j]\n\n    def inverse_rows_and_columns(matrix):\n        rows = [0] * n\n        columns = [0] * m\n        for i in range(n):\n            for j in range(m):\n                if matrix[i][j] != matrix[i][0]:\n                    rows[i] = 1\n                if matrix[i][j] != matrix[0][j]:\n                    columns[j] = 1\n        return rows, columns\n\n    if not check_sorted(matrix):\n        return \"NO\"\n\n    rows, columns = inverse_rows_and_columns(matrix)\n    return \"YES\\n\" + \"\".join(map(str, rows)) + \"\\n\" + \"\".join(map(str, columns))\n\ninput_list = \"\"\"3 3\n0 0 0\n1 0 1\n1 1 0\"\"\".split(\"\\n\")\n\nprint(solution(\"\\n\".join(input_list))) "
    },
    {
        "number": 4101,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def invert_row(matrix, row):\n        for j in range(len(matrix[0])):\n            matrix[row][j] = 1 - matrix[row][j]\n\n    def invert_column(matrix, column):\n        for i in range(len(matrix)):\n            matrix[i][column] = 1 - matrix[i][column]\n\n    def is_sorted(matrix):\n        array = []\n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                array.append(matrix[i][j])\n        return array == sorted(array)\n\n    def process_matrix(matrix, sequence):\n        for operation in sequence:\n            if operation[0] == 'r':\n                invert_row(matrix, int(operation[1:]))\n            elif operation[0] == 'c':\n                invert_column(matrix, int(operation[1:]))\n\n    def matrix_to_string(matrix):\n        row_str = ''.join(str(int(row.count(1) > 0)) for row in matrix)\n        column_str = ''.join(str(int(col.count(1) > 0)) for col in zip(*matrix))\n        return row_str, column_str\n\n    n, m = map(int, stdin.split()[:2])\n    matrix = [[int(x) for x in stdin.split()[2 + i * m:2 + i * m + m]] for i in range(n)]\n\n    if not is_sorted(matrix):\n        return \"NO\\n\"\n\n    row_inversions = []\n    column_inversions = []\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 0:\n                row_inversions.append(str(i))\n                column_inversions.append(str(j))\n\n    if not row_inversions:\n        return \"NO\\n\"\n\n    sequence = sorted(row_inversions) + sorted(column_inversions)\n    process_matrix(matrix, sequence)\n\n    row_str, column_str = matrix_to_string(matrix)\n    return \"YES\\n\" + row_str + \"\\n\" + column_str + \"\\n\" "
    },
    {
        "number": 4101,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split('\\n')\n    n, m = map(int, input_lines[0].split())\n    a = [[int(x) for x in input_lines[i+1].split()] for i in range(n)]\n\n    def is_sorted(row_inversions, col_inversions):\n        sorted_array = [a[i][j] for i in range(n) for j in range(m)]\n        sorted_array.sort()\n        return all(sorted_array[i] <= sorted_array[i+1] for i in range(n*m-1))\n\n    def sort_matrix(row_inversions, col_inversions):\n        if is_sorted(row_inversions, col_inversions):\n            return \"YES\", \"\".join(str(r) for r in row_inversions), \"\".join(str(c) for c in col_inversions)\n        for i in range(n):\n            for j in range(m):\n                if a[i][j] == 1:\n                    row_inversions[i] ^= 1\n                    col_inversions[j] ^= 1\n        return sort_matrix(row_inversions, col_inversions)\n\n    if is_sorted([0] * n, [0] * m):\n        return \"NO\"\n\n    row_inversions = [0] * n\n    col_inversions = [0] * m\n    return sort_matrix(row_inversions, col_inversions)\n\ninput_data = \"\"\"3 3\n0 0 0\n1 0 1\n1 1 0\"\"\"\n\nprint(solution(input_data)) "
    },
    {
        "number": 4101,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    n, m = map(int, input_list.pop(0).split())\n    a = [[int(x) for x in input_list[i].split()] for i in range(n)]\n\n    def is_sorted(a):\n        return all(a[i][j] <= a[i][j + 1] for i in range(n) for j in range(m - 1))\n\n    def get_inversions(a, row_inversions, col_inversions):\n        for i in range(n):\n            for j in range(m):\n                if a[i][j] == 0:\n                    row_inversions[i] += 1\n                    col_inversions[j] += 1\n        return row_inversions, col_inversions\n\n    def sort_matrix(a, row_inversions, col_inversions):\n        while not is_sorted(a):\n            max_row_inversions = max(row_inversions)\n            max_col_inversions = max(col_inversions)\n            if max_row_inversions > max_col_inversions:\n                max_row_index = row_inversions.index(max_row_inversions)\n                row_inversions[max_row_index] = 0\n                col_inversions[a[max_row_index].index(1)] += 1\n                a[max_row_index] = [0 if x == 1 else 1 for x in a[max_row_index]]\n            else:\n                max_col_index = col_inversions.index(max_col_inversions)\n                col_inversions[max_col_index] = 0\n                row_inversions[a[::-1][max_col_index].index(1)] += 1\n                a[::-1][max_col_index] = [0 if x == 1 else 1 for x in a[::-1][max_col_index]]\n\n    row_inversions = [0] * n\n    col_inversions = [0] * m\n    row_inversions, col_inversions = get_inversions(a, row_inversions, col_inversions)\n    sort_matrix(a, row_inversions, col_inversions)\n\n    row_string = ''.join('1' if x == 1 else '0' for x in a)\n    col_string = ''.join('1' if x == 1 else '0' for x in a[::-1])\n\n    return \"YES\\n\" + row_string + \"\\n\" + col_string\n"
    },
    {
        "number": 4101,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def is_sorted(matrix):\n        flat_matrix = [value for row in matrix for value in row]\n        return all(flat_matrix[i] <= flat_matrix[i + 1] for i in range(len(flat_matrix) - 1))\n\n    def sort_matrix(matrix, rows_inverted, cols_inverted):\n        sorted_matrix = sorted(matrix, key=lambda row: [value for value in row if value == 1])\n        for i in range(len(matrix)):\n            if rows_inverted[i]:\n                sorted_matrix[i] = [1 - value for value in sorted_matrix[i]]\n        return sorted_matrix\n\n    def invert_row(matrix, row_index, inverted_rows):\n        if inverted_rows[row_index]:\n            return\n        inverted_rows[row_index] = True\n        matrix[row_index] = [1 - value for value in matrix[row_index]]\n\n    def invert_col(matrix, col_index, inverted_cols):\n        if inverted_cols[col_index]:\n            return\n        inverted_cols[col_index] = True\n        for row in matrix:\n            row[col_index] = 1 - row[col_index]\n\n    n, m = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        row = list(map(int, input().split()))\n        matrix.append(row)\n\n    rows_inverted = [False] * n\n    cols_inverted = [False] * m\n\n    for _ in range(n + m - 1):\n        if not any(rows_inverted) and not any(cols_inverted):\n            break\n\n        sorted_matrix = sort_matrix(matrix, rows_inverted, cols_inverted)\n        if is_sorted(sorted_matrix):\n            matrix = sorted_matrix\n            break\n\n        min_row_index = min(range(n), key=lambda i: sum(matrix[i]))\n        min_col_index = min(range(m), key=lambda j: sum(row[j] for row in matrix))\n\n        invert_row(matrix, min_row_index, rows_inverted)\n        invert_col(matrix, min_col_index, cols_inverted)\n\n    if not is_sorted(matrix):\n        return \"NO\\n\"\n\n    rows_inverted = [str(int(inverted)) for inverted in rows_inverted]\n    cols_inverted = [str(int(inverted)) for inverted in cols_inverted]\n    return \"YES\\n\" + ''.join(rows_inverted) + '\\n' + ''.join(cols_inverted)\n\n\ninput_str = (\n    \"2 2\\n\"\n    \"1 1\\n\"\n    \"0 1\\n\"\n    \"3 4\\n\"\n    \"0 0 0 1\\n\"\n    \"0 0 0 0\\n\"\n    \"1 1 1 1\\n\"\n    \"3 3\\n\"\n    \"0 0 0\\n\"\n    \"1 0 1\\n\"\n    \"1 1 0\\n\"\n    \"3 3\\n\"\n    \"0 0 0\\n\"\n    \"1 0 1\\n\"\n    \"1 1 0\\n\"\n)\n\nprint(solution(input_str)) "
    },
    {
        "number": 4101,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    a = [list(map(int, stdin.split()[2:]))]\n    if any(sum(row) != m for row in a):\n        return \"NO\"\n\n    def sort_matrix(a, r=set(), c=set()):\n        if len(r) == n and len(c) == m:\n            return r, c\n        if not a:\n            return None\n\n        def invert_row(row, i):\n            return [1 - x for x in row]\n\n        def invert_col(col, j):\n            return [x ^ 1 for x in col]\n\n        for i in range(n):\n            for j in range(m):\n                if not r and a[i][j] != 0:\n                    a_inv = invert_row(a[i], i)\n                    r_inv, c_inv = sort_matrix(a_inv, r.union({i}), c)\n                    if r_inv is not None:\n                        return r_inv, c_inv\n\n                if not c and a[i][j] != 1:\n                    a_inv = invert_col(a[j], j)\n                    r_inv, c_inv = sort_matrix(a_inv, r, c.union({j}))\n                    if c_inv is not None:\n                        return r_inv, c_inv\n\n        return None\n\n    r, c = sort_matrix(a)\n    if r is None:\n        return \"NO\"\n    return \"YES\\n\" + \"\".join(str(int(r_inv)) for r_inv in r) + \"\\n\" + \"\".join(str(int(c_inv)) for c_inv in c) "
    },
    {
        "number": 4101,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    a = [[int(x) for x in input().split()] for _ in range(n)]\n\n    def is_sorted(matrix):\n        row_sums = [sum(row) for row in matrix]\n        col_sums = [sum(col) for col in zip(*matrix)]\n        return all(row_sums[i] <= row_sums[i + 1] for i in range(n - 1)) and all(col_sums[i] <= col_sums[i + 1] for i in range(m - 1))\n\n    def invert_row(matrix, i):\n        matrix[i] = [1 - x for x in matrix[i]]\n\n    def invert_col(matrix, j):\n        for i in range(n):\n            matrix[i][j] = 1 - matrix[i][j]\n\n    def perform_operations(matrix, operations):\n        for i, op in enumerate(operations):\n            if op == 'r':\n                invert_row(matrix, i)\n            elif op == 'c':\n                invert_col(matrix, i)\n        return matrix\n\n    # Try to sort the matrix using the greedy algorithm\n    # If it's impossible, the matrix will not be sorted\n    operations = []\n    for _ in range(n + m):\n        if all(row_sums[i] >= row_sums[i + 1] for i in range(n - 1)) and all(col_sums[i] >= col_sums[i + 1] for i in range(m - 1)):\n            break\n        elif n > 1 and all(row_sums[i] < row_sums[i + 1] for i in range(n - 1)):\n            invert_row(a, n - 1)\n            operations.append('r')\n        elif m > 1 and all(col_sums[i] < col_sums[i + 1] for i in range(m - 1)):\n            invert_col(a, m - 1)\n            operations.append('c')\n        else:\n            return \"NO\"\n\n    # Check if the matrix is sorted\n    if is_sorted(perform_operations(a, operations)):\n        return \"YES\\n\" + \"\".join(operations) + \"\\n\" + \"\".join(str(x) for row in a for x in row)\n    else:\n        return \"NO\""
    },
    {
        "number": 4102,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Check if the number is divisible by 3\n    if int(stdin) % 3 == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4102,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Convert the input string to a list of integers\n    digits = [int(d) for d in stdin]\n\n    # Check if the sum of digits is divisible by 3\n    if sum(digits) % 3 == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4102,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Convert the input string to a list of digits\n    digits = list(stdin)\n\n    # Iterate through the digits\n    for i in range(len(digits) - 1):\n        # If the current digit is greater than the next digit, return \"No\"\n        if digits[i] > digits[i + 1]:\n            return \"No\"\n\n    # If all digits are in ascending order, return \"Yes\"\n    return \"Yes\" "
    },
    {
        "number": 4102,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Convert the input string into a list of integers\n    digits = [int(d) for d in stdin]\n    \n    # Check if the first and last digits are the same\n    if digits[0] == digits[-1]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4102,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    digits = list(stdin)\n    n = len(digits)\n    count = 0\n    for i in range(n):\n        if digits[i] == digits[(i + 1) % n]:\n            count += 1\n    if count >= 2:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    if int(stdin) % 3 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ninput_string = input()\nresult = solution(input_string)\nprint(result) "
    },
    {
        "number": 4102,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(len(stdin)):\n        for j in range(i+1, len(stdin)):\n            if stdin[i] == stdin[j]:\n                return \"Yes\"\n    return \"No\" "
    },
    {
        "number": 4102,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Convert the string of digits to a list of integers\n    digits = list(map(int, stdin))\n\n    # Iterate through the list of digits\n    for i in range(len(digits)):\n        # Check if the current digit is equal to the sum of the digits to its right\n        if digits[i] == sum(digits[i+1:]):\n            return \"Yes\"\n\n    return \"No\" "
    },
    {
        "number": 4102,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Check if the number is divisible by 3 and 4\n    if int(stdin) % 3 == 0 and int(stdin) % 4 == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4102,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    if n == 1:\n        return \"No\"\n    for i in range(n-1):\n        if stdin[i] == '4' and stdin[i+1] == '3':\n            return \"Yes\"\n    return \"No\" "
    },
    {
        "number": 4103,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, input().split())\n    s = list(map(int, input().split()))\n\n    max_segments = 0\n    battery_used = 0\n    accumulator_used = 0\n\n    for i in range(1, n + 1):\n        if s[i - 1] == 1:\n            if battery_used < b:\n                battery_used += 1\n                max_segments += 1\n            elif accumulator_used < a:\n                accumulator_used += 1\n                max_segments += 1\n\n    return max_segments\n"
    },
    {
        "number": 4103,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    n, b, a = map(int, input_list[0].split())\n    s = list(map(int, input_list[1].split()))\n\n    max_segments = 0\n    accumulator_charge = 0\n\n    for i in range(n):\n        if s[i] == 1:\n            if accumulator_charge < a:\n                max_segments += 1\n                accumulator_charge += 1\n            else:\n                break\n        else:\n            if b > 0:\n                max_segments += 1\n                b -= 1\n            else:\n                break\n\n    return str(max_segments)\n"
    },
    {
        "number": 4103,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, input().split())\n    s = list(map(int, input().split()))\n\n    battery_count, accumulator_count = 0, 0\n    max_count = 0\n\n    for i in range(n):\n        if s[i] == 1:\n            if b >= 1:\n                b -= 1\n                accumulator_count += 1\n            else:\n                break\n        else:\n            if accumulator_count >= 1:\n                accumulator_count -= 1\n                max_count += 1\n\n    return max_count\n\n\ndef"
    },
    {
        "number": 4103,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split()[:3])\n    s = list(map(int, stdin.split()[3:]))\n\n    max_segments = 0\n    for i in range(1, n):\n        if s[i] == 1:  # if segment is exposed to sunlight\n            if b > 0:  # if battery has charge\n                b -= 1\n                max_segments += 1\n            elif a > 0:  # if accumulator has charge\n                a -= 1\n                max_segments += 1\n                b = a + 1\n        else:\n            if b > 0:  # if battery has charge\n                b -= 1\n                max_segments += 1\n            elif a > 0:  # if accumulator has charge\n                a -= 1\n                max_segments += 1\n                b = a + 1\n\n    return str(max_segments)\n"
    },
    {
        "number": 4103,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, input().split())\n    s = list(map(int, input().split()))\n\n    max_segments = 0\n    battery_charge = b\n    accumulator_charge = a\n\n    for i in range(n):\n        if accumulator_charge == 0:\n            break\n\n        if s[i] == 1 and battery_charge > 0:\n            max_segments += 1\n            battery_charge -= 1\n            accumulator_charge += 1\n        elif battery_charge > 0:\n            max_segments += 1\n            battery_charge -= 1\n        elif accumulator_charge > 0:\n            max_segments += 1\n            accumulator_charge -= 1\n\n    return max_segments\n\ndef"
    },
    {
        "number": 4103,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n, b, a = map(int, input_list[0].split())\n    s = list(map(int, input_list[1].split()))\n\n    max_segments = 0\n    battery_charge = b\n    accumulator_charge = a\n\n    for i in range(1, n + 1):\n        if s[i - 1] == 1:\n            if battery_charge > 0:\n                battery_charge -= 1\n                accumulator_charge += 1\n            else:\n                accumulator_charge += 1\n        else:\n            if accumulator_charge > 0:\n                accumulator_charge -= 1\n            else:\n                accumulator_charge += 1\n\n        max_segments += 1\n\n    return str(max_segments)\n\n\ninput_data = \"\"\"5 2 1\n0 1 0 1 0\"\"\"\n\nprint(solution(input_data))\n\ninput_data = \"\"\"6 2 1\n1 0 0 1 0 1\"\"\"\n\nprint(solution(input_data)) "
    },
    {
        "number": 4103,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split()[:3])\n    s = list(map(int, stdin.split()[3:]))\n    \n    battery_count = 0\n    accumulator_count = 0\n    max_count = 0\n    \n    for i in range(n):\n        if s[i] == 1:\n            if battery_count < b:\n                battery_count += 1\n            else:\n                accumulator_count += 1\n                if accumulator_count > a:\n                    break\n        else:\n            accumulator_count += 1\n            if accumulator_count > a:\n                break\n        max_count = max(max_count, i+1)\n    \n    return str(max_count)"
    },
    {
        "number": 4103,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split()[:3])\n    s = list(map(int, stdin.split()[3:]))\n\n    max_segments = 0\n    battery_used = 0\n    accumulator_used = 0\n\n    for i in range(n):\n        if battery_used < b and accumulator_used < a and s[i] == 1:\n            battery_used += 1\n            accumulator_used += 1\n        elif battery_used > 0:\n            battery_used -= 1\n        elif accumulator_used > 0:\n            accumulator_used -= 1\n\n        max_segments += 1\n\n    return str(max_segments)\n\nn = 6\nb = 2\na = 1\ns = [1, 0, 0, 1, 0, 1]\n\nprint(solution(f\"{n} {b} {a} {' '.join(map(str, s))}\")) "
    },
    {
        "number": 4103,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split()[:3])\n    s = list(map(int, stdin.split()[3:]))\n    result = 0\n    \n    for i in range(n):\n        if s[i]:\n            b -= 1\n            if b >= 0:\n                result += 1\n            else:\n                a -= 1\n                if a >= 0:\n                    result += 1\n                else:\n                    break\n        else:\n            a -= 1\n            if a >= 0:\n                result += 1\n            else:\n                break\n    \n    return str(result)\n\n\ninput_string = '''5 2 1\n0 1 0 1 0'''\n\nprint(solution(input_string)) "
    },
    {
        "number": 4103,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def find_max_segments(n: int, b: int, a: int, s: List[int]) -> int:\n        max_segments = 0\n        battery_charge = b\n        accumulator_charge = a\n\n        for i in range(n):\n            if s[i] == 1:\n                if battery_charge > 0:\n                    battery_charge -= 1\n                    accumulator_charge += 1\n                    max_segments += 1\n                else:\n                    accumulator_charge -= 1\n                    max_segments += 1\n            else:\n                if accumulator_charge > 0:\n                    accumulator_charge -= 1\n                    max_segments += 1\n\n        return max_segments\n\n    n, b, a = map(int, stdin.split()[:3])\n    s = list(map(int, stdin.split()[3:]))\n\n    max_segments = find_max_segments(n, b, a, s)\n\n    return str(max_segments)\n\n\ninput_data = '''5 2 1\n0 1 0 1 0\n6 2 1\n1 0 0 1 0 1\n'''\n\nfor data in input_data.strip().split('\\n'):\n    print(solution(data)) "
    },
    {
        "number": 4104,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input into operands and operators\n    operands = [int(operand) for operand in stdin.split()]\n    operators = [operator for operator in stdin if operator in \"+-\"]\n\n    # Apply the operators in order\n    result = operands[0]\n    for i in range(len(operators)):\n        if operators[i] == \"+\":\n            result += operands[i + 1]\n        elif operators[i] == \"-\":\n            result -= operands[i + 1]\n\n    return str(result)\n"
    },
    {
        "number": 4104,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    import operator\n\n    operators = {\n        '+': operator.add,\n        '-': operator.sub,\n    }\n\n    def evaluate(expression: str):\n        stack = []\n        tokens = expression.split()\n\n        for token in tokens:\n            if token.isdigit():\n                stack.append(int(token))\n            else:\n                if len(stack) < 2:\n                    return None\n\n                b = stack.pop()\n                a = stack.pop()\n                stack.append(operators[token](a, b))\n\n        return stack[0]\n\n    result = evaluate(stdin)\n    if result is None:\n        return \"Error: invalid expression\"\n    else:\n        return str(result)\n"
    },
    {
        "number": 4104,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def evaluate(expression: str) -> int:\n        stack = []\n        for char in expression:\n            if char.isdigit():\n                stack.append(char)\n            else:\n                b = stack.pop()\n                a = stack.pop()\n                if char == '+':\n                    stack.append(int(a) + int(b))\n                elif char == '-':\n                    stack.append(int(a) - int(b))\n                else:\n                    stack.append(int(b) * int(a))\n        return int(stack[0])\n\n    expression = stdin.split()\n    result = evaluate(expression)\n    return str(result)"
    },
    {
        "number": 4104,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    try:\n        result = eval(stdin)\n        return str(result)\n    except:\n        return \"SyntaxError: invalid syntax\"\n\ndef"
    },
    {
        "number": 4104,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input string by plus and minus signs, and convert each operand to an integer\n    operands = [int(operand) for operand in stdin.split('+')]\n    operands += [int(operand) for operand in stdin.split('-') if operand]\n\n    # Evaluate the expression using the order of operations\n    result = 0\n    negative = False\n    for operand in operands:\n        if operand == 0:\n            continue\n        if negative:\n            operand *= -1\n        result += operand\n        negative = False\n        if result > 255:\n            result %= 256\n\n    # Check for negative result and return the appropriate output\n    if result == 0:\n        return '0'\n    if result > 128:\n        return str(-256 + result)\n    else:\n        return str(result) "
    },
    {
        "number": 4104,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def evaluate(expression: str) -> int:\n        stack = []\n        for char in expression:\n            if char.isdigit():\n                stack.append(int(char))\n            elif char == '+':\n                stack.append(stack.pop() + stack.pop())\n            elif char == '-':\n                stack.append(stack.pop() - stack.pop())\n        return stack[0]\n\n    expression = stdin.replace('+', '+ ').replace('-', '- ').split()\n    result = evaluate(expression)\n    return str(result)\n"
    },
    {
        "number": 4104,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    expression = stdin.split()\n    result = 0\n    for i, char in enumerate(expression):\n        if char.isdigit():\n            result += int(char)\n        elif char == '+':\n            pass\n        elif char == '-':\n            result -= 1\n        else:\n            result += ord(char)\n    return str(result)\n"
    },
    {
        "number": 4104,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    try:\n        return eval(stdin)\n    except:\n        return \"Invalid input\""
    },
    {
        "number": 4104,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    try:\n        result = eval(stdin)\n        return str(result)\n    except:\n        return \"Invalid expression\" "
    },
    {
        "number": 4104,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def evaluate(expr: str) -> int:\n        stack = []\n        for char in expr:\n            if char.isdigit():\n                stack.append(char)\n            else:\n                if len(stack) < 2:\n                    return \"Error: not enough operands\"\n                else:\n                    right_op = int(stack.pop())\n                    left_op = int(stack.pop())\n                    if char == '+':\n                        stack.append(left_op + right_op)\n                    elif char == '-':\n                        stack.append(left_op - right_op)\n                    else:\n                        return \"Error: invalid operator\"\n        if len(stack) != 1:\n            return \"Error: not enough operands\"\n        else:\n            return stack.pop()\n\n    expr = stdin.strip()\n    result = evaluate(expr)\n    return result\n"
    },
    {
        "number": 4105,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split()\n    n, k = map(int, input_data)\n    pairs = [(i, (i + 1) % n) for i in range(n)]\n    \n    def check_pairs(pairs, colors):\n        for i in range(n):\n            for j in range(n):\n                if i != j and colors[pairs[i][0]] == colors[pairs[j][0]] and colors[pairs[i][1]] == colors[pairs[j][1]]:\n                    return False\n        return True\n    \n    def check_colors(colors):\n        for i in range(n - 1):\n            if colors[pairs[i][0]] == colors[pairs[i + 1][0]] or colors[pairs[i][1]] == colors[pairs[i + 1][1]]:\n                return False\n        return True\n    \n    def find_colors():\n        colors = [i + 1 for i in range(k)]\n        for _ in range(n):\n            random.shuffle(colors)\n            if check_pairs(pairs, colors) and check_colors(colors):\n                return colors\n        return None\n    \n    colors = find_colors()\n    if colors is None:\n        return \"NO\"\n    else:\n        return \"YES\\n\" + \"\\n\".join(f\"{colors[pair[0]]} {colors[pair[1]]}\" for pair in pairs)"
    },
    {
        "number": 4105,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < 2 or k < 2:\n        return \"NO\"\n    colors = [str(i + 1) for i in range(k)]\n    if n > len(colors):\n        return \"NO\"\n    pairs = [colors.pop(0) for _ in range(n)]\n    return \"YES\\n\" + \"\\n\".join(pairs)\n"
    },
    {
        "number": 4105,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1 or k == 1:\n        return \"NO\"\n    else:\n        for i in range(1, k):\n            if i == k - 1:\n                return \"NO\"\n            else:\n                for j in range(i + 1, k):\n                    if j == k - 1:\n                        return \"NO\"\n                    else:\n                        for l in range(j + 1, k):\n                            if l == k - 1:\n                                return \"NO\"\n                            else:\n                                for m in range(l + 1, k):\n                                    if m == k - 1:\n                                        return \"NO\"\n        return \"YES\""
    },
    {
        "number": 4105,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    color_choices = [i for i in range(1, k + 1)]\n    \n    if n < 2 or k < 2:\n        return \"NO\"\n\n    # Check for repeated pairs\n    pairs = [(i, i + 1) for i in range(1, n, 2)]\n    for pair in pairs:\n        if pair[0] == pair[1]:\n            return \"NO\"\n\n    # Check for repeated colors\n    colors = set()\n    for i in range(1, n + 1):\n        man_color = color_choices.pop(0)\n        woman_color = color_choices.pop(0)\n        if man_color == woman_color:\n            return \"NO\"\n        colors.add((man_color, woman_color))\n\n    # Check for adjacent pairs with same colors\n    for i in range(1, n - 1):\n        if pairs[i][1] == pairs[i + 1][0]:\n            return \"NO\"\n\n    return \"YES\" + \"\\n\" + \"\\n\".join(map(str, colors))"
    },
    {
        "number": 4105,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n\n    if n < 4 or k < 2:\n        return \"NO\"\n\n    colors = set(range(1, k + 1))\n    b_list = [0] * n\n    g_list = [0] * n\n\n    for i in range(n):\n        b_list[i], g_list[i] = map(int, input().split())\n\n    for i in range(n - 1):\n        if b_list[i] == b_list[i + 1] and g_list[i] == g_list[i + 1]:\n            return \"NO\"\n\n    for i in range(n - 2):\n        if b_list[i] == b_list[i + 2] or g_list[i] == g_list[i + 2]:\n            return \"NO\"\n\n    b_set = set(b_list)\n    g_set = set(g_list)\n\n    if len(b_set.intersection(g_set)) != 0:\n        return \"NO\"\n\n    for i in range(n):\n        if b_list[i] not in colors or g_list[i] not in colors:\n            return \"NO\"\n\n    return \"YES\" + \"\\n\" + \"\\n\".join([f\"{b} {g}\" for b, g in zip(b_list, g_list)])\n"
    },
    {
        "number": 4105,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    colors = set(range(1, k + 1))\n    pairs = []\n\n    def is_valid(pairs):\n        for i in range(len(pairs) - 1):\n            if pairs[i][0] == pairs[i + 1][0] or pairs[i][1] == pairs[i + 1][1]:\n                return False\n        return True\n\n    def is_valid_color_choosing(pairs):\n        for i in range(len(pairs)):\n            if pairs[i][0] not in colors or pairs[i][1] not in colors:\n                return False\n        return True\n\n    while len(pairs) < n:\n        pairs.append([colors.pop(), colors.pop()])\n\n    if not is_valid(pairs):\n        return \"NO\"\n\n    if not is_valid_color_choosing(pairs):\n        return \"NO\"\n\n    return \"YES\\n\" + \"\\n\".join([\" \".join(map(str, pair)) for pair in pairs])\n"
    },
    {
        "number": 4105,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n\n    # Check if it's impossible to find a suitable color choosing\n    if n % 2 == 1 or n * k < 2 * n:\n        return \"NO\"\n\n    # Generate a suitable color choosing\n    pairs = []\n    for i in range(1, n + 1):\n        pair = [randint(1, k), randint(1, k)]\n        while pair in pairs:\n            pair = [randint(1, k), randint(1, k)]\n        pairs.append(pair)\n\n    return \"YES\" + \"\\n\" + \"\\n\".join([\" \".join(map(str, pair)) for pair in pairs])\n"
    },
    {
        "number": 4105,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1:\n        return \"YES\\n1 1\"\n    for i in range(n - 1):\n        if k < 3 or k % 3 == 0:\n            return \"NO\"\n        if i % 2 == 0:\n            k -= 1\n        else:\n            k -= 2\n    return \"YES\\n\" + \"\\n\".join([f\"{i+1} {k}\" for i in range(n)])\n"
    },
    {
        "number": 4105,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < 2 or k < 2 or n > 2 * 10**5 or k > 2 * 10**5:\n        return \"NO\"\n\n    # Find a suitable color choosing\n    for i in range(1, k + 1):\n        for j in range(1, k + 1):\n            if i == j:\n                continue\n\n            for l in range(1, k + 1):\n                if l == i or l == j:\n                    continue\n\n                for m in range(1, k + 1):\n                    if m == i or m == j or m == l:\n                        continue\n\n                    # Check if there are any two completely identical pairs\n                    found_duplicate = False\n                    for p in range(1, n):\n                        if (p + 1) % n == 0:\n                            pair1 = (p + 1) % n + 1\n                        else:\n                            pair1 = p + 1\n                        if (p + 2) % n == 0:\n                            pair2 = (p + 2) % n + 1\n                        else:\n                            pair2 = p + 2\n                        if i == j or l == m:\n                            continue\n                        if (i, j) == (pair1, pair2) or (i, j) == (pair2, pair1):\n                            found_duplicate = True\n                            break\n                    if found_duplicate:\n                        continue\n\n                    # Check if there is no pair such that the color of the man's costume is the same as the color of the woman's costume\n                    found_mismatch = False\n                    for p in range(1, n):\n                        if (p + 1) % n == 0:\n                            pair1 = (p + 1) % n + 1\n                        else:\n                            pair1 = p + 1\n                        if (p + 2) % n == 0:\n                            pair2 = (p + 2) % n + 1\n                        else:\n                            pair2 = p + 2\n                        if i == j or l == m:\n                            continue\n                        if (i, j) == (pair1, pair2) or (i, j) == (pair2, pair1):\n                            found_mismatch = True\n                            break\n                    if found_mismatch:\n                        continue\n\n                    # Check if there are two consecutive pairs such that colors of costumes of men/women are the same\n                    found_mismatch = False\n                    for p in range(1, n - 1):\n                        if (p + 1) % n == 0:\n                            pair1 = (p + 1) % n + 1\n                        else:\n                            pair1 = p + 1\n                        if (p + 2) % n == 0:\n                            pair2 = (p + 2) % n + 1\n                        else:\n                            pair2 = p + 2\n                        if i == j or l == m:\n                            continue\n                        if (i, j) == (pair1, pair2) or (i, j) == (pair2, pair1):\n                            found_mismatch = True\n                            break\n                    if found_mismatch:\n                        continue\n\n                    return \"YES\\n\" + f\"{i} {j}\\n{l} {m}\\n{k} {k}\\n{k} {k}\"\n\n    return \"NO\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    \n    if n == 1:\n        return \"YES\\n1 1\"\n    \n    for i in range(1, k+1):\n        if sum(1 for j in range(1, n+1) if (j+1 <= n and i == (j+1)%k) or (j-1 >= 1 and i == (j-1)%k)) % 2 == 0:\n            return \"NO\"\n    \n    colors = list(range(1, k+1))\n    result = [\"YES\"]\n    \n    for i in range(n):\n        result.append(str(colors[i] if i%2 == 0 else colors[i-1]))\n        result.append(str(colors[i] if i%2 == 1 else colors[i-1]))\n    \n    return '\\n'.join(result)\n"
    },
    {
        "number": 4106,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n, k, x = map(int, input_list[0].split())\n    a = list(map(int, input_list[1].split()))\n\n    if k > n:\n        return -1\n\n    reposted_pictures = []\n    count = 0\n\n    for i in range(n - k + 1):\n        if count >= x:\n            break\n        max_sum = 0\n        temp_list = a[i:i+k]\n        for j in range(k):\n            temp_sum = sum(temp_list[:j+1])\n            if temp_sum > max_sum:\n                max_sum = temp_sum\n        if max_sum not in reposted_pictures:\n            reposted_pictures.append(max_sum)\n            count += 1\n\n    return sum(reposted_pictures) if count == x else -1\n"
    },
    {
        "number": 4106,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def max_sum(arr, x, k):\n        n = len(arr)\n        dp = [[0] * (n + 1) for _ in range(k + 1)]\n        for i in range(1, n + 1):\n            for j in range(1, k + 1):\n                if i - j < 0:\n                    dp[j][i] = 0\n                elif j == 1:\n                    dp[j][i] = arr[i - 1]\n                else:\n                    dp[j][i] = max(dp[j][i - 1], dp[j - 1][i - 1] + arr[i - 1])\n        return dp[k][n]\n\n    def can_repost(arr, x, k):\n        n = len(arr)\n        dp = [False] * (n + 1)\n        dp[0] = True\n        for i in range(1, n + 1):\n            for j in range(k, i - 1, -1):\n                if dp[i - j] and i - j >= 0:\n                    dp[i] = True\n                    break\n        return dp[n]\n\n    n, k, x = map(int, input().split())\n    arr = list(map(int, input().split()))\n    repost_sum = max_sum(arr, x, k)\n    can_repost_success = can_repost(arr, x, k)\n    if can_repost_success:\n        return str(repost_sum)\n    else:\n        return \"-1\"\n"
    },
    {
        "number": 4106,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split()[:3])\n    a = list(map(int, stdin.split()[3:]))\n\n    if k > n:\n        return \"-1\"\n\n    # Find the maximum number of reposts that can be made within the constraints\n    max_reposts = (n - k) // (k - 1)\n\n    if x > max_reposts:\n        return \"-1\"\n\n    # Calculate the maximum sum of values of reposted pictures\n    a.sort(reverse=True)\n    total_sum = sum(a[:x])\n\n    return str(total_sum)\n\n\ndef"
    },
    {
        "number": 4106,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    n, k, x = map(int, input_data[0].split())\n    a = list(map(int, input_data[1].split()))\n\n    if x > n:\n        return -1\n\n    min_sum = sum(a[:x])\n    for i in range(n - x + 1):\n        if a[i + x - 1] - a[i] >= k:\n            sum_val = sum(a[i:i+x])\n            min_sum = max(min_sum, sum_val)\n\n    return min_sum\n\n\nstdin_input = \"\"\"5 2 3\n5 1 3 10 1\n\"\"\"\n\nprint(solution(stdin_input)) "
    },
    {
        "number": 4106,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n, k, x = map(int, input_list[0].split())\n    a = list(map(int, input_list[1].split()))\n\n    if k == 1:\n        return sum(a)\n\n    reposted = [False] * n\n    max_sum = float('-inf')\n\n    for i in range(n - x + 1):\n        sum_k_pictures = sum(a[i:i + x])\n        if sum_k_pictures == k:\n            for j in range(i, i + x):\n                reposted[j] = True\n\n        elif sum_k_pictures > k:\n            return -1\n\n        max_sum = max(max_sum, sum(a[i:i + x][reposted[i:i + x]]))\n\n    return max_sum\n"
    },
    {
        "number": 4106,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split()[:3])\n    a = list(map(int, stdin.split()[3:]))\n    \n    if x >= n:\n        return sum(a)\n    \n    if k == 1:\n        return sum(a[:x])\n    \n    dp = [0] * (n + 1)\n    dp[0] = 0\n    for i in range(n):\n        if i + k <= n:\n            dp[i + k] = max(dp[i + k], dp[i] + a[i])\n    \n    return dp[n]\n"
    },
    {
        "number": 4106,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n, k, x = map(int, input_list[0].split())\n    a = list(map(int, input_list[1].split()))\n\n    def is_valid(reposted_indices):\n        for i in range(n - k + 1):\n            segment = a[i:i + k]\n            if i not in reposted_indices and any(a[i + j] - a[i] <= 1 for j in range(k)):\n                return False\n        return True\n\n    def count_sum(reposted_indices):\n        return sum(a[i] for i in reposted_indices)\n\n    reposted_indices = [i for i in range(n)]\n    for i in range(n - x + 1):\n        if a[i] - a[i + x] <= 1:\n            reposted_indices[i:i + x] = [i] * x\n            break\n\n    reposted_indices.sort(key=lambda i: a[i], reverse=True)\n\n    for i in range(x):\n        if a[reposted_indices[i]] - a[reposted_indices[i + 1]] <= 1:\n            reposted_indices[i:i + k:k - 1] = [reposted_indices[i]] * (k - 1)\n            break\n\n    if not is_valid(reposted_indices[:x]):\n        return -1\n\n    return count_sum(reposted_indices[:x])"
    },
    {
        "number": 4106,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin.split('\\n')\n    n, k, x = map(int, input_str[0].split())\n    a = list(map(int, input_str[1].split()))\n    \n    if k > n:\n        return -1\n    \n    total_sum = sum(a[:k])\n    max_sum = total_sum\n    \n    for i in range(n - k):\n        total_sum += a[i + k] - a[i]\n        max_sum = max(max_sum, total_sum)\n    \n    return max_sum\n"
    },
    {
        "number": 4106,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split()[:3])\n    a = list(map(int, stdin.split()[3:]))\n\n    # Initialize the dp array\n    dp = [0] * (n + 1)\n    dp[0] = -1e9\n\n    # Initialize the prefix sum array\n    prefix_sum = [0] * (n + 1)\n    prefix_sum[0] = 0\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + a[i - 1]\n\n    # Fill the dp array\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1]\n        for j in range(i - k, i):\n            if j >= 0:\n                dp[i] = max(dp[i], dp[j] + prefix_sum[i] - prefix_sum[j])\n\n    # Check if there is a way to repost some pictures to satisfy all the conditions\n    if dp[n] == -1e9:\n        return -1\n\n    # Calculate the maximum sum of values of reposted pictures\n    max_sum = 0\n    for i in range(n - x + 1):\n        max_sum = max(max_sum, dp[i + x - 1])\n\n    return max_sum\n"
    },
    {
        "number": 4106,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split()[:3])\n    a = list(map(int, stdin.split()[3:]))\n\n    # Calculate the maximum sum of reposted pictures\n    max_sum = sum(sorted(a, reverse=True)[:x])\n\n    # Check if it's possible to satisfy all conditions\n    if k > 1:\n        reposts = [0] * (n - k + 1)\n        for i in range(n):\n            for j in range(min(i + k, n)):\n                if i != j:\n                    reposts[j - k + 1] += a[i]\n\n        if sum(reposts) >= max_sum:\n            max_sum = sum(reposts)\n        else:\n            return -1\n\n    return max_sum\n"
    },
    {
        "number": 4107,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    rooms_with_router_spot = [c == '1' for c in input().split()]\n\n    total_cost = 0\n    for i in range(n):\n        if rooms_with_router_spot[i]:\n            min_range = max(1, i - k)\n            max_range = min(n, i + k)\n            total_cost += sum(range(min_range, max_range + 1))\n        else:\n            total_cost += i\n\n    return str(total_cost)\n\n\ninput_stdin = \"\"\"5 2\n00100\n\"\"\"\n\nprint(solution(input_stdin)) "
    },
    {
        "number": 4107,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    room_with_router = [int(c) for c in input().split()]\n\n    min_cost = sum(i for i in range(1, n + 1))\n    max_cost = sum(i for i in range(1, n + 1))\n\n    for i in range(n):\n        if room_with_router[i]:\n            min_cost = min(min_cost, i)\n            max_cost = max(max_cost, i)\n\n    for i in range(min_cost, max_cost + 1):\n        min_cost += i\n\n    return str(min_cost)"
    },
    {
        "number": 4107,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def get_cost(i: int, k: int) -> int:\n        return i if i <= k else i + k - 1\n\n    n, k = map(int, input().split())\n    rooms = list(map(int, input()))\n\n    total_cost = 0\n    for i, spot in enumerate(rooms):\n        if spot == 1:\n            total_cost += get_cost(i + 1, k)\n\n    return total_cost\n"
    },
    {
        "number": 4107,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    spots = input()\n\n    spot_indices = [i for i, spot in enumerate(spots) if spot == '1']\n    cost_direct = sum(i for i in range(1, n + 1))\n    cost_router = sum(i for i in range(1, k + 1)) * len(spot_indices)\n    cost_between = sum(max(1, i - k) + min(n, i + k) - 1 for i in spot_indices)\n    return cost_direct + cost_router + cost_between\n\n\nn, k = map(int, input().split())\nspots = input()\nprint(solution(n, k, spots))\n"
    },
    {
        "number": 4107,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    router_spots = [int(x) for x in input().split()]\n    \n    min_cost = sum(i for i in range(1, n+1))\n    for spot in range(n):\n        if router_spots[spot] == '1':\n            min_cost = min(min_cost, sum(i for i in range(max(1, spot-k), spot+k+1)))\n    \n    return str(min_cost)\n\nn = 12\nk = 6\ninput_str = \"000010000100\\n\"\nprint(solution(input_str)) # Output: 15 "
    },
    {
        "number": 4107,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n, k = map(int, input_list[0].split())\n    room_list = list(input_list[1])\n\n    min_cost = float('inf')\n    for i in range(n):\n        if room_list[i] == '1':\n            min_cost = min(min_cost, i)\n\n    if min_cost == float('inf'):\n        return 0\n\n    for i in range(n):\n        if room_list[i] == '1':\n            min_cost = min(min_cost, i + k)\n\n    return min_cost"
    },
    {
        "number": 4107,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    spots = input()\n    min_cost = 0\n    \n    for i in range(n):\n        if spots[i] == '1':\n            min_cost += i\n        elif i > 0 and spots[i-1] == '1':\n            min_cost += i\n        else:\n            min_cost += i\n    \n    for i in range(n):\n        if spots[i] == '1':\n            for j in range(max(1, i-k), min(n, i+k)+1):\n                if spots[j] == '1' and j != i:\n                    min_cost += abs(i - j)\n    \n    return min_cost\n"
    },
    {
        "number": 4107,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    rooms = list(map(int, input()))\n\n    min_cost = float('inf')\n\n    for i in range(n):\n        if rooms[i] == 1:\n            min_cost = min(min_cost, i)\n\n    if min_cost == float('inf'):\n        min_cost = 0\n\n    for i in range(n):\n        if rooms[i] == 1:\n            min_cost = min(min_cost, i + k)\n\n    return min_cost\n"
    },
    {
        "number": 4107,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    rooms = list(stdin.split()[2])\n    \n    router_cost = 0\n    direct_cost = 0\n    \n    for i in range(n):\n        if rooms[i] == '1':\n            router_cost += i\n            direct_cost += n - i - 1\n            \n    if n - 1 - k >= k and rooms[n-1-k] == '1':\n        router_cost += n - 1 - k\n        direct_cost += k\n    elif n - 1 - k < k and rooms[n-1-k] == '1':\n        router_cost += n - 1 - k\n        \n    if n - 1 + k >= k and rooms[n-1+k] == '1':\n        router_cost += n - 1 + k\n        direct_cost += k\n    elif n - 1 + k < k and rooms[n-1+k] == '1':\n        router_cost += n - 1 + k\n        \n    return router_cost + direct_cost"
    },
    {
        "number": 4107,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    rooms = list(map(int, input()))\n\n    min_cost = float('inf')\n\n    for spot_count in range(rooms.count(1) + 1):\n        cost = 0\n        for i, spot in enumerate(rooms):\n            if spot == 1:\n                spot_range = list(range(max(1, i - k), min(n, i + k) + 1))\n                cost += sum(spot_range)\n        min_cost = min(min_cost, cost)\n\n    return str(min_cost)\n"
    },
    {
        "number": 4108,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split('\\n')\n    S = S.replace('a', 'b').replace('b', 'a')\n    T = T.replace('a', 'b').replace('b', 'a')\n    return 'Yes' if S == T else 'No'\n"
    },
    {
        "number": 4108,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split(\"\\n\")\n    if S == T:\n        return \"Yes\"\n\n    alphabet = \"abcdefghijklmnopqrtsuvwxyz\"\n    for c_1, c_2 in itertools.combinations(alphabet, 2):\n        s = \"\"\n        for char in S:\n            if char == c_1:\n                s += c_2\n            elif char == c_2:\n                s += c_1\n            else:\n                s += char\n        if s == T:\n            return \"Yes\"\n\n    return \"No\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split(\"\\n\")\n    if len(S) != len(T):\n        return \"No\"\n\n    def replace_chars(s: str, c1: str, c2: str) -> str:\n        return \"\".join(c2 if c == c1 else c1 for c in s)\n\n    for c1, c2 in zip(S, T):\n        if c1 != c2:\n            if S.count(c1) != T.count(c1) or S.count(c2) != T.count(c2):\n                return \"No\"\n            S = replace_chars(S, c1, c2)\n            T = replace_chars(T, c1, c2)\n\n    return \"Yes\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S, T = map(str.strip, stdin.split('\\n'))\n    \n    if len(S) != len(T):\n        return \"No\"\n    \n    # If S and T are the same, we can simply return \"Yes\"\n    if S == T:\n        return \"Yes\"\n    \n    # Count the number of occurrences of each character in S and T\n    char_counts = {}\n    for i in range(len(S)):\n        if S[i] not in char_counts:\n            char_counts[S[i]] = 0\n        char_counts[S[i]] += 1\n        \n        if T[i] not in char_counts:\n            char_counts[T[i]] = 0\n        char_counts[T[i]] -= 1\n    \n    # If we can swap characters to make them equal, we can return \"Yes\"\n    for char in char_counts:\n        if char_counts[char] != 0:\n            return \"Yes\"\n    \n    return \"No\""
    },
    {
        "number": 4108,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split(\"\\n\")\n    S_len = len(S)\n    T_len = len(T)\n\n    if S_len != T_len:\n        return \"No\"\n\n    S_dict = {}\n    T_dict = {}\n\n    for i in range(S_len):\n        if S[i] not in S_dict:\n            S_dict[S[i]] = 1\n        else:\n            S_dict[S[i]] += 1\n\n        if T[i] not in T_dict:\n            T_dict[T[i]] = 1\n        else:\n            T_dict[T[i]] += 1\n\n    if S_dict != T_dict:\n        return \"No\"\n\n    return \"Yes\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    return 'Yes' if s == t else 'No'\n\ndef"
    },
    {
        "number": 4108,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n\n    # Create a dictionary to store the frequency of each character in S\n    freq_s = {}\n    for char in S:\n        if char in freq_s:\n            freq_s[char] += 1\n        else:\n            freq_s[char] = 1\n\n    # Iterate through T, swapping characters if necessary\n    for char in T:\n        if char in freq_s and freq_s[char] > 0:\n            freq_s[char] -= 1\n        else:\n            for key, value in freq_s.items():\n                if value > 0:\n                    freq_s[key] -= 1\n                    freq_s[char] += 1\n                    break\n\n    # Check if S and T are equal\n    if S == T:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4108,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split('\\n')\n    if len(S) != len(T):\n        return \"No\"\n\n    def replace(s: str, c1: str, c2: str) -> str:\n        return s.replace(c1, c2).replace(c2, c1)\n\n    for c1 in S:\n        for c2 in S:\n            if c1 == c2:\n                continue\n            if replace(S, c1, c2) == T:\n                return \"Yes\"\n\n    return \"No\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S, T = map(str, stdin.split())\n\n    def replace_chars(s: str, c_1: str, c_2: str) -> str:\n        return s.replace(c_1, c_2).replace(c_2, c_1)\n\n    # Perform the operation on S until S and T are equal\n    while S != T:\n        S = replace_chars(S, S[0], S[1])\n\n    return \"Yes\" if S == T else \"No\""
    },
    {
        "number": 4108,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.split('\\n')[0]\n    T = stdin.split('\\n')[1]\n\n    for c_1 in S:\n        for c_2 in S:\n            if c_1 != c_2:\n                temp_S = S.replace(c_1, c_2)\n                temp_S = temp_S.replace(c_2, c_1)\n                if temp_S == T:\n                    return \"Yes\"\n\n    return \"No\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def read_int():\n        return int(read_str().strip())\n\n    def read_str():\n        return stdin.readline()\n\n    N, M, X = read_int(), read_int(), read_int()\n    C = [read_int() for _ in range(N)]\n    A = [[read_int() for _ in range(M)] for _ in range(N)]\n\n    dp = [0] * (X + 1)\n    for i in range(N):\n        for j in range(M):\n            dp[max(dp) + A[i][j]] = max(dp) + A[i][j]\n\n    result = min(dp) if max(dp) >= X else -1\n\n    return str(result)\n"
    },
    {
        "number": 4109,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def read_int():\n        return int(read_str().strip())\n\n    def read_str():\n        return stdin.readline().strip()\n\n    N, M = read_int(), read_int()\n    C = [read_int() for _ in range(N)]\n    A = [[read_int() for _ in range(M)] for _ in range(N)]\n\n    # Initialize understanding levels to 0\n    X = [0] * M\n\n    # Determine if the objective is achievable\n    achievable = True\n    min_cost = 0\n    for i in range(N):\n        if sum(X) >= M:\n            break\n        if X[i % M] >= X[(i + 1) % M]:\n            min_cost += C[i]\n            for j in range(M):\n                X[j] += A[i][j]\n        else:\n            achievable = False\n            break\n\n    if achievable:\n        return f\"{min_cost}\"\n    else:\n        return \"Impossible\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def check_achievable(M: int, C: list, A: list) -> bool:\n        max_level = [0] * M\n        for i, c in enumerate(C):\n            for j, a in enumerate(A):\n                max_level[j] = max(max_level[j], max_level[j] + a)\n            if all(level >= X for level in max_level):\n                return True\n        return False\n\n    def min_amount(M: int, C: list, A: list, X: int) -> int:\n        max_level = [0] * M\n        dp = [0] * (X + 1)\n        dp[0] = 0\n        for i, c in enumerate(C):\n            for j, a in enumerate(A):\n                if max_level[j] + a > X:\n                    continue\n                max_level[j] = max(max_level[j], max_level[j] + a)\n                for k in range(X + 1):\n                    dp[k] = min(dp[k], dp[k - max_level[j] + a] + c)\n        return dp[X]\n\n    M, N = map(int, stdin.split())\n    C = []\n    A = []\n    for _ in range(N):\n        c, m, n = map(int, input().split())\n        C.append(c)\n        A.append([0] * M)\n        for _ in range(m):\n            i, j = map(int, input().split())\n            A[n-1][i-1] = j\n\n    X = int(input())\n    achievable = check_achievable(M, C, A)\n    if achievable:\n        return str(min_amount(M, C, A, X))\n    else:\n        return \"IMPOSSIBLE\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    C = []\n    A = []\n    for i in range(N):\n        C_i, K = map(int, input().split())\n        C.append(C_i)\n        A.append(K)\n\n    def min_change(goal):\n        dp = [float('inf')] * (goal + 1)\n        dp[0] = 0\n        for i in range(N):\n            for j in range(goal, -1, -1):\n                if j >= A[i]:\n                    dp[j] = min(dp[j], dp[j - A[i]] + C[i])\n        return dp[goal] if dp[goal] != float('inf') else -1\n\n    res = min_change(M)\n    if res == -1:\n        return \"It is not possible to achieve a score of X or higher for any value of X.\"\n    else:\n        return f\"The minimum amount of money needed to achieve a score of X or higher is {res}.\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def is_achievable(alg_list, X):\n        # sort the list of algorithms based on their current level\n        alg_list.sort(key=lambda x: x[1])\n        for i in range(len(alg_list)):\n            if alg_list[i][1] < X:\n                return False\n        return True\n\n    def min_cost(alg_list, X):\n        # sort the list of algorithms based on their current level\n        alg_list.sort(key=lambda x: x[1])\n        min_cost = 0\n        for i in range(len(alg_list)):\n            if alg_list[i][1] < X:\n                min_cost += alg_list[i][0]\n            else:\n                break\n        return min_cost\n\n    M, N = map(int, stdin.split())\n    alg_list = []\n    for _ in range(N):\n        C, M_alg, alg_level = map(int, input().split())\n        alg_list.append((C, alg_level, M_alg))\n\n    alg_list.sort(key=lambda x: x[2])\n    for i in range(len(alg_list)):\n        alg_list[i] = (alg_list[i][0], alg_list[i][1] + alg_list[i][2], alg_list[i][2])\n\n    # check if all the M algorithms are achievable with X or higher level\n    if is_achievable(alg_list, M):\n        return min_cost(alg_list, M)\n    else:\n        return \"Impossible\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, input().split())\n    C = list(map(int, input().split()))\n    A = []\n    for _ in range(M):\n        row = list(map(int, input().split()))\n        A.append(row)\n\n    # Calculate the maximum understanding level for each algorithm\n    max_understanding = [0] * M\n    for i in range(N):\n        for j in range(M):\n            max_understanding[j] = max(max_understanding[j], A[j][i] + max_understanding[j])\n\n    # Check if all the algorithms can be understood X or higher\n    min_money = float('inf')\n    for i in range(N):\n        money_spent = 0\n        for j in range(M):\n            if max_understanding[j] >= X:\n                money_spent += C[i]\n            else:\n                break\n        min_money = min(min_money, money_spent)\n\n    if min_money == float('inf'):\n        return \"No\"\n    else:\n        return str(min_money)\n\n\ndef"
    },
    {
        "number": 4109,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    def binary_search(X, A, C, L, R):\n        if L == R:\n            return A[L] * (X - L) + C[L] * L\n        if A[L] >= X:\n            return binary_search(X, A, C, L, R)\n        if A[R] < X:\n            return binary_search(X, A, C, L, R)\n        return min(binary_search(X, A, C, L, mid) + binary_search(X, A, C, mid+1, R),\n                   binary_search(X, A, C, mid+1, R))\n\n    def process(stdin: str) -> str:\n        S, N, M, X = map(int, stdin.split())\n        A = [0] * M\n        C = [0] * N\n        for i in range(N):\n            C[i], *A = map(int, input().split())\n        min_cost = binary_search(X, A, C, 0, N-1)\n        if min_cost >= 0:\n            return \"Yes\"\n        return \"No\"\n\n    answer = []\n    for _ in range(T):\n        answer.append(process(input()))\n    return \"\\n\".join(answer)\n"
    },
    {
        "number": 4109,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    C, A = [], []\n    for _ in range(N):\n        C.append(list(map(int, input().split())))\n        A.append(list(map(int, input().split())))\n    C, A = zip(*C), zip(*A)\n\n    def calc_levels(budget, i):\n        levels = [0] * M\n        for j, value in enumerate(C[i]):\n            for k, alg_increase in enumerate(A[j]):\n                if budget - value >= 0:\n                    budget -= value\n                    levels[k] += alg_increase\n                else:\n                    break\n        return budget, levels\n\n    def check_achievable(levels):\n        return all(level >= X for level in levels)\n\n    max_budget = sum(C[i][0] for i in range(N))\n    min_budget = 0\n    while min_budget <= max_budget:\n        mid_budget = (min_budget + max_budget) // 2\n        levels = [0] * M\n        for i in range(N):\n            mid_budget, new_levels = calc_levels(mid_budget, i)\n            levels = [levels[k] + new_levels[k] for k in range(M)]\n            if not check_achievable(levels):\n                max_budget = mid_budget - 1\n                break\n        else:\n            min_budget = mid_budget + 1\n\n    if min_budget <= max_budget:\n        return f\"Minimum budget needed: {min_budget}\"\n    else:\n        return \"Impossible\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    C = [0] * N\n    A = [[0] * M for _ in range(N)]\n    for i in range(N):\n        C[i], *A[i] = map(int, input().split())\n\n    # Calculate the maximum increase in understanding levels for each algorithm\n    max_increase = [0] * M\n    for i in range(N):\n        for j in range(M):\n            max_increase[j] = max(max_increase[j], A[i][j])\n\n    # Check if the objective is achievable\n    achievable = True\n    for understanding in max_increase:\n        if understanding < M:\n            achievable = False\n            break\n\n    if achievable:\n        # Find the minimum amount of money needed\n        min_money = sum(C)\n        for i in range(N):\n            min_money = min(min_money, C[i])\n    else:\n        min_money = \"IMPOSSIBLE\"\n\n    return str(min_money)\n"
    },
    {
        "number": 4109,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    C = []\n    A = []\n    for _ in range(N):\n        C.append(list(map(int, input().split())))\n    for _ in range(M):\n        A.append(list(map(int, input().split())))\n    dp = [[0 for j in range(M)] for i in range(N)]\n    for i in range(N):\n        for j in range(M):\n            dp[i][j] = C[i][j] + A[i][j] * dp[i-1][j] if i > 0 else C[i][j]\n    max_val = max(dp[N-1])\n    if max_val >= M:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n\ndef"
    },
    {
        "number": 4110,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    D, G, p_i, c_i = 0, 0, [], []\n    n = int(stdin)\n    input_list = stdin.split()\n    for i in range(n):\n        if i % 2 == 0:\n            D, G = int(input_list[i]), int(input_list[i+1])\n        else:\n            p_i.append(int(input_list[i]))\n            c_i.append(int(input_list[i+1]))\n    total_score = 0\n    for i in range(D):\n        total_score += p_i[i] * (100 * i)\n    total_score += sum(c_i)\n    if total_score >= G:\n        return \"0\"\n    min_problems = 0\n    for i in range(D):\n        min_problems += G // (100 * (i+1))\n    return str(min_problems)\n\nD, G = map(int, input().split())\np_i, c_i = [], []\nfor i in range(D):\n    p_i.append(int(input()))\n    c_i.append(int(input()))\n\ntotal_score = sum(p_i[i] * (100 * i) for i in range(D)) + sum(c_i)\n\nmin_problems = 0\nfor i in range(D):\n    min_problems += G // (100 * (i+1))\n\nprint(min_problems) "
    },
    {
        "number": 4110,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    D, G = map(int, input().split())\n    p_i = [0] * (D + 1)\n    c_i = [0] * (D + 1)\n\n    for i in range(1, D + 1):\n        p_i[i], c_i[i] = map(int, input().split())\n\n    # Calculate the base score\n    base_score = 100 * sum(p_i[1:])\n\n    # Calculate the perfect bonus\n    perfect_bonus = sum(c_i[1:])\n\n    # Calculate the minimum number of problems\n    min_problems = (G - base_score) // 100\n\n    # Check if the objective can be achieved\n    if min_problems > 0 and min_problems <= sum(p_i[1:]):\n        return min_problems\n    else:\n        return \"Impossible\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    D, G = map(int, stdin.split())\n    p_list = []\n    c_list = []\n    for _ in range(D):\n        p, c = map(int, input().split())\n        p_list.append(p)\n        c_list.append(c)\n\n    total_base_score = sum([100 * i * p_list[i - 1] for i in range(1, D + 1)])\n    total_perfect_bonus = sum([c_list[i - 1] * p_list[i - 1] for i in range(1, D + 1)])\n\n    # Calculate the total score with perfect bonuses\n    total_score = total_base_score + total_perfect_bonus\n\n    # Calculate the minimum number of problems to solve\n    min_problems = (G - total_score) // 100\n\n    return min_problems\n"
    },
    {
        "number": 4110,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    D, G = map(int, stdin.split()[:2])\n    p_i = [int(stdin.split()[i]) for i in range(2, 2 + D * 2, 2)]\n    c_i = [int(stdin.split()[i]) for i in range(3, 3 + D * 2, 2)]\n    \n    base_score = sum(c_i[:D]) + sum(p_i[D:D*2]*100)\n    perfect_bonus = sum(p_i[D:D*2]*c_i[D])\n    total_score = base_score + perfect_bonus\n    \n    if total_score >= G:\n        return 0\n    \n    min_problems = p_i[D]\n    for i in range(D+1, len(p_i), 2):\n        min_problems += p_i[i]\n        base_score += p_i[i] * 100\n        perfect_bonus += p_i[i] * c_i[i]\n        if base_score + perfect_bonus >= G:\n            return min_problems\n    \n    return -1  # Unachievable objective\n"
    },
    {
        "number": 4110,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    D, G = map(int, input().split())\n    p = []\n    c = []\n    for _ in range(D):\n        p_i, c_i = map(int, input().split())\n        p.append(p_i)\n        c.append(c_i)\n\n    total_base_score = sum(p[i] * i * 100 for i in range(D))\n    total_perfect_bonus = sum(c[i] for i in range(D))\n    min_problems = (G - total_base_score) // 100 + 1\n\n    for i in range(D):\n        total_base_score_without_i = total_base_score - i * p[i] * 100\n        perfect_bonus_without_i = total_perfect_bonus - c[i]\n        min_problems_without_i = (G - total_base_score_without_i - perfect_bonus_without_i) // 100 + 1\n        min_problems = min(min_problems, min_problems_without_i)\n\n    return str(min_problems)\n\n\ninput_str = \"\"\"2 700\n3 500\n5 800\"\"\"\n\nprint(solution(input_str)) "
    },
    {
        "number": 4110,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    D, G = map(int, stdin.split()[:2])\n    p_i, c_i = [], []\n\n    for _ in range(D):\n        p_i.append(int(stdin.split()[1]))\n        c_i.append(int(stdin.split()[2]))\n\n    total_score = 0\n    problems_solved = 0\n\n    for i in range(D):\n        total_score += p_i[i] * 100 * i\n        problems_solved += p_i[i]\n\n    for c in c_i:\n        total_score += c\n\n    if total_score < G:\n        return \"Impossible\"\n\n    while total_score >= G:\n        G -= 100 * D\n        D -= 1\n\n    return D\n"
    },
    {
        "number": 4110,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    D, G = map(int, stdin.split()[0:2])\n    p = [0] * (D + 1)\n    c = [0] * (D + 1)\n\n    for i in range(1, D + 1):\n        p[i], c[i] = map(int, stdin.split()[(2 + 2 * (i - 1)): (2 + 2 * i)])\n\n    perfect_bonuses = [c[i] for i in range(1, D + 1) if p[i] == 1]\n    base_score = sum([100 * p[i] for i in range(1, D + 1)])\n\n    if G >= base_score + sum(perfect_bonuses):\n        return 0\n\n    for i in range(1, D + 1):\n        if p[i] == 1:\n            for j in range(1, 101):\n                if base_score + j * c[i] >= G:\n                    return base_score + j * p[i]\n\n    return -1  # This should never happen\n"
    },
    {
        "number": 4110,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    D, G = map(int, stdin.split()[0:2])\n    p_i = list(map(int, stdin.split()[2::2]))\n    c_i = list(map(int, stdin.split()[3::2]))\n\n    total_score = 0\n    problems_solved = 0\n\n    for i in range(1, D + 1):\n        total_score += p_i[i - 1] * 100 * i\n\n    for i in range(1, D + 1):\n        perfect_bonus = c_i[i - 1] * i\n        total_score += perfect_bonus\n\n    min_problems = 1\n    current_score = p_i[0] * 100 * 1\n\n    while current_score < G:\n        problems_solved += 1\n        current_score = (problems_solved * p_i[0] * 100 * 1) + (c_i[0] * 1)\n\n    return min_problems"
    },
    {
        "number": 4110,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    D, G = map(int, stdin.split()[0:2])\n    p = [int(stdin.split()[i]) for i in range(2, 2 + D * 2, 2)]\n    c = [int(stdin.split()[i]) for i in range(3, 3 + D * 2, 2)]\n    \n    total_score = 0\n    for i in range(D):\n        total_score += p[i] * 100\n        total_score += (G // 100) // (p[i] * 100) * c[i]\n    \n    if total_score >= G:\n        return 0\n\n    problems_needed = 0\n    for i in range(D):\n        problems_needed += ((G - total_score) // c[i]) * p[i]\n        total_score += ((G - total_score) // c[i]) * p[i] * 100\n        if total_score >= G:\n            return problems_needed\n\n    return -1\n"
    },
    {
        "number": 4110,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    D, G = map(int, input().split())\n    p_i, c_i = [list(map(int, input().split())) for _ in range(D)]\n\n    def count_problems_with_score(score: int) -> int:\n        return sum(p_i[i - 1] for i in range(1, D + 1) if i * 100 == score)\n\n    base_score = sum(p_i[i - 1] * 100 * i for i in range(1, D + 1))\n    perfect_bonuses = sum(count_problems_with_score(i * 100) * c_i[i - 1] for i in range(1, D + 1))\n\n    total_score = base_score + perfect_bonuses\n\n    if total_score < G:\n        raise ValueError(\"It is not possible to achieve the objective.\")\n\n    min_problems = 0\n    for i in range(1, D + 1):\n        if count_problems_with_score(i * 100) > 0:\n            min_problems += 1\n\n    return min_problems\n\n\ninput_data = \"2 700\\n3 500\\n5 800\"\nprint(solution(input_data)) "
    },
    {
        "number": 4111,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    weights = list(map(int, stdin.splitlines()[1].split()))\n\n    good_candies = 0\n    for i in range(n - 1):\n        even_sum = 0\n        odd_sum = 0\n        for j in range(n - 1):\n            if j % 2 == 0:\n                if j != i:\n                    even_sum += weights[j]\n            else:\n                if j != i:\n                    odd_sum += weights[j]\n        if even_sum == odd_sum:\n            good_candies += 1\n\n    return str(good_candies)"
    },
    {
        "number": 4111,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()[1:]))\n    total = sum(a)\n    good_candies = []\n\n    for i in range(n - 1):\n        if a[i] < total - a[i]:\n            good_candies.append(i)\n\n    return len(good_candies)\n\ndef"
    },
    {
        "number": 4111,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *weights = map(int, stdin.split())\n    good_candies = 0\n\n    for candy in range(1, n):\n        even_days_sum = sum(weights[:candy]) + sum(weights[candy+1:])\n        odd_days_sum = sum(weights[:candy:2]) + sum(weights[candy+1:2])\n\n        if even_days_sum == odd_days_sum:\n            good_candies += 1\n\n    return str(good_candies)\n\n\ninput_cases = [\n    \"7\\n5 5 4 5 5 5 6\",\n    \"8\\n4 8 8 7 8 4 4 5\",\n    \"9\\n2 3 4 2 2 3 2 2 4\"\n]\n\nfor input_case in input_cases:\n    print(solution(input_case))"
    },
    {
        "number": 4111,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    weights = list(map(int, stdin.splitlines()[1].split()))\n    \n    good_candies = []\n    for i in range(n-1):\n        if sum(weights[:i+1]) == sum(weights[:i+1]) % 2:\n            good_candies.append(i+1)\n    \n    return str(len(good_candies))"
    },
    {
        "number": 4111,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    weights = [int(x) for x in stdin.splitlines()[1].split()]\n    count = 0\n    for i in range(n):\n        if i % 2 == 0:\n            even = weights[i+1:]\n            odd = weights[:i+1]\n        else:\n            even = weights[:i+1]\n            odd = weights[i+1:]\n        if sum(even) == sum(odd):\n            count += 1\n    return str(count)\n\ndef"
    },
    {
        "number": 4111,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    weights = list(map(int, input().split()))\n\n    good_candies = 0\n\n    for i in range(1, n - 1):\n        sum_even = sum(weights[:i+1:2])\n        sum_odd = sum(weights[1:i+1:2])\n\n        if sum_even == sum_odd:\n            good_candies += 1\n\n    return good_candies"
    },
    {
        "number": 4111,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    weights = list(map(int, stdin.splitlines()[1].split()))\n\n    good_candies = 0\n    for i in range(1, n):\n        weight_sum_odd = sum(weights[:i]) + sum(weights[i:])\n        weight_sum_even = sum(weights[:i-1:2]) + sum(weights[i:2:2])\n        if weight_sum_odd == weight_sum_even:\n            good_candies += 1\n\n    return good_candies\n\n\ninput_str = \"\"\"7\n5 5 4 5 5 5 6\"\"\"\n\noutput_str = solution(input_str)\nprint(output_str)\n\n\ninput_str = \"\"\"8\n4 8 8 7 8 4 4 5\"\"\"\n\noutput_str = solution(input_str)\nprint(output_str)\n\n\ninput_str = \"\"\"9\n2 3 4 2 2 3 2 2 4\"\"\"\n\noutput_str = solution(input_str)\nprint(output_str)"
    },
    {
        "number": 4111,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    weights = list(map(int, stdin.split(\"\\n\")[1].split()))\n    \n    good_candies = 0\n    for i in range(n-1):\n        sum_even_days = sum(weights[:i+1:2])\n        sum_odd_days = sum(weights[:i+1:2]) + weights[i+1]\n        if sum_even_days == sum_odd_days:\n            good_candies += 1\n            \n    return str(good_candies)"
    },
    {
        "number": 4111,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n    count = 0\n\n    for i in range(1, n):\n        if sum(a[:i]) + sum(a[i:]) == sum(a[1:]) - sum(a[:i]):\n            count += 1\n\n    return str(count)\n\n\nn = int(input())\na = list(map(int, input().split()))\ncount = 0\n\nfor i in range(1, n):\n    if sum(a[:i]) + sum(a[i:]) == sum(a[1:]) - sum(a[:i]):\n        count += 1\n\nprint(count) "
    },
    {
        "number": 4111,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    weights = list(map(int, stdin.splitlines()[1].split()))\n\n    good_candies = []\n    for i in range(n - 1):\n        a_i, a_j = weights[i], weights[i + 1]\n        if a_i + a_j == 10:\n            good_candies.append(i)\n\n    return str(len(good_candies))\n"
    },
    {
        "number": 4112,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, input().split())\n    a = list(map(int, input().split()))\n    dp = [0] * n\n    \n    if k == 1:\n        for i in range(n):\n            dp[i] = a[i]\n    elif k >= 2:\n        for i in range(n):\n            if i < k:\n                continue\n            max_sum = float('-inf')\n            for j in range(i - k + 1):\n                max_sum = max(max_sum, dp[j] + a[i])\n            dp[i] = max_sum\n    \n    max_sum = -1\n    for i in range(k-1, n-x+k-1):\n        if dp[i] >= max_sum:\n            max_sum = dp[i]\n    \n    return str(max_sum) if max_sum != float('-inf') else '-1'"
    },
    {
        "number": 4112,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split()[:3])\n    a = list(map(int, stdin.split()[3:]))\n    dp = [0] * (n + 1)\n\n    for i in range(n):\n        dp[i + 1] = max(dp[i + 1], dp[i] + a[i])\n\n    for i in range(n - k + 1):\n        if dp[i] + a[i] == dp[i + k] and i != 0:\n            continue\n        if x <= 0:\n            return -1\n        repost_sum = dp[i] + a[i]\n        for j in range(i + k, n):\n            if dp[j] + a[j] - repost_sum >= dp[i + k] - dp[i]:\n                break\n            repost_sum += dp[j] + a[j]\n        else:\n            x -= 1\n            repost_sum = max(repost_sum, dp[i + k])\n\n    return repost_sum\n"
    },
    {
        "number": 4112,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def find_max_sum_reposts(a: List[int], x: int, k: int) -> int:\n        n = len(a)\n        if x == 0:\n            return 0\n        if k == 1:\n            return sum(a[:x])\n        if k >= n:\n            return sum(a)\n        if x == 1:\n            return a[0]\n        dp = [0] * (n + 1)\n        for i in range(1, n + 1):\n            dp[i] = max(dp[i - 1], a[i - 1] + dp[i - k])\n        return dp[n]\n\n    def is_valid(a: List[int], x: int, k: int) -> bool:\n        n = len(a)\n        if x == 0:\n            return True\n        if k == 1:\n            return True\n        if k >= n:\n            return True\n        if x == 1:\n            return a[0] > 0\n        dp = [0] * (n + 1)\n        for i in range(1, n + 1):\n            dp[i] = max(dp[i - 1], a[i - 1] + dp[i - k])\n        return dp[n] > 0\n\n    n, k, x = map(int, stdin.split()[:3])\n    a = list(map(int, stdin.split()[3:]))\n    if is_valid(a, x, k):\n        return find_max_sum_reposts(a, x, k)\n    return -1"
    },
    {
        "number": 4112,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split()[:3])\n    a = list(map(int, stdin.split()[3:]))\n\n    def is_valid(reposted_pictures, index):\n        for i in range(k - 1):\n            if reposted_pictures[index - k + i] == -1:\n                return False\n        return True\n\n    def helper(reposted_pictures, index, visited, memo):\n        if index == n:\n            return sum(reposted_pictures)\n\n        if visited[index]:\n            return memo[index]\n\n        if is_valid(reposted_pictures, index):\n            memo[index] = max(memo[index], helper(reposted_pictures, index + 1, visited, memo))\n\n        reposted_pictures[index] = -1\n        memo[index] = max(memo[index], helper(reposted_pictures, index + 1, visited, memo))\n        reposted_pictures[index] = 0\n\n        visited[index] = True\n        memo[index] = max(memo[index], helper(reposted_pictures, index + 1, visited, memo))\n        visited[index] = False\n\n        return memo[index]\n\n    reposted_pictures = [-1] * n\n    visited = [False] * n\n    memo = [-1] * n\n    result = helper(reposted_pictures, 0, visited, memo)\n\n    if result == -1:\n        return \"-1\"\n    else:\n        return str(result)\n\n\ninput_data = \"\"\"5 2 3\n5 1 3 10 1\n\"\"\"\n\nprint(solution(input_data))\n"
    },
    {
        "number": 4112,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split()[:3])\n    a = list(map(int, stdin.split()[3:]))\n    if k > n:\n        return -1\n    dp = [0] * (n + 1)\n    for i in range(n - 1, n - k - 1, -1):\n        if i + k > n:\n            break\n        for j in range(i + k, n + 1):\n            dp[j] = max(dp[j], dp[i] + a[i:j])\n    return dp[n] if dp[n] > 0 else -1\n\n\nn, k, x = map(int, input().split())\na = list(map(int, input().split()))\n\nresult = solution(f\"{n} {k} {x} {' '.join(map(str, a))}\")\nprint(result) "
    },
    {
        "number": 4112,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    from itertools import accumulate\n    n, k, x = map(int, stdin.split()[:3])\n    a = list(map(int, stdin.split()[3:]))\n    if k == 1:\n        return sum(a)\n    if x >= n:\n        return sum(a)\n    a.sort(reverse=True)\n    for i in range(1, n - x + 1):\n        if a[i] - a[i - 1] <= a[x - 1] - a[x - 1 - k]:\n            return -1\n    return sum(a[:x])\n\n\nstdin = \"\"\"5 2 3\n5 1 3 10 1\"\"\"\nprint(solution(stdin))  # Output: 18\n\nstdin = \"\"\"6 1 5\n10 30 30 70 10 10\"\"\"\nprint(solution(stdin))  # Output: -1\n\nstdin = \"\"\"4 3 1\n1 100 1 1\"\"\"\nprint(solution(stdin))  # Output: 100 "
    },
    {
        "number": 4112,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n, k, x = map(int, input_list[0].split())\n    a = list(map(int, input_list[1].split()))\n\n    def is_valid(reposted_pictures):\n        for i in range(n - x + 1):\n            if sum(reposted_pictures[i:i + x]) == 0:\n                return False\n        return True\n\n    def repost(reposted_pictures):\n        return sum(a[i] for i, reposted in enumerate(reposted_pictures) if reposted)\n\n    max_sum = 0\n    for i in range(n):\n        reposted_pictures = [0] * n\n        reposted_pictures[i] = 1\n        for j in range(i + 1, min(i + k, n)):\n            reposted_pictures[j] = 1\n        if is_valid(reposted_pictures):\n            max_sum = max(max_sum, repost(reposted_pictures))\n\n    return str(max_sum) if max_sum > 0 else '-1'\n"
    },
    {
        "number": 4112,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    if k > n:\n        return -1\n\n    def get_segment_sum(i, j):\n        return sum(a[i:j+1])\n\n    dp = [0] * n\n    for i in range(n-x, n-x-k, -1):\n        if i < 0:\n            break\n        max_sum = float('-inf')\n        for j in range(i+k, n):\n            if j > n:\n                break\n            segment_sum = get_segment_sum(i, j)\n            max_sum = max(max_sum, segment_sum + dp[j])\n        dp[i] = max_sum\n\n    result = dp[0]\n    if result == 0:\n        return -1\n    else:\n        return result"
    },
    {
        "number": 4112,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    n, k, x = map(int, input_list[0].split())\n    a = list(map(int, input_list[1].split()))\n\n    if k > n:\n        return \"-1\"\n\n    max_sum = 0\n    for i in range(n - x + 1):\n        segment_sum = sum(a[i:i + x])\n        repost_sum = max(a[j] for j in range(i, i + x) if j % k == 0)\n        max_sum = max(max_sum, segment_sum + repost_sum)\n\n    return str(max_sum)\n"
    },
    {
        "number": 4112,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def find_max_sum_reposts(n: int, k: int, x: int, a: List[int]) -> int:\n        # Initialize a list to store the beauty values of reposted pictures\n        reposted_pictures = [0] * n\n\n        # Sort the beauty values in descending order\n        a.sort(reverse=True)\n\n        # Initialize variables to store the sum of beauty values and number of reposted pictures\n        max_sum = 0\n        num_reposts = 0\n\n        # Iterate through the sorted beauty values\n        for value in a:\n            # Check if the current picture can be reposted\n            if num_reposts < x and num_reposts < k - 1:\n                reposted_pictures[num_reposts] = value\n                num_reposts += 1\n\n            # Check if the current picture can be reposted based on the remaining length of the news feed\n            elif num_reposts >= k - 1 and num_reposts + 1 < n:\n                reposted_pictures[num_reposts] = value\n                num_reposts += 1\n\n            # Update the maximum sum of beauty values\n            max_sum = max(max_sum, sum(reposted_pictures))\n\n        return max_sum\n\n    # Read the input values\n    n, k, x = map(int, stdin.split()[:3])\n    a = list(map(int, stdin.split()[3:]))\n\n    # Check if there is a way to repost some pictures to satisfy all the conditions\n    if k > n:\n        return -1\n    else:\n        return find_max_sum_reposts(n, k, x, a)"
    },
    {
        "number": 4113,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    if N % 4 == 0 and N % 7 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ndef"
    },
    {
        "number": 4113,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    if N % 4 == 0 and N % 7 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nstdin = input(\"Enter the value of N: \")\n\nprint(solution(stdin)) "
    },
    {
        "number": 4113,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    # Check if it's possible to buy two cakes and zero doughnuts for exactly N dollars\n    if 4 * 2 == N:\n        return \"Yes\"\n\n    # Check if it's possible to buy one cake and two doughnuts for exactly N dollars\n    if 4 + 7 * 2 == N:\n        return \"Yes\"\n\n    # Check if it's possible to buy zero cakes and two doughnuts for exactly N dollars\n    if 7 * 2 == N:\n        return \"Yes\"\n\n    # Check if it's possible to buy zero cakes and zero doughnuts for exactly N dollars\n    if 0 == N:\n        return \"Yes\"\n\n    return \"No\"\n\n\ndef"
    },
    {
        "number": 4113,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N % 7 == 0:\n        return \"Yes\"\n    if N % 4 == 0:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N % 4 == 0 and N % 7 == 0:\n        return \"Yes\"\n    return \"No\" "
    },
    {
        "number": 4113,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    \n    if N % 2 == 0:\n        cakes = N // 4\n        doughnuts = N // 7\n        if cakes + doughnuts <= 6:\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        return \"No\"\n\nstdin = \"11\"\nprint(solution(stdin)) # Output: Yes "
    },
    {
        "number": 4113,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n\n    # Check if it's possible to buy some cakes and doughnuts for N dollars\n    if N % 4 == 0 and N % 7 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n\n    if N % 4 == 0 and N % 7 == 0:\n        return \"Yes\"\n    elif N % 4 == 0:\n        return \"Yes\"\n    elif N % 7 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4113,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if 1 <= N <= 100:\n        if N % 4 == 0 and N % 7 == 0:\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        return \"No\"\n\n\ndef"
    },
    {
        "number": 4113,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n\n    if 1 <= N <= 100:\n        # Check if it's possible to buy some cakes and doughnuts for N dollars\n        if N % 10 >= 1:\n            cakes = N // 4\n            doughnuts = N // 7\n            if cakes * 4 + doughnuts * 7 == N:\n                return \"Yes\"\n        return \"No\"\n    else:\n        return \"Invalid Input\""
    },
    {
        "number": 4114,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, stdin = stdin.split(\"\\n\", 1)\n    N = int(N)\n    \n    x = [0] * (N + 1)\n    y = [0] * (N + 1)\n    h = [0] * (N + 1)\n    \n    for i in range(1, N + 1):\n        x_i, y_i, h_i = stdin.split()\n        x[i] = int(x_i)\n        y[i] = int(y_i)\n        h[i] = int(h_i)\n        stdin = stdin.split(\"\\n\", 3)[-1]\n    \n    def get_altitude(x, y):\n        return max(H - abs(x - C_X) - abs(y - C_Y), 0)\n    \n    X = sorted(set(x))\n    Y = sorted(set(y))\n    \n    for c_x in X:\n        for c_y in Y:\n            H = get_altitude(c_x, c_y)\n            valid = True\n            for i in range(1, N + 1):\n                if h[i] != get_altitude(x[i], y[i]):\n                    valid = False\n                    break\n            if valid:\n                return f\"{c_x} {c_y} {H}\"\n    \n    return \"No solution exists\"\n\ninput_data = \"\"\"4\n2 3 5\n2 1 5\n1 2 5\n3 2 5\n\"\"\"\n\nprint(solution(input_data)) "
    },
    {
        "number": 4114,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.split(\"\\n\")[0])\n    data = stdin.split(\"\\n\")[1:]\n    \n    # Calculate center coordinates\n    C_X = 0\n    C_Y = 0\n    for i in range(N):\n        C_X += data[i].split()[0]\n        C_Y += data[i].split()[1]\n    C_X //= N\n    C_Y //= N\n    \n    # Calculate height\n    H = 0\n    for i in range(N):\n        X, Y, h = map(int, data[i].split())\n        H = max(H, h)\n    H = H + 1\n    \n    return f\"{C_X} {C_Y} {H}\""
    },
    {
        "number": 4114,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, stdin = stdin.split(\"\\n\", 1)\n    N = int(N)\n\n    x_coords = []\n    y_coords = []\n    h_values = []\n\n    for _ in range(N):\n        x, y, h = stdin.split()\n        x_coords.append(int(x))\n        y_coords.append(int(y))\n        h_values.append(int(h))\n        stdin = stdin.split(\"\\n\", 3)[-1]\n\n    center_x = sum(x_coords) // N\n    center_y = sum(y_coords) // N\n\n    max_altitude = 0\n    for x, y, h in zip(x_coords, y_coords, h_values):\n        altitude = max(h - abs(x - center_x) - abs(y - center_y), 0)\n        if altitude > max_altitude:\n            max_altitude = altitude\n\n    height = max_altitude + 1\n\n    return f\"{center_x} {center_y} {height}\"\n"
    },
    {
        "number": 4114,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, stdin = stdin.split('\\n', 1)\n    N = int(N)\n    x_i, y_i, h_i = [], [], []\n    for i in range(N):\n        x, y, h = stdin.split()\n        x_i.append(int(x))\n        y_i.append(int(y))\n        h_i.append(int(h))\n\n    def calculate_altitude(x, y):\n        return max(H - abs(x - C_X) - abs(y - C_Y), 0)\n\n    max_h, min_x, min_y = max(h_i), min(x_i), min(y_i)\n    C_X, C_Y = 0, 0\n    for i in range(N):\n        x, y, h = x_i[i], y_i[i], h_i[i]\n        if h == max_h:\n            C_X, C_Y = x, y\n            break\n\n    H = max_h\n    for i in range(N):\n        x, y, h = x_i[i], y_i[i], h_i[i]\n        if calculate_altitude(x, y) > H:\n            H = calculate_altitude(x, y)\n\n    return f\"{C_X} {C_Y} {H}\""
    },
    {
        "number": 4114,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def calculate_altitude(x, y, C_X, C_Y, H):\n        return max(H - abs(x - C_X) - abs(y - C_Y), 0)\n\n    def get_center_coordinates(points):\n        C_X = sum(x for x, _, _ in points) // len(points)\n        C_Y = sum(y for _, y, _ in points) // len(points)\n        return C_X, C_Y\n\n    def get_height(points):\n        return max(h for _, _, h in points)\n\n    # Read input\n    N, *points = stdin.split()\n    N = int(N)\n    points = [tuple(map(int, point.split())) for point in points]\n\n    # Calculate center coordinates and height\n    C_X, C_Y = get_center_coordinates(points)\n    H = get_height(points)\n\n    # Calculate altitudes for all points\n    altitudes = [calculate_altitude(x, y, C_X, C_Y, H) for x, y, _ in points]\n\n    # Find maximum altitude\n    max_altitude = max(altitudes)\n\n    # Find indices of all points with maximum altitude\n    max_altitude_indices = [i for i, altitude in enumerate(altitudes) if altitude == max_altitude]\n\n    # Print center coordinates and height\n    return f\"{C_X} {C_Y} {max_altitude + H}\" "
    },
    {
        "number": 4114,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, stdin = stdin.split(\"\\n\", 1)\n    N = int(N)\n\n    x_coords = []\n    y_coords = []\n    h_values = []\n\n    for i in range(N):\n        x, y, h = stdin.split()\n        x_coords.append(int(x))\n        y_coords.append(int(y))\n        h_values.append(int(h))\n        stdin = stdin.split(\"\\n\", N - i)[-1]\n\n    C_X = x_coords[0]\n    C_Y = y_coords[0]\n\n    for i in range(1, N):\n        C_X = (C_X * (N - 1) + x_coords[i]) // N\n        C_Y = (C_Y * (N - 1) + y_coords[i]) // N\n\n    max_altitude = 0\n    for i in range(N):\n        altitude = max(h_values[i] - abs(x_coords[i] - C_X) - abs(y_coords[i] - C_Y), 0)\n        max_altitude = max(max_altitude, altitude)\n\n    H = max_altitude + 1\n\n    return f\"{C_X} {C_Y} {H}\" "
    },
    {
        "number": 4114,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    x_coords = []\n    y_coords = []\n    heights = []\n\n    for i in range(1, N + 1):\n        x, y, h = map(int, stdin.split(\"\\n\")[i].split())\n        x_coords.append(x)\n        y_coords.append(y)\n        heights.append(h)\n\n    min_x = min(x_coords)\n    max_x = max(x_coords)\n    min_y = min(y_coords)\n    max_y = max(y_coords)\n\n    C_X = (min_x + max_x) // 2\n    C_Y = (min_y + max_y) // 2\n\n    H = 0\n    for x, y, h in zip(x_coords, y_coords, heights):\n        H = max(H, h - abs(x - C_X) - abs(y - C_Y))\n\n    return f\"{C_X} {C_Y} {H}\"\n"
    },
    {
        "number": 4114,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    N = int(input_list[0])\n    x_y_h = [tuple(map(int, input_list[i+1].split())) for i in range(N)]\n    x_set = set(x for x, _ in x_y_h)\n    y_set = set(y for _, y in x_y_h)\n    assert len(x_set) == len(x_y_h) and len(y_set) == len(x_y_h)\n    C_X = sum(x for x, _ in x_y_h) // N\n    C_Y = sum(y for _, y in x_y_h) // N\n    H = max(h for _, _, h in x_y_h)\n    return f\"{C_X} {C_Y} {H}\""
    },
    {
        "number": 4114,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    data = [tuple(map(int, line.split())) for line in stdin.split(\"\\n\")[1:]]\n    \n    x_set = set(x for x, y, h in data)\n    y_set = set(y for x, y, h in data)\n    h_set = set(h for x, y, h in data)\n    \n    if len(x_set) != N or len(y_set) != N or len(h_set) != N:\n        raise ValueError(\"Invalid data\")\n    \n    C_X = min(x for x, y, h in data)\n    C_Y = min(y for x, y, h in data)\n    H = max(h for x, y, h in data)\n    \n    return f\"{C_X} {C_Y} {H}\" "
    },
    {
        "number": 4114,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    N = int(input_list[0])\n    input_list = input_list[1:]\n    points = [(int(input_list[i].split()[0]), int(input_list[i].split()[1]), int(input_list[i].split()[2])) for i in range(N)]\n\n    x_coords, y_coords = zip(*points)\n    x_min = min(x_coords)\n    x_max = max(x_coords)\n    y_min = min(y_coords)\n    y_max = max(y_coords)\n\n    pyramid_height = max(y_max - y_min, 0)\n    pyramid_center_x = (x_max - x_min) // 2 + x_min\n    pyramid_center_y = y_max\n\n    return f\"{pyramid_center_x} {pyramid_center_y} {pyramid_height}\"\n"
    },
    {
        "number": 4115,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    n = len(S)\n    count = 0\n    for i in range(n//2):\n        if S[i] != S[n-i-1]:\n            count += 1\n            if n%2==0:\n                S = S[:i+1] + 'o' + S[i+1:]\n            else:\n                S = S[:i] + 'o' + S[i+1:]\n    return count"
    },
    {
        "number": 4115,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 0\n\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1]\n            else:\n                dp[i][j] = min(dp[i + 1][j], dp[i][j - 1]) + 1\n\n    return dp[0][n - 1]\n"
    },
    {
        "number": 4115,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n\n    # Function to check if a string is a palindrome\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n\n    # Initialize variables\n    n = len(S)\n    hugs = 0\n    changed = {}\n\n    # Iterate through the string\n    for i in range(n):\n        # If the character is not a palindrome, find the first non-palindrome character\n        if not is_palindrome(S[:i+1]):\n            j = i\n            while not is_palindrome(S[:j+1]):\n                j -= 1\n            # Check if the character has been changed before\n            if S[j] not in changed:\n                hugs += 1\n                changed[S[j]] = S[i]\n            else:\n                # If the character has been changed before, undo the previous change\n                hugs -= 1\n                changed[S[j]] = changed[S[j]]\n            # Change the character to the new one\n            S = S[:j] + changed[S[j]] + S[j+1:]\n\n    return hugs"
    },
    {
        "number": 4115,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    count = 0\n    for i in range(n // 2):\n        if s[i] != s[n - i - 1]:\n            count += 1\n            if n - i - 1 - i != 1:\n                count += 1\n    return count\n\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4115,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    if len(S) <= 1:\n        return 0\n    if S == S[::-1]:\n        return 0\n\n    for i in range(len(S)):\n        for j in range(len(S)):\n            if i < j and S[i] != S[j] and S[i:j] == S[j:i:-1]:\n                return i+1\n\n    return 1\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4115,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    n = len(S)\n    # Initialize a dp table\n    dp = [[0] * n for _ in range(n)]\n    \n    # All substrings of length 1 are palindromes\n    for i in range(n):\n        dp[i][i] = 0\n    \n    # Check for palindromes of length 2\n    for i in range(n-1):\n        if S[i] == S[i+1]:\n            dp[i][i+1] = 0\n        else:\n            dp[i][i+1] = 1\n    \n    # Check for palindromes of length 3 and above\n    for length in range(3, n+1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            if S[i] == S[j] and length == 3:\n                dp[i][j] = 0\n            else:\n                dp[i][j] = dp[i+1][j-1] + 1\n                \n    # Minimum number of hugs needed to make S palindromic\n    return dp[0][n-1]"
    },
    {
        "number": 4115,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    n = len(S)\n    count = 0\n    for i in range(n // 2):\n        if S[i] != S[n - 1 - i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 4115,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    min_hugs = float('inf')\n    \n    for i in range(n // 2):\n        j = n - i - 1\n        diff = 0\n        \n        for k in range(i, j):\n            if s[k] != s[j - k - 1]:\n                diff += 1\n        \n        min_hugs = min(min_hugs, diff)\n    \n    return min_hugs\n"
    },
    {
        "number": 4115,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n\n    if n == 0:\n        return 0\n\n    count = 0\n    for i in range(n // 2):\n        if s[i] != s[n - 1 - i]:\n            count += 1\n            if i != n - 2 - i:\n                count += 1\n\n    return count\n\ndef"
    },
    {
        "number": 4115,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    N = len(S)\n\n    # check if S is already a palindrome\n    if N % 2 == 0:\n        for i in range(N // 2):\n            if S[i] != S[N - i - 1]:\n                return \"NO\"\n        return 0\n    else:\n        # find the center of palindrome\n        center = N // 2\n        for i in range(N // 2):\n            if S[i] != S[N - i - 1]:\n                center = i\n                break\n\n        # find the minimum number of hugs needed\n        hugs = 0\n        for i in range(center + 1, N):\n            if S[i] != S[N - i - 1]:\n                hugs += 1\n\n        return hugs"
    },
    {
        "number": 4116,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    for i in range(2, int(N**0.5) + 1):\n        if N % i == 0:\n            if (i == 1 or i == 9) and (N // i == 1 or N // i == 9):\n                return \"Yes\"\n            elif (N // i == 1 or N // i == 9) and (i == 2 or i == 3 or i == 5 or i == 7):\n                return \"Yes\"\n            elif (i == 2 or i == 3 or i == 5 or i == 7) and (N // i == 2 or N // i == 3 or N // i == 5 or N // i == 7):\n                return \"Yes\"\n    return \"No\"\n\n\ndef"
    },
    {
        "number": 4116,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if i * j == N:\n                return \"Yes\"\n    return \"No\"\n\ndef"
    },
    {
        "number": 4116,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    \n    if 1 <= N <= 100:\n        for i in range(1, 10):\n            for j in range(1, 10):\n                if i * j == N:\n                    return \"Yes\"\n        return \"No\"\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 4116,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if i * j == N:\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4116,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if i * j == N:\n                return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n\n    for i in range(1, 10):\n        if N % i == 0 and 1 <= i <= 9:\n            for j in range(1, 10):\n                if N // i == j and 1 <= j <= 9:\n                    return \"Yes\"\n    return \"No\"\n\n\nstdin = input(\"Enter the value of N: \")\nprint(solution(stdin)) "
    },
    {
        "number": 4116,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N = int(stdin)\n\n    # check if N can be represented as product of two integers between 1 and 9\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if i * j == N:\n                return \"Yes\"\n\n    # N cannot be represented as product of two integers between 1 and 9\n    return \"No\""
    },
    {
        "number": 4116,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if 1 <= N <= 100:\n        for i in range(1, 10):\n            if N % i == 0:\n                if N // i <= 9:\n                    return \"Yes\"\n        return \"No\"\n    else:\n        return \"Invalid input\" "
    },
    {
        "number": 4116,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if i * j == N:\n                return \"Yes\"\n    return \"No\"\n\ndef"
    },
    {
        "number": 4116,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    divisors = []\n    for i in range(1, 10):\n        if N % i == 0:\n            divisors.append(i)\n    if len(divisors) == 2:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4117,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.splitlines()[0])\n    L = list(map(int, stdin.splitlines()[1].split()))\n\n    count = 0\n    for i in range(N - 2):\n        for j in range(i + 1, N - 1):\n            for k in range(j + 1, N):\n                if L[i] != L[j] != L[k]:\n                    if L[i] + L[j] > L[k] and L[i] + L[k] > L[j] and L[j] + L[k] > L[i]:\n                        count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4117,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.splitlines()[0])\n    L = list(map(int, stdin.splitlines()[1].split()))\n    count = 0\n    \n    for i in range(N-2):\n        for j in range(i+1, N-1):\n            for k in range(j+1, N):\n                if L[i] != L[j] != L[k] != L[i] + L[j] - L[k] and L[i] + L[j] > L[k] and L[i] + L[k] > L[j] and L[j] + L[k] > L[i]:\n                    count += 1\n    \n    return str(count)"
    },
    {
        "number": 4117,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, *L = map(int, stdin.split())\n    count = 0\n    \n    for i in range(N-2):\n        for j in range(i+1, N-1):\n            for k in range(j+1, N):\n                if len(set([L[i], L[j], L[k]])) == 3:\n                    count += 1\n    \n    return str(count)\n\ndef"
    },
    {
        "number": 4117,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.split()[0])\n    L = list(map(int, stdin.split()[1:]))\n\n    # Initialize variables\n    count = 0\n    stick_set = set(range(1, N + 1))\n\n    # Iterate through all possible combinations of three sticks\n    for i in stick_set:\n        for j in stick_set:\n            for k in stick_set:\n                if i < j < k and set([i, j, k]) <= stick_set:\n                    # Check if the sides of the triangle satisfy the conditions\n                    if L[i - 1] + L[j - 1] > L[k - 1] and L[j - 1] + L[k - 1] > L[i - 1] and L[i - 1] + L[k - 1] > L[j - 1]:\n                        # Increment count if the conditions are satisfied\n                        count += 1\n\n    return str(count)"
    },
    {
        "number": 4117,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.splitlines()[0])\n    L = list(map(int, stdin.splitlines()[1].split()))\n    \n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                if L[i]**2 + L[j]**2 == L[k]**2:\n                    count += 1\n                    \n    return count\n\nstdin = \"5\\n4 4 9 7 5\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4117,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, *L = list(map(int, stdin.split()))\n    \n    count = 0\n    for i in range(N - 2):\n        for j in range(i + 1, N - 1):\n            for k in range(j + 1, N):\n                if L[i] != L[j] and L[j] != L[k] and L[i] != L[k]:\n                    count += 1\n    \n    return str(count)"
    },
    {
        "number": 4117,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split())\n    L.sort()\n    count = 0\n    for i in range(N-2):\n        if L[i] + L[i+1] > L[i+2]:\n            count += 1\n    return count\n\n\ndef"
    },
    {
        "number": 4117,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, *L = map(int, stdin.split())\n    L.sort()\n    count = 0\n    \n    for i in range(N-2):\n        if L[i] + L[i+1] > L[i+2]:\n            count += 1\n            for j in range(i+1, N-1):\n                if L[j] + L[j+1] > L[i+2]:\n                    count += 1\n                    for k in range(j+1, N):\n                        if L[i+2] < L[j] + L[k]:\n                            count += 1\n                            break\n                    else:\n                        continue\n                    break\n                elif L[i] + L[j] > L[i+2]:\n                    count += 1\n                    for k in range(j+1, N):\n                        if L[i+2] < L[j] + L[k]:\n                            count += 1\n                            break\n                    else:\n                        continue\n                    break\n                elif L[i] + L[j] > L[j+2]:\n                    count += 1\n                    for k in range(j+1, N):\n                        if L[j+2] < L[j] + L[k]:\n                            count += 1\n                            break\n                    else:\n                        continue\n                    break\n                else:\n                    break\n                    \n    return count"
    },
    {
        "number": 4117,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, *L = map(int, stdin.split())\n    \n    count = 0\n    for i in range(N - 2):\n        for j in range(i + 1, N - 1):\n            for k in range(j + 1, N):\n                if L[i] + L[j] > L[k] and L[i] + L[k] > L[j] and L[j] + L[k] > L[i]:\n                    count += 1\n    \n    return str(count)\n\nN = int(input())\nL = list(map(int, input().split()))\nprint(solution(str(N) + \"\\n\" + \" \".join(map(str, L)))) "
    },
    {
        "number": 4117,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_triangle(a: int, b: int, c: int) -> bool:\n        return a + b > c and a + c > b and b + c > a\n\n    N, *sticks = map(int, stdin.split())\n    sticks.sort()\n    count = 0\n\n    for i in range(N - 2):\n        if sticks[i] == sticks[i + 1] or sticks[i] == sticks[i + 2]:\n            continue\n\n        for j in range(i + 1, N - 1):\n            if sticks[j] == sticks[j + 1]:\n                continue\n\n            for k in range(j + 1, N):\n                if sticks[k] == sticks[i] or sticks[k] == sticks[j]:\n                    continue\n\n                if is_triangle(sticks[i], sticks[j], sticks[k]):\n                    count += 1\n\n    return count\n"
    },
    {
        "number": 4118,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    \n    result = A * B\n    \n    if 1 <= A <= 9 and 1 <= B <= 9:\n        return str(result)\n    else:\n        return \"-1\""
    },
    {
        "number": 4118,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A < 1 or A > 9 or B < 1 or B > 9:\n        return -1\n    else:\n        return A * B\n"
    },
    {
        "number": 4118,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    result = A * B\n    if 1 <= A <= 9 and 1 <= B <= 9:\n        return str(result)\n    else:\n        return \"-1\""
    },
    {
        "number": 4118,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A < 1 or A > 9 or B < 1 or B > 9:\n        return -1\n    result = 0\n    for i in range(1, A + 1):\n        result += B\n    return result\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4118,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    result = A * B\n    if 1 <= A <= 9 and 1 <= B <= 9:\n        return str(result)\n    else:\n        return \"-1\""
    },
    {
        "number": 4118,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    result = A * B\n    if 1 <= A <= 9 and 1 <= B <= 9:\n        return str(result)\n    else:\n        return \"-1\"\n\ndef"
    },
    {
        "number": 4118,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin.split()\n    A = int(input_str[0])\n    B = int(input_str[1])\n\n    if A in range(1, 10) and B in range(1, 10):\n        result = A * B\n        return str(result)\n    else:\n        return \"-1\"\n"
    },
    {
        "number": 4118,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if 1 <= A <= 9 and 1 <= B <= 9:\n        return str(A * B)\n    else:\n        return \"-1\"\n\ndef"
    },
    {
        "number": 4118,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if 1 <= A <= 9 and 1 <= B <= 9:\n        return str(A * B)\n    else:\n        return \"-1\""
    },
    {
        "number": 4118,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if 1 <= A <= 9 and 1 <= B <= 9:\n        return str(A * B)\n    else:\n        return \"-1\"\n\nstdin = \"2 5\"\nprint(solution(stdin)) "
    },
    {
        "number": 4119,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    X = list(map(int, stdin.split()))\n    X = list(set(X))\n\n    moves = 0\n    while len(X) > 1:\n        X.sort()\n        for i in range(len(X) - 1):\n            if X[i + 1] - X[i] == 1:\n                moves += 1\n                X.pop(i + 1)\n                X.pop(i)\n                break\n            elif X[i + 1] - X[i] == -1:\n                moves += 1\n                X.pop(i + 1)\n                X.pop(i)\n                break\n    return str(moves)\n\n\ndef"
    },
    {
        "number": 4119,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    X = list(map(int, stdin.split()[2:]))\n\n    def is_valid_move(x: int, y: int) -> bool:\n        return 1 <= x <= N and 1 <= y <= N and (x, y) not in visited\n\n    def move(x: int, y: int) -> None:\n        nonlocal moves\n        visited.add((x, y))\n        moves += 1\n\n    def dfs(x: int) -> int:\n        nonlocal moves\n        if moves >= M:\n            return moves\n        if (x, x) in visited:\n            return moves + 1\n        visited.add((x, x))\n        moves += 1\n        for i in range(1, N + 1):\n            if is_valid_move(x, i):\n                move(x, i)\n                dfs(i)\n                move(x, i)\n        return moves\n\n    moves = 0\n    visited = set()\n    for i in range(M):\n        visited.add((X[i], X[i]))\n        moves += 1\n    for i in range(M):\n        moves = dfs(X[i])\n    return moves\n\n\ndef"
    },
    {
        "number": 4119,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    N, M = map(int, input_list[0].split())\n    X = list(map(int, input_list[1].split()))\n    \n    # Initialize the visited coordinates\n    visited = set(X)\n    \n    # Calculate the minimum number of moves required\n    moves = 0\n    while len(visited) < M:\n        for x in X:\n            if x + 1 in visited or x - 1 in visited:\n                moves += 1\n                break\n        visited.add(x + 1)\n    \n    return str(moves)"
    },
    {
        "number": 4119,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, input().split())\n    X = list(map(int, input().split()))\n    X = sorted(list(set(X)))\n    moves = 0\n    last_x = 0\n    for x in X:\n        if x == last_x + 1 or x == last_x - 1:\n            moves += 1\n        else:\n            moves += 2\n        last_x = x\n    return str(moves) "
    },
    {
        "number": 4119,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    N, M = map(int, input_list[0].split())\n    X = list(map(int, input_list[1].split()))\n\n    # Check if there are enough coordinates to place N pieces\n    if M < N:\n        return \"Impossible\"\n\n    # Check if there are duplicates in the coordinates\n    if len(set(X)) != M:\n        return \"Impossible\"\n\n    # Initialize the minimum number of moves\n    min_moves = 0\n\n    # Sort the coordinates in ascending order\n    X.sort()\n\n    # Find the minimum number of moves required\n    for i in range(N - 1):\n        min_moves += abs(X[i + 1] - X[i])\n\n    return min_moves\n"
    },
    {
        "number": 4119,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[0:2])\n    X = list(map(int, stdin.split()[2:]))\n    \n    # Find the minimum number of moves required to achieve the objective\n    min_moves = 0\n    visited = set()\n    for x in X:\n        visited.add(x)\n    for x in X:\n        min_moves += 1\n        if x + 1 in visited:\n            min_moves -= 1\n            break\n        if x - 1 in visited:\n            min_moves -= 1\n            break\n    \n    return str(min_moves)"
    },
    {
        "number": 4119,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    X = list(map(int, stdin.split()[2:]))\n\n    visited = set(X)\n    moves = 0\n\n    for _ in range(M):\n        moves += 1\n        x = min(visited)\n        visited.remove(x)\n        visited.add(x + 1)\n\n    return str(moves)\n"
    },
    {
        "number": 4119,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    X = list(map(int, stdin.split()[2:]))\n\n    visited = set(X)\n    moves = 0\n\n    for _ in range(M):\n        moves += 1\n        for i in range(N):\n            if i + 1 in visited:\n                visited.remove(i + 1)\n            if i - 1 in visited:\n                visited.remove(i - 1)\n        visited.add(X[0])\n        X.pop(0)\n\n    return str(moves)\n"
    },
    {
        "number": 4119,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, input().split())\n    X = list(map(int, input().split()))\n\n    # Initialize visited coordinates as the coordinates where we initially place the pieces\n    visited = set(X)\n\n    # Initialize the minimum number of moves to infinity\n    min_moves = float('inf')\n\n    for i in range(N):\n        # Calculate the minimum distance from the i-th piece to each of the M coordinates\n        distances = [abs(X[i] - x) for x in X[:i] + X[i + 1:]]\n\n        # Update the minimum number of moves\n        min_moves = min(min_moves, sum(distances) + len(distances))\n\n    return min_moves"
    },
    {
        "number": 4119,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    X = list(map(int, stdin.split()[2:]))\n\n    if M > 10000:\n        return \"M is too large. Please enter a value of M less than or equal to 10000.\"\n\n    if N > 100000:\n        return \"N is too large. Please enter a value of N less than or equal to 100000.\"\n\n    if len(set(X)) != M:\n        return \"All values in X must be different.\"\n\n    visited = set(X)\n    moves = 0\n    for i in range(1, 1 + M):\n        if i not in visited:\n            moves += 1\n            visited.add(i)\n\n    return str(moves)\n"
    },
    {
        "number": 4120,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[:3])\n    roads = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:-1]]\n    adj_matrix = [[0] * (n + 1) for _ in range(n + 1)]\n\n    for road in roads:\n        a, b = road\n        adj_matrix[a][b] = adj_matrix[b][a] = 1\n\n    # Initialize the shortest distance matrix\n    dist = [[float('inf')] * (n + 1) for _ in range(n + 1)]\n    dist[1] = [0] * (n + 1)\n\n    # Floyd Warshall algorithm to find the shortest distance between all pairs of vertices\n    for k in range(1, n + 1):\n        for i in range(1, n + 1):\n            for j in range(1, n + 1):\n                dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n\n    # Find all the valid options\n    valid_options = []\n\n    def dfs(node, curr_path, curr_sum, depth):\n        if depth == m:\n            if curr_sum == 0:\n                valid_options.append(curr_path)\n            return\n        for i in range(1, n + 1):\n            if node != i and adj_matrix[node][i] == 1:\n                dfs(i, curr_path + str(depth + 1), curr_sum + dist[node][i], depth + 1)\n\n    dfs(1, \"\", 0, 0)\n\n    # Output the options\n    if len(valid_options) == 0:\n        return \"No solution\"\n    elif len(valid_options) == 1:\n        return len(valid_options)\n    else:\n        return len(valid_options)\n"
    },
    {
        "number": 4120,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def bit_vector(n, k, roads):\n        for road in roads:\n            a, b = road\n            mask = 0\n            for i in range(n):\n                mask |= (1 << i) if i+1 in (a, b) else 0\n            yield bin(mask)[2:].zfill(n)\n\n    def distance(stdin: str, roads: list) -> int:\n        n, m, k = map(int, stdin.split())\n        cities = list(range(1, n+1))\n        for _ in range(m):\n            roads.append(tuple(map(int, input().split())))\n        for road in roads:\n            a, b = road\n            cities.remove(a)\n            cities.remove(b)\n        return len(cities)\n\n    def min_distance(n, roads):\n        dp = [float('inf')] * (1 << n)\n        dp[1] = 0\n        for i in range(2, (1 << n)):\n            for j in range(n):\n                if (i & (1 << j)):\n                    for r, (a, b) in enumerate(roads):\n                        new_state = i ^ (1 << j) ^ (1 << r)\n                        dp[new_state] = min(dp[new_state], dp[i] + (1 if j+1 == a or j+1 == b else 0))\n        return min(dp)\n\n    n, m, k = map(int, input().split())\n    roads = [tuple(map(int, input().split())) for _ in range(m)]\n\n    options = list(bit_vector(n, k, roads))\n    dist = distance(input(), roads)\n    min_d = min_distance(n-1, roads)\n\n    print(k)\n    print('\\n'.join(options))\n"
    },
    {
        "number": 4120,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def is_possible(roads, n, k):\n        visited = [0] * n\n        visited[0] = 1\n        stack = [0]\n        while stack:\n            curr = stack.pop()\n            for i in range(len(roads)):\n                a, b = roads[i]\n                if visited[a-1] + visited[b-1] == 1:\n                    stack.append(b)\n                    visited[b-1] = 1\n        return visited.count(0) == 0\n\n    def count_ways(roads, n, k):\n        def backtrack(index, subset, path):\n            if index == n:\n                if is_possible(roads, n, k):\n                    options.add(path)\n                return\n            for i in range(len(roads)):\n                if roads[i] not in path:\n                    backtrack(index + 1, subset | {i}, path | {roads[i]})\n\n        roads.sort(key=lambda x: x[0])\n        options = set()\n        backtrack(1, set(), set())\n        return len(options)\n\n    n, m, k = map(int, stdin.split())\n    roads = [tuple(map(int, input().split())) for _ in range(m)]\n    ways = count_ways(roads, n, k)\n    result = [str(bin(i))[2:].zfill(m) for i in range(1, 2**m)]\n    return str(ways) + '\\n' + '\\n'.join(result)"
    },
    {
        "number": 4120,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def read_line(stdin: str, pos: int) -> tuple:\n        n, m, k = map(int, stdin[pos].split())\n        pos += 1\n        roads = []\n        for i in range(m):\n            a, b = map(int, stdin[pos + i].split())\n            roads.append((a, b))\n        return n, m, k, roads, pos + m\n\n    def dfs(graph: list, visited: list, start: int, end: int, roads: list, result: list, pos: int) -> None:\n        if pos == len(roads):\n            if start == end:\n                result.append(\"\".join(visited))\n            return\n        for i in range(len(graph)):\n            if not visited[i]:\n                visited[i] = '1' if (start, i + 1) in roads else '0'\n                dfs(graph, visited, i + 1, end, roads, result, pos + 1)\n                visited[i] = '0'\n\n    def count_roads(n: int, roads: list) -> int:\n        graph = [[] for _ in range(n)]\n        for a, b in roads:\n            graph[a - 1].append(b - 1)\n            graph[b - 1].append(a - 1)\n        visited = [False] * n\n        visited[0] = '1'\n        result = []\n        dfs(graph, visited, 1, n, roads, result, 0)\n        return len(result)\n\n    n, m, k, roads, pos = read_line(stdin, 0)\n\n    roads = sorted(roads)\n    result = []\n    count = count_roads(n, roads)\n\n    if k >= count:\n        for i in range(count):\n            result.append(\"\".join(map(str, [int(roads[i][0] < j and int(roads[i][1] < j) for j in range(1, n + 1)])))\n    else:\n        for i in range(k):\n            result.append(\"\".join(map(str, [int(roads[i][0] < j and int(roads[i][1] < j) for j in range(1, n + 1)])))\n\n    return \"\\n\".join(result)\n"
    },
    {
        "number": 4120,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[:3])\n    roads = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:-1]]\n\n    def dfs(start, visited, roads, visited_roads, path):\n        if len(path) == n:\n            options.add(tuple(visited_roads))\n            return\n\n        for i, (a, b) in enumerate(roads):\n            if a == start and not visited[a - 1]:\n                visited_copy = visited.copy()\n                visited_copy[a - 1] = True\n                visited_roads_copy = visited_roads.copy()\n                visited_roads_copy[i] = True\n                dfs(b, visited_copy, roads, visited_roads_copy, path + [a])\n\n    options = set()\n    dfs(1, [False] * n, roads, [False] * m, [])\n    t = min(k, len(options))\n\n    for i, option in enumerate(options):\n        result = ['1' if road else '0' for road in option]\n        print(f'{i + 1}')\n        print(''.join(result))\n"
    },
    {
        "number": 4120,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[:3])\n    roads = [tuple(map(int, stdin.split()[i].split())) for i in range(1, m+1)]\n    adjacency_list = [[] for _ in range(n)]\n\n    for a, b in roads:\n        adjacency_list[a-1].append(b-1)\n        adjacency_list[b-1].append(a-1)\n\n    def dfs(node, visited, depth):\n        visited[node] = True\n        depth[node] = 0\n        for neighbor in adjacency_list[node]:\n            if not visited[neighbor]:\n                dfs(neighbor, visited, depth)\n                depth[node] += 1 + depth[neighbor]\n\n    for node in range(n):\n        visited = [False] * n\n        depth = [float('inf')] * n\n        dfs(node, visited, depth)\n        for i, d in enumerate(depth):\n            if d == 1:\n                break\n        else:\n            raise ValueError(\"There is no way to reach the capital from city %d.\" % (node+1))\n\n    count = 0\n    result = []\n\n    def backtrack(pos, visited):\n        nonlocal count, result\n        if pos == n:\n            count += 1\n            result.append(''.join(str(int(i)) for i in visited))\n            if count >= k:\n                return\n            return\n\n        visited[pos] = 1\n        backtrack(pos+1, visited)\n        visited[pos] = 0\n        if pos > 0:\n            backtrack(pos+1, visited)\n\n    backtrack(0, [0] * n)\n    return str(count) + '\\n' + '\\n'.join(result) "
    },
    {
        "number": 4120,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    roads = [tuple(map(int, input().split())) for _ in range(m)]\n\n    adj_matrix = [[0] * n for _ in range(n)]\n    for a, b in roads:\n        adj_matrix[a - 1][b - 1] = 1\n        adj_matrix[b - 1][a - 1] = 1\n\n    min_sum = float('inf')\n    valid_options = set()\n\n    def dfs(node, path, count):\n        nonlocal min_sum, valid_options\n        if count == n - 1:\n            if sum(path) < min_sum:\n                min_sum = sum(path)\n                valid_options.clear()\n                valid_options.add(tuple(path))\n            elif sum(path) == min_sum:\n                valid_options.add(tuple(path))\n            return\n\n        for i in range(n):\n            if path[i] == 0 and adj_matrix[node][i] == 1:\n                path[i] = 1\n                dfs(i, path, count + 1)\n                path[i] = 0\n\n    for i in range(n):\n        path = [0] * n\n        path[i] = 1\n        dfs(i, path, 1)\n\n    options = []\n    for path in valid_options:\n        option = ['0'] * m\n        for i, include in enumerate(path):\n            if include:\n                for j, (a, b) in enumerate(roads):\n                    if i + 1 == a or i + 1 == b:\n                        option[j] = '1'\n        options.append(''.join(option))\n\n    print(len(options))\n    for option in options:\n        print(option)"
    },
    {
        "number": 4120,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    n, m, k = map(int, input_list[0].split())\n    roads = [tuple(map(int, line.split())) for line in input_list[1:]]\n    visited = [0] * n\n    visited[0] = 1\n    def dfs(node: int, count: int) -> int:\n        if count == k:\n            return 1\n        if count > k:\n            return 0\n        res = 0\n        for i in range(1, n):\n            if visited[i] == 0 and (node, i) not in roads:\n                visited[i] = 1\n                res += dfs(i, count + 1)\n                visited[i] = 0\n        return res\n    return dfs(0, 1)\n\n\ninput_data = \"\"\"4 4 3\n1 2\n2 3\n1 4\n4 3\"\"\"\nprint(solution(input_data)) "
    },
    {
        "number": 4120,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    n, m, k = map(int, input_list[0].split())\n    roads = [tuple(map(int, line.split())) for line in input_list[1:]]\n\n    def is_reachable(start, end, visited):\n        if start == end:\n            return True\n        for i, neighbor in enumerate(visited):\n            if not neighbor:\n                visited[i] = True\n                if is_reachable(start, end, visited):\n                    return True\n                visited[i] = False\n        return False\n\n    def min_distances(roads, n):\n        dist = [1] * n\n        for road in roads:\n            a, b = road\n            dist[a - 1] += 1\n            dist[b - 1] += 1\n        return sum(dist)\n\n    def possible_roads(roads, n, k):\n        roads.sort(key=lambda x: x[1])\n        visited = [False] * n\n        min_dist = min_distances(roads, n)\n        results = set()\n\n        for i in range(n - 1):\n            road = roads[i]\n            a, b = road\n            visited[a - 1] = True\n            visited[b - 1] = True\n            new_min_dist = min_dist - min_distances(roads[:i] + roads[i + 1:], n)\n            if new_min_dist >= min_dist and len(results) < k:\n                results.add(''.join(str(int(visited[i])) for i in range(n - 1)))\n            visited[a - 1] = False\n            visited[b - 1] = False\n\n        return results\n\n    results = possible_roads(roads, n, k)\n    output = len(results)\n    if output == 0:\n        output = 1\n    for result in results:\n        print(result)\n    print(output)\n"
    },
    {
        "number": 4120,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def count_distances(roads: set) -> int:\n        graph = [[] for _ in range(n)]\n        for a, b in roads:\n            graph[a - 1].append(b - 1)\n            graph[b - 1].append(a - 1)\n\n        def dfs(node: int, visited: set, dist: int) -> int:\n            if node in visited:\n                return dist\n            visited.add(node)\n            for neighbor in graph[node]:\n                dist = dfs(neighbor, visited, dist + 1)\n            return dist\n\n        return dfs(0, set(), 0)\n\n    n, m, k = map(int, stdin.split())\n    roads = set(map(int, stdin.split())[4:])\n\n    min_dist = count_distances(roads)\n    best_roads = roads\n\n    for _ in range(k - 1):\n        for a, b in roads:\n            if a != 1 and b != 1:\n                new_roads = roads.copy()\n                new_roads.remove((a, b))\n                if count_distances(new_roads) < min_dist:\n                    min_dist = count_distances(new_roads)\n                    best_roads = new_roads\n\n    result = []\n    for road in best_roads:\n        result.append(\"1\")\n    for _ in range(n - len(best_roads)):\n        result.append(\"0\")\n\n    return \" \".join(result)\n"
    },
    {
        "number": 4121,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()[1:]))\n\n    if n == 1:\n        return \"YES\" if a[0] == 1 else \"NO\"\n\n    # Check if wall is already complete\n    if all(a[i] == a[0] for i in range(n)) and a[0] == 1:\n        return \"YES\"\n\n    # Find the highest part\n    max_height = max(a)\n\n    # Check if Vova can complete the wall using 2*1 bricks\n    for i in range(1, n):\n        if a[i] - a[i - 1] > 1:\n            if a[i] - a[i - 1] - 1 > 2 * (max_height - a[i] + 1):\n                return \"NO\"\n\n    # Check if Vova can complete the wall using 1*1 bricks\n    for i in range(1, n):\n        if a[i] - a[i - 1] > 1:\n            if a[i] - a[i - 1] - 1 > max_height - a[i] + 1:\n                return \"NO\"\n\n    return \"YES\""
    },
    {
        "number": 4121,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def can_complete_wall(n: int, a: List[int]) -> bool:\n        # Check if all parts have the same height\n        if len(set(a)) == 1:\n            return True\n\n        # Check if the wall is complete\n        for i in range(1, n):\n            if a[i - 1] != a[i]:\n                # Check if Vova can put bricks horizontally on the neighboring parts\n                if a[i - 1] == a[i - 2]:\n                    continue\n                elif a[i] == a[i + 1]:\n                    continue\n                else:\n                    return False\n\n        return True\n\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    if can_complete_wall(n, a):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\ndef"
    },
    {
        "number": 4121,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    heights = [int(x) for x in stdin.splitlines()[1].split()]\n    wall_complete = True\n\n    for i in range(1, n):\n        if heights[i] < heights[i - 1]:\n            heights[i] = heights[i - 1]\n            wall_complete = False\n\n    if wall_complete:\n        return \"YES\"\n\n    for i in range(n - 1):\n        if heights[i] != heights[i + 1]:\n            heights[i] += 2\n            heights[i + 1] += 2\n            wall_complete = True\n            for j in range(i + 2, n):\n                if heights[j] < heights[j - 1]:\n                    heights[j] = heights[j - 1]\n                    wall_complete = False\n                    break\n\n            if wall_complete:\n                return \"YES\"\n\n    return \"NO\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    wall = list(map(int, stdin.split('\\n')[1].split()))\n    \n    for i in range(n-1):\n        if wall[i] == wall[i+1]:\n            wall[i] += 1\n            wall[i+1] += 1\n    \n    for i in range(n-1):\n        if wall[i] > wall[i+1]:\n            wall[i+1] = wall[i] + 1\n    \n    max_height = max(wall)\n    \n    if max_height == n:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4121,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = [int(x) for x in stdin.splitlines()[1].split()]\n    i = 0\n    while i < n - 1:\n        if a[i] == a[i+1]:\n            a[i] += 1\n            a[i+1] += 1\n        i += 1\n    if a[0] != a[n-1]:\n        return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4121,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    heights = list(map(int, stdin.splitlines()[1].split()))\n\n    if n == 1:\n        return \"YES\"\n\n    for i in range(n - 1):\n        if heights[i] != heights[i + 1]:\n            heights[i] += 1\n            heights[i + 1] += 1\n            heights[i + 1] = max(heights[i + 1], heights[i])\n\n    max_height = max(heights)\n    min_height = min(heights)\n\n    if max_height == n:\n        return \"YES\"\n    elif min_height == 1:\n        return \"NO\"\n    else:\n        return \"YES\"\n\ndef"
    },
    {
        "number": 4121,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n = int(input_list[0])\n    heights = list(map(int, input_list[1].split()))\n\n    # Check if the wall is already complete\n    if all(heights[i] == heights[i + 1] for i in range(n - 1)) and heights[0] == 1 and heights[-1] == 1:\n        return \"YES\"\n\n    # Check if the height of the wall can be increased\n    if all(1 <= heights[i] <= 2 for i in range(n)):\n        return \"YES\"\n\n    # Check if the height of the wall can be decreased\n    if all(1 <= heights[i] <= 4 for i in range(n)):\n        return \"YES\"\n\n    return \"NO\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    # Sort the array in descending order\n    a.sort(reverse=True)\n\n    # Check if all parts have the same height\n    if len(set(a)) == 1:\n        # Check if the wall has no empty spaces inside it\n        if sum(a) == n:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    # Check if Vova can complete the wall\n    i = 0\n    while i < n:\n        if a[i] == a[i+1] and a[i] != 1:\n            a[i] -= 1\n            a[i+1] -= 1\n            i -= 1\n        i += 1\n\n    # Check if the wall has no empty spaces inside it\n    if sum(a) == n:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    n = int(input_list[0])\n    a = list(map(int, input_list[1:]))\n    is_complete = True\n\n    if n == 1:\n        if a[0] % 2 == 0:\n            is_complete = False\n        return \"NO\" if is_complete else \"YES\"\n\n    for i in range(n - 1):\n        if a[i] != a[i + 1]:\n            if a[i] % 2 == 0:\n                a[i] += 2\n                a[i + 1] += 2\n            else:\n                is_complete = False\n                break\n\n    return \"NO\" if not is_complete else \"YES\"\n\n\ndef"
    },
    {
        "number": 4121,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    n = int(input_data[0])\n    a = list(map(int, input_data[1].split()))\n    \n    if n == 1 and a[0] == 1:\n        return \"YES\"\n    \n    for i in range(n-1):\n        if a[i] == a[i+1]:\n            a[i] += 1\n            a[i+1] += 1\n    \n    max_height = max(a)\n    for i in range(n):\n        if a[i] != max_height:\n            return \"NO\"\n    \n    return \"YES\""
    },
    {
        "number": 4122,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n\n    monster_hp = H\n    for i in range(n):\n        monster_hp += d[i]\n        if monster_hp <= 0:\n            if i == 0:\n                return -1\n            return i\n\n    return -1\n"
    },
    {
        "number": 4122,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, input().split())\n    d = list(map(int, input().split()))\n    \n    if H <= 0:\n        return \"1\"\n    \n    monster_hp = H\n    \n    for minute in range(1, n+1):\n        if monster_hp <= 0:\n            return str(minute)\n        \n        monster_hp += d[minute-1]\n    \n    return \"-1\""
    },
    {
        "number": 4122,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    H, n = map(int, input_list[0].split())\n    d = list(map(int, input_list[1].split()))\n\n    if H <= 0:\n        return -1\n\n    for i in range(n):\n        if d[i] > 0:\n            H -= d[i]\n            if H <= 0:\n                return i + 1\n        else:\n            H += d[i]\n            if H <= 0:\n                return -1\n\n    return -1\n\nstdin = '''1000 6\n-100 -200 -300 125 77 -4'''\n\nprint(solution(stdin)) # Output: 9 "
    },
    {
        "number": 4122,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_values = stdin.splitlines()\n    H, n = map(int, input_values[0].split())\n    d = list(map(int, input_values[1].split()))\n\n    monster_hp = H\n    for i in range(n):\n        monster_hp += d[i]\n        if monster_hp <= 0:\n            return i + 1\n\n    return -1\n\n\nstdin = \"\"\"1000 6\n-100 -200 -300 125 77 -4\"\"\"\n\nprint(solution(stdin))\n\nstdin = \"\"\"1000000000000 5\n-1 0 0 0 0\"\"\"\n\nprint(solution(stdin))\n\nstdin = \"\"\"10 4\n-3 -6 5 4\"\"\"\n\nprint(solution(stdin)) "
    },
    {
        "number": 4122,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.split()[0:2])\n    d = list(map(int, stdin.split()[2:]))\n\n    hp = H\n    for i in range(n):\n        hp += d[i]\n        if hp <= 0:\n            return i + 1 if i > 0 else -1\n\n    return -1\n\ndef"
    },
    {
        "number": 4122,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.split()[0:2])\n    d = list(map(int, stdin.split()[2:]))\n\n    for i in range(n):\n        H += d[i]\n        if H <= 0:\n            return str(i + 1) if i > 0 else -1\n\n    return str(-1)\n\n\nstdin = \"1000 6 -100 -200 -300 125 77 -4\"\nprint(solution(stdin))  # Output: 9\n\nstdin = \"1000000000000 5 -1 0 0 0 0\"\nprint(solution(stdin))  # Output: 4999999999996\n\nstdin = \"10 4 -3 -6 5 4\"\nprint(solution(stdin))  # Output: -1 "
    },
    {
        "number": 4122,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.split()[:2])\n    d = list(map(int, stdin.split()[2:]))\n\n    monster_hp = H\n    first_dead_minute = -1\n\n    for minute in range(1, n + 1):\n        monster_hp += d[minute - 1]\n\n        if monster_hp <= 0:\n            first_dead_minute = minute\n            break\n\n    if first_dead_minute == -1:\n        return \"-1\"\n    else:\n        return str(first_dead_minute)"
    },
    {
        "number": 4122,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.split()[:2])\n    d = list(map(int, stdin.split()[2:]))\n\n    monster_hp = H\n\n    for minute in range(n):\n        monster_hp += d[minute]\n\n        if monster_hp <= 0:\n            return -1\n\n    return -1\n\n\nstdin = \"1000 6 -100 -200 -300 125 77 -4\"\nprint(solution(stdin))\n\nstdin = \"1000000000000 5 -1 0 0 0 0\"\nprint(solution(stdin))\n\nstdin = \"10 4 -3 -6 5 4\"\nprint(solution(stdin)) "
    },
    {
        "number": 4122,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.split()[:2])\n    d = list(map(int, stdin.split()[2:]))\n    monster_hp = H\n    \n    for i in range(n):\n        monster_hp += d[i]\n        if monster_hp <= 0:\n            return -1\n        \n        if monster_hp == 0:\n            return i + 1\n    \n    return -1"
    },
    {
        "number": 4122,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.split()[:2])\n    d = list(map(int, stdin.split()[2:]))\n    if n == 0:\n        return 0\n    for i in range(n):\n        H += d[i]\n        if H <= 0:\n            return i + 1 if i < n - 1 else -1\n    return -1\n\n\ndef"
    },
    {
        "number": 4123,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1]\n    two_grams = {}\n    max_count = 0\n    for i in range(len(s) - 1):\n        two_gram = s[i:i+2]\n        if two_gram in two_grams:\n            two_grams[two_gram] += 1\n        else:\n            two_grams[two_gram] = 1\n        max_count = max(max_count, two_grams[two_gram])\n    for two_gram in two_grams:\n        if two_grams[two_gram] == max_count:\n            return two_gram"
    },
    {
        "number": 4123,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    s = stdin.split(\"\\n\")[1]\n\n    two_grams = {}\n    for i in range(len(s) - 1):\n        two_gram = s[i] + s[i + 1]\n        if two_gram in two_grams:\n            two_grams[two_gram] += 1\n        else:\n            two_grams[two_gram] = 1\n\n    max_count = 0\n    result = \"\"\n    for two_gram, count in two_grams.items():\n        if count > max_count:\n            max_count = count\n            result = two_gram\n\n    return result\n\n\nstdin = \"\"\"7\nABACABA\"\"\"\nprint(solution(stdin))\n\nstdin = \"\"\"5\nZZZAA\"\"\"\nprint(solution(stdin)) "
    },
    {
        "number": 4123,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n    \n    two_grams = {}\n    max_count = 0\n    result = \"\"\n    \n    for i in range(n - 1):\n        two_gram = s[i:i+2]\n        if two_gram in two_grams:\n            two_grams[two_gram] += 1\n        else:\n            two_grams[two_gram] = 1\n            \n        if two_grams[two_gram] > max_count:\n            max_count = two_grams[two_gram]\n            result = two_gram\n            \n    return result\n\ndef"
    },
    {
        "number": 4123,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1]\n\n    two_grams = {}\n    for i in range(n - 1):\n        two_gram = s[i:i+2]\n        if two_gram in two_grams:\n            two_grams[two_gram] += 1\n        else:\n            two_grams[two_gram] = 1\n\n    max_count = max(two_grams.values())\n    for key, value in two_grams.items():\n        if value == max_count:\n            return key"
    },
    {
        "number": 4123,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    s = stdin.split(\"\\n\")[1]\n\n    max_count = 0\n    two_gram = \"\"\n\n    for i in range(n - 1):\n        current_two_gram = s[i] + s[i + 1]\n        current_count = 1\n\n        for j in range(i + 2, n):\n            if s[j] == s[i] and s[j + 1] == s[i + 1]:\n                current_count += 1\n            else:\n                break\n\n        if current_count > max_count:\n            max_count = current_count\n            two_gram = current_two_gram\n\n    return two_gram\n"
    },
    {
        "number": 4123,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    \n    two_gram = ''\n    max_count = 0\n    \n    for i in range(n - 1):\n        two_gram = s[i] + s[i + 1]\n        count = s.count(two_gram)\n        if count > max_count:\n            max_count = count\n            result = two_gram\n    \n    return result\n"
    },
    {
        "number": 4123,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n\n    two_gram = \"\"\n    max_count = 0\n\n    for i in range(n - 1):\n        current_two_gram = s[i] + s[i + 1]\n        current_count = s.count(current_two_gram)\n\n        if current_count > max_count:\n            two_gram = current_two_gram\n            max_count = current_count\n\n    return two_gram\n"
    },
    {
        "number": 4123,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n    two_grams = {}\n    for i in range(n - 1):\n        two_gram = s[i] + s[i + 1]\n        if two_gram in two_grams:\n            two_grams[two_gram] += 1\n        else:\n            two_grams[two_gram] = 1\n    max_count = max(two_grams.values())\n    for two_gram, count in two_grams.items():\n        if count == max_count:\n            return two_gram"
    },
    {
        "number": 4123,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n    \n    two_gram = ''\n    max_count = 0\n    \n    for i in range(len(s) - 1):\n        two_gram = s[i:i+2]\n        count = s.count(two_gram)\n        if count > max_count:\n            max_count = count\n    \n    return two_gram"
    },
    {
        "number": 4123,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n    \n    two_gram = s[0] + s[1]\n    count = 1\n    \n    for i in range(2, n - 1):\n        if s[i] == two_gram[0] and s[i+1] == two_gram[1]:\n            count += 1\n        else:\n            if count > 1:\n                return two_gram\n            two_gram = s[i] + s[i+1]\n            count = 1\n    \n    if count > 1:\n        return two_gram\n    return s[n-2:n]\n"
    },
    {
        "number": 4124,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = input(stdin).split()\n    moves = 0\n    while s != t:\n        if not s:\n            moves += len(t)\n            s = t\n        elif not t:\n            moves += len(s)\n            t = s\n        else:\n            moves += 1\n            s = s[1:]\n            t = t[1:]\n    return moves\n\ndef"
    },
    {
        "number": 4124,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    s = input_list[0]\n    t = input_list[1]\n\n    moves = 0\n    while s != t:\n        if not s:\n            s = t\n        elif not t:\n            t = s\n        else:\n            if len(s) > len(t):\n                s = s[1:]\n                moves += 1\n            elif len(s) < len(t):\n                t = t[1:]\n                moves += 1\n            else:\n                s = s[1:]\n                t = t[1:]\n                moves += 1\n\n    return moves + len(s)\n\nstdin = \"\"\"test\nwest\"\"\"\nprint(solution(stdin))  # Output: 2\n\nstdin = \"\"\"codeforces\nyes\"\"\"\nprint(solution(stdin))  # Output: 9\n\nstdin = \"\"\"test\nyes\"\"\"\nprint(solution(stdin))  # Output: 7\n\nstdin = \"\"\"b\nab\"\"\"\nprint(solution(stdin))  # Output: 1\n\nstdin = \"\"\"test\ntset\"\"\"\nprint(solution(stdin))  # Output: 0\n\nstdin = \"\"\"test\ntest\"\"\"\nprint(solution(stdin))  # Output: 0\n\nstdin = \"\"\"a\nb\"\"\"\nprint(solution(stdin))  # Output: 1\n\nstdin = \"\"\"ab\nab\"\"\"\nprint(solution(stdin))  # Output: 0\n\nstdin = \"\"\"a\naa\"\"\"\nprint(solution(stdin))  # Output: 1\n\nstdin = \"\"\"abc\nabc\"\"\"\nprint(solution(stdin))  # Output: 0\n\nstdin = \"\"\"aaa\naaa\"\"\"\nprint(solution(stdin))  # Output: 0\n\nstdin = \"\"\"aaa\nbaa\"\"\"\nprint(solution(stdin))  # Output: 4\n\nstdin = \"\"\"aaa\naab\"\"\"\nprint(solution(stdin))  # Output: 3\n\nstdin = \"\"\"aaa\naaa\"\"\"\nprint(solution(stdin))  # Output: 0\n\nstdin = \"\"\"aaa\n\"\"\"\nprint(solution(stdin))  # Output: 3\n\nstdin = \"\"\"abcdefghijklmnopqrstuvwxyz\nxyzabcdefghijklmnopqrstuvw\"\"\"\nprint(solution(stdin))  # Output: 52\n\nstdin = \"\"\"xyzabcdefghijklmnopqrstuvw\nxyzabcdefghijklmnopqrstuvw\"\"\"\nprint(solution(stdin))  # Output: 0\n\nstdin = \"\"\"abcdefghijklmnopqrstuvwxyz\nxyzabcdefghijklmnopqrstuvwxy\"\"\"\nprint(solution(stdin))  # Output: 53\n\nstdin = \"\"\"xyzabcdefghijklmnopqrstuvwxy\nxyzabcdefghijklmnopqrstuvwxy\"\"\"\nprint(solution(stdin))  # Output: 0\n\nstdin = \"\"\"abcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\"\"\"\nprint(solution(stdin))  # Output: 0\n\nstdin = \"\"\"a\nbcd\"\"\"\nprint(solution(stdin))  # Output: 2\n\nstdin = \"\"\"a\nbcd\"\"\"\nprint(solution(stdin))  # Output: 2\n\nstdin = \"\"\"a\nbcd\"\"\"\nprint(solution(stdin))  # Output: 2\n\nstdin = \"\"\"a\nbcd\"\"\"\nprint(solution(stdin))  # Output: 2\n\nstdin = \"\"\"a\nbcd\"\"\"\nprint(solution(stdin))  # Output: 2\n\nstdin = \"\"\"a\nbcd\"\"\"\nprint(solution(stdin))  # Output: 2\n\nstdin = \"\"\"a\nbcd\"\"\"\nprint(solution(stdin))  # Output: 2\n\nstdin = \"\"\"a\nbcd\"\"\"\nprint(solution("
    },
    {
        "number": 4124,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    min_moves = 0\n\n    while s != t:\n        if not s:\n            min_moves += len(t)\n            break\n        elif not t:\n            min_moves += len(s)\n            break\n        elif s[0] != t[0]:\n            min_moves += 1\n            s = s[1:] if len(s) > 1 else \"\"\n            t = t[1:] if len(t) > 1 else \"\"\n        else:\n            s = s[1:] if len(s) > 1 else \"\"\n            t = t[1:] if len(t) > 1 else \"\"\n\n    return min_moves\n\n\ndef"
    },
    {
        "number": 4124,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.strip().split('\\n')\n    s = input_list[0]\n    t = input_list[1]\n\n    len_s = len(s)\n    len_t = len(t)\n\n    if len_s == 0:\n        return len_t\n    if len_t == 0:\n        return len_s\n\n    moves = abs(len_s - len_t)\n    moves_count = min(moves, abs(len_s - len_t))\n\n    return moves_count"
    },
    {
        "number": 4124,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, t = input().split()\n    count = 0\n    \n    while len(s) != len(t):\n        if len(s) > len(t):\n            s = s[1:]\n            count += 1\n        else:\n            t = t[1:]\n            count += 1\n    \n    return count"
    },
    {
        "number": 4124,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s, t = input().split()\n    s_len, t_len = len(s), len(t)\n    moves = abs(s_len - t_len)\n    s = s[:s_len - min(s_len, t_len)]\n    t = t[:t_len - min(s_len, t_len)]\n    moves += min(s_len, t_len)\n    return moves\n\ndef"
    },
    {
        "number": 4124,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    i, j = 0, 0\n    moves = 0\n\n    while i < len(s) and j < len(t):\n        if s[i] == t[j]:\n            i += 1\n            j += 1\n        else:\n            s = s[:i] + s[i+1:]\n            t = t[:j] + t[j+1:]\n            moves += 1\n\n    while i < len(s):\n        s = s[:i] + s[i+1:]\n        moves += 1\n\n    while j < len(t):\n        t = t[:j] + t[j+1:]\n        moves += 1\n\n    return moves + len(s) + len(t)\n"
    },
    {
        "number": 4124,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = input(stdin).split()\n    moves = 0\n\n    while s != t:\n        if len(s) == 0:\n            return moves + len(t)\n        elif len(t) == 0:\n            return moves + len(s)\n        elif s[0] == t[0]:\n            s = s[1:]\n            t = t[1:]\n        else:\n            moves += 1\n            if len(s) > 1 and s[1] == t[0]:\n                s = s[1:]\n                t = t[1:]\n            else:\n                s = s[1:] if len(s) > 1 else \"\"\n\n    return moves\n\n\ndef"
    },
    {
        "number": 4124,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    s = input_list[0]\n    t = input_list[1]\n\n    if len(s) == 0:\n        return len(t)\n    if len(t) == 0:\n        return len(s)\n\n    if s[0] == t[0]:\n        return solution(stdin.replace(s[0], \"\").replace(t[0], \"\"))\n    else:\n        return min(solution(stdin.replace(s[0], \"\")), solution(stdin.replace(t[0], \"\"))) + 1\n"
    },
    {
        "number": 4124,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    len_s, len_t = len(s), len(t)\n    if len_s == 0 and len_t == 0:\n        return sum(len(s) for s in [s, t])\n    elif len_s == 0:\n        return len_t\n    elif len_t == 0:\n        return len_s\n    else:\n        moves_s, moves_t = 0, 0\n        while len_s != len_t:\n            if len_s > len_t:\n                s = s[1:]\n                len_s -= 1\n                moves_s += 1\n            elif len_t > len_s:\n                t = t[1:]\n                len_t -= 1\n                moves_t += 1\n        return min(moves_s, moves_t)\n"
    },
    {
        "number": 4125,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, X, *x = map(int, stdin.split())\n    x = sorted(set(x))  # Remove duplicates and sort\n\n    # Initialize variables\n    D = 1\n    visited = set()\n    visited.add(X)\n\n    # Find the maximum value of D\n    while not visited == set(x):\n        D += 1\n        for i in range(len(x)):\n            y = x[i]\n            if y - D >= 0 and y + D <= 10**9 and y - D not in visited:\n                visited.add(y - D)\n            if y + D <= 10**9 and y + D not in visited:\n                visited.add(y + D)\n\n    return D\n"
    },
    {
        "number": 4125,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, X, *x_i = list(map(int, stdin.split()))\n    D = 0\n    visited = set()\n    max_D = 0\n\n    def move1(y):\n        return y + D\n\n    def move2(y):\n        return y - D\n\n    def visit_city(city):\n        visited.add(city)\n        if len(visited) == N:\n            nonlocal max_D\n            max_D = max(max_D, D)\n\n    while len(visited) < N:\n        if X in visited:\n            visited.remove(X)\n        for city in x_i:\n            if city in visited:\n                visited.remove(city)\n            if len(visited) == N:\n                break\n            if city < X:\n                visit_city(move1(city))\n            else:\n                visit_city(move2(city))\n        D += 1\n\n    return str(max_D)\n"
    },
    {
        "number": 4125,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, X, *x_i = list(map(int, stdin.split()))\n    min_distance = min(x_i)\n    max_distance = max(x_i)\n    max_visit_count = 0\n\n    for i in range(min_distance, max_distance + 1):\n        visited_cities = 0\n        current_city = X\n\n        while visited_cities < N:\n            if current_city in x_i:\n                visited_cities += 1\n            current_city += 1 if current_city + i <= max_distance else -1\n\n        max_visit_count = max(max_visit_count, visited_cities)\n\n    return max_visit_count\n"
    },
    {
        "number": 4125,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, X, *x_i = map(int, stdin.split())\n    left = 1\n    right = 10**9\n    while left <= right:\n        mid = (left + right) // 2\n        visited = set()\n        y = X\n        while len(visited) < N:\n            visited.add(y)\n            if y + mid <= 10**9:\n                y += mid\n            else:\n                break\n        if len(visited) < N:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left - 1\n\ninput_str = \"3 3\\n1 7 11\"\nprint(solution(input_str))\n"
    },
    {
        "number": 4125,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split(\"\\n\")\n    N, X = map(int, input_data[0].split())\n    cities = list(map(int, input_data[1].split()))\n    D = abs(max(cities) - min(cities)) + 1\n    return D\n\n\ndef"
    },
    {
        "number": 4125,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def move1(y: int) -> int:\n        return y + D\n\n    def move2(y: int) -> int:\n        return y - D\n\n    N, X, *x_i = map(int, stdin.split())\n    min_dist = float('inf')\n\n    for city in x_i:\n        dist_from_city = abs(X - city)\n        min_dist = min(min_dist, dist_from_city)\n\n    D = min_dist\n    visited_cities = set()\n\n    while len(visited_cities) < N:\n        x = X\n        for _ in range(N):\n            x = min(move1(x), move2(x))\n            if x in x_i and x not in visited_cities:\n                visited_cities.add(x)\n        D += 1\n\n    return D - 1\n\ninput_data = \"3 3\\n1 7 11\"\nprint(solution(input_data)) "
    },
    {
        "number": 4125,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, X, *x = map(int, stdin.split())\n    D = 0\n    for i in range(N):\n        if i == 0:\n            if x[i] == X:\n                D += 1\n        else:\n            if x[i] == x[i-1]:\n                D += 1\n    if D == 0:\n        D = 1\n    return str(D)\n"
    },
    {
        "number": 4125,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, X, *x = map(int, stdin.split())\n    \n    # Initialize D\n    D = 1\n    \n    # Find the maximum value of D that enables you to visit all the cities\n    while True:\n        visited = set()\n        x_i = X\n        \n        # Perform Move 1 and Move 2\n        for _ in range(N):\n            if x_i in visited:\n                break\n            visited.add(x_i)\n            x_i += D\n            x_i -= D\n        \n        # If all cities are visited, return the maximum value of D\n        if len(visited) == N:\n            return D\n        \n        # Otherwise, increment D and try again\n        D += 1\n"
    },
    {
        "number": 4125,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, X, *x_i = map(int, stdin.split())\n    D = x_i[-1] - X\n\n    while D > 0:\n        for i in range(N):\n            if x_i[i] < X:\n                if x_i[i] + D > X:\n                    X = x_i[i] + D\n                else:\n                    break\n            elif x_i[i] > X:\n                if x_i[i] - D < X:\n                    X = x_i[i] - D\n                else:\n                    break\n        else:\n            return D\n        D -= 1\n\n    return 0"
    },
    {
        "number": 4125,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, X, *x_i = map(int, stdin.split())\n    D = 1\n    max_D = 0\n    while True:\n        visited = set()\n        y = X\n        for i in range(N):\n            visited.add(y)\n            if y in x_i:\n                break\n            if y < min(x_i):\n                y += D\n            else:\n                y -= D\n        if len(visited) == len(x_i) + 1:\n            max_D = max(max_D, D)\n            D += 1\n        else:\n            break\n    return max_D\n"
    },
    {
        "number": 4126,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n\n    if n % 2 == 0:\n        return \"No\"\n\n    for i in range(n // 2):\n        if s[i] != s[n - i - 1]:\n            return \"No\"\n\n    first_half = s[:n // 2]\n    second_half = s[n // 2:]\n\n    if first_half != first_half[::-1]:\n        return \"No\"\n\n    if second_half != second_half[::-1]:\n        return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4126,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n\n    s = stdin.strip()\n    n = len(s)\n\n    if n % 2 == 0 or n < 3 or n > 99:\n        return \"No\"\n\n    first_half = s[:n // 2]\n    second_half = s[n // 2:]\n\n    if not (is_palindrome(s) and is_palindrome(first_half) and is_palindrome(second_half)):\n        return \"No\"\n\n    return \"Yes\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n\n    # Check if the string is a palindrome\n    if s != s[::-1]:\n        return \"No\"\n\n    # Check if the first half of the string is a palindrome\n    first_half = s[:n//2]\n    if first_half != first_half[::-1]:\n        return \"No\"\n\n    # Check if the second half of the string is a palindrome\n    second_half = s[n//2+1:]\n    if second_half != second_half[::-1]:\n        return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4126,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n\n    # Check if the string is a palindrome\n    if s != s[::-1]:\n        return \"No\"\n\n    # Check if the first half of the string is a palindrome\n    first_half = s[:n//2]\n    if first_half != first_half[::-1]:\n        return \"No\"\n\n    # Check if the second half of the string is a palindrome\n    second_half = s[n//2:]\n    if second_half != second_half[::-1]:\n        return \"No\"\n\n    return \"Yes\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n\n    # Check if S is a palindrome\n    if s != s[::-1]:\n        return \"No\"\n\n    # Check if the strings from 1-st through ((N-1)/2)-th characters and the (N+3)/2-st through N-th characters are palindromes\n    a = s[:n//2]\n    b = s[n//2:]\n    if a != a[::-1] or b != b[::-1]:\n        return \"No\"\n\n    return \"Yes\"\n\n\ndef"
    },
    {
        "number": 4126,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    N = len(S)\n\n    # Check if S is a palindrome\n    left, right = 0, N - 1\n    while left < right:\n        if S[left] != S[right]:\n            return \"No\"\n        left += 1\n        right -= 1\n\n    # Check if the string formed by the 1-st through ((N-1)/2)-th characters is a palindrome\n    left, right = 0, (N - 3) // 2\n    while left < right:\n        if S[left] != S[right]:\n            return \"No\"\n        left += 1\n        right -= 1\n\n    # Check if the string consisting of the (N+3)/2-st through N-th characters is a palindrome\n    left, right = (N + 3) // 2, N - 1\n    while left < right:\n        if S[left] != S[right]:\n            return \"No\"\n        left += 1\n        right -= 1\n\n    return \"Yes\""
    },
    {
        "number": 4126,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n\n    N = len(S)\n    left_half = S[:N//2]\n    right_half = S[N//2:]\n\n    if not is_palindrome(S):\n        return \"No\"\n\n    if not is_palindrome(left_half):\n        return \"No\"\n\n    if not is_palindrome(right_half):\n        return \"No\"\n\n    return \"Yes\"\n\n\ndef"
    },
    {
        "number": 4126,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    \n    if len(S) % 2 == 0 or len(S) < 3 or len(S) > 99:\n        return \"No\"\n    \n    S_list = list(S)\n    first_half = S_list[:len(S)//2]\n    second_half = S_list[len(S)//2:]\n    \n    if S != S[::-1]:\n        return \"No\"\n    \n    if first_half != first_half[::-1] or second_half != second_half[::-1]:\n        return \"No\"\n    \n    return \"Yes\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n\n    # Check if the length of S is odd and between 3 and 99\n    if n % 2 != 1 or n < 3 or n > 99:\n        return \"No\"\n\n    # Check if S is a palindrome\n    if s != s[::-1]:\n        return \"No\"\n\n    # Check if the substring formed by the 1-st through ((N-1)/2)-th characters is a palindrome\n    left = s[:n // 2 + 1]\n    if left != left[::-1]:\n        return \"No\"\n\n    # Check if the substring consisting of the (N+3)/2-st through N-th characters is a palindrome\n    right = s[(n - 1) // 2:]\n    if right != right[::-1]:\n        return \"No\"\n\n    return \"Yes\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    \n    # check if s is a palindrome\n    if s != s[::-1]:\n        return \"No\"\n    \n    # check if substring formed by the 1-st through ((N-1)/2)-th characters is a palindrome\n    s1 = s[:n//2]\n    if s1 != s1[::-1]:\n        return \"No\"\n    \n    # check if substring consisting of the (N+3)/2-st through N-th characters is a palindrome\n    s2 = s[n//2:n]\n    if s2 != s2[::-1]:\n        return \"No\"\n    \n    return \"Yes\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    A = A * B\n    return str(A // 10)\n\nstdin = input(\"Enter the input: \")\nprint(solution(stdin)) "
    },
    {
        "number": 4127,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    product = A * B\n    truncated_product = int(product)\n    return str(truncated_product)\n\ndef"
    },
    {
        "number": 4127,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(float, stdin.split())\n    result = int(A * B)\n    return str(result)"
    },
    {
        "number": 4127,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(float, stdin.split())\n    A_int = int(A)\n    result = A_int * B\n    result_truncated = int(result)\n    return str(result_truncated)\n\nstdin = \"198 1.10\"\nprint(solution(stdin)) "
    },
    {
        "number": 4127,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(float, stdin.split())\n    result = int(A * B)\n    return str(result)\n\ndef"
    },
    {
        "number": 4127,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(float, stdin.split())\n    truncated_product = int(A * B)\n    return str(truncated_product)"
    },
    {
        "number": 4127,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(float, stdin.split())\n    result = int(A * B)\n    return str(result)\n\ndef"
    },
    {
        "number": 4127,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(float, stdin.split())\n    answer = int(A * B)\n    return str(answer)\n"
    },
    {
        "number": 4127,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(float, stdin.split())\n    A_int = int(A)\n    truncated_product = A_int * B\n    result = truncated_product // 1\n    return str(result)\n\n\nstdin = input(\"Enter A and B: \")\nprint(solution(stdin)) "
    },
    {
        "number": 4127,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(float, stdin.split())\n    answer = int(A * B)\n    return str(answer)"
    },
    {
        "number": 4128,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    output = []\n    for i in range(1, t+1):\n        n = int(stdin.split()[i])\n        a, b = divmod(n, 2)\n        if a == 0:\n            output.append(0)\n        elif a == 1:\n            output.append(1)\n        else:\n            count = 0\n            for j in range(1, a+1):\n                count += binomial(a, j) * binomial(b, a-j)\n            output.append(count)\n    return \"\\n\".join(str(x) for x in output)\n\n\ndef"
    },
    {
        "number": 4128,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        if n % 2 == 0:\n            a = n // 2\n            b = a - 1\n        else:\n            a = n // 2 + 1\n            b = a - 1\n        print(b)\n        print(a - b)\n    return \"Case #{}: {}\".format(i + 1, a * b)\n"
    },
    {
        "number": 4128,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        if n % 2 == 0:\n            a = n // 2\n            b = a\n        else:\n            a = n // 2 + 1\n            b = n - a\n        if a > b and a > 0 and b > 0:\n            result = 1\n            for j in range(2, a + 1):\n                result *= j\n            for j in range(2, b + 1):\n                result *= j\n        else:\n            result = 0\n        print(result)\n    \n    return \"\".join(result) "
    },
    {
        "number": 4128,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    inputs = stdin.split('\\n')\n    inputs.pop(0)\n    results = []\n    for input_ in inputs:\n        n = int(input_)\n        if n % 2 == 0:\n            results.append(0)\n        else:\n            a, b = n // 2, n // 2 + 1\n            results.append(n)\n    return \"\\n\".join(str(result) for result in results)"
    },
    {
        "number": 4128,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    output = []\n\n    for _ in range(t):\n        n = int(input())\n        a, b = divmod(n, 2)\n\n        if a > b:\n            ways = 1\n        else:\n            ways = 0\n\n        output.append(ways)\n\n    return \"\\n\".join(map(str, output))\n"
    },
    {
        "number": 4128,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    output = []\n\n    def num_ways(n):\n        if n <= 1:\n            return 1\n        if n % 2 == 0:\n            a = n // 2\n            b = n // 2\n        else:\n            a = n // 2 + 1\n            b = n // 2\n\n        return num_ways(a) * num_ways(b)\n\n    for _ in range(t):\n        n = int(stdin)\n        if n % 2 == 0:\n            a = n // 2\n            b = n // 2\n        else:\n            a = n // 2 + 1\n            b = n // 2\n\n        if a <= 0 or b <= 0 or a <= b:\n            output.append(0)\n        else:\n            output.append(num_ways(n))\n\n    return '\\n'.join(map(str, output))\n"
    },
    {
        "number": 4128,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.splitlines()[0])\n    result = []\n    for i in range(1, test_cases + 1):\n        n = int(stdin.splitlines()[i])\n        if n % 2 == 0:\n            result.append(0)\n        else:\n            a = (n + 1) // 2\n            b = n - a\n            if a > b:\n                result.append(1)\n            else:\n                result.append(0)\n    return \"\\n\".join(map(str, result))"
    },
    {
        "number": 4128,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    result = []\n    for i in range(t):\n        n = int(stdin.split()[1])\n        a = n\n        b = 0\n        while a >= b + 1:\n            a -= 1\n            b = n - a\n            if a > b:\n                result.append(1)\n            else:\n                result.append(0)\n    return '\\n'.join(map(str, result))\n"
    },
    {
        "number": 4128,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    answer = []\n    for _ in range(t):\n        n = int(stdin.split()[1])\n        if n < 2:\n            answer.append(0)\n        else:\n            answer.append(n // 2)\n    return '\\n'.join(map(str, answer))\n"
    },
    {
        "number": 4128,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    stdin = stdin.split('\\n')\n    result = []\n\n    def count_ways(n: int) -> int:\n        if n == 1 or n == 2:\n            return 1\n        elif n == 3:\n            return 2\n        else:\n            return count_ways(n - 1) + count_ways(n - 2)\n\n    for i in range(1, t + 1):\n        n = int(stdin[i].split()[0])\n        if n <= 2:\n            result.append(1)\n        elif n == 3:\n            result.append(2)\n        else:\n            a = n // 2 + 1\n            b = n - a + 1\n            if a > b and a > 1 and b > 1:\n                result.append(count_ways(n))\n            else:\n                result.append(0)\n\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 4129,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split()[:3])\n    cities = [set() for _ in range(n + 1)]\n    for _ in range(m):\n        u, v = map(int, stdin.split()[3:5])\n        cities[u].add(v)\n        cities[v].add(u)\n    visited = set()\n    def dfs(node: int) -> bool:\n        if node in visited:\n            return True\n        visited.add(node)\n        for neighbor in cities[node]:\n            if neighbor != s and not dfs(neighbor):\n                return False\n        return True\n    for i in range(1, n + 1):\n        if i != s and not dfs(i):\n            return 1\n    return 0"
    },
    {
        "number": 4129,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split()[:3])\n    adjacency_list = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        u, v = map(int, stdin.split()[3:5])\n        adjacency_list[u].append(v)\n        adjacency_list[v].append(u)\n    \n    visited = [False] * (n + 1)\n    queue = [s]\n    visited[s] = True\n    \n    while queue:\n        current = queue.pop(0)\n        for neighbor in adjacency_list[current]:\n            if not visited[neighbor]:\n                visited[neighbor] = True\n                queue.append(neighbor)\n                \n    unreachable_cities = sum(1 for city in visited if not visited[city])\n    return unreachable_cities\n"
    },
    {
        "number": 4129,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n    graph = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        u, v = map(int, input().split())\n        graph[u].append(v)\n        graph[v].append(u)\n    queue = [s]\n    visited = [False] * (n + 1)\n    visited[s] = True\n    new_roads = 0\n    while queue:\n        node = queue.pop(0)\n        for neighbor in graph[node]:\n            if not visited[neighbor]:\n                visited[neighbor] = True\n                new_roads += 1\n                queue.append(neighbor)\n    return str(new_roads)"
    },
    {
        "number": 4129,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def is_reachable(s: int, visited: set) -> bool:\n        if s in visited:\n            return True\n        visited.add(s)\n        for city in roads[s]:\n            if city not in visited and is_reachable(city, visited):\n                return True\n        return False\n\n    n, m, s = map(int, stdin.split()[:3])\n    roads = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        u, v = map(int, stdin.split()[1:3])\n        roads[u].append(v)\n        roads[v].append(u)\n\n    reachable = set()\n    for city in range(1, n + 1):\n        if is_reachable(city, reachable):\n            reachable.add(city)\n\n    if len(reachable) < n:\n        reachable_from_s = set()\n        is_reachable(s, reachable_from_s)\n        new_roads = n - len(reachable) + len(reachable_from_s)\n    else:\n        new_roads = 0\n\n    return str(new_roads)\n"
    },
    {
        "number": 4129,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def find_farthest_city(cities: set, s: int) -> int:\n        farthest = 0\n        for city in cities:\n            if city != s and (city > farthest or city == farthest and city < s):\n                farthest = city\n        return farthest\n\n    def distance_to_cities(city: int, cities: set) -> int:\n        return sum(city != neighbor for neighbor in cities)\n\n    n, m, s = map(int, stdin.split()[:3])\n    cities = set(range(1, n + 1))\n    roads = set(map(int, stdin.split()[3:]))\n\n    min_new_roads = 0\n    while cities:\n        farthest = find_farthest_city(cities, s)\n        min_new_roads += distance_to_cities(farthest, cities)\n        cities.remove(farthest)\n\n    return str(min_new_roads)\n"
    },
    {
        "number": 4129,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin.strip()\n    n, m, s = map(int, input_str.split()[:3])\n    adjacency_list = [[] for _ in range(n + 1)]\n\n    for _ in range(m):\n        u, v = map(int, input_str.split()[3:5])\n        adjacency_list[u].append(v)\n        adjacency_list[v].append(u)\n\n    visited = [False] * (n + 1)\n    def dfs(node):\n        if visited[node]:\n            return False\n        visited[node] = True\n        for neighbor in adjacency_list[node]:\n            if not visited[neighbor] and not dfs(neighbor):\n                return False\n        return True\n\n    if dfs(s):\n        return 0\n\n    count = 0\n    for i in range(1, n + 1):\n        if not dfs(i):\n            count += 1\n\n    return count"
    },
    {
        "number": 4129,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def bfs(graph, visited, start):\n        queue = [start]\n        visited[start] = True\n        while queue:\n            node = queue.pop(0)\n            for neighbor in graph[node]:\n                if not visited[neighbor]:\n                    visited[neighbor] = True\n                    queue.append(neighbor)\n\n    n, m, s = map(int, stdin.split()[:3])\n    graph = [[] for _ in range(n + 1)]\n    visited = [False] * (n + 1)\n    for _ in range(m):\n        u, v = map(int, stdin.split()[3:5])\n        graph[u].append(v)\n        graph[v].append(u)\n    bfs(graph, visited, s)\n    count = sum(not visited[i] for i in range(1, n + 1))\n    return count if count > 0 else 0\n\n\ninput_data = '''9 9 1\n1 2\n1 3\n2 3\n1 5\n5 6\n6 1\n1 8\n9 8\n7 1\n'''\n\noutput = solution(input_data)\nprint(output)  # Output: 3\n\n\ninput_data = '''5 4 5\n1 2\n2 3\n3 4\n4 1\n'''\n\noutput = solution(input_data)\nprint(output)  # Output: 1 "
    },
    {
        "number": 4129,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def find_distances(n: int, s: int, graph: dict) -> list:\n        visited = [False] * (n + 1)\n        distances = [float('inf')] * (n + 1)\n        distances[s] = 0\n\n        queue = [(0, s)]\n        while queue:\n            dist, node = queue.pop(0)\n            if visited[node]:\n                continue\n\n            visited[node] = True\n            for neighbor, weight in graph[node]:\n                new_dist = dist + weight\n                if new_dist < distances[neighbor]:\n                    distances[neighbor] = new_dist\n                    queue.append((new_dist, neighbor))\n\n        return distances\n\n    def count_new_roads(n: int, s: int, graph: dict) -> int:\n        distances = find_distances(n, s, graph)\n        return sum(distance == float('inf') for distance in distances)\n\n    # Converts the input string into a list of integers\n    input_list = list(map(int, stdin.split()))\n\n    n, m, s = input_list[0], input_list[1], input_list[2]\n    graph = [[] for _ in range(n + 1)]\n\n    # Builds the graph with the given roads\n    for i in range(m):\n        u, v = input_list[3 + i * 2], input_list[3 + i * 2 + 1]\n        graph[u].append((v, 1))\n        graph[v].append((u, 1))\n\n    new_roads_needed = count_new_roads(n, s, graph)\n    return str(new_roads_needed)\n\n\ninput_string = \"\"\"9 9 1\n1 2\n1 3\n2 3\n1 5\n5 6\n6 1\n1 8\n9 8\n7 1\"\"\"\n\nprint(solution(input_string))\n\n\ninput_string = \"\"\"5 4 5\n1 2\n2 3\n3 4\n4 1\n\"\"\"\n\nprint(solution(input_string))\n"
    },
    {
        "number": 4129,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def bfs(graph: list, start: int, visited: list):\n        queue = [(start, 0)]\n        while queue:\n            vertex, level = queue.pop(0)\n            if vertex not in visited:\n                visited.append(vertex)\n                for neighbor, weight in graph[vertex]:\n                    if neighbor not in visited:\n                        queue.append((neighbor, level + 1))\n        return visited\n\n    n, m, s = map(int, input().split())\n    graph = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        u, v = map(int, input().split())\n        graph[u].append((v, 1))\n        graph[v].append((u, 1))\n\n    visited = bfs(graph, s, [])\n    if len(visited) == n:\n        return \"0\"\n    else:\n        extra_roads = 0\n        for i in range(1, n + 1):\n            if i not in visited:\n                extra_roads += 1\n        return str(extra_roads)\n"
    },
    {
        "number": 4129,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def bfs(graph, start):\n        visited = [False] * (n + 1)\n        queue = [start]\n        visited[start] = True\n        distance = [float(\"inf\")] * (n + 1)\n        distance[start] = 0\n        while queue:\n            curr = queue.pop(0)\n            for neighbor in graph[curr]:\n                if not visited[neighbor]:\n                    queue.append(neighbor)\n                    visited[neighbor] = True\n                    distance[neighbor] = min(distance[neighbor], distance[curr] + 1)\n        return distance\n\n    def get_new_roads(distance, start):\n        new_roads = 0\n        for i in range(1, n + 1):\n            if distance[i] == float(\"inf\"):\n                new_roads += 1\n        return new_roads\n\n    # Read input\n    lines = stdin.splitlines()\n    n, m, s = map(int, lines[0].split())\n    graph = [[] for _ in range(n + 1)]\n    for line in lines[1:]:\n        u, v = map(int, line.split())\n        graph[u].append(v)\n        graph[v].append(u)\n\n    # Run BFS\n    distance = bfs(graph, s)\n\n    # Calculate minimum number of new roads\n    new_roads = get_new_roads(distance, s)\n\n    return str(new_roads)\n\n\ndef"
    },
    {
        "number": 4130,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    boxers = [int(x) for x in stdin.splitlines()[1].split()]\n    boxers.sort()\n    i = 0\n    j = n - 1\n    max_people = 0\n    while i < j:\n        max_weight = boxers[j] - 1\n        while i < j and boxers[i] > max_weight:\n            i += 1\n        max_people = max(max_people, j - i + 1)\n        j -= 1\n    return str(max_people)\n"
    },
    {
        "number": 4130,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    max_weight = max(a)\n    max_weight_count = 0\n\n    for i in range(1, max_weight + 1):\n        if a.count(i) > 0:\n            max_weight_count += 1\n\n    return max_weight_count\n"
    },
    {
        "number": 4130,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    boxers = [int(x) for x in stdin.split(\"\\n\")[1].split(\" \")]\n    team = []\n    for i in range(n):\n        for j in range(n):\n            if i != j and boxers[j] not in team:\n                team.append(boxers[j])\n                break\n    return str(len(team))\n"
    },
    {
        "number": 4130,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()[1:]))\n    \n    max_people = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                for l in range(k+1, n):\n                    if a[i] != a[j] != a[k] != a[l]:\n                        max_people = max(max_people, 4)\n                    else:\n                        for m in range(i+1, n):\n                            if a[j] != a[k] != a[l] != a[m]:\n                                max_people = max(max_people, 4)\n                            else:\n                                for n in range(i+1, n):\n                                    if a[k] != a[l] != a[m] != a[n]:\n                                        max_people = max(max_people, 4)\n                                    else:\n                                        for o in range(i+1, n):\n                                            if a[l] != a[m] != a[n] != a[o]:\n                                                max_people = max(max_people, 4)\n                                            else:\n                                                for p in range(i+1, n):\n                                                    if a[m] != a[n] != a[o] != a[p]:\n                                                        max_people = max(max_people, 4)\n                                                    else:\n                                                        for q in range(i+1, n):\n                                                            if a[n] != a[o] != a[p] != a[q]:\n                                                                max_people = max(max_people, 4)\n                                                            else:\n                                                                for r in range(i+1, n):\n                                                                    if a[o] != a[p] != a[q] != a[r]:\n                                                                        max_people = max(max_people, 4)\n                                                                    else:\n                                                                        for s in range(i+1, n):\n                                                                            if a[p] != a[q] != a[r] != a[s]:\n                                                                                max_people = max(max_people, 4)\n                                                                            else:\n                                                                                for t in range(i+1, n):\n                                                                                    if a[q] != a[r] != a[s] != a[t]:\n                                                                        max_people = max(max_people, 4)\n                                                                    else:\n                                                                        for u in range(i+1, n):\n                                                                            if a[r] != a[s] != a[t] != a[u]:\n                                                                                max_people = max(max_people, 4)\n                                                                            else:\n                                                                                for v in range(i+1, n):\n                                                                                    if a[s] != a[t] != a[u] != a[v]:\n                                                                        max_people = max(max_people, 4)\n                                                                    else:\n                                                                        for w in range(i+1, n):\n                                                                            if a[t] != a[u] != a[v] != a[w]:\n                                                                max_people = max(max_people, 4)\n                                                                            else:\n                                                                                for x in range(i+1, n):\n                                                                                    if a[u] != a[v] != a[w] != a[x]:\n                                                                        max_people = max(max_people, 4)\n                                                                                    else:\n                                                                                        for y in range(i+1, n):\n                                                                                            if a[v] != a[w] != a[x] != a[y]:\n                                                                                max_people = max(max_people, 4)\n                                                                                            else:\n                                                                                                for z in range(i+1, n"
    },
    {
        "number": 4130,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    boxers = [int(a) for a in stdin.splitlines()[1].split()]\n    \n    boxers_set = set(boxers)\n    max_team_size = 0\n    \n    for i in range(1, max(boxers_set) + 1):\n        team_size = sum([1 for b in boxers if b == i])\n        if team_size > 0:\n            max_team_size = max(max_team_size, team_size)\n    \n    return str(max_team_size)"
    },
    {
        "number": 4130,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n    a.sort()\n\n    min_diff = a[-1] - a[0]\n    max_team_size = 1\n\n    for i in range(1, n):\n        diff = a[i] - a[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            max_team_size = i + 1\n\n    return max_team_size\n"
    },
    {
        "number": 4130,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    boxers = list(map(int, stdin.splitlines()[1].split()))\n    \n    # Function to count the number of unique weights in the boxers\n    def count_unique_weights(boxers):\n        unique_weights = set()\n        for boxer in boxers:\n            if boxer not in unique_weights:\n                unique_weights.add(boxer)\n        return len(unique_weights)\n    \n    # Find the maximum possible number of unique weights\n    max_unique_weights = count_unique_weights(boxers)\n    \n    return max_unique_weights"
    },
    {
        "number": 4130,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    boxers = list(map(int, stdin.splitlines()[1].split()))\n\n    boxers.sort(reverse=True)\n    max_team_size = 0\n\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                for k in range(n):\n                    if k != i and k != j:\n                        if boxers[i] != boxers[j] != boxers[k]:\n                            max_team_size = 3\n                            break\n\n    return max_team_size\n"
    },
    {
        "number": 4130,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()[1:]))\n    max_team_size = 1\n\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                for k in range(n):\n                    if k != i and k != j:\n                        for l in range(n):\n                            if l != i and l != j and l != k:\n                                if a[i] != a[j] and a[j] != a[k] and a[k] != a[l]:\n                                    max_team_size = max(max_team_size, 4)\n\n    return str(max_team_size)\n"
    },
    {
        "number": 4130,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    max_team_size = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] != a[j]:\n                max_team_size += 1\n\n    return str(max_team_size)\n"
    },
    {
        "number": 4131,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    N, M = map(int, input_data.pop(0).split())\n    prefecture_to_cities = {}\n    for i in range(M):\n        prefecture, year = map(int, input_data.pop(0).split())\n        if prefecture not in prefecture_to_cities:\n            prefecture_to_cities[prefecture] = []\n        prefecture_to_cities[prefecture].append(year)\n\n    city_ids = []\n    for prefecture, cities in prefecture_to_cities.items():\n        cities.sort()\n        for index, city_year in enumerate(cities, 1):\n            city_id = f\"{prefecture:06d}{index:06d}\"\n            city_ids.append(city_id)\n\n    return '\\n'.join(city_ids)\n"
    },
    {
        "number": 4131,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    prefectures = list(map(int, stdin.split()[2:2+M:2]))\n    years = list(map(int, stdin.split()[3:3+M:2]))\n    unique_years = sorted(set(years))\n\n    city_ids = [['000000' for _ in range(6)] for _ in range(N)]\n\n    for city_index, (prefecture, year) in enumerate(zip(prefectures, years), start=1):\n        prefecture_id = str(prefecture).zfill(6)\n        city_id = prefecture_id + str(unique_years.index(year) + 1).zfill(6)\n        city_ids[prefecture - 1][unique_years.index(year)] = city_id\n\n    return '\\n'.join(city_ids[prefecture - 1] for prefecture in range(1, N + 1))\n\ninput_str = '''2 3\n1 32\n2 63\n1 12'''\n\nprint(solution(input_str))\n"
    },
    {
        "number": 4131,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    prefectures = [0] * (N + 1)\n    city_id = [0] * (N + 1)\n\n    for i in range(1, M + 1):\n        prefecture, year = map(int, stdin.split()[i - 1:i])\n        prefecture_index = prefecture\n        year_index = year\n\n        if prefecture_index == 0:\n            continue\n\n        if city_id[prefecture_index] == 0:\n            city_id[prefecture_index] = year_index\n        else:\n            city_id[prefecture_index] = min(city_id[prefecture_index], year_index)\n\n    for i in range(1, N + 1):\n        if city_id[i] == 0:\n            continue\n\n        id_number = \"{:06d}\".format(i) + \"{:06d}\".format(city_id[i])\n        print(id_number)\n"
    },
    {
        "number": 4131,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    prefectures = sorted(set(map(int, stdin.split()[2::2])))\n\n    id_numbers = []\n    for p in prefectures:\n        cities_in_prefecture = [i for i in range(M) if int(stdin.split()[i * 2 - 2]) == p]\n        for i, city in enumerate(cities_in_prefecture):\n            year = int(stdin.split()[city * 2 + 1])\n            id_number = str(p).zfill(6) + str(i + 1).zfill(6)\n            id_numbers.append(id_number)\n\n    return \"\\n\".join(id_numbers)\n"
    },
    {
        "number": 4131,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    data = stdin.split()[2:]\n    prefectures = {}\n    for i in range(0, len(data), 2):\n        p, y = map(int, data[i:i+2])\n        if p not in prefectures:\n            prefectures[p] = []\n        prefectures[p].append((y, i//2+1))\n\n    result = []\n    for p in range(1, N+1):\n        if p in prefectures:\n            cities = sorted(prefectures[p], key=lambda x: x[0])\n            for i, (_, city) in enumerate(cities):\n                id_number = f\"{p:06d}{i+1:06d}\"\n                result.append(id_number)\n    return \"\\n\".join(result)\n"
    },
    {
        "number": 4131,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    prefectures = list(map(int, stdin.split()[2:2+M:2]))\n    years = list(map(int, stdin.split()[3:3+M:2]))\n\n    id_numbers = []\n    for pref, year in zip(prefectures, years):\n        for i in range(M):\n            if prefectures[i] == pref:\n                id_number = \"{:06d}{:06d}\".format(pref, i+1)\n                id_numbers.append(id_number)\n                M -= 1\n                break\n\n    return \"\\n\".join(sorted(id_numbers))\n\n\nstdin = \"2 3\\n1 32\\n2 63\\n1 12\"\nprint(solution(stdin)) "
    },
    {
        "number": 4131,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    prefectures = [0] * (N + 1)\n    for _ in range(M):\n        P, Y = map(int, stdin.split()[1:])\n        prefectures[P] = max(prefectures[P], Y)\n\n    id_numbers = []\n    for i in range(1, N + 1):\n        if prefectures[i] == 0:\n            continue\n        for j in range(1, 1000001):\n            if j == prefectures[i]:\n                id_numbers.append(f\"{i:06d}{j:06d}\")\n                break\n\n    return \"\\n\".join(id_numbers)"
    },
    {
        "number": 4131,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_values = stdin.split()\n    N = int(input_values[0])\n    M = int(input_values[1])\n    prefecture_cities = [[] for _ in range(N+1)]\n    for i in range(2, len(input_values), 2):\n        prefecture = int(input_values[i-1])\n        year = int(input_values[i])\n        prefecture_cities[prefecture].append((year, len(prefecture_cities[prefecture])+1))\n    \n    city_ids = []\n    for prefecture, cities in enumerate(prefecture_cities):\n        for year, index in cities:\n            city_id = f\"{prefecture:06d}{index:06d}\"\n            city_ids.append(city_id)\n    \n    return \"\\n\".join(city_ids)"
    },
    {
        "number": 4131,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    prefectures = list(map(int, stdin.split()[2:]))\n    cities = [[] for _ in range(N + 1)]\n\n    for i in range(M):\n        prefecture, year = map(int, stdin.split()[2 + i * 2 : 2 + (i + 1) * 2])\n        cities[prefecture].append((year, i))\n\n    ids = []\n    for prefecture, cities_in_prefecture in enumerate(cities):\n        if not cities_in_prefecture:\n            continue\n\n        cities_in_prefecture.sort()\n        for index, (_, city_index) in enumerate(cities_in_prefecture):\n            id_number = str(prefecture).zfill(6) + str(index + 1).zfill(6)\n            ids.append(id_number)\n\n    return \"\\n\".join(ids)"
    },
    {
        "number": 4131,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, input().split())\n    prefecture_to_cities = [[] for _ in range(N + 1)]\n\n    for _ in range(M):\n        prefecture, year = map(int, input().split())\n        prefecture_to_cities[prefecture].append((year, len(prefecture_to_cities[prefecture]) + 1))\n\n    id_numbers = []\n    for prefecture, cities in enumerate(prefecture_to_cities):\n        for year, index in cities:\n            id_number = f\"{str(prefecture).zfill(6)}{str(index).zfill(6)}\"\n            id_numbers.append(id_number)\n\n    return \"\\n\".join(id_numbers)\n\n\nstdin = \"\"\"2 3\n1 32\n2 63\n1 12\"\"\"\n\nprint(solution(stdin)) "
    },
    {
        "number": 4132,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    A = list(map(int, stdin.split('\\n')[1].split()))\n    min_health = float('inf')\n\n    while len(A) > 1:\n        # Find alive monsters\n        alive_monsters = [i + 1 for i, a in enumerate(A) if a > 0]\n        # Attack a random alive monster\n        attacker_idx = random.randint(0, len(alive_monsters) - 1)\n        attacker = alive_monsters[attacker_idx]\n        # Choose a random alive monster to attack\n        target_idx = random.randint(0, len(alive_monsters) - 1)\n        while target_idx == attacker_idx:\n            target_idx = random.randint(0, len(alive_monsters) - 1)\n        target = alive_monsters[target_idx]\n        # Calculate attack damage\n        damage = A[attacker - 1]\n        # Update health\n        A[target - 1] -= damage\n        A[attacker - 1] = 0\n        # Update minimum health\n        min_health = min(min_health, A[target - 1])\n\n    return min_health"
    },
    {
        "number": 4132,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(input())\n    monster_health = list(map(int, input().split()))\n\n    while N > 1:\n        # Find alive monsters\n        alive_monsters = [i for i, health in enumerate(monster_health) if health > 0]\n\n        # Choose random alive monster and its target\n        attacker = random.choice(alive_monsters)\n        target = random.choice(alive_monsters)\n\n        # Calculate attack damage and update health\n        damage = monster_health[attacker]\n        monster_health[target] = max(monster_health[target] - damage, 0)\n\n        # Remove dead monsters\n        N = len([health for health in monster_health if health > 0])\n\n    # Last monster's health is the minimum possible final health\n    return min(monster_health)"
    },
    {
        "number": 4132,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    A_i = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    while len(A_i) > 1:\n        # Choose a random monster to attack\n        attacker = random.choice(range(len(A_i)))\n        # Choose another random monster to be attacked\n        victim = random.choice(range(len(A_i)))\n        # If the victim is alive, update its health\n        if victim != attacker and A_i[victim] > 0:\n            A_i[victim] -= A_i[attacker]\n        # Remove dead monsters from the list\n        A_i = [A_i[i] for i in range(len(A_i)) if A_i[i] > 0]\n\n    return str(A_i[0])\n"
    },
    {
        "number": 4132,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = map(int, stdin.split())\n    A = list(enumerate(A, start=1))\n    A_dict = {i: A_i for i, A_i in A}\n    while len(A_dict) > 1:\n        attacker, defender = random.sample(A_dict.keys(), 2)\n        A_dict[defender] -= A_dict[attacker]\n        if A_dict[defender] <= 0:\n            A_dict.pop(defender)\n    return min(A_dict.values())\n"
    },
    {
        "number": 4132,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = map(int, stdin.split())\n    health = [0] * N\n    for i in range(N):\n        health[i] = A[i]\n\n    while len(set(health)) > 1:\n        # Find alive monsters\n        alive_monsters = [i for i in range(N) if health[i] > 0]\n        # Find the index of the monster that will attack next\n        index_to_attack = alive_monsters[random.randint(0, len(alive_monsters) - 1)]\n        # Find the monster that will be attacked\n        monster_to_attack = random.randint(0, N - 1)\n        while monster_to_attack == index_to_attack:\n            monster_to_attack = random.randint(0, N - 1)\n        # Reduce the health of the monster that will be attacked\n        health[monster_to_attack] -= health[index_to_attack]\n\n    # Find the last monster alive and its health\n    last_monster_alive = health.index(max(health))\n    last_monster_health = health[last_monster_alive]\n\n    return str(last_monster_health)"
    },
    {
        "number": 4132,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = map(int, stdin.split())\n    A_dict = {i: A_i for i, A_i in enumerate(A, start=1)}\n    while len(A_dict) > 1:\n        alive_monsters = [i for i, health in A_dict.items() if health > 0]\n        monster_to_attack = random.choice(alive_monsters)\n        for attacked_monster in alive_monsters:\n            if attacked_monster != monster_to_attack:\n                A_dict[attacked_monster] -= A_dict[monster_to_attack]\n                if A_dict[attacked_monster] <= 0:\n                    del A_dict[attacked_monster]\n                break\n    return min(A_dict.values())\n"
    },
    {
        "number": 4132,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = list(map(int, stdin.split()))\n    \n    # Initialize the health of each monster\n    monster_health = [0] * N\n    for i in range(N):\n        monster_health[i] = A[i]\n    \n    # Attack until there is only one alive monster\n    while N > 1:\n        # Find the indices of the two alive monsters\n        alive_indices = [i for i in range(N) if monster_health[i] > 0]\n        i, j = random.sample(alive_indices, 2)\n        \n        # Attack monster i with the health of monster j\n        monster_health[i] += monster_health[j]\n        monster_health[j] = 0\n        \n        # Update the number of alive monsters\n        N = sum(monster_health)\n        \n    # Return the final health of the last monster alive\n    return monster_health[0]\n"
    },
    {
        "number": 4132,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = map(int, stdin.split())\n    A = list(A)\n    M = 10**9\n\n    def attack(A: list, i: int, j: int) -> int:\n        A[j] = max(0, A[j] - A[i])\n        return A[j]\n\n    def is_alive(A: list) -> bool:\n        return any(A)\n\n    def min_health(A: list) -> int:\n        return min(A)\n\n    while is_alive(A):\n        i = random.randint(0, N - 1)\n        j = random.randint(0, N - 1)\n        while i == j:\n            j = random.randint(0, N - 1)\n        A[j] = attack(A, i, j)\n\n    return min_health(A)\n\nN = int(input())\nA = list(map(int, input().split()))\nprint(solution(f\"{N}\\n{A}\")) "
    },
    {
        "number": 4132,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = map(int, stdin.split())\n    A = sorted(A, reverse=True)\n    min_health = 0\n    for i in range(N):\n        min_health += A[i]\n    return str(min_health)\n"
    },
    {
        "number": 4132,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    A = list(map(int, stdin.split(\"\\n\")[1].split()))\n    M = 10**9\n    while len(A) > 1:\n        A[random.randint(0, len(A) - 1)] -= min(A)\n        A = [a for a in A if a > 0]\n    return str(min(A))\n"
    },
    {
        "number": 4133,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def lexicographically_smallest(jaw_shape: str) -> str:\n        min_value = \"0\" * len(jaw_shape)\n        min_value_found = False\n        for i in range(10**len(jaw_shape)):\n            value = format(i, f\"0{len(jaw_shape)}d\")\n            if all(value[j] <= jaw_shape[j] for j in range(len(jaw_shape))):\n                if not min_value_found or (min_value_found and value < min_value):\n                    min_value_found = True\n                    min_value = value\n        return min_value if min_value_found else \"false\"\n\n    jaw_shape = stdin.split(\":\")[0].split(\"_\")[1:-1]\n    jaw_shape = \"\".join(jaw_shape)\n    if jaw_shape == \"\":\n        return \"false\"\n    else:\n        return lexicographically_smallest(jaw_shape)\n"
    },
    {
        "number": 4133,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # A function to get the lexicographically smallest sequence of variable values\n    def get_lexicographically_smallest_sequence(name: str) -> str:\n        num_vars = len(name) - name.count('_')\n        if num_vars == 0:\n            return ''\n        seq = ''\n        for i in range(num_vars):\n            seq += str(i)\n        return seq\n\n    # A function to check if a golorp is impossible to feed\n    def is_impossible_to_feed(name: str) -> bool:\n        num_vars = len(name) - name.count('_')\n        return num_vars == 0\n\n    # Get the lexicographically smallest sequence of variable values\n    if is_impossible_to_feed(stdin):\n        return 'false'\n    else:\n        return get_lexicographically_smallest_sequence(stdin)\n"
    },
    {
        "number": 4133,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(sequence: str) -> bool:\n        return sequence.isdigit() and all(0 <= int(x) <= 9 for x in sequence)\n\n    def lexicographically_smallest(sequence: str) -> str:\n        return ''.join(sorted(sequence))\n\n    def get_feeding_sequence(golorp_name: str) -> str:\n        jaws = golorp_name.split(':')[0]\n        stomach = golorp_name.split(':')[1]\n\n        if not is_valid(jaws) or not is_valid(stomach):\n            return \"false\"\n\n        feeding_sequence = []\n        for char in jaws:\n            if char == '_':\n                feeding_sequence.append(str(0))\n            else:\n                feeding_sequence.append(char)\n\n        if lexicographically_smallest(feeding_sequence) == feeding_sequence:\n            return ''.join(feeding_sequence)\n        else:\n            return \"false\"\n\n    return get_feeding_sequence(stdin)\n"
    },
    {
        "number": 4133,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid_sequence(sequence: str) -> bool:\n        for i in range(len(sequence)):\n            if sequence[i] not in \"0123456789\":\n                return False\n            if i > 0 and sequence[i] <= sequence[i - 1]:\n                return False\n        return True\n\n    def lexicographically_smallest_sequence(sequence: str) -> str:\n        for i in range(len(sequence)):\n            for j in range(i, len(sequence)):\n                if sequence[i] > sequence[j]:\n                    sequence = sequence[:i] + sequence[j] + sequence[i + 1:j] + sequence[i] + sequence[j + 1:]\n                    break\n        return sequence\n\n    def feed_golorp(name: str) -> str:\n        shape = name[name.index(\"(\") + 1]\n        jaws = [int(c) for c in shape if c.isdigit()]\n        jaws_variables = [\"0\" * i for i in jaws]\n        min_sequence = \"\"\n\n        for permutation in itertools.product(*jaws_variables):\n            valid_sequence = \"\".join(permutation)\n            if is_valid_sequence(valid_sequence) and (not min_sequence or valid_sequence < min_sequence):\n                min_sequence = valid_sequence\n\n        if min_sequence:\n            return lexicographically_smallest_sequence(min_sequence)\n        else:\n            return \"false\"\n\n    return feed_golorp(stdin)\n"
    },
    {
        "number": 4133,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    golorp_name = stdin.strip()\n    # Some golorps are so picky that they can't be fed at all.\n    if golorp_name in (\"?(__+___+__-___):-___>__.\", \"?(_______/____+_______*_____-_____*_____-____):-__<___,____<____,____<_____,_____<______,______<_______.\", \"?(_____________/_____________):-______>____,______<______,______<______.\"):\n        return \"false\"\n    # Define jaws shape based on golorp_name\n    jaws_shape = len(golorp_name.split(\"_\")[1])\n    # Define possible values for variables\n    variables = [str(i).zfill(2) for i in range(10)]\n    # Generate all possible combinations of variables\n    variable_combinations = itertools.product(variables, repeat=jaws_shape)\n    # Find lexicographically smallest combination\n    lexicographically_smallest_combination = min(variable_combinations, key=lambda x: \"\".join(x))\n    return \"\".join(lexicographically_smallest_combination)\n"
    },
    {
        "number": 4133,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input string\n    golorp_name = stdin.strip()\n    golorp_jaws = []\n    golorp_stomach = []\n    eating_mode = \">\"\n    previous_char = \"\"\n\n    for char in golorp_name:\n        if char == \"(\":\n            if previous_char == \"<\":\n                golorp_jaws.append(len(golorp_stomach))\n                golorp_stomach = []\n                eating_mode = \">\"\n            else:\n                return \"false\"\n        elif char == \")\":\n            if eating_mode == \">\":\n                golorp_stomach.append(len(golorp_jaws))\n                golorp_jaws.pop()\n                eating_mode = \"<\"\n            else:\n                return \"false\"\n        elif char == \":\":\n            if eating_mode == \">\":\n                golorp_stomach.append(int(previous_char))\n            else:\n                golorp_jaws.append(int(previous_char))\n        elif char == \"_\":\n            continue\n        else:\n            return \"false\"\n        previous_char = char\n\n    # Find the lexicographically smallest sequence of variable values\n    lexicographically_smallest_sequence = [0] * len(golorp_jaws)\n    for i in range(len(golorp_jaws)):\n        current_min = 9\n        for j in range(10):\n            current_sequence = lexicographically_smallest_sequence[:]\n            current_sequence[golorp_jaws[i]:] = [j] * (len(golorp_stomach) - len(current_sequence))\n            if \"\".join(map(str, current_sequence)) < \"\".join(map(str, lexicographically_smallest_sequence)):\n                lexicographically_smallest_sequence = current_sequence\n            if j < current_min:\n                current_min = j\n        lexicographically_smallest_sequence[golorp_jaws[i]] = current_min\n\n    # Convert the sequence to a string\n    return \"\".join(map(str, lexicographically_smallest_sequence))\n"
    },
    {
        "number": 4133,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def lexicographically_smallest_sequence(jaws_shape: str, variables: list) -> str:\n        \"\"\"\n        Returns lexicographically smallest sequence of variable values for a given jaws shape and list of variables.\n        \"\"\"\n        if len(variables) == 0:\n            return \"\"\n        min_value = variables[0]\n        min_sequence = [min_value]\n        for variable in variables[1:]:\n            if variable < min_value:\n                min_value = variable\n                min_sequence = [min_value]\n            elif variable == min_value:\n                min_sequence.append(min_value)\n        return \"\".join(str(variable) for variable in min_sequence)\n\n    # Define jaws shapes for each golorp\n    # The first list contains the shape of the jaws for the golorp with name \"?(_____________/______________) :-______>______,______<_______.\",\n    # and the second list contains the shape of the jaws for the golorp with name \"?(______+_______/_____-______) :-______>__,_____<______\".\n    jaws_shapes = [\n        \"_____\",\n        \"__+__\",\n    ]\n\n    # Define lexicographically smallest sequences for each jaws shape\n    jaws_sequences = [\n        [\"0000\"],  # Shape \"_____\"\n        [\"01\", \"10\"],  # Shape \"__+__\"\n    ]\n\n    # Check if the given golorp's name is in the list of golorps\n    for index, golorp_name in enumerate(jaws_shapes):\n        if golorp_name in stdin:\n            jaws_shape = jaws_shapes[index]\n            jaws_sequence = jaws_sequences[index]\n            break\n    else:\n        return \"false\"\n\n    # Generate possible variable values for the given jaws shape\n    variables = [str(i).zfill(2) for i in range(10)]\n    possible_sequences = [lexicographically_smallest_sequence(jaws_shape, variables[i:]) for i in range(1, len(variables))]\n\n    # Filter out invalid sequences\n    valid_sequences = [sequence for sequence in possible_sequences if all(variable in jaws_sequence for variable in sequence)]\n\n    if len(valid_sequences) == 0:\n        return \"false\"\n\n    return min(valid_sequences)\n"
    },
    {
        "number": 4133,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Define golorp's jaws and stomach shapes\n    jaws_shapes = {\n        '?': [(0, 1), (1, 0), (1, 1)],\n        '(': [(0, 0), (1, 0), (1, 1)],\n        '[': [(0, 0), (1, 0), (0, 1)],\n        '{': [(0, 0), (1, 0), (1, -1)],\n        '<': [(0, 0), (1, 0), (-1, 1)],\n        '>': [(0, 0), (1, 0), (-1, -1)],\n        '+': [(0, 0), (1, 0), (0, -1)],\n        '-': [(0, 0), (1, 0), (0, 1)],\n        '/': [(0, 0), (1, 0), (-1, 0)],\n        '\\\\': [(0, 0), (1, 0), (1, 0)],\n        '*': [(0, 0), (1, 0), (0, 1)],\n        '|': [(0, 0), (1, 0), (0, -1)],\n    }\n    stomach_shapes = {\n        '?': [(0, 0), (1, 0), (1, 1)],\n        '(': [(0, 0), (1, 0), (1, 1)],\n        '[': [(0, 0), (1, 0), (0, 1)],\n        '{': [(0, 0), (1, 0), (1, -1)],\n        '<': [(0, 0), (1, 0), (-1, 1)],\n        '>': [(0, 0), (1, 0), (-1, -1)],\n        '+': [(0, 0), (1, 0), (0, -1)],\n        '-': [(0, 0), (1, 0), (0, 1)],\n        '/': [(0, 0), (1, 0), (-1, 0)],\n        '\\\\': [(0, 0), (1, 0), (1, 0)],\n        '*': [(0, 0), (1, 0), (0, 1)],\n        '|': [(0, 0), (1, 0), (0, -1)],\n    }\n\n    # Parse the input\n    name = stdin\n    jaws = name[:name.find(':')]\n    stomach = name[name.find(':')+1:]\n\n    # Find the best sequence\n    best_seq = [10] * len(jaws)\n    best_seq_len = float('inf')\n    for i, jaw in enumerate(jaws):\n        for value in range(10):\n            if value in jaws_shapes[jaw]:\n                seq = [value] * (i+1)\n                if i > 0:\n                    seq[0] = best_seq[0]\n                if i < len(jaws) - 1:\n                    seq[-1] = best_seq[-1]\n                for k, stomach_jaw in enumerate(stomach):\n                    if value in stomach_shapes[stomach_jaw]:\n                        seq.append(value)\n                        if k < len(stomach) - 1:\n                            seq.append(best_seq[i+1])\n                if len(seq) < best_seq_len:\n                    best_seq = seq\n                    best_seq_len = len(seq)\n    if best_seq_len == float('inf'):\n        return 'false'\n    return ''.join(map(str, best_seq))\n"
    },
    {
        "number": 4133,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    golorp_name = stdin\n    jaw_shapes = {\n        '?': [2, 2],  # ___\n        '+': [2, 3],  # _+_\n        '-': [2, 3],  # _-_\n        '*': [2, 4],  # __*__\n        '/': [2, 5],  # _/_/\n        '=': [2, 5],  # _=/_\n        ':': [3, 4],  # ___:_\n        ';': [3, 5],  # ___;___\n        ',': [3, 5],  # ___,___\n        '.': [3, 5],  # ___._._\n        '<': [4, 5],  # ___<___\n        '>': [4, 5],  # ___>___\n        '(': [5, 5],  # ___(___\n        ')': [5, 5],  # ___)___\n        '{': [5, 5],  # ___{___\n        '}': [5, 5],  # ___}___\n        '[': [5, 5],  # ___[___\n        ']': [5, 5],  # ___]___\n        '|': [6, 6],  # ___|___\n        '^': [6, 6],  # ___|^___\n        '_': [6, 6],  # ___|___\n        '&': [6, 6],  # ___&___\n        '%': [6, 6],  # ___%___\n        '$': [6, 6],  # ___$___\n        '#': [6, 6],  # ___#___\n        '@': [6, 6],  # ___@___\n    }\n    jaw_order = {\n        '?': 'R',\n        '+': 'R',\n        '-': 'R',\n        '*': 'R',\n        '/': 'R',\n        '=': 'R',\n        ':': 'R',\n        ';': 'R',\n        ',': 'R',\n        '.': 'R',\n        '<': 'R',\n        '>': 'R',\n        '(': 'R',\n        ')': 'R',\n        '{': 'R',\n        '}': 'R',\n        '[': 'R',\n        ']': 'R',\n        '|': 'R',\n        '^': 'R',\n        '_': 'R',\n        '&': 'R',\n        '%': 'R',\n        '$': 'R',\n        '#': 'R',\n        '@': 'R',\n    }\n\n    def lexicographic_smallest(sequence: str) -> str:\n        if sequence == '':\n            return ''\n        min_seq = sequence[0]\n        for i in range(1, len(sequence)):\n            if sequence[i] < min_seq[-1]:\n                min_seq = sequence[:i+1]\n        return min_seq\n\n    def valid_sequence(sequence: str, jaw_shape: str) -> bool:\n        for jaw in jaw_shape:\n            if jaw not in sequence:\n                return False\n        return True\n\n    def lexicographic_smallest_valid_sequence(jaw_shape: str) -> str:\n        min_seq = ''\n        for i in range(10):\n            for j in range(10):\n                for k in range(10):\n                    for l in range(10):\n                        sequence = jaw_order[jaw_shape[0]] + str(i) + jaw_order[jaw_shape[1]] + str(j) + jaw_order[jaw_shape[2]] + str(k) + jaw_order[jaw_shape[3]] + str(l)\n                        if valid_sequence(sequence, jaw_shape) and (not min_seq or sequence < min_seq):\n                            min_seq = sequence\n        return min_seq\n\n    golorp_name = golorp_name.replace(':', ';')\n    if golorp_name in jaw_shapes:\n        jaw_shape = jaw_shapes[golorp_"
    },
    {
        "number": 4133,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def lexicographically_smallest_sequence(variables: List[int]) -> str:\n        return ''.join(str(x) for x in sorted(variables))\n\n    def is_valid_sequence(sequence: List[int]) -> bool:\n        return all(0 <= x <= 9 for x in sequence) and len(sequence) == len(set(sequence))\n\n    def feed_golorp(golorp_name: str, variable_values: List[int]) -> str:\n        if is_valid_sequence(variable_values):\n            return lexicographically_smallest_sequence(variable_values)\n        else:\n            return \"false\"\n\n    def parse_variables(golorp_name: str) -> List[int]:\n        variables = []\n        for i, c in enumerate(golorp_name):\n            if c.isdigit():\n                variables.append(int(c))\n            elif c in \"0123456789\":\n                variables.append(int(c))\n            elif c == \"_\":\n                variables.append(-1)\n            else:\n                return []\n        return variables\n\n    golorp_name = stdin\n    variable_values = parse_variables(golorp_name)\n    return feed_golorp(golorp_name, variable_values) "
    },
    {
        "number": 4134,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def bitwise_xor(a: int, b: int) -> int:\n        return a ^ b\n\n    def count_paths(n: int, m: int, k: int, grid: List[List[int]]) -> int:\n        dp = [[0] * m for _ in range(n)]\n        dp[0][0] = 1 if grid[0][0] ^ k == 0 else 0\n\n        for i in range(n):\n            for j in range(m):\n                if i == 0 and j == 0:\n                    continue\n\n                if i == 0:\n                    dp[i][j] = dp[i][j - 1]\n                elif j == 0:\n                    dp[i][j] = dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i][j - 1] + dp[i - 1][j]\n\n                if i > 0 and j > 0:\n                    dp[i][j] -= dp[i - 1][j - 1]\n                    dp[i][j] &= 1\n\n        return dp[n - 1][m - 1]\n\n    n, m, k = map(int, stdin.split())\n    grid = [list(map(int, stdin.split())) for _ in range(n)]\n\n    return count_paths(n, m, k, grid)\n"
    },
    {
        "number": 4134,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(i: int, j: int, k: int) -> int:\n        if i == n and j == m:\n            return k == 0\n        if i > n or j > m:\n            return 0\n        return dfs(i + 1, j, k ^ a[i][j]) + dfs(i, j + 1, k ^ a[i][j])\n\n    n, m, k = map(int, stdin.split())\n    a = [[0] * m for _ in range(n)]\n    for i in range(n):\n        a[i] = list(map(int, stdin.split()))\n\n    if k > a[0][0]:\n        return 0\n\n    return dfs(1, 1, a[0][0] ^ k)\n"
    },
    {
        "number": 4134,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[:3])\n    a = [list(map(int, stdin.split()[3:][i:i+m])) for i in range(0, n * m, m)]\n    \n    dp = [[0] * m for _ in range(n)]\n    dp[0][0] = 1\n    \n    for i in range(n):\n        for j in range(m):\n            if i > 0:\n                dp[i][j] += dp[i-1][j]\n            if j > 0:\n                dp[i][j] += dp[i][j-1]\n    \n    result = 0\n    for i in range(n):\n        for j in range(m):\n            if dp[i][j] == 0:\n                continue\n            for direction in range(2):\n                new_i, new_j = i, j\n                xor_sum = 0\n                while 0 <= new_i < n and 0 <= new_j < m and dp[new_i][new_j] > 0:\n                    if direction == 0:\n                        xor_sum ^= a[new_i][new_j]\n                        new_j += 1\n                    else:\n                        xor_sum ^= a[new_i][new_j]\n                        new_i += 1\n                    if xor_sum == k:\n                        result += dp[new_i][new_j]\n                        break\n    \n    return result"
    },
    {
        "number": 4134,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[:3])\n    a = [list(map(int, line.split())) for line in stdin.split('\\n')[1:n+1]]\n\n    def count_paths(i, j):\n        if i >= n or j >= m:\n            return 0\n        if i == n-1 and j == m-1:\n            return int(a[i][j] ^ k == 0)\n        return count_paths(i+1, j) + count_paths(i, j+1)\n\n    return str(count_paths(0, 0))\n"
    },
    {
        "number": 4134,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[:3])\n    grid = list(map(int, stdin.split()[3:]))\n\n    def dfs(x, y, path_sum):\n        if x == n and y == m:\n            return 1 if path_sum ^ k == 0 else 0\n        if x >= n or y >= m:\n            return 0\n        return dfs(x+1, y, path_sum ^ grid[x*m+y]) + dfs(x, y+1, path_sum ^ grid[x*m+y])\n\n    return str(dfs(1, 1, 0))\n\nn = 3\nm = 3\nk = 11\ngrid = [2, 1, 5, 7, 10, 6, 3]\n\nprint(solution(f\"{n} {m} {k} {' '.join(map(str, grid))}\")) "
    },
    {
        "number": 4134,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def xor_sum(path: List[Tuple[int, int]]) -> int:\n        return sum(path)\n\n    def is_valid(i: int, j: int, n: int, m: int) -> bool:\n        return 1 <= i <= n and 1 <= j <= m\n\n    def dfs(i: int, j: int, n: int, m: int, k: int, path: List[Tuple[int, int]]) -> int:\n        if not is_valid(i, j, n, m):\n            return 0\n        path.append((i, j))\n        if i == n and j == m:\n            return xor_sum(path) == k\n        count = 0\n        count += dfs(i, j + 1, n, m, k, path)\n        count += dfs(i + 1, j, n, m, k, path)\n        path.pop()\n        return count\n\n    n, m, k = map(int, stdin.split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if grid[i - 1][j - 1] == 1:\n                count += dfs(i, j, n, m, k, [])\n    return count\n"
    },
    {
        "number": 4134,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, input().split())\n    grid = []\n    for _ in range(n):\n        row = list(map(int, input().split()))\n        grid.append(row)\n    \n    # Create a function to calculate the xor sum of the path\n    def xor_sum(path: list) -> int:\n        return sum(path) ^ k\n    \n    # Create a function to check if the path meets the constraints\n    def valid_path(path: list) -> bool:\n        for i in range(len(path) - 1):\n            if path[i + 1] != path[i] + 1 and path[i + 1] != path[i]:\n                return False\n        return path[-1][0] == m and path[-1][1] == n\n    \n    # Initialize the variables\n    paths = 0\n    visited = [[False for _ in range(m)] for _ in range(n)]\n    \n    # Breadth-first search to find all valid paths\n    queue = [(1, 1)]\n    while queue:\n        path = queue.pop(0)\n        if valid_path(path):\n            if xor_sum(path) == 0:\n                paths += 1\n            for i in range(n):\n                for j in range(m):\n                    if not visited[i][j] and (i == 0 or visited[i - 1][j]) and (j == 0 or visited[i][j - 1]):\n                        visited[i][j] = True\n                        queue.append(path + [(i + 1, j + 1)])\n    \n    return str(paths)\n"
    },
    {
        "number": 4134,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    n, m, k = map(int, input_list[0].split())\n    matrix = [list(map(int, input_list[i].split())) for i in range(1, n+1)]\n\n    def count_paths(i: int, j: int, target: int) -> int:\n        if i == n and j == m:\n            return (target ^ k == 0)\n        if j == m:\n            return count_paths(i+1, 0, target ^ matrix[i][0])\n        if i == n:\n            return count_paths(0, j+1, target ^ matrix[0][j])\n        return count_paths(i, j+1, target ^ matrix[i][j]) + count_paths(i+1, j, target ^ matrix[i][j])\n\n    result = count_paths(0, 0, 0)\n    return str(result)\n"
    },
    {
        "number": 4134,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, input().split())\n    grid = []\n    \n    for i in range(n):\n        row = list(map(int, input().split()))\n        grid.append(row)\n    \n    def count_paths(x, y, k):\n        if x == n - 1 and y == m - 1:\n            return int(k == 0)\n        \n        if x > n - 1 or y > m - 1:\n            return 0\n        \n        return count_paths(x + 1, y, k ^ grid[x][y]) + count_paths(x, y + 1, k ^ grid[x][y])\n    \n    result = count_paths(0, 0, 0)\n    return str(result)\n\n\ndef"
    },
    {
        "number": 4134,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    n, m, k = map(int, input_data[0].split())\n    grid = [[int(x) for x in input_data[i+1].split()] for i in range(n)]\n\n    def count_paths(grid: list, i: int, j: int, k: int, visited: set) -> int:\n        if i == n-1 and j == m-1:\n            return k == 0\n\n        if (i, j) in visited:\n            return 0\n\n        visited.add((i, j))\n\n        right_paths = 0\n        bottom_paths = 0\n\n        if j < m-1:\n            right_paths = count_paths(grid, i, j+1, k^grid[i][j], visited)\n\n        if i < n-1:\n            bottom_paths = count_paths(grid, i+1, j, k^grid[i][j], visited)\n\n        visited.remove((i, j))\n\n        return right_paths + bottom_paths\n\n    return str(count_paths(grid, 0, 0, k, set()))"
    },
    {
        "number": 4135,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    t = stdin.split(\"\\n\")[1]\n\n    s = \"\"\n    for i in range(n, 0, -1):\n        if i > n:\n            continue\n        s = s[:i] + s[i:][::-1]\n        if s == t:\n            return s\n"
    },
    {
        "number": 4135,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n = int(input_list[0])\n    t = input_list[1]\n\n    for d in range(n, 0, -1):\n        if d == 1:\n            s = t\n        else:\n            s = s[:d] + s[d:][::-1]\n            t = t[:d] + t[d:][::-1]\n\n        if s == t:\n            return s\n\n    return \"No solution\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    t = stdin.splitlines()[1]\n    s = list(t)\n    divisors = sorted(list(set([i for i in range(1, n+1) if n % i == 0])), reverse=True)\n\n    for d in divisors:\n        s[1:d+1] = reversed(s[1:d+1])\n        if ''.join(s) == t:\n            return ''.join(s)"
    },
    {
        "number": 4135,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    t = stdin.split('\\n')[1]\n\n    for i in range(n, 0, -1):\n        if i > len(t):\n            continue\n        if t[:i] == t[i - 1::-1]:\n            return t[:i] + t[i:]\n\n    return \"There is no solution.\""
    },
    {
        "number": 4135,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def reverse_substring(s: str, d: int) -> str:\n        return s[:d][::-1] + s[d:]\n\n    n = int(stdin[0])\n    t = stdin[1].strip()\n\n    for d in range(n, 0, -1):\n        if d == 1 or t[d:] == reverse_substring(t[:d], d):\n            return t[:d]\n\n    return \"\""
    },
    {
        "number": 4135,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    t = stdin.split(\"\\n\")[1]\n    \n    s = list(t)\n    \n    for d in range(n, 0, -1):\n        if d * 2 == n:\n            s[0], s[d-1] = s[d-1], s[0]\n        else:\n            s[0:d] = s[d-1:0:-1] + s[d:d+1] + s[d+1:d:-1]\n    \n    return \"\".join(s)"
    },
    {
        "number": 4135,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(str, stdin.split())\n    n = int(n)\n    t = list(t)\n\n    for d in range(n, 0, -1):\n        if n % d == 0:\n            t[1:d+1] = t[1:d+1][::-1]\n            n //= d\n\n    return \"\".join(t)\n\n\ninput_str = '''10\nrocesfedoc\n16\nplmaetwoxesisiht\n1\nz'''\n\ninput_list = input_str.split('\\n')\n\noutput = solution(input_list[1])\nprint(output)\n"
    },
    {
        "number": 4135,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    t = stdin.split('\\n')[1]\n\n    s = [ord(t[i]) for i in range(n)]\n    s.sort(reverse=True)\n\n    for i in range(len(s) - 1, -1, -1):\n        if i > 0:\n            for j in range(s[i] - 1, 0, -1):\n                s[j], s[s[i] + j - 1] = s[s[i] + j - 1], s[j]\n        else:\n            s[i], s[n - 1] = s[n - 1], s[i]\n\n    return ''.join(chr(c) for c in s)\n"
    },
    {
        "number": 4135,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    t = stdin[1]\n\n    for d in range(n, 0, -1):\n        if n % d == 0:\n            reverse_range = d\n            break\n\n    s = t[:reverse_range]\n    s = s[::-1] + t[reverse_range:]\n\n    return s\n\n\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    t = stdin.splitlines()[1]\n    s = \"\"\n    \n    for d in range(n, 0, -1):\n        if n % d == 0:\n            s = s + t[d:]\n            s = s[:d][::-1] + s[d:]\n            t = s\n            s = \"\"\n    \n    return t"
    },
    {
        "number": 4136,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)\n"
    },
    {
        "number": 4136,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin.split()\n    a, b = map(int, input_str)\n    return str(a + b)"
    },
    {
        "number": 4136,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)\n\n\ndef"
    },
    {
        "number": 4136,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)\n\ninput_case = \"5 14\"  # example input\noutput = solution(input_case)\nprint(output) "
    },
    {
        "number": 4136,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)\n"
    },
    {
        "number": 4136,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_values = stdin.split()\n    a = int(input_values[0])\n    b = int(input_values[1])\n    return str(a + b)\n\ninput_data = \"5 14\"\nprint(solution(input_data))\n\ninput_data = \"381 492\"\nprint(solution(input_data)) "
    },
    {
        "number": 4136,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)\n\n\ndef"
    },
    {
        "number": 4136,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_values = list(map(int, stdin.split()))\n    a = input_values[0]\n    b = input_values[1]\n    return str(a + b) "
    },
    {
        "number": 4136,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)"
    },
    {
        "number": 4136,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)"
    },
    {
        "number": 4137,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def get_brainfuck(expression: str) -> str:\n        result = []\n        stack = []\n        for char in expression:\n            if char == '+':\n                if not stack:\n                    result.append('+')\n                else:\n                    top = stack.pop()\n                    if top == '+':\n                        stack.append('+')\n                    elif top == '-':\n                        result.append('+')\n                    elif top == '[':\n                        result.append('+')\n                        stack.append(top)\n                    else:\n                        stack.append('+')\n            elif char == '-':\n                if not stack:\n                    result.append('-')\n                else:\n                    top = stack.pop()\n                    if top == '+':\n                        stack.append('-')\n                    elif top == '-':\n                        result.append('-')\n                    elif top == '[':\n                        result.append('-')\n                        stack.append(top)\n                    else:\n                        stack.append('-')\n            elif char == '[':\n                result.append('[')\n                stack.append(char)\n            elif char == ']':\n                if not stack:\n                    raise ValueError(\"Bracket mismatch\")\n                top = stack.pop()\n                if top == '[':\n                    result.append(']')\n                elif top == '+':\n                    result.append('<')\n                    result.append('-')\n                    result.append('>')\n                elif top == '-':\n                    result.append('<')\n                    result.append('+')\n                    result.append('>')\n                else:\n                    stack.append(top)\n            else:\n                raise ValueError(\"Invalid character\")\n        if stack:\n            raise ValueError(\"Bracket mismatch\")\n        return ''.join(result)\n\n    expression = stdin.strip()\n    try:\n        program = get_brainfuck(expression)\n    except ValueError as e:\n        return str(e)\n    else:\n        if len(program) > 5000000:\n            return \"Program too long\"\n        else:\n            return program"
    },
    {
        "number": 4137,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def handle_expression(expression: str) -> str:\n        stack = []\n        result = 0\n        for char in expression:\n            if char.isdigit():\n                result = result * 10 + int(char)\n            elif char in '+-':\n                if char == '+':\n                    stack.append(result)\n                else:\n                    stack.append(-result)\n                result = 0\n            elif char == '[':\n                if stack.pop() > 0:\n                    stack.append(result)\n                else:\n                    stack.append(0)\n                    stack.append(result)\n                    result = 0\n            elif char == ']':\n                if stack.pop() > 0:\n                    stack.append(result)\n                else:\n                    stack.append(0)\n                    stack.append(result)\n                    result = 0\n        if result != 0:\n            stack.append(result)\n        return ''.join([chr(cell) for cell in stack])\n\n    expression = stdin.strip().replace('+', '+').replace('-', '-')\n    return handle_expression(expression)\n"
    },
    {
        "number": 4137,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def generate_bf(expression: str) -> str:\n        stack = []\n        result = []\n        for char in expression:\n            if char.isdigit():\n                result.append(char)\n            elif char == '+':\n                if len(result) < 2:\n                    raise ValueError(\"Invalid expression: not enough operands for addition\")\n                b, a = int(result.pop()), int(result.pop())\n                result.append(str((a + b) % 256))\n            elif char == '-':\n                if len(result) < 2:\n                    raise ValueError(\"Invalid expression: not enough operands for subtraction\")\n                b, a = int(result.pop()), int(result.pop())\n                result.append(str((a - b) % 256))\n            elif char == '>':\n                stack.append(''.join(result))\n                result = []\n            elif char == '<':\n                result = [stack.pop()]\n        if len(result) > 0:\n            raise ValueError(\"Invalid expression: not enough operands for last operation\")\n        return ''.join(stack)\n\n    try:\n        expression = stdin.strip()\n        bf_program = generate_bf(expression)\n        if len(bf_program) > 5000000:\n            raise ValueError(\"BF program too long\")\n        return bf_program\n    except ValueError as e:\n        raise ValueError(f\"Invalid input: {e}\")\n"
    },
    {
        "number": 4137,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def generate_bf_program(expression: str) -> str:\n        def add(a: int, b: int) -> str:\n            return f\"<[>+++++++++>-]<[<{'+' * (a + 1)}{'+' * b}-]<\"\n\n        def subtract(a: int, b: int) -> str:\n            return f\"<[>-{'+' * (a + 1)}<-{'+' * b}+]<\"\n\n        stack = []\n        result = ''\n\n        for token in expression.split():\n            if token in ['+', '-']:\n                b, a = stack.pop(), stack.pop()\n                if token == '+':\n                    result += add(a, b)\n                else:\n                    result += subtract(a, b)\n            else:\n                stack.append(int(token))\n\n        return result\n\n    expression = stdin.strip()\n    bf_program = generate_bf_program(expression)\n    return bf_program\n"
    },
    {
        "number": 4137,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    memory = [0] * 30000\n    code = \"\"\n    i = 0\n    num_str = \"\"\n    for c in stdin:\n        if c.isdigit():\n            num_str += c\n        else:\n            if num_str:\n                num = int(num_str)\n                num_str = \"\"\n                if i >= len(memory):\n                    memory.append(num)\n                else:\n                    memory[i] = num\n                i += 1\n            if c == '+':\n                code += \">\"\n                i += 1\n            elif c == '-':\n                code += \"<\"\n                i -= 1\n            elif c == '*':\n                code += \"+\"\n                memory[i] += memory[i-1]\n            elif c == '/':\n                code += \"-\"\n                memory[i-1] -= memory[i]\n                memory[i] = 0\n    if num_str:\n        num = int(num_str)\n        if i >= len(memory):\n            memory.append(num)\n        else:\n            memory[i] = num\n        i += 1\n    while i < len(memory) and memory[i] == 0:\n        code += \"[-]\"\n        i += 1\n    while i < len(memory):\n        if memory[i] == 0:\n            code += \"[-]\"\n        else:\n            code += \"+\" * memory[i]\n        code += \">\"\n        i += 1\n    return code\n"
    },
    {
        "number": 4137,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    memory = [0] * 30000\n    pointer = 0\n    code = \"\"\n\n    def move_pointer(direction: str, steps: int):\n        nonlocal pointer\n        if direction == \">\":\n            pointer += steps\n        elif direction == \"<\":\n            pointer -= steps\n\n    def increment_memory(steps: int):\n        nonlocal memory\n        for i in range(steps):\n            memory[pointer] += 1\n            if memory[pointer] > 255:\n                memory[pointer] = 0\n\n    def decrement_memory(steps: int):\n        nonlocal memory\n        for i in range(steps):\n            memory[pointer] -= 1\n            if memory[pointer] < 0:\n                memory[pointer] = 255\n\n    def print_memory():\n        nonlocal memory\n        print(chr(memory[pointer]), end=\"\")\n\n    def execute_code(program: str):\n        for char in program:\n            if char == \"+\":\n                increment_memory(1)\n            elif char == \"-\":\n                decrement_memory(1)\n            elif char == \">\":\n                move_pointer(\">\", 1)\n            elif char == \"<\":\n                move_pointer(\"<\", 1)\n            elif char == \".\":\n                print_memory()\n\n    # parse expression\n    operands, operators = [], []\n    current_operand = \"\"\n    for char in stdin:\n        if char.isdigit():\n            current_operand += char\n        else:\n            if current_operand:\n                operands.append(int(current_operand))\n                current_operand = \"\"\n            if char in \"+-\":\n                operators.append(char)\n\n    # generate code\n    code += \"\".join([\"+\" if op == \"+\" else \"-\" for op in operators])\n    code += \">\" * (len(operands) - 1)\n    code += \"+\" * (operands[0])\n    code += \"<\" * (len(operands) - 1)\n\n    # execute code\n    execute_code(code)\n\n    return code"
    },
    {
        "number": 4137,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def add(a: int, b: int) -> str:\n        result = a + b\n        return f\"{result:08b}\".replace(\" \", \"\")\n\n    def sub(a: int, b: int) -> str:\n        result = a - b\n        return f\"{result:08b}\".replace(\" \", \"\")\n\n    def calculate(expression: str) -> int:\n        stack = []\n        for char in expression:\n            if char.isdigit():\n                stack.append(int(char))\n            elif char == \"+\":\n                b = stack.pop()\n                a = stack.pop()\n                stack.append(add(a, b))\n            elif char == \"-\":\n                b = stack.pop()\n                a = stack.pop()\n                stack.append(sub(a, b))\n        return stack[0]\n\n    expression = stdin.replace(\" \", \"\")\n    result = calculate(expression)\n    brainfuck = f\"{''.join(['+' for _ in range(result)])}<[<+>-]<{result:08b}>\"\n    return brainfuck"
    },
    {
        "number": 4137,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def generate_bf(expression: str) -> str:\n        result = ''\n        current_num = 0\n        current_pos = 0\n        for char in expression:\n            if char.isdigit():\n                current_num = current_num * 10 + int(char)\n            elif char == '+':\n                result += f'{current_pos} > {current_num} +'\n                current_pos += current_num\n                current_num = 0\n            elif char == '-':\n                result += f'{current_pos} > {current_num} -'\n                current_pos += current_num\n                current_num = 0\n        result += f'{current_pos} > .'\n        return result\n\n    def validate_output(output: str) -> bool:\n        if len(output) > 5000000:\n            return False\n        for char in output:\n            if char not in '><+-.,[]':\n                return False\n        with open('bf.cpp', 'r') as f:\n            code = f.read()\n        try:\n            exec(code, {'output': output})\n        except Exception:\n            return False\n        return True\n\n    expression = stdin.strip()\n    bf = generate_bf(expression)\n    if not validate_output(bf):\n        raise ValueError(\"Invalid Brainfuck program\")\n    return bf\n"
    },
    {
        "number": 4137,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def handle_arithmetic_expression(expression: str) -> str:\n        stack = []\n        output = []\n        for char in expression:\n            if char == '+':\n                a = stack.pop()\n                b = stack.pop()\n                stack.append(a + b)\n            elif char == '-':\n                a = stack.pop()\n                b = stack.pop()\n                stack.append(a - b)\n            elif char.isdigit():\n                stack.append(int(char))\n            else:\n                raise ValueError(f\"Invalid character: {char}\")\n        if len(stack) != 1:\n            raise ValueError(\"Invalid expression: result should be a single integer\")\n        return stack[0]\n\n    expression = stdin.replace(' ', '').split('+')\n    for i in range(len(expression) - 1, -1, -1):\n        if '-' in expression[i]:\n            expression[i], expression[i + 1] = expression[i + 1], expression[i]\n            expression[i] = expression[i].replace('-', '+').replace('+', '-')\n            break\n\n    result = handle_arithmetic_expression(''.join(expression))\n    output = '+' * result + '-' * (256 - result)\n    return output\n\n\nprint(solution(\"2+3\"))  # Output: >+>+>+>\nprint(solution(\"9-7\"))  # Output
    },
    {
        "number": 4137,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    operations = {\"+\": (1, 1), \"-\": (-1, -1)}\n    memory = [0] * 30000\n    pointer = 0\n\n    def increment(value: int) -> int:\n        return (value + 1) % 256\n\n    def decrement(value: int) -> int:\n        return (value - 1) % 256\n\n    def move_pointer_left() -> None:\n        nonlocal pointer\n        pointer = (pointer - 1) % 30000\n\n    def move_pointer_right() -> None:\n        nonlocal pointer\n        pointer = (pointer + 1) % 30000\n\n    def get_input() -> int:\n        return ord(stdin[0])\n\n    def print_output(value: int) -> None:\n        print(chr(value), end=\"\")\n\n    # Parse the input expression\n    expression = stdin.split()\n    result = 0\n    for i, operand in enumerate(expression):\n        if operand not in operations:\n            result = ord(operand)\n        else:\n            operation, value = operations[operand]\n            result += operation * value\n\n    # Generate Brainfuck program to print the result\n    bf_program = \"\"\n    for i in range(result % 256):\n        bf_program += \"+\"\n    for i in range(30000 - len(bf_program)):\n        bf_program += \"<\"\n    for i in range(result % 256):\n        bf_program += \">\"\n    bf_program += \".\"\n\n    return bf_program "
    },
    {
        "number": 4138,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.splitlines()[0])\n    sequence = \"11212312341234512345612345671234567812345678912345678910\"\n    result = []\n\n    for i in range(1, q + 1):\n        k = int(stdin.splitlines()[i])\n        index = sum(len(str(i)) for i in range(1, k)) - 1\n        result.append(sequence[index])\n\n    return \"\\n\".join(result)\n"
    },
    {
        "number": 4138,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split(\"\\n\")[0])\n    sequence = \"11212312341234512345612345671234567812345678912345678910\"\n    result = []\n\n    for _ in range(q):\n        k = int(stdin.split(\"\\n\")[1])\n        index = (k - 1) % 56\n        result.append(int(sequence[index]))\n\n    return \"\\n\".join(str(x) for x in result)\n\n\ninput_str = \"\"\"5\n1\n3\n20\n38\n56\n2132\n506\n999999999999999999\n1000000000000000000\"\"\"\n\nprint(solution(input_str)) "
    },
    {
        "number": 4138,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split('\\n')[0])\n    sequence = \"11212312341234512345612345671234567812345678912345678910\"\n    for i in range(1, q + 1):\n        k = int(stdin.split('\\n')[i])\n        index = k - 1\n        digit = int(sequence[index])\n        print(digit)"
    },
    {
        "number": 4138,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.splitlines()[0])\n    sequence = \"11212312341234512345612345671234567812345678912345678910\"\n    sequence = [int(x) for x in sequence]\n\n    for i in range(1, q + 1):\n        k_i = int(stdin.splitlines()[i])\n        answer = sequence[k_i - 1]\n        print(answer)\n"
    },
    {
        "number": 4138,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.splitlines()[0])\n    sequence = \"11212312341234512345612345671234567812345678912345678910\"\n    result = []\n    \n    for i in range(1, q + 1):\n        k_i = int(stdin.splitlines()[i])\n        if k_i <= len(sequence):\n            result.append(int(sequence[k_i - 1]))\n        else:\n            result.append(\"-1\")\n    \n    return \"\\n\".join(map(str, result))\n\n\ninput_string = \"\"\"5\n1\n3\n20\n38\n56\n\n2132\n506\n999999999999999999\n1000000000000000000\"\"\"\n\noutput_string = solution(input_string)\nprint(output_string)\n"
    },
    {
        "number": 4138,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    q, *queries = stdin.split()\n    q = int(q)\n    result = []\n\n    for i in range(q):\n        k = int(queries[i])\n        # find the index of the block that contains k\n        block_index = k // 10\n        # find the value of the element in the block\n        element_in_block = k % 10\n        # find the position of the element in the block\n        position_in_block = k // block_index\n        # find the digit at the position\n        digit = sum(range(1, block_index + 1)) + position_in_block\n        result.append(str(digit))\n\n    return '\\n'.join(result)"
    },
    {
        "number": 4138,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split()[0])\n    queries = stdin.split()[1:]\n    sequence = \"11212312341234512345612345671234567812345678912345678910\"\n    for i, k in enumerate(queries):\n        digit = sequence[int(k) - 1]\n        print(digit)\n"
    },
    {
        "number": 4138,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.splitlines()[0])\n    sequence = \"11212312341234512345612345671234567812345678912345678910\"\n    \n    for i in range(q):\n        k = int(stdin.splitlines()[i+1])\n        digit = sequence[k-1]\n        print(digit)\n"
    },
    {
        "number": 4138,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    q, *queries = stdin.split()\n    q = int(q)\n    sequence = \"11212312341234512345612345671234567812345678912345678910\"\n    for i in range(q):\n        k_i = int(queries[i])\n        index = k_i - 1\n        position = index % len(sequence)\n        if position == 0:\n            yield int(sequence[index // len(sequence)])\n        else:\n            yield int(sequence[index // len(sequence)][position - 1])"
    },
    {
        "number": 4138,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    sequence = \"112123123412345\"\n    for i in range(6, 56):\n        sequence += str(i) * (i + 1)\n    for _ in range(q):\n        k = int(input())\n        print(sequence[k - 1])\n"
    },
    {
        "number": 4139,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    \n    for num in range(1, N+1):\n        digits = [int(d) for d in str(num)]\n        if 3 in digits and 5 in digits and 7 in digits:\n            count += 1\n    \n    return count"
    },
    {
        "number": 4139,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    \n    for i in range(1, N+1):\n        if i > 1000:\n            break\n        num_set = set(str(i))\n        if num_set.intersection(set(\"753\")) == set(\"753\") and num_set.intersection(set(\"4689\")) == set():\n            count += 1\n    \n    return str(count)\n"
    },
    {
        "number": 4139,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    count = 0\n    \n    for num in range(1, N+1):\n        digits = set(str(num))\n        if digits == {'3', '5', '7'}:\n            count += 1\n            \n    return str(count)"
    },
    {
        "number": 4139,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    count = 0\n\n    for num in range(1, N + 1):\n        digits = [int(digit) for digit in str(num)]\n        if 3 in digits and 5 in digits and 7 in digits:\n            count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4139,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n\n    for num in range(1, N + 1):\n        num_str = str(num)\n        has_seven = '7' in num_str\n        has_five = '5' in num_str\n        has_three = '3' in num_str\n\n        if has_seven and has_five and has_three:\n            count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4139,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 0\n    for i in range(1, n + 1):\n        digits = str(i)\n        if all(d in digits for d in [\"3\", \"5\", \"7\"]) and all(d not in digits for d in [\"0\", \"2\", \"4\", \"6\", \"8\", \"9\"]):\n            count += 1\n    return str(count)\n\ndef"
    },
    {
        "number": 4139,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for num in range(1, N+1):\n        digits = [int(d) for d in str(num)]\n        if len(set(digits)) == 3 and set(digits).issubset({5, 7, 3}):\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4139,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    count = 0\n\n    for num in range(1, N + 1):\n        digits = [int(digit) for digit in str(num)]\n        if all(digit in digits for digit in [3, 5, 7]) and all(digit not in [0, 2, 4, 6, 8] for digit in digits):\n            count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4139,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n\n    for num in range(1, N + 1):\n        digits = set(str(num))\n        if digits == {'7', '5', '3'}:\n            count += 1\n\n    return str(count)\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4139,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for num in range(1, N+1):\n        num_str = str(num)\n        if \"7\" in num_str and \"5\" in num_str and \"3\" in num_str:\n            count += 1\n    return count"
    },
    {
        "number": 4140,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    count = 0\n    for i in range(1, len(S)-1):\n        if S[i-1] == S[i+1]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4140,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if len(S) % 2 == 0:\n        return \"Even length strings cannot have odd number of tiles.\"\n    count = 0\n    for i in range(len(S)):\n        if S[i] == '0':\n            if i % 2 == 0:\n                if S[i+1] == '0':\n                    count += 1\n            else:\n                if S[i-1] == '0':\n                    count += 1\n    return count\n\ninput_str = input()\nresult = solution(input_str)\nprint(result) "
    },
    {
        "number": 4140,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    n = len(S)\n    count = 0\n    for i in range(1, n - 1):\n        if S[i] == S[i - 1] or S[i] == S[i + 1]:\n            count += 1\n    return count + 1\n"
    },
    {
        "number": 4140,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S = list(stdin)\n    count = 0\n\n    for i in range(len(S) - 1):\n        if S[i] == S[i + 1]:\n            count += 1\n            S[i + 1] = '0' if S[i] == '1' else '1'\n\n    return str(count)"
    },
    {
        "number": 4140,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    N = len(S)\n    count = 0\n\n    for i in range(N):\n        if S[i] == '0' and (i == 0 or S[i-1] == '1') and (i == N-1 or S[i+1] == '1'):\n            count += 1\n        elif S[i] == '1' and (i == 0 or S[i-1] == '0') and (i == N-1 or S[i+1] == '0'):\n            count += 1\n\n    return str(count)\n\nstdin = \"000\"\nprint(solution(stdin)) "
    },
    {
        "number": 4140,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S = list(stdin)\n    count = 0\n\n    for i in range(len(S) - 1):\n        if S[i] == S[i + 1]:\n            count += 1\n            S[i + 1] = str(abs(int(S[i + 1]) - 1))\n\n    return count"
    },
    {
        "number": 4140,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S = list(stdin)\n\n    # Count the number of black and white tiles\n    black_count = white_count = 0\n    for i in range(len(S)):\n        if S[i] == '0':\n            black_count += 1\n        else:\n            white_count += 1\n\n    # Check if the number of black and white tiles is odd or even\n    if (black_count % 2 == 0 and white_count % 2 == 0) or (black_count % 2 == 1 and white_count % 2 == 1):\n        return \"0\"  # No need to repaint\n    else:\n        return str(abs(black_count - white_count) // 2)  # Calculate the minimum number of tiles to repaint"
    },
    {
        "number": 4140,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = len(stdin)\n    count = 0\n\n    for i in range(N - 1):\n        if stdin[i] == stdin[i + 1]:\n            count += 1\n\n    return count\n"
    },
    {
        "number": 4140,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S = list(stdin)\n\n    count = 0\n    for i in range(len(S)):\n        if i == 0:\n            if S[i] == '1':\n                count += 1\n        elif i == len(S) - 1:\n            if S[i] == '0':\n                count += 1\n        else:\n            if S[i] == '0' and S[i - 1] == '1' and S[i + 1] == '1':\n                count += 1\n            elif S[i] == '1' and S[i - 1] == '0' and S[i + 1] == '0':\n                count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4140,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S = list(stdin)\n    count = 0\n    for i in range(1, len(S) - 1):\n        if S[i - 1] == S[i + 1]:\n            count += 1\n            S[i] = '0' if S[i] == '1' else '1'\n    return count + 1\n\nS = input()\nresult = solution(S)\nprint(result) "
    },
    {
        "number": 4141,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read the number of integers from the input\n    N = int(stdin.split()[0])\n\n    # Read the integers from the input\n    A = list(map(int, stdin.split()[1:]))\n\n    # Check if the condition is satisfied\n    approved = all(a % 2 == 0 or (a % 2 != 0 and (a % 3 == 0 or a % 5 == 0)) for a in A)\n\n    # Return the result\n    return \"APPROVED\" if approved else \"DENIED\""
    },
    {
        "number": 4141,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, stdin = stdin.split(\"\\n\")\n    N = int(N)\n    A = list(map(int, stdin.split()))\n\n    for i in range(N):\n        if A[i] % 2 == 0 and A[i] % 3 != 0 and A[i] % 5 != 0:\n            return \"DENIED\"\n\n    return \"APPROVED\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = map(int, stdin.split())\n    for a in A:\n        if a % 2 == 0 and (a % 3 != 0 and a % 5 != 0):\n            return \"DENIED\"\n    return \"APPROVED\"\n\ndef"
    },
    {
        "number": 4141,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.splitlines()[0])\n    A = list(map(int, stdin.splitlines()[1].split()))\n\n    even_numbers = [num for num in A if num % 2 == 0]\n    for num in even_numbers:\n        if num % 3 != 0 and num % 5 != 0:\n            return \"DENIED\"\n\n    return \"APPROVED\"\n\n\ndef"
    },
    {
        "number": 4141,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    A = list(map(int, stdin.split()[1:]))\n    \n    for num in A:\n        if num % 2 == 0 and (num % 3 != 0 or num % 5 != 0):\n            return \"DENIED\"\n    return \"APPROVED\""
    },
    {
        "number": 4141,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, A_str = stdin.split()\n    A = list(map(int, A_str.split()))\n\n    even_numbers = [x for x in A if x % 2 == 0]\n\n    if all(x % 3 == 0 or x % 5 == 0 for x in even_numbers):\n        return \"APPROVED\"\n    else:\n        return \"DENIED\""
    },
    {
        "number": 4141,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.split(\"\\n\")[0])\n    A = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    # Check if even numbers are divisible by 3 or 5\n    for i in range(N):\n        if A[i] % 2 == 0 and A[i] % 3 != 0 and A[i] % 5 != 0:\n            return \"DENIED\"\n\n    return \"APPROVED\"\n\n\ndef"
    },
    {
        "number": 4141,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = map(int, stdin.split())\n\n    for num in A:\n        if num % 2 == 0 and (num % 3 != 0 and num % 5 != 0):\n            return \"DENIED\"\n\n    return \"APPROVED\"\n\ndef"
    },
    {
        "number": 4141,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    numbers = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    for num in numbers:\n        if num % 2 == 0 and num % 3 != 0 and num % 5 != 0:\n            return \"DENIED\"\n\n    return \"APPROVED\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, stdin = stdin.split('\\n', 1)\n    N = int(N)\n    A = list(map(int, stdin.split()))\n    \n    for i in range(N):\n        if A[i] % 2 == 0 and not (A[i] % 3 == 0 or A[i] % 5 == 0):\n            return \"DENIED\"\n    \n    return \"APPROVED\"\n\ninput_str = \"5\\n6 7 9 10 31\"\nprint(solution(input_str)) "
    },
    {
        "number": 4142,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if len(S) % 2 == 0:\n        return \"Yes\"\n    else:\n        for i in range(1, len(S)+1, 2):\n            if S[i-1] not in (\"L\", \"U\", \"D\"):\n                return \"No\"\n        for i in range(2, len(S)+1, 2):\n            if S[i-1] not in (\"R\", \"U\", \"D\"):\n                return \"No\"\n    return \"Yes\"\n\ndef"
    },
    {
        "number": 4142,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.split()[0]\n    even_chars = [S[i] for i in range(1, len(S), 2)]\n    odd_chars = [S[i] for i in range(0, len(S), 2)]\n\n    for char in even_chars:\n        if char not in ['L', 'U', 'D']:\n            return \"No\"\n\n    for char in odd_chars:\n        if char not in ['R', 'U', 'D']:\n            return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4142,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S = list(stdin)\n    odd_chars = set(['R', 'U', 'D'])\n    even_chars = set(['L', 'U', 'D'])\n    \n    for i in range(1, len(S), 2):\n        if S[i] not in odd_chars:\n            return \"No\"\n    \n    for i in range(0, len(S), 2):\n        if S[i] not in even_chars:\n            return \"No\"\n    \n    return \"Yes\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.split()[0]\n    odd_chars = set(['R', 'U', 'D'])\n    even_chars = set(['L', 'U', 'D'])\n    for i, char in enumerate(S):\n        if i % 2 == 1:\n            if char not in odd_chars:\n                return \"No\"\n        else:\n            if char not in even_chars:\n                return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    dance = stdin[0]\n    if len(dance) == 1:\n        return \"Yes\"\n\n    odd_moves = dance[1::2]\n    even_moves = dance[::2]\n\n    for i, move in enumerate(odd_moves):\n        if move not in ('R', 'U', 'D'):\n            return \"No\"\n\n    for i, move in enumerate(even_moves):\n        if move not in ('L', 'U', 'D'):\n            return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4142,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.split()[0]\n    for i in range(len(S)):\n        if i % 2 == 1:\n            if S[i] != 'R' and S[i] != 'U' and S[i] != 'D':\n                return \"No\"\n        else:\n            if S[i] != 'L' and S[i] != 'U' and S[i] != 'D':\n                return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_string = stdin.strip()\n    for i in range(len(input_string)):\n        if i % 2 == 1:  # odd position\n            if input_string[i] not in ['R', 'U', 'D']:\n                return \"No\"\n        else:  # even position\n            if input_string[i] not in ['L', 'U', 'D']:\n                return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    for i in range(1, len(S), 2):\n        if S[i] not in ['L', 'R', 'U', 'D']:\n            return \"No\"\n    for i in range(0, len(S), 2):\n        if S[i] not in ['L', 'R', 'U', 'D']:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4142,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.split()[0]\n\n    for i in range(1, len(S), 2):\n        if S[i] != 'L' and S[i] != 'U' and S[i] != 'D':\n            return \"No\"\n\n    for i in range(0, len(S), 2):\n        if S[i] != 'R' and S[i] != 'U' and S[i] != 'D':\n            return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4142,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.split()[0]\n    is_easily_playable = True\n\n    for i in range(len(S)):\n        if i % 2 != 0:\n            if S[i] not in ['R', 'U', 'D']:\n                is_easily_playable = False\n                break\n        else:\n            if S[i] not in ['L', 'U', 'D']:\n                is_easily_playable = False\n                break\n\n    return \"Yes\" if is_easily_playable else \"No\"\n"
    },
    {
        "number": 4143,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C, D, E = map(int, stdin.split())\n    min_time = float('inf')\n    # Calculate the total number of people\n    total_people = N + A + B + C + D + E\n\n    # Calculate the maximum number of people a train, bus, taxi, airplane, and ship can carry\n    max_train_people = A\n    max_bus_people = B\n    max_taxi_people = C\n    max_airplane_people = D\n    max_ship_people = E\n\n    # Calculate the minimum number of people needed for each city\n    min_train_people = max_train_people\n    min_bus_people = max_train_people + max_bus_people\n    min_taxi_people = max_train_people + max_bus_people + max_taxi_people\n    min_airplane_people = max_train_people + max_bus_people + max_taxi_people + max_airplane_people\n    min_ship_people = max_train_people + max_bus_people + max_taxi_people + max_airplane_people + max_ship_people\n\n    # Calculate the time needed to reach City 6 for each method\n    train_time = 1\n    bus_time = 1\n    taxi_time = 1\n    airplane_time = 1\n    ship_time = 1\n\n    # Check the minimum time needed for each method\n    while total_people > 0:\n        # Calculate the total number of people at City 6\n        total_people_six = N + A + B + C + D + E\n\n        # Check if there are enough people at City 6 to reach the destination\n        if total_people_six >= min_train_people:\n            min_time = min(min_time, train_time + bus_time + taxi_time + airplane_time + ship_time)\n            total_people -= min_train_people\n            continue\n\n        # Check if there are enough people at City 6 to reach the destination\n        if total_people_six >= min_bus_people:\n            min_time = min(min_time, bus_time + taxi_time + airplane_time + ship_time)\n            total_people -= min_bus_people\n            continue\n\n        # Check if there are enough people at City 6 to reach the destination\n        if total_people_six >= min_taxi_people:\n            min_time = min(min_time, taxi_time + airplane_time + ship_time)\n            total_people -= min_taxi_people\n            continue\n\n        # Check if there are enough people at City 6 to reach the destination\n        if total_people_six >= min_airplane_people:\n            min_time = min(min_time, airplane_time + ship_time)\n            total_people -= min_airplane_people\n            continue\n\n        # Check if there are enough people at City 6 to reach the destination\n        if total_people_six >= min_ship_people:\n            min_time = min(min_time, ship_time)\n            total_people -= min_ship_people\n            continue\n\n        # If there are not enough people at City 6 to reach the destination,\n        # increase the number of people needed for each method and try again\n        min_train_people += 1\n        min_bus_people += 1\n        min_taxi_people += 1\n        min_airplane_people += 1\n        min_ship_people += 1\n        train_time += 1\n        bus_time += 1\n        taxi_time += 1\n        airplane_time += 1\n        ship_time += 1\n\n    return str(min_time)\n\n\ninput_str = \"5\\n3\\n2\\n4\\n3\\n5\"\noutput_str = solution(input_str)\nprint(output_str) "
    },
    {
        "number": 4143,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C, D, E = map(int, stdin.split())\n    trains = A\n    buses = B\n    taxis = C\n    planes = D\n    ships = E\n\n    def travel_time(city_from: int, city_to: int) -> int:\n        if city_from == 1 and city_to == 2:\n            return 1\n        elif city_from == 2 and city_to == 3:\n            return 1\n        elif city_from == 3 and city_to == 4:\n            return 1\n        elif city_from == 4 and city_to == 5:\n            return 1\n        elif city_from == 5 and city_to == 6:\n            return 1\n        else:\n            return 0\n\n    # Initialize the time needed to reach each city\n    time_to_city = [0] * 7\n    time_to_city[1] = 1\n\n    for city in range(2, 7):\n        # Find the fastest way to reach the city\n        best_time = float('inf')\n        best_mode = ''\n        for mode in ['train', 'bus', 'taxi', 'plane', 'ship']:\n            if mode == 'train':\n                travel_time_min = min(trains, N)\n            elif mode == 'bus':\n                travel_time_min = min(buses, N)\n            elif mode == 'taxi':\n                travel_time_min = min(taxis, N)\n            elif mode == 'plane':\n                travel_time_min = min(planes, N)\n            elif mode == 'ship':\n                travel_time_min = min(ships, N)\n\n            time_needed = travel_time(city_from=city - 1, city_to=city) + travel_time_min\n\n            if time_needed < best_time:\n                best_time = time_needed\n                best_mode = mode\n\n        time_to_city[city] = best_time\n\n    # Calculate the total time needed\n    total_time = sum(time_to_city)\n\n    return f\"{total_time}\"\n"
    },
    {
        "number": 4143,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.strip().split()\n    N, A, B, C, D, E = map(int, input_list)\n\n    # Calculate the time it takes to reach City 2 from City 1\n    time_to_city2 = 1 + (N - 1) // A\n\n    # Calculate the time it takes to reach City 3 from City 2\n    time_to_city3 = 1 + (time_to_city2 - 1) // B\n\n    # Calculate the time it takes to reach City 4 from City 3\n    time_to_city4 = 1 + (time_to_city3 - 1) // C\n\n    # Calculate the time it takes to reach City 5 from City 4\n    time_to_city5 = 1 + (time_to_city4 - 1) // D\n\n    # Calculate the time it takes to reach City 6 from City 5\n    time_to_city6 = 1 + (time_to_city5 - 1) // E\n\n    # Calculate the total time required\n    total_time = time_to_city2 + time_to_city3 + time_to_city4 + time_to_city5 + time_to_city6\n\n    return str(total_time)\n"
    },
    {
        "number": 4143,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    N = int(input_list[0])\n    A = int(input_list[1])\n    B = int(input_list[2])\n    C = int(input_list[3])\n    D = int(input_list[4])\n    E = int(input_list[5])\n    \n    def get_time_to_reach(people: int, start_city: int, end_city: int, transport: str) -> int:\n        if transport == 'train':\n            return people // A + (people % A > 0)\n        elif transport == 'bus':\n            return people // B + (people % B > 0)\n        elif transport == 'taxi':\n            return people // C + (people % C > 0)\n        elif transport == 'airplane':\n            return people // D + (people % D > 0)\n        else:\n            return people // E + (people % E > 0)\n\n    time_to_reach_1 = get_time_to_reach(N, 1, 2, 'train')\n    time_to_reach_2 = get_time_to_reach(N, 2, 3, 'bus')\n    time_to_reach_3 = get_time_to_reach(N, 3, 4, 'taxi')\n    time_to_reach_4 = get_time_to_reach(N, 4, 5, 'airplane')\n    time_to_reach_5 = get_time_to_reach(N, 5, 6, 'ship')\n\n    total_time = time_to_reach_1 + time_to_reach_2 + time_to_reach_3 + time_to_reach_4 + time_to_reach_5\n    return total_time\n\ninput_str = \"\"\"5\n3\n2\n4\n3\n5\"\"\"\n\nprint(solution(input_str)) "
    },
    {
        "number": 4143,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def get_minutes(cities: list) -> int:\n        total_minutes = 0\n        for i in range(len(cities) - 1):\n            total_minutes += cities[i + 1] - cities[i]\n        return total_minutes\n\n    def min_time(N, A, B, C, D, E):\n        total_minutes = get_minutes([0, A, A + B, A + B + C, A + B + C + D, A + B + C + D + E])\n        return total_minutes\n\n    N, A, B, C, D, E = map(int, stdin.strip().split())\n    return str(min_time(N, A, B, C, D, E))"
    },
    {
        "number": 4143,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C, D, E = map(int, stdin.split())\n    \n    time_bus = B + 1\n    time_taxi = C + 1\n    time_airplane = D + 1\n    time_ship = E + 1\n    \n    time_train = 1\n    \n    total_time = (N // A) * time_train\n    \n    if N % A != 0:\n        total_time += (N % A) // time_train\n        total_time += ((N % A) % time_train) // time_bus\n    \n    total_time += (B // time_bus) * time_train\n    \n    if B % time_bus != 0:\n        total_time += (B % time_bus) // time_train\n        total_time += ((B % time_bus) % time_train) // time_taxi\n    \n    total_time += (C // time_taxi) * time_train\n    \n    if C % time_taxi != 0:\n        total_time += (C % time_taxi) // time_train\n        total_time += ((C % time_taxi) % time_train) // time_airplane\n    \n    total_time += (D // time_airplane) * time_train\n    \n    if D % time_airplane != 0:\n        total_time += (D % time_airplane) // time_train\n        total_time += ((D % time_airplane) % time_train) // time_ship\n    \n    total_time += (E // time_ship) * time_train\n    \n    return total_time\n\ninput_str = \"5\\n3\\n2\\n4\\n3\\n5\"\noutput = solution(input_str)\nprint(output)\n"
    },
    {
        "number": 4143,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C, D, E = map(int, stdin.split())\n    \n    # Time needed to travel from City 1 to 2, 2 to 3, and 3 to 4\n    t1, t2, t3 = 1, 1, 1\n\n    # Time needed to travel from City 4 to 5, 5 to 6, and transfer from City 5 to 6\n    t4, t5, t6 = 1, 1, 1\n\n    # Total time needed to reach City 6\n    total_time = N * t1 + (N - A) * t2 + (N - A - B) * t3 + (N - A - B - C) * t4 + (N - A - B - C - D) * t5 + (N - A - B - C - D - E) * t6\n\n    return total_time // 60  # Convert to minutes"
    },
    {
        "number": 4143,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C, D, E = map(int, stdin.split())\n    min_time = 0\n\n    while N > 0:\n        min_time += 1\n        N -= min(A, B, C, D, E)\n        A = max(A - min(A, B), 0)\n        B = max(B - min(B, C), 0)\n        C = max(C - min(C, D), 0)\n        D = max(D - min(D, E), 0)\n        E = max(E - min(E, E), 0)\n\n    return str(min_time)\n"
    },
    {
        "number": 4143,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C, D, E = map(int, stdin.split())\n\n    def can_travel(city1: int, city2: int, capacity: int) -> bool:\n        people_in_city1 = 0\n        people_in_city2 = 0\n\n        for _ in range(N):\n            if people_in_city1 < capacity:\n                people_in_city1 += 1\n            elif people_in_city2 < capacity:\n                people_in_city1 -= 1\n                people_in_city2 += 1\n\n        return people_in_city1 == 0 and people_in_city2 == 0\n\n    min_time = 0\n    while not can_travel(5, 6, 5):\n        min_time += 1\n\n    return str(min_time)\n"
    },
    {
        "number": 4143,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C, D, E = map(int, stdin.split())\n\n    # Calculate the maximum capacity of each vehicle\n    max_train_capacity = A\n    max_bus_capacity = B\n    max_taxi_capacity = C\n    max_airplane_capacity = D\n    max_ship_capacity = E\n\n    # Calculate the total capacity of all vehicles\n    total_capacity = max_train_capacity + max_bus_capacity + max_taxi_capacity + max_airplane_capacity + max_ship_capacity\n\n    # Calculate the total number of people that can be transported by each vehicle\n    total_train_capacity = 0\n    total_bus_capacity = 0\n    total_taxi_capacity = 0\n    total_airplane_capacity = 0\n    total_ship_capacity = 0\n\n    # Check if the total capacity of all vehicles is greater than or equal to the number of people\n    if total_capacity < N:\n        return \"Impossible\"\n\n    # Calculate the total capacity of each vehicle\n    total_train_capacity += A\n    total_bus_capacity += B\n    total_taxi_capacity += C\n    total_airplane_capacity += D\n    total_ship_capacity += E\n\n    # Check if the total capacity of each vehicle is greater than or equal to the number of people\n    if total_train_capacity < N:\n        return \"Impossible\"\n    if total_bus_capacity < N:\n        return \"Impossible\"\n    if total_taxi_capacity < N:\n        return \"Impossible\"\n    if total_airplane_capacity < N:\n        return \"Impossible\"\n    if total_ship_capacity < N:\n        return \"Impossible\"\n\n    # Initialize the time spent to travel\n    time_spent = 0\n\n    # Travel from City 1 to City 2\n    while N >= max_train_capacity:\n        N -= max_train_capacity\n        time_spent += 1\n\n    # Travel from City 2 to City 3\n    while N >= max_bus_capacity:\n        N -= max_bus_capacity\n        time_spent += 1\n\n    # Travel from City 3 to City 4\n    while N >= max_taxi_capacity:\n        N -= max_taxi_capacity\n        time_spent += 1\n\n    # Travel from City 4 to City 5\n    while N >= max_airplane_capacity:\n        N -= max_airplane_capacity\n        time_spent += 1\n\n    # Travel from City 5 to City 6\n    while N > 0:\n        N -= max_ship_capacity\n        time_spent += 1\n\n    return str(time_spent) "
    },
    {
        "number": 4144,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    MOD = 10**9 + 7\n    \n    if N == 1:\n        return \"0\"\n    \n    count = 0\n    for i in range(N):\n        if i == 0 or i == N - 1:\n            count += 1\n        else:\n            count += 2\n    \n    count *= 3\n    \n    if N == 2:\n        count += 2\n    else:\n        count += 6\n    \n    count %= MOD\n    \n    return str(count)\n"
    },
    {
        "number": 4144,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    MOD = 10**9 + 7\n    if N == 1:\n        return \"2\"\n    else:\n        count = 0\n        for i in range(N):\n            if i == 0 or i == N-1:\n                count += 1\n            elif i > 0 and i < N-1:\n                if stdin[i-1] == '0' and stdin[i+1] == '9':\n                    count += 1\n        return str(count % MOD)"
    },
    {
        "number": 4144,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    MOD = 1000000007\n\n    def count(i):\n        if i == 0:\n            return 1\n        elif i == 9:\n            return 9 * count(i - 1)\n        else:\n            return 10 * count(i - 1) + count(i - 1)\n\n    result = 0\n    for i in range(N):\n        if i == 0:\n            result += 1\n        elif i == 9:\n            result += count(9)\n        else:\n            result += count(9) * count(i - 1)\n\n    return str(result % MOD)\n"
    },
    {
        "number": 4144,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 1:\n        return \"1\"\n\n    ans = 0\n    for i in range(1, 10):\n        if i == 0:\n            ans += comb(N - 1, 2)\n        elif i == 9:\n            ans += comb(N - 1, 2)\n        else:\n            ans += comb(N - 1, 2) * 2\n\n    return str(ans % (10**9 + 7))\n\n\ndef"
    },
    {
        "number": 4144,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N > 10**6:\n        return \"Invalid input. N should be less than or equal to 10^6\"\n\n    count = 0\n    for i in range(N):\n        for j in range(10):\n            A = [0] * N\n            A[i] = j\n            if 0 <= j <= 9 and 0 in A and 9 in A:\n                count += 1\n\n    return str(count % (10**9 + 7))\n"
    },
    {
        "number": 4144,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    \n    if N == 1:\n        return \"0\"\n    \n    ans = 0\n    for i in range(10):\n        if i == 0 or i == 9:\n            ans += N - 1\n    \n    return str(ans % (10**9 + 7))\n"
    },
    {
        "number": 4144,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n\n    modulo = 10**9 + 7\n    result = 0\n\n    for i in range(N):\n        for j in range(N):\n            for k in range(N):\n                if i != j and i != k and j != k:\n                    A = [0, 9, 0, 0, 0]\n                    A[i], A[j], A[k] = 0, 9, 0\n                    if all(0 <= x <= 9 for x in A):\n                        result += 1\n                        result %= modulo\n\n    return str(result)\n"
    },
    {
        "number": 4144,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    MOD = 10**9 + 7\n\n    # There are two cases:\n    # - When N is even, there are N/2 sequences where A_i=0 and A_j=9, and N/2 sequences where A_i=9 and A_j=0.\n    # - When N is odd, there are (N-1)/2 sequences where A_i=0 and A_j=9, and (N-1)/2 sequences where A_i=9 and A_j=0, and one sequence where A_i=0 and A_j=9, and one sequence where A_i=9 and A_j=0.\n\n    if N % 2 == 0:\n        count = N // 2 * (N // 2 - 1)\n        count += (N // 2 - 1) * N // 2\n        return count % MOD\n    else:\n        count = (N - 1) // 2 * ((N - 1) // 2 - 1)\n        count += ((N - 1) // 2 - 1) * (N - 1) // 2\n        count += 2\n        return count % MOD\n"
    },
    {
        "number": 4144,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    MOD = 10**9 + 7\n\n    if N == 1:\n        return \"2\"\n\n    count = 0\n    for i in range(N):\n        for j in range(N):\n            if i == j:\n                continue\n            if (i == 0 or j == N - 1) and (j == 0 or i == N - 1):\n                count += 1\n                count %= MOD\n\n    return str(count)\n"
    },
    {
        "number": 4144,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n\n    # First condition\n    if N == 0:\n        return '0'\n\n    # Second condition\n    count = 0\n    for i in range(10):\n        if i == 0:\n            count += 1\n        elif i == 9:\n            count += 1\n\n    # Third condition\n    for i in range(1, 10):\n        if i != 9 and 0 < i < 9:\n            count += 2\n\n    # Modulo calculation\n    count %= (10**9 + 7)\n\n    return str(count)\n"
    },
    {
        "number": 4145,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    is_prime = lambda n: n > 1 and all(n % i != 0 for i in range(2, int(n**0.5)+1))\n\n    for i in range(X+1, 10**6):\n        if is_prime(i):\n            return str(i)"
    },
    {
        "number": 4145,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip())\n    primes = [2]\n    for i in range(3, X+1, 2):\n        is_prime = True\n        for j in primes:\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    \n    for i in range(len(primes)-1, -1, -1):\n        if primes[i] >= X:\n            return str(primes[i])\n    \n    return \"Prime number does not exist\""
    },
    {
        "number": 4145,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    i = X + 1\n    while True:\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            return str(i)\n        i += 1\n"
    },
    {
        "number": 4145,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    primes = [2, 3]\n    for i in range(5, x + 1, 2):\n        is_prime = True\n        for j in primes:\n            if j > int(i ** 0.5) + 1:\n                break\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    min_prime = primes[-1]\n    return str(min_prime)\n"
    },
    {
        "number": 4145,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip())\n    primes = []\n    is_prime = [True] * (X + 1)\n    is_prime[0] = is_prime[1] = False\n\n    for i in range(2, X + 1):\n        if is_prime[i]:\n            primes.append(i)\n            for j in range(i * i, X + 1, i):\n                is_prime[j] = False\n\n    for prime in primes:\n        if prime >= X:\n            return str(prime)\n"
    },
    {
        "number": 4145,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip())\n    primes = [2]\n    num = 3\n    while num < 10**5:\n        is_prime = True\n        for prime in primes:\n            if num % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 1\n    for prime in primes:\n        if prime >= X:\n            return str(prime)"
    },
    {
        "number": 4145,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip())\n\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    for num in range(X, 2000000):\n        if is_prime(num):\n            return str(num)"
    },
    {
        "number": 4145,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip())\n    primes = []\n\n    # generate all prime numbers less than 100000\n    for num in range(2, 100000):\n        is_prime = True\n        for div in range(2, int(num ** 0.5) + 1):\n            if num % div == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n\n    # find the first prime number greater than or equal to X\n    for prime in primes:\n        if prime >= X:\n            return str(prime)\n\n    return \"There is no prime number greater than or equal to X.\"\n"
    },
    {
        "number": 4145,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip())\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def find_min_prime(x: int) -> int:\n        prime_candidate = x\n        while not is_prime(prime_candidate):\n            prime_candidate += 1\n        return prime_candidate\n\n    return str(find_min_prime(X))\n"
    },
    {
        "number": 4145,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    prime = X + 1\n    while True:\n        is_prime = True\n        for i in range(2, prime):\n            if prime % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            break\n        prime += 1\n    return str(prime)\n\ninput_str = input()\noutput_str = solution(input_str)\nprint(output_str) "
    },
    {
        "number": 4146,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    v = [int(x) for x in stdin.split()[1:]]\n\n    if n % 2 == 1:\n        return \"Error: n must be even\"\n\n    if len(set(v)) < 2:\n        return \"Error: There must be exactly two different numbers in the sequence\"\n\n    if v[0] == v[1] or v[-1] == v[-2]:\n        return \"Error: The first and last elements must be different\"\n\n    for i in range(1, n-1, 2):\n        if v[i] != v[i+2]:\n            return \"Error: For each i = 1,2,..., n-2, a_i = a_{i+2}\"\n\n    count = 0\n    for i in range(1, n-1, 2):\n        if v[i] == v[i+1]:\n            count += 1\n\n    return count"
    },
    {
        "number": 4146,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *v = map(int, stdin.split())\n    count = 0\n\n    for i in range(2, n, 2):\n        if v[i] != v[i - 1]:\n            count += 1\n            if count == 2:\n                break\n\n    return count"
    },
    {
        "number": 4146,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid_sequence(sequence: List[int]) -> bool:\n        for i in range(1, len(sequence) - 2):\n            if sequence[i] != sequence[i + 2]:\n                return False\n        return len(set(sequence)) == 2\n\n    def find_minimum_replacements(sequence: List[int]) -> int:\n        count = 0\n        for i in range(1, len(sequence) - 2):\n            if sequence[i] != sequence[i + 2]:\n                count += 1\n                sequence[i + 2] = sequence[i]\n        return count\n\n    n = int(stdin.splitlines()[0])\n    sequence = [int(x) for x in stdin.splitlines()[1].split()]\n\n    if is_valid_sequence(sequence):\n        return 0\n\n    if n % 2 == 0:\n        minimum_replacements = find_minimum_replacements(sequence)\n        if minimum_replacements == 0:\n            return 0\n        else:\n            return minimum_replacements\n    else:\n        return -1\n"
    },
    {
        "number": 4146,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    v = list(map(int, stdin.split()[1:]))\n\n    count = 0\n    for i in range(1, n - 1, 2):\n        if v[i] != v[i + 1]:\n            count += 1\n\n    return count\n\n\ndef"
    },
    {
        "number": 4146,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    v = list(map(int, stdin.split('\\n')[1].split()))\n\n    if n % 2 != 0:\n        return \"Invalid input\"\n\n    for i in range(n - 2):\n        if v[i] != v[i + 2]:\n            return 2\n\n    for i in range(n - 1):\n        if v[i] == v[i + 1]:\n            return 1\n\n    return 0\n\n\ninput_str = \"4\\n3 1 3 2\"\nprint(solution(input_str)) "
    },
    {
        "number": 4146,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split(\"\\n\")\n    n = int(input_data[0])\n    v = list(map(int, input_data[1].split()))\n\n    if n % 2 == 1:\n        return \"Invalid input: n should be even\"\n\n    if len(v) != n:\n        return \"Invalid input: length of v should be equal to n\"\n\n    # Check if the sequence is already /\\/\\/\\/\n    for i in range(n - 2):\n        if v[i] != v[i + 2]:\n            break\n    else:\n        return \"0\"\n\n    # Find the minimum number of elements to replace\n    min_replacements = n\n    for i in range(n - 4):\n        if v[i] != v[i + 2] and v[i + 1] == v[i + 3]:\n            min_replacements = i + 2\n            break\n\n    return str(min_replacements)\n"
    },
    {
        "number": 4146,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    v = list(map(int, stdin[1].split()))\n    \n    if n % 2 == 1:\n        return \"Error: n must be even.\"\n    \n    count_diff_nums = 0\n    for i in range(1, n - 1, 2):\n        if v[i] != v[i + 2]:\n            count_diff_nums += 1\n    \n    if count_diff_nums >= 2:\n        return \"Error: Exactly two different numbers must appear in the sequence.\"\n    \n    if count_diff_nums == 0:\n        for i in range(1, n - 1, 2):\n            if v[i] == v[i - 1]:\n                return \"Error: The first element must be different from the second element.\"\n    \n    min_replace = 0\n    for i in range(1, n - 1, 2):\n        if v[i] == v[i + 2]:\n            min_replace += 1\n            break\n    return min_replace\n"
    },
    {
        "number": 4146,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    v = list(map(int, stdin.split()[1:]))\n\n    count = 0\n    for i in range(n - 1):\n        if v[i] == v[i + 2]:\n            count += 1\n\n    if count == 0:\n        return \"0\"\n    elif count == 2:\n        return \"1\"\n    else:\n        return \"2\"\n"
    },
    {
        "number": 4146,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    v = list(map(int, stdin.split()[1:]))\n\n    # Check if the sequence is already /\\/\\/\\/\n    for i in range(1, n - 2):\n        if v[i] != v[i + 2]:\n            return 0\n\n    # Count the number of different elements\n    unique_elements = set(v)\n    if len(unique_elements) > 2:\n        return -1  # More than two different elements\n\n    # Find the minimum number of elements to replace\n    min_replacements = 0\n    for i in range(1, n - 2):\n        if v[i] != v[i + 2]:\n            min_replacements += 1\n\n    return min_replacements\n\n\ndef"
    },
    {
        "number": 4146,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    v = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    if n % 2 == 1:\n        return \"Impossible\"\n\n    count = 0\n    for i in range(n // 2):\n        if v[i] != v[n - i - 1]:\n            count += 1\n\n    if count != 2:\n        return \"Impossible\"\n\n    return count\n"
    },
    {
        "number": 4147,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = map(int, stdin.split())\n    bamboos = list(map(int, stdin.rstrip().split()[1:]))\n\n    # Calculate the MP needed to achieve the objective\n    MP_needed = 0\n\n    # If we already have a bamboo of length A, we can skip Extension Magic\n    if bamboos.count(A) == 1:\n        MP_needed += 2\n    else:\n        # Use Extension Magic twice to obtain a bamboo of length A\n        MP_needed += 4\n        bamboos.append(A)\n\n    # If we already have a bamboo of length B, we can skip Shortening Magic\n    if bamboos.count(B) == 1:\n        MP_needed += 1\n    else:\n        # Use Shortening Magic once to obtain a bamboo of length B\n        MP_needed += 2\n        bamboos.append(B)\n\n    # Use Composition Magic on the bamboos of lengths A, B to obtain a bamboo of length C\n    MP_needed += 10\n    bamboos.append(C)\n\n    return str(MP_needed)"
    },
    {
        "number": 4147,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    N, A, B, C = map(int, input_list[0].split())\n    bamboos = [int(i) for i in input_list[1:]]\n    MP = 0\n\n    if A <= B + C:\n        MP += 10\n        A += 1\n    else:\n        MP += 1\n        A = B + C\n\n    if C <= A + B:\n        MP += 10\n        C += 1\n    else:\n        MP += 1\n        C = A + B\n\n    if B <= A + C:\n        MP += 10\n        B += 1\n    else:\n        MP += 1\n        B = A + C\n\n    return MP\n\n\nstdin = '''5 100 90 80\n98\n40\n30\n21\n80'''\n\nprint(solution(stdin)) "
    },
    {
        "number": 4147,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    N, A, B, C = map(int, input_list[0].split())\n    bamboo_lengths = list(map(int, input_list[1:]))\n\n    MP_required = 0\n    for bamboo_length in bamboo_lengths:\n        if bamboo_length < C:\n            MP_required += 2\n            bamboo_lengths.append(bamboo_length + 1)\n            N += 1\n        elif bamboo_length < B:\n            MP_required += 1\n            bamboo_lengths.append(bamboo_length + 1)\n            N += 1\n        else:\n            MP_required += 10\n            bamboo_lengths.append(bamboo_length + 1)\n            N += 1\n\n    return MP_required\n"
    },
    {
        "number": 4147,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = map(int, stdin.split()[:4])\n    bamboos = list(map(int, stdin.split()[4:]))\n\n    # Calculate MP cost\n    def calculate_mp_cost(bamboos):\n        mp_cost = 0\n        for bamboo in bamboos:\n            if bamboo < 2:\n                mp_cost += 1\n            else:\n                mp_cost += 10\n        return mp_cost\n\n    # Extension Magic\n    def extension_magic(bamboos, index, mp_cost):\n        if bamboos[index] < 1:\n            return bamboos, mp_cost + 1\n        bamboos[index] += 1\n        return bamboos, mp_cost + 1\n\n    # Shortening Magic\n    def shortening_magic(bamboos, index, mp_cost):\n        if bamboos[index] < 2:\n            return bamboos, mp_cost + 1\n        bamboos[index] -= 1\n        return bamboos, mp_cost + 1\n\n    # Composition Magic\n    def composition_magic(bamboos, index1, index2, mp_cost):\n        if bamboos[index1] < 1 or bamboos[index2] < 1:\n            return bamboos, mp_cost + 10\n        bamboos[index1] += bamboos[index2]\n        bamboos[index2] = 0\n        return bamboos, mp_cost + 10\n\n    # Apply magics\n    mp_cost = calculate_mp_cost(bamboos)\n    bamboos_len = len(bamboos)\n\n    while bamboos_len > 2:\n        # Extension Magic\n        bamboos, mp_cost = extension_magic(bamboos, 0, mp_cost)\n        bamboos_len = len(bamboos)\n        if bamboos_len > 2:\n            bamboos, mp_cost = extension_magic(bamboos, 1, mp_cost)\n            bamboos_len = len(bamboos)\n\n        # Shortening Magic\n        bamboos, mp_cost = shortening_magic(bamboos, 0, mp_cost)\n        bamboos_len = len(bamboos)\n        if bamboos_len > 2:\n            bamboos, mp_cost = shortening_magic(bamboos, 1, mp_cost)\n            bamboos_len = len(bamboos)\n\n        # Composition Magic\n        bamboos, mp_cost = composition_magic(bamboos, 0, 1, mp_cost)\n        bamboos_len = len(bamboos)\n        if bamboos_len > 2:\n            bamboos, mp_cost = composition_magic(bamboos, 1, 2, mp_cost)\n            bamboos_len = len(bamboos)\n        if bamboos_len > 2:\n            bamboos, mp_cost = composition_magic(bamboos, 2, 3, mp_cost)\n            bamboos_len = len(bamboos)\n\n    # Check if objective is achieved\n    objective_achieved = True\n    for bamboo in bamboos:\n        if bamboo < 100 or bamboo > 1000:\n            objective_achieved = False\n            break\n\n    # Return MP cost if objective achieved, otherwise, return -1\n    if objective_achieved:\n        return mp_cost\n    else:\n        return -1"
    },
    {
        "number": 4147,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    N, A, B, C = map(int, input_data[0].split())\n    bamboos = list(map(int, input_data[1:]))\n\n    MP_needed = 0\n    for i in range(N):\n        if bamboos[i] >= 2:\n            MP_needed += 1\n            bamboos[i] -= 2\n\n    MP_needed += 10 + 2 + 10\n\n    return MP_needed\n"
    },
    {
        "number": 4147,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    lines = stdin.split('\\n')\n    N, A, B, C = map(int, lines[0].split())\n    bamboos = list(map(int, lines[1:]))\n\n    # Define magic functions\n    def extension_magic(bamboos, i):\n        if bamboos[i - 1] < 2:\n            return False, 0\n        else:\n            return True, bamboos[i - 1] - 1\n\n    def shortening_magic(bamboos, i):\n        if bamboos[i - 1] <= 1:\n            return False, 0\n        else:\n            return True, bamboos[i - 1] - 1\n\n    def composition_magic(bamboos, i, j):\n        if bamboos[i - 1] + bamboos[j - 1] <= 1000:\n            return True, bamboos[i - 1] + bamboos[j - 1]\n        else:\n            return False, 0\n\n    # Calculate MP needed\n    mp_needed = 0\n    for i in range(1, N + 1):\n        for j in range(i + 1, N + 1):\n            for k in range(j + 1, N + 1):\n                if i == j or i == k or j == k:\n                    continue\n\n                extension_success, extension_mp = extension_magic(bamboos, i)\n                shortening_success, shortening_mp = shortening_magic(bamboos, i)\n                composition_success, composition_mp = composition_magic(bamboos, i, j)\n\n                mp_needed = max(mp_needed, extension_mp + shortening_mp + composition_mp)\n\n    return mp_needed"
    },
    {
        "number": 4147,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = map(int, stdin.split()[0:4])\n    bamboos = list(map(int, stdin.split()[4:]))\n\n    def extension_magic(bamboos):\n        bamboos.sort(reverse=True)\n        return bamboos[0] + 1, bamboos[:-1]\n\n    def shortening_magic(bamboos):\n        bamboos.sort(reverse=True)\n        if bamboos[0] < 2:\n            return 0, bamboos[:-1]\n        bamboos[0] -= 1\n        return bamboos[0], bamboos[:-1]\n\n    def composition_magic(bamboos):\n        bamboos.sort(reverse=True)\n        if bamboos[0] < 2:\n            return 0, bamboos[:-1]\n        new_bamboo = bamboos[0] + bamboos[1]\n        return new_bamboo, bamboos[:-2] + [new_bamboo]\n\n    def min_mp(A, B, C):\n        if A == B and B == C:\n            return 10\n        elif A == B or B == C or A == C:\n            return 1\n        else:\n            return 2\n\n    mp = 0\n    while A > 0 and B > 0 and C > 0:\n        A, B, C = composition_magic([A, B, C])\n        mp += 10\n\n    mp += min_mp(A, B, C)\n\n    return mp"
    },
    {
        "number": 4147,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = map(int, stdin.split())\n    bamboos = list(map(int, stdin.rstrip().split(\"\\n\")[1:]))\n    \n    # Calculate the minimum amount of MP needed\n    MP_cost = 0\n    for i in range(N):\n        bamboo = bamboos[i]\n        if bamboo == A or bamboo == B or bamboo == C:\n            return MP_cost\n        if bamboo < 2:\n            MP_cost += 1\n        else:\n            MP_cost += 1 + 10\n            MP_cost += bamboo - 2\n    return MP_cost"
    },
    {
        "number": 4147,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    N = int(input_list[0].split()[0])\n    A, B, C = map(int, input_list[0].split()[1:])\n    bamboos = list(map(int, input_list[1:]))\n\n    # Extension Magic\n    def extension_magic(bamboos, bamboo_index):\n        if bamboos[bamboo_index] < C:\n            bamboos[bamboo_index] += 1\n            return 1\n        return 0\n\n    # Shortening Magic\n    def shortening_magic(bamboos, bamboo_index):\n        if bamboos[bamboo_index] >= 2:\n            bamboos[bamboo_index] -= 1\n            return 1\n        return 0\n\n    # Composition Magic\n    def composition_magic(bamboos):\n        for i in range(N):\n            for j in range(i + 1, N):\n                if bamboos[i] + bamboos[j] == C:\n                    bamboos.append(C)\n                    return 10\n        return 0\n\n    mp_cost = 0\n    bamboos.sort(reverse=True)\n\n    # Extension Magic\n    for i in range(N):\n        mp_cost += extension_magic(bamboos, i)\n\n    # Shortening Magic\n    for i in range(N):\n        mp_cost += shortening_magic(bamboos, i)\n\n    # Composition Magic\n    while C not in bamboos and composition_magic(bamboos) > 0:\n        mp_cost += composition_magic(bamboos)\n\n    # Output result\n    if C in bamboos:\n        return mp_cost\n    else:\n        return \"IMPOSSIBLE\"\n\ninput_string = \"5 100 90 80\\n98\\n40\\n30\\n21\\n80\"\nprint(solution(input_string)) "
    },
    {
        "number": 4147,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = map(int, input().split())\n    bamboos = list(map(int, stdin.split()[1:]))\n\n    def calculate_mp_needed(A, B, C):\n        mp_needed = 0\n        while A < B or A < C:\n            if A < B and A < C:\n                mp_needed += 1\n                A += 1\n            elif B < A and B < C:\n                mp_needed += 10\n                B += 1\n            else:\n                mp_needed += 10\n                C += 1\n        return mp_needed\n\n    mp_needed = calculate_mp_needed(A, B, C)\n    return mp_needed"
    },
    {
        "number": 4148,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, S = map(str, stdin.split())\n    N = int(N)\n    S = S.upper()\n    result = \"\"\n    for char in S:\n        if char.isalpha():\n            new_char = chr((ord(char) + N - 65) % 26 + 65)\n        else:\n            new_char = char\n        result += new_char\n    return result\n"
    },
    {
        "number": 4148,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    N = int(stdin.splitlines()[0])\n    S = stdin.splitlines()[1]\n    \n    # Shift each character by N in alphabetical order\n    shifted_s = \"\"\n    for char in S:\n        if char.isupper():\n            shifted_char = chr(((ord(char) - ord('A') + N) % 26) + ord('A'))\n            shifted_s += shifted_char\n        else:\n            shifted_s += char\n    \n    return shifted_s"
    },
    {
        "number": 4148,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    N, S = input().split()\n    N = int(N)\n\n    # Convert the string to a list of characters\n    S = list(S)\n\n    # Shift each character by N in alphabetical order\n    for i in range(len(S)):\n        char = S[i]\n        shifted_char = chr(ord(char) + N)\n        if shifted_char > 'Z':\n            shifted_char = chr(ord(shifted_char) - 26)\n        S[i] = shifted_char\n\n    # Convert the list of characters back to a string\n    S = ''.join(S)\n\n    return S\n"
    },
    {
        "number": 4148,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    S = stdin[1]\n\n    result = \"\"\n    for char in S:\n        shifted_char = chr((ord(char) + N - 65) % 26 + 65)\n        result += shifted_char\n\n    return result\n"
    },
    {
        "number": 4148,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split('\\n')\n    N = int(N)\n    S = list(S)\n\n    for i in range(len(S)):\n        if S[i].isupper():\n            if S[i].isalpha():\n                S[i] = chr(((ord(S[i]) - 64 - N) % 26) + 64)\n\n    return ''.join(S)\n"
    },
    {
        "number": 4148,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def shift_char(c: str, n: int) -> str:\n        base = ord('A')\n        diff = ord(c) - base\n        return chr((diff + n) % 26 + base)\n\n    N, S = stdin.split('\\n')\n    N = int(N)\n    result = ''\n    for c in S:\n        if c.isalpha():\n            result += shift_char(c, N)\n        else:\n            result += c\n    return result\n\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4148,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, S = input().split()\n    N = int(N)\n    S = list(S)\n    \n    for i in range(len(S)):\n        if S[i] == 'Z':\n            S[i] = 'A'\n        elif S[i] == 'Y':\n            S[i] = 'B'\n        elif S[i] == 'X':\n            S[i] = 'C'\n        elif S[i] == 'W':\n            S[i] = 'D'\n        elif S[i] == 'V':\n            S[i] = 'E'\n        else:\n            S[i] = chr(ord(S[i]) + N)\n            if S[i] > 'Z':\n                S[i] = chr(ord(S[i]) - 26)\n    \n    return ''.join(S)\n\ninput_str = \"2\\nABCXYZ\\n\"\nprint(solution(input_str)) "
    },
    {
        "number": 4148,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split()\n    N = int(N)\n    S = list(S)\n    for i in range(len(S)):\n        if S[i].isalpha():\n            shifted_char = chr((ord(S[i]) - ord('A') + N) % 26 + ord('A'))\n            S[i] = shifted_char\n    return ''.join(S)\n\n\ninput_str = \"2\\nABCXYZ\"\nprint(solution(input_str)) "
    },
    {
        "number": 4148,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    N = int(input_list[0])\n    S = input_list[1]\n    \n    result = \"\"\n    for char in S:\n        new_char = chr((ord(char) - 65 + N) % 26 + 65)\n        result += new_char\n        \n    return result\n\ndef"
    },
    {
        "number": 4148,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input into N and S\n    N, S = map(str, stdin.split())\n    N = int(N)\n    \n    # Shift each character of S by N in alphabetical order\n    result = \"\"\n    for char in S:\n        # Calculate the shifted character\n        shifted_char = chr(((ord(char) - 65 + N) % 26) + 65)\n        result += shifted_char\n    \n    return result\n"
    },
    {
        "number": 4149,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    b = list(map(int, input().split()))\n\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def next_prime(num: int) -> int:\n        if num == 2:\n            return 3\n        i = num + 1\n        while True:\n            if is_prime(i):\n                return i\n            i += 1\n\n    def get_next_number(num: int) -> int:\n        if is_prime(num):\n            return next_prime(num)\n        else:\n            i = num - 1\n            while i > 1:\n                if not is_prime(i) and i % num == 0:\n                    return i\n                i -= 1\n            return -1\n\n    a = []\n    for i in range(2 * n):\n        while b[i] not in a:\n            a.append(b[i])\n        if a[i] == b[i]:\n            a.append(get_next_number(a[i]))\n\n    a = sorted(a)\n    return ' '.join(map(str, a))\n"
    },
    {
        "number": 4149,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def get_greatest_divisor(n: int) -> int:\n        for i in range(n - 1, 0, -1):\n            if n % i == 0:\n                return i\n\n    def get_next_prime(n: int) -> int:\n        count = 1\n        while True:\n            if is_prime(n + count):\n                return n + count\n            count += 1\n\n    def recover_array(b: list) -> list:\n        n = len(b) // 2\n        a = []\n        i = 1\n        while len(a) < n:\n            if is_prime(b[i]):\n                a.append(get_next_prime(b[i]))\n            else:\n                a.append(get_greatest_divisor(b[i]))\n            i += 2\n        return a\n\n    n = int(stdin.split('\\n')[0])\n    b = list(map(int, stdin.split('\\n')[1].split()))\n    result = recover_array(b)\n    return ' '.join(map(str, result))\n"
    },
    {
        "number": 4149,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    b = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    def is_prime(x: int) -> bool:\n        if x < 2:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    def get_primes() -> List[int]:\n        primes = [2]\n        i = 3\n        while primes[-1] <= 2750131:\n            if is_prime(i):\n                primes.append(i)\n            i += 2\n        return primes\n\n    def get_divisor(x: int) -> int:\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return i\n        return x\n\n    def recover_array(b: List[int]) -> List[int]:\n        a = []\n        i = 0\n        primes = get_primes()\n        while len(a) < n:\n            if is_prime(b[i]):\n                a.append(primes[b[i] - 2])\n            else:\n                a.append(get_divisor(b[i]))\n            i += 1\n        return a\n\n    return \" \".join(map(str, recover_array(b)))\n\ninput_data = \"\"\"3\n3 5 2 3 2 4\"\"\"\n\nprint(solution(input_data)) "
    },
    {
        "number": 4149,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    from collections import defaultdict\n    from itertools import count, islice\n    from sympy import isprime\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    def prime_gen() -> int:\n        p = 2\n        while True:\n            yield p\n            p += 1\n\n    def prime_numbers(n: int) -> int:\n        primes = defaultdict(int)\n        for p in islice(prime_gen(), n):\n            primes[p] = p\n        return primes\n\n    def shuffle(a):\n        from random import shuffle\n        shuffle(a)\n        return a\n\n    def recover_array(b, n):\n        a = []\n        i = 1\n        while len(a) < n:\n            if is_prime(b[i]):\n                a.append(prime_numbers(b[i])[i])\n            else:\n                a.append(next(x for x in count(1) if x != b[i] and x % b[i] != 0))\n            i += 1\n        return a\n\n    n = int(stdin.splitlines()[0])\n    b = list(map(int, stdin.splitlines()[1].split()))\n\n    a = recover_array(b, n)\n    a = shuffle(a)\n    return ' '.join(map(str, a))\n"
    },
    {
        "number": 4149,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    b = [int(x) for x in stdin.splitlines()[1].split()]\n    \n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def get_prime(num: int) -> int:\n        prime_index = 0\n        while prime_index < len(primes) and primes[prime_index] < num:\n            prime_index += 1\n        return primes[prime_index - 1]\n    \n    a = []\n    primes = [2]\n    for i in range(3, 2750131, 2):\n        if is_prime(i):\n            primes.append(i)\n    \n    for num in b:\n        if is_prime(num):\n            a.append(get_prime(num))\n        else:\n            for i in range(2, num):\n                if num % i == 0:\n                    a.append(i)\n                    break\n    \n    return \" \".join(str(x) for x in a)\n\ninput_data = (\n    \"3\\n\"\n    \"3 5 2 3 2 4\"\n)\n\nprint(solution(input_data))\n"
    },
    {
        "number": 4149,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    b = [int(x) for x in stdin.splitlines()[1].split()]\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def find_greatest_divisor(num, a):\n        for i in range(len(a) - 1, -1, -1):\n            if a[i] > num and a[i] % num == 0:\n                return a[i]\n        return -1\n\n    def find_prime(num):\n        for i in range(num, 2750131):\n            if is_prime(i):\n                return i\n        return None\n\n    a = []\n    prime_num = 2\n    for i in range(2 * n):\n        if i < n and b[i] == prime_num:\n            a.append(find_prime(prime_num))\n            prime_num += 1\n        else:\n            divisor = find_greatest_divisor(b[i], a)\n            if divisor != -1:\n                a.append(divisor)\n            else:\n                return \"No solution\"\n\n    return \" \".join(map(str, a))\n"
    },
    {
        "number": 4149,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    b = list(map(int, stdin.split('\\n')[1].split()))\n    a = [0] * n\n\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def prime_num(num: int) -> int:\n        count = 0\n        while True:\n            count += 1\n            if is_prime(count) and count > num:\n                return count\n\n    def greatest_divisor(num: int) -> int:\n        for i in range(num, 1, -1):\n            if num % i == 0:\n                return i\n\n    def create_a(b: list) -> list:\n        a = [0] * n\n        i = 0\n        for num in b:\n            if is_prime(num):\n                a[i] = prime_num(num)\n            else:\n                a[i] = greatest_divisor(num)\n            i += 1\n        return a\n\n    a = create_a(b)\n    print(' '.join(map(str, a)))\n    return ' '.join(map(str, a))"
    },
    {
        "number": 4149,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    b = list(map(int, stdin.splitlines()[1].split()))\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def find_prime_index(num):\n        prime_index = 0\n        while True:\n            if is_prime(prime_index + 2):\n                prime_index += 1\n            else:\n                break\n        return prime_index\n\n    a = [0] * n\n    b_index = 0\n\n    for i in range(n):\n        if b[b_index] % 2 == 0:\n            a[i] = b[b_index]\n            b_index += 1\n        else:\n            divisor_index = b[b_index] // 2\n            while b[b_index] % divisor_index != 0:\n                divisor_index -= 1\n            a[i] = divisor_index\n            b_index += 1\n\n    a = sorted(a)\n    return ' '.join(map(str, a))\n"
    },
    {
        "number": 4149,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def next_prime(num: int) -> int:\n        while True:\n            num += 1\n            if is_prime(num):\n                return num\n\n    def greatest_divisor(num: int) -> int:\n        for i in range(num, 1, -1):\n            if num % i == 0:\n                return i\n\n    def generate_prime_sequence(n: int) -> List[int]:\n        primes = [2]\n        for _ in range(n - 1):\n            primes.append(next_prime(primes[-1]))\n        return primes\n\n    n, *b = map(int, stdin.split())\n    b = list(b)\n    a = []\n    primes = generate_prime_sequence(n)\n\n    for i in range(n):\n        if is_prime(b[2 * i]):\n            a.append(b[2 * i])\n            b[2 * i] = primes.pop(0)\n        else:\n            a.append(greatest_divisor(b[2 * i]))\n\n    b.sort()\n    return ' '.join(map(str, a))\n\n\ninput_data = '''3 3 2 3 2 4\n1\n2750131 199999\n1 3 6'''\n\nprint(solution(input_data)) "
    },
    {
        "number": 4149,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    b = list(map(int, stdin.splitlines()[1].split()))\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def next_prime(curr_prime):\n        while True:\n            curr_prime += 1\n            if is_prime(curr_prime):\n                return curr_prime\n\n    def find_max_divisor(num):\n        max_divisor = num\n        while num % 2 == 0:\n            max_divisor = 2\n            num //= 2\n        for i in range(3, int(num**0.5) + 1, 2):\n            while num % i == 0:\n                max_divisor = i\n                num //= i\n        if num > 2:\n            max_divisor = num\n        return max_divisor\n\n    a = []\n    prime_count = 0\n    curr_prime = 2\n    for num in b:\n        if is_prime(num):\n            a.append(num)\n            prime_count += 1\n            curr_prime = next_prime(curr_prime)\n        else:\n            a.append(find_max_divisor(num))\n\n    a.sort()\n    return \" \".join(map(str, a))"
    },
    {
        "number": 4150,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    skills = list(map(int, stdin.split()[2:]))\n    skills.sort()\n\n    def find_students(skill: int) -> int:\n        left = bisect.bisect_left(skills, skill - k)\n        right = bisect.bisect_right(skills, skill + k)\n        return right - left\n\n    first_team = []\n    second_team = []\n\n    while len(skills) > 0:\n        max_skill = skills[0]\n        max_students = find_students(max_skill)\n\n        for skill in skills:\n            if find_students(skill) > max_students:\n                max_skill = skill\n                max_students = find_students(max_skill)\n\n        first_team.append(max_skill)\n        skills = [s for s in skills if s != max_skill]\n\n        if len(skills) > 0:\n            max_skill = skills[0]\n            max_students = find_students(max_skill)\n\n            for skill in skills:\n                if find_students(skill) > max_students:\n                    max_skill = skill\n                    max_students = find_students(max_skill)\n\n            second_team.append(max_skill)\n            skills = [s for s in skills if s != max_skill]\n\n    result = ''.join(['1' if s in first_team else '2' for s in skills])\n    return result\n"
    },
    {
        "number": 4150,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    skills = list(map(int, stdin.split()[2:]))\n    \n    result = [0] * n\n    for i in range(n):\n        if not result.count(1) and not result.count(2):\n            result[i] = 1\n        else:\n            result[i] = 2\n    \n    return \"\".join(map(str, result))\n"
    },
    {
        "number": 4150,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    assert 1 <= k <= n <= 2 * 10**5\n    assert len(a) == n\n    assert all(1 <= a_i <= n for a_i in a) and len(set(a)) == n\n\n    teams = [[] for _ in range(2)]\n\n    def choose_student(students: List[int]) -> int:\n        max_skill = max(students)\n        max_students = [i for i in students if a[i] == max_skill]\n        closest_students = sorted(students)[:k] + sorted(students)[-k:]\n        chosen_students = [s for s in max_students if s in closest_students]\n        chosen_skill = max_skill\n        if not chosen_students:\n            chosen_skill = min(max_students)\n            chosen_students = [s for s in max_students if s in closest_students]\n        assert len(chosen_students) == 1\n        return chosen_students[0]\n\n    while n > 0:\n        first_team = choose_student(i for i in range(n) if i not in sum(teams, []))\n        teams[0].append(first_team)\n        n -= 1\n        if n > 0:\n            second_team = choose_student(i for i in range(n) if i not in sum(teams, []))\n            teams[1].append(second_team)\n            n -= 1\n\n    result = [1 if i in teams[0] else 2 for i in range(n)]\n    return ''.join(map(str, result))\n"
    },
    {
        "number": 4150,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    if n == 1:\n        return \"1\"\n\n    teams = [0] * n\n    for i in range(n):\n        if teams[i] == 0:\n            max_skill = -1\n            for j in range(i - k, i + k + 1):\n                if j < 0 or j >= n or teams[j] == 1:\n                    continue\n                if a[j] > max_skill:\n                    max_skill = a[j]\n                    max_i = j\n            teams[max_i] = 1\n\n    for i in range(n):\n        if teams[i] == 0:\n            teams[i] = 2\n\n    return \"\".join(map(str, teams))\n\n\ninput_cases = [\n    \"5 2\\n2 4 5 3 1\",\n    \"5 1\\n2 1 3 5 4\",\n    \"7 1\\n7 2 1 3 5 4 6\",\n    \"5 1\\n2 4 5 3 1\"\n]\n\nfor input_case in input_cases:\n    print(solution(input_case))"
    },
    {
        "number": 4150,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    def find_student_with_max_skill(students, left_students, right_students):\n        max_skill = float('-inf')\n        max_student = None\n        for student in students:\n            if student not in left_students and student not in right_students:\n                if a[student - 1] > max_skill:\n                    max_skill = a[student - 1]\n                    max_student = student\n        return max_student\n\n    def find_students_to_choose(students, left_students, right_students, num):\n        to_choose = []\n        for _ in range(num):\n            if left_students:\n                to_choose.append(left_students.pop(0))\n            elif right_students:\n                to_choose.append(right_students.pop(-1))\n        return to_choose\n\n    teams = [[] for _ in range(2)]\n    students = set(range(1, n + 1))\n    while students:\n        max_student = find_student_with_max_skill(students, [], [])\n        students.remove(max_student)\n        left_students = [s for s in students if a[s - 1] < a[max_student - 1]]\n        right_students = [s for s in students if a[s - 1] > a[max_student - 1]]\n        left_students.sort(key=lambda x: a[x - 1], reverse=True)\n        right_students.sort(key=lambda x: a[x - 1])\n        left_students = find_students_to_choose(left_students, [], [], k)\n        right_students = find_students_to_choose(right_students, [], [], k)\n        teams[0].append(max_student)\n        teams[1].extend(left_students + right_students)\n        students = students.difference(set(teams[0] + teams[1]))\n\n    result = ['1'] * n\n    for team_id, team in enumerate(teams):\n        for student in team:\n            result[student - 1] = str(team_id + 1)\n\n    return ''.join(result)\n\n\ninput_string = \"\"\"5 2\n2 4 5 3 1\"\"\"\n\nprint(solution(input_string))  # Output: 11111\n\ninput_string = \"\"\"5 1\n2 1 3 5 4\"\"\"\n\nprint(solution(input_string))  # Output: 22111\n\ninput_string = \"\"\"7 1\n7 2 1 3 5 4 6\"\"\"\n\nprint(solution(input_string))  # Output: 1121122\n\ninput_string = \"\"\"5 1\n2 4 5 3 1\"\"\"\n\nprint(solution(input_string))  # Output: 21112 "
    },
    {
        "number": 4150,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    std_idx = [(i, a[i]) for i in range(n)]\n\n    def choose_team(std_idx: List[Tuple[int, int]], team_num: int) -> Tuple[List[int], List[Tuple[int, int]]]:\n        max_skill = max(std_idx, key=lambda x: x[1])\n        chosen_std_idx = [(max_skill[0], max_skill[1])]\n        chosen_std = [max_skill[0]]\n        std_idx.remove(max_skill)\n\n        for _ in range(k):\n            for i in range(1, k + 1):\n                if i > 0 and (i - 1) % 2 == team_num - 1:\n                    chosen_std_idx.append(std_idx[i - 1])\n                    chosen_std.append(std_idx[i - 1][0])\n                    std_idx.remove(std_idx[i - 1])\n                    break\n\n        return chosen_std, std_idx\n\n    first_team, std_idx = choose_team(std_idx, 1)\n    second_team, std_idx = choose_team(std_idx, 2)\n\n    result = [0] * n\n    for i in range(n):\n        if i in first_team:\n            result[i] = 1\n        elif i in second_team:\n            result[i] = 2\n\n    return ''.join(map(str, result))\n"
    },
    {
        "number": 4150,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    def find_student(students: List[int], a: List[int], i: int, left: int, right: int) -> int:\n        max_skill = -1\n        max_idx = -1\n        for j in range(i, len(students)):\n            if students[j] in a:\n                skill = a.index(students[j])\n                if skill > max_skill:\n                    max_skill = skill\n                    max_idx = j\n        return max_idx\n\n    def choose_students(students: List[int], a: List[int], left: int, right: int) -> List[int]:\n        team1 = []\n        team2 = []\n        chosen = []\n        for i in range(left, right + 1):\n            idx = find_student(students, a, len(chosen), i, right)\n            if idx == -1:\n                break\n            chosen.append(students.pop(idx))\n            if len(chosen) == k:\n                break\n        for i in range(left, right + 1):\n            idx = find_student(students, a, len(chosen), i, left)\n            if idx == -1:\n                break\n            chosen.append(students.pop(idx))\n            if len(chosen) == k:\n                break\n        team1 = chosen[:k]\n        team2 = chosen[k:]\n        return team1, team2\n\n    students = list(range(1, n + 1))\n    teams = [[] for _ in range(2)]\n    while students:\n        left = k\n        right = k\n        while left >= 1 and right <= len(students) - 1:\n            left -= 1\n            right += 1\n        team1, team2 = choose_students(students, a, left, right)\n        teams[0].extend(team1)\n        teams[1].extend(team2)\n\n    result = ['1' if i in teams[0] else '2' for i in range(1, n + 1)]\n    return ''.join(result)\n\n\ndef"
    },
    {
        "number": 4150,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    std_skills = list(map(int, input().split()))\n\n    def find_closest_students(std_skills, i, left, right):\n        left_skills = [abs(i - skill) for skill in std_skills[:left]]\n        right_skills = [abs(i - skill) for skill in std_skills[right:]]\n        left_students = [std_skills[j] for j in range(left) if left_skills[j] <= k]\n        right_students = [std_skills[j] for j in range(right, len(std_skills)) if right_skills[j - right] <= k]\n        return left_students + right_students\n\n    def choose_students(std_skills, team):\n        max_skill = max(std_skills)\n        chosen_students = [std_skills.index(max_skill)]\n        std_skills.remove(max_skill)\n        for i in range(k):\n            left_students = find_closest_students(std_skills, chosen_students[-1], i + 1, len(std_skills))\n            right_students = find_closest_students(std_skills, chosen_students[-1], 0, i + 1)\n            left_students.sort()\n            right_students.sort()\n            chosen_students += left_students + right_students\n        return chosen_students\n\n    first_team = choose_students(std_skills, 1)\n    second_team = choose_students(std_skills, 2)\n    result = [2] * n\n    for student in first_team:\n        result[student] = 1\n    for student in second_team:\n        result[student] = 2\n    return ''.join(map(str, result))\n"
    },
    {
        "number": 4150,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    # Create a dictionary to store the skills and their indices in the array\n    skills = {a_i: i for i, a_i in enumerate(a)}\n\n    teams = [set() for _ in range(2)]\n    team_1 = set()\n    team_2 = set()\n    for _ in range(n):\n        # Find the student with maximum programming skill\n        max_skill = max(skills)\n        max_index = skills[max_skill]\n\n        # Find k closest students to the left and to the right\n        left_k = set()\n        right_k = set()\n        for i in range(max_index - 1, max_index - 1 - k, -1):\n            if i >= 0:\n                left_k.add(a[i])\n        for i in range(max_index + 1, min(max_index + 1 + k, n)):\n            if i < n:\n                right_k.add(a[i])\n\n        # Choose the students to join the teams\n        team_1.add(max_index)\n        team_2.add(max_index)\n        for skill in left_k:\n            team_1.add(skills[skill])\n        for skill in right_k:\n            team_2.add(skills[skill])\n\n        # Remove the chosen students from the skills dictionary\n        for i in range(max_index - k, max_index + k + 1):\n            if 0 <= i < n:\n                skills.pop(a[i], None)\n\n    # Determine the teams\n    teams = [team_1, team_2]\n\n    # Create the output string\n    output = ['1' if i in team_1 else '2' for i in range(n)]\n    return ''.join(output)"
    },
    {
        "number": 4150,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    \n    def get_max_programmig_skill_student(students: list) -> int:\n        return max(students)\n    \n    def get_k_closest_students(students: list, k: int, i: int) -> list:\n        left = [students[j] for j in range(len(students)) if j < i]\n        left_closest = sorted(left, reverse=True)[:k]\n        \n        right = [students[j] for j in range(len(students)) if j > i]\n        right_closest = sorted(right)[:k]\n        \n        return left_closest + right_closest\n    \n    teams = [[] for _ in range(2)]\n    \n    while len(a) > 0:\n        max_skill_student = get_max_programmig_skill_student(a)\n        a.remove(max_skill_student)\n        \n        left_students = get_k_closest_students(a, k, a.index(max_skill_student))\n        for student in left_students:\n            a.remove(student)\n        \n        teams[0].append(max_skill_student)\n        teams[1].extend(left_students)\n    \n    return \"\".join([(\"1\" if i in teams[0] else \"2\") for i in range(1, n+1)])"
    },
    {
        "number": 4151,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    a = list(map(int, stdin[1].split()))\n\n    def count_renumerations(a):\n        def dfs(i, b):\n            if i == n:\n                return 1\n            if b[i] == b[i + 1]:\n                return dfs(i + 1, b)\n            return dfs(i + 1, b) + dfs(i + 1, b + 1)\n\n        a.sort()\n        a = [0] + a\n        b = [0] * (n + 1)\n        return dfs(1, b)\n\n    renumerations = count_renumerations(a)\n    return str(renumerations % 998244353)\n"
    },
    {
        "number": 4151,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    n = int(input_data[0])\n    a = list(map(int, input_data[1].split()))\n\n    def monotonic_renumeration(a):\n        b = [0] * len(a)\n        for i, x in enumerate(a):\n            b[i] = bisect_left(b[:i], x)\n        return b\n\n    mod = 998244353\n    count = 0\n    memo = {}\n\n    def count_renumerations(a):\n        nonlocal count\n        if tuple(a) in memo:\n            return memo[tuple(a)]\n\n        b = monotonic_renumeration(a)\n        unique_b = len(set(b))\n        count += unique_b\n        count %= mod\n        memo[tuple(a)] = unique_b\n\n        return unique_b\n\n    count_renumerations(a)\n    print(count)"
    },
    {
        "number": 4151,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n\n    # Initialize the monotonic renumeration array\n    b = [0] * n\n\n    # Initialize a set to store the monotonic renumerations\n    monotonic_renumerations = set()\n\n    for i in range(n):\n        for j in range(n):\n            # If a[i] = a[j], then b[i] = b[j]\n            if a[i] == a[j]:\n                b[i] = b[j]\n\n        # If b[i] = b[i+1], then b[i] = b[i+1]\n        if i < n-1 and b[i] == b[i+1]:\n            b[i+1] += 1\n\n        # Add the monotonic renumeration to the set\n        monotonic_renumerations.add(tuple(b))\n\n    # Calculate the number of different monotonic renumerations and print it modulo 998244353\n    count = len(monotonic_renumerations)\n    return str(count % 998244353)\n"
    },
    {
        "number": 4151,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()[1:]))\n    \n    mod = 998244353\n    \n    # Initialize the renumeration array with zeros\n    b = [0] * n\n    \n    # Calculate the number of renumerations by considering all possible permutations\n    count = 1\n    for i in range(n):\n        count *= (mod - b[i]) * (1 - b[i]) % mod\n        b[i] = 1\n    \n    # Calculate the number of distinct renumerations\n    result = count % mod\n    \n    return str(result)"
    },
    {
        "number": 4151,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def count_renumerations(a: list, n: int) -> int:\n        b = [0] * n\n        renumerations = 1\n        for i in range(n):\n            count = 0\n            for j in range(n):\n                if a[i] == a[j]:\n                    count += 1\n            if count == 1:\n                b[i] = 0\n            else:\n                b[i] = b[i - 1] + 1\n            if b[i] > 0:\n                renumerations *= count\n            renumerations %= 998244353\n        return renumerations\n\n    n = int(stdin.split(\"\\n\")[0])\n    a = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n    result = count_renumerations(a, n)\n    return str(result)\n"
    },
    {
        "number": 4151,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n    mod = 998244353\n\n    # Calculate the number of ways to renumerate a[i:n]\n    def ways(a, i, n):\n        if i == n:\n            return 1\n        count = 1\n        prev = None\n        for j in range(i, n):\n            if a[j] == prev:\n                continue\n            prev = a[j]\n            count *= ways(a, j + 1, n)\n            if count >= mod:\n                count %= mod\n        return count\n\n    # Calculate the number of ways to renumerate the entire array a\n    total = 1\n    prev = None\n    for i in range(n):\n        if a[i] == prev:\n            continue\n        prev = a[i]\n        total *= ways(a, i + 1, n)\n        if total >= mod:\n            total %= mod\n    return total\n"
    },
    {
        "number": 4151,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = [int(x) for x in stdin.split('\\n')[1].split()]\n    \n    mod = 998244353\n    MOD_POW = [1]\n    \n    for _ in range(n):\n        MOD_POW.append((MOD_POW[-1] * 2) % mod)\n    \n    dp = [0] * (n + 1)\n    dp[0] = 1\n    \n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1] * 2 % mod\n        \n    for i in range(n - 1, -1, -1):\n        dp[i] = dp[i] * MOD_POW[a[i]] % mod\n        \n        for j in range(i - 1, -1, -1):\n            if a[j] == a[i]:\n                dp[j] = dp[j] * dp[i] % mod\n            else:\n                dp[j] = dp[j] * (dp[i] + dp[i + 1]) % mod\n                \n    return dp[0]\n"
    },
    {
        "number": 4151,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    b = [0] * n\n    \n    def count_renumerations(i: int) -> int:\n        if i == n:\n            return 1\n        if b[i] == b[i + 1]:\n            return count_renumerations(i + 1)\n        else:\n            b[i + 1] = b[i] + 1\n            return count_renumerations(i + 1)\n    \n    return count_renumerations(0) % 998244353\n\ninput_string = '''5\n1 2 1 2 3'''\n\nprint(solution(input_string)) # Output: 2 "
    },
    {
        "number": 4151,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    b = [0] * n\n\n    # Calculate the number of ways to renumerate\n    def count_renumerations(i: int) -> int:\n        if i == 0:\n            return 1\n        if b[i - 1] == b[i]:\n            return count_renumerations(i - 1)\n        if i == 1 or b[i - 1] + 1 == b[i]:\n            return count_renumerations(i - 1) * 2\n        return count_renumerations(i - 1) * 3\n\n    # Calculate the renumeration\n    def renumerate(i: int) -> None:\n        if i == 0:\n            return\n        if b[i - 1] == b[i]:\n            renumerate(i - 1)\n        else:\n            b[i] = b[i - 1] + 1\n            renumerate(i - 1)\n            b[i] = b[i - 1] + 2\n            renumerate(i - 1)\n            b[i] = b[i - 1] + 3\n            renumerate(i - 1)\n\n    # Calculate the number of different renumerations\n    renumerate(n - 1)\n    renumerations = set(b)\n    result = len(renumerations) % 998244353\n\n    return str(result)"
    },
    {
        "number": 4151,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0].strip())\n    a = list(map(int, stdin[1].strip().split()))\n    \n    mod = 998244353\n    dp = [1] * n\n    for i in range(1, n):\n        if a[i] == a[i-1]:\n            dp[i] = dp[i-1]\n        else:\n            dp[i] = (dp[i-1] + dp[i-1]) % mod\n    \n    result = dp[n-1]\n    for i in range(n-1):\n        if a[i] != a[i+1]:\n            result = (result * 2) % mod\n    \n    return str(result)\n\n\nn = 5\na = [1, 2, 1, 2, 3]\nn = 2\na = [100, 1]\nn = 4\na = [1, 3, 3, 7]\n\nstdin = [str(n), ' '.join(str(x) for x in a)]\nprint(solution(stdin)) # Output: 2 "
    },
    {
        "number": 4152,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n = int(input_list[0])\n    sequence = list(map(int, input_list[1].split()))\n\n    def is_power_of_two(num):\n        return (num & (num - 1)) == 0\n\n    def check_sequence(sequence):\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    if is_power_of_two(sequence[i] + sequence[j]):\n                        return True\n        return False\n\n    min_elements_to_remove = n\n    while not check_sequence(sequence[:min_elements_to_remove]):\n        min_elements_to_remove -= 1\n\n    return str(min_elements_to_remove)"
    },
    {
        "number": 4152,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    n = int(input_list[0])\n    sequence = list(map(int, input_list[1].split()))\n\n    def is_power_of_two(num):\n        return num != 0 and ((num & (num - 1)) == 0)\n\n    def check_good(sequence):\n        for i in range(len(sequence)):\n            for j in range(len(sequence)):\n                if i != j and is_power_of_two(sequence[i] + sequence[j]):\n                    break\n            else:\n                return False\n        return True\n\n    if check_good(sequence):\n        print(0)\n    else:\n        count = 0\n        while not check_good(sequence):\n            sequence.pop()\n            count += 1\n        print(count)\n"
    },
    {
        "number": 4152,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n = int(input_list[0])\n    sequence = list(map(int, input_list[1].split()))\n\n    def is_power_of_two(num: int) -> bool:\n        return (num & (num - 1)) == 0\n\n    def is_good(sequence: list) -> bool:\n        for i in range(len(sequence)):\n            for j in range(len(sequence)):\n                if i != j and is_power_of_two(sequence[i] + sequence[j]):\n                    break\n            else:\n                return False\n        return True\n\n    def min_elements_to_remove(sequence: list) -> int:\n        count = 0\n        for element in sequence:\n            if not is_power_of_two(element):\n                count += 1\n        return count\n\n    if n == 0:\n        return \"0\"\n    elif is_good(sequence):\n        return \"0\"\n    else:\n        return str(min_elements_to_remove(sequence))\n"
    },
    {
        "number": 4152,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    n = int(input_list[0])\n    a = list(map(int, input_list[1].split()))\n\n    def is_power_of_two(num):\n        return num != 0 and ((num & (num - 1)) == 0)\n\n    def check_good_sequence(sequence):\n        for i in range(len(sequence)):\n            for j in range(len(sequence)):\n                if i != j and is_power_of_two(sequence[i] + sequence[j]):\n                    break\n            else:\n                continue\n            break\n        else:\n            return True\n        return False\n\n    min_elements_to_remove = n\n    for i in range(1, n + 1):\n        if check_good_sequence(a[:i]):\n            min_elements_to_remove = n - i\n            break\n\n    return str(min_elements_to_remove)\n"
    },
    {
        "number": 4152,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def is_power_of_two(num: int) -> bool:\n        return num != 0 and (num & (num - 1)) == 0\n\n    n = int(stdin.split(\"\\n\")[0])\n    sequence = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    count = 0\n    for i in range(n):\n        found = False\n        for j in range(n):\n            if i != j and is_power_of_two(sequence[i] + sequence[j]):\n                found = True\n                break\n        if not found:\n            count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4152,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_power_of_two(num: int) -> bool:\n        return num > 0 and (num & (num - 1)) == 0\n\n    def is_good(sequence: list) -> bool:\n        for i in range(len(sequence)):\n            for j in range(len(sequence)):\n                if i != j and is_power_of_two(sequence[i] + sequence[j]):\n                    break\n            else:\n                return False\n        return True\n\n    n = int(stdin.splitlines()[0])\n    sequence = list(map(int, stdin.splitlines()[1].split()))\n\n    if n == 0:\n        print(0)\n    else:\n        count = 0\n        while not is_good(sequence):\n            sequence.pop()\n            count += 1\n\n        print(count)\n"
    },
    {
        "number": 4152,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_data = list(map(int, stdin.split()))\n    n = input_data[0]\n    a = input_data[1:]\n\n    if n == 0:\n        return 0\n\n    power_of_two = [2**i for i in range(1, 17)]\n    good_sequence = [True] * n\n\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                if a[i] + a[j] in power_of_two:\n                    good_sequence[i] = False\n                    break\n\n    count = sum(good_sequence)\n\n    return count if count >= n else n - count\n\n\ndef"
    },
    {
        "number": 4152,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    sequence = list(map(int, stdin.splitlines()[1].split()))\n\n    def is_good(sequence):\n        for i in range(len(sequence)):\n            for j in range(len(sequence)):\n                if i != j and sequence[i] + sequence[j] == 2 ** d:\n                    return True\n        return False\n\n    def find_min_deletions(sequence):\n        deletions = 0\n        for i in range(len(sequence) - 1, -1, -1):\n            if is_good(sequence[:i] + sequence[i + 1:]):\n                return deletions\n            else:\n                deletions += 1\n        return deletions\n\n    return str(find_min_deletions(sequence))\n"
    },
    {
        "number": 4152,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    sequence = list(map(int, stdin.splitlines()[1].split()))\n\n    def is_good(sequence):\n        for i in range(len(sequence)):\n            for j in range(len(sequence)):\n                if i != j and 2 ** len(bin(sequence[i] + sequence[j])) - 2 == sequence[i] + sequence[j]:\n                    return True\n        return False\n\n    if n == 0:\n        return 0\n\n    min_elements_to_remove = 0\n    while not is_good(sequence):\n        min_elements_to_remove += 1\n        sequence.pop()\n\n    return min_elements_to_remove\n"
    },
    {
        "number": 4152,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    n = int(input_list[0])\n    sequence = [int(x) for x in input_list[1].split()]\n\n    if n == 0:\n        return 0\n\n    def is_power_of_two(x):\n        return x != 0 and (x & (x - 1)) == 0\n\n    def binary_search(target, lst):\n        left, right = 0, len(lst) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if lst[mid] == target:\n                return True\n            elif lst[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False\n\n    def count_good_elements(sequence):\n        count = 0\n        for i in range(len(sequence)):\n            for j in range(len(sequence)):\n                if i != j and is_power_of_two(sequence[i] + sequence[j]):\n                    count += 1\n                    break\n        return count\n\n    good_sequence = []\n    for i in range(len(sequence)):\n        if count_good_elements(good_sequence + [sequence[i]]) == len(good_sequence) + 1:\n            good_sequence.append(sequence[i])\n\n    return max(0, n - len(good_sequence))"
    },
    {
        "number": 4153,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = len(stdin)\n    stack = []\n    for i in range(N):\n        if stdin[i] == '0':\n            stack.append((i, 'red'))\n        elif stdin[i] == '1':\n            stack.append((i, 'blue'))\n\n    removed_count = 0\n    while len(stack) > 1:\n        first_cube = stack.pop(0)\n        second_cube = stack.pop(0)\n        if first_cube[1] != second_cube[1]:\n            removed_count += 1\n\n    return removed_count\n"
    },
    {
        "number": 4153,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = len(stdin)\n    count = 0\n    i = 0\n    while i < N - 1:\n        if stdin[i] == '0' and stdin[i+1] == '1':\n            count += 1\n            i += 2\n        elif stdin[i] == '1' and stdin[i+1] == '0':\n            count += 1\n            i += 2\n        else:\n            i += 1\n    return str(count)\n"
    },
    {
        "number": 4153,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = stdin.strip()\n\n    # Initialize the number of red cubes and blue cubes as 0\n    red_cubes = 0\n    blue_cubes = 0\n\n    # Count the number of red and blue cubes\n    for i in range(N):\n        if S[i] == '0':\n            red_cubes += 1\n        else:\n            blue_cubes += 1\n\n    # Find the maximum number of cubes that can be removed\n    max_cubes = min(red_cubes, blue_cubes)\n\n    # Check for adjacent red and blue cubes\n    for i in range(1, N):\n        if S[i - 1] == '0' and S[i] == '1':\n            max_cubes -= 1\n        elif S[i - 1] == '1' and S[i] == '0':\n            max_cubes -= 1\n\n    return str(max_cubes)"
    },
    {
        "number": 4153,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(input())\n    S = input()\n    red_cubes = [i for i in range(N) if S[i] == '0']\n    blue_cubes = [i for i in range(N) if S[i] == '1']\n    max_removals = 0\n\n    for red_cube in red_cubes:\n        for blue_cube in blue_cubes:\n            if abs(red_cube - blue_cube) == 1:\n                max_removals += 1\n\n    return max_removals\n"
    },
    {
        "number": 4153,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(input())\n    S = input()\n    max_removable = 0\n\n    for i in range(N - 1):\n        if S[i] == '0' and S[i + 1] == '1':\n            max_removable += 1\n\n    return max_removable\n"
    },
    {
        "number": 4153,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = len(stdin)\n    red_cubes = []\n    blue_cubes = []\n\n    for i, char in enumerate(stdin):\n        if char == '0':\n            red_cubes.append(i)\n        elif char == '1':\n            blue_cubes.append(i)\n\n    # Sort the red and blue cubes in ascending order\n    red_cubes.sort()\n    blue_cubes.sort()\n\n    max_cubes = 0\n    i, j = 0, 0\n\n    while i < len(red_cubes) and j < len(blue_cubes):\n        if red_cubes[i] + 1 == blue_cubes[j]:\n            max_cubes += 1\n            i += 1\n            j += 1\n        elif red_cubes[i] < blue_cubes[j]:\n            i += 1\n        else:\n            j += 1\n\n    return str(max_cubes)\n"
    },
    {
        "number": 4153,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = list(stdin)\n    count = 0\n\n    for i in range(N - 1):\n        if S[i] == '1' and S[i + 1] == '0':\n            count += 1\n\n    return count\n\nN = int(input())\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4153,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = stdin[1:]\n    count = 0\n    for i in range(N):\n        if S[i] == '1' and i > 0 and S[i-1] == '0':\n            count += 1\n        elif S[i] == '0' and i < N-1 and S[i+1] == '1':\n            count += 1\n    return count"
    },
    {
        "number": 4153,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = len(stdin)\n    count = 0\n    for i in range(N-1):\n        if stdin[i] == '0' and stdin[i+1] == '1':\n            count += 1\n    return count"
    },
    {
        "number": 4153,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = len(stdin)\n    red_count = 0\n    blue_count = 0\n    for char in stdin:\n        if char == '0':\n            red_count += 1\n        elif char == '1':\n            blue_count += 1\n\n    if red_count == 0:\n        return blue_count * 2\n    elif blue_count == 0:\n        return red_count * 2\n    else:\n        return min(red_count, blue_count) * 2\n"
    },
    {
        "number": 4154,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, input().split())\n    LR = [list(map(int, input().split())) for _ in range(M)]\n\n    count = 0\n    for i in range(M):\n        L, R = LR[i]\n        if L <= N and R <= N:\n            count += 1\n\n    return count\n"
    },
    {
        "number": 4154,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    LR_list = [list(map(int, input().split())) for _ in range(M)]\n\n    def check_gates(id_cards: set) -> bool:\n        for L, R in LR_list:\n            if L not in id_cards and R not in id_cards:\n                return False\n        return True\n\n    id_cards = set(range(1, N + 1))\n    passes_all = check_gates(id_cards)\n\n    while not passes_all:\n        removed_card = min(id_cards)\n        id_cards.remove(removed_card)\n        passes_all = check_gates(id_cards)\n\n    return len(id_cards)"
    },
    {
        "number": 4154,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(i: int) -> bool:\n        return i >= 1 and i <= N\n\n    def is_valid_range(left: int, right: int) -> bool:\n        return left <= right and left <= N and right >= 1\n\n    N, M = map(int, stdin.split()[:2])\n    lefts = list(map(int, stdin.split()[2::2]))\n    rights = list(map(int, stdin.split()[3::2]))\n\n    valid_id_cards = 0\n    for i in range(1, M + 1):\n        if is_valid_range(lefts[i - 1], rights[i - 1]):\n            valid_id_cards += 1\n\n    return valid_id_cards\n"
    },
    {
        "number": 4154,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    LR = [list(map(int, line.split())) for line in stdin.split()[2:]]\n    L = [L for L, R in LR]\n    R = [R for L, R in LR]\n\n    def pass_gate(id_card: int) -> bool:\n        return any(L[i] <= id_card <= R[i] for i in range(M))\n\n    valid_cards = sum(pass_gate(i) for i in range(1, N + 1))\n    return valid_cards\n"
    },
    {
        "number": 4154,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    LR = [list(map(int, input().split())) for _ in range(M)]\n    count = 0\n\n    for i in range(N):\n        valid = True\n        for j in range(M):\n            if not (L[j] <= i <= R[j]):\n                valid = False\n                break\n        if valid:\n            count += 1\n\n    return count\n"
    },
    {
        "number": 4154,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    LR = [list(map(int, stdin.split())) for _ in range(M)]\n\n    count = 0\n    for i in range(M):\n        if i == 0:\n            continue\n        for j in range(N):\n            passed = True\n            for k in range(i):\n                if LR[k][1] <= j <= LR[k][0]:\n                    passed = False\n                    break\n            if passed:\n                count += 1\n\n    return count\n"
    },
    {
        "number": 4154,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, input().split())\n    LR = [list(map(int, input().split())) for _ in range(M)]\n\n    def is_valid(card: int, gate: int) -> bool:\n        for i in range(gate):\n            if card >= LR[i][0] and card <= LR[i][1]:\n                return False\n        return True\n\n    count = 0\n    for i in range(1, N + 1):\n        if all(is_valid(i, j) for j in range(M)):\n            count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4154,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, input().split())\n    L_R = [tuple(map(int, input().split())) for _ in range(M)]\n\n    count = 0\n    for i in range(M):\n        L_i, R_i = L_R[i]\n        if L_i == 1:\n            count += 1\n        elif R_i == N:\n            count += 1\n        else:\n            count += 2\n\n    return count\n"
    },
    {
        "number": 4154,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, input().split())\n    L_R = [list(map(int, input().split())) for _ in range(M)]\n    \n    def can_pass_gate(i: int, cards: set) -> bool:\n        return L_R[i-1][1] in cards or R_L[i-1][0] in cards\n    \n    total_cards = 0\n    for i in range(1, N+1):\n        L_i, R_i = i, i\n        cards_for_gate = set()\n        while L_i > 0 and R_i <= N:\n            for L_j, R_j in L_R:\n                if L_i <= L_j <= R_i and L_j not in cards_for_gate:\n                    cards_for_gate.add(L_j)\n                if L_i <= R_j <= R_i and R_j not in cards_for_gate:\n                    cards_for_gate.add(R_j)\n            if can_pass_gate(i, cards_for_gate):\n                total_cards += 1\n                break\n            L_i -= 1\n            R_i += 1\n    \n    return total_cards\n\n\ndef"
    },
    {
        "number": 4154,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    N, M = map(int, input_list.pop(0).split())\n    L_and_R = [list(map(int, input_list.pop(0).split())) for _ in range(M)]\n    result = 0\n    \n    for i in range(M):\n        for j in range(N):\n            if j >= L_and_R[i][0] and j <= L_and_R[i][1]:\n                result += 1\n                break\n    \n    return str(result)"
    },
    {
        "number": 4155,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.splitlines()[0])\n    heights = list(map(int, stdin.splitlines()[1].split()))\n    left = 1\n    right = N\n    count = 0\n\n    while left <= right:\n        mid = (left + right) // 2\n        max_height = max(heights[:mid])\n\n        if max_height >= heights[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n            count += 1\n\n    return count"
    },
    {
        "number": 4155,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    heights = list(map(int, stdin.split('\\n')[1].split()))\n\n    # Sort the heights to get the maximum height\n    heights.sort()\n\n    # Initialize the result to 0\n    result = 0\n\n    # Iterate through the heights and calculate the sum of the heights\n    # below the current height\n    for i in range(N):\n        for j in range(N):\n            if heights[i] < heights[j]:\n                result += j - i\n\n    return result // 2\n"
    },
    {
        "number": 4155,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, h = map(int, stdin.split())\n    h = list(h)\n    dp = [0] * (N + 1)\n    watering_count = 0\n\n    for k in range(1, N + 1):\n        dp[k] = dp[k - 1] + h[k - 1]\n\n    for l in range(1, N + 1):\n        r = l\n        while r <= N:\n            watering_count += (dp[r] - dp[l - 1])\n            r += 1\n\n    return watering_count\n"
    },
    {
        "number": 4155,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    h = [int(x) for x in stdin[1].split()]\n    dp = [0] * (N + 1)\n    for i in range(1, N + 1):\n        dp[i] = dp[i - 1] + 1\n        if i > 1:\n            dp[i] = min(dp[i], dp[i - 1] + h[i - 1])\n    return dp[N]\n"
    },
    {
        "number": 4155,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def min_watering_operations(heights):\n        heights.sort()\n        count = 0\n        l = 0\n        for r in range(len(heights)):\n            while l < r and heights[l] + 1 <= heights[r]:\n                l += 1\n            if l < r:\n                count += 1\n        return count\n\n    N = int(stdin.split(\"\\n\")[0])\n    heights = list(map(int, stdin.split(\"\\n\")[1].split()))\n    return min_watering_operations(heights)\n"
    },
    {
        "number": 4155,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.splitlines()[0])\n    h = list(map(int, stdin.splitlines()[1].split()))\n    dp = [0] * N\n    dp[0] = h[0]\n    min_ops = 1\n\n    for i in range(1, N):\n        dp[i] = h[i] + dp[i - 1]\n        min_ops = min(min_ops, dp[i] - dp[i - 1])\n\n    for i in range(1, N):\n        if dp[i - 1] == dp[i]:\n            continue\n        min_ops += 1\n\n    return str(min_ops)\n\n\ndef"
    },
    {
        "number": 4155,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.split('\\n')[0])\n    h = [int(x) for x in stdin.split('\\n')[1].split()]\n\n    # Initialize heights and minimum watering operations\n    heights = [0] * N\n    min_ops = 1000000000\n\n    # Iterate through heights and find the minimum watering operations\n    for i in range(N):\n        heights[i] = h[i]\n        for j in range(N):\n            if heights[i] < heights[j]:\n                min_ops = min(min_ops, abs(i - j))\n\n    return min_ops\n"
    },
    {
        "number": 4155,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.splitlines()[0])\n    h = [int(x) for x in stdin.splitlines()[1].split()]\n    min_ops = 0\n\n    # Sort h\n    h.sort()\n\n    # Find minimum number of operations\n    for i in range(1, N):\n        if h[i] - h[i-1] > 1:\n            j = i - 1\n            while h[j] - h[j-1] <= 1:\n                j -= 1\n            min_ops += 1\n            h[j+1:] = [x+1 for x in h[j+1:]]\n            break\n\n    return min_ops"
    },
    {
        "number": 4155,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    h = list(map(int, stdin.split(\"\\n\")[1].split()))\n    count = 0\n    max_height = 0\n\n    for i in range(N):\n        if h[i] > max_height:\n            max_height = h[i]\n\n    for i in range(N):\n        if h[i] == max_height:\n            count += 1\n\n    if count == 1:\n        return \"1\"\n    elif count == 2:\n        return \"2\"\n    else:\n        return \"3\"\n"
    },
    {
        "number": 4155,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    heights = list(map(int, stdin.split()[1:]))\n\n    def count_neighbors(x):\n        return sum(1 for i in range(1, x) if heights[i] > heights[x])\n\n    def count_increments(l, r):\n        return sum(1 for x in range(l, r + 1) if heights[x] > 0 and count_neighbors(x) >= x)\n\n    total_increments = 0\n    for i in range(N):\n        total_increments += count_increments(1, i)\n\n    return total_increments // 2\n\n\nstdin = \"4\\n1 2 2 1\"\nprint(solution(stdin)) "
    },
    {
        "number": 4156,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    def count_ways(i: int) -> int:\n        if i == 0:\n            return 1\n        if a[i] < 0:\n            return 0\n        if a[i] > w:\n            return count_ways(i - 1)\n        return count_ways(i - 1) + count_ways(i - 1) - count_ways(i - a[i])\n\n    if a[0] < -w:\n        return \"0\"\n    return str(count_ways(n - 1))\n"
    },
    {
        "number": 4156,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def count_ways(w: int, n: int, a: List[int]) -> int:\n        if a[0] < -w:\n            return 0\n        if a[0] <= w:\n            return 1\n        ways = 0\n        for i in range(1, n):\n            if a[i] < a[i - 1] - w:\n                ways = 0\n            elif a[i] <= a[i - 1]:\n                ways += 1\n            else:\n                ways += 1\n                break\n        return ways + 1\n\n    n, w = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    return count_ways(w, n, a)\n"
    },
    {
        "number": 4156,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    \n    count = 0\n    for i in range(w+1):\n        left = a[0] + i\n        if left < 0:\n            left = 0\n        right = a[0] + i\n        if right < 0:\n            right = 0\n        count += binomial(left+right, left)\n    \n    return str(count)\n\ndef"
    },
    {
        "number": 4156,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.splitlines()[0].split())\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    # Initialize the count for each number of passengers\n    count = [0] * (w + 1)\n    count[0] = 1\n\n    # Iterate through the recorded changes and update the count\n    for i in range(1, n):\n        count[a[i] - a[i - 1]] += 1\n\n    # Check for contradictory situations\n    contradictory = False\n    for i in range(1, n):\n        if a[i] - a[i - 1] != w:\n            contradictory = True\n            break\n\n    # If the situation is contradictory, print 0, otherwise print the sum of the counts\n    if contradictory:\n        return '0'\n    else:\n        return str(sum(count))\n"
    },
    {
        "number": 4156,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    \n    # Count the number of possible initial numbers of passengers\n    count = 0\n    for x in range(w+1):\n        # Check if the bus can be filled with x passengers\n        if x <= a[0]:\n            # Check if the bus can be filled with w passengers after the first stop\n            if w >= a[0] - x:\n                # Check if the bus can be filled with w passengers after each stop\n                ok = True\n                for i in range(1, n):\n                    if a[i] - a[i-1] > w:\n                        ok = False\n                        break\n                if ok:\n                    count += 1\n    \n    # If the count is 0, then there is a contradiction\n    if count == 0:\n        return \"0\"\n    else:\n        return str(count)\n"
    },
    {
        "number": 4156,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    if a[0] < 0:\n        return 0\n\n    if a[-1] != -1:\n        return 0\n\n    if w == 0:\n        return 0\n\n    if w == 1:\n        return 1\n\n    dp = [0] * (w + 1)\n    dp[0] = 1\n\n    for i in range(1, n):\n        if a[i] < 0:\n            return 0\n\n        for j in range(w, a[i] - 1, -1):\n            dp[j] += dp[j - a[i]]\n\n        if dp[w] == 0:\n            return 0\n\n    return dp[w]\n\n\nn, w = map(int, input().split())\na = list(map(int, input().split()))\n\na.append(-1)\n\nresult = solution(a)\nprint(result)<|im_sep|> "
    },
    {
        "number": 4156,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, input().split())\n    a = list(map(int, input().split()))\n    \n    def count(i: int) -> int:\n        return (i + w) // w\n    \n    def dfs(i: int, cnt: int) -> int:\n        if i == n:\n            return 1 if cnt == count(0) else 0\n        total = 0\n        for j in range(a[i] + 1, w + 1):\n            total += dfs(i + 1, cnt + count(j))\n        return total\n    \n    return dfs(0, 0)\n\n\ninput_data = \"\"\"3 5\n2 1 -3\n\n2 4\n-1 1\n\n4 10\n2 4 1 2\"\"\"\n\noutput_data = \"\"\"3\n4\n2\"\"\"\n\nprint(solution(input_data)) "
    },
    {
        "number": 4156,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    def count_ways(bus_stop: int, current_passengers: int) -> int:\n        if bus_stop == 1:\n            return 1 if current_passengers <= w else 0\n        if current_passengers > w:\n            return 0\n        if current_passengers == w:\n            return count_ways(bus_stop - 1, current_passengers + a[bus_stop - 2])\n        return count_ways(bus_stop - 1, current_passengers) + count_ways(bus_stop - 1, current_passengers + a[bus_stop - 2])\n\n    return count_ways(n, 0)\n"
    },
    {
        "number": 4156,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def count_ways(n: int, w: int, a: List[int]) -> int:\n        dp = [[0] * (w + 1) for _ in range(n + 1)]\n        dp[0][0] = 1\n\n        for i in range(1, n + 1):\n            for j in range(w + 1):\n                dp[i][j] = dp[i - 1][j]\n                if a[i - 1] <= w:\n                    dp[i][j] += dp[i - 1][j - a[i - 1]]\n\n        return dp[n][w]\n\n    n, w = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    if a[0] == -1:\n        return 0\n    elif a[0] <= w:\n        return count_ways(n, w, a)\n    else:\n        return count_ways(n - 1, w, a[1:])\n"
    },
    {
        "number": 4156,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def count_possibilities(n, w, a, x):\n        if x < 0:\n            return 0\n        if x == w:\n            return 1\n        if x > w:\n            return 0\n        if n == 1:\n            return 1 if x <= w else 0\n\n        possibilities = 0\n        for i in range(len(a)):\n            if a[i] + x > w:\n                return 0\n            if a[i] + x == w:\n                possibilities += 1\n            elif a[i] + x < w:\n                possibilities += count_possibilities(n - i - 1, w, a[i + 1:], a[i] + x)\n        return possibilities\n\n    n, w = map(int, input().split())\n    a = list(map(int, input().split()))\n    x = a[0]\n    result = count_possibilities(n, w, a, x)\n    return result if result > 0 else 0\n"
    },
    {
        "number": 4157,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    given_sequence = list(map(int, stdin.splitlines()[1].split()))\n\n    def get_number(sequence):\n        x = sequence[-1]\n        for i in range(len(sequence) - 2, -1, -1):\n            if sequence[i] * 2 == x or sequence[i] // 3 == x:\n                return sequence[i]\n        return None\n\n    def apply_operations(sequence):\n        new_sequence = []\n        for i in range(n - 1):\n            x = sequence[-1]\n            if x % 3 == 0:\n                x //= 3\n            else:\n                x *= 2\n            new_sequence.append(x)\n        return new_sequence\n\n    while True:\n        sequence = given_sequence.copy()\n        number = get_number(sequence)\n        if number is None:\n            break\n        sequence.append(number)\n        sequence = apply_operations(sequence)\n\n    return \" \".join(map(str, sequence))\n\n\ninput_data = \"\"\"6\n4 8 6 3 12 9\n\"\"\"\n\nprint(solution(input_data))\n\ninput_data = \"\"\"4\n42 28 84 126\n\"\"\"\n\nprint(solution(input_data))\n\ninput_data = \"\"\"2\n1000000000000000000 3000000000000000000\n\"\"\"\n\nprint(solution(input_data)) "
    },
    {
        "number": 4157,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    input_sequence = list(map(int, stdin.splitlines()[1].split()))\n    # Initialize the board with the first element of the input sequence\n    board = [input_sequence[0]]\n    \n    # Perform the operations and update the board\n    for i in range(1, n):\n        if board[i-1] % 3 == 0:\n            board.append(board[i-1] // 3)\n        else:\n            board.append(board[i-1] * 2)\n    \n    # Reorder the input sequence according to the board\n    reordered_sequence = [0] * n\n    reordered_sequence[0] = input_sequence[0]\n    for i in range(1, n):\n        for j in range(len(board)):\n            if board[j] == input_sequence[i]:\n                reordered_sequence[i] = input_sequence[i]\n                board.pop(j)\n                break\n                \n    return ' '.join(map(str, reordered_sequence))\n"
    },
    {
        "number": 4157,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    # Find the last number on the board\n    x = a[-1]\n\n    # Reconstruct the sequence\n    sequence = [x]\n    for i in range(n-2, -1, -1):\n        if a[i] % 3 == 0:\n            sequence.append(a[i] // 3)\n        else:\n            sequence.append(2 * a[i])\n\n    # Check if the sequence matches the input\n    if sequence == a:\n        return '\\n'.join(map(str, a))\n\n    # Find the correct position of each element\n    positions = [0] * n\n    for i in range(n):\n        positions[a[i]] = i\n\n    # Reorder the elements\n    reordered = [0] * n\n    for i in range(n):\n        reordered[positions[sequence[i]]] = a[i]\n\n    return '\\n'.join(map(str, reordered))"
    },
    {
        "number": 4157,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    sequence = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    def multiply(x):\n        return 2 * x\n\n    def divide(x):\n        return x // 3\n\n    def move_pointer(x):\n        if x % 2 == 0:\n            return divide(x)\n        else:\n            return multiply(x)\n\n    def find_previous_move(x, moves):\n        for move in moves[::-1]:\n            if move(x) > 0:\n                return move\n\n    def find_next_move(x, moves):\n        for move in moves:\n            if move(x) > 0:\n                return move\n\n    moves = [multiply, divide]\n\n    def find_path(x, sequence, index, moves):\n        if index >= n:\n            return True\n\n        prev_x = sequence[index]\n        next_x = move_pointer(prev_x)\n\n        if next_x < prev_x:\n            return False\n\n        if next_x not in sequence[index + 1:]:\n            return False\n\n        for i, num in enumerate(sequence[index + 1:], start=index + 1):\n            if num == next_x:\n                sequence[index], sequence[i] = sequence[i], sequence[index]\n                if find_path(x, sequence, index + 1, moves):\n                    return True\n                sequence[index], sequence[i] = sequence[i], sequence[index]\n\n        return False\n\n    for x in sequence:\n        if find_path(x, sequence, 0, moves):\n            break\n\n    return \" \".join(map(str, sequence))\n"
    },
    {
        "number": 4157,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    seq = list(map(int, stdin.split('\\n')[1].split()))\n\n    def can_be_rearranged(seq):\n        if len(seq) < 2:\n            return True\n\n        prev_num = seq[0]\n        for num in seq[1:]:\n            if num == prev_num * 2:\n                prev_num = num\n            elif num == prev_num // 3:\n                prev_num = num\n            else:\n                return False\n\n        return True\n\n    def rearrange(seq):\n        result = []\n        x = seq[0]\n        for num in seq[1:]:\n            if num == x * 2:\n                result.append(x * 2)\n                x = num\n            elif num == x // 3:\n                result.append(x)\n                x = num\n\n        return result\n\n    if can_be_rearranged(seq):\n        return ' '.join(map(str, rearrange(seq)))\n    else:\n        return \"No solution exists.\"\n"
    },
    {
        "number": 4157,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    reordered_sequence = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    def polycarp_game(x: int, n: int) -> int:\n        for i in range(n - 1):\n            if x % 3 == 0:\n                x //= 3\n            else:\n                x *= 2\n        return x\n\n    for i in range(n):\n        current_num = polycarp_game(reordered_sequence[i], n - i)\n        for j in range(i, n):\n            if current_num == polycarp_game(reordered_sequence[j], n - j):\n                reordered_sequence[i], reordered_sequence[j] = reordered_sequence[j], reordered_sequence[i]\n                break\n\n    return \" \".join(map(str, reordered_sequence))\n\n\ninput_cases = [\n    \"6\\n4 8 6 3 12 9\",\n    \"4\\n42 28 84 126\",\n    \"2\\n100000000000000000 300000000000000000\",\n]\n\nfor input_case in input_cases:\n    print(solution(input_case))"
    },
    {
        "number": 4157,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    sequence = list(map(int, input().split()))\n    x = sequence[0]\n    for i in range(1, n):\n        if i % 2 == 0:\n            x = x * 2\n        else:\n            x = x // 3\n        if x not in sequence:\n            return \"Error\"\n    return \" \".join(map(str, sequence))\n"
    },
    {
        "number": 4157,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    sequence = [int(x) for x in stdin.splitlines()[1].split()]\n\n    # Iterate through the sequence and reorder it based on Polycarp's game rules\n    result = []\n    x = sequence[0]\n    result.append(x)\n    for i in range(1, n):\n        # If the next number can be obtained by multiplying the current number by 2, multiply it\n        if sequence[i] == 2 * x:\n            result.append(sequence[i])\n            x = sequence[i]\n        # If the next number can be obtained by dividing the current number by 3, divide it\n        elif sequence[i] == x // 3:\n            result.append(sequence[i])\n            x = sequence[i]\n        else:\n            # If the next number cannot be obtained by applying Polycarp's game rules,\n            # it is not possible to reorder the sequence to match Polycarp's game\n            return \"No solution\"\n\n    return \" \".join(str(x) for x in result)"
    },
    {
        "number": 4157,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    def find_prev(i: int) -> int:\n        if i == 0:\n            return 0\n        if a[i] % 2 == 0:\n            return find_prev(i - 1)\n        if a[i] % 3 == 0:\n            return find_prev(i - 1)\n        if a[i - 1] % 2 == 0 and a[i] % 3 == 0:\n            return find_prev(i - 1)\n        return i - 1\n    \n    result = []\n    i = n - 1\n    while i >= 0:\n        prev_index = find_prev(i)\n        result.append(a[prev_index])\n        i = prev_index\n    \n    return \" \".join(map(str, result[::-1]))\n"
    },
    {
        "number": 4157,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    def find_previous(x: int) -> int:\n        if x % 2 == 1:\n            return x - 1\n        else:\n            return x // 2\n\n    def is_valid(i: int, x: int, a: list) -> bool:\n        if i == 0:\n            return True\n        return x // 2 == a[i - 1] or x == a[i - 1] * 2\n\n    def backtrack(i: int, x: int, a: list) -> bool:\n        if i == n:\n            return True\n        for j in range(2 * max(x - 1, 1), x + 1):\n            if is_valid(i, j, a):\n                a[i] = j\n                if backtrack(i + 1, j, a):\n                    return True\n        a[i] = 0\n        return False\n\n    def solve(a: list) -> list:\n        if not backtrack(0, a[0], a):\n            return []\n        return a\n\n    result = solve(a)\n    if not result:\n        return \"No solution\"\n    return \" \".join(map(str, result))\n\n\ninput_data = \"\"\"6\n4 8 6 3 12 9\n42 28 84 126\"\"\"\n\nprint(solution(input_data)) "
    },
    {
        "number": 4158,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.splitlines()\n    n = int(input_lines[0])\n    x = list(map(int, input_lines[1].split()))\n\n    max_size = 0\n    for subset in itertools.combinations(range(n), max_size + 1):\n        for i, j in itertools.combinations(subset, 2):\n            if abs(x[i] - x[j]) != 2 ** d:\n                break\n        else:\n            max_size = len(subset)\n\n    output = f\"{max_size}\\n\" + \" \".join(map(str, [x[i] for i in range(n) if i in range(n)[:max_size]]))\n    return output\n\n\nstdin = \"\"\"6\n3 5 4 7 10 12\n\"\"\"\nprint(solution(stdin))\n\nstdin = \"\"\"5\n-1 2 5 8 11\n\"\"\"\nprint(solution(stdin))\n\nstdin = \"\"\"10\n7 3 5 6 8 9 10 11 12 13\n\"\"\"\nprint(solution(stdin))\n\nstdin = \"\"\"10\n1 2 3 4 5 6 7 8 9 10\n\"\"\"\nprint(solution(stdin))\n\nstdin = \"\"\"3\n7 3 5\n\"\"\"\nprint(solution(stdin))\n\nstdin = \"\"\"2\n0 1\n\"\"\"\nprint(solution(stdin)) "
    },
    {
        "number": 4158,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    points = list(map(int, stdin.splitlines()[1].split()))\n\n    def is_power_of_two(diff: int) -> bool:\n        return diff & (diff - 1) == 0\n\n    max_size = 0\n    max_subset = []\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            diff = abs(points[i] - points[j])\n            if is_power_of_two(diff):\n                subset = [points[i], points[j]]\n                subset_size = 2\n\n                k = j + 1\n                while k < n:\n                    diff = abs(points[i] - points[k])\n                    if is_power_of_two(diff) and all(abs(points[p] - points[k]) % diff == 0 for p in subset):\n                        subset.append(points[k])\n                        subset_size += 1\n                    k += 1\n\n                if subset_size > max_size:\n                    max_size = subset_size\n                    max_subset = subset\n\n    result = [str(max_size)] + [str(x) for x in max_subset]\n    return '\\n'.join(result)\n\n\ninput_data = \"\"\"6\n3 5 4 7 10 12\n5\n-1 2 5 8 11\n\"\"\"\n\nprint(solution(input_data)) "
    },
    {
        "number": 4158,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    x = list(map(int, stdin.split('\\n')[1].split()))\n\n    max_size = 0\n    max_subset = []\n    for i in range(n):\n        subset_size = 1\n        subset = [x[i]]\n        for j in range(i + 1, n):\n            if abs(x[i] - x[j]) & (abs(x[i] - x[j]) - 1) == 0:\n                subset.append(x[j])\n                subset_size += 1\n        if subset_size > max_size:\n            max_size = subset_size\n            max_subset = subset\n\n    output = '\\n'.join(map(str, max_subset))\n    return f'{max_size}\\n{output}' "
    },
    {
        "number": 4158,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    points = list(map(int, stdin.splitlines()[1].split()))\n    points.sort()\n\n    max_size = 1\n    max_subset = [points[0]]\n\n    for i in range(1, n):\n        dist = 2 ** max_size\n        dist_points = [j for j in range(i - 1, -1, -1) if points[i] - points[j] == dist]\n\n        if len(dist_points) > 0:\n            max_size += 1\n            max_subset.append(points[i])\n        else:\n            for j in range(i - 1, -1, -1):\n                if points[i] - points[j] < dist:\n                    break\n                elif points[i] - points[j] == dist:\n                    max_subset.append(points[i])\n                    break\n\n    max_subset.sort()\n    result = '\\n'.join(map(str, max_subset))\n\n    return f\"{max_size}\\n{result}\" "
    },
    {
        "number": 4158,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def next_power_of_two(n: int) -> int:\n        power_of_two = 1\n        while power_of_two < n:\n            power_of_two *= 2\n        return power_of_two\n\n    def is_valid_subset(subset: list) -> bool:\n        for i in range(len(subset)):\n            for j in range(i + 1, len(subset)):\n                if abs(subset[i] - subset[j]) != next_power_of_two(abs(subset[i] - subset[j])):\n                    return False\n        return True\n\n    def find_max_subset(points: list) -> list:\n        max_size = 0\n        max_subset = []\n        for i in range(len(points)):\n            subset = [points[i]]\n            for j in range(i + 1, len(points)):\n                subset.append(points[j])\n                if is_valid_subset(subset) and len(subset) > max_size:\n                    max_size = len(subset)\n                    max_subset = subset.copy()\n            subset = []\n        return max_subset\n\n    n = int(stdin.splitlines()[0])\n    points = list(map(int, stdin.splitlines()[1].split()))\n\n    max_subset = find_max_subset(points)\n    output = f\"{len(max_subset)}\\n\"\n    output += \"\\n\".join(map(str, max_subset))\n    return output\n"
    },
    {
        "number": 4158,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    points = list(map(int, stdin.splitlines()[1].split()))\n    \n    def is_power_of_two(x: int) -> bool:\n        return x & (x - 1) == 0\n    \n    max_size = 1\n    best_points = [points[0]]\n    \n    for i in range(1, n):\n        for j in range(i):\n            if is_power_of_two(abs(points[i] - points[j])):\n                max_size = max(max_size, i - j + 1)\n                best_points = points[j:i+1]\n                \n    return f\"{max_size}\\n\" + \" \".join(map(str, best_points))\n\n\ninput_data = \"\"\"6\n3 5 4 7 10 12\n5\n-1 2 5 8 11\"\"\"\n\nprint(solution(input_data)) "
    },
    {
        "number": 4158,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    points = list(map(int, stdin.splitlines()[1].split()))\n\n    def distance(p1, p2):\n        return abs(p1 - p2)\n\n    max_size = 1\n    max_points = [points[0]]\n\n    for i in range(1, n):\n        for j in range(i):\n            if distance(points[i], points[j]) & (distance(points[i], points[j]) - 1) == 0:\n                subset_size = max_size + 1\n                subset_points = max_points + [points[i]]\n                if subset_size > max_size:\n                    max_size = subset_size\n                    max_points = subset_points\n\n    return f\"{max_size}\\n{' '.join(map(str, max_points))}\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    x = list(map(int, input().split()))\n\n    max_size = 0\n    max_set = []\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if 2 ** bin(abs(x[i] - x[j])).count(\"1\") - 1 == bin(abs(x[i] - x[j])).count(\"1\"):\n                if max_size < len([x[i], x[j]]):\n                    max_size = len([x[i], x[j]])\n                    max_set = [x[i], x[j]]\n\n    output = f\"{max_size}\\n\" + \" \".join(map(str, max_set))\n    return output "
    },
    {
        "number": 4158,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_power_of_two(n: int) -> bool:\n        return (n & (n - 1) == 0) and n > 0\n\n    input_data = stdin.split(\"\\n\")\n    n = int(input_data[0])\n    points = [int(x) for x in input_data[1].split()]\n\n    max_points = 0\n    max_subset = []\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if is_power_of_two(abs(points[i] - points[j])):\n                subset = [points[i], points[j]]\n                subset_size = 2\n\n                for k in range(j + 1, n):\n                    if is_power_of_two(abs(points[i] - points[k])) and is_power_of_two(abs(points[j] - points[k])):\n                        subset.append(points[k])\n                        subset_size += 1\n\n                if subset_size > max_points:\n                    max_points = subset_size\n                    max_subset = subset\n\n    max_subset_coordinates = [str(x) for x in max_subset]\n    output = f\"{max_points}\\n{' '.join(max_subset_coordinates)}\"\n\n    return output\n"
    },
    {
        "number": 4158,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    n = int(input_data[0])\n    x = list(map(int, input_data[1].split()))\n    \n    max_size = 0\n    max_subset = []\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if x[i] - x[j] == 2**int(round(log2(abs(x[i] - x[j])))):\n                subset = [x[i], x[j]]\n                size = 2\n                for k in range(j+1, n):\n                    for l in range(i+1, k):\n                        if x[k] - x[l] == 2**int(round(log2(abs(x[k] - x[l])))):\n                            subset.append(x[k])\n                            subset.append(x[l])\n                            size += 2\n                if size > max_size:\n                    max_size = size\n                    max_subset = subset\n    \n    return f\"{max_size}\\n{' '.join(map(str, max_subset))}\" "
    },
    {
        "number": 4159,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    takahashi_cookies, aoki_cookies = A, B\n    takahashi_cookies_left = takahashi_cookies\n    aoki_cookies_left = aoki_cookies\n\n    for _ in range(K):\n        if takahashi_cookies_left > 0:\n            takahashi_cookies_left -= 1\n        elif aoki_cookies_left > 0:\n            aoki_cookies_left -= 1\n            takahashi_cookies_left += 1\n        else:\n            break\n\n    return f\"{takahashi_cookies_left} {aoki_cookies_left}\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    takahashi_cookies = A\n    aoki_cookies = B\n\n    for _ in range(K):\n        if takahashi_cookies > 0:\n            takahashi_cookies -= 1\n        elif aoki_cookies > 0:\n            aoki_cookies -= 1\n        else:\n            break\n\n    return f\"{takahashi_cookies} {aoki_cookies}\"\n\n\ninput_str = \"2 3 3\"\nprint(solution(input_str)) "
    },
    {
        "number": 4159,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    takahashi_cookies = A\n    aoki_cookies = B\n    for i in range(K):\n        if takahashi_cookies > 0:\n            takahashi_cookies -= 1\n        elif aoki_cookies > 0:\n            aoki_cookies -= 1\n            if takahashi_cookies == 0:\n                takahashi_cookies = 1\n    return f\"{takahashi_cookies} {aoki_cookies}\" "
    },
    {
        "number": 4159,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    aoki_cookies = B\n    takahashi_cookies = A\n    \n    for _ in range(K):\n        if takahashi_cookies > 0:\n            takahashi_cookies -= 1\n        elif aoki_cookies > 0:\n            aoki_cookies -= 1\n            takahashi_cookies += 1\n        else:\n            break\n    \n    return f\"{takahashi_cookies} {aoki_cookies}\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    takahashi_cookies = A\n    aoki_cookies = B\n    for _ in range(K):\n        if takahashi_cookies > 0:\n            takahashi_cookies -= 1\n        elif aoki_cookies > 0:\n            aoki_cookies -= 1\n            if takahashi_cookies == 0:\n                takahashi_cookies += 1\n                aoki_cookies -= 1\n    return f\"{takahashi_cookies} {aoki_cookies}\" "
    },
    {
        "number": 4159,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    Takahashi_cookies = A\n    Aoki_cookies = B\n\n    for _ in range(K):\n        if Takahashi_cookies > 0:\n            Takahashi_cookies -= 1\n        elif Aoki_cookies > 0:\n            Aoki_cookies -= 1\n\n    return f\"{Takahashi_cookies} {Aoki_cookies}\"\n\ninput_str = input(\"A B K\\n\")\nresult = solution(input_str)\nprint(result) "
    },
    {
        "number": 4159,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    takahashi_cookies = A\n    aoki_cookies = B\n    for _ in range(K):\n        if takahashi_cookies > 0:\n            takahashi_cookies -= 1\n        elif aoki_cookies > 0:\n            aoki_cookies -= 1\n            if takahashi_cookies > 0:\n                takahashi_cookies -= 1\n                aoki_cookies += 1\n    return f\"{takahashi_cookies} {aoki_cookies}\" "
    },
    {
        "number": 4159,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n\n    for i in range(K):\n        if A > 0:\n            A -= 1\n        elif B > 0:\n            B -= 1\n\n    return f\"{A} {B}\""
    },
    {
        "number": 4159,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    takahashi_cookies = A\n    aoki_cookies = B\n\n    for _ in range(K):\n        if takahashi_cookies > 0:\n            takahashi_cookies -= 1\n        elif aoki_cookies > 0:\n            aoki_cookies -= 1\n            if takahashi_cookies == 0:\n                takahashi_cookies += 1\n\n    return f\"{takahashi_cookies} {aoki_cookies}\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n\n    while K > 0:\n        if A > 0:\n            A -= 1\n        elif B > 0:\n            B -= 1\n        else:\n            break\n        K -= 1\n\n    return f\"{A} {B}\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n\n    year = 1\n    balance = 100\n\n    while balance < X:\n        balance *= 1.01\n        year += 1\n\n    return str(year)\n\nstdin = input()\noutput = solution(stdin)\nprint(output) "
    },
    {
        "number": 4160,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n\n    if X < 101 or X > 10 ** 18:\n        return \"Invalid input. 101 \\le X \\le 10^18\"\n\n    years = 0\n    balance = 100\n\n    while balance < X:\n        balance += balance * 0.01\n        years += 1\n\n    return years\n"
    },
    {
        "number": 4160,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip())\n    years = 0\n    balance = 100\n    while balance < X:\n        balance = int(balance * 1.01)\n        years += 1\n    return str(years)"
    },
    {
        "number": 4160,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    year = 0\n    balance = 100\n    while balance < X:\n        year += 1\n        balance *= 1.01\n    return year\n\ninput_stdin = \"103\"\noutput = solution(input_stdin)\nprint(output) "
    },
    {
        "number": 4160,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    years = 1\n    balance = 100\n    while balance < x:\n        balance = int(balance * 1.01)\n        years += 1\n    return str(years)"
    },
    {
        "number": 4160,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    years = 0\n    balance = 100\n    while balance < x:\n        balance = int(balance * 1.01)\n        years += 1\n    return years\n\ninput_str = input()\noutput_str = solution(input_str)\nprint(output_str) "
    },
    {
        "number": 4160,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip())\n\n    years = 0\n    balance = 100\n\n    while balance < X:\n        balance = balance * 1.01\n        years += 1\n\n    return str(years)\n"
    },
    {
        "number": 4160,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    years = 0\n    balance = 100\n\n    while balance < X:\n        years += 1\n        balance += balance // 100 + 1\n\n    return str(years)\n\n\ninput_stdin = input()\noutput = solution(input_stdin)\nprint(output) "
    },
    {
        "number": 4160,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    years = 0\n    balance = 100\n\n    while balance < X:\n        balance += balance * 0.01\n        years += 1\n\n    return str(years)\n"
    },
    {
        "number": 4160,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    years = 0\n    balance = 100\n\n    while balance < X:\n        balance *= 1.01\n        years += 1\n\n    return str(years)"
    },
    {
        "number": 4161,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.split()[0])\n    result = 0\n    for a in range(1, K+1):\n        for b in range(1, K+1):\n            for c in range(1, K+1):\n                result += gcd(a, b, c)\n    return str(result)\n\ndef"
    },
    {
        "number": 4161,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    K = int(input_list[0])\n    result = 0\n    for a in range(1, K+1):\n        for b in range(1, K+1):\n            for c in range(1, K+1):\n                result += gcd(a, b, c)\n    return str(result)\n\ndef"
    },
    {
        "number": 4161,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.split()[0])\n    gcd_sum = 0\n\n    for a in range(1, K + 1):\n        for b in range(1, K + 1):\n            for c in range(1, K + 1):\n                gcd_sum += math.gcd(a, b, c)\n\n    return str(gcd_sum)\n"
    },
    {
        "number": 4161,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    \n    result = 0\n    for a in range(1, K+1):\n        for b in range(1, K+1):\n            for c in range(1, K+1):\n                result += max(a, b, c) - min(a, b, c) + 1\n                \n    return str(result)"
    },
    {
        "number": 4161,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    ans = 0\n\n    for a in range(1, K + 1):\n        for b in range(1, K + 1):\n            for c in range(1, K + 1):\n                ans += gcd(a, b, c)\n\n    return str(ans)\n\n\ndef"
    },
    {
        "number": 4161,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.strip())\n    result = 0\n    for a in range(1, K+1):\n        for b in range(1, K+1):\n            for c in range(1, K+1):\n                result += gcd(a, b, c)\n    return str(result)\n\ndef"
    },
    {
        "number": 4161,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.strip())\n    if 1 <= K <= 200:\n        result = 0\n        for a in range(1, K+1):\n            for b in range(1, K+1):\n                for c in range(1, K+1):\n                    result += gcd(a, b, c)\n        return str(result)\n    else:\n        return \"Invalid input\"\n\ndef"
    },
    {
        "number": 4161,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    from math import gcd\n    \n    K = int(stdin.strip())\n    result = 0\n    \n    for a in range(1, K+1):\n        for b in range(1, K+1):\n            for c in range(1, K+1):\n                result += gcd(a, b, c)\n    \n    return str(result)\n\ninput_str = \"2\"\noutput_str = solution(input_str)\nprint(output_str) "
    },
    {
        "number": 4161,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    \n    def gcd(a, b, c):\n        return a if b == 0 else gcd(b, a % b, c)\n    \n    total = 0\n    for a in range(1, K + 1):\n        for b in range(1, K + 1):\n            for c in range(1, K + 1):\n                total += gcd(a, b, c)\n                \n    return str(total)\n"
    },
    {
        "number": 4161,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.strip())\n    if 1 <= K <= 200:\n        result = 0\n        for a in range(1, K + 1):\n            for b in range(1, K + 1):\n                for c in range(1, K + 1):\n                    result += gcd(a, b, c)\n        return str(result)\n    else:\n        return \"Invalid input\"\n\ndef"
    },
    {
        "number": 4162,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.splitlines()[0])\n    a_arr = list(map(int, stdin.splitlines()[1].split()))\n    \n    max_f = 0\n    for m in range(1, 10**6):\n        f_m = 0\n        for a in a_arr:\n            f_m += m % a\n        max_f = max(max_f, f_m)\n    \n    return str(max_f)\n\n\ndef"
    },
    {
        "number": 4162,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    N = int(input_data[0])\n    a = [int(x) for x in input_data[1].split()]\n\n    max_value = 0\n\n    for m in range(N):\n        mod_sum = sum([m % a[i] for i in range(N)])\n        if mod_sum > max_value:\n            max_value = mod_sum\n\n    return str(max_value)\n"
    },
    {
        "number": 4162,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    N = int(input_list[0])\n    a_list = list(map(int, input_list[1].split()))\n    max_f = 0\n\n    for m in range(N * a_list[0]):\n        f_m = 0\n        for i in range(N):\n            f_m += m % a_list[i]\n        if f_m > max_f:\n            max_f = f_m\n\n    return str(max_f)\n"
    },
    {
        "number": 4162,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, *a = map(int, stdin.split())\n    max_sum = 0\n\n    for m in range(N * a[0]):\n        current_sum = sum(m % ai for ai in a)\n        max_sum = max(max_sum, current_sum)\n\n    return str(max_sum)\n"
    },
    {
        "number": 4162,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    max_f = 0\n    for m in range(N):\n        mods = [m % ai for ai in a]\n        f_m = sum(mods)\n        if f_m > max_f:\n            max_f = f_m\n\n    return str(max_f)\n"
    },
    {
        "number": 4162,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    a_list = list(map(int, stdin.split(\"\\n\")[1].split()))\n    \n    max_f = -float('inf')\n    for i in range(N):\n        temp_f = 0\n        for j in range(N):\n            temp_f += (i+j) % a_list[j]\n        max_f = max(max_f, temp_f)\n    \n    return str(max_f)"
    },
    {
        "number": 4162,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    A = [int(x) for x in stdin.split('\\n')[1].split()]\n    \n    def f(m, A):\n        return sum([m % a for a in A])\n    \n    max_f = f(0, A)\n    for i in range(1, N+1):\n        max_f = max(max_f, f(i, A))\n    \n    return str(max_f)"
    },
    {
        "number": 4162,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    A = list(map(int, stdin.split('\\n')[1].split()))\n\n    mod_sum = 0\n    for i in range(N):\n        mod_sum += (i + 1) % A[i]\n\n    return mod_sum\n"
    },
    {
        "number": 4162,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, input_str = stdin.split()\n    N = int(N)\n    a = list(map(int, input_str.split()))\n    f = []\n    for i in range(1, 1000001):\n        temp = 0\n        for j in a:\n            temp += i % j\n        f.append(temp)\n    return str(max(f))\n"
    },
    {
        "number": 4162,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    A = list(map(int, stdin.split('\\n')[1].split()))\n    max_f = 0\n    for m in range(10**N):\n        f_m = sum(m % a for a in A)\n        if f_m > max_f:\n            max_f = f_m\n    return str(max_f)\n"
    },
    {
        "number": 4163,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    dice_rolls = [tuple(map(int, roll.split())) for roll in stdin.split('\\n')[1:]]\n    \n    for i in range(N-2):\n        if dice_rolls[i][0] == dice_rolls[i+1][0] == dice_rolls[i+2][0]:\n            return \"Yes\"\n    \n    return \"No\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    dice_rolls = [tuple(map(int, line.split())) for line in stdin[1:]]\n    \n    for i in range(2, N-1):\n        if dice_rolls[i][0] == dice_rolls[i][1] and dice_rolls[i+1][0] == dice_rolls[i+1][1] and dice_rolls[i+2][0] == dice_rolls[i+2][1]:\n            return \"Yes\"\n    return \"No\"\n\ndef"
    },
    {
        "number": 4163,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    dice_rolls = [tuple(map(int, line.split())) for line in stdin.split(\"\\n\")[1:]]\n\n    for i in range(N - 2):\n        if dice_rolls[i][0] == dice_rolls[i][1] and dice_rolls[i + 1][0] == dice_rolls[i + 1][1] and dice_rolls[i + 2][0] == dice_rolls[i + 2][1]:\n            return \"Yes\"\n\n    return \"No\""
    },
    {
        "number": 4163,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    dice_rolls = [list(map(int, line.split())) for line in stdin[1:]]\n\n    for i in range(N-2):\n        if dice_rolls[i][0] == dice_rolls[i+1][0] and dice_rolls[i+1][0] == dice_rolls[i+2][0]:\n            return \"Yes\"\n\n    return \"No\""
    },
    {
        "number": 4163,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.splitlines()[0])\n    dice_rolls = [[int(x) for x in line.split()] for line in stdin.splitlines()[1:]]\n    \n    for i in range(N-2):\n        if dice_rolls[i][0] == dice_rolls[i][1] and dice_rolls[i+1][0] == dice_rolls[i+1][1] and dice_rolls[i+2][0] == dice_rolls[i+2][1]:\n            return \"Yes\"\n    \n    return \"No\""
    },
    {
        "number": 4163,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    n = int(input_list[0])\n    input_list = input_list[1:]\n    doublet_count = 0\n    for i in range(n-2):\n        if input_list[i][0] == input_list[i+1][0] and input_list[i+1][0] == input_list[i+2][0]:\n            doublet_count += 1\n    if doublet_count >= 3:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, *dice_rolls = stdin.split()\n    N = int(N)\n    doublet_count = 0\n    for i in range(N-2):\n        if dice_rolls[i] == dice_rolls[i+1] and dice_rolls[i+1] == dice_rolls[i+2]:\n            doublet_count += 1\n        else:\n            doublet_count = 0\n        if doublet_count >= 2:\n            return \"Yes\"\n    return \"No\"\n\ninput_str = \"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\"\nprint(solution(input_str)) "
    },
    {
        "number": 4163,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    doublets_count = 0\n\n    for i in range(0, N, 3):\n        if D[i] == D[i + 1] == D[i + 2]:\n            doublets_count += 1\n\n    if doublets_count >= 2:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_doublet(i: int) -> bool:\n        return D[i][0] == D[i][1] and D[i+1][0] == D[i+1][1] and D[i+2][0] == D[i+2][1]\n\n    N, D = map(int, stdin.split())\n    D = [D[i:i+2] for i in range(0, len(D), 2)]\n    return \"Yes\" if any(is_doublet(i) for i in range(N-2)) else \"No\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, stdin = stdin.split(\"\\n\", 1)\n    N = int(N)\n    doublets_count = 0\n    prev_dice_1, prev_dice_2 = map(int, stdin.split())\n\n    for i in range(N-2):\n        dice_1, dice_2 = map(int, stdin.split())\n        stdin, _ = stdin.split(\"\\n\", 1)\n        if dice_1 == dice_2 and prev_dice_1 == prev_dice_2:\n            doublets_count += 1\n        else:\n            doublets_count = 0\n        if doublets_count >= 2:\n            return \"Yes\"\n        prev_dice_1, prev_dice_2 = dice_1, dice_2\n\n    return \"No\""
    },
    {
        "number": 4164,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area_r = (r ** 2) * 3.14\n    area_1 = (1 ** 2) * 3.14\n    result = int(area_r / area_1)\n    return str(result)\n"
    },
    {
        "number": 4164,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin.strip())\n    area_circle_r = (r ** 2) * 3.14159\n    area_circle_1 = 3.14159\n    result = int(area_circle_r / area_circle_1)\n    return str(result)"
    },
    {
        "number": 4164,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area_of_circle_r = (r ** 2) * 3.14\n    area_of_circle_1 = 3.14\n    result = int(area_of_circle_r / area_of_circle_1)\n    return str(result)\n\ninput_str = \"2\"  # Change this to the input value\noutput_str = solution(input_str)\nprint(output_str) "
    },
    {
        "number": 4164,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area_r = (r ** 2) * 3.14\n    area_1 = 3.14\n    result = area_r // area_1\n    return str(result)"
    },
    {
        "number": 4164,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area_r = (r**2) * 3.14\n    area_1 = 3.14\n    return int(area_r / area_1)\n\ninput_str = \"2\"\noutput_str = str(solution(input_str))\nprint(output_str) "
    },
    {
        "number": 4164,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area_r = round(math.pi * (r ** 2))\n    area_1 = round(math.pi)\n    result = area_r // area_1\n    return str(result)"
    },
    {
        "number": 4164,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area_r = (r ** 2) * 3.14\n    area_1 = 3.14\n    return int(area_r / area_1)\n\ninput_str = input()\noutput = solution(input_str)\nprint(output) "
    },
    {
        "number": 4164,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin.strip())\n    area_r = (r ** 2) * 3.14\n    area_1 = 3.14\n    result = area_r // area_1\n    return str(result)"
    },
    {
        "number": 4164,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin.strip())\n    area_r = r ** 2 * 3.14\n    area_1 = 1 ** 2 * 3.14\n    result = int(area_r / area_1)\n    return str(result)\n\nstdin = input(\"Enter the radius of the circle: \")\nstdout = solution(stdin)\nprint(\"The area of a circle of radius\", stdin, \"is\", stdout, \"times larger than the area of a circle of radius 1.\") "
    },
    {
        "number": 4164,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin.strip())\n    area_r = (r ** 2) * 3.14\n    area_1 = (1 ** 2) * 3.14\n    result = area_r // area_1\n    return str(result)"
    },
    {
        "number": 4165,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *L = map(int, stdin.split())\n    longest_side = max(L)\n    total_length = sum(L)\n    if longest_side < total_length:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ndef"
    },
    {
        "number": 4165,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid_polygon(N: int, sides: list) -> bool:\n        longest_side = max(sides)\n        total_length = sum(sides)\n        return longest_side < total_length\n\n    N, *sides = map(int, stdin.split())\n    if not (3 <= N <= 10):\n        return \"No\"\n    if not all(1 <= L_i <= 100 for L_i in sides):\n        return \"No\"\n    if not is_valid_polygon(N, sides):\n        return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    L = list(map(int, stdin[1].split()))\n    \n    if N < 3 or N > 10 or any(l <= 0 or l > 100 for l in L):\n        return \"Invalid Input\"\n    \n    L.sort()\n    longest = L[-1]\n    sum_other_sides = sum(L[:-1])\n    \n    if longest < sum_other_sides:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(N: int, L: List[int]) -> bool:\n        return max(L) < sum(L) - max(L)\n\n    def main(stdin: str) -> str:\n        N, L = map(int, stdin.split())\n        L = list(L)\n        if not (3 <= N <= 10) or not all(1 <= L_i <= 100 for L_i in L):\n            return \"Invalid input\"\n\n        if is_valid(N, L):\n            return \"Yes\"\n        else:\n            return \"No\"\n\n    return main(stdin)"
    },
    {
        "number": 4165,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    n = int(input_list[0])\n    side_lengths = list(map(int, input_list[1].split()))\n    longest_side = max(side_lengths)\n    total_length = sum(side_lengths)\n    if longest_side < total_length - longest_side:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, *L = map(int, stdin.split())\n    L.sort()\n    return \"Yes\" if L[-1] < sum(L[:-1]) else \"No\""
    },
    {
        "number": 4165,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.splitlines()[0])\n    L = list(map(int, stdin.splitlines()[1].split()))\n    longest_side = max(L)\n    if longest_side < sum(L) - longest_side:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ndef"
    },
    {
        "number": 4165,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    N = int(input_list[0])\n    L = list(map(int, input_list[1:]))\n\n    if N < 3 or N > 10:\n        return \"No\"\n\n    if not all(1 <= L_i <= 100 for L_i in L):\n        return \"No\"\n\n    if len(set(L)) != N:\n        return \"No\"\n\n    longest_side = max(L)\n    sum_other_sides = sum(L) - longest_side\n\n    if longest_side < sum_other_sides:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, *L = map(int, stdin.split())\n    L.sort()\n    longest = L[-1]\n    sum_other_sides = sum(L[:-1])\n    if longest < sum_other_sides:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ndef"
    },
    {
        "number": 4165,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin)\n    L = list(map(int, stdin.split()[1:]))\n\n    # Calculate the longest side\n    longest_side = max(L)\n\n    # Calculate the sum of the lengths of the other N-1 sides\n    sum_of_other_sides = sum(L) - longest_side\n\n    # Check if the longest side is strictly shorter than the sum of the lengths of the other N-1 sides\n    if longest_side < sum_of_other_sides:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4166,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    N, M = map(int, input_list.pop(0).split())\n    s_list = []\n    c_list = []\n\n    for _ in range(M):\n        s, c = map(int, input_list.pop(0).split())\n        s_list.append(s)\n        c_list.append(c)\n\n    if 1 <= N <= 3 and 0 <= M <= 5 and all(1 <= s <= N for s in s_list) and all(0 <= c <= 9 for c in c_list):\n        number = 0\n        for i, s in enumerate(s_list):\n            number += c_list[i] * (10 ** (N - s))\n\n        if number >= 0:\n            return str(number)\n\n    return \"-1\"\n"
    },
    {
        "number": 4166,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    s = sorted(list(map(int, stdin.split())))\n    if N == 1:\n        if 0 <= s[0] <= 9:\n            return str(s[0] * (10 ** (M - 1)))\n        else:\n            return \"-1\"\n    elif N == 2:\n        if 10 <= s[0] * 10 + s[1] <= 99:\n            return str(s[0] * 10 + s[1] * (10 ** (M - 2)))\n        else:\n            return \"-1\"\n    elif N == 3:\n        if 100 <= s[0] * 100 + s[1] * 10 + s[2] <= 999:\n            return str(s[0] * 100 + s[1] * 10 + s[2] * (10 ** (M - 3)))\n        else:\n            return \"-1\"\n    else:\n        return \"-1\""
    },
    {
        "number": 4166,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    s = [int(x) for x in stdin.split()[1:N+1:2]]\n    c = [int(x) for x in stdin.split()[2:N+1:2]]\n\n    ans = -1\n    for i in range(10**(N-1), 10**N):\n        valid = True\n        for j in range(M):\n            if s[j] > N:\n                valid = False\n                break\n            if str(i)[N-s[j]:N-s[j]+1] != str(c[j]):\n                valid = False\n                break\n        if valid:\n            ans = i\n            break\n\n    return str(ans)\n"
    },
    {
        "number": 4166,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    s, c = [], []\n    for i in range(M):\n        s_i, c_i = map(int, stdin.split()[i*2:(i*2)+2])\n        s.append(s_i)\n        c.append(c_i)\n    num = 0\n    for i in range(N):\n        num = num * 10 + c[s.index(i+1) if i+1 in s else 0]\n    if num < 0:\n        return -1\n    else:\n        return num"
    },
    {
        "number": 4166,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    N = int(input_list[0].split()[0])\n    M = int(input_list[0].split()[1])\n    c_list = [int(i) for i in input_list[1:]]\n    smallest_number = 1\n    for i in range(len(c_list) // M):\n        c_sublist = c_list[M * i:M * (i + 1)]\n        c_sublist.sort(reverse=True)\n        c_sublist.append(0)\n        num = 10 ** N\n        for j in range(N):\n            num += c_sublist[j] * 10 ** (N - 1 - j)\n            if num < smallest_number:\n                smallest_number = num\n    return str(smallest_number)\n\n\nstdin = \"\"\"3 3\n1 7\n3 2\n1 7\"\"\"\nprint(solution(stdin))  # Output: 702 "
    },
    {
        "number": 4166,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, input().split())\n    conditions = []\n    for i in range(M):\n        s, c = map(int, stdin.split())\n        conditions.append((s, c))\n\n    def is_valid(num: int) -> bool:\n        digits = [int(digit) for digit in str(num)]\n        for s, c in conditions:\n            if digits[s-1] != c:\n                return False\n        return True\n\n    min_num = 0\n    for num in range(min_num, 10**N):\n        if is_valid(num):\n            min_num = num\n\n    return str(min_num) if min_num > 0 else -1\n"
    },
    {
        "number": 4166,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    s_c = [list(map(int, input().split())) for _ in range(M)]\n    candidates = []\n    for i in range(10**(N-1), -1, -1):\n        digits = [int(d) for d in str(i)]\n        if len(digits) == N and all(digits[s-1] == c for s, c in s_c):\n            candidates.append(i)\n            if len(candidates) == 1:\n                break\n    return str(candidates[0]) if candidates else \"-1\"\n"
    },
    {
        "number": 4166,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    c = list(map(int, stdin.split()[2:]))\n    if N != len(c) // 2:\n        raise ValueError(\"Invalid input: N and c have different lengths\")\n    \n    for i in range(M):\n        if c[i] != 0 and not (1 <= c[i] <= 9):\n            raise ValueError(\"Invalid input: c contains invalid values\")\n    \n    num = 0\n    for i in range(M):\n        num += c[i] * 10 ** (N - i - 1)\n    \n    if num < 0:\n        return -1\n    \n    for i in range(10 ** N):\n        if i < num:\n            continue\n        satisfied = True\n        for j in range(M):\n            if i % (10 ** (N - j - 1)) // (10 ** (N - j - 2)) != c[j]:\n                satisfied = False\n                break\n        if satisfied:\n            return i\n    \n    return -1\n\n\ndef"
    },
    {
        "number": 4166,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    s, c = [], []\n    for i in range(M):\n        si, ci = map(int, stdin.split()[i * 2:i * 2 + 2])\n        s.append(si)\n        c.append(ci)\n\n    def is_valid(n: int) -> bool:\n        digits = [int(d) for d in str(n)]\n        return len(digits) == N and all(c[i - 1] == digits[s[i - 1] - 1] for i in range(1, M + 1))\n\n    for n in range(10 ** (N - 1), 10 ** N):\n        if is_valid(n):\n            return str(n)\n    return -1\n"
    },
    {
        "number": 4166,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    s_c = [list(map(int, input().split())) for _ in range(M)]\n\n    for i in range(2**N):\n        num = 0\n        for j in range(N):\n            if (i >> j) & 1:\n                num = num * 10 + s_c[j][1]\n            else:\n                num = num * 10 + s_c[j][0]\n\n        if num >= 0:\n            for k in range(i):\n                k_num = 0\n                for l in range(N):\n                    if (k >> l) & 1:\n                        k_num = k_num * 10 + s_c[l][1]\n                    else:\n                        k_num = k_num * 10 + s_c[l][0]\n                if k_num == num:\n                    break\n            else:\n                return str(num)\n\n    return \"-1\"\n"
    },
    {
        "number": 4167,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin.rstrip()\n    N, K = map(int, input_str.split())\n    count = 0\n    for a in range(1, N+1):\n        for b in range(1, N+1):\n            c = (K - a - b) // 2\n            if a + b == K * (c + (c > 0)) and b + c == K * (a + (a > 0)) and c + a == K * (b + (b > 0)):\n                count += 1\n    return str(count)"
    },
    {
        "number": 4167,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    count = 0\n    for a in range(1, N+1):\n        for b in range(1, N+1):\n            c = K - (a + b)\n            if 1 <= c <= N and (c + a) % K == 0 and (b + c) % K == 0:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 4167,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    count = 0\n\n    for a in range(1, N + 1):\n        for b in range(a, N - a + 1):\n            c = K - a - b\n            if 1 <= c <= N and c != b:\n                count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4167,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n\n    result = 0\n    for a in range(1, N + 1):\n        for b in range(1, N + 1):\n            c = (a + b) // K * K\n            if c <= N:\n                result += (N - c + K - 1) // (K - 1)\n\n    return str(result)"
    },
    {
        "number": 4167,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, input().split())\n\n    count = 0\n    for a in range(1, N + 1):\n        for b in range(a, (N - a) // 2 + 1):\n            c = N - a - b\n            if a + b == c or b + c == a or c + a == b:\n                if a + b == c:\n                    count += (N - 1) // K\n                elif b + c == a:\n                    count += (N - 1) // K\n                else:\n                    count += (N - 1) // K\n\n    return count\n\n\ndef"
    },
    {
        "number": 4167,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split()\n    N, K = map(int, input_data)\n    count = 0\n    for a in range(1, N+1):\n        for b in range(1, N+1):\n            c = K - a - b\n            if c > 0:\n                if a + b == K and b + c == K and c + a == K:\n                    count += 1\n    return count\n"
    },
    {
        "number": 4167,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    N = int(input_list[0])\n    K = int(input_list[1])\n\n    count = 0\n    for a in range(1, N + 1):\n        for b in range(1, N + 1):\n            c = (K - (a + b)) // 2\n            if a + b + c <= N and (a + b) % K == 0 and (b + c) % K == 0 and (c + a) % K == 0:\n                count += 1\n\n    return str(count)\n\n\ninput_str = \"3 2\"\nprint(solution(input_str))  # Output: 9 "
    },
    {
        "number": 4167,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_values = list(map(int, stdin.split()))\n    N, K = input_values[0], input_values[1]\n\n    count = 0\n    for a in range(1, N + 1):\n        for b in range(1, N - a + 1):\n            c = N - a - b\n            if a + b == c or b + c == a or c + a == b:\n                continue\n            if (a + b) % K == 0 and (b + c) % K == 0 and (c + a) % K == 0:\n                count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4167,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    count = 0\n    for a in range(1, N+1):\n        for b in range(1, N+1):\n            c = K - a - b\n            if 1 <= c <= N and a+b+c == K:\n                count += 1\n    return str(count)\n\nN, K = map(int, input().split())\nstdin = f\"{N} {K}\"\nresult = solution(stdin)\nprint(result) "
    },
    {
        "number": 4167,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, input().split())\n\n    count = 0\n    for a in range(1, N + 1):\n        for b in range(1, N + 1):\n            c = (a + b) // K * K\n            if c <= N:\n                count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4168,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    \n    if N == 0:\n        return \"0\"\n    \n    S = \"\"\n    while N > 0:\n        S = str(N % 2) + S\n        N //= 2\n    \n    S = S.lstrip(\"0\")\n    if not S:\n        return \"0\"\n    \n    return S\n"
    },
    {
        "number": 4168,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    \n    if N == 0:\n        return \"0\"\n    \n    result = []\n    \n    while N > 0:\n        N, remainder = divmod(N, 2)\n        if remainder == 1:\n            result.append(\"1\")\n        else:\n            result.append(\"0\")\n    \n    return \"\".join(reversed(result))\n"
    },
    {
        "number": 4168,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 0:\n        return \"0\"\n    result = \"\"\n    while N > 0:\n        if N % 2 == 1:\n            result = \"1\" + result\n            N -= 2\n        else:\n            result = \"0\" + result\n            N += 1\n    return result\n\ndef"
    },
    {
        "number": 4168,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 0:\n        return \"0\"\n    result = \"\"\n    while N != 0:\n        N, remainder = divmod(N, -2)\n        result = str(remainder) + result\n    return result"
    },
    {
        "number": 4168,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    if N == 0:\n        return \"0\"\n\n    base2_representation = []\n\n    while N != 0:\n        N, remainder = divmod(N, -2)\n        base2_representation.append(str(remainder))\n\n    return \"\".join(reversed(base2_representation))\n\n\ndef"
    },
    {
        "number": 4168,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 0:\n        return \"0\"\n    elif N < 0:\n        result = \"\"\n        while N != 0:\n            result = str(N % 2) + result\n            N = -(N // 2)\n        return \"1\" + result\n    else:\n        result = \"\"\n        while N != 0:\n            result = str(N % 2) + result\n            N = N // 2\n        return result"
    },
    {
        "number": 4168,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 0:\n        return \"0\"\n    if N < 0:\n        N = -N\n        is_neg = True\n    else:\n        is_neg = False\n    S = []\n    while N > 0:\n        S.append(N % 2)\n        N //= 2\n    S.reverse()\n    if is_neg:\n        S.append(1)\n        S = [str(1 - int(d)) for d in S]\n        S.reverse()\n        S = \"\".join(S)\n    else:\n        S = \"\".join(str(d) for d in S)\n    return S\n"
    },
    {
        "number": 4168,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    if N == 0:\n        return '0'\n\n    S = ''\n    while N > 0:\n        S = str(N % 2) + S\n        N //= 2\n\n    result = ''\n    for i, bit in enumerate(S):\n        if bit == '1':\n            result += '0' * (i + 1) + '1'\n        else:\n            result += '0' * (i + 1)\n\n    return result\n"
    },
    {
        "number": 4168,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    \n    if N == 0:\n        return \"0\"\n    \n    if N < 0:\n        N = -N\n        sign = 1\n    else:\n        sign = 0\n    \n    S = \"\"\n    while N > 0:\n        if N % 2 == 1:\n            S = \"1\" + S\n        else:\n            S = \"0\" + S\n        N //= 2\n    \n    if sign == 1:\n        S = S.replace(\"0\", \"1\").replace(\"1\", \"0\")\n    \n    return S\n\nstdin = \"-9\"\nprint(solution(stdin)) # Output: 1011 "
    },
    {
        "number": 4168,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    \n    # Base -2 representation\n    base_2_representation = \"\"\n    \n    while N != 0:\n        # Extract the last digit of N (base 2)\n        last_digit = N % 2\n        \n        # Add the last digit to the base -2 representation\n        base_2_representation = str(last_digit) + base_2_representation\n        \n        # Remove the last digit from N\n        N //= 2\n        \n    return base_2_representation"
    },
    {
        "number": 4169,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    N, M = map(int, input_list[0].split())\n    A = [int(x) for x in input_list[1:N+1]]\n    B = [int(x) for x in input_list[N+1:]]\n    min_money = float('inf')\n\n    for i in range(N):\n        total_cost = A[i] * B[i]\n        if total_cost < min_money:\n            min_money = total_cost\n\n    return min_money\n"
    },
    {
        "number": 4169,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    N, M = map(int, input_list.pop(0).split())\n    A = []\n    B = []\n    for _ in range(N):\n        A.append(int(input_list.pop(0).split()[0]))\n        B.append(int(input_list.pop(0).split()[0]))\n    if sum(B) < M:\n        return \"Impossible\"\n    \n    dp = [0] * (M+1)\n    for i in range(1, N+1):\n        for j in range(M, A[i-1]-1, -1):\n            dp[j] = max(dp[j], dp[j-A[i-1]]+A[i-1]*B[i-1])\n    \n    return dp[M]"
    },
    {
        "number": 4169,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    N, M = map(int, input_list[0].split())\n    A_i, B_i = [], []\n    for i in range(1, N + 1):\n        A, B = map(int, input_list[i].split())\n        A_i.append(A)\n        B_i.append(B)\n\n    dp = [float('inf')] * (M + 1)\n    dp[0] = 0\n\n    for i in range(N):\n        for j in range(M, A_i[i] - 1, -1):\n            dp[j] = min(dp[j], dp[j - A_i[i]] + A_i[i] * B_i[i])\n\n    return dp[M]\n\n\nstdin = \"2 5\\n4 9\\n2 4\"\nprint(solution(stdin)) "
    },
    {
        "number": 4169,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[0:2])\n    A = list(map(int, stdin.split()[2::2]))\n    B = list(map(int, stdin.split()[3::2]))\n\n    total_cost = 0\n    remaining = M\n    for i in range(N):\n        if remaining == 0:\n            break\n        if remaining >= B[i]:\n            total_cost += A[i] * B[i]\n            remaining -= B[i]\n        else:\n            total_cost += A[i] * remaining\n            break\n\n    return total_cost\n"
    },
    {
        "number": 4169,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = []\n    B = []\n    for _ in range(N):\n        a, b = map(int, input().split())\n        A.append(a)\n        B.append(b)\n    \n    dp = [0] * (M + 1)\n    for b in B:\n        for i in range(M, b-1, -1):\n            dp[i] = max(dp[i], dp[i-b] + b*A[B.index(b)])\n    \n    return dp[M]\n\n\nstdin = '''2 5\n4 9\n2 4'''\n\nprint(solution(stdin)) # Output: 12 "
    },
    {
        "number": 4169,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = []\n    B = []\n    for _ in range(N):\n        a, b = map(int, stdin.split())\n        A.append(a)\n        B.append(b)\n\n    # Calculate the minimum amount of money with which Takahashi can buy M cans of energy drinks\n    dp = [float('inf')] * (M + 1)\n    dp[0] = 0\n    for i in range(N):\n        for j in range(M, 0, -1):\n            if j >= B[i]:\n                dp[j] = min(dp[j], dp[j - B[i]] + A[i])\n    return dp[M]\n"
    },
    {
        "number": 4169,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, input().split())\n    A = []\n    B = []\n\n    for _ in range(N):\n        a, b = map(int, input().split())\n        A.append(a)\n        B.append(b)\n\n    # Sort the stores by the number of drinks they sell\n    sorted_indices = sorted(range(N), key=lambda i: B[i], reverse=True)\n\n    # Initialize the minimum amount of money to buy M cans\n    min_money = 0\n\n    # Iterate over the sorted stores\n    for i in sorted_indices:\n        # Calculate the maximum number of drinks we can buy with the current amount of money\n        max_drinks = min_money // A[i]\n\n        # If we can buy at least M drinks, update the minimum amount of money\n        if max_drinks >= M:\n            min_money = A[i] * M\n            break\n        else:\n            # If we cannot buy at least M drinks, subtract the amount of money spent in this store and continue\n            min_money -= B[i]\n\n    return min_money\n"
    },
    {
        "number": 4169,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = []\n    B = []\n    for _ in range(N):\n        a, b = map(int, stdin.split())\n        A.append(a)\n        B.append(b)\n    \n    dp = [float('inf')] * (M + 1)\n    dp[0] = 0\n    for i in range(N):\n        for j in range(M, A[i] - 1, -1):\n            dp[j] = min(dp[j], dp[j - A[i]] + A[i])\n    \n    for i in range(M, -1, -1):\n        if dp[i] <= B[-1]:\n            return dp[i]\n    \n    return \"Impossible\""
    },
    {
        "number": 4169,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    N, M = map(int, input_list[0].split())\n    A = []\n    B = []\n    for i in range(1, N + 1):\n        a, b = map(int, input_list[i].split())\n        A.append(a)\n        B.append(b)\n\n    # Initialize variables\n    dp = [0] * (M + 1)\n    for i in range(1, M + 1):\n        dp[i] = float('inf')\n\n    # Base case: if we have 0 cans, we need 0 yen to buy them\n    dp[0] = 0\n\n    # Fill the dp array\n    for i in range(1, N + 1):\n        for j in range(1, M + 1):\n            if j >= B[i - 1]:\n                dp[j] = min(dp[j], dp[j - B[i - 1]] + A[i - 1])\n\n    # Find the minimum amount of money needed\n    min_money = dp[M]\n\n    # Return the result\n    return str(min_money)\n"
    },
    {
        "number": 4169,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    A = list(map(int, stdin.split()[2::2]))\n    B = list(map(int, stdin.split()[3::2]))\n\n    total_cans = sum(B)\n    if total_cans < M:\n        return \"IMPOSSIBLE\"\n\n    M_cans = 0\n    total_yen = 0\n\n    for i in range(N):\n        if M_cans == M:\n            break\n        min_yen = M - M_cans\n        num_cans = min(B[i], min_yen // A[i])\n        M_cans += num_cans\n        total_yen += num_cans * A[i]\n\n    return total_yen\n\n\ndef"
    },
    {
        "number": 4170,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *H = map(int, stdin.split())\n    max_height = H[0]\n    count = 0\n\n    for h in H:\n        if h <= max_height:\n            count += 1\n        else:\n            break\n        max_height = h\n\n    return count\n"
    },
    {
        "number": 4170,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    H = list(map(int, stdin.split()[1:]))\n\n    count = 0\n    max_count = 0\n\n    for i in range(N - 1):\n        if H[i] >= H[i + 1]:\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 0\n\n    max_count = max(max_count, count)\n\n    return max_count\n\ndef"
    },
    {
        "number": 4170,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    heights = list(map(int, stdin.split()[1:]))\n    count = 0\n    max_count = 0\n    \n    for i in range(N):\n        if heights[i] >= heights[i+1]:\n            count += 1\n            max_count = max(max_count, count)\n        else:\n            count = 0\n    \n    return max_count"
    },
    {
        "number": 4170,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, *H = map(int, stdin.split())\n    max_height = -1\n    max_moves = 0\n    current_moves = 0\n\n    for height in H:\n        if height > max_height:\n            current_moves += 1\n            max_height = height\n        else:\n            max_moves = max(max_moves, current_moves)\n            current_moves = 0\n\n    return max_moves + 1 if current_moves > 0 else max_moves\n"
    },
    {
        "number": 4170,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, *H = map(int, stdin.split())\n    max_height = H[0]\n    count = 1\n    for i in range(1, N):\n        if H[i] <= max_height:\n            max_height = H[i]\n            count += 1\n    return count - 1  # Subtract 1 to account for the first move"
    },
    {
        "number": 4170,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def get_max_moves(heights: list) -> int:\n        max_moves = 0\n        current_height = heights[0]\n        move_count = 0\n\n        for height in heights[1:]:\n            if height > current_height:\n                current_height = height\n                move_count += 1\n            else:\n                max_moves = max(max_moves, move_count)\n                current_height = height\n                move_count = 1\n\n        return max_moves\n\n    N, *heights = map(int, stdin.split())\n    heights = list(heights)\n\n    max_moves = get_max_moves(heights)\n    return str(max_moves)"
    },
    {
        "number": 4170,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    H = list(map(int, stdin[1].split()))\n    count = 0\n    max_count = 0\n    for i in range(N-1):\n        if H[i] >= H[i+1]:\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 1\n    max_count = max(max_count, count)\n    return str(max_count)"
    },
    {
        "number": 4170,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, *H = map(int, stdin.split())\n    max_height = H[0]\n    count = 1\n    for h in H[1:]:\n        if h <= max_height:\n            max_height = h\n            count += 1\n    return str(count)\n\nN = int(input())\nH = list(map(int, input().split()))\nprint(solution(str(N) + ' ' + ' '.join(map(str, H)))) "
    },
    {
        "number": 4170,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def max_moves(h1, h2, h3):\n        if h1 <= h2 <= h3:\n            return 1\n        elif h2 <= h3 <= h1:\n            return 2\n        else:\n            return 0\n\n    N, *H = map(int, stdin.split())\n    max_moves_count = 0\n\n    for i in range(N - 2):\n        max_moves_count = max(max_moves_count, max_moves(H[i], H[i + 1], H[i + 2]))\n\n    return max_moves_count\n"
    },
    {
        "number": 4170,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def can_move_right(heights: list, index: int) -> bool:\n        if index + 1 >= len(heights):\n            return False\n        return heights[index] <= heights[index + 1]\n\n    def max_moves(heights: list) -> int:\n        count = 0\n        for i in range(len(heights) - 1):\n            if can_move_right(heights, i):\n                count += 1\n        return count\n\n    def main():\n        n = int(input())\n        heights = list(map(int, input().split()))\n        print(max_moves(heights))\n\n    if __name__ == \"__main__\":\n        main()\n"
    },
    {
        "number": 4171,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.splitlines()[0].split())\n    a = list(map(int, stdin.splitlines()[1].split()))\n    \n    # Initialize a dictionary to store the count of each element in the array\n    count = {}\n    for num in a:\n        count[num] = count.get(num, 0) + 1\n    \n    # Initialize the minimum number of operations required\n    min_ops = 0\n    \n    # Iterate through the elements in the array and check if the count of the element is greater than or equal to k\n    for num in a:\n        if count[num] >= k:\n            # If yes, then we don't need to perform any operations on this element\n            min_ops += 0\n        else:\n            # If not, then we need to perform operations on this element\n            min_ops += k - count[num]\n    \n    return str(min_ops)"
    },
    {
        "number": 4171,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    \n    count = 0\n    for i in range(n):\n        if a[i] % 2 == 1:\n            a[i] //= 2\n            count += 1\n    \n    if count < k:\n        return str(k - count)\n    else:\n        return '0'\n"
    },
    {
        "number": 4171,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    def is_even(x: int) -> bool:\n        return x % 2 == 0\n\n    def count_even_numbers(a: List[int]) -> int:\n        return sum(is_even(x) for x in a)\n\n    def min_operations(a: List[int]) -> int:\n        return sum(x - 1 for x in a if x > 1)\n\n    if count_even_numbers(a) >= k:\n        return min_operations(a)\n    else:\n        return -1\n"
    },
    {
        "number": 4171,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def count_equal_numbers(a: list) -> int:\n        count = 0\n        for num in a:\n            if num == 0:\n                count += 1\n        return count\n\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    min_ops = 0\n    count = 0\n    for num in a:\n        if num % 2 == 0:\n            count += 1\n        else:\n            min_ops += 1\n            num //= 2\n            count += 1\n\n    if count >= k:\n        return str(min_ops)\n\n    min_ops += 2 * (k - count)\n    return str(min_ops)\n"
    },
    {
        "number": 4171,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    count = 0\n    for i in range(n):\n        while a[i] > k:\n            a[i] //= 2\n            count += 1\n    return count\n"
    },
    {
        "number": 4171,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    \n    count = 0\n    for i in range(n):\n        while a[i] > k:\n            a[i] //= 2\n            count += 1\n    \n    return str(count)\n"
    },
    {
        "number": 4171,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    \n    count = 0\n    for i in range(n):\n        while a[i] > k:\n            a[i] //= 2\n            count += 1\n    \n    return count"
    },
    {
        "number": 4171,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    count = 0\n    for i in range(n):\n        while a[i] % 2 == 0 and a[i] >= k:\n            a[i] //= 2\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4171,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    # count number of elements with a value of i\n    count = [0] * (max(a) + 1)\n    for num in a:\n        count[num] += 1\n\n    # find the largest number of elements with a value of i that is less than or equal to k\n    result = 0\n    for i in range(1, k + 1):\n        result += count[i]\n\n    # if k is greater than the largest value of i, perform additional operations to reach k\n    if result < k:\n        result += k - result\n\n    return result\n"
    },
    {
        "number": 4171,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    count = 0\n    for i in range(len(a)):\n        while a[i] > k:\n            a[i] //= 2\n            count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4172,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    from collections import Counter\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    counter = Counter(a)\n    min_val = min(counter.values())\n    max_val = max(counter.values())\n    moves = 0\n\n    while k > 0:\n        if min_val > 1:\n            moves += min_val - 1\n            k -= min_val - 1\n        elif max_val < n:\n            moves += n - max_val\n            k -= n - max_val\n        else:\n            break\n\n        min_val = min(counter.values())\n        max_val = max(counter.values())\n\n    return str(moves)\n\n\ninput_data = '''6 5\n1 2 2 4 2 3\n7 5\n3 3 2 1 1 1 3'''\n\ninput_list = input_data.split('\\n')\noutput = solution(input_list.pop(0))\nfor line in input_list:\n    output += '\\n' + solution(line)\n\nprint(output) "
    },
    {
        "number": 4172,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    \n    def calculate_moves(a, k):\n        moves = 0\n        mx = max(a)\n        mn = min(a)\n        \n        while len(set(a)) > k:\n            if mx == mn:\n                return float('inf')\n            if a.count(mx) > a.count(mn):\n                idx = a.index(mx)\n                a[idx] -= 1\n                mx = max(a)\n            else:\n                idx = a.index(mn)\n                a[idx] += 1\n                mn = min(a)\n            moves += 1\n        return moves\n    \n    moves = calculate_moves(a, k)\n    return str(moves)"
    },
    {
        "number": 4172,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    moves = 0\n\n    while len(set(a)) > k:\n        if min(a) == 1:\n            break\n        if a.count(min(a)) > a.count(max(a)):\n            a[a.index(min(a))] -= 1\n            moves += 1\n        else:\n            a[a.index(max(a))] += 1\n            moves += 1\n\n    return str(moves)\n"
    },
    {
        "number": 4172,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n, k = map(int, input_list[0].split())\n    a = list(map(int, input_list[1].split()))\n\n    def get_min_max(arr):\n        min_val = min(arr)\n        max_val = max(arr)\n        min_idx = arr.index(min_val)\n        max_idx = arr.index(max_val)\n        return min_val, min_idx, max_val, max_idx\n\n    def find_diff(arr, target):\n        diff = [0] * (target + 1)\n        for num in arr:\n            diff[num] += 1\n        for i in range(target, -1, -1):\n            if diff[i] > 0:\n                return i\n        return None\n\n    min_val, min_idx, max_val, max_idx = get_min_max(a)\n\n    min_diff = min(min_val, max_val)\n    max_diff = max(min_val, max_val)\n    min_diff_count = a.count(min_diff)\n    max_diff_count = a.count(max_diff)\n\n    if min_diff_count >= k:\n        return 0\n    elif max_diff_count >= k:\n        return 0\n    elif min_diff_count + max_diff_count >= k:\n        return 0\n    else:\n        moves = 0\n        while min_diff_count + max_diff_count < k:\n            if min_diff < max_diff:\n                a[min_idx] += 1\n                min_val += 1\n                min_diff = find_diff(a, min_val)\n                if min_diff is None:\n                    break\n                min_idx = a.index(min_val)\n                min_diff_count += 1\n                moves += 1\n            else:\n                a[max_idx] -= 1\n                max_val -= 1\n                max_diff = find_diff(a, max_val)\n                if max_diff is None:\n                    break\n                max_idx = a.index(max_val)\n                max_diff_count += 1\n                moves += 1\n        return moves\n\n\ninput_list = [\n    \"6 5\",\n    \"1 2 2 4 2 3\",\n    \"7 5\",\n    \"3 3 2 1 1 1 3\"\n]\n\noutput_list = [\n    3,\n    4\n]\n\nfor i in range(len(input_list)):\n    stdin = input_list[i]\n    expected_output = output_list[i]\n    result = solution(stdin)\n    print(f\"Input: {stdin}\")\n    print(f\"Expected output: {expected_output}\")\n    print(f\"Output: {result}\")\n    print(\"*\" * 20) "
    },
    {
        "number": 4172,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    moves = 0\n\n    def min_max(a):\n        return min(a), max(a)\n\n    while k > 0:\n        min_val, max_val = min_max(a)\n        if min_val == max_val:\n            return moves\n\n        if min_val == a.count(min_val):\n            a[a.index(min_val)] += 1\n            moves += 1\n        else:\n            a[a.index(min_val)] += 1\n            moves += 1\n\n        k -= 1\n\n    return moves\n"
    },
    {
        "number": 4172,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    moves = 0\n\n    def find_min_max(a):\n        mn, mx = a[0], a[0]\n        for i in range(1, n):\n            if a[i] < mn:\n                mn = a[i]\n            elif a[i] > mx:\n                mx = a[i]\n        return mn, mx\n\n    while k > 0:\n        mn, mx = find_min_max(a)\n        if mn == mx:\n            break\n        if mn < mx:\n            if k % 2 == 0:\n                a[a.index(mn)] += 1\n                k -= 1\n            else:\n                a[a.index(mx)] -= 1\n                k -= 1\n        else:\n            if k % 2 == 0:\n                a[a.index(mx)] -= 1\n                k -= 1\n            else:\n                a[a.index(mn)] += 1\n                k -= 1\n        moves += 1\n\n    return str(moves)\n"
    },
    {
        "number": 4172,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    \n    min_val = min(a)\n    max_val = max(a)\n    \n    if k == n:\n        return 0\n    elif k > n - (min_val + max_val):\n        return -1\n    \n    min_count = a.count(min_val)\n    max_count = a.count(max_val)\n    \n    moves = 0\n    \n    if min_count > max_count:\n        moves += min_count - max_count\n        max_count = min_count\n    elif min_count < max_count:\n        moves += max_count - min_count\n        min_count = max_count\n    \n    if min_count + max_count < k:\n        return -1\n    \n    if k % 2 == 1:\n        moves += 2\n    else:\n        moves += 1\n    \n    return moves"
    },
    {
        "number": 4172,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.splitlines()\n    n, k = map(int, input_data[0].split())\n    a = list(map(int, input_data[1].split()))\n\n    max_value = max(a)\n    min_value = min(a)\n\n    moves = 0\n\n    for i in range(n):\n        if a[i] == max_value:\n            a[i] -= 1\n            moves += 1\n        elif a[i] == min_value:\n            a[i] += 1\n            moves += 1\n\n    while k > 0:\n        max_value = max(a)\n        min_value = min(a)\n\n        if max_value == min_value:\n            break\n\n        max_index = a.index(max_value)\n        min_index = a.index(min_value)\n\n        if a[max_index] > a[min_index]:\n            a[max_index] -= 1\n            moves += 1\n        else:\n            a[min_index] += 1\n            moves += 1\n\n        k -= 1\n\n    return str(moves)\n"
    },
    {
        "number": 4172,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    min_val = min(a)\n    max_val = max(a)\n\n    # initialize min and max counts\n    min_count = a.count(min_val)\n    max_count = a.count(max_val)\n\n    # update min and max counts\n    while min_count < k:\n        min_count += a.count(min_val + 1)\n        max_count -= a.count(max_val - 1)\n        min_val += 1\n        max_val -= 1\n\n    # calculate the minimum number of moves\n    return min(min_count - k, k - max_count)\n"
    },
    {
        "number": 4172,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def count_min_max(arr: List[int]) -> Tuple[int, int]:\n        min_val = arr[0]\n        max_val = arr[0]\n        min_count = 0\n        max_count = 0\n        for val in arr:\n            if val < min_val:\n                min_val = val\n                min_count = 1\n            elif val == min_val:\n                min_count += 1\n                \n            if val > max_val:\n                max_val = val\n                max_count = 1\n            elif val == max_val:\n                max_count += 1\n                \n        return min_val, max_val, min_count, max_count\n    \n    n, k = map(int, stdin.split()[:2])\n    arr = list(map(int, stdin.split()[2:]))\n    \n    min_val, max_val, min_count, max_count = count_min_max(arr)\n    min_moves = max_val - min_val + 1\n    max_moves = max_val - min_val\n    \n    min_moves = min(min_moves, k - min_count)\n    max_moves = min(max_moves, k - max_count)\n    \n    return min_moves + max_moves\n"
    },
    {
        "number": 4173,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q, *queries = stdin.split('\\n')\n    q = int(q)\n\n    def compute_min_cost(n, a, b):\n        one_liters = n // 1\n        two_liters = n % 1\n        one_cost = a\n        two_cost = b\n        total_cost = 0\n        if one_liters > 0:\n            total_cost += one_liters * one_cost\n        if two_liters > 0:\n            if two_liters * two_cost > one_cost * 2:\n                total_cost += two_liters * two_cost\n            else:\n                total_cost += one_liters * 2 * one_cost + (two_liters * two_cost - one_cost)\n        return total_cost\n\n    result = []\n    for i in range(q):\n        n, a, b = map(int, queries[i].split())\n        result.append(compute_min_cost(n, a, b))\n\n    return '\\n'.join(map(str, result))\n"
    },
    {
        "number": 4173,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    q = int(input())\n    queries = []\n    for _ in range(q):\n        queries.append(list(map(int, input().split())))\n    \n    for query in queries:\n        n, a, b = query\n        m1 = n // a\n        m2 = n % a\n        if m2 == 0:\n            print(m1 * a * b)\n        else:\n            m2_liters = n - m1 * a\n            m2_bottles = m2_liters // b\n            m2_remaining_water = m2_liters % b\n            if m2_remaining_water == 0:\n                print(m1 * a * b + m2_bottles * b)\n            else:\n                print(m1 * a * b + m2_bottles * b + m2_remaining_water)\n\n\ninput_data = \"\"\"4\n10 1 3\n7 3 2\n1 1000 1\n1000000000000 42 88\n\"\"\"\n\nsolution(input_data) "
    },
    {
        "number": 4173,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split()[0])\n    queries = []\n    for _ in range(q):\n        queries.append([int(x) for x in stdin.split()[1:]])\n    \n    def min_cost(n, a, b):\n        if n % 2 == 0:\n            return n * a\n        else:\n            x = n // 2\n            return x * a + (x + 1) * b\n    \n    result = []\n    for n, a, b in queries:\n        result.append(min_cost(n, a, b))\n        \n    return \" \".join(str(x) for x in result)\n\n\ninput_data = \"\"\"4\n10 1 3\n7 3 2\n1 1000 1\n1000000000000 42 88\"\"\"\n\nprint(solution(input_data)) "
    },
    {
        "number": 4173,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    queries = []\n    for _ in range(q):\n        n, a, b = map(int, input().split())\n        queries.append((n, a, b))\n    \n    for n, a, b in queries:\n        min_cost = float('inf')\n        for i in range(n // 1 + 1):\n            cost = a * i + b * (n - i)\n            if cost < min_cost:\n                min_cost = cost\n        print(min_cost)\n    \n    return '\\n'.join(str(min_cost) for n, a, b in queries)"
    },
    {
        "number": 4173,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def buy_water(n: int, a: int, b: int) -> int:\n        if n % 2 == 0:\n            return n * a\n        else:\n            bottles = n // 2\n            return a * bottles + b * (bottles + 1)\n\n    q = int(stdin.split()[0])\n    result = []\n    for i in range(1, q + 1):\n        n, a, b = map(int, stdin.split()[i].split())\n        result.append(buy_water(n, a, b))\n    return '\\n'.join(map(str, result))\n"
    },
    {
        "number": 4173,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split(\"\\n\")[0])\n    queries = stdin.split(\"\\n\")[1:]\n    result = []\n\n    for query in queries:\n        n, a, b = map(int, query.split())\n        if n % 2 == 0:\n            total = n * min(a, b)\n        else:\n            total = n * min(a, b) + min(a, b)\n        result.append(total)\n\n    return \"\\n\".join(map(str, result))\n\ninput_string = \"\"\"4\n10 1 3\n7 3 2\n1 1000 1\n1000000000000 42 88\"\"\"\n\noutput_string = solution(input_string)\nprint(output_string)"
    },
    {
        "number": 4173,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.splitlines()\n    q = int(input_data[0])\n    output = []\n    \n    for i in range(1, len(input_data)):\n        n, a, b = map(int, input_data[i].split())\n        min_cost = min(a, b) * n\n        output.append(min_cost)\n    \n    return '\\n'.join(map(str, output))"
    },
    {
        "number": 4173,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split('\\n')[0])\n    queries = []\n    for i in range(1, q+1):\n        n, a, b = map(int, stdin.split('\\n')[i].split())\n        queries.append((n, a, b))\n    \n    def min_cost(n, a, b):\n        one_liters = n // 2\n        bottles = n % 2\n        return one_liters * a + bottles * b\n    \n    result = [min_cost(q[0], q[1], q[2]) for q in queries]\n    \n    return '\\n'.join(map(str, result))\n"
    },
    {
        "number": 4173,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def find_min_cost(n: int, a: int, b: int) -> int:\n        # find the minimum number of 1-liter bottles\n        bottles_1 = n // 1\n        # find the minimum number of 2-liter bottles\n        bottles_2 = n - bottles_1\n        # calculate the minimum cost\n        min_cost = bottles_1 * a + bottles_2 * b\n        return min_cost\n\n    q = int(stdin.splitlines()[0])\n    result = []\n    for i in range(1, q + 1):\n        n, a, b = map(int, stdin.splitlines()[i].split())\n        min_cost = find_min_cost(n, a, b)\n        result.append(min_cost)\n\n    return '\\n'.join(map(str, result))\n\n\ninput_str = \"\"\"4\n10 1 3\n7 3 2\n1 1000 1\n1000000000000 42 88\"\"\"\noutput_str = solution(input_str)\nprint(output_str)"
    },
    {
        "number": 4173,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    output = []\n    for _ in range(q):\n        n, a, b = map(int, input().split())\n        m = min((n // 1) * a, (n // 2) * b)\n        output.append(m)\n    return \"\\n\".join(map(str, output))\n"
    },
    {
        "number": 4174,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    L = list(map(int, stdin.split()))\n\n    count = 0\n    for i in range(1, N+1):\n        if L[i-1] + sum(L[:i-1]) <= X:\n            count += 1\n\n    return str(count)\n\n\ninput_stdin = \"3 6\\n3 4 5\"\nprint(solution(input_stdin)) # Output: 2 "
    },
    {
        "number": 4174,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_values = list(map(int, stdin.split()))\n    N = input_values[0]\n    X = input_values[1]\n    L = input_values[2:]\n\n    count = 0\n    for i in range(N):\n        if L[i] <= X:\n            count += 1\n\n    return str(count)\n\ninput_string = \"3 6\\n3 4 5\"\noutput = solution(input_string)\nprint(output) "
    },
    {
        "number": 4174,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, input().split())\n    L = list(map(int, input().split()))\n    bounces = [0] * (N + 1)\n    bounces[0] = 0\n    for i in range(1, N + 1):\n        bounces[i] = bounces[i - 1] + L[i - 1]\n    count = 0\n    for bounce in bounces:\n        if bounce <= X:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4174,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    L = list(map(int, stdin.split()[1:]))\n    count = 0\n    for i in range(1, N+1):\n        if L[i-1] + D[i-1] <= X:\n            count += 1\n    return count\n\nN, X = map(int, input().split())\nL = list(map(int, input().split()))\n\nD = [0]\nfor i in range(1, N+1):\n    D.append(D[i-1] + L[i-1])\n\nprint(solution(N, X, L))"
    },
    {
        "number": 4174,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split()[:2])\n    L = list(map(int, stdin.split()[2:]))\n\n    count = 0\n    for i in range(N):\n        if L[i] + D_1 <= X:\n            count += 1\n            D_1 += L[i]\n\n    return str(count)\n"
    },
    {
        "number": 4174,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split()\n    N, X = map(int, input_data[:2])\n    L = list(map(int, input_data[2:]))\n    \n    count = 0\n    for l in L:\n        X -= l\n        if X >= 0:\n            count += 1\n    \n    return count\n"
    },
    {
        "number": 4174,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    L = list(map(int, stdin.split()))[:N]\n    count = 0\n\n    for i in range(1, N + 1):\n        if L[i - 1] + sum(L[:i - 1]) <= X:\n            count += 1\n\n    return count\n"
    },
    {
        "number": 4174,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    N, X = map(int, input_list[0].split())\n    L = list(map(int, input_list[1].split()))\n    \n    count = 0\n    for i in range(1, N+1):\n        if L[i-1] + D[i-1] <= X:\n            count += 1\n    \n    return str(count)\n\nstdin = \"3 6\\n3 4 5\"\nresult = solution(stdin)\nprint(result) "
    },
    {
        "number": 4174,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    L = list(map(int, stdin.split()[1:]))\n    count = 0\n\n    for i in range(1, N + 1):\n        coordinate = L[i - 1] + (L[i - 2] if i > 1 else 0)\n        if coordinate <= X:\n            count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4174,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def bounce(N, L):\n        D = [0] * (N + 1)\n        for i in range(2, N + 1):\n            D[i] = D[i - 1] + L[i - 1]\n        count = 0\n        for i in range(1, N + 1):\n            if D[i] <= X:\n                count += 1\n        return count\n\n    N, X = map(int, stdin.split())\n    L = list(map(int, stdin.split()[1:]))\n    return bounce(N, L)\n\n\ndef"
    },
    {
        "number": 4175,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    words = stdin.split('\\n')[1:]\n    word_set = set()\n    for i in range(N):\n        if words[i] in word_set:\n            return \"No\"\n        word_set.add(words[i])\n        if i > 0 and words[i][0] != words[i-1][-1]:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4175,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, *W = stdin.split()\n    N = int(N)\n\n    words = set(W)\n\n    for i in range(N):\n        last_word = W[i]\n        if last_word in words:\n            words.remove(last_word)\n        else:\n            return \"No\"\n\n    return \"Yes\"\n"
    },
    {
        "number": 4175,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    N = int(input_list[0])\n    words_list = input_list[1:]\n    \n    last_word = \"\"\n    for word in words_list:\n        if word in words_list[:words_list.index(word)]:\n            return \"No\"\n        if word[0] != last_word[-1]:\n            return \"No\"\n        last_word = word\n        \n    return \"Yes\""
    },
    {
        "number": 4175,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    words = stdin.split('\\n')[1:]\n    last_word = ''\n    for i, word in enumerate(words):\n        if word in words[:i]:\n            return 'No'\n        if i > 0 and word[0] != last_word[-1]:\n            return 'No'\n        last_word = word\n    return 'Yes'"
    },
    {
        "number": 4175,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, W = input().split()\n    words = {}\n    for i in range(N):\n        word = input().split()[0]\n        if word[0] == word[-1]:\n            if word[0] in words:\n                return \"No\"\n            words[word[0]] = word\n    return \"Yes\"\n\ndef"
    },
    {
        "number": 4175,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, words = int(stdin.split()[0]), stdin.split()[1:]\n    last_word = ''\n\n    for word in words:\n        if word == last_word:\n            return 'No'\n        elif not word[0] == last_word[-1]:\n            return 'No'\n        last_word = word\n\n    return 'Yes'"
    },
    {
        "number": 4175,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    last_word = ''\n    words_set = set(words)\n    for word in words:\n        if word == last_word:\n            return 'No'\n        if not last_word or word[0] == last_word[-1]:\n            last_word = word\n            if word in words_set:\n                words_set.remove(word)\n    return 'Yes'\n"
    },
    {
        "number": 4175,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    words = [stdin[i] for i in range(1, N + 1)]\n\n    if N == 1:\n        return \"Yes\"\n\n    last_word = words[0]\n    last_char = last_word[0]\n\n    for i in range(1, N):\n        current_word = words[i]\n        current_char = current_word[0]\n\n        if current_word in words[:i] or current_char != last_char:\n            return \"No\"\n\n        last_word = current_word\n        last_char = current_char\n\n    return \"Yes\"\n"
    },
    {
        "number": 4175,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, W_i = [], []\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    W_i = lines[1:]\n\n    words = set()\n    for w in W_i:\n        if w[0] == w[-1] or w[0] in words:\n            return \"No\"\n        words.add(w)\n    return \"Yes\"\n"
    },
    {
        "number": 4175,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, words = int(stdin.splitlines()[0]), stdin.splitlines()[1:]\n    last_word = ''\n    words_seen = set()\n\n    for word in words:\n        if word in words_seen:\n            return 'No'\n        if not word.startswith(last_word[-1]):\n            return 'No'\n        words_seen.add(word)\n        last_word = word\n\n    return 'Yes'\n"
    },
    {
        "number": 4176,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return max(A, B)\n\nstdin = input(\"Enter A and B separated by a space: \")\nresult = solution(stdin)\nprint(result) "
    },
    {
        "number": 4176,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return min(A + B, A + B - 1)\n\n\ndef"
    },
    {
        "number": 4176,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    A, B = map(int, input_list)\n    min_pieces = max(A, B)\n    return str(min_pieces)\n"
    },
    {
        "number": 4176,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return min(A + B - 1, B)\n\ninput_str = input()\nresult = solution(input_str)\nprint(result)"
    },
    {
        "number": 4176,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return min(A + B - 1, A + B // 2)\n\ndef"
    },
    {
        "number": 4176,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    min_snack_pieces = min(A + B, A + B - 1)\n    return str(min_snack_pieces)\n"
    },
    {
        "number": 4176,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A > B:\n        A, B = B, A\n    if A == 1:\n        return str(B)\n    return str((A + B) // 2)\n\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4176,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return min(A // 2, B // 2) * 2 + min(A % 2 + B % 2, A % 2 + B % 2)\n\ninput_str = input()\noutput_str = solution(input_str)\nprint(output_str) "
    },
    {
        "number": 4176,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    min_pieces = min(A // 2 * B, B // 2 * A)\n    return str(min_pieces)\n"
    },
    {
        "number": 4176,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    min_pieces = min(A, B)\n    return str(min_pieces)\n\n\ninput_stdin = \"2 3\"\nprint(solution(input_stdin)) "
    },
    {
        "number": 4177,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(stdin, 'x' * len(stdin))\n"
    },
    {
        "number": 4177,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    return 'x' * len(S)\n\n\ndef"
    },
    {
        "number": 4177,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"x\" * len(stdin)"
    },
    {
        "number": 4177,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S = input()\n    result = \"\"\n    for char in S:\n        result += \"x\"\n    return result"
    },
    {
        "number": 4177,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S = input()\n    return \"x\" * len(S)"
    },
    {
        "number": 4177,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(stdin, \"x\" * len(stdin))"
    },
    {
        "number": 4177,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(stdin, 'x' * len(stdin))\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4177,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    result = \"\"\n    for char in s:\n        result += \"x\"\n    return result"
    },
    {
        "number": 4177,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    return \"x\" * len(s)"
    },
    {
        "number": 4177,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(stdin, 'x' * len(stdin))\n\ndef"
    },
    {
        "number": 4178,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *H = map(int, stdin.split())\n    dp = [1] * N\n    for i in range(1, N):\n        for j in range(i):\n            if H[i] > H[j]:\n                dp[i] = max(dp[i], dp[j]+1)\n    return \"Yes\" if dp[-1] == N else \"No\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, *H = map(int, stdin.split())\n    dp = [0] * N\n    dp[0] = H[0]\n    for i in range(1, N):\n        dp[i] = max(dp[i-1], H[i])\n    if dp[-1] == H[-1]:\n        return \"Yes\"\n    return \"No\"\n\nN = int(input())\nH = list(map(int, input().split()))\nprint(solution(str(N) + \" \" + \" \".join(map(str, H)))) "
    },
    {
        "number": 4178,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def non_decreasing_sequence(heights: list) -> bool:\n        for i in range(len(heights) - 1):\n            if heights[i] > heights[i + 1]:\n                return False\n        return True\n\n    n = int(stdin.split()[0])\n    heights = list(map(int, stdin.split()[1:]))\n\n    if non_decreasing_sequence(heights):\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, *H = map(int, stdin.split())\n    dp = [0] * N\n    for i in range(N - 1, -1, -1):\n        dp[i] = max(dp[i + 1] - 1, H[i])\n    return \"Yes\" if all(dp[i] >= dp[i - 1] for i in range(1, N)) else \"No\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def non_decreasing_sequence(sequence: list) -> bool:\n        for i in range(1, len(sequence)):\n            if sequence[i] < sequence[i - 1]:\n                return False\n        return True\n\n    N, *H = map(int, stdin.split())\n    heights = [H[0]]\n    for h in H[1:]:\n        # If the height of the current square is greater than the height of the last square, increase the height of the last square by 1.\n        if h > heights[-1]:\n            heights[-1] += 1\n        # Decrease the height of the current square by 1.\n        heights.append(h - 1)\n    return \"Yes\" if non_decreasing_sequence(heights) else \"No\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, *H = map(int, stdin.split())\n    dp = [0] * N\n\n    for i in range(N):\n        dp[i] = H[i]\n\n        for j in range(i):\n            if dp[i] > dp[j] + 1:\n                dp[i] = dp[j] + 1\n\n    if dp == sorted(H):\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    heights = list(map(int, stdin.split()[1:]))\n\n    for i in range(1, N):\n        if heights[i] < heights[i - 1]:\n            return \"No\"\n\n    return \"Yes\"\n\n\ndef"
    },
    {
        "number": 4178,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, *H = map(int, stdin.split())\n    \n    for i in range(1, N):\n        if H[i-1] <= H[i]:\n            continue\n        elif H[i] > H[i-1] + 1:\n            return \"No\"\n        else:\n            return \"No\"\n    \n    return \"Yes\""
    },
    {
        "number": 4178,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, *H = map(int, stdin.split())\n    prev = H[0]\n    for h in H[1:]:\n        if h < prev:\n            return \"No\"\n        prev = h\n    return \"Yes\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_list = list(map(int, stdin.split()))\n    N = input_list[0]\n    heights = input_list[1:]\n\n    non_decreasing = True\n    for i in range(N - 1):\n        if heights[i] >= heights[i + 1]:\n            non_decreasing = False\n            break\n\n    return \"Yes\" if non_decreasing else \"No\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, C = map(int, stdin.split()[:3])\n    B = list(map(int, stdin.split()[3:]))\n    A = [list(map(int, stdin.split()[i+3:i+M+3])) for i in range(N)]\n\n    count = 0\n    for i in range(N):\n        result = sum(A[i][j] * B[j] for j in range(M)) + C\n        if result > 0:\n            count += 1\n\n    return str(count)\n\ninput_str = \"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\"\nprint(solution(input_str)) "
    },
    {
        "number": 4179,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M, C = map(int, stdin.split()[:3])\n    B = list(map(int, stdin.split()[3:3+M]))\n    A = [list(map(int, stdin.split()[3+M:3+M*(i+1)])) for i in range(N)]\n\n    correct_codes = 0\n    for i in range(N):\n        if sum(A[i][j] * B[j] for j in range(M)) + C > 0:\n            correct_codes += 1\n\n    return str(correct_codes)\n"
    },
    {
        "number": 4179,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M, C = map(int, stdin.split()[:3])\n    B = list(map(int, stdin.split()[3:M+3]))\n    A = [[int(x) for x in stdin.split()[3+M+i:3+M+i+M]] for i in range(N)]\n\n    result = 0\n    for i in range(N):\n        total = sum(A[i][j] * B[j] for j in range(M)) + C\n        if total > 0:\n            result += 1\n\n    return str(result)\n\n\ndef"
    },
    {
        "number": 4179,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M, C = map(int, stdin.split()[:3])\n    B = list(map(int, stdin.split()[3:3+M]))\n    A = [[int(x) for x in input().split()] for _ in range(N)]\n\n    correct_codes = 0\n    for a in A:\n        if sum(a[i] * B[i] for i in range(M)) + C > 0:\n            correct_codes += 1\n\n    return str(correct_codes)"
    },
    {
        "number": 4179,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M, C = map(int, stdin.split()[:3])\n    B = list(map(int, stdin.split()[3:]))\n    A = [list(map(int, stdin.split())) for _ in range(N)]\n\n    correct_codes = 0\n    for i in range(N):\n        if sum(A[i][j] * B[j] for j in range(M)) + C > 0:\n            correct_codes += 1\n\n    return str(correct_codes)\n\n\ninput_data = \"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\"\nprint(solution(input_data)) "
    },
    {
        "number": 4179,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M, C = map(int, stdin.split()[:3])\n    B = list(map(int, stdin.split()[3:]))\n    A = []\n    for _ in range(N):\n        A.append(list(map(int, stdin.split())))\n    count = 0\n    for i in range(N):\n        if sum(A[i][j] * B[j] for j in range(M)) + C > 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4179,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M, C = map(int, stdin.split()[:3])\n    B = list(map(int, stdin.split()[3:]))\n    A = [list(map(int, stdin.split()[3+M:]))]\n    \n    count = 0\n    for i in range(N):\n        if sum(A[i][j] * B[j] for j in range(M)) + C > 0:\n            count += 1\n    \n    return str(count)\n"
    },
    {
        "number": 4179,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M, C = map(int, stdin.split())\n    B = list(map(int, stdin.split()))\n    A = [list(map(int, stdin.split())) for _ in range(N)]\n    correct_codes = 0\n\n    for i in range(N):\n        if sum([A[i][j] * B[j] for j in range(M)]) + C > 0:\n            correct_codes += 1\n\n    return str(correct_codes)\n\n\ndef"
    },
    {
        "number": 4179,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M, C = map(int, stdin.split()[:3])\n    B = list(map(int, stdin.split()[3:3+M]))\n    A = [list(map(int, stdin.split()[i:i+M])) for i in range(4+M*N, 4+M*N+N*M, M)]\n\n    correct_codes = 0\n    for i in range(N):\n        total_sum = sum(A[i][j] * B[j] for j in range(M))\n        if total_sum + C > 0:\n            correct_codes += 1\n\n    return str(correct_codes)"
    },
    {
        "number": 4179,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M, C = map(int, input().split())\n    B = list(map(int, input().split()))\n    A = []\n    for _ in range(N):\n        A.append(list(map(int, input().split())))\n\n    correct_codes = 0\n    for i in range(N):\n        if sum(A[i][j] * B[j] for j in range(M)) + C > 0:\n            correct_codes += 1\n\n    return str(correct_codes)\n"
    },
    {
        "number": 4180,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read the input from the standard input\n    N = int(stdin.strip())\n\n    # calculate the number of 1000-yen bills required\n    num_1000 = N // 1000\n\n    # calculate the remaining amount in yen\n    remaining = N % 1000\n\n    # calculate the number of 500-yen bills required\n    num_500 = remaining // 500\n\n    # calculate the remaining amount in yen\n    remaining = remaining % 500\n\n    # calculate the number of 100-yen bills required\n    num_100 = remaining // 100\n\n    # calculate the remaining amount in yen\n    remaining = remaining % 100\n\n    # calculate the number of 50-yen bills required\n    num_50 = remaining // 50\n\n    # calculate the remaining amount in yen\n    remaining = remaining % 50\n\n    # calculate the number of 10-yen bills required\n    num_10 = remaining // 10\n\n    # calculate the remaining amount in yen\n    remaining = remaining % 10\n\n    # calculate the number of 5-yen bills required\n    num_5 = remaining // 5\n\n    # calculate the remaining amount in yen\n    remaining = remaining % 5\n\n    # calculate the number of 1-yen bills required\n    num_1 = remaining\n\n    # calculate the total amount of change\n    total_change = num_1000 * 1000 + num_500 * 500 + num_100 * 100 + num_50 * 50 + num_10 * 10 + num_5 * 5 + num_1 * 1\n\n    # return the total amount of change as a string\n    return str(total_change)"
    },
    {
        "number": 4180,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    bills = [1000, 500, 100, 50, 10, 5, 1]\n    bills_used = [0] * len(bills)\n    total_bills = 0\n    for i in range(len(bills)):\n        if N >= bills[i]:\n            bills_used[i] = N // bills[i]\n            total_bills += bills_used[i]\n            N %= bills[i]\n    change = N * 100\n    return str(change)\n"
    },
    {
        "number": 4180,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    num_of_bills = N // 1000\n    change = N - (num_of_bills * 1000)\n    return change\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4180,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    bills = [1000, 500, 100, 50, 10, 5, 1]\n    count = [0] * len(bills)\n    for i, bill in enumerate(bills):\n        if N >= bill:\n            count[i] = N // bill\n            N %= bill\n    return count[0] * bills[0] + count[1] * bills[1] + count[2] * bills[2] + count[3] * bills[3] + count[4] * bills[4] + count[5] * bills[5] + count[6] * bills[6]\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4180,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    change = N % 1000\n    return str(change)\n"
    },
    {
        "number": 4180,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if 1 <= N <= 10000:\n        # calculate the number of 1000-yen bills needed\n        bills = N // 1000\n\n        # calculate the amount of change\n        change = N - bills * 1000\n\n        return str(change)\n    else:\n        return \"N must be between 1 and 10000.\" "
    },
    {
        "number": 4180,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    bills = [1000, 500, 100, 50, 10, 5, 1]\n    change = 0\n    for bill in bills:\n        if N >= bill:\n            N -= bill\n            change += 1\n    return str(change)\n"
    },
    {
        "number": 4180,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N = int(stdin)\n\n    # calculate change\n    change = N % 1000\n\n    return str(change)"
    },
    {
        "number": 4180,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    bills = [1000, 500, 100, 50, 10, 5, 1]\n    num_bills = [0] * len(bills)\n\n    for i, bill in enumerate(bills):\n        num_bills[i], N = divmod(N, bill)\n\n    change = sum(bill * num_bills[i] for i, bill in enumerate(bills))\n    return str(change)\n"
    },
    {
        "number": 4180,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n\n    if N <= 0 or N > 10000:\n        raise ValueError(\"N should be between 1 and 10000\")\n\n    bills = [1000, 500, 100, 50, 10, 5, 1]\n    total_bills = 0\n\n    for bill in bills:\n        total_bills += N // bill\n        N %= bill\n\n    return total_bills\n\ndef"
    },
    {
        "number": 4181,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A_str, B_str = stdin.split()\n    N = int(N)\n    A = list(map(int, A_str.split()))\n    B = list(map(int, B_str.split()))\n\n    dp = [0] * (N + 1)\n    for i in range(N):\n        dp[i + 1] = max(dp[i + 1], dp[i] + A[i])\n        dp[i + 2] = max(dp[i + 2], dp[i + 1] + A[i + 1])\n\n    for i in range(N - 1):\n        for j in range(i + 2, N + 1):\n            dp[j] = max(dp[j], dp[i + 1] + A[i + 1] + A[j - 1])\n\n    return str(max(dp))\n"
    },
    {
        "number": 4181,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, A_i, B_i = 0, [], []\n    \n    # Read input\n    for line in stdin.split(\"\\n\"):\n        if N == 0:\n            N = int(line)\n        elif len(A_i) < N+1:\n            A_i.append(int(line))\n        else:\n            B_i.append(int(line))\n    \n    # Initialize variables\n    dp = [0] * (N+1)\n    monsters_defeated = 0\n    \n    # Iterate through all possible combinations of monsters to defeat\n    for i in range(N):\n        dp[i+1] = min(dp[i]+B_i[i], A_i[i+1]+B_i[i+1])\n        monsters_defeated += dp[i+1]\n    \n    return str(monsters_defeated)"
    },
    {
        "number": 4181,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, A_i, B_i = 0, [], []\n    \n    # Read input\n    i, j = 0, 0\n    while i < N+1:\n        line = stdin.split(\"\\n\")[i]\n        if i == 0:\n            N = int(line)\n        else:\n            A_i.append(int(line))\n        i += 1\n        \n    while j < N:\n        line = stdin.split(\"\\n\")[i]\n        B_i.append(int(line))\n        j += 1\n        i += 1\n        \n    # Calculate the maximum total number of monsters the heroes can defeat\n    max_monsters = 0\n    for i in range(N):\n        max_monsters += min(A_i[i], B_i[i])\n    \n    # Return the result\n    return str(max_monsters)"
    },
    {
        "number": 4181,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    A = list(map(int, stdin[1].split()))\n    B = list(map(int, stdin[2].split()))\n    \n    total_monsters = 0\n    for i in range(N):\n        total_monsters += min(B[i], A[i+1])\n    \n    return str(total_monsters)"
    },
    {
        "number": 4181,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, A_i, B_i = 0, [], []\n    input_data = stdin.split()\n    N = int(input_data[0])\n    A_i = [int(x) for x in input_data[1:N+2]]\n    B_i = [int(x) for x in input_data[N+2:]]\n    max_monsters = 0\n\n    for i in range(N):\n        monsters_to_defeat = min(A_i[i], B_i[i])\n        max_monsters += monsters_to_defeat\n\n    return str(max_monsters)"
    },
    {
        "number": 4181,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, A_i, B_i = [], [], []\n    N, A_i, B_i = list(map(int, stdin.split()))\n    heroes_defeated = 0\n    for i in range(N):\n        if A_i[i] > B_i[i]:\n            heroes_defeated += B_i[i]\n            A_i[i+1] -= B_i[i]\n            B_i[i] = 0\n    heroes_defeated += sum(A_i)\n    return str(heroes_defeated)\n"
    },
    {
        "number": 4181,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def get_maximum_monsters(towns: list, heroes: list) -> int:\n        total_monsters = 0\n        for i in range(len(towns)):\n            if i == 0:\n                total_monsters += towns[i]\n            else:\n                total_monsters += min(heroes[i-1], towns[i])\n        return total_monsters\n\n    N = int(stdin.split('\\n')[0])\n    A_i = list(map(int, stdin.split('\\n')[1].split()))\n    B_i = list(map(int, stdin.split('\\n')[2].split()))\n\n    towns = [sum(A_i[:i+1]) for i in range(N+1)]\n    heroes = [min(B_i[i], B_i[i+1]) for i in range(N-1)] + [B_i[-1]]\n\n    return get_maximum_monsters(towns, heroes)\n\ninput_data = \"\"\"2\n3 5 2\n4 5\"\"\"\n\nprint(solution(input_data)) "
    },
    {
        "number": 4181,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    A = list(map(int, stdin.split(\"\\n\")[1].split()))\n    B = list(map(int, stdin.split(\"\\n\")[2].split()))\n\n    total_monsters = 0\n\n    for i in range(N):\n        total_monsters += min(A[i], B[i])\n\n    return str(total_monsters)\n"
    },
    {
        "number": 4181,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, A_str, B_str = stdin.split('\\n')\n    N = int(N)\n    A = list(map(int, A_str.split()))\n    B = list(map(int, B_str.split()))\n\n    dp = [0] * (N + 1)\n    for i in range(N):\n        dp[i + 1] = max(dp[i] + B[i], dp[i + 1] + A[i])\n    return dp[N]\n"
    },
    {
        "number": 4181,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, A_str, B_str = map(int, stdin.split())\n    A = list(map(int, A_str.split()))\n    B = list(map(int, B_str.split()))\n\n    dp = [0] * (N + 1)\n    for i in range(1, N + 1):\n        dp[i] = max(dp[i - 1] + A[i - 1], dp[i - 2] + B[i - 1])\n\n    return dp[N]\n"
    },
    {
        "number": 4182,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, Y = map(int, stdin.split()[:4])\n    x_coords = list(map(int, stdin.split()[4:4+N]))\n    y_coords = list(map(int, stdin.split()[4+N:]))\n\n    if any(X < z <= Y for z in x_coords) and any(y_coords[i] >= z for i in range(M) for z in x_coords) and all(x_coords[i] < z for i in range(N) for z in y_coords[:i]):\n        return \"War\"\n    else:\n        return \"No War\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, Y = map(int, stdin.split())\n    x = list(map(int, stdin.split()[1:N+1]))\n    y = list(map(int, stdin.split()[N+1:]))\n    \n    x_set = set(x)\n    y_set = set(y)\n    \n    if not x_set.isdisjoint(y_set):\n        return \"War\"\n    \n    x_set.remove(X)\n    \n    if any(x_i <= X for x_i in x_set) or X > Y:\n        return \"War\"\n    \n    y_set.remove(Y)\n    \n    if any(y_i >= Y for y_i in y_set) or X > Y:\n        return \"War\"\n    \n    return \"No War\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    N = int(input_list[0])\n    M = int(input_list[1])\n    X = int(input_list[2])\n    Y = int(input_list[3])\n    x_list = list(map(int, input_list[4:4+N]))\n    y_list = list(map(int, input_list[4+N:]))\n\n    if X < min(x_list) or max(y_list) < Y or X > max(x_list) + 1 or Y < min(y_list) - 1:\n        return \"War\"\n    else:\n        return \"No War\"\n\ninput_str = \"3 2 10 20\\n8 15 13\\n16 22\"\nprint(solution(input_str))\n"
    },
    {
        "number": 4182,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, Y = map(int, stdin.split()[:4])\n    x_list = list(map(int, stdin.split()[4:4+N]))\n    y_list = list(map(int, stdin.split()[4+N:]))\n    \n    x_list.sort()\n    y_list.sort()\n    \n    if X < min(x_list) or max(y_list) < Y:\n        return \"War\"\n    \n    for i in range(N):\n        if x_list[i] < X:\n            return \"War\"\n        \n    for i in range(M):\n        if y_list[i] >= Y:\n            return \"War\"\n        \n    return \"No War\"\n\n\ndef"
    },
    {
        "number": 4182,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, Y = map(int, stdin.split())\n    x = list(map(int, input().split()))\n    y = list(map(int, input().split()))\n\n    for i in range(N):\n        if x[i] == X:\n            return \"War\"\n        if x[i] == Y:\n            return \"War\"\n        if x[i] >= Y:\n            return \"War\"\n        if x[i] < X:\n            for j in range(M):\n                if y[j] == X:\n                    return \"War\"\n                if y[j] == Y:\n                    return \"War\"\n                if y[j] <= X:\n                    return \"War\"\n            return \"No War\"\n\n    for j in range(M):\n        if y[j] == X:\n            return \"War\"\n        if y[j] == Y:\n            return \"War\"\n        if y[j] >= Y:\n            return \"War\"\n        if y[j] < X:\n            for i in range(N):\n                if x[i] == X:\n                    return \"War\"\n                if x[i] == Y:\n                    return \"War\"\n                if x[i] <= X:\n                    return \"War\"\n            return \"No War\"\n\n    return \"No War\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    N, M, X, Y = map(int, input_list[0].split())\n    x_list = list(map(int, input_list[1].split()))\n    y_list = list(map(int, input_list[2].split()))\n\n    x_list.sort()\n    y_list.sort()\n\n    if X < min(y_list) or max(x_list) < Y:\n        return \"War\"\n\n    return \"No War\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, Y = map(int, stdin.split()[:4])\n    x_arr = list(map(int, stdin.split()[4:4+N]))\n    y_arr = list(map(int, stdin.split()[4+N:]))\n\n    # check if X is between Z and Y\n    if X < X + Y < 2 * Y:\n        for x in x_arr:\n            if x > X:\n                for y in y_arr:\n                    if y <= X:\n                        return \"War\"\n    return \"No War\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, Y = map(int, stdin.split())\n    x_list = list(map(int, stdin.split()[N:]))\n    y_list = list(map(int, stdin.split()[N+1:]))\n\n    for i in range(N):\n        if x_list[i] == X:\n            return \"War\"\n    for i in range(M):\n        if y_list[i] == Y:\n            return \"War\"\n\n    for z in range(min(X, Y), max(X, Y) + 1):\n        if X < z <= Y:\n            if all(x < z for x in x_list) and all(y >= z for y in y_list):\n                return \"War\"\n    return \"No War\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, Y = map(int, stdin.split())\n    x_coords = list(map(int, stdin.split()[1:N + 1]))\n    y_coords = list(map(int, stdin.split()[N + 1:]))\n    \n    # Check if there exists an integer Z that satisfies all three conditions\n    for z in range(X, Y + 1):\n        if all(x < z for x in x_coords) and all(y_coords[i] >= z for i in range(M)):\n            return \"No War\"\n    \n    return \"War\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, Y = map(int, stdin.split())\n    x_list = list(map(int, stdin.split()[1:N+1]))\n    y_list = list(map(int, stdin.split()[N+1:]))\n\n    x_list.sort()\n    y_list.sort()\n\n    for i in range(1, N):\n        if x_list[i] <= x_list[0]:\n            return \"War\"\n\n    for i in range(1, M):\n        if y_list[i] >= y_list[-1]:\n            return \"War\"\n\n    Z = min(x_list[N-1], y_list[0])\n\n    if X < Z <= Y:\n        for i in range(N):\n            if x_list[i] < Z:\n                return \"War\"\n\n        for i in range(M):\n            if y_list[i] >= Z:\n                return \"War\"\n\n        return \"No War\"\n    else:\n        return \"War\"\n"
    },
    {
        "number": 4183,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split(\"\\n\")\n    N = int(input_data[0])\n    T = [int(t) for t in input_data[1:]]\n    total_time = 0\n\n    for i in range(1, N + 1):\n        total_time += (T[i - 1] * (i - 1)) // N\n\n    return str(total_time)\n"
    },
    {
        "number": 4183,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, *T = map(int, stdin.split())\n    max_t = max(T)\n    return str((N-1) * max_t + sum(T))\n"
    },
    {
        "number": 4183,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, *T = map(int, stdin.split())\n    total_time = sum(T)\n    return str(total_time)\n\ndef"
    },
    {
        "number": 4183,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    total_time = 0\n    \n    for i in range(1, N+1):\n        total_time += T * (i-1)\n    \n    return str(total_time)"
    },
    {
        "number": 4183,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    N = int(input_list[0])\n    T_list = list(map(int, input_list[1:]))\n\n    total_time = 0\n    for T in T_list:\n        total_time += (360 // T) * T\n\n    return total_time\n\ninput_str = \"2\\n2\\n3\"\noutput = solution(input_str)\nprint(output) "
    },
    {
        "number": 4183,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, *T = [int(x) for x in stdin.split()]\n\n    max_T = max(T)\n    total_time = (N - 1) * max_T\n\n    for i in range(1, N):\n        total_time += (max_T // T[i]) * T[i]\n\n    return str(total_time)\n"
    },
    {
        "number": 4183,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, *T = map(int, stdin.split())\n    total_time = 0\n    \n    for i in range(N):\n        total_time += T[i] * (i + 1)\n        \n    return total_time // N"
    },
    {
        "number": 4183,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, T = list(map(int, stdin.split()))\n    total_time = 0\n    for i in range(N):\n        total_time += T[i]\n    return total_time // N\n"
    },
    {
        "number": 4183,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, *T = list(map(int, stdin.split()))\n    total_time = 0\n\n    for i in range(N):\n        total_time += T[i] * (T[i] // 360)\n\n    return total_time"
    },
    {
        "number": 4183,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, *T = map(int, stdin.split())\n    result = 0\n    \n    for i in range(N):\n        result += T[i]\n    \n    return str(result)\n\ninput_stdin = \"2\\n2\\n3\"\noutput = solution(input_stdin)\nprint(output) "
    },
    {
        "number": 4184,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *W = list(map(int, stdin.split()))\n    T = min(N-1, W.index(max(W)))\n    S1 = sum(W[:T+1])\n    S2 = sum(W[T+1:])\n    return abs(S1 - S2)"
    },
    {
        "number": 4184,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    weights = list(map(int, stdin.split('\\n')[1].split()))\n    weights.sort()\n\n    min_diff = float('inf')\n\n    for i in range(1, N):\n        diff = abs(sum(weights[:i]) - sum(weights[i:]))\n        min_diff = min(min_diff, diff)\n\n    return str(min_diff)"
    },
    {
        "number": 4184,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, *W = map(int, stdin.split())\n    W = list(W)\n    T = 1\n    min_diff = abs(sum(W[:T]) - sum(W[T:]))\n\n    for i in range(2, N):\n        if sum(W[:i]) == sum(W[i:]):\n            return 0\n        diff = abs(sum(W[:i]) - sum(W[i:]))\n        min_diff = min(min_diff, diff)\n\n    return min_diff\n"
    },
    {
        "number": 4184,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, *weights = map(int, stdin.split())\n    T = weights[T-1]\n\n    weights_less_than_T = [w for i, w in enumerate(weights) if i < T-1]\n    weights_greater_than_T = [w for i, w in enumerate(weights) if i >= T-1]\n\n    sum_weights_less_than_T = sum(weights_less_than_T)\n    sum_weights_greater_than_T = sum(weights_greater_than_T)\n\n    return abs(sum_weights_less_than_T - sum_weights_greater_than_T)\n"
    },
    {
        "number": 4184,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, *weights = map(int, stdin.split())\n    weights = sorted(weights)\n    min_diff = abs(sum(weights[:T+1]) - sum(weights[T+1:]))\n    return str(min_diff)\n\nN = int(input())\nW_i = list(map(int, input().split()))\nstdin = '\\n'.join([str(N)] + [str(w) for w in W_i]) + '\\n'\nprint(solution(stdin)) "
    },
    {
        "number": 4184,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def find_min_diff(weights: list, T: int) -> int:\n        N = len(weights)\n        weights_1 = [w for i, w in enumerate(weights) if i <= T]\n        weights_2 = [w for i, w in enumerate(weights) if i > T]\n        sum_weights_1 = sum(weights_1)\n        sum_weights_2 = sum(weights_2)\n        return abs(sum_weights_1 - sum_weights_2)\n\n    N, *weights = map(int, stdin.split())\n    min_diff = float('inf')\n    for T in range(1, N):\n        diff = find_min_diff(weights, T)\n        min_diff = min(min_diff, diff)\n    return str(min_diff)\n"
    },
    {
        "number": 4184,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, *W = map(int, stdin.split())\n    T = 0\n    min_diff = float('inf')\n\n    for i in range(1, N+1):\n        if i <= N//2:\n            S1 = sum(W[:i])\n            S2 = sum(W[i:])\n            diff = abs(S1 - S2)\n            if diff < min_diff:\n                min_diff = diff\n\n    return str(min_diff)\n\ndef"
    },
    {
        "number": 4184,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    W = list(map(int, stdin.split(\"\\n\")[1].split()))\n    T = 0\n    S1 = 0\n    S2 = 0\n    min_diff = abs(S1 - S2)\n\n    for i in range(1, N + 1):\n        if i <= T:\n            S1 += W[i - 1]\n        else:\n            S2 += W[i - 1]\n\n        diff = abs(S1 - S2)\n\n        if diff < min_diff:\n            min_diff = diff\n\n    return str(min_diff)\n"
    },
    {
        "number": 4184,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, *W = list(map(int, stdin.split()))\n    T = sum(W[:T])\n    S_1 = sum(W[:T])\n    S_2 = sum(W[T:])\n    return abs(S_1 - S_2)"
    },
    {
        "number": 4184,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, *W = map(int, stdin.split())\n    T = (N + 1) // 2\n    S1 = sum(W[:T])\n    S2 = sum(W[T:])\n    return abs(S1 - S2)"
    },
    {
        "number": 4185,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_str, output_str = stdin.strip().split('\\n', 1)\n    n, m = map(int, input_str.split())\n    matrix = [[0] * m for _ in range(n)]\n    min_moves = 0\n\n    for i in range(n):\n        matrix[i] = list(map(int, input_str.split()))\n\n    def shift_column(column_index: int) -> None:\n        nonlocal min_moves\n        min_moves += 1\n        last_element = matrix[n - 1][column_index]\n        for i in range(n - 1, 0, -1):\n            matrix[i][column_index] = matrix[i - 1][column_index]\n        matrix[0][column_index] = last_element\n\n    def set_element(row_index: int, column_index: int, value: int) -> None:\n        nonlocal min_moves\n        min_moves += 1\n        matrix[row_index][column_index] = value\n\n    # Find the column with the minimum element\n    column_index = 0\n    for j in range(m):\n        if matrix[0][j] < matrix[0][column_index]:\n            column_index = j\n\n    # Shift the column cyclically until it is in the right position\n    while column_index != m - 1:\n        shift_column(column_index)\n        column_index = (column_index + 1) % m\n\n    # Set the elements of the first row to be in the correct order\n    for j in range(m):\n        set_element(0, j, (j + 1) * m + j + 1)\n\n    # Set the elements of the other rows to be in the correct order\n    for i in range(1, n):\n        for j in range(m):\n            set_element(i, j, matrix[i - 1][j] + m)\n\n    return str(min_moves) + \"\\n\" + output_str\n\n\ninput_data = \"\"\"3 3\n3 2 1\n1 2 3\n4 5 6\n\"\"\"\nprint(solution(input_data)) "
    },
    {
        "number": 4185,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    matrix = [[int(x) for x in input().split()] for _ in range(n)]\n\n    min_moves = 0\n    for j in range(1, m + 1):\n        for i in range(n):\n            if matrix[i][j - 1] != (i + 1) * m + j:\n                min_moves += 1\n                break\n        else:\n            continue\n        break\n    else:\n        min_moves = 0\n\n    for j in range(1, m + 1):\n        for i in range(n):\n            if matrix[i][j - 1] != (i + 1) * m + j:\n                min_moves += 1\n                break\n        else:\n            continue\n        break\n\n    if min_moves == 0:\n        for i in range(n):\n            for j in range(1, m + 1):\n                if matrix[i][j - 1] != (i + 1) * m + j:\n                    min_moves += 1\n                    break\n            else:\n                continue\n            break\n\n    return str(min_moves)\n"
    },
    {
        "number": 4185,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    matrix = []\n    for i in range(n):\n        row = list(map(int, input().split()))\n        matrix.append(row)\n\n    def shift_column_up(column, num_shifts):\n        for i in range(num_shifts):\n            temp = column[0]\n            for j in range(len(column) - 1):\n                column[j] = column[j + 1]\n            column[-1] = temp\n\n    def find_min_moves(goal_matrix):\n        moves = 0\n        for i in range(n):\n            for j in range(m):\n                if matrix[i][j] != goal_matrix[i][j]:\n                    moves += 1\n        return moves\n\n    # Shift columns to obtain the matrix with the desired values\n    for j in range(m):\n        col = [matrix[i][j] for i in range(n)]\n        shift_column_up(col, (col[0] - 1) % m)\n        for i in range(n):\n            matrix[i][j] = col[i]\n\n    # Calculate the minimum number of moves required\n    goal_matrix = [[(i - 1) * m + j for j in range(1, m + 1)] for i in range(1, n + 1)]\n    min_moves = find_min_moves(goal_matrix)\n\n    return str(min_moves)"
    },
    {
        "number": 4185,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def update_matrix(matrix, n, m, i, j, new_value):\n        for k in range(m):\n            matrix[i][k] = new_value + k\n\n    def cyclic_shift(matrix, m, j):\n        for i in range(n):\n            matrix[i][j], matrix[i][j + 1:] = matrix[i][j + 1:], [matrix[i][j]]\n\n    n, m = map(int, input().split())\n    matrix = [list(map(int, input().split())) for _ in range(n)]\n\n    target_matrix = [[(i - 1) * m + j for j in range(1, m + 1)] for i in range(1, n + 1)]\n    moves = 0\n\n    while target_matrix != matrix:\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                if matrix[i - 1][j - 1] != target_matrix[i - 1][j - 1]:\n                    update_matrix(matrix, n, m, i, j, target_matrix[i - 1][j - 1])\n                    moves += 1\n                    break\n            else:\n                continue\n            break\n        else:\n            for j in range(m, 0, -1):\n                cyclic_shift(matrix, m, j - 1)\n                moves += 1\n                break\n            else:\n                continue\n            break\n\n    return moves\n\n\ninput_data = \"\"\"3 3\n3 2 1\n1 2 3\n4 5 6\n\"\"\"\n\noutput_data = \"\"\"6\"\"\"\n\nprint(solution(input_data))  # Output: 6\n\ninput_data = \"\"\"4 3\n1 6 3 4\n5 10 7 8\n9 2 11 12\n10 11 12\n\"\"\"\n\noutput_data = \"\"\"2\"\"\"\n\nprint(solution(input_data))  # Output: 2\n\ninput_data = \"\"\"3 4\n1 6 3 4\n5 10 7 8\n9 2 11 12\n10 11 12\n\"\"\"\n\noutput_data = \"\"\"0\"\"\"\n\nprint(solution(input_data))  # Output: 0\n\ninput_data = \"\"\"4 3\n1 2 3\n4 5 6\n7 8 9\n10 11 12\n\"\"\"\n\noutput_data = \"\"\"6\"\"\"\n\nprint(solution(input_data))  # Output: 6 "
    },
    {
        "number": 4185,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    matrix = [[0 for j in range(m)] for i in range(n)]\n\n    # Read the matrix\n    for i in range(n):\n        matrix[i] = list(map(int, stdin.split()[i + 1:i + 1 + m]))\n\n    # Calculate the minimum number of moves\n    moves = 0\n    for j in range(m):\n        for i in range(n):\n            if matrix[i][j] != (i + 1) * m + j + 1:\n                moves += 1\n                break\n        if moves > 0:\n            break\n\n    return str(moves)"
    },
    {
        "number": 4185,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    matrix = [[0 for _ in range(m)] for _ in range(n)]\n    moves = 0\n\n    for i in range(n):\n        for j in range(m):\n            matrix[i][j] = int(stdin.split()[i * m + j + 2])\n\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == (i + 1) * m + j + 1:\n                continue\n            else:\n                moves += 1\n                k = j\n                while matrix[i][k] != (i + 1) * m + j + 1:\n                    k = (k + 1) % m\n                    matrix[i][k], matrix[i][k - 1] = matrix[i][k - 1], matrix[i][k]\n\n    return str(moves)\n"
    },
    {
        "number": 4185,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    matrix = [list(map(int, input().split())) for _ in range(n)]\n\n    # Calculate the minimum number of moves required\n    min_moves = 0\n    for j in range(1, m + 1):\n        # Find the row with the minimum value\n        min_row = 0\n        for i in range(1, n):\n            if matrix[i][j] < matrix[min_row][j]:\n                min_row = i\n\n        # Shift the column up cyclically\n        for i in range(min_row - 1, 0, -1):\n            matrix[i], matrix[i - 1] = matrix[i - 1], matrix[i]\n            min_moves += 1\n\n    return str(min_moves)\n\n\ninput_stdin = \"\"\"3 3\n3 2 1\n1 2 3\n4 5 6\"\"\"\n\nprint(solution(input_stdin)) "
    },
    {
        "number": 4185,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    matrix = [[0] * m for _ in range(n)]\n    moves = 0\n    \n    for i in range(n):\n        row = list(map(int, stdin.split()[i+1:i+1+m]))\n        for j in range(m):\n            matrix[i][j] = row[j]\n    \n    def is_good_matrix(matrix):\n        for i in range(1, n):\n            for j in range(1, m):\n                if matrix[i][j] != (i - 1) * m + j:\n                    return False\n        return True\n    \n    def shift_column(matrix, column, shift):\n        nonlocal moves\n        if shift > 0:\n            for i in range(n - shift):\n                matrix[i][column], matrix[i + shift][column] = matrix[i + shift][column], matrix[i][column]\n            moves += shift\n    \n    while not is_good_matrix(matrix):\n        for j in range(1, m):\n            shift_column(matrix, j, 1)\n    \n    return str(moves)\n\ndef"
    },
    {
        "number": 4185,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    matrix = [list(map(int, input().split())) for _ in range(n)]\n\n    # Find the minimum number of moves required to obtain the desired matrix\n    def find_min_moves(matrix, n, m):\n        def shift_column_cyclically(matrix, col, shift):\n            for i in range(shift, n):\n                matrix[i][col], matrix[i - shift][col] = matrix[i - shift][col], matrix[i][col]\n\n        # Check if the matrix is already in the desired form\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                if (i - 1) * m + j != matrix[i - 1][j - 1]:\n                    return -1\n\n        # Shift columns cyclically to obtain the desired matrix\n        min_moves = 0\n        for col in range(1, m + 1):\n            min_shift = 1\n            for i in range(1, n + 1):\n                if matrix[i - 1][col - 1] != (i - 1) * m + col:\n                    break\n                min_shift += 1\n            min_moves += min_shift - 1\n            shift_column_cyclically(matrix, col - 1, min_shift - 1)\n        return min_moves\n\n    min_moves = find_min_moves(matrix, n, m)\n\n    return str(min_moves)"
    },
    {
        "number": 4185,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    matrix = []\n    for i in range(n):\n        row = list(map(int, stdin.split()[i+1:i+1+m]))\n        matrix.append(row)\n\n    def cyclic_shift(matrix: list, j: int, m: int):\n        for i in range(n):\n            matrix[i][j], matrix[i][(j+1)%m] = matrix[i][(j+1)%m], matrix[i][j]\n        return matrix\n\n    # First move: set a_{1, 1} = 1\n    matrix[0][0] = 1\n\n    # Count the number of moves needed to obtain the matrix\n    count = 1\n\n    # Check if the matrix is already good\n    if all(matrix[i][0] == (i+1)*m + 1 for i in range(n)) and all(matrix[0][j] == (j+1) for j in range(m)):\n        return count\n\n    # Cyclic shift the first column and check if the matrix is good\n    matrix = cyclic_shift(matrix, 0, m)\n    if all(matrix[i][0] == (i+1)*m + 1 for i in range(n)) and all(matrix[0][j] == (j+1) for j in range(m)):\n        return count\n\n    # Cyclic shift the first column again and check if the matrix is good\n    matrix = cyclic_shift(matrix, 0, m)\n    if all(matrix[i][0] == (i+1)*m + 1 for i in range(n)) and all(matrix[0][j] == (j+1) for j in range(m)):\n        return count\n\n    # Cyclic shift the second column and check if the matrix is good\n    matrix = cyclic_shift(matrix, 1, m)\n    if all(matrix[i][0] == (i+1)*m + 1 for i in range(n)) and all(matrix[0][j] == (j+1) for j in range(m)):\n        return count\n\n    # Cyclic shift the second column again and check if the matrix is good\n    matrix = cyclic_shift(matrix, 1, m)\n    if all(matrix[i][0] == (i+1)*m + 1 for i in range(n)) and all(matrix[0][j] == (j+1) for j in range(m)):\n        return count\n\n    # Cyclic shift the third column and check if the matrix is good\n    matrix = cyclic_shift(matrix, 2, m)\n    if all(matrix[i][0] == (i+1)*m + 1 for i in range(n)) and all(matrix[0][j] == (j+1) for j in range(m)):\n        return count\n\n    # Cyclic shift the third column again and check if the matrix is good\n    matrix = cyclic_shift(matrix, 2, m)\n    if all(matrix[i][0] == (i+1)*m + 1 for i in range(n)) and all(matrix[0][j] == (j+1) for j in range(m)):\n        return count\n\n    # If not, perform one more move and continue the process\n    count += 1\n    matrix = cyclic_shift(matrix, 0, m)\n\n    # Continue the process until the matrix is good\n    while not all(matrix[i][0] == (i+1)*m + 1 for i in range(n)) or not all(matrix[0][j] == (j+1) for j in range(m)):\n        count += 1\n        matrix = cyclic_shift(matrix, 0, m)\n\n    return count"
    },
    {
        "number": 4186,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    max_problems = 2 * (n // 2)\n    min_problems = n * (n + 1) // 4\n\n    return str(min_problems - max_problems)\n"
    },
    {
        "number": 4186,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    n_teams = n // 2\n    max_skill_diff = 1\n    min_problems = n * max_skill_diff\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            skill_diff = abs(a[i] - a[j])\n            min_problems = min(min_problems, n_teams * skill_diff)\n\n    return str(min_problems)\n"
    },
    {
        "number": 4186,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n    \n    min_problems = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] != a[j]:\n                min_problems += abs(a[i] - a[j])\n                \n    return min_problems"
    },
    {
        "number": 4186,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    assert 2 <= n <= 100 and n % 2 == 0\n\n    teams = n // 2\n    total_problems = 0\n\n    while teams > 0:\n        max_skill = max(a)\n        a.remove(max_skill)\n        total_problems += max_skill\n        teams -= 1\n\n    return str(total_problems)\n\n\ninput_string = \"\"\"6\n5 10 2 3 14 5\n2\n1 100\"\"\"\n\noutput_string = \"\"\"5\n99\"\"\"\n\n\nfor i in range(len(input_string.splitlines())):\n    assert solution(input_string.splitlines()[i]) == output_string.splitlines()[i]\n\nprint(\"All test cases passed.\")\n"
    },
    {
        "number": 4186,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    a = list(map(int, stdin[1].split()))\n    \n    total_problems = sum(a)\n    min_problems = total_problems\n    \n    while min_problems % 2 != 0:\n        min_problems += 1\n    \n    return min_problems // 2\n\n\ninput_data = [\n    \"6\\n5 10 2 3 14 5\",\n    \"2\\n1 100\"\n]\n\nfor data in input_data:\n    print(solution(data.split(\"\\n\"))) "
    },
    {
        "number": 4186,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    total_problems = sum(a)\n    max_problems_per_team = max(a)\n    min_problems_to_form_teams = total_problems // 2\n    \n    return min_problems_to_form_teams - max_problems_per_team\n\ninput_str = \"\"\"6\n5 10 2 3 14 5\n2\n1 100\"\"\"\n\nprint(solution(input_str)) "
    },
    {
        "number": 4186,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n    total_problems = 0\n\n    # Sort the students based on their skills\n    a.sort()\n\n    # Calculate the minimum total number of problems required\n    for i in range(0, n, 2):\n        total_problems += a[i + 1] - a[i]\n\n    return total_problems"
    },
    {
        "number": 4186,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] == a[j]:\n                count += 1\n                if count == n//2:\n                    return min(a) + sum(range(min(a), max(a) + 1)) - min(a) - n//2\n    return -1"
    },
    {
        "number": 4186,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    dp = [0] * (n // 2 + 1)\n    dp[0] = 0\n    for i in range(1, n // 2 + 1):\n        dp[i] = float('inf')\n        for j in range(i):\n            if a[j] == a[i + j]:\n                dp[i] = min(dp[i], dp[j])\n            else:\n                dp[i] = min(dp[i], dp[j] + 1)\n    return dp[n // 2]\n\n\ndef"
    },
    {
        "number": 4186,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    problems_to_solve = 0\n\n    # Sort students by skill\n    a.sort()\n\n    # Calculate the total number of problems needed to form the teams\n    for i in range(0, n, 2):\n        problems_to_solve += abs(a[i] - a[i + 1])\n\n    return problems_to_solve\n\n\ndef"
    },
    {
        "number": 4187,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    schedule = list(map(int, stdin.split('\\n')[1].split()))\n    max_rest = 0\n    current_rest = 0\n\n    for hour in schedule:\n        if hour == 1:\n            current_rest += 1\n        else:\n            max_rest = max(max_rest, current_rest)\n            current_rest = 0\n\n    max_rest = max(max_rest, current_rest)\n\n    return str(max_rest)\n\n\ndef"
    },
    {
        "number": 4187,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    \n    max_rest = 0\n    curr_rest = 0\n    for i in range(n):\n        if a[i] == 0:\n            curr_rest = 0\n        else:\n            curr_rest += 1\n            max_rest = max(max_rest, curr_rest)\n    \n    return str(max_rest)\n"
    },
    {
        "number": 4187,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    rest_count = 0\n    rest_max = 0\n    \n    for i in range(n):\n        if a[i] == 1:\n            rest_count += 1\n        else:\n            rest_max = max(rest_max, rest_count)\n            rest_count = 0\n            \n    return max(rest_max, rest_count)"
    },
    {
        "number": 4187,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    if all(a[i] == a[i+1] for i in range(n-1)):\n        return 0\n    cnt = 0\n    max_cnt = 0\n    for i in range(n):\n        if a[i] == 1 and cnt > 0:\n            max_cnt = max(max_cnt, cnt)\n            cnt = 0\n        elif a[i] == 1:\n            cnt += 1\n        else:\n            cnt = 0\n    max_cnt = max(max_cnt, cnt)\n    return max_cnt\n"
    },
    {
        "number": 4187,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    schedule = list(map(int, stdin.split('\\n')[1].split()))\n    max_rest = 0\n\n    for i in range(n):\n        if schedule[i] == 1:\n            max_rest = 0\n        else:\n            max_rest += 1\n\n    return max_rest\n"
    },
    {
        "number": 4187,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    cnt = 0\n    max_cnt = 0\n    for i in range(n):\n        if a[i] == 0:\n            cnt = 0\n        else:\n            cnt += 1\n            max_cnt = max(max_cnt, cnt)\n    return max_cnt\n"
    },
    {
        "number": 4187,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = [int(x) for x in stdin.split('\\n')[1].split()]\n\n    max_count = 0\n    count = 0\n    for i in range(1, n):\n        if a[i] == a[i-1]:\n            count += 1\n        else:\n            count = 0\n        max_count = max(max_count, count)\n\n    return max_count\n"
    },
    {
        "number": 4187,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    max_rest = 0\n    count = 0\n    for i in range(n):\n        if a[i] == 1:\n            count += 1\n        else:\n            if count > max_rest:\n                max_rest = count\n            count = 0\n    if count > max_rest:\n        max_rest = count\n    return max_rest\n\n\nn = int(input())\na = list(map(int, input().split()))\nprint(solution(stdin=f\"{n}\\n{' '.join(map(str, a))}\")) "
    },
    {
        "number": 4187,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    schedule = [int(x) for x in stdin.splitlines()[1].split()]\n\n    # Initialize variables\n    max_rest = 0\n    rest_start = 0\n    rest_end = 0\n\n    for i in range(n):\n        if schedule[i] == 1:\n            if i - rest_start >= 2:\n                max_rest = max(max_rest, i - rest_start - 1)\n            rest_start = i\n\n    # Check the last rest interval\n    if n - rest_start >= 2:\n        max_rest = max(max_rest, n - rest_start - 1)\n\n    return str(max_rest)\n"
    },
    {
        "number": 4187,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    \n    max_rest = 0\n    rest_count = 0\n    \n    for i in range(n):\n        if a[i] == 1:\n            rest_count += 1\n        else:\n            max_rest = max(max_rest, rest_count)\n            rest_count = 0\n    \n    return max(max_rest, rest_count)\n\ndef"
    },
    {
        "number": 4188,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"Mount Everest\"\n    elif n == 2:\n        return \"958\"\n    elif n == 3:\n        return \"12766\"\n    elif n == 4:\n        return \"Nile\"\n    elif n == 5:\n        return \"6695\"\n    elif n == 6:\n        return \"807\"\n    elif n == 7:\n        return \"Uranium\"\n    elif n == 8:\n        return \"-68\u00b0C\"\n    elif n == 9:\n        return \"25 feet\"\n    elif n == 10:\n        return \"134 centimeters\"\n    elif n == 11:\n        return \"Alaska\"\n    elif n == 12:\n        return \"154103 miles\"\n    elif n == 13:\n        return \"Lake Baikal\"\n    elif n == 14:\n        return \"Turkmenistan\"\n    elif n == 15:\n        return \"0\"\n    else:\n        return \"Mountain\" "
    },
    {
        "number": 4188,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_num = int(stdin)\n    facts = [\n        \"The highest mountain above sea level in the world is Mount Everest. Its peak rises to 8848 m.\",\n        \"The largest board game tournament consisted of 958 participants playing chapaev.\",\n        \"The largest online maths competition consisted of 12766 participants.\",\n        \"The Nile is credited as the longest river in the world.\",\n        \"From its farthest stream in Burundi, it extends 6695 km in length.\",\n        \"While not in flood, the main stretches of the Amazon river in South America can reach widths of up to 1100 km at its widest points.\",\n        \"Angel Falls is the highest waterfall.\",\n        \"Its greatest single drop measures 807 m.\",\n        \"The Hotel Everest View above Namche, Nepal \u2014 the village closest to Everest base camp \u2014 is at a record height of 31962 m.\",\n        \"Uranium is the heaviest of all the naturally occurring elements. Its most common isotope has a nucleus containing 146 neutrons.\",\n        \"The coldest permanently inhabited place is the Siberian village of Oymyakon, where the temperature of -68\u00b0C was registered in the twentieth century.\",\n        \"The longest snake held in captivity is over 25 feet long. Its name is Medusa.\",\n        \"Colonel Meow holds the world record for longest fur on a cat \u2014 almost 134 centimeters.\",\n        \"Sea otters can have up to 10000 hairs per square inch. This is the most dense fur in the animal kingdom.\"\n    ]\n\n    if input_num > len(facts):\n        return \"0\"\n    else:\n        return \"1\" "
    },
    {
        "number": 4188,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    facts = [\n        \"Mount Everest\",\n        \"958\",\n        \"12766\",\n        \"Nile\",\n        \"6695\",\n        \"Amazon\",\n        \"Angel Falls\",\n        \"Uranium\",\n        \"Oymyakon\",\n        \"Medusa\",\n        \"Meow\",\n        \"Otters\",\n        \"Alaska\",\n        \"Baikal\",\n        \"Turkmenistan\",\n    ]\n\n    fact_indices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n\n    index = int(stdin) - 1\n    if index >= len(fact_indices):\n        return \"0\"\n\n    return str(fact_indices[index])\n"
    },
    {
        "number": 4188,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_num = int(stdin)\n    facts = {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 8: 1, 9: 1, 11: 1, 13: 1, 14: 1, 15: 1}\n    if input_num in facts:\n        return str(facts[input_num])\n    else:\n        return \"0\" "
    },
    {
        "number": 4188,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # parse input integer from stdin\n    n = int(stdin)\n\n    # initialize an empty dictionary to store the facts\n    facts = {}\n\n    # add the facts to the dictionary\n    facts[1] = \"The highest mountain above sea level in the world is Mount Everest. Its peak rises to 8848 m.\"\n    facts[2] = \"The largest board game tournament consisted of 958 participants playing chapaev.\"\n    facts[3] = \"The largest online maths competition consisted of 12766 participants.\"\n    facts[4] = \"The Nile is credited as the longest river in the world.\"\n    facts[5] = \"From its farthest stream in Burundi, the Nile extends 6695 km in length.\"\n    facts[6] = \"While not in flood, the main stretches of the Amazon river in South America can reach widths of up to 1100 km at its widest points.\"\n    facts[7] = \"Angel Falls is the highest waterfall.\"\n    facts[8] = \"Its greatest single drop measures 807 m.\"\n    facts[9] = \"Uranium is the heaviest of all the naturally occurring elements.\"\n    facts[10] = \"Its most common isotope has a nucleus containing 146 neutrons.\"\n    facts[11] = \"The coldest permanently inhabited place is the Siberian village of Oymyakon, where the temperature of -68\u00b0C was registered in the twentieth century.\"\n    facts[12] = \"The longest snake held in captivity is over 25 feet long. Its name is Medusa.\"\n    facts[13] = \"Colonel Meow holds the world record for longest fur on a cat \u2014 almost 134 centimeters.\"\n    facts[14] = \"Sea otters can have up to 10000 hairs per square inch. This is the most dense fur in the animal kingdom.\"\n    facts[15] = \"The largest state of USA is Alaska; its area is 663268 square miles.\"\n    facts[16] = \"Lake Baikal is the largest freshwater lake in the world.\"\n    facts[16] += \" It reaches 1642 meters in depth and contains around one-fifth of the world's unfrozen fresh water.\"\n    facts[16] += \" The most colorful national flag is the one of Turkmenistan, with 106 colors.\"\n\n    # return the corresponding fact if the input is within range, else 0\n    return facts[n] if 1 <= n <= 16 else 0"
    },
    {
        "number": 4188,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    facts = [\n        \"The highest mountain above sea level in the world is Mount Everest. Its peak rises to 8848 m.\",\n        \"The largest board game tournament consisted of 958 participants playing chapaev.\",\n        \"The largest online maths competition consisted of 12766 participants.\",\n        \"The Nile is credited as the longest river in the world. From its farthest stream in Burundi, it extends 6695 km in length.\",\n        \"While not in flood, the main stretches of the Amazon river in South America can reach widths of up to 1100 km at its widest points.\",\n        \"Angel Falls is the highest waterfall.\",\n        \"Its greatest single drop measures 807 m.\",\n        \"The Hotel Everest View above Namche, Nepal \u2014 the village closest to Everest base camp \u2013 is at a record height of 31962 m.\",\n        \"Uranium is the heaviest of all the naturally occurring elements. Its most common isotope has a nucleus containing 146 neutrons.\",\n        \"The coldest permanently inhabited place is the Siberian village of Oymyakon, where the temperature of -68\u00b0C was registered in the twentieth century.\",\n        \"The longest snake held in captivity is over 25 feet long. Its name is Medusa.\",\n        \"Colonel Meow holds the world record for longest fur on a cat \u2014 almost 134 centimeters.\",\n        \"Sea otters can have up to 10000 hairs per square inch. This is the most dense fur in the animal kingdom.\",\n        \"The largest state of USA is Alaska; its area is 663268 square miles.\",\n        \"Lake Baikal is the largest freshwater lake in the world. It reaches 1642\u00a0meters in depth and contains around one-fifth of the world\u2019s unfrozen fresh water.\"\n    ]\n\n    index = int(stdin) - 1\n    if 0 <= index < len(facts):\n        return index\n    else:\n        return 0\n"
    },
    {
        "number": 4188,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_number = int(stdin)\n    if input_number == 1:\n        return 1\n    elif input_number == 2:\n        return 8848\n    elif input_number == 3:\n        return 958\n    elif input_number == 4:\n        return 12766\n    elif input_number == 5:\n        return 6695\n    elif input_number == 6:\n        return 1100\n    elif input_number == 7:\n        return 31962\n    elif input_number == 8:\n        return 146\n    elif input_number == 9:\n        return 31962\n    elif input_number == 10:\n        return 1100\n    elif input_number == 11:\n        return 25\n    elif input_number == 12:\n        return 807\n    elif input_number == 13:\n        return 31962\n    elif input_number == 14:\n        return 154103\n    elif input_number == 15:\n        return 134\n    elif input_number == 16:\n        return 0"
    },
    {
        "number": 4188,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def is_odd_or_even(n: int) -> str:\n        if n % 2 == 0:\n            return \"Even\"\n        else:\n            return \"Odd\"\n\n    facts = {\n        1: \"The highest mountain above sea level in the world is Mount Everest. Its peak rises to 8848 m.\",\n        2: \"The largest board game tournament consisted of 958 participants playing chapaev. The largest online maths competition consisted of 12766 participants.\",\n        3: \"The Nile is credited as the longest river in the world. From its farthest stream in Burundi, it extends 6695 km in length.\",\n        4: \"While not in flood, the main stretches of the Amazon river in South America can reach widths of up to 1100 km at its widest points.\",\n        5: \"Angel Falls is the highest waterfall. Its greatest single drop measures 807 m.\",\n        6: \"Uranium is the heaviest of all the naturally occurring elements. Its most common isotope has a nucleus containing 146 neutrons.\",\n        7: \"The coldest permanently inhabited place is the Siberian village of Oymyakon, where the temperature of -68\u00b0C was registered in the twentieth century.\",\n        8: \"The longest snake held in captivity is over 25 feet long. Its name is Medusa.\",\n        9: \"Colonel Meow holds the world record for longest fur on a cat \u2014 almost 134 centimeters.\",\n        10: \"Sea otters can have up to 10000 hairs per square inch. This is the most dense fur in the animal kingdom.\",\n        11: \"The largest state of USA is Alaska; its area is 663268 square miles.\",\n        12: \"Lake Baikal is the largest freshwater lake in the world. It reaches 1642\u00a0meters in depth and contains around one-fifth of the world's unfrozen fresh water.\",\n        13: \"The most colorful national flag is the one of Turkmenistan, with 106 colors.\",\n        14: \"Sea otters can have up to 10000 hairs per square inch. This is the most dense fur in the animal kingdom.\",\n        15: \"The coldest permanently inhabited place is the Siberian village of Oymyakon, where the temperature of -68\u00b0C was registered in the twentieth century.\",\n        16: \"The highest mountain above sea level in the world is Mount Everest. Its peak rises to 8848 m.\"\n    }\n\n    if int(stdin) in facts:\n        return is_odd_or_even(int(stdin))\n    else:\n        return \"Invalid input.\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_array = [int(x) for x in stdin.split()]\n    if len(input_array) != 1:\n        return \"Invalid input\"\n    input_number = input_array[0]\n\n    if input_number == 1:\n        return 1\n    elif input_number == 7:\n        return 0\n    else:\n        return \"Invalid input\" "
    },
    {
        "number": 4188,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    flag = int(stdin)\n    if flag == 1:\n        return \"Mount Everest\"\n    elif flag == 2:\n        return \"Chapaev\"\n    elif flag == 3:\n        return \"Nile\"\n    elif flag == 4:\n        return \"Amazon River\"\n    elif flag == 5:\n        return \"Angel Falls\"\n    elif flag == 6:\n        return \"Uranium\"\n    elif flag == 7:\n        return \"Oymyakon\"\n    elif flag == 8:\n        return \"Medusa\"\n    elif flag == 9:\n        return \"Meow\"\n    elif flag == 10:\n        return \"Sea Otters\"\n    elif flag == 11:\n        return \"Alaska\"\n    elif flag == 12:\n        return \"Baikal\"\n    elif flag == 13:\n        return \"Turkmenistan\"\n    else:\n        return \"Invalid Input\" "
    },
    {
        "number": 4189,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    from collections import defaultdict\n\n    cheese_types = defaultdict(int)\n    soft_cheese = 0\n    hard_cheese = 0\n\n    n = int(stdin.split('\\n')[0])\n    lines = stdin.split('\\n')[1:]\n\n    for line in lines:\n        name, type = line.split()\n        cheese_types[type] += 1\n        if type == \"soft\":\n            soft_cheese += 1\n        else:\n            hard_cheese += 1\n\n    if soft_cheese > hard_cheese:\n        return str(soft_cheese)\n    else:\n        return str(hard_cheese)"
    },
    {
        "number": 4189,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    n = int(input_list[0])\n    hard_cheeses = set()\n    soft_cheeses = set()\n\n    for i in range(1, n + 1):\n        cheese, type = input_list[i].split()\n        if type == \"hard\":\n            hard_cheeses.add(cheese)\n        elif type == \"soft\":\n            soft_cheeses.add(cheese)\n\n    hard_count = len(hard_cheeses)\n    soft_count = len(soft_cheeses)\n\n    if hard_count > soft_count:\n        return str(hard_count)\n    else:\n        return str(soft_count)\n"
    },
    {
        "number": 4189,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    cheeses = {}\n\n    n = int(input_list[0])\n    for i in range(1, n+1):\n        cheese, type = input_list[i].split()\n        if type not in cheeses:\n            cheeses[type] = 1\n        else:\n            cheeses[type] += 1\n\n    soft = 0\n    hard = 0\n    for type in cheeses:\n        if type == 'soft':\n            soft = cheeses[type]\n        elif type == 'hard':\n            hard = cheeses[type]\n\n    return str(min(soft, hard))\n\n\ninput_str = \"\"\"9\nbrie soft\ncamembert soft\nfeta soft\ngoat soft\nmuenster soft\nasiago hard\ncheddar hard\ngouda hard\nswiss hard\"\"\"\n\noutput_str = solution(input_str)\nprint(output_str) "
    },
    {
        "number": 4189,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def get_cheese_type(cheese_name: str) -> str:\n        return cheese_name.split()[1]\n\n    def count_soft_cheeses(cheese_names: list) -> int:\n        return sum([1 for name in cheese_names if get_cheese_type(name) == \"soft\"])\n\n    def count_hard_cheeses(cheese_names: list) -> int:\n        return sum([1 for name in cheese_names if get_cheese_type(name) == \"hard\"])\n\n    input_list = stdin.splitlines()\n    cheese_names = input_list[1:]\n    soft_cheese_count = count_soft_cheeses(cheese_names)\n    hard_cheese_count = count_hard_cheeses(cheese_names)\n\n    if soft_cheese_count > hard_cheese_count:\n        return str(soft_cheese_count)\n    else:\n        return str(hard_cheese_count)\n"
    },
    {
        "number": 4189,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    cheeses = {}\n    for i in range(1, int(input_list[0])+1):\n        name, type = input_list[i].split()\n        if type == 'soft':\n            cheeses[name] = 'soft'\n        elif type == 'hard':\n            cheeses[name] = 'hard'\n        else:\n            raise ValueError(\"Invalid cheese type\")\n    soft_cheeses = cheeses.values().count('soft')\n    hard_cheeses = cheeses.values().count('hard')\n    total_cheeses = soft_cheeses + hard_cheeses\n    if total_cheeses == 0:\n        return \"0\"\n    return f\"{total_cheeses - soft_cheeses // 2}\" "
    },
    {
        "number": 4189,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    N = int(input_list[0])\n    cheeses = [x.split() for x in input_list[1:]]\n    soft_cheeses = [x[0] for x in cheeses if x[1] == \"soft\"]\n    hard_cheeses = [x[0] for x in cheeses if x[1] == \"hard\"]\n    hard_groups = [[\"gruyere\", \"emmental\", \"colby\"], [\"gouda\", \"swiss\", \"cheddar\"]]\n    count = 0\n    \n    for group in hard_groups:\n        if all(any(cheese in hard_cheeses for cheese in group) for group in hard_groups):\n            count += 1\n    \n    if all(x in soft_cheeses for x in [\"brie\", \"camembert\", \"feta\", \"goat\", \"muenster\"]):\n        count += 1\n    \n    return str(count)\n\ndef"
    },
    {
        "number": 4189,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    N = int(input_list[0])\n    types = {\"soft\": 0, \"hard\": 0}\n    for i in range(1, N+1):\n        _, cheese_type = input_list[i].split()\n        types[cheese_type] += 1\n    return str(max(types.values()))"
    },
    {
        "number": 4189,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def is_soft(cheese: str) -> bool:\n        return cheese.endswith(\" soft\")\n\n    def is_hard(cheese: str) -> bool:\n        return cheese.endswith(\" hard\")\n\n    cheeses = []\n    for line in stdin.splitlines()[1:]:\n        cheese, cheese_type = line.split()\n        cheeses.append((cheese, cheese_type))\n\n    soft_cheeses = sum(1 for cheese, cheese_type in cheeses if is_soft(cheese))\n    hard_cheeses = sum(1 for cheese, cheese_type in cheeses if is_hard(cheese))\n\n    return str(soft_cheeses + hard_cheeses)\n\nstdin = \"\"\"9\nbrie soft\ncamembert soft\nfeta soft\ngoat soft\nmuenster soft\nasiago hard\ncheddar hard\ngouda hard\nswiss hard\"\"\"\n\nprint(solution(stdin))\n\nstdin = \"\"\"6\nparmesan hard\nemmental hard\nedam hard\ncolby hard\ngruyere hard\nasiago hard\"\"\"\n\nprint(solution(stdin)) "
    },
    {
        "number": 4189,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.splitlines()[0])\n    hard_cheeses = set()\n    soft_cheeses = set()\n\n    for i in range(1, N + 1):\n        cheese_name, cheese_type = stdin.splitlines()[i].split()\n        if cheese_type == \"hard\":\n            hard_cheeses.add(cheese_name)\n        elif cheese_type == \"soft\":\n            soft_cheeses.add(cheese_name)\n\n    if hard_cheeses:\n        return len(hard_cheeses)\n    elif soft_cheeses:\n        return len(soft_cheeses)\n    else:\n        return 0"
    },
    {
        "number": 4189,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def count_cheeses(cheese_types: set) -> int:\n        if \"soft\" in cheese_types and \"hard\" in cheese_types:\n            return 3\n        elif \"soft\" in cheese_types:\n            return 2\n        elif \"hard\" in cheese_types:\n            return 2\n        else:\n            return 1\n\n    N = int(stdin.splitlines()[0])\n    cheese_types = set()\n\n    for i in range(1, N + 1):\n        _, cheese_type = stdin.splitlines()[i].split()\n        cheese_types.add(cheese_type)\n\n    return str(count_cheeses(cheese_types))\n"
    },
    {
        "number": 4190,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def lexicographically_less(arr1: List[int], arr2: List[int]) -> bool:\n        for i in range(1, len(arr1) + 1):\n            if arr1[:i] < arr2[:i]:\n                return True\n            if arr1[:i] > arr2[:i]:\n                return False\n        return False\n\n    n, *a, *b = map(int, stdin.split())\n    a_arr, b_arr = list(a), list(b)\n\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if b_arr[i] > b_arr[j]:\n                b_arr[i], b_arr[j] = b_arr[j], b_arr[i]\n\n    c_arr = [(a_arr[i] + b_arr[i]) % n for i in range(n)]\n\n    return ' '.join(map(str, c_arr))\n\n\ndef"
    },
    {
        "number": 4190,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    b = list(map(int, stdin.splitlines()[2].split()))\n\n    def reorder(b):\n        b = sorted(b)\n        b = [b[i % len(b)] for i in range(len(b))]\n        return b\n\n    def next_lexicographically(b):\n        for i in range(len(b) - 1, -1, -1):\n            if b[i] > 0:\n                b[i] -= 1\n                return b\n            else:\n                b[i] = len(b) - 1\n        return b\n\n    b = reorder(b)\n    c = [(a[i] + b[i]) % n for i in range(n)]\n\n    while True:\n        b = next_lexicographically(b)\n        new_c = [(a[i] + b[i]) % n for i in range(n)]\n        if c > new_c:\n            c = new_c\n        else:\n            break\n\n    return \" \".join(map(str, c))\n\n\ninput_data = \"\"\"4\n0 1 2 1\n3 2 1 1\n\"\"\"\n\nprint(solution(input_data))\n\ninput_data = \"\"\"7\n2 5 1 5 3 4 3\n2 4 3 5 6 5 1\n\"\"\"\n\nprint(solution(input_data)) "
    },
    {
        "number": 4190,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    b = list(map(int, stdin.splitlines()[2].split()))\n\n    # Reorder elements of the array b\n    b.sort()\n\n    # Initialize array c\n    c = [0] * n\n\n    # Calculate c elements\n    for i in range(n):\n        c[b[i]] = (a[i] + i) % n\n\n    # Convert array c to string\n    result = ' '.join(map(str, c))\n\n    return result\n"
    },
    {
        "number": 4190,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n = int(input_list[0])\n    a = list(map(int, input_list[1].split()))\n    b = list(map(int, input_list[2].split()))\n\n    # Reorder elements of array b\n    b.sort()\n\n    # Create array c\n    c = [(a[i] + b[i]) % n for i in range(n)]\n\n    # Print array c\n    return ' '.join(map(str, c))\n"
    },
    {
        "number": 4190,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def lexicographically_smaller(arr1: List[int], arr2: List[int]) -> bool:\n        for i in range(1, len(arr1) + 1):\n            if arr1[:i] < arr2[:i]:\n                return True\n            if arr1[:i] > arr2[:i]:\n                return False\n        return False\n\n    def reorder_b(a: List[int], b: List[int]) -> List[int]:\n        # Sort array b based on the order of elements in array a\n        b_sorted = sorted(zip(a, b), key=lambda x: x[0])\n        return [elem[1] for elem in b_sorted]\n\n    def calculate_c(a: List[int], b: List[int]) -> List[int]:\n        return [(a[i] + b[i]) % n for i in range(n)]\n\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n    b = list(map(int, stdin.split(\"\\n\")[2].split()))\n\n    b_reordered = reorder_b(a, b)\n    c = calculate_c(a, b_reordered)\n\n    if lexicographically_smaller(a, b_reordered):\n        return \" \".join(map(str, c))\n    else:\n        return \" \".join(map(str, b_reordered))"
    },
    {
        "number": 4190,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n    b = list(map(int, stdin.split(\"\\n\")[2].split()))\n\n    def get_mod(x, y):\n        return x % y\n\n    def lexicographically_less(x, y):\n        for i in range(1, n + 1):\n            if x[i - 1] < y[i - 1]:\n                return True\n            elif x[i - 1] > y[i - 1]:\n                return False\n        return False\n\n    def reorder_b(b):\n        for i in range(n):\n            for j in range(n - 1):\n                if b[j] > b[j + 1]:\n                    b[j], b[j + 1] = b[j + 1], b[j]\n\n    reorder_b(b)\n\n    c = [(a[i] + b[i]) % n for i in range(n)]\n    min_c = c\n\n    for i in range(n):\n        temp = c.copy()\n        temp[i] = temp[i] - 1\n        if temp[i] < 0:\n            temp[i] = n - 1\n        if not lexicographically_less(temp, c):\n            min_c = temp\n\n    min_c_str = \" \".join(map(str, min_c))\n\n    return min_c_str\n"
    },
    {
        "number": 4190,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.splitlines()\n    n = int(input_lines[0])\n    a = list(map(int, input_lines[1].split()))\n    b = list(map(int, input_lines[2].split()))\n    \n    # Reorder elements of array b\n    b.sort()\n    \n    # Calculate array c\n    c = [(a[i] + b[i]) % n for i in range(n)]\n    \n    # Convert array c to string\n    result = ' '.join(map(str, c))\n    return result\n\n\ndef"
    },
    {
        "number": 4190,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    b = list(map(int, stdin.split('\\n')[2].split()))\n\n    # Reorder elements of b\n    b.sort()\n\n    # Calculate c\n    c = [(a[i] + b[i]) % n for i in range(n)]\n\n    # Return c as a string\n    return ' '.join(map(str, c))\n\ninput_stdin = \"\"\"4\n0 1 2 1\n3 2 1 1\"\"\"\n\noutput_expected = \"1 0 0 2\"\n\ninput_stdin2 = \"\"\"7\n2 5 1 5 3 4 3\n2 4 3 5 6 5 1\"\"\"\n\noutput_expected2 = \"0 0 0 1 0 2 4\"\n\nprint(\"Input:\", input_stdin)\nprint(\"Output expected:\", output_expected)\nprint(\"Output actual:\", solution(input_stdin))\n\nprint(\"\\nInput:\", input_stdin2)\nprint(\"Output expected:\", output_expected2)\nprint(\"Output actual:\", solution(input_stdin2)) "
    },
    {
        "number": 4190,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n    b = [int(x) for x in stdin.split(\"\\n\")[2].split()]\n    \n    b = sorted(b)\n    \n    c = [(a[i] + b[i]) % n for i in range(n)]\n    \n    return \" \".join(str(x) for x in c)\n"
    },
    {
        "number": 4190,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    b = list(map(int, stdin.splitlines()[2].split()))\n\n    c = [(a[i] + b[i]) % n for i in range(n)]\n    c.sort()\n\n    return \" \".join(map(str, c))"
    },
    {
        "number": 4191,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split()))\n    return str(nums.count(0) > nums.count(1)) "
    },
    {
        "number": 4191,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input as a list of integers\n    input_list = list(map(int, stdin.split()))\n\n    # Check if the sum of the first three elements is even or odd\n    if sum(input_list[:3]) % 2 == 0:\n        # If the sum is even, return 0\n        return \"0\"\n    else:\n        # If the sum is odd, return the fourth element\n        return str(input_list[3])"
    },
    {
        "number": 4191,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    numbers = list(map(int, stdin.split()))\n    if numbers.count(1) > numbers.count(0):\n        return \"1\"\n    else:\n        return \"0\"\n\ndef"
    },
    {
        "number": 4191,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_list = list(map(int, stdin.split(\"\\n\")))\n    count_of_ones = input_list.count(1)\n    count_of_zeros = len(input_list) - count_of_ones\n    if count_of_ones > count_of_zeros:\n        return \"1\"\n    else:\n        return \"0\" "
    },
    {
        "number": 4191,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    input_list = [int(i) for i in input_list]\n    x = input_list[0]\n    y = input_list[1]\n    z = input_list[2]\n    w = input_list[3]\n    if (x ^ y) == (y ^ z) and (y ^ z) == (z ^ w):\n        return str(x)\n    else:\n        return str(y)\n\ndef"
    },
    {
        "number": 4191,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    input_list = list(map(int, input_list))\n\n    result = 0\n    for num in input_list:\n        result = result ^ num\n\n    return str(result)\n"
    },
    {
        "number": 4191,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_list = list(stdin)\n    result = None\n    for num in input_list:\n        if num == \"1\":\n            if result is not None and result == \"0\":\n                return \"1\"\n            else:\n                result = \"1\"\n        elif num == \"0\":\n            if result is None:\n                result = \"0\"\n            elif result == \"1\":\n                return \"0\"\n    return str(result) "
    },
    {
        "number": 4191,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.strip().split('\\n')\n    count_zero = 0\n    count_one = 0\n\n    for num in input_list:\n        if num == '0':\n            count_zero += 1\n        else:\n            count_one += 1\n\n    if count_zero > count_one:\n        return '0'\n    else:\n        return '1' "
    },
    {
        "number": 4191,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    ones_count = sum(int(line) for line in lines)\n    if ones_count % 2 == 0:\n        return \"0\"\n    else:\n        return \"1\""
    },
    {
        "number": 4191,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    result = 1\n    for line in lines:\n        if int(line) == 0:\n            result = 0\n            break\n    return str(result) "
    },
    {
        "number": 4192,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split())\n    time_to_go = D / S\n    if time_to_go <= T:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split())\n    distance_to_travel = D\n    time_to_meet = T\n    speed = S\n\n    time_taken = distance_to_travel / speed\n\n    if time_taken <= time_to_meet:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4192,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split())\n    time_to_travel = D / S\n    if time_to_travel <= T:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4192,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split())\n    distance = D * T * S\n    time = distance // S\n    if time >= T:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4192,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split())\n    time_to_cover_distance = D / S\n    if time_to_cover_distance <= T:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4192,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split())\n    time_to_cover_distance = D / S\n    if time_to_cover_distance <= T:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ndef"
    },
    {
        "number": 4192,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split())\n    time_needed = D / S\n    if time_needed <= T:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split())\n    distance = D * T * S\n    if distance <= 0:\n        return \"No\"\n    travel_time = distance / S\n    if travel_time <= T:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nD, T, S = map(int, input().split())\nprint(solution(f\"{D} {T} {S}\")) "
    },
    {
        "number": 4192,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split())\n    distance = D * S * T\n    time = D / S + T\n    if time <= D / S + T:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ndef"
    },
    {
        "number": 4192,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split())\n    time_to_cover_distance = D / S\n    if time_to_cover_distance <= T:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4193,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A = [list(map(int, input().split())) for _ in range(3)]\n    N = int(input())\n    b = list(map(int, stdin.split()))\n\n    def check_horizontal(i: int, j: int) -> bool:\n        return b[i] in A[j]\n\n    def check_vertical(i: int, j: int) -> bool:\n        return b[i] in [A[row][j] for row in range(3)]\n\n    def check_diagonal(i: int, j: int) -> bool:\n        return b[i] in [A[i+j][i] for i in range(3)]\n\n    for i in range(N):\n        for j in range(3):\n            if check_horizontal(i, j) or check_vertical(i, j) or check_diagonal(i, j):\n                return \"Yes\"\n\n    return \"No\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    bingo_card = [[int(x) for x in line.split()] for line in lines[:3]]\n    N = int(lines[3])\n    b_numbers = [int(x) for x in lines[4:]]\n\n    # Check if there is a bingo\n    for i in range(3):\n        # Check rows\n        if len(set(bingo_card[i])) == 1:\n            return \"Yes\"\n        # Check columns\n        col = [bingo_card[j][i] for j in range(3)]\n        if len(set(col)) == 1:\n            return \"Yes\"\n\n    # Check diagonals\n    diagonal1 = [bingo_card[i][i] for i in range(3)]\n    diagonal2 = [bingo_card[i][2 - i] for i in range(3)]\n    if len(set(diagonal1)) == 1 or len(set(diagonal2)) == 1:\n        return \"Yes\"\n\n    # Check if any b_number is in the bingo card\n    for b in b_numbers:\n        if b in [x for row in bingo_card for x in row]:\n            return \"Yes\"\n\n    return \"No\"\n\n\nstdin = '''84 97 66\n79 89 11\n61 59 7\n7\n89\n7\n87\n79\n24\n84\n30'''\n\nprint(solution(stdin))  # Output: Yes "
    },
    {
        "number": 4193,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A = [list(map(int, input().split())) for _ in range(3)]\n    N = int(input())\n    b = list(map(int, input().split()))\n    \n    # Check for bingo in rows\n    for i in range(3):\n        if all(A[i][j] in b for j in range(3)):\n            return \"Yes\"\n    \n    # Check for bingo in columns\n    for j in range(3):\n        if all(A[i][j] in b for i in range(3)):\n            return \"Yes\"\n    \n    # Check for bingo in diagonals\n    if all(A[i][i] in b for i in range(3)):\n        return \"Yes\"\n    if all(A[2 - i][i] in b for i in range(3)):\n        return \"Yes\"\n    \n    return \"No\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, N, b = [], [], []\n    n = 0\n\n    for line in stdin.split('\\n'):\n        if n < 3:\n            A.append(list(map(int, line.split())))\n            n += 1\n        else:\n            b.append(int(line))\n\n    def bingo(nums, A):\n        for row in A:\n            if nums.issubset(set(row)):\n                return True\n\n        for col in range(3):\n            if nums.issubset(set([A[row][col] for row in range(3)])):\n                return True\n\n        if nums.issubset(set([A[row][row] for row in range(3)])):\n            return True\n\n        if nums.issubset(set([A[row][2 - row] for row in range(3)])):\n            return True\n\n        return False\n\n    for num in b:\n        if bingo(set([num]), A):\n            return \"Yes\"\n\n    return \"No\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def is_bingo(grid: list) -> bool:\n        # Check rows\n        for row in grid:\n            if all(cell in marked for cell in row):\n                return True\n\n        # Check columns\n        for col in range(3):\n            if all(grid[row][col] in marked for row in range(3)):\n                return True\n\n        # Check diagonals\n        if all(grid[i][i] in marked for i in range(3)):\n            return True\n        if all(grid[2 - i][i] in marked for i in range(3)):\n            return True\n\n        return False\n\n    def mark(grid: list, num: int) -> None:\n        for row in range(3):\n            for col in range(3):\n                if grid[row][col] == num:\n                    marked[row][col] = True\n\n    # Read input\n    stdin = stdin.splitlines()\n    grid = [[int(stdin[i][j]) for j in range(3)] for i in range(3)]\n    N = int(stdin[-2])\n    marked = [[False for _ in range(3)] for _ in range(3)]\n    bingo_numbers = [int(stdin[-1])] + [int(stdin[-N])] * (N - 1)\n\n    # Check for bingo\n    for num in bingo_numbers:\n        mark(grid, num)\n        if is_bingo(grid):\n            return \"Yes\"\n\n    return \"No\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A = [[0 for _ in range(3)] for _ in range(3)]\n    N = int(stdin.split('\\n')[0])\n    b = [int(x) for x in stdin.split('\\n')[1:N+1]]\n\n    for i in range(3):\n        A[i] = [int(x) for x in stdin.split('\\n')[i+N+1].split()]\n\n    def bingo(A, b):\n        for row in A:\n            if all(num in b for num in row):\n                return True\n\n        for col in range(3):\n            if all(A[row][col] in b for row in range(3)):\n                return True\n\n        if all(A[row][col] in b for row in range(3) for col in range(3)):\n            return True\n\n        if all(A[row][2-col] in b for row in range(3) for col in range(3)):\n            return True\n\n        return False\n\n    if bingo(A, b):\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4193,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, N, bs = [], [], []\n    i, j = 0, 0\n    for line in stdin.split(\"\\n\"):\n        if i == 3:\n            i = 0\n        for num in line.split():\n            A.append(int(num))\n            i += 1\n    N = int(stdin.split(\"\\n\")[-2])\n    for line in stdin.split(\"\\n\")[-N-1:-1]:\n        for num in line.split():\n            bs.append(int(num))\n    marked = set()\n    marked_diagonal = set()\n\n    def check_row(row):\n        for i in range(3):\n            if all(A[row*3+i] in marked for i in range(3)):\n                return True\n        return False\n\n    def check_col(col):\n        for i in range(3):\n            if all(A[i*3+col] in marked for i in range(3)):\n                return True\n        return False\n\n    def check_diagonal(i, j):\n        if A[i*3+j] in marked:\n            if len(marked_diagonal) >= 2:\n                for x, y in marked_diagonal:\n                    if i-x == j-y:\n                        return True\n            marked_diagonal.add((i, j))\n        return False\n\n    for b in bs:\n        for i in range(3):\n            for j in range(3):\n                if A[i*3+j] == b:\n                    marked.add(b)\n                    if check_row(i) or check_col(j) or check_diagonal(i, j):\n                        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input matrix and the list of numbers\n    matrix = []\n    n = int(stdin.split(\"\\n\")[-1])\n    numbers = [int(x) for x in stdin.split(\"\\n\")[:n]]\n    \n    # Build the matrix\n    for i in range(3):\n        row = [int(x) for x in stdin.split(\"\\n\")[i+3].split(\" \") if x]\n        matrix.append(row)\n    \n    # Check if we have a bingo\n    for i in range(3):\n        # Check rows\n        if any(num in matrix[i] for num in numbers):\n            return \"Yes\"\n        \n        # Check columns\n        if any(num in [row[i] for row in matrix] for num in numbers):\n            return \"Yes\"\n    \n    # Check diagonals\n    diag1 = [matrix[i][i] for i in range(3)]\n    diag2 = [matrix[i][2-i] for i in range(3)]\n    if any(num in diag1 for num in numbers) or any(num in diag2 for num in numbers):\n        return \"Yes\"\n    \n    return \"No\""
    },
    {
        "number": 4193,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    grid, nums = stdin.split(\"\\n\", 1)\n    rows = [list(map(int, row.split())) for row in grid.split(\"\\n\")]\n    N = int(nums.split(\"\\n\")[0])\n    bingo_nums = list(map(int, nums.split(\"\\n\")[1:]))\n\n    # check if we have bingo\n    def has_bingo(nums):\n        for i in range(3):\n            if all(num in nums for num in rows[i]):\n                return True\n            if all(num in nums for num in [rows[i][j] for j in range(3)]):\n                return True\n        if all(num in nums for num in [rows[i][i] for i in range(3)]):\n            return True\n        if all(num in nums for num in [rows[i][2 - i] for i in range(3)]):\n            return True\n        return False\n\n    return \"Yes\" if has_bingo(bingo_nums) else \"No\""
    },
    {
        "number": 4193,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    bingo_card = []\n    bingo_card.append([int(x) for x in stdin.split()[:3]])\n    bingo_card.append([int(x) for x in stdin.split()[3:6]])\n    bingo_card.append([int(x) for x in stdin.split()[6:9]])\n    N = int(stdin.split()[9])\n    chosen_numbers = [int(x) for x in stdin.split()[10:]]\n    \n    def check_bingo(bingo_card, chosen_numbers):\n        for i in range(3):\n            if all(num in chosen_numbers for num in bingo_card[i]):\n                return True\n            if all(num in chosen_numbers for num in [row[i] for row in bingo_card]):\n                return True\n            if all(bingo_card[i][j] in chosen_numbers for j in range(3)) or all(bingo_card[j][i] in chosen_numbers for j in range(3)):\n                return True\n        return False\n    \n    if check_bingo(bingo_card, chosen_numbers):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4194,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    A = list(map(int, stdin.split()[2:]))\n\n    # Calculate the maximum number of days Takahashi can hang out\n    max_days = 0\n    for i in range(M):\n        max_days += A[i]\n\n    # Check if he can finish all the assignments during the vacation\n    if max_days > N:\n        return -1\n\n    # Calculate the maximum number of days he can hang out during the vacation\n    max_days_hangout = 0\n    for i in range(M):\n        max_days_hangout += A[i]\n        if max_days_hangout > N:\n            break\n\n    return max_days_hangout\n\n\ndef"
    },
    {
        "number": 4194,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    N, M = map(int, input_list[0].split())\n    A_i = list(map(int, input_list[1].split()))\n\n    total_days = sum(A_i)\n\n    if total_days > N:\n        return -1\n\n    assignments = [0] * M\n    for i in range(M):\n        assignments[i] = A_i[i]\n\n    assignments.sort(reverse=True)\n\n    days = 0\n    for i in range(M):\n        if days + assignments[i] > N:\n            return -1\n        days += assignments[i]\n\n    return days\n"
    },
    {
        "number": 4194,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    \n    A.sort()\n    \n    if M > N:\n        return -1\n    \n    days_left = N\n    days_spent = 0\n    \n    for i in range(M):\n        if days_left < A[i]:\n            return -1\n        days_spent += A[i]\n        days_left -= A[i]\n    \n    return days_spent\n\n\ndef"
    },
    {
        "number": 4194,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    A = list(map(int, stdin.split()[2:]))\n    A.sort()\n\n    total_days = sum(A)\n    if total_days > N:\n        return -1\n\n    days_left = N - total_days\n    assignments_completed = 0\n    days_spent_hanging_out = 0\n\n    for i in range(M):\n        if A[i] <= days_left:\n            days_spent_hanging_out += A[i]\n            days_left -= A[i]\n            assignments_completed += 1\n        else:\n            break\n\n    if assignments_completed != M:\n        return -1\n\n    return days_spent_hanging_out\n"
    },
    {
        "number": 4194,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    A = list(map(int, stdin.split()[2:]))\n\n    # calculate the sum of all assignments\n    total_assignments = sum(A)\n\n    # if the total sum of assignments is greater than the number of days, it's impossible to finish all assignments\n    if total_assignments > N:\n        return -1\n\n    # initialize a list of days for each assignment\n    days_for_assignments = [1] * M\n\n    # calculate the maximum number of days Takahashi can hang out\n    max_days_hanging_out = N - total_assignments\n\n    # iterate through all assignments\n    for i in range(M):\n        # if the number of days left is less than the number of days for the current assignment, it's impossible to finish all assignments\n        if max_days_hanging_out < A[i]:\n            return -1\n\n        # calculate the maximum number of days Takahashi can hang out for the current assignment\n        max_days_for_current_assignment = min(max_days_hanging_out, A[i])\n\n        # update the list of days for each assignment\n        days_for_assignments[i] = max_days_for_current_assignment\n\n        # update the maximum number of days Takahashi can hang out\n        max_days_hanging_out -= max_days_for_current_assignment\n\n    return sum(days_for_assignments)"
    },
    {
        "number": 4194,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    A = list(map(int, stdin.split()[2:]))\n    assignments = sorted(enumerate(A), key=lambda x: x[1])\n    dp = [0] * (N + 1)\n    for i, (_, a) in enumerate(assignments, 1):\n        for j in range(N, N - a, -1):\n            if j < 0:\n                break\n            if dp[j - a] == i:\n                dp[j] = i + 1\n    if dp[-1] == M:\n        return dp[-1]\n    else:\n        return -1\n"
    },
    {
        "number": 4194,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    A = list(map(int, stdin.split()[2:]))\n\n    # Sort assignments in ascending order of completion time\n    A.sort()\n\n    # Initialize variables\n    max_days = 0\n    current_day = 0\n\n    # Iterate through the sorted assignments\n    for a in A:\n        # Check if there is enough time to complete the current assignment\n        if current_day + a <= N:\n            # Increment the current day by the completion time of the current assignment\n            current_day += a\n        else:\n            # If there isn't enough time, break out of the loop\n            break\n\n    # If all the assignments can be completed, return the maximum number of days\n    if current_day == N:\n        return max_days\n    else:\n        # Otherwise, return -1\n        return -1\n"
    },
    {
        "number": 4194,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    N, M = map(int, input_list[0].split())\n    A = list(map(int, input_list[1].split()))\n    total_days = sum(A)\n    max_days = 0\n    for i in range(len(A)):\n        max_days += A[i]\n        if max_days > N:\n            return -1\n        max_days -= 1\n    return total_days\n"
    },
    {
        "number": 4194,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    N = int(input_list[0])\n    M = int(input_list[1])\n    A = list(map(int, input_list[2:]))\n\n    if N < M:\n        return -1\n\n    if M == 0:\n        return 0\n\n    total_time = sum(A)\n    max_hangout_days = N - total_time\n\n    if max_hangout_days < 0:\n        return -1\n\n    return max_hangout_days\n"
    },
    {
        "number": 4194,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    A = list(map(int, stdin.split()[2:]))\n    A.sort(reverse=True)\n\n    days_needed = [0] * N\n    for i in range(M):\n        days_needed[i] = A[i]\n\n    for i in range(1, M):\n        days_needed[i] += days_needed[i - 1]\n\n    days_needed.sort()\n\n    max_days = sum(days_needed)\n    if max_days > N:\n        return -1\n    else:\n        return max_days\n\n\ndef"
    },
    {
        "number": 4195,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_values = stdin.strip().split()\n    D = int(input_values[0])\n    N = int(input_values[1])\n\n    # Calculate the N-th smallest integer\n    if D == 0:\n        result = 1\n    elif D == 1:\n        result = 100\n    else:\n        result = 101\n\n    # Add the difference between N and 100*D to the result\n    result += (N - D * 100)\n\n    return str(result)"
    },
    {
        "number": 4195,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, input().split())\n    if D == 0:\n        return str(N)\n    elif D == 1:\n        return str(N * 100)\n    elif D == 2:\n        return str(N * 100 + N)\n"
    },
    {
        "number": 4195,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split())\n    if D == 0:\n        return str((N * 100) + 1)\n    elif D == 1:\n        return str(((N * 100) + 100) * 2)\n    elif D == 2:\n        return str(N * 200)"
    },
    {
        "number": 4195,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split())\n    result = 0\n    if D == 0:\n        result = 1\n    elif D == 1:\n        result = 100\n    elif D == 2:\n        result = 101\n    return str(result + (N - 1) * 100) "
    },
    {
        "number": 4195,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split())\n    if D == 0:\n        return str(N * 100)\n    elif D == 1:\n        return str((N * 100) + 1)\n    elif D == 2:\n        return str((N * 100) + 2)\n"
    },
    {
        "number": 4195,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split())\n    if D == 0:\n        return str(100 * (N // 100))\n    elif D == 1:\n        return str(N % 100)\n    else:\n        return str(100 * ((N - 1) // 100))\n\ndef"
    },
    {
        "number": 4195,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split())\n    if D == 0:\n        return str((N // 2) * 2)\n    elif D == 1:\n        return str(100 * (N // 100) + (N % 100) + ((N % 100) != 0))\n    else:\n        return str(100 * (N // 100) + ((N % 100) // 2) + 1)\n"
    },
    {
        "number": 4195,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split())\n    if D == 0:\n        result = 1\n    else:\n        result = 100\n\n    for _ in range(N - 1):\n        if D == 0:\n            result += 1\n        elif D == 1:\n            result += 100\n        else:\n            result += 200\n\n    return str(result)\n"
    },
    {
        "number": 4195,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split())\n    if D == 0:\n        return str((100 * (N - 1)) + 1)\n    elif D == 1:\n        return str((N - 1) * 100 + 1)\n    else:\n        return str(N * 100)\n"
    },
    {
        "number": 4195,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_values = stdin.split()\n    D = int(input_values[0])\n    N = int(input_values[1])\n\n    if D == 0:\n        return str(N)\n    elif D == 1:\n        return str((N - 1) * 100 + 1)\n    else:\n        return str((N - 1) * 200 + 101)\n"
    },
    {
        "number": 4196,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    A = [int(x) for x in stdin.split('\\n')[1].split()]\n\n    def gcd(a, b):\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n\n    def max_gcd(A):\n        max_gcd_val = A[0]\n        for i in range(1, N):\n            max_gcd_val = gcd(max_gcd_val, A[i])\n        return max_gcd_val\n\n    return max_gcd(A)"
    },
    {
        "number": 4196,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    A = list(map(int, stdin.split('\\n')[1].split()))\n    A_new = [4] * N\n    return str(max(math.gcd(A_new[i], A[i]) for i in range(N)))"
    },
    {
        "number": 4196,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    A = list(map(int, stdin[1].split()))\n\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def max_gcd(A):\n        max_val = A[0]\n        for a in A:\n            max_val = gcd(max_val, a)\n        return max_val\n\n    def min_gcd(A):\n        min_val = A[0]\n        for a in A:\n            min_val = gcd(min_val, a)\n        return min_val\n\n    max_gcd_val = max_gcd(A)\n    min_gcd_val = min_gcd(A)\n\n    return str(max_gcd_val // min_gcd_val)\n"
    },
    {
        "number": 4196,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_list = list(map(int, stdin.split()))\n    N = input_list[0]\n    A = input_list[1:]\n    max_gcd = 1\n    for i in range(1, 11):\n        temp_list = A.copy()\n        temp_list[0] = i\n        max_gcd = max(max_gcd, math.gcd(*temp_list))\n    return max_gcd\n\n\nstdin = input(\"Enter N and integers separated by spaces: \")\nresult = solution(stdin)\nprint(\"Maximum possible greatest common divisor:\", result) "
    },
    {
        "number": 4196,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = map(int, stdin.split())\n    M = 10**9\n\n    # Helper function to calculate gcd\n    def gcd(a, b):\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n\n    # Helper function to find the maximum possible gcd\n    def max_gcd(A, B):\n        return max(gcd(A, B), gcd(A, B // M), gcd(A, B // (M * M)),\n                   gcd(A, B // (M * M * M)))\n\n    # Replace one of the integers with the specified integer\n    A_new = A.copy()\n    A_new[0] = 4\n\n    # Calculate the maximum possible gcd\n    gcd_max = max(max_gcd(A_new[i], A_new[j]) for i in range(N) for j in range(i + 1, N))\n\n    return str(gcd_max)"
    },
    {
        "number": 4196,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    numbers = list(map(int, stdin.split('\\n')[1].split()))\n\n    def gcd(a, b):\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n\n    def max_gcd(numbers):\n        max_gcd = numbers[0]\n        for i in range(1, N):\n            max_gcd = gcd(max_gcd, numbers[i])\n        return max_gcd\n\n    modified_numbers = numbers.copy()\n    modified_numbers[0] = 4\n    max_gcd_original = max_gcd(numbers)\n    max_gcd_modified = max_gcd(modified_numbers)\n\n    return str(max(max_gcd_original, max_gcd_modified))\n"
    },
    {
        "number": 4196,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a: int, b: int) -> int:\n        while b:\n            a, b = b, a % b\n        return a\n\n    N, *A = map(int, stdin.split())\n    max_gcd = A[0]\n\n    for i in range(1, N):\n        max_gcd = gcd(max_gcd, A[i])\n\n    return max_gcd\n"
    },
    {
        "number": 4196,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a: int, b: int) -> int:\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n\n    N, *A = map(int, stdin.split())\n    max_gcd = 1\n\n    for i in range(N - 1):\n        max_gcd = gcd(max_gcd, gcd(A[i], A[i + 1]))\n\n    return max_gcd\n"
    },
    {
        "number": 4196,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, blackboard = map(int, stdin.split())\n    blackboard = sorted(blackboard)\n    return 1"
    },
    {
        "number": 4196,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = map(int, stdin.split())\n    A.sort()\n    A.append(10**9)\n    max_gcd = 1\n\n    for i in range(len(A) - 1, 0, -1):\n        max_gcd = max(max_gcd, math.gcd(A[i], A[i - 1]))\n\n    return str(max_gcd)\n"
    },
    {
        "number": 4197,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, std_list = map(int, stdin.split())\n    students = list(range(1, N+1))\n\n    for i in range(N):\n        for j in range(A_i):\n            if students[j] == i:\n                students[j] = None\n                break\n\n    return \" \".join([str(student) for student in students if student is not None])\n\ndef"
    },
    {
        "number": 4197,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, A_i = map(int, stdin.split())\n\n    # Create a list of tuples with the student number and the time it entered the classroom\n    student_times = [(i, A_i[i-1]) for i in range(1, N+1)]\n\n    # Sort the list by the time the students entered the classroom\n    student_times.sort(key=lambda x: x[1])\n\n    # Print the student numbers in the order they entered the classroom\n    return \" \".join(map(str, [x[0] for x in student_times]))"
    },
    {
        "number": 4197,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    A = list(map(int, stdin[1].split()))\n\n    # Create a dictionary to store the number of students in the classroom when each student enters\n    students_in_classroom = {}\n    for i in range(N):\n        students_in_classroom[A[i]] = i + 1\n\n    # Sort the students based on the number of students in the classroom when they enter\n    sorted_students = sorted(students_in_classroom.keys(), key=lambda x: students_in_classroom[x])\n\n    # Print the sorted students\n    return ' '.join(map(str, sorted_students))\n"
    },
    {
        "number": 4197,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, A_i = map(int, stdin.split())\n    order = [0] * (N + 1)\n\n    for i in range(N):\n        order[A_i[i]] = i + 1\n\n    result = []\n    for i in range(1, N + 1):\n        if order[i] == 0:\n            result.append(i)\n\n    return \" \".join(map(str, result))\n"
    },
    {
        "number": 4197,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    A = list(map(int, stdin.split()[1:]))\n\n    # Create a dictionary with keys as student numbers and values as indices\n    indices = {i: i for i in range(1, N+1)}\n\n    # Sort the students based on their entry times\n    students = sorted(indices.keys(), key=lambda x: A[x-1])\n\n    # Reconstruct the order in which the students entered the classroom\n    result = [0] * N\n    for i, student in enumerate(students):\n        result[A[student-1]-1] = student\n\n    # Print the student numbers in the order they entered the classroom\n    return ' '.join(map(str, result))"
    },
    {
        "number": 4197,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    students = [0] * N\n    for i in range(N):\n        students[A[i] - 1] = i + 1\n    return \" \".join(map(str, students))\n"
    },
    {
        "number": 4197,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = map(int, stdin.split())\n    std_order = []\n    visited = [False] * (N + 1)\n\n    while not all(visited):\n        for i in range(1, N + 1):\n            if not visited[i] and all(visited[:A[i - 1]]):\n                std_order.append(i)\n                visited[i] = True\n                break\n\n    return \" \".join(map(str, std_order))"
    },
    {
        "number": 4197,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, A_str = map(int, stdin.split())\n    A = list(map(int, A_str.split()))\n    \n    # Create a dictionary to store the order of students\n    student_order = {i: A[i-1] for i in range(1, N+1)}\n    \n    # Sort the dictionary based on values (student numbers)\n    sorted_order = sorted(student_order.items(), key=lambda x: x[1])\n    \n    # Print the student numbers in the order they entered the classroom\n    return \" \".join([str(student[0]) for student in sorted_order])"
    },
    {
        "number": 4197,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    A_i = list(map(int, stdin[1].split()))\n\n    order = [0] * N\n    for i in range(N):\n        order[A_i[i] - 1] = i + 1\n\n    return \" \".join(map(str, order))\n"
    },
    {
        "number": 4197,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    N = int(input_list[0])\n    A = list(map(int, input_list[1:]))\n    result = []\n\n    for i in range(N):\n        for j in range(len(result) + 1):\n            if A[i] <= N - j:\n                result.insert(j, A[i])\n                break\n\n    return \" \".join(map(str, result))\n\n\nstdin = \"3 2 3 1\"\nprint(solution(stdin)) "
    },
    {
        "number": 4198,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    max_price = 0\n    max_integer = 0\n    \n    for n in range(1, 10**9 + 1):\n        price = A * n + B * len(str(n))\n        if price > X:\n            break\n        if price > max_price:\n            max_price = price\n            max_integer = n\n            \n    if max_integer == 0:\n        return \"0\"\n    else:\n        return str(max_integer)\n"
    },
    {
        "number": 4198,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n\n    def count_digits(n: int) -> int:\n        digits = 0\n        while n > 0:\n            n //= 10\n            digits += 1\n        return digits\n\n    max_price = 0\n    max_integer = -1\n\n    for i in range(1, 10**9 + 1):\n        price = A * i + B * count_digits(i)\n        if price <= X and i > max_integer:\n            max_price = price\n            max_integer = i\n\n    return str(max_integer) if max_integer != -1 else '0'\n"
    },
    {
        "number": 4198,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    max_price = 0\n    for i in range(1, 10**9 + 1):\n        price = A * i + B * len(str(i))\n        if price <= X and price > max_price:\n            max_price = price\n    if max_price == 0:\n        return '0'\n    else:\n        return str(int(max_price / A))\n"
    },
    {
        "number": 4198,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    n = 1\n    price = A * n + B * len(str(n))\n    while price <= X:\n        n += 1\n        price = A * n + B * len(str(n))\n    return n - 1 if n > 1 else 0"
    },
    {
        "number": 4198,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    max_N = 1\n    while A * max_N + B * len(str(max_N)) <= X:\n        max_N += 1\n    if max_N == 1:\n        return 0\n    return max_N - 1\n"
    },
    {
        "number": 4198,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    for i in range(10**9, 0, -1):\n        price = A * i + B * len(str(i))\n        if price <= X:\n            return i\n    return 0\n"
    },
    {
        "number": 4198,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    max_price = 0\n    max_integer = 0\n\n    for i in range(1, 10**9):\n        price = A * i + B * len(str(i))\n        if price > max_price and price <= X:\n            max_price = price\n            max_integer = i\n\n    if max_integer == 0:\n        return \"0\"\n    else:\n        return str(max_integer)\n"
    },
    {
        "number": 4198,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    for i in range(10**9, 0, -1):\n        price = A * i + B * len(str(i))\n        if price <= X:\n            return i\n    return 0\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4198,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    max_integer = 0\n\n    for i in range(1, X // (A * B) + 1):\n        price = A * i + B * len(str(i))\n        if price <= X:\n            max_integer = i\n\n    return str(max_integer)\n"
    },
    {
        "number": 4198,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    if X < A:\n        return 0\n    else:\n        N = X - A\n        return N // (B + 1)"
    },
    {
        "number": 4199,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[0:2])\n    heights = list(map(int, stdin.split()[2:]))\n    count = 0\n    for height in heights:\n        if height >= K:\n            count += 1\n    return str(count)\n\n\ninput_str = \"4 150\\n150 140 100 200\"\nprint(solution(input_str)) "
    },
    {
        "number": 4199,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[:2])\n    h = list(map(int, stdin.split()[2:]))\n    count = 0\n    for i in range(N):\n        if h[i] >= K:\n            count += 1\n    return count"
    },
    {
        "number": 4199,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[:2])\n    h = list(map(int, stdin.split()[2:]))\n    count = 0\n    for i in h:\n        if i >= K:\n            count += 1\n    return count\n\ndef"
    },
    {
        "number": 4199,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[0:2])\n    h = list(map(int, stdin.split()[2:]))\n    count = 0\n    for i in range(N):\n        if h[i] >= K:\n            count += 1\n    return count"
    },
    {
        "number": 4199,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[0:2])\n    heights = list(map(int, stdin.split()[2:]))\n    count = 0\n\n    for height in heights:\n        if height >= K:\n            count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4199,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[0:2])\n    heights = list(map(int, stdin.split()[2:]))\n    count = 0\n\n    for height in heights:\n        if height >= K:\n            count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4199,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[0:2])\n    heights = list(map(int, stdin.split()[2:]))\n    count = 0\n\n    for height in heights:\n        if height >= K:\n            count += 1\n\n    return str(count)\n\n\nstdin = \"4 150\\n150 140 100 200\"\nprint(solution(stdin)) "
    },
    {
        "number": 4199,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[:2])\n    heights = list(map(int, stdin.split()[2:]))\n    \n    count = 0\n    for height in heights:\n        if height >= K:\n            count += 1\n    \n    return str(count)\n"
    },
    {
        "number": 4199,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    N = int(input_list[0])\n    K = int(input_list[1])\n    heights = list(map(int, input_list[2:]))\n    count = 0\n    for h in heights:\n        if h >= K:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4199,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.strip().split(\"\\n\")\n    N, K = map(int, inputs[0].split())\n    heights = list(map(int, inputs[1].split()))\n    count = 0\n    \n    for height in heights:\n        if height >= K:\n            count += 1\n    \n    return str(count)"
    },
    {
        "number": 4200,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[0:2])\n    votes = list(map(int, stdin.split()[2:]))\n    total_votes = sum(votes)\n\n    if total_votes < M:\n        return \"No\"\n\n    for i in range(N):\n        if votes[i] >= total_votes / M:\n            return \"Yes\"\n\n    return \"No\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, input().split())\n    votes = list(map(int, stdin.split()[2:]))\n    total_votes = sum(votes)\n    min_votes_needed = 1 / 4 * M * total_votes\n    if votes[0] >= min_votes_needed:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.strip().split()\n    N, M = map(int, input_list[:2])\n    A = list(map(int, input_list[2:]))\n    total_votes = sum(A)\n\n    if M > N:\n        return \"No\"\n\n    A.sort(reverse=True)\n    popular_items = []\n\n    for a in A:\n        if a >= total_votes / (4 * M):\n            popular_items.append(a)\n            M -= 1\n\n        if M == 0:\n            break\n\n    return \"Yes\" if len(popular_items) == M else \"No\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    N, M = map(int, input_list[0].split())\n    A = list(map(int, input_list[1].split()))\n\n    total_votes = sum(A)\n    min_votes = int(total_votes / (4 * M))\n\n    if any(A_i >= min_votes for A_i in A):\n        return \"Yes\"\n    else:\n        return \"No\"\n\n\ndef"
    },
    {
        "number": 4200,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    A = list(map(int, stdin.split()[2:]))\n\n    total_votes = sum(A)\n    min_votes = total_votes // (4 * M)\n\n    if any(A_i >= min_votes for A_i in A):\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def calculate_votes(A: list, M: int) -> bool:\n        total_votes = sum(A)\n        for i in range(len(A)):\n            if A[i] * M / total_votes >= 1 / 4 * M:\n                return True\n        return False\n\n    N, M = map(int, stdin.split()[:2])\n    A = list(map(int, stdin.split()[2:]))\n    return \"Yes\" if calculate_votes(A, M) else \"No\""
    },
    {
        "number": 4200,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[0:2])\n    votes = list(map(int, stdin.split()[2:]))\n    total_votes = sum(votes)\n    \n    if total_votes < M * total_votes / 4:\n        return \"No\"\n    \n    votes.sort(reverse=True)\n    popular_items = 0\n    \n    for vote in votes:\n        if popular_items == M:\n            break\n        if vote >= total_votes / 4:\n            popular_items += 1\n    \n    if popular_items == M:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n\ndef"
    },
    {
        "number": 4200,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    \n    total_votes = sum(A)\n    max_votes_per_item = total_votes // M\n    \n    for i in range(N):\n        if A[i] >= max_votes_per_item:\n            return \"Yes\"\n        \n    return \"No\"\n\n\ndef"
    },
    {
        "number": 4200,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    A = list(map(int, stdin.split()[2:]))\n    total_votes = sum(A)\n    A.sort(reverse=True)\n    \n    for i in range(M):\n        if A[i] >= total_votes * 4 // M:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4200,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    N, M = map(int, input_list[0].split())\n    A = list(map(int, input_list[1].split()))\n    total_votes = sum(A)\n\n    if M > N:\n        return \"No\"\n\n    sorted_A = sorted(A, reverse=True)\n    selected_items = 0\n\n    for i in range(N):\n        if selected_items >= M:\n            break\n        if sorted_A[i] / total_votes >= 1 / (4 * M):\n            selected_items += 1\n\n    if selected_items == M:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4201,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = map(int, stdin.split())\n    grid = [list(input()) for _ in range(H)]\n    \n    def count_black_squares(rows, cols):\n        count = 0\n        for i in range(1, H+1):\n            for j in range(1, W+1):\n                if i in rows or j in cols:\n                    if grid[i-1][j-1] == '#':\n                        count += 1\n        return count\n    \n    def check(rows, cols):\n        black_squares = count_black_squares(rows, cols)\n        return black_squares == K\n    \n    result = 0\n    for rows in range(H+1):\n        for cols in range(W+1):\n            if check(range(1, rows+1), range(1, cols+1)):\n                result += 1\n                \n    return str(result)\n\n\nstdin = \"\"\"2 3 2\n..#\n###\"\"\"\n\nprint(solution(stdin)) "
    },
    {
        "number": 4201,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = map(int, input().split())\n    grid = []\n    for _ in range(H):\n        grid.append(input())\n    \n    count = 0\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == '#':\n                K -= 1\n                if K == 0:\n                    count += 1\n    \n    # 1-st row and 1-st column\n    count += (K <= grid[0].count('#'))\n    # 1-st row and 2-nd column\n    count += (K <= (grid[0][0] == '#') + (grid[0][1] == '#'))\n    # 1-st row and 3-rd column\n    count += (K <= (grid[0][0] == '#') + (grid[0][2] == '#'))\n    # 1-st and 2-nd column\n    count += (K <= grid[0:2].count('#') + grid[1:3].count('#'))\n    # 3-rd column\n    count += (K <= (grid[0][2] == '#') + (grid[1][2] == '#'))\n    \n    return str(count)\n"
    },
    {
        "number": 4201,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = map(int, input().split())\n    grid = [input() for _ in range(H)]\n\n    def count_black_squares(rows, cols):\n        count = 0\n        for i in range(1, H + 1):\n            if i in rows:\n                continue\n            for j in range(1, W + 1):\n                if j in cols:\n                    continue\n                if grid[i - 1][j - 1] == '#':\n                    count += 1\n        return count\n\n    choices = 0\n    for rows in range(H + 1):\n        for cols in range(W + 1):\n            if count_black_squares(range(1, rows + 1), range(1, cols + 1)) == K:\n                choices += 1\n\n    return str(choices)\n"
    },
    {
        "number": 4201,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = map(int, stdin.split())\n    grid = [list(input()) for _ in range(H)]\n    count = 0\n\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == '#':\n                K -= 1\n\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == '#':\n                if i > 0 and grid[i - 1][j] == '#':\n                    K -= 1\n                if j > 0 and grid[i][j - 1] == '#':\n                    K -= 1\n\n    if K == 0:\n        count += 1\n\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == '#':\n                continue\n            for ii in range(i + 1, H):\n                if grid[ii][j] == '#':\n                    K -= 1\n            for jj in range(j + 1, W):\n                if grid[i][jj] == '#':\n                    K -= 1\n\n            if K == 0:\n                count += 1\n\n    for i in range(H - 1):\n        for j in range(W):\n            if grid[i][j] == '#' and grid[i + 1][j] == '#':\n                K -= 1\n            if grid[i][j] == '#' and grid[i][j + 1] == '#':\n                K -= 1\n\n        if K == 0:\n            count += 1\n\n    for j in range(W - 1):\n        for i in range(H):\n            if grid[i][j] == '#' and grid[i][j + 1] == '#':\n                K -= 1\n\n        if K == 0:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4201,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = map(int, input().split())\n    grid = []\n    for _ in range(H):\n        grid.append(input())\n    \n    black_squares = 0\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == '#':\n                black_squares += 1\n    \n    choices = 0\n    for rows in range(H + 1):\n        for columns in range(W + 1):\n            if rows + columns <= black_squares - K:\n                choices += 1\n    \n    return choices\n"
    },
    {
        "number": 4201,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = map(int, input().split())\n    grid = []\n    for _ in range(H):\n        grid.append(input())\n\n    choices = []\n    for i in range(1, H+1):\n        for j in range(1, W+1):\n            if grid[i-1][j-1] == '#':\n                continue\n            count = 0\n            for h in range(1, i+1):\n                for w in range(1, j+1):\n                    if grid[h-1][w-1] == '#':\n                        count += 1\n            if count == K:\n                choices.append((i, j))\n\n    result = len(choices)\n    for choice in choices:\n        print(f\"The {choice[0]}-th row and {choice[1]}-th column\")\n\n    return str(result)\n\nstdin = \"\"\"2 3 2\n..#\n###\"\"\"\n\nprint(solution(stdin)) # Output: 5"
    },
    {
        "number": 4201,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = map(int, stdin.split())\n    grid = [list(stdin.split()) for _ in range(H)]\n\n    count = 0\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == '#':\n                continue\n            for di in range(-H + 1, H):\n                for dj in range(-W + 1, W):\n                    if 0 <= i + di < H and 0 <= j + dj < W:\n                        if grid[i + di][j + dj] == '#':\n                            count += 1\n                            if count == K:\n                                return count\n    return count"
    },
    {
        "number": 4201,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = map(int, stdin.split())\n    grid = [list(stdin.split()[i]) for i in range(1, H+1)]\n\n    def count_black_squares(rows, cols):\n        count = 0\n        for i in rows:\n            for j in cols:\n                if grid[i-1][j-1] == '#':\n                    count += 1\n        return count\n\n    # All choices of rows and columns that result in K black squares\n    choices = []\n    for i in range(1, H+1):\n        for j in range(1, W+1):\n            black_squares = count_black_squares([i], [j])\n            if black_squares == K:\n                choices.append((i, j))\n\n    return len(choices)\n"
    },
    {
        "number": 4201,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = map(int, input().split())\n    grid = []\n    for _ in range(H):\n        row = input().strip()\n        grid.append(row)\n\n    def count_black_squares(rows, cols):\n        count = 0\n        for i in rows:\n            for j in cols:\n                count += grid[i - 1][j - 1] == '#'\n        return count\n\n    def choose_rows_and_cols(rows, cols, depth, remaining):\n        if depth == remaining:\n            return count_black_squares(rows, cols)\n        count = 0\n        for i in range(1, H + 1):\n            if i not in rows:\n                rows.append(i)\n                count += choose_rows_and_cols(rows, cols, depth + 1, remaining)\n                rows.pop()\n        for j in range(1, W + 1):\n            if j not in cols:\n                cols.append(j)\n                count += choose_rows_and_cols(rows, cols, depth + 1, remaining)\n                cols.pop()\n        return count\n\n    return choose_rows_and_cols([], [], 1, K)\n\n\nstdin = \"\"\"\n2 3 2\n..#\n###\n\"\"\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4201,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = map(int, stdin.split())\n    grid = []\n    for _ in range(H):\n        grid.append(stdin.readline().strip())\n    \n    def count_black_squares(rows: set, cols: set) -> int:\n        count = 0\n        for i in range(H):\n            for j in range(W):\n                if (i+1 in rows or i+1 in cols) or (j+1 in rows or j+1 in cols):\n                    continue\n                if grid[i][j] == '#':\n                    count += 1\n        return count\n    \n    def count_choices(rows: set, cols: set) -> int:\n        count = 0\n        for i in range(1, H+1):\n            for j in range(1, W+1):\n                if i in rows or j in cols:\n                    continue\n                new_rows = rows.copy()\n                new_cols = cols.copy()\n                new_rows.add(i)\n                new_cols.add(j)\n                if count_black_squares(new_rows, new_cols) == K:\n                    count += 1\n        return count\n    \n    choices = []\n    for rows in itertools.combinations(range(1, H+1), K):\n        for cols in itertools.combinations(range(1, W+1), K):\n            if len(rows) + len(cols) == K:\n                choices.append((rows, cols))\n    \n    result = 0\n    for rows, cols in choices:\n        result += count_choices(set(rows), set(cols))\n    \n    return result\n\nstdin = \"\"\"2 3 2\n..#\n###\"\"\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4202,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    if L >= 2020:\n        return 2\n    if L >= 2019:\n        return 0\n    return 1 "
    },
    {
        "number": 4202,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    i = 0\n    j = R\n    min_value = float('inf')\n\n    while i <= L:\n        i += 1\n        j = R\n        while j >= i:\n            product = (i * j) % 2019\n            if product < min_value:\n                min_value = product\n            j -= 1\n\n    return str(min_value)\n"
    },
    {
        "number": 4202,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    \n    minimum = float('inf')\n    for i in range(L, R):\n        for j in range(i+1, R+1):\n            result = (i*j) % 2019\n            if result < minimum:\n                minimum = result\n                \n    return str(minimum)"
    },
    {
        "number": 4202,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    i = L + 1\n    min_value = 2019\n    while i < R:\n        j = i + 1\n        while j <= R:\n            product = i * j\n            mod_product = product % 2019\n            if mod_product < min_value:\n                min_value = mod_product\n            j += 1\n        i += 1\n    return str(min_value)\n\n\ninput_stdin = \"2020 2040\"\noutput = solution(input_stdin)\nprint(output)\n"
    },
    {
        "number": 4202,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    mod = 2019\n    min_value = float('inf')\n\n    for i in range(L, R):\n        j = (i * (i + 1)) % mod\n        value = (i * j) % mod\n\n        if value < min_value:\n            min_value = value\n\n    return str(min_value)\n\n\ndef"
    },
    {
        "number": 4202,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n\n    min_product = 2019\n    for i in range(L, R):\n        for j in range(i + 1, R + 1):\n            product = (i * j) % 2019\n            if product < min_product:\n                min_product = product\n\n    return str(min_product)"
    },
    {
        "number": 4202,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    i = L\n    j = L + 1\n    min_value = (i * j) % 2019\n    \n    while i < R:\n        j = i + 1\n        while j <= R:\n            value = (i * j) % 2019\n            if value < min_value:\n                min_value = value\n            j += 1\n        i += 1\n    \n    return str(min_value)\n\ninput_str = \"2020 2040\"\nprint(solution(input_str)) "
    },
    {
        "number": 4202,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    min_mod = 2019\n    for i in range(L, R):\n        for j in range(i+1, R+1):\n            product_mod = (i * j) % 2019\n            if product_mod < min_mod:\n                min_mod = product_mod\n    return str(min_mod)"
    },
    {
        "number": 4202,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n\n    min_product = float('inf')\n    for i in range(L, R):\n        for j in range(i + 1, R + 1):\n            product = (i * j) % 2019\n            min_product = min(min_product, product)\n\n    return str(min_product)\n\n\ninput_data = \"2020 2040\"\nresult = solution(input_data)\nprint(result) "
    },
    {
        "number": 4202,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n\n    # Calculate the minimum value of (i * j) mod 2019\n    min_val = (L * (L + 1)) % 2019\n\n    for i in range(L + 1, R):\n        for j in range(i + 1, R + 1):\n            temp = (i * j) % 2019\n            if temp < min_val:\n                min_val = temp\n\n    return str(min_val)\n"
    },
    {
        "number": 4203,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n\n    if len(S) < 4 or len(S) > 10:\n        return \"WA\"\n\n    if not S[0].isupper() or S[0] != \"A\":\n        return \"WA\"\n\n    if not S[2].isupper() or S[2] != \"C\":\n        return \"WA\"\n\n    if not all(c.islower() for c in S[3:-2]):\n        return \"WA\"\n\n    return \"AC\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin[0]\n    if len(S) < 4 or len(S) > 10:\n        return \"WA\"\n    if S[0] != 'A':\n        return \"WA\"\n    if 'C' not in S[2:-1]:\n        return \"WA\"\n    for i in range(len(S)):\n        if i in [0, 1, 2]:\n            if S[i] != 'A' and not S[i].islower():\n                return \"WA\"\n        elif i in [3, 4]:\n            if S[i] != 'C' and not S[i].islower():\n                return \"WA\"\n        else:\n            if not S[i].islower():\n                return \"WA\"\n    return \"AC\""
    },
    {
        "number": 4203,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if len(S) < 4 or len(S) > 10:\n        return \"WA\"\n\n    if S[0] != 'A':\n        return \"WA\"\n\n    has_c = False\n    for i in range(2, len(S) - 1):\n        if S[i] == 'C':\n            has_c = True\n            break\n\n    if not has_c:\n        return \"WA\"\n\n    for i in range(len(S)):\n        if S[i] == 'A' or S[i] == 'C':\n            continue\n        if S[i] != 'a':\n            return \"WA\"\n\n    return \"AC\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n\n    if len(S) < 4 or len(S) > 10:\n        return \"WA\"\n\n    if not S[0].isupper() or not S[-1].isupper() or not S[2].isupper() or not S[3].isupper():\n        return \"WA\"\n\n    if S[1] != \"C\" and S[2] != \"C\" and S[3] != \"C\" and S[4] != \"C\" and S[5] != \"C\":\n        return \"WA\"\n\n    if S[1] == \"C\" or S[2] == \"C\" or S[3] == \"C\" or S[4] == \"C\" or S[5] == \"C\":\n        return \"WA\"\n\n    for i in range(len(S)):\n        if not S[i].islower():\n            return \"WA\"\n\n    return \"AC\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if not (S[0] == 'A' and S[2] == 'C' and S.islower() and len(S) >= 6 and S[1:3].count('C') == 1):\n        return \"WA\"\n    return \"AC\"\n\n\ndef"
    },
    {
        "number": 4203,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if len(S) < 4 or len(S) > 10:\n        return \"WA\"\n    for i, c in enumerate(S):\n        if i == 0 and c != \"A\":\n            return \"WA\"\n        elif i == 2 and c != \"C\":\n            return \"WA\"\n        elif c == \"C\" or c == \"A\":\n            continue\n        elif c != \"a\":\n            return \"WA\"\n    return \"AC\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s) < 4 or len(s) > 10:\n        return \"WA\"\n\n    if s[0] != 'A':\n        return \"WA\"\n\n    if 'C' not in s[3:]:\n        return \"WA\"\n\n    for i in range(len(s)):\n        if i == 0:\n            continue\n        if s[i] == 'A' or s[i] == 'C':\n            continue\n        if not s[i].islower():\n            return \"WA\"\n\n    return \"AC\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n\n    if len(S) < 4 or len(S) > 10:\n        return \"WA\"\n\n    if not S[0].isupper() or not S[1].isupper() or not S[2].isupper():\n        return \"WA\"\n\n    if not S[3].islower():\n        return \"WA\"\n\n    if not S[4:].islower():\n        return \"WA\"\n\n    if \"C\" not in S[3:-2]:\n        return \"WA\"\n\n    return \"AC\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    if s[0] != 'A':\n        return 'WA'\n    if 'C' not in s[2:-1]:\n        return 'WA'\n    for c in s[2:-1]:\n        if c != 'c':\n            return 'WA'\n    for c in s[1:]:\n        if c not in 'ac':\n            return 'WA'\n    return 'AC'\n"
    },
    {
        "number": 4203,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n\n    # Check if the initial character is A\n    if S[0] != 'A':\n        return 'WA'\n\n    # Check if there is exactly one occurrence of C between the third and second-to-last characters\n    if S.count('C') != 1 or S.index('C') + 2 >= len(S) or S.index('C') - 1 < 2:\n        return 'WA'\n\n    # Check if all letters except the A and C are lowercase\n    for letter in S:\n        if letter != 'A' and letter != 'C' and not letter.islower():\n            return 'WA'\n\n    return 'AC'"
    },
    {
        "number": 4204,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, K = stdin.splitlines()\n    S = S.replace('2', '22').replace('3', '333').replace('4', '4444').replace('5', '55555').replace('6', '666666').replace('7', '7777777').replace('8', '88888888').replace('9', '999999999')\n    result = S.split('1')[-1]\n    length = len(result)\n    K = int(K)\n\n    if K > 5 * 10 ** 15:\n        raise ValueError(\"K is larger than the total number of days\")\n\n    for _ in range(K):\n        result = result.replace('22', '222').replace('333', '33333').replace('4444', '44444444').replace('55555', '555555555').replace('666666', '666666666666666666').replace
    },
    {
        "number": 4204,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    S, K = stdin.split()\n    K = int(K)\n\n    # Convert S to its modified form\n    S = [int(c) for c in S]\n    modified_S = []\n    for num in S:\n        if num == 1:\n            modified_S.append(1)\n        elif num == 2:\n            modified_S.append(22)\n        elif num == 3:\n            modified_S.append(333)\n        elif num == 4:\n            modified_S.append(4444)\n        elif num == 5:\n            modified_S.append(55555)\n        elif num == 6:\n            modified_S.append(666666)\n        elif num == 7:\n            modified_S.append(7777777)\n        elif num == 8:\n            modified_S.append(88888888)\n        else:\n            modified_S.append(999999999)\n\n    # Calculate the length of the modified string\n    length = sum([len(str(num)) for num in modified_S])\n\n    # Calculate the number of days needed to reach length >= K\n    days = 0\n    while length < K:\n        days += 1\n        modified_S = [num * 10 ** days for num in modified_S]\n        length = sum([len(str(num)) for num in modified_S])\n\n    # Find the K-th character in the modified string\n    index = K - 1\n    for num in modified_S:\n        index -= len(str(num))\n        if index < 0:\n            return str(num)"
    },
    {
        "number": 4204,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S, K = stdin.split()\n    K = int(K)\n    S = list(S)\n    len_s = len(S)\n    for i in range(len_s):\n        if S[i] == '2':\n            S[i] = '22'\n        elif S[i] == '3':\n            S[i] = '333'\n        elif S[i] == '4':\n            S[i] = '4444'\n        elif S[i] == '5':\n            S[i] = '55555'\n        elif S[i] == '6':\n            S[i] = '666666'\n        elif S[i] == '7':\n            S[i] = '7777777'\n        elif S[i] == '8':\n            S[i] = '88888888'\n        elif S[i] == '9':\n            S[i] = '999999999'\n    \n    days = 0\n    while len_s < K:\n        new_S = []\n        for i in range(len_s):\n            if S[i] == '2':\n                new_S.extend('22')\n            elif S[i] == '3':\n                new_S.extend('333')\n            elif S[i] == '4':\n                new_S.extend('4444')\n            elif S[i] == '5':\n                new_S.extend('55555')\n            elif S[i] == '6':\n                new_S.extend('666666')\n            elif S[i] == '7':\n                new_S.extend('7777777')\n            elif S[i] == '8':\n                new_S.extend('88888888')\n            elif S[i] == '9':\n                new_S.extend('999999999')\n            else:\n                new_S.append(S[i])\n        S = new_S\n        len_s = len(S)\n        days += 1\n    \n    return S[K-1]\n\ninput_string = input()\nprint(solution(input_string)) "
    },
    {
        "number": 4204,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S, K = stdin.split()\n    S = list(S)\n    days = 5 * 10**15\n    for _ in range(days):\n        new_S = []\n        for digit in S:\n            if digit == '2':\n                new_S.extend(['2', '2'])\n            elif digit == '3':\n                new_S.extend(['3', '3', '3'])\n            elif digit == '4':\n                new_S.extend(['4', '4', '4', '4'])\n            elif digit == '5':\n                new_S.extend(['5', '5', '5', '5', '5'])\n            elif digit == '6':\n                new_S.extend(['6', '6', '6', '6', '6', '6'])\n            elif digit == '7':\n                new_S.extend(['7', '7', '7', '7', '7', '7', '7'])\n            elif digit == '8':\n                new_S.extend(['8', '8', '8', '8', '8', '8', '8', '8', '8', '8'])\n            elif digit == '9':\n                new_S.extend(['9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9'])\n            else:\n                new_S.append(digit)\n        S = new_S\n\n    return S[K-1]"
    },
    {
        "number": 4204,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S, K = stdin.split()\n    S = S.lstrip('0')\n    if len(S) == 0:\n        S = '1'\n    length = len(S)\n    K = int(K)\n\n    for _ in range(5 * 10**15):\n        new_S = ''\n        for char in S:\n            if char == '1':\n                new_S += '1'\n            else:\n                new_S += str(int(char)**2)\n        S = new_S\n\n    return S[K-1]\n"
    },
    {
        "number": 4204,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S, K = stdin.split()\n    S = S.replace('2', '22').replace('3', '333').replace('4', '4444').replace('5', '55555').replace('6', '666666').replace('7', '7777777').replace('8', '88888888').replace('9', '999999999')\n    length_after_5x10e15_days = len(S) * 5 * 10**15\n    K = int(K)\n    \n    if length_after_5x10e15_days < K:\n        return \"The length of the string after 5 x 10^15 days is less than K.\"\n    else:\n        return S[K-1]\n\ninput_str = \"1214\\n4\"\nprint(solution(input_str))\n"
    },
    {
        "number": 4204,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S, K = stdin.split()\n    K = int(K)\n    \n    # Helper function to convert a number to its string with double digits\n    def double_digit(num: int) -> str:\n        return str(num) * 2\n    \n    # Apply the string conversion algorithm\n    next_string = \"\"\n    for digit in S:\n        if digit == '2':\n            next_string += double_digit(2)\n        elif digit == '3':\n            next_string += double_digit(3)\n        elif digit == '4':\n            next_string += double_digit(4)\n        elif digit == '5':\n            next_string += double_digit(5)\n        elif digit == '6':\n            next_string += double_digit(6)\n        elif digit == '7':\n            next_string += double_digit(7)\n        elif digit == '8':\n            next_string += double_digit(8)\n        elif digit == '9':\n            next_string += double_digit(9)\n        else:\n            next_string += digit\n    \n    # Calculate the length of the string after 5 * 10^15 days\n    days = 5 * 10**15\n    length = len(next_string)\n    for _ in range(days):\n        next_string = \"\".join(double_digit(int(digit)) if digit.isdigit() else digit for digit in next_string)\n        length = len(next_string)\n    \n    # Get the K-th character from the left\n    k = int(K)\n    result = next_string[k - 1]\n    \n    return result\n"
    },
    {
        "number": 4204,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    S, K = stdin.split()\n    S = S.replace(\"2\", \"22\").replace(\"3\", \"333\").replace(\"4\", \"4444\").replace(\"5\", \"55555\").replace(\"6\", \"666666\").replace(\"7\", \"7777777\").replace(\"8\", \"88888888\").replace(\"9\", \"999999999\")\n    K = int(K)\n\n    # calculate the length of the string after 5 * 10^15 days\n    days = 5 * 10**15\n    length = 0\n    for _ in range(days):\n        length += len(S)\n        S = S.replace(\"2\", \"22\").replace(\"3\", \"333\").replace(\"4\", \"4444\").replace(\"5\", \"55555\").replace(\"6\", \"666666\").replace(\"7\", \"7777777\").replace(\"8\", \"88888888\").replace(\"9\", \"999999999\")\n\n    # find the K-th character from the left in the string after 5 * 10^15 days\n    index = 0\n    for _ in range(days):\n        for _ in range(len(S)):\n            index += 1\n            if index == K:\n                return S[K - 1]\n\n        # update S after one day\n        S = S.replace(\"2\", \"22\").replace(\"3\", \"333\").replace(\"4\", \"4444\").replace(\"5\", \"55555\").replace(\"6\", \"666666\").replace(\"7\", \"7777777\").replace(\"8\", \"88888888\").replace(\"9\", \"999999999\")"
    },
    {
        "number": 4204,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S, K = stdin.split()\n    S = S.lstrip('0')\n    if not S:\n        S = '0'\n    for _ in range(5 * 10**15):\n        new_S = []\n        for i in range(len(S)):\n            if S[i] == '2':\n                new_S.append('22')\n            elif S[i] == '3':\n                new_S.append('333')\n            elif S[i] == '4':\n                new_S.append('4444')\n            elif S[i] == '5':\n                new_S.append('55555')\n            elif S[i] == '6':\n                new_S.append('666666')\n            elif S[i] == '7':\n                new_S.append('7777777')\n            elif S[i] == '8':\n                new_S.append('88888888')\n            elif S[i] == '9':\n                new_S.append('999999999')\n            else:\n                new_S.append(S[i])\n        S = ''.join(new_S)\n    return S[K-1]\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4204,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S, K = stdin.split()\n    S = list(S)\n    for i, c in enumerate(S):\n        if c == '2':\n            S[i] = '22'\n        elif c == '3':\n            S[i] = '333'\n        elif c == '4':\n            S[i] = '4444'\n        elif c == '5':\n            S[i] = '55555'\n        elif c == '6':\n            S[i] = '666666'\n        elif c == '7':\n            S[i] = '7777777'\n        elif c == '8':\n            S[i] = '88888888'\n        elif c == '9':\n            S[i] = '999999999'\n\n    for i in range(5, 15):\n        S = [c * 2 for c in S]\n        S = [str(c) for c in S]\n\n    S = ''.join(S)\n    return S[int(K) - 1]"
    },
    {
        "number": 4205,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, p = stdin.splitlines()\n    N = int(N)\n    p = list(map(int, p.split()))\n    \n    for i in range(N-1):\n        if p[i] > p[i+1]:\n            p[i], p[i+1] = p[i+1], p[i]\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.split()[0])\n    p = list(map(int, stdin.split()[1:]))\n\n    # Check if p is a permutation of {1, ..., N}\n    if len(p) != N or sorted(p) != list(range(1, N+1)):\n        return \"NO\"\n\n    # Check if we can sort p in ascending order by performing the operation\n    for i in range(1, N):\n        if p[i-1] > p[i]:\n            return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    p = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    if N == 2:\n        if p[0] <= p[1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    if N == 3:\n        if p[0] <= p[1] <= p[2] or p[1] <= p[2] <= p[0] or p[2] <= p[0] <= p[1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    if N == 4:\n        if p[0] <= p[1] <= p[2] <= p[3] or p[1] <= p[2] <= p[3] <= p[0] or p[2] <= p[3] <= p[0] <= p[1] or p[3] <= p[0] <= p[1] <= p[2]:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    if N == 5:\n        if p[0] <= p[1] <= p[2] <= p[3] <= p[4] or p[1] <= p[2] <= p[3] <= p[4] <= p[0] or p[2] <= p[3] <= p[4] <= p[0] <= p[1] or p[3] <= p[4] <= p[0] <= p[1] <= p[2] or p[4] <= p[0] <= p[1] <= p[2] <= p[3]:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    for i in range(N-1):\n        if p[i] >= p[i+1]:\n            break\n    else:\n        return \"YES\"\n\n    for i in range(N-2):\n        for j in range(i+2, N):\n            if p[i] > p[j]:\n                return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, p = map(int, stdin.split())\n    p = sorted(p)\n    if p == list(range(1, N + 1)):\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4205,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    p = list(map(int, stdin[1].split()))\n\n    # Check if p is a permutation of {1, 2, ..., N}\n    if sorted(p) != list(range(1, N+1)):\n        return \"NO\"\n\n    # Check if the operation can be performed\n    if p[0] == 1:\n        return \"YES\"\n\n    # Perform the operation\n    i = 0\n    j = p.index(1)\n    p[i], p[j] = p[j], p[i]\n\n    # Check if p is now sorted in ascending order\n    if sorted(p) == list(range(1, N+1)):\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.splitlines()[0])\n    p = list(map(int, stdin.splitlines()[1].split()))\n\n    if p == sorted(p):\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.splitlines()[0])\n    p = list(map(int, stdin.splitlines()[1].split()))\n    p_copy = p.copy()\n\n    def is_permutation(p: list) -> bool:\n        return sorted(p) == list(range(1, len(p) + 1))\n\n    def sort_permutation(p: list, i: int, j: int) -> bool:\n        if p[i - 1] > p[j - 1]:\n            p[i - 1], p[j - 1] = p[j - 1], p[i - 1]\n            return is_permutation(p)\n        return False\n\n    for i in range(1, N):\n        for j in range(i + 1, N + 1):\n            if sort_permutation(p, i, j):\n                return \"YES\"\n\n    return \"NO\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    p = list(map(int, stdin.split()[1:]))\n\n    # Sort the permutation\n    p.sort()\n\n    # Check if the sorted permutation is equal to the original permutation\n    if p == [i for i in range(1, N + 1)]:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\ndef"
    },
    {
        "number": 4205,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_permutation(p: list) -> bool:\n        return sorted(p) == list(range(1, N+1))\n\n    N, p = map(int, stdin.split())\n    p = list(p)\n\n    if is_permutation(p):\n        return \"YES\"\n\n    for i in range(1, N):\n        for j in range(i+1, N+1):\n            p_i, p_j = p[i-1], p[j-1]\n            p[i-1], p[j-1] = p_j, p_i\n\n            if is_permutation(p):\n                return \"YES\"\n\n            p[i-1], p[j-1] = p_i, p_j\n\n    return \"NO\"\n\n\nstdin = input(\"Enter the input: \")\nprint(solution(stdin)) "
    },
    {
        "number": 4205,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    p = list(map(int, stdin[1].split()))\n    \n    if N == 2:\n        return \"YES\" if p == [1, 2] or p == [2, 1] else \"NO\"\n    \n    p_copy = p.copy()\n    for i in range(1, N):\n        if p[i] < p[i - 1]:\n            for j in range(i, N):\n                if p[j] > p[i - 1]:\n                    p[i - 1], p[j] = p[j], p[i - 1]\n                    break\n            else:\n                p = p_copy\n                break\n    else:\n        return \"YES\"\n    \n    return \"NO\"\n"
    },
    {
        "number": 4206,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    digits = [int(d) for d in str(s)]\n    cuts = 0\n    max_count = 0\n    count = 0\n    prev_digit = 0\n\n    for digit in digits:\n        if prev_digit == 0 and digit == 0:\n            continue\n\n        if prev_digit % 3 == 0 and digit % 3 == 0:\n            count += 1\n        else:\n            count = 1\n\n        if digit % 3 == 0:\n            max_count = max(max_count, count)\n\n        prev_digit = digit\n        cuts += 1\n\n    return max_count\n"
    },
    {
        "number": 4206,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    max_divisible_by_3 = 0\n    \n    for i in range(len(s)-1):\n        if s[i] == '0':\n            continue\n        if int(s[i]) % 3 == 0 and int(s[i+1]) % 3 == 0:\n            continue\n        if int(s[i]) % 3 != 0 and int(s[i+1]) % 3 != 0:\n            max_divisible_by_3 += 1\n        elif int(s[i]) % 3 != 0 and int(s[i+1]) % 3 == 0:\n            max_divisible_by_3 += 1\n        elif int(s[i]) % 3 == 0 and int(s[i+1]) % 3 != 0:\n            max_divisible_by_3 += 1\n    \n    return str(max_divisible_by_3)\n"
    },
    {
        "number": 4206,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    count = 0\n\n    for i in range(len(s)):\n        if i == 0 and s[i] == '0':\n            count += 1\n        elif s[i] != '0':\n            count += 1\n\n    return count\n\n\ndef"
    },
    {
        "number": 4206,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    max_count = 0\n    while s > 0:\n        if s % 3 == 0:\n            max_count += 1\n        s //= 10\n    print(max_count)\n"
    },
    {
        "number": 4206,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    count = 0\n    for i in range(len(s) - 1):\n        if int(s[i]) % 3 == 0 and int(s[i + 1]) % 3 == 0:\n            count += 1\n            if s[i] != \"0\" and s[i + 1] != \"0\":\n                count += 1\n    return count\n"
    },
    {
        "number": 4206,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    num_digits = len(str(s))\n    count = 0\n\n    for i in range(num_digits):\n        if s % 10 == 0:\n            if i == 0:\n                count += 1\n            else:\n                break\n        else:\n            count += 1\n\n        s //= 10\n\n    return count\n"
    },
    {
        "number": 4206,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    count = 0\n    for i in range(len(s)):\n        if s[i] == '0':\n            count += 1\n        else:\n            break\n    if count == 0:\n        return 1\n    return count"
    },
    {
        "number": 4206,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    count = 0\n    max_count = 0\n    \n    for i in range(len(s)):\n        if i != 0 and s[i] == '0' and s[i-1] != '0':\n            count += 1\n        else:\n            count = 0\n        max_count = max(max_count, count)\n    \n    return max_count\n\ninput_data = \"3121\"\nprint(solution(input_data))\n\ninput_data = \"6\"\nprint(solution(input_data))\n\ninput_data = \"100000000000000000000000000000000\"\nprint(solution(input_data))\n\ninput_data = \"201920181\"\nprint(solution(input_data)) "
    },
    {
        "number": 4206,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    count = 0\n    for i in range(n):\n        if s[i] == '0' and i != 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 4206,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    count = 0\n\n    for i in range(n):\n        if i == 0:\n            if int(s[i]) % 3 == 0:\n                count += 1\n        else:\n            if int(s[i]) % 3 == 0 and int(s[i-1]) % 3 == 0:\n                count += 1\n\n    return count\n\n\ndef"
    },
    {
        "number": 4207,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split('\\n'))\n    a_arr = list(map(int, a.split()))\n    b_arr = list(map(int, b.split()))\n\n    max_zeros = 0\n\n    for d in range(-10000, 10001):\n        c_arr = [d * a_arr[i] + b_arr[i] for i in range(n)]\n        zeros = c_arr.count(0)\n        if zeros > max_zeros:\n            max_zeros = zeros\n\n    return max_zeros\n"
    },
    {
        "number": 4207,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n    b = list(map(int, stdin.split(\"\\n\")[2].split()))\n\n    def count_zeroes(d):\n        return sum(1 for c in [d * a[i] + b[i] for i in range(n)] if c == 0)\n\n    d = max(a) / n\n    max_zeroes = count_zeroes(d)\n\n    return str(max_zeroes)\n\n\nstdin = \"\"\"5\n1 2 3 4 5\n2 4 7 11 3\n\"\"\"\nprint(solution(stdin))\n\nstdin = \"\"\"3\n13 37 39\n1 2 3\n\"\"\"\nprint(solution(stdin))\n\nstdin = \"\"\"4\n0 0 0 0\n1 2 3 4\n\"\"\"\nprint(solution(stdin))\n\nstdin = \"\"\"3\n1 2 -1\n-6 -12 6\n\"\"\"\nprint(solution(stdin)) "
    },
    {
        "number": 4207,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    c = [0] * n\n    for i in range(n):\n        c[i] = 0.5 * a[i] * (a[i] + b[i])\n\n    zero_count = c.count(0)\n    return zero_count\n"
    },
    {
        "number": 4207,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def count_zeroes(c: List[int]) -> int:\n        return c.count(0)\n\n    def max_zeroes(c: List[int]) -> int:\n        max_zeros = 0\n        temp = []\n        for i in range(len(c)):\n            temp.append(c[i] % 10)\n        max_zeros = max(count_zeroes(temp), max_zeros)\n        temp = []\n        for i in range(len(c)):\n            temp.append(c[i] // 10)\n        max_zeros = max(count_zeroes(temp), max_zeros)\n        return max_zeros\n\n    def calculate_c(a: List[int], b: List[int], d: float) -> List[int]:\n        return [int(d * a_i + b_i) for a_i, b_i in zip(a, b)]\n\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n    b = list(map(int, stdin.split(\"\\n\")[2].split()))\n\n    max_d = max(abs(a_i * b_i) for a_i, b_i in zip(a, b))\n    min_d = min(abs(a_i - b_i) for a_i, b_i in zip(a, b))\n    max_zeroes = 0\n\n    for d in [float(i) / (max_d + min_d) for i in range(-max_d, max_d + 1)]:\n        c = calculate_c(a, b, d)\n        temp_zeroes = count_zeroes(c)\n        if temp_zeroes > max_zeroes:\n            max_zeroes = temp_zeroes\n\n    return str(max_zeroes)\n"
    },
    {
        "number": 4207,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def find_d(n: int, a: list, b: list) -> int:\n        x = [i * j for i, j in zip(a, b)]\n        d = sum(x) / n\n        return d\n\n    def count_zeroes(c: list) -> int:\n        return c.count(0)\n\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n    b = list(map(int, stdin.split(\"\\n\")[2].split()))\n\n    d = find_d(n, a, b)\n    c = [round(d * i + j) for i, j in zip(a, b)]\n    max_zeroes = count_zeroes(c)\n\n    return str(max_zeroes)"
    },
    {
        "number": 4207,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def count_zeroes(c: list) -> int:\n        return c.count(0)\n\n    def is_valid(d: float, a: list, b: list) -> bool:\n        c = [d * a_i + b_i for a_i, b_i in zip(a, b)]\n        return count_zeroes(c) == 0\n\n    def max_zeroes(a: list, b: list) -> int:\n        d = max(a) / max(b)\n        if is_valid(d, a, b):\n            return count_zeroes([d * a_i + b_i for a_i, b_i in zip(a, b)])\n        else:\n            return 0\n\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    b = list(map(int, stdin.split('\\n')[2].split()))\n\n    return str(max_zeroes(a, b))"
    },
    {
        "number": 4207,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def count_zeroes(c: List[int]) -> int:\n        return c.count(0)\n\n    n, a, b = map(int, stdin.split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    max_zeroes = 0\n    d = -1\n    for i in range(1, 2 * n + 1):\n        d += 1\n        c = [d * ai + bi for ai, bi in zip(a, b)]\n        zeroes = count_zeroes(c)\n        if zeroes > max_zeroes:\n            max_zeroes = zeroes\n\n    return max_zeroes\n"
    },
    {
        "number": 4207,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def count_zeroes(c: List[int]) -> int:\n        return sum(1 for x in c if x == 0)\n\n    def find_optimal_d(a: List[int], b: List[int]) -> float:\n        max_sum = float('-inf')\n        max_d = 0\n        for i in range(len(a)):\n            sum_i = a[i] + b[i]\n            if sum_i > max_sum:\n                max_sum = sum_i\n                max_d = i\n        return max_d\n\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n\n    d = find_optimal_d(a, b)\n    c = [round(d * a_i + b_i) for a_i, b_i in zip(a, b)]\n    zeroes = count_zeroes(c)\n\n    return zeroes\n\ndef"
    },
    {
        "number": 4207,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def count_zeroes(arr):\n        return sum(x == 0 for x in arr)\n\n    def max_zeroes(n, a, b):\n        max_zeros = count_zeroes(a)\n        for d in range(1, 1000000):\n            c = [d * ai + bi for ai, bi in zip(a, b)]\n            zeros = count_zeroes(c)\n            max_zeros = max(max_zeros, zeros)\n        return max_zeros\n\n    n, *a_b = stdin.splitlines()\n    a = list(map(int, a_b[0].split()))\n    b = list(map(int, a_b[1].split()))\n    n = int(n)\n\n    result = max_zeroes(n, a, b)\n    return str(result)\n"
    },
    {
        "number": 4207,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    b = list(map(int, stdin.splitlines()[2].split()))\n\n    max_zeroes = 0\n    best_d = 0\n\n    for d in range(-1000000, 1000001):\n        zeroes = 0\n        for i in range(n):\n            if (a[i] + b[i]) * d % 10 == 0:\n                zeroes += 1\n        if zeroes > max_zeroes:\n            max_zeroes = zeroes\n            best_d = d\n\n    return str(max_zeroes)"
    },
    {
        "number": 4208,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    l = stdin.split('\\n')[1]\n    r = stdin.split('\\n')[2]\n\n    def compatible(color1: str, color2: str) -> bool:\n        if color1 == '?' or color2 == '?':\n            return True\n        return color1 == color2\n\n    def get_compatible_pairs(l: str, r: str) -> list:\n        pairs = []\n        for i in range(n):\n            for j in range(i + 1, n):\n                if compatible(l[i], r[j]) and compatible(r[i], l[j]):\n                    pairs.append((i, j))\n        return pairs\n\n    pairs = get_compatible_pairs(l, r)\n    if not pairs:\n        return \"0\"\n\n    def get_max_compatible_pairs(pairs: list) -> int:\n        max_count = 0\n        for i in range(2, n):\n            count = 0\n            for pair in pairs:\n                if i in pair:\n                    count += 1\n            if count > max_count:\n                max_count = count\n        return max_count\n\n    max_count = get_max_compatible_pairs(pairs)\n    output = [str(max_count)]\n    for pair in pairs:\n        if pair[0] < pair[1]:\n            output.append(f\"{pair[0]} {pair[1]}\")\n        else:\n            output.append(f\"{pair[1]} {pair[0]}\")\n    return '\\n'.join(output)"
    },
    {
        "number": 4208,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def is_compatible(color1, color2):\n        if color1 == '?':\n            return True\n        if color2 == '?':\n            return True\n        return color1 == color2\n\n    n, l, r = stdin.split('\\n')\n    n = int(n)\n    compatible_pairs = 0\n    used_left = set()\n    used_right = set()\n\n    for i in range(n):\n        for j in range(n):\n            if (i, j) in used_left or (j, i) in used_right:\n                continue\n            if is_compatible(l[i], r[j]):\n                compatible_pairs += 1\n                used_left.add((i, j))\n                used_right.add((j, i))\n\n    if compatible_pairs == 0:\n        return \"0\"\n\n    result = [f\"{i[0]} {i[1]}\" for i in sorted(used_left)]\n    return f\"{compatible_pairs}\\n\" + \"\\n\".join(result)\n"
    },
    {
        "number": 4208,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    l = stdin.splitlines()[1]\n    r = stdin.splitlines()[2]\n\n    pairs = []\n    used_left = set()\n    used_right = set()\n\n    for i in range(n):\n        if l[i] == '?' or r[i] == '?':\n            continue\n        if l[i] != r[i]:\n            continue\n        if i in used_left or i in used_right:\n            continue\n        pairs.append((i, i))\n        used_left.add(i)\n        used_right.add(i)\n\n    k = len(pairs)\n    result = '\\n'.join([f'{a} {b}' for a, b in pairs])\n    return f'{k}\\n{result}'\n\n\ninput_str = '''\n10\ncodeforces\ndodivthree\n'''\n\ninput_str2 = '''\n7\nabaca?b\nzabbbcc\n'''\n\ninput_str3 = '''\n9\nbambarbia\nhellocode\n'''\n\ninput_str4 = '''\n10\ncode??????\n??????test\n'''\n\nprint(solution(input_str4)) "
    },
    {
        "number": 4208,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    l = stdin.split(\"\\n\")[1]\n    r = stdin.split(\"\\n\")[2]\n\n    def is_compatible(a, b):\n        return (a == '?' or b == '?' or a == b)\n\n    pairs = []\n    for i in range(n):\n        for j in range(n):\n            if is_compatible(l[i], r[j]):\n                pairs.append((i, j))\n\n    pairs.sort(key=lambda x: (x[0], x[1]))\n\n    count = 0\n    result = []\n    last_left = None\n    last_right = None\n    for pair in pairs:\n        if pair[0] != last_left and pair[1] != last_right:\n            count += 1\n            result.append(pair)\n            last_left = pair[0]\n            last_right = pair[1]\n\n    return str(count) + \"\\n\" + \"\\n\".join([\" \".join(map(str, pair)) for pair in result])\n"
    },
    {
        "number": 4208,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n = int(input_list[0])\n    l = input_list[1]\n    r = input_list[2]\n\n    def is_compatible(color1: str, color2: str) -> bool:\n        if color1 == '?' or color2 == '?':\n            return True\n        return color1.lower() == color2.lower()\n\n    pairs = 0\n    result = []\n    used_left = []\n    used_right = []\n\n    for i in range(n):\n        if is_compatible(l[i], r[i]):\n            if i not in used_left and i not in used_right:\n                pairs += 1\n                used_left.append(i)\n                used_right.append(i)\n                result.append((i, i))\n\n    for i in range(n):\n        for j in range(n):\n            if i != j and is_compatible(l[i], r[j]):\n                if i not in used_left and j not in used_right:\n                    pairs += 1\n                    used_left.append(i)\n                    used_right.append(j)\n                    result.append((i, j))\n\n    return str(pairs) + '\\n' + '\\n'.join(str(x) for x in result)\n"
    },
    {
        "number": 4208,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, l, r = input(stdin).split()\n    n = int(n)\n\n    def compatible(c1, c2):\n        return c1 == c2 or c1 == '?' or c2 == '?'\n\n    def count_pairs(l, r):\n        count = 0\n        pairs = []\n        for i in range(n):\n            for j in range(n):\n                if compatible(l[i], r[j]):\n                    count += 1\n                    pairs.append((i, j))\n        return count, pairs\n\n    def filter_pairs(pairs, used):\n        filtered_pairs = []\n        for a, b in pairs:\n            if a not in used and b not in used:\n                filtered_pairs.append((a, b))\n        return filtered_pairs\n\n    def print_pairs(pairs):\n        for a, b in pairs:\n            print(a, b)\n\n    max_count, pairs = count_pairs(l, r)\n    used = set()\n    while pairs:\n        filtered_pairs = filter_pairs(pairs, used)\n        max_count, pairs = count_pairs(l, r)\n        if len(filtered_pairs) == 0:\n            break\n        print(max_count)\n        for a, b in filtered_pairs:\n            print(a, b)\n        used.add(a)\n        used.add(b)\n\n\nsolution(\"\"\"10\ncodeforces\ndodivthree\"\"\")\n\nsolution(\"\"\"7\nabaca?b\nzabbbcc\"\"\")\n\nsolution(\"\"\"9\nbambarbia\nhellocode\"\"\")\n\nsolution(\"\"\"10\ncode??????\n??????test\"\"\") "
    },
    {
        "number": 4208,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    l = stdin.split(\"\\n\")[1]\n    r = stdin.split(\"\\n\")[2]\n\n    pairs = []\n    for i in range(n):\n        if l[i] == \"?\" or r[i] == \"?\":\n            pairs.append((i, j) for j in range(n) if l[i] == \"?\" or r[j] == \"?\" and (i, j) not in pairs)\n\n    max_pairs = max(len(pairs), default=0)\n\n    return f\"{max_pairs}\\n\" + \"\\n\".join(f\"{a} {b}\" for a, b in pairs)"
    },
    {
        "number": 4208,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    l, r = stdin[1].split(), stdin[2].split()\n    \n    def is_compatible(c1, c2):\n        return c1 == c2 or (c1 == '?' or c2 == '?')\n    \n    def count_compatible_pairs(boots):\n        pairs = []\n        for i in range(len(boots)):\n            for j in range(i + 1, len(boots)):\n                if is_compatible(boots[i], boots[j]):\n                    pairs.append((i, j))\n        return pairs\n    \n    left_pairs = count_compatible_pairs(l)\n    right_pairs = count_compatible_pairs(r)\n    pairs = left_pairs & right_pairs\n    \n    return str(len(pairs)) + '\\n' + '\\n'.join(f'{i + 1} {j + 1}' for i, j in pairs)\n\n\ndef"
    },
    {
        "number": 4208,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    l, r = stdin.split('\\n')[1:]\n    l = list(l)\n    r = list(r)\n\n    pairs = []\n    compatible_pairs = []\n\n    def is_compatible(color1, color2):\n        if color1 == '?' or color2 == '?':\n            return True\n        return color1 == color2\n\n    for i in range(n):\n        for j in range(n):\n            if is_compatible(l[i], r[j]):\n                pairs.append((i, j))\n\n    for i in range(n):\n        for j in range(n):\n            if is_compatible(l[i], r[j]):\n                compatible_pairs.append((i, j))\n\n    if not compatible_pairs:\n        return \"0\\n\"\n\n    compatible_pairs.sort(key=lambda x: x[1])\n    result = []\n    used_pairs = set()\n\n    for pair in compatible_pairs:\n        if pair[0] not in used_pairs and pair[1] not in used_pairs:\n            result.append(pair)\n            used_pairs.add(pair[0])\n            used_pairs.add(pair[1])\n            if len(result) == n // 2:\n                break\n\n    return f\"{len(result)}\\n\" + '\\n'.join(f\"{a + 1} {b + 1}\" for a, b in result) + '\\n'"
    },
    {
        "number": 4208,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    l, r = stdin.split(\"\\n\")[1], stdin.split(\"\\n\")[2]\n    left_colors = [c for c in l]\n    right_colors = [c for c in r]\n\n    def is_compatible(color1, color2):\n        return color1 == color2 or color1 == \"?\" or color2 == \"?\"\n\n    def count_compatible_pairs(colors):\n        count = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if is_compatible(colors[i], colors[j]):\n                    count += 1\n        return count\n\n    max_compatible_count = 0\n    pairs = []\n\n    for i in range(n):\n        left_colors[i] = left_colors[i].lower()\n        right_colors[i] = right_colors[i].lower()\n\n        for j in range(i + 1, n):\n            if is_compatible(left_colors[i], left_colors[j]) and is_compatible(right_colors[i], right_colors[j]):\n                pairs.append((i, j))\n\n    max_compatible_count = len(pairs)\n\n    return str(max_compatible_count) + \"\\n\" + \"\\n\".join([f\"{a + 1} {b + 1}\" for a, b in pairs])"
    },
    {
        "number": 4209,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    def sum_range(l, r):\n        return sum(a[l:r+1])\n\n    def find_blocks():\n        # Initialize a list of blocks\n        blocks = []\n        # Iterate through the array\n        for i in range(n):\n            for j in range(i, n):\n                # Check if the current range is a valid block\n                if (j - i + 1) * (a[i] + a[j+1]) == sum(a[i:j+2]):\n                    # Add the block to the list\n                    blocks.append((i, j))\n        return blocks\n\n    def is_valid_blocks(blocks):\n        for i in range(len(blocks)):\n            for j in range(i+1, len(blocks)):\n                if blocks[i][1] >= blocks[j][0] - 1:\n                    return False\n        return True\n\n    def find_max_blocks():\n        # Find the list of valid blocks\n        valid_blocks = find_blocks()\n        # If there are no valid blocks, return 0\n        if not valid_blocks:\n            return 0\n        # If the list of valid blocks is valid, return the length of the list\n        if is_valid_blocks(valid_blocks):\n            return len(valid_blocks)\n        # Otherwise, return the maximum length of a valid set of blocks\n        max_length = 0\n        for i in range(len(valid_blocks)):\n            for j in range(i+1, len(valid_blocks)+1):\n                if is_valid_blocks(valid_blocks[i:j]):\n                    max_length = max(max_length, j-i)\n        return max_length\n\n    k = find_max_blocks()\n    print(k)\n    for i in range(k):\n        l, r = blocks[i]\n        print(f\"{l+1} {r+1}\")\n"
    },
    {
        "number": 4209,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(blocks: list, l: int, r: int) -> bool:\n        for i in range(len(blocks)):\n            if l < blocks[i][1] and r > blocks[i][0]:\n                return False\n        return True\n\n    def find_blocks(a: list, n: int) -> list:\n        result = []\n        for i in range(1, n):\n            for j in range(i + 1, n + 1):\n                if is_valid(result, i, j):\n                    result.append((i, j))\n        return result\n\n    def count_elements(blocks: list, a: list) -> int:\n        count = 0\n        for l, r in blocks:\n            count += sum(a[l:r + 1])\n        return count\n\n    def find_maximum_blocks(a: list, n: int) -> list:\n        blocks = find_blocks(a, n)\n        k = len(blocks)\n        while True:\n            if all(count_elements(blocks, a) == count_elements(blocks, a[:i]) + count_elements(blocks, a[i:]) for i in range(k)):\n                return blocks\n            k -= 1\n\n    def print_result(blocks: list) -> str:\n        result = [f\"{i + 1} {j + 1}\" for i, j in blocks]\n        return \"\\n\".join(result)\n\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    blocks = find_maximum_blocks(a, n)\n    k = len(blocks)\n    print(k)\n    print(print_result(blocks))\n"
    },
    {
        "number": 4209,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.splitlines()\n    n = int(input_data[0])\n    a = list(map(int, input_data[1].split()))\n    \n    def find_blocks(a):\n        block_sums = {}\n        blocks = []\n        \n        for i in range(n):\n            if a[i] in block_sums:\n                block_sums[a[i]].append(i)\n            else:\n                block_sums[a[i]] = [i]\n        \n        for sum_key in sorted(block_sums.keys()):\n            for i in range(len(block_sums[sum_key])-1):\n                for j in range(i+1, len(block_sums[sum_key])):\n                    l1, r1 = block_sums[sum_key][i], block_sums[sum_key][j]\n                    if r1 - l1 + 1 == j - i + 1:\n                        blocks.append((l1, r1))\n                        break\n                else:\n                    continue\n                break\n        \n        return blocks\n    \n    blocks = find_blocks(a)\n    \n    k = len(blocks)\n    output = [str(k)]\n    for block in blocks:\n        output.append(f\"{block[0]} {block[1]}\")\n    \n    return \"\\n\".join(output) \n\ninput_data = \"\"\"7\n4 1 2 2 1 5 3\"\"\"\noutput = solution(input_data)\nprint(output)\n\ninput_data = \"\"\"11\n-5 -4 -3 -2 -1 0 1 2 3 4 5\"\"\"\noutput = solution(input_data)\nprint(output)\n\ninput_data = \"\"\"4\n1 1 1 1\"\"\"\noutput = solution(input_data)\nprint(output) "
    },
    {
        "number": 4209,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    # Find the maximum number of blocks\n    max_k = n\n\n    # Initialize the set of blocks with all possible blocks\n    blocks = [(i, i) for i in range(1, n + 1)]\n\n    # Iterate through all possible pairs of blocks\n    for i in range(max_k):\n        for j in range(i + 1, max_k):\n            # Check if the two blocks do not intersect\n            if blocks[i][1] < blocks[j][0] or blocks[j][1] < blocks[i][0]:\n                # Check if the sum of elements in the two blocks is the same\n                if sum(a[blocks[i][0] - 1:blocks[i][1]]) == sum(a[blocks[j][0] - 1:blocks[j][1]]):\n                    # Update the maximum number of blocks\n                    max_k = i + j + 1\n                    # Remove the previous blocks from the set of blocks\n                    blocks = blocks[:i] + blocks[j + 1:]\n                    # Add the new block to the set of blocks\n                    blocks.append((blocks[i][0], blocks[j][1]))\n\n    # Print the maximum number of blocks and the set of blocks\n    output = str(max_k) + '\\n'\n    for block in blocks:\n        output += str(block[0]) + ' ' + str(block[1]) + '\\n'\n    return output\n"
    },
    {
        "number": 4209,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    def is_valid_block(block, blocks):\n        for other_block in blocks:\n            if (other_block[0] < block[1] and other_block[1] > block[0]) or (other_block[0] < block[1] and other_block[1] > block[0]):\n                return False\n        return True\n\n    def sum_blocks(blocks):\n        return sum(a[block[0]:block[1]+1] for block in blocks)\n\n    def find_blocks():\n        blocks = []\n        for l in range(1, n):\n            for r in range(l, n):\n                if is_valid_block((l, r), blocks) and a[l] == a[r]:\n                    blocks.append((l, r))\n        return blocks\n\n    blocks = find_blocks()\n    max_sum = sum_blocks(blocks) // len(blocks)\n\n    valid_blocks = [block for block in blocks if sum(a[block[0]:block[1]+1]) == max_sum]\n    valid_blocks.sort(key=lambda block: block[0])\n\n    return len(valid_blocks), *(str(block[0]) + ' ' + str(block[1]) for block in valid_blocks)\n"
    },
    {
        "number": 4209,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    \n    def check(i, j, blocks):\n        for k in range(i, j):\n            if k in blocks:\n                return False\n        return True\n    \n    def find_blocks(a, i, j, k, blocks):\n        if i > j:\n            return k, blocks\n        \n        for l in range(i, j + 1):\n            if check(l, j, blocks):\n                blocks.add(l)\n                k, blocks = find_blocks(a, l + 1, j, k + 1, blocks)\n                blocks.remove(l)\n        \n        return k, blocks\n    \n    k, blocks = find_blocks(a, 0, n - 1, 0, set())\n    \n    result = [f\"{l} {r}\" for l, r in sorted(blocks)]\n    return f\"{k}\\n\" + \"\\n\".join(result)\n"
    },
    {
        "number": 4209,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n    k = 1\n    blocks = []\n    \n    def add_block(l: int, r: int) -> None:\n        nonlocal k\n        blocks.append((l, r))\n        k += 1\n\n    def is_valid(l: int, r: int) -> bool:\n        return all(r < b[0] or b[1] < l for b in blocks)\n\n    for i in range(n):\n        for j in range(i, n):\n            if is_valid(i, j):\n                add_block(i, j)\n\n    return str(k) + \"\\n\" + \"\\n\".join(f\"{b[0]} {b[1]}\" for b in blocks)\n\n\ndef"
    },
    {
        "number": 4209,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    k = 1\n    blocks = []\n    \n    for l in range(1, n+1):\n        r = l\n        while r+1 <= n and a[l-1] == a[r+1]:\n            r += 1\n        blocks.append((l, r))\n        if r+1 <= n:\n            k += 1\n    \n    output = f\"{k}\\n\"\n    for block in blocks:\n        output += f\"{block[0]} {block[1]}\\n\"\n    \n    return output"
    },
    {
        "number": 4209,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split('\\n'))\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    def sum_of_elements(l, r):\n        return sum(a[l:r+1])\n\n    def is_valid_block(l, r):\n        for i in range(l, r):\n            if a[i] != a[l]:\n                return False\n        return True\n\n    def find_blocks():\n        n = len(a)\n        blocks = []\n        for l in range(n):\n            for r in range(l, n):\n                if is_valid_block(l, r) and (not blocks or blocks[-1][1] < l):\n                    blocks.append((l, r))\n        return blocks\n\n    blocks = find_blocks()\n    k = len(blocks)\n    result = '\\n'.join(f'{block[0]} {block[1]}' for block in blocks)\n    return f'{k}\\n{result}'\n"
    },
    {
        "number": 4209,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    def is_valid(blocks, l, r):\n        for i in range(len(blocks)):\n            if blocks[i][1] >= l:\n                return False\n            if blocks[i][0] <= r:\n                return False\n        return True\n\n    def add_block(blocks, l, r):\n        return blocks + [(l, r)]\n\n    def sum_block(blocks, l, r):\n        return sum(a[l:r+1])\n\n    def max_blocks(n, a):\n        blocks = []\n        for i in range(n):\n            for j in range(i, n):\n                if is_valid(blocks, i, j):\n                    blocks = add_block(blocks, i, j)\n        return blocks\n\n    def find_blocks(blocks):\n        result = []\n        for block in blocks:\n            result.append(str(block[0]))\n            result.append(str(block[1]))\n        return result\n\n    blocks = max_blocks(n, a)\n    k = len(blocks)\n    result = [str(k)] + find_blocks(blocks)\n    return '\\n'.join(result)\n"
    },
    {
        "number": 4210,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_divisible(num1: str, num2: str, k: int) -> bool:\n        return int(num1 + num2) % k == 0 or int(num2 + num1) % k == 0\n\n    n, k = map(int, stdin.splitlines()[0].split())\n    numbers = list(map(int, stdin.splitlines()[1].split()))\n    count = 0\n\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if is_divisible(str(numbers[i]), str(numbers[j]), k):\n                count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4210,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if int(str(a[i]) + str(a[j])) % k == 0 or int(str(a[j]) + str(a[i])) % k == 0:\n                count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4210,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            x = a[i]\n            y = a[j]\n            num = x * 10 ** (len(str(x)) - 1) + y\n            if num % k == 0:\n                count += 1\n                \n    return str(count)\n"
    },
    {
        "number": 4210,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if int(str(a[i]) + str(a[j])) % k == 0:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 4210,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    from collections import defaultdict\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    \n    # count the number of occurrences of each digit\n    digit_count = defaultdict(int)\n    for num in a:\n        while num > 0:\n            digit_count[num % 10] += 1\n            num //= 10\n            \n    # count the number of pairs (i, j) such that a_i + a_j is divisible by k\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if sum(a[i:j + 1]) % k == 0:\n                count += 1\n                \n    # count the number of pairs (i, j) such that a_i * a_j is divisible by k\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] * a[j] % k == 0:\n                count += 1\n                \n    # count the number of pairs (i, j) such that the concatenation of a_i and a_j is divisible by k\n    for i in range(n):\n        for j in range(i + 1, n):\n            if sum((str(a[i]) for _ in range(j - i))) % k == 0:\n                count += 1\n                \n    return str(count)"
    },
    {
        "number": 4210,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n, k = map(int, input_list[0].split())\n    a = list(map(int, input_list[1].split()))\n\n    count = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            concat = str(a[i]) + str(a[j])\n            if int(concat) % k == 0:\n                count += 1\n\n    return str(count)\n\n\nstdin = \"\"\"6 11\n45 1 10 12 11 7\"\"\"\nprint(solution(stdin))\n\nstdin = \"\"\"4 2\n2 78 4 10\"\"\"\nprint(solution(stdin))\n\nstdin = \"\"\"5 2\n3 7 19 3 3\"\"\"\nprint(solution(stdin)) "
    },
    {
        "number": 4210,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n, k = map(int, input_list[0].split())\n    a = list(map(int, input_list[1].split()))\n\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if int(str(a[i]) + str(a[j])) % k == 0:\n                count += 1\n\n    return str(count)\n\n\ninput_data = \"\"\"6 11\n45 1 10 12 11 7\n4 2\n2 78 4 10\n5 2\n3 7 19 3 3\"\"\"\n\nresult = solution(input_data)\nprint(result)"
    },
    {
        "number": 4210,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    n, k = map(int, input_list[0].split())\n    a = list(map(int, input_list[1].split()))\n\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                concatenated = str(a[i]) + str(a[j])\n                if int(concatenated) % k == 0:\n                    count += 1\n\n    return str(count)\n\n\ninput_str = '''6 11\n45 1 10 12 11 7\n'''\n\noutput = solution(input_str)\nprint(\"Output: \", output) "
    },
    {
        "number": 4210,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    from itertools import permutations\n\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    count = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if int(str(a[i]) + str(a[j])) % k == 0:\n                count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4210,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n, k = map(int, input_list[0].split())\n    a = list(map(int, input_list[1].split()))\n\n    count = 0\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if int(str(a[i]) + str(a[j])) % k == 0 or int(str(a[j]) + str(a[i])) % k == 0:\n                count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4211,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    B = [int(x) for x in stdin.split('\\n')[1].split()]\n    A = [0] * (N + 1)\n    \n    for i in range(N - 1):\n        A[i+1] = max(A[i], A[i+1], B[i])\n    \n    return str(sum(A))"
    },
    {
        "number": 4211,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    B = list(map(int, stdin[1].split()))\n    A = [0] * N\n    A[0] = B[0]\n    A[N-1] = B[N-2]\n    max_sum = 0\n    \n    for i in range(1, N-1):\n        A[i] = max(A[i-1], B[i-1])\n        max_sum = max(max_sum, A[i] + A[i-1] + A[i+1])\n    \n    return str(max_sum)\n\ninput_string = \"3\\n2 5\"\noutput = solution(input_string)\nprint(output) "
    },
    {
        "number": 4211,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    B = [int(b) for b in stdin[1].split()]\n    \n    A = [0] * N\n    for i in range(N-1):\n        A[i] = max(A[i], B[i])\n        A[i+1] = max(A[i], B[i])\n        \n    A[N-1] = max(A[N-1], B[N-2])\n    \n    return str(sum(A))\n"
    },
    {
        "number": 4211,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.splitlines()[0])\n    B = list(map(int, stdin.splitlines()[1].split()))\n    max_sum = 0\n\n    for i in range(N-1):\n        if B[i] >= max(B[i], B[i+1]):\n            max_sum += B[i]\n        else:\n            max_sum += max(B[i], B[i+1])\n\n    return str(max_sum)\n"
    },
    {
        "number": 4211,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, *B = map(int, stdin.split())\n    B = [B[i] for i in range(N-1)]\n    A = [0] * N\n    A[0] = B[0]\n\n    for i in range(1, N-1):\n        A[i] = max(A[i-1], B[i])\n\n    A[N-1] = B[N-2]\n    max_sum = sum(A)\n\n    return str(max_sum)\n"
    },
    {
        "number": 4211,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, *B = map(int, stdin.split())\n    A = [0] * N\n    A[0] = B[0]\n    for i in range(1, N):\n        A[i] = max(A[i-1], B[i-1])\n    A[N-1] = max(A[N-2], B[N-2])\n    return sum(A)\n"
    },
    {
        "number": 4211,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    B = list(map(int, stdin.split(\"\\n\")[1].split()))\n    \n    A = [0] * N\n    \n    max_sum = 0\n    \n    for i in range(N-1):\n        max_sum += max(A[i], B[i])\n        A[i+1] = max(A[i], B[i])\n    \n    A[N-1] = max_sum - max(A)\n    \n    return max_sum"
    },
    {
        "number": 4211,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, *B = map(int, stdin.split())\n    A = [0] * N\n    max_sum = 0\n\n    for i in range(N - 1):\n        A[i + 1] = max(B[i], A[i] + B[i])\n        max_sum = max(max_sum, A[i + 1])\n\n    A[N - 1] = max(B[-1], A[-1] + B[-1])\n    max_sum = max(max_sum, A[N - 1])\n\n    return max_sum"
    },
    {
        "number": 4211,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    B = list(map(int, stdin.split(\"\\n\")[1].split()))\n    A = [0] * N\n\n    for i in range(N - 1):\n        A[i + 1] = max(A[i], A[i + 1], B[i])\n\n    A[N - 1] = max(A[N - 1], B[N - 2])\n\n    return max(A)\n\n\ndef"
    },
    {
        "number": 4211,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, *B = map(int, stdin.split())\n    A = [0] * (N + 1)\n\n    # Calculate the maximum possible value of A_i\n    for i in range(1, N):\n        A[i] = max(A[i - 1] + B[i - 1], A[i - 1] + B[i - 1] - B[i - 1])\n\n    # Calculate the maximum possible sum of A\n    max_sum = sum(A)\n    for i in range(1, N):\n        max_sum = max(max_sum, A[i] + A[i - 1])\n\n    return max_sum\n"
    },
    {
        "number": 4212,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, Q, *data = stdin.split()\n    N, M, Q = int(N), int(M), int(Q)\n    a, b, c, d = [], [], [], []\n    for _ in range(Q):\n        i, j, k, l = data.pop(0), data.pop(0), data.pop(0), data.pop(0)\n        a.append(int(i)), b.append(int(j)), c.append(int(k)), d.append(int(l))\n    a = sorted(a)\n    b = [bisect_left(a, i) + 1 for i in b]\n    score = 0\n    for i in range(Q):\n        if a[b[i] - 1] + c[i] == a[b[i]]:\n            score += d[i]\n    return score\n\n\ndef"
    },
    {
        "number": 4212,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M, Q = map(int, stdin.split())\n    A = [0] * N\n    a, b, c, d = [], [], [], []\n\n    for _ in range(Q):\n        a_i, b_i, c_i, d_i = map(int, stdin.split())\n        a.append(a_i)\n        b.append(b_i)\n        c.append(c_i)\n        d.append(d_i)\n\n    for i in range(N):\n        for j in range(i + 1, N):\n            if b[j] < b[i] and a[i] < a[j] < b[i] < b[j]:\n                A[i] = b[i]\n                A[j] = a[j]\n                break\n            elif b[i] < b[j] and a[j] < a[i] < b[j] < b[i]:\n                A[i] = b[i]\n                A[j] = a[i]\n                break\n\n    score = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if A[j] - A[i] == c[i]:\n                score += d[i]\n\n    return score\n"
    },
    {
        "number": 4212,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(A: list) -> bool:\n        for i in range(N):\n            if A[b[i] - 1] - A[a[i] - 1] != c[i]:\n                return False\n        return True\n\n    def score(A: list) -> int:\n        total = 0\n        for i in range(Q):\n            if A[b[i] - 1] - A[a[i] - 1] == c[i]:\n                total += d[i]\n        return total\n\n    N, M, Q = map(int, stdin.split())\n    a, b, c, d = [], [], [], []\n\n    for _ in range(Q):\n        ai, bi, ci, di = map(int, stdin.split())\n        a.append(ai)\n        b.append(bi)\n        c.append(ci)\n        d.append(di)\n\n    max_score = 0\n    for A in itertools.permutations(range(1, M + 1)):\n        if is_valid(A):\n            max_score = max(max_score, score(A))\n\n    return max_score\n"
    },
    {
        "number": 4212,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M, Q = map(int, stdin.split()[:3])\n    a_b_c_d = [list(map(int, stdin.split()[i*4:i*4+4])) for i in range(Q)]\n\n    A = [0] * N\n    for i in range(Q):\n        a, b, c, d = a_b_c_d[i]\n        for j in range(b - a + 1):\n            A[a + j] = d\n\n    score = 0\n    for i in range(1, N):\n        if A[i] - A[i-1] == 1:\n            score += A[i-1] + 1\n        elif A[i] - A[i-1] == -1:\n            score += A[i] - 1\n\n    return score\n"
    },
    {
        "number": 4212,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def process_input():\n        N, M, Q = map(int, stdin.readline().split())\n        A = list(map(int, stdin.readline().split()))\n        for _ in range(Q - 1):\n            a, b, c, d = map(int, stdin.readline().split())\n            A.append(d)\n        return N, M, A\n\n    def score(A: list[int], b: int, c: int) -> int:\n        start = A[b - 1] - c\n        end = A[b] - 1\n        return sum(A[start:end+1])\n\n    def max_score(N: int, M: int, A: list[int]) -> int:\n        max_score = 0\n        for b in range(1, N + 1):\n            for c in range(M):\n                max_score = max(max_score, score(A, b, c))\n        return max_score\n\n    N, M, A = process_input()\n    return str(max_score(N, M, A))\n\n\ninput_string = \"\"\"3 4 3\n1 3 3 100\n1 2 2 10\n2 3 2 10\"\"\"\n\nresult = solution(input_string)\nprint(result) "
    },
    {
        "number": 4212,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M, Q = map(int, stdin.split())\n    A = [0] * N\n    for _ in range(Q):\n        a, b, c, d = map(int, stdin.split())\n        A[b-1] = c\n    A.sort()\n    score = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[j] - A[i] == M - 1:\n                score += d\n    return str(score)\n"
    },
    {
        "number": 4212,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M, Q = map(int, stdin.split())\n    A = []\n    max_score = 0\n\n    for _ in range(Q):\n        a, b, c, d = map(int, stdin.split())\n        for i in range(N):\n            A.append(i+1)\n            if a <= i < b and A[b-1]-A[a-1] == c:\n                max_score += d\n            A.pop()\n\n    return str(max_score)\n"
    },
    {
        "number": 4212,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def count_score(A: List[int], b: int, c: int) -> int:\n        count = 0\n        for i in range(b - c, b):\n            if A[i] == c:\n                count += 1\n        return count\n\n    def max_score(A: List[int], b: int, c: int) -> int:\n        max_score = 0\n        for i in range(b - c, b):\n            max_score = max(max_score, A[i])\n        return max_score\n\n    N, M, Q = map(int, stdin.split()[:3])\n    A = list(map(int, stdin.split()[3:]))\n\n    max_scores = [0] * Q\n\n    for i in range(Q):\n        a, b, c, d = map(int, stdin.split()[3 + Q * i: 7 + Q * i])\n        max_scores[i] = d * count_score(A, b, c)\n\n    return max(max_scores)\n\nN, M, Q = map(int, input().split())\nA = list(map(int, input().split()))\nstdin = f\"{N} {M} {Q}\" + \" \".join(f\"{a} {b} {c} {d}\" for a, b, c, d in zip(A[::2], A[1::2], A[::2], A[1::2]))\nprint(solution(stdin)) "
    },
    {
        "number": 4212,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_data = list(map(int, stdin.split()))\n    N, M, Q = input_data[:3]\n    a_b_c_d = input_data[3:]\n    A = []\n\n    for i in range(0, Q * 4, 4):\n        a, b, c, d = a_b_c_d[i:i+4]\n        A.append((a, b, c, d))\n\n    def score(A):\n        total_score = 0\n        for a, b, c, d in A:\n            if a <= b and A[b] - A[a] == c:\n                total_score += d\n        return total_score\n\n    max_score = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                for l in range(k+1, N):\n                    A = [1, 2, 3, 4]\n                    A[i], A[j], A[k], A[l] = 1, 2, 3, 4\n                    max_score = max(max_score, score(A))\n\n    return str(max_score)\n"
    },
    {
        "number": 4212,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M, Q = map(int, stdin.split()[:3])\n    A = list(map(int, stdin.split()[3:]))\n\n    def valid(a, b, c, d):\n        return 1 <= a < b <= N and 0 <= c <= M - 1 and 1 <= d <= 10**5\n\n    def score(A):\n        s = 0\n        for i in range(Q):\n            a, b, c, d = A[i*4:i*4+4]\n            if 1 <= a < b <= N and 0 <= c <= M - 1 and valid(a, b, c, d):\n                s += d\n        return s\n\n    max_score = score(A)\n    for i in range(Q):\n        a, b, c, d = A[i*4:i*4+4]\n        for j in range(N):\n            if j != b-1 and A[j] == a and A[j+1] == b and valid(j+1, b, c, d):\n                A[j], A[j+1] = A[j+1], A[j]\n                max_score = max(max_score, score(A))\n                A[j], A[j+1] = A[j+1], A[j]\n    return max_score"
    },
    {
        "number": 4213,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    A = list(map(int, stdin.split()[1:]))\n    max_diff = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            diff = abs(A[i] - A[j])\n            if diff > max_diff:\n                max_diff = diff\n    return str(max_diff)"
    },
    {
        "number": 4213,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    A = list(map(int, stdin.split()[1:]))\n\n    max_diff = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            diff = abs(A[i] - A[j])\n            max_diff = max(max_diff, diff)\n\n    return str(max_diff)\n"
    },
    {
        "number": 4213,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.splitlines()[0])\n    A = list(map(int, stdin.splitlines()[1].split()))\n    max_diff = 0\n\n    for i in range(N):\n        for j in range(i + 1, N):\n            diff = abs(A[i] - A[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    return str(max_diff)\n\n\ninput_str = \"\"\"4\n1 4 6 3\"\"\"\n\noutput_str = solution(input_str)\nprint(output_str)\n"
    },
    {
        "number": 4213,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    A = list(map(int, stdin[1].split()))\n    max_diff = 0\n\n    for i in range(N):\n        for j in range(i + 1, N):\n            diff = abs(A[i] - A[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    return str(max_diff)\n\n\ndef"
    },
    {
        "number": 4213,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.splitlines()[0])\n    A = list(map(int, stdin.splitlines()[1].split()))\n\n    max_diff = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            diff = abs(A[i] - A[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    return str(max_diff)\n\n\ndef"
    },
    {
        "number": 4213,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.splitlines()[0])\n    A = [int(x) for x in stdin.splitlines()[1].split()]\n    max_diff = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            diff = abs(A[i] - A[j])\n            if diff > max_diff:\n                max_diff = diff\n    return str(max_diff)\n\ninput_string = \"\"\"4\n1 4 6 3\"\"\"\n\nprint(solution(input_string)) "
    },
    {
        "number": 4213,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    max_diff = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if abs(A[i]-A[j]) > max_diff:\n                max_diff = abs(A[i]-A[j])\n    return str(max_diff)"
    },
    {
        "number": 4213,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    A = list(map(int, stdin.split('\\n')[1].split()))\n    max_diff = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            diff = abs(A[i] - A[j])\n            max_diff = max(max_diff, diff)\n    return str(max_diff)"
    },
    {
        "number": 4213,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.splitlines()[0])\n    A = [int(x) for x in stdin.splitlines()[1].split()]\n    \n    max_diff = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            diff = abs(A[i] - A[j])\n            if diff > max_diff:\n                max_diff = diff\n                \n    return str(max_diff)"
    },
    {
        "number": 4213,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    A = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n    max_diff = 0\n\n    for i in range(N):\n        for j in range(i+1, N):\n            diff = abs(A[i] - A[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    return str(max_diff)\n"
    },
    {
        "number": 4214,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def distance(x1, y1, x2, y2):\n        return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5\n\n    N, *coordinates = stdin.split()\n    N = int(N)\n    coordinates = [tuple(map(int, c.split(','))) for c in coordinates]\n\n    paths = []\n    for i in range(N):\n        for j in range(i + 1, N):\n            path_length = sum(distance(*coordinates[i], *coordinates[j - 1]) for j in range(i + 1, N))\n            paths.append(path_length)\n\n    total_length = sum(paths)\n    average_length = total_length / N\n\n    return f\"{average_length:.6f}\"\n\n\ndef"
    },
    {
        "number": 4214,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    x_y = [[int(i) for i in line.split()] for line in stdin.split('\\n')[1:]]\n    \n    total_length = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            total_length += (x_y[i][0] - x_y[j][0]) ** 2 + (x_y[i][1] - x_y[j][1]) ** 2\n    \n    total_length = round(total_length ** 0.5, 6)\n    avg_length = total_length / N\n    \n    return str(avg_length)\n\ninput_str = \"\"\"3\n0 0\n1 0\n0 1\n\"\"\"\n\nprint(solution(input_str)) # Output: 2.2761423749 "
    },
    {
        "number": 4214,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, *data = stdin.split()\n    N = int(N)\n\n    x = [int(d) for i, d in enumerate(data) if i % 2 == 0]\n    y = [int(d) for i, d in enumerate(data) if i % 2 == 1]\n\n    def distance(i, j):\n        return ((x[i] - x[j]) ** 2 + (y[i] - y[j]) ** 2) ** 0.5\n\n    paths = [(1 + distance(i, j)) for i in range(N) for j in range(i + 1, N)]\n    avg_length = sum(paths) / len(paths)\n\n    return f\"{avg_length:.6f}\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    N = int(input_list[0])\n    x_y_list = [tuple(map(int, input_list[i+1].split())) for i in range(N)]\n    \n    path_lengths = []\n    for i in range(N):\n        for j in range(i+1, N):\n            x_diff = x_y_list[j][0] - x_y_list[i][0]\n            y_diff = x_y_list[j][1] - x_y_list[i][1]\n            distance = (x_diff**2 + y_diff**2)**0.5\n            path_lengths.append(distance)\n    \n    average_length = sum(path_lengths) / N!\n    \n    return f\"{average_length:.6f}\""
    },
    {
        "number": 4214,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def distance(x1, y1, x2, y2):\n        return ((x1 - x2)**2 + (y1 - y2)**2)**0.5\n\n    def paths(x, y):\n        paths = []\n        for i in range(len(x)):\n            for j in range(i+1, len(x)):\n                paths.append(distance(x[i], y[i], x[j], y[j]))\n        return paths\n\n    N, *coords = stdin.split()\n    x, y = zip(*[map(int, coords[i:i+2]) for i in range(0, len(coords), 2)])\n    avg_length = sum(paths(x, y)) / math.factorial(N)\n    return f\"{avg_length:.6f}\"\n\ninput_str = \"3\\n0 0\\n1 0\\n0 1\\n\"\nprint(solution(input_str)) "
    },
    {
        "number": 4214,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(input())\n    x = [0] * N\n    y = [0] * N\n    \n    for i in range(N):\n        x[i], y[i] = map(int, input().split())\n    \n    paths = []\n    for i in range(N):\n        for j in range(N):\n            if i != j:\n                distance = ((x[i] - x[j]) ** 2 + (y[i] - y[j]) ** 2) ** 0.5\n                paths.append(distance)\n    \n    total_length = sum(paths)\n    average_length = total_length / (N * (N - 1))\n    \n    return f\"{average_length:.6f}\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, *coords = stdin.split()\n    N = int(N)\n    coords = [tuple(map(int, coords[i:i+2])) for i in range(0, len(coords), 2)]\n    paths = [sorted(coords)]\n    for i in range(N-1):\n        paths.extend(sorted(p[:i]+(coords[i+1],)+p[i+1:]) for p in paths)\n    lengths = [sum(sum((x1-x2)**2 + (y1-y2)**2)**0.5 for x2, y2 in zip(p[:-1], p[1:])) for p in paths]\n    return '{:.6f}'.format(sum(lengths) / len(lengths))\n\nN = int(input())\ncoords = []\nfor i in range(N):\n    x, y = map(int, input().split())\n    coords.append((x, y))\n\nprint(solution('\\n'.join(map(str, coords)))) "
    },
    {
        "number": 4214,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split(\"\\n\")\n    N = int(input_data[0])\n    x_i = []\n    y_i = []\n    for i in range(1, N+1):\n        x, y = map(int, input_data[i].split())\n        x_i.append(x)\n        y_i.append(y)\n\n    def distance(i, j):\n        return ((x_i[i]-x_i[j])**2 + (y_i[i]-y_i[j])**2)**0.5\n\n    paths = 1\n    for i in range(N):\n        paths *= N-i\n    paths = paths // math.factorial(N)\n\n    total_length = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            total_length += distance(i, j)\n\n    return round(total_length/paths, 6)\n\n\nstdin = \"\"\"3\n0 0\n1 0\n0 1\n\"\"\"\n\nprint(solution(stdin)) "
    },
    {
        "number": 4214,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, *coordinates = stdin.split()\n    N = int(N)\n\n    coordinates = [tuple(map(int, coordinates[i:i+2])) for i in range(0, len(coordinates), 2)]\n\n    total_length = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            total_length += ((coordinates[i][0] - coordinates[j][0])**2 + (coordinates[i][1] - coordinates[j][1])**2)**0.5\n\n    avg_length = total_length / (N * (N-1) / 2)\n\n    return f\"{avg_length:.6f}\"\n\ndef"
    },
    {
        "number": 4214,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    n = int(input_list[0])\n    x_coords = [int(x) for x in input_list[1:n+1]]\n    y_coords = [int(y) for y in input_list[n+1:2*n+1]]\n    distances = [[0 for _ in range(n)] for _ in range(n)]\n    paths = [1] * n\n    for i in range(n):\n        for j in range(i+1, n):\n            distances[i][j] = distances[j][i] = ((x_coords[i]-x_coords[j])**2 + (y_coords[i]-y_coords[j])**2) ** 0.5\n    for i in range(n):\n        for j in range(i+1, n):\n            paths[i] *= 1 + distances[i][j]\n            paths[j] *= 1 + distances[j][i]\n    return f\"{sum(paths)/(n*(n-1))}\""
    },
    {
        "number": 4215,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    A = int(input_list[0])\n    B = int(input_list[1])\n\n    total_uncovered_length = A - B\n\n    return total_uncovered_length\n"
    },
    {
        "number": 4215,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return B if A == B else min(A, B)\n\ndef"
    },
    {
        "number": 4215,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A <= 0 or B <= 0:\n        raise ValueError(\"A and B must be positive integers\")\n\n    uncovered_length = min(A, 2 * B)\n    return str(A - 2 * uncovered_length)"
    },
    {
        "number": 4215,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return A - 2 * B"
    },
    {
        "number": 4215,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return (A - 2 * B) if (A - 2 * B) >= 0 else 0\n\n\ninput_str = \"12 4\"\nresult = solution(input_str)\nprint(result) "
    },
    {
        "number": 4215,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    uncovered_length = (A - 2 * B) if A > 2 * B else 0\n    return uncovered_length\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4215,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return abs(A - 2 * B)\n"
    },
    {
        "number": 4215,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    A = int(input_list[0])\n    B = int(input_list[1])\n\n    if B <= A:\n        return str(A - B)\n    else:\n        return str(A - (B // 2))\n\ninput_str = \"12 4\"\nprint(solution(input_str)) # Output: 4 "
    },
    {
        "number": 4215,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    uncovered = (A - 2 * B)\n    if uncovered < 0:\n        uncovered = 0\n    return uncovered"
    },
    {
        "number": 4215,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return A - 2 * B\n\ninput_str = input(\"Enter A and B separated by space: \")\noutput_str = solution(input_str)\nprint(\"The total horizontal length of the uncovered parts of the window is:\", output_str) "
    },
    {
        "number": 4216,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    \n    min_value = float('inf')\n    \n    for i in range(1, int(N**0.5)+1):\n        if N % i == 0:\n            j = N // i\n            f = max(len(str(i)), len(str(j)))\n            if f < min_value:\n                min_value = f\n    \n    return str(min_value)"
    },
    {
        "number": 4216,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    min_f = float('inf')\n    for i in range(1, N+1):\n        for j in range(1, N+1):\n            if i*j == N:\n                a_digits = len(str(i))\n                b_digits = len(str(j))\n                f = max(a_digits, b_digits)\n                if f < min_f:\n                    min_f = f\n    return str(min_f)"
    },
    {
        "number": 4216,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    minimum = float('inf')\n    \n    for A in range(1, N+1):\n        for B in range(1, N+1):\n            if A*B == N:\n                f = max(len(str(A)), len(str(B)))\n                if f < minimum:\n                    minimum = f\n    \n    return str(minimum)"
    },
    {
        "number": 4216,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    min_f = float('inf')\n    for i in range(1, int(N**0.5)+1):\n        if N % i == 0:\n            j = N // i\n            if i * j == N:\n                min_f = min(min_f, max(len(str(i)), len(str(j))))\n    return str(min_f)\n"
    },
    {
        "number": 4216,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    max_digits = 0\n    for i in range(1, N + 1):\n        for j in range(1, N + 1):\n            if i * j == N:\n                max_digits = max(max_digits, max(len(str(i)), len(str(j))))\n    return str(max_digits)\n"
    },
    {
        "number": 4216,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    min_f = float('inf')\n    for i in range(1, int(N**0.5)+1):\n        for j in range(i, N//i+1):\n            f = max(len(str(i)), len(str(j)))\n            if f < min_f:\n                min_f = f\n    return str(min_f)"
    },
    {
        "number": 4216,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    min_f = float('inf')\n    for i in range(1, N+1):\n        for j in range(i, N+1):\n            if i*j == N:\n                f_ab = max(len(str(i)), len(str(j)))\n                min_f = min(min_f, f_ab)\n    return min_f\n"
    },
    {
        "number": 4216,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    min_value = float('inf')\n    for i in range(1, int(N**0.5)+1):\n        if N % i == 0:\n            j = N // i\n            if i > j:\n                i, j = j, i\n            f_value = max(len(str(i)), len(str(j)))\n            if f_value < min_value:\n                min_value = f_value\n    return str(min_value)"
    },
    {
        "number": 4216,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n\n    if N < 10:\n        return \"0\"\n\n    max_digits = len(str(N))\n    min_f = max_digits\n\n    for i in range(2, max_digits + 1):\n        j = N // (10 ** (i - 1))\n        k = N % (10 ** i) // (10 ** (i - 1))\n\n        if i <= j and k <= j:\n            min_f = min(min_f, min(i, j))\n        else:\n            break\n\n    return str(min_f)"
    },
    {
        "number": 4216,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    min_f = float('inf')\n    for i in range(1, int(N**0.5) + 1):\n        if N % i == 0:\n            j = N // i\n            f = max(len(str(i)), len(str(j)))\n            if f < min_f:\n                min_f = f\n\n    return min_f\n"
    },
    {
        "number": 4217,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, input().split())\n    food_likes = []\n    for i in range(N):\n        K_i, *A_i = map(int, input().split())\n        food_likes.append(set(A_i))\n\n    common_food_likes = food_likes[0].intersection(*food_likes[1:])\n    return len(common_food_likes)\n\ndef"
    },
    {
        "number": 4217,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, input().split())\n    people_foods = [[] for _ in range(N)]\n\n    for i in range(N):\n        K_i, *A_i = map(int, input().split())\n        people_foods[i] = set(A_i)\n\n    common_foods = set(people_foods[0])\n    for i in range(1, N):\n        common_foods &= set(people_foods[i])\n\n    return len(common_foods)"
    },
    {
        "number": 4217,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    foods_liked_by_all = set(range(1, M+1))\n    for i in range(1, N+1):\n        K_i, A_ij = map(int, stdin.split()[i-1:i-1+K_i])\n        foods_liked_by_all = foods_liked_by_all.intersection(set(A_ij))\n    return str(len(foods_liked_by_all))\n\nstdin = '''3 4\n2 1 3\n3 1 2 3\n2 3 2'''\n\nprint(solution(stdin)) "
    },
    {
        "number": 4217,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.splitlines()\n    N, M = map(int, input_data[0].split())\n    foods_liked = {}\n\n    for i in range(1, N+1):\n        K_i, *A_i = map(int, input_data[i].split())\n        foods_liked[i] = set(A_i)\n\n    common_foods = set(foods_liked[1])\n    for i in range(2, N+1):\n        common_foods.intersection_update(foods_liked[i])\n\n    return len(common_foods)\n\ndef"
    },
    {
        "number": 4217,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    foods_liked_by_all = set(range(1, M+1))\n    for i in range(1, N+1):\n        K, *A = map(int, stdin.split()[i:i+K+1])\n        foods_liked_by_all.intersection_update(A)\n    return str(len(foods_liked_by_all))\n"
    },
    {
        "number": 4217,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def count_common_foods(person_foods: list) -> int:\n        common_foods = set(person_foods[0])\n        for i in range(1, len(person_foods)):\n            common_foods.intersection_update(person_foods[i])\n        return len(common_foods)\n\n    input_list = stdin.split(\"\\n\")\n    N, M = map(int, input_list.pop(0).split())\n    person_foods = [[] for _ in range(N)]\n\n    for i in range(N):\n        K_i, *A_i = map(int, input_list.pop(0).split())\n        person_foods[i] = A_i\n\n    common_foods_count = count_common_foods(person_foods)\n    return str(common_foods_count)\n"
    },
    {
        "number": 4217,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def count_unique_foods(foods: List[int]) -> int:\n        return len(set(foods))\n\n    def compute_intersection(foods1: List[int], foods2: List[int]) -> List[int]:\n        return list(set(foods1) & set(foods2))\n\n    input_data = stdin.split(\"\\n\")\n    N, M = map(int, input_data[0].split())\n    foods_liked = [list(map(int, input_data[i].split()[1:])) for i in range(1, N + 1)]\n\n    intersection_lengths = [count_unique_foods(foods_liked[0])]\n    for i in range(1, N):\n        intersection_lengths.append(count_unique_foods(compute_intersection(foods_liked[0], foods_liked[i])))\n\n    return str(max(intersection_lengths))\n"
    },
    {
        "number": 4217,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    K_i = []\n    A_i = []\n    \n    for i in range(N):\n        K_i.append(int(stdin.split()[i*M+2]))\n        A_i.append(list(map(int, stdin.split()[i*M+3:i*M+3+K_i[i]])))\n    \n    foods_liked = set(range(1, M+1))\n    for i in range(N):\n        foods_liked &= set(A_i[i])\n    \n    return len(foods_liked)"
    },
    {
        "number": 4217,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    K_i = [int(i) for i in stdin.split()[2:2+N]]\n    A_ij = [[int(j) for j in stdin.split()[2+N+i*K_i[i]:2+N+i*K_i[i]+K_i[i]]] for i in range(N)]\n    \n    foods_liked = set()\n    for i in range(N):\n        foods_liked.update(A_ij[i])\n    \n    result = len(foods_liked)\n    \n    return str(result)"
    },
    {
        "number": 4217,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, input().split())\n    people_likes = []\n\n    for _ in range(N):\n        K_i, *A_i = map(int, input().split())\n        people_likes.append(set(A_i))\n\n    common_likes = people_likes[0]\n\n    for i in range(1, N):\n        common_likes.intersection_update(people_likes[i])\n\n    return len(common_likes)\n"
    },
    {
        "number": 4218,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return f\"{N/2}\"\n\ndef"
    },
    {
        "number": 4218,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    return str(1 - (N % 2) / 2)\n\nN = int(input())\nprint(solution(N)) "
    },
    {
        "number": 4218,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    odd_count = 0\n    for i in range(1, N+1):\n        if i % 2 != 0:\n            odd_count += 1\n    probability = odd_count / N\n    return f\"{probability:.10f}\""
    },
    {
        "number": 4218,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    probability = (N // 2) / N\n    return f\"{probability:.10f}\"\n\ndef"
    },
    {
        "number": 4218,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    probability = 1 if N % 2 == 1 else 0\n    return f\"{probability:.10f}\"\n\ninput_string = input()\noutput_string = solution(input_string)\nprint(output_string) "
    },
    {
        "number": 4218,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    odd_count = 0\n    for i in range(1, N+1):\n        if i % 2 != 0:\n            odd_count += 1\n    probability = odd_count / N\n    return f\"{probability:.{9}f}\""
    },
    {
        "number": 4218,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    odd_count = 0\n    for i in range(1, N+1):\n        if i % 2 != 0:\n            odd_count += 1\n    probability = odd_count / N\n    return \"{:.10f}\".format(probability)\n\n\ndef"
    },
    {
        "number": 4218,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    probability = 1 - (1 - N * (N + 1) // 2) * (1 - N // 2)\n    return f\"{probability:.10f}\"\n\nstdin = input(\"Enter N: \")\nprint(solution(stdin)) "
    },
    {
        "number": 4218,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    probability = 1 - (N % 2) / N\n    return f\"{probability:.10f}\"\n\ndef"
    },
    {
        "number": 4218,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    odd_count = sum(1 for i in range(1, N+1) if i % 2 != 0)\n    probability = odd_count / N\n    return f\"{probability:.10f}\"\n\n\ndef"
    },
    {
        "number": 4219,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    N = int(input_list.pop(0))\n    honest_count = 0\n\n    for i in range(N):\n        A_i = int(input_list.pop(0))\n        for j in range(A_i):\n            x_ij, y_ij = map(int, input_list.pop(0).split())\n            if y_ij == 1:\n                honest_count += 1\n\n    return max(honest_count, N)\n\n\nstdin = '''3\n1\n2 1\n1\n1 1\n1\n2 0'''\n\nprint(solution(stdin))  # Output: 2 "
    },
    {
        "number": 4219,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    max_honest_persons = 0\n\n    for i in range(1, N + 1):\n        A_i = int(stdin[i])\n        current_honest_persons = 0\n\n        for j in range(1, A_i + 1):\n            x_ij, y_ij = map(int, stdin[i + j].split())\n            if y_ij == 1:\n                current_honest_persons += 1\n\n        max_honest_persons = max(max_honest_persons, current_honest_persons)\n\n    return str(max_honest_persons)"
    },
    {
        "number": 4219,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    result = 0\n    \n    for i in range(1, N+1):\n        A_i = int(stdin[i])\n        result += A_i // 2\n        \n    return result"
    },
    {
        "number": 4219,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def is_inconsistent(person1: int, person2: int, testimony1: int, testimony2: int) -> bool:\n        if person1 == person2:\n            return True\n        return testimony1 != testimony2\n\n    def is_consistent(person1: int, person2: int, testimony1: int, testimony2: int) -> bool:\n        return testimony1 == testimony2\n\n    def get_max_honest_people(N: int, A: int) -> int:\n        max_honest_people = 0\n        for i in range(N):\n            inconsistent = 0\n            for j in range(A):\n                testimony1 = int(stdin[i * A + j + 1].split()[1])\n                testimony2 = int(stdin[i * A + j + 1 + A].split()[1])\n                if is_inconsistent(i, int(stdin[i * A + j + 1].split()[0]), testimony1, testimony2):\n                    inconsistent += 1\n                    if inconsistent >= 2:\n                        break\n            if inconsistent == 0:\n                max_honest_people += 1\n        return max_honest_people\n\n    N = int(stdin[0])\n    A = 0\n    for i in range(1, len(stdin), 2):\n        A += 1\n    result = get_max_honest_people(N, A)\n    return str(result)\n"
    },
    {
        "number": 4219,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def get_testimonies(N, A, testimonies):\n        testimonies_dict = {}\n        for i in range(1, N + 1):\n            testimonies_dict[i] = []\n            for j in range(A[i - 1]):\n                x_ij, y_ij = map(int, testimonies[j].split())\n                testimonies_dict[i].append((x_ij, y_ij))\n        return testimonies_dict\n\n    def check_inconsistencies(testimonies_dict):\n        for i in range(1, N + 1):\n            for j in range(A[i - 1]):\n                for k in range(j + 1, A[i - 1]):\n                    x_ij, y_ij = testimonies_dict[i][j]\n                    x_ik, y_ik = testimonies_dict[i][k]\n                    if x_ij == x_ik and y_ij != y_ik:\n                        return True\n        return False\n\n    N, *lines = stdin.split('\\n')\n    N = int(N)\n    A = list(map(int, next(iter(lines)).split()))\n    testimonies = list(lines)\n\n    testimonies_dict = get_testimonies(N, A, testimonies)\n\n    if check_inconsistencies(testimonies_dict):\n        return 0\n\n    honest_count = 0\n    for i in range(1, N + 1):\n        if all(y_ij == 1 for _, y_ij in testimonies_dict[i]):\n            honest_count += 1\n\n    return honest_count\n"
    },
    {
        "number": 4219,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    A = [0]*N\n    honest_count = 0\n    for i in range(N):\n        A[i] = int(stdin[i+1])\n        for j in range(A[i]):\n            x, y = map(int, stdin[i*A[i]+j+2].split())\n            if y == 1:\n                honest_count += 1\n    return honest_count\n\nstdin = \"\"\"3\n1\n2 1\n1\n1 1\n1\n2 0\"\"\"\n\nprint(solution(stdin.splitlines())) # Output: 2 "
    },
    {
        "number": 4219,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    honest_count = 0\n\n    for i in range(1, N + 1):\n        A_i = int(stdin[i][0])\n        for j in range(1, A_i + 1):\n            x_ij, y_ij = map(int, stdin[i][j].split())\n            if y_ij == 1:\n                honest_count += 1\n\n    return honest_count\n"
    },
    {
        "number": 4219,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    N = int(input_list[0])\n    honest_persons = 0\n    for i in range(1, N + 1):\n        A_i = int(input_list[i])\n        for j in range(1, A_i + 1):\n            x_ij, y_ij = map(int, input_list[i + j].split())\n            if y_ij == 1:\n                honest_persons += 1\n            elif y_ij == 0:\n                continue\n            else:\n                return \"Error: Invalid input\"\n    return honest_persons\n"
    },
    {
        "number": 4219,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    total_honest_count = 0\n    for i in range(1, N + 1):\n        A_i = int(stdin.split(\"\\n\")[i])\n        for j in range(1, A_i + 1):\n            x_ij, y_ij = map(int, stdin.split(\"\\n\")[i + j].split())\n            if y_ij == 1:\n                total_honest_count += 1\n    return total_honest_count\n"
    },
    {
        "number": 4219,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0].strip())\n    count = 0\n    for i in range(1, N+1):\n        A_i = int(stdin[i].strip())\n        for j in range(1, A_i+1):\n            x_ij, y_ij = map(int, stdin[i+j].strip().split())\n            if y_ij == 1:\n                count += 1\n    return str(count)\n\ndef"
    },
    {
        "number": 4220,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K, S = map(str, stdin.split())\n    K = int(K)\n\n    if len(S) > K:\n        S = S[:K] + \"...\"\n\n    return S"
    },
    {
        "number": 4220,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    K, S = map(str, stdin.split())\n    K = int(K)\n\n    if len(S) <= K:\n        return S\n    else:\n        return S[:K] + \"...\""
    },
    {
        "number": 4220,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    K, S = map(str, stdin.split(\"\\n\"))\n    K = int(K)\n    if len(S) <= K:\n        return S\n    else:\n        return S[:K] + \"...\""
    },
    {
        "number": 4220,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.split(\"\\n\")[0])\n    s = stdin.split(\"\\n\")[1]\n    if len(s) <= k:\n        return s\n    else:\n        return s[:k] + \"...\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    K = int(stdin.split()[0])\n    S = stdin.split()[1]\n\n    # Check if the length of S is at most K\n    if len(S) <= K:\n        return S\n    else:\n        # Extract the first K characters in S\n        S_first_K = S[:K]\n        # Append ... to the end of them\n        S_first_K_ellipsis = S_first_K + \"...\"\n        # Return the result\n        return S_first_K_ellipsis\n"
    },
    {
        "number": 4220,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    K, S = map(str, stdin.split())\n    K = int(K)\n    if len(S) <= K:\n        return S\n    else:\n        return S[:K] + \"...\""
    },
    {
        "number": 4220,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    K, S = stdin.split()\n    K = int(K)\n    \n    if len(S) <= K:\n        return S\n    else:\n        return S[:K] + \"...\"\n\n\ndef"
    },
    {
        "number": 4220,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k, s = map(str, stdin.split())\n    k = int(k)\n    if len(s) <= k:\n        return s\n    else:\n        return s[:k] + \"...\"\n\ndef"
    },
    {
        "number": 4220,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.split('\\n')[0])\n    S = stdin.split('\\n')[1]\n\n    if len(S) <= K:\n        return S\n    else:\n        return S[:K] + '...'\n"
    },
    {
        "number": 4220,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    K, S = input().split()\n    K = int(K)\n\n    if len(S) <= K:\n        return S\n    else:\n        return S[:K] + \"...\"\n\nstdin = \"7\\nnikoandsolstice\"\nprint(solution(stdin)) "
    },
    {
        "number": 4221,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if S[-1] == \"s\":\n        return S + \"es\"\n    else:\n        return S + \"s\"\n\ninput_stdin = input()\nprint(solution(input_stdin)) "
    },
    {
        "number": 4221,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    singular = stdin\n    plural = singular + 's' if singular[-1] == 's' else singular + 'es'\n    return plural\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4221,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    singular_form = stdin.strip()\n    if singular_form[-1] == \"s\":\n        return singular_form + \"es\"\n    else:\n        return singular_form + \"s\""
    },
    {
        "number": 4221,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    word = stdin.strip()\n    if word[-1] == 's':\n        return word + 'es'\n    else:\n        return word + 's'\n"
    },
    {
        "number": 4221,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    word = stdin.strip()\n    if word.endswith('s'):\n        plural = word + 'es'\n    else:\n        plural = word + 's'\n    return plural\n"
    },
    {
        "number": 4221,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    singular_form = stdin.strip()\n    plural_form = singular_form\n\n    if singular_form.endswith('s'):\n        plural_form = singular_form + 'es'\n    else:\n        plural_form = singular_form + 's'\n\n    return plural_form\n"
    },
    {
        "number": 4221,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if S[-1] == 's':\n        return S + 'es'\n    else:\n        return S + 's'\n\ndef"
    },
    {
        "number": 4221,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s[-1] == 's':\n        return s + 'es'\n    else:\n        return s + 's'\n\n\ndef"
    },
    {
        "number": 4221,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    singular_form = stdin.strip()\n    if singular_form[-1] == 's':\n        plural_form = singular_form + 'es'\n    else:\n        plural_form = singular_form + 's'\n    return plural_form\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4221,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    word = stdin.strip()\n    if word[-1] == \"s\":\n        plural = word + \"es\"\n    else:\n        plural = word + \"s\"\n    return plural"
    },
    {
        "number": 4222,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    N, K = map(int, input_list[0].split())\n    d_list = []\n    A_list = []\n\n    for i in range(1, K + 1):\n        d = int(input_list[i])\n        d_list.append(d)\n        A_list.append([int(x) for x in input_list[i + K].split()])\n\n    count = 0\n    for i in range(1, N + 1):\n        has_snack = False\n        for j in range(K):\n            if i in A_list[j]:\n                has_snack = True\n                break\n        if not has_snack:\n            count += 1\n\n    return str(count)\n\n\nstdin = \"\"\"3 2\n2\n1 3\n1\n3\"\"\"\n\nprint(solution(stdin))  # Output: 1 "
    },
    {
        "number": 4222,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[:2])\n    snack_data = []\n    for i in range(K):\n        data = list(map(int, stdin.split()[2+i*N:2+(i+1)*N]))\n        snack_data.append(data)\n\n    victims = 0\n    for i in range(N):\n        for j in range(K):\n            if i+1 not in snack_data[j]:\n                victims += 1\n                break\n\n    return str(victims)\n"
    },
    {
        "number": 4222,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[:2])\n    snacks_list = [[] for _ in range(K)]\n    for i in range(K):\n        snacks_list[i] = list(map(int, stdin.split()[2 + i * N : 2 + (i + 1) * N]))\n\n    def check_snack(snuke_snacks, snack_list):\n        for snack in snack_list:\n            if snack not in snuke_snacks:\n                return False\n        return True\n\n    num_victims = 0\n    for snuke_i in range(N):\n        for snack_list_i, snack_list in enumerate(snacks_list):\n            if check_snack(snack_list, snacks_list[snuke_i]):\n                num_victims += 1\n                break\n\n    return str(num_victims)\n"
    },
    {
        "number": 4222,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, input().split())\n    snack_count = [0] * N\n    for i in range(K):\n        d_i = int(input())\n        A_i = list(map(int, input().split()))\n        for snack in A_i:\n            snack_count[snuck - 1] += 1\n    victims = sum(1 for count in snack_count if count == 0)\n    return str(victims)"
    },
    {
        "number": 4222,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    snukes = [set() for _ in range(N)]\n\n    for i in range(K):\n        snack_num = int(stdin.pop(0))\n        for j in range(snack_num):\n            snukes[int(stdin.pop(0)) - 1].add(i + 1)\n\n    victims = sum(1 for snack in snukes if len(snack) == 0)\n    return str(victims)\n"
    },
    {
        "number": 4222,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[:2])\n    d = [0] * K\n    snacks = [[] for _ in range(N)]\n    \n    for i in range(K):\n        d[i] = int(stdin.split()[1 + i])\n        snacks[i] = list(map(int, stdin.split()[2 + N * i: 2 + N * (i + 1)]))\n    \n    victims = 0\n    for i in range(N):\n        if not snacks[i]:\n            victims += 1\n    \n    return str(victims)\n"
    },
    {
        "number": 4222,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[0:2])\n    d_i = list(map(int, stdin.split()[2:2+N]))\n    A = [list(map(int, stdin.split()[i*N+2:i*N+2+d_i[i]]) for i in range(K))]\n    count = 0\n    for i in range(N):\n        for j in range(K):\n            if i+1 in A[j]:\n                break\n        else:\n            count += 1\n    return count\n"
    },
    {
        "number": 4222,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[:2])\n    d = [int(x) for x in stdin.split()[2:]]\n    A = [list(map(int, stdin.split()[i+2:i+2+d[i]])) for i in range(K)]\n\n    snack_count = [0] * N\n    for i in range(K):\n        for j in A[i]:\n            snack_count[j-1] += 1\n\n    victim_count = snack_count.count(0)\n    return victim_count"
    },
    {
        "number": 4222,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[:2])\n    snack_count = [0] * K\n    for i in range(K):\n        d_i = int(stdin.split()[i+2])\n        snack_count[i] = d_i\n    \n    total_victims = 0\n    for i in range(1, N+1):\n        found_snack = False\n        for j in range(K):\n            if i in range(A[j][0], A[j][0] + snack_count[j]):\n                found_snack = True\n                break\n        if not found_snack:\n            total_victims += 1\n    \n    return total_victims"
    },
    {
        "number": 4222,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    Snukes = [[] for _ in range(N+1)]\n\n    for i in range(1, K+1):\n        d_i, *A_i = map(int, input().split())\n        for j in A_i:\n            Snukes[j].append(i)\n\n    count = 0\n    for snuke in Snukes[1:]:\n        if not snuke:\n            count += 1\n\n    return count"
    },
    {
        "number": 4223,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, S = map(str, stdin.split())\n    N = int(N)\n    \n    count = 0\n    color = S[0]\n    for i in range(1, N):\n        if S[i] == color:\n            continue\n        color = S[i]\n        count += 1\n        \n    return str(count + 1)\n"
    },
    {
        "number": 4223,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, S = map(str, stdin.split())\n    N = int(N)\n    S = str(S)\n\n    # Initialize the list of slimes\n    slimes = [S[0]]\n\n    for i in range(1, N):\n        if S[i] == slimes[-1]:\n            # If adjacent slimes have the same color, merge them\n            slimes[-1] = slimes[-1] + S[i]\n        else:\n            # Add a new slime\n            slimes.append(S[i])\n\n    # Calculate the final number of slimes\n    num_slimes = len(slimes)\n\n    return num_slimes\n"
    },
    {
        "number": 4223,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    S = stdin.split()[1]\n    \n    slime_count = 0\n    prev_color = None\n    \n    for color in S:\n        if color == prev_color:\n            continue\n        prev_color = color\n        slime_count += 1\n        \n    return str(slime_count)\n"
    },
    {
        "number": 4223,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, S = map(str, stdin.split())\n    N = int(N)\n    color_count = {}\n    color_group = [0] * N\n\n    for i, color in enumerate(S):\n        if color not in color_count:\n            color_count[color] = 0\n        color_count[color] += 1\n        color_group[i] = color_count[color]\n\n    for i in range(N - 1):\n        if color_group[i] == color_group[i + 1]:\n            color_group[i + 1] += color_group[i]\n\n    unique_colors = set(color_count.keys())\n    return len(unique_colors)\n"
    },
    {
        "number": 4223,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, S = map(str, stdin.split())\n    N = int(N)\n    # Convert the string to a list of characters\n    slimes = list(S)\n    # Initialize variables\n    i, count = 0, 1\n    # Iterate through the slimes\n    while i < N:\n        if i+1 < N and slimes[i] == slimes[i+1]:\n            # If there is a slime adjacent to the current slime, update its position\n            if i > 0:\n                slimes[i-1] = slimes[i]\n            # Remove the adjacent slime\n            del slimes[i+1]\n            # Decrement count\n            count -= 1\n            # Decrement i\n            i -= 1\n        else:\n            i += 1\n    return count"
    },
    {
        "number": 4223,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, S = map(str, stdin.split())\n    N = int(N)\n    S = S.strip()\n\n    colors = set(S)\n    for color in colors:\n        i = 0\n        while i < N:\n            if S[i] == color:\n                j = i + 1\n                while j < N and S[j] == color:\n                    j += 1\n                N -= j - i - 1\n                i -= j - i - 1\n            i += 1\n\n    return str(N)\n"
    },
    {
        "number": 4223,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, S = map(str, input().split())\n    N = int(N)\n    colors = S\n    count = {}\n    for color in colors:\n        if color in count:\n            count[color] += 1\n        else:\n            count[color] = 1\n    final_count = 1\n    for i in range(1, len(colors)):\n        if colors[i] == colors[i-1]:\n            count[colors[i]] -= 1\n            if count[colors[i]] == 0:\n                del count[colors[i]]\n            if i > 1 and colors[i-2] != colors[i]:\n                final_count += 1\n        else:\n            if colors[i] in count:\n                count[colors[i]] += 1\n            else:\n                count[colors[i]] = 1\n    return final_count\n"
    },
    {
        "number": 4223,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    S = stdin.split(\"\\n\")[1]\n\n    colors = {}\n    for i, color in enumerate(S):\n        if color not in colors:\n            colors[color] = [i]\n        else:\n            colors[color].append(i)\n\n    for color in colors.values():\n        if len(color) > 1:\n            for i in range(len(color) - 1):\n                colors[S[color[i]]].append(color[i + 1])\n                colors[S[color[i + 1]]].append(color[i])\n            del colors[S[color[0]]]\n            del colors[S[color[-1]]]\n            colors[S[color[0]]] = [color[0]]\n            colors[S[color[-1]]] = [color[-1]]\n\n    return len(colors)"
    },
    {
        "number": 4223,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    S = stdin.split('\\n')[1]\n    \n    # Initialize the final list of slimes\n    slimes = []\n    \n    # Loop through the string S\n    for i in range(N):\n        # If the current slime is the same as the next slime\n        if i < N-1 and S[i] == S[i+1]:\n            # If the slime before the group of adjacent slimes is not the same as the new larger slime\n            if i > 0 and S[i] != S[i-1]:\n                # Add the new larger slime to the list of slimes\n                slimes.append(S[i])\n            # If the slime before the group of adjacent slimes is the same as the new larger slime\n            elif i > 0 and S[i] == S[i-1]:\n                # Update the previous larger slime with the new color\n                slimes[-1] = S[i]\n        # If the current slime is not the same as the next slime\n        else:\n            # Add the current slime to the list of slimes\n            slimes.append(S[i])\n    \n    # Return the final number of slimes\n    return len(slimes)"
    },
    {
        "number": 4223,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, S = map(str, stdin.split())\n    N = int(N)\n    S = S.strip()\n    slimes = []\n    \n    for i in range(N):\n        color = S[i]\n        if not slimes or slimes[-1][1] != color:\n            slimes.append((i, color))\n    \n    return len(slimes)"
    },
    {
        "number": 4224,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    a = list(map(int, stdin[1].split()))\n\n    operations = 0\n    for i in range(N):\n        if a[i] % 2 == 0:\n            a[i] //= 2\n            operations += 1\n        else:\n            a[i] *= 3\n            operations += 1\n\n    return str(operations)\n"
    },
    {
        "number": 4224,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    operations = 0\n    for i in range(N):\n        if a[i] % 2 == 0:\n            a[i] //= 2\n            a[i] *= 3\n            operations += 1\n\n    for i in range(N):\n        if a[i] % 3 == 0:\n            a[i] //= 3\n            operations += 1\n\n    return str(operations)\n\ndef"
    },
    {
        "number": 4224,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    a = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n    count = 0\n    for i in range(N):\n        a[i] *= 3\n        count += 1\n        for j in range(i+1, N):\n            a[j] = (a[j] + 1) // 2\n            count += 1\n    return count\n\nstdin = \"\"\"3\n5 2 4\"\"\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4224,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, *a = map(int, stdin.split())\n    operations = 0\n    for i in range(N):\n        if a[i] % 2 == 0:\n            a[i] //= 2\n            operations += 1\n        else:\n            a[i] *= 3\n            operations += 1\n    return operations\n\n\ndef"
    },
    {
        "number": 4224,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, *a = map(int, stdin.split())\n    operations = 0\n    for i in range(N):\n        if a[i] % 2 == 0:\n            a[i] //= 2\n        else:\n            a[i] *= 3\n        operations += 1\n    return operations\n\nN = int(input())\na = list(map(int, input().split()))\nprint(solution(str(N) + \" \" + \" \".join(map(str, a)))) "
    },
    {
        "number": 4224,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    a = [int(x) for x in stdin.split('\\n')[1].split()]\n\n    operations = 0\n    for i in range(N):\n        if a[i] % 2 == 0:\n            a[i] //= 2\n            a[i] *= 3\n            operations += 1\n\n    return str(operations)\n"
    },
    {
        "number": 4224,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, a = map(int, stdin.split())\n    a = sorted(a)\n    count = 0\n    while a[-1] > 1:\n        a[-1] = a[-1] // 2 if a[-1] % 2 == 0 else a[-1] * 3\n        count += 1\n    return count\n"
    },
    {
        "number": 4224,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    a = list(map(int, stdin[1].split()))\n\n    count = 0\n    for i in range(N):\n        if a[i] % 2 == 0:\n            a[i] //= 2\n            a[i] *= 3\n            count += 1\n        else:\n            a[i] *= 3\n            count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4224,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    count = 0\n    for i in range(N):\n        if a[i] % 2 == 0:\n            a[i] //= 2\n            a[i] *= 3\n            count += 1\n        else:\n            a[i] *= 3\n            count += 1\n\n    return str(count)\n\n\ndef"
    },
    {
        "number": 4224,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, *a = map(int, stdin.split())\n    count = 0\n\n    while all(x % 2 == 0 for x in a):\n        a = [x // 2 for x in a]\n        count += 1\n\n    return count\n"
    },
    {
        "number": 4225,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    # We can have at most A cards with 1, B cards with 0, and C cards with -1.\n    # We have to choose K cards out of these, and since we need to maximize the sum, we'll choose the cards with the highest values.\n    # We can either choose the A cards with 1, the B cards with 0, or the C cards with -1.\n    # If we choose the A cards with 1, then we have to choose K cards out of A, which means we can have at most A-K cards with 0 or -1.\n    # If we choose the B cards with 0, then we have to choose K-A cards out of B, which means we can have at most B-(K-A) cards with -1.\n    # If we choose the C cards with -1, then we have to choose K-A-B cards out of C, which means we can have at most C-(K-A-B) cards with 1.\n    # We can't have negative card values, so we have to choose the cards with the highest values that are still within the given constraints.\n    # Therefore, we can have at most A-K cards with 1, B-(K-A) cards with 0, and C-(K-A-B) cards with -1.\n    # We can calculate the maximum possible sum by adding up these values and subtracting the number of cards we chose for 0 and -1.\n    # The remaining cards will have the highest values and sum to 1*A, 0*B, and -1*C.\n    max_sum = (A - K) + (B - (K - A)) + (C - (K - A - B))\n    return str(max_sum)"
    },
    {
        "number": 4225,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    return max(A, B, C) if K >= A + B + C else max(K - (A + B + C - K), A, B, C)\n"
    },
    {
        "number": 4225,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    return max(A, B + K - A, C + K - A - B)"
    },
    {
        "number": 4225,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    \n    max_value = A + B * (-1) + C * (-1)\n    max_sum = max_value * K\n    \n    return str(max_sum)"
    },
    {
        "number": 4225,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    max_sum = 0\n\n    # calculate maximum sum for choosing all A cards\n    max_sum += A\n\n    # calculate maximum sum for choosing all B cards\n    max_sum += B * (-1)\n\n    # calculate maximum sum for choosing all C cards\n    max_sum += C * (-1)\n\n    # calculate maximum sum for choosing K cards\n    max_sum += min(A, B, C) * (-1)\n\n    return max_sum\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4225,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    return max(A, B, C)"
    },
    {
        "number": 4225,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    max_sum = 0\n    \n    # calculate the maximum possible sum of the numbers written on the cards chosen\n    for i in range(K):\n        max_sum += 1\n    max_sum += min(A, B, C) * 2\n    \n    return max_sum"
    },
    {
        "number": 4225,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n\n    # Get the maximum number of cards we can pick\n    max_cards = min(A, B, C)\n\n    # If K is greater than the maximum number of cards we can pick, we can't pick all K cards\n    if K > max_cards:\n        return \"0\"\n\n    # If K is equal to the maximum number of cards we can pick, we can pick all the cards\n    if K == max_cards:\n        return str(max(A, B, C))\n\n    # If K is less than the maximum number of cards we can pick, we can pick up K cards with the highest number written on them\n    max_sum = 0\n    if A >= B + C:\n        max_sum = max(max_sum, A * K)\n    if B >= A + C:\n        max_sum = max(max_sum, B * K)\n    if C >= A + B:\n        max_sum = max(max_sum, C * K)\n\n    return str(max_sum)\n\n\ndef"
    },
    {
        "number": 4225,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    total = A + B + C\n    if K == 0:\n        return 0\n    elif K == 1:\n        return 1\n    elif K == total:\n        return A + B - C\n    elif K > total:\n        return A + B\n    else:\n        return max(A + B - C, A + B - (K - C))\n\ndef"
    },
    {
        "number": 4225,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    return max(A, B, C)\n\ninput_str = input()\nresult = solution(input_str)\nprint(result) "
    },
    {
        "number": 4226,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    \n    if X % 2 == 0:\n        if Y % 4 == 0:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4226,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    \n    cranes = 0\n    turtles = 0\n    \n    if X % 2 == 0:\n        cranes = X // 2\n    else:\n        cranes = X // 2 + 1\n        \n    if Y % 4 == 0:\n        turtles = Y // 4\n    else:\n        turtles = Y // 4 + 1\n    \n    if cranes * 2 + turtles * 4 == X + Y:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    cranes, turtles = 0, 0\n\n    if X >= 2 * Y:\n        cranes = X // 2\n        turtles = X - cranes\n    else:\n        turtles = X\n        cranes = Y - turtles\n\n    if cranes * 2 + turtles * 4 == Y:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    cranes = Y // 2\n    turtles = Y // 4\n    if X == cranes + turtles:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nstdin = input().strip()\nprint(solution(stdin)) "
    },
    {
        "number": 4226,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    cranes, turtles = 0, 0\n\n    if X % 2 == 0:\n        cranes = X // 2\n    else:\n        cranes = X // 2 + 1\n\n    if Y % 2 == 0:\n        turtles = Y // 2\n    else:\n        turtles = Y // 2 + 1\n\n    if cranes + turtles == X and 4 * cranes + 2 * turtles == Y:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4226,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_values = list(map(int, stdin.split()))\n    X, Y = input_values[0], input_values[1]\n    cranes = Y // 2\n    turtles = Y - cranes * 2\n\n    if cranes + turtles == X and cranes >= 0 and turtles >= 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n\ninput_values = input().split()\ninput_values = list(map(int, input_values))\nX, Y = input_values[0], input_values[1]\n\nprint(solution(f\"{X} {Y}\")) "
    },
    {
        "number": 4226,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    cranes = Y // 2\n    turtles = Y // 4\n    if cranes * 2 + turtles * 4 == X * Y:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4226,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    cranes, turtles = X // 2, X // 4\n\n    if cranes * 2 + turtles * 4 == Y:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n\ndef"
    },
    {
        "number": 4226,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n\n    cranes = y // 2\n    turtles = y - cranes * 2\n\n    if cranes * 2 + turtles == x:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4226,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    cranes = 0\n    turtles = 0\n    while X >= cranes + turtles:\n        if X - cranes - turtles > Y - 2 * cranes:\n            cranes += 1\n        else:\n            turtles += 1\n    if X == cranes + turtles and Y == 2 * cranes + 4 * turtles:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4227,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[0:2])\n    adj = [[] for _ in range(N)]\n    visited = [False for _ in range(N)]\n\n    for i in range(M):\n        a, b = map(int, stdin.split()[2 * i + 1:2 * i + 3])\n        adj[a - 1].append(b - 1)\n        adj[b - 1].append(a - 1)\n\n    def dfs(vertex: int, depth: int) -> int:\n        if depth == N - 1:\n            return 1\n        visited[vertex] = True\n        result = 0\n        for neighbor in adj[vertex]:\n            if not visited[neighbor]:\n                result += dfs(neighbor, depth + 1)\n        visited[vertex] = False\n        return result\n\n    return str(dfs(0, 1))\n\n\ninput_str = '''3 3\n1 2\n1 3\n2 3\n'''\n\noutput_str = solution(input_str)\nprint(output_str)\n"
    },
    {
        "number": 4227,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    adj_list = [[] for _ in range(N)]\n    for i in range(M):\n        a, b = map(int, stdin.split()[2 * i + 2: 2 * i + 4])\n        adj_list[a - 1].append(b - 1)\n        adj_list[b - 1].append(a - 1)\n\n    def dfs(v: int, visited: set[int]) -> int:\n        visited.add(v)\n        if len(visited) == N:\n            return 1\n        count = 0\n        for neighbor in adj_list[v]:\n            if neighbor not in visited:\n                count += dfs(neighbor, visited)\n        visited.remove(v)\n        return count\n\n    return dfs(0, set())\n"
    },
    {
        "number": 4227,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def count_paths(adj: list, n: int) -> int:\n        visited = [False] * n\n        visited[0] = True\n        stack = [(0, 1)]\n        count = 0\n\n        while stack:\n            curr_node, curr_count = stack.pop()\n\n            for neighbor in adj[curr_node]:\n                if not visited[neighbor]:\n                    visited[neighbor] = True\n                    stack.append((neighbor, curr_count + 1))\n\n                    if curr_count + 1 == n:\n                        count += 1\n\n        return count\n\n    N, M = map(int, stdin.split()[:2])\n    adj = [[] for _ in range(N)]\n\n    for i in range(M):\n        a, b = map(int, stdin.split()[i * 2 + 2:i * 2 + 4])\n        adj[a - 1].append(b - 1)\n        adj[b - 1].append(a - 1)\n\n    return count_paths(adj, N)"
    },
    {
        "number": 4227,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    \n    adjacency_list = [[] for _ in range(N+1)]\n    for edge in edges:\n        a, b = edge\n        adjacency_list[a].append(b)\n        adjacency_list[b].append(a)\n    \n    def count_paths(vertex, visited):\n        if len(visited) == N:\n            return 1\n        count = 0\n        for neighbor in adjacency_list[vertex]:\n            if neighbor not in visited:\n                count += count_paths(neighbor, visited + [neighbor])\n        return count\n    \n    return count_paths(1, [1])"
    },
    {
        "number": 4227,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    adj_list = [[] for _ in range(N)]\n\n    for _ in range(M):\n        a, b = map(int, stdin.split()[2:4])\n        adj_list[a-1].append(b-1)\n        adj_list[b-1].append(a-1)\n\n    # DFS to check if all vertices are visited\n    visited = [False] * N\n    count = 0\n\n    def dfs(node):\n        nonlocal count\n        visited[node] = True\n        for neighbor in adj_list[node]:\n            if not visited[neighbor]:\n                dfs(neighbor)\n        count += 1\n\n    dfs(0)\n\n    return str(count // 2)\n\n\ndef"
    },
    {
        "number": 4227,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    edges = [tuple(map(int, stdin.split()[i:i+2])) for i in range(2, 2*M+1, 2)]\n    \n    adj_matrix = [[0]*N for _ in range(N)]\n    for a, b in edges:\n        adj_matrix[a-1][b-1] = 1\n        adj_matrix[b-1][a-1] = 1\n    \n    visited = [False]*N\n    visited[0] = True\n    paths = []\n    \n    def dfs(node):\n        if all(visited):\n            paths.append(1)\n            return\n        for neighbor in range(N):\n            if not visited[neighbor] and adj_matrix[node][neighbor]:\n                visited[neighbor] = True\n                dfs(neighbor)\n                visited[neighbor] = False\n    \n    dfs(0)\n    \n    return sum(paths)\n\n\ninput_data = \"\"\"3 3\n1 2\n1 3\n2 3\"\"\"\n\nprint(solution(input_data)) "
    },
    {
        "number": 4227,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M, *edges = stdin.split()\n    N, M = int(N), int(M)\n    adj_list = [[] for _ in range(N)]\n    for i in range(0, M * 2, 2):\n        a, b = int(edges[i]), int(edges[i + 1])\n        adj_list[a - 1].append(b - 1)\n        adj_list[b - 1].append(a - 1)\n\n    def dfs(v, visited, path, paths):\n        visited[v] = True\n        path.append(v + 1)\n        if len(path) == N:\n            paths.append(path[:])\n        else:\n            for neighbor in adj_list[v]:\n                if not visited[neighbor]:\n                    dfs(neighbor, visited, path, paths)\n        path.pop()\n        visited[v] = False\n\n    visited = [False] * N\n    path = []\n    paths = []\n    dfs(0, visited, path, paths)\n    return len(paths)\n"
    },
    {
        "number": 4227,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    adjacency_list = [list(map(int, stdin.split()[2 * i:2 * i + 2])) for i in range(M)]\n    visited = [False] * N\n    count = 0\n\n    def dfs(vertex: int, path_count: int):\n        nonlocal count\n        visited[vertex - 1] = True\n        path_count += 1\n        if path_count == N:\n            count += 1\n            return\n        for neighbor in adjacency_list[vertex - 1]:\n            if not visited[neighbor - 1]:\n                dfs(neighbor, path_count)\n        visited[vertex - 1] = False\n\n    dfs(1, 0)\n    return count\n"
    },
    {
        "number": 4227,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    adj_list = [[] for _ in range(N)]\n\n    for _ in range(M):\n        a, b = map(int, stdin.split()[2:4])\n        adj_list[a - 1].append(b - 1)\n        adj_list[b - 1].append(a - 1)\n\n    def dfs(v: int, visited: set[int]) -> int:\n        if len(visited) == N:\n            return 1\n\n        count = 0\n        visited.add(v)\n\n        for neighbor in adj_list[v]:\n            if neighbor not in visited:\n                count += dfs(neighbor, visited)\n\n        visited.remove(v)\n        return count\n\n    return dfs(0, set())"
    },
    {
        "number": 4227,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    n, m = map(int, input_data[0].split())\n    visited = [False] * n\n    visited[0] = True\n    count = 0\n\n    for edge in input_data[1:]:\n        a, b = map(int, edge.split())\n        if a == 1:\n            if visited[b - 1]:\n                continue\n            visited[b - 1] = True\n            count += 1 if all(visited) else 0\n            if count == n:\n                return count\n\n    return count\n\n\ninput_data = \"\"\"3 3\n1 2\n1 3\n2 3\"\"\"\n\nprint(solution(input_data)) "
    },
    {
        "number": 4228,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split())\n    L = [L+i-1 for i in range(1, N+1)]\n    min_diff = float('inf')\n    min_flavor = None\n\n    for i in range(N):\n        total_flavor = sum(L) - L[i]\n        diff = abs(total_flavor - (N-1)*(L[i]+1))\n\n        if diff < min_diff:\n            min_diff = diff\n            min_flavor = L[i]\n\n    return min_flavor\n"
    },
    {
        "number": 4228,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, input().split())\n    apples = [L + i for i in range(1, N+1)]\n    target_sum = sum(apples)\n    target_flavor = target_sum - apples[0]\n\n    min_diff = abs(target_flavor - sum(apples[1:]))\n    min_apple = 1\n\n    for i in range(2, N):\n        current_sum = sum(apples[:i]) + sum(apples[i+1:])\n        current_flavor = current_sum - apples[i-1]\n        current_diff = abs(current_flavor - target_flavor)\n\n        if current_diff < min_diff:\n            min_diff = current_diff\n            min_apple = i\n\n    return target_flavor - apples[min_apple-1]\n\ndef"
    },
    {
        "number": 4228,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split())\n    apples = [(i+1) * (L+i) for i in range(N)]\n    apples.sort()\n    apple_pie = sum(apples)\n    apple_pie_remaining = sum(apples[:-1])\n    min_diff = abs(apple_pie_remaining - apple_pie)\n    \n    for i in range(N-1):\n        for j in range(i+1, N):\n            if abs(sum(apples[i+1:j]) - apple_pie) < min_diff:\n                min_diff = abs(sum(apples[i+1:j]) - apple_pie)\n    \n    return min_diff\n\ndef"
    },
    {
        "number": 4228,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split())\n    apples = [L + i for i in range(N)]\n    apples.sort()\n    return str(sum(apples[:N-1]))\n"
    },
    {
        "number": 4228,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split())\n    apples = list(range(1, N+1))\n    flavors = [L + i - 1 for i in apples]\n    min_diff = float('inf')\n    min_flavor = 0\n    \n    for i in range(N):\n        # Remove the chosen apple from the list\n        del apples[i]\n        # Recalculate the flavors of the remaining apples\n        remaining_flavors = [L + i - 1 for i in apples]\n        # Calculate the sum of the remaining flavors\n        remaining_sum = sum(remaining_flavors)\n        # Calculate the absolute difference between the sum of the remaining flavors and the sum of all the flavors\n        diff = abs(remaining_sum - (sum(flavors) - flavors[i]))\n        if diff < min_diff:\n            min_diff = diff\n            min_flavor = remaining_sum\n    \n    return str(min_flavor)\n"
    },
    {
        "number": 4228,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split())\n    apples = [L + i for i in range(N)]\n    apples.sort()\n    min_diff = abs(apples[0] - apples[-1])\n    for i in range(1, N):\n        diff = abs(apples[i] - apples[N - 1])\n        if diff < min_diff:\n            min_diff = diff\n    return str(apples[0] + sum(apples[1:]) - min_diff)\n\n\nstdin = \"5 2\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4228,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, input().split())\n    apples = list(range(1, N+1))\n    flavors = [L + i - 1 for i in apples]\n    \n    # Find the index of the apple to eat\n    min_diff = abs(sum(flavors) - 2 * L)\n    index_to_eat = 0\n    for i in range(N):\n        diff = abs(sum(flavors[:i] + flavors[i+1:]) - 2 * L)\n        if diff < min_diff:\n            min_diff = diff\n            index_to_eat = i\n    \n    # Calculate the flavor of the remaining apple pie\n    flavors_remaining = flavors[:index_to_eat] + flavors[index_to_eat+1:]\n    remaining_flavor = sum(flavors_remaining)\n    \n    return remaining_flavor"
    },
    {
        "number": 4228,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, input().split())\n    apples = [L + i for i in range(N)]\n    apples.sort()\n    return apples[-2]\n\n\ndef"
    },
    {
        "number": 4228,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split())\n    apples = [L + i for i in range(1, N + 1)]\n    min_diff = abs(apples[0] - sum(apples) // N)\n    min_apple = 0\n    for i in range(1, N):\n        if abs(apples[i] - sum(apples[:i] + apples[i+1:]) // (N-1)) < min_diff:\n            min_diff = abs(apples[i] - sum(apples[:i] + apples[i+1:]) // (N-1))\n            min_apple = i\n    return sum(apples) - apples[min_apple]"
    },
    {
        "number": 4228,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_str, = stdin.split()\n    N, L = map(int, input_str.split(','))\n    apples = [L + i - 1 for i in range(1, N + 1)]\n    apple_sum = sum(apples)\n    min_diff = abs(apple_sum - (L + (N - 1) * N // 2))\n\n    for i in range(N - 1):\n        new_sum = apple_sum - apples[i]\n        new_diff = abs(new_sum - (L + (N - 1 - i) * (N - 1 - i) // 2))\n        if new_diff < min_diff:\n            min_diff = new_diff\n\n    return min_diff\n\n\ndef"
    },
    {
        "number": 4229,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    fizzbuzz = [0] * (N + 1)\n    for i in range(1, N + 1):\n        if i % 3 == 0 and i % 5 == 0:\n            fizzbuzz[i] = \"FizzBuzz\"\n        elif i % 3 == 0:\n            fizzbuzz[i] = \"Fizz\"\n        elif i % 5 == 0:\n            fizzbuzz[i] = \"Buzz\"\n        else:\n            fizzbuzz[i] = i\n    sum_fizzbuzz = sum([i for i in fizzbuzz[1:N+1] if isinstance(i, int)])\n    return str(sum_fizzbuzz)\n"
    },
    {
        "number": 4229,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    \n    fizzbuzz = [i for i in range(1, N+1)]\n    for i in range(len(fizzbuzz)):\n        if i % 3 == 0 and i % 5 == 0:\n            fizzbuzz[i] = 'FizzBuzz'\n        elif i % 3 == 0:\n            fizzbuzz[i] = 'Fizz'\n        elif i % 5 == 0:\n            fizzbuzz[i] = 'Buzz'\n    \n    return sum(int(x) for x in fizzbuzz if type(x) == int)"
    },
    {
        "number": 4229,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    fizz_buzz_sequence = []\n    for i in range(1, N+1):\n        if i % 3 == 0 and i % 5 == 0:\n            fizz_buzz_sequence.append(\"FizzBuzz\")\n        elif i % 3 == 0:\n            fizz_buzz_sequence.append(\"Fizz\")\n        elif i % 5 == 0:\n            fizz_buzz_sequence.append(\"Buzz\")\n        else:\n            fizz_buzz_sequence.append(i)\n    sum_of_numbers = sum(fizz_buzz_sequence)\n    return sum_of_numbers\n"
    },
    {
        "number": 4229,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    fizzbuzz = [str(i) for i in range(1, N+1)]\n    \n    for i in range(N):\n        if i % 3 == 0 and i % 5 == 0:\n            fizzbuzz[i] = \"FizzBuzz\"\n        elif i % 3 == 0:\n            fizzbuzz[i] = \"Fizz\"\n        elif i % 5 == 0:\n            fizzbuzz[i] = \"Buzz\"\n    \n    result = sum([int(i) for i in fizzbuzz])\n    \n    return str(result)"
    },
    {
        "number": 4229,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    fizzbuzz_sequence = []\n\n    for i in range(1, N + 1):\n        if i % 3 == 0 and i % 5 == 0:\n            fizzbuzz_sequence.append(\"FizzBuzz\")\n        elif i % 3 == 0:\n            fizzbuzz_sequence.append(\"Fizz\")\n        elif i % 5 == 0:\n            fizzbuzz_sequence.append(\"Buzz\")\n        else:\n            fizzbuzz_sequence.append(i)\n\n    return sum(fizzbuzz_sequence)\n\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4229,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n\n    sequence = [0] * (N + 1)\n\n    for i in range(1, N + 1):\n        if i % 3 == 0 and i % 5 == 0:\n            sequence[i] = 'FizzBuzz'\n        elif i % 3 == 0:\n            sequence[i] = 'Fizz'\n        elif i % 5 == 0:\n            sequence[i] = 'Buzz'\n        else:\n            sequence[i] = i\n\n    sum_of_numbers = sum(int(num) for num in sequence if isinstance(num, int))\n\n    return str(sum_of_numbers)\n"
    },
    {
        "number": 4229,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    fizzbuzz = [\"Fizz\", \"Buzz\"]\n    total = 0\n\n    for i in range(1, N + 1):\n        if i % 3 == 0 and i % 5 == 0:\n            total += i\n        elif i % 3 == 0:\n            total += i\n        elif i % 5 == 0:\n            total += i\n        else:\n            continue\n\n        if i % 3 == 0 and i % 5 == 0:\n            fizzbuzz.append(str(i))\n        elif i % 3 == 0:\n            fizzbuzz.append(fizzbuzz[0])\n        elif i % 5 == 0:\n            fizzbuzz.append(fizzbuzz[1])\n        else:\n            fizzbuzz.append(str(i))\n\n    return str(total)\n\n\ndef"
    },
    {
        "number": 4229,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    fizzbuzz = [0] * (N + 1)\n    \n    for i in range(1, N + 1):\n        if i % 3 == 0 and i % 5 == 0:\n            fizzbuzz[i] = 'FizzBuzz'\n        elif i % 3 == 0:\n            fizzbuzz[i] = 'Fizz'\n        elif i % 5 == 0:\n            fizzbuzz[i] = 'Buzz'\n        else:\n            fizzbuzz[i] = i\n    \n    return sum(fizzbuzz)"
    },
    {
        "number": 4229,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.splitlines()[0])\n\n    fizzbuzz = []\n    for i in range(1, N + 1):\n        if i % 3 == 0 and i % 5 == 0:\n            fizzbuzz.append(\"FizzBuzz\")\n        elif i % 3 == 0:\n            fizzbuzz.append(\"Fizz\")\n        elif i % 5 == 0:\n            fizzbuzz.append(\"Buzz\")\n        else:\n            fizzbuzz.append(str(i))\n\n    total = sum(int(i) for i in fizzbuzz)\n    return str(total)\n"
    },
    {
        "number": 4229,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    def fizzbuzz(i):\n        if i % 3 == 0 and i % 5 == 0:\n            return \"FizzBuzz\"\n        elif i % 3 == 0:\n            return \"Fizz\"\n        elif i % 5 == 0:\n            return \"Buzz\"\n        else:\n            return str(i)\n\n    fizzbuzz_sequence = [fizzbuzz(i) for i in range(1, N + 1)]\n    sum_of_numbers = sum(map(int, filter(str.isdigit, fizzbuzz_sequence)))\n\n    return str(sum_of_numbers)\n\n\ndef"
    },
    {
        "number": 4230,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, N = map(int, stdin.split()[:2])\n    p = list(map(int, stdin.split()[2:]))\n    \n    min_diff = float('inf')\n    min_num = None\n    \n    for num in range(1, 101):\n        if num not in p:\n            diff = abs(num - X)\n            if diff < min_diff:\n                min_diff = diff\n                min_num = num\n            elif diff == min_diff and num < min_num:\n                min_num = num\n                \n    return str(min_num)"
    },
    {
        "number": 4230,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    X, N = map(int, stdin.split())\n    p_list = list(map(int, stdin.split()[1:]))\n    max_val = max(p_list)\n    min_val = min(p_list)\n    if X < min_val:\n        return min_val\n    elif X > max_val:\n        return max_val\n    else:\n        nearest_diff = float('inf')\n        nearest_val = float('inf')\n        for val in range(min_val, max_val + 1):\n            if val not in p_list:\n                diff = abs(X - val)\n                if diff < nearest_diff:\n                    nearest_diff = diff\n                    nearest_val = val\n        return nearest_val\n"
    },
    {
        "number": 4230,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_values = stdin.split()\n    X = int(input_values[0])\n    N = int(input_values[1])\n    p_list = [int(x) for x in input_values[2:]]\n    p_set = set(p_list)\n    remaining_integers = sorted(list(set(range(1, 101)) - p_set))\n    min_diff = abs(remaining_integers[0] - X)\n    nearest_integer = remaining_integers[0]\n\n    for num in remaining_integers:\n        diff = abs(num - X)\n        if diff < min_diff:\n            min_diff = diff\n            nearest_integer = num\n        elif diff == min_diff:\n            nearest_integer = min(nearest_integer, num)\n\n    return str(nearest_integer)\n"
    },
    {
        "number": 4230,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    X, N = map(int, stdin.split()[:2])\n    p = list(map(int, stdin.split()[2:]))\n    p.sort()\n    \n    # Find the closest value\n    closest = float('inf')\n    for i in range(p[-1] + 1):\n        if i not in p:\n            diff = abs(i - X)\n            if diff < closest:\n                closest = diff\n                ans = i\n    \n    return str(ans)"
    },
    {
        "number": 4230,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X, N = map(int, stdin.split()[:2])\n    p_list = list(map(int, stdin.split()[2:]))\n\n    p_set = set(p_list)\n    max_val = max(p_set)\n    min_val = min(p_set)\n\n    if X >= max_val:\n        return min_val - 1\n    elif X <= min_val:\n        return max_val + 1\n\n    nearest_diff = float('inf')\n    nearest_val = None\n\n    for i in range(1, 100):\n        if i not in p_set:\n            diff = abs(X - i)\n            if diff < nearest_diff:\n                nearest_diff = diff\n                nearest_val = i\n            elif diff == nearest_diff and i < nearest_val:\n                nearest_val = i\n\n    return nearest_val\n"
    },
    {
        "number": 4230,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    X, N = map(int, stdin.split()[:2])\n    p = list(map(int, stdin.split()[2:]))\n\n    min_diff = float('inf')\n    result = None\n\n    for i in range(1, 101):\n        if i not in p:\n            diff = abs(X - i)\n            if diff < min_diff:\n                min_diff = diff\n                result = i\n\n    return str(result)"
    },
    {
        "number": 4230,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X, N = map(int, stdin.split()[:2])\n    p_i = list(map(int, stdin.split()[2:]))\n    p_i.sort()\n\n    left, right = -1, 101\n    while left <= right:\n        mid = (left + right) // 2\n        if mid not in p_i and abs(mid - X) < abs(X - p_i[-1]):\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return str(left - 1)\n"
    },
    {
        "number": 4230,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.split()[:2])\n    p = sorted(list(map(int, stdin.split()[2:])))\n    left = p[0]\n    right = p[-1]\n\n    while left <= right:\n        mid = (left + right) // 2\n        if x - mid < right - x:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    return left\n"
    },
    {
        "number": 4230,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    X, N = map(int, stdin.split()[:2])\n    p_list = list(map(int, stdin.split()[2:]))\n    min_diff = float('inf')\n    ans = None\n    for i in range(1, 101):\n        if i not in p_list:\n            diff = abs(X - i)\n            if diff < min_diff:\n                min_diff = diff\n                ans = i\n            elif diff == min_diff:\n                ans = min(ans, i)\n    return str(ans)\n"
    },
    {
        "number": 4230,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X, N = map(int, stdin.split()[:2])\n    p_list = list(map(int, stdin.split()[2:]))\n    p_set = set(p_list)\n    max_value = 100\n\n    def is_valid(num):\n        return num not in p_set and num <= max_value\n\n    candidates = [x for x in range(1, max_value + 1) if is_valid(x)]\n    nearest_candidate = min(candidates, key=lambda x: abs(x - X))\n\n    return str(nearest_candidate)\n"
    },
    {
        "number": 4231,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W, h, w = map(int, stdin.split())\n    return (H * W - h * W - w * H) // (H - h) * (W - w)\n\nH, W, h, w = map(int, input().split())\nprint(solution(input())) "
    },
    {
        "number": 4231,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    H, W, h, w = map(int, input().split())\n    return (H*W - h*W - h*W) // (H - h)\n"
    },
    {
        "number": 4231,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    H, W, h, w = map(int, stdin.split())\n    return (H * W - h * W - w * H) // (H + W - h - w)\n\n\ndef"
    },
    {
        "number": 4231,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    H, W, h, w = map(int, stdin.split())\n    return str(H*W - h*W - h*w)\n"
    },
    {
        "number": 4231,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    H, W, h, w = map(int, stdin.split())\n    \n    # Calculate the number of white cells that will remain\n    remaining_white_cells = (H * W) - ((h * H) + (w * W)) + (h * w)\n    \n    return str(remaining_white_cells)\n"
    },
    {
        "number": 4231,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    H, W, h, w = [int(x) for x in input().split()]\n    if H < 1 or W < 1 or h < 1 or w < 1 or H > 20 or W > 20 or h > H or w > W:\n        return \"Invalid input. Please follow the constraints.\"\n\n    # Compute the number of white cells that will remain\n    num_white_cells = (H - h) * (W - w)\n\n    return str(num_white_cells) "
    },
    {
        "number": 4231,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    H, W, h, w = map(int, input().split())\n    return (H-h) * (W-w)\n\nprint(solution(input())) "
    },
    {
        "number": 4231,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    H, W, h, w = map(int, input().split())\n    return (H * W) - (h * W + w * H)\n"
    },
    {
        "number": 4231,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    H, W, h, w = map(int, stdin.split())\n    return (H*W - h*W - w*H) // (H - h)\n\ndef"
    },
    {
        "number": 4231,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    hw = list(map(int, stdin.split()))\n    H, W = hw[0], hw[1]\n    h, w = hw[2], hw[3]\n\n    # Calculate the number of white cells that will remain\n    white_cells = (H - h) * (W - w)\n\n    # Output the result\n    return str(white_cells)\n"
    },
    {
        "number": 4232,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[1:3])\n    sequence = list(map(int, stdin.split()[3:]))\n\n    count = 0\n    x = 0\n    for num in sequence:\n        if num <= x:\n            count += 1\n        else:\n            x = num\n            count = 1\n\n        if count == k:\n            return str(x)\n\n    return \"-1\"\n\n\nn = 7\nk = 4\nsequence = [3, 7, 5, 1, 10, 3, 20]\n\ninput_str = \" \".join(map(str, [n, k] + sequence))\nprint(solution(input_str))"
    },
    {
        "number": 4232,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def binary_search(arr, left, right, target):\n        while left <= right:\n            mid = (left + right) // 2\n            count = 0\n            for num in arr:\n                if num <= arr[mid]:\n                    count += 1\n            if count == target:\n                return arr[mid]\n            elif count < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1\n\n    n, k = map(int, stdin.split()[:2])\n    seq = list(map(int, stdin.split()[2:]))\n\n    if k >= n:\n        return str(binary_search(seq, 1, 10**9, k))\n    else:\n        return str(binary_search(seq, 1, 10**9, k)) if binary_search(seq, 1, 10**9, k) != -1 else str(-1)\n"
    },
    {
        "number": 4232,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    numbers = list(map(int, stdin.split()[2:]))\n    \n    if k == 0:\n        return str(1)\n    elif k > len(numbers):\n        return \"-1\"\n    \n    numbers.sort()\n    \n    for i in range(1, 10**9+1):\n        count = 0\n        for num in numbers:\n            if num <= i:\n                count += 1\n                if count == k:\n                    return str(i)\n            else:\n                break\n    \n    return \"-1\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    n, k = map(int, input_list[0].split())\n    sequence = list(map(int, input_list[1].split()))\n\n    count = 0\n    x = 1\n    while count < k:\n        if count == 0 and sequence[0] <= x:\n            count += 1\n        elif sequence[count] <= x:\n            count += 1\n        else:\n            x += 1\n\n    if count == k:\n        return str(x - 1)\n    else:\n        return \"-1\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    sequence = list(map(int, stdin.split()[2:]))\n\n    counter = 0\n    for i in range(n):\n        if sequence[i] <= k:\n            counter += 1\n\n    if counter == k:\n        return k\n    else:\n        return -1"
    },
    {
        "number": 4232,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    sequence = list(map(int, stdin.split()[2:]))\n\n    count = 0\n    for i in range(len(sequence)):\n        if sequence[i] <= n:\n            count += 1\n            if count == k:\n                return n\n    return -1\n"
    },
    {
        "number": 4232,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    sequence = list(map(int, input().split()))\n\n    count = 0\n    for num in sequence:\n        if num <= 6:\n            count += 1\n\n    if count == k:\n        return 6\n    else:\n        return -1\n\n\ninput_str = \"\"\"7 4\n3 7 5 1 10 3 20\n7 2\n3 7 5 1 10 3 20\"\"\"\n\noutput_str = \"\"\"6\n-1\"\"\"\n\nprint(solution(input_str)) "
    },
    {
        "number": 4232,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    sequence = list(map(int, stdin.split()[2:]))\n    \n    count = 0\n    for num in sequence:\n        if num <= k:\n            count += 1\n        if count == k:\n            return k\n    \n    return -1"
    },
    {
        "number": 4232,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.splitlines()\n    n, k = map(int, input_data[0].split())\n    sequence = list(map(int, input_data[1].split()))\n\n    def count_less_than_or_equal(x: int) -> int:\n        count = 0\n        for num in sequence:\n            if num <= x:\n                count += 1\n        return count\n\n    x = 1\n    while count_less_than_or_equal(x) < k:\n        x += 1\n\n    if count_less_than_or_equal(x) == k:\n        return str(x)\n    else:\n        return \"-1\""
    },
    {
        "number": 4232,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    sequence = list(map(int, input().split()))\n\n    count = 0\n    x = 1\n\n    while count < k:\n        if any(num <= x for num in sequence):\n            count += 1\n        x += 1\n\n    if count == k:\n        return str(x - 1)\n    else:\n        return \"-1\"\n\n\ninput_stdin = \"\"\"7 4\n3 7 5 1 10 3 20\"\"\"\n\nprint(solution(input_stdin)) "
    },
    {
        "number": 4233,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0].split())\n    grid = [list(line) for line in stdin.split('\\n')[1:]]\n\n    def is_valid(x, y, size):\n        if x < 1 or x > n or y < 1 or y > m:\n            return False\n        for i in range(x - size, x + size + 1):\n            for j in range(y - size, y + size + 1):\n                if i >= 1 and i <= n and j >= 1 and j <= m:\n                    if grid[i - 1][j - 1] == '*':\n                        return False\n        return True\n\n    def place_star(x, y, size):\n        if not is_valid(x, y, size):\n            return False\n        grid[x - 1][y - 1] = '*'\n        for i in range(x - size, x + size + 1):\n            for j in range(y - size, y + size + 1):\n                if i >= 1 and i <= n and j >= 1 and j <= m:\n                    grid[i - 1][j - 1] = '*'\n        return True\n\n    stars = 0\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if grid[i - 1][j - 1] == '*':\n                stars += 1\n                size = 1\n                while place_star(i, j, size):\n                    size += 1\n\n    if stars > n * m:\n        return \"-1\"\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if grid[i - 1][j - 1] == '*':\n                print(i, j, 1)\n    return str(stars) + '\\n' + '\\n'.join(str(line) for line in grid) "
    },
    {
        "number": 4233,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    grid = [input() for _ in range(n)]\n    \n    def is_valid(x, y, size):\n        if x < 1 or x > n or y < 1 or y > m:\n            return False\n        for i in range(x-size, x+size+1):\n            for j in range(y-size, y+size+1):\n                if 1 <= i <= n and 1 <= j <= m and grid[i-1][j-1] == '*':\n                    return False\n        return True\n    \n    def count_stars():\n        count = 0\n        for i in range(1, n+1):\n            for j in range(1, m+1):\n                if grid[i-1][j-1] == '*':\n                    count += 1\n        return count\n    \n    def place_stars():\n        stars = []\n        for i in range(1, n+1):\n            for j in range(1, m+1):\n                if grid[i-1][j-1] == '*':\n                    size = 1\n                    while is_valid(i, j, size):\n                        stars.append((i, j, size))\n                        size += 1\n        return stars\n    \n    stars = place_stars()\n    if len(stars) > n*m:\n        return \"-1\"\n    else:\n        return str(len(stars)) + \"\\n\" + \"\\n\".join([\" \".join(map(str, star)) for star in stars])\n\ninput_string = \"\"\"6 8\n....*...\n...**...\n..*****.\n...**...\n....*...\n........\"\"\"\n\nprint(solution(input_string)) "
    },
    {
        "number": 4233,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    grid = [list(line.strip()) for line in stdin.split('\\n')[1:] if line.strip()]\n    \n    def is_valid(x, y, size):\n        for i in range(size):\n            for j in range(size):\n                if x + i < 1 or x + i > n or y + j < 1 or y + j > m:\n                    return False\n                if grid[x + i - 1][y + j - 1] != '*':\n                    return False\n        return True\n    \n    stars = []\n    for x in range(1, n + 1):\n        for y in range(1, m + 1):\n            if grid[x - 1][y - 1] == '*':\n                for size in range(1, min(x, m - y + 1) + 1):\n                    if is_valid(x, y, size):\n                        stars.append((x, y, size))\n                        break\n                    \n    if not stars:\n        return \"-1\"\n    \n    stars.sort(key=lambda x: x[0] * m + x[1])\n    result = len(stars)\n    output = '\\n'.join([' '.join(map(str, star)) for star in stars])\n    return str(result) + '\\n' + output"
    },
    {
        "number": 4233,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0].split(','))\n    grid = []\n    for i in range(1, n + 1):\n        grid.append(stdin.split()[i].split())\n\n    def is_valid(x, y, size):\n        for dx in range(size):\n            for dy in range(size):\n                if not (0 <= x + dx < n and 0 <= y + dy < m) or grid[x + dx][y + dy] != '.':\n                    return False\n        return True\n\n    def dfs(x, y, size, stars):\n        if len(stars) >= n * m:\n            return True\n        if not (0 <= x < n and 0 <= y < m) or grid[x][y] == '*' or not is_valid(x, y, size):\n            return False\n\n        if dfs(x + 1, y, size, stars) or dfs(x - 1, y, size, stars) or dfs(x, y + 1, size, stars) or dfs(x, y - 1, size, stars):\n            return True\n\n        if size > 1:\n            if dfs(x + 1, y + 1, size - 1, stars) or dfs(x - 1, y - 1, size - 1, stars) or dfs(x + 1, y - 1, size - 1, stars) or dfs(x - 1, y + 1, size - 1, stars):\n                stars.append([x, y, size])\n                return True\n\n        return False\n\n    stars = []\n    if dfs(0, 0, 1, stars):\n        k = len(stars)\n        for x, y, size in stars:\n            print(x, y, size)\n        return k\n    else:\n        return -1\n"
    },
    {
        "number": 4233,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0].split())\n    grid = [list(line) for line in stdin.split()[1:]]\n    result = [-1]\n    \n    def is_valid(x, y, s):\n        for i in range(x-s, x+s+1):\n            for j in range(y-s, y+s+1):\n                if 0 < i <= n and 0 < j <= m and grid[i-1][j-1] != '*':\n                    return False\n        return True\n    \n    def dfs(x, y, s, count):\n        if count >= n*m:\n            result[0] = count\n            return True\n        \n        for i in range(x-s, x+s+1):\n            for j in range(y-s, y+s+1):\n                if 0 < i <= n and 0 < j <= m and grid[i-1][j-1] != '*':\n                    grid[i-1][j-1] = '*'\n                    if is_valid(i, j, s) and dfs(i, j, s, count+1):\n                        return True\n                    grid[i-1][j-1] = '.'\n        return False\n    \n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if grid[i-1][j-1] == '*':\n                if not dfs(i, j, 1, 1):\n                    return result\n    \n    return result[0] if result[0] != -1 else result[0]\n"
    },
    {
        "number": 4233,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n = int(input_list[0].split()[0])\n    m = int(input_list[0].split()[1])\n    grid = [input_list[i].split()[0] for i in range(1, n+1)]\n    \n    def is_valid_star(x, y, size):\n        for i in range(x-size, x+size+1):\n            if i < 1 or i > n:\n                return False\n            for j in range(y-size, y+size+1):\n                if j < 1 or j > m or grid[i-1][j-1] != '*':\n                    return False\n        return True\n    \n    stars = 0\n    result = []\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if grid[i-1][j-1] == '*':\n                for size in range(1, min(i, j) + 1):\n                    if is_valid_star(i, j, size):\n                        stars += 1\n                        result.append([i, j, size])\n                        break\n                \n    if stars > n*m:\n        return \"-1\"\n    else:\n        return f\"{stars}\\n\" + \"\\n\".join([\" \".join(map(str, line)) for line in result])\n"
    },
    {
        "number": 4233,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.splitlines()\n    n, m = map(int, input_data[0].split())\n    grid = [[*input_data[i][j+1].strip() for j in range(m)] for i in range(1, n+1)]\n    stars = []\n\n    def is_valid(x, y, size):\n        if x - size < 0 or x + size >= n or y - size < 0 or y + size >= m:\n            return False\n        for i in range(x - size, x + size + 1):\n            for j in range(y - size, y + size + 1):\n                if grid[i][j] == '.':\n                    return False\n        return True\n\n    def draw_stars(x, y, size):\n        for i in range(x - size, x + size + 1):\n            for j in range(y - size, y + size + 1):\n                if (i, j) != (x, y):\n                    grid[i][j] = '*'\n\n    def find_stars(x, y, size, max_size):\n        if size > max_size:\n            return []\n        if is_valid(x, y, size):\n            draw_stars(x, y, size)\n            return [(x, y, size)]\n        result = find_stars(x, y - 1, size + 1, max_size)\n        if result:\n            return result\n        result = find_stars(x + 1, y, size + 1, max_size)\n        if result:\n            return result\n        result = find_stars(x, y + 1, size + 1, max_size)\n        if result:\n            return result\n        result = find_stars(x - 1, y, size + 1, max_size)\n        if result:\n            return result\n        return []\n\n    if n * m > 300:\n        return -1\n\n    max_size = min(n, m)\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                result = find_stars(i, j, 1, max_size)\n                if result:\n                    stars.extend(result)\n                else:\n                    return -1\n\n    return len(stars) if stars else -1, *[f\"{star[0]} {star[1]} {star[2]}\" for star in stars]\n"
    },
    {
        "number": 4233,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(x, y, size):\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nx, ny = x + dx, y + dy\n            if 1 <= nx <= n and 1 <= ny <= m:\n                if grid[nx - 1][ny - 1] == '*' and (nx, ny) not in used:\n                    used.add((nx, ny))\n                    if is_valid(nx, ny, size + 1):\n                        return True\n                    used.remove((nx, ny))\n        return size >= 1\n\n    n, m, grid = map(int, stdin.split()[:3])\n    stdin = stdin.split('\\n')[2:]\n    used = set()\n\n    stars = []\n    for i, row in enumerate(stdin, start=1):\n        for j, char in enumerate(row, start=1):\n            if char == '*':\n                x, y = i, j\n                size = is_valid(x, y, 1)\n                if size > 0:\n                    stars.append((x, y, size))\n                else:\n                    return -1\n\n    k = len(stars)\n    print(k)\n    for x, y, size in stars:\n        print(x, y, size)\n"
    },
    {
        "number": 4233,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n, m = map(int, input_list[0].split())\n    grid = [[0] * m for _ in range(n)]\n\n    def is_valid(x, y, size):\n        for i in range(size):\n            for j in range(size):\n                if x + i < 1 or x + i > n or y + j < 1 or y + j > m:\n                    return False\n                if grid[x + i - 1][y + j - 1] == 1:\n                    return False\n        return True\n\n    def count_stars():\n        count = 0\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                if grid[i - 1][j - 1] == 1:\n                    count += 1\n        return count\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if input_list[i - 1][j - 1] == '*':\n                grid[i - 1][j - 1] = 1\n\n    if count_stars() > n * m:\n        return \"-1\"\n\n    stars = []\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if grid[i - 1][j - 1] == 1:\n                for size in range(1, min(i, m, n - i + 1, j, n - j + 1) + 1):\n                    if is_valid(i, j, size):\n                        stars.append((i, j, size))\n                        for x in range(i - size + 1, i + size):\n                            for y in range(j - size + 1, j + size):\n                                grid[x - 1][y - 1] = 1\n                        break\n    if len(stars) > n * m:\n        return \"-1\"\n    else:\n        result = str(len(stars)) + '\\n'\n        for star in stars:\n            result += ' '.join(map(str, star)) + '\\n'\n        return result\n"
    },
    {
        "number": 4233,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin.split('\\n')\n    n, m = map(int, input_str[0].split())\n    grid = [list(line) for line in input_str[1:]]\n\n    def is_valid(x, y, s):\n        for dx, dy in [(0, 0), (0, s), (s, 0), (s, s)]:\n            if not (0 <= x + dx < n and 0 <= y + dy < m) or grid[x + dx][y + dy] != '.':\n                return False\n        return True\n\n    def dfs(x, y, s):\n        if not (0 <= x < n and 0 <= y < m) or grid[x][y] != '.' or not is_valid(x, y, s):\n            return False\n        grid[x][y] = '*'\n        for dx, dy in [(0, 0), (0, s), (s, 0), (s, s)]:\n            dfs(x + dx, y + dy, s)\n        return True\n\n    stars = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                stars += 1\n\n    k = n * m - stars\n    if k <= 0:\n        return \"-1\"\n\n    result = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                continue\n            s = 1\n            while dfs(i, j, s):\n                result.append([i, j, s])\n                if len(result) == k:\n                    break\n                s += 1\n            if len(result) == k:\n                break\n        if len(result) == k:\n            break\n\n    if len(result) < k:\n        return \"-1\"\n\n    for x, y, s in result:\n        for dx, dy in [(0, 0), (0, s), (s, 0), (s, s)]:\n            grid[x + dx][y + dy] = '*'\n\n    return f\"{k}\\n\" + \"\\n\".join(str(s) for row in grid for s in row) + \"\\n\""
    },
    {
        "number": 4234,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    \n    k = 0\n    result = s\n    \n    for i in range(n):\n        if i % 2 == 0:\n            if s[i] == s[i+1]:\n                k += 1\n                result = result[:i] + result[i+1:]\n        else:\n            if s[i-1] == s[i]:\n                k += 1\n                result = result[:i-1] + result[i+1:]\n                \n    return k, result"
    },
    {
        "number": 4234,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n    k = 0\n    result = \"\"\n    for i in range(n):\n        if i % 2 == 0:\n            if s[i] != s[i + 1]:\n                result += s[i]\n            else:\n                k += 1\n                result += s[i]\n        else:\n            result += s[i]\n    return k, result\n"
    },
    {
        "number": 4234,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    s = stdin.split(\"\\n\")[1]\n\n    if n == 0:\n        return \"0\\n\"\n\n    k = 0\n    min_k = n\n    good_string = \"\"\n\n    for i, c in enumerate(s):\n        if i % 2 == 0:\n            if c != good_string[-1]:\n                good_string += c\n            else:\n                k += 1\n                good_string += c\n        else:\n            good_string += c\n\n        if k >= min_k:\n            min_k = k + 1\n\n    if min_k > n:\n        return \"0\\n\"\n    else:\n        return f\"{min_k}\\n{good_string}\"\n"
    },
    {
        "number": 4234,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.strip().split('\\n')\n    n = int(input_list[0])\n    s = input_list[1]\n\n    k = 0\n    while len(s) % 2 != 0 or not all(s[i] != s[i + 1] for i in range(0, len(s) - 1, 2)):\n        s = s[:-1]\n        k += 1\n\n    return k, s\n"
    },
    {
        "number": 4234,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    k = 0\n    i = 0\n    while i < n-1:\n        if s[i] != s[i+1]:\n            i += 1\n        else:\n            k += 1\n            s = s[:i] + s[i+1:]\n            n -= 1\n    if k % 2 == 1:\n        k += 1\n        s = s[:i] + s[i+1:]\n        n -= 1\n    return k, s\n\nn = int(input())\ns = input()\nk, s = solution(f\"{n}\\n{s}\")\nprint(k)\nprint(s) "
    },
    {
        "number": 4234,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n = int(input_list[0])\n    s = input_list[1]\n\n    if n % 2 == 0:\n        return 0, s\n\n    k = 0\n    for i in range(1, len(s), 2):\n        if s[i] != s[i+1]:\n            k += 1\n        else:\n            return k, s[:i] + s[i+1:]\n\n    return k, s\n\n\ninput_string = '''4\ngood\n4\naabc\n3\naaa'''\n\nresult = solution(input_string)\nprint(result[0])\nprint(result[1]) "
    },
    {
        "number": 4234,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    s = stdin.split(\"\\n\")[1]\n    k = 0\n    result = s\n\n    if n % 2 == 1:\n        k += 1\n        result = result[:-1]\n\n    for i in range(n-2, -1, -2):\n        if s[i] == s[i+1]:\n            k += 1\n            result = result[:i] + result[i+1:]\n\n    return k, result\n\n\ndef"
    },
    {
        "number": 4234,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    s = stdin.split(\"\\n\")[1]\n\n    if n % 2 != 0:\n        return -1\n\n    idx = 0\n    k = 0\n    while idx < n - 1:\n        if s[idx] != s[idx + 1]:\n            idx += 1\n        else:\n            s = s[:idx + 1] + s[idx + 2:]\n            k += 1\n\n    return k, s\n\n\ndef"
    },
    {
        "number": 4234,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n\n    k = 0\n    for i in range(1, n, 2):\n        if s[i] == s[i - 1]:\n            k += 1\n            s = s[:i - 1] + s[i + 1:]\n            n -= 1\n            i -= 2\n\n    if k == 0:\n        return \"0\\n\" + s\n    else:\n        return f\"{k}\\n\" + s[:n]\n"
    },
    {
        "number": 4234,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    i = 0\n    k = 0\n    while i < len(s):\n        if i % 2 == 0 and s[i] != s[i+1]:\n            s = s[:i] + s[i+1:]\n            k += 1\n        else:\n            i += 1\n    print(k)\n    print(s)\n    \n"
    },
    {
        "number": 4235,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(graph, visited, u, v):\n        visited[u] = True\n        for vertex in graph[u]:\n            if not visited[vertex]:\n                if vertex == v:\n                    return True\n                if dfs(graph, visited, vertex, v):\n                    return True\n        return False\n\n    n, m = map(int, stdin.split()[:2])\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    graph = [[] for _ in range(n)]\n    for u, v in edges:\n        graph[u - 1].append(v - 1)\n        graph[v - 1].append(u - 1)\n\n    for u in range(n):\n        for v in range(u + 1, n):\n            visited = [False] * n\n            if dfs(graph, visited, u, v):\n                return \"NO\"\n\n    result = [0] * m\n    for i, (u, v) in enumerate(edges):\n        result[i] = 0\n\n    return \"YES\\n\" + \"\".join(map(str, result))\n"
    },
    {
        "number": 4235,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    n, m = map(int, input_list[0].split())\n    graph = {i: [] for i in range(1, n+1)}\n    for edge in input_list[1:]:\n        u, v = map(int, edge.split())\n        graph[u].append(v)\n        graph[v].append(u)\n    if not is_graph_bipartite(graph):\n        return \"NO\\n\"\n    else:\n        result = \"YES\\n\"\n        for edge in input_list[1:]:\n            u, v = map(int, edge.split())\n            if is_edge_directable(graph, u, v):\n                result += \"0\"\n            else:\n                result += \"1\"\n        return result + \"\\n\"\n\ndef"
    },
    {
        "number": 4235,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    n, m = map(int, input_list.pop(0).split())\n    edge_list = [tuple(map(int, input_list[i].split())) for i in range(m)]\n    adj_matrix = [[0] * (n + 1) for _ in range(n + 1)]\n\n    for u, v in edge_list:\n        adj_matrix[u][v] = 1\n        adj_matrix[v][u] = 1\n\n    def dfs(u: int, visited: set) -> bool:\n        visited.add(u)\n        for v in range(1, n + 1):\n            if adj_matrix[u][v] == 1 and v not in visited:\n                if dfs(v, visited):\n                    return True\n        return False\n\n    for i in range(1, n + 1):\n        if not dfs(i, set()):\n            return \"NO\"\n\n    return \"YES\"\n\n\nstdin = \"\"\"\n6 5\n1 5\n2 1\n1 4\n3 1\n6 1\n\"\"\"\n\nresult = solution(stdin)\nprint(result)\n"
    },
    {
        "number": 4235,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n, m = map(int, input_list[0].split())\n    edges = [(int(u), int(v)) for u, v in map(lambda x: x.split(), input_list[1:])]\n\n    adj_list = [[] for _ in range(n)]\n    for u, v in edges:\n        adj_list[u - 1].append(v - 1)\n        adj_list[v - 1].append(u - 1)\n\n    def dfs(v: int, visited: set[int], depth: int) -> bool:\n        visited.add(v)\n        for u in adj_list[v]:\n            if u not in visited and depth < 2:\n                if dfs(u, visited, depth + 1):\n                    return True\n        return False\n\n    if any(dfs(0, set(), 0) for _ in range(n)):\n        return \"NO\"\n\n    for u, v in edges:\n        if u > v:\n            u, v = v, u\n\n    return \"YES\\n\" + ''.join('1' if u < v else '0' for u, v in edges)\n\n\nstdin = \"\"\"6 5\n1 5\n2 1\n1 4\n3 1\n6 1\n\"\"\"\n\nprint(solution(stdin)) "
    },
    {
        "number": 4235,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, input().split())\n        graph[u - 1].append(v - 1)\n        graph[v - 1].append(u - 1)\n    \n    def dfs(u: int, visited: set) -> bool:\n        visited.add(u)\n        for v in graph[u]:\n            if v not in visited and dfs(v, visited):\n                return True\n        return False\n    \n    for i in range(n):\n        if dfs(i, set()):\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4235,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input\n    n, m = map(int, stdin.split()[:2])\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    \n    # Building the graph\n    graph = [[] for _ in range(n)]\n    for u, v in edges:\n        graph[u-1].append(v-1)\n        graph[v-1].append(u-1)\n    \n    # Finding the source and target nodes\n    source = 0\n    target = n-1\n    \n    # Breadth-first search for finding a path from source to target\n    queue = [(source, [source])]\n    while queue:\n        (node, path) = queue.pop(0)\n        for next_node in graph[node]:\n            if next_node not in path:\n                if next_node == target:\n                    return \"YES\\n\" + \"\".join(map(lambda x: str(1-x[0]), zip([0]*(m-len(path)) + [1]*len(path), path[1:] + [1] + [0]*(m-len(path)-1)))), \"\\n\")\n                else:\n                    queue.append((next_node, path + [next_node]))\n    \n    return \"NO\\n\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.splitlines()\n    n, m = map(int, input_data.pop(0).split())\n    adj_list = [[] for _ in range(n)]\n\n    for _ in range(m):\n        u, v = map(int, input_data.pop(0).split())\n        adj_list[u - 1].append(v - 1)\n        adj_list[v - 1].append(u - 1)\n\n    visited = [False] * n\n\n    def dfs(node, parent, edge_count):\n        visited[node] = True\n        for neighbor in adj_list[node]:\n            if neighbor != parent:\n                edge_count += 1\n                if edge_count >= 2:\n                    return False\n                if not visited[neighbor]:\n                    if not dfs(neighbor, node, edge_count):\n                        return False\n        return True\n\n    for i in range(n):\n        if not visited[i]:\n            if not dfs(i, -1, 0):\n                return \"NO\\n\"\n\n    result = \"\"\n    for i in range(m):\n        result += str(i & 1)\n\n    return \"YES\\n\" + result + \"\\n\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def find_node(node, visited, stack, nodes_dict):\n        visited[node] = True\n        stack.append(node)\n        for neighbor in nodes_dict[node]:\n            if not visited[neighbor]:\n                if find_node(neighbor, visited, stack, nodes_dict):\n                    return True\n                elif neighbor in stack:\n                    return True\n        stack.pop()\n        return False\n\n    n, m = map(int, stdin.split()[:2])\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    nodes_dict = {i + 1: [] for i in range(n)}\n    for u, v in edges:\n        nodes_dict[u].append(v)\n        nodes_dict[v].append(u)\n\n    visited = [False] * (n + 1)\n    for node in nodes_dict.keys():\n        if not visited[node]:\n            if find_node(node, visited, [], nodes_dict):\n                return \"NO\\n\"\n\n    directed_edges = [0] * m\n    for u, v in edges:\n        if visited[v]:\n            directed_edges[u - 1] = 1\n\n    return \"YES\\n\" + \"\".join(map(str, directed_edges))\n\n\ninput_str = \"\"\"6 5\n1 5\n2 1\n1 4\n3 1\n6 1\"\"\"\n\nresult = solution(input_str)\nprint(result) "
    },
    {
        "number": 4235,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    adj_list = [[] for _ in range(n)]\n    visited = [False] * n\n    for _ in range(m):\n        u, v = map(int, stdin.split()[2:4])\n        adj_list[u-1].append(v-1)\n        adj_list[v-1].append(u-1)\n    \n    def dfs(node, parent):\n        visited[node] = True\n        for neighbor in adj_list[node]:\n            if neighbor != parent:\n                if not visited[neighbor]:\n                    dfs(neighbor, node)\n                    return True\n                elif neighbor != node:\n                    return False\n        return True\n    \n    def bfs(node, parent, depth):\n        visited[node] = True\n        for neighbor in adj_list[node]:\n            if neighbor != parent:\n                if not visited[neighbor]:\n                    bfs(neighbor, node, depth+1)\n                    return True\n                elif neighbor != node and depth+1 <= 1:\n                    return False\n        return True\n    \n    for i in range(n):\n        if not visited[i]:\n            if dfs(i, -1):\n                return \"NO\"\n            elif bfs(i, -1, 0):\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(u: int, v: int, adj: list, visited: set, stack: list, result: list) -> bool:\n        visited.add(u)\n        stack.append(u)\n        if u == v:\n            result.append(stack.pop())\n            return True\n        for neighbor in adj[u]:\n            if neighbor not in visited:\n                if dfs(neighbor, v, adj, visited, stack, result):\n                    result.append(u)\n                    return True\n        stack.pop()\n        return False\n\n    n, m = map(int, stdin.split()[:2])\n    adj = [[] for _ in range(n + 1)]\n    for u, v in map(int, stdin.split()[2:]):\n        adj[u].append(v)\n        adj[v].append(u)\n\n    visited = set()\n    result = []\n    stack = []\n    for u in range(1, n + 1):\n        for v in range(1, n + 1):\n            if u != v and not dfs(u, v, adj, visited, stack, result):\n                return \"NO\\n\"\n    return \"YES\\n\" + \"\".join(map(str, result))\n"
    },
    {
        "number": 4236,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def input_int():\n        return int(stdin.readline().strip())\n\n    def input_array():\n        return list(map(int, stdin.readline().strip().split()))\n\n    n, m = input_array()\n    segments = [input_array() for _ in range(n)]\n    points = set(range(1, m + 1))\n\n    for segment in segments:\n        points.difference_update(range(segment[0], segment[1] + 1))\n\n    k = len(points)\n    result = sorted(points) if points else []\n\n    return f\"{k}\\n{' '.join(map(str, result))}\\n\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def segments_intersect(l1: int, r1: int, l2: int, r2: int) -> bool:\n        return (l1 <= r2 and l2 <= r1) or (l1 <= l2 and r1 >= r2)\n\n    def find_points_without_segments(n: int, segments: list, m: int) -> list:\n        points_without_segments = []\n        for i in range(1, m + 1):\n            belongs_to_segment = False\n            for j in range(n):\n                if segments_intersect(segments[j][0], segments[j][1], i, i):\n                    belongs_to_segment = True\n                    break\n            if not belongs_to_segment:\n                points_without_segments.append(i)\n        return points_without_segments\n\n    n, m = map(int, stdin.split()[:2])\n    segments = [list(map(int, line.split())) for line in stdin.split('\\n')[1:n + 1]]\n    points_without_segments = find_points_without_segments(n, segments, m)\n\n    k = len(points_without_segments)\n    output = str(k) + '\\n' + ' '.join(map(str, points_without_segments)) + '\\n'\n    return output\n"
    },
    {
        "number": 4236,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    n, m = map(int, input_list[0].split())\n    segments = []\n\n    for i in range(1, n + 1):\n        l, r = map(int, input_list[i].split())\n        segments.append((l, r))\n\n    points = set(range(1, m + 1))\n\n    for segment in segments:\n        points.difference_update(range(segment[0], segment[1] + 1))\n\n    if not points:\n        return \"0\\n\"\n\n    k = len(points)\n    return f\"{k}\\n\" + \" \".join(map(str, points)) + \"\\n\""
    },
    {
        "number": 4236,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    n, m = map(int, input_data[0].split())\n    segments = []\n    \n    for i in range(1, n + 1):\n        l, r = map(int, input_data[i].split())\n        segments.append((l, r))\n\n    points = set(range(1, m + 1))\n    for l, r in segments:\n        points.difference_update(range(l, r + 1))\n\n    k = len(points)\n    if k == 0:\n        return \"0\\n\"\n    else:\n        return f\"{k}\\n\" + ' '.join(map(str, points)) + '\\n'\n\n\ninput_data = \"\"\"3 5\n2 2\n1 2\n5 5\"\"\"\n\nprint(solution(input_data)) "
    },
    {
        "number": 4236,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    segments = [list(map(int, input().split())) for _ in range(n)]\n    points = set(range(1, m+1))\n    for segment in segments:\n        points.difference_update(range(segment[0], segment[1]+1))\n    k = len(points)\n    if k == 0:\n        return \"0\\n\"\n    else:\n        return f\"{k}\\n{' '.join(map(str, sorted(points)))}\"\n\n\nn_test_cases = int(input())\nfor _ in range(n_test_cases):\n    stdin = input()\n    result = solution(stdin)\n    print(result) "
    },
    {
        "number": 4236,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def read_int(stdin: str) -> Tuple[int, str]:\n        buffer = \"\"\n        while True:\n            if not stdin:\n                return int(buffer), stdin\n            if stdin[0].isdigit():\n                buffer += stdin[0]\n                stdin = stdin[1:]\n            else:\n                return int(buffer), stdin\n\n    n, stdin = read_int(stdin)\n    m, stdin = read_int(stdin)\n\n    segments = []\n    for i in range(n):\n        l, stdin = read_int(stdin)\n        r, stdin = read_int(stdin)\n        segments.append((l, r))\n\n    points = set(range(1, m + 1))\n    for l, r in segments:\n        points -= set(range(l, r + 1))\n\n    k = len(points)\n    if k == 0:\n        return \"0\"\n\n    result = sorted(list(points))\n    return f\"{k}\\n{' '.join(map(str, result))}\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def input() -> int:\n        return int(stdin.readline().strip())\n\n    def read_segments() -> list:\n        n, m = input(), input()\n        segments = []\n        for _ in range(n):\n            l, r = input(), input()\n            segments.append((l, r))\n        return segments\n\n    def points_without_segments(segments: list, m: int) -> tuple:\n        points = set(range(1, m + 1))\n        for l, r in segments:\n            points -= set(range(l, r + 1))\n        return len(points), sorted(points)\n\n    n, m = input(), input()\n    stdin.readline()\n    segments = read_segments()\n    result = points_without_segments(segments, m)\n    return f\"{result[0]}\\n{' '.join(map(str, result[1]))}\" "
    },
    {
        "number": 4236,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def binary_search(a, x):\n        l, r = 0, len(a)\n        while l < r:\n            mid = (l + r) // 2\n            if a[mid] < x:\n                l = mid + 1\n            else:\n                r = mid\n        return l\n\n    def is_valid(a, x):\n        return binary_search(a, x) % 2 == 1\n\n    n, m = map(int, stdin.split()[:2])\n    segments = [tuple(map(int, stdin.split()[i:i + 2])) for i in range(1, 2 * n, 2)]\n\n    points = [i for i in range(1, m + 1) if is_valid(segments, i)]\n    k = len(points)\n\n    return f\"{k}\\n{' '.join(map(str, points))}\\n\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_point_inside(x: int, segments: list) -> bool:\n        for segment in segments:\n            if segment[0] <= x <= segment[1]:\n                return False\n        return True\n\n    def count_points_outside_segments(m: int) -> int:\n        count = 0\n        for x in range(1, m + 1):\n            if is_point_inside(x, segments):\n                count += 1\n        return count\n\n    def find_points_outside_segments(m: int) -> list:\n        points = []\n        for x in range(1, m + 1):\n            if is_point_inside(x, segments):\n                points.append(x)\n        return points\n\n    n, m = map(int, stdin.split()[:2])\n    segments = [list(map(int, stdin.split()[i:i+2])) for i in range(2, 2 * n + 1, 2)]\n\n    k = count_points_outside_segments(m)\n    points = find_points_outside_segments(m)\n\n    return f\"{k}\\n{' '.join(map(str, points))}\\n\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    n, m = map(int, input_list[0].split())\n    segments = [tuple(map(int, input_list[i].split())) for i in range(1, n+1)]\n    \n    # Find all points that belong to segments\n    points = set()\n    for l, r in segments:\n        for i in range(l, r+1):\n            points.add(i)\n    \n    # Find all remaining points\n    result = [i for i in range(1, m+1) if i not in points]\n    \n    # Print output\n    output = f\"{len(result)}\\n\"\n    if result:\n        output += \" \".join(map(str, result))\n    \n    return output\n"
    },
    {
        "number": 4237,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n\n    count = 0\n    for num in range(A, B + 1):\n        if num % C != 0 and num % D != 0:\n            count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4237,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    count = 0\n\n    for num in range(A, B + 1):\n        if num % C != 0 and num % D != 0:\n            count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4237,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    count = 0\n    for i in range(A, B + 1):\n        if i % C != 0 and i % D != 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4237,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    count = 0\n    for i in range(A, B + 1):\n        if i % C != 0 and i % D != 0:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4237,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    count = 0\n    for i in range(A, B + 1):\n        if i % C != 0 and i % D != 0:\n            count += 1\n    return str(count)\n\n\ninput_str = input().strip()\nprint(solution(input_str)) "
    },
    {
        "number": 4237,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    count = 0\n    for num in range(A, B + 1):\n        if num % C != 0 and num % D != 0:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4237,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n\n    count = 0\n    for num in range(A, B + 1):\n        if num % C != 0 and num % D != 0:\n            count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4237,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    count = 0\n    for i in range(A, B+1):\n        if i % C != 0 and i % D != 0:\n            count += 1\n    return str(count)\n\n\ninput_str = input()  # input string from Standard Input\nprint(solution(input_str))  # output the result"
    },
    {
        "number": 4237,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    count = 0\n    for i in range(A, B + 1):\n        if i % C != 0 and i % D != 0:\n            count += 1\n    return str(count)\n\n\nstdin = input(\"Enter A B C D separated by space: \")\nprint(solution(stdin)) "
    },
    {
        "number": 4237,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    count = 0\n    for num in range(A, B + 1):\n        if num % C != 0 and num % D != 0:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4238,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sum_of_digits = sum(int(digit) for digit in str(n))\n\n    if sum_of_digits % 9 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ninput_str = input(\"Enter the value of N: \")\nprint(solution(input_str)) "
    },
    {
        "number": 4238,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 0:\n        return \"Yes\"\n    elif N < 0:\n        N = -N\n        if N % 8 == 0:\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        total_sum = sum(int(digit) for digit in str(N))\n        if total_sum % 9 == 0:\n            return \"Yes\"\n        else:\n            return \"No\"\n\n\ndef"
    },
    {
        "number": 4238,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    if sum_of_digits % 9 == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4238,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    if sum_of_digits % 9 == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4238,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # Convert the number to a string to be able to iterate through each digit\n    digits = str(n)\n    # Initialize a variable to keep track of the sum of the digits\n    digit_sum = 0\n    # Iterate through each digit and add it to the digit_sum\n    for digit in digits:\n        digit_sum += int(digit)\n    # Check if the digit_sum is a multiple of 9\n    if digit_sum % 9 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n\ndef"
    },
    {
        "number": 4238,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    sum_digits = sum(int(digit) for digit in str(N))\n    if sum_digits % 9 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ninput_string = input(\"Enter the integer N: \")\nresult = solution(input_string)\nprint(result) "
    },
    {
        "number": 4238,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    sum_of_digits = 0\n\n    while N > 0:\n        sum_of_digits += N % 10\n        N //= 10\n\n    return \"Yes\" if sum_of_digits % 9 == 0 else \"No\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sum_of_digits = sum(int(digit) for digit in str(n))\n    if sum_of_digits % 9 == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4238,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    if sum_of_digits % 9 == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4238,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    if sum_of_digits % 9 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ninput_str = input()\nresult = solution(input_str)\nprint(result) "
    },
    {
        "number": 4239,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    \n    # Calculate the number of times we can withdraw 6 or 9 yen\n    six_count = 0\n    while N >= 6:\n        N -= 6\n        six_count += 1\n        \n    nine_count = 0\n    while N >= 9:\n        N -= 9\n        nine_count += 1\n    \n    # Calculate the number of times we can withdraw 1 yen\n    one_count = N\n    \n    # Calculate the total number of operations\n    total_count = one_count + six_count + nine_count\n    \n    return str(total_count)"
    },
    {
        "number": 4239,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    x = 0\n    count = 1\n\n    while N > 0:\n        if N >= 9:\n            N -= 9\n            x += 1\n            count = 1\n        elif N >= 6:\n            N -= 6\n            x += 1\n            count = 1\n        elif N >= 1:\n            N -= 1\n            count += 1\n\n    return str(x)\n"
    },
    {
        "number": 4239,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    operations = 0\n\n    # Check if N is a multiple of 1 yen\n    if N % 1 == 0:\n        operations += 1\n        N -= 1\n\n    # Check if N is a multiple of 9 yen\n    if N % 9 == 0:\n        operations += 1\n        N -= 9\n\n    # Check if N is a multiple of 6^i yen\n    i = 2\n    while N >= 6**i:\n        operations += 1\n        N -= 6**i\n        i += 1\n\n    return str(operations)\n\n\ndef"
    },
    {
        "number": 4239,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    total_operations = 0\n    operation_count = 1\n\n    while N > 0:\n        if N >= 9:\n            total_operations += operation_count\n            N -= 9 * operation_count\n        elif N >= 6:\n            total_operations += operation_count\n            N -= 6 * operation_count\n        operation_count += 1\n\n    return total_operations\n"
    },
    {
        "number": 4239,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    x = 0\n    for i in range(1, N+1):\n        if i == 1 or i == 9 or i == 36 or i == 81:\n            x += 1\n        else:\n            while i > 1:\n                i -= 1\n                if i == 1 or i == 9 or i == 36 or i == 81:\n                    x += 1\n                    break\n    return str(x)\n\ndef"
    },
    {
        "number": 4239,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    operations = 0\n    remaining = N\n\n    while remaining > 0:\n        if remaining % 9 == 0:\n            remaining -= 9\n            operations += 1\n        elif remaining % 6 == 0:\n            remaining -= 6\n            operations += 1\n        else:\n            break\n\n    if remaining == 0:\n        return str(operations)\n    else:\n        return \"impossible\""
    },
    {
        "number": 4239,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    result = 0\n\n    def withdraw(remain, yen, power):\n        nonlocal result\n        if remain < 0:\n            return\n        if remain == 0:\n            result += 1\n            return\n        withdraw(remain - yen, yen, power + 1)\n        withdraw(remain, yen, power + 1)\n\n    withdraw(N, 1, 0)\n    withdraw(N, 9, 0)\n    for i in range(2, int(N ** 0.5) + 1):\n        withdraw(N, i * i, 0)\n\n    return str(result)\n"
    },
    {
        "number": 4239,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    x = 0\n    i = 1\n    while N >= i:\n        if N >= i ** 2:\n            N -= i ** 2\n            x += 1\n        else:\n            i += 1\n    return str(x)"
    },
    {
        "number": 4239,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N <= 1:\n        return 1\n    # Check if the number can be divided by 6\n    if N % 6 == 0:\n        return N // 6\n    # Check if the number can be divided by 9\n    if N % 9 == 0:\n        return N // 9\n    # Calculate the number of 6-yen notes\n    num_6 = (N // 6) + 1 if N % 6 != 0 else (N // 6)\n    # Calculate the number of 9-yen notes\n    num_9 = (N // 9) + 1 if N % 9 != 0 else (N // 9)\n    return min(num_6, num_9)\n"
    },
    {
        "number": 4239,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    x = 0\n    i = 1\n    while i <= N:\n        x += 1\n        i += i * 6\n    return x"
    },
    {
        "number": 4240,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    if len(S) != len(T):\n        return \"No\"\n\n    rotations = 0\n    while S != T:\n        S = S[1:] + S[0]\n        rotations += 1\n\n    return \"Yes\" if rotations <= 2 else \"No\"\n\ndef"
    },
    {
        "number": 4240,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split('\\n')\n    for _ in range(len(S)):\n        S = S[-1] + S[:-1]\n        if S == T:\n            return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4240,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n\n    if len(S) != len(T):\n        return \"No\"\n\n    if S == T:\n        return \"Yes\"\n\n    for _ in range(len(S)):\n        S = S[-1] + S[:-1]\n        if S == T:\n            return \"Yes\"\n\n    return \"No\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split(\"\\n\")\n    S = S[1:] + S[:1]\n    if S == T:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S, T = map(str, stdin.split())\n    if len(S) != len(T):\n        return \"No\"\n\n    s_rotated = S[-1] + S[:-1]\n    if s_rotated == T:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4240,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split(\"\\n\")\n    if len(S) != len(T):\n        return \"No\"\n    if S == T:\n        return \"Yes\"\n    S = S + S\n    if S == T:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    \n    if S == T:\n        return \"Yes\"\n    \n    # Rotation\n    rotated_S = S[-1] + S[:-1]\n    if rotated_S == T:\n        return \"Yes\"\n    \n    rotated_S = rotated_S[-2:] + rotated_S[:-2]\n    if rotated_S == T:\n        return \"Yes\"\n    \n    # Continue rotating until S and T are equal\n    while rotated_S != T:\n        rotated_S = rotated_S[-2:] + rotated_S[:-2]\n    \n    return \"Yes\""
    },
    {
        "number": 4240,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    if S == T:\n        return \"Yes\"\n    S_rotated = S[-1] + S[:-1]\n    if S_rotated == T:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4240,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S, T = input().strip(), input().strip()\n    if S == T:\n        return \"Yes\"\n\n    S = S + S\n    if S == T:\n        return \"Yes\"\n\n    return \"No\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split('\\n')\n\n    # Check if the lengths of S and T are equal\n    if len(S) != len(T):\n        return \"No\"\n\n    # Check if S and T are the same after rotation\n    for _ in range(len(S)):\n        if S == T:\n            return \"Yes\"\n        S = S[-1] + S[:-1]\n\n    # If the loop completes, it means that S and T are not equal after rotation\n    return \"No\"\n"
    },
    {
        "number": 4241,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, T = map(str, stdin.split())\n    S_len, T_len = len(S), len(T)\n    if T_len > S_len:\n        return \"0\"\n    if S == T:\n        return \"0\"\n    for i in range(S_len - T_len + 1):\n        if S[i:i+T_len] == T:\n            return str(i + T_len - S_len)\n    return \"0\"\n"
    },
    {
        "number": 4241,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    S, T = input().split()\n    n, m = len(S), len(T)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if S[j - 1] == T[i - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + 1\n    return dp[m][n]\n\n\ndef"
    },
    {
        "number": 4241,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    n = len(S)\n    m = len(T)\n\n    for i in range(n - m + 1):\n        j = 0\n        while j < m and S[i + j] == T[j]:\n            j += 1\n        if j == m:\n            return m - 1\n    return m\n"
    },
    {
        "number": 4241,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    s = list(S)\n    t = list(T)\n    count = 0\n\n    for i in range(len(t)):\n        if s[i] != t[i]:\n            count += 1\n        if count > len(T) - len(t):\n            return len(T) - len(t)\n\n    return count\n"
    },
    {
        "number": 4241,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split(\"\\n\")\n\n    for i in range(len(S) - len(T) + 1):\n        if S[i:i + len(T)] == T:\n            return len(S) - len(T) - i\n\n    return -1\n"
    },
    {
        "number": 4241,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split(\"\\n\")\n    m, n = len(S), len(T)\n    dp = [[False] * (m + 1) for _ in range(n + 1)]\n\n    dp[0][0] = True\n    for i in range(1, n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if S[j - 1] == T[i - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i][j - 1]\n\n    min_changes = float('inf')\n    for i in range(m):\n        if dp[n][i + 1]:\n            min_changes = i + 1\n            break\n\n    return min_changes if min_changes != float('inf') else -1\n"
    },
    {
        "number": 4241,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n\n    # Initialize the count of characters to change\n    count = 0\n\n    # Iterate through the characters in S and T\n    for i in range(len(S)):\n        if i >= len(T) or S[i] != T[i]:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4241,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin[0].strip()\n    T = stdin[1].strip()\n\n    if len(T) == 0:\n        return 0\n\n    dp = [0] * (len(S) + 1)\n    for i in range(len(S) - len(T) + 1):\n        if S[i:i+len(T)] == T:\n            return len(S) - len(T)\n        if dp[i] > 0:\n            dp[i+1] = dp[i]\n        dp[i+1] += 1\n\n    return dp[len(S)]\n"
    },
    {
        "number": 4241,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split('\\n')\n    count = 0\n    for i in range(len(S)):\n        if S[i] != T[i % len(T)]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4241,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S = input()\n    T = input()\n\n    count = 0\n    for i in range(len(S) - len(T) + 1):\n        if S[i:i+len(T)] == T:\n            count += 1\n\n    return count"
    },
    {
        "number": 4242,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n\n    def is_divisible(num: int) -> bool:\n        return A % num == 0 and B % num == 0\n\n    divisible_numbers = sorted(filter(is_divisible, range(1, A + B + 1)))\n    return str(divisible_numbers[K - 1])"
    },
    {
        "number": 4242,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    kth_largest = -1\n    for i in range(1, min(A, B) + 1):\n        if A % i == 0 and B % i == 0:\n            kth_largest = i\n            if K == 1:\n                break\n            else:\n                K -= 1\n    return str(kth_largest)\n"
    },
    {
        "number": 4242,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n\n    def is_divisible(a: int, b: int, k: int) -> int:\n        divisor = 1\n        count = 0\n        while divisor <= a and divisor <= b:\n            if a % divisor == 0 and b % divisor == 0:\n                count += 1\n                if count == k:\n                    return divisor\n            divisor += 1\n        return -1\n\n    result = is_divisible(A, B, K)\n    return str(result)\n"
    },
    {
        "number": 4242,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    \n    # Find the common factors of A and B\n    common_factors = set()\n    for i in range(1, A + 1):\n        if A % i == 0 and B % i == 0:\n            common_factors.add(i)\n    \n    # Find the K-th largest common factor\n    common_factors = sorted(list(common_factors), reverse=True)\n    kth_largest = common_factors[K - 1]\n    \n    return str(kth_largest)\n"
    },
    {
        "number": 4242,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    \n    divisors = set()\n    for i in range(1, A + 1):\n        if A % i == 0 and B % i == 0:\n            divisors.add(i)\n    \n    divisors = list(divisors)\n    divisors.sort(reverse=True)\n    \n    return str(divisors[K - 1])\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4242,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    nums = []\n    for i in range(1, int(min(A, B))+1):\n        if A % i == 0 and B % i == 0:\n            nums.append(i)\n    return str(nums[K-1])"
    },
    {
        "number": 4242,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    common_factors = set(list(range(1, A+1))) & set(list(range(1, B+1)))\n    common_factors = list(filter(lambda x: A % x == 0 and B % x == 0, common_factors))\n    common_factors.sort(reverse=True)\n    result = common_factors[K-1]\n    return str(result)\n"
    },
    {
        "number": 4242,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    result = 1\n    count = 0\n    while count < K:\n        result += 1\n        if A % result == 0 and B % result == 0:\n            count += 1\n    return str(result - 1)\n\n\ninput_stdin = \"8 12 2\"\noutput_stdout = solution(input_stdin)\nprint(output_stdout) "
    },
    {
        "number": 4242,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    numbers = set()\n\n    for i in range(1, A + 1):\n        if A % i == 0 and B % i == 0:\n            numbers.add(i)\n\n    numbers = sorted(list(numbers), reverse=True)\n    return str(numbers[K - 1])\n\n\ndef"
    },
    {
        "number": 4242,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n\n    divisors = set()\n    for i in range(1, int(min(A, B)) + 1):\n        if A % i == 0 and B % i == 0:\n            divisors.add(i)\n\n    kth_largest = sorted(divisors, reverse=True)[K - 1]\n\n    return str(kth_largest)\n"
    },
    {
        "number": 4243,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n\n    # Initialize variables to store the number of coins of each value\n    five_yen = X // 5\n    X %= 5\n    ten_yen = X // 10\n    X %= 10\n    fifty_yen = X // 50\n    X %= 50\n    one_yen = X // 100\n    X %= 100\n    five_hundred_yen = X // 500\n    X %= 500\n\n    # Calculate the happiness points earned from each coin\n    five_yen_points = 5 * five_yen\n    ten_yen_points = 10 * ten_yen\n    fifty_yen_points = 5 * fifty_yen\n    one_yen_points = 1 * one_yen\n    five_hundred_yen_points = 10 * five_hundred_yen\n\n    # Sum up the happiness points earned from each coin\n    total_points = five_yen_points + ten_yen_points + fifty_yen_points + one_yen_points + five_hundred_yen_points\n\n    return str(total_points)"
    },
    {
        "number": 4243,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    five_yen = X // 5\n    remaining = X % 5\n    if remaining == 0:\n        return str(five_yen * 5)\n    elif remaining == 1 or remaining == 2 or remaining == 3:\n        return str(five_yen * 5 + (five_yen - 1) * 10)\n    elif remaining == 4:\n        return str(five_yen * 5 + (five_yen - 1) * 10 + 50)\n"
    },
    {
        "number": 4243,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    max_happiness = 0\n    \n    # Calculate the maximum happiness points\n    five_yen_coins = X // 5\n    hundred_yen_coins = (X - five_yen_coins * 5) // 100\n    five_hundred_yen_coins = (X - five_yen_coins * 5 - hundred_yen_coins * 100) // 500\n\n    max_happiness += hundred_yen_coins * 1000 + five_hundred_yen_coins * 5000 + five_yen_coins * 5\n\n    return str(max_happiness)"
    },
    {
        "number": 4243,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    if X < 0 or X > 10**9:\n        return \"Invalid input\"\n\n    happiness_points = 0\n    if X // 1000 > 0:\n        happiness_points += (X // 1000) * 1000 * 10\n        X -= (X // 1000) * 1000\n\n    if X // 100 > 0:\n        happiness_points += (X // 100) * 100 * 5\n        X -= (X // 100) * 100\n\n    if X // 10 > 0:\n        happiness_points += (X // 10) * 10 * 5\n        X -= (X // 10) * 10\n\n    if X // 5 > 0:\n        happiness_points += (X // 5) * 5 * 5\n        X -= (X // 5) * 5\n\n    happiness_points += X * 1 * 5\n\n    return happiness_points\n\n\nstdin = input(\"Enter the amount of yen: \")\nprint(solution(stdin)) "
    },
    {
        "number": 4243,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    happiness = 0\n\n    # First, we calculate the maximum number of 500-yen coins we can get\n    num_500 = X // 500\n    X -= num_500 * 500\n\n    # Next, we calculate the maximum number of 5-yen coins we can get\n    num_5 = X // 5\n    X -= num_5 * 5\n\n    # We add the happiness points we get from the coins we can get\n    happiness += num_500 * 1000 + num_5 * 5\n\n    return happiness\n"
    },
    {
        "number": 4243,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    \n    # Initialize the number of happiness points to earn and the number of coins of each denomination\n    happiness_points = 0\n    five_yen = 0\n    ten_yen = 0\n    fifty_yen = 0\n    one_yen = 0\n    \n    # Calculate the number of coins of each denomination\n    while X >= 1000:\n        X -= 1000\n        happiness_points += 1000\n    while X >= 50:\n        X -= 50\n        happiness_points += 50\n        fifty_yen += 1\n    while X >= 10:\n        X -= 10\n        happiness_points += 5\n        ten_yen += 1\n    while X >= 5:\n        X -= 5\n        happiness_points += 1\n        five_yen += 1\n    while X >= 1:\n        X -= 1\n        happiness_points += 1\n        one_yen += 1\n    \n    # Calculate the maximum happiness points\n    max_happiness_points = happiness_points\n    max_happiness_points += fifty_yen * 5\n    max_happiness_points += ten_yen * 10\n    max_happiness_points += five_yen * 15\n    max_happiness_points += one_yen * 20\n    \n    return str(max_happiness_points)"
    },
    {
        "number": 4243,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip())\n\n    # Initialize variables\n    happiness_points = 0\n    coins = [1000, 100, 50, 10, 5, 1]\n    coin_count = [0] * len(coins)\n\n    # Calculate number of coins for each coin value\n    for value in range(1000, 0, -1):\n        while X >= value:\n            coin_count[len(coins) - 1 - (value // 500)] += 1\n            X -= value\n\n    # Calculate happiness points for each coin type\n    for i in range(len(coins)):\n        happiness_points += coins[i] * coin_count[i]\n\n    return str(happiness_points)\n"
    },
    {
        "number": 4243,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    \n    # Calculate the maximum number of 500-yen coins and the remaining amount\n    max_500_coins = X // 500\n    remaining = X % 500\n    \n    # Calculate the maximum number of 50-yen coins and the remaining amount\n    max_50_coins = remaining // 50\n    remaining = remaining % 50\n    \n    # Calculate the maximum number of 5-yen coins and the remaining amount\n    max_5_coins = remaining // 5\n    remaining = remaining % 5\n    \n    # Calculate the happiness points\n    happiness_points = max_500_coins * 1000 + max_50_coins * 50 + max_5_coins * 5\n    \n    return happiness_points"
    },
    {
        "number": 4243,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    happiness_points = 0\n\n    # Get the number of 500-yen coins and subtract them from X\n    num_500_coins = X // 500\n    X -= num_500_coins * 500\n    happiness_points += num_500_coins * 1000\n\n    # Get the number of 100-yen coins and subtract them from X\n    num_100_coins = X // 100\n    X -= num_100_coins * 100\n    happiness_points += num_100_coins * 1000\n\n    # Get the number of 50-yen coins and subtract them from X\n    num_50_coins = X // 50\n    X -= num_50_coins * 50\n    happiness_points += num_50_coins * 500\n\n    # Get the number of 10-yen coins and subtract them from X\n    num_10_coins = X // 10\n    X -= num_10_coins * 10\n    happiness_points += num_10_coins * 500\n\n    # Get the number of 5-yen coins and subtract them from X\n    num_5_coins = X // 5\n    X -= num_5_coins * 5\n    happiness_points += num_5_coins * 5\n\n    # Get the number of 1-yen coins and subtract them from X\n    num_1_coins = X\n    happiness_points += num_1_coins\n\n    return happiness_points\n"
    },
    {
        "number": 4243,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    five_yen = x // 5\n    remaining = x % 5\n    five_yen_coins = [five_yen // 10, five_yen % 10]\n    hundred_yen_coins = [remaining // 100, remaining % 100]\n    happiness_points = 0\n    for coins in hundred_yen_coins:\n        happiness_points += coins * 1000\n    for coins in five_yen_coins:\n        happiness_points += coins * 5\n    return str(happiness_points)\n"
    },
    {
        "number": 4244,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *X = map(int, stdin.split())\n    X = sorted(X)\n    total_stamina = 0\n    for i in range(N):\n        total_stamina += (X[i] - X[0]) ** 2\n    return total_stamina\n"
    },
    {
        "number": 4244,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.splitlines()[0])\n    X = list(map(int, stdin.splitlines()[1].split()))\n    X.sort()\n    total_stamina = 0\n\n    for i in range(N):\n        total_stamina += (X[i] - X[0]) ** 2\n\n    return total_stamina\n"
    },
    {
        "number": 4244,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, *X = map(int, stdin.split())\n    X = sorted(X)\n    minimum_stamina = 0\n    for i in range(N):\n        minimum_stamina += (X[i] - i - 1) ** 2\n    return str(minimum_stamina)"
    },
    {
        "number": 4244,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    X_i = [int(x) for x in stdin.split()[1:]]\n\n    # Calculate the minimum total stamina\n    min_stamina = sum([(x - 1) ** 2 for x in X_i])\n\n    return str(min_stamina)"
    },
    {
        "number": 4244,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, *X = map(int, stdin.split())\n    X = sorted(X)\n    total_stamina = 0\n    for i in range(N):\n        total_stamina += (X[i] - X[0]) ** 2\n    return total_stamina"
    },
    {
        "number": 4244,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, *X = map(int, stdin.split())\n    X = sorted(X)\n    min_points = 0\n    for i in range(N):\n        min_points += (X[i] - X[0]) ** 2\n    return str(min_points)\n"
    },
    {
        "number": 4244,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, *X = map(int, stdin.split())\n    X.sort()\n    P = X[N // 2]\n    total_stamina = sum((x - P) ** 2 for x in X)\n    return str(total_stamina)\n"
    },
    {
        "number": 4244,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, *X = map(int, stdin.split())\n    X = sorted(X)\n\n    def stamina_spent(P):\n        return sum((x - P) ** 2 for x in X)\n\n    min_stamina = stamina_spent(X[0])\n    for i in range(1, N):\n        min_stamina = min(min_stamina, stamina_spent(X[i]))\n\n    return str(min_stamina)\n\n\ninput_str = '''2\n1 4'''\nprint(solution(input_str))\n"
    },
    {
        "number": 4244,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    X = list(map(int, stdin.split()[1:]))\n    min_stamina = sum(map(lambda x: (x - min(X)) ** 2, X))\n    return min_stamina\n\n\ninput_str = \"2\\n1 4\"\noutput_str = str(solution(input_str))\nprint(output_str)\n"
    },
    {
        "number": 4244,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.splitlines()[0])\n    X = list(map(int, stdin.splitlines()[1].split()))\n    \n    min_stamina = float('inf')\n    for p in range(1, 101):\n        total_stamina = sum((x - p) ** 2 for x in X)\n        min_stamina = min(min_stamina, total_stamina)\n    \n    return str(min_stamina)"
    },
    {
        "number": 4245,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if B % A == 0:\n        return B // A\n    else:\n        return B // A + 1\n\ninput_str = input()\nresult = solution(input_str)\nprint(result) "
    },
    {
        "number": 4245,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return (B // A) + (0 if B % A == 0 else 1)\n"
    },
    {
        "number": 4245,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n\n    # Calculate the minimum number of strips required\n    min_strips = B // A\n\n    return str(min_strips)"
    },
    {
        "number": 4245,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    minimum_strips = (B // A) + (0 if B % A == 0 else 1)\n    return str(minimum_strips)"
    },
    {
        "number": 4245,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    strips = 0\n    while B > A:\n        B -= A\n        strips += 1\n    return strips\n\ndef"
    },
    {
        "number": 4245,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    power_strips = 1\n    while A * power_strips < B:\n        power_strips += 1\n    return str(power_strips)\n"
    },
    {
        "number": 4245,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    strips_count = 0\n    while B % A != 0:\n        B -= A - 1\n        strips_count += 1\n    return strips_count\n\n\ninput_str = input(\"Enter A and B separated by a space: \")\nresult = solution(input_str)\nprint(\"Minimum number of power strips required:\", result) "
    },
    {
        "number": 4245,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    result = B // A\n    if result * A < B:\n        result += 1\n    return str(result)\n"
    },
    {
        "number": 4245,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    count = 0\n    while B > A:\n        B -= A\n        count += 1\n    return str(count)"
    },
    {
        "number": 4245,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin.strip().split()\n    A = int(input_str[0])\n    B = int(input_str[1])\n\n    # Calculate the minimum number of power strips required\n    if B % A == 0:\n        return B // A\n    else:\n        return (B // A) + 1"
    },
    {
        "number": 4246,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split(\"\\n\")\n    correct_days = 0\n    for i in range(len(S)):\n        if S[i] == T[i]:\n            correct_days += 1\n    return correct_days\n\n\ndef"
    },
    {
        "number": 4246,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split('\\n')\n    correct = 0\n    \n    for i in range(3):\n        if S[i] == T[i]:\n            correct += 1\n            \n    return str(correct)\n"
    },
    {
        "number": 4246,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    S = input_list[0]\n    T = input_list[1]\n\n    correct_days = 0\n\n    for i in range(len(S)):\n        if S[i] == T[i]:\n            correct_days += 1\n\n    return correct_days\n\n\nstdin = \"CSS\\nCSR\"\nprint(solution(stdin))"
    },
    {
        "number": 4246,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S, T = input().split()\n    count = 0\n    for i in range(3):\n        if S[i] == T[i]:\n            count += 1\n    return str(count)\n\n\nstdin = \"CSS\\nCSR\"\nprint(solution(stdin)) "
    },
    {
        "number": 4246,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    correct_days = 0\n\n    for i in range(3):\n        if S[i] == T[i]:\n            correct_days += 1\n\n    return str(correct_days)\n\n\ndef"
    },
    {
        "number": 4246,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    correct_days = 0\n    \n    for i in range(3):\n        if S[i] == T[i]:\n            correct_days += 1\n            \n    return str(correct_days)\n"
    },
    {
        "number": 4246,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split(\"\\n\")\n    correct_days = 0\n\n    for i in range(len(S)):\n        if S[i] == T[i]:\n            correct_days += 1\n\n    return str(correct_days)"
    },
    {
        "number": 4246,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    S, T = input(stdin).split()\n    count = 0\n    for i in range(3):\n        if S[i] == T[i]:\n            count += 1\n    return count\n\nprint(solution(\"S\\nCSR\")) # Output: 2 "
    },
    {
        "number": 4246,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S, T = input().split()\n    count = 0\n    for i in range(len(S)):\n        if S[i] == T[i]:\n            count += 1\n    return str(count)\n\ninput_str = \"\"\"CSS\nCSR\"\"\"\n\nprint(solution(input_str))\n"
    },
    {
        "number": 4246,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(\"\\n\")\n    count = 0\n    for i in range(3):\n        if s[i] == t[i]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4247,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    p = list(map(int, stdin[1].split()))\n    \n    count = 0\n    for i in range(1, n - 1):\n        if p[i] == min(p[i-1], p[i+1]) and p[i] != min(p[i-1], p[i+1], p[i]):\n            count += 1\n    \n    return str(count)\n"
    },
    {
        "number": 4247,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    p = list(map(int, stdin[1].split()))\n\n    count = 0\n    for i in range(1, n - 1):\n        if p[i - 1] < p[i] and p[i] < p[i + 1]:\n            count += 1\n\n    return count"
    },
    {
        "number": 4247,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    p = [int(x) for x in stdin[1].split()]\n    count = 0\n\n    for i in range(1, n - 1):\n        if p[i] == sorted(p[i - 1:i + 2])[1]:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4247,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    p = list(map(int, stdin.split('\\n')[1].split()))\n\n    count = 0\n    for i in range(1, n - 1):\n        if p[i] == min(p[i-1], p[i+1]) and p[i] != min(p[i-1], p[i+1]):\n            count += 1\n\n    return str(count)\n\ninput_data = \"\"\"5\n1 3 5 4 2\"\"\"\n\nprint(solution(input_data))\n"
    },
    {
        "number": 4247,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    p = list(map(int, stdin[1].split()))\n\n    count = 0\n    for i in range(1, n - 1):\n        if sorted(p[i - 1:i + 2])[1] == p[i]:\n            count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4247,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    p = [int(x) for x in stdin[1].split()]\n    count = 0\n\n    for i in range(1, n - 1):\n        if p[i] == sorted(p[i - 1:i + 2])[1]:\n            count += 1\n\n    return count\n"
    },
    {
        "number": 4247,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    p = [int(x) for x in stdin[1].split()]\n    \n    count = 0\n    for i in range(1, n-1):\n        if sorted(p[i-1:i+2])[1] == p[i]:\n            count += 1\n            \n    return str(count)"
    },
    {
        "number": 4247,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    p = list(map(int, stdin[1].split()))\n    \n    count = 0\n    for i in range(1, n - 1):\n        if p[i] == min(p[i - 1], p[i + 1]) and p[i] > max(p[i - 1], p[i + 1]):\n            count += 1\n    \n    return str(count)\n"
    },
    {
        "number": 4247,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    p = [int(x) for x in stdin.splitlines()[1].split()]\n\n    count = 0\n    for i in range(1, n - 1):\n        if p[i] == min(p[i - 1], p[i + 1]) and p[i] == min(p[i - 1], p[i + 1]) != min(p[i - 1], p[i], p[i + 1]):\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4247,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *p = map(int, stdin.split())\n    count = 0\n    for i in range(1, n - 1):\n        if p[i - 1] < p[i] < p[i + 1]:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4248,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def calculate_angle(point1: tuple[float, float], point2: tuple[float, float]) -> float:\n        import math\n        x1, y1 = point1\n        x2, y2 = point2\n        dot_product = x1 * x2 + y1 * y2\n        magnitude_product = math.sqrt((x1 ** 2) + (y1 ** 2)) * math.sqrt((x2 ** 2) + (y2 ** 2))\n        if magnitude_product == 0:\n            return 0\n        cos_angle = dot_product / magnitude_product\n        angle = math.degrees(math.acos(cos_angle))\n        return angle\n\n    def find_max_angle(points: list[tuple[float, float]]) -> float:\n        max_angle = 0\n        for i in range(len(points)):\n            for j in range(i + 1, len(points)):\n                angle = calculate_angle(points[i], points[j])\n                if angle > max_angle:\n                    max_angle = angle\n        return max_angle\n\n    def main(stdin: str) -> str:\n        n = int(stdin.split('\\n')[0])\n        points = [tuple(map(float, line.split())) for line in stdin.split('\\n')[1:n + 1]]\n        max_angle = find_max_angle(points)\n        return f\"{max_angle:.2f}\"\n\n    return main(stdin)\n"
    },
    {
        "number": 4248,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def angle(p1, p2, p3):\n        ang = math.degrees(math.atan2(p2[1] - p1[1], p2[0] - p1[0]) - math.atan2(p3[1] - p1[1], p3[0] - p1[0]))\n        return ang + 360 if ang < 0 else ang\n\n    input_data = stdin.split(\"\\n\")\n    n = int(input_data[0])\n    points = []\n    for i in range(1, n + 1):\n        x, y = map(float, input_data[i].split())\n        points.append((x, y))\n\n    angles = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                angles.append(angle(points[i], points[j], points[k]))\n\n    return round(max(angles), 3)\n"
    },
    {
        "number": 4248,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    points = [tuple(map(float, line.split())) for line in lines[1:]]\n    \n    def dist(p1: tuple, p2: tuple) -> float:\n        return ((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)**0.5\n    \n    def angle(p1: tuple, p2: tuple, p3: tuple) -> float:\n        a = dist(p1, p2)\n        b = dist(p2, p3)\n        c = dist(p3, p1)\n        if a == 0 or b == 0 or c == 0:\n            return 0\n        return acos((a**2 + b**2 - c**2) / (2 * a * b))\n    \n    def is_convex(p1: tuple, p2: tuple, p3: tuple) -> bool:\n        return (angle(p1, p2, p3) - pi) * (angle(p2, p3, p1) - pi) > 0\n    \n    convex_points = [p for p in points if is_convex(*p)]\n    \n    def angle_sum(points: list) -> float:\n        angles = [angle(p1, p2, p3) for p1, p2, p3 in zip(points, points[1:], points[2:])]\n        return sum(angles)\n    \n    return f\"{angle_sum(convex_points):.3f}\" "
    },
    {
        "number": 4248,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    points = [tuple(map(float, line.split())) for line in stdin.split('\\n')[1:n+1]]\n    angle = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            x1, y1 = points[i]\n            x2, y2 = points[j]\n            angle += math.atan2(y2-y1, x2-x1)\n    \n    return round(angle / (n * (n-1) / 2), 3)\n"
    },
    {
        "number": 4248,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def get_angle(x: float, y: float) -> float:\n        if x == 0:\n            if y > 0:\n                return 90.0\n            else:\n                return 270.0\n        angle = math.degrees(math.atan(y / x))\n        if x > 0 and y > 0:\n            return angle\n        elif x < 0 and y > 0:\n            return 180 + angle\n        elif x < 0 and y < 0:\n            return 180 + angle\n        else:\n            return 360 + angle\n\n    n = int(stdin.splitlines()[0])\n    points = [tuple(map(float, line.split())) for line in stdin.splitlines()[1:]]\n    angles = [get_angle(x, y) for x, y in points]\n    avg_angle = sum(angles) / n\n    return round(avg_angle, 3)\n"
    },
    {
        "number": 4248,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_positive(x, y):\n        return (x > 0 and y > 0) or (x < 0 and y < 0)\n\n    def distance(x1, y1, x2, y2):\n        return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5\n\n    n = int(stdin[0])\n    points = [tuple(map(float, stdin[i + 1].split())) for i in range(n)]\n\n    min_distance = float('inf')\n    min_theta = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            dist = distance(*points[i], *points[j])\n            theta = abs(points[i][1] - points[j][1]) / dist\n            if dist < min_distance or (dist == min_distance and is_positive(theta, min_theta)):\n                min_distance = dist\n                min_theta = theta\n\n    return f\"{min_theta:.3f}\"\n\n\ndef"
    },
    {
        "number": 4248,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    points = [tuple(map(float, line.split())) for line in stdin.splitlines()[1:]]\n    \n    def angle(p1: tuple, p2: tuple) -> float:\n        dx = p2[0] - p1[0]\n        dy = p2[1] - p1[1]\n        return round(math.degrees(math.atan2(dy, dx)), 2)\n\n    angles = sorted([angle(points[i-1], point) for i, point in enumerate(points)])\n    diff_angles = [angles[i+1] - angles[i] for i in range(n-1)]\n    min_angle = min(diff_angles)\n    return round(min_angle, 3)\n\n\ndef"
    },
    {
        "number": 4248,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    points = []\n    for i in range(1, n + 1):\n        x, y = map(float, stdin.splitlines()[i].split())\n        points.append((x, y))\n\n    def cross_product(p1, p2, p3):\n        return (p1[0] - p2[0]) * (p3[1] - p2[1]) - (p1[1] - p2[1]) * (p3[0] - p2[0])\n\n    def convex_hull(points):\n        points = sorted(points, key=lambda x: x[0])\n        lower_hull = []\n        for p in points:\n            while len(lower_hull) >= 2 and cross_product(lower_hull[-2], lower_hull[-1], p) <= 0:\n                lower_hull.pop()\n            lower_hull.append(p)\n\n        upper_hull = []\n        for p in reversed(points):\n            while len(upper_hull) >= 2 and cross_product(upper_hull[-2], upper_hull[-1], p) <= 0:\n                upper_hull.pop()\n            upper_hull.append(p)\n\n        return lower_hull[:-1] + upper_hull[:-1]\n\n    hull = convex_hull(points)\n    theta = 0\n    for i in range(len(hull)):\n        theta += abs(atan2(hull[i][1], hull[i][0]) - atan2(hull[(i + 1) % len(hull)][1], hull[(i + 1) % len(hull)][0]))\n    theta /= len(hull)\n\n    return f\"{theta:.3f}\"\n"
    },
    {
        "number": 4248,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    points = [tuple(map(float, line.split())) for line in stdin.split('\\n')[1:n+1]]\n\n    def distance(p1: tuple, p2: tuple) -> float:\n        return ((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2) ** 0.5\n\n    def angle(p1: tuple, p2: tuple, p3: tuple) -> float:\n        a = distance(p1, p2)\n        b = distance(p2, p3)\n        c = distance(p1, p3)\n        return acos((a**2 + b**2 - c**2) / (2 * a * b))\n\n    def find_closest_triplet(points: list) -> tuple:\n        min_distance = float('inf')\n        closest_triplet = None\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    if distance(points[i], points[j]) + distance(points[j], points[k]) - distance(points[i], points[k]) > 0:\n                        d = angle(points[i], points[j], points[k])\n                        if d < min_distance:\n                            min_distance = d\n                            closest_triplet = (i, j, k)\n        return closest_triplet\n\n    i, j, k = find_closest_triplet(points)\n    theta = angle(points[i], points[j], points[k])\n    return round(theta, 3)"
    },
    {
        "number": 4248,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    points = [(float(x), float(y)) for x, y in [line.split() for line in stdin.split(\"\\n\")[1:]]]\n    \n    def angle(a, b):\n        dx, dy = b[0] - a[0], b[1] - a[1]\n        return atan2(dy, dx)\n    \n    angles = [(angle(points[i - 1], points[i]), i) for i in range(1, len(points))]\n    angles.sort(key=lambda x: x[0])\n    result = angles[0][1]\n    \n    return f\"{angle(points[result - 1], points[result]):.3f}\"\n\ninput1 = \"\"\"8\n-2.14 2.06\n-1.14 2.04\n-2.16 1.46\n-2.14 0.70\n-1.42 0.40\n-0.94 -0.48\n-1.42 -1.28\n-2.16 -1.62\n\"\"\"\n\ninput2 = \"\"\"5\n2.26 1.44\n2.28 0.64\n2.30 -0.30\n1.58 0.66\n3.24 0.66\n\"\"\"\n\ninput3 = \"\"\"8\n6.98 2.06\n6.40 1.12\n5.98 0.24\n5.54 -0.60\n7.16 0.30\n7.82 1.24\n8.34 0.24\n8.74 -0.76\n\"\"\"\n\ninput4 = \"\"\"5\n10.44 2.06\n10.90 0.80\n11.48 -0.48\n12.06 0.76\n3.24 0.66\n\"\"\"\n\ninput5 = \"\"\"8\n16.94 2.42\n15.72 2.38\n14.82 1.58\n14.88 0.50\n15.76 -0.16\n16.86 -0.20\n17.00 0.88\n16.40 0.92\n\"\"\"\n\ninput6 = \"\"\"5\n20.62 3.00\n21.06 2.28\n21.56 1.36\n21.66 0.56\n21.64 -0.52\n22.14 2.32\n22.62 3.04\n\"\"\"\n\ninput7 = \"\"\"7\n20.62 3.00\n21.06 2.28\n21.56 1.36\n21.66 0.56\n21.64 -0.52\n22.14 2.32\n22.62 3.04\n\"\"\"\n\nprint(solution(input1))\nprint(solution(input2))\nprint(solution(input3))\nprint(solution(input4))\nprint(solution(input5))\nprint(solution(input6))\nprint(solution(input7)) "
    },
    {
        "number": 4249,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    dp = [0] * (m + 1)\n    dp[0] = 1\n    max_caffeine = a[0]\n    for i in range(1, n):\n        if a[i] > max_caffeine:\n            max_caffeine = a[i]\n        dp[max(dp[i - max_caffeine:]) + 1] += 1\n        if dp[m] > 1:\n            return -1\n    return dp[m]\n\n\nn = int(input())\nm = int(input())\na = list(map(int, input().split()))\nprint(solution(input())) "
    },
    {
        "number": 4249,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    if sum(a) < m:\n        return -1\n\n    days = 1\n    total_caffeine = 0\n\n    while total_caffeine < m:\n        days += 1\n        total_caffeine = sum(min(a[i], i + 1) for i in range(n))\n\n    return days\n\n\ninput_str = \"\"\"5 8\n2 3 1 1 2\"\"\"\n\nprint(solution(input_str)) "
    },
    {
        "number": 4249,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    for i in range(n):\n        if a[i] > m:\n            return -1\n\n    days = 0\n    pages_left = m\n    for k in range(n):\n        if a[k] > pages_left:\n            days += ceil((pages_left + 1) / k)\n            pages_left = 0\n        else:\n            days += 1\n            pages_left -= a[k]\n\n    return days\n\ndef"
    },
    {
        "number": 4249,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.splitlines()\n    n, m = map(int, input_data[0].split())\n    a = list(map(int, input_data[1].split()))\n    \n    if sum(a) < m:\n        return -1\n    \n    total_pages = 0\n    days = 0\n    days_with_cup = 0\n    cup_index = 0\n    \n    while total_pages < m:\n        if days_with_cup >= len(a):\n            return -1\n        if a[cup_index] > 0:\n            pages_written = min(a[cup_index], m - total_pages)\n            total_pages += pages_written\n            a[cup_index] -= pages_written\n            days_with_cup += 1\n            days += 1\n        else:\n            cup_index += 1\n            days_with_cup += 1\n    \n    return days\n"
    },
    {
        "number": 4249,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    # Calculate the maximum number of pages that can be written in a day\n    max_pages = sum(a)\n\n    # Check if the total number of pages is divisible by the max number of pages that can be written in a day\n    if m % max_pages != 0:\n        return -1\n\n    # Calculate the number of days required to write the coursework\n    num_days = m // max_pages\n\n    return num_days"
    },
    {
        "number": 4249,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    \n    if n > 2 * 10**5 or m > 10**9:\n        return -1\n    \n    if sum(a) < m:\n        return -1\n    \n    dp = [0] * (m + 1)\n    dp[0] = 1\n    \n    for i in range(n):\n        for j in range(m, -1, -1):\n            if j < a[i]:\n                dp[j] = max(dp[j], dp[j - a[i]] + 1)\n    \n    if dp[m] > 0:\n        return dp[m]\n    else:\n        return -1\n\n\ndef"
    },
    {
        "number": 4249,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split(\"\\n\")\n    n, m = map(int, input_data[0].split())\n    a = list(map(int, input_data[1].split()))\n\n    if n > 2 * 10**5 or m > 10**9:\n        return \"Input values are out of range\"\n\n    if n < m:\n        return \"It is impossible to write the coursework\"\n\n    total_pages = 0\n    days = 1\n\n    for i in range(n):\n        if a[i] >= total_pages + i + 1:\n            total_pages += i + 1\n        else:\n            total_pages = a[i]\n            days += 1\n\n    if total_pages == m:\n        return days\n    else:\n        return \"It is impossible to write the coursework\"\n\ndef"
    },
    {
        "number": 4249,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    def can_write(k: int) -> bool:\n        return sum(max(0, a[i] - i + k) for i in range(k)) >= m\n\n    if n == 1:\n        return -1\n\n    low, high = 1, n\n    while low <= high:\n        mid = (low + high) // 2\n        if can_write(mid):\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return high if high >= 0 else -1\n"
    },
    {
        "number": 4249,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    # Initialize dp array\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    # Base cases\n    for i in range(1, n + 1):\n        dp[i][0] = 1\n\n    for i in range(1, m + 1):\n        dp[0][i] = 1\n\n    # Fill dp array\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            dp[i][j] = dp[i - 1][j]\n            if j >= a[i - 1]:\n                dp[i][j] += dp[i][j - a[i - 1]]\n\n    # Find the minimum number of days required\n    min_days = float('inf')\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if dp[i][j] == m + 1:\n                min_days = min(min_days, i)\n                break\n\n    if min_days == float('inf'):\n        return -1\n    else:\n        return min_days "
    },
    {
        "number": 4249,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n, m = map(int, input_list[0].split())\n    a = list(map(int, input_list[1].split()))\n\n    if n > m:\n        return -1\n\n    days = 1\n    total_pages = 0\n    while total_pages < m:\n        total_pages = sum([max(0, a[i] - i + 1) for i in range(n)])\n        days += 1\n\n    return days - 1\n"
    },
    {
        "number": 4250,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(arr):\n        return len(arr) == k and all(elem in s for elem in arr)\n\n    n, k = map(int, stdin.split()[:2])\n    s = list(map(int, stdin.split()[2:]))\n    t = []\n\n    for i in range(n - k + 1):\n        t_candidate = s[i:i + k]\n        if is_valid(t_candidate):\n            t = t_candidate\n            break\n\n    if not t:\n        raise ValueError(\"No valid array t can be found.\")\n\n    return \" \".join(map(str, t))\n"
    },
    {
        "number": 4250,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    s = list(map(int, input().split()))\n\n    t = []\n    for _ in range(k):\n        max_value = 0\n        max_index = 0\n        for i in range(n):\n            if s[i] not in t and s[i] > max_value and s[i] not in t[:i] and s[i] not in s[i+1:]:\n                max_value = s[i]\n                max_index = i\n        t.append(max_value)\n        s.pop(max_index)\n        n -= 1\n\n    return ' '.join(map(str, t))\n\n\ninput_string = '''7 3\n1 2 3 2 4 3 1\n'''\n\nprint(solution(input_string)) "
    },
    {
        "number": 4250,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    s = list(map(int, input().split()))\n    t = []\n\n    for _ in range(k):\n        max_val = 0\n        max_index = 0\n\n        for i, val in enumerate(s):\n            if val > max_val:\n                max_val = val\n                max_index = i\n\n        t.append(max_val)\n        s.pop(max_index)\n\n    return ' '.join(map(str, t))\n\n\ninput_data = \"\"\"\n7 3\n1 2 3 2 4 3 1\n\"\"\"\nprint(solution(input_data))\n\ninput_data = \"\"\"\n10 4\n1 3 1 3 10 3 7 7 12 3\n\"\"\"\nprint(solution(input_data))\n\ninput_data = \"\"\"\n15 2\n1 2 1 1 1 2 1 1 2 1 2 1 1 1\n\"\"\"\nprint(solution(input_data)) "
    },
    {
        "number": 4250,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    s = list(map(int, input().split()))\n    \n    t = []\n    for _ in range(k):\n        max_elem = max(s)\n        t.append(max_elem)\n        s.remove(max_elem)\n    \n    return \" \".join(map(str, t))\n\n\ninput_str = \"\"\"7 3\n1 2 3 2 4 3 1\"\"\"\nprint(solution(input_str))\n\ninput_str = \"\"\"10 4\n1 3 1 3 10 3 7 7 12 3\"\"\"\nprint(solution(input_str))\n\ninput_str = \"\"\"15 2\n1 2 1 1 1 2 1 1 2 1 2 1 1 1 1\"\"\"\nprint(solution(input_str)) "
    },
    {
        "number": 4250,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    s = list(map(int, input().split()))\n\n    t = []\n    for _ in range(k):\n        max_val = 0\n        max_idx = 0\n        for i in range(n - len(t) - k + 1):\n            val = sum(s[i:i+len(t)+1])\n            if val > max_val:\n                max_val = val\n                max_idx = i\n\n        t.append(s[max_idx + len(t)])\n        s[max_idx + len(t)] = float('inf')\n\n    return ' '.join(map(str, t))\n\n\ninput_stdin = \"\"\"7 3\n1 2 3 2 4 3 1\n\"\"\"\noutput = solution(input_stdin)\nprint(output) "
    },
    {
        "number": 4250,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    s = list(map(int, input().split()))\n    s.sort()\n    t = [0] * k\n    \n    for i in range(k):\n        t[i] = s.pop(0)\n    \n    t.sort()\n    return ' '.join(map(str, t))\n\ndef"
    },
    {
        "number": 4250,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input(stdin).split())\n    s = list(map(int, input(stdin).split()))\n    t = []\n\n    while k:\n        max_freq = 0\n        max_element = None\n\n        for element in s:\n            freq = s.count(element)\n            if freq > max_freq:\n                max_freq = freq\n                max_element = element\n\n        t.append(max_element)\n        s = [x for x in s if x != max_element]\n        k -= 1\n\n    return \" \".join(map(str, t))\n\ninput_stdin = \"\"\"7 3\n1 2 3 2 4 3 1\"\"\"\n\nprint(solution(input_stdin))\n\ninput_stdin = \"\"\"10 4\n1 3 1 3 10 3 7 7 12 3\"\"\"\n\nprint(solution(input_stdin))\n\ninput_stdin = \"\"\"15 2\n1 2 1 1 1 2 1 1 2 1 2 1 1 1 1\"\"\"\n\nprint(solution(input_stdin)) "
    },
    {
        "number": 4250,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    s = list(map(int, input().split()))\n    t = []\n    \n    for i in range(k):\n        max_count = 0\n        for j in range(i + 1, n - k + i + 1):\n            if s[i] == s[j]:\n                count = 1\n                for m in range(j + 1, n):\n                    if s[i] == s[m]:\n                        count += 1\n                        if count > max_count:\n                            max_count = count\n                            t = [s[i]] * max_count\n            else:\n                break\n        s = [x for i, x in enumerate(s) if i not in range(i + 1, n - k + i + 1)]\n        if max_count == 0:\n            break\n    \n    return ' '.join(map(str, t))"
    },
    {
        "number": 4250,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    s = list(map(int, stdin.split()[2:]))\n    \n    def cut_out_copy(s, t):\n        cut_s = []\n        for t_i in t:\n            if t_i in s:\n                cut_s.append(t_i)\n                s.remove(t_i)\n            else:\n                return False\n        return True\n    \n    def find_max_copies(s, t):\n        max_copies = 0\n        for i in range(1, n - k + 2):\n            t_copy = s[i:i+k]\n            if cut_out_copy(s, t_copy):\n                max_copies += 1\n        return max_copies\n    \n    max_copies = 0\n    t = []\n    for i in range(n):\n        for j in range(i+1, n+1):\n            t_copy = s[i:j]\n            if len(t_copy) == k and cut_out_copy(s, t_copy):\n                if find_max_copies(s, t_copy) > max_copies:\n                    max_copies = find_max_copies(s, t_copy)\n                    t = t_copy\n    \n    return ' '.join(map(str, t))"
    },
    {
        "number": 4250,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    n = int(input_list[0])\n    k = int(input_list[1])\n    s = list(map(int, input_list[2:]))\n    \n    t = [0] * k\n    for i in range(k):\n        t[i] = max(s)\n        s.remove(t[i])\n        \n    return \" \".join(map(str, t))\n\ninput_list = \"7 3\\n1 2 3 2 4 3 1\"\noutput = solution(input_list)\nprint(output)\n\ninput_list = \"10 4\\n1 3 1 3 10 3 7 7 12 3\"\noutput = solution(input_list)\nprint(output)\n\ninput_list = \"15 2\\n1 2 1 1 1 2 1 1 2 1 2 1 1 1 1\"\noutput = solution(input_list)\nprint(output) "
    },
    {
        "number": 4251,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def matrix_traversal(matrix, k):\n        n, m = len(matrix), len(matrix[0])\n        result = []\n        for j in range(m):\n            for i in range(n):\n                result.append(matrix[i][j])\n        sequence = []\n        for i in range(n * m - 1):\n            if abs(result[i] - result[i + 1]) >= k:\n                sequence.append(i)\n            else:\n                break\n        if len(sequence) == n * m - 1:\n            return True\n        return False\n\n    n, m = map(int, stdin.split()[:2])\n    matrix = [[0] * m for _ in range(n)]\n    for i in range(n):\n        row = list(map(int, stdin.split()[2 * i + 1:2 * i + 1 + m]))\n        for j in range(m):\n            matrix[i][j] = row[j]\n    k = 1\n    while not matrix_traversal(matrix, k):\n        k += 1\n    return k - 1\n"
    },
    {
        "number": 4251,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_str, output_str = stdin, ''\n    n, m = map(int, input_str.split()[:2])\n    matrix = [list(map(int, input_str.split()[2:])) for _ in range(n)]\n\n    max_k = 0\n    for k in range(1, n * m):\n        rows = list(range(n))\n        seq = [0] * (n * m)\n\n        for j in range(m):\n            for i in rows:\n                seq[i * m + j] = matrix[i][j]\n\n        valid = True\n        for i in range(1, n * m - 1):\n            if abs(seq[i] - seq[i - 1]) < k:\n                valid = False\n                break\n\n        if valid:\n            max_k = k\n        else:\n            break\n\n    return str(max_k)"
    },
    {
        "number": 4251,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def acceptable_traversal(a, k):\n        n, m = len(a), len(a[0])\n        s = [a[i][0] for i in range(n)]\n        for j in range(1, m):\n            for i in range(n):\n                s[i] += a[i][j]\n        for i in range(1, n):\n            if abs(s[i] - s[i - 1]) < k:\n                return False\n        return True\n\n    def max_acceptable_traversal(a):\n        n, m = len(a), len(a[0])\n        k = 1\n        while not acceptable_traversal(a, k):\n            k += 1\n        return k\n\n    def parse_input(stdin: str) -> List[List[int]]:\n        n, m = map(int, stdin.split()[:2])\n        a = []\n        for i in range(n):\n            a.append(list(map(int, stdin.split()[2 + i * m:2 + (i + 1) * m])))\n        return a\n\n    a = parse_input(stdin)\n    k = max_acceptable_traversal(a)\n    return str(k)\n"
    },
    {
        "number": 4251,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    matrix = [[int(x) for x in input().split()] for _ in range(n)]\n    k = 0\n    for i in range(1, n):\n        for j in range(m):\n            k = max(k, abs(matrix[i][j] - matrix[i - 1][j]))\n    return str(k)\n"
    },
    {
        "number": 4251,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    a = [[int(x) for x in input().split()] for _ in range(n)]\n\n    # Find the maximum acceptable difference\n    max_k = 0\n    for i in range(n):\n        for j in range(m):\n            max_k = max(max_k, abs(a[i][j] - a[i][(j+1)%m]))\n\n    # Check if the matrix can be traversed with max_k\n    for i in range(n):\n        for j in range(m):\n            if abs(a[i][j] - a[(i+1)%n][(j+1)%m]) >= max_k:\n                break\n        else:\n            continue\n        break\n    else:\n        return max_k\n\n    return max_k - 1\n\n\ninput_str = \"\"\"4 2\n9 9\n10 8\n5 3\n4 3\"\"\"\n\nprint(solution(input_str)) # Output: 5\n\ninput_str = \"\"\"2 4\n1 2 3 4\n10 3 7 3\"\"\"\n\nprint(solution(input_str)) # Output: 0\n\ninput_str = \"\"\"6 1\n3\n6\n2\n5\n1\n4\"\"\"\n\nprint(solution(input_str)) # Output: 3 "
    },
    {
        "number": 4251,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    matrix = [list(map(int, input().split())) for _ in range(n)]\n\n    def is_k_acceptable(order: List[int]) -> bool:\n        s = [matrix[order[i]][0] for i in range(n)]\n        for i in range(1, m):\n            s = [matrix[order[j]][i] for j in range(n)] + s\n        for i in range(len(s) - 1):\n            if abs(s[i] - s[i + 1]) < k:\n                return False\n        return True\n\n    k = 0\n    for i in range(1, n * m + 1):\n        if is_k_acceptable(list(range(n))):\n            k = i\n        else:\n            break\n\n    return str(k)\n\n\ninput_stdin = \"\"\"4 2\n9 9\n10 8\n5 3\n4 3\"\"\"\n\noutput_stdout = \"5\"\n\nprint(solution(input_stdin))\nprint(output_stdout) "
    },
    {
        "number": 4251,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = [[0] * m for _ in range(n)]\n    for i in range(n):\n        a[i] = list(map(int, stdin.split()[i + 1:i + m + 1]))\n    \n    k = 0\n    for i in range(1, n):\n        if a[i][0] - a[i - 1][m - 1] > k:\n            k = a[i][0] - a[i - 1][m - 1]\n    \n    return str(k)\n"
    },
    {
        "number": 4251,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def read_matrix(n: int, m: int) -> list:\n        matrix = []\n        for _ in range(n):\n            row = list(map(int, input().split()))\n            matrix.append(row)\n        return matrix\n\n    def find_traversal_sequence(matrix: list) -> list:\n        n, m = len(matrix), len(matrix[0])\n        sequence = []\n        for i in range(n):\n            for j in range(m):\n                sequence.append(matrix[i][j])\n        return sequence\n\n    def is_k_acceptable(sequence: list, k: int) -> bool:\n        return all(abs(sequence[i] - sequence[i + 1]) >= k for i in range(len(sequence) - 1))\n\n    def find_max_k(matrix: list) -> int:\n        n, m = len(matrix), len(matrix[0])\n        sequence = find_traversal_sequence(matrix)\n        k = 0\n        while not is_k_acceptable(sequence, k + 1):\n            k += 1\n        return k\n\n    def reorder_matrix(matrix: list, order: list) -> list:\n        n, m = len(matrix), len(matrix[0])\n        ordered_matrix = [[0] * m for _ in range(n)]\n        for i in range(n):\n            for j in range(m):\n                ordered_matrix[order[i] - 1][j] = matrix[i][j]\n        return ordered_matrix\n\n    n, m = map(int, input().split())\n    matrix = read_matrix(n, m)\n    k = find_max_k(matrix)\n    print(k)\n"
    },
    {
        "number": 4251,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.splitlines()\n    n, m = map(int, input_lines[0].split())\n    matrix = [list(map(int, input_lines[i+1].split())) for i in range(n)]\n\n    k = 1\n    while True:\n        visited = [False] * n\n        sequence = []\n\n        def traverse(row):\n            nonlocal visited\n            if visited[row]:\n                return\n            visited[row] = True\n            for col in range(m):\n                sequence.append(matrix[row][col])\n                traverse(row)\n                sequence.append(matrix[row][col])\n\n        for i in range(n):\n            traverse(i)\n\n        is_k_acceptable = True\n        for i in range(len(sequence) - 1):\n            if abs(sequence[i] - sequence[i + 1]) < k:\n                is_k_acceptable = False\n                break\n\n        if is_k_acceptable:\n            return k\n\n        k += 1\n"
    },
    {
        "number": 4251,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    n, m = map(int, input_list[0].split())\n    matrix = [list(map(int, input_list[i].split())) for i in range(1, n + 1)]\n\n    def traverse_matrix(matrix, k):\n        rows = list(range(n))\n        result = []\n        for col in range(m):\n            for row in rows:\n                result.append(matrix[row][col])\n        if all(abs(result[i] - result[i + 1]) >= k for i in range(len(result) - 1)):\n            return True\n        return False\n\n    k = 0\n    while not traverse_matrix(matrix, k):\n        k += 1\n\n    return str(k - 1)\n"
    },
    {
        "number": 4252,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    filename = stdin.split('\\n')[1]\n    if 'xxx' in filename:\n        pos = filename.find('xxx')\n        if pos != -1:\n            return pos + 1\n    return 0\n\ninput_string = '''6\nxxxiii\n10\nxxxxxxxxxx\n5\nxxoxx'''\n\nfor i in range(len(input_string.split('\\n')) - 1):\n    print(solution(input_string))\n    "
    },
    {
        "number": 4252,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    filename = stdin.splitlines()[1]\n    \n    if \"xxx\" in filename:\n        for i in range(n):\n            if i > 0 and i < n - 2 and filename[i - 1:i + 3] == \"xxx\":\n                return i\n    else:\n        return 0\n"
    },
    {
        "number": 4252,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    filename = stdin.splitlines()[1]\n\n    forbidden_substring = \"xxx\"\n    forbidden_substring_found = forbidden_substring in filename\n    if not forbidden_substring_found:\n        return 0\n\n    def count_consecutive_x(s: str) -> int:\n        count = 0\n        for c in s:\n            if c == 'x':\n                count += 1\n            else:\n                count = 0\n            if count >= 3:\n                return count\n        return count\n\n    max_count = count_consecutive_x(filename)\n\n    if max_count == 3:\n        for i in range(n):\n            new_filename = filename[:i] + filename[i+1:]\n            if count_consecutive_x(new_filename) < 3:\n                return i\n        return 0\n    else:\n        return 0\n"
    },
    {
        "number": 4252,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    filename = stdin.split(\"\\n\")[1]\n\n    if \"xxx\" in filename:\n        return min([i for i, letter in enumerate(filename) if letter == \"x\" and i > 0 and i < n - 2 and filename[i - 1] == \"x\" and filename[i + 1] == \"x\"]) + 1\n    else:\n        return 0\n"
    },
    {
        "number": 4252,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    filename = stdin.splitlines()[1]\n    count_xxx = 0\n    for i in range(n - 2):\n        if filename[i:i+3] == \"xxx\":\n            count_xxx += 1\n    if count_xxx > 0:\n        return count_xxx\n    else:\n        return 0\n"
    },
    {
        "number": 4252,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    name = stdin.split('\\n')[1]\n    \n    if 'xxx' in name:\n        i = name.find('xxx')\n        return i\n    else:\n        return 0\n\n\ndef"
    },
    {
        "number": 4252,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    name = stdin.split('\\n')[1]\n\n    forbidden_substring = \"xxx\"\n    min_removal = float('inf')\n\n    for i in range(len(name) - 2):\n        if name[i:i+3] == forbidden_substring:\n            min_removal = min(min_removal, i)\n\n    if min_removal == float('inf'):\n        return \"0\"\n    else:\n        return str(min_removal + 1)\n\n\ninput_string = \"\"\"6\nxxxiii\n\"\"\"\n\nprint(solution(input_string)) "
    },
    {
        "number": 4252,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    filename = stdin.splitlines()[1]\n    if \"xxx\" not in filename:\n        return 0\n    min_removed = float('inf')\n    for i in range(n):\n        for j in range(i+3, n+1):\n            if \"xxx\" not in filename[i:j]:\n                removed = j - i\n                if removed < min_removed:\n                    min_removed = removed\n    return min_removed"
    },
    {
        "number": 4252,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    filename = stdin.splitlines()[1]\n    forbidden_substring = \"xxx\"\n\n    if forbidden_substring in filename:\n        index = filename.find(forbidden_substring)\n        min_characters_to_remove = index + len(forbidden_substring) - 1\n        print(min_characters_to_remove)\n    else:\n        print(0)\n"
    },
    {
        "number": 4252,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    file_name = stdin.split(\"\\n\")[1]\n    \n    if \"xxx\" not in file_name:\n        return \"0\"\n    \n    min_chars_to_remove = 0\n    x_count = 0\n    for i in range(n):\n        if file_name[i] == \"x\":\n            x_count += 1\n        else:\n            x_count = 0\n        \n        if x_count >= 3:\n            min_chars_to_remove += x_count - 2\n            x_count = 0\n    \n    return str(min_chars_to_remove)\n"
    },
    {
        "number": 4253,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area = 3 * r ** 2\n    return str(area)"
    },
    {
        "number": 4253,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area = 3 * r ** 2\n    return str(area)\n\nstdin = \"4\"\nprint(solution(stdin)) "
    },
    {
        "number": 4253,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area = 3 * r ** 2\n    return str(area)\n"
    },
    {
        "number": 4253,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area = 3 * r ** 2\n    return str(area)\n\nstdin = input(\"Enter a value for r: \")\nresult = solution(stdin)\nprint(\"The area of the regular dodecagon is\", result) "
    },
    {
        "number": 4253,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area = 3 * r**2\n    return str(area)\n"
    },
    {
        "number": 4253,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area = 3 * r ** 2\n    return str(area)\n\n\nstdin = input(\"Enter the radius of the circle: \")\nprint(solution(stdin)) "
    },
    {
        "number": 4253,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area = 3 * r**2\n    return str(area)"
    },
    {
        "number": 4253,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin.strip())\n    area = 3 * r ** 2\n    return str(area)"
    },
    {
        "number": 4253,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area = 3 * r**2\n    return str(area)\n\ninput_str = input(\"Enter the radius: \")\noutput_str = solution(input_str)\nprint(output_str) "
    },
    {
        "number": 4253,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area = 3 * r ** 2\n    return str(area)\n\n\nstdin = input()\noutput = solution(stdin)\nprint(output) "
    },
    {
        "number": 4254,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, W = map(int, stdin.split())\n    if W >= S:\n        return \"unsafe\"\n    else:\n        return \"safe\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    S, W = map(int, stdin.split())\n    if W >= S:\n        return \"unsafe\"\n    else:\n        return \"safe\"\n\ndef"
    },
    {
        "number": 4254,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S, W = map(int, stdin.split())\n\n    if W >= S:\n        return \"unsafe\"\n    else:\n        return \"safe\""
    },
    {
        "number": 4254,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S, W = map(int, stdin.split())\n    if W >= S:\n        return \"unsafe\"\n    else:\n        return \"safe\"\n\n\ndef"
    },
    {
        "number": 4254,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S, W = map(int, stdin.split())\n    if W >= S:\n        return \"unsafe\"\n    else:\n        return \"safe\""
    },
    {
        "number": 4254,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S, W = map(int, stdin.split())\n    if W >= S:\n        return \"unsafe\"\n    else:\n        return \"safe\"\n\ninput_stdin = \"4 5\"  # Change this value to test different inputs\nprint(solution(input_stdin)) "
    },
    {
        "number": 4254,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S, W = map(int, stdin.split())\n    if W >= S:\n        return \"unsafe\"\n    else:\n        return \"safe\"\n\ninput_stdin = \"4 5\"\nprint(solution(input_stdin)) "
    },
    {
        "number": 4254,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    S, W = map(int, stdin.split())\n    if W >= S:\n        return \"unsafe\"\n    else:\n        return \"safe\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S, W = map(int, stdin.split())\n    if W >= S:\n        return \"unsafe\"\n    else:\n        return \"safe\""
    },
    {
        "number": 4254,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S, W = map(int, stdin.split())\n    if W >= S:\n        return \"unsafe\"\n    else:\n        return \"safe\"\n\ndef"
    },
    {
        "number": 4255,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    ab, bc, ca = map(int, stdin.split())\n    # Heron's formula\n    s = (ab + bc + ca) / 2\n    area = (s * (s - ab) * (s - bc) * (s - ca)) ** 0.5\n    return int(area)"
    },
    {
        "number": 4255,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from standard input\n    a, b, c = map(int, stdin.split())\n\n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n\n    # Calculate the area of the triangle using Heron's formula\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\n    # Round the area to the nearest integer\n    area = round(area)\n\n    # Return the area as a string\n    return str(area)"
    },
    {
        "number": 4255,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    ab, bc, ca = map(int, stdin.split())\n    s = (ab + bc + ca) / 2\n    area = (s * (s - ab) * (s - bc) * (s - ca)) ** 0.5\n    return int(area)\n"
    },
    {
        "number": 4255,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    ab, bc, ca = map(int, stdin.split())\n    s = (ab + bc + ca) / 2\n    area = (s * (s - ab) * (s - bc) * (s - ca)) ** 0.5\n    return int(area)\n\n\ninput_str = input()\noutput_str = solution(input_str)\nprint(output_str) "
    },
    {
        "number": 4255,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n    s = (a + b + c) / 2\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    return int(area)\n\ndef"
    },
    {
        "number": 4255,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    s = (a + b + c) / 2  # S = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5  # Heron's formula\n    return int(area)\n\n\ninput_data = \"3 4 5\"\nprint(solution(input_data)) "
    },
    {
        "number": 4255,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    s = (a + b + c)/2\n    area = (s*(s-a)*(s-b)*(s-c))**0.5\n    return int(area)"
    },
    {
        "number": 4255,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    ab, bc, ca = map(int, stdin.split())\n    s = (ab + bc + ca) / 2\n    area = (s * (s - ab) * (s - bc) * (s - ca)) ** 0.5\n    return int(area)"
    },
    {
        "number": 4255,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input string into a list of integers\n    sides = list(map(int, stdin.split()))\n\n    # Sort the sides in decreasing order\n    sides.sort(reverse=True)\n\n    # Calculate the area of the triangle\n    area = sides[0] * sides[1] / 2\n\n    # Return the area as a string\n    return str(int(area))"
    },
    {
        "number": 4255,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    a, b, c = map(int, stdin.split())\n\n    # Calculate semi-perimeter\n    s = (a + b + c) / 2\n\n    # Calculate area\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\n    return int(area)"
    },
    {
        "number": 4256,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    times = B // A\n    if times > C:\n        times = C\n    return str(times)\n\ninput_str = input(\"Enter the input values: \")\noutput_str = solution(input_str)\nprint(\"Number of times Takahashi will hear his favorite sound:\", output_str) "
    },
    {
        "number": 4256,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    times = B // A\n    if times > C:\n        times = C\n    return str(times)\n"
    },
    {
        "number": 4256,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if B >= A * C:\n        return str(C)\n    else:\n        return str((B // A) + 1)"
    },
    {
        "number": 4256,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if B // A >= C:\n        return str(C)\n    else:\n        return str(B // A)\n\nstdin = input(\"Enter the values for A, B, and C separated by space: \")\nprint(solution(stdin)) "
    },
    {
        "number": 4256,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    min_change = C * A\n    count = B // min_change\n    return str(count)\n\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4256,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if B >= A * C:\n        return C\n    else:\n        return B // A\n\ndef"
    },
    {
        "number": 4256,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    # Since we are interested in the number of times he hears the sound, we can simply calculate the maximum number of times he can hear it\n    max_times = B // A\n    # If the maximum number of times he can hear the sound is greater than C, we take the minimum of the two\n    result = min(max_times, C)\n    return str(result)\n\nstdin = input(\"Enter the input values separated by a space: \")\nprint(solution(stdin)) "
    },
    {
        "number": 4256,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    times = B // A\n    if times > C:\n        return str(C)\n    else:\n        return str(times)\n\ndef"
    },
    {
        "number": 4256,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    count = min(B // A, C)\n    return str(count)\n\ndef"
    },
    {
        "number": 4256,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    return min(B // A, C)\n\nstdin = input().strip()\nprint(solution(stdin)) "
    },
    {
        "number": 4257,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A * B)\n\ndef"
    },
    {
        "number": 4257,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A * B)\n\ndef"
    },
    {
        "number": 4257,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A * B)\n\nstdin = input(\"Enter A and B separated by space: \")\nprint(\"A * B =\", solution(stdin)) "
    },
    {
        "number": 4257,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a * b)\n"
    },
    {
        "number": 4257,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A * B)\n\ndef"
    },
    {
        "number": 4257,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    result = A * B\n    return str(result)\n\nstdin = input(\"Enter A B values separated by space: \")\nprint(solution(stdin)) "
    },
    {
        "number": 4257,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A * B)\n\ndef"
    },
    {
        "number": 4257,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A * B)\n"
    },
    {
        "number": 4257,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    A, B = map(int, stdin.split())\n    \n    # Compute the product\n    product = A * B\n    \n    # Return the product as a string\n    return str(product)"
    },
    {
        "number": 4257,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A * B)\n\nstdin = input(\"Enter values A and B separated by space: \")\nresult = solution(stdin)\nprint(result) "
    },
    {
        "number": 4258,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n    total_biscuits = B * (T // A) + (T % A) // A\n    return total_biscuits"
    },
    {
        "number": 4258,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n    total_biscuits = (T // A + 1) * B\n    return total_biscuits"
    },
    {
        "number": 4258,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n    biscuits = [B]\n    total_biscuits = B\n    for i in range(1, T + 1):\n        biscuits.append(biscuits[-1] + B)\n        total_biscuits += biscuits[-1]\n    seconds = T + 0.5\n    while seconds > 0:\n        if seconds % A == 0:\n            total_biscuits += B\n        seconds -= 1\n    return total_biscuits\n"
    },
    {
        "number": 4258,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n    total_biscuits = (T // A + 1) * B\n    return total_biscuits\n\n\nstdin = input(\"A B T: \")\nresult = solution(stdin)\nprint(result) "
    },
    {
        "number": 4258,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n    total_biscuits = (T // A + 1) * B\n    return total_biscuits\n\ndef"
    },
    {
        "number": 4258,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n    biscuits_per_second = [0, B, B*2, B*3]\n    total_biscuits = sum(biscuits_per_second[:T//A+1]) + biscuits_per_second[T//A] * (T%A)\n    return total_biscuits"
    },
    {
        "number": 4258,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n    total_biscuits = (T // A + 1) * B\n    return total_biscuits"
    },
    {
        "number": 4258,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n    biscuits_produced = 0\n    for i in range(1, T + 1):\n        biscuits_produced += (i // A) * B\n    return biscuits_produced"
    },
    {
        "number": 4258,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n    biscuits = 0\n    for i in range(T // A + 1):\n        biscuits += B * (i + 1)\n    return biscuits\n\n\nstdin = input(\"Enter A, B, T separated by space: \")\nprint(solution(stdin)) "
    },
    {
        "number": 4258,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n    t_500 = T + 0.5\n    biscuits_count = 0\n\n    # Calculate the number of biscuits produced in each period\n    biscuits_count += (t_500 // A) * B\n    biscuits_count += (t_500 % A) * (B // A)\n\n    return biscuits_count"
    },
    {
        "number": 4259,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K, A, B = map(int, stdin.split())\n    \n    # Find the first multiple of K between A and B\n    first_multiple = A - (A % K)\n    \n    # If it's between A and B, print OK\n    if first_multiple >= A and first_multiple <= B:\n        return \"OK\"\n    else:\n        return \"NG\""
    },
    {
        "number": 4259,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    K, A, B = map(int, input().split())\n    multiples = [i for i in range(A, B+1) if i % K == 0]\n    if multiples:\n        return \"OK\"\n    else:\n        return \"NG\"\n\nstdin = \"7\\n500 600\"\nprint(solution(stdin)) "
    },
    {
        "number": 4259,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    K, A, B = map(int, stdin.split())\n    for carry in range(A, B+1):\n        if carry % K == 0:\n            return \"OK\"\n    return \"NG\"\n\n\ninput_data = input(\"Enter K, A, B separated by space: \")\nprint(solution(input_data)) "
    },
    {
        "number": 4259,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    K, A, B = map(int, stdin.split())\n    \n    for i in range(A, B+1):\n        if i % K == 0:\n            return \"OK\"\n    \n    return \"NG\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    K, A, B = map(int, stdin.split())\n    for i in range(A, B+1):\n        if i % K == 0:\n            return \"OK\"\n    return \"NG\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.splitlines()[0])\n    A, B = map(int, stdin.splitlines()[1].split())\n\n    # find the smallest multiple of K that is greater than or equal to A\n    multiple = A - (A % K)\n\n    if multiple > B:\n        return \"NG\"\n    else:\n        return \"OK\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = map(int, input().split())\n    multiples = [i for i in range(a, b+1) if i % k == 0]\n    if len(multiples) > 0:\n        return \"OK\"\n    else:\n        return \"NG\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    K, A, B = map(int, stdin.split())\n    for i in range(A, B + 1):\n        if i % K == 0:\n            return \"OK\"\n    return \"NG\"\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4259,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    K, A, B = map(int, stdin.split())\n    # Check if there is a carry distance that is a multiple of K between A and B\n    for carry_distance in range(A, B+1):\n        if carry_distance % K == 0:\n            return \"OK\"\n    return \"NG\""
    },
    {
        "number": 4259,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    K, A, B = map(int, input().split())\n    multiples = [i for i in range(A, B+1) if i % K == 0]\n    if multiples:\n        return \"OK\"\n    else:\n        return \"NG\""
    },
    {
        "number": 4260,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T, X = map(int, stdin.split())\n    T_b = T * X\n    T_a = T\n    result = T_a / T_b\n    return \"{:.6f}\".format(result)\n\ninput_data = \"8 3\"\nprint(solution(input_data)) "
    },
    {
        "number": 4260,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    T, X = map(int, stdin.split())\n    hours_in_world_a = T / X\n    return f\"{hours_in_world_a:.10f}\"\n"
    },
    {
        "number": 4260,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    T, X = map(int, stdin.split())\n    return \"{:.10f}\".format(T / X)"
    },
    {
        "number": 4260,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    T, X = map(int, stdin.split())\n    return round(T * (X - 1) / (X * (X - 1)), 10)\n\ndef"
    },
    {
        "number": 4260,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    T, X = map(int, stdin.split())\n    result = T / X\n    return str(round(result, 3))\n\nstdin = \"8 3\"\nprint(solution(stdin)) "
    },
    {
        "number": 4260,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    T, X = map(int, stdin.split())\n    return \"{:.10f}\".format(T / X)"
    },
    {
        "number": 4260,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    T, X = map(int, stdin.split())\n    return f\"{T * X / (X + 1):.6f}\"\n\n\ninput_data = \"8 3\"\noutput_data = solution(input_data)\nprint(output_data) "
    },
    {
        "number": 4260,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    T, X = map(int, stdin.split())\n    result = (X * T) / T\n    return str(result)\n\nstdin = \"8 3\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4260,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    T, X = map(int, stdin.split())\n    result = T * X\n    return str(result)"
    },
    {
        "number": 4260,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_values = stdin.split()\n    T = int(input_values[0])\n    X = int(input_values[1])\n    hours_in_world_A = T * X\n    return f\"{hours_in_world_A:.10f}\""
    },
    {
        "number": 4261,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if B == A:\n        return str(C)\n    else:\n        transfer_amount = min(A - B, C)\n        B += transfer_amount\n        C -= transfer_amount\n        return str(C)\n"
    },
    {
        "number": 4261,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    # transfer B liters to A bottle\n    B = min(B, A - B)\n    A = A - B\n    # calculate remaining C bottle\n    C = C - B\n    return C"
    },
    {
        "number": 4261,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    amount_to_transfer = min(A - B, C)\n    result = C - amount_to_transfer\n    return str(result)"
    },
    {
        "number": 4261,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    D = min(A - B, C)\n    return str(C - D)\n"
    },
    {
        "number": 4261,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if C > B:\n        return 0\n    else:\n        return B - C"
    },
    {
        "number": 4261,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A >= B:\n        result = C - B\n    else:\n        result = C - A\n    return str(result)\n\ndef"
    },
    {
        "number": 4261,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if B == 0:\n        return 0\n    elif A - B <= C:\n        return C - (A - B)\n    else:\n        return 0\n"
    },
    {
        "number": 4261,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n\n    # calculate the maximum amount of water that can be transferred from Bottle 2 to Bottle 1\n    max_transfer = min(A - B, C)\n\n    # transfer the maximum amount of water and calculate the remaining water in Bottle 2\n    C -= max_transfer\n\n    return C\n"
    },
    {
        "number": 4261,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    return C - B"
    },
    {
        "number": 4261,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    # Transfer as much water as possible from Bottle 2 to Bottle 1\n    transfer = min(B, A - B)\n    B -= transfer\n    A -= transfer\n    # Calculate the amount of water remaining in Bottle 2\n    C -= transfer\n    return C\n"
    },
    {
        "number": 4262,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    P = list(map(int, stdin[1].split()))\n    Q = list(map(int, stdin[2].split()))\n\n    def lexicographically_smaller(perm1: list, perm2: list) -> bool:\n        for i in range(1, N + 1):\n            if perm1[i - 1] < perm2[i - 1]:\n                return True\n            elif perm1[i - 1] > perm2[i - 1]:\n                return False\n        return False\n\n    a = None\n    b = None\n    for i in range(1, N + 1):\n        if lexicographically_smaller(P, [i] + [0] * (N - 1)):\n            a = i\n            break\n    for i in range(1, N + 1):\n        if lexicographically_smaller(Q, [i] + [0] * (N - 1)):\n            b = i\n            break\n\n    return str(abs(a - b))\n"
    },
    {
        "number": 4262,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    P = list(map(int, stdin.split(\"\\n\")[1].split()))\n    Q = list(map(int, stdin.split(\"\\n\")[2].split()))\n    \n    def find_smallest_lexicographically(permutation: list) -> int:\n        smallest = permutation.index(min(permutation))\n        return smallest\n    \n    a = find_smallest_lexicographically(P)\n    b = find_smallest_lexicographically(Q)\n    return abs(a - b)\n\ninput_data = '''3\n1 3 2\n3 1 2'''\n\nresult = solution(input_data)\nprint(result) "
    },
    {
        "number": 4262,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    P = list(map(int, stdin.split(\"\\n\")[1].split()))\n    Q = list(map(int, stdin.split(\"\\n\")[2].split()))\n\n    def is_lexicographically_smaller(p, q):\n        for i in range(N):\n            if p[i] < q[i]:\n                return True\n            elif p[i] > q[i]:\n                return False\n        return False\n\n    a, b = 1, 1\n    for i in range(1, N + 1):\n        if is_lexicographically_smaller(P[:i], Q[:i]):\n            a = i\n        if is_lexicographically_smaller(Q[:i], P[:i]):\n            b = i\n\n    return str(abs(a - b))\n"
    },
    {
        "number": 4262,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    P = list(map(int, stdin.split(\"\\n\")[1].split()))\n    Q = list(map(int, stdin.split(\"\\n\")[2].split()))\n\n    permutations = list(permutations(range(1, N+1)))\n    a_th_permutation = permutations[permutations.index(P) - 1]\n    b_th_permutation = permutations[permutations.index(Q) - 1]\n\n    return abs(a_th_permutation.index(N) - b_th_permutation.index(N))"
    },
    {
        "number": 4262,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def is_lexicographically_smaller(p: str, q: str) -> bool:\n        for i in range(1, len(p)):\n            if p[i] < q[i]:\n                return True\n            elif p[i] > q[i]:\n                return False\n        return False\n\n    N = int(stdin[0].strip())\n    P = stdin[1].strip().split()\n    Q = stdin[2].strip().split()\n\n    permutations = list(permutations(range(1, N + 1)))\n    permutations_lex = sorted(permutations, key=lambda x: ''.join(str(i) for i in x))\n\n    for i, p in enumerate(permutations_lex):\n        if tuple(p) == tuple(int(x) for x in P):\n            a = i\n        if tuple(p) == tuple(int(x) for x in Q):\n            b = i\n\n    return str(abs(a - b))\n"
    },
    {
        "number": 4262,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, P, Q = input().split()\n    N = int(N)\n\n    P_sorted = sorted([int(x) for x in P.split()])\n    Q_sorted = sorted([int(x) for x in Q.split()])\n\n    a_index = 0\n    b_index = 0\n    for i in range(N):\n        if P_sorted[i] < Q_sorted[i]:\n            a_index = i\n        if P_sorted[i] > Q_sorted[i]:\n            b_index = i\n            break\n\n    return abs(a_index - b_index)\n"
    },
    {
        "number": 4262,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    P = list(map(int, stdin.split(\"\\n\")[1].split()))\n    Q = list(map(int, stdin.split(\"\\n\")[2].split()))\n\n    # Calculate the index of P and Q in lexicographical order\n    for i in range(1, N):\n        if P[:i] < P[:i]:\n            a = i\n            break\n        if P[:i] > P[:i]:\n            a = i + 1\n\n    for i in range(1, N):\n        if Q[:i] < Q[:i]:\n            b = i\n            break\n        if Q[:i] > Q[:i]:\n            b = i + 1\n\n    # Calculate the absolute difference between a and b\n    return abs(a - b)"
    },
    {
        "number": 4262,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0].strip())\n    P = list(map(int, stdin[1].strip().split()))\n    Q = list(map(int, stdin[2].strip().split()))\n    \n    P.sort()\n    Q.sort()\n    \n    a = P.index(P[0])\n    b = Q.index(Q[0])\n    \n    return str(abs(a - b))\n\nN = 3\nP = [1, 3, 2]\nQ = [3, 1, 2]\n\nstdin = [N, ' '.join(map(str, P)), ' '.join(map(str, Q))]\n\nprint(solution(stdin)) "
    },
    {
        "number": 4262,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.splitlines()[0])\n    P = list(map(int, stdin.splitlines()[1].split()))\n    Q = list(map(int, stdin.splitlines()[2].split()))\n\n    def is_lexicographically_smaller(p, q):\n        for i in range(N):\n            if p[i] < q[i]:\n                return True\n            elif p[i] > q[i]:\n                return False\n        return False\n\n    count = 0\n    permutations = list(permutations(range(1, N + 1)))\n    for permutation in permutations:\n        if is_lexicographically_smaller(permutation, P):\n            count += 1\n        if count == a - 1:\n            a_smallest_permutation = permutation\n            break\n\n    count = 0\n    permutations = list(permutations(range(1, N + 1)))\n    for permutation in permutations:\n        if is_lexicographically_smaller(permutation, Q):\n            count += 1\n        if count == b - 1:\n            b_smallest_permutation = permutation\n            break\n\n    return abs(count_of_elements_in_a_smallest_permutation - count_of_elements_in_b_smallest_permutation)"
    },
    {
        "number": 4262,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.splitlines()[0])\n    P = list(map(int, stdin.splitlines()[1].split()))\n    Q = list(map(int, stdin.splitlines()[2].split()))\n\n    def lexicographic_order(permutation):\n        return sorted(range(1, N+1), key=lambda i: (permutation.index(i), permutation.count(i)))\n\n    P_lexicographic = lexicographic_order(P)\n    Q_lexicographic = lexicographic_order(Q)\n\n    a, b = -1, -1\n    for i in range(N):\n        if P_lexicographic[i] < Q_lexicographic[i]:\n            a, b = i + 1, -1\n            break\n        elif P_lexicographic[i] > Q_lexicographic[i]:\n            a, b = -1, i + 1\n            break\n\n    if a == -1 and b == -1:\n        a, b = N, N\n\n    return str(abs(a - b))"
    },
    {
        "number": 4263,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    max_length = 0\n    current_length = 0\n\n    for i in range(len(S)):\n        if S[i] in \"ACGT\":\n            current_length += 1\n            if current_length > max_length:\n                max_length = current_length\n        else:\n            current_length = 0\n\n    return max_length\n"
    },
    {
        "number": 4263,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    n = len(S)\n    max_len = 0\n    for i in range(n):\n        j = i\n        temp_len = 0\n        while j < n and S[j] in \"ACGT\":\n            temp_len += 1\n            j += 1\n        max_len = max(max_len, temp_len)\n    return max_len"
    },
    {
        "number": 4263,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    n = len(S)\n    max_len = 0\n    \n    for i in range(n):\n        for j in range(i+1, n+1):\n            if all(c in 'ACGT' for c in S[i:j]):\n                max_len = max(max_len, j-i)\n                \n    return max_len"
    },
    {
        "number": 4263,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    ACGT = set(['A', 'C', 'G', 'T'])\n    max_length = 0\n\n    for i in range(len(S)):\n        for j in range(i+1, len(S)+1):\n            substring = set(S[i:j])\n            if substring.issubset(ACGT):\n                max_length = max(max_length, j-i)\n\n    return max_length"
    },
    {
        "number": 4263,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    max_len = 0\n    for i in range(len(S)):\n        for j in range(i + 1, len(S) + 1):\n            substring = S[i:j]\n            if all(c in \"ACGT\" for c in substring):\n                max_len = max(max_len, len(substring))\n    return max_len"
    },
    {
        "number": 4263,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    longest_acgt = \"\"\n\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            if all(char in \"ACGT\" for char in substring):\n                if len(substring) > len(longest_acgt):\n                    longest_acgt = substring\n\n    return len(longest_acgt)\n"
    },
    {
        "number": 4263,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    max_length = 0\n    for i in range(len(S)):\n        for j in range(i+1, len(S)+1):\n            if set(S[i:j]).issubset({'A', 'C', 'G', 'T'}):\n                if j - i > max_length:\n                    max_length = j - i\n    return max_length\n"
    },
    {
        "number": 4263,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    max_len = 0\n    for i in range(len(S)):\n        current_len = 0\n        while i + current_len < len(S) and S[i + current_len] in \"ACGT\":\n            current_len += 1\n        max_len = max(max_len, current_len)\n    return max_len\n"
    },
    {
        "number": 4263,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    max_len = 0\n\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substring = s[i:j]\n            if all(c in \"ACGT\" for c in substring):\n                max_len = max(max_len, len(substring))\n\n    return max_len"
    },
    {
        "number": 4263,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    max_length = 0\n    for i in range(len(S)):\n        for j in range(i + 1, len(S) + 1):\n            substring = S[i:j]\n            if all(c in \"ACGT\" for c in substring):\n                max_length = max(max_length, len(substring))\n    return max_length\n\ndef"
    },
    {
        "number": 4264,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n\n    for i in range(1, N + 1):\n        if len(str(i)) % 2 != 0:\n            count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4264,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n\n    for i in range(1, N+1):\n        if len(str(i)) % 2 != 0:\n            count += 1\n\n    return str(count)\n\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4264,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    \n    for i in range(1, N+1):\n        if len(str(i)) % 2 != 0:\n            count += 1\n            \n    return str(count)\n\ndef"
    },
    {
        "number": 4264,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    count = 0\n    for i in range(1, N+1):\n        if len(str(i)) % 2 != 0:\n            count += 1\n    return count"
    },
    {
        "number": 4264,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for i in range(1, N+1):\n        if len(str(i)) % 2 == 1:\n            count += 1\n    return str(count)\n\ndef"
    },
    {
        "number": 4264,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for i in range(1, N+1):\n        if len(str(i)) % 2 == 1:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4264,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n\n    for i in range(1, N + 1):\n        digits = len(str(i))\n        if digits % 2 != 0:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4264,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for i in range(1, N+1):\n        if len(str(i)) % 2 != 0:\n            count += 1\n    return count\n\nstdin = input()  # or stdin = \"11\" if input from file\nresult = solution(stdin)\nprint(result) "
    },
    {
        "number": 4264,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    count = 0\n    for i in range(1, N+1):\n        if len(str(i)) % 2 != 0:\n            count += 1\n    return count"
    },
    {
        "number": 4264,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    count = 0\n    for i in range(1, N+1):\n        if len(str(i)) % 2 != 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4265,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    count = 0\n    for i in range(len(S)):\n        if S[i] != T[i]:\n            count += 1\n    return count"
    },
    {
        "number": 4265,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    count = 0\n    \n    for i in range(len(S)):\n        if S[i] != T[i]:\n            count += 1\n    \n    return count"
    },
    {
        "number": 4265,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split('\\n')\n    count = 0\n    \n    for i in range(len(S)):\n        if S[i] != T[i]:\n            count += 1\n    \n    return count"
    },
    {
        "number": 4265,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split('\\n')\n    operations = 0\n    for i in range(len(S)):\n        if S[i] != T[i]:\n            operations += 1\n    return operations\n"
    },
    {
        "number": 4265,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split(\"\\n\")\n    operations = 0\n    for i in range(len(S)):\n        if S[i] != T[i]:\n            operations += 1\n    return operations"
    },
    {
        "number": 4265,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.splitlines()\n    count = 0\n    for i in range(len(s)):\n        if s[i] != t[i]:\n            count += 1\n    return count"
    },
    {
        "number": 4265,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split('\\n')\n\n    diff = 0\n    for i in range(len(S)):\n        if S[i] != T[i]:\n            diff += 1\n\n    return diff"
    },
    {
        "number": 4265,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    count = 0\n    for i in range(len(S)):\n        if S[i] != T[i]:\n            count += 1\n    return count"
    },
    {
        "number": 4265,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    operations = 0\n    for i in range(len(S)):\n        if S[i] != T[i]:\n            operations += 1\n    return operations"
    },
    {
        "number": 4265,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n\n    diff_count = 0\n    for i in range(len(S)):\n        if S[i] != T[i]:\n            diff_count += 1\n\n    return diff_count\n\ninput_string = input()\nprint(solution(input_string)) "
    },
    {
        "number": 4266,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n    if X - K >= 0:\n        return ' '.join(map(str, range(X - K, X + 1)))\n    else:\n        return ' '.join(map(str, range(X, X + K + 1)))"
    },
    {
        "number": 4266,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n    result = []\n    \n    # Case 1: The three stones painted black are placed at coordinates 5, 6, and 7.\n    result.append(str(X - 1))\n    result.append(str(X))\n    result.append(str(X + 1))\n    \n    # Case 2: The three stones painted black are placed at coordinates 6, 7, and 8.\n    result.append(str(X - 2))\n    result.append(str(X - 1))\n    result.append(str(X))\n    \n    # Case 3: The three stones painted black are placed at coordinates 7, 8, and 9.\n    result.append(str(X))\n    result.append(str(X + 1))\n    result.append(str(X + 2))\n    \n    # Remove duplicates and sort result\n    result = sorted(set(result))\n    \n    return \" \".join(result)\n"
    },
    {
        "number": 4266,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n    stones = list(range(X - K, X + K + 1))\n    stones = [str(stone) for stone in stones if stone >= -1000000 and stone <= 1000000]\n    return \" \".join(stones)\n"
    },
    {
        "number": 4266,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n    start = max(X - K, -1000000)\n    end = min(X + K, 1000001)\n    return \" \".join(map(str, range(start, end)))\n"
    },
    {
        "number": 4266,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n    if X == 0:\n        return \"0\"\n    elif X == 1000000:\n        return \"1000000\"\n    else:\n        return \" \".join(str(i) for i in range(max(0, X - K), min(1000000, X + K) + 1))\n"
    },
    {
        "number": 4266,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_values = stdin.split()\n    K = int(input_values[0])\n    X = int(input_values[1])\n\n    if X - K > 0:\n        left_range = range(X - K, X)\n    else:\n        left_range = range(X + 1, X + 1 + K)\n\n    right_range = range(X + 1, X + 1 + K)\n\n    result = [str(i) for i in sorted(set(left_range) | set(right_range))]\n\n    return ' '.join(result)\n"
    },
    {
        "number": 4266,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_values = stdin.split()\n    K = int(input_values[0])\n    X = int(input_values[1])\n\n    lower_bound = X - K\n    upper_bound = X + K\n\n    if lower_bound < 0:\n        lower_bound = 0\n    if upper_bound > 1000000:\n        upper_bound = 1000000\n\n    result = []\n    for i in range(lower_bound, upper_bound + 1):\n        result.append(i)\n\n    return ' '.join(str(x) for x in result)\n"
    },
    {
        "number": 4266,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n    lower_limit = X - K\n    upper_limit = X + K\n    result = [str(i) for i in range(lower_limit, upper_limit + 1)]\n    return \" \".join(result)"
    },
    {
        "number": 4266,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split()\n    K, X = int(input_data[0]), int(input_data[1])\n    result = []\n    for i in range(X - K + 1, X + 1):\n        result.append(i)\n    result = sorted(result)\n    return \" \".join(str(x) for x in result)\n"
    },
    {
        "number": 4266,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n\n    if K >= 100:\n        return ' '.join(str(x) for x in range(-1000000, 1000001))\n\n    min_x = X - K\n    max_x = X + K\n\n    if min_x < -1000000:\n        min_x = -1000000\n    if max_x > 1000000:\n        max_x = 1000000\n\n    return ' '.join(str(x) for x in range(min_x, max_x + 1))\n"
    },
    {
        "number": 4267,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    temperature = int(stdin)\n    if temperature >= 30:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    temperature = int(stdin)\n    if temperature >= 30:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    temperature = int(stdin)\n\n    if temperature >= 30:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    temperature = int(stdin)\n    \n    # Check if temperature is 30 degrees Celsius or above\n    if temperature >= 30:\n        # Turn on air conditioner\n        return \"Yes\"\n    else:\n        # Do not turn on air conditioner\n        return \"No\""
    },
    {
        "number": 4267,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    temp_room = int(stdin.strip())\n\n    # Check if room temperature is greater than or equal to 30 degrees Celsius\n    if temp_room >= 30:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4267,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    room_temperature = int(stdin.strip())\n    \n    if room_temperature >= 30:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4267,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    temperature = int(stdin)\n\n    if temperature >= 30:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    temperature = int(stdin)\n    if temperature >= 30:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4267,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    temperature = int(stdin)\n    \n    if temperature >= 30:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4267,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    temp = int(stdin)\n    if temp >= 30:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4268,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, input().split())\n    points = []\n    for _ in range(N):\n        points.append(list(map(int, input().split())))\n\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            distance = 0\n            for k in range(D):\n                distance += (points[i][k] - points[j][k]) ** 2\n            distance = int(round(distance ** 0.5))\n            if distance * distance == distance ** 2:\n                count += 1\n\n    return str(count)"
    },
    {
        "number": 4268,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    N, D = map(int, input_list[0].split())\n    points = [list(map(int, input_list[i].split())) for i in range(1, N + 1)]\n\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            distance = sum([(points[i][k] - points[j][k]) ** 2 for k in range(D)]) ** 0.5\n            if int(distance) == distance:\n                count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4268,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, input().split())\n    points = []\n    for _ in range(N):\n        point = list(map(int, input().split()))\n        points.append(point)\n\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            distance = 0\n            for k in range(D):\n                distance += (points[i][k] - points[j][k])**2\n            distance = int(round(distance**0.5))\n            if distance * distance == distance:\n                count += 1\n\n    return count\n\n\nstdin = \"\"\"3 2\n1 2\n5 5\n-2 8\"\"\"\n\nresult = solution(stdin)\nprint(result) "
    },
    {
        "number": 4268,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, input().split())\n    points = []\n\n    for _ in range(N):\n        point = list(map(int, input().split()))\n        points.append(point)\n\n    count = 0\n\n    for i in range(N):\n        for j in range(i + 1, N):\n            distance = 0\n            for k in range(D):\n                distance += (points[i][k] - points[j][k]) ** 2\n            distance = int(distance ** 0.5)\n            if distance == distance ** 2:\n                count += 1\n\n    return count"
    },
    {
        "number": 4268,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split()[:2])\n    points = [list(map(int, stdin.split()[2:])) for _ in range(N)]\n\n    count = 0\n    for i in range(N - 1):\n        for j in range(i + 1, N):\n            distance = sum((points[i][k] - points[j][k]) ** 2 for k in range(D))\n            if distance % 1 == 0:\n                count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4268,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split()[0:2])\n    points = [list(map(int, stdin.split()[2:2+D]))]\n    \n    for _ in range(N-1):\n        points.append(list(map(int, input().split())))\n    \n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            dist = 0\n            for k in range(D):\n                dist += (points[i][k] - points[j][k])**2\n            if int(dist**0.5)**2 == dist:\n                count += 1\n    \n    return count\n"
    },
    {
        "number": 4268,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split()[:2])\n    points = [list(map(int, stdin.split()[2:])) for _ in range(N)]\n\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            distance = sum((points[i][k] - points[j][k]) ** 2 for k in range(D)) ** 0.5\n            if distance.is_integer():\n                count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4268,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split()[0:2])\n    points = [list(map(int, stdin.split()[2+D*i:2+D*(i+1)])) for i in range(N)]\n    count = 0\n    \n    for i in range(N-1):\n        for j in range(i+1, N):\n            distance = 0\n            for k in range(D):\n                distance += (points[i][k] - points[j][k])**2\n            distance = round(distance**0.5)\n            if distance.is_integer():\n                count += 1\n    \n    return str(count)\n"
    },
    {
        "number": 4268,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split()[0:2])\n    X = [list(map(int, stdin.split()[i+2:i+2+D])) for i in range(0, N*D, D)]\n\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            distance = sum((X[i][k]-X[j][k])**2 for k in range(D))\n            if distance == 0:\n                continue\n            if distance % 1 == 0:\n                count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4268,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    N, D = map(int, input_list[0].split())\n    points = [[int(x) for x in input_list[i+1].split()] for i in range(N)]\n    \n    count = 0\n    for i in range(N-1):\n        for j in range(i+1, N):\n            dist = sum([(points[i][k]-points[j][k])**2 for k in range(D)])\n            if dist % 2 == 0:\n                count += 1\n                \n    return count"
    },
    {
        "number": 4269,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    for i in range(3):\n        if int(S[i]) == int(S[i+1]):\n            return \"Bad\"\n    return \"Good\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    code = stdin[0]\n    prev_digit = code[0]\n    for digit in code[1:]:\n        if digit == prev_digit:\n            return \"Bad\"\n        prev_digit = digit\n    return \"Good\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    security_code = stdin\n    # check if the security code is hard to enter\n    if security_code[0] == security_code[1] or security_code[1] == security_code[2] or security_code[2] == security_code[3]:\n        return \"Bad\"\n    else:\n        return \"Good\""
    },
    {
        "number": 4269,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # read the input code\n    S = stdin.strip()\n\n    # check if the digits are the same\n    if S[0] == S[1] or S[1] == S[2] or S[2] == S[3]:\n        return \"Good\"\n    else:\n        return \"Bad\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    security_code = stdin\n    if any(security_code[i] == security_code[i+1] for i in range(len(security_code)-1)):\n        return \"Bad\"\n    else:\n        return \"Good\""
    },
    {
        "number": 4269,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    for i in range(len(S) - 1):\n        if S[i] == S[i+1]:\n            return \"Bad\"\n    return \"Good\""
    },
    {
        "number": 4269,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    security_code = stdin\n\n    if any(security_code.count(digit) > 1 for digit in security_code):\n        return \"Bad\"\n    else:\n        return \"Good\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    for i in range(len(S) - 1):\n        if S[i] == S[i+1]:\n            return \"Bad\"\n    return \"Good\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n\n    if len(S) != 4 or not S.isdigit():\n        raise ValueError(\"Invalid input. Please provide a 4-character string consisting of digits.\")\n\n    has_consecutive_digits = False\n    for i in range(len(S) - 1):\n        if S[i] == S[i + 1]:\n            has_consecutive_digits = True\n            break\n\n    return \"Bad\" if has_consecutive_digits else \"Good\""
    },
    {
        "number": 4269,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    code = stdin.strip()\n    if len(code) != 4:\n        return \"Bad\"\n    for i in range(3):\n        if code[i] == code[i+1]:\n            return \"Bad\"\n    return \"Good\""
    },
    {
        "number": 4270,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    N = int(input_list[0])\n    ingredient_values = list(map(int, input_list[1].split()))\n    \n    # Initialize a list to store the values of the ingredients\n    ingredient_values = ingredient_values\n    \n    # Compose ingredients N-1 times\n    for _ in range(N-1):\n        # Choose the two smallest values\n        min_index1 = ingredient_values.index(min(ingredient_values))\n        min_index2 = ingredient_values.index(min(ingredient_values))\n        while min_index1 == min_index2:\n            min_index2 = ingredient_values.index(min(ingredient_values))\n        # Calculate the value of the new ingredient\n        new_ingredient_value = (ingredient_values[min_index1] + ingredient_values[min_index2]) / 2\n        # Add the new ingredient to the list\n        ingredient_values.append(new_ingredient_value)\n        # Remove the two smallest ingredients\n        del ingredient_values[min_index1]\n        del ingredient_values[min_index2]\n    \n    # Return the maximum value of the last ingredient remaining\n    return str(max(ingredient_values))"
    },
    {
        "number": 4270,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, *v = map(int, stdin.split())\n    v = sorted(v, reverse=True)\n\n    def merge(x: int, y: int) -> float:\n        return (x + y) / 2\n\n    for i in range(N - 1, 0, -1):\n        v[i] = merge(v[i], v[i - 1])\n\n    return str(v[0])\n"
    },
    {
        "number": 4270,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, *values = list(map(int, stdin.split()))\n    values = sorted(values)\n    max_value = (values[0] + values[-1]) / 2\n\n    for i in range(1, N - 1):\n        new_value = (values[i] + values[i - 1]) / 2\n        max_value = max(max_value, new_value)\n\n    return max_value\n"
    },
    {
        "number": 4270,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    ingredients = [int(x) for x in stdin.split('\\n')[1].split()]\n    dp = [0] * (N + 1)\n    dp[0] = 0\n    dp[1] = max(ingredients)\n    for i in range(2, N + 1):\n        for j in range(i):\n            if ingredients[j] >= ingredients[i - j - 1]:\n                dp[i] = max(dp[i], dp[j] + dp[i - j - 1])\n    return dp[N]\n"
    },
    {
        "number": 4270,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, *values = map(int, stdin.split())\n    values = sorted(values)\n\n    def calculate_value(x: int, y: int) -> float:\n        return (x + y) / 2\n\n    def calculate_max_value(values: List[int]) -> float:\n        max_value = values[0]\n        for i in range(1, len(values)):\n            max_value = calculate_value(max_value, values[i])\n        return max_value\n\n    return str(calculate_max_value(values))\n"
    },
    {
        "number": 4270,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, *values = map(int, stdin.split())\n    values = list(values)\n    max_value = 0\n\n    for i in range(N - 1):\n        ingredient1 = values.pop(0)\n        ingredient2 = values.pop(0)\n        max_value = max(max_value, (ingredient1 + ingredient2) / 2)\n\n    return str(max_value)\n"
    },
    {
        "number": 4270,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, *values = map(int, stdin.split())\n    values = sorted(values)\n    \n    for i in range(N - 1):\n        values.append((values[i] + values[i+1]) / 2)\n        \n    return str(values[-1])\n\n\ndef"
    },
    {
        "number": 4270,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def get_median(v1: int, v2: int) -> float:\n        return (v1 + v2) / 2\n\n    def get_ingredient_value(v1: int, v2: int) -> float:\n        return get_median(v1, v2)\n\n    def update_ingredients(ingredient1: int, ingredient2: int) -> float:\n        return get_ingredient_value(ingredient1, ingredient2)\n\n    def find_max_value(n: int, values: list[int]) -> float:\n        max_value = values[0]\n        for i in range(1, n):\n            max_value = update_ingredients(max_value, values[i])\n        return max_value\n\n    N, *values = map(int, stdin.split())\n    max_value = find_max_value(N, values)\n    return f\"{max_value:.5f}\"\n"
    },
    {
        "number": 4270,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, *values = map(int, stdin.split())\n    if 2 <= N <= 50 and all(1 <= v <= 1000 for v in values):\n        value = max(values)\n        for _ in range(N - 1):\n            value = (value + value) / 2\n        return str(value)\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 4270,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, *values = map(int, stdin.split())\n    if 2 <= N <= 50 and all(1 <= v <= 1000 for v in values):\n        def merge(a: int, b: int) -> float:\n            return (a + b) / 2\n\n        ingredients = values\n        for _ in range(N - 1):\n            ingredients = [merge(ingredients[i], ingredients[i + 1]) for i in range(0, len(ingredients) - 1, 2)]\n            if len(ingredients) % 2 == 1:\n                ingredients.append(ingredients[-1])\n        return str(ingredients[0])\n    else:\n        return \"Invalid input\"\n"
    },
    {
        "number": 4271,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def parse_input():\n        N = int(input().strip())\n        A = list(map(int, input().strip().split()))\n        B = list(map(int, input().strip().split()))\n        C = list(map(int, input().strip().split()))\n        return N, A, B, C\n\n    def calculate_satisfaction_points(N, A, B, C):\n        satisfaction_points = 0\n        for i in range(N):\n            satisfaction_points += B[A[i] - 1]\n            if i < N - 1:\n                satisfaction_points += C[A[i] - 1]\n        return satisfaction_points\n\n    N, A, B, C = parse_input()\n    satisfaction_points = calculate_satisfaction_points(N, A, B, C)\n    return str(satisfaction_points)\n\nstdin = \"\"\"3\n3 1 2\n2 5 4\n3 6\"\"\"\n\noutput = solution(stdin)\nprint(output)"
    },
    {
        "number": 4271,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = map(int, stdin.split())\n    \n    dishes = [0] * (N + 1)\n    satisfaction = [0] * (N + 1)\n    \n    for i in range(1, N + 1):\n        dishes[i] = A[i - 1]\n        satisfaction[i] = B[i - 1]\n        \n    for i in range(2, N + 1):\n        satisfaction[i] += C[i - 2]\n        \n    total_satisfaction = 0\n    \n    for i in range(1, N + 1):\n        for j in range(dishes[i], dishes[i + 1]):\n            total_satisfaction += satisfaction[j]\n            \n    return str(total_satisfaction)\n\ndef"
    },
    {
        "number": 4271,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    A = list(map(int, stdin.split('\\n')[1].split()))\n    B = list(map(int, stdin.split('\\n')[2].split()))\n    C = list(map(int, stdin.split('\\n')[3].split()))\n\n    total_satisfaction = 0\n    for i in range(N - 1):\n        total_satisfaction += B[A[i] - 1]\n        total_satisfaction += C[i]\n\n    total_satisfaction += B[A[-1] - 1]\n\n    return str(total_satisfaction)"
    },
    {
        "number": 4271,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split(\"\\n\")\n    N = int(input_data[0])\n    A = list(map(int, input_data[1].split()))\n    B = list(map(int, input_data[2].split()))\n    C = list(map(int, input_data[3].split()))\n\n    satisfaction_points = 0\n    for i in range(N - 1):\n        satisfaction_points += B[A[i] - 1]\n        satisfaction_points += C[i]\n\n    satisfaction_points += B[A[N - 1] - 1]\n    return str(satisfaction_points)"
    },
    {
        "number": 4271,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    A = list(map(int, stdin[1].split()))\n    B = list(map(int, stdin[2].split()))\n    C = list(map(int, stdin[3].split()))\n\n    satisfaction_points = 0\n    for i in range(N - 1):\n        satisfaction_points += B[A[i] - 1]\n        satisfaction_points += C[i]\n\n    satisfaction_points += B[A[N - 1] - 1]\n\n    return str(satisfaction_points)\n"
    },
    {
        "number": 4271,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def read_int(s: str) -> int:\n        return int(s.strip())\n\n    def read_line(s: str) -> List[int]:\n        return list(map(int, s.strip().split()))\n\n    N = read_int(stdin.readline())\n    A = read_line(stdin.readline())\n    B = read_line(stdin.readline())\n    C = read_line(stdin.readline())\n\n    satisfaction_points = sum(B)\n    for i in range(1, N - 1):\n        satisfaction_points += C[i - 1]\n\n    return str(satisfaction_points)\n"
    },
    {
        "number": 4271,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = map(list, stdin.split('\\n'))\n    N = int(N[0])\n    A = list(map(int, A[1:]))\n    B = list(map(int, B[1:]))\n    C = list(map(int, C[1:]))\n\n    satisfaction = [0] * N\n    satisfaction[0] = B[0]\n\n    for i in range(1, N):\n        satisfaction[i] = satisfaction[i - 1] + B[i] + C[i - 1]\n\n    return sum(satisfaction)\n"
    },
    {
        "number": 4271,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = 0, [], [], []\n    \n    # Read input\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    A = list(map(int, lines[1].split()))\n    B = list(map(int, lines[2].split()))\n    C = list(map(int, lines[3].split()))\n    \n    # Initialize variables\n    total_satisfaction = 0\n    previous_dish = None\n    \n    # Iterate through dishes\n    for i in range(N):\n        current_dish = A[i]\n        current_satisfaction = B[current_dish - 1]\n        \n        # If this is not the first dish\n        if previous_dish is not None:\n            # Add satisfaction points from eating the previous dish\n            current_satisfaction += C[previous_dish - 1]\n        \n        # Update total satisfaction points\n        total_satisfaction += current_satisfaction\n        \n        # Update previous dish for next iteration\n        previous_dish = current_dish\n    \n    return str(total_satisfaction)\n\nstdin = \"\"\"3\n3 1 2\n2 5 4\n3\"\"\"\nprint(solution(stdin)) # Output: 14 "
    },
    {
        "number": 4271,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    A = list(map(int, stdin[1].split()))\n    B = list(map(int, stdin[2].split()))\n    C = list(map(int, stdin[3].split()))\n\n    satisfaction_points = B[0]\n    for i in range(1, N):\n        if i == N - 1:\n            satisfaction_points += B[i] + C[i - 1]\n        else:\n            satisfaction_points += B[i]\n\n    return str(satisfaction_points)\n"
    },
    {
        "number": 4271,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin[0])\n    A = list(map(int, stdin[1].split()))\n    B = list(map(int, stdin[2].split()))\n    C = list(map(int, stdin[3].split()))\n\n    # Initialize variables\n    total_satisfaction = 0\n    prev_dish = -1\n\n    # Iterate over all dishes\n    for i in range(N):\n        # Calculate satisfaction points\n        satisfaction = B[A[i] - 1]\n        if i > 0 and A[i] == A[i - 1] + 1:\n            satisfaction += C[prev_dish - 1]\n\n        # Update total satisfaction\n        total_satisfaction += satisfaction\n        prev_dish = A[i]\n\n    # Return the sum of satisfaction points\n    return str(total_satisfaction)"
    },
    {
        "number": 4272,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split(\"\\n\")\n    N = int(N)\n    count = 0\n    for i in range(N - 2):\n        if S[i:i+3] == \"ABC\":\n            count += 1\n    return count\n\ndef"
    },
    {
        "number": 4272,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.splitlines()[0])\n    S = stdin.splitlines()[1]\n    count = 0\n    for i in range(N - 2):\n        if S[i:i+3] == \"ABC\":\n            count += 1\n    return str(count)"
    },
    {
        "number": 4272,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.splitlines()[0])\n    S = stdin.splitlines()[1]\n    count = 0\n    for i in range(N - 2):\n        if S[i:i+3] == \"ABC\":\n            count += 1\n    return count\n\nstdin = \"10\\nZABCDBABCQ\"\nprint(solution(stdin)) # Output: 2 "
    },
    {
        "number": 4272,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    S = stdin[1]\n    count = 0\n    for i in range(len(S) - 2):\n        if S[i:i+3] == 'ABC':\n            count += 1\n    return count"
    },
    {
        "number": 4272,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, S = map(str, stdin.split())\n    N = int(N)\n    count = 0\n    for i in range(N - 2):\n        if S[i:i+3] == \"ABC\":\n            count += 1\n    return count"
    },
    {
        "number": 4272,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    S = stdin.split('\\n')[1]\n    count = 0\n    for i in range(N-2):\n        if S[i:i+3] == 'ABC':\n            count += 1\n    return count"
    },
    {
        "number": 4272,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, S = input().split()\n    N = int(N)\n    count = 0\n    for i in range(N-2):\n        if S[i:i+3] == \"ABC\":\n            count += 1\n    return count\n\nstdin = \"\"\"10\nZABCDBABCQ\"\"\"\n\nprint(solution(stdin)) "
    },
    {
        "number": 4272,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, S = map(str, stdin.split())\n    N = int(N)\n    count = 0\n    for i in range(N - 2):\n        if S[i:i+3] == \"ABC\":\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4272,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, S = map(str, stdin.split())\n    N = int(N)\n    count = 0\n    for i in range(N - 2):\n        if S[i:i+3] == \"ABC\":\n            count += 1\n    return count"
    },
    {
        "number": 4272,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, S = map(str, stdin.split())\n    count = 0\n    for i in range(len(S) - 2):\n        if S[i:i+3] == 'ABC':\n            count += 1\n    return count\n"
    },
    {
        "number": 4273,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    S = [s.strip() for s in stdin.split('\\n')[1:]]\n\n    def choose_three(letters):\n        if len(letters) < 3:\n            return 0\n        count = 1\n        for i in range(len(letters) - 1):\n            for j in range(i + 1, len(letters)):\n                if letters[i] != letters[j]:\n                    count += choose_three(letters[j + 1:])\n        return count\n\n    count = 0\n    for s in S:\n        count += choose_three(s)\n\n    return str(count % (10**9 + 7))\n"
    },
    {
        "number": 4273,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    S = [s.strip() for s in stdin.split('\\n')[1:]]\n    unique_count = 0\n    for i in range(N):\n        for j in range(N):\n            if i != j:\n                if S[i][0] != S[j][0]:\n                    unique_count += 1\n    return unique_count // 6\n"
    },
    {
        "number": 4273,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, stdin = stdin.split(\"\\n\", 1)\n    S = stdin.split(\"\\n\")\n    M = 0\n    A = 0\n    R = 0\n    C = 0\n    H = 0\n    S = set(S)\n    for name in S:\n        if name[0] == \"M\":\n            M += 1\n        elif name[0] == \"A\":\n            A += 1\n        elif name[0] == \"R\":\n            R += 1\n        elif name[0] == \"C\":\n            C += 1\n        elif name[0] == \"H\":\n            H += 1\n    total = min(M, A, R, C, H)\n    return total\n\ndef"
    },
    {
        "number": 4273,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def count_ways(name_set: set, letter: str) -> int:\n        ways = 0\n        for name in name_set:\n            if name.startswith(letter):\n                ways += 1\n        return ways\n\n    N = int(stdin.split(\"\\n\")[0])\n    S_i = set(stdin.split(\"\\n\")[1:])\n\n    all_letters = \"MARCHOH\"\n    ways = 0\n    for letter in all_letters:\n        if count_ways(S_i, letter) >= 3:\n            ways += 1\n    return str(ways)\n"
    },
    {
        "number": 4273,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.splitlines()[0])\n    names = stdin.splitlines()[1:]\n\n    counts = {'M': 0, 'A': 0, 'R': 0, 'C': 0, 'H': 0}\n\n    for name in names:\n        letter = name[0]\n        counts[letter] += 1\n\n    total = 1\n    for count in counts.values():\n        total *= count\n\n    ways = total * 3 // 2\n\n    return str(ways)\n"
    },
    {
        "number": 4273,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    names = stdin.split(\"\\n\")[1:]\n    \n    count = 0\n    for i in range(N-2):\n        for j in range(i+1, N-1):\n            for k in range(j+1, N):\n                if names[i][0] != names[j][0] and names[i][0] != names[k][0] and names[j][0] != names[k][0]:\n                    count += 1\n    \n    return str(count)\n\ninput_str = \"5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\"\nprint(solution(input_str)) "
    },
    {
        "number": 4273,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(input())\n    S = [input() for _ in range(N)]\n\n    def count_ways(letter: str) -> int:\n        letter_count = [0] * 26\n        for s in S:\n            if s[0] == letter:\n                letter_count[ord(s[1]) - ord('A')] += 1\n        ways = 1\n        for count in letter_count:\n            if count > 1:\n                ways *= factorial(count) // (factorial(count - 1) * count)\n        return ways\n\n    def factorial(n: int) -> int:\n        result = 1\n        for i in range(1, n + 1):\n            result *= i\n        return result\n\n    ways = 0\n    for letter in \"MARC\":\n        ways += count_ways(letter)\n\n    print(ways)\n\n\nstdin = \"\"\"5\nMASHIKE\nRUMOI\nOBIRA\nHABORO\nHOROKANAI\n\"\"\"\n\nsolution(stdin)\n"
    },
    {
        "number": 4273,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, *S = stdin.split()\n    N = int(N)\n    M_count = 0\n    A_count = 0\n    R_count = 0\n    C_count = 0\n    H_count = 0\n    M_set = set()\n    A_set = set()\n    R_set = set()\n    C_set = set()\n    H_set = set()\n\n    for name in S:\n        if name[0] == 'M':\n            M_count += 1\n            M_set.add(name)\n        elif name[0] == 'A':\n            A_count += 1\n            A_set.add(name)\n        elif name[0] == 'R':\n            R_count += 1\n            R_set.add(name)\n        elif name[0] == 'C':\n            C_count += 1\n            C_set.add(name)\n        elif name[0] == 'H':\n            H_count += 1\n            H_set.add(name)\n\n    M_choose_2 = M_count * (M_count - 1) // 2\n    A_choose_2 = A_count * (A_count - 1) // 2\n    R_choose_2 = R_count * (R_count - 1) // 2\n    C_choose_2 = C_count * (C_count - 1) // 2\n    H_choose_2 = H_count * (H_count - 1) // 2\n\n    choose_3 = M_choose_2 * A_count * R_count * C_count * H_count\n\n    return str(choose_3)"
    },
    {
        "number": 4273,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def has_no_duplicates(names):\n        seen = set()\n        for name in names:\n            if name in seen:\n                return False\n            seen.add(name)\n        return True\n\n    def is_valid(names):\n        return all(name[0] in 'MARCH' for name in names) and has_no_duplicates(names)\n\n    N = int(stdin.split(\"\\n\")[0])\n    S = stdin.split(\"\\n\")[1:]\n\n    count = 0\n    for i in range(N - 2):\n        for j in range(i + 1, N - 1):\n            for k in range(j + 1, N):\n                if is_valid([S[i], S[j], S[k]]):\n                    count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4273,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, S = map(int, input().split())\n    M, A, R, C, H = set(range(1, N + 1)), set(range(1, N + 1)), set(range(1, N + 1)), set(range(1, N + 1)), set(range(1, N + 1))\n\n    for i in range(1, N + 1):\n        for j in range(i + 1, N + 1):\n            if S[i - 1][0] == S[j - 1][0]:\n                if S[i - 1][0] == 'M':\n                    M.discard(i)\n                    M.discard(j)\n                elif S[i - 1][0] == 'A':\n                    A.discard(i)\n                    A.discard(j)\n                elif S[i - 1][0] == 'R':\n                    R.discard(i)\n                    R.discard(j)\n                elif S[i - 1][0] == 'C':\n                    C.discard(i)\n                    C.discard(j)\n                elif S[i - 1][0] == 'H':\n                    H.discard(i)\n                    H.discard(j)\n\n    return sum([len(M), len(A), len(R), len(C), len(H)])\n"
    },
    {
        "number": 4274,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    return \"Yes\" if M == N else \"No\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    return 'Yes' if M == N else 'No'\n"
    },
    {
        "number": 4274,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    if M == N:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n\ndef"
    },
    {
        "number": 4274,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    if M == N:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4274,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    if M == N:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4274,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    if M == N:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4274,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    return \"Yes\" if M == N else \"No\""
    },
    {
        "number": 4274,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    return \"Yes\" if M == N else \"No\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    if M == N:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4274,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    return \"Yes\" if M == N else \"No\"\n\ndef"
    },
    {
        "number": 4275,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if S[2] == S[3] and S[4] == S[5]:\n        return \"Yes\"\n    return \"No\"\n\ninput_string = input()\nprint(solution(input_string))\n"
    },
    {
        "number": 4275,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    if S[2] == S[3] and S[4] == S[5]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4275,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s[2] == s[3] and s[4] == s[5]:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    \n    if s[2] == s[3] and s[4] == s[5]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4275,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n\n    if S[2] == S[3] and S[4] == S[5]:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4275,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()[0]\n    if s[2] == s[3] and s[4] == s[5]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4275,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    \n    if S[2] == S[3] and S[4] == S[5]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4275,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    S = list(stdin)\n    if S[2] == S[3] and S[4] == S[5]:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if S[2] == S[3] and S[4] == S[5]:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s[2] == s[3] and s[4] == s[5]:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ninput_str = input(\"Enter a string of length 6 consisting of lowercase English letters: \")\nprint(solution(input_str)) "
    },
    {
        "number": 4276,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.strip().split('\\n')\n    N, T = map(int, input_list[0].split())\n    routes = []\n    for i in range(1, len(input_list)):\n        c, t = map(int, input_list[i].split())\n        routes.append((c, t))\n\n    min_cost = float('inf')\n    for c, t in routes:\n        if t <= T and c < min_cost:\n            min_cost = c\n\n    if min_cost == float('inf'):\n        return 'TLE'\n    else:\n        return str(min_cost)"
    },
    {
        "number": 4276,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def read_input() -> tuple:\n        N, T = map(int, stdin.readline().split())\n        c_t = [tuple(map(int, line.split())) for line in stdin.read().splitlines()]\n        return N, T, c_t\n\n    def find_min_cost(N, T, c_t):\n        min_cost = TLE\n        for i in range(N):\n            cost, time = c_t[i]\n            if time <= T and cost < min_cost:\n                min_cost = cost\n        return min_cost\n\n    N, T, c_t = read_input()\n    min_cost = find_min_cost(N, T, c_t)\n    return str(min_cost)\n"
    },
    {
        "number": 4276,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split()[0:2])\n    c_t = [list(map(int, stdin.split()[2 * i:2 * (i + 1)])) for i in range(N)]\n    c_t.sort(key=lambda x: x[1])\n    \n    time_spent = 0\n    min_cost = float('inf')\n    for cost, time in c_t:\n        time_spent += time\n        if time_spent <= T:\n            min_cost = min(min_cost, cost)\n        else:\n            break\n    return min_cost if min_cost != float('inf') else 'TLE'\n\ndef"
    },
    {
        "number": 4276,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split()[:2])\n    c_t = [tuple(map(int, input().split())) for _ in range(N)]\n    \n    c_t.sort(key=lambda x: x[1])\n    min_cost = T + 1\n    \n    for c, t in c_t:\n        if t <= T:\n            min_cost = min(min_cost, c)\n        else:\n            break\n    \n    if min_cost == T + 1:\n        return \"TLE\"\n    else:\n        return min_cost"
    },
    {
        "number": 4276,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split()[:2])\n    costs = [int(x) for x in stdin.split()[2:]]\n    min_cost = T + 1\n    for i in range(0, N, 2):\n        cost, time = costs[i:i+2]\n        if time <= T and cost < min_cost:\n            min_cost = cost\n    return str(min_cost) if min_cost != T + 1 else \"TLE\"\n"
    },
    {
        "number": 4276,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, input().split())\n    routes = []\n\n    for _ in range(N):\n        c, t = map(int, input().split())\n        routes.append((c, t))\n\n    routes.sort(key=lambda x: (x[1], x[0]))\n    best_route = TLE\n\n    for c, t in routes:\n        if t <= T:\n            best_route = min(best_route, c)\n        else:\n            break\n\n    return str(best_route)\n"
    },
    {
        "number": 4276,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split()[0:2])\n    c_t = [list(map(int, stdin.split()[2 * i:2 * i + 2])) for i in range(N)]\n    c_t.sort(key=lambda x: x[1])\n    c_t.append([0, T + 1])  # Add a dummy route with cost T+1 and time T+1\n    min_cost = float('inf')\n    for i in range(N):\n        if c_t[i][1] <= T and c_t[i][0] < min_cost:\n            min_cost = c_t[i][0]\n    if min_cost == float('inf'):\n        return \"TLE\"\n    else:\n        return str(min_cost)\n"
    },
    {
        "number": 4276,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, input().split())\n    routes = []\n\n    for _ in range(N):\n        c, t = map(int, input().split())\n        routes.append((c, t))\n\n    routes.sort(key=lambda x: (x[1], x[0]))\n\n    total_cost = 0\n    for cost, time in routes:\n        total_cost += cost\n        if total_cost > T:\n            return \"TLE\"\n\n    return total_cost\n"
    },
    {
        "number": 4276,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split()[0:2])\n    c = []\n    t = []\n    for _ in range(N):\n        ci, ti = map(int, stdin.split()[2:4])\n        c.append(ci)\n        t.append(ti)\n    c_t = sorted(zip(c, t), key=lambda x: x[0])\n    min_cost = TLE\n    for cost, time in c_t:\n        if time <= T and cost < min_cost:\n            min_cost = cost\n    return min_cost if min_cost != TLE else \"TLE\"\n\ndef"
    },
    {
        "number": 4276,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    N, T = map(int, input_list.pop(0).split())\n    routes = []\n    for i in range(N):\n        c, t = map(int, input_list.pop(0).split())\n        routes.append((c, t))\n\n    min_cost = TLE\n    for c, t in routes:\n        if t <= T:\n            if c < min_cost:\n                min_cost = c\n        else:\n            break\n\n    return min_cost"
    },
    {
        "number": 4277,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    return (A + B) * N\n"
    },
    {
        "number": 4277,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    return 2 * N * A + B if 2 * N * A + B < N * A + B else N * A + B\n\ndef"
    },
    {
        "number": 4277,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    total_train_cost = N * A\n    taxi_cost = B\n    minimum_expense = total_train_cost + taxi_cost\n    return str(minimum_expense)\n\nstdin = input(\"Enter input in the format N A B: \")\nprint(\"Minimum total travel expense:\", solution(stdin)) "
    },
    {
        "number": 4277,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    return N * A + B if N * A < B else B\n\nstdin = \"4 2 9\"\nprint(solution(stdin)) "
    },
    {
        "number": 4277,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    return max(A, B) * N\n"
    },
    {
        "number": 4277,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    return A * N + B"
    },
    {
        "number": 4277,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    return str(N * A + min(0, B - N * A))\n\ndef"
    },
    {
        "number": 4277,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    return str((N * A) + B)\n\ninput_string = \"4 2 9\"\nprint(solution(input_string)) "
    },
    {
        "number": 4277,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    return N * A + B if N * A + B <= B else B"
    },
    {
        "number": 4277,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    return min(N * A, B)\n\ndef"
    },
    {
        "number": 4278,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    s = {}\n    for line in stdin.split(\"\\n\")[1:]:\n        key = \"\".join(sorted(line))\n        if key in s:\n            s[key].append(line)\n        else:\n            s[key] = [line]\n    count = 0\n    for value in s.values():\n        if len(value) > 1:\n            count += len(value) * (len(value) - 1) // 2\n    return count\n\ndef"
    },
    {
        "number": 4278,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    strings = stdin.split(\"\\n\")[1:]\n\n    def is_anagram(str1: str, str2: str) -> bool:\n        return sorted(str1) == sorted(str2)\n\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if is_anagram(strings[i], strings[j]):\n                count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4278,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    strings = stdin.split(\"\\n\")[1:]\n\n    def is_anagram(s1: str, s2: str) -> bool:\n        return sorted(s1) == sorted(s2)\n\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if is_anagram(strings[i], strings[j]):\n                count += 1\n\n    return count\n"
    },
    {
        "number": 4278,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def is_anagram(s1: str, s2: str) -> bool:\n        return sorted(s1) == sorted(s2)\n\n    N = int(stdin[0])\n    s = stdin[1:].split(\"\\n\")\n    count = 0\n\n    for i in range(N - 1):\n        for j in range(i + 1, N):\n            if is_anagram(s[i], s[j]):\n                count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4278,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    s = stdin.split(\"\\n\")[1:]\n\n    def is_anagram(s1: str, s2: str) -> bool:\n        if len(s1) != len(s2):\n            return False\n        s1_dict = {}\n        s2_dict = {}\n        for char in s1:\n            s1_dict[char] = s1_dict.get(char, 0) + 1\n        for char in s2:\n            s2_dict[char] = s2_dict.get(char, 0) + 1\n        return s1_dict == s2_dict\n\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if is_anagram(s[i], s[j]):\n                count += 1\n    return count\n"
    },
    {
        "number": 4278,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_anagram(s1: str, s2: str) -> bool:\n        return sorted(s1) == sorted(s2)\n\n    N = int(stdin[0])\n    s = [stdin[i] for i in range(1, N * 11, 11)]\n\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if is_anagram(s[i], s[j]):\n                count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4278,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin.split('\\n')\n    N = int(input_str[0])\n    s = input_str[1:]\n    count = 0\n    \n    for i in range(N):\n        for j in range(i + 1, N):\n            if sorted(s[i]) == sorted(s[j]):\n                count += 1\n    \n    return count\n\ninput_str = '''3\nacornistnt\npeanutbomb\nconstraint'''\n\nresult = solution(input_str)\nprint(result)"
    },
    {
        "number": 4278,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    s = [set(s) for s in stdin.split('\\n')[1:]]\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if s[i] == s[j]:\n                count += 1\n    return count\n\ndef"
    },
    {
        "number": 4278,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    s = [stdin.split('\\n')[i] for i in range(1, N+1)]\n    \n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if sorted(s[i]) == sorted(s[j]):\n                count += 1\n    \n    return str(count)\n"
    },
    {
        "number": 4278,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, *strings = stdin.strip().split('\\n')\n    N = int(N)\n    anagram_count = 0\n\n    for i in range(N):\n        for j in range(i + 1, N):\n            if sorted(strings[i]) == sorted(strings[j]):\n                anagram_count += 1\n\n    return str(anagram_count)"
    },
    {
        "number": 4279,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split()[0])\n    sequence = \"11212312341234512345612345671234567812345678912345678910\"\n    result = []\n\n    for _ in range(q):\n        k = int(stdin.split()[1])\n        digit = sequence[k - 1]\n        result.append(digit)\n\n    return \"\\n\".join(map(str, result))\n\n\ninput_data = \"5\\n1\\n3\\n20\\n38\\n56\"\noutput_data = solution(input_data)\nprint(output_data)\n\ninput_data = \"4\\n2132\\n506\\n999999999\\n1000000000\"\noutput_data = solution(input_data)\nprint(output_data) "
    },
    {
        "number": 4279,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.splitlines()[0])\n    sequence = \"11212312341234512345612345671234567812345678912345678910\"\n    sequence = [int(i) for i in sequence]\n    answer = []\n\n    for _ in range(q):\n        k_i = int(stdin.splitlines()[1].split()[0])\n        answer.append(str(sequence[k_i - 1]))\n        del sequence[k_i - 1]\n\n    return \"\\n\".join(answer)\n\n\ndef"
    },
    {
        "number": 4279,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    q, *queries = stdin.split('\\n')\n    q = int(q)\n\n    sequence = \"112123123412345\"\n    for i in range(5, 1000001):\n        sequence += str(i) * i\n\n    result = []\n    for query in queries:\n        k = int(query)\n        result.append(sequence[k - 1])\n\n    return '\\n'.join(result)\n\n\ninput_cases = [\n    \"5\\n1\\n3\\n20\\n38\\n56\",\n    \"4\\n2132\\n506\\n999999999\\n1000000000\"\n]\n\nfor input_case in input_cases:\n    print(solution(input_case)) "
    },
    {
        "number": 4279,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    q, *queries = stdin.split()\n    q = int(q)\n\n    sequence = \"112123123412345\"\n    length = len(sequence)\n\n    def find_digit(k: int) -> int:\n        if k < length:\n            return int(sequence[k])\n        else:\n            return 0\n\n    for i in range(q):\n        k = int(queries[i])\n        print(find_digit(k))"
    },
    {
        "number": 4279,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    q, *queries = stdin.split()\n    q = int(q)\n    result = []\n\n    for i in range(q):\n        k_i = int(queries[i])\n        sequence = \"112123123412345\"\n        current_position = 1\n        for j in range(1, k_i):\n            current_position += j\n            next_number = len(sequence) + current_position - 1\n            if next_number > k_i:\n                break\n            sequence += str(next_number)\n        result.append(sequence[k_i - 1])\n\n    return \"\\n\".join(result)\n\n\ndef"
    },
    {
        "number": 4279,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    queries, *query_values = stdin.split()\n    queries = int(queries)\n    query_values = [int(value) for value in query_values]\n\n    sequence = \"112123123412345\"\n    for i in range(56, 1000000000):\n        sequence += str(i) * (i - 55)\n\n    result = []\n    for k in query_values:\n        if k <= len(sequence):\n            result.append(sequence[k - 1])\n        else:\n            result.append(sequence[-1])\n\n    return \" \".join(result)\n\n\ndef"
    },
    {
        "number": 4279,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split()[0])\n    sequence = \"112123123412345\"\n\n    for i in range(5, 56):\n        for j in range(1, i + 1):\n            if j <= i - j:\n                sequence += str(j + i - j) + str(j)\n            else:\n                sequence += str(i - j + 1) + str(j)\n\n    for i in range(q):\n        k_i = int(stdin.split()[i + 1])\n        answer = sequence[k_i - 1]\n        yield answer\n\n\ninput_stdin = \"5\\n1\\n3\\n20\\n38\\n56\"\noutput_stdout = \"\\n\".join(str(x) for x in solution(input_stdin))\nprint(output_stdout) "
    },
    {
        "number": 4279,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.splitlines()[0])\n    sequence = \"11212312341234512345612345671234567812345678912345678910\"\n    result = []\n\n    for i in range(q):\n        k = int(stdin.splitlines()[i + 1])\n        index = sum(len(sequence) - 1 - i for i in range(k))\n        result.append(sequence[index])\n\n    return \"\\n\".join(result)\n"
    },
    {
        "number": 4279,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split()[0])\n    input_data = stdin.split()[1:]\n    sequence = \"11212312341234512345612345671234567812345678912345678910\"\n    for i in range(q):\n        k = int(input_data[i])\n        digit = int(sequence[k - 1])\n        yield str(digit)\n\n\ninput_data = \"5\\n1\\n3\\n20\\n38\\n56\\n2132\\n506\\n999999999\\n1000000000\"\noutput_data = \"\".join(solution(input_data))\nprint(output_data)\n"
    },
    {
        "number": 4279,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def create_sequence(n: int) -> str:\n        sequence = '1'\n        for i in range(2, n + 1):\n            sequence += str(i) * i\n        return sequence\n\n    def find_digit(sequence: str, k: int) -> int:\n        return int(sequence[k - 1])\n\n    q = int(stdin.splitlines()[0])\n    sequence = create_sequence(56)\n    for i in range(1, q + 1):\n        k = int(stdin.splitlines()[i])\n        digit = find_digit(sequence, k)\n        print(digit)\n"
    },
    {
        "number": 4280,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.splitlines()\n    n, k = map(int, input_lines[0].split())\n    roads = [tuple(map(int, line.split())) for line in input_lines[1:]]\n\n    def find_min_companies(roads, n, k):\n        def dfs(city, visited, component, companies):\n            visited.add(city)\n            component.append(city)\n            for neighbor in cities[city - 1]:\n                if neighbor not in visited:\n                    companies_neighbor = dfs(neighbor, visited, component, companies)\n                    companies.append(companies_neighbor)\n            return companies.index(min(companies)) + 1\n\n        cities = [[] for _ in range(n)]\n        for road in roads:\n            cities[road[0] - 1].append(road[1])\n            cities[road[1] - 1].append(road[0])\n\n        start = 1\n        visited = set()\n        component = []\n        companies = [[] for _ in range(n)]\n        for city in range(1, n + 1):\n            if city not in visited:\n                company = dfs(city, visited, component, companies)\n                companies[company - 1].append(city)\n\n        return sum(len(company) > 1 for company in companies) <= k, min(len(company) for company in companies if len(company) > 0)\n\n    min_companies, company_size = find_min_companies(roads, n, k)\n    if min_companies:\n        return str(company_size)\n    else:\n        return \"0\"\n"
    },
    {
        "number": 4280,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    edges = [list(map(int, line.split())) for line in stdin.split('\\n')[1:-1]]\n\n    def count_good_cities(companies):\n        company_edges = [[] for _ in range(r)]\n        for x, y in edges:\n            company_edges[companies[x] - 1].append((x, y))\n            company_edges[companies[y] - 1].append((y, x))\n\n        return sum(1 for company_edge in company_edges if len(set(e[1] for e in company_edge)) > 1)\n\n    def get_companies(companies, k):\n        if count_good_cities(companies) <= k:\n            return companies\n\n        # Find the company with the most number of edges\n        company_count = [0] * r\n        for company in set(companies):\n            company_count[company - 1] = sum(1 for x, y in edges if x in companies and y in companies and companies[x] == company)\n\n        max_company = company_count.index(max(company_count)) + 1\n\n        # Add a new company and distribute the edges\n        companies = [max_company if x == max_company else companies[x] for x in range(n)]\n        for x, y in [e for e in edges if e[0] == max_company or e[1] == max_company]:\n            companies[x], companies[y] = companies[y], companies[x]\n\n        return get_companies(companies, k)\n\n    r = n - 1\n    companies = list(range(1, r + 1))\n    companies = get_companies(companies, k)\n    companies_str = ' '.join(map(str, companies))\n\n    return f\"{r}\\n{companies_str}\"\n\ninput_file = \"input.txt\"\nwith open(input_file, \"r\") as file:\n    stdin = file.read()\n    result = solution(stdin)\n\nwith open(\"output.txt\", \"w\") as file:\n    file.write(result) "
    },
    {
        "number": 4280,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def get_company(n, roads):\n        # Initialize company for each road\n        company = [i + 1 for i in range(n - 1)]\n        for i in range(n - 1):\n            company[i] = i + 1\n\n        # Assign each road to a company\n        for i in range(n - 1):\n            for j in range(i + 1, n - 1):\n                # Check if roads (i, j) and (j, i) belong to the same company\n                if company[i] == company[j]:\n                    continue\n                # Check if roads (i, j) and (j, i) are connected\n                if (roads[i][1], roads[j][1]) in zip(roads[i][0], roads[j][0]):\n                    continue\n                # Assign roads (i, j) and (j, i) to the same company\n                company[i] = company[j]\n\n        return company\n\n    def count_bad_cities(n, k, company):\n        bad_cities = 0\n        for i in range(n - 1):\n            if all(company[j] != company[i] for j in range(n - 1) if roads[i][0] == roads[j][0] or roads[i][0] == roads[j][1]):\n                bad_cities += 1\n        return bad_cities\n\n    n, k = map(int, stdin.split()[:2])\n    roads = [tuple(map(int, stdin.split()[2:4])) for _ in range(n - 1)]\n    company = get_company(n, roads)\n    r = len(set(company))\n    print(r)\n    print(\" \".join(map(str, company)))\n"
    },
    {
        "number": 4280,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    graph = [[] for _ in range(n)]\n    for _ in range(n-1):\n        x, y = map(int, stdin.split()[2:4])\n        x -= 1\n        y -= 1\n        graph[x].append(y)\n        graph[y].append(x)\n\n    def dfs(v: int, parent: int, company: int) -> int:\n        for u in graph[v]:\n            if u != parent:\n                dfs(u, v, company)\n        if company < r:\n            companies[v] = company\n\n    r = n - 1\n    companies = [0] * n\n    for i in range(1, r+1):\n        for j in range(n):\n            if companies[j] == 0:\n                dfs(j, -1, i)\n                if sum(1 for u in graph[j] if companies[u] == i) > 1:\n                    r -= 1\n                    if r == 0:\n                        break\n        if r == 0:\n            break\n\n    output = r + 1\n    output_companies = [0] * (n-1)\n    for i in range(n-1):\n        output_companies[i] = companies[i+1]\n\n    return f\"{output}\\n{' '.join(map(str, output_companies))}\"\n\n\ndef"
    },
    {
        "number": 4280,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    roads = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:] if line]\n\n    # Calculate the number of companies needed\n    company_count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            if (i, j) in roads or (j, i) in roads:\n                company_count += 1\n\n    company_count //= 2\n\n    # Add one more company if there are more than k not good cities\n    if company_count > k:\n        company_count += 1\n\n    # Generate the assignment\n    companies = [1] * len(roads)\n    for i in range(len(roads)):\n        for j in range(i + 1, len(roads)):\n            if (roads[i][0], roads[i][1]) == (roads[j][0], roads[j][1]):\n                companies[i] = companies[j]\n            if (roads[i][1], roads[i][0]) == (roads[j][0], roads[j][1]):\n                companies[i] = companies[j]\n\n    # Print the result\n    result = str(company_count) + '\\n' + ' '.join(map(str, companies))\n    return result\n"
    },
    {
        "number": 4280,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    adjacency_list = [[] for _ in range(n)]\n\n    for edge in edges:\n        adjacency_list[edge[0] - 1].append(edge[1] - 1)\n        adjacency_list[edge[1] - 1].append(edge[0] - 1)\n\n    def dfs(v, parent, company):\n        good_city = True\n        for child in adjacency_list[v]:\n            if child == parent:\n                continue\n            new_company = (company + 1) % r\n            if dfs(child, v, new_company):\n                good_city = False\n        return good_city\n\n    r = 1\n    while not dfs(0, -1, 0):\n        r += 1\n\n    companies = [1] * (n - 1)\n    for i in range(n - 1):\n        companies[i] = (i + r) % r\n\n    output = f\"{r}\\n\" + \" \".join(map(str, companies))\n    return output\n\n\ninput_data = \"\"\"6 2\n1 4\n4 3\n3 5\n3 6\n5 2\n\"\"\"\n\nprint(solution(input_data))\n\ninput_data = \"\"\"4 2\n3 1\n1 4\n1 2\n\"\"\"\n\nprint(solution(input_data))\n\ninput_data = \"\"\"10 2\n10 3\n1 2\n1 3\n1 4\n2 5\n2 6\n2 7\n3 8\n3 9\n\"\"\"\n\nprint(solution(input_data)) "
    },
    {
        "number": 4280,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    roads = stdin.split('\\n')[1:-1]\n    cities = {i+1: set() for i in range(n)}\n    companies = [set() for _ in range(n)]\n\n    for road in roads:\n        x, y = map(int, road.split())\n        companies[x-1].add(y-1)\n        companies[y-1].add(x-1)\n        cities[x].add(y-1)\n        cities[y].add(x-1)\n\n    r = 1\n    good_cities = set()\n    for company in companies:\n        if len(company) == 0:\n            r += 1\n        else:\n            good_cities |= company\n\n    if len(good_cities) <= k:\n        return r\n    else:\n        return -1\n"
    },
    {
        "number": 4280,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    adj = [[] for _ in range(n)]\n    for _ in range(n-1):\n        x, y = map(int, input().split())\n        adj[x-1].append(y-1)\n        adj[y-1].append(x-1)\n\n    def dfs(v, p, comp, visited):\n        visited[v] = True\n        comp[v] = p\n        for u in adj[v]:\n            if not visited[u]:\n                dfs(u, comp[v], comp, visited)\n\n    visited = [False] * n\n    comp = [-1] * n\n    dfs(0, -1, comp, visited)\n\n    def get_comp(v):\n        c = set()\n        q = [v]\n        while q:\n            u = q.pop()\n            c.add(comp[u])\n            for v in adj[u]:\n                if not visited[v] and comp[v] != -1:\n                    q.append(v)\n        return c\n\n    def count_good_cities(comp):\n        good = 0\n        for i in range(n):\n            c = get_comp(i)\n            if len(c) == 1:\n                good += 1\n        return good\n\n    companies = []\n    for i in range(n):\n        c = get_comp(i)\n        if len(c) > 1:\n            for c_id in c:\n                if c_id not in companies:\n                    companies.append(c_id)\n\n    r = len(companies)\n    good = count_good_cities(comp)\n\n    if good > k:\n        r += 1\n\n    return r\n\n\ninput_str = \"\"\"6 2\n1 4\n4 3\n3 5\n3 6\n5 2\"\"\"\n\noutput_str = str(solution(input_str))\nprint(output_str)\n\ninput_str = \"\"\"4 2\n3 1\n1 4\n1 2\"\"\"\n\noutput_str = str(solution(input_str))\nprint(output_str)\n\ninput_str = \"\"\"10 2\n10 3\n1 2\n1 3\n1 4\n2 5\n2 6\n2 7\n3 8\n3 9\"\"\"\n\noutput_str = str(solution(input_str))\nprint(output_str) "
    },
    {
        "number": 4280,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def find_minimal_companies(roads, n, k):\n        # Create adjacency list\n        adjacency = [[] for _ in range(n)]\n        for road in roads:\n            adjacency[road[0] - 1].append(road[1] - 1)\n            adjacency[road[1] - 1].append(road[0] - 1)\n        \n        def dfs(node, visited, company):\n            visited[node] = company\n            for neighbor in adjacency[node]:\n                if not visited[neighbor]:\n                    dfs(neighbor, visited, company)\n        \n        companies = 0\n        visited = [False] * n\n        for i in range(n):\n            if not visited[i]:\n                dfs(i, visited, companies)\n                companies += 1\n        \n        return companies\n\n    def assign_roads_to_companies(roads, n, k, companies):\n        # Create adjacency list\n        adjacency = [[] for _ in range(n)]\n        for road in roads:\n            adjacency[road[0] - 1].append(road[1] - 1)\n            adjacency[road[1] - 1].append(road[0] - 1)\n        \n        def dfs(node, visited, company, used_companies):\n            visited[node] = company\n            used_companies[company] += 1\n            if used_companies[company] > k:\n                return False\n            for neighbor in adjacency[node]:\n                if not visited[neighbor]:\n                    if dfs(neighbor, visited, company, used_companies):\n                        return True\n                    for j in range(companies):\n                        if dfs(neighbor, visited, j, used_companies):\n                            return True\n            return False\n        \n        for i in range(companies):\n            visited = [False] * n\n            used_companies = [0] * companies\n            if not dfs(0, visited, i, used_companies):\n                return False\n        \n        return True\n\n    def solve(n, k):\n        min_companies = find_minimal_companies(roads, n, k)\n        if not assign_roads_to_companies(roads, n, k, min_companies):\n            return 0\n        return min_companies\n\n    def main():\n        n, k = map(int, stdin.readline().split())\n        roads = [list(map(int, stdin.readline().split())) for _ in range(n-1)]\n        r = solve(n, k)\n        print(r)\n        print(\" \".join(map(str, [1] * n)))\n\n    roads = []\n    roads = [list(map(int, stdin.readline().split())) for _ in range(n-1)]\n    main()"
    },
    {
        "number": 4280,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(node, used, graph, comp, visited):\n        visited[node] = True\n        for neighbor in graph[node]:\n            if not used[neighbor]:\n                if comp[neighbor] == comp[node]:\n                    return True\n                used[neighbor] = True\n                if dfs(neighbor, used, graph, comp, visited):\n                    return True\n                used[neighbor] = False\n        return False\n\n    n, k = map(int, stdin.split()[:2])\n    roads = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    graph = [[] for _ in range(n + 1)]\n    for u, v in roads:\n        graph[u].append(v)\n        graph[v].append(u)\n\n    comp = [0] * (n + 1)\n    cnt = 0\n    for i in range(1, n + 1):\n        if not comp[i]:\n            used = [False] * (n + 1)\n            used[i] = True\n            if not dfs(i, used, graph, comp, [False] * (n + 1)):\n                cnt += 1\n            if cnt > k:\n                return 'impossible'\n            comp[i] = cnt\n\n    for i in range(1, n + 1):\n        if comp[i] == 0:\n            comp[i] = cnt + 1\n            cnt += 1\n            if cnt > k:\n                return 'impossible'\n\n    return str(cnt) + '\\n' + ' '.join(map(str, comp))\n\n\ninput_data = '''6 2\n1 4\n4 3\n3 5\n3 6\n5 2\n'''\n\nprint(solution(input_data)) "
    },
    {
        "number": 4281,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    x = list(map(int, stdin.splitlines()[1].split()))\n\n    def count_occupied_houses(x):\n        return len(set(x))\n\n    occupied_houses = count_occupied_houses(x)\n    min_occupied_houses = max(0, occupied_houses - 1)\n    max_occupied_houses = min(n + 1, occupied_houses + 1)\n\n    result = f\"{min_occupied_houses} {max_occupied_houses}\"\n    return result"
    },
    {
        "number": 4281,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    n = int(input_list[0])\n    x = list(map(int, input_list[1].split()))\n\n    # Initialize the number of occupied houses\n    occupied_houses = set()\n\n    # Perform moves for each friend\n    for i in range(n):\n        # Calculate the possible moves\n        possible_moves = {x[i] - 1, x[i] + 1, 0, n + 1}\n        # Remove moves that would go out of bounds\n        possible_moves.intersection_update(set(range(1, n + 2)))\n        # Remove moves that would result in a duplicate position\n        possible_moves.difference_update(occupied_houses)\n\n        # If there are no possible moves, the friend can stay at his house\n        if not possible_moves:\n            occupied_houses.add(x[i])\n        # Otherwise, choose a random move and perform it\n        else:\n            new_position = random.choice(list(possible_moves))\n            occupied_houses.add(new_position)\n\n    # Calculate the minimum and maximum number of occupied houses\n    min_occupied_houses = len(occupied_houses)\n    max_occupied_houses = n - len(occupied_houses)\n\n    return f\"{min_occupied_houses} {max_occupied_houses}\" "
    },
    {
        "number": 4281,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    positions = list(map(int, stdin.split('\\n')[1].split()))\n\n    min_occupied_houses = max(1, positions[0])\n    max_occupied_houses = min(n + 1, positions[-1])\n\n    for i in range(n - 1):\n        if positions[i] == positions[i + 1]:\n            continue\n        elif positions[i] == i + 1:\n            min_occupied_houses = min(min_occupied_houses, positions[i] - 1)\n        else:\n            min_occupied_houses = min(min_occupied_houses, positions[i] - 1, positions[i] + 1)\n\n        if positions[i + 1] == i + 2:\n            max_occupied_houses = max(max_occupied_houses, positions[i + 1] - 1)\n        else:\n            max_occupied_houses = max(max_occupied_houses, positions[i + 1] - 1, positions[i + 1] + 1)\n\n    return f\"{min_occupied_houses} {max_occupied_houses}\" "
    },
    {
        "number": 4281,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    x = list(map(int, input().split()))\n    min_occupied = max(1, x[0])\n    max_occupied = n + min(n - x[-1])\n\n    for i in range(n - 1):\n        if x[i] > x[i + 1]:\n            min_occupied += 1\n        if x[i] < x[i + 1]:\n            max_occupied += 1\n\n    return str(min_occupied) + \"\\n\" + str(max_occupied)\n\n\ninput_data = \"\"\"4\n1 2 4 4\n9\n1 1 8 8 8 4 4 4 4\n7\n4 3 7 1 4 3 3\"\"\"\noutput_data = \"\"\"2\n4\n3\n8\n3\n6\"\"\"\n\ninput_lines = input_data.splitlines()\noutput_lines = output_data.splitlines()\n\nfor i in range(len(input_lines)):\n    print(solution(input_lines[i]))\n    assert output_lines[i] == solution(input_lines[i])\n\nprint(\"All test cases passed!\") "
    },
    {
        "number": 4281,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    x = list(map(int, stdin.splitlines()[1].split()))\n\n    min_occupied_houses = 0\n    max_occupied_houses = 0\n\n    for i in range(n):\n        min_occupied_houses += 1\n        max_occupied_houses += 1\n        if x[i] != 1 and x[i] != n:\n            min_occupied_houses -= 1\n            max_occupied_houses -= 1\n        if x[i] == 1:\n            min_occupied_houses -= 1\n        if x[i] == n:\n            max_occupied_houses -= 1\n\n    return f\"{min_occupied_houses} {max_occupied_houses}\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *x = map(int, stdin.split())\n    x = [0] + sorted(x) + [n+1]\n    \n    def occupied_houses(move):\n        return len(set(x[i-1] + move[i-1] for i in range(1, n+1)))\n    \n    moves = [1, -1, 0]\n    min_occupied = occupied_houses([m for m in moves if x[i]-1 >= 0][:1] + [-m for m in moves if x[i]-1 < n])\n    max_occupied = occupied_houses([m for m in moves if x[i]-1 >= 0][:1] + [m for m in moves if x[i]-1 < n])\n    \n    return f\"{min_occupied} {max_occupied}\""
    },
    {
        "number": 4281,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    n = int(input_data[0])\n    x = list(map(int, input_data[1].split()))\n\n    min_occupied_houses = max(1, x[0])\n    max_occupied_houses = min(n, x[-1])\n\n    for i in range(1, n - 1):\n        min_occupied_houses = min(min_occupied_houses, x[i] - 1, x[i] + 1)\n        max_occupied_houses = max(max_occupied_houses, x[i] - 1, x[i] + 1)\n\n    return f\"{min_occupied_houses} {max_occupied_houses}\"\n\n\ndef"
    },
    {
        "number": 4281,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    x = list(map(int, stdin.splitlines()[1].split()))\n\n    min_occupied = 1\n    max_occupied = 0\n\n    for i in range(n):\n        min_occupied = min(min_occupied, x[i])\n        max_occupied = max(max_occupied, x[i])\n\n    min_occupied = max(min_occupied, 1)\n    max_occupied = min(max_occupied, n)\n\n    occupied_houses = [False] * (n + 2)\n    for i in range(n):\n        if x[i] - 1 >= 1:\n            occupied_houses[x[i] - 1] = True\n        if x[i] + 1 <= n:\n            occupied_houses[x[i] + 1] = True\n        if x[i] - 2 >= 1:\n            occupied_houses[x[i] - 2] = True\n        if x[i] + 2 <= n:\n            occupied_houses[x[i] + 2] = True\n        if x[i] - 3 >= 1:\n            occupied_houses[x[i] - 3] = True\n        if x[i] + 3 <= n:\n            occupied_houses[x[i] + 3] = True\n\n    min_occupied_houses = sum(occupied_houses)\n    max_occupied_houses = sum(occupied_houses)\n\n    for i in range(1, n + 1):\n        occupied_houses[i] = False\n    for i in range(n + 1, len(occupied_houses)):\n        occupied_houses[i] = False\n\n    min_occupied_houses = min(min_occupied_houses, sum(occupied_houses))\n    max_occupied_houses = max(max_occupied_houses, sum(occupied_houses))\n\n    return f\"{min_occupied} {max_occupied_houses}\"\n\n\ninput_stdin = \"\"\"4\n1 2 4 4\"\"\"\n\nprint(solution(input_stdin)) "
    },
    {
        "number": 4281,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = list(map(int, stdin.split()[1:]))\n\n    # calculate minimum and maximum number of occupied houses\n    occupied_houses = set()\n    for i in range(n):\n        if x[i] > 1:\n            occupied_houses.add(x[i] - 1)\n        if x[i] < n:\n            occupied_houses.add(x[i] + 1)\n        occupied_houses.add(x[i])\n\n    min_occupied_houses = len(occupied_houses)\n    max_occupied_houses = min_occupied_houses\n\n    # find possible minimum and maximum occupied houses\n    for i in range(n):\n        if x[i] > 1:\n            occupied_houses.add(x[i] - 1)\n        if x[i] < n:\n            occupied_houses.add(x[i] + 1)\n        else:\n            occupied_houses.add(x[i])\n\n        if len(occupied_houses) < min_occupied_houses:\n            min_occupied_houses = len(occupied_houses)\n        if len(occupied_houses) > max_occupied_houses:\n            max_occupied_houses = len(occupied_houses)\n\n        if x[i] > 1:\n            occupied_houses.remove(x[i] - 1)\n        if x[i] < n:\n            occupied_houses.remove(x[i] + 1)\n        else:\n            occupied_houses.remove(x[i])\n\n    # calculate minimum and maximum number of occupied houses with the constraints\n    for i in range(n):\n        if x[i] > 1:\n            occupied_houses.add(x[i] - 1)\n        if x[i] < n:\n            occupied_houses.add(x[i] + 1)\n        else:\n            occupied_houses.add(x[i])\n\n        if len(occupied_houses) < min_occupied_houses:\n            min_occupied_houses = len(occupied_houses)\n        if len(occupied_houses) > max_occupied_houses:\n            max_occupied_houses = len(occupied_houses)\n\n        if x[i] > 1:\n            occupied_houses.remove(x[i] - 1)\n        if x[i] < n:\n            occupied_houses.remove(x[i] + 1)\n        else:\n            occupied_houses.remove(x[i])\n\n    return f\"{min_occupied_houses} {max_occupied_houses}\" "
    },
    {
        "number": 4281,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    x = list(map(int, stdin.splitlines()[1].split()))\n    x.sort()\n    \n    min_occupied_houses = max(1, x[0] - 1)\n    max_occupied_houses = n + 1\n    \n    for i in range(n):\n        if x[i] > 1:\n            min_occupied_houses = max(min_occupied_houses, x[i] - 1)\n        if x[i] < n:\n            max_occupied_houses = min(max_occupied_houses, x[i] + 1)\n    \n    return str(min_occupied_houses) + '\\n' + str(max_occupied_houses)"
    },
    {
        "number": 4282,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    remembered = {}\n    for i in range(1, n + 1):\n        a, b = map(int, stdin.split('\\n')[i].split())\n        if a not in remembered:\n            remembered[a] = [b]\n        else:\n            remembered[a].append(b)\n        if b not in remembered:\n            remembered[b] = [a]\n        else:\n            remembered[b].append(a)\n\n    order = {}\n    for i in range(1, n + 1):\n        for j in remembered[i]:\n            if j in order:\n                order[j].append(i)\n            else:\n                order[j] = [i]\n\n    result = []\n    for i in range(1, n + 1):\n        for j in order[i]:\n            if j not in result:\n                result.append(j)\n                break\n\n    return ' '.join(map(str, result))\n"
    },
    {
        "number": 4282,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = [list(map(int, stdin.split(\"\\n\")[i + 1].split())) for i in range(n)]\n    p = [0] * (n + 1)\n    \n    for i in range(1, n + 1):\n        p[i] = a[i - 1][0]\n        if a[i - 1][1] == p[i]:\n            p[i] = a[i - 1][1]\n        if p[i] == i:\n            p[i] = p[p[i]]\n        while p[i] != i:\n            p[i], i = p[p[i]], p[i]\n    \n    return \" \".join(map(str, p[1:]))"
    },
    {
        "number": 4282,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [[int(x) for x in input().split()] for _ in range(n)]\n    memo = [0] * (n+1)\n    for i in range(n):\n        memo[a[i][0]] = a[i][1]\n        memo[a[i][1]] = a[i][0]\n    p = []\n    for i in range(1, n+1):\n        p.append(memo[i])\n    return ' '.join(str(x) for x in p)\n\nn = int(input())\nstdin = ''\nfor _ in range(n):\n    stdin += input() + '\\n'\nprint(solution(stdin)) "
    },
    {
        "number": 4282,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(i: int) -> str:\n        nonlocal p, a, n, used\n        if i == n:\n            return ''.join(map(str, p))\n        for j in range(n):\n            if not used[j] and a[i][0] == p[j]:\n                used[j] = True\n                p[j], p[i] = p[i], p[j]\n                return dfs(i + 1)\n            elif not used[j] and a[i][1] == p[j]:\n                used[j] = True\n                p[j], p[i] = p[i], p[j]\n                return dfs(i + 1)\n        used[i] = True\n        return dfs(i)\n\n    n, *a = stdin.split('\\n')\n    n = int(n)\n    a = [tuple(map(int, line.split())) for line in a]\n    p = list(range(1, n + 1))\n    used = [False] * n\n    return dfs(0)"
    },
    {
        "number": 4282,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    memo = [None] * (n + 1)\n    next_memo = [None] * (n + 1)\n    for i in range(1, n + 1):\n        a1, a2 = map(int, stdin.split(\"\\n\")[i].split())\n        memo[i] = (a1, a2)\n        next_memo[i] = a1 if a1 != i else a2\n    for i in range(1, n + 1):\n        if memo[i][0] == next_memo[i]:\n            memo[i] = (memo[i][1], memo[i][0])\n        elif memo[i][1] == next_memo[i]:\n            memo[i] = (memo[i][0], memo[i][1])\n    return \" \".join(str(i) for i in memo)\n\ninput_str = \"\"\"5\n3 5\n1 4\n2 4\n1 5\n2 3\n\"\"\"\n\nprint(solution(input_str)) "
    },
    {
        "number": 4282,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    remembered = {}\n    for line in stdin.splitlines()[1:]:\n        a, b = map(int, line.split())\n        if a not in remembered:\n            remembered[a] = b\n        else:\n            remembered[b] = a\n\n    def find_next_kid(kid):\n        if kid not in remembered:\n            return None\n        next_kid = remembered[kid]\n        del remembered[kid]\n        return next_kid\n\n    def restore_circle(start_kid):\n        current_kid = start_kid\n        result = [start_kid]\n        for i in range(n - 1):\n            current_kid = find_next_kid(current_kid)\n            result.append(current_kid)\n        return result\n\n    result = restore_circle(1)\n    return ' '.join(map(str, result))\n\ninput_str = \"\"\"5\n3 5\n1 4\n2 4\n1 5\n2 3\n\"\"\"\nprint(solution(input_str))"
    },
    {
        "number": 4282,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [[] for _ in range(n)]\n    for _ in range(n):\n        i, j = map(int, input().split())\n        a[i - 1].append(j)\n        a[j - 1].append(i)\n    \n    x = a[0][0]\n    for i in range(n):\n        p = x\n        x = a[x - 1][0]\n        for j in range(i):\n            p = a[p - 1][0]\n        a[i][0], a[p - 1][0] = a[p - 1][0], a[i][0]\n        if len(a[p - 1]) > 1:\n            a[p - 1].pop(0)\n        if len(a[x - 1]) > 1:\n            a[x - 1].pop(0)\n    return ' '.join(map(str, [x] + a[0]))\n"
    },
    {
        "number": 4282,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n\n    # Create a mapping of all kids and their next two remembered kids\n    mapping = {i: set() for i in range(1, n + 1)}\n    for i, (next_kid, next_next_kid) in enumerate(a):\n        mapping[next_kid].add(a[(i + 1) % n][0])\n        mapping[next_kid].add(a[(i + 1) % n][1])\n\n    # Initialize the order of kids as a circular list\n    order = [1]\n    for _ in range(n - 1):\n        last_kid = order[-1]\n        next_kids = list(mapping[last_kid])\n        order.append(next_kids[0])\n        mapping[next_kids[0]].remove(last_kid)\n\n    return ' '.join(map(str, order))\n\n\ndef"
    },
    {
        "number": 4282,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def bfs(graph, start):\n        visited = set()\n        queue = [(start, 0)]\n        while queue:\n            node, level = queue.pop(0)\n            if node not in visited:\n                visited.add(node)\n                if level >= 0 and graph.get(node, None) is not None:\n                    queue.extend([(neighbor, level+1) for neighbor in graph[node] if neighbor not in visited])\n        return visited\n\n    n = int(stdin.splitlines()[0])\n    remembered_kids = {}\n    for i in range(1, n+1):\n        remembered_kids[i] = tuple(map(int, stdin.splitlines()[i].split()))\n\n    graph = {i: [] for i in range(1, n+1)}\n    for i in range(1, n+1):\n        for kid in remembered_kids[i]:\n            graph[kid].append(i)\n\n    result = bfs(graph, 1)\n    return \" \".join(map(str, result))\n\n\ninput_string = \"\"\"5\n3 5\n1 4\n2 4\n1 5\n2 3\"\"\"\n\nprint(solution(input_string))\n\ninput_string = \"\"\"3\n2 3\n3 1\n1 2\"\"\"\n\nprint(solution(input_string)) "
    },
    {
        "number": 4282,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    rem = {}\n    for i in range(1, n + 1):\n        a, b = map(int, stdin.split('\\n')[i].split())\n        if a not in rem:\n            rem[a] = b\n        else:\n            rem[b] = a\n\n    visited = {1: 1}\n    queue = [1]\n    while queue:\n        node = queue.pop(0)\n        for child in [rem[node], rem[rem[node]]]:\n            if child not in visited:\n                visited[child] = node\n                queue.append(child)\n\n    res = []\n    for i in range(1, n + 1):\n        res.append(visited[i])\n    return ' '.join(map(str, res))\n"
    },
    {
        "number": 4283,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = [int(x) for x in stdin.splitlines()[1].split()]\n\n    def is_balanced(team):\n        return all(abs(a - b) <= 5 for a, b in zip(team, team[1:]))\n\n    max_students = 1\n    for i in range(1, n + 1):\n        for team in itertools.combinations(a, i):\n            if is_balanced(team):\n                max_students = max(max_students, i)\n\n    return str(max_students)\n\n\ninput_str = \"\"\"6\n1 10 17 12 15 2\"\"\"\nprint(solution(input_str))  # Output: 3\n\ninput_str = \"\"\"10\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\"\"\"\nprint(solution(input_str))  # Output: 10\n\ninput_str = \"\"\"6\n1 1000 10000 10 100 1000000000\"\"\"\nprint(solution(input_str))  # Output: 1\n\"\"\""
    },
    {
        "number": 4283,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    a = list(map(int, stdin[1].split()))\n    \n    a.sort()\n    \n    for i in range(n):\n        if a[i] - a[0] > 5:\n            break\n    else:\n        return n\n    \n    for j in range(i, n):\n        if a[j] - a[i] > 5:\n            return i\n    \n    return i + 1\n\nn = 6\nstdin = [\"6\\n\", \"1 10 17 12 15 2\"]\nprint(solution(stdin[1].split())) "
    },
    {
        "number": 4283,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    if n == 1:\n        return \"1\"\n\n    a.sort()\n    a.reverse()\n\n    def get_sum(start: int, end: int) -> int:\n        return sum(a[start:end + 1])\n\n    def is_balanced(start: int, end: int) -> bool:\n        return abs(get_sum(start, end) - get_sum(start + 1, end + 1)) <= 5\n\n    for i in range(n):\n        if is_balanced(i, i):\n            return i + 1\n        for j in range(i + 1, n):\n            if is_balanced(i, j) and is_balanced(j, i):\n                return i + j + 1\n\n    return 0\n\n\ninput_data = \"\"\"6\n1 10 17 12 15 2\"\"\"\nprint(solution(input_data)) "
    },
    {
        "number": 4283,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    max_students = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(a[i] - a[j]) <= 5:\n                max_students += 1\n                break\n\n    return str(max_students)\n"
    },
    {
        "number": 4283,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    a.sort()\n    max_students = 0\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[j] - a[i] <= 5:\n                max_students += 1\n            else:\n                break\n\n    return str(max_students)\n\n\ninput_str = \"\"\"6\n1 10 17 12 15 2\"\"\"\n\nprint(solution(input_str))\n\ninput_str = \"\"\"10\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\"\"\"\n\nprint(solution(input_str))\n\ninput_str = \"\"\"6\n1 1000 10000 10 100 1000000000\"\"\"\n\nprint(solution(input_str)) "
    },
    {
        "number": 4283,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    # Create a dictionary to store the sum of each group of 2 students\n    d = {}\n    for i in range(n):\n        for j in range(i + 1, n):\n            d[abs(a[i] - a[j])] = d.get(abs(a[i] - a[j]), 0) + 1\n\n    # Find the maximum number of students with a balanced team\n    max_balanced_team = 0\n    for key in d:\n        if key <= 5:\n            max_balanced_team = max(max_balanced_team, d[key])\n\n    return max_balanced_team\n"
    },
    {
        "number": 4283,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    a.sort()\n    min_diff = 5\n    max_students = 0\n    \n    for i in range(n - 1):\n        if a[i+1] - a[i] <= min_diff:\n            max_students += 1\n        else:\n            break\n    \n    return str(max_students)"
    },
    {
        "number": 4283,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    a = list(map(int, stdin[1].split()))\n\n    a.sort()\n\n    max_team_size = 0\n\n    for i in range(1, n):\n        if a[i] - a[i - 1] <= 5:\n            max_team_size = i + 1\n\n    return max_team_size"
    },
    {
        "number": 4283,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    # Maximum number of students in a balanced team\n    max_students = 0\n\n    # Iterate through all possible teams with 1, 2, 3, ..., n students\n    for num_students in range(1, n + 1):\n        # Iterate through all possible combinations of students\n        for team in combinations(a, num_students):\n            # Check if the team is balanced (difference between max and min skill is no more than 5)\n            diff = max(team) - min(team)\n            if diff <= 5:\n                max_students = max(max_students, num_students)\n                break\n        else:\n            continue\n        break\n\n    return str(max_students)\n"
    },
    {
        "number": 4283,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    \n    def is_balanced(team):\n        return max(team) - min(team) <= 5\n    \n    def count_teams(students, team_size):\n        if team_size == 1:\n            return 1\n        if team_size > len(students):\n            return 0\n        return count_teams(students, team_size - 1) + count_teams(students[1:], team_size)\n    \n    min_students = 1\n    max_students = n\n    while min_students <= max_students:\n        mid = (min_students + max_students) // 2\n        if count_teams(a, mid) > 0 and is_balanced(a[:mid]):\n            min_students = mid + 1\n            answer = mid\n        else:\n            max_students = mid - 1\n    \n    return answer"
    },
    {
        "number": 4284,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split(\"\\n\")[0])\n    output = []\n    \n    for i in range(q):\n        k, n, a, b = map(int, stdin.split(\"\\n\")[i+1].split())\n        max_turns = 0\n        for j in range(1, n+1):\n            if k > a:\n                k -= a\n                max_turns += 1\n            elif k > b:\n                k -= b\n                max_turns += 1\n            else:\n                max_turns = -1\n                break\n        output.append(max_turns)\n    \n    return \"\\n\".join(map(str, output))\n\n\ninput_string = \"\"\"6\n15 5 3 2\n15 5 4 3\n15 5 2 1\n15 5 5 1\n16 7 5 2\n20 5 7 3\"\"\"\n\nprint(solution(input_string))\n"
    },
    {
        "number": 4284,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def get_max_turns(n, a, b):\n        if a > b:\n            return (n // 2) + (n % 2)\n        return n - (n // (a + b)) * (a + b)\n\n    q = int(stdin)\n    result = []\n\n    for _ in range(q):\n        k, n, a, b = map(int, input().split())\n        if k <= 0:\n            result.append(-1)\n            continue\n\n        max_turns = get_max_turns(n, a, b)\n        result.append(max_turns)\n\n    return '\\n'.join(map(str, result))\n\n\ninput_data = \"\"\"6\n15 5 3 2\n15 5 4 3\n15 5 2 1\n15 5 5 1\n16 7 5 2\n20 5 7 3\"\"\"\n\nprint(solution(input_data)) "
    },
    {
        "number": 4284,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    output = []\n    for _ in range(q):\n        k, n, a, b = map(int, input().split())\n        if k < a + b:\n            output.append(-1)\n        else:\n            max_turns = 0\n            for i in range(1, n+1):\n                if k - (a * i) >= 0:\n                    max_turns = i\n            output.append(max_turns)\n    return \"\\n\".join(map(str, output))"
    },
    {
        "number": 4284,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    outputs = []\n    for _ in range(q):\n        k, n, a, b = map(int, input().split())\n        if k - (n * a) <= 0:\n            outputs.append(-1)\n        else:\n            max_turns = (k - (n * a) + (n - 1) * b) // a\n            outputs.append(max_turns)\n    return \"\\n\".join(map(str, outputs))\n\n\ninput_string = \"\"\"6\n15 5 3 2\n15 5 4 3\n15 5 2 1\n15 5 5 1\n16 7 5 2\n20 5 7 3\"\"\"\n\nprint(solution(input_string))"
    },
    {
        "number": 4284,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split('\\n')[0])\n    result = []\n    for _ in range(q):\n        k, n, a, b = map(int, stdin.split('\\n')[1].split())\n        if k < b:\n            result.append(-1)\n        else:\n            max_turns = 0\n            for turn in range(n):\n                if k > a and k <= b:\n                    max_turns = turn\n                k -= min(a, k)\n            result.append(max_turns)\n    return '\\n'.join(map(str, result))\n"
    },
    {
        "number": 4284,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def compute_max_turns(k, n, a, b):\n        if k <= a:\n            return -1\n        max_turns = 0\n        current_charge = k\n        for i in range(n):\n            if current_charge > a:\n                max_turns += 1\n                current_charge -= a\n            elif current_charge > b:\n                max_turns += 1\n                current_charge -= b\n            else:\n                return -1\n        return max_turns\n\n    q = int(stdin.split('\\n')[0])\n    outputs = []\n    for i in range(1, q + 1):\n        k, n, a, b = map(int, stdin.split('\\n')[i].split())\n        max_turns = compute_max_turns(k, n, a, b)\n        outputs.append(max_turns)\n    return '\\n'.join(map(str, outputs))\n\n\ninput_str = \"\"\"6\n15 5 3 2\n15 5 4 3\n15 5 2 1\n15 5 5 1\n16 7 5 2\n20 5 7 3\"\"\"\n\nprint(solution(input_str)) "
    },
    {
        "number": 4284,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def max_turns(n, a, b):\n        if a > b:\n            return n // 2 + (n % 2 and n % 2 < n // 2)\n        elif b > n // 2:\n            return n // 2 + n % 2\n        else:\n            return -1\n\n    q = int(stdin.split('\\n')[0])\n    result = []\n    for _ in range(q):\n        _, n, a, b = map(int, stdin.split('\\n')[1].split())\n        result.append(max_turns(n, a, b))\n\n    return '\\n'.join(map(str, result))\n"
    },
    {
        "number": 4284,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    output = []\n    for _ in range(q):\n        k, n, a, b = map(int, input().split())\n        if k <= 0:\n            output.append(-1)\n            continue\n        if a > b:\n            raise ValueError(\"Invalid values: a should be less than or equal to b\")\n        turns = []\n        for i in range(n):\n            if k > a:\n                turns.append((i, 1))\n                k -= a\n            elif k > b:\n                turns.append((i, 2))\n                k -= b\n            else:\n                output.append(-1)\n                break\n        if k > 0:\n            output.append(-1)\n        else:\n            max_turns = 0\n            for i in range(n):\n                max_turns = max(max_turns, turns[i][1])\n            output.append(max_turns)\n    return \"\\n\".join(map(str, output))\n"
    },
    {
        "number": 4284,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    output = []\n    for _ in range(q):\n        k, n, a, b = map(int, input().split())\n        if k < a:\n            output.append(-1)\n        else:\n            max_turns = 0\n            for i in range(1, n+1):\n                if i % 2 == 0:\n                    max_turns += 1\n                else:\n                    if k <= a:\n                        break\n                    else:\n                        max_turns += 1\n                        k -= a\n                        if k <= b:\n                            break\n                        else:\n                            k -= b\n            output.append(max_turns)\n    return \"\\n\".join(map(str, output))"
    },
    {
        "number": 4284,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split('\\n')[0])\n    result = []\n    for i in range(1, q + 1):\n        k, n, a, b = map(int, stdin.split('\\n')[i].split())\n        if k < n * b:\n            result.append(n * a)\n        elif k < a:\n            result.append(-1)\n        else:\n            result.append(n)\n    return '\\n'.join(map(str, result))\n"
    },
    {
        "number": 4285,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split('\\n')[1]\n    k = s.count('?')\n    \n    MOD = 10**9 + 7\n    \n    count = 0\n    for i in range(k + 1):\n        choices = pow(3, k - i, MOD)\n        count = (count + choices * pow(2, i, MOD)) % MOD\n    \n    return count"
    },
    {
        "number": 4285,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n\n    count = 0\n    for i in range(n - 2):\n        if s[i] == \"?\" and s[i + 1] == \"b\" and s[i + 2] == \"?\":\n            count += 3\n\n    return str(count % (10 ** 9 + 7))\n"
    },
    {
        "number": 4285,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1:].strip()\n    \n    def count_subsequences(s: str) -> int:\n        s = s.replace(\"?\", \"abc\")\n        count = 0\n        for i in range(len(s) - 2):\n            if s[i:i+3] == \"abc\":\n                count += 1\n        return count\n    \n    def count_total_subsequences(k: int) -> int:\n        return 3 ** k\n    \n    count = 0\n    for i in range(n - k + 1):\n        count += count_subsequences(s[i:i+k+1]) * count_total_subsequences(k)\n        count %= (10**9 + 7)\n    \n    return str(count)\n"
    },
    {
        "number": 4285,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    s = input()\n\n    def count_subsequences(s: str) -> int:\n        count = 0\n        for i in range(len(s)):\n            if s[i] == '?':\n                count += 3\n            elif s[i] == 'a':\n                count += 1\n            elif s[i] == 'b':\n                count += 2\n            elif s[i] == 'c':\n                count += 3\n        return count // 3\n\n    k = s.count('?')\n    total_subsequences = 3**k\n    result = 0\n\n    for i in range(3**k):\n        new_s = s.replace('?', 'abc'[i % 3])\n        result += count_subsequences(new_s)\n        result %= (10**9 + 7)\n\n    return str(result)\n\nn = int(input())\ns = input()\nprint(solution(\"\")) "
    },
    {
        "number": 4285,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    s = input()\n    k = s.count(\"?\")\n    if k == 0:\n        return 0\n\n    def count_subsequences(s: str) -> int:\n        count = 0\n        for i in range(len(s) - 2):\n            if s[i] == \"a\" and s[i + 1] == \"b\" and s[i + 2] == \"c\":\n                count += 1\n            elif s[i] == \"b\" and s[i + 1] == \"c\" and s[i + 2] == \"a\":\n                count += 1\n            elif s[i] == \"c\" and s[i + 1] == \"a\" and s[i + 2] == \"b\":\n                count += 1\n        return count\n\n    count = 0\n    for i in range(3 ** k):\n        new_s = \"\"\n        for j, c in enumerate(s):\n            if c == \"?\":\n                new_s += \"abc\"[i // (3 ** (k - j - 1)) % 3]\n            else:\n                new_s += c\n        count += count_subsequences(new_s)\n\n    return count % (10 ** 9 + 7)\n"
    },
    {
        "number": 4285,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    s = input()\n    k = s.count('?')\n\n    def count_subsequences(s: str, prefix: str) -> int:\n        if not s:\n            return 1\n        if s[0] == '?':\n            return count_subsequences(s[1:], prefix + 'a') + \\\n                   count_subsequences(s[1:], prefix + 'b') + \\\n                   count_subsequences(s[1:], prefix + 'c')\n        else:\n            return count_subsequences(s[1:], prefix + s[0])\n\n    result = count_subsequences(s[:-k], '') % (10**9 + 7)\n    return result"
    },
    {
        "number": 4285,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    k = s.count('?')\n    mod = 10**9 + 7\n    count = 0\n\n    def count_subsequences(s: str) -> int:\n        if '?' in s:\n            return count_subsequences(s[:s.index('?')]) * 3 + count_subsequences(s[s.index('?') + 1:]) * 3\n        else:\n            return 1\n\n    for i in range(k + 1):\n        count += count_subsequences(s[:i] + 'abc' + s[i + 1:])\n        count %= mod\n\n    return count"
    },
    {
        "number": 4285,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    k = s.count('?')\n\n    modulo = 10**9 + 7\n    count = 0\n\n    def count_subsequences(s: str, index: int) -> int:\n        nonlocal count\n        if index == len(s):\n            count += 1\n            return\n\n        if s[index] == '?':\n            count_subsequences(s, index + 1)\n            count_subsequences(s[:index] + 'a' + s[index + 1:], index + 1)\n            count_subsequences(s[:index] + 'b' + s[index + 1:], index + 1)\n            count_subsequences(s[:index] + 'c' + s[index + 1:], index + 1)\n        else:\n            count_subsequences(s, index + 1)\n\n    count_subsequences(s, 0)\n    count %= modulo\n\n    return str(count)\n"
    },
    {
        "number": 4285,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1].strip()\n    k = s.count(\"?\")\n\n    if k == 0:\n        return 0\n\n    count = 0\n    for i in range(3**k):\n        abc = \"\"\n        for j in range(k):\n            index = i % 3\n            if index == 0:\n                abc += \"a\"\n            elif index == 1:\n                abc += \"b\"\n            else:\n                abc += \"c\"\n            i //= 3\n        abc += \"abc\"\n        count += abc.count(\"abc\")\n\n    return count % (10**9 + 7)"
    },
    {
        "number": 4285,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1].strip()\n    \n    k = s.count('?')\n    result = 0\n    \n    if k == 0:\n        if s.count('abc') > 0:\n            result = 1\n    else:\n        for i in range(3**k):\n            temp_s = list(s)\n            for j in range(k):\n                if i & (1 << j):\n                    temp_s[s.index('?', j)] = 'a'\n                elif i & (2 << j):\n                    temp_s[s.index('?', j)] = 'b'\n                else:\n                    temp_s[s.index('?', j)] = 'c'\n            \n            temp_s = ''.join(temp_s)\n            count_abc = temp_s.count('abc')\n            result += count_abc\n            \n    result %= 10**9 + 7\n    return str(result)"
    },
    {
        "number": 4286,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input(stdin).split())\n    a = list(map(int, input().split()))\n    special_offers = []\n    \n    for _ in range(m):\n        x, y, w = map(int, input().split())\n        special_offers.append((x-1, y-1, w))\n    \n    dist = [float('inf')]*n\n    dist[0] = 0\n    \n    for _ in range(n):\n        for i in range(n):\n            for j in range(n):\n                if dist[i] + a[j] < dist[j]:\n                    dist[j] = dist[i] + a[j]\n        special_offers.sort(key=lambda x: dist[x[0]]+dist[x[1]])\n        if not special_offers:\n            break\n        x, y, w = special_offers.pop(0)\n        dist[y] = min(dist[y], dist[x] + w)\n    \n    min_dist = float('inf')\n    for i in range(n):\n        for j in range(n):\n            if i != j and dist[i] + a[j] < min_dist:\n                min_dist = dist[i] + a[j]\n    return min_dist\n"
    },
    {
        "number": 4286,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def find_min_cost_to_connect(n, adj_list, visited):\n        queue = [(0, 1)]\n        while queue:\n            cost, vertex = queue.pop(0)\n            if visited[vertex]:\n                continue\n            visited[vertex] = True\n            for neighbor, weight in adj_list[vertex]:\n                if not visited[neighbor]:\n                    queue.append((cost + weight, neighbor))\n        return cost\n\n    def dfs(n, adj_list, visited):\n        for vertex in range(1, n + 1):\n            if not visited[vertex]:\n                return vertex\n        return 0\n\n    def add_edge(adj_list, x, y, w):\n        adj_list[x].append((y, w))\n        adj_list[y].append((x, w))\n\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    adj_list = [[] for _ in range(n + 1)]\n    visited = [False] * (n + 1)\n    min_cost = float('inf')\n\n    for _ in range(m):\n        x, y, w = map(int, stdin.readline().split())\n        add_edge(adj_list, x, y, w)\n\n    start_vertex = dfs(n, adj_list, visited)\n    adj_list[0] = [(start_vertex, a[start_vertex - 1])]\n    min_cost = max(min_cost, find_min_cost_to_connect(n, adj_list, visited))\n\n    for x in range(n):\n        adj_list[x + 1].remove((x + 1, a[x]))\n\n    for x in range(n):\n        adj_list[x + 1].append((x + 1, a[x]))\n        min_cost = max(min_cost, find_min_cost_to_connect(n, adj_list, visited))\n        adj_list[x + 1].remove((x + 1, a[x]))\n\n    return min_cost\n"
    },
    {
        "number": 4286,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    special_offers = []\n    for _ in range(m):\n        x, y, w = map(int, input().split())\n        special_offers.append((x-1, y-1, w))\n\n    graph = [[] for _ in range(n)]\n    min_cost = 0\n\n    def dfs(node, visited, cost):\n        visited.add(node)\n        min_cost = max(min_cost, cost)\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                dfs(neighbor, visited, cost + a[node] + a[neighbor])\n\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                min_cost = float('inf')\n                dfs(i, set(), 0)\n                if min_cost == float('inf'):\n                    return -1\n                graph[i].append(j)\n\n    min_cost = float('inf')\n    dfs(0, set(), 0)\n    return min_cost\n"
    },
    {
        "number": 4286,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    offers = [list(map(int, input().split())) for _ in range(m)]\n\n    graph = [[] for _ in range(n)]\n\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                cost = a[i] + a[j]\n                graph[i].append((j, cost))\n                graph[j].append((i, cost))\n\n    min_cost = float('inf')\n\n    def dfs(node, visited, cost, special_used):\n        nonlocal min_cost\n        if min_cost < cost:\n            return\n\n        visited.add(node)\n        for neighbor, edge_cost in graph[node]:\n            if neighbor not in visited:\n                if special_used:\n                    dfs(neighbor, visited.copy(), cost + edge_cost, special_used)\n                else:\n                    for offer_node, offer_cost, offer_weight in offers:\n                        if offer_node in visited and offer_cost == edge_cost:\n                            dfs(neighbor, visited.copy(), cost + offer_weight, True)\n                            break\n                    else:\n                        dfs(neighbor, visited.copy(), cost + edge_cost, special_used)\n\n    dfs(0, set(), 0, False)\n\n    return min_cost\n\n\ninput_data = '''3 2\n1 3 3\n2 3 5\n2 1 1'''\n\nprint(solution(input_data)) "
    },
    {
        "number": 4286,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(v, parent, visited, adj, dist, a):\n        visited[v] = True\n        for u in adj[v]:\n            if not visited[u]:\n                if parent == u:\n                    continue\n                dist[u] = min(dist[u], dist[v] + a[v] + a[u])\n                dfs(u, v, visited, adj, dist, a)\n\n    n, m = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:2 + n]))\n    adj = [[] for _ in range(n)]\n    dist = [10**18] * n\n    visited = [False] * n\n\n    for _ in range(m):\n        x, y, w = map(int, stdin.split()[2 + n:5 + n])\n        adj[x - 1].append(y - 1)\n        adj[y - 1].append(x - 1)\n\n    dfs(0, -1, visited, adj, dist, a)\n\n    return min(dist)\n"
    },
    {
        "number": 4286,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def get_min_cost(edges):\n        adj_list = [[] for _ in range(n)]\n        for i, j in edges:\n            adj_list[i].append(j)\n            adj_list[j].append(i)\n\n        visited = [False] * n\n        dist = [float('inf')] * n\n        dist[0] = 0\n\n        for i in range(n):\n            if not visited[i]:\n                for j in adj_list[i]:\n                    if not visited[j]:\n                        dist[j] = min(dist[j], dist[i] + 1)\n\n                for j in adj_list[i]:\n                    if not visited[j]:\n                        for k in adj_list[j]:\n                            if not visited[k]:\n                                dist[k] = min(dist[k], dist[i] + 1)\n\n        return sum(dist)\n\n    n, m = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:n + 2]))\n    edges = set()\n\n    for _ in range(m):\n        x, y, w = map(int, stdin.split()[n + 2:n + 5])\n        edges.add((x - 1, y - 1))\n        edges.add((y - 1, x - 1))\n\n    return str(get_min_cost(edges))\n\n\ninput_cases = [\n    \"3 2\\n1 3 3\\n2 3 5\\n2 1 1\",\n    \"4 0\\n1 3 3 7\",\n    \"5 4\\n1 2 3 4 5\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15\"\n]\n\nfor case in input_cases:\n    print(solution(case)) "
    },
    {
        "number": 4286,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n, m = map(int, input_list[0].split())\n    a = list(map(int, input_list[1].split()))\n    edges = [list(map(int, input_list[i].split())) for i in range(2, 2 + m)]\n\n    # Build the adjacency list\n    adj_list = [[] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if i != j and a[i] + a[j] <= 10**12:\n                adj_list[i].append(j)\n\n    # Find the connected components\n    visited = [False] * n\n    components = []\n    def dfs(node):\n        if not visited[node]:\n            visited[node] = True\n            components[-1].append(node)\n            for neighbor in adj_list[node]:\n                dfs(neighbor)\n\n    for i in range(n):\n        if not visited[i]:\n            components.append([])\n            dfs(i)\n\n    # If there is only one component, return the sum of all the numbers\n    if len(components) == 1:\n        return sum(a)\n\n    # Otherwise, find the minimum number of coins to connect all components\n    min_cost = float('inf')\n    for component in components:\n        for i in range(len(component)):\n            for j in range(i + 1, len(component)):\n                cost = a[component[i]] + a[component[j]]\n                for edge in edges:\n                    if (edge[0] == component[i] and edge[1] == component[j]) or (edge[0] == component[j] and edge[1] == component[i]):\n                        cost = min(cost, edge[2])\n                min_cost = min(min_cost, cost)\n\n    return min_cost"
    },
    {
        "number": 4286,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def find_min_cost(graph: list, n: int, m: int) -> int:\n        # Calculate the sum of all edges and add it to the total cost\n        total_cost = sum(sum(range(a + 1)) for a in graph)\n\n        # Calculate the sum of all special offers and add it to the total cost\n        for i in range(m):\n            total_cost += min(graph[x - 1], graph[y - 1]) * w\n\n        return total_cost\n\n    # Read the input\n    n, m = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    offers = []\n    for _ in range(m):\n        x, y, w = map(int, stdin.split()[:3])\n        offers.append((x, y, w))\n\n    # Create the graph\n    graph = [0] * n\n\n    # Find the minimum cost to connect the graph\n    min_cost = find_min_cost(graph, n, m)\n\n    return min_cost\n"
    },
    {
        "number": 4286,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:n+2]))\n    a.sort()\n    \n    offers = []\n    for i in range(m):\n        offers.append(list(map(int, stdin.split()[n+2+3*i:n+2+3*i+3])))\n    \n    dp = [a[i] for i in range(n)]\n    dp.sort()\n    \n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                min_cost = float('inf')\n                for offer in offers:\n                    if offer[0] == i+1 and offer[1] == j+1:\n                        min_cost = min(min_cost, offer[2])\n                min_cost = min(min_cost, a[i] + a[j])\n                dp[j] = min(dp[j], dp[i] + min_cost)\n                \n    return dp[-1]"
    },
    {
        "number": 4286,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:n+2]))\n    edges = []\n\n    for i in range(n):\n        edges.append([a[i], a[i], i+1])\n\n    for i in range(m):\n        x, y, w = map(int, stdin.split()[n+2+3*i:n+2+3*(i+1)])\n        if a[x-1] + a[y-1] < w:\n            edges.append([a[x-1], a[y-1], w])\n        else:\n            edges.append([a[x-1], a[y-1], a[x-1] + a[y-1]])\n\n    edges.sort(key=lambda x: x[2])\n    min_cost = 0\n\n    for edge in edges:\n        min_cost += edge[2]\n        if is_connected(n, min_cost):\n            return min_cost\n\n    return -1\n\ndef"
    },
    {
        "number": 4287,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, input().split())\n    segments = []\n    for _ in range(n):\n        l, r = map(int, input().split())\n        segments.append([l, r])\n    \n    umbrellas = []\n    for _ in range(m):\n        x, p = map(int, input().split())\n        umbrellas.append([x, p])\n\n    # Sort umbrellas by their location\n    umbrellas.sort(key=lambda x: x[0])\n\n    # Initialize variables\n    current_x = 0\n    current_fatigue = 0\n    current_umbrella = None\n    fatigue_at_a = float('inf')\n\n    # Iterate through segments and umbrellas\n    for segment in segments:\n        l, r = segment\n        if l > current_x:\n            # Move from current_x to l\n            current_fatigue += current_umbrella[1] if current_umbrella is not None else 0\n            current_x = l\n        \n        # Check if umbrella can be picked up\n        for umbrella in umbrellas:\n            x, p = umbrella\n            if x >= l and x <= r:\n                if p < current_umbrella[1] if current_umbrella is not None else float('inf'):\n                    current_umbrella = umbrella\n        \n        # Check if umbrella can be thrown away\n        if current_umbrella is not None and current_umbrella[0] <= r:\n            current_umbrella = None\n        \n        # Check if fatigue is minimal at point r\n        fatigue_at_a = min(fatigue_at_a, current_fatigue + current_umbrella[1] if current_umbrella is not None else 0)\n        \n        # Move to next segment\n        current_x = r\n    \n    # Check if fatigue is minimal at point a\n    fatigue_at_a = min(fatigue_at_a, current_fatigue + current_umbrella[1] if current_umbrella is not None else 0)\n\n    if fatigue_at_a == float('inf'):\n        return \"-1\"\n    else:\n        return str(fatigue_at_a)\n"
    },
    {
        "number": 4287,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, stdin.split()[:3])\n    l_i_list = [list(map(int, line.split())) for line in stdin.split('\\n')[1:n+1] if line]\n    x_i_p_i_list = [list(map(int, line.split())) for line in stdin.split('\\n')[n+1:] if line]\n\n    # Check if any segment in the rain is partially overlapping with the segment [0, a]\n    for l_i, r_i in l_i_list:\n        if l_i < 0 and r_i > a:\n            return -1\n\n    # Initialize a list to store the weight of umbrellas at each position\n    weight_list = [0] * (a + 1)\n\n    # Add the weight of each umbrella at its position\n    for x_i, p_i in x_i_p_i_list:\n        weight_list[x_i] += p_i\n\n    # Initialize a variable to store the minimum fatigue\n    min_fatigue = float('inf')\n\n    # Iterate through the position [0, a]\n    for x in range(a + 1):\n        # Check if it's possible to reach the current position without an umbrella\n        can_reach_without_umbrella = True\n        for l_i, r_i in l_i_list:\n            if l_i <= x and x + 1 <= r_i:\n                can_reach_without_umbrella = False\n                break\n\n        # If it's possible to reach the current position without an umbrella, update the minimum fatigue\n        if can_reach_without_umbrella:\n            min_fatigue = min(min_fatigue, weight_list[x])\n        else:\n            # Calculate the total fatigue at the current position\n            total_fatigue = sum(weight_list[x:])\n\n            # Update the minimum fatigue\n            min_fatigue = min(min_fatigue, total_fatigue)\n\n    return min_fatigue if min_fatigue != float('inf') else -1\n"
    },
    {
        "number": 4287,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def min_fatigue(x: int, a: int, segments: list, umbrellas: list) -> int:\n        fatigue = 0\n        umbrella_at_x = None\n        picked_up = False\n\n        for segment in segments:\n            if segment[0] <= x <= segment[1]:\n                fatigue += sum(umbrella[1] for umbrella in umbrellas if umbrella[0] <= x)\n\n        for segment in segments:\n            if segment[0] <= x <= segment[1]:\n                fatigue -= umbrellas[umbrellas.index((x, umbrella_at_x))][1]\n                umbrella_at_x = x\n                picked_up = True\n            elif picked_up and umbrella_at_x is not None and segment[0] > umbrella_at_x:\n                fatigue -= umbrellas[umbrellas.index((umbrella_at_x, umbrella_at_x))][1]\n                umbrella_at_x = None\n                picked_up = False\n\n        if picked_up and umbrella_at_x is not None:\n            fatigue -= umbrellas[umbrellas.index((umbrella_at_x, umbrella_at_x))][1]\n            umbrella_at_x = None\n            picked_up = False\n\n        return fatigue\n\n    a, n, m = map(int, stdin.split())\n    segments = [tuple(map(int, input().split())) for _ in range(n)]\n    umbrellas = [tuple(map(int, input().split())) for _ in range(m)]\n\n    if any(segment[0] > segment[1] for segment in segments):\n        return \"-1\"\n\n    if any(umbrella[0] > umbrella[1] for umbrella in umbrellas):\n        return \"-1\"\n\n    fatigue = min_fatigue(0, a, segments, umbrellas)\n    if fatigue < 0:\n        return \"-1\"\n    else:\n        return fatigue\n\ninput_data = \"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\\n\"\nprint(solution(input_data)) "
    },
    {
        "number": 4287,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def pick_up_umbrella(x: int, umbrellas: list) -> int:\n        p = float('inf')\n        for i in range(len(umbrellas)):\n            if umbrellas[i][0] <= x <= umbrellas[i][1]:\n                p = min(p, umbrellas[i][2])\n        return p\n\n    def fatigue_at(x: int, umbrellas: list) -> int:\n        total_fatigue = 0\n        for i in range(len(umbrellas)):\n            if umbrellas[i][0] <= x <= umbrellas[i][1]:\n                total_fatigue += umbrellas[i][2]\n        return total_fatigue\n\n    stdin = stdin.splitlines()\n    a, n, m = map(int, stdin[0].split())\n    rain_segments = [tuple(map(int, line.split())) for line in stdin[1:n+1]]\n    umbrellas = [tuple(map(int, line.split())) for line in stdin[n+1:]]\n\n    start_fatigue = fatigue_at(0, umbrellas)\n    end_fatigue = fatigue_at(a, umbrellas)\n\n    for x in range(a):\n        pickup_umbrella = pick_up_umbrella(x, umbrellas)\n        start_fatigue += pickup_umbrella\n        end_fatigue += pickup_umbrella\n        for segment in rain_segments:\n            if segment[0] <= x <= segment[1]:\n                start_fatigue += pickup_umbrella\n                end_fatigue -= pickup_umbrella\n\n    return f'-1' if end_fatigue == float('inf') else str(end_fatigue)"
    },
    {
        "number": 4287,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    a, n, m = map(int, input_data[0].split())\n    rain_segments = [tuple(map(int, input_data[i+1].split())) for i in range(n)]\n    umbrellas = [tuple(map(int, input_data[i+1+n].split())) for i in range(m)]\n\n    def can_reach(x: int) -> bool:\n        for l, r in rain_segments:\n            if l <= x <= r:\n                return False\n        return True\n\n    def min_fatigue(x: int, carried_umbrellas: list) -> int:\n        if not carried_umbrellas:\n            return 0\n        fatigue = 0\n        carried_umbrellas.sort(key=lambda x: x[1], reverse=True)\n        for i, (x_i, p_i) in enumerate(carried_umbrellas):\n            if x_i <= x:\n                fatigue += p_i\n        return fatigue\n\n    def pick_umbrella(x: int, carried_umbrellas: list) -> tuple:\n        if not carried_umbrellas:\n            return None, 0\n        carried_umbrellas.sort(key=lambda x: x[1], reverse=True)\n        for i, (x_i, p_i) in enumerate(carried_umbrellas):\n            if x_i <= x:\n                return carried_umbrellas.pop(i), p_i\n        return None, 0\n\n    def can_reach_without_rain(x: int) -> bool:\n        for l, r in rain_segments:\n            if l <= x <= r:\n                return False\n        return True\n\n    fatigue = 0\n    carried_umbrellas = []\n    for x in range(a):\n        if can_reach(x):\n            fatigue += min_fatigue(x, carried_umbrellas)\n        if can_reach_without_rain(x):\n            umbrella, p_i = pick_umbrella(x, umbrellas)\n            if umbrella:\n                carried_umbrellas.append(umbrella)\n        else:\n            carried_umbrellas.sort(key=lambda x: x[1], reverse=True)\n            carried_umbrellas.pop(0)\n\n    return \"1\" if fatigue <= 1000000 else \"-1\"\n\nprint(solution(input())) "
    },
    {
        "number": 4287,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, stdin.split()[:3])\n    rain_segments = []\n    for _ in range(n):\n        l, r = map(int, stdin.split()[:2])\n        rain_segments.append((l, r))\n    umbrellas = []\n    for _ in range(m):\n        x, p = map(int, stdin.split()[:2])\n        umbrellas.append((x, p))\n\n    def is_in_rain(x: int) -> bool:\n        for l, r in rain_segments:\n            if l <= x <= r:\n                return True\n        return False\n\n    def min_fatigue(x: int, umbrellas: list[tuple[int, int]]) -> int:\n        min_fatigue = 0\n        for i, (x_i, p_i) in enumerate(umbrellas):\n            if x_i <= x <= x_i + 1:\n                min_fatigue += p_i\n        return min_fatigue\n\n    def can_reach(x: int, umbrellas: list[tuple[int, int]]) -> bool:\n        for i, (x_i, p_i) in enumerate(umbrellas):\n            if x_i <= x <= x_i + 1:\n                return True\n        return False\n\n    def pick_up_and_throw_away_umbrellas(x: int, umbrellas: list[tuple[int, int]]) -> None:\n        for i, (x_i, p_i) in enumerate(umbrellas):\n            if x_i <= x <= x_i + 1:\n                umbrellas.pop(i)\n                break\n\n    if is_in_rain(0):\n        return \"-1\"\n\n    x = 0\n    fatigue = 0\n    while x < a:\n        fatigue += min_fatigue(x, umbrellas)\n        if is_in_rain(x):\n            if not can_reach(x, umbrellas):\n                return \"-1\"\n            fatigue += min_fatigue(x, umbrellas)\n            pick_up_and_throw_away_umbrellas(x, umbrellas)\n        x += 1\n\n    return str(fatigue)"
    },
    {
        "number": 4287,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, stdin.split()[:3])\n    rain_segments = [tuple(map(int, stdin.split()[3 + i * 2: 3 + i * 2 + 2])) for i in range(n)]\n    umbrellas = [tuple(map(int, stdin.split()[3 + n * 2 + i * 2: 3 + n * 2 + i * 2 + 2])) for i in range(m)]\n\n    def get_fatigue(x, rain_segments, umbrellas):\n        fatigue = 0\n        picked_up = False\n        for l, r in rain_segments:\n            if l <= x <= r:\n                for _, p in umbrellas:\n                    fatigue += p\n                    picked_up = True\n                    break\n        if not picked_up:\n            fatigue += 1\n        return fatigue\n\n    min_fatigue = float('inf')\n    for x in range(a):\n        if get_fatigue(x, rain_segments, umbrellas) >= min_fatigue:\n            min_fatigue = get_fatigue(x, rain_segments, umbrellas)\n        if min_fatigue == float('inf'):\n            return \"-1\"\n\n    return str(min_fatigue)"
    },
    {
        "number": 4287,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, input().split())\n    rain_segments = []\n    for _ in range(n):\n        l, r = map(int, input().split())\n        rain_segments.append((l, r))\n\n    umbrellas = []\n    for _ in range(m):\n        x, p = map(int, input().split())\n        umbrellas.append((x, p))\n\n    def can_reach(x: int, umbrellas: List[Tuple[int, int]]) -> bool:\n        for umbrella in umbrellas:\n            if umbrella[0] <= x and x <= umbrella[0] + 1:\n                return True\n        return False\n\n    def minimum_fatigue(x: int, umbrellas: List[Tuple[int, int]]) -> int:\n        min_fatigue = 0\n        for umbrella in umbrellas:\n            if umbrella[0] <= x and x <= umbrella[0] + 1:\n                min_fatigue = max(min_fatigue, umbrella[1])\n        return min_fatigue\n\n    def optimal_strategy(x: int, rain_segments: List[Tuple[int, int]]) -> bool:\n        for l, r in rain_segments:\n            if l <= x <= r:\n                return minimum_fatigue(x, umbrellas) > 0\n        return True\n\n    fatigue = 0\n    x = 0\n    while x < a:\n        if not can_reach(x, umbrellas):\n            return \"-1\"\n        if not optimal_strategy(x, rain_segments):\n            return \"-1\"\n        fatigue += minimum_fatigue(x, umbrellas)\n        x += 1\n\n    return str(fatigue)\n\nstdin = \"\"\"10 2 4\n3 7\n8 10\n0 10\n3 4\n8 1\n1 2\"\"\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4287,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, stdin.split()[:3])\n    rain_segments = sorted(tuple(map(int, stdin.split()[3 + i * 2: 3 + (i + 1) * 2])) for i in range(n))\n    umbrellas = sorted(tuple(map(int, stdin.split()[3 + n * 2 + i * 2: 3 + n * 2 + (i + 1) * 2])) for i in range(m))\n\n    def can_reach(x):\n        for l, r in rain_segments:\n            if l <= x <= r:\n                return False\n        return True\n\n    def fatigue(x):\n        total = 0\n        for i in range(m):\n            if 0 <= x - umbrellas[i][0] <= umbrellas[i][1]:\n                total += umbrellas[i][1]\n        return total\n\n    x = 0\n    while x < a:\n        if not can_reach(x):\n            return \"-1\"\n        x += 1\n\n    return fatigue(a)"
    },
    {
        "number": 4287,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, stdin.split())\n    rain_segments = []\n    for _ in range(n):\n        l, r = map(int, input().split())\n        rain_segments.append((l, r))\n    umbrellas = []\n    for _ in range(m):\n        x, p = map(int, input().split())\n        umbrellas.append((x, p))\n\n    # Sort umbrellas by location\n    umbrellas.sort(key=lambda x: x[0])\n\n    # Calculate the fatigue on the way from x=0 to x=a\n    fatigue = 0\n    start = 0\n    for l, r in rain_segments:\n        fatigue += umbrellas[start][1] * (r - l)\n        start += 1\n    fatigue += umbrellas[start][1] * (a - rain_segments[-1][1])\n\n    # If the total fatigue is less than or equal to 10^5, return the minimum total fatigue after reaching x=a\n    if fatigue <= 10**5:\n        return fatigue\n    else:\n        return \"-1\" "
    },
    {
        "number": 4288,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A == B and B != C:\n        return \"Yes\"\n    elif B == C and C != A:\n        return \"Yes\"\n    elif A == C and A != B:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4288,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A == B and B != C and A != C:\n        return \"Yes\"\n    elif B == C and A != B and A != C:\n        return \"Yes\"\n    elif A == C and B != A and B != C:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4288,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a == b and b != c:\n        return \"Yes\"\n    elif a == c and c != b:\n        return \"Yes\"\n    elif b == c and c != a:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ndef"
    },
    {
        "number": 4288,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A == B and A != C:\n        return \"Yes\"\n    elif A == C and A != B:\n        return \"Yes\"\n    elif B == C and B != A:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A == B or B == C or A == C:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4288,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A == B or A == C or B == C:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ndef"
    },
    {
        "number": 4288,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n\n    if A == B and B != C:\n        return \"Yes\"\n    elif A == C and C != B:\n        return \"Yes\"\n    elif B == C and C != A:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A == B and B != C:\n        return \"Yes\"\n    elif A == C and C != B:\n        return \"Yes\"\n    elif B == C and C != A:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4288,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A == B or B == C or A == C:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n\n    if A == B and B != C:\n        return \"Yes\"\n    elif A == C and C != B:\n        return \"Yes\"\n    elif B == C and C != A:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4289,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    N = int(input_list[0])\n    T, A = map(int, input_list[1].split())\n    H = list(map(int, input_list[2].split()))\n\n    min_diff = abs(T - A)\n    min_index = 0\n\n    for i in range(N):\n        T_i = T - H[i] * 0.006\n        diff = abs(T_i - A)\n        if diff < min_diff:\n            min_diff = diff\n            min_index = i + 1\n\n    return str(min_index)\n"
    },
    {
        "number": 4289,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, T, A = map(int, stdin.split())\n    H = list(map(int, input().split()))\n\n    # Calculate the average temperature for each place\n    temperatures = [T - H[i] * 0.006 for i in range(N)]\n\n    # Find the index of the place with the closest temperature to A\n    closest_temperature = abs(temperatures[0] - A)\n    closest_index = 0\n    for i in range(1, N):\n        current_temperature = abs(temperatures[i] - A)\n        if current_temperature < closest_temperature:\n            closest_temperature = current_temperature\n            closest_index = i\n\n    return str(closest_index)\n"
    },
    {
        "number": 4289,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def avg_temp(elevation: int, T: int) -> float:\n        return T - elevation * 0.006\n\n    N, T, A = map(int, input().split())\n    H = list(map(int, input().split()))\n\n    min_diff = float('inf')\n    index = -1\n\n    for i, elevation in enumerate(H):\n        temp = avg_temp(elevation, T)\n        diff = abs(temp - A)\n\n        if diff < min_diff:\n            min_diff = diff\n            index = i\n\n    return index\n"
    },
    {
        "number": 4289,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N, T, A = map(int, stdin.split())\n    H = list(map(int, stdin.split()))\n\n    # calculate average temperatures\n    T_H = [(H[i] * T - H[i] * A) / H[i] for i in range(N)]\n\n    # find the place with the closest average temperature\n    min_diff = float('inf')\n    min_index = -1\n    for i in range(N):\n        diff = abs(T_H[i] - A)\n        if diff < min_diff:\n            min_diff = diff\n            min_index = i\n\n    # print the result\n    return str(min_index)\n"
    },
    {
        "number": 4289,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, T, A = map(int, input().split())\n    H = list(map(int, input().split()))\n\n    min_diff = float('inf')\n    min_index = -1\n\n    for i in range(N):\n        diff = abs(A - (T - H[i] * 0.006))\n        if diff < min_diff:\n            min_diff = diff\n            min_index = i\n\n    return str(min_index)\n"
    },
    {
        "number": 4289,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, T, A = map(int, stdin.split())\n    H = list(map(int, stdin.split()[1:]))\n    min_diff = float('inf')\n    place = 0\n    for i in range(N):\n        avg_temp = T - H[i] * 0.006\n        diff = abs(avg_temp - A)\n        if diff < min_diff:\n            min_diff = diff\n            place = i+1\n    return str(place)\n"
    },
    {
        "number": 4289,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    N = int(input_data[0])\n    T = int(input_data[1].split(' ')[0])\n    A = int(input_data[1].split(' ')[1])\n    H = [int(h) for h in input_data[2].split(' ')]\n\n    min_diff = float('inf')\n    place_index = -1\n\n    for i, h in enumerate(H):\n        average_temp = T - h * 0.006\n        diff = abs(A - average_temp)\n        if diff < min_diff:\n            min_diff = diff\n            place_index = i\n\n    return place_index"
    },
    {
        "number": 4289,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, T, A = map(int, input().split())\n    H = list(map(int, input().split()))\n\n    min_diff = float('inf')\n    min_index = -1\n\n    for i in range(N):\n        diff = abs(T - (T - H[i] * 0.006)) - abs(A - (T - H[i] * 0.006))\n        if diff < min_diff:\n            min_diff = diff\n            min_index = i\n\n    return min_index\n"
    },
    {
        "number": 4289,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, T, A = map(int, stdin.split())\n    H = list(map(int, stdin.split()[N+2:]))\n    min_temp = float('inf')\n    min_temp_index = -1\n\n    for i in range(N):\n        temp = T - H[i] * 0.006\n        if abs(temp - A) < min_temp:\n            min_temp = abs(temp - A)\n            min_temp_index = i\n\n    return str(min_temp_index)\n"
    },
    {
        "number": 4289,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, T, A = map(int, input().split())\n    H = list(map(int, input().split()))\n\n    # Calculate the average temperature for each place\n    temperatures = [(T - H[i] * 0.006) for i in range(N)]\n\n    # Find the index of the place with the closest temperature to A\n    closest_temperature = min(temperatures, key=lambda x: abs(x - A))\n    index = temperatures.index(closest_temperature)\n\n    return index\n\n\ndef"
    },
    {
        "number": 4290,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    \n    # Calculate the number of even numbers and odd numbers\n    count_even = (N + M) // 2\n    count_odd = N + M - count_even\n    \n    # Calculate the number of ways to choose two balls with even and two balls with odd numbers\n    count = count_even * count_odd\n    \n    return str(count)"
    },
    {
        "number": 4290,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    total = N + M\n    if total % 2 == 0:\n        return 0\n    elif total % 4 == 1:\n        return (total - 1) // 2\n    else:\n        return (total + 1) // 2\n\n\ninput_stdin = input(\"Enter N and M separated by a space: \")\noutput = solution(input_stdin)\nprint(output)\n"
    },
    {
        "number": 4290,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    N = int(input_list[0])\n    M = int(input_list[1])\n\n    result = 0\n\n    for i in range(N+1):\n        for j in range(M+1):\n            if (i+j) % 2 == 0:\n                result += 1\n\n    return str(result)\n\ninput_str = \"2 1\"\nprint(solution(input_str)) "
    },
    {
        "number": 4290,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split()\n    N = int(input_data[0])\n    M = int(input_data[1])\n\n    count = 0\n    for i in range(N+M):\n        for j in range(i+1, N+M):\n            if (i < N) != (j < N):  # XOR operation\n                count += 1\n\n    return str(count)"
    },
    {
        "number": 4290,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin.split()\n    N = int(input_str[0])\n    M = int(input_str[1])\n    \n    # Since the sum of two even numbers is even and the sum of two odd numbers is odd, the sum of two balls chosen at random from N+M balls will be even with probability N/2.\n    # Since we need the sum of two balls to be even, we need to choose N/2 balls with even numbers and M/2 balls with odd numbers.\n    # This gives us a total of (N+M)/2 pairs of balls, where each pair has a probability of 1/2.\n    # The answer is therefore (N+M)/4.\n    answer = (N + M) // 4\n    \n    return str(answer)"
    },
    {
        "number": 4290,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n\n    # Since we are not given the actual values, we can use a simple brute force approach.\n    # We can generate all possible pairs of balls (N+M choose 2) and check if the sum of their values is even.\n    # If the sum is even, we increment a counter.\n\n    count = 0\n    for i in range(N+M):\n        for j in range(i+1, N+M):\n            if (i < N and j < N) or (i >= N and j >= N):\n                continue\n            if (i < N and j >= N) or (i >= N and j < N):\n                count += 1\n    return count\n"
    },
    {
        "number": 4290,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    \n    return \"1\"\n"
    },
    {
        "number": 4290,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin.strip().split()\n    N = int(input_str[0])\n    M = int(input_str[1])\n\n    if 2 * N > M + N:\n        count = M\n    else:\n        count = M + N - 2 * M\n\n    return str(count)"
    },
    {
        "number": 4290,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    result = 0\n    for i in range(N+1):\n        for j in range(M+1):\n            if i+j == N+M and (i+j) % 2 == 0:\n                result += 1\n    return str(result)\n"
    },
    {
        "number": 4290,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    # The number of ways to choose 2 balls from N+M balls where the sum is even\n    # is the same as the number of ways to choose 2 balls from N balls where the sum is even\n    # plus the number of ways to choose 2 balls from M balls where the sum is even\n    answer = comb(N, 2) + comb(M, 2)\n    return str(answer)"
    },
    {
        "number": 4291,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.split())\n    S = input()\n    count = 0\n    result = []\n\n    for _ in range(Q):\n        l, r = map(int, input().split())\n        sub = S[l-1:r]\n        count = sub.count(\"AC\")\n        result.append(count)\n\n    return \"\\n\".join(map(str, result))\n"
    },
    {
        "number": 4291,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.split())\n    S = input()\n    result = []\n    \n    for _ in range(Q):\n        l_i, r_i = map(int, input().split())\n        sub_str = S[l_i-1:r_i]\n        count = sub_str.count('AC')\n        result.append(count)\n        \n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 4291,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.split()[:2])\n    S = stdin.split()[2]\n    result = []\n\n    for _ in range(Q):\n        l_i, r_i = map(int, stdin.split()[-2:])\n        sub_str = S[l_i-1:r_i]\n        count = sub_str.count(\"AC\")\n        result.append(count)\n\n    return \"\\n\".join(map(str, result))\n"
    },
    {
        "number": 4291,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.split()[:2])\n    S = stdin.split()[2]\n    result = []\n\n    for i in range(Q):\n        l_i, r_i = map(int, stdin.split()[2 + i * 2: 2 + (i + 1) * 2])\n        substring = S[l_i - 1: r_i]\n        count = substring.count('AC')\n        result.append(count)\n\n    return '\\n'.join(map(str, result))\n\ndef"
    },
    {
        "number": 4291,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.split())\n    S = input()\n    result = []\n\n    for _ in range(Q):\n        l, r = map(int, input().split())\n        count = 0\n        for i in range(l, r - 1):\n            if S[i] == \"A\" and S[i+1] == \"C\":\n                count += 1\n        result.append(count)\n\n    return \"\\n\".join(map(str, result))\n"
    },
    {
        "number": 4291,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def count_substring(s: str, pattern: str) -> int:\n        count = 0\n        for i in range(len(s) - len(pattern) + 1):\n            if s[i:i+len(pattern)] == pattern:\n                count += 1\n        return count\n\n    # Read input\n    N, Q = map(int, stdin.split()[:2])\n    S = stdin.split()[2]\n    queries = [list(map(int, stdin.split()[3+i*2:5+i*2])) for i in range(Q)]\n\n    # Process queries\n    result = []\n    for l, r in queries:\n        pattern = 'AC'\n        substring = S[l-1:r]\n        count = count_substring(substring, pattern)\n        result.append(count)\n\n    # Return result\n    return '\\n'.join(map(str, result))\n"
    },
    {
        "number": 4291,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.split()[0:2])\n    S = stdin.split()[2]\n    result = []\n\n    for _ in range(Q):\n        l_i, r_i = map(int, stdin.split()[3:5])\n        count = S[l_i:r_i+1].count(\"AC\")\n        result.append(count)\n\n    return \"\\n\".join(map(str, result))\n"
    },
    {
        "number": 4291,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split(\"\\n\")\n    N = int(input_data[0])\n    Q = int(input_data[1])\n    S = input_data[2]\n    output = []\n\n    for i in range(Q):\n        l_i, r_i = map(int, input_data[3 + i].split())\n        substring = S[l_i - 1:r_i]\n        count = substring.count(\"AC\")\n        output.append(count)\n\n    return \"\\n\".join(map(str, output))\n"
    },
    {
        "number": 4291,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.split()[:2])\n    S = stdin.split()[2]\n    result = []\n    \n    for _ in range(Q):\n        l, r = map(int, stdin.split()[3:5])\n        sub_str = S[l-1:r]\n        count = sub_str.count('AC')\n        result.append(count)\n        \n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 4291,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.split()[0:2])\n    S = stdin.split()[2]\n    result = []\n\n    for i in range(Q):\n        l, r = map(int, stdin.split()[3 + i * 2:5 + i * 2])\n        substring = S[l - 1:r]\n        count = substring.count('AC')\n        result.append(count)\n\n    return '\\n'.join(map(str, result))\n"
    },
    {
        "number": 4292,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[:2])\n    prices = list(map(int, stdin.split()[2:]))\n    if K > N:\n        return \"K should be less than or equal to N\"\n    if K <= 0:\n        return \"K should be greater than 0\"\n    prices.sort()\n    total = sum(prices[:K])\n    return total\n"
    },
    {
        "number": 4292,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, input().split())\n    prices = list(map(int, input().split()))\n    \n    # Sort the prices in ascending order\n    prices.sort()\n\n    # Calculate the total price of the K fruits with the lowest prices\n    total_price = sum(prices[:K])\n\n    return str(total_price)\n"
    },
    {
        "number": 4292,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split(\"\\n\")\n    N, K = map(int, input_data[0].split())\n    prices = list(map(int, input_data[1].split()))\n    if K > N:\n        return \"error\"\n    prices.sort()\n    min_total_price = sum(prices[:K])\n    return str(min_total_price)"
    },
    {
        "number": 4292,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, K = map(int, stdin.split()[:2])\n    prices = list(map(int, stdin.split()[2:]))\n\n    # Sort prices in descending order\n    prices.sort(reverse=True)\n\n    # Find the sum of the K fruits with the highest prices\n    total_price = sum(prices[:K])\n\n    return str(total_price)"
    },
    {
        "number": 4292,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin.strip().split()\n    N = int(input_str[0])\n    K = int(input_str[1])\n    prices = list(map(int, input_str[2:]))\n    prices.sort()\n    return sum(prices[:K])\n\nstdin = \"5 3\\n50 100 80 120 80\"\nprint(solution(stdin)) "
    },
    {
        "number": 4292,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[:2])\n    prices = list(map(int, stdin.split()[2:]))\n    prices.sort()\n    return sum(prices[:K])"
    },
    {
        "number": 4292,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    prices = list(map(int, input().split()))\n    prices.sort()\n    return sum(prices[:K])"
    },
    {
        "number": 4292,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[:2])\n    prices = list(map(int, stdin.split()[2:]))\n    \n    prices.sort()\n    \n    min_price = sum(prices[:K])\n    \n    return str(min_price)\n\n\ndef"
    },
    {
        "number": 4292,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, input().split())\n    fruits = list(map(int, input().split()))\n    fruits.sort(reverse=True)\n    return sum(fruits[:K])\n"
    },
    {
        "number": 4292,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[:2])\n    prices = list(map(int, stdin.split()[2:]))\n\n    if K > N:\n        return \"K must be less than or equal to N\"\n\n    prices.sort()\n    total_price = sum(prices[:K])\n\n    return str(total_price)\n"
    },
    {
        "number": 4293,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    P, Q, R = map(int, stdin.split())\n    flights = [(P, \"A\" \"B\"), (Q, \"B\" \"C\"), (R, \"C\" \"A\")]\n    \n    min_time = float('inf')\n    for i in range(len(flights)):\n        for j in range(i+1, len(flights)):\n            time1, _ = flights[i]\n            time2, _ = flights[j]\n            total_time = time1 + time2\n            if total_time < min_time:\n                min_time = total_time\n    \n    return str(min_time)"
    },
    {
        "number": 4293,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    P, Q, R = map(int, stdin.split())\n\n    # Calculate the minimum sum of the flight times\n    min_sum = min(P + Q, P + R, Q + R)\n\n    return str(min_sum)\n"
    },
    {
        "number": 4293,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    P, Q, R = map(int, stdin.split())\n    flights = {\n        (1, 2): P,\n        (2, 3): Q,\n        (3, 1): R\n    }\n    all_routes = [(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1)]\n    min_sum = float('inf')\n    for route in all_routes:\n        flight_times = [flights[tuple(sorted([route[i-1], route[i]]))] for i in range(1, len(route))]\n        min_sum = min(min_sum, sum(flight_times))\n    return str(min_sum)\n"
    },
    {
        "number": 4293,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    P, Q, R = map(int, stdin.split())\n    return min(1 + P + Q, 1 + R + Q, 1 + R + P, 1 + P + R, 1 + P + Q, 1 + Q + P)"
    },
    {
        "number": 4293,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    P, Q, R = map(int, stdin.split())\n    min_sum = float('inf')\n    min_sum = min(min_sum, P + Q + R)\n    min_sum = min(min_sum, Q + P + R)\n    min_sum = min(min_sum, P + Q + R - P)\n    min_sum = min(min_sum, P + Q + R - Q)\n    min_sum = min(min_sum, Q + P + R - P)\n    min_sum = min(min_sum, Q + P + R - Q)\n    return str(min_sum)\n\ninput_str = input()\noutput_str = solution(input_str)\nprint(output_str) "
    },
    {
        "number": 4293,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_data = list(map(int, stdin.split()))\n    P, Q, R = input_data\n    flights = [(P, 1), (Q, 2), (R, 3), (P, 4), (Q, 5), (R, 6)]\n    flights.sort(key=lambda x: x[0])\n    min_sum = sum(flights[0])\n    for i in range(1, len(flights)):\n        if flights[i][1] - flights[i-1][1] == 1:\n            min_sum += flights[i][0]\n        else:\n            break\n    return str(min_sum)\n"
    },
    {
        "number": 4293,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    P, Q, R = map(int, stdin.split())\n    flights = {\n        \"A\": {\"B\": P, \"C\": R},\n        \"B\": {\"A\": P, \"C\": Q},\n        \"C\": {\"A\": R, \"B\": Q}\n    }\n    min_sum = float('inf')\n    for start in flights:\n        for end in flights[start]:\n            if end in flights[start]:\n                min_sum = min(min_sum, flights[start][end] + flights[end][start])\n    return str(min_sum)\n"
    },
    {
        "number": 4293,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    P, Q, R = map(int, stdin.split())\n    flights = [(P, B), (Q, C), (R, A)]\n    routes = [(A, B, C), (A, C, C), (B, A, C), (B, C, A), (C, A, B), (C, B, A)]\n    min_sum = float('inf')\n\n    for route in routes:\n        total_sum = 0\n        for i in range(len(route) - 1):\n            for flight in flights:\n                if route[i] == flight[0] and route[i+1] == flight[1]:\n                    total_sum += flight[0]\n                    break\n        min_sum = min(min_sum, total_sum)\n\n    return str(min_sum)"
    },
    {
        "number": 4293,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    P, Q, R = map(int, stdin.split())\n    return min(1 + P + Q, 4 + P + R, 1 + Q + R, 4 + Q + R, 4 + P + Q)"
    },
    {
        "number": 4293,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    P, Q, R = map(int, stdin.split())\n    routes = [(1, P), (2, Q), (3, R)]\n    routes.sort(key=lambda x: x[1])\n    return str(routes[-1][1] + routes[-2][1])\n\ninput_str = \"1 3 4\"\noutput_str = solution(input_str)\nprint(output_str) "
    },
    {
        "number": 4294,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, a = map(int, stdin.split())\n    if x < a:\n        return \"0\"\n    else:\n        return \"10\"\n\ninput_str = input(\"Enter X and A separated by space: \")\nresult = solution(input_str)\nprint(result) "
    },
    {
        "number": 4294,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, a = map(int, stdin.split())\n    if x < a:\n        return \"0\"\n    else:\n        return \"10\""
    },
    {
        "number": 4294,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, a = map(int, stdin.split())\n    if x < a:\n        return '0'\n    else:\n        return '10'"
    },
    {
        "number": 4294,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    X, A = map(int, stdin.split())\n    if X < A:\n        return '0'\n    else:\n        return '10'\n\ninput_string = input()\nprint(solution(input_string)) "
    },
    {
        "number": 4294,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X, A = map(int, stdin.split())\n    if X < A:\n        return str(0)\n    else:\n        return str(10)"
    },
    {
        "number": 4294,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    X, A = map(int, stdin.split())\n    if X < A:\n        return \"0\"\n    else:\n        return \"10\""
    },
    {
        "number": 4294,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin.strip()\n    X, A = map(int, input_str.split())\n    if X < A:\n        return \"0\"\n    else:\n        return \"10\""
    },
    {
        "number": 4294,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X, A = map(int, stdin.split())\n    if X < A:\n        return \"0\"\n    else:\n        return \"10\"\n\ninput_str = input(\"Enter input: \")\nprint(solution(input_str)) "
    },
    {
        "number": 4294,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, a = map(int, stdin.split())\n    if x < a:\n        return \"0\"\n    else:\n        return \"10\""
    },
    {
        "number": 4294,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X, A = map(int, stdin.split())\n    if X < A:\n        return \"0\"\n    else:\n        return \"10\"\n\nstdin = input(\"Enter the input: \")\nprint(solution(stdin)) "
    },
    {
        "number": 4295,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    while abs(N - K) > 0:\n        if N > K:\n            N = abs(N - K)\n        else:\n            N = abs(K - N)\n    return str(N)\n\ninput_str = input(\"Enter N and K separated by space: \")\nresult = solution(input_str)\nprint(\"Minimum possible value taken by N after Aoki does the operation zero or more times:\", result) "
    },
    {
        "number": 4295,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    N = int(input_list[0])\n    K = int(input_list[1])\n    diff = abs(N - K)\n    min_value = diff\n\n    while diff != 1:\n        if diff % 2 == 0:\n            diff //= 2\n        else:\n            diff = (diff + 1) // 2\n\n        if diff > 0 and diff < min_value:\n            min_value = diff\n\n    return str(min_value)\n"
    },
    {
        "number": 4295,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    min_value = abs(N - K)\n    return str(min_value)\n\nstdin = input(\"Enter N and K separated by a space: \")\nresult = solution(stdin)\nprint(\"The minimum possible value taken by N after Aoki does the operation zero or more times is:\", result) "
    },
    {
        "number": 4295,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    min_value = N\n\n    while True:\n        new_value = abs(N - K)\n        if new_value >= min_value:\n            break\n        min_value = new_value\n        N = new_value\n\n    return str(min_value)\n\n\ndef"
    },
    {
        "number": 4295,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    Aoki_op = abs(N - K)\n    if Aoki_op > N:\n        return Aoki_op - N\n    else:\n        return N - Aoki_op"
    },
    {
        "number": 4295,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    i = 0\n    while N != K:\n        if N > K:\n            N -= K\n        else:\n            N = K - N\n        i += 1\n    return str(i)\n"
    },
    {
        "number": 4295,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    diff = abs(N - K)\n    if N <= K:\n        return str(diff)\n    elif N - K < 0:\n        return str(diff)\n    else:\n        return str(diff + K)"
    },
    {
        "number": 4295,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    if N > K:\n        N, K = K, N\n    return abs(N - K)"
    },
    {
        "number": 4295,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    min_value = abs(N - K)\n\n    while True:\n        N = abs(N - K)\n        if N < min_value:\n            min_value = N\n        else:\n            break\n\n    return str(min_value)"
    },
    {
        "number": 4295,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_values = stdin.split()\n    N = int(input_values[0])\n    K = int(input_values[1])\n    count = 0\n    while abs(N - K) > N:\n        count += 1\n        N = abs(N - K)\n    return str(count + 1)"
    },
    {
        "number": 4296,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = map(int, stdin.split())\n\n    if A_1 + A_2 + A_3 >= 22:\n        return \"bust\"\n    else:\n        return \"win\"\n\ndef"
    },
    {
        "number": 4296,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = map(int, stdin.split())\n    total = A_1 + A_2 + A_3\n    if total >= 22:\n        return \"bust\"\n    else:\n        return \"win\"\n\ninput_str = input(\"Enter three integers separated by space: \")\nprint(solution(input_str)) "
    },
    {
        "number": 4296,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = map(int, stdin.split())\n    if A_1 + A_2 + A_3 >= 22:\n        return \"bust\"\n    else:\n        return \"win\"\n\n\ndef"
    },
    {
        "number": 4296,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = map(int, stdin.split())\n    total = A_1 + A_2 + A_3\n    if total >= 22:\n        return \"bust\"\n    else:\n        return \"win\""
    },
    {
        "number": 4296,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A1, A2, A3 = map(int, stdin.split())\n    sum_A = A1 + A2 + A3\n\n    if sum_A >= 22:\n        return \"bust\"\n    else:\n        return \"win\"\n\ninput_data = input(\"Enter the three integers separated by space: \")\nprint(solution(input_data)) "
    },
    {
        "number": 4296,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A = [int(x) for x in stdin.split()]\n    if sum(A) >= 22:\n        return \"bust\"\n    else:\n        return \"win\""
    },
    {
        "number": 4296,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = map(int, stdin.split())\n    total = A_1 + A_2 + A_3\n\n    if total >= 22:\n        return \"bust\"\n    else:\n        return \"win\"\n\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4296,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = map(int, stdin.split())\n    \n    if sum([A_1, A_2, A_3]) >= 22:\n        return \"bust\"\n    else:\n        return \"win\""
    },
    {
        "number": 4296,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = map(int, stdin.split())\n    total = A_1 + A_2 + A_3\n    if total >= 22:\n        return \"bust\"\n    else:\n        return \"win\"\n\ninput_str = input(\"Enter A_1 A_2 A_3 separated by space: \")\nprint(solution(input_str)) "
    },
    {
        "number": 4296,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = map(int, stdin.split())\n    if A_1 + A_2 + A_3 >= 22:\n        return \"bust\"\n    else:\n        return \"win\"\n"
    },
    {
        "number": 4297,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 2 == 0 and N % N == 0:\n        return str(N)\n    else:\n        for i in range(N, N*N+1):\n            if i % N == 0 and i % 2 == 0:\n                return str(i)\n    return \"There is no such number.\" "
    },
    {
        "number": 4297,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n\n    # Find the product of the prime factorization of N\n    product = 1\n    for i in range(2, int(N**0.5) + 1):\n        while N % i == 0:\n            product *= i\n            N //= i\n\n    if N > 1:\n        product *= N\n\n    # Find the least common multiple (LCM) of 2 and the product of the prime factorization of N\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    lcm_of_2_and_n = lcm(2, product)\n\n    return str(lcm_of_2_and_n)"
    },
    {
        "number": 4297,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n\n    # Find the smallest multiple of N that is divisible by 2\n    multiple_of_2 = 2\n    while multiple_of_2 % N != 0:\n        multiple_of_2 *= 2\n\n    return str(multiple_of_2)\n"
    },
    {
        "number": 4297,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    # Find the least common multiple (LCM) of 2 and N using the formula:\n    # LCM(a,b) = (a*b) // gcd(a,b)\n    gcd = math.gcd(2, N)\n    lcm = (2 * N) // gcd\n    return str(lcm)\n"
    },
    {
        "number": 4297,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    lcm = N\n    while lcm % 2 != 0:\n        lcm += N\n    return str(lcm)"
    },
    {
        "number": 4297,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N == 1:\n        return \"2\"\n    elif N == 2:\n        return \"2\"\n    else:\n        lcm = 2 * N\n        while True:\n            if lcm % N == 0 and lcm % 2 == 0:\n                return str(lcm)\n            lcm += N\n\ninput_str = input()\noutput_str = solution(input_str)\nprint(output_str) "
    },
    {
        "number": 4297,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    i = 2\n    while True:\n        if i % 2 == 0 and i % N == 0:\n            return str(i)\n        i += 1"
    },
    {
        "number": 4297,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    i = 6\n    while True:\n        if i % 2 == 0 and i % N == 0:\n            return str(i)\n        i += 1\n\n\ninput_string = input()\noutput_string = solution(input_string)\nprint(output_string) "
    },
    {
        "number": 4297,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    LCM = 2 * N  # We know that LCM(2,N) = 2N\n    i = 2  # Start checking from 2, since we know that 2 is a factor of LCM\n\n    while i <= LCM:\n        if LCM % i == 0 and N % i == 0:\n            LCM //= i\n        else:\n            i += 1\n\n    return LCM\n"
    },
    {
        "number": 4297,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    \n    # Find the minimum positive integer divisible by both 2 and N\n    # by checking the LCM (Least Common Multiple) of 2 and N\n    lcm = 2 * N\n    \n    # Find the highest power of 2 that divides lcm\n    power_of_2 = 1\n    while lcm % 2 == 0:\n        lcm //= 2\n        power_of_2 *= 2\n    \n    # Multiply the highest power of 2 with the LCM of 2 and N divided by 2^power_of_2\n    result = power_of_2 * lcm\n    \n    return str(result)"
    },
    {
        "number": 4298,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    return (N - 1) // (2 * D) + 1"
    },
    {
        "number": 4298,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    return min(N, 2 * D + 1)\n\n\ndef"
    },
    {
        "number": 4298,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    inspectors = []\n\n    for i in range(1, N + 1):\n        if i - D < 1:\n            start = 1\n        else:\n            start = i - D\n\n        if i + D > N:\n            end = N\n        else:\n            end = i + D\n\n        inspectors.append(f\"Inspector {i} will inspect trees from {start} to {end}\")\n\n    return f\"Minimum number of inspectors required: {len(inspectors)} \\n{inspectors}\"\n"
    },
    {
        "number": 4298,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    return (N - 1) // (2 * D) + 1\n\ndef"
    },
    {
        "number": 4298,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    if D >= N:\n        return \"1\"\n    else:\n        return \"2\"\n\nN, D = map(int, input().split())\nprint(solution(str(N) + \" \" + str(D))) "
    },
    {
        "number": 4298,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    inspectors = (N + D - 1) // D\n    return str(inspectors)\n"
    },
    {
        "number": 4298,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    return min(2 * D + 1, N // D + N % D)\n\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4298,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    return min(N, D * 2 + 1)\n\ninput_str = \"6 2\"\nprint(solution(input_str)) "
    },
    {
        "number": 4298,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    return min(N, 2 * D + 1)"
    },
    {
        "number": 4298,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    return 1 + (N - 1) // (2 * D)\n"
    },
    {
        "number": 4299,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 2:\n        return \"hon\"\n    elif N % 10 == 3:\n        return \"bon\"\n    elif N % 10 in [0, 1, 6, 8]:\n        return \"pon\"\n    else:\n        return \"hon\"\n\n\ninput_stdin = input()\noutput = solution(input_stdin)\nprint(output) "
    },
    {
        "number": 4299,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if 0 <= N <= 999:\n        if N % 100 == 0 or N % 10 == 0:\n            return \"hon\"\n        elif N % 10 == 2 or N % 10 == 4 or N % 10 == 5 or N % 10 == 7 or N % 10 == 9:\n            return \"hon\"\n        elif N % 10 == 3:\n            return \"bon\"\n        else:\n            return \"pon\"\n    else:\n        return \"Invalid input\"\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4299,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    \n    if N % 10 == 2 or N % 10 == 4 or N % 10 == 5 or N % 10 == 7 or N % 10 == 9:\n        return \"hon\"\n    elif N % 10 == 0 or N % 10 == 1 or N % 10 == 6 or N % 10 == 8:\n        return \"pon\"\n    else:\n        return \"bon\""
    },
    {
        "number": 4299,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    \n    if N % 10 == 2 or N % 10 == 4 or N % 10 == 5 or N % 10 == 7 or N % 10 == 9:\n        return \"hon\"\n    elif N % 10 == 0 or N % 10 == 1 or N % 10 == 6 or N % 10 == 8:\n        return \"pon\"\n    elif N % 10 == 3:\n        return \"bon\"\n    else:\n        return \"Error: Invalid input\""
    },
    {
        "number": 4299,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    \n    if N % 10 == 2 or N % 10 == 4 or N % 10 == 5 or N % 10 == 7 or N % 10 == 9:\n        return \"hon\"\n    elif N % 10 == 0 or N % 10 == 1 or N % 10 == 6 or N % 10 == 8:\n        return \"pon\"\n    elif N % 10 == 3:\n        return \"bon\"\n    else:\n        return \"error\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 10 == 2 or N % 10 == 4 or N % 10 == 5 or N % 10 == 7 or N % 10 == 9:\n        return \"hon\"\n    elif N % 10 == 0 or N % 10 == 1 or N % 10 == 6 or N % 10 == 8:\n        return \"pon\"\n    else:\n        return \"bon\"\n\ndef"
    },
    {
        "number": 4299,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 1000:\n        if N % 10 == 2 or N % 10 == 4 or N % 10 == 5 or N % 10 == 7 or N % 10 == 9:\n            return \"hon\"\n        elif N % 10 == 0 or N % 10 == 1 or N % 10 == 6 or N % 10 == 8:\n            return \"pon\"\n        elif N % 10 == 3:\n            return \"bon\"\n    else:\n        raise ValueError(\"N should be less than 1000\")\n\ninput_str = input(\"N: \")\noutput = solution(input_str)\nprint(output) "
    },
    {
        "number": 4299,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    if N % 10 == 2 or N % 10 == 4 or N % 10 == 5 or N % 10 == 7 or N % 10 == 9:\n        return \"hon\"\n    elif N % 10 == 3:\n        return \"bon\"\n    else:\n        return \"pon\"\n\ninput_str = input()\nresult = solution(input_str)\nprint(result) "
    },
    {
        "number": 4299,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if 1 <= N <= 999:\n        one_place = N % 10\n        if one_place == 2 or one_place == 4 or one_place == 5 or one_place == 7 or one_place == 9:\n            return \"hon\"\n        elif one_place == 0 or one_place == 1 or one_place == 6 or one_place == 8:\n            return \"pon\"\n        elif one_place == 3:\n            return \"bon\"\n        else:\n            return \"Invalid input\"\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 4299,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N == 0:\n        return \"hon\"\n    elif N == 1:\n        return \"pon\"\n    elif N == 2:\n        return \"hon\"\n    elif N == 3:\n        return \"bon\"\n    elif N == 4:\n        return \"hon\"\n    elif N == 5:\n        return \"hon\"\n    elif N == 6:\n        return \"pon\"\n    elif N == 7:\n        return \"hon\"\n    elif N == 8:\n        return \"pon\"\n    elif N == 9:\n        return \"hon\"\n    else:\n        return \"pon\"\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4300,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    d_i = list(map(int, stdin.split()[1:]))\n    health_points = 0\n\n    for i in range(N):\n        for j in range(i + 1, N):\n            health_points += d_i[i] * d_i[j]\n\n    return str(health_points)\n"
    },
    {
        "number": 4300,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def health_points(x: int, y: int) -> int:\n        return x * y\n\n    def takoyaki_combinations(n: int) -> int:\n        return n * (n - 1) // 2\n\n    n, *d = map(int, stdin.split())\n    total_health = 0\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_health += health_points(d[i], d[j])\n\n    return total_health\n"
    },
    {
        "number": 4300,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    d = list(map(int, stdin.split(\"\\n\")[1].split()))\n    total_health = 0\n\n    for i in range(N):\n        for j in range(i + 1, N):\n            total_health += d[i] * d[j]\n\n    return str(total_health)\n\ninput_str = \"3\\n3 1 2\"\noutput_str = solution(input_str)\nprint(output_str) "
    },
    {
        "number": 4300,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, *d = map(int, stdin.split())\n    d = list(d)\n\n    def takoyaki_health(x, y):\n        return x * y\n\n    def total_health(N):\n        total = 0\n        for i in range(N):\n            for j in range(i + 1, N):\n                total += takoyaki_health(d[i], d[j])\n        return total\n\n    return str(total_health(N))\n"
    },
    {
        "number": 4300,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    deliciousness = list(map(int, stdin[1].split()))\n    \n    total_health_points = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            health_points = deliciousness[i] * deliciousness[j]\n            total_health_points += health_points\n    \n    return str(total_health_points)"
    },
    {
        "number": 4300,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    deliciousness = list(map(int, stdin.split()[1:]))\n\n    health_points = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            health_points += deliciousness[i] * deliciousness[j]\n\n    return health_points"
    },
    {
        "number": 4300,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(input())\n    d = list(map(int, input().split()))\n    health_sum = 0\n\n    for i in range(N):\n        for j in range(i+1, N):\n            health_sum += d[i] * d[j]\n\n    return str(health_sum)\n\n\ndef"
    },
    {
        "number": 4300,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, d = stdin.split()\n    N = int(N)\n    d = list(map(int, d.split()))\n\n    total_health = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            total_health += d[i] * d[j]\n\n    return str(total_health)\n"
    },
    {
        "number": 4300,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, d = map(int, stdin.split())\n    d = list(map(int, d))\n    \n    result = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            result += d[i] * d[j]\n    \n    return str(result)\n\n\ninput_str = \"3\\n3 1 2\"\nprint(solution(input_str)) # Output: 11 "
    },
    {
        "number": 4300,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(input())\n    d = list(map(int, input().split()))\n    health_points = 0\n\n    for i in range(N):\n        for j in range(i+1, N):\n            health_points += d[i] * d[j]\n\n    return health_points\n\ninput_str = \"3\\n3 1 2\"\noutput = solution(input_str)\nprint(output) "
    },
    {
        "number": 4301,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = map(int, stdin.split())\n    res = []\n\n    for i in range(1, N + 1):\n        max_value = max(A[j] for j in range(N) if j != i)\n        res.append(str(max_value))\n\n    return \"\\n\".join(res)\n"
    },
    {
        "number": 4301,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def find_max(arr: list, index: int) -> int:\n        max_value = -1\n        for i in range(N):\n            if i != index and max_value < arr[i]:\n                max_value = arr[i]\n        return max_value\n\n    N = int(stdin[0])\n    A = [int(x) for x in stdin[1:].split()]\n    result = []\n    for i in range(N):\n        result.append(find_max(A, i))\n    return '\\n'.join(map(str, result))\n"
    },
    {
        "number": 4301,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = list(map(int, stdin.split()))\n    result = []\n    for i in range(N):\n        max_val = max(A[0:i] + A[i+1:])\n        result.append(max_val)\n    return '\\n'.join(map(str, result))\n\n\ninput_data = '''3\n1\n4\n3'''\nprint(solution(input_data))\n"
    },
    {
        "number": 4301,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    A = [int(x) for x in stdin.split()[1:]]\n\n    result = []\n\n    for i in range(N):\n        max_val = A[0]\n        for j in range(1, N):\n            if A[j] > max_val and j != i:\n                max_val = A[j]\n        result.append(max_val)\n\n    return '\\n'.join(map(str, result))\n"
    },
    {
        "number": 4301,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    A = sorted(A)\n    result = []\n    for i in range(1, N):\n        left, right = 0, i - 1\n        while left < right:\n            if A[left] < A[right]:\n                if A[left] < A[i]:\n                    result.append(A[left])\n                else:\n                    result.append(A[right])\n                    break\n            else:\n                if A[right] < A[i]:\n                    result.append(A[right])\n                else:\n                    result.append(A[left])\n                    break\n            left += 1\n            right -= 1\n        result.append(A[-1])\n    return \"\\n\".join(map(str, result))\n"
    },
    {
        "number": 4301,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def find_max(sequence: list, index: int) -> int:\n        max_value = sequence[0]\n        for i, value in enumerate(sequence):\n            if i == index:\n                continue\n            if value > max_value:\n                max_value = value\n        return max_value\n\n    N = int(stdin.split(\"\\n\")[0])\n    sequence = [int(x) for x in stdin.split(\"\\n\")[1:]]\n\n    for i in range(N):\n        max_value = find_max(sequence, i)\n        print(max_value)\n"
    },
    {
        "number": 4301,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    A = [int(x) for x in stdin[1:]]\n    \n    result = []\n    for i in range(N):\n        max_val = 0\n        for j in range(N):\n            if j == i:\n                continue\n            max_val = max(max_val, A[j])\n        result.append(max_val)\n    \n    return \"\\n\".join(str(x) for x in result)"
    },
    {
        "number": 4301,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, A = list(map(int, stdin.split()))\n    result = []\n    for i in range(1, N + 1):\n        max_value = max(A[j] for j in range(N) if j != i)\n        result.append(max_value)\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 4301,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.splitlines()[0])\n    sequence = [int(x) for x in stdin.splitlines()[1:]]\n\n    for i in range(1, N + 1):\n        max_value = sequence[0]\n        for j in range(1, N):\n            if sequence[j] > max_value:\n                max_value = sequence[j]\n            if sequence[j] != sequence[i]:\n                if sequence[j] > max_value:\n                    max_value = sequence[j]\n        print(max_value)\n"
    },
    {
        "number": 4301,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    A = list(map(int, stdin.split(\"\\n\")[1:]))\n\n    for i in range(1, N+1):\n        max_val = A[0]\n        for j in range(1, N):\n            if A[j] > max_val:\n                max_val = A[j]\n        max_val_list = [max_val]\n        for j in range(1, N):\n            if A[j] < max_val:\n                max_val_list.append(A[j])\n        max_val = max(max_val_list)\n        print(max_val)"
    },
    {
        "number": 4302,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    coins = 0\n\n    # Press A button twice\n    coins += A * 2\n    A -= 1\n\n    # Press B button twice if A is less than B\n    if A < B:\n        coins += B * 2\n        B -= 1\n\n    # Press remaining button\n    if A > B:\n        coins += A * 2\n        A -= 1\n    elif A == B:\n        coins += A * 2\n\n    return str(coins)\n"
    },
    {
        "number": 4302,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    max_coins = 0\n    while A > 0 and B > 0:\n        coins = min(A, B)\n        max_coins += coins\n        if A > B:\n            A -= 1\n        else:\n            B -= 1\n    return max_coins\n"
    },
    {
        "number": 4302,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    max_coins = 0\n\n    for size in range(max(A, B), 0, -1):\n        max_coins += size * 2\n\n        if size <= A and size <= B:\n            A -= size\n            B -= size\n\n        if not A or not B:\n            break\n\n    return str(max_coins)"
    },
    {
        "number": 4302,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    coins = 0\n\n    while A > 0 and B > 0:\n        if A < B:\n            coins += A\n            A = 0\n        elif B < A:\n            coins += B\n            B = 0\n        else:\n            coins += A\n            coins += B\n            A = 0\n            B = 0\n\n    return str(coins)\n\ninput_str = input(\"Enter A and B separated by space: \")\nprint(solution(input_str)) "
    },
    {
        "number": 4302,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    coins = 0\n\n    if A > B:\n        A, B = B, A\n\n    if A == B:\n        coins = A\n    else:\n        coins = A + B\n        A -= 1\n        B -= 1\n        coins = max(coins, A + B)\n        A -= 1\n        B -= 1\n        coins = max(coins, A + B)\n\n    return str(coins)\n\ndef"
    },
    {
        "number": 4302,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A > B:\n        A, B = B, A\n    coins = 0\n    while A > 0 and B > 0:\n        if A > B:\n            coins += B\n            A -= B\n        else:\n            coins += A\n            B -= A\n    return str(coins)\n\ninput_str = \"5 3\"\nprint(solution(input_str)) "
    },
    {
        "number": 4302,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, input().split())\n    max_coins = 0\n\n    # press button A twice\n    max_coins += (A * 2)\n    A -= 1\n\n    # press button B twice\n    max_coins += (B * 2)\n    B -= 1\n\n    # press the remaining button\n    max_coins += min(A, B)\n\n    return str(max_coins)\n"
    },
    {
        "number": 4302,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A < 3 or B < 3 or A > 20 or B > 20:\n        return \"Invalid input. Please follow the constraints.\"\n    coins = 0\n    while A > 0 and B > 0:\n        if A > B:\n            coins += B\n            A -= 1\n        else:\n            coins += A\n            B -= 1\n    return str(coins)"
    },
    {
        "number": 4302,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    count = 0\n    \n    if A <= B:\n        count += A\n        A -= 1\n    else:\n        count += B\n        B -= 1\n    \n    if A == 0 or B == 0:\n        return str(count)\n    \n    A, B = max(A, B), min(A, B)\n    \n    while A > 0 and B > 0:\n        A, B = A - B, B - 1\n        count += A\n        A, B = max(A, B), min(A, B)\n    \n    return str(count)"
    },
    {
        "number": 4302,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, input().split())\n    max_coins = 0\n    while A > 0 and B > 0:\n        if A > B:\n            max_coins += B\n            A -= 1\n        elif B > A:\n            max_coins += A\n            B -= 1\n        else:\n            max_coins += A\n            A = 0\n            B = 0\n    return str(max_coins)"
    },
    {
        "number": 4303,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    \n    # Sort the array in ascending order\n    x.sort()\n    \n    # Initialize variables\n    i = 0  # index of the current candle\n    count = 0  # count of candles lit\n    min_time = 0  # minimum time required to light K candles\n    \n    while count < K:\n        min_time += abs(x[i] - x[i+1])\n        i += 1\n        count += 1\n    \n    return min_time"
    },
    {
        "number": 4303,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, input().split())\n    x = list(map(int, stdin.split()))\n\n    # Calculate the minimum time required to light K candles\n    time = 0\n    for i in range(N - K, N):\n        time += abs(x[i + 1] - x[i])\n\n    return str(time)\n"
    },
    {
        "number": 4303,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[0:2])\n    x = list(map(int, stdin.split()[2:]))\n\n    # Sort the candles by their coordinates\n    x.sort()\n\n    # Calculate the time required to move from the leftmost to the K-th candle\n    time_to_move = x[K - 1] - x[0]\n\n    # Calculate the time required to light the K candles\n    time_to_light = sum(x[i] - x[i - 1] for i in range(1, K))\n\n    # Calculate the minimum time required\n    min_time = time_to_move + time_to_light\n\n    return str(min_time)"
    },
    {
        "number": 4303,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n\n    # Initialize minimum time required to light K candles\n    min_time = 0\n\n    # Sort the x list\n    x.sort()\n\n    # Move to the position of the first K candles\n    current_position = x[K - 1]\n\n    # Light K candles\n    for i in range(K):\n        min_time += abs(current_position - x[i])\n        current_position = x[i]\n\n    return str(min_time)\n"
    },
    {
        "number": 4303,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    x = list(map(int, stdin.split()[1:]))\n    x.sort()\n    time = 0\n    i = 0\n    while K > 0 and i < N:\n        if x[i] < 0:\n            time -= x[i]\n        else:\n            time += x[i]\n        i += 1\n        K -= 1\n    return time\n\n\nstdin = \"5 3\\n-30 -10 10 20 50\"\nprint(solution(stdin))  # Output: 40 "
    },
    {
        "number": 4303,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[0:2])\n    x = list(map(int, stdin.split()[2:]))\n    min_time = 0\n\n    for i in range(N):\n        if i < K:\n            min_time += abs(x[i+1] - x[i])\n        else:\n            break\n\n    return min_time\n"
    },
    {
        "number": 4303,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    x = list(map(int, stdin.split()[1:]))\n    \n    x.sort()\n    current_position = 0\n    time = 0\n    count = 0\n    \n    for i in range(K):\n        while x[i] > current_position:\n            current_position += 1\n            time += 1\n        count += 1\n        \n    return time\n\n\ninput_str = \"5 3\\n-30 -10 10 20 50\"\nprint(solution(input_str)) "
    },
    {
        "number": 4303,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.splitlines()\n    N, K = map(int, input_data[0].split())\n    x = list(map(int, input_data[1].split()))\n\n    # Sort the x_i values in ascending order\n    x.sort()\n\n    # Initialize variables\n    time = 0\n    curr_pos = x[0]\n    burned_candles = 0\n\n    # Iterate through the x_i values\n    for i in range(1, N):\n        # If the current position is the same as the i-th x_i value\n        if curr_pos == x[i]:\n            # Light the candle and increment the burned candles count\n            burned_candles += 1\n            # If the number of burned candles equals K, break the loop\n            if burned_candles == K:\n                break\n        # If the current position is less than the i-th x_i value\n        elif curr_pos < x[i]:\n            # Move to the i-th x_i value and increment time\n            curr_pos = x[i]\n            time += abs(curr_pos - x[i - 1])\n        # If the current position is greater than the i-th x_i value\n        else:\n            # Move to the i-th x_i value and increment time\n            curr_pos = x[i]\n            time += abs(curr_pos - x[i - 1])\n            # If the number of burned candles equals K, break the loop\n            if burned_candles == K:\n                break\n\n    # Return the minimum time required to light K candles\n    return time"
    },
    {
        "number": 4303,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[:2])\n    x = list(map(int, stdin.split()[2:]))\n\n    # Calculate the time to move to the starting position\n    time = abs(x[K - 1])\n\n    # Calculate the time to light the K candles\n    for i in range(K - 1):\n        time += abs(x[i] - x[i + 1])\n\n    return time"
    },
    {
        "number": 4303,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n\n    # Sort the candles based on their position\n    x.sort()\n\n    # Calculate the minimum time required to light K candles\n    total_time = 0\n    i = 0\n    while i < N and K > 0:\n        # Find the first K candles that are not yet lit\n        while i < N - 1 and x[i] == x[i + 1]:\n            i += 1\n\n        # Move to the position of the first unlit candle\n        total_time += abs(x[i] - 0)\n\n        # Light the first unlit candle\n        K -= 1\n\n        # Move to the position of the next candle\n        i += 1\n\n        # Move to the position of the next unlit candle\n        while i < N and x[i] == x[i - 1]:\n            i += 1\n\n        # Move to the position of the next unlit candle\n        total_time += abs(x[i] - x[i - 1])\n\n        # Light the next unlit candle\n        K -= 1\n\n        # Move to the position of the next candle\n        i += 1\n\n    return total_time\n"
    },
    {
        "number": 4304,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split()\n    a, b = map(int, input_data)\n\n    # Calculate the height of the towers\n    height_west_tower = 0\n    height_east_tower = 0\n\n    for i in range(1, 1000):\n        height_west_tower += i\n        if height_west_tower >= a:\n            break\n\n    for i in range(1, 1000):\n        height_east_tower += i\n        if height_east_tower >= b:\n            break\n\n    # Calculate the snow cover\n    snow_cover = abs(a - height_west_tower) + abs(b - height_east_tower)\n\n    return str(snow_cover)"
    },
    {
        "number": 4304,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    \n    # Compute the total height of the village\n    total_height = 0\n    for i in range(1, 1000):\n        total_height += i\n    \n    # Compute the height of the two towers\n    tower_height_1 = (a // 1) * ((a // 1) + 1) // 2\n    tower_height_2 = (b // 1) * ((b // 1) + 1) // 2\n    \n    # Compute the height of the village excluding the two towers\n    height_excluding_towers = total_height - tower_height_1 - tower_height_2\n    \n    # Compute the snow depth\n    snow_depth = height_excluding_towers // 2\n    \n    # Return the snow depth\n    return str(snow_depth)\n"
    },
    {
        "number": 4304,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n\n    if a > b:\n        a, b = b, a\n\n    snow_depth = b - a\n\n    return str(snow_depth)\n"
    },
    {
        "number": 4304,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    \n    # Calculate the total height of the village\n    total_height = 1000 * (1 + 2 + 3 + ... + 999)\n    \n    # Calculate the depth of snow cover assuming that it's the same everywhere\n    snow_cover_depth = total_height - (a + b)\n    \n    # Check if the depth is at least 1 meter\n    if snow_cover_depth >= 1:\n        return str(snow_cover_depth)\n    else:\n        return \"0\""
    },
    {
        "number": 4304,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    total_height = 499500\n    snow_cover = (total_height - (a + b)) // 2\n    return str(snow_cover)\n"
    },
    {
        "number": 4304,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n\n    # Assuming that the depth of the snow cover is always at least 1 meter\n    min_snow_depth = 1\n\n    # Assuming that the height of the towers is the sum of all integers from 1 to a-1\n    total_height_of_towers = sum(range(1, a))\n\n    # Assuming that the height of the towers is the sum of all integers from 1 to b-1\n    total_height_of_towers += sum(range(1, b))\n\n    # Subtract the difference between the two towers' heights\n    total_height_of_towers -= abs(b - a)\n\n    # Calculate the depth of the snow cover\n    snow_depth = total_height_of_towers // (a - 1)\n\n    # Ensure that the depth of the snow cover is at least 1 meter\n    snow_depth = max(snow_depth, min_snow_depth)\n\n    return str(snow_depth)\n"
    },
    {
        "number": 4304,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    total_height = 499500  # 1 + 2 + 3 + ... + 999\n    height_west_tower = 1 + a - 1\n    height_east_tower = 1 + total_height - b\n\n    snow_cover = min(height_west_tower, height_east_tower)\n\n    return str(snow_cover)\n"
    },
    {
        "number": 4304,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    x = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10\n    snow_cover = (a * 10 + b * (x - 10)) // 2\n    return str(snow_cover)\n\n\ninput_stdin = \"8 13\"\noutput = solution(input_stdin)\nprint(output) "
    },
    {
        "number": 4304,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > 499500 or b > 499500:\n        return \"Error: Input values are too large\"\n    if a < b:\n        return \"Error: a must be greater than or equal to b\"\n    return abs(b - a) - 1\n"
    },
    {
        "number": 4304,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n\n    # Calculate the maximum depth of snow cover\n    max_depth = (1 + 2 + 3 + ... + 999) * 2\n\n    # Calculate the actual snow cover depth\n    snow_depth = max_depth - (a + b)\n\n    # Check if the snow depth is within the range of [1, max_depth]\n    if snow_depth < 1 or snow_depth > max_depth:\n        return \"Invalid input\"\n\n    return str(snow_depth)\n"
    },
    {
        "number": 4305,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, A = map(int, stdin.split())\n    attacks_needed = (H + A - 1) // A\n    return str(attacks_needed)\n\nH = int(input())\nA = int(input())\nstdin = f\"{H} {A}\"\nresult = solution(stdin)\nprint(result) "
    },
    {
        "number": 4305,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    H, A = map(int, stdin.split())\n    return (H + A - 1) // A\n\nH, A = map(int, input().split())\nprint(solution(f\"{H} {A}\")) "
    },
    {
        "number": 4305,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    H, A = map(int, stdin.split())\n    count = 1\n    while H > 0:\n        H -= A\n        count += 1\n    return count\n"
    },
    {
        "number": 4305,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    H, A = map(int, stdin.split())\n    if A <= 0 or H <= 0:\n        return \"0\"\n    attacks = H // A\n    if H % A != 0:\n        attacks += 1\n    return str(attacks)\n\nH, A = map(int, input().split())\nprint(solution(f\"{H} {A}\")) "
    },
    {
        "number": 4305,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    H, A = map(int, stdin.split())\n    attacks = 1\n    monster_health = H\n    \n    while monster_health > 0:\n        monster_health -= A\n        attacks += 1\n    \n    return attacks - 1\n"
    },
    {
        "number": 4305,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    H, A = map(int, stdin.split())\n    if H <= 0:\n        return \"0\"\n    attacks = 0\n    while H > 0:\n        H -= A\n        attacks += 1\n    return str(attacks)"
    },
    {
        "number": 4305,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    H, A = map(int, stdin.split())\n    attack = H // A\n    return str(attack)\n"
    },
    {
        "number": 4305,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    H, A = map(int, stdin.split())\n    return (H - 1) // A + 1"
    },
    {
        "number": 4305,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    H, A = map(int, stdin.split())\n    return (H - 1) // A + 1\n\nH, A = map(int, input().split())\nprint(solution(str(H) + \" \" + str(A))) "
    },
    {
        "number": 4305,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    H, A = map(int, stdin.split())\n    return (H + A - 1) // A\n"
    },
    {
        "number": 4306,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    start = min(A, C)\n    end = max(B, D)\n    return end - start"
    },
    {
        "number": 4306,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    alice_start, alice_end, bob_start, bob_end = map(int, stdin.split())\n\n    # Check if Alice's button was pressed first\n    if alice_start < bob_start:\n        start = alice_start\n        end = min(alice_end, bob_end)\n    else:\n        start = bob_start\n        end = min(alice_end, bob_end)\n\n    # Calculate the duration in seconds\n    duration = end - start\n\n    return str(duration)\n"
    },
    {
        "number": 4306,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n\n    start_time = min(A, C)\n    end_time = max(B, D)\n\n    duration = end_time - start_time\n\n    return duration\n"
    },
    {
        "number": 4306,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    \n    if A >= B or C >= D:\n        return \"Error: Invalid input values\"\n    \n    start_time = min(A, C)\n    end_time = max(B, D)\n    \n    duration = end_time - start_time\n    \n    return str(duration)"
    },
    {
        "number": 4306,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    a_release = max(A, C)\n    b_release = min(B, D)\n    if a_release <= b_release:\n        duration = b_release - a_release\n    else:\n        duration = 0\n    return str(duration)\n\ndef"
    },
    {
        "number": 4306,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    start_time = min(A, C)\n    end_time = max(B, D)\n    result = end_time - start_time\n    return str(result)\n\nstdin = input().strip()\nprint(solution(stdin)) "
    },
    {
        "number": 4306,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    \n    # Find the earliest time when both Alice and Bob are holding down their buttons\n    start_time = max(A, C)\n    \n    # Find the latest time when both Alice and Bob are holding down their buttons\n    end_time = min(B, D)\n    \n    # Check if both Alice and Bob are holding down their buttons during the same time interval\n    if start_time < end_time:\n        return str(end_time - start_time)\n    else:\n        return \"0\""
    },
    {
        "number": 4306,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    start_up = min(A, C)\n    end_A = max(A, B)\n    end_B = max(B, C)\n    end_C = D\n    time_held = min(end_A, end_B, end_C) - start_up\n    return str(time_held)"
    },
    {
        "number": 4306,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    return str(min(B, D) - max(A, C))\n\nstdin = \"0 75 25 100\"\nprint(solution(stdin)) "
    },
    {
        "number": 4306,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    start_time = 0\n    end_time = 0\n\n    A, B, C, D = map(int, stdin.split())\n\n    if A <= B:\n        start_time = A\n    else:\n        start_time = B\n\n    if C <= D:\n        end_time = C\n    else:\n        end_time = D\n\n    return end_time - start_time\n"
    },
    {
        "number": 4307,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    \n    count = 0\n    for num in range(1, N+1):\n        if num % 2 != 0:\n            divisors = 0\n            for i in range(1, num+1):\n                if num % i == 0:\n                    divisors += 1\n            if divisors == 8:\n                count += 1\n    return str(count)\n\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4307,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n\n    count = 0\n    for num in range(3, N + 1, 2):  # skip even numbers, only check odd numbers\n        divisors = [1]\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                divisors.append(i)\n                if i != num // i:\n                    divisors.append(num // i)\n        if len(divisors) == 8:\n            count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4307,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    \n    count = 0\n    \n    for num in range(1, N + 1):\n        divisor_count = 0\n        for i in range(1, num + 1):\n            if num % i == 0:\n                divisor_count += 1\n                if divisor_count == 8:\n                    count += 1\n                    break\n                    \n    return str(count)"
    },
    {
        "number": 4307,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for i in range(1, N+1):\n        divisors_count = 0\n        for j in range(1, N+1):\n            if i % j == 0:\n                divisors_count += 1\n        if i % 2 != 0 and divisors_count == 8:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4307,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            divisors = 0\n            for j in range(1, i+1):\n                if i % j == 0:\n                    divisors += 1\n            if divisors == 8:\n                count += 1\n    return count\n\nn = input()\nprint(solution(n)) "
    },
    {
        "number": 4307,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    \n    count = 0\n    for i in range(1, N+1):\n        if i % 2 != 0:\n            divisors_count = 0\n            for j in range(1, i+1):\n                if i % j == 0:\n                    divisors_count += 1\n            if divisors_count == 8:\n                count += 1\n    \n    return str(count)"
    },
    {
        "number": 4307,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    count = 0\n    \n    for i in range(1, N+1):\n        if i % 2 != 0:\n            divisors = 0\n            for j in range(1, i+1):\n                if i % j == 0:\n                    divisors += 1\n            if divisors == 8:\n                count += 1\n                \n    return str(count)\n\ndef"
    },
    {
        "number": 4307,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n\n    for num in range(1, N+1):\n        divisors = 0\n        for i in range(1, num+1):\n            if num % i == 0:\n                divisors += 1\n        if divisors == 8 and num % 2 != 0:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4307,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    count = 0\n\n    for i in range(3, N, 2):  # Skip even numbers as odd numbers have at least 3 divisors (1, i, N)\n        divisors = [1, i, N]\n        for j in range(2, int(i/2)+1):\n            if i % j == 0:\n                divisors.append(j)\n                if len(divisors) == 8:\n                    count += 1\n                    break\n\n    return str(count)\n"
    },
    {
        "number": 4307,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    count = 0\n\n    for i in range(1, N + 1):\n        if i % 2 != 0 and len(list(range(1, i + 1))) == 8:\n            count += 1\n\n    return str(count)\n\n\ninput_str = input()\noutput_str = solution(input_str)\nprint(output_str) "
    },
    {
        "number": 4308,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    min_diff = float('inf')\n    for i in range(1, N + 1):\n        diff = (i + 1) * (N // K) - i * (N % K)\n        min_diff = min(min_diff, diff)\n    return min_diff\n"
    },
    {
        "number": 4308,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    # Find the minimum possible (absolute) difference between the largest number of crackers received by a user and the smallest number received by a user\n    min_diff = float('inf')\n    for i in range(1, N+1):\n        max_crackers = i * K\n        min_crackers = (N * K) - (i * K)\n        diff = max_crackers - min_crackers\n        min_diff = min(min_diff, diff)\n    return str(min_diff)"
    },
    {
        "number": 4308,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_values = stdin.split()\n    N = int(input_values[0])\n    K = int(input_values[1])\n    num_crackers = [0]*K\n\n    for i in range(N):\n        user_index = i % K\n        num_crackers[user_index] += 1\n\n    max_crackers = max(num_crackers)\n    min_crackers = min(num_crackers)\n\n    return abs(max_crackers - min_crackers)"
    },
    {
        "number": 4308,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    max_crackers = N // K\n    min_crackers = max_crackers + 1\n    return abs(max_crackers - min_crackers)\n"
    },
    {
        "number": 4308,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n\n    min_diff = float('inf')\n\n    for i in range(1, N + 1):\n        for j in range(1, N + 1):\n            diff = abs(i - j)\n            if diff % K == 0:\n                min_diff = min(min_diff, diff)\n\n    return str(min_diff)\n\n\ndef"
    },
    {
        "number": 4308,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_values = list(map(int, stdin.split()))\n    N, K = input_values[0], input_values[1]\n    \n    min_crackers = N // K\n    max_crackers = min_crackers + 1\n    \n    return abs(max_crackers * K - min_crackers * (K - 1))"
    },
    {
        "number": 4308,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    total_crackers = N\n    min_per_user = total_crackers // K\n    max_per_user = min_per_user + 1\n    remainder = total_crackers % K\n    min_diff = abs(max_per_user - min_per_user)\n\n    for i in range(remainder):\n        diff = abs(max_per_user - min_per_user)\n        if diff < min_diff:\n            min_diff = diff\n        min_per_user += 1\n        max_per_user = min_per_user + 1\n\n    return str(min_diff)\n"
    },
    {
        "number": 4308,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_values = list(map(int, stdin.split()))\n    N = input_values[0]\n    K = input_values[1]\n    crackers_per_user = N // K\n    remaining_crackers = N % K\n    min_difference = float('inf')\n\n    for i in range(1, K+1):\n        if i <= remaining_crackers:\n            user_crackers = crackers_per_user + 1\n            remaining_crackers -= 1\n        else:\n            user_crackers = crackers_per_user\n\n        if user_crackers > 0:\n            min_difference = min(min_difference, abs(N - user_crackers * K))\n\n    return str(min_difference)"
    },
    {
        "number": 4308,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    max_crackers = N // K\n    min_crackers = max_crackers + 1\n    return abs(max_crackers - min_crackers)\n\n\ndef"
    },
    {
        "number": 4308,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    return abs(K - 1)\n\nN = int(input())\nK = int(input())\n\nstdin = f\"{N} {K}\"\nprint(solution(stdin)) "
    },
    {
        "number": 4309,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for i in range(100, 1000):\n        if i >= N:\n            break\n        if len(set(str(i))) == 1:\n            count += 1\n    return str(N - count)\n"
    },
    {
        "number": 4309,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    abc = 1\n    while count < N:\n        abc += 1\n        digits = set(str(abc))\n        if len(digits) == 1:\n            count += 1\n    return str(abc)\n\n\nstdin = input()  # read input from standard input\nresult = solution(stdin)  # call solution function\nprint(result)  # output result to console "
    },
    {
        "number": 4309,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    n = 1\n    while True:\n        n_str = str(n)\n        if len(set(n_str)) == 1:\n            if n >= N:\n                return str(n)\n        n += 1"
    },
    {
        "number": 4309,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    n = str(N)\n    while len(n) != len(set(n)):\n        N += 1\n        n = str(N)\n    return n\n\nN = input()\nprint(solution(N)) "
    },
    {
        "number": 4309,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    n = 10\n    while True:\n        if len(set(str(n))) == 1:\n            return str(n)\n        n += 1\n"
    },
    {
        "number": 4309,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 10 != 0:\n        return \"0\"\n    else:\n        return stdin"
    },
    {
        "number": 4309,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    n = 1000000000\n    while n > 100:\n        if len(set(str(n))) == 1:\n            if n >= N:\n                return str(n)\n        n -= 1\n    return \"Impossible\""
    },
    {
        "number": 4309,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 10 == 0:\n        return stdin\n    else:\n        mod = n % 10\n        while n % 10 != mod:\n            n += 1\n        return str(n)\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4309,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    # Generate all possible numbers with the same digit\n    same_digit_numbers = [str(x) for x in range(10)]\n    for i in range(1, 10):\n        for j in range(10):\n            same_digit_numbers.append(str(i) * 3)\n            same_digit_numbers.append(str(i) * 4)\n            same_digit_numbers.append(str(i) * 5)\n            same_digit_numbers.append(str(i) * 6)\n\n    # Find the earliest ABC where Kurohashi can make his debut\n    for number in same_digit_numbers:\n        if int(number) <= N:\n            return number\n\n    return \"Impossible\"\n"
    },
    {
        "number": 4309,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    abc_count = 1\n    while True:\n        digits = str(abc_count)\n        if len(digits) == len(set(digits)):\n            if abc_count >= N:\n                return str(abc_count)\n        abc_count += 1\n\ndef"
    },
    {
        "number": 4310,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_list = list(map(int, stdin.split()))\n    A = sorted(input_list)\n    cost = A[2] - A[0] + A[1] - A[0] + A[2] - A[1]\n    return str(cost)"
    },
    {
        "number": 4310,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    A.sort()\n    total_cost = 0\n    for i in range(len(A)):\n        if i == 0:\n            total_cost += 0\n        else:\n            total_cost += abs(A[i] - A[i-1])\n    return total_cost"
    },
    {
        "number": 4310,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A = [int(x) for x in stdin.split()]\n    A.sort()\n    min_cost = A[0] + A[2] - A[1]\n    return min_cost\n\n\nstdin = input(\"Enter the three values separated by space: \")\nprint(solution(stdin)) "
    },
    {
        "number": 4310,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A = [int(x) for x in stdin.split()]\n    A.sort()\n\n    # Completing the first task at cost 0\n    cost = 0\n\n    # Completing the second task at cost |A_2 - A_1|\n    cost += abs(A[1] - A[0])\n\n    # Completing the third task at cost |A_3 - A_2| or |A_3 - A_1|\n    cost += min(abs(A[2] - A[1]), abs(A[2] - A[0]))\n\n    return str(cost)\n\ninput_string = \"1 6 3\"\nprint(solution(input_string)) # Output: 5 "
    },
    {
        "number": 4310,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    n = len(A)\n    dp = [0] * n\n    dp[0] = 0\n\n    for i in range(1, n):\n        min_cost = float('inf')\n        for j in range(i):\n            min_cost = min(min_cost, abs(A[i] - A[j]))\n        dp[i] = min_cost + dp[j]\n\n    return dp[-1]\n"
    },
    {
        "number": 4310,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    n = len(A)\n    A.sort()\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = A[i]\n        for j in range(i):\n            dp[i] = min(dp[i], dp[j] + abs(A[i] - A[j]))\n    return dp[n-1]\n"
    },
    {
        "number": 4310,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    n = len(A)\n    # Initialize dp array\n    dp = [0] * (n + 1)\n\n    # Base case: cost of completing the first task is 0\n    dp[1] = 0\n\n    # Fill dp array\n    for i in range(2, n + 1):\n        dp[i] = float('inf')\n        for j in range(1, i):\n            dp[i] = min(dp[i], dp[j] + abs(A[i - 1] - A[j - 1]))\n\n    # Find the minimum cost\n    min_cost = float('inf')\n    for i in range(2, n + 1):\n        min_cost = min(min_cost, dp[i])\n\n    return min_cost"
    },
    {
        "number": 4310,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    n = len(A)\n    dp = [0] * n\n    \n    dp[0] = 0\n    for i in range(1, n):\n        dp[i] = abs(A[i] - A[i-1])\n        \n    for i in range(2, n):\n        for j in range(i-1, -1, -1):\n            if abs(A[i] - A[j]) + dp[j] < dp[i]:\n                dp[i] = abs(A[i] - A[j]) + dp[j]\n                \n    return dp[-1]\n\n\nstdin = \"1 6 3\"\nprint(solution(stdin))"
    },
    {
        "number": 4310,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A = [int(x) for x in stdin.split()]\n    \n    # Sort the tasks by their values\n    A.sort()\n    \n    # Initialize minimum cost and task count\n    min_cost = 0\n    task_count = len(A)\n    \n    # Iterate through the tasks\n    for i in range(task_count):\n        # Complete the ith task at cost 0\n        min_cost += 0\n        \n        # Complete the jth task at cost |A_j - A_i|\n        for j in range(i+1, task_count):\n            min_cost += abs(A[j] - A[i])\n        \n        # Update the task count\n        task_count -= 1\n    \n    return str(min_cost)"
    },
    {
        "number": 4310,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    n = len(A)\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = A[i]\n        for j in range(i + 1, n):\n            dp[j] = min(dp[j], dp[i] + abs(A[j] - A[i]))\n    return dp[-1]"
    },
    {
        "number": 4311,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    a = [s]\n    for i in range(2, 1000001):\n        if a[i-1] % 2 == 0:\n            a.append(a[i-1] // 2)\n        else:\n            a.append(3 * a[i-1] + 1)\n\n    min_m = 1000001\n    for i in range(1, len(a)):\n        for j in range(i + 1, len(a)):\n            if a[i] == a[j]:\n                min_m = min(min_m, min(i, j) + 1)\n\n    return str(min_m)\n"
    },
    {
        "number": 4311,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin.strip())\n    a = [s]\n    f = lambda n: n // 2 if n % 2 == 0 else 3 * n + 1\n    for i in range(1, 1000000):\n        a.append(f(a[i - 1]))\n    m = 1\n    n = 1\n    while m < len(a) and n < len(a):\n        if a[m] == a[n]:\n            return m\n        m += 1\n        n += 1\n    return \"No such pair exists.\"\n"
    },
    {
        "number": 4311,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin.strip())\n    \n    a = [s]\n    for i in range(1, 1000001):\n        if i % 2 == 0:\n            a.append(i/2)\n        else:\n            a.append(3*i+1)\n    \n    m = 0\n    for i in range(1, len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] == a[j]:\n                m = i if i < j else j\n                break\n        if m != 0:\n            break\n    \n    return str(m)\n"
    },
    {
        "number": 4311,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    a = [s]\n    f = lambda n: n // 2 if n % 2 == 0 else 3 * n + 1\n    for i in range(1, 1000000 // s):\n        a.append(f(a[i-1]))\n\n    m = 1\n    while True:\n        if a[m] in a[m+1:]:\n            break\n        m += 1\n\n    return str(m)\n"
    },
    {
        "number": 4311,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin.strip())\n    \n    a = [s]\n    while True:\n        if a[-1] % 2 == 0:\n            a.append(a[-1] // 2)\n        else:\n            a.append(3 * a[-1] + 1)\n        if len(a) > 2 and a[-1] == a[-3]:\n            m = len(a) - 1\n            n = len(a) - 3\n            while n >= 0 and a[m] == a[n]:\n                m -= 1\n                n -= 1\n            return m + n + 1\n\n\ndef"
    },
    {
        "number": 4311,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin.strip())\n    a = [s]\n    n = s\n    while n > 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n        a.append(n)\n\n    m = 1\n    while m <= len(a) // 2 and a[m] == a[-m - 1]:\n        m += 1\n\n    return str(m)\n\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4311,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin.split()[0])\n    a = [s]\n    n = s\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        a.append(n)\n\n    m = len(a)\n    for i in range(len(a) - 1):\n        if a[i] == a[m - 1]:\n            m = i + 1\n            break\n\n    return str(m)\n"
    },
    {
        "number": 4311,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin.split()[0])\n    a = [s]\n    i = 1\n    while len(a) < 1000000:\n        if a[i-1] % 2 == 0:\n            a.append(a[i-1] // 2)\n        else:\n            a.append((3 * a[i-1]) + 1)\n        i += 1\n    a = a[:1000000]\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] == a[j]:\n                return str(min(i, j))\n    return \"No such pair exists.\"\n"
    },
    {
        "number": 4311,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    a = [s]\n    while True:\n        if a[-1] % 2 == 0:\n            a.append(a[-1] // 2)\n        else:\n            a.append(3 * a[-1] + 1)\n        if a[-1] in a[:-1]:\n            return len(a) - a[:-1].index(a[-1])\n"
    },
    {
        "number": 4311,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin.strip())\n    a = [s]\n    i = 1\n    while len(str(a[i-1])) < 6:\n        if a[i-1] % 2 == 0:\n            a.append(a[i-1] // 2)\n        else:\n            a.append((3 * a[i-1]) + 1)\n        i += 1\n\n    m = 1\n    while a[m-1] == a[m]:\n        m += 1\n\n    return str(m)\n\n\ndef"
    },
    {
        "number": 4312,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    health_t = A + B\n    health_a = C + D\n    while health_t > 0 and health_a > 0:\n        health_a -= max(1, B-C)\n        health_t -= max(1, A-D)\n    return \"Yes\" if health_a <= 0 else \"No\"\n\nstdin = input()  # Reading input from Standard Input\nresult = solution(stdin)  # Getting the result\nprint(result)  # Printing the result "
    },
    {
        "number": 4312,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n\n    health_takahashi = A + B\n    health_aoki = C + D\n\n    while health_takahashi > 0 and health_aoki > 0:\n        health_aoki -= max(B, D)\n        health_takahashi -= max(A, C)\n\n    return \"Yes\" if health_aoki <= 0 else \"No\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n\n    while A > 0 and C > 0:\n        if A > C:\n            A -= C\n            C = 0\n        else:\n            C -= A\n            A = 0\n\n        if B > D:\n            B -= D\n            D = 0\n        else:\n            D -= B\n            B = 0\n\n    if A > 0:\n        return \"No\"\n    else:\n        return \"Yes\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    health_takahashi = A\n    health_aoki = C\n\n    while True:\n        # Takahashi's monster attacks Aoki's monster\n        health_aoki -= max(0, B - health_aoki)\n\n        if health_aoki <= 0:\n            # Aoki's monster is the first to have 0 or less health, so Takahashi wins\n            return \"Yes\"\n\n        # Aoki's monster attacks Takahashi's monster\n        health_takahashi -= max(0, D - health_takahashi)\n\n        if health_takahashi <= 0:\n            # Takahashi's monster is the first to have 0 or less health, so Aoki wins\n            return \"No\""
    },
    {
        "number": 4312,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    \n    health_takahashi = A + B\n    health_aoki = C + D\n    \n    while True:\n        health_takahashi -= max(health_aoki, 1)\n        health_aoki -= max(health_takahashi, 1)\n        \n        if health_takahashi <= 0:\n            return \"No\"\n        elif health_aoki <= 0:\n            return \"Yes\""
    },
    {
        "number": 4312,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    while A > 0 and C > 0:\n        C -= B\n        if C <= 0:\n            break\n        A -= D\n    return \"Yes\" if A > 0 else \"No\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    health_takahashi = A\n    health_aoki = C\n    turn = 0\n    while health_takahashi > 0 and health_aoki > 0:\n        if turn % 2 == 0:\n            health_aoki -= B\n        else:\n            health_takahashi -= D\n        turn += 1\n        if health_takahashi <= 0:\n            return \"Yes\"\n        if health_aoki <= 0:\n            return \"No\"\n    return \"No\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    health_takahashi = A\n    health_aoki = C\n    while True:\n        health_aoki -= max(0, B - health_aoki)\n        if health_aoki <= 0:\n            return \"Yes\"\n        health_takahashi -= max(0, D - health_takahashi)\n        if health_takahashi <= 0:\n            return \"No\"\n        B -= D\n        D -= A\n        A -= B\n        B -= D\n        D -= A\n        A -= B\n"
    },
    {
        "number": 4312,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n\n    while True:\n        # Takahashi's monster attacks Aoki's monster\n        if A < B:\n            A = 0\n            B -= C\n        else:\n            A -= D\n            B = 0\n\n        # Aoki's monster attacks Takahashi's monster\n        if B < A:\n            B = 0\n            A -= D\n        else:\n            B -= C\n            A = 0\n\n        # If either monster has 0 or less health, the other person wins\n        if A <= 0 or B <= 0:\n            return \"Yes\" if A == 0 else \"No\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    while A > 0 and C > 0:\n        if A < C:\n            C -= A\n            A = 0\n        else:\n            A -= C\n            C = 0\n    while B > 0 and D > 0:\n        if B < D:\n            D -= B\n            B = 0\n        else:\n            B -= D\n            D = 0\n    if A > 0 and C == 0:\n        return \"Yes\"\n    elif B > 0 and D == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4313,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.splitlines()[0])\n    V = list(map(int, stdin.splitlines()[1].split()))\n    C = list(map(int, stdin.splitlines()[2].split()))\n\n    X, Y = 0, 0\n    for i in range(N):\n        X += V[i]\n        Y += C[i]\n\n    return str(max(X - Y, 0))\n\n\ndef"
    },
    {
        "number": 4313,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def find_max_value(N, V, C):\n        dp = [0] * (C[-1] + 1)\n        for i in range(N):\n            for j in range(C[i], -1, -1):\n                if j < C[i]:\n                    dp[j] = max(dp[j], dp[j - C[i]] + V[i])\n                else:\n                    dp[j] = max(dp[j], dp[j - C[i]] + V[i])\n        return dp[-1]\n\n    N, V, C = [list(map(int, input().split())) for _ in range(3)]\n    V, C = V[:N], C[:N]\n    max_value = find_max_value(N, V, C)\n    return max_value"
    },
    {
        "number": 4313,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    values = list(map(int, stdin.split('\\n')[1].split()))\n    costs = list(map(int, stdin.split('\\n')[2].split()))\n\n    max_x_y = 0\n    for i in range(N):\n        x_y = values[i] - costs[i]\n        if x_y > max_x_y:\n            max_x_y = x_y\n\n    return str(max_x_y)\n"
    },
    {
        "number": 4313,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    V = list(map(int, stdin.split(\"\\n\")[1].split()))\n    C = list(map(int, stdin.split(\"\\n\")[2].split()))\n\n    X = sum(V)\n    Y = sum(C)\n\n    max_value = 0\n\n    for i in range(len(V)):\n        max_value = max(max_value, V[i] - C[i])\n\n    return str(X - Y + max_value)\n"
    },
    {
        "number": 4313,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def get_input() -> tuple:\n        N = int(input())\n        V = list(map(int, input().split()))\n        C = list(map(int, input().split()))\n        return N, V, C\n\n    def max_value(N: int, V: list, C: list) -> int:\n        dp = [0] * N\n        dp[0] = V[0] - C[0]\n        for i in range(1, N):\n            dp[i] = max(dp[i-1], V[i] - C[i])\n        return dp[-1]\n\n    N, V, C = get_input()\n    result = max_value(N, V, C)\n    return str(result)\n"
    },
    {
        "number": 4313,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def max_diff(gems: list, costs: list) -> int:\n        value, cost = 0, 0\n        for i in range(len(gems)):\n            if gems[i] > 0:\n                value += gems[i]\n                cost += costs[i]\n            else:\n                gems[i+1:] = [gems[i+1]+gems[i] for i in range(len(gems)-1)]\n                costs[i+1:] = [costs[i+1]+costs[i] for i in range(len(costs)-1)]\n        return max(value - cost, 0)\n\n    N = int(stdin[0])\n    V = list(map(int, stdin[1].split()))[:N]\n    C = list(map(int, stdin[2].split()))[:N]\n\n    return str(max_diff(V, C))\n"
    },
    {
        "number": 4313,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    V = list(map(int, stdin.split(\"\\n\")[1].split()))\n    C = list(map(int, stdin.split(\"\\n\")[2].split()))\n\n    max_profit = 0\n    for i in range(N):\n        profit = V[i] - C[i]\n        if profit > max_profit:\n            max_profit = profit\n\n    return str(max_profit)\n"
    },
    {
        "number": 4313,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def find_max_value(gems_values: list, costs: list) -> int:\n        total_value = sum(gems_values)\n        total_cost = sum(costs)\n        max_value = total_value - total_cost\n        return max_value\n\n    N = int(stdin[0])\n    gems_values = list(map(int, stdin[1].split()))\n    costs = list(map(int, stdin[2].split()))\n\n    return str(find_max_value(gems_values, costs))"
    },
    {
        "number": 4313,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, *V, *C = map(int, stdin.split())\n    V, C = [V[i:i+N] for i in range(0, len(V), N)], [C[i:i+N] for i in range(0, len(C), N)]\n\n    max_profit = 0\n    for i in range(N):\n        for j in range(N):\n            if i != j:\n                profit = V[i][j] - C[i][j]\n                if profit > max_profit:\n                    max_profit = profit\n\n    return max_profit\n\n\ndef"
    },
    {
        "number": 4313,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def get_input() -> tuple:\n        N = int(input())\n        V = list(map(int, input().split()))\n        C = list(map(int, input().split()))\n        return N, V, C\n\n    def calculate_max_diff(N: int, V: list, C: list) -> int:\n        dp = [0] * N\n        for i in range(N):\n            dp[i] = V[i] - C[i]\n\n        for i in range(N):\n            for j in range(i + 1, N):\n                dp[j] = max(dp[j], dp[i] + V[j] - C[j])\n\n        return max(dp)\n\n    N, V, C = get_input()\n    max_diff = calculate_max_diff(N, V, C)\n    return str(max_diff)\n"
    },
    {
        "number": 4314,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    grid = []\n\n    for i in range(H):\n        row = list(stdin.strip())\n        grid.append(row)\n\n    final_grid = []\n\n    while True:\n        row_to_remove = -1\n        col_to_remove = -1\n\n        for i in range(H):\n            if all(grid[i][j] == '.' for j in range(W)):\n                row_to_remove = i\n                break\n\n        for j in range(W):\n            if all(grid[i][j] == '.' for i in range(H)):\n                col_to_remove = j\n                break\n\n        if row_to_remove == -1 and col_to_remove == -1:\n            break\n\n        if row_to_remove != -1:\n            for i in range(row_to_remove, H - 1):\n                grid[i] = grid[i + 1]\n            H -= 1\n\n        if col_to_remove != -1:\n            for i in range(H):\n                del grid[i][col_to_remove]\n                W -= 1\n\n    for i in range(H):\n        final_grid.append(''.join(grid[i]))\n\n    return '\\n'.join(final_grid)\n\ninput_str = '''4 4\n##.#\n....\n##.#\n.#.#'''\n\noutput_str = solution(input_str)\nprint(output_str)\n"
    },
    {
        "number": 4314,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split()[:2])\n    grid = [list(input().strip()) for _ in range(H)]\n    changed = True\n    while changed:\n        changed = False\n        for i in range(H):\n            if all(cell == '.' for cell in grid[i]):\n                grid.pop(i)\n                changed = True\n                break\n        if not changed:\n            for j in range(W):\n                if all(grid[i][j] == '.' for i in range(H)):\n                    for i in range(H-1, -1, -1):\n                        grid[i][j] = '.'\n                    changed = True\n                    break\n    return '\\n'.join(''.join(row) for row in grid)\n"
    },
    {
        "number": 4314,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    H, W = map(int, input_data[0].split())\n    a = [[j for j in input_data[i+1]] for i in range(H)]\n\n    while any(all(a[i][j] == '.' for j in range(W)) for i in range(H)) or any(all(a[i][j] == '.' for i in range(H)) for j in range(W)):\n        for i in range(H):\n            if all(a[i][j] == '.' for j in range(W)):\n                a.pop(i)\n                H -= 1\n                break\n        if H == 0:\n            break\n        for j in range(W):\n            if all(a[i][j] == '.' for i in range(H)):\n                for i in range(H-1, -1, -1):\n                    a[i][j] = a[i-1][j]\n                a.pop(0)\n                H -= 1\n                W -= 1\n                break\n\n    result = \"\"\n    for i in range(H):\n        for j in range(W):\n            result += a[i][j]\n        result += \"\\n\"\n    return result\n"
    },
    {
        "number": 4314,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split()[:2])\n    grid = [list(line) for line in stdin.split('\\n')[1:])\n    while any(all(s == '.' for s in row) for row in grid) or any(all(s == '.' for s in col) for col in zip(*grid)):\n        for i, row in enumerate(grid):\n            if all(s == '.' for s in row):\n                grid.pop(i)\n                break\n        for j, col in enumerate(zip(*grid)):\n            if all(s == '.' for s in col):\n                for _ in range(len(grid)):\n                    grid[_].pop(j)\n                break\n    return '\\n'.join(''.join(row) for row in grid)\n\n\ninput_str = \"\"\"4 4\n##.#\n....\n##.#\n.#.#\"\"\"\n\noutput_str = solution(input_str)\nprint(output_str)"
    },
    {
        "number": 4314,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split()[:2])\n    matrix = [list(line) for line in stdin.strip().split('\\n')[1:H+1]]\n    \n    # Check if there is at least one black square\n    black_squares = [(i, j) for i in range(H) for j in range(W) if matrix[i][j] == '#']\n    if not black_squares:\n        return \"\"\n    \n    # Remove rows and columns with only white squares\n    while True:\n        # Check for rows\n        rows_to_remove = [i for i in range(H) if all(matrix[i][j] == '.' for j in range(W))]\n        if rows_to_remove:\n            for i in rows_to_remove:\n                matrix.pop(i)\n            H -= len(rows_to_remove)\n        else:\n            # Check for columns\n            columns_to_remove = [j for j in range(W) if all(matrix[i][j] == '.' for i in range(H))]\n            if columns_to_remove:\n                for j in columns_to_remove:\n                    for i in range(H):\n                        matrix[i].pop(j)\n                W -= len(columns_to_remove)\n            else:\n                break\n    \n    # Print the final state of the grid\n    for row in matrix:\n        print(''.join(row))\n"
    },
    {
        "number": 4314,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    grid = []\n\n    for _ in range(H):\n        row = list(stdin.readline().strip())\n        grid.append(row)\n\n    final_grid = [['.' for _ in range(W)] for _ in range(H)]\n    black_squares = []\n\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == '#':\n                black_squares.append((i, j))\n\n    while black_squares:\n        i, j = black_squares.pop()\n\n        if i == 0:\n            final_grid[i] = ['#' for _ in range(W)]\n            continue\n\n        if i == H - 1:\n            final_grid[i] = ['#' for _ in range(W)]\n            continue\n\n        if j == 0:\n            for k in range(H):\n                final_grid[k][j] = '#'\n            continue\n\n        if j == W - 1:\n            for k in range(H):\n                final_grid[k][j] = '#'\n            continue\n\n        for k in range(H):\n            if k != i - 1 and k != i and k != i + 1:\n                final_grid[k][j] = '#'\n\n        for k in range(W):\n            if k != j - 1 and k != j and k != j + 1:\n                final_grid[i][k] = '#'\n\n    result = \"\"\n    for i in range(H):\n        result += \"\".join(final_grid[i]) + \"\\n\"\n\n    return result.strip()\n\n\nstdin = \"\"\"4 4\n##.#\n....\n##.#\n.#.#\"\"\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4314,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    grid = [list(input()) for _ in range(H)]\n\n    # Check if there is at least one black square\n    if not any(\"#\" in row for row in grid):\n        raise ValueError(\"There is no black square in the grid\")\n\n    # Compress the grid\n    for i in range(H):\n        if all(c == \".\" for c in grid[i]):\n            grid.pop(i)\n            H -= 1\n        else:\n            for j in range(W):\n                if grid[i][j] == \"#\":\n                    grid[i][j] = \"#\" if j == 0 or grid[i][j - 1] == \"#\" else \".\"\n\n    # Convert the compressed grid to a string\n    compressed_grid = [\"\".join(row) for row in grid]\n\n    return \"\\n\".join(compressed_grid)\n"
    },
    {
        "number": 4314,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split()[:2])\n    grid = [list(line) for line in stdin.splitlines()[1:]]\n    \n    while any(all(square == '.' for square in row) for row in grid) or any(all(square == '.' for square in col) for col in zip(*grid)):\n        for i in range(H):\n            if all(square == '.' for square in grid[i]):\n                grid.pop(i)\n                H -= 1\n                break\n        for j in range(W):\n            if all(grid[i][j] == '.' for i in range(H)):\n                for i in range(H-1, -1, -1):\n                    grid[i].pop(j)\n                W -= 1\n                break\n    \n    return '\\n'.join(''.join(row) for row in grid)\n"
    },
    {
        "number": 4314,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, input().split())\n    grid = [list(input()) for _ in range(H)]\n\n    # Convert grid to binary matrix\n    binary_matrix = []\n    for row in grid:\n        binary_row = ['.' if cell == '.' else '#' for cell in row]\n        binary_matrix.append(binary_row)\n\n    # Remove empty rows and columns\n    while any(all(cell == '.' for cell in row) for row in binary_matrix):\n        binary_matrix = [row for row in binary_matrix if any(cell == '#' for cell in row)]\n        binary_matrix = [list(row) for row in zip(*binary_matrix)]\n        binary_matrix = [row for row in binary_matrix if any(cell == '#' for cell in row)]\n        binary_matrix = [list(row) for row in zip(*binary_matrix)]\n\n    # Convert binary matrix back to grid\n    final_grid = []\n    for row in binary_matrix:\n        final_row = []\n        for cell in row:\n            if cell == '#':\n                final_row.append('#')\n            else:\n                final_row.append('.')\n        final_grid.append(''.join(final_row))\n\n    return '\\n'.join(final_grid)\n"
    },
    {
        "number": 4314,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split()[:2])\n    grid = [list(line.strip()) for line in stdin.split('\\n')[1:]]\n\n    while any(all(cell == '.' for cell in row) for row in grid) or any(all(cell == '.' for cell in col) for col in zip(*grid)):\n        for i, row in enumerate(grid):\n            if all(cell == '.' for cell in row):\n                grid.pop(i)\n                break\n        else:\n            for j in range(W):\n                col = [grid[i][j] for i in range(len(grid))]\n                if all(cell == '.' for cell in col):\n                    for i in range(len(grid)):\n                        grid[i].pop(j)\n                    W -= 1\n                    break\n\n    return '\\n'.join(''.join(row) for row in grid)\n\ninput_data = '''4 4\n##.#\n....\n##.#\n.#.#'''\n\noutput_data = '''###\n###\n.##'''\n\nprint(solution(input_data))\n"
    },
    {
        "number": 4315,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin.strip())\n    circumference = 2 * 3.14159 * R\n    return \"{:.12f}\".format(circumference)\n\ndef"
    },
    {
        "number": 4315,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    if 1 <= R <= 100:\n        circumference = 2 * 3.14159 * R\n        return f\"{circumference:.2f}\"\n    else:\n        return \"Invalid input. 1 <= R <= 100\"\n"
    },
    {
        "number": 4315,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    if 1 <= R <= 100:\n        circumference = 2 * 3.14159 * R\n        return str(circumference)\n    else:\n        return \"Invalid input. Please enter a value between 1 and 100.\""
    },
    {
        "number": 4315,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    circumference = 2 * 3.14 * R\n    return f\"{circumference:.5f}\"  # limiting the precision to 5 decimal places\n"
    },
    {
        "number": 4315,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    R = int(stdin)\n    \n    # Calculate circumference\n    circumference = 2 * 3.14 * R\n    \n    # Round circumference to 2 decimal places\n    circumference = round(circumference, 2)\n    \n    return str(circumference) "
    },
    {
        "number": 4315,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    pi = 3.14159\n    circumference = 2 * pi * R\n    return str(circumference)\n\ndef"
    },
    {
        "number": 4315,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # read input value R\n    R = int(stdin)\n\n    # calculate the circumference of the circle\n    circumference = 2 * 3.14159 * R\n\n    # return the circumference\n    return str(circumference)"
    },
    {
        "number": 4315,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # input parsing\n    radius = int(stdin)\n    # formula for circumference of circle\n    circumference = 2 * 3.14159 * radius\n    return str(circumference)  # output formatting\n"
    },
    {
        "number": 4315,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin.strip())\n    if 1 <= R <= 100:\n        circumference = 2 * 3.14 * R\n        return str(circumference)\n    else:\n        return \"Invalid input. R must be between 1 and 100.\" "
    },
    {
        "number": 4315,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input from stdin\n    R = int(stdin.split()[0])\n\n    # Calculating circumference of the circle\n    circumference = 2 * 3.14159 * R\n\n    # Rounding off the circumference to 2 decimal places\n    circumference = round(circumference, 2)\n\n    return str(circumference)"
    }
]