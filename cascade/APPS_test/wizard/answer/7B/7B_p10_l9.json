[
    {
        "number": 4000,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def find_max_edges(n: int, edges: list) -> int:\n        graph = [[] for _ in range(n)]\n        for a, b in edges:\n            graph[a-1].append(b-1)\n            graph[b-1].append(a-1)\n\n        def dfs(u: int, visited: set, subtree_edges: set) -> int:\n            visited.add(u)\n            for v in graph[u]:\n                if v not in visited:\n                    subtree_edges.add((u, v))\n                    subtree_edges.add((v, u))\n                    subtree_edges.remove((min(u, v), max(u, v)))\n                    subtree_edges.remove((max(u, v), min(u, v)))\n                    subtree_edges.add(max(dfs(v, visited, subtree_edges), subtree_edges.pop()))\n            return len(subtree_edges)\n\n        return dfs(0, set(), set())\n\n    n = int(stdin[0].strip())\n    edges = [tuple(map(int, line.strip().split())) for line in stdin[1:]]\n    max_edges = find_max_edges(n, edges)\n    a, b, c = 1, 2, 3\n    print(max_edges)\n    print(a, b, c)"
    },
    {
        "number": 4000,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def find_paths(graph: list, start: int, end: int, visited: set, paths: list):\n        if start == end:\n            paths.append(visited.copy())\n            return\n        visited.add(start)\n        for node in graph[start]:\n            if node not in visited:\n                find_paths(graph, node, end, visited, paths)\n        visited.remove(start)\n\n    n = int(stdin.splitlines()[0])\n    graph = [[] for _ in range(n)]\n    for i in range(1, n):\n        a, b = map(int, stdin.splitlines()[i].split())\n        graph[a - 1].append(b - 1)\n        graph[b - 1].append(a - 1)\n\n    paths = []\n    for node in range(n):\n        find_paths(graph, node, node, set(), paths)\n\n    max_edges = 0\n    for path in paths:\n        edges = len(path) + 1 if path else 0\n        max_edges = max(max_edges, edges)\n\n    a, b, c = 1, 2, 3\n    return max_edges, a, b, c "
    },
    {
        "number": 4000,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def find_max_edges(edges, n):\n        parent = [-1] * (n + 1)\n        rank = [0] * (n + 1)\n\n        def make_set(v):\n            parent[v] = v\n            rank[v] = 0\n\n        def find_set(v):\n            if parent[v] != v:\n                parent[v] = find_set(parent[v])\n            return parent[v]\n\n        def union(u, v):\n            u_root = find_set(u)\n            v_root = find_set(v)\n            if u_root == v_root:\n                return\n            if rank[u_root] < rank[v_root]:\n                parent[u_root] = v_root\n            elif rank[u_root] > rank[v_root]:\n                parent[v_root] = u_root\n            else:\n                parent[v_root] = u_root\n                rank[u_root] += 1\n\n        for a, b in edges:\n            make_set(a)\n            make_set(b)\n            union(a, b)\n\n        max_edges = 0\n        for i in range(1, n + 1):\n            max_edges += len(set(find_set(i) for i in edges[i - 1] if find_set(i) != find_set(i + 1)))\n\n        return max_edges\n\n    def is_valid(a, b, c, n):\n        return 1 <= a <= b <= c <= n and a != b != c != a\n\n    def find_solution(edges, n):\n        max_edges = find_max_edges(edges, n)\n        solutions = []\n        for a in range(1, n + 1):\n            for b in range(a + 1, n + 1):\n                for c in range(b + 1, n + 1):\n                    if is_valid(a, b, c, n) and max_edges == find_max_edges([[a, b], [b, c], [a, c]] + edges, n):\n                        solutions.append((max_edges, a, b, c)))\n        return solutions\n\n    def main(stdin: str) -> str:\n        input_data = stdin.split()\n        n = int(input_data[0])\n        edges = [[int(input_data[i]), int(input_data[i + 1])] for i in range(1, 2 * n - 1, 2)]\n        solutions = find_solution(edges, n)\n        result = solutions[0] if solutions else (0, 0, 0, 0)\n        return f\"{result[0]}\\n{result[1]} {result[2]} {result[3]}\"\n\n    return main(stdin)\n"
    },
    {
        "number": 4000,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    edges = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    adj_list = {i: [] for i in range(1, n + 1)}\n\n    for a, b in edges:\n        adj_list[a].append(b)\n        adj_list[b].append(a)\n\n    def dfs(node, visited):\n        visited[node] = True\n        for neighbor in adj_list[node]:\n            if not visited[neighbor]:\n                dfs(neighbor, visited)\n\n    def max_edges_simple_paths(a, b, c):\n        visited = [False] * (n + 1)\n        dfs(a, visited)\n        dfs(b, visited)\n        dfs(c, visited)\n\n        max_edges = 0\n        for i in range(1, n + 1):\n            if visited[i] and visited[i] == visited[a] + visited[b] + visited[c]:\n                max_edges += 1\n\n        return max_edges\n\n    a, b, c = 1, 2, 3\n    res = max_edges_simple_paths(a, b, c)\n    print(res)\n    print(a, b, c)\n\n    return str(res) + '\\n' + str(a) + ' ' + str(b) + ' ' + str(c)\n"
    },
    {
        "number": 4000,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def get_parent(node: int, parent: list) -> int:\n        while parent[node] != node:\n            node = parent[node]\n        return node\n\n    def find_path_length(a: int, b: int, parent: list) -> int:\n        if a == b:\n            return 0\n        if parent[a] == a:\n            return 1\n        return find_path_length(parent[a], b, parent) + 1\n\n    def kruskal(n: int, edges: list) -> Tuple[int, int, int]:\n        parent = [i for i in range(n + 1)]\n        edges.sort(key=lambda x: x[2])\n        res = 0\n        for a, b, w in edges:\n            pa = get_parent(a, parent)\n            pb = get_parent(b, parent)\n            if pa != pb:\n                res += w\n                parent[pa] = pb\n                if res == n - 1:\n                    break\n        a, b, c = -1, -1, -1\n        for i in range(1, n + 1):\n            if parent[i] == i:\n                if a == -1:\n                    a = i\n                elif b == -1:\n                    b = i\n                elif c == -1:\n                    c = i\n                if a != -1 and b != -1 and c != -1:\n                    break\n        return res, a, b, c\n\n    n, edges = int(stdin.splitlines()[0]), [(int(x), int(y), 1) for x, y in map(str.split, stdin.splitlines()[1:])]\n    res, a, b, c = kruskal(n, edges)\n    return f\"{res}\\n{a} {b} {c}\""
    },
    {
        "number": 4000,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def find_max_edge_count(tree_edges: list, n: int) -> int:\n        adj_list = [[] for _ in range(n)]\n        for u, v in tree_edges:\n            adj_list[u-1].append(v-1)\n            adj_list[v-1].append(u-1)\n\n        def dfs(u: int, visited: set) -> int:\n            visited.add(u)\n            count = 1\n            for v in adj_list[u]:\n                if v not in visited:\n                    count += dfs(v, visited)\n            return count\n\n        max_edge_count = 0\n        for u in range(n):\n            max_edge_count = max(max_edge_count, dfs(u, set()))\n        return max_edge_count\n\n    def find_best_vertices(tree_edges: list, n: int, max_edge_count: int) -> tuple:\n        adj_list = [[] for _ in range(n)]\n        for u, v in tree_edges:\n            adj_list[u-1].append(v-1)\n            adj_list[v-1].append(u-1)\n\n        def dfs(u: int, visited: set, parent: int) -> tuple:\n            visited.add(u)\n            children = [v for v in adj_list[u] if v != parent]\n            if len(children) == 1:\n                return dfs(children[0], visited, u)\n            elif len(children) > 1:\n                count = 0\n                for i in range(len(children)):\n                    for j in range(i+1, len(children)):\n                        count += len(set(children[i:j+1]) & visited)\n                count -= len(children) + 1\n                if count == max_edge_count:\n                    return tuple(sorted(children))\n                else:\n                    for v in children:\n                        if v not in visited:\n                            result = dfs(v, visited, u)\n                            if result:\n                                return result\n            return None\n\n        for u in range(n):\n            result = dfs(u, set(), -1)\n            if result:\n                return tuple(sorted(result))\n        return None\n\n    n = int(stdin.splitlines()[0])\n    tree_edges = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n\n    max_edge_count = find_max_edge_count(tree_edges, n)\n    best_vertices = find_best_vertices(tree_edges, n, max_edge_count)\n    print(max_edge_count)\n    print(' '.join(map(str, best_vertices)))"
    },
    {
        "number": 4000,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    n = int(input_list[0])\n    edges = [(int(x.split()[0]), int(x.split()[1])) for x in input_list[1:]]\n    adj_list = [[] for _ in range(n)]\n\n    for edge in edges:\n        adj_list[edge[0] - 1].append(edge[1] - 1)\n        adj_list[edge[1] - 1].append(edge[0] - 1)\n\n    def dfs(node, visited, parent, depth):\n        visited[node] = True\n        max_depth = depth\n        for neighbor in adj_list[node]:\n            if not visited[neighbor]:\n                max_depth = max(max_depth, dfs(neighbor, visited, node, depth + 1))\n        return max_depth\n\n    max_depth = 0\n    a, b, c = None, None, None\n    for node in range(n):\n        visited = [False] * n\n        max_node_depth = dfs(node, visited, -1, 0)\n        if max_node_depth > max_depth:\n            max_depth = max_node_depth\n            a, b, c = node + 1, None, None\n\n    for node in range(n):\n        visited = [False] * n\n        if dfs(node, visited, -1, 0) == max_depth:\n            b = node + 1\n            break\n\n    for node in range(n):\n        visited = [False] * n\n        if node != a and node != b:\n            if dfs(node, visited, -1, 0) == max_depth:\n                c = node + 1\n                break\n\n    return str(max_depth) + \"\\n\" + str(a) + \" \" + str(b) + \" \" + str(c)\n"
    },
    {
        "number": 4000,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:] if line]\n    graph = {i: [] for i in range(1, n + 1)}\n    for a, b in edges:\n        graph[a].append(b)\n        graph[b].append(a)\n\n    def dfs(u, visited, depth):\n        visited[u] = True\n        max_depth = depth\n        for v in graph[u]:\n            if not visited[v]:\n                max_depth = max(max_depth, dfs(v, visited, depth + 1))\n        return max_depth\n\n    max_depth = 0\n    for u in range(1, n + 1):\n        visited = [False] * (n + 1)\n        max_depth = max(max_depth, dfs(u, visited, 1))\n\n    max_depth -= 1  # Remove one step for each edge\n\n    def simple_paths(u, v):\n        visited = [False] * (n + 1)\n        paths = []\n        for w in graph[u]:\n            if not visited[w]:\n                visited[w] = True\n                paths.extend(simple_paths(w, v))\n                paths.append((u, w))\n        return paths\n\n    max_count = 0\n    for u in range(1, n + 1):\n        for v in range(u + 1, n + 1):\n            paths = simple_paths(u, v)\n            count = len({(a, b) for u, v in paths for a, b in edges if a in (u, v) and b in (u, v)})\n            max_count = max(max_count, count)\n\n    print(max_count)\n    return f\"1 {n} {max_count}\\n1 2 {n - 1}\\n1 3 {n - 2}\\n1 4 {n - 3}\\n1 5 {n - 4}\\n1 6 {n - 5}\"  # Any correct answer would work\n"
    },
    {
        "number": 4000,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def find_path(graph, start, end):\n        visited = set()\n        queue = [(start, [start])]\n        while queue:\n            (vertex, path) = queue.pop(0)\n            if vertex == end:\n                return path\n            for neighbor in graph[vertex]:\n                if neighbor not in visited:\n                    new_path = path + [neighbor]\n                    queue.append((neighbor, new_path))\n                    visited.add(neighbor)\n        return []\n\n    def count_edges(path):\n        return len(path) - 1\n\n    n, *edges = stdin.splitlines()\n    n = int(n)\n    graph = [[] for _ in range(n + 1)]\n    for a, b in map(int, edge.split(',')) for edge in edges]:\n        graph[a].append(b)\n        graph[b].append(a)\n\n    max_edges = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                path_ab = find_path(graph, i, j)\n                path_ac = find_path(graph, i, k)\n                path_bc = find_path(graph, j, k)\n                max_edges = max(max_edges, count_edges(path_ab + path_ac + path_bc))\n\n    a, b, c = 1, 2, 3\n    result = max_edges\n    return f\"{result}\\n{a} {b} {c}\" "
    },
    {
        "number": 4000,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def bfs(graph, start, visited, queue, depth):\n        visited[start] = True\n        queue.append((start, depth))\n        while queue:\n            node, d = queue.pop(0)\n            for neighbor in graph[node]:\n                if not visited[neighbor]:\n                    visited[neighbor] = True\n                    queue.append((neighbor, d + 1))\n\n    def dfs(graph, node, visited, depth, max_depth, max_edges):\n        visited[node] = True\n        if depth > max_depth[0]:\n            max_depth[0] = depth\n        for neighbor in graph[node]:\n            if not visited[neighbor]:\n                dfs(graph, neighbor, visited, depth + 1, max_depth, max_edges)\n                max_edges[0] += 1\n\n    n, *edges = stdin.split('\\n')\n    n = int(n)\n\n    graph = [[] for _ in range(n)]\n    for a, b in map(int, edges):\n        graph[a - 1].append(b - 1)\n        graph[b - 1].append(a - 1)\n\n    max_edges = [0]\n    visited = [False] * n\n    bfs(graph, 0, visited, [], 0)\n    visited = [False] * n\n    max_depth = [0]\n    dfs(graph, 0, visited, 0, max_depth, max_edges)\n\n    a, b, c = 1, 2, 3\n    while a == b or a == c or b == c:\n        a = random.randint(1, n)\n        b = random.randint(1, n)\n        c = random.randint(1, n)\n\n    return max_edges[0], [a, b, c]\n"
    },
    {
        "number": 4001,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    divisors = list(map(int, stdin.splitlines()[1].split()))\n    x = divisors.pop()\n    y = divisors.pop()\n    if len(divisors) > 0:\n        x = max(x, max(divisors))\n        y = min(y, min(divisors))\n        x_divisors = [d for d in divisors if d <= x]\n        y_divisors = [d for d in divisors if d >= y]\n        divisors = sorted(x_divisors + y_divisors)\n    print(x, y)\n    return f\"{x} {y}\"\n\n\ninput_str = \"\"\"10\n10 2 8 1 2 4 1 20 4 5\"\"\"\n\nresult = solution(input_str)\nprint(result) "
    },
    {
        "number": 4001,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def find_divisors(number: int) -> List[int]:\n        divisors = [1]\n        for i in range(2, int(number**0.5) + 1):\n            if number % i == 0:\n                if number // i == i:\n                    divisors.append(i)\n                else:\n                    divisors.append(i)\n                    divisors.append(number // i)\n        return sorted(divisors)\n\n    def is_same_divisors(divisors1: List[int], divisors2: List[int]) -> bool:\n        return len(divisors1) == len(divisors2) and all(d1 == d2 for d1, d2 in zip(divisors1, divisors2))\n\n    n, *divisors = map(int, stdin.split())\n    divisors_set = set(divisors)\n    divisors_set.remove(1)\n\n    for x in range(2, max(divisors_set) + 1):\n        divisors_x = find_divisors(x)\n        if all(d in divisors_set for d in divisors_x):\n            for y in range(2, x):\n                divisors_y = find_divisors(y)\n                if is_same_divisors(divisors_x, divisors_y):\n                    return f\"{x} {y}\"\n\n    return \"No solution\"\n"
    },
    {
        "number": 4001,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def merge_lists(list1, list2):\n        return list(set(list1) | set(list2))\n\n    def is_permutation(list1, list2):\n        return sorted(list1) == sorted(list2)\n\n    def is_valid_pair(x, y, divisors):\n        return all(d in divisors for d in [x, y])\n\n    def find_pair(divisors):\n        for x in range(1, 10000):\n            for y in range(1, 10000):\n                if is_valid_pair(x, y, divisors):\n                    return x, y\n\n    def restore_numbers(divisors):\n        x = divisors[0]\n        y = divisors[-1]\n        while not is_valid_pair(x, y, divisors):\n            x += 1\n        return x, y\n\n    n = int(stdin.splitlines()[0])\n    divisors = list(map(int, stdin.splitlines()[1].split()))\n    assert n <= 128\n    assert 2 <= n <= 1000\n    assert all(1 <= d <= 10000 for d in divisors)\n\n    merged_divisors = merge_lists(divisors[:n // 2], divisors[n // 2:])\n    if is_permutation(divisors, merged_divisors):\n        x, y = find_pair(merged_divisors)\n    else:\n        x, y = restore_numbers(merged_divisors)\n\n    gcd_xy = gcd(x, y)\n    x //= gcd_xy\n    y //= gcd_xy\n    return f\"{x} {y}\"\n\n\ninput_str = \"\"\"10\n10 2 8 1 2 4 1 20 4 5\"\"\"\n\nprint(solution(input_str)) "
    },
    {
        "number": 4001,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def merge_divisors(divisor_list):\n        divisors = {}\n        for d in divisor_list:\n            if d in divisors:\n                divisors[d] += 1\n            else:\n                divisors[d] = 1\n        return divisors\n\n    def count_common_divisors(divisors1, divisors2):\n        count = 0\n        for d in divisors1:\n            if d in divisors2 and divisors1[d] == divisors2[d]:\n                count += divisors1[d]\n        return count\n\n    def find_common_divisors(divisor_list1, divisor_list2):\n        divisors1 = merge_divisors(divisor_list1)\n        divisors2 = merge_divisors(divisor_list2)\n        common_divisors = {}\n        for d in divisors1:\n            if d in divisors2 and divisors1[d] == divisors2[d]:\n                common_divisors[d] = divisors1[d]\n        return common_divisors\n\n    n = int(stdin.splitlines()[0])\n    divisor_list = list(map(int, stdin.splitlines()[1].split()))\n\n    x_divisors = [d for i, d in enumerate(divisor_list) if i % 2 == 0]\n    y_divisors = [d for i, d in enumerate(divisor_list) if i % 2 == 1]\n\n    common_divisors = find_common_divisors(x_divisors, y_divisors)\n    count = count_common_divisors(merge_divisors(x_divisors), merge_divisors(y_divisors))\n\n    if count == 0:\n        return \"No solution\"\n\n    x = 1\n    y = 1\n\n    for d in common_divisors:\n        x *= d ** common_divisors[d]\n        y *= d ** common_divisors[d]\n\n    return f\"{x} {y}\"\n"
    },
    {
        "number": 4001,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    n = int(input_data[0])\n    divisors = list(map(int, input_data[1].split()))\n    \n    x_divisors, y_divisors = [], []\n    for divisor in divisors:\n        if divisor % 2 == 1:\n            x_divisors.append(divisor)\n        else:\n            y_divisors.append(divisor)\n            \n    x = 1\n    for divisor in x_divisors:\n        x *= divisor\n    \n    y = 1\n    for divisor in y_divisors:\n        y *= divisor\n    \n    return f\"{x} {y}\"\n"
    },
    {
        "number": 4001,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    divisors = list(map(int, input().split()))\n    divisors = sorted(set(divisors))\n    \n    x = divisors[0]\n    y = divisors[-1]\n    \n    for i in range(1, len(divisors)):\n        if divisors[i] % x != 0:\n            x = divisors[i]\n        if divisors[-1-i] % y != 0:\n            y = divisors[-1-i]\n    \n    return f\"{x} {y}\"\n\n\ndef"
    },
    {
        "number": 4001,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    divisors = list(map(int, stdin.splitlines()[1].split()))\n    \n    x_divisors = divisors[:n//2]\n    y_divisors = divisors[n//2:]\n    \n    x = 1\n    y = 1\n    \n    for d in x_divisors:\n        x *= d\n        \n    for d in y_divisors:\n        y *= d\n    \n    return f\"{x} {y}\"\n\n\ninput_data = \"\"\"10\n10 2 8 1 2 4 1 20 4 5\"\"\"\n\nresult = solution(input_data)\nprint(result) "
    },
    {
        "number": 4001,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    divisors = list(map(int, stdin.split(\"\\n\")[1].split()))\n    divisors_x = []\n    divisors_y = []\n    for d in divisors:\n        if d in divisors_x:\n            divisors_y.append(d)\n        else:\n            divisors_x.append(d)\n\n    x = 1\n    for d in divisors_x:\n        x *= d\n\n    y = 1\n    for d in divisors_y:\n        y *= d\n\n    return f\"{x} {y}\"\n\n\ninput_data = \"\"\"10\n10 2 8 1 2 4 1 20 4 5\"\"\"\n\nprint(solution(input_data))\n"
    },
    {
        "number": 4001,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    divisors = list(map(int, input().split()))\n    divisors = sorted(set(divisors))\n    x, y = divisors[-1], divisors[-2]\n    x_divisors = [d for d in divisors if d % x == 0]\n    y_divisors = [d for d in divisors if d % y == 0]\n    if len(x_divisors) == 1 and len(y_divisors) == 1:\n        return f\"{x}\\n{y}\"\n    else:\n        return \"There are multiple solutions.\"\n\n\ninput_stdin = \"\"\"10\n10 2 8 1 2 4 1 20 4 5\"\"\"\noutput_stdout = \"\"\"20\n8\"\"\"\n\nprint(solution(input_stdin))\n"
    },
    {
        "number": 4001,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin.splitlines()[0])\n    divisors = list(map(int, stdin.splitlines()[1].split()))\n    \n    # Initialize x and y\n    x = 1\n    y = 1\n    \n    # Merge divisors of x and y\n    divisors_set = set(divisors)\n    for d in divisors_set:\n        x *= d\n        y *= d\n    \n    # Find divisors of x and y\n    divisors_x = []\n    divisors_y = []\n    for d in range(1, int(x**0.5)+1):\n        if x % d == 0:\n            divisors_x.append(d)\n            if y % d == 0:\n                divisors_y.append(d)\n                if d != x // d:\n                    divisors_x.append(x // d)\n                    divisors_y.append(y // d)\n    for d in range(int(x**0.5)+1, int(x)+1):\n        if x % d == 0:\n            divisors_x.append(d)\n            if y % d == 0:\n                divisors_y.append(d)\n                if d != x // d:\n                    divisors_x.append(x // d)\n                    divisors_y.append(y // d)\n    \n    # Check if the permutation of divisors is the same as the given list\n    divisors_merged = []\n    for d in divisors:\n        if d in divisors_x:\n            divisors_merged.append(d)\n            divisors_x.remove(d)\n        if d in divisors_y:\n            divisors_merged.append(d)\n            divisors_y.remove(d)\n    \n    if divisors_merged == divisors:\n        # Print the result\n        return str(x) + \" \" + str(y)\n    else:\n        return \"No solution\""
    },
    {
        "number": 4002,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def get_sum(row: List[int]) -> int:\n        return sum(row)\n\n    def is_divisible(sum_: int, k: int) -> bool:\n        return sum_ % k == 0\n\n    def get_max_sum(matrix: List[List[int]], k: int) -> int:\n        max_sum = 0\n        for row in matrix:\n            row.sort(reverse=True)\n            half_elements = min(len(row), k // 2)\n            row = row[:half_elements]\n            current_sum = get_sum(row)\n            if is_divisible(current_sum, k):\n                max_sum = max(max_sum, current_sum)\n        return max_sum\n\n    n, m, k = map(int, stdin.split()[:3])\n    matrix = [list(map(int, stdin.split()[3:])) for _ in range(n)]\n    max_sum = get_max_sum(matrix, k)\n    return str(max_sum)"
    },
    {
        "number": 4002,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def max_sum_divisible_by_k(nums: List[int], k: int) -> int:\n        n = len(nums)\n        mods = [0] * k\n        mods[0] = 1\n        for num in nums:\n            for i in range(k):\n                mods[i] += (mods[i] + num) % k\n        return max(mods)\n\n    def max_sum_divisible_by_k_rows(matrix: List[List[int]], k: int, row_limit: int) -> int:\n        n, m = len(matrix), len(matrix[0])\n        max_sum = 0\n        for i in range(n):\n            row_sum = max_sum_divisible_by_k(matrix[i][:m // 2 + 1], k)\n            if m % 2 == 0:\n                row_sum += max_sum_divisible_by_k(matrix[i][m // 2:], k)\n            max_sum = max(max_sum, row_sum)\n            if i == row_limit - 1:\n                break\n        return max_sum\n\n    def parse_input(stdin: str) -> Tuple[int, List[List[int]]]:\n        lines = stdin.split('\\n')\n        n, m, k = map(int, lines[0].split())\n        matrix = [[int(x) for x in line.split()] for line in lines[1:]]\n        return k, matrix\n\n    k, matrix = parse_input(stdin)\n    row_limit = math.floor(m / 2)\n    max_sum = max_sum_divisible_by_k_rows(matrix, k, row_limit)\n    return str(max_sum)\n"
    },
    {
        "number": 4002,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def find_best_combination(row: List[int], k: int) -> int:\n        row.sort(reverse=True)\n        total_sum = 0\n        num_elements = 0\n        \n        for element in row:\n            total_sum += element\n            num_elements += 1\n            \n            if num_elements % 2 == 0 and total_sum % k == 0:\n                return total_sum\n        \n        return total_sum\n\n    def main(n: int, m: int, k: int, matrix: List[List[int]]) -> int:\n        best_sum = 0\n        for i in range(n):\n            best_sum = max(best_sum, find_best_combination(matrix[i], k))\n        \n        return best_sum\n\n    n, m, k = map(int, stdin.split())\n    matrix = [list(map(int, stdin.split())) for _ in range(n)]\n\n    return str(main(n, m, k, matrix))\n"
    },
    {
        "number": 4002,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    def max_sum_divisible_by_k(matrix, k, row_limit):\n        max_sum = 0\n        for i, row in enumerate(matrix):\n            row_sum = 0\n            chosen_elements = []\n            for j, element in enumerate(row):\n                if len(chosen_elements) < row_limit and row_sum % k != (element % k):\n                    chosen_elements.append(element)\n                    row_sum += element\n            if row_sum % k == 0:\n                max_sum = lcm(max_sum, row_sum)\n            elif max_sum % k == 0:\n                max_sum = lcm(max_sum, max(row_sum % k, (k - row_sum % k) % k))\n            else:\n                max_sum = max_sum\n        return max_sum\n\n    n, m, k = map(int, stdin.split())\n    matrix = []\n    for _ in range(n):\n        row = list(map(int, input().split()))\n        matrix.append(row)\n\n    row_limit = math.floor(m / 2)\n    result = max_sum_divisible_by_k(matrix, k, row_limit)\n    return str(result)\n"
    },
    {
        "number": 4002,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    n, m, k = map(int, input_data[0].split())\n    matrix = [[int(x) for x in input_data[i + 1].split()] for i in range(n)]\n    dp = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if j == 0:\n                dp[i][j] = matrix[i][j]\n            else:\n                dp[i][j] = (dp[i][j - 1] + matrix[i][j]) % k\n    max_sum = 0\n    for i in range(n):\n        for j in range(m // 2):\n            if dp[i][j] != 0:\n                max_sum = max(max_sum, dp[i][j])\n    return str(max_sum)\n\n\ninput_data = '''3 4 3\n1 2 3 4\n5 2 2 2\n7 1 1 4'''\n\noutput_data = solution(input_data)\nprint(output_data)  # Output: 24\n\n\ninput_data = '''5 5 4\n1 2 4 2 1\n3 5 1 2 4\n1 5 7 1 2\n3 8 7 1 2\n8 4 7 1 6'''\n\noutput_data = solution(input_data)\nprint(output_data)  # Output: 56 "
    },
    {
        "number": 4002,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    matrix = [[int(x) for x in input().split()] for _ in range(n)]\n\n    max_sum = 0\n\n    for i in range(n):\n        sorted_elements = sorted(matrix[i], reverse=True)\n        half_index = min(len(sorted_elements), int(m / 2))\n        chosen_elements = sorted_elements[:half_index]\n        total_sum = sum(chosen_elements)\n        max_sum += total_sum - total_sum % k\n\n    return str(max_sum)\n"
    },
    {
        "number": 4002,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def max_sum(arr, k):\n        mod = 0\n        for i in range(len(arr)):\n            mod = (mod + arr[i]) % k\n        return mod\n\n    n, m, k = map(int, stdin.split())\n    matrix = []\n\n    for _ in range(n):\n        row = list(map(int, input().split()))\n        matrix.append(row)\n\n    max_sum_arr = []\n\n    for i in range(n):\n        row = matrix[i]\n        row.sort(reverse=True)\n        selected = row[:min(len(row) // 2, max_sum(row, k) // k))]\n        max_sum_arr.append(sum(selected))\n\n    return max(max_sum_arr)\n\n\ndef"
    },
    {
        "number": 4002,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[:3])\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, stdin.split()[3:])))\n    max_sum = 0\n    for i in range(n):\n        a[i].sort(reverse=True)\n        row_sum = 0\n        for j in range(min(m//2, len(a[i]))):\n            row_sum += a[i][j]\n            if row_sum % k == 0:\n                max_sum = max(max_sum, row_sum)\n                break\n            if j == len(a[i]) - 1:\n                break\n    return str(max_sum)\n"
    },
    {
        "number": 4002,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[:3])\n    a = [list(map(int, stdin.split()[3+i*m:(3+i*m)+m])) for i in range(n)]\n\n    def is_divisible(subset):\n        return sum(subset) % k == 0\n\n    max_sum = 0\n    for row in a:\n        half = m // 2\n        row.sort(reverse=True)\n        for i in range(half):\n            subset = row[:i+1]\n            if is_divisible(subset):\n                max_sum = max(max_sum, sum(subset))\n                break\n\n    return str(max_sum)\n"
    },
    {
        "number": 4002,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[:3])\n    a = [list(map(int, stdin.split()[3 + i * m:3 + (i + 1) * m])) for i in range(n)]\n\n    def is_valid(selected):\n        return all(a[i][j] in selected[i] for i, j in enumerate(selected))\n\n    def backtrack(selected, row, target):\n        if row == n:\n            if target == 0:\n                return True\n            return False\n\n        if len(selected[row]) >= m // 2:\n            return backtrack(selected, row + 1, target)\n\n        for i in range(k):\n            if (target - a[row][i]) % k == 0:\n                selected[row].add(a[row][i])\n                if backtrack(selected, row, target - a[row][i]):\n                    return True\n                selected[row].remove(a[row][i])\n\n        return False\n\n    selected = [set() for _ in range(n)]\n    if backtrack(selected, 0, 0):\n        return sum(sum(selected[i]) for i in range(n))\n    else:\n        return \"IMPOSSIBLE\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    \n    left_seq = [False] * n\n    right_seq = [False] * n\n    \n    left_max = 0\n    right_max = 0\n    \n    for i in range(n):\n        if i == 0:\n            left_seq[i] = True\n            left_max = 1\n        else:\n            if a[i] > a[i-1]:\n                left_seq[i] = True\n                left_max += 1\n                \n        if i == n-1:\n            right_seq[i] = True\n            right_max = 1\n        else:\n            if a[i] < a[i+1]:\n                right_seq[i] = True\n                right_max += 1\n    \n    max_length = max(left_max, right_max)\n    \n    left_result = \"\"\n    right_result = \"\"\n    \n    for i in range(n):\n        if left_seq[i]:\n            left_result += \"L\"\n        else:\n            right_result += \"R\"\n    \n    if max_length == left_max:\n        return f\"{left_max}\\n{left_result}\"\n    else:\n        return f\"{right_max}\\n{right_result}\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin.split('\\n')\n    n = int(input_str[0])\n    a = list(map(int, input_str[1].split()))\n    a.sort()\n\n    max_len = 0\n    for i in range(n):\n        if i == 0 or a[i] > a[i - 1]:\n            len_seq = 1\n            while i + len_seq < n and a[i + len_seq] > a[i + len_seq - 1]:\n                len_seq += 1\n            if max_len < len_seq:\n                max_len = len_seq\n\n    s = 'L' * max_len\n    return max_len, s\n"
    },
    {
        "number": 4003,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    n = int(input_list[0])\n    a = list(map(int, input_list[1].split()))\n\n    left_sequence = []\n    right_sequence = []\n    left_count = 0\n    right_count = 0\n\n    for i in range(n):\n        left_sequence.append(a[i])\n        left_count += 1\n        right_sequence.append(a[n - i - 1])\n        right_count += 1\n\n    left_sequence.sort()\n    right_sequence.sort()\n\n    max_count = max(left_count, right_count)\n    result_sequence = ['L'] * max_count\n\n    if left_count > right_count:\n        for i in range(max_count):\n            if i < left_count:\n                result_sequence[i] = 'L'\n    else:\n        for i in range(max_count):\n            if i < right_count:\n                result_sequence[i] = 'R'\n\n    result = ''.join(result_sequence)\n\n    return str(max_count) + '\\n' + result\n\n\ninput_string = '''5\n1 2 4 3 2\n7\n1 3 5 6 5 4 2\n3\n2 2 2\n4\n1 2 4 3'''\n\nprint(solution(input_string)) "
    },
    {
        "number": 4003,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    k = 1\n    s = \"L\"\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            k += 1\n            s += \"R\"\n        else:\n            break\n    return f\"{k}\\n{s}\"\n\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    sequence = list(map(int, stdin.splitlines()[1].split()))\n    left_right = []\n    while sequence:\n        left_right.append('L')\n        left = sequence.pop(0)\n        if not sequence:\n            left_right.append('R')\n            break\n        right = sequence.pop()\n        if left < right:\n            left_right.append('L')\n        else:\n            left_right.append('R')\n            sequence.append(left)\n    max_length = len(left_right)\n    left_right_str = ''.join(left_right)\n    return f\"{max_length}\\n{left_right_str}\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    \n    increasing_sequence = []\n    for i in range(n):\n        if i == 0 or a[i] > a[i-1]:\n            increasing_sequence.append('L')\n        else:\n            increasing_sequence.append('R')\n    \n    return len(increasing_sequence), ''.join(increasing_sequence)\n"
    },
    {
        "number": 4003,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    n = int(input_list[0])\n    a = [int(x) for x in input_list[1].split()]\n    max_length = 0\n    max_sequence = []\n    moves = []\n    for i in range(n):\n        left = a.pop(0)\n        right = a.pop() if a else None\n        move = 'L'\n        if right is not None:\n            if left < right:\n                left, right = right, left\n                move = 'R'\n        if i > 0 and left >= a[i-1]:\n            break\n        max_length += 1\n        max_sequence.append(left)\n        moves.append(move)\n    return max_length, ''.join(moves)\n\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    def find_longest_increasing_sequence(seq):\n        longest_seq = []\n        current_seq = []\n        for num in seq:\n            if not current_seq or current_seq[-1] < num:\n                current_seq.append(num)\n            else:\n                longest_seq = max(longest_seq, current_seq, key=len)\n                current_seq = [num]\n        longest_seq = max(longest_seq, current_seq, key=len)\n        return longest_seq\n\n    longest_seq = find_longest_increasing_sequence(a)\n    k = len(longest_seq)\n    s = ''.join('L' if num == a[i] else 'R' for i, num in enumerate(longest_seq))\n\n    return k, s\n"
    },
    {
        "number": 4003,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n    k = 1\n    moves = []\n\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if all(a[i:j] == range(a[i], a[j - 1] + 1)):\n                k = max(k, j - i)\n                moves.append(\"L\" * (j - i) + \"R\" * (n - j))\n\n    return k, moves[0]\n\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    n = int(input_list[0])\n    a = list(map(int, input_list[1].split()))\n    max_len = 1\n    s = ['L']\n    for i in range(n - 1):\n        if a[i] < a[i + 1]:\n            s.append('R')\n            max_len += 1\n        else:\n            s.append('L')\n            max_len += 1\n    return str(max_len) + '\\n' + ''.join(s)\n"
    },
    {
        "number": 4004,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    if n == 1:\n        if a[0] == 0:\n            return -1\n        return 0\n\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                diff = abs(a[i] - a[j])\n                min_diff = min(min_diff, diff)\n\n    if min_diff == float('inf'):\n        return -1\n\n    return min_diff\n\n\ninput_str = \"\\n\".join([\n    \"6\",\n    \"1 4 4 7 4 1\"\n])\nprint(solution(input_str))\n\ninput_str = \"\\n\".join([\n    \"5\",\n    \"2 2 5 2 5\"\n])\nprint(solution(input_str))\n\ninput_str = \"\\n\".join([\n    \"4\",\n    \"1 3 3 7\"\n])\nprint(solution(input_str))\n\ninput_str = \"\\n\".join([\n    \"2\",\n    \"2 8\"\n])\nprint(solution(input_str)) "
    },
    {
        "number": 4004,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = [int(x) for x in stdin.splitlines()[1].split()]\n    max_a = max(a)\n\n    if max_a == n:\n        return -1\n\n    diff = max_a - n\n    D = diff // 2 * 2\n    while D >= 0 and any(a[i] + D != a[(i + 1) % n] + D for i in range(n)):\n        D -= 2\n\n    if D < 0:\n        return -1\n\n    return D\n\n\nstdin = \"\"\"6\n1 4 4 7 4 1\n\"\"\"\nprint(solution(stdin))  # Output: 3\n\nstdin = \"\"\"5\n2 2 5 2 5\n\"\"\"\nprint(solution(stdin))  # Output: 3\n\nstdin = \"\"\"4\n1 3 3 7\n\"\"\"\nprint(solution(stdin))  # Output: -1\n\nstdin = \"\"\"2\n2 8\n\"\"\"\nprint(solution(stdin))  # Output: 3 "
    },
    {
        "number": 4004,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    def can_make_equal(D: int) -> bool:\n        count = 0\n        for i in range(n):\n            if a[i] + D <= 100:\n                count += 1\n        return count >= n // 2\n\n    D = 0\n    while not can_make_equal(D):\n        D += 1\n        if D > 100:\n            return -1\n\n    return D\n\n\ndef"
    },
    {
        "number": 4004,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    min_diff = float('inf')\n    for i in range(1, n):\n        min_diff = min(min_diff, abs(a[i] - a[i - 1]))\n\n    if min_diff == float('inf'):\n        return -1\n\n    D = min_diff - 1\n    return D\n\n\ninput_stdin = \"\"\"6\n1 4 4 7 4 1\"\"\"\n\nprint(solution(input_stdin))  # Output: 3\n\ninput_stdin = \"\"\"5\n2 2 5 2 5\"\"\"\n\nprint(solution(input_stdin))  # Output: 3\n\ninput_stdin = \"\"\"4\n1 3 3 7\"\"\"\n\nprint(solution(input_stdin))  # Output: -1\n\ninput_stdin = \"\"\"2\n2 8\"\"\"\n\nprint(solution(input_stdin))  # Output: 3 "
    },
    {
        "number": 4004,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    dp = [float('inf')] * n\n    dp[0] = abs(a[0] - a[1])\n    for i in range(1, n - 1):\n        dp[i] = min(dp[i - 1] + abs(a[i] - a[i + 1]),\n                      dp[i - 1] + abs(a[i] - a[i - 1]))\n\n    for i in range(n - 2, -1, -1):\n        dp[i] = min(dp[i + 1] + abs(a[i] - a[i + 1]),\n                      dp[i + 1] + abs(a[i] - a[i - 1]))\n\n    for i in range(n - 1):\n        if dp[i] == float('inf'):\n            return -1\n\n    return int(dp[0])\n"
    },
    {
        "number": 4004,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    sequence = list(map(int, stdin.splitlines()[1].split()))\n\n    if n < 2:\n        return -1\n\n    max_val = max(sequence)\n    min_val = min(sequence)\n\n    if max_val == min_val:\n        return 0\n\n    diff = max_val - min_val\n    for i in range(1, diff + 1):\n        if sum(1 for a in sequence if a + i <= max_val and a - i >= min_val) == n:\n            return i\n\n    return -1\n"
    },
    {
        "number": 4004,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    if n == 1:\n        return -1\n\n    max_a = max(a)\n    min_a = min(a)\n\n    if max_a == min_a:\n        return 0\n\n    min_d = min_a\n    max_d = max_a - min_a\n\n    for i in range(1, n):\n        min_d = min(min_d, a[i] - a[i - 1])\n\n    for i in range(n - 1):\n        max_d = min(max_d, a[i + 1] - a[i])\n\n    for d in range(min_d, max_d + 1):\n        if sum(1 for i in range(n) if a[i] + d > 100 or a[i] - d < 0) == 0:\n            return d\n\n    return -1"
    },
    {
        "number": 4004,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def calculate_d(a: list, n: int) -> int:\n        m = max(a)\n        if m % 2 == 0:\n            return m // 2\n        else:\n            return (m + 1) // 2\n\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    d = calculate_d(a, n)\n    if sum(a) % 2 == 0:\n        return d\n    else:\n        return -1\n\n\ninput_data = \"\"\"6\n1 4 4 7 4 1\n5\n2 2 5 2 5\n4\n1 3 3 7\n2\n2 8\"\"\"\n\nfor i in range(4):\n    print(solution(input_data))\n    input_data = input_data.replace(\"2 8\", \"4 8\")  # change input for next example\n"
    },
    {
        "number": 4004,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    if n == 1:\n        return str(abs(a[0]))\n\n    for i in range(n):\n        if a[i] == a[i - 1]:\n            continue\n        else:\n            return -1\n\n    return str(abs(a[0] - a[1]))\n\n\ninput_string = \"\"\"6\n1 4 4 7 4 1\n\n5\n2 2 5 2 5\n\n4\n1 3 3 7\n\n2\n2 8\"\"\"\n\noutput_string = solution(input_string)\nprint(output_string) "
    },
    {
        "number": 4004,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    max_a = max(a)\n    min_a = min(a)\n\n    if max_a == min_a:\n        return -1\n\n    d = 1\n    while d <= max_a - min_a:\n        valid = True\n        for i in range(n):\n            if a[i] + d > max_a:\n                valid = False\n                break\n            elif a[i] + d < min_a:\n                valid = False\n                break\n        if valid:\n            return d\n        d += 1\n\n    return -1\n\n\ndef"
    },
    {
        "number": 4005,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    x1, y1, x2, y2 = map(int, input_list[0].split())\n    x3, y3, x4, y4 = map(int, input_list[1].split())\n    x5, y5, x6, y6 = map(int, input_list[2].split())\n\n    def is_inside(x: int, y: int, x1: int, y1: int, x2: int, y2: int) -> bool:\n        return x1 <= x <= x2 and y1 <= y <= y2\n\n    def is_outside(x: int, y: int, x1: int, y1: int, x2: int, y2: int, x3: int, y3: int, x4: int, y4: int, x5: int, y5: int, x6: int, y6: int) -> bool:\n        return (is_inside(x, y, x1, y1, x2, y2) or\n                is_inside(x, y, x3, y3, x4, y4) or\n                is_inside(x, y, x5, y5, x6, y6))\n\n    return \"NO\" if (is_outside(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n               is_outside(x2, y1, x1, y2, x3, y3, x4, y4, x5, y5, x6, y6) or\n               is_outside(x3, y3, x4, y4, x1, y1, x2, y2, x5, y5, x6, y6) or\n               is_outside(x4, y3, x1, y1, x3, y3, x5, y5, x6, y6) or\n               is_outside(x5, y5, x6, y6, x1, y1, x2, y2, x3, y3, x4, y4)) else \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    x1, y1, x2, y2 = map(int, input_data[0].split())\n    x3, y3, x4, y4 = map(int, input_data[1].split())\n    x5, y5, x6, y6 = map(int, input_data[2].split())\n\n    def is_inside(x, y):\n        return x1 <= x <= x2 and y1 <= y <= y2\n\n    if is_inside(x3, y3) or is_inside(x4, y4) or is_inside(x5, y5) or is_inside(x6, y6):\n        return \"NO\"\n\n    def is_outside(x, y):\n        return not is_inside(x, y)\n\n    def is_visible(x, y):\n        return is_inside(x, y) and not (is_inside(x3, y3) and is_inside(x4, y4) and is_inside(x5, y5) and is_inside(x6, y6))\n\n    if is_visible(x1, y1) or is_visible(x2, y2):\n        return \"YES\"\n\n    return \"NO\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    white_sheet_coordinates = [int(x) for x in input().split()]\n    black_sheet_coordinates_1 = [int(x) for x in input().split()]\n    black_sheet_coordinates_2 = [int(x) for x in input().split()]\n\n    white_sheet_x1, white_sheet_y1, white_sheet_x2, white_sheet_y2 = white_sheet_coordinates\n    black_sheet_x1, black_sheet_y1, black_sheet_x2, black_sheet_y2 = black_sheet_coordinates_1\n    black_sheet_x3, black_sheet_y3, black_sheet_x4, black_sheet_y4 = black_sheet_coordinates_2\n\n    white_sheet_width = white_sheet_x2 - white_sheet_x1\n    white_sheet_height = white_sheet_y2 - white_sheet_y1\n\n    black_sheet_1_width = black_sheet_x2 - black_sheet_x1\n    black_sheet_1_height = black_sheet_y2 - black_sheet_y1\n\n    black_sheet_2_width = black_sheet_x4 - black_sheet_x3\n    black_sheet_2_height = black_sheet_y4 - black_sheet_y3\n\n    black_sheet_1_area = black_sheet_1_width * black_sheet_1_height\n    black_sheet_2_area = black_sheet_2_width * black_sheet_2_height\n\n    if white_sheet_x1 <= black_sheet_x1 <= black_sheet_x3 <= white_sheet_x2 and white_sheet_y1 <= black_sheet_y1 <= black_sheet_y3 <= white_sheet_y2:\n        if white_sheet_x1 <= black_sheet_x4 <= white_sheet_x2 and white_sheet_y1 <= black_sheet_y4 <= white_sheet_y2:\n            return \"NO\"\n        elif black_sheet_1_area > white_sheet_width * white_sheet_height - (black_sheet_1_width * white_sheet_height + white_sheet_width * black_sheet_1_height):\n            return \"YES\"\n        else:\n            return \"NO\"\n    elif white_sheet_x1 <= black_sheet_x4 <= black_sheet_x6 <= white_sheet_x2 and white_sheet_y1 <= black_sheet_y4 <= black_sheet_y6 <= white_sheet_y2:\n        if black_sheet_2_area > white_sheet_width * white_sheet_height - (black_sheet_2_width * white_sheet_height + white_sheet_width * black_sheet_2_height):\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4005,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    white_sheet = list(map(int, input().split()))\n    black_sheet1 = list(map(int, input().split()))\n    black_sheet2 = list(map(int, input().split()))\n\n    def intersects(sheet1, sheet2):\n        return (\n            sheet1[0] < sheet2[0] < sheet1[2]\n            or sheet1[1] < sheet2[1] < sheet1[3]\n            or sheet1[0] < sheet2[2] < sheet1[2]\n            or sheet1[1] < sheet2[3] < sheet1[3]\n        )\n\n    if intersects(white_sheet, black_sheet1) or intersects(white_sheet, black_sheet2):\n        return \"NO\"\n\n    if white_sheet[0] <= 0 or white_sheet[1] <= 0 or white_sheet[2] >= 1000000 or white_sheet[3] >= 1000000:\n        return \"NO\"\n\n    return \"YES\""
    },
    {
        "number": 4005,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # parse the input\n    x1, y1, x2, y2 = map(int, stdin.split()[:4])\n    x3, y3, x4, y4 = map(int, stdin.split()[4:8])\n    x5, y5, x6, y6 = map(int, stdin.split()[8:12])\n\n    # check if some part of the white sheet can be seen\n    if (x1 <= x2 <= x4 <= x6) and (y1 <= y2 <= y4 <= y6):\n        return \"YES\"\n    if (x1 <= x2 <= x5 <= x6) and (y1 <= y2 <= y5 <= y6):\n        return \"YES\"\n    if (x3 <= x4 <= x5 <= x6) and (y3 <= y4 <= y5 <= y6):\n        return \"YES\"\n    if (x3 <= x4 <= x2 <= x6) and (y3 <= y4 <= y2 <= y6):\n        return \"YES\"\n    if (x3 <= x5 <= x2 <= x6) and (y3 <= y5 <= y2 <= y6):\n        return \"YES\"\n    if (x3 <= x5 <= x4 <= x6) and (y3 <= y5 <= y4 <= y6):\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4005,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_inside(point: tuple, rectangles: list) -> bool:\n        for rect in rectangles:\n            if rect[0] <= point[0] <= rect[2] and rect[1] <= point[1] <= rect[3]:\n                return False\n        return True\n\n    def check_visible(rectangles: list) -> bool:\n        white_sheet_top_left = (x1, y1)\n        white_sheet_bottom_right = (x2, y2)\n        point1 = (white_sheet_top_left[0] + 0.5 * (white_sheet_bottom_right[0] - white_sheet_top_left[0]),\n                 white_sheet_top_left[1] + 0.5 * (white_sheet_bottom_right[1] - white_sheet_top_left[1]))\n        point2 = (white_sheet_top_left[0] + 0.5 * (white_sheet_bottom_right[0] - white_sheet_top_left[0]),\n                 white_sheet_top_left[1] + 0.5 * (white_sheet_bottom_right[1] - white_sheet_top_left[1]))\n        return is_inside(point1, rectangles) and is_inside(point2, rectangles)\n\n    x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6 = map(int, input().split())\n    rectangles = [(x3, y3, x4, y4), (x5, y5, x6, y6)]\n    if check_visible(rectangles):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\ninput_data = \"\"\"\n2 2 4 4\n1 1 3 5\n3 1 5 5\n\"\"\"\n\nprint(solution(input_data)) "
    },
    {
        "number": 4005,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def is_point_visible(white_sheet, black_sheets, point):\n        for sheet in black_sheets:\n            if white_sheet.intersection(sheet).area > 0:\n                return False\n        return True\n\n    def point_inside_sheet(sheet, point):\n        return (sheet[0][0] <= point[0] <= sheet[1][0] and\n                sheet[0][1] <= point[1] <= sheet[1][1])\n\n    def sheet_covers_point(sheet, point):\n        return (point[0] >= sheet[0][0] and point[1] >= sheet[0][1] and\n                point[0] <= sheet[1][0] and point[1] <= sheet[1][1])\n\n    def does_sheet_cover_point(sheet, point):\n        return (point[0] < sheet[0][0] or point[0] > sheet[1][0] or\n                point[1] < sheet[0][1] or point[1] > sheet[1][1])\n\n    white_sheet = (tuple(map(int, input().split())), tuple(map(int, input().split())))\n    black_sheets = []\n    for _ in range(2):\n        black_sheets.append((tuple(map(int, input().split())), tuple(map(int, input().split()))))\n\n    point_visible = False\n    for x in range(white_sheet[0][0] + 1, white_sheet[1][0]):\n        for y in range(white_sheet[0][1] + 1, white_sheet[1][1]):\n            point = (x, y)\n            if not point_inside_sheet(white_sheet, point):\n                if all(not sheet_covers_point(sheet, point) for sheet in black_sheets):\n                    point_visible = True\n                    break\n        if point_visible:\n            break\n\n    if point_visible:\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef"
    },
    {
        "number": 4005,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, input().split())\n    x3, y3, x4, y4 = map(int, input().split())\n    x5, y5, x6, y6 = map(int, input().split())\n\n    def is_inside(x, y, rect):\n        return x1 <= x <= x2 and y1 <= y <= y2\n\n    def is_outside(x, y, rect):\n        return x < x1 or x > x2 or y < y1 or y > y2\n\n    def is_visible(x, y):\n        return not (is_inside(x, y, (x1, y1, x2, y2)) or\n               is_inside(x, y, (x3, y3, x4, y4)) or\n               is_inside(x, y, (x5, y5, x6, y6)))\n\n    # Check if some part of the white sheet can be seen\n    for x in range(min(x1, x3, x5), max(x2, x4, x6) + 1):\n        for y in range(min(y1, y3, y5), max(y2, y4, y6) + 1):\n            if is_visible(x, y):\n                return \"YES\"\n\n    return \"NO\" "
    },
    {
        "number": 4005,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    white_sheet = input().split()\n    white_sheet = [int(x) for x in white_sheet]\n\n    black_sheet1 = input().split()\n    black_sheet1 = [int(x) for x in black_sheet1]\n\n    black_sheet2 = input().split()\n    black_sheet2 = [int(x) for x in black_sheet2]\n\n    # Check if white sheet can be seen\n    for x in range(white_sheet[0], white_sheet[2] + 1):\n        for y in range(white_sheet[1], white_sheet[3] + 1):\n            if not (black_sheet1[0] <= x <= black_sheet1[2] and black_sheet1[1] <= y <= black_sheet1[3]) and not (black_sheet2[0] <= x <= black_sheet2[2] and black_sheet2[1] <= y <= black_sheet2[3]):\n                return \"YES\"\n\n    return \"NO\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split()[:4])\n    x3, y3, x4, y4 = map(int, stdin.split()[4:8])\n    x5, y5, x6, y6 = map(int, stdin.split()[8:12])\n    \n    white_sheet = (x1, y1, x2, y2)\n    black_sheet1 = (x3, y3, x4, y4)\n    black_sheet2 = (x5, y5, x6, y6)\n\n    def is_outside_sheets(x, y):\n        return (x <= black_sheet1[0] or x >= black_sheet1[2] or\n                y <= black_sheet1[1] or y >= black_sheet1[3]) and (\n                       x <= black_sheet2[0] or x >= black_sheet2[2] or\n                       y <= black_sheet2[1] or y >= black_sheet2[3])\n\n    def is_inside_white_sheet(x, y):\n        return white_sheet[0] <= x <= white_sheet[2] and white_sheet[1] <= y <= white_sheet[3]\n\n    def is_inside_sheets(x, y):\n        return (black_sheet1[0] <= x <= black_sheet1[2] and black_sheet1[1] <= y <= black_sheet1[3]) or (\n                black_sheet2[0] <= x <= black_sheet2[2] and black_sheet2[1] <= y <= black_sheet2[3])\n\n    for x in range(white_sheet[0], white_sheet[2] + 1):\n        for y in range(white_sheet[1], white_sheet[3] + 1):\n            if is_inside_white_sheet(x, y) and not is_inside_sheets(x, y):\n                return \"YES\"\n            elif is_outside_sheets(x, y):\n                return \"YES\"\n    return \"NO\" "
    },
    {
        "number": 4006,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def f(x: int) -> int:\n        while x % 10 == 0:\n            x //= 10\n            x += 1\n        return x + 1\n\n    n = int(stdin)\n    reachable_set = set()\n    reachable_set.add(n)\n\n    for i in range(100000):\n        new_set = set()\n        for num in reachable_set:\n            new_set.add(f(num))\n        reachable_set = new_set\n\n    return str(len(reachable_set))\n"
    },
    {
        "number": 4006,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    count = 0\n    visited = set()\n\n    def dfs(node: int) -> None:\n        nonlocal count\n        if node in visited:\n            return\n        visited.add(node)\n        count += 1\n        next_node = node + 1\n        while next_node % 10 == 0:\n            next_node //= 10\n        if next_node != 1:\n            dfs(next_node)\n\n    dfs(n)\n    return str(count)\n\ninput_str = \"1098\\n10\\n\"\noutput_str = \"\"\nfor line in input_str.strip().split('\\n'):\n    output_str += solution(line) + '\\n'\nprint(output_str)"
    },
    {
        "number": 4006,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    \n    def f(x: int) -> int:\n        if x % 10 == 0:\n            return f(x // 10)\n        else:\n            return x + 1\n    \n    def reachable(x: int) -> set:\n        visited = set()\n        stack = [x]\n        \n        while stack:\n            curr = stack.pop()\n            if curr not in visited:\n                visited.add(curr)\n                stack.extend(set(range(f(curr), curr + 1)))\n        \n        return visited\n    \n    return str(len(reachable(n)))"
    },
    {
        "number": 4006,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    visited = set()\n    queue = [n]\n\n    while queue:\n        curr = queue.pop(0)\n        if curr in visited:\n            continue\n        visited.add(curr)\n        queue.extend([curr+1] + [curr+10*i for i in range(1, int(curr/10)+1) if curr+10*i not in visited])\n        count += 1\n\n    return str(count)\n\ninput_str = \"1098\"\nprint(solution(input_str)) "
    },
    {
        "number": 4006,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    visited = set()\n    queue = [n]\n    count = 0\n\n    while queue:\n        size = len(queue)\n        count += size\n\n        for _ in range(size):\n            current = queue.pop(0)\n            if current == 1:\n                visited.add(current)\n            else:\n                new_number = current - 1\n                while new_number % 10 == 0:\n                    new_number //= 10\n                    new_number += 1\n                new_number += 1\n                if new_number not in visited:\n                    visited.add(new_number)\n                    queue.append(new_number)\n\n    return str(count)\n\n\ninput_str = \"\"\"1098\n10\n\"\"\"\nexpected_output_str = \"\"\"20\n19\n\"\"\"\n\ninput_list = input_str.split('\\n')\nexpected_output_list = expected_output_str.split('\\n')\n\nfor i in range(len(input_list)):\n    assert solution(input_list[i]) == expected_output_list[i]\n    print(solution(input_list[i])) "
    },
    {
        "number": 4006,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n\n    def f(x: int) -> int:\n        while x % 10 == 0:\n            x //= 10\n            x += 1\n        return x + 1\n\n    reachable_count = 0\n    queue = [n]\n    visited = set([n])\n\n    while queue:\n        x = queue.pop(0)\n        reachable_count += 1\n        for i in range(10):\n            y = f(x + i)\n            if y not in visited:\n                visited.add(y)\n                queue.append(y)\n\n    return str(reachable_count)\n"
    },
    {
        "number": 4006,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n\n    def reachable(x):\n        nonlocal count\n        if x == 0 or x == 1:\n            count += 1\n        else:\n            reachable(x - 1)\n            reachable(x - 1)\n            reachable(x - 2)\n            reachable(x - 3)\n            reachable(x - 4)\n            reachable(x - 5)\n            reachable(x - 6)\n            reachable(x - 7)\n            reachable(x - 8)\n            reachable(x - 9)\n\n    reachable(n)\n    return str(count)\n\n\ndef"
    },
    {
        "number": 4006,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    \n    def f(x):\n        while x % 10 == 0:\n            x //= 10\n            x += 1\n        return x + 1\n    \n    reachable = set()\n    reachable.add(n)\n    \n    i = 0\n    while True:\n        if len(reachable) == 1000000:\n            break\n        new_reachable = set()\n        for num in reachable:\n            new_reachable.add(f(num))\n        reachable = new_reachable\n        i += 1\n        if i % 10000 == 0:\n            print(f\"{i} iterations completed, {len(reachable)} numbers reachable\")\n    \n    return len(reachable)"
    },
    {
        "number": 4006,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n + 1):\n        num = i\n        while True:\n            num = num + 1\n            trailing_zeros = 0\n            while num % 10 == 0:\n                trailing_zeros += 1\n                num //= 10\n            if num == 1:\n                break\n            num = num - 1\n        count += trailing_zeros\n    return str(count)\n"
    },
    {
        "number": 4006,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n\n    def f(x: int) -> int:\n        nonlocal count\n        result = x + 1\n        while '0' in str(result):\n            result //= 10\n            result += 1\n            count += 1\n        return result\n\n    def dfs(x: int) -> None:\n        nonlocal count\n        if x == n:\n            return\n        dfs(f(x))\n\n    dfs(n)\n    return str(count)\n"
    },
    {
        "number": 4007,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    f = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    def find_giver(f: list, i: int) -> int:\n        for j in range(n):\n            if f[j] == i:\n                return j\n        return -1\n\n    def find_receiver(f: list, i: int) -> int:\n        count = 0\n        for j in range(n):\n            if f[j] == 0:\n                count += 1\n            elif f[j] == i:\n                return count\n        return -1\n\n    result = []\n    for i in range(n):\n        if f[i] == 0:\n            giver = find_giver(f, i)\n            receiver = find_receiver(f, i)\n            if giver == -1 or receiver == -1:\n                return \"Impossible\"\n            f[giver] = n\n            f[i] = n\n            result.append(n)\n            n -= 1\n        else:\n            result.append(f[i])\n\n    return \" \".join(map(str, result))\n\ninput_str = (\n    \"5\\n\"\n    \"5 0 0 2 4\\n\"\n    \"7\\n\"\n    \"7 0 0 1 4 0 6\\n\"\n    \"7\\n\"\n    \"7 4 0 3 0 5 1\\n\"\n    \"5\\n\"\n    \"2 1 0 0 0\\n\"\n)\n\nprint(solution(input_str)) "
    },
    {
        "number": 4007,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    f = list(map(int, stdin.splitlines()[1].split()))\n\n    nf = [0] * n\n    for i in range(n):\n        if f[i] != 0:\n            nf[i] = f[i]\n            nf[f[i] - 1] = i + 1\n\n    return ' '.join(map(str, nf))\n"
    },
    {
        "number": 4007,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    friends = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    # Find the indices of the known values\n    known_indices = [i for i, f in enumerate(friends) if f != 0]\n\n    # Create a dictionary to store the friends for each unknown value\n    friends_for_unknown = {i: [] for i in range(1, n + 1) if i not in friends}\n\n    # Fill in the unknown values\n    for i in known_indices:\n        friends_for_unknown[friends[i]].append(i)\n\n    # Generate the output\n    output = []\n    for i in range(1, n + 1):\n        if i in friends:\n            output.append(friends.index(i))\n        else:\n            output.append(len(friends_for_unknown[i]))\n            friends_for_unknown[i].append(len(friends))\n\n    return \" \".join(map(str, output))\n"
    },
    {
        "number": 4007,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    n = int(input_data[0])\n    f = list(map(int, input_data[1].split()))\n    \n    def find_giver(i, f):\n        for j in range(n):\n            if f[j] == i:\n                return j\n        return None\n    \n    def find_receiver(i, f):\n        for j in range(n):\n            if f[j] == 0 and i != j:\n                return j\n        return None\n    \n    nf = [0] * n\n    for i in range(n):\n        if f[i] != 0:\n            giver = find_giver(i, f)\n            if giver is not None:\n                nf[i] = f[giver]\n            else:\n                nf[i] = find_receiver(i, f)\n    return ' '.join(str(n * f) for f in nf)\n"
    },
    {
        "number": 4007,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    f = list(map(int, stdin.splitlines()[1].split()))\n\n    # Check for contradictory information\n    for i in range(n):\n        for j in range(n):\n            if f[i] == f[j] and i != j:\n                return \"Impossible\"\n\n    # Fill in unknown values\n    for i in range(n):\n        if f[i] == 0:\n            f[i] = (i + 1) % n\n\n    # Convert values to the desired format\n    result = []\n    for i in range(n):\n        result.append(n * f[i])\n\n    return \" \".join(map(str, result))"
    },
    {
        "number": 4007,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    given_data = list(map(int, stdin.splitlines()[1].split()))\n    nf_data = [0] * n\n    free_gifts = [i for i in range(n) if given_data[i] == 0]\n\n    while free_gifts:\n        free_gift = free_gifts.pop(0)\n        for i in range(n):\n            if given_data[i] == 0:\n                nf_data[free_gift] = i\n                nf_data[i] = free_gift\n                if nf_data.count(free_gift) == 1 and nf_data.count(i) == 1:\n                    break\n        else:\n            free_gifts.append(free_gift)\n\n    return ' '.join(map(str, nf_data))\n\n\ninput_stdin = '''5\n5 0 0 2 4'''\nprint(solution(input_stdin))  # Output: 5 3 1 2 4\n\ninput_stdin = '''7\n7 0 0 1 4 0 6'''\nprint(solution(input_stdin))  # Output: 7 3 2 1 4 5 6\n\ninput_stdin = '''7\n7 4 0 3 0 5 1'''\nprint(solution(input_stdin))  # Output: 7 4 2 3 6 5 1\n\ninput_stdin = '''5\n2 1 0 0 0'''\nprint(solution(input_stdin))  # Output: 2 1 4 5 3 "
    },
    {
        "number": 4007,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    friends = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    result = [0] * n\n    available_friends = set(range(1, n + 1))\n\n    for i in range(n):\n        if friends[i] != 0:\n            result[i] = friends[i]\n            available_friends.remove(friends[i])\n\n    for i in range(n):\n        if result[i] == 0:\n            result[i] = available_friends.pop()\n            available_friends.remove(result[i])\n\n    return \" \".join(map(str, result))\n\n\ndef"
    },
    {
        "number": 4007,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(friends, remaining, assignments, n):\n        if not remaining:\n            return [n * x for x in assignments]\n        for i in range(n):\n            if friends[i] == 0 and i not in assignments:\n                assignments.add(i)\n                result = dfs(friends, remaining - 1, assignments, n)\n                if result is not None:\n                    return result\n                assignments.remove(i)\n        return None\n\n    n = int(stdin[0])\n    friends = [int(x) for x in stdin[1].split()]\n    assignments = set()\n    result = dfs(friends, n, assignments, n)\n    return \" \".join(str(x) for x in result) "
    },
    {
        "number": 4007,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    f_i = list(map(int, stdin.splitlines()[1].split()))\n    \n    def can_give_and_receive(i, f_i):\n        if f_i == 0:\n            return False\n        elif f_i == i:\n            return False\n        elif f_i in given_friends:\n            return False\n        elif f_i in receiving_friends:\n            return False\n        else:\n            return True\n    \n    def give_and_receive(i, f_i):\n        nonlocal given_friends, receiving_friends\n        given_friends.add(i)\n        receiving_friends.add(f_i)\n        nf_i = n * f_i\n        return nf_i\n        \n    given_friends = set()\n    receiving_friends = set()\n    nf_i = [0] * n\n    \n    for i in range(n):\n        if f_i[i] != 0:\n            if can_give_and_receive(i, f_i[i]):\n                nf_i[i] = give_and_receive(i, f_i[i])\n            else:\n                for j in range(n):\n                    if j != i and can_give_and_receive(i, j):\n                        nf_i[i] = give_and_receive(i, j)\n                        break\n                \n    return \" \".join(map(str, nf_i)) "
    },
    {
        "number": 4007,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    f = list(map(int, stdin.splitlines()[1].split()))\n\n    def is_valid(f, n):\n        giver = [0] * n\n        receiver = [0] * n\n        for i in range(n):\n            if f[i] != 0:\n                if giver[f[i] - 1] == 0 and receiver[f[i] - 1] == 0:\n                    giver[f[i] - 1] = 1\n                    receiver[i] = 1\n                else:\n                    return False\n        return True\n\n    def solve(f, n, i):\n        if i == n:\n            return f if is_valid(f, n) else None\n        for j in range(n):\n            if f[j] == 0:\n                f[j] = i + 1\n                res = solve(f, n, i + 1)\n                if res:\n                    return res\n                f[j] = 0\n        return None\n\n    res = solve(f, n, 0)\n    if res:\n        return ' '.join(map(str, [n] * n + res))\n    return \"No solution found\""
    },
    {
        "number": 4008,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    if k > n or k > 5000 or n > 5000:\n        return \"NO\"\n\n    colors = [[] for _ in range(k)]\n\n    for i in range(n):\n        for j in range(k):\n            if a[i] - 1 == j:\n                colors[j].append(i)\n                break\n\n    for color in colors:\n        if len(color) < 1:\n            return \"NO\"\n\n    coloring = [0] * n\n    for i in range(n):\n        for j in range(k):\n            if i in colors[j]:\n                coloring[i] = j + 1\n                break\n\n    if coloring.count(0) > 0:\n        return \"NO\"\n\n    return \"YES\\n\" + \" \".join(map(str, coloring))\n\n\ndef"
    },
    {
        "number": 4008,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    if k > n:\n        return \"NO\"\n\n    colors = [[] for _ in range(k + 1)]\n\n    for i in range(n):\n        colors[a[i]].append(i)\n\n    for color in colors:\n        if len(color) > 0:\n            for i in range(1, k + 1):\n                if not any(colors[i] == color for colors in colors):\n                    return \"NO\"\n\n    result = []\n    for i in range(1, k + 1):\n        for j in range(n):\n            if colors[i][j] is not None:\n                result.append(i)\n                colors[i][j] = None\n                break\n\n    return \"YES \" + \" \".join(map(str, result))\n"
    },
    {
        "number": 4008,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    n, k = map(int, input_list[:2])\n    a = list(map(int, input_list[2:]))\n\n    # Check if it's impossible to color the array with k colors\n    if k > n:\n        return \"NO\"\n\n    # Check if it's possible to color the array with k colors\n    if len(set(a)) < k:\n        return \"NO\"\n\n    color_list = [None] * n\n    color_map = {}\n    color_count = 1\n\n    # Assign colors to the array elements\n    for i in range(n):\n        if color_list[i] is None:\n            if a[i] in color_map:\n                color_list[i] = color_map[a[i]]\n            else:\n                color_list[i] = color_count\n                color_map[a[i]] = color_count\n                color_count += 1\n                if color_count > k:\n                    return \"NO\"\n\n    # Check if all elements are colored and each color is distinct\n    for i in range(k):\n        if i + 1 not in color_map.values():\n            return \"NO\"\n\n    # Generate the coloring\n    color_list = [color_map[a[i]] for i in range(n)]\n\n    # Check if the coloring satisfies the conditions\n    for i in range(1, k + 1):\n        if i not in color_map.values():\n            return \"NO\"\n\n    # Print the coloring\n    return \"YES\\n\" + \" \".join(map(str, color_list))\n"
    },
    {
        "number": 4008,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, input().split()))\n\n    if k > n or k > len(set(a)):\n        return \"NO\"\n\n    color_count = [0] * k\n    color_used = [False] * k\n    color_map = [-1] * n\n\n    for i in range(n):\n        for j in range(k):\n            if a[i] == j + 1 and color_count[j] == 0:\n                color_used[j] = True\n                color_count[j] += 1\n                color_map[i] = j + 1\n                break\n\n    if -1 in color_map:\n        return \"NO\"\n\n    coloring = [0] * n\n    for i in range(n):\n        coloring[i] = color_map[i]\n\n    return \"YES\\n\" + \" \".join(map(str, coloring))"
    },
    {
        "number": 4008,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    colors = [False] * k\n    color_map = [0] * n\n\n    for i in range(n):\n        color = a[i] % k\n        if colors[color - 1]:\n            return \"NO\"\n        colors[color - 1] = True\n        color_map[i] = color\n\n    return \"YES\\n\" + \" \".join(map(str, color_map))\n"
    },
    {
        "number": 4008,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    if k == 1:\n        return \"YES\\n1 1 1 1\"\n\n    for i in range(1, k + 1):\n        if a.count(i) == 0:\n            return \"NO\"\n\n    colors = {}\n    for i in range(1, k + 1):\n        colors[i] = a.count(i)\n\n    coloring = sorted(colors, key=colors.get)\n\n    return \"YES\\n\" + \" \".join(str(c) for c in coloring)\n"
    },
    {
        "number": 4008,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    if k > n:\n        return \"NO\"\n\n    colors = [False] * k\n    for num in a:\n        for i in range(1, k + 1):\n            if colors[i - 1] is False:\n                if num == i:\n                    colors[i - 1] = True\n                    break\n\n    if sum(colors) != k:\n        return \"NO\"\n\n    coloring = []\n    for i in range(1, k + 1):\n        coloring.extend([i] * a.count(i))\n\n    return \"YES\\n\" + \" \".join(map(str, coloring))\n\n\ninput_data = \"\"\"4 2\n1 2 2 3\"\"\"\nprint(solution(input_data))\n\ninput_data = \"\"\"5 2\n3 2 1 2 3\"\"\"\nprint(solution(input_data))\n\ninput_data = \"\"\"5 2\n2 1 1 2 1\"\"\"\nprint(solution(input_data))\n\ninput_data = \"\"\"5 2\n1 2 3 4 5\n5 4 3 2 1\n\"\"\"\nprint(solution(input_data))\n\ninput_data = \"\"\"5 2\n1 2 3 4 5\n1 2 3 4 5\n\"\"\"\nprint(solution(input_data))\n\ninput_data = \"\"\"5 2\n1 2 3 4 5\n1 2 3 4 6\n\"\"\"\nprint(solution(input_data))\n\ninput_data = \"\"\"5 2\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 6\n\"\"\"\nprint(solution(input_data))\n\ninput_data = \"\"\"5 2\n1 2 3 4 5\n1 2 3 4 6\nNO\n\"\"\"\nprint(solution(input_data))\n\ninput_data = \"\"\"5 2\n1 2 3 4 5\n1 2 3 4 6\nNO\n\"\"\"\nprint(solution(input_data))\n\ninput_data = \"\"\"5 2\n1 2 3 4 5\n1 2 3 4 6\nNO\n\"\"\"\nprint(solution(input_data))\n\ninput_data = \"\"\"5 2\n1 2 3 4 5\n1 2 3 4 6\nYES\n\"\"\"\nprint(solution(input_data))\n\ninput_data = \"\"\"5 2\n1 2 3 4 5\n1 2 3 4 6\nYES\n1 1 1 1 1\n\"\"\"\nprint(solution(input_data))\n\ninput_data = \"\"\"5 2\n1 2 3 4 5\n1 2 3 4 6\nYES\n1 1 1 1 2\n\"\"\"\nprint(solution(input_data))\n\ninput_data = \"\"\"5 2\n1 2 3 4 5\n1 2 3 4 6\nYES\n2 1 1 1 2\n\"\"\"\nprint(solution(input_data))\n\ninput_data = \"\"\"5 2\n1 2 3 4 5\n1 2 3 4 6\nYES\n1 1 1 1 2\n\"\"\"\nprint(solution(input_data))\n\ninput_data = \"\"\"5 2\n1 2 3 4 5\n1 2 3 4 6\nYES\n1 1 1 1 2\n\"\"\"\nprint(solution(input_data))\n\ninput_data = \"\"\"5 2\n1 2 3 4 5\n1 2 3 4 6\nYES\n1 1 1 1 2\n\"\"\"\nprint(solution(input_data))\n\ninput_data = \"\"\"5 2\n1 2 3 4 5\n1 2 3 4 6\nYES\n1 1 1 1 2\n\"\""
    },
    {
        "number": 4008,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.splitlines()\n    n, k = map(int, input_lines[0].split())\n    a = list(map(int, input_lines[1].split()))\n\n    def is_valid(c):\n        return len(set(c)) == k and all(c[i] == i + 1 for i in range(k))\n\n    if k > n:\n        return \"NO\"\n\n    for i in range(1, n + 1):\n        if i in a:\n            a[a.index(i)] = i\n        else:\n            a.append(i)\n\n    for i in range(1, k + 1):\n        if i not in a:\n            return \"NO\"\n\n    if is_valid(a):\n        return \"YES\\n\" + \" \".join(map(str, a))\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    def is_valid_coloring(coloring: list) -> bool:\n        colors = [0] * k\n        for i in range(n):\n            if coloring[i] == 0:\n                return False\n            colors[coloring[i] - 1] += 1\n        for color in colors:\n            if color == 0:\n                return False\n        return True\n\n    def count_distinct_colors(coloring: list) -> int:\n        colors = set()\n        for i in range(n):\n            colors.add(coloring[i])\n        return len(colors)\n\n    def get_coloring(coloring: list) -> list:\n        for i in range(n):\n            for j in range(1, k + 1):\n                if is_valid_coloring(coloring[:i] + [j] + coloring[i + 1:]):\n                    if count_distinct_colors(coloring[:i] + [j] + coloring[i + 1:]) == k:\n                        return get_coloring(coloring[:i] + [j] + coloring[i + 1:])\n        return coloring\n\n    if n < k or k == 0:\n        return \"NO\"\n\n    coloring = [0] * n\n    coloring[0] = 1\n    coloring = get_coloring(coloring)\n    if is_valid_coloring(coloring):\n        return \"YES \" + \" \".join(map(str, coloring))\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    if k == 1:\n        if len(set(a)) == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    if len(a) < k:\n        return \"NO\"\n\n    color_map = [[] for _ in range(k)]\n    for i in range(n):\n        color_map[a[i] - 1].append(i)\n\n    for i in range(k):\n        if len(color_map[i]) == 0:\n            return \"NO\"\n\n    coloring = [0] * n\n    for i in range(n):\n        color = -1\n        for j in range(k):\n            if i not in color_map[j]:\n                color = j\n                break\n        if color == -1:\n            return \"NO\"\n        coloring[i] = color + 1\n\n    return \"YES \" + \" \".join(map(str, coloring))\n"
    },
    {
        "number": 4009,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, input().split())\n    num = input().strip()\n\n    operations = []\n    for i in range(x):\n        if num[i] == '0':\n            operations.append((i, '1'))\n        else:\n            operations.append((i, '0'))\n\n    operations.sort(key=lambda x: x[0])\n\n    for i in range(len(operations) - 1, -1, -1):\n        _, digit = operations[i]\n        num = num[:operations[i][0]] + digit + num[operations[i][0] + 1:]\n        if int(num[:x]) % (10 ** x) == (10 ** y):\n            return i + 1\n\n    return -1\n"
    },
    {
        "number": 4009,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.splitlines()[0].split())\n    number = stdin.splitlines()[1]\n    \n    operations = []\n    for i in range(x + 1):\n        operations.append(10**(x - i))\n    \n    for i in range(len(number) - 1, -1, -1):\n        if number[i] == '0':\n            if operations[0] % 2 != 0:\n                operations[0] += 1\n                number = number[:i] + '1' + number[i+1:]\n            break\n    \n    for i in range(len(operations) - 1):\n        if operations[i] % 2 != 0:\n            for j in range(i + 1, len(operations)):\n                if operations[j] % operations[i] == 0:\n                    operations[j] //= operations[i]\n            break\n    \n    min_operations = len(number) - operations.count(0)\n    \n    return str(min_operations)\n"
    },
    {
        "number": 4009,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split()[:3])\n    num = list(map(int, stdin.split()[3]))\n\n    # Perform operations to get the number with remainder 10^y modulo 10^x\n    while len(num) < n:\n        num.append(0)\n    while num[0] == 0:\n        num.pop(0)\n\n    for i in range(x):\n        if num[i] == 0:\n            num[i] = 1\n        else:\n            num[i] = 0\n\n    # Count the number of operations\n    operations = 0\n    for i in range(x, n):\n        if num[i] == 0:\n            num[i] = 1\n            operations += 1\n        else:\n            num[i] = 0\n            operations += 1\n\n    return str(operations)"
    },
    {
        "number": 4009,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split()[:3])\n    num = stdin.split()[-1]\n    num_list = list(map(int, list(num)))\n    \n    # count the number of operations needed\n    count = 0\n    for i in range(x, n):\n        if num_list[i] == 1:\n            count += 1\n            num_list[i] = 0\n            num_list[i-x] = 1\n    \n    return count\n\n\ninput_str = \"\"\"11 5 2\n11010100101\n11 5 1\n11010100101\n\"\"\"\n\noutput_str = \"\"\"1\n3\"\"\"\n\ninput_list = input_str.split('\\n')[1:-1]\noutput_list = [solution(input_str) for input_str in input_list]\n\nassert '\\n'.join(map(str, output_list)) == output_str\nprint('\\n'.join(map(str, output_list))) "
    },
    {
        "number": 4009,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, input().split())\n    number = input()\n    \n    operations = 0\n    while int(number[-x:]) % 10**y != 1:\n        operations += 1\n        for i in range(len(number)-1, -1, -1):\n            if number[i] == '0':\n                number = number[:i] + '1' + number[i+1:]\n                break\n            elif number[i] == '1':\n                number = number[:i] + '0' + number[i+1:]\n                break\n    \n    return str(operations)\n"
    },
    {
        "number": 4009,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    number = list(map(int, stdin.split()[2]))\n    count = 0\n\n    while 10**x - 10**y % 10**x != 10**x - 1:\n        for i in range(n):\n            if number[i] == 1:\n                number[i] = 0\n                break\n        else:\n            count += 1\n            for i in range(n):\n                if number[i] == 0:\n                    number[i] = 1\n                    break\n            else:\n                return -1\n\n    return count\n\n\nn, x, y = map(int, input().split())\nnumber = list(map(int, input().split()))\n\nresult = solution(stdin=str(n) + \" \" + str(x) + \" \" + str(y) + \" \" + \"\".join(map(str, number)))\nprint(result) "
    },
    {
        "number": 4009,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split()[:3])\n    number = stdin.split()[3]\n    \n    current_number = int(number)\n    operations = 0\n    \n    while (current_number // 10**(x - 1) % 10) % 2 != y:\n        operations += 1\n        current_number = (current_number * 2) % 10**n\n    \n    return str(operations)\n\nn = int(input())\nx = int(input())\ny = int(input())\n\nnumber = input()\n\nresult = solution(f\"{n} {x} {y} {number}\")\nprint(result) "
    },
    {
        "number": 4009,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, input().split())\n    num = input()\n    operations = 0\n\n    if x == 0:\n        return 0\n\n    for i in range(n - x, -1, -1):\n        if num[i] == '1':\n            num = num[:i] + '0' + num[i + 1:]\n            operations += 1\n        elif int(num[i:i + x]) % 10 == 0:\n            num = num[:i] + '1' + num[i + 1:]\n            operations += 1\n        else:\n            rem = int(num[i:i + x]) % 10\n            index = 10 - rem\n            num = num[:i + x - 1] + str(index) + num[i + x:]\n            operations += 1\n\n    return operations\n\n\nn, x, y = map(int, input().split())\nnum = input()\n\nprint(solution(f\"{n} {x} {y}\\n{num}\")) "
    },
    {
        "number": 4009,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split()[:3])\n    number = stdin.split()[3]\n    \n    # Initialize a list to store the number\n    num_list = [int(d) for d in number]\n    \n    # Calculate the minimum number of operations\n    count = 0\n    for i in range(y, x):\n        if num_list[i] == 0:\n            count += 1\n            num_list[i] = 1\n    \n    # Return the minimum number of operations\n    return str(count)\n"
    },
    {
        "number": 4009,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, input().split())\n    num = input()\n    operations = 0\n    for i in range(n - x):\n        if num[i] == '1':\n            num = num[:i] + '0' + num[i + 1:]\n            operations += 1\n    remainder = int(num[:x]) % (10**y)\n    if remainder != 0:\n        operations += x - remainder\n    return str(operations)\n"
    },
    {
        "number": 4010,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.readline())\n    for _ in range(test_cases):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        is_palindrome = False\n        for i in range(n):\n            for j in range(i+2, n+1):\n                if a[i:j] == a[i:j][::-1]:\n                    is_palindrome = True\n                    break\n            if is_palindrome:\n                break\n        print(\"YES\" if is_palindrome else \"NO\")\n"
    },
    {
        "number": 4010,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    output = []\n    for i in range(1, 2*t+1, 2):\n        n = int(stdin.split('\\n')[i].split()[0])\n        a = list(map(int, stdin.split('\\n')[i].split()[1:]))\n        found = False\n        for j in range(n):\n            for k in range(j+1, n):\n                for l in range(k+1, n):\n                    if a[j:l+1] == a[l:j-1:-1]:\n                        found = True\n                        break\n                if found:\n                    break\n            if found:\n                break\n        if found:\n            output.append(\"YES\")\n        else:\n            output.append(\"NO\")\n    return output\n"
    },
    {
        "number": 4010,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n\n    t = int(stdin)\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n\n        for i in range(n):\n            for j in range(i + 2, n + 1):\n                if is_palindrome(str(a[i:j])):\n                    print(\"YES\")\n                    break\n            else:\n                continue\n            break\n        else:\n            print(\"NO\")"
    },
    {
        "number": 4010,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def is_palindrome(arr: list) -> bool:\n        n = len(arr)\n        for i in range(n // 2):\n            if arr[i] != arr[n - i - 1]:\n                return False\n        return True\n\n    def has_palindrome_subseq(arr: list) -> bool:\n        n = len(arr)\n        for i in range(n):\n            for j in range(i + 2, n + 1, 2):\n                if is_palindrome(arr[i:j]):\n                    return True\n        return False\n\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        arr = list(map(int, stdin.readline().split()))\n        if has_palindrome_subseq(arr):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n"
    },
    {
        "number": 4010,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        palindrome = False\n        for i in range(n):\n            for j in range(i + 1, n + 1):\n                subseq = a[i:j]\n                if subseq == subseq[::-1]:\n                    palindrome = True\n                    break\n            if palindrome:\n                break\n        if palindrome:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n\nstdin = sys.stdin.read()\nsolution(stdin) "
    },
    {
        "number": 4010,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    ans = []\n\n    for _ in range(t):\n        n = int(stdin.split()[1])\n        a = list(map(int, stdin.split()[2:n+2]))\n        is_palindrome = False\n\n        for i in range(n):\n            for j in range(i+2, n+1):\n                if a[i] == a[j]:\n                    is_palindrome = True\n                    break\n            if is_palindrome:\n                break\n\n        ans.append(\"YES\" if is_palindrome else \"NO\")\n        stdin = stdin[n+2:]\n\n    return \"\\n\".join(ans)\n"
    },
    {
        "number": 4010,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def is_palindrome(arr: list) -> bool:\n        return arr == arr[::-1]\n\n    def has_palindrome_subsequence(arr: list) -> bool:\n        n = len(arr)\n        for i in range(n):\n            for j in range(i + 2, n):\n                if is_palindrome(arr[i:j + 1]):\n                    return True\n        return False\n\n    t = int(stdin.splitlines()[0])\n    output = []\n\n    for i in range(2 * t):\n        n = int(stdin.splitlines()[i + 1])\n        arr = list(map(int, stdin.splitlines()[i + 2].split()))\n        output.append(\"YES\" if has_palindrome_subsequence(arr) else \"NO\")\n\n    return \"\\n\".join(output)\n"
    },
    {
        "number": 4010,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    result = []\n    for i in range(1, 2 * t + 1, 2):\n        n = int(stdin.split('\\n')[i].split()[0])\n        a = list(map(int, stdin.split('\\n')[i].split()[1:]))\n        flag = False\n        for j in range(n - 2):\n            for k in range(j + 1, n - 1):\n                for l in range(k + 1, n):\n                    if a[j] == a[l] and a[k] == a[n - k - 1]:\n                        flag = True\n                        break\n                if flag:\n                    break\n            if flag:\n                break\n        result.append(\"YES\" if flag else \"NO\")\n    return \"\\n\".join(result)\n"
    },
    {
        "number": 4010,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n\n    def has_palindrome_subsequence(a: List[int]) -> bool:\n        for i in range(len(a)):\n            for j in range(i + 2, len(a) + 1):\n                if is_palindrome(str(a[i:j])):\n                    return True\n        return False\n\n    t = int(stdin)\n    result = []\n    for _ in range(t):\n        n = int(stdin.split()[1])\n        a = list(map(int, stdin.split()[2:]))\n        result.append(\"YES\" if has_palindrome_subsequence(a) else \"NO\")\n\n    return \"\\n\".join(result)\n"
    },
    {
        "number": 4010,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.split(\"\\n\")[0])\n    output = []\n\n    for _ in range(test_cases):\n        n = int(stdin.split(\"\\n\")[1])\n        a = list(map(int, stdin.split(\"\\n\")[2].split()))\n\n        for i in range(n - 2):\n            for j in range(i + 2, n):\n                if a[i:j + 1] == a[j:i - 1:-1]:\n                    output.append(\"YES\")\n                    break\n            else:\n                continue\n            break\n        else:\n            output.append(\"NO\")\n\n        stdin = \"\\n\".join(stdin.split(\"\\n\")[3:])\n\n    return \"\\n\".join(output)\n"
    },
    {
        "number": 4011,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = stdin.splitlines()[1]\n    f = [int(i) for i in stdin.splitlines()[2].split()]\n\n    max_num = ''\n    max_sum = 0\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub_str = a[i:j]\n            sub_sum = sum([f[int(c)-1] for c in sub_str])\n\n            if sub_sum > max_sum:\n                max_num = sub_str\n                max_sum = sub_sum\n\n    return str(int(max_num.translate(str.maketrans({str(i+1): str(f[i]) for i in range(9)}))))"
    },
    {
        "number": 4011,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def f(digit: str) -> str:\n        return str(f_table[ord(digit) - ord('1')])\n\n    n, a, f_table = stdin.split('\\n')\n    n = int(n)\n    f_table = list(map(int, f_table.split()))\n    a_list = list(a)\n\n    max_a = 0\n    for i in range(n - 1, -1, -1):\n        if max_a < int(f(a_list[i])):\n            max_a = int(f(a_list[i]))\n        a_list[i] = f(a_list[i])\n\n    return str(max_a)\n"
    },
    {
        "number": 4011,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, f_str = stdin.split('\\n')\n    n = int(n)\n    a = int(a)\n    f = [int(x) for x in f_str.split()]\n\n    # Modify the digits of a using f\n    modified_a = 0\n    for i in range(n):\n        digit = a % 10\n        modified_digit = f[digit - 1]\n        modified_a = modified_a * 10 + modified_digit\n        a //= 10\n\n    # Find the maximum number\n    max_num = 0\n    for i in range(1, n + 1):\n        max_num = max(max_num, modified_a // (10 ** (n - i)) * 10 ** (i - 1) + modified_a % (10 ** (n - i)) * (10 ** (i - 1) - 1))\n\n    return str(max_num)"
    },
    {
        "number": 4011,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, *f = stdin.split('\\n')\n    n = int(n)\n    a = int(a)\n    f = list(map(int, f))\n\n    max_num = 0\n    for _ in range(n):\n        a, carry = divmod(a * 10, 9)\n        a += carry\n        if a > max_num:\n            max_num = a\n\n    f_dict = dict(zip('123456789', f))\n    f_max = max(f_dict.values())\n    f_min = min(f_dict.values())\n\n    for digit in str(max_num):\n        if f_dict[digit] > f_max:\n            f_max = f_dict[digit]\n        elif f_dict[digit] < f_min:\n            f_min = f_dict[digit]\n\n    max_num = int(''.join(str(f_dict[digit]) if digit in f_dict else digit for digit in str(max_num)))\n\n    return str(max_num)"
    },
    {
        "number": 4011,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = stdin.split('\\n')[1]\n    f_values = [int(x) for x in stdin.split('\\n')[2].split()]\n    f = {str(i): f_values[i-1] for i in range(1, 10)}\n    \n    # Maximum value of a digit is 9, so the maximum possible value can be obtained by replacing all digits with 9\n    max_value = \"9\" * n\n    \n    # Apply the operation on the maximum value\n    for i in range(n):\n        max_value = max_value[:i] + str(f[max_value[i]]) + max_value[i+1:]\n        \n    return max_value"
    },
    {
        "number": 4011,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    n = int(input_list[0])\n    a = input_list[1]\n    f_dict = {i: int(x) for i, x in enumerate(input_list[2].split())}\n    \n    # Get the maximum value after applying the operation\n    max_value = max(f_dict.values())\n    for i in range(n):\n        if int(a[i]) < max_value:\n            a = a[:i] + str(max_value) + a[i+1:]\n    return a"
    },
    {
        "number": 4011,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    n = int(input_list[0])\n    a = input_list[1]\n    f = [int(x) for x in input_list[2].split()]\n\n    max_num = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub_num = int(a[i:j])\n            f_num = 0\n            for digit in str(sub_num):\n                f_num = f_num * 10 + f[int(digit)]\n            max_num = max(max_num, f_num)\n\n    return str(max_num)\n\n\ndef"
    },
    {
        "number": 4011,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = stdin.splitlines()[1]\n    f = list(map(int, stdin.splitlines()[2].split()))\n    \n    def get_max(a: str) -> str:\n        max_val = 0\n        for i in range(len(a)):\n            for j in range(i + 1, len(a) + 1):\n                val = int(a[i:j])\n                if val > max_val:\n                    max_val = val\n        return str(max_val)\n    \n    def apply_f(a: str, f: List[int]) -> str:\n        b = \"\"\n        for x in a:\n            b += str(f[int(x)])\n        return b\n    \n    max_a = get_max(a)\n    max_b = apply_f(max_a, f)\n    max_c = get_max(max_b)\n    \n    return max_c\n"
    },
    {
        "number": 4011,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.splitlines()\n\n    n = int(input_lines[0])\n    a = input_lines[1]\n    f = [int(x) for x in input_lines[2].split()]\n\n    max_num = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            subsegment = a[i:j]\n            transformed = \"\".join(str(f[int(x) - 1]) for x in subsegment)\n            num = int(transformed)\n            max_num = max(max_num, num)\n\n    return str(max_num)\n\n\ndef"
    },
    {
        "number": 4011,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, f = input_processing(stdin)\n    a = [int(x) for x in a]\n    mx = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            s = a[i:j]\n            mx_s = max(s)\n            for k in range(len(s)):\n                s[k] = f[s[k]]\n            mx_s = max(s)\n            mx = max(mx, mx_s)\n    return str(mx)\n\n\ndef"
    },
    {
        "number": 4012,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    output = []\n    for test_case in stdin.split('\\n')[1:]:\n        a, b, c = map(int, test_case.split())\n        count = 0\n        while a > 1 or b > 1 or c > 1:\n            if a > 1:\n                if a % 2 == 1:\n                    a -= 1\n                else:\n                    a //= 2\n                count += 1\n            if b > 1:\n                if b % 2 == 1:\n                    b -= 1\n                else:\n                    b //= 2\n                count += 1\n            if c > 1:\n                if c % 2 == 1:\n                    c -= 1\n                else:\n                    c //= 2\n                count += 1\n        output.append(count)\n        output.append(f'{a} {b} {c}')\n\n    return '\\n'.join(map(str, output))"
    },
    {
        "number": 4012,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def find_smallest_multiple(nums: list) -> int:\n        def gcd(a: int, b: int) -> int:\n            while b:\n                a, b = b, a % b\n            return a\n\n        lcm = nums[0]\n        for i in range(1, len(nums)):\n            lcm = lcm * nums[i] // gcd(lcm, nums[i])\n        return lcm\n\n    def perform_operation(nums: list, op: str) -> list:\n        return [nums[i] + (-1 if op == '-' else 1) for i in range(len(nums))]\n\n    t = int(stdin.readline().strip())\n    cases = []\n    for i in range(t):\n        a, b, c = map(int, stdin.readline().strip().split())\n        cases.append((a, b, c))\n\n    for i, case in enumerate(cases):\n        a, b, c = case\n        min_ops = float('inf')\n        min_result = None\n        for a_prime in range(a, c + 1):\n            for b_prime in range(a_prime, c + 1, a_prime):\n                c_prime = find_smallest_multiple([b_prime, a_prime])\n                if c_prime >= c:\n                    ops = 0\n                    while c_prime > c:\n                        a_prime, b_prime, c_prime = perform_operation([a_prime, b_prime, c_prime], '-')\n                        ops += 1\n                    if ops < min_ops:\n                        min_ops = ops\n                        min_result = (a_prime, b_prime, c_prime)\n        print(min_ops)\n        print(min_result[0], min_result[1], min_result[2])\n"
    },
    {
        "number": 4012,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    output = []\n    \n    for _ in range(t):\n        a, b, c = map(int, stdin.readline().split())\n        \n        min_ops = float('inf')\n        res = -1\n        \n        for i in range(1, b + 1):\n            num_ops = abs(i - b)\n            temp_a, temp_b, temp_c = a, i, c\n            \n            while not (temp_b % temp_a == 0 and temp_c % temp_b == 0):\n                if temp_b % temp_a == 0 and temp_c % temp_b != 0:\n                    temp_c += temp_b\n                else:\n                    temp_b += 1\n                \n                num_ops += abs(temp_b - i)\n            \n            if num_ops < min_ops:\n                min_ops = num_ops\n                res = temp_a, temp_b, temp_c\n        \n        output.append(min_ops)\n        output.append(f\"{res[0]} {res[1]} {res[2]}\")\n        \n    return \"\\n\".join(map(str, output))"
    },
    {
        "number": 4012,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def perform_operations(a, b, c):\n        operations = 0\n        while a <= 1 or b <= 1 or c <= 1:\n            if a <= 1:\n                a += 1\n                operations += 1\n            if b <= 1:\n                b += 1\n                operations += 1\n            if c <= 1:\n                c += 1\n                operations += 1\n        while b % a != 0:\n            b -= 1\n            operations += 1\n        while c % b != 0:\n            c -= 1\n            operations += 1\n        return operations, a, b, c\n    \n    t = int(stdin.splitlines()[0])\n    output = []\n    for i in range(1, t+1):\n        a, b, c = map(int, stdin.splitlines()[i].split())\n        operations, a, b, c = perform_operations(a, b, c)\n        output.append(f\"{operations}\\n{a} {b} {c}\")\n    \n    return \"\\n\".join(output)"
    },
    {
        "number": 4012,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def helper(a, b, c):\n        if b % a == 0 and c % b == 0:\n            return 0, a, b, c\n        min_op = float('inf')\n        best_a = best_b = best_c = None\n        for x in range(1, a + 1):\n            for y in range(1, b + 1):\n                for z in range(1, c + 1):\n                    if (x % a == 0 and y % b == 0 and z % c == 0) or (y % b == 0 and z % c == 0 and x % a == 0) or (z % c == 0 and x % a == 0 and y % b == 0):\n                        continue\n                    count = helper(x, y, z)[0] + 1\n                    if count < min_op:\n                        min_op = count\n                        best_a, best_b, best_c = x, y, z\n        return min_op, best_a, best_b, best_c\n\n    input_data = stdin.split('\\n')\n    t = int(input_data[0])\n    output = []\n    for i in range(1, len(input_data), 3):\n        a, b, c = map(int, input_data[i + 1].split())\n        min_op, a, b, c = helper(a, b, c)\n        output.append(f'{min_op}\\n{a} {b} {c}\\n')\n    return ''.join(output)\n"
    },
    {
        "number": 4012,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_lst = stdin.split('\\n')\n    t = int(input_lst[0])\n    output = []\n\n    for i in range(1, t*3+1, 3):\n        a, b, c = map(int, input_lst[i].split())\n        operations = []\n        while b % a != 0:\n            b += 1 if b < c else -1\n            operations.append('+')\n        while c % b != 0:\n            c += 1 if c < b else -1\n            operations.append('+')\n        output.append(str(len(operations)))\n        output.append(f'{a} {b} {c}')\n\n    return '\\n'.join(output)\n"
    },
    {
        "number": 4012,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    input_data = stdin.split('\\n')[1:]\n    output = []\n\n    for i in range(t):\n        a, b, c = map(int, input_data[i].split())\n        res = 0\n        count = 0\n\n        while a > 1 or b > c:\n            if a == 1:\n                res += b // c\n                b = b // c * c\n            elif b % a == 0:\n                b = b // a\n                res += 1\n            else:\n                if b % 2 == 0:\n                    b = b // 2\n                    res += 1\n                else:\n                    b += 1\n                    res += 1\n\n            if b == 1:\n                res += c // b\n                c = c // b * b\n            elif c % b == 0:\n                c = c // b\n                res += 1\n            else:\n                if c % 2 == 0:\n                    c = c // 2\n                    res += 1\n                else:\n                    c += 1\n                    res += 1\n\n            count += 1\n            if count > 1000:\n                break\n\n        output.append(f\"{res}\\n{a} {b} {c}\")\n\n    return \"\\n\".join(output)"
    },
    {
        "number": 4012,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.readline().strip())\n    output = []\n    for _ in range(test_cases):\n        a, b, c = map(int, stdin.readline().strip().split())\n        res = 0\n        A, B, C = a, b, c\n        while not (B % A == 0 and C % B == 0):\n            if B % A == 0 and C % B != 0:\n                C -= B\n            elif B % A != 0 and C % B == 0:\n                B -= A\n            elif B % A != 0 and C % B != 0:\n                if A == B and A == C:\n                    A -= 1\n                elif A == B:\n                    A -= 1\n                elif A == C:\n                    A -= 1\n                else:\n                    A -= 1\n                    B -= 1\n                    C -= 1\n            res += 1\n        output.append(f\"{res}\\n{A} {B} {C}\")\n    return '\\n'.join(output)\n"
    },
    {
        "number": 4012,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    t = int(input_list.pop(0))\n    output = []\n\n    for _ in range(t):\n        a, b, c = map(int, input_list.pop(0).split())\n        min_operations = float(\"inf\")\n\n        for i in range(a, c + 1):\n            if c % i == 0:\n                j = c // i\n                if j % b == 0:\n                    min_operations = min(min_operations, abs(a - i) + abs(b - j))\n\n        output.append(min_operations)\n        output.append(f\"{a} {b} {c}\")\n\n    return \"\\n\".join(map(str, output))\n"
    },
    {
        "number": 4012,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def count_ops(a, b, c):\n        min_ops = float('inf')\n        for i in range(a, c + 1):\n            if b % i == 0:\n                ops = abs(a - i) + abs(b - i) + abs(c - i)\n                min_ops = min(min_ops, ops)\n        return min_ops\n\n    t = int(stdin.splitlines()[0])\n    cases = [tuple(map(int, case.split())) for case in stdin.splitlines()[1:]]\n\n    for case in cases:\n        a, b, c = case\n        ops = count_ops(a, b, c)\n        print(ops)\n        if ops == float('inf'):\n            print(\"Not possible\")\n        else:\n            print(1, 1, c)"
    },
    {
        "number": 4013,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    n = int(input_list[0])\n    a = list(map(int, input_list[1].split()))\n    \n    if n == 2:\n        return str(max(a[0], a[1]))\n    \n    min_element = min(a)\n    max_element = max(a)\n    \n    if min_element == max_element:\n        return str(max_element - min_element)\n    \n    min_index = a.index(min_element)\n    max_index = a.index(max_element)\n    \n    if min_index == 0:\n        return str(max_element - min_element)\n    \n    if max_index == n - 1:\n        return str(max_element - min_element)\n    \n    return str(max(max_element - min_element, min(a[min_index - 1], a[min_index + 1]) - min_element)) "
    },
    {
        "number": 4013,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n    \n    instability = max(a) - min(a)\n    if n == 2:\n        return \"0\" if instability == 0 else str(instability)\n    \n    min_instability = instability\n    for i in range(n):\n        a.pop(i)\n        min_instability = min(min_instability, max(a) - min(a))\n        a.insert(i, a[i])\n    \n    return str(min_instability)"
    },
    {
        "number": 4013,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    n = int(input_list[0])\n    a = list(map(int, input_list[1].split()))\n    max_a = max(a)\n    min_a = min(a)\n    instability = max_a - min_a\n    \n    if n == 2:\n        return str(max(0, instability))\n\n    min_instability = instability\n    for i in range(n):\n        min_instability = min(min_instability, max_a - min_a + instability - a[i])\n        max_a = max(max_a, a[i])\n        min_a = min(min_a, a[i])\n\n    return str(min_instability)"
    },
    {
        "number": 4013,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    min_val = a[0]\n    max_val = a[0]\n\n    for i in range(1, n):\n        if a[i] < min_val:\n            min_val = a[i]\n        elif a[i] > max_val:\n            max_val = a[i]\n\n    instability = max_val - min_val\n\n    for i in range(n):\n        if a[i] == min_val or a[i] == max_val:\n            a.pop(i)\n            break\n\n    min_instability = instability - (max(a) - min(a))\n\n    return str(min_instability)\n"
    },
    {
        "number": 4013,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    min_val = a[0]\n    max_val = a[0]\n    \n    for i in range(1, n):\n        if a[i] < min_val:\n            min_val = a[i]\n        elif a[i] > max_val:\n            max_val = a[i]\n    \n    instability = max_val - min_val\n    \n    return instability"
    },
    {
        "number": 4013,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    min_a = float('inf')\n    max_a = float('-inf')\n\n    for num in a:\n        min_a = min(min_a, num)\n        max_a = max(max_a, num)\n\n    return max_a - min_a\n\ndef"
    },
    {
        "number": 4013,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    \n    if n == 2:\n        if a[0] == a[1]:\n            return 0\n        else:\n            return a[0] - a[1]\n    \n    min_val = min(a)\n    max_val = max(a)\n    max_instability = max_val - min_val\n    \n    a.remove(max_val)\n    min_val = min(a)\n    max_val = max(a)\n    min_instability = max_val - min_val\n    \n    if min_instability > max_instability:\n        return min_instability\n    else:\n        return max_instability\n\ndef"
    },
    {
        "number": 4013,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    if n == 2:\n        return str(max(a[0], a[1]))\n\n    min_element = min(a)\n    max_element = max(a)\n    max_minus_min = max_element - min_element\n\n    instability = max_minus_min\n\n    a.remove(min_element)\n\n    min_element_new = min(a)\n    max_element_new = max(a)\n\n    instability_new = max_element_new - min_element_new\n\n    if instability_new < instability:\n        return str(instability_new)\n    else:\n        return str(instability)"
    },
    {
        "number": 4013,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    min_instability = float('inf')\n    for i in range(n):\n        min_instability = min(min_instability, max(a) - min(a[i] for j in range(n) if j != i) - 1)\n\n    return str(min_instability)\n\n\ninput_case = \"\"\"4\n1 3 3 7\n\"\"\"\n\nprint(solution(input_case))  # Output: 2\n\n\ninput_case = \"\"\"2\n1 100000\n\"\"\"\n\nprint(solution(input_case))  # Output: 0 "
    },
    {
        "number": 4013,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    min_instability = float('inf')\n    for i in range(n):\n        instability = max(a) - min(a)\n        a.remove(a[i])\n        instability -= a[0] - a[1]\n        min_instability = min(min_instability, instability)\n        a.insert(i, a[i])\n\n    return str(min_instability)\n\n\ndef"
    },
    {
        "number": 4014,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def schedule(n: int, m: int, exams: list) -> str:\n        sched = [0] * n\n        for exam in exams:\n            s, d, c = exam\n            for i in range(s - 1, d - c - 1):\n                sched[i] = m + 1\n        return sched\n\n    def is_valid(n: int, m: int, exams: list) -> bool:\n        days = set(range(1, n + 1))\n        for exam in exams:\n            s, d, c = exam\n            if s - 1 < 0 or d > n + 1 or c < 1 or s - 1 >= d - c - 1 or s - 1 < d - c - c:\n                return False\n            if set(range(s, d - c)) & days:\n                days -= set(range(s, d - c))\n            else:\n                return False\n        return len(days) == 0\n\n    n, m = map(int, stdin.split()[:2])\n    exams = [list(map(int, stdin.split()[i:i + 3])) for i in range(2, 2 + m * 3, 3)]\n\n    if not is_valid(n, m, exams):\n        return -1\n\n    return schedule(n, m, exams)\n"
    },
    {
        "number": 4014,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    exams = [list(map(int, stdin.split()[i*3:(i+1)*3])) for i in range(m)]\n    schedule = [0]*n\n\n    def is_valid(day: int, exam_num: int) -> bool:\n        s, d, c = exams[exam_num]\n        return s <= day < d\n\n    def pass_exam(day: int, exam_num: int) -> None:\n        schedule[day-1] = exam_num + 1\n\n    def prepare(day: int, exam_num: int) -> None:\n        if schedule[day-1] == 0:\n            schedule[day-1] = exam_num + 1\n\n    for day in range(1, n+1):\n        for exam_num in range(m):\n            if is_valid(day, exam_num):\n                if day == exams[exam_num][1] - 1:\n                    pass_exam(day, exam_num)\n                elif day == exams[exam_num][0]:\n                    prepare(day, exam_num)\n\n    if 0 in schedule:\n        return -1\n    else:\n        return ' '.join(map(str, schedule))"
    },
    {
        "number": 4014,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    s = list(map(int, stdin.split()[2:]))\n    s = [s[i:i+3] for i in range(0, len(s), 3)]\n\n    # Calculate the total number of days needed to prepare for each exam\n    days_needed = [sum(c_i for _, _, c_i in s[:i+1]) for i in range(m)]\n\n    # Check if it's possible to prepare and pass all exams\n    if sum(days_needed) > n:\n        return -1\n\n    # Calculate the schedule\n    schedule = []\n    for j in range(1, n+1):\n        # Check if the day is a day of some exam\n        if any(s_i < j <= d_i for s_i, d_i, _ in s):\n            schedule.append(m + 1)\n        else:\n            schedule.append(0)\n            for i in range(m):\n                if s[i][0] < j <= s[i][1]:\n                    schedule[-1] = i + 1\n                    break\n\n    return ' '.join(map(str, schedule))\n"
    },
    {
        "number": 4014,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    s_i, d_i, c_i = [], [], []\n    for _ in range(m):\n        s_i.append(int(stdin.split()[1]))\n        d_i.append(int(stdin.split()[2]))\n        c_i.append(int(stdin.split()[3]))\n\n    days = [0] * (n + 1)\n    schedule = []\n    for i in range(m):\n        for j in range(s_i[i], d_i[i] - 1):\n            if days[j] == 0:\n                days[j] = i + 1\n                break\n    if days.count(0) == n:\n        schedule = days\n    else:\n        schedule = [-1]\n\n    return ' '.join(map(str, schedule))"
    },
    {
        "number": 4014,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    n, m = map(int, input_list[0].split())\n    exams = [list(map(int, input_list[i].split())) for i in range(1, m + 1)]\n\n    def prepare_for_exam(s, d, c):\n        for j in range(s, d - 1):\n            schedule.append(m + 1)\n            used_days[m + 1] = True\n            m += 1\n            c -= 1\n            if c == 0:\n                return True\n        return False\n\n    def pass_exam(s, d):\n        for j in range(s, d):\n            schedule.append(m + 1)\n            used_days[m + 1] = True\n            m += 1\n            if m == n:\n                return True\n        return False\n\n    def find_schedule():\n        for exam in exams:\n            s, d, c = exam\n            if s < d and c > 0:\n                if not prepare_for_exam(s, d, c):\n                    return False\n            elif s < d and c == 0:\n                if not pass_exam(s, d):\n                    return False\n        return True\n\n    schedule = []\n    used_days = [False] * (n + 1)\n    if find_schedule():\n        for j in range(1, n + 1):\n            if used_days[j]:\n                schedule.append(m)\n            else:\n                schedule.append(0)\n        return \"\\n\".join(map(str, schedule))\n    else:\n        return -1\n"
    },
    {
        "number": 4014,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    input_data = stdin.split()[2:]\n    days = [0] * (n + 1)\n\n    for i in range(m):\n        s, d, c = map(int, input_data[3 * i:3 * i + 3])\n        days[s:d - c] = [i + 1] * c\n\n    if sum(days) < m:\n        return -1\n\n    for day in range(1, n + 1):\n        if days[day] == 0:\n            days[day] = 0\n        elif days[day] == days[day - 1]:\n            days[day] = days[day - 1]\n        else:\n            days[day] = days[day - 1] + 1\n\n    return \" \".join(map(str, days))\n\n\ndef"
    },
    {
        "number": 4014,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n, m = map(int, input_list[0].split())\n    exams = [tuple(map(int, input_list[i+1].split())) for i in range(m)]\n    max_days = max(exams, key=lambda x: x[1])[1]\n    schedule = [0] * max_days\n\n    for exam in exams:\n        for day in range(exam[0], exam[1]-1):\n            if schedule[day] == 0:\n                schedule[day] = m + 1\n            else:\n                schedule[day] = 0\n\n    if sum(schedule) != n:\n        return -1\n\n    for exam in exams:\n        for day in range(exam[0], exam[1]-1):\n            if schedule[day] == m + 1:\n                schedule[day] = exam[2]\n                break\n\n    return ' '.join(map(str, schedule))\n"
    },
    {
        "number": 4014,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    exams = [tuple(map(int, stdin.split()[i:i+3])) for i in range(2, 2*(m+1), 3)]\n    \n    if n < m:\n        return -1\n    \n    schedule = [0] * n\n    \n    for exam in exams:\n        s, d, c = exam\n        \n        if s >= d or c > n:\n            return -1\n        \n        for i in range(s, d-1):\n            if schedule[i] == 0:\n                schedule[i] = c\n                break\n        else:\n            return -1\n    \n    for i in range(len(schedule)):\n        if schedule[i] == m + 1:\n            schedule[i] = 0\n            m -= 1\n    \n    if m > 0:\n        return -1\n    \n    return \" \".join(map(str, schedule))\n"
    },
    {
        "number": 4014,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    exams = []\n    \n    for _ in range(m):\n        s, d, c = map(int, input().split())\n        exams.append((s, d, c))\n        \n    # Check if it is possible to prepare and pass all exams\n    days = [0] * (n + 1)\n    for exam in exams:\n        s, d, c = exam\n        if s > d or s > n or d > n or c > n:\n            return -1\n        if s > 1 and days[s - 1] == 1:\n            return -1\n        if days[s] == 1 or days[d] == 1 or days[s - 1] == 1:\n            return -1\n        for i in range(s, d):\n            if days[i] == 2:\n                return -1\n        days[s:d] = [1] * (d - s)\n        days[d] = 2\n        \n    # Find the schedule\n    schedule = []\n    for i in range(1, n + 1):\n        if days[i] == 1:\n            schedule.append(m + 1)\n        elif days[i] == 2:\n            schedule.append(0)\n        else:\n            for exam in exams:\n                if exam[0] <= i <= exam[1] and days[i] == exam[2]:\n                    schedule.append(exams.index(exam) + 1)\n                    break\n    \n    return ' '.join(map(str, schedule))"
    },
    {
        "number": 4014,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.splitlines()\n    n, m = map(int, input_data[0].split())\n    exams = [tuple(map(int, input_data[i].split())) for i in range(1, m + 1)]\n\n    def is_valid_schedule(schedule: list) -> bool:\n        total_days = 0\n        for i in range(1, m + 1):\n            days_to_prepare = exams[i - 1][2]\n            if schedule[exams[i - 1][1] - 1] != (m + 1):\n                return False\n            if days_to_prepare != 0:\n                if total_days + days_to_prepare > n:\n                    return False\n                total_days += days_to_prepare\n        return True\n\n    def generate_schedule(schedule: list) -> list:\n        result = [0] * n\n        for i in range(1, m + 1):\n            if schedule[i - 1] != 0:\n                days_to_prepare = exams[i - 1][2]\n                if days_to_prepare == 1:\n                    result[exams[i - 1][1] - 1] = i\n                else:\n                    days = list(range(exams[i - 1][0], exams[i - 1][1]))\n                    for j in days:\n                        if result[j - 1] == 0:\n                            result[j - 1] = i\n                        else:\n                            break\n                if all(result[exams[i - 1][0] - 1:exams[i - 1][1] - 1]):\n                    return False\n        return result\n\n    def schedule_to_string(schedule: list) -> str:\n        result = []\n        for i in range(1, n + 1):\n            if schedule[i - 1] == (m + 1):\n                result.append(str(m + 1))\n            elif schedule[i - 1] == 0:\n                result.append(str(0))\n            else:\n                result.append(str(schedule[i - 1]))\n        return ' '.join(result)\n\n    for i in range(n):\n        schedule = [0] * n\n        for j in range(1, m + 1):\n            if exams[j - 1][0] <= i + 1 <= exams[j - 1][1] - 1:\n                schedule[i] = (m + 1)\n        if is_valid_schedule(schedule):\n            schedule = generate_schedule(schedule)\n            if schedule:\n                return schedule_to_string(schedule)\n    return -1\n\ninput_data = \"\"\"5 2\n1 3 1\n1 5 1\n\n3 2\n1 3 1\n1 2 1\n\n10 3\n4 7 2\n1 10 3\n8 9 1\"\"\"\n\nprint(solution(input_data)) "
    },
    {
        "number": 4015,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m:\n        return 0\n    elif n > m:\n        n, m = m, n\n    moves = 0\n    while n != m:\n        if n % 2 == 0 and m % 2 == 0:\n            n //= 2\n            m //= 2\n            moves += 1\n        elif n % 3 == 0 and m % 3 == 0:\n            n //= 3\n            m //= 3\n            moves += 1\n        else:\n            return -1\n    return moves\n\n\ndef"
    },
    {
        "number": 4015,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n > m:\n        return -1\n    moves = 0\n    while n != m:\n        n *= 2\n        moves += 1\n        if n > m:\n            n //= 3\n            moves += 1\n            while n > m:\n                n //= 2\n                moves += 1\n            if n == m:\n                moves -= 1\n            else:\n                return -1\n    return moves"
    },
    {
        "number": 4015,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n\n    # Find the gcd of n and m\n    gcd = find_gcd(n, m)\n\n    # If gcd is 1, then m can be expressed as a power of 2\n    if gcd == 1:\n        # Calculate the number of moves needed to transform n to m\n        moves = int(log(m, 2)) - int(log(n, 2))\n\n        # Check if moves is positive or not\n        if moves > 0:\n            return str(moves)\n        else:\n            return \"-1\"\n    else:\n        return \"-1\"\n\n\ndef"
    },
    {
        "number": 4015,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split()\n    n = int(input_data[0])\n    m = int(input_data[1])\n\n    if n > m:\n        return -1\n\n    if m % 2 == 0 and n % 2 == 0:\n        return (m // 2 - n // 2)\n\n    if m % 3 == 0 and n % 3 == 0:\n        return (m // 3 - n // 3)\n\n    return -1\n"
    },
    {
        "number": 4015,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    moves = 0\n\n    while n != m:\n        if n < m:\n            n *= 2\n        else:\n            if m % 2 == 0:\n                m //= 2\n            else:\n                return -1\n        moves += 1\n\n    return moves\n\n\ndef"
    },
    {
        "number": 4015,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n > m:\n        return -1\n    moves = 0\n    while n != m:\n        n *= 2\n        moves += 1\n        if n > m:\n            n //= 2\n            moves -= 1\n            n *= 3\n            moves += 1\n    return moves\n\nn, m = map(int, input().split())\nprint(solution(str(n) + \" \" + str(m))) "
    },
    {
        "number": 4015,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if m % n == 0:\n        return m // n\n    else:\n        return -1\n"
    },
    {
        "number": 4015,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m:\n        return 0\n    if n > m:\n        n, m = m, n\n    moves = 0\n    while n != m:\n        if n * 2 == m:\n            moves += 1\n            n *= 2\n        elif n * 3 == m:\n            moves += 1\n            n *= 3\n        else:\n            return -1\n    return moves\n\n\ndef"
    },
    {
        "number": 4015,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    n = int(input_list[0])\n    m = int(input_list[1])\n\n    if n > m:\n        return -1\n\n    moves = 0\n    while n < m:\n        if n % 3 == 0:\n            n //= 3\n        else:\n            n *= 2\n        moves += 1\n\n    if n == m:\n        return moves\n    else:\n        return -1\n\n\nstdin = \"120 51840\"\nresult = solution(stdin)\nprint(result) "
    },
    {
        "number": 4015,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    n, m = int(input_list[0]), int(input_list[1])\n\n    if n == m:\n        return 0\n\n    # The number of moves required to transform n to m will be at least log_2(m/n)\n    # However, we need to check if there is a way to transform n to m with this number of moves\n\n    num_moves = int(log2(m / n))\n\n    for i in range(num_moves):\n        if 2 ** i * n >= m:\n            return num_moves - i\n\n    # If no solution is found, return -1\n    return -1\n"
    },
    {
        "number": 4016,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    t = stdin.split()[2]\n    s = t * (k // len(t) + 1)[:k]\n    return s\n\nt = \"aba\"\nk = 4\nprint(solution(f\"{len(t)} {k}\\n{t}\")) # Output: ababababa\n\nt = \"cat\"\nk = 2\nprint(solution(f\"{len(t)} {k}\\n{t}\")) # Output: catcat "
    },
    {
        "number": 4016,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = input()\n\n    return (t * k)[:n * k]\n"
    },
    {
        "number": 4016,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.splitlines()[0].split())\n    t = stdin.splitlines()[1]\n    s = n * t\n    return s\n"
    },
    {
        "number": 4016,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    t = stdin.split()[2]\n    s = t * (k // len(t) + 1)\n    return s[:k * len(t)]\n"
    },
    {
        "number": 4016,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    t = stdin.split()[2]\n\n    result = []\n    count = 0\n    i = 0\n    while count < k:\n        result.append(t[i])\n        i = (i + 1) % n\n        count += 1\n\n    return ''.join(result)\n"
    },
    {
        "number": 4016,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    t = stdin.split()[2]\n\n    s = t * (k // len(t) + 1)[:k]\n    return s\n\n\ninput_stdin = \"3 4\\naba\\n3 2\\ncat\"\noutput_stdout = solution(input_stdin)\nprint(output_stdout)\n"
    },
    {
        "number": 4016,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    t = stdin.split()[2]\n    t_len = len(t)\n    s = t * (k // t_len) + t[:k % t_len]\n    return s\n\nn = 3\nk = 4\nt = \"aba\"\nprint(solution(f\"{n} {k}\\n{t}\"))\n\nn = 3\nk = 2\nt = \"cat\"\nprint(solution(f\"{n} {k}\\n{t}\")) "
    },
    {
        "number": 4016,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    n, k = map(int, input_list[0].split())\n    t = input_list[1]\n    t_length = len(t)\n    s = \"\"\n\n    # If k is equal to 1, then we can just append t to s\n    if k == 1:\n        s = t\n    # If k is equal to 2, then we can append t twice to s\n    elif k == 2:\n        s = t * 2\n    else:\n        # Calculate the minimum length of s\n        min_length = (k * n) + (k - 1)\n\n        # Calculate the number of occurrences of t in a string of length n\n        occurrences = n // t_length\n\n        # Calculate the number of occurrences of t in a string of length min_length\n        min_occurrences = min_length // t_length\n\n        # If the number of occurrences of t in a string of length n is less than k, then we need to add occurrences to s\n        if occurrences < k:\n            occurrences_diff = k - occurrences\n            s = t * occurrences + t * occurrences_diff\n        else:\n            s = t * min_occurrences\n\n        # If the number of occurrences of t in a string of length min_length is less than k, then we need to append t to s\n        if min_occurrences < k:\n            append_diff = k - min_occurrences\n            s += t * append_diff\n\n    return s\n"
    },
    {
        "number": 4016,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = input()\n    \n    s = t * ((k + n - 1) // n)\n    return s"
    },
    {
        "number": 4016,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    t = stdin.split()[2]\n    result = \"\"\n    \n    while k > 0:\n        result += t\n        k -= 1\n    \n    return result\n"
    },
    {
        "number": 4017,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    # Initialize a list to store the indices of the nice elements\n    nice_indices = []\n\n    # Iterate through the array\n    for i in range(n):\n        # Copy the array without the current element\n        temp_array = a.copy()\n        temp_array.pop(i)\n\n        # Check if the sum of the remaining elements is equal to the current element\n        if sum(temp_array) == a[i]:\n            nice_indices.append(i)\n\n    # Check if there are any nice indices\n    if len(nice_indices) == 0:\n        return \"0\\n\"\n\n    # Print the number of nice indices\n    result = f\"{len(nice_indices)}\\n\"\n\n    # Print the nice indices\n    for index in nice_indices:\n        result += f\"{index} \"\n\n    return result\n"
    },
    {
        "number": 4017,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n    nice_indices = []\n    for i in range(n):\n        temp = a.copy()\n        temp.pop(i)\n        if sum(temp) == a[i]:\n            nice_indices.append(i)\n    k = len(nice_indices)\n    if k > 0:\n        print(k)\n        print(\" \".join(map(str, nice_indices)))\n    else:\n        print(0)\n"
    },
    {
        "number": 4017,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    n = int(input_list[0])\n    a = list(map(int, input_list[1].split()))\n\n    def is_good(arr):\n        return any(sum(arr) - x == x for x in arr)\n\n    nice_indices = []\n    for i in range(n):\n        if is_good(a[:i] + a[i+1:]):\n            nice_indices.append(i)\n\n    result = len(nice_indices)\n    if result == 0:\n        return \"0\\n\"\n\n    return f\"{result}\\n{' '.join(map(str, nice_indices))}\\n\"\n\n\ndef"
    },
    {
        "number": 4017,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n = int(input_list[0])\n    a = list(map(int, input_list[1].split()))\n\n    nice_indices = []\n    for i in range(n):\n        if sum(a) - a[i] == a[i]:\n            nice_indices.append(i)\n\n    print(len(nice_indices))\n    if nice_indices:\n        print(' '.join(map(str, nice_indices)))\n"
    },
    {
        "number": 4017,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_list = list(map(int, stdin.split()))\n    n = input_list.pop(0)\n    input_list.sort()\n    result = []\n\n    def is_good(arr):\n        sum_arr = sum(arr)\n        if sum_arr % 2 == 0:\n            return any(arr[i] == sum_arr // 2 for i in range(len(arr)))\n        else:\n            return any(arr[i] == (sum_arr + 1) // 2 for i in range(len(arr)))\n\n    for i in range(len(input_list)):\n        arr = input_list[:i] + input_list[i+1:]\n        if is_good(arr):\n            result.append(i)\n\n    print(len(result))\n    if result:\n        print(' '.join(map(str, result)))\n"
    },
    {
        "number": 4017,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_good(arr: list) -> bool:\n        return any(sum(arr) - arr[i] == arr[i] for i in range(len(arr)))\n\n    n = int(stdin.splitlines()[0])\n    arr = list(map(int, stdin.splitlines()[1].split()))\n\n    nice_indices = [i for i in range(n) if is_good(arr[:i] + arr[i+1:])]\n    k = len(nice_indices)\n\n    output = f\"{k}\\n\"\n    if k > 0:\n        output += \" \".join(map(str, nice_indices))\n\n    return output\n\n\ninput_str = \"\"\"5\n2 5 1 2 2\n4\n8 3 5 2\n5\n2 1 2 4 3\n\"\"\"\n\noutput_str = solution(input_str)\nprint(output_str) "
    },
    {
        "number": 4017,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    n = int(input_list[0])\n    a = list(map(int, input_list[1:]))\n\n    def is_good(a):\n        total_sum = sum(a)\n        for i in range(len(a)):\n            current_sum = total_sum - a[i]\n            if current_sum == a[i]:\n                return True\n        return False\n\n    def find_nice_indices(a):\n        nice_indices = []\n        for i in range(len(a)):\n            current_sum = sum(a) - a[i]\n            if current_sum == a[i]:\n                nice_indices.append(i)\n        return nice_indices\n\n    k = len(find_nice_indices(a))\n    if k == 0:\n        return \"0\\n\"\n    else:\n        nice_indices = find_nice_indices(a)\n        return f\"{k}\\n{' '.join(map(str, nice_indices))}\\n\"\n\n\ninput_data = \"\"\"5\n2 5 1 2 2\n4\n8 3 5 2\n5\n2 1 2 4 3\"\"\"\n\noutput_data = \"\"\"3\n4 1 5\n2\n1 4\n0\"\"\"\n\n\ninput_data_lines = input_data.split('\\n')\nresult = \"\"\nfor line in input_data_lines:\n    if line.strip():\n        result += solution(line)\n\nprint(result == output_data) "
    },
    {
        "number": 4017,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def is_good(arr):\n        s = sum(arr)\n        return any(s - x == x for x in arr)\n\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    nice_indices = [i for i in range(n) if is_good(a[:i] + a[i+1:])]\n\n    print(len(nice_indices))\n    if nice_indices:\n        print(*nice_indices)\n\ninput_str = \"\"\"5\n2 5 1 2 2\n4\n8 3 5 2\n5\n2 1 2 4 3\"\"\"\n\nsolution(input_str) "
    },
    {
        "number": 4017,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_good(arr):\n        return any(sum(arr) - arr[i] == arr[i] for i in range(len(arr)))\n\n    n = int(stdin)\n    arr = list(map(int, stdin.split()[1:]))\n    nice_indices = [i for i in range(n) if is_good(arr[:i] + arr[i+1:])]\n    result = len(nice_indices)\n\n    if result > 0:\n        print(result)\n        print(\" \".join(map(str, nice_indices)))\n    else:\n        print(result)"
    },
    {
        "number": 4017,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    n = int(input_list[0])\n    a = list(map(int, input_list[1].split()))\n    nice_indices = []\n\n    for i in range(n):\n        removed_array = a[:i] + a[i+1:]\n        if sum(removed_array) == a[i]:\n            nice_indices.append(i)\n\n    if not nice_indices:\n        return \"0\"\n\n    print(len(nice_indices))\n    for index in nice_indices:\n        print(index, end=\" \")\n\n\ninput_str = \"\"\"5\n2 5 1 2 2\"\"\"\n\nsolution(input_str) "
    },
    {
        "number": 4018,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.splitlines()[0].split())\n    s = stdin.splitlines()[1]\n\n    if k > 4**n:\n        return -1\n\n    def generate_subsequences(s: str) -> set:\n        subsequences = set()\n        for i in range(len(s)):\n            for j in range(i, len(s)):\n                subsequences.add(s[i:j+1])\n        return subsequences\n\n    subsequences = generate_subsequences(s)\n    if k > len(subsequences):\n        return -1\n\n    costs = [0]\n    for subsequence in subsequences:\n        costs.append(n - len(subsequence))\n\n    return max(costs)"
    },
    {
        "number": 4018,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    s = stdin.split()[2]\n    s = set(s)\n    if len(s) < k:\n        return -1\n    ans = 0\n    for subseq in itertools.combinations(s, k):\n        subseq_str = ''.join(subseq)\n        subseq_set = set(subseq_str)\n        if len(subseq_set) == len(subseq_str) and len(subseq_set) == k:\n            ans = max(ans, len(subseq_str))\n    return ans if ans > 0 else -1"
    },
    {
        "number": 4018,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    s = stdin.split()[2]\n    s_set = set()\n    \n    for i in range(1, len(s) + 1):\n        for j in range(len(s) + 1 - i):\n            subseq = s[j:j+i]\n            if len(set(subseq)) == len(subseq) and len(subseq) <= k and subseq not in s_set:\n                s_set.add(subseq)\n                if len(s_set) == k:\n                    return sum(len(x) for x in s_set)\n                \n    return -1\n"
    },
    {
        "number": 4018,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.splitlines()\n    n, k = map(int, input_lines[0].split())\n    s = input_lines[1]\n\n    if k > (2 ** n) / 2:\n        return -1\n\n    dp = [float('inf')] * (k + 1)\n    dp[0] = 0\n\n    for i in range(n):\n        for j in range(1, k + 1):\n            if s[i] in \"aeiou\":\n                dp[j] = min(dp[j], dp[j - 1] + 2)\n            else:\n                dp[j] = min(dp[j], dp[j - 1] + 1)\n\n    return dp[k] if dp[k] != float('inf') else -1\n\n\nstdin = '''4 5\nasdf'''\nprint(solution(stdin))\n\nstdin = '''5 6\naaaaa'''\nprint(solution(stdin))\n\nstdin = '''5 7\naaaaa'''\nprint(solution(stdin))\n\nstdin = '''10 100\najihiushda'''\nprint(solution(stdin))"
    },
    {
        "number": 4018,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin.split('\\n')\n    n, k = map(int, input_str[0].split())\n    s = input_str[1]\n\n    if k > n:\n        return -1\n\n    subsequences = []\n    for length in range(1, len(s) + 1):\n        for i in range(len(s) - length + 1):\n            subsequences.append(s[i:i+length])\n\n    subsequences.sort(key=len)\n\n    total_cost = 0\n    for subseq in subsequences:\n        if len(subseq) == 1:\n            break\n        total_cost += n - len(subseq)\n\n    return total_cost\n"
    },
    {
        "number": 4018,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n, k = map(int, input_list[0].split())\n    s = input_list[1]\n\n    substrings = []\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substrings.append(s[i:j+1])\n\n    substrings = list(set(substrings))\n    substrings = [x for x in substrings if len(x) > 1]\n    substrings.sort(key=len)\n\n    if k > len(substrings):\n        return -1\n\n    total_cost = 0\n    for i in range(k):\n        total_cost += n - len(substrings[i])\n\n    return total_cost"
    },
    {
        "number": 4018,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    s = input()\n\n    if k > 10**12:\n        return -1\n\n    subs = []\n    for i in range(n):\n        for j in range(i+1, n+1):\n            subs.append(s[i:j])\n\n    subs.sort(key=len)\n\n    dp = [0] * (k + 1)\n    dp[0] = 0\n\n    for t in subs:\n        if len(t) > k:\n            continue\n        for i in range(k, 0, -1):\n            if len(dp) < i + len(t):\n                break\n            if t not in dp:\n                dp[i + len(t)] = min(dp[i + len(t)], dp[i] + len(s) - len(t))\n\n    if k not in dp:\n        return -1\n\n    return dp[k]\n\n\nn, k = map(int, input().split())\ns = input()"
    },
    {
        "number": 4018,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split(\"\\n\")\n    n, k = map(int, input_data[0].split())\n    s = input_data[1]\n\n    def is_subsequence(t: str) -> bool:\n        i, j = 0, 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                j += 1\n            i += 1\n        return j == len(t)\n\n    if k == 0:\n        return 0\n\n    subsequences = set()\n    for i in range(1, len(s) + 1):\n        for j in range(len(s) - i + 1):\n            subsequences.add(s[j:j + i])\n\n    for t in subsequences:\n        if len(t) >= k:\n            if is_subsequence(t):\n                return n - len(t)\n\n    return -1\n"
    },
    {
        "number": 4018,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    s = stdin.split()[2]\n    \n    if k == 0:\n        return 0\n    if n == 0 or k == 1:\n        return -1\n    \n    subseqs = set()\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            subseqs.add(''.join(s[i:j]))\n    \n    if len(subseqs) < k:\n        return -1\n    \n    min_cost = float('inf')\n    for subseq in subseqs:\n        cost = n - len(subseq)\n        if cost < min_cost:\n            min_cost = cost\n    \n    return min_cost\n\n\ndef"
    },
    {
        "number": 4018,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    s = stdin.split()[-1]\n    s = sorted(set(s))\n    if len(s) < k:\n        return -1\n\n    cost = 0\n    for i in range(k):\n        cost += n - s.index(s[i]) - i\n\n    return cost"
    },
    {
        "number": 4019,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, D = map(int, stdin.split()[:3])\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n\n    # Check if there is any vertex with degree D\n    if max(len(set(edge) & set(edges)) for edge in edges) < D:\n        return \"NO\\n\"\n\n    # Find the spanning tree with the required degree for the first vertex\n    spanning_tree = []\n    visited = [False] * n\n    queue = [(1, 0)]  # Start from vertex 1\n    while queue:\n        vertex, degree = queue.pop(0)\n        if visited[vertex - 1]:\n            continue\n        visited[vertex - 1] = True\n        if degree == D:\n            for edge in edges:\n                if edge[0] == vertex or edge[1] == vertex:\n                    spanning_tree.append(edge)\n        else:\n            for edge in edges:\n                if edge[0] != vertex and edge[1] != vertex and not visited[edge[0] - 1] and not visited[edge[1] - 1]:\n                    if edge[0] == vertex:\n                        queue.append((edge[1], degree + 1))\n                    elif edge[1] == vertex:\n                        queue.append((edge[0], degree + 1))\n                    else:\n                        queue.append((vertex, degree + 1))\n                        queue.append((edge[0], degree + 1))\n                        queue.append((edge[1], degree + 1))\n\n    # If there is no spanning tree, return NO\n    if not spanning_tree:\n        return \"NO\\n\"\n\n    # Sort the edges of the spanning tree and return YES followed by the edges\n    spanning_tree.sort()\n    result = \"YES\\n\" + \"\\n\".join(map(str, spanning_tree))\n    return result "
    },
    {
        "number": 4019,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, D = map(int, stdin.split()[:3])\n    edges = [tuple(map(int, stdin.split()[3 * i + 3: 3 * i + 5])) for i in range(m)]\n\n    adj_list = [[] for _ in range(n)]\n    for u, v in edges:\n        adj_list[u - 1].append(v - 1)\n        adj_list[v - 1].append(u - 1)\n\n    visited = [False] * n\n    result = []\n\n    def dfs(node):\n        visited[node] = True\n        for neighbor in adj_list[node]:\n            if not visited[neighbor]:\n                result.append((node + 1, neighbor + 1))\n                dfs(neighbor)\n\n    dfs(0)\n    visited = [False] * n\n    dfs(0)\n\n    if len(result) != n - 1:\n        return \"NO\\n\"\n\n    result.sort()\n    for i in range(n - 1):\n        if result[i][0] != 1 or result[i][1] != i + 2:\n            return \"NO\\n\"\n\n    return \"YES\\n\" + \"\\n\".join(map(lambda x: \" \".join(map(str, x)), result)) + \"\\n\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def find_spanning_tree(n: int, edges: List[Tuple[int, int]]) -> Optional[List[Tuple[int, int]]]:\n        def dfs(node: int, parent: int) -> List[Tuple[int, int]]:\n            res = []\n            for neighbor in graph[node]:\n                if neighbor != parent:\n                    res.extend(dfs(neighbor, node))\n            return [(node, neighbor) for neighbor in graph[node]] + res\n\n        graph = [[] for _ in range(n)]\n        for v, u in edges:\n            graph[v].append(u)\n            graph[u].append(v)\n\n        return dfs(0, -1)\n\n    def is_valid_tree(edges: List[Tuple[int, int]], first_degree: int) -> bool:\n        degrees = [0] * n\n        for v, u in edges:\n            degrees[v] += 1\n            degrees[u] += 1\n            if degrees[v] == first_degree and degrees[u] == n - first_degree:\n                return True\n        return False\n\n    def count_edges(edges: List[Tuple[int, int]]) -> int:\n        return len(edges)\n\n    def generate_output(edges: List[Tuple[int, int]]) -> str:\n        return \"\\n\".join(f\"{v} {u}\" for v, u in edges)\n\n    n, m, first_degree = map(int, stdin.split())\n    edges = [tuple(map(int, input().split())) for _ in range(m)]\n\n    if first_degree > n:\n        return \"NO\\n\"\n\n    spanning_tree = find_spanning_tree(n, edges)\n    if spanning_tree is None:\n        return \"NO\\n\"\n\n    if not is_valid_tree(spanning_tree, first_degree):\n        return \"NO\\n\"\n\n    return \"YES\\n\" + generate_output(spanning_tree)"
    },
    {
        "number": 4019,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, D = map(int, stdin.split()[:3])\n    edges = [tuple(map(int, line.split())) for line in stdin.split()[3:]]\n    \n    # Create a graph\n    graph = [[] for _ in range(n+1)]\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    # Find a spanning tree\n    visited = [False] * (n+1)\n    visited[1] = True\n    stack = [1]\n    tree = []\n    while stack:\n        node = stack.pop()\n        for neighbor in graph[node]:\n            if not visited[neighbor]:\n                visited[neighbor] = True\n                tree.append((node, neighbor))\n                stack.append(neighbor)\n    \n    # Check if there is a spanning tree with degree D\n    if not tree:\n        return \"NO\\n\"\n    first_node_edges = len(graph[1])\n    if first_node_edges == D:\n        result = \"YES\\n\"\n        for edge in tree:\n            result += f\"{edge[0]} {edge[1]}\\n\"\n        return result\n    else:\n        return \"NO\\n\""
    },
    {
        "number": 4019,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, D = map(int, input().split())\n    edges = []\n    for _ in range(m):\n        u, v = map(int, input().split())\n        edges.append((u, v))\n\n    # Find the spanning tree with the required degree for the first vertex\n    def find_spanning_tree(edges, D):\n        visited = [False] * n\n        parent = [-1] * n\n        degree = [0] * n\n        for u, v in edges:\n            if not visited[u-1] and not visited[v-1]:\n                visited[u-1] = True\n                visited[v-1] = True\n                parent[u-1] = v-1\n                parent[v-1] = u-1\n                degree[u-1] += 1\n                degree[v-1] += 1\n        if not visited[0]:\n            return None\n        stack = [0]\n        while stack:\n            u = stack.pop()\n            for v in range(n):\n                if not visited[v] and parent[u] == v:\n                    visited[v] = True\n                    stack.append(v)\n        spanning_tree = [(u, v) for u, v in edges if visited[u-1] and visited[v-1]]\n        return spanning_tree\n\n    spanning_tree = find_spanning_tree(edges, D)\n    if spanning_tree is None:\n        return \"NO\\n\"\n    else:\n        return \"YES\\n\" + \"\\n\".join(f\"{u} {v}\" for u, v in spanning_tree) + \"\\n\" "
    },
    {
        "number": 4019,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(node: int, visited: set, parent: int) -> bool:\n        visited.add(node)\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                if dfs(neighbor, visited, node):\n                    return True\n                else:\n                    return False\n            elif neighbor != parent:\n                return False\n        return True\n\n    n, m, D = map(int, stdin.split())\n    graph = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        v, u = map(int, stdin.split())\n        graph[v].append(u)\n        graph[u].append(v)\n\n    if D == n:\n        return \"YES\"\n\n    for i in range(1, n + 1):\n        visited = set()\n        if dfs(i, visited, -1):\n            tree = []\n            for neighbor in graph[i]:\n                if neighbor not in visited:\n                    tree.append((i, neighbor))\n            print(\"YES\")\n            for edge in tree:\n                print(\" \".join(map(str, edge)))\n            return\n\n    print(\"NO\")\n"
    },
    {
        "number": 4019,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def find_spanning_tree(edges: list, root: int) -> list:\n        def dfs(node: int, visited: set, parent: int, result: list):\n            visited.add(node)\n            for neighbor in graph[node]:\n                if neighbor != parent and neighbor not in visited:\n                    dfs(neighbor, visited, node, result)\n            result.append(node)\n\n        graph = [set() for _ in range(n)]\n        for u, v in edges:\n            graph[u].add(v)\n            graph[v].add(u)\n\n        visited = set()\n        result = []\n        dfs(root, visited, None, result)\n        result.reverse()\n        return result\n\n    def is_valid_spanning_tree(edges: list, root: int, degree: int) -> bool:\n        vertices = find_spanning_tree(edges, root)\n        return len(vertices) == n and vertices[0] == 1 and sum(1 for u, v in zip(vertices, vertices[1:]) if u == v) == degree - 1\n\n    n, m, degree = map(int, stdin.split()[:3])\n    edges = [tuple(map(int, stdin.split()[3 * i: 3 * i + 2])) for i in range(m)]\n\n    if degree >= n:\n        return \"NO\"\n\n    for root in range(1, n + 1):\n        if is_valid_spanning_tree(edges, root, degree):\n            return \"YES\\n\" + \"\\n\".join(f\"{u} {v}\" for u, v in find_spanning_tree(edges, root) if u != 1)\n\n    return \"NO\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(graph, visited, parent, deg, start, target_degree):\n        visited[start] = True\n        for neighbor in graph[start]:\n            if not visited[neighbor]:\n                if parent[neighbor] == start:\n                    continue\n                if parent[neighbor] == -1:\n                    parent[neighbor] = start\n                    if deg[start] >= target_degree:\n                        continue\n                    deg[start] += 1\n                    if not dfs(graph, visited, parent, deg, neighbor, target_degree):\n                        return False\n                else:\n                    parent[neighbor] = start\n                    if not dfs(graph, visited, parent, deg, neighbor, target_degree):\n                        return False\n        return True\n\n    n, m, target_degree = map(int, stdin.split()[:3])\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    graph = [[] for _ in range(n + 1)]\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n\n    parent = [-1] * (n + 1)\n    deg = [0] * (n + 1)\n    visited = [False] * (n + 1)\n    if not dfs(graph, visited, parent, deg, 1, target_degree):\n        return \"NO\\n\"\n    else:\n        return \"YES\\n\" + '\\n'.join(map(lambda x: ' '.join(map(str, x)), edges))"
    },
    {
        "number": 4019,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, D = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        v, u = map(int, stdin.split())\n        edges.append((v, u))\n\n    def dfs(u: int, visited: set) -> int:\n        visited.add(u)\n        for v in G[u]:\n            if v not in visited:\n                dfs(v, visited)\n\n    G = [[] for _ in range(n + 1)]\n    for u, v in edges:\n        G[u].append(v)\n        G[v].append(u)\n\n    visited = set()\n    dfs(1, visited)\n    if len(visited) != n:\n        return \"NO\\n\"\n\n    degree = [0] * (n + 1)\n    for u, v in edges:\n        degree[u] += 1\n        degree[v] += 1\n\n    if degree[1] == D:\n        return \"YES\\n\" + \"\\n\".join(map(str, edges)) + \"\\n\"\n    else:\n        return \"NO\\n\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, D = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        edges.append(list(map(int, input().split())))\n\n    def dfs(graph, visited, degree, first_vertex, depth, result):\n        if depth == len(result) + 1:\n            result.append(first_vertex)\n            return True\n        for i in range(1, n + 1):\n            if i != first_vertex and not visited[i] and degree[i] < D:\n                visited[i] = True\n                if dfs(graph, visited, degree, first_vertex, depth, result):\n                    return True\n                visited[i] = False\n        return False\n\n    for i in range(1, n + 1):\n        degree = [0] * (n + 1)\n        for j in range(m):\n            if i in edges[j]:\n                degree[edges[j][0]] += 1\n                degree[edges[j][1]] += 1\n        if not dfs(edges, [False] * (n + 1), degree, i, 1, []):\n            return \"NO\\n\"\n\n    return \"YES\\n\" + \"\\n\".join([f\"{i} {edges[i-1][0]}\" for i in range(1, n+1)])\n"
    },
    {
        "number": 4020,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1, h2, m2 = map(int, stdin.split())\n\n    total_minutes = (h2 * 60) + m2 - (h1 * 60) - m1\n    mid_minutes = total_minutes // 2\n\n    h3, m3 = divmod(mid_minutes, 60)\n\n    h3 += h1\n    if m3 < 10:\n        m3 = f\"0{m3}\"\n\n    return f\"{h3}:{m3}\"\n\n\ndef"
    },
    {
        "number": 4020,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    h1, m1 = map(int, stdin[0].split(':'))\n    h2, m2 = map(int, stdin[1].split(':'))\n\n    # Calculate midpoint\n    m3 = (m1 + m2) // 2\n    h3 = h1 + (m1 + m2) // 60\n\n    # Check if midpoint crossed day boundary\n    if h3 == 24:\n        h3 = 0\n\n    # Format output\n    return f\"{h3:02d}:{m3:02d}\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    h1, m1 = map(int, input_list[0].split(':'))\n    h2, m2 = map(int, input_list[1].split(':'))\n\n    if m1 % 2 != m2 % 2:\n        print(\"Error: Contest lasts an odd number of minutes\")\n        return\n\n    if m1 == m2:\n        if h1 == h2:\n            m3 = m1 + 30\n            h3 = h1\n        else:\n            if m1 == 59:\n                m1 = 0\n                h1 += 1\n            m3 = 30\n            h3 = h1 + (m1 + m3) // 60\n    else:\n        if m1 < m2:\n            h3 = h1 + (m1 + m2) // 60\n            m3 = (m1 + m2) % 60\n        else:\n            h3 = h1 + (m1 + m2) // 60 - 1\n            m3 = (m1 + m2) % 60 + 60\n\n    return f\"{h3:02d}:{m3:02d}\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, input().split(\":\"))\n    h2, m2 = map(int, input().split(\":\"))\n\n    if m1 % 2 == m2 % 2:\n        raise ValueError(\"Contest lasts an even number of minutes\")\n\n    h_mid = (h1 + h2 + (m2 - m1)) // 2\n    m_mid = (m1 + m2 + (h2 - h1)) % 2\n\n    if h_mid > 23:\n        h_mid -= 24\n\n    if m_mid < 0:\n        m_mid += 60\n\n    return f\"{h_mid:02d}:{m_mid:02d}\"\n\n\nstdin = \"\"\"10:00\n11:00\"\"\"\n\nprint(solution(stdin))\n\nstdin = \"\"\"11:10\n11:12\"\"\"\n\nprint(solution(stdin))\n\nstdin = \"\"\"01:02\n03:02\"\"\"\n\nprint(solution(stdin)) "
    },
    {
        "number": 4020,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1, h2, m2 = map(int, stdin.split())\n    h1, m1, h2, m2 = str(h1).zfill(2), str(m1).zfill(2), str(h2).zfill(2), str(m2).zfill(2)\n    h1, m1, h2, m2 = int(h1), int(m1), int(h2), int(m2)\n\n    if m1 % 2 == m2 % 2:\n        print(\"Inconsistent input: m1 and m2 should have different parity.\")\n        return\n\n    if not (0 <= m1 < 60 and 0 <= m2 < 60):\n        print(\"Inconsistent input: 0 <= m1, m2 <= 59.\")\n        return\n\n    if not (0 <= h1 <= 23 and 0 <= h2 <= 23 and h1 != h2):\n        print(\"Inconsistent input: 0 <= h1, h2 <= 23, h1 != h2.\")\n        return\n\n    if not (m1 % 2 == 0 and m2 % 2 == 1):\n        print(\"Inconsistent input: m1 and m2 should have different parity.\")\n        return\n\n    mid_minutes = (m1 + m2) // 2\n    mid_hours = (h1 + h2) // 2\n\n    mid_minutes = str(mid_minutes).zfill(2)\n    mid_hours = str(mid_hours).zfill(2)\n\n    return mid_hours + \":\" + mid_minutes\n\n\ndef"
    },
    {
        "number": 4020,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, input().split(\":\"))\n    h2, m2 = map(int, input().split(\":\"))\n\n    if m1 % 2 == m2 % 2:\n        raise ValueError(\"The contest lasts an even number of minutes\")\n\n    if h1 == h2:\n        h3 = h1\n        m3 = m1 + (m2 - m1) // 2\n    else:\n        h3 = h1\n        m3 = m1 + (60 - m1) // 2\n        h3 += 1\n\n    m3 = m3 % 60\n\n    if m3 < 10:\n        return f\"{h3}:0{m3}\"\n    else:\n        return f\"{h3}:{m3}\""
    },
    {
        "number": 4020,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    time_format = \"%H:%M\"\n    input_times = stdin.split(\"\\n\")\n    start_time = datetime.datetime.strptime(input_times[0], time_format)\n    end_time = datetime.datetime.strptime(input_times[1], time_format)\n    mid_time = start_time + (end_time - start_time) / 2\n    return f\"{mid_time.hour:02d}:{mid_time.minute:02d}\""
    },
    {
        "number": 4020,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    h1, m1 = map(int, input_data[0].split(':'))\n    h2, m2 = map(int, input_data[1].split(':'))\n\n    total_minutes = (h2 - h1) * 60 + (m2 - m1)\n    midpoint_minutes = total_minutes / 2\n\n    h3 = int(midpoint_minutes / 60)\n    m3 = int(midpoint_minutes % 60)\n\n    return f\"{h3:02d}:{m3:02d}\""
    },
    {
        "number": 4020,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Convert input strings to datetime objects\n    start = datetime.strptime(stdin[0].strip(), \"%H:%M\")\n    end = datetime.strptime(stdin[1].strip(), \"%H:%M\")\n\n    # Calculate the midpoint of the contest\n    delta = (end - start) / 2\n    midpoint = start + delta\n\n    # Convert the midpoint to a string in the required format\n    midpoint_str = datetime.strftime(midpoint, \"%H:%M\")\n\n    return midpoint_str\n\n\nstdin = [\n    \"10:00\",\n    \"11:00\",\n]\n\nprint(solution(stdin))  # Output: \"10:30\"\n\nstdin = [\n    \"11:10\",\n    \"11:12\",\n]\n\nprint(solution(stdin))  # Output: \"11:11\"\n\nstdin = [\n    \"01:02\",\n    \"03:02\",\n]\n\nprint(solution(stdin))  # Output: \"02:02\" "
    },
    {
        "number": 4020,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    start_time = input_data[0].split(':')\n    end_time = input_data[1].split(':')\n    start_hour, start_minute = int(start_time[0]), int(start_time[1])\n    end_hour, end_minute = int(end_time[0]), int(end_time[1])\n\n    total_minutes = (end_hour - start_hour) * 60 + (end_minute - start_minute)\n    if total_minutes % 2 == 1:\n        total_minutes -= 1\n    mid_minutes = total_minutes / 2\n\n    mid_hour = int(mid_minutes / 60) + start_hour\n    mid_minute = int(mid_minutes % 60)\n\n    if mid_minute < 10:\n        mid_minute = f\"0{mid_minute}\"\n\n    return f\"{mid_hour}:{mid_minute}\""
    },
    {
        "number": 4021,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a.bit_length() - 1)\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4021,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a <= 64:\n        count = 1\n        i = 2\n        while i * i <= a:\n            while a % i == 0:\n                a //= i\n                count += 1\n            i += 1\n        if a > 1:\n            count += 1\n        return count\n    else:\n        return \"Error: a must be between 1 and 64\"\n\ndef"
    },
    {
        "number": 4021,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a == 1:\n        return \"1\"\n    elif a == 2:\n        return \"1\"\n    elif a == 3:\n        return \"2\"\n    elif a == 4:\n        return \"2\"\n    elif a == 5:\n        return \"3\"\n    elif a == 6:\n        return \"3\"\n    elif a == 7:\n        return \"4\"\n    elif a == 8:\n        return \"4\"\n    elif a == 9:\n        return \"5\"\n    elif a == 10:\n        return \"5\"\n    elif a == 11:\n        return \"6\"\n    elif a == 12:\n        return \"6\"\n    elif a == 13:\n        return \"7\"\n    elif a == 14:\n        return \"7\"\n    elif a == 15:\n        return \"8\"\n    elif a == 16:\n        return \"8\"\n    elif a == 17:\n        return \"9\"\n    elif a == 18:\n        return \"9\"\n    elif a == 19:\n        return \"10\"\n    elif a == 20:\n        return \"10\"\n    elif a == 21:\n        return \"11\"\n    elif a == 22:\n        return \"11\"\n    elif a == 23:\n        return \"12\"\n    elif a == 24:\n        return \"12\"\n    elif a == 25:\n        return \"13\"\n    elif a == 26:\n        return \"13\"\n    elif a == 27:\n        return \"14\"\n    elif a == 28:\n        return \"14\"\n    elif a == 29:\n        return \"15\"\n    elif a == 30:\n        return \"15\"\n    elif a == 31:\n        return \"16\"\n    elif a == 32:\n        return \"16\"\n    elif a == 33:\n        return \"17\"\n    elif a == 34:\n        return \"17\"\n    elif a == 35:\n        return \"18\"\n    elif a == 36:\n        return \"18\"\n    elif a == 37:\n        return \"19\"\n    elif a == 38:\n        return \"19\"\n    elif a == 39:\n        return \"20\"\n    elif a == 40:\n        return \"20\"\n    elif a == 41:\n        return \"21\"\n    elif a == 42:\n        return \"21\"\n    elif a == 43:\n        return \"22\"\n    elif a == 44:\n        return \"22\"\n    elif a == 45:\n        return \"23\"\n    elif a == 46:\n        return \"23\"\n    elif a == 47:\n        return \"24\"\n    elif a == 48:\n        return \"24\"\n    elif a == 49:\n        return \"25\"\n    elif a == 50:\n        return \"25\"\n    elif a == 51:\n        return \"26\"\n    elif a == 52:\n        return \"26\"\n    elif a == 53:\n        return \"27\"\n    elif a == 54:\n        return \"27\"\n    elif a == 55:\n        return \"28\"\n    elif a == 56:\n        return \"28\"\n    elif a == 57:\n        return \"29\"\n    elif a == 58:\n        return \"29\"\n    elif a == 59:\n        return \"30\"\n    elif a == 60:\n        return \"30\"\n    elif a == 61:\n        return \"31\"\n    elif a == 62:\n        return \"31\"\n    elif a == 63:\n        return \"32\"\n    elif a == 64:\n        return \"32\"\n\n\nstdin = input(\"Enter a number between 1 and 64"
    },
    {
        "number": 4021,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a <= 2:\n        return '1'\n    elif a <= 5:\n        return '2'\n    elif a <= 9:\n        return '3'\n    elif a <= 16:\n        return '4'\n    elif a <= 25:\n        return '5'\n    elif a <= 36:\n        return '6'\n    elif a <= 49:\n        return '7'\n    elif a <= 64:\n        return '8'\n    else:\n        return 'Invalid input'"
    },
    {
        "number": 4021,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a < 0 or a > 64:\n        return \"Invalid input\"\n    return bin(a)[2:].count('1')\n"
    },
    {
        "number": 4021,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a <= 2:\n        return \"1\"\n    elif a <= 5:\n        return \"2\"\n    elif a <= 8:\n        return \"3\"\n    elif a <= 11:\n        return \"4\"\n    elif a <= 14:\n        return \"5\"\n    elif a <= 17:\n        return \"6\"\n    elif a <= 20:\n        return \"7\"\n    elif a <= 23:\n        return \"8\"\n    elif a <= 26:\n        return \"9\"\n    elif a <= 29:\n        return \"10\"\n    elif a <= 32:\n        return \"11\"\n    elif a <= 35:\n        return \"12\"\n    elif a <= 38:\n        return \"13\"\n    elif a <= 41:\n        return \"14\"\n    elif a <= 44:\n        return \"15\"\n    elif a <= 47:\n        return \"16\"\n    elif a <= 50:\n        return \"17\"\n    elif a <= 53:\n        return \"18\"\n    elif a <= 56:\n        return \"19\"\n    elif a <= 59:\n        return \"20\"\n    elif a <= 62:\n        return \"21\"\n    else:\n        return \"22\" "
    },
    {
        "number": 4021,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a <= 64:\n        return str((a // 16) + 1)\n    else:\n        return str(6)"
    },
    {
        "number": 4021,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a <= 64:\n        return str(a >> 6 & 1)\n    else:\n        return str(a >> 6 & 1)\n\n\ndef"
    },
    {
        "number": 4021,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a <= 64:\n        return str(a // 32)\n    else:\n        return str(a // 64)\n\n\ninput_stdin = input(\"Input: \")\noutput_stdout = solution(input_stdin)\nprint(\"Output:\", output_stdout) "
    },
    {
        "number": 4021,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a <= 64 and a >= 1:\n        result = 0\n        while a > 1:\n            if a % 2 == 0:\n                a //= 2\n            else:\n                a = (a - 1) // 2\n            result += 1\n        return str(result)\n    else:\n        return \"Input not in range\" "
    },
    {
        "number": 4022,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def find_max_length(n: int, segments: List[List[int]]) -> int:\n        def calculate_intersection_length(segments: List[List[int]]) -> int:\n            if not segments:\n                return 0\n            left = min(segment[0] for segment in segments)\n            right = max(segment[1] for segment in segments)\n            return max(0, right - left)\n\n        segments.sort(key=lambda x: x[1])\n        max_length = calculate_intersection_length(segments)\n        for i in range(n - 1):\n            new_segments = segments[:i] + segments[i + 1:]\n            max_length = max(max_length, calculate_intersection_length(new_segments))\n        return max_length\n\n    def parse_input(input_data: str) -> Tuple[int, List[List[int]]]:\n        n, *data = input_data.splitlines()\n        segments = [list(map(int, line.split())) for line in data]\n        return int(n), segments\n\n    n, segments = parse_input(stdin)\n    max_length = find_max_length(n, segments)\n    return str(max_length)\n"
    },
    {
        "number": 4022,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    n = int(input_list[0])\n    segments = []\n    \n    for i in range(1, n+1):\n        l, r = map(int, input_list[i].split())\n        segments.append((l, r))\n    \n    # Sort the segments by their right endpoint\n    segments.sort(key=lambda x: x[1])\n    \n    # Remove the segment with the smallest right endpoint\n    segment_to_remove = segments.pop(0)\n    \n    # Calculate the intersection of the remaining segments\n    intersection = []\n    left = segment_to_remove[1]\n    for s in segments:\n        if s[0] >= left:\n            intersection.append(s)\n            left = max(left, s[1])\n    \n    # Calculate the length of the intersection\n    max_length = 0\n    for i in range(len(intersection) - 1):\n        for j in range(i+1, len(intersection)):\n            max_length = max(max_length, intersection[j][0] - intersection[i][1])\n    \n    return max_length\n\n\nstdin = '''4\n1 3\n2 6\n0 4\n3 3'''\nprint(solution(stdin)) "
    },
    {
        "number": 4022,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def calculate_length(segment):\n        return segment[1] - segment[0]\n\n    def remove_segment(segment_list):\n        max_intersection_length = 0\n        max_intersection = []\n\n        for i in range(len(segment_list)):\n            current_intersection = []\n            current_length = 0\n\n            for j in range(len(segment_list)):\n                if i != j:\n                    intersection = [max(segment_list[i][0], segment_list[j][0]), min(segment_list[i][1], segment_list[j][1])]\n                    if intersection[0] <= intersection[1]:\n                        current_intersection.append(intersection)\n                        current_length += calculate_length(intersection)\n\n            if current_length > max_intersection_length:\n                max_intersection_length = current_length\n                max_intersection = current_intersection\n\n        return max_intersection_length\n\n    n, *data = stdin.split('\\n')\n    n = int(n)\n    segment_list = [list(map(int, line.split())) for line in data]\n\n    max_intersection_length = remove_segment(segment_list)\n    return str(max_intersection_length)\n"
    },
    {
        "number": 4022,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def max_intersection(segments: list) -> int:\n        if len(segments) < 2:\n            return 0\n\n        def intersect(a: list, b: list) -> list:\n            x1, x2 = max(a[0], b[0]), min(a[1], b[1])\n            return [x1, x2] if x1 <= x2 else []\n\n        intersection = segments[0]\n        for segment in segments[1:]:\n            intersection = intersect(intersection, segment)\n\n        return max(intersection[1] - intersection[0], 0)\n\n    n, *segments = stdin.split('\\n')\n    n = int(n)\n    segments = [[int(x) for x in line.split()] for line in segments]\n\n    max_length = 0\n    for segment in segments:\n        remaining_segments = [s for s in segments if s != segment]\n        max_length = max(max_length, max_intersection(remaining_segments))\n\n    return str(max_length)\n\n\ninput1 = \"4\\n1 3\\n2 6\\n0 4\\n3 3\"\ninput2 = \"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\"\ninput3 = \"3\\n4 5\\n1 2\"\ninput4 = \"2\\n3 10\\n1 5\"\n\nprint(solution(input1))  # Output: \"1\"\nprint(solution(input2))  # Output: \"2\"\nprint(solution(input3))  # Output: \"0\"\nprint(solution(input4))  # Output: \"7\" "
    },
    {
        "number": 4022,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def get_intersection(segments: list) -> list:\n        intersection = []\n        for i in range(len(segments)):\n            for j in range(i + 1, len(segments)):\n                if segments[i][1] >= segments[j][0] and segments[i][0] <= segments[j][1]:\n                    intersection.append((max(segments[i][0], segments[j][0]), min(segments[i][1], segments[j][1])))\n        return intersection\n\n    def get_length(segment: tuple) -> int:\n        return segment[1] - segment[0]\n\n    n = int(stdin.splitlines()[0])\n    segments = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    max_length = 0\n\n    for i in range(n):\n        remaining_segments = segments[:i] + segments[i + 1:]\n        intersection = get_intersection(remaining_segments)\n        intersection_length = sum(get_length(segment) for segment in intersection)\n        max_length = max(max_length, intersection_length)\n\n    return str(max_length)\n"
    },
    {
        "number": 4022,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    n = int(input_list[0])\n    segments = []\n    \n    for i in range(1, n+1):\n        l, r = map(int, input_list[i].split())\n        segments.append((l, r))\n    \n    max_length = 0\n    for i in range(n):\n        segments_new = segments.copy()\n        segments_new.pop(i)\n        intersections = []\n        for j in range(len(segments_new)):\n            for k in range(j+1, len(segments_new)):\n                inter = intersection(segments_new[j], segments_new[k])\n                if inter:\n                    intersections.append(inter)\n        max_length = max(max_length, max(map(length, intersections)))\n    \n    return str(max_length)\n\ndef"
    },
    {
        "number": 4022,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    segments = [list(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    segments.sort(key=lambda x: x[0])\n    max_length = 0\n\n    for i in range(n - 1):\n        intersection = segments[i]\n        for j in range(i + 1, n):\n            if segments[j][0] < intersection[1] and segments[j][1] > intersection[0]:\n                intersection[1] = min(intersection[1], segments[j][1])\n                intersection[0] = max(intersection[0], segments[j][0])\n            elif segments[j][0] > intersection[1]:\n                break\n        length = intersection[1] - intersection[0]\n        max_length = max(max_length, length)\n\n    return str(max_length)"
    },
    {
        "number": 4022,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    segments = []\n\n    for i in range(1, n + 1):\n        l, r = map(int, stdin.splitlines()[i].split())\n        segments.append((l, r))\n\n    max_length = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            intersection = segments[i][1] - segments[j][0]\n            if intersection > max_length:\n                max_length = intersection\n\n    return str(max_length)\n\n\ndef"
    },
    {
        "number": 4022,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def intersection(segments: list) -> list:\n        if not segments:\n            return []\n\n        points = set(segments[0])\n        for i in range(1, len(segments)):\n            points = points.intersection(set(range(max(segments[i][0], points[0]), min(segments[i][1], points[-1]) + 1)))\n\n            if not points:\n                return []\n\n        return sorted(points)\n\n    n = int(stdin.split('\\n', 1)[0])\n    segments = [tuple(map(int, line.split())) for line in stdin.split('\\n', 1)[1].split('\\n')]\n\n    max_length = 0\n    for i in range(n):\n        remaining_segments = segments[:i] + segments[i + 1:]\n        current_intersection = intersection(remaining_segments)\n        max_length = max(max_length, current_intersection[-1] - current_intersection[0] + 1 if current_intersection else 0)\n\n    return str(max_length)\n\n\ninput_data = '''4\n1 3\n2 6\n0 4\n3 3'''\n\nprint(solution(input_data)) "
    },
    {
        "number": 4022,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    segments = []\n\n    for _ in range(n):\n        l, r = map(int, stdin.split())\n        segments.append((l, r))\n\n    if n == 1:\n        return 0\n\n    max_length = 0\n    for i in range(n):\n        intersection_length = 0\n        for j in range(n):\n            if i != j:\n                intersection_length = max(intersection_length, max(0, min(segments[i][1], segments[j][1]) - max(segments[i][0], segments[j][0]) + 1))\n\n        max_length = max(max_length, intersection_length)\n\n    return max_length\n\n\ndef"
    },
    {
        "number": 4023,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    # Check if the wall is already complete\n    if all(a[i] == a[i+1] for i in range(n-1)) and a[0] == a[n-1]:\n        return \"YES\"\n\n    # Check if Vova can put any bricks to make the wall complete\n    min_height = min(a)\n    max_height = max(a)\n\n    if max_height - min_height + 1 == n:\n        return \"YES\"\n\n    if n % (max_height - min_height + 1) != 0:\n        return \"NO\"\n\n    # Check if Vova can put bricks to make the wall complete\n    for i in range(min_height, max_height+1):\n        if a[0] == i and a[n-1] == i:\n            return \"YES\"\n\n        if a[0] > i and a[n-1] > i:\n            return \"YES\"\n\n    return \"NO\" "
    },
    {
        "number": 4023,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()[1:]))\n    \n    if n == 1:\n        return \"YES\"\n    \n    for i in range(1, n):\n        if a[i] == a[i-1]:\n            a[i] += 1\n            a[i-1] += 1\n    \n    max_height = max(a)\n    if all(height == max_height for height in a) and max_height > 1:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    if n == 1:\n        if a[0] > 1:\n            return \"NO\"\n        else:\n            return \"YES\"\n\n    if n == 2 and a[0] == a[1]:\n        return \"YES\"\n    elif n == 2 and a[0] + 1 == a[1]:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    if n == 1:\n        return \"YES\"\n\n    if len(set(a)) == 1 and a[0] == 1:\n        return \"YES\"\n\n    max_height = max(a)\n    max_height_index = a.index(max_height)\n    min_height = min(a)\n\n    if max_height - min_height + 1 > n - max_height_index:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\ndef"
    },
    {
        "number": 4023,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = [int(x) for x in stdin.split()[1:]]\n\n    # Check if the wall is already complete\n    if len(set(a)) == 1 and a[0] == n:\n        return \"YES\"\n\n    # Check if Vova can complete the wall using any amount of bricks (possibly zero)\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            continue\n        if a[i] + 1 == a[i - 1]:\n            a[i - 1] += 1\n            a[i] += 1\n            i -= 1\n            continue\n        if i > 0:\n            if a[i - 1] < a[i] + 1:\n                continue\n            if a[i - 1] + 1 == a[i]:\n                a[i] += 1\n                i -= 1\n                continue\n        return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    if n == 1:\n        return \"YES\"\n\n    # Check if all parts have the same height\n    if len(set(a)) == 1:\n        return \"YES\"\n\n    # Check if the wall has empty spaces inside it\n    for i in range(n - 1):\n        if a[i] != a[i + 1]:\n            if a[i] < a[i + 1]:\n                if a[i + 1] - a[i] > 1:\n                    return \"NO\"\n            else:\n                if a[i] - a[i + 1] > 1:\n                    return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    \n    # Initialize the highest brick height and the index of the highest brick\n    highest_height = a[0]\n    highest_index = 0\n    \n    # Check if the wall is complete\n    complete = True\n    for i in range(1, n):\n        if a[i] == 1 and a[i-1] == 1:\n            complete = False\n            break\n        elif a[i] == a[i-1] and a[i] < highest_height:\n            complete = False\n            break\n        elif a[i] > highest_height:\n            highest_height = a[i]\n            highest_index = i\n    \n    if complete:\n        return \"YES\"\n    \n    # Check if Vova can put bricks to complete the wall\n    for i in range(1, n):\n        if a[i] == 1 and a[i-1] == 1:\n            return \"YES\"\n        elif a[i] == a[i-1] and a[i] < highest_height:\n            return \"YES\"\n    \n    return \"NO\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    # Check if the wall is already complete\n    if len(set(a)) == 1 and a[0] == 10**9:\n        return \"YES\"\n\n    # Check if Vova can complete the wall using any amount of bricks\n    bricks_needed = 0\n    for i in range(1, n):\n        if a[i] == a[i-1]:\n            bricks_needed += 1\n\n    # If Vova can put bricks on the neighbouring parts of the wall\n    if bricks_needed % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    if n == 1:\n        return \"YES\"\n    \n    if n == 2 and a[0] == a[1]:\n        return \"YES\"\n    \n    if n == 2 and a[0] != a[1]:\n        return \"NO\"\n    \n    for i in range(1, n):\n        if a[i] != a[i - 1]:\n            return \"NO\"\n    \n    return \"YES\""
    },
    {
        "number": 4023,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    heights = list(map(int, stdin.split('\\n')[1].split()))\n\n    if n == 1:\n        return \"YES\"\n\n    for i in range(1, n):\n        if heights[i] == heights[i - 1]:\n            continue\n        if i == 1 and heights[i] == heights[i + 1]:\n            continue\n        if i == n - 1 and heights[i] == heights[i - 1]:\n            continue\n        return \"YES\"\n\n    return \"NO\"\n"
    },
    {
        "number": 4024,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    s = input()\n    if k > len(set(s)):\n        return -1\n    \n    cost = 0\n    for i in range(len(s)):\n        subseq = set()\n        for j in range(i, len(s)):\n            subseq.add(s[j])\n            if len(subseq) == k:\n                cost += n - (j - i + 1)\n                break\n    \n    return cost\n\ninput_stdin = \"\"\"4 5\nasdf\"\"\"\nprint(solution(input_stdin))\n\ninput_stdin = \"\"\"5 6\naaaaa\"\"\"\nprint(solution(input_stdin))\n\ninput_stdin = \"\"\"5 7\naaaaa\"\"\"\nprint(solution(input_stdin))\n\ninput_stdin = \"\"\"10 100\najihiushda\"\"\"\nprint(solution(input_stdin)) "
    },
    {
        "number": 4024,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    s = input()\n\n    if k > len(set(s)):\n        return -1\n\n    subsequences = set()\n    min_cost = 0\n\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            subsequences.add(s[i:j])\n            min_cost += len(s[i:j])\n\n    if len(subsequences) < k:\n        return -1\n\n    subsequences = sorted(list(subsequences))\n    min_costs = [0] * len(subsequences)\n\n    for i in range(1, k):\n        min_cost = float('inf')\n        for j in range(i):\n            cost = min_costs[j] + len(subsequences[i]) - len(subsequences[j])\n            if cost < min_cost:\n                min_cost = cost\n        min_costs[i] = min_cost\n\n    return min_cost\n\n\nstdin = \"\"\"4 5\nasdf\"\"\"\nprint(solution(stdin)) "
    },
    {
        "number": 4024,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def is_subsequence(s1: str, s2: str) -> bool:\n        i, j = 0, 0\n        while i < len(s1) and j < len(s2):\n            if s1[i] == s2[j]:\n                i += 1\n            j += 1\n        return i == len(s1)\n\n    def generate_subsequences(s: str, k: int) -> int:\n        if k == 1:\n            return 0\n        if k == 2:\n            return n\n        if k > 2 and k % 2 == 0:\n            return generate_subsequences(s, k - 1) + generate_subsequences(s, k - 2)\n        return n - generate_subsequences(s, k - 1)\n\n    n, k = map(int, stdin.splitlines()[0].split())\n    s = stdin.splitlines()[1].strip()\n\n    if k > len(set(s)):\n        return -1\n\n    min_cost = float('inf')\n    for subseq in set(permutations(s, k)):\n        cost = 0\n        for i in range(len(s)):\n            if is_subsequence(subseq, s[i:]):\n                cost += n - len(subseq) + 1\n                break\n        min_cost = min(min_cost, cost)\n\n    return min_cost if min_cost != float('inf') else -1"
    },
    {
        "number": 4024,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    n, k = map(int, input_list[0].split())\n    s = input_list[1]\n\n    # Initialize the set of subsequences\n    subsequences = set()\n\n    # Iterate through the string s\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            # Add the current subsequence to the set of subsequences\n            subsequences.add(s[i:j])\n\n            # Check if the set has reached the desired size\n            if len(subsequences) == k:\n                # Calculate the minimum total cost\n                total_cost = sum(len(subsequence) for subsequence in subsequences)\n                return total_cost\n\n    # If it's not possible to generate the set S of size k, return -1\n    return -1"
    },
    {
        "number": 4024,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    s = stdin.split()[2]\n\n    if k > len(set(s)):\n        return -1\n\n    def is_subsequence(s, t):\n        i = 0\n        for char in s:\n            if char == t[i]:\n                i += 1\n            if i == len(t):\n                return True\n        return False\n\n    def backtrack(curr_set, cost, start):\n        if len(curr_set) == k:\n            return cost\n\n        for i in range(start, n):\n            new_set = curr_set + [s[i]]\n            new_cost = cost + n - i\n            if new_set not in seen:\n                seen.add(tuple(new_set))\n                if is_subsequence(s, s[i:]):\n                    res = backtrack(new_set, new_cost, i + 1)\n                    if res is not None:\n                        return res\n\n    seen = set()\n    return backtrack([], 0, 0)\n\ndef"
    },
    {
        "number": 4024,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n, k = map(int, input_list[0].split())\n    s = input_list[1]\n\n    # Calculate the set of subsequences for the given string s\n    subsequences = []\n    for i in range(1, len(s) + 1):\n        for j in range(len(s) + 1 - i):\n            subsequences.append(s[j:j+i])\n\n    # Check if it is possible to obtain a set of size k\n    if len(set(subsequences)) < k:\n        return -1\n\n    # Calculate the minimum cost to obtain a set of size k\n    min_cost = float('inf')\n    for subset in itertools.combinations(subsequences, k):\n        cost = sum(len(t) for t in subset)\n        if cost < min_cost:\n            min_cost = cost\n\n    return min_cost\n"
    },
    {
        "number": 4024,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    s = input()\n    \n    if k > 2**n:\n        return -1\n    else:\n        return 2**(k-1) - 1\n\ninput_stdin = \"\"\nfor i in range(4):\n    input_stdin += input() + \"\\n\"\n\nprint(solution(input_stdin)) "
    },
    {
        "number": 4024,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    s = stdin.split()[2]\n    if k > n:\n        return \"-1\"\n    if k == n:\n        return sum(range(n))\n\n    s = set(s)\n    if len(s) < k:\n        return \"-1\"\n\n    subseq = set()\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            if len(set(s[i]+s[j])) == len(s[i]+s[j]):\n                subseq.add(s[i]+s[j])\n\n    if len(subseq) < k:\n        return \"-1\"\n\n    min_cost = float('inf')\n    for t in subseq:\n        cost = n - len(t)\n        min_cost = min(min_cost, cost)\n\n    return min_cost\n"
    },
    {
        "number": 4024,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    s = stdin.split()[2]\n\n    if k > len(set(s)):\n        return -1\n\n    subsequences = set()\n    min_cost = 0\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            subseq = s[i - 1:j]\n            if subseq not in subsequences:\n                subsequences.add(subseq)\n                min_cost += n - len(subseq)\n\n    return min_cost if len(subsequences) >= k else -1\n"
    },
    {
        "number": 4024,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    s = input()\n\n    if k > len(set(s)):\n        return -1\n\n    subsequences = set()\n    total_cost = 0\n\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            subsequence = s[i:j]\n            if len(set(subsequence)) == len(subsequence):\n                subsequences.add(subsequence)\n                total_cost += len(subsequence)\n\n    if len(subsequences) < k:\n        return -1\n\n    return total_cost\n"
    },
    {
        "number": 4025,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    total_days = 7\n    total_rations = a + b + c\n\n    if total_rations == 0:\n        return \"0\"\n\n    days_with_food = {\n        'Monday': a,\n        'Tuesday': b,\n        'Wednesday': c,\n        'Thursday': a,\n        'Friday': 0,\n        'Saturday': b,\n        'Sunday': a\n    }\n\n    optimal_start_day = max(days_with_food, key=days_with_food.get)\n\n    days_without_food = 1\n    while days_with_food[optimal_start_day] > 0:\n        days_with_food[optimal_start_day] -= 1\n        days_without_food += 1\n        if days_without_food % total_days == 0:\n            return str(days_without_food // total_days)\n\n        next_day = (days_without_food % total_days) - 1\n        if next_day < 0:\n            next_day += total_days\n\n        optimal_start_day = max(days_with_food, key=days_with_food.get)\n\n    return str(days_without_food // total_days)\n"
    },
    {
        "number": 4025,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    days = 7\n    max_count = 0\n\n    for i in range(days):\n        if i % 2 == 0 or i == 1:\n            count = min(a, b)\n            a -= count\n            b -= count\n        else:\n            count = min(a, c)\n            a -= count\n            c -= count\n        max_count = max(max_count, count)\n\n    return str(max_count)\n\ndef"
    },
    {
        "number": 4025,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    max_days = 0\n\n    if a >= b and a >= c:\n        max_days = 4\n    elif b >= a and b >= c:\n        max_days = 7\n    else:\n        max_days = 3\n\n    return str(max_days)\n"
    },
    {
        "number": 4025,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    days = 7\n    max_food = days * a\n\n    if max_food < b + c:\n        return 1\n\n    min_food = b + c\n    best_day = 0\n\n    for day in range(1, days + 1):\n        food_for_day = 0\n        if day % 2 == 0:\n            food_for_day += a\n        if day % 4 == 0:\n            food_for_day += b\n        if day % 7 == 0:\n            food_for_day += c\n\n        if food_for_day < min_food:\n            min_food = food_for_day\n            best_day = day\n\n    return best_day\n"
    },
    {
        "number": 4025,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    week = 7\n    days_for_fish_and_chicken = a + (c * week)\n    days_for_rabbit_and_chicken = b + (c * week)\n\n    if days_for_fish_and_chicken > days_for_rabbit_and_chicken:\n        # If Polycarp can have enough food for the whole trip\n        if a > c and b > c:\n            max_days = week\n        # If Polycarp can have enough food for the first two days\n        elif a > c and b <= c:\n            max_days = 2\n        # If Polycarp can have enough food for the first three days\n        elif a > c - b and b > c:\n            max_days = 3\n        # If Polycarp can have enough food for the first four days\n        else:\n            max_days = 4\n    else:\n        # If Polycarp can have enough food for the whole trip\n        if a > c and b > c:\n            max_days = week\n        # If Polycarp can have enough food for the first three days\n        elif a > c - b and b > c:\n            max_days = 3\n        # If Polycarp can have enough food for the first four days\n        else:\n            max_days = 4\n\n    return str(max_days)\n"
    },
    {
        "number": 4025,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    days = [(a + b + c) // 3, (a + b + c) // 2, (a + b + c) // 2 + 1, (a + b + c) // 2, (a + b + c) // 2 - 1, (a + b + c) // 2]\n    days_count = [0, 0, 0, 0, 0, 0]\n    for i, day in enumerate(days):\n        if i in [0, 2, 3, 5]:\n            days_count[i] = day // 2\n        elif i in [1, 4]:\n            days_count[i] = day\n\n    max_days = max(days_count)\n    return str(max_days)"
    },
    {
        "number": 4025,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    max_days = min(a, b, c)\n    return str(max_days)\n\n\ndef"
    },
    {
        "number": 4025,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    \n    # Initialize the daily rations of food for each day\n    fish_food = a\n    rabbit_stew = b\n    chicken_stake = c\n    \n    max_days = 0\n    \n    # Iterate through each day\n    for i in range(7):\n        # Check which day of the week it is\n        if i == 0: # Sunday\n            # If there are enough fish food rations, eat fish food\n            if fish_food > 0:\n                fish_food -= 1\n        elif i == 1: # Monday\n            # If there are enough fish food rations, eat fish food\n            if fish_food > 0:\n                fish_food -= 1\n        elif i == 2: # Tuesday\n            # If there are enough rabbit stew rations, eat rabbit stew\n            if rabbit_stew > 0:\n                rabbit_stew -= 1\n        elif i == 3: # Wednesday\n            # If there are enough chicken stake rations, eat chicken stake\n            if chicken_stake > 0:\n                chicken_stake -= 1\n        elif i == 4: # Thursday\n            # If there are enough fish food rations, eat fish food\n            if fish_food > 0:\n                fish_food -= 1\n        elif i == 5: # Friday\n            # If there are enough chicken stake rations, eat chicken stake\n            if chicken_stake > 0:\n                chicken_stake -= 1\n        else: # Saturday\n            # If there are enough rabbit stew rations, eat rabbit stew\n            if rabbit_stew > 0:\n                rabbit_stew -= 1\n        \n        # Calculate the number of days the cat can eat in the trip\n        days = 1\n        while fish_food > 0 and rabbit_stew > 0 and chicken_stake > 0:\n            fish_food -= 1\n            rabbit_stew -= 1\n            chicken_stake -= 1\n            days += 1\n        \n        # Update the maximum number of days the cat can eat in the trip\n        if days > max_days:\n            max_days = days\n    \n    return str(max_days)\n"
    },
    {
        "number": 4025,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n\n    if a < 2 or b < 1 or c < 1:\n        return \"0\"\n\n    max_days = min(a, b, c)\n    max_days = min(max_days, a // 2, b // 2, c // 2)\n\n    return str(max_days)\n"
    },
    {
        "number": 4025,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    week = [a, b, c, a, b, c, a]\n    return max(week)\n\ninput_data = [\n    \"2 1 1\",\n    \"3 2 2\",\n    \"1 100 1\",\n    \"30 20 10\"\n]\n\nfor data in input_data:\n    print(solution(data)) "
    },
    {
        "number": 4026,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split(\"\\n\")[0])\n    outputs = []\n    for _ in range(t):\n        n, m = map(int, stdin.split(\"\\n\")[1].split())\n        tiles = {}\n        for _ in range(2 * n):\n            tile_type, tile_data = stdin.split(\"\\n\")[2:4]\n            tile_data = list(map(int, tile_data.split()))\n            tiles[tile_type] = tile_data\n            stdin = stdin[len(stdin.split(\"\\n\")[2:4]) * 2:]\n        square = [[0] * m for _ in range(m)]\n        for i in range(m):\n            for j in range(m):\n                tile_type, tile_data = tiles.items()[i * m + j % len(tiles)]\n                square[i][j] = tile_data\n        is_symmetric = True\n        for i in range(m):\n            for j in range(m):\n                if square[i][j] != square[j][i]:\n                    is_symmetric = False\n                    break\n            if not is_symmetric:\n                break\n        if is_symmetric:\n            outputs.append(\"YES\")\n        else:\n            outputs.append(\"NO\")\n        stdin = stdin[len(stdin.split(\"\\n\")[2:4]) * 2:]\n    return \"\\n\".join(outputs)\n"
    },
    {
        "number": 4026,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    t = int(input_data.pop(0))\n    output = []\n    for _ in range(t):\n        n, m = map(int, input_data.pop(0).split())\n        tiles = {}\n        for _ in range(2 * n):\n            row1, row2 = input_data.pop(0), input_data.pop(0)\n            tile = tuple(map(int, row1.split())) + tuple(map(int, row2.split()))\n            tiles[tile] = tiles.get(tile, 0) + 1\n        if any(tiles[tile] > 1 for tile in tiles):\n            output.append(\"NO\")\n            continue\n        grid = [[False] * m for _ in range(m)]\n        for tile in tiles:\n            if not any(grid[i][j] for i in range(m) for j in range(m)):\n                for i in range(m):\n                    for j in range(m):\n                        if 0 <= i + tile[0] <= m-1 and 0 <= j + tile[2] <= m-1 and 0 <= i + tile[1] <= m-1 and 0 <= j + tile[3] <= m-1:\n                            grid[i + tile[0]][j + tile[2]] = True\n                            grid[i + tile[1]][j + tile[3]] = True\n                output.append(\"YES\")\n                break\n        else:\n            output.append(\"NO\")\n    return \"\\n\".join(output)\n\n\ninput_data = \"\"\"6\n3 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n\"\"\"\n\nprint(solution(input_data)) "
    },
    {
        "number": 4026,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n, m = map(int, input().split())\n        tile_descriptions = []\n        for _ in range(2 * n):\n            tile_descriptions.append(list(map(int, input().split())))\n        # Check if Masha can construct a square of size m x m which is symmetric\n        square_size = 2 * m\n        for i in range(square_size):\n            for j in range(square_size):\n                if i < m and j < m:\n                    # Check if top left corner number is present in any tile\n                    if tile_descriptions[0][0] not in [tile[0] for tile in tile_descriptions]:\n                        print(\"NO\")\n                        return\n                elif i < m and j >= m:\n                    # Check if top right corner number is present in any tile\n                    if tile_descriptions[0][1] not in [tile[1] for tile in tile_descriptions]:\n                        print(\"NO\")\n                        return\n                elif i >= m and j < m:\n                    # Check if bottom left corner number is present in any tile\n                    if tile_descriptions[1][0] not in [tile[0] for tile in tile_descriptions]:\n                        print(\"NO\")\n                        return\n                elif i >= m and j >= m:\n                    # Check if bottom right corner number is present in any tile\n                    if tile_descriptions[1][1] not in [tile[1] for tile in tile_descriptions]:\n                        print(\"NO\")\n                        return\n        print(\"YES\")\n"
    },
    {
        "number": 4026,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin[0])\n    output = []\n    \n    for i in range(1, len(stdin), 2):\n        n, m = map(int, stdin[i].split())\n        tiles = {}\n        for j in range(n):\n            top_left, top_right = map(int, stdin[i+j+1].split())\n            bottom_left, bottom_right = map(int, stdin[i+j+2].split())\n            tiles[(top_left, top_right), (bottom_left, bottom_right)] = j\n        \n        if not can_construct_square(n, m, tiles):\n            output.append(\"NO\")\n        else:\n            output.append(\"YES\")\n    \n    return \"\\n\".join(output)\n\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid_tile(tile, size):\n        for i in range(size):\n            for j in range(size):\n                if tile[i][j] != tile[size - 1 - j][size - 1 - i]:\n                    return False\n        return True\n\n    t = int(stdin.splitlines()[0])\n    for i in range(1, t + 1):\n        n, m = map(int, stdin.splitlines()[i].split())\n        tiles = [[] for _ in range(n)]\n        for j in range(n):\n            for k in range(2):\n                tiles[j].append(tuple(map(int, stdin.splitlines()[i + j + k + 1].split())))\n\n        for tile in tiles:\n            if not is_valid_tile(tile, m):\n                print(\"NO\")\n                break\n        else:\n            print(\"YES\")\n"
    },
    {
        "number": 4026,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_symmetric(matrix: list) -> bool:\n        n = len(matrix)\n        for i in range(n):\n            for j in range(n):\n                if matrix[i][j] != matrix[j][i]:\n                    return False\n        return True\n\n    t = int(stdin.split()[0])\n    input_data = stdin.split('\\n')[1:]\n    for _ in range(t):\n        n, m = map(int, input_data.pop(0).split())\n        tiles = {tuple(map(int, input_data.pop(0).split())) for _ in range(n)}\n        matrix = [[0] * m for _ in range(m)]\n\n        for i in range(m):\n            for j in range(m):\n                for tile in tiles:\n                    if matrix[i][j] == 0:\n                        if (i + tile[0], j + tile[1]) in tiles and (i + tile[2], j + tile[3]) in tiles:\n                            matrix[i][j] = 1\n                            break\n\n        if is_symmetric(matrix):\n            print(\"YES\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 4026,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(matrix: List[List[int]], m: int) -> bool:\n        for i in range(m):\n            for j in range(m):\n                if matrix[i][j] != matrix[j][i]:\n                    return False\n        return True\n\n    t = int(stdin.split(\"\\n\")[0])\n    result = []\n    for case in range(1, t+1):\n        n, m = map(int, stdin.split(\"\\n\")[case].split())\n        tiles = [list(map(int, stdin.split(\"\\n\")[case+1+i].split())) for i in range(2*n)]\n        matrix = [[0]*m for _ in range(m)]\n        for i in range(m):\n            for j in range(m):\n                for tile in tiles:\n                    if tile[0] == tile[1]:\n                        continue\n                    if tile[0] == matrix[i][j] or tile[1] == matrix[i][j]:\n                        break\n                else:\n                    matrix[i][j] = tile[0]\n                    break\n            else:\n                result.append(\"NO\")\n                break\n        else:\n            if is_valid(matrix, m):\n                result.append(\"YES\")\n            else:\n                result.append(\"NO\")\n    return \"\\n\".join(result)\n"
    },
    {
        "number": 4026,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def read_input() -> tuple:\n        t = int(input())\n        cases = []\n        for _ in range(t):\n            n, m = map(int, input().split())\n            tiles = []\n            for _ in range(2 * n):\n                tile = []\n                for _ in range(2):\n                    tile.append(map(int, input().split()))\n                tiles.append(tile)\n            cases.append((n, m, tiles))\n        return cases\n\n    def is_symmetric(matrix: list) -> bool:\n        for i in range(1, len(matrix)):\n            for j in range(len(matrix[i])):\n                if matrix[i][j] != matrix[0][j]:\n                    return False\n        return True\n\n    def can_construct_square(n: int, m: int, tiles: list) -> bool:\n        if n * m > len(tiles) * 2:\n            return False\n        matrix = [[0] * m for _ in range(m)]\n        for tile in tiles:\n            for i in range(2):\n                for j in range(2):\n                    if matrix[i][j] != 0:\n                        return False\n                    if matrix[i][j] == 0:\n                        matrix[i][j] = tile[i][j]\n        return is_symmetric(matrix)\n\n    cases = read_input()\n    for n, m, tiles in cases:\n        print(\"YES\" if can_construct_square(n, m, tiles) else \"NO\")\n\nstdin = \"\"\"6\n3 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n\"\"\"\n\nsolution(stdin) "
    },
    {
        "number": 4026,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid_tile(tile, size):\n        for i in range(size - 1):\n            if tile[i][0] == tile[i][1] or tile[i][0] == tile[i][2] or tile[i][0] == tile[i][3] or tile[i][1] == tile[i][2] or tile[i][1] == tile[i][3] or tile[i][2] == tile[i][3]:\n                return False\n        return True\n\n    def is_valid_placement(tile, matrix, size, i, j):\n        if matrix[i][j] != 0:\n            return False\n        for x in range(size):\n            for y in range(size):\n                if matrix[i + x][j + y] != 0 and tile[x][y] != matrix[i + x][j + y]:\n                    return False\n        return True\n\n    test_cases = stdin.split('\\n')\n    test_cases = test_cases[1:]\n    answers = []\n\n    for case in test_cases:\n        case = case.split('\\n')\n        n, m = map(int, case[0].split())\n        tiles = case[1:]\n        matrix = [[0] * m for _ in range(m)]\n        is_symmetric = True\n\n        for i in range(m):\n            for j in range(m):\n                for k in range(len(tiles)):\n                    tile = [list(map(int, tiles[k].split())) for _ in range(2)]\n                    if is_valid_tile(tile, 2) and is_valid_placement(tile, matrix, m, i, j):\n                        for x in range(2):\n                            for y in range(2):\n                                matrix[i + x][j + y] = tile[x][y]\n                        is_symmetric = is_symmetric and (matrix[i][j] == matrix[j][i])\n                        if not is_symmetric:\n                            break\n                if not is_symmetric:\n                    break\n            if not is_symmetric:\n                break\n\n        if is_symmetric:\n            answers.append('YES')\n        else:\n            answers.append('NO')\n\n    return '\\n'.join(answers)\n"
    },
    {
        "number": 4026,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    output = []\n\n    for _ in range(t):\n        n, m = map(int, input().split())\n        tiles = {}\n\n        for _ in range(2 * n):\n            nums = list(map(int, input().split()))\n            tiles[(nums[0], nums[1])] = (nums[2], nums[3])\n\n        if m % 2 == 0:\n            for i in range(m // 2 + 1):\n                for j in range(m // 2 + 1):\n                    if (i + j) % 2 == 0:\n                        tl = (tiles[(i + 1, j + 1)][0], tiles[(i + 1, j + 1)][1])\n                        tr = (tiles[(i + 1, j)][0], tiles[(i + 1, j)][1])\n                        bl = (tiles[(i, j + 1)][0], tiles[(i, j + 1)][1])\n                        br = (tiles[(i, j)][0], tiles[(i, j)][1])\n\n                        if tl == tr == bl == br:\n                            continue\n                        else:\n                            output.append(\"NO\")\n                            break\n                else:\n                    continue\n                break\n            else:\n                output.append(\"YES\")\n        else:\n            output.append(\"NO\")\n\n    return \"\\n\".join(output)\n"
    },
    {
        "number": 4027,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_data = list(map(int, stdin.split()))\n    n = input_data[0]\n    \n    # Compute the sum of all the numbers from 1 to n\n    total_sum = (n * (n + 1)) // 2\n    \n    # Find the minimum difference between the sum of A and the sum of B\n    min_diff = abs(total_sum // 2 - (total_sum - (2 * n + 1)) // 2)\n    \n    return str(min_diff)\n"
    },
    {
        "number": 4027,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    n = int(input_list[0])\n\n    a = set(range(1, n+1))\n    b = set()\n\n    if n % 2 == 0:\n        a = set(range(1, n+1, 2))\n        b = set(range(2, n+1, 2))\n    else:\n        a = set(range(1, n//2+1))\n        b = set(range(n//2+1, n+1))\n\n    return abs(sum(a) - sum(b))\n\n\ndef"
    },
    {
        "number": 4027,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    A = [i for i in range(1, n+1) if i % 2 == 1]\n    B = [i for i in range(1, n+1) if i % 2 == 0]\n    return abs(sum(A) - sum(B))\n\n\ndef"
    },
    {
        "number": 4027,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(range(1, n+1))\n    minsum = float('inf')\n    \n    def find_sum(arr):\n        return sum(arr)\n    \n    def find_abs_sum_diff(arr1, arr2):\n        return abs(find_sum(arr1) - find_sum(arr2))\n\n    for i in range(1, n):\n        for j in range(i+1, n+1):\n            A = a[:i]\n            B = a[i:j]\n            C = a[j:]\n            minsum = min(minsum, find_abs_sum_diff(A, B))\n            minsum = min(minsum, find_abs_sum_diff(B, C))\n            minsum = min(minsum, find_abs_sum_diff(A, C))\n\n    return str(minsum) "
    },
    {
        "number": 4027,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin.split('\\n')\n    n = int(input_str[0])\n\n    def sum_sets(A, B):\n        return abs(sum(A) - sum(B))\n\n    def is_valid_split(A, B):\n        if len(A) + len(B) != n:\n            return False\n        return True\n\n    min_diff = float('inf')\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i + j == n + 1:\n                A = list(range(1, i))\n                B = list(range(i, n+1))\n                if is_valid_split(A, B):\n                    diff = sum_sets(A, B)\n                    if diff < min_diff:\n                        min_diff = diff\n\n    return str(min_diff)"
    },
    {
        "number": 4027,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    min_difference = float('inf')\n\n    # Generate all possible combinations of sets\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            set_a = set(range(1, i+1))\n            set_b = set(range(i+1, j+1))\n            set_c = set(range(j+1, n+1))\n\n            # Calculate the difference between the sums of the sets\n            difference = abs(sum(set_a) - sum(set_b))\n\n            # Update the minimum difference\n            if difference < min_difference:\n                min_difference = difference\n\n    return str(min_difference)\n\n\ninput_stdin = \"\"\"\n3\n\"\"\"\nprint(solution(input_stdin))\n\ninput_stdin = \"\"\"\n5\n\"\"\"\nprint(solution(input_stdin))\n\ninput_stdin = \"\"\"\n6\n\"\"\"\nprint(solution(input_stdin)) "
    },
    {
        "number": 4027,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    min_diff = float('inf')\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            diff = abs(sum(range(1, i)) - sum(range(i, j+1)))\n            if diff < min_diff:\n                min_diff = diff\n    return str(min_diff)\n\n\ndef"
    },
    {
        "number": 4027,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        A = [i for i in range(1, n+1, 2)]\n        B = [i for i in range(2, n, 2)]\n    else:\n        A = [i for i in range(1, n, 2)]\n        B = [i for i in range(2, n+1, 2)]\n    return str(abs(sum(A) - sum(B)))"
    },
    {
        "number": 4027,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    n = int(input_list[0])\n    A = [i for i in range(1, n+1)]\n    B = []\n    A_sum = 0\n    B_sum = 0\n\n    for i in range(n, 0, -1):\n        if A_sum < B_sum + i:\n            A.remove(i)\n            A_sum += i\n        else:\n            B.append(i)\n            B_sum += i\n\n    return abs(A_sum - B_sum)\n\n\ninput_list = input().split()\nprint(solution(input_list)) "
    },
    {
        "number": 4027,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"0\"\n    elif n == 2:\n        return \"1\"\n    elif n == 3:\n        return \"0\"\n    else:\n        ans = [0] * (n+1)\n        for i in range(4, n+1):\n            if i % 2 == 0:\n                if i == 4:\n                    ans[i] = 1\n                else:\n                    ans[i] = ans[i-2] + 1\n            else:\n                ans[i] = ans[i-1]\n        return str(ans[n])\n"
    },
    {
        "number": 4028,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(str, input().split())\n    n = int(n)\n    s = str(s)\n\n    # Create a set of all possible parentheses sequences of length 2n\n    all_sequences = set()\n    for i in range(n):\n        for j in range(i+1, n+i+1):\n            all_sequences.add(s[i:j])\n\n    # Count the number of valid sequences\n    valid_sequences = 0\n    for sequence in all_sequences:\n        if '()' in sequence or '(' in sequence[::-1] or ')' in sequence[::-1]:\n            continue\n        valid = True\n        for i in range(len(sequence)-1):\n            if sequence[i] == ')' and sequence[i+1] == '(':\n                valid = False\n                break\n        if valid:\n            valid_sequences += 1\n\n    return str(valid_sequences % (10**9+7))\n\n\ninput_string = \"\"\"5\n()))()\n3\n(()\n2\n(()\"\"\"\noutput_string = \"\"\"5\n4\n0\n0\"\"\"\n\n\ndef"
    },
    {
        "number": 4028,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, s = input().split()\n    n = int(n)\n    s = str(s)\n\n    count = 0\n    for i in range(len(s) - 2 * n + 1):\n        if s[i:i + 2 * n] == s[:2 * n]:\n            count += 1\n\n    return str(count % (10**9 + 7))"
    },
    {
        "number": 4028,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(str, stdin.split())\n    n = int(n)\n    s = s[1:-1]\n    dp = [0] * (2 * n + 1)\n    for i in range(len(s) + 1):\n        for j in range(i + 1, len(s) + 1):\n            dp[j - i + n] += 1\n    result = 0\n    for i in range(len(dp)):\n        if s in \"()\" * i:\n            result += dp[i]\n            if result >= 1000000007:\n                result %= 1000000007\n    return str(result)\n"
    },
    {
        "number": 4028,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n = int(input_list[0])\n    s = input_list[1]\n    result = 0\n\n    for i in range(len(s) - n):\n        for j in range(i + 1, len(s) - n + 1):\n            substring = s[i:j]\n            if substring == '()':\n                result += 1\n\n    return str(result % (10**9 + 7))\n"
    },
    {
        "number": 4028,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(str, stdin.split())\n    n, s = int(n), s\n    MOD = 1000000007\n    result = 0\n\n    for i in range(n):\n        for j in range(n, len(s)):\n            if s[i:j] == s[:len(s)//2]:\n                result += 1\n                result %= MOD\n\n    return str(result)\n"
    },
    {
        "number": 4028,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split(\"\\n\")[1]\n\n    MOD = 1000000007\n\n    def is_valid(bracket_seq: str) -> bool:\n        i = 0\n        while i < len(bracket_seq):\n            if bracket_seq[i] == '(':\n                if bracket_seq[i + 1] == ')':\n                    return False\n                i += 2\n            elif bracket_seq[i] == ')':\n                return False\n            else:\n                i += 1\n        return True\n\n    def regular_brackets(bracket_seq: str) -> bool:\n        i = 0\n        while i < len(bracket_seq):\n            if bracket_seq[i] == '(':\n                if bracket_seq[i + 1] == ')':\n                    return True\n                if bracket_seq[i + 1] == '1':\n                    i += 2\n                else:\n                    return False\n            elif bracket_seq[i] == ')':\n                if bracket_seq[i + 1] == '1':\n                    i += 2\n                else:\n                    return False\n            else:\n                i += 1\n        return True\n\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            bracket_seq = s[i:j]\n            if is_valid(bracket_seq) and regular_brackets(bracket_seq):\n                count += 1\n            count %= MOD\n\n    return str(count)\n\n\ndef"
    },
    {
        "number": 4028,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    s = stdin.split(\"\\n\")[1]\n    \n    count = 0\n    \n    for i in range(2 * n - len(s) + 1):\n        if s == s[::-1]:  # Check if s is a palindrome\n            count += 1\n    \n    return str(count % (10**9 + 7))\n"
    },
    {
        "number": 4028,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(str, stdin.split('\\n'))\n    n = int(n)\n    s = s.strip('()')\n    result = 0\n\n    for i in range(len(s) + 1):\n        for j in range(i + n, len(s) + 1):\n            if s[i:j] == s[i:j][::-1]:\n                result += 1\n\n    return str(result % (10**9 + 7))\n"
    },
    {
        "number": 4028,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(str, stdin.split())\n    n = int(n)\n    s = s[1:-1]\n    MOD = 10**9 + 7\n\n    def is_valid(bracket_sequence: str) -> bool:\n        stack = []\n        for char in bracket_sequence:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if not stack or stack.pop() != '(':\n                    return False\n        return not stack\n\n    count = 0\n    for i in range(2 * n - len(s) + 1):\n        bracket_sequence = '(' * i + s + ')' * (2 * n - i - len(s))\n        if is_valid(bracket_sequence):\n            count += 1\n    return str(count % MOD)\n"
    },
    {
        "number": 4028,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(str, stdin.split())\n    n = int(n)\n    s = s[1:-1]\n    result = 0\n    for i in range(len(s) - 2*n + 1):\n        if s[i:i+2*n] == s:\n            result += 1\n    return str(result % (10**9 + 7))\n"
    },
    {
        "number": 4029,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 10 == 0:\n        return -1\n\n    count = 0\n    while n % 10 == 0:\n        n //= 10\n        count += 1\n\n    n = str(n)\n    for i in range(len(n) - 1):\n        if n[i] == '0' and n[i + 1] == '0':\n            continue\n        if n[i] == '0' and n[i + 1] != '0':\n            n = n[:i] + '0' + n[i + 1:]\n        elif n[i] != '0' and n[i + 1] == '0':\n            n = n[:i + 1] + '0' + n[i + 2:]\n\n    if n[-1] == '0':\n        n = n[:-1]\n\n    if int(n) % 25 == 0:\n        return count\n    else:\n        return -1\n"
    },
    {
        "number": 4029,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    digits = [int(d) for d in str(n)]\n\n    # Check if the leftmost digit is a zero\n    if digits[0] == 0:\n        return -1\n\n    moves = 0\n    for i in range(1, len(digits)):\n        if digits[i] == 0:\n            continue\n\n        if digits[i] < digits[i - 1]:\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            moves += 1\n\n    if digits[-1] % 5 == 0:\n        return moves\n\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] % 5 == 0:\n            if digits[i - 1] % 5 == 0:\n                digits[i], digits[i - 1] = digits[i - 1], digits[i]\n                moves += 1\n                return moves\n            else:\n                digits[i], digits[i - 1] = digits[i - 1], digits[i]\n                moves += 1\n                return moves\n\n    return -1\n\n\ndef"
    },
    {
        "number": 4029,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    # Check if the last two digits are divisible by 25\n    if n % 100 != 25:\n        # Convert the number to a string and reverse it\n        num_str = str(n)[::-1]\n        # Initialize the minimum number of moves\n        min_moves = 0\n        # Initialize a flag to check if the number is divisible by 25\n        is_divisible_by_25 = False\n        # Iterate through the reversed number\n        for i in range(len(num_str) - 1):\n            # Swap adjacent digits if they are not divisible by 25\n            if (int(num_str[i]) * int(num_str[i+1])) % 25 != 0:\n                num_str = num_str[:i] + num_str[i+1] + num_str[i] + num_str[i+2:]\n                min_moves += 1\n            # Check if the number is divisible by 25\n            if int(num_str[-1]) == 0:\n                is_divisible_by_25 = True\n                break\n        # If the number is not divisible by 25, return -1\n        if not is_divisible_by_25:\n            return -1\n        else:\n            # Return the minimum number of moves required to obtain a number divisible by 25\n            return min_moves\n    else:\n        # If the last two digits are divisible by 25, return 0\n        return 0"
    },
    {
        "number": 4029,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    num_str = str(n)\n    \n    if len(num_str) % 2 == 0:\n        # Check if the last digit is a multiple of 5\n        if num_str[-1] % 5 != 0:\n            # If not, we can't make it divisible by 25\n            return -1\n        # Swap the last two digits if necessary\n        if int(num_str[-2]) % 5 == 0:\n            num_str = num_str[:-2] + num_str[-1] + num_str[-2]\n        else:\n            num_str = num_str[:-1] + num_str[-1] + num_str[-2]\n    else:\n        # Check if the first digit is a multiple of 5\n        if num_str[0] % 5 != 0:\n            # If not, we can't make it divisible by 25\n            return -1\n        # Swap the first two digits if necessary\n        if int(num_str[1]) % 5 == 0:\n            num_str = num_str[1] + num_str[0] + num_str[2:]\n        else:\n            num_str = num_str[0] + num_str[1] + num_str[2:]\n\n    # Count the number of moves\n    count = 0\n    while int(num_str) % 25 != 0:\n        # Swap the first two digits\n        if int(num_str[1]) % 5 == 0:\n            num_str = num_str[1] + num_str[0] + num_str[2:]\n        else:\n            num_str = num_str[0] + num_str[1] + num_str[2:]\n        count += 1\n\n    return count"
    },
    {
        "number": 4029,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    num_str = str(n)\n    moves = 0\n\n    if n == 0:\n        return -1\n\n    if len(num_str) % 2 == 1:\n        num_str = '0' + num_str\n\n    for i in range(len(num_str) // 2):\n        if num_str[2 * i] != '0':\n            if num_str[2 * i + 1] != '0':\n                continue\n            else:\n                num_str = num_str[:2 * i + 1] + '0' + num_str[2 * i + 1:]\n                moves += 1\n        else:\n            if num_str[2 * i + 1] != '0':\n                num_str = num_str[:2 * i + 1] + '0' + num_str[2 * i + 1:]\n                moves += 1\n            else:\n                num_str = num_str[:2 * i + 1] + num_str[2 * i + 2:]\n                moves += 1\n\n    if num_str[-1] == '0':\n        num_str = num_str[:-1]\n\n    if int(num_str) % 25 == 0:\n        return moves\n    else:\n        return -1\n"
    },
    {
        "number": 4029,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(number: str) -> bool:\n        for i in range(len(number)):\n            if number[i] == '0' and i != len(number) - 1:\n                return False\n        return True\n\n    def swap(number: str, i: int, j: int) -> str:\n        return number[:i] + number[j] + number[i + 1:j] + number[i] + number[j + 1:]\n\n    n = int(stdin.strip())\n    number = str(n)\n    moves = 0\n\n    if n % 25 == 0:\n        return moves\n\n    while not (is_valid(number) and number.count('0') % 2 == 0):\n        if number.count('0') % 2 == 0:\n            i = number.index('0')\n            number = swap(number, i, i + 1)\n            moves += 1\n        else:\n            return -1\n\n    return moves\n"
    },
    {
        "number": 4029,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    moves = 0\n    num = [int(d) for d in str(n)]\n\n    if num[0] == 0:\n        return -1\n\n    while not (num[0] % 2 == 0 and num[1] % 2 == 0 and num[2] % 2 == 0 and num[3] % 5 == 0):\n        moves += 1\n        if not (num[0] % 2 == 0 and num[1] % 2 == 0):\n            num[0], num[1] = num[1], num[0]\n        if not (num[1] % 2 == 0 and num[2] % 2 == 0):\n            num[1], num[2] = num[2], num[1]\n        if not (num[2] % 2 == 0 and num[3] % 5 == 0):\n            num[2], num[3] = num[3], num[2]\n\n    if num[3] % 5 == 0:\n        return moves\n    else:\n        return -1\n\n\ndef"
    },
    {
        "number": 4029,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    # Convert the number to a list of digits\n    digits = [int(d) for d in str(n)]\n\n    # Initialize variables\n    moves = 0\n    found = False\n\n    # Iterate through the list of digits and swap adjacent digits if necessary\n    for i in range(len(digits) - 1):\n        if digits[i] == 0 or digits[i + 1] == 0:\n            digits[i], digits[i + 1] = digits[i + 1], digits[i]\n            moves += 1\n\n    # Check if the number is divisible by 25\n    if digits[-1] == 0 or digits[-2] == 0:\n        found = True\n\n    # Check if the number is divisible by 25 after swapping adjacent digits\n    if not found:\n        for i in range(len(digits) - 2):\n            if digits[i] == 0 and digits[i + 1] != 0 and digits[i + 2] != 0:\n                digits[i], digits[i + 1] = digits[i + 1], digits[i]\n                digits[i + 1], digits[i + 2] = digits[i + 2], digits[i + 1]\n                moves += 1\n                if digits[-1] == 0 or digits[-2] == 0:\n                    found = True\n                    break\n\n    if not found:\n        return -1\n\n    return moves"
    },
    {
        "number": 4029,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    # Determine the number of digits in n\n    num_digits = 0\n    while n > 0:\n        n //= 10\n        num_digits += 1\n    \n    # Initialize the number of moves\n    num_moves = 0\n    \n    # Initialize the first two digits\n    first_digit = n % 10\n    second_digit = (n // 10) % 10\n    \n    # Find the minimum number of moves required to obtain a number that is divisible by 25\n    while (first_digit * 10 + second_digit) % 25 != 0:\n        # Swap the digits\n        temp = first_digit\n        first_digit = second_digit\n        second_digit = temp\n        \n        # Increment the number of moves\n        num_moves += 1\n        \n        # If the number of digits has reached 1, then it is impossible to obtain a number that is divisible by 25\n        if num_digits == 1:\n            return \"-1\"\n        \n        # Update the number of digits\n        num_digits -= 1\n        \n        # Update the first and second digits\n        first_digit = (n // (10 ** num_digits)) % 10\n        second_digit = (n // (10 ** (num_digits - 1))) % 10\n        \n    return str(num_moves)\n"
    },
    {
        "number": 4029,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    num_len = len(str(n))\n\n    # Check if the last digit is a zero\n    if n % 10 == 0:\n        return -1\n\n    # Check if the number is already divisible by 25\n    if n % 25 == 0:\n        return 0\n\n    # Swap adjacent digits until the number is divisible by 25\n    moves = 0\n    while n % 25 != 0:\n        n = swap_adjacent_digits(n)\n        moves += 1\n\n        # Check if the last digit is a zero\n        if n % 10 == 0:\n            return -1\n\n    return moves\n\ndef"
    },
    {
        "number": 4030,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    n_colors = 1\n    while True:\n        c = [0] * n\n        for i in range(1, n):\n            if s[i - 1] > s[i]:\n                c[i] = c[i - 1]\n            else:\n                c[i] = c[i - 1] + 1\n        max_color = max(c)\n        if max_color < n_colors:\n            break\n        n_colors += 1\n    return n_colors, ' '.join(str(color + 1) for color in c)\n\n\ndef"
    },
    {
        "number": 4030,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n    colors = set(range(1, n + 1))\n\n    # Check if the string is already sorted\n    if sorted(s) == list(s):\n        return \"1\\n1 \" + \" \".join(map(str, range(1, n + 1)))\n\n    # Create a graph to represent the adjacency matrix\n    graph = [[] for _ in range(n)]\n    for i in range(n - 1):\n        if s[i] > s[i + 1]:\n            graph[i].append(i + 1)\n            graph[i + 1].append(i)\n\n    # Perform DFS to find the minimum number of colors\n    visited = [False] * n\n    dfs(0, visited, graph, colors)\n\n    # Sort the string using any possible coloring\n    coloring = [min(colors)] * n\n    for i in range(n):\n        for j in range(n):\n            if graph[i] and s[i] < s[j]:\n                coloring[i] = coloring[j]\n                break\n\n    # Print the minimum number of colors and the coloring\n    return str(len(colors)) + \"\\n\" + \" \".join(map(str, coloring))\n\n\ndef"
    },
    {
        "number": 4030,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def is_sorted(s: str) -> bool:\n        for i in range(len(s) - 1):\n            if ord(s[i]) > ord(s[i + 1]):\n                return False\n        return True\n\n    def min_coloring(s: str) -> int:\n        colors = set(s)\n        return len(colors)\n\n    def color_string(s: str, colors: int) -> str:\n        color_map = [str(i + 1) for i in range(colors)]\n        result = [color_map[ord(c) - ord('a')] for c in s]\n        return \" \".join(result)\n\n    n = int(stdin.split(\"\\n\")[0])\n    s = stdin.split(\"\\n\")[1]\n    min_colors = min_coloring(s)\n    sorted_s = s\n\n    while not is_sorted(sorted_s):\n        for i in range(len(sorted_s) - 1):\n            if ord(sorted_s[i]) > ord(sorted_s[i + 1]):\n                sorted_s = sorted_s[:i + 1] + sorted_s[i + 1:i:-1] + sorted_s[i + 1:]\n                break\n\n    return min_colors, color_string(sorted_s, min_colors)\n"
    },
    {
        "number": 4030,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    s = input()\n\n    def is_sorted(s: str) -> bool:\n        for i in range(1, len(s)):\n            if s[i] < s[i - 1]:\n                return False\n        return True\n\n    def count_colors(s: str) -> int:\n        colors = set()\n        for c in s:\n            colors.add(c)\n        return len(colors)\n\n    min_colors = 1\n    while not is_sorted(s):\n        if count_colors(s) > min_colors:\n            return min_colors\n        min_colors += 1\n        for i in range(1, len(s)):\n            if s[i] < s[i - 1]:\n                s = s[:i - 1] + s[i - 1] + s[i] + s[i + 1:]\n                break\n    return min_colors, s\n"
    },
    {
        "number": 4030,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.splitlines()[1]\n\n    # create a set of the unique characters in s\n    unique_chars = set(s)\n\n    # compute the minimum number of colors\n    min_colors = len(unique_chars)\n\n    # if min_colors is 1, we can just color the string with 1 color\n    if min_colors == 1:\n        res = 1\n        coloring = [1] * n\n\n    # if min_colors is greater than 1, we need to color the string with at least min_colors colors\n    else:\n        res = min_colors\n        coloring = [i + 1 for i in range(min_colors)]\n\n    # create a list of tuples (char, color) for each character in s\n    char_color_list = [(s[i], coloring[i % min_colors]) for i in range(n)]\n\n    # sort the list by the characters in ascending order\n    char_color_list.sort()\n\n    # create a new list to store the sorted string\n    sorted_s = [None] * n\n\n    # populate the sorted string with the sorted characters and their colors\n    for i in range(n):\n        sorted_s[i] = char_color_list[i][1]\n\n    # print the minimum number of colors and the coloring\n    print(res)\n    print(\" \".join(map(str, sorted_s))) "
    },
    {
        "number": 4030,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.splitlines()\n    n = int(input_lines[0])\n    s = input_lines[1]\n\n    dp = [[False for _ in range(n + 1)] for _ in range(n + 1)]\n    colors = [0 for _ in range(n)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if s[i - 1] < s[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i][j - 1]\n\n            if dp[i][j]:\n                colors[i - 1] = max(colors[i - 1], colors[j - 1] + 1)\n\n    res = colors[n - 1]\n    coloring = [res for _ in range(n)]\n\n    return str(res) + '\\n' + ' '.join(map(str, coloring)) + '\\n'\n"
    },
    {
        "number": 4030,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    s = stdin.split(\"\\n\")[1]\n\n    def is_sorted(s: str, c: list) -> bool:\n        for i in range(1, len(s)):\n            if c[i - 1] != c[i]:\n                if ord(s[i - 1]) > ord(s[i]):\n                    return False\n        return True\n\n    def min_colors(s: str) -> int:\n        colors = set(s)\n        return max(colors) + 1\n\n    min_c = min_colors(s)\n    c = [0] * n\n    for i in range(n):\n        c[i] = i % min_c + 1\n\n    swaps = 0\n    while not is_sorted(s, c):\n        i = 0\n        while i < n - 1 and c[i] == c[i + 1]:\n            i += 1\n        while i < n - 1 and c[i] != c[i + 1]:\n            i += 1\n        j = i + 1\n        while j < n and c[i] != c[j]:\n            j += 1\n        while j < n and c[i] == c[j]:\n            j += 1\n\n        if j < n:\n            c[i], c[j] = c[j], c[i]\n            swaps += 1\n        else:\n            break\n\n    return str(min_c) + \"\\n\" + \" \".join(map(str, c)) + \"\\n\"\n"
    },
    {
        "number": 4030,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n\n    res = 1\n    colors = [0] * n\n    i = 0\n    j = 1\n\n    while j < n:\n        if s[i] == s[j]:\n            colors[i] = colors[j]\n            i += 1\n            j += 1\n        else:\n            res += 1\n            for k in range(i, j):\n                colors[k] = res\n            i = j\n            j = i + 1\n\n    if i != n - 1:\n        res += 1\n        for k in range(i, n):\n            colors[k] = res\n\n    output = \" \".join(map(str, colors))\n    return f\"{res}\\n{output}\"\n\n\ninput_string = \"\"\"9\nabacbecfd\n\n8\naaabbcbb\n\n7\nabcdedc\n\n5\nabcde\"\"\"\n\nprint(solution(input_string)) "
    },
    {
        "number": 4030,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n\n    def swap(s, i, j):\n        s = list(s)\n        s[i], s[j] = s[j], s[i]\n        return ''.join(s)\n\n    def is_sorted(s):\n        return all(s[i] <= s[i + 1] for i in range(len(s) - 1))\n\n    def can_sort(s):\n        groups = {}\n        for c in s:\n            if c in groups:\n                groups[c] += 1\n            else:\n                groups[c] = 1\n        return len(groups) <= 2 and is_sorted(s)\n\n    min_colors = 1\n    coloring = []\n\n    for i in range(n):\n        if i == 0 or s[i] != s[i - 1]:\n            min_colors += 1\n        coloring.append(min_colors)\n\n    while not can_sort(coloring):\n        min_colors += 1\n        for i in range(1, n):\n            if coloring[i] != coloring[i - 1]:\n                coloring[i] = min_colors\n\n    return min_colors, ' '.join(map(str, coloring))\n"
    },
    {
        "number": 4030,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n\n    # Calculate the minimum number of colors\n    counts = [0] * n\n    for i in range(n - 1):\n        if s[i] < s[i + 1]:\n            counts[i] = 1\n        elif s[i] > s[i + 1]:\n            counts[i + 1] = 1\n        else:\n            counts[i] = 2\n    min_colors = sum(counts) + 1\n\n    # Generate possible colorings\n    colorings = []\n    for color in range(1, min_colors + 1):\n        coloring = [color] * n\n        for i in range(n - 1):\n            if coloring[i] == coloring[i + 1]:\n                coloring[i + 1] = color + 1\n                color += 1\n        colorings.append(coloring)\n\n    # Print the result\n    print(min_colors)\n    for coloring in colorings:\n        print(\" \".join(map(str, coloring)))\n"
    },
    {
        "number": 4031,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_substring(s: str, t: str) -> bool:\n        return t in s\n\n    def reorder(strings: list) -> str:\n        result = []\n        for i in range(n):\n            for j in range(i + 1, n):\n                if is_substring(strings[j], strings[i]):\n                    result.append(strings[i])\n                    result.append(strings[j])\n                    break\n            else:\n                return \"NO\"\n        return \"YES\\n\" + \"\\n\".join(result)\n\n    n = int(stdin[0])\n    strings = stdin[1:].split(\"\\n\")\n    return reorder(strings)\n"
    },
    {
        "number": 4031,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def is_substring(s1: str, s2: str) -> bool:\n        return s1 in s2\n\n    def contains_substrings(strings: list) -> bool:\n        for i in range(len(strings) - 1):\n            for j in range(i + 1, len(strings)):\n                if not is_substring(strings[i], strings[j]):\n                    return False\n        return True\n\n    n = int(stdin.split(\"\\n\")[0])\n    strings = stdin.split(\"\\n\")[1:]\n\n    if contains_substrings(strings):\n        return \"YES\\n\" + \"\\n\".join(strings)\n    else:\n        return \"NO\"\n\ninput_stdin = \"\"\"5\na\naba\nabacaba\nba\naba\"\"\"\n\noutput_stdin = \"\"\"YES\na\nba\naba\naba\nabacaba\"\"\"\n\ninput_stdin2 = \"\"\"5\na\nabacaba\nba\naba\nabab\"\"\"\n\noutput_stdin2 = \"NO\"\n\ninput_stdin3 = \"\"\"3\nqwerty\nqwerty\nqwerty\"\"\"\n\noutput_stdin3 = \"YES\\nqwerty\\nqwerty\\nqwerty\"\n\nprint(solution(input_stdin))\nprint(solution(input_stdin2))\nprint(solution(input_stdin3)) "
    },
    {
        "number": 4031,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    n = int(input_list[0])\n    input_list = input_list[1:]\n\n    for i in range(n):\n        if not all(input_list[j].startswith(input_list[i]) for j in range(i + 1, n)):\n            return \"NO\"\n    return \"YES\\n\" + \"\\n\".join(input_list)"
    },
    {
        "number": 4031,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def is_substring(s1: str, s2: str) -> bool:\n        return any(s1 in s2[i:i + len(s1)] for i in range(len(s2) - len(s1) + 1))\n\n    def is_valid_order(strings: list[str]) -> bool:\n        for i in range(1, len(strings)):\n            if not any(is_substring(strings[i], s) for s in strings[:i]):\n                return False\n        return True\n\n    n = int(stdin[0].strip())\n    strings = [s.strip() for s in stdin[1:].split('\\n')]\n\n    if not is_valid_order(strings):\n        return \"NO\"\n    return \"YES\\n\" + '\\n'.join(strings)\n"
    },
    {
        "number": 4031,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def is_substring(s1: str, s2: str) -> bool:\n        return s1 in s2\n\n    def is_contained(s1: str, s2: str) -> bool:\n        return s1 in s2 and s2 not in s1\n\n    def find_substring(s1: str, strings: list) -> bool:\n        for s2 in strings:\n            if is_substring(s1, s2):\n                return True\n        return False\n\n    def find_contained(s1: str, strings: list) -> bool:\n        for s2 in strings:\n            if is_contained(s1, s2):\n                return True\n        return False\n\n    n = int(stdin.splitlines()[0])\n    strings = stdin.splitlines()[1:]\n\n    for i in range(1, n):\n        if not find_substring(strings[i - 1], strings[:i]):\n            return \"NO\"\n        if not find_contained(strings[i], strings[:i]):\n            return \"NO\"\n\n    return \"YES\\n\" + \"\\n\".join(strings)"
    },
    {
        "number": 4031,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_substring(s1, s2):\n        return s2.find(s1) != -1\n\n    def find_substring(s1, lst):\n        for s2 in lst:\n            if is_substring(s1, s2):\n                return True\n        return False\n\n    n = int(stdin[0].strip())\n    strings = stdin[1:].split('\\n')\n    if len(set(strings)) < n:\n        return \"NO\"\n\n    for i in range(1, n):\n        if not find_substring(strings[i], strings[:i]):\n            return \"NO\"\n\n    return \"YES\\n\" + '\\n'.join(strings)\n"
    },
    {
        "number": 4031,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def is_substring(s1: str, s2: str) -> bool:\n        i = 0\n        for c in s2:\n            if c == s1[i]:\n                i += 1\n                if i == len(s1):\n                    return True\n        return False\n\n    def find_substring(strings: list) -> bool:\n        for i in range(len(strings)):\n            for j in range(i + 1, len(strings)):\n                if is_substring(strings[i], strings[j]):\n                    return False\n        return True\n\n    n = int(stdin.readline())\n    strings = [stdin.readline().strip() for _ in range(n)]\n\n    if find_substring(strings):\n        return \"YES\\n\" + \"\\n\".join(strings)\n    else:\n        return \"NO\"\n\n\nstdin = sys.stdin.read()\nprint(solution(io.StringIO(stdin))) "
    },
    {
        "number": 4031,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    if n == 1:\n        return \"YES\"\n\n    strings = stdin.split(\"\\n\")[1:]\n    for i in range(n):\n        substring = strings[i]\n        for j in range(i + 1, n):\n            if substring in strings[j]:\n                continue\n            else:\n                return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_substring(s: str, t: str) -> bool:\n        for i in range(len(t) - len(s) + 1):\n            if t[i:i + len(s)] == s:\n                return True\n        return False\n\n    n = int(stdin.splitlines()[0])\n    strings = stdin.splitlines()[1:]\n\n    for i in range(n - 1):\n        if not is_substring(strings[i], strings[i + 1]):\n            return \"NO\"\n\n    return \"YES\\n\" + \"\\n\".join(strings)\n\n\ninput_stdin = \"\"\"5\na\naba\nabacaba\nba\naba\"\"\"\n\noutput_stdout = \"\"\"YES\na\nba\naba\naba\nabacaba\"\"\"\n\ninput_stdin = \"\"\"5\na\nabacaba\nba\naba\nabab\"\"\"\n\noutput_stdout = \"NO\"\n\ninput_stdin = \"\"\"3\nqwerty\nqwerty\nqwerty\"\"\"\n\noutput_stdout = \"YES\\nqwerty\\nqwerty\\nqwerty\"\n\n\nassert solution(input_stdin) == output_stdout "
    },
    {
        "number": 4031,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_substring(s1: str, s2: str) -> bool:\n        for i in range(len(s2) - len(s1) + 1):\n            if s2[i:i+len(s1)] == s1:\n                return True\n        return False\n\n    n = int(stdin.readline().strip())\n    strings = [stdin.readline().strip() for _ in range(n)]\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if not is_substring(strings[i], strings[j]):\n                return \"NO\"\n\n    return \"YES\\n\" + \"\\n\".join(strings)\n"
    },
    {
        "number": 4032,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n, k = map(int, input_list[0].split())\n    a = list(map(int, input_list[1].split()))\n    left_count = 0\n    right_count = 0\n    left_solved = []\n    right_solved = []\n\n    for i in range(n):\n        if a[i] <= k:\n            if i < n // 2:\n                left_count += 1\n                left_solved.append(a[i])\n            else:\n                right_count += 1\n                right_solved.append(a[i])\n\n    max_count = max(left_count, right_count)\n\n    for i in range(max_count):\n        if i < left_count:\n            left_solved.pop()\n        if i < right_count:\n            right_solved.pop()\n\n    return str(max_count)\n"
    },
    {
        "number": 4032,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    problems = list(map(int, stdin.split()[2:]))\n    \n    max_solved_problems = 0\n    left_end = 0\n    right_end = n - 1\n    while left_end <= right_end:\n        if problems[left_end] > k:\n            left_end += 1\n        elif problems[right_end] > k:\n            right_end -= 1\n        else:\n            max_solved_problems += 1\n            if left_end == right_end:\n                break\n            left_end += 1\n            right_end -= 1\n    \n    return str(max_solved_problems)"
    },
    {
        "number": 4032,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    arr = list(map(int, input().split()))\n\n    left_count, right_count = 0, 0\n    for i in range(n):\n        if arr[i] > k:\n            break\n        left_count += 1\n\n    for i in range(n - 1, -1, -1):\n        if arr[i] > k:\n            break\n        right_count += 1\n\n    return max(left_count, right_count)\n\n\ninput_str = '''8 4\n4 2 3 1 5 1 6 4'''\nprint(solution(input_str))\n\n\ninput_str = '''5 2\n3 1 2 1 3'''\nprint(solution(input_str))\n\n\ninput_str = '''5 100\n12 34 55 43 21'''\nprint(solution(input_str)) "
    },
    {
        "number": 4032,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    problems = list(map(int, input().split()))\n    \n    left_count = 0\n    right_count = 0\n    \n    for problem in problems:\n        if problem <= k:\n            left_count += 1\n            right_count += 1\n        elif left_count > 0:\n            left_count -= 1\n        else:\n            break\n            \n    return str(max(left_count, right_count))\n"
    },
    {
        "number": 4032,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    n, k = map(int, input_list[0].split())\n    a = list(map(int, input_list[1].split()))\n    \n    left_count = 0\n    right_count = n\n    \n    while left_count < right_count:\n        if a[left_count] <= k:\n            a.pop(left_count)\n            left_count += 1\n        else:\n            break\n    \n    while right_count >= left_count:\n        if a[right_count-1] <= k:\n            a.pop(right_count-1)\n            right_count -= 1\n        else:\n            break\n    \n    return max(left_count, right_count)\n\n\ninput_str = \"\"\"8 4\n4 2 3 1 5 1 6 4\"\"\"\n\noutput = solution(input_str)\nprint(output) "
    },
    {
        "number": 4032,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    problems = list(map(int, stdin.split()[2:]))\n    \n    left_problems = 0\n    right_problems = 0\n    \n    for i in range(n):\n        if problems[i] <= k:\n            left_problems += 1\n            problems.pop(0)\n        else:\n            break\n    \n    for i in range(n-1, -1, -1):\n        if problems[i] <= k:\n            right_problems += 1\n            problems.pop()\n        else:\n            break\n    \n    return max(left_problems, right_problems)"
    },
    {
        "number": 4032,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    \n    max_solved_problems = 0\n    left_index, right_index = 0, n - 1\n    \n    while left_index <= right_index:\n        if a[left_index] <= k and a[right_index] <= k:\n            max_solved_problems += 1\n            left_index += 1\n            right_index -= 1\n        elif a[left_index] > k:\n            left_index += 1\n        else:\n            right_index -= 1\n            \n    return str(max_solved_problems)"
    },
    {
        "number": 4032,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    \n    max_solved_problems = 0\n    left_solved_problems = 0\n    right_solved_problems = 0\n    \n    for problem in a:\n        if problem <= k:\n            max_solved_problems += 1\n            if left_solved_problems < right_solved_problems:\n                left_solved_problems += 1\n            else:\n                right_solved_problems += 1\n        else:\n            break\n    \n    return str(max_solved_problems)\n\n\ninput_string = \"\"\"8 4\n4 2 3 1 5 1 6 4\"\"\"\nprint(solution(input_string))\n\ninput_string = \"\"\"5 2\n3 1 2 1 3\"\"\"\nprint(solution(input_string))\n\ninput_string = \"\"\"5 100\n12 34 55 43 21\"\"\"\nprint(solution(input_string)) "
    },
    {
        "number": 4032,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    problems = list(map(int, input().split()))\n    \n    left_problems = [problems[0]]\n    right_problems = [problems[-1]]\n    max_problems = 0\n    \n    while left_problems and right_problems:\n        if left_problems[-1] > k and right_problems[0] > k:\n            break\n        \n        max_problems += 1\n        \n        if left_problems[-1] <= k:\n            left_problems.pop()\n        if right_problems[0] <= k:\n            right_problems.pop(0)\n    \n    return max_problems\n\n\ninput_str = \"\"\"8 4\n4 2 3 1 5 1 6 4\"\"\"\noutput = solution(input_str)\nprint(output)  # Output: 5\n\n\ninput_str = \"\"\"5 2\n3 1 2 1 3\"\"\"\noutput = solution(input_str)\nprint(output)  # Output: 0\n\n\ninput_str = \"\"\"5 100\n12 34 55 43 21\"\"\"\noutput = solution(input_str)\nprint(output)  # Output: 5 "
    },
    {
        "number": 4032,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    left, right = 0, n - 1\n    max_solved = 0\n\n    while left <= right:\n        if a[left] <= k:\n            max_solved += 1\n            left += 1\n        if a[right] <= k:\n            max_solved += 1\n            right -= 1\n\n        if a[left] > k and a[right] > k:\n            break\n\n    return str(max_solved)\n\n\ninput_data = \"\"\"8 4\n4 2 3 1 5 1 6 4\"\"\"\nprint(solution(input_data)) "
    },
    {
        "number": 4033,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    perimeter = 2 * (a + b)\n    return str(perimeter)\n\ndef"
    },
    {
        "number": 4033,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return min(a+b, a+b-1)\n\ndef"
    },
    {
        "number": 4033,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == 0:\n        return 4 * b\n    elif b == 0:\n        return 4 * a\n    else:\n        return min(4 * a, 4 * b, a + b)\n"
    },
    {
        "number": 4033,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        a, b = b, a\n    perimeter = min(a + b, a * 2 + b * 2, 2 * a + b * 2)\n    return str(perimeter)\n"
    },
    {
        "number": 4033,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    max_a = a + b\n    min_perimeter = float('inf')\n\n    for i in range(max_a // 2 + 1):\n        red_tiles = i\n        blue_tiles = max_a - 2 * red_tiles\n        perimeter = 4 * (red_tiles + blue_tiles)\n        min_perimeter = min(min_perimeter, perimeter)\n\n    return str(min_perimeter)\n\n\ndef"
    },
    {
        "number": 4033,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return max(a, b) * 2"
    },
    {
        "number": 4033,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    perimeter = min(a + b, a + 2 * b, 2 * a + b)\n    return str(perimeter)"
    },
    {
        "number": 4033,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return min(a, b) * 2 + max(a, b)\n\n\ndef"
    },
    {
        "number": 4033,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a + b == 1:\n        return \"1\"\n    else:\n        return \"12\""
    },
    {
        "number": 4033,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return max(a, b) * 2 + min(a, b)"
    },
    {
        "number": 4034,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    \n    if n == 1:\n        return \"YES\\n0\"\n    \n    colors = ['0', '1']\n    color_dict = {}\n    for i in range(n):\n        if s[i] not in color_dict:\n            color_dict[s[i]] = colors[0]\n            colors.reverse()\n        else:\n            color_dict[s[i]] = colors[1]\n            colors.reverse()\n    \n    for i in range(n-1):\n        if color_dict[s[i]] != color_dict[s[i+1]]:\n            color_dict[s[i]] = '0'\n            color_dict[s[i+1]] = '1'\n            return \"YES\\n\" + ''.join([color_dict[s[i]] for i in range(n)])\n    \n    return \"NO\"\n\ndef"
    },
    {
        "number": 4034,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    s = stdin.split(\"\\n\")[1]\n    \n    # check if it's possible to sort the string\n    if sorted(s) != s:\n        return \"NO\\n\"\n    \n    # otherwise, assign the first color to the first character\n    color = \"0\"\n    coloring = [color]\n    \n    # iterate through the string and swap adjacent characters if they have different colors\n    for i in range(1, n):\n        if s[i] < s[i-1]:\n            s = s[:i] + s[i-1] + s[i+1:]\n            s = s[:i-1] + s[i] + s[i+1:]\n            s = s[:i-2] + s[i-1] + s[i+1:]\n            coloring = [color] + [color] + coloring[2:]\n        else:\n            coloring.append(color)\n    \n    # convert the coloring list to a string\n    coloring = \"\".join(coloring)\n    \n    return \"YES\\n\" + coloring\n"
    },
    {
        "number": 4034,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    s = stdin.split(\"\\n\")[1]\n\n    # Check if it is possible to color the string in such a way that it becomes sorted\n    if len(set(s)) == 1:\n        return \"NO\"\n\n    # Calculate the frequency of each character in the string\n    freq = [0] * 2\n    for char in s:\n        if char == 'a':\n            freq[0] += 1\n        elif char == 'b':\n            freq[1] += 1\n\n    # If the characters in the string are not equally distributed, it is impossible to make the string sorted\n    if abs(freq[0] - freq[1]) % 2 == 1:\n        return \"NO\"\n\n    # Otherwise, it is possible to make the string sorted by swapping characters\n    return \"YES\", \"0\" * n\n\n\ninput_str = \"\"\"9\nabacbecfd\"\"\"\nprint(solution(input_str))\n\ninput_str = \"\"\"8\naaabbcbb\"\"\"\nprint(solution(input_str))\n\ninput_str = \"\"\"7\nabcdedc\"\"\"\nprint(solution(input_str))\n\ninput_str = \"\"\"5\nabcde\"\"\"\nprint(solution(input_str))\n\"\"\" "
    },
    {
        "number": 4034,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n    \n    if n == 1:\n        return \"YES\\n0\"\n    \n    color = 0\n    color_s = [str(color) for _ in range(n)]\n    \n    for i in range(n-1):\n        if s[i] > s[i+1]:\n            color ^= 1\n            color_s[i] = str(color)\n            color_s[i+1] = str(color ^ 1)\n            break\n        elif s[i] < s[i+1]:\n            color ^= 1\n            color_s[i+1] = str(color ^ 1)\n            break\n    \n    if i == n-2:\n        return \"NO\"\n    \n    for j in range(i+1, n-1):\n        if s[j] > s[j+1]:\n            color_s[j] = str(color ^ 1)\n            color_s[j+1] = str(color)\n            break\n        elif s[j] < s[j+1]:\n            color_s[j+1] = str(color ^ 1)\n            break\n    \n    if j == n-2:\n        return \"NO\"\n    \n    return \"YES\\n\" + \"\".join(color_s)\n"
    },
    {
        "number": 4034,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n\n    # First, we need to check if the given string can be sorted\n    # by comparing each character with the next one.\n    for i in range(n - 1):\n        if s[i] > s[i + 1]:\n            return \"NO\"\n\n    # If the string is already sorted, we don't need to color it.\n    return \"YES\", \"0\" * n\n"
    },
    {
        "number": 4034,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n\n    def is_sorted(colored_s: str) -> bool:\n        for i in range(len(colored_s) - 1):\n            if colored_s[i] == colored_s[i + 1]:\n                return False\n            if colored_s[i] > colored_s[i + 1]:\n                return False\n        return True\n\n    def color_string(s: str) -> str:\n        colors = [0] * n\n        for i in range(n - 1):\n            if colors[i] != colors[i + 1]:\n                colors[i + 1] = colors[i] ^ 1\n        return ''.join(map(str, colors))\n\n    colored_s = color_string(s)\n    if is_sorted(colored_s):\n        return \"YES\\n\" + colored_s\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    colors = [0] * n\n    groups = [1] * n\n    \n    for i in range(1, n):\n        if s[i-1] > s[i]:\n            colors[i] = 1\n            groups[i-1] += 1\n            if i > 1 and colors[i-2] != colors[i]:\n                colors[i-1] = colors[i-2] ^ 1\n                groups[i-2] += 1\n                colors[i] = colors[i-2]\n    \n    if max(groups) == 1:\n        return \"NO\"\n    else:\n        return \"YES\" + '\\n' + ''.join(str(x) for x in colors)\n"
    },
    {
        "number": 4034,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n\n    if n < 2:\n        return \"YES\" if n == 1 else \"NO\"\n\n    colors = [0] * n\n\n    for i in range(n - 1):\n        if s[i] > s[i + 1]:\n            colors[i] = 1\n            colors[i + 1] = 1\n\n    if colors.count(0) > colors.count(1):\n        return \"NO\"\n\n    return \"YES\", \"\".join(map(str, colors))\n"
    },
    {
        "number": 4034,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n\n    # color the string with 2 colors\n    color_1 = [0] * n\n    color_2 = [1] * n\n\n    # check if the string is already sorted\n    if sorted(s) == list(s):\n        return \"YES\\n\" + ''.join(map(str, color_1))\n\n    # swap adjacent characters if they have different colors\n    for i in range(1, n):\n        if s[i-1] > s[i]:\n            color_1[i-1], color_2[i] = color_2[i], color_1[i-1]\n\n    # check if the swapped string is sorted\n    swapped_s = ''.join(map(lambda x: str(color_1.index(x)), s))\n    if sorted(swapped_s) == list(swapped_s):\n        return \"YES\\n\" + ''.join(map(str, color_1))\n\n    return \"NO\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.strip().split('\\n')\n    n = int(input_list[0])\n    s = input_list[1]\n    \n    if n == 1:\n        return \"YES\\n0\"\n    \n    # Check if it's possible to sort the string by swapping\n    i = 0\n    while i < n - 1:\n        if ord(s[i]) > ord(s[i+1]):\n            if i == 0:\n                return \"NO\"\n            break\n        i += 1\n    \n    # Generate a coloring\n    color = [0] * n\n    i = 0\n    while i < n - 1:\n        if ord(s[i]) > ord(s[i+1]):\n            color[i] = 1\n            color[i+1] = 0\n            i += 1\n        i += 1\n    if i == n - 1:\n        color[i] = 1\n    \n    # Check if the coloring is correct\n    for i in range(n):\n        if ord(s[i]) > ord(s[color[i]]):\n            return \"NO\"\n    \n    # Generate the correct coloring\n    correct_coloring = ''.join([str(x) for x in color])\n    \n    return \"YES\\n\" + correct_coloring"
    },
    {
        "number": 4035,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    prices = []\n\n    for price in range(1, A + 1):\n        consumption_tax_8 = int(price * 0.08)\n        consumption_tax_10 = int(price * 0.1)\n\n        if consumption_tax_8 <= B and consumption_tax_10 <= B:\n            prices.append(price)\n\n    if not prices:\n        return \"-1\"\n    else:\n        return str(min(prices))\n\n\ndef"
    },
    {
        "number": 4035,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    price = 0\n    while price <= B:\n        if price * 0.08 == int(price * 0.08) and price * 0.1 == int(price * 0.1):\n            return str(price)\n        price += 1\n    return \"-1\"\n"
    },
    {
        "number": 4035,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    low = int(25 * (1 - 0.08))\n    high = int(25 * (1 - 0.1))\n    \n    if low <= B and high >= A:\n        return str(low)\n    else:\n        return str(-1)\n\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4035,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    min_price = float('inf')\n    \n    for price in range(A, B+1):\n        tax_rate_8 = int(price * 0.08)\n        tax_rate_10 = int(price * 0.1)\n        \n        if tax_rate_8 == A or tax_rate_10 == A:\n            min_price = min(min_price, price)\n        \n    return str(min_price) if min_price != float('inf') else '-1'\n"
    },
    {
        "number": 4035,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    prices = []\n    for price in range(1, B + 1):\n        if 2 * price <= A + 2 * price * 0.08 and 2 * price <= A + 2 * price * 0.1:\n            prices.append(price)\n    return str(min(prices)) if prices else -1\n"
    },
    {
        "number": 4035,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    prices = []\n    for price in range(A, B + 1):\n        tax_8 = int(price * 0.08)\n        tax_10 = int(price * 0.1)\n        if tax_8 <= A or tax_10 <= A:\n            prices.append(price)\n    if prices:\n        return str(min(prices))\n    else:\n        return \"-1\""
    },
    {
        "number": 4035,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    price = 1\n    while True:\n        consumption_tax_8 = int(price * 0.08)\n        consumption_tax_10 = int(price * 0.1)\n        if consumption_tax_8 <= A and consumption_tax_10 <= B:\n            return str(price)\n        price += 1\n    return -1\n"
    },
    {
        "number": 4035,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    min_price = float('inf')\n    for price in range(1, 101):\n        tax_8 = int(price * 0.08)\n        tax_10 = int(price * 0.1)\n        if tax_8 <= A and tax_10 <= B and price < min_price:\n            min_price = price\n    return str(min_price) if min_price < float('inf') else '-1'"
    },
    {
        "number": 4035,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    prices = []\n    for price in range(1, B+1):\n        consumption_tax_8 = price * 0.08\n        consumption_tax_10 = price * 0.1\n        if round(consumption_tax_8) == A and round(consumption_tax_10) == B:\n            prices.append(price)\n    if len(prices) > 0:\n        return str(min(prices))\n    else:\n        return \"-1\""
    },
    {
        "number": 4035,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    min_price = float('inf')\n    for price in range(1, 101):\n        tax_8 = int(price * 0.08)\n        tax_10 = int(price * 0.1)\n        if A <= tax_8 <= B and tax_8 <= tax_10:\n            min_price = min(min_price, price)\n        if min_price < float('inf'):\n            return str(min_price)\n    return \"-1\"\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4036,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def check_conditions(a):\n        return (sum(a) == n) and (all(a[i] > 0 for i in range(k))) and (all(a[i] < a[i+1] <= 2*a[i] for i in range(k-1)))\n    \n    n, k = map(int, stdin.split())\n    if n == 1 and k == 1:\n        return \"YES\\n1\"\n    if n > 0 and k > 0:\n        for a in itertools.product(range(1, n+1), repeat=k):\n            if check_conditions(a):\n                return \"YES\\n\" + \" \".join(map(str, a))\n    return \"NO\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    \n    if k == 1:\n        return \"YES\\n1\"\n    \n    a = [0] * k\n    \n    for i in range(k - 2, -1, -1):\n        a[i] = a[i + 1] // 2 + 1\n        \n    for i in range(k - 1, -1, -1):\n        if a[i] > n:\n            return \"NO\"\n        n -= a[i]\n        \n    return \"YES\\n\" + \"\\n\".join(map(str, a))\n\n\ninput_str = \"26 6\\n\"\noutput_str = solution(input_str)\nprint(output_str)\n\ninput_str = \"8 3\\n\"\noutput_str = solution(input_str)\nprint(output_str)\n\ninput_str = \"1 1\\n\"\noutput_str = solution(input_str)\nprint(output_str)\n\ninput_str = \"9 4\\n\"\noutput_str = solution(input_str)\nprint(output_str) "
    },
    {
        "number": 4036,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    if k < 2 or k > 10**5 or n < 1 or n > 10**9:\n        return \"NO\"\n    \n    def helper(k, n):\n        if k == 1:\n            return [n]\n        if k == 2:\n            if n % 2 == 0:\n                return [n // 2, n // 2]\n            else:\n                return [n // 2, n // 2 + 1]\n        if n < k:\n            return []\n        if n % k == 0:\n            return [n // k] * k\n        if n % k == 1:\n            return [k] * (n // k) + [1]\n        return []\n    \n    result = helper(k, n)\n    if not result:\n        return \"NO\"\n    return \"YES\\n\" + \" \".join(map(str, result))\n\n\ninput_str = \"26 6\\n\"\noutput_str = solution(input_str)\nprint(output_str) "
    },
    {
        "number": 4036,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n, k = map(int, input_list[0].split())\n    a = [1] * k\n    if n % k != 0:\n        return \"NO\"\n    else:\n        x = n // k\n        for i in range(k-1):\n            a[i+1] = min(2 * a[i], x)\n            x -= a[i+1]\n        a[k-1] = x\n        return \"YES\\n\" + \" \".join(map(str, a))\n\ninput_list = [\n    \"26 6\",\n    \"8 3\",\n    \"1 1\",\n    \"9 4\",\n]\n\noutput_list = [\n    \"YES\\n1 2 4 5 6 8\",\n    \"NO\",\n    \"YES\\n1\",\n    \"NO\",\n]\n\nfor input_str, output_str in zip(input_list, output_list):\n    print(\"Input:\", input_str)\n    print(\"Output:\", solution(input_str))\n    print(\"Expected Output:\", output_str)\n    print(\"*\" * 10)\n    "
    },
    {
        "number": 4036,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[1:3])\n    if k == 1 and n > 1:\n        return \"NO\"\n    a = [1] * k\n    for i in range(1, k):\n        a[i] = min(a[i - 1] * 2, n - sum(a[:i]))\n    if sum(a) != n:\n        return \"NO\"\n    return \"YES\\n\" + \" \".join(map(str, a))\n\n\nstdin = \"26 6\\n\"\nprint(solution(stdin))\n\nstdin = \"8 3\\n\"\nprint(solution(stdin))\n\nstdin = \"1 1\\n\"\nprint(solution(stdin))\n\nstdin = \"9 4\\n\"\nprint(solution(stdin)) "
    },
    {
        "number": 4036,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_values = stdin.splitlines()\n    n, k = map(int, input_values[0].split())\n\n    def is_valid(a):\n        if sum(a) != n:\n            return False\n        for i in range(1, k):\n            if a[i] < a[i - 1] or a[i] > 2 * a[i - 1]:\n                return False\n        return True\n\n    for i in range(1, k + 1):\n        a = [i] * k\n        a[0] = 1\n        if is_valid(a):\n            return \"YES\\n\" + \" \".join(map(str, a))\n\n    return \"NO\\n\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(a: list) -> bool:\n        if sum(a) != n:\n            return False\n        for i in range(k):\n            if a[i] <= 0:\n                return False\n            if i < k - 1 and a[i] >= a[i + 1] * 2:\n                return False\n        return True\n\n    n, k = map(int, stdin.split())\n    if n % k != 0:\n        return \"NO\"\n\n    a = [n // k] * k\n    return \"YES\\n\" + \" \".join(map(str, a))\n\n\ninput_file = \"input.txt\"  # change input file name\nwith open(input_file, \"r\") as file:\n    stdin = file.read()\noutput = solution(stdin)\nprint(output) "
    },
    {
        "number": 4036,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(a):\n        return sum(a) == n and all(x > 0 for x in a) and all(a[i] < a[i+1] <= 2*a[i] for i in range(len(a)-1))\n\n    n, k = map(int, stdin.split()[:2])\n    for i in range(1, k+1):\n        a = [1] * i + [0] * (k-i)\n        if is_valid(a):\n            return \"YES\\n\" + \" \".join(map(str, a))\n    return \"NO\""
    },
    {
        "number": 4036,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    n, k = int(input_list[0]), int(input_list[1])\n    \n    if n > 2*k:\n        return \"NO\"\n    elif n == 2*k:\n        a = [n//k]*k\n        return \"YES\\n\" + \" \".join(map(str, a))\n    else:\n        for i in range(1, k+1):\n            if n % i == 0:\n                return \"YES\\n\" + \" \".join(map(str, [i]*k))\n        return \"NO\""
    },
    {
        "number": 4036,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    if n % k == 0:\n        return \"YES\\n\" + \" \".join(str(n//k) for _ in range(k))\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4037,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def get_project_score(a: int, b: int) -> int:\n        return a + abs(b)\n\n    def calculate_score(projects: list) -> int:\n        score = 0\n        for project in projects:\n            score += get_project_score(project[0], project[1])\n        return score\n\n    def can_complete_projects(projects: list, score: int, max_score: int) -> bool:\n        if score > max_score:\n            return False\n        for project in projects:\n            if score + get_project_score(project[0], project[1]) > max_score:\n                return False\n        return True\n\n    def find_max_size(projects: list) -> int:\n        max_size = 0\n        for i in range(len(projects)):\n            projects_subset = [projects[j] for j in range(i + 1) if j != i]\n            score = calculate_score(projects_subset)\n            max_score = calculate_score(projects_subset)\n            if can_complete_projects(projects_subset, score, max_score):\n                max_size = max(max_size, len(projects_subset))\n        return max_size\n\n    n, r = map(int, stdin.split()[:2])\n    projects = [tuple(map(int, stdin.split()[2 * i + 2: 2 * i + 4])) for i in range(n)]\n    max_size = find_max_size(projects)\n    return str(max_size)\n"
    },
    {
        "number": 4037,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(rating: int) -> bool:\n        return 0 <= rating <= 30000\n\n    n, r = map(int, stdin.split()[0:2])\n    projects = [list(map(int, input().split())) for _ in range(n)]\n\n    dp = [[0] * (r + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        a, b = projects[i - 1]\n        for j in range(r + 1):\n            if is_valid(j - a) and is_valid(j + b):\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - a] + b)\n            else:\n                dp[i][j] = dp[i - 1][j]\n\n    return max(dp[-1])\n"
    },
    {
        "number": 4037,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split()[0:2])\n    projects = [tuple(map(int, stdin.split()[i:i+2])) for i in range(2, 2*n+1, 2)]\n\n    dp = [0] * (r + 1)\n    for i in range(n):\n        a, b = projects[i]\n        for j in range(r, a - 1, -1):\n            dp[j] = max(dp[j], dp[j - a] + b)\n\n    result = [i for i in range(r, -1, -1) if dp[i] > 0]\n    return len(result)\n"
    },
    {
        "number": 4037,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def find_subset_size(n: int, r: int, projects: list) -> int:\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        for i in range(1, n + 1):\n            a, b = projects[i - 1]\n            for j in range(r + b, -1, -1):\n                dp[i] = max(dp[i], dp[i - 1] + (a <= j))\n        return dp[n]\n\n    n, r = map(int, input().split())\n    projects = []\n    for _ in range(n):\n        a, b = map(int, input().split())\n        projects.append((a, b))\n\n    return str(find_subset_size(n, r, projects))\n"
    },
    {
        "number": 4037,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    n, r = map(int, input_data[0].split())\n    a = []\n    b = []\n    for i in range(1, n+1):\n        ai, bi = map(int, input_data[i].split())\n        a.append(ai)\n        b.append(bi)\n    \n    dp = [0]*(r+1)\n    for i in range(n):\n        for j in range(r, a[i]-1, -1):\n            dp[j] = max(dp[j], dp[j-a[i]]+b[i])\n    \n    result = []\n    i = r\n    while i >= 0 and dp[i] > 0:\n        if dp[i] == dp[i-a[0]]+b[0]:\n            result.append(0)\n            i -= a[0]\n        else:\n            for j in range(1, n):\n                if dp[i] == dp[i-a[j]]+b[j] and dp[i-a[j]] == dp[i-a[j-1]]+b[j-1]:\n                    result.append(j)\n                    i -= a[j]\n                    break\n    \n    return str(len(result))\n"
    },
    {
        "number": 4037,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def find_max_subset_size(projects, rating):\n        projects.sort(key=lambda x: x[0], reverse=True)\n        max_size = 0\n        for i in range(len(projects)):\n            if rating + projects[i][1] >= 0:\n                max_size += 1\n                rating += projects[i][1]\n            else:\n                break\n        return max_size\n\n    n, r = map(int, input().split())\n    projects = []\n    for _ in range(n):\n        a, b = map(int, input().split())\n        projects.append((a, b))\n\n    max_subset_size = find_max_subset_size(projects, r)\n    return str(max_subset_size)"
    },
    {
        "number": 4037,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n, r = map(int, input_list[0].split())\n    projects = []\n    for i in range(1, n+1):\n        a, b = map(int, input_list[i].split())\n        projects.append((a, b))\n\n    dp = [0] * (r+1)\n    for a, b in projects:\n        for i in range(r, a-1, -1):\n            dp[i] = max(dp[i], dp[i-a] + b)\n\n    max_size = dp[r]\n    result = [i+1 for i in range(len(dp)-1) if dp[i] == max_size]\n    return len(result)\n"
    },
    {
        "number": 4037,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def dp(i: int, rating: int) -> int:\n        if i < 0 or rating < 0:\n            return 0\n        if rating >= projects[i][0]:\n            return max(dp(i - 1, rating + projects[i][1]), dp(i, rating))\n        return dp(i - 1, rating)\n\n    n, r = map(int, stdin.split()[:2])\n    projects = []\n    for _ in range(n):\n        a, b = map(int, stdin.split()[2:4])\n        projects.append((a, b))\n\n    size = dp(n - 1, r)\n    return size\n"
    },
    {
        "number": 4037,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    n, r = map(int, input_data[0].split())\n    projects = [(int(a), int(b)) for i, line in enumerate(input_data[1:]) if i < n]\n\n    def solve(a, b, r):\n        if r < 0:\n            return 0\n        if len(a) == 0:\n            return 0\n        if len(a) == 1:\n            return 1\n        max_size = 0\n        for i in range(len(a)):\n            left = a[:i]\n            right = a[i+1:]\n            if r >= b[i]:\n                max_size = max(max_size, 1 + solve(left, b[:i] + b[i+1:], r - b[i]))\n            max_size = max(max_size, solve(left, b[:i] + b[i+1:], r))\n        return max_size\n\n    result = solve(projects, [p[1] for p in projects], r)\n    return str(result)\n\n\ndef"
    },
    {
        "number": 4037,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    n, r = map(int, input_data[0].split())\n    projects = [list(map(int, line.split())) for line in input_data[1:]]\n\n    # Calculate the required rating for each project\n    required_rating = [project[0] for project in projects]\n\n    # Calculate the rating change for each project\n    rating_change = [project[1] for project in projects]\n\n    # Sort the projects based on the required rating in descending order\n    sorted_projects = sorted(range(n), key=lambda i: required_rating[i], reverse=True)\n\n    # Calculate the maximum possible rating after completing each project\n    max_rating = [r] * n\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                if required_rating[j] <= max_rating[i]:\n                    max_rating[i] += rating_change[j]\n\n    # Remove projects that would decrease the rating below zero\n    subset_projects = [sorted_projects[i] for i in range(n) if max_rating[i] >= 0]\n\n    # Print the size of the maximum possible subset of projects\n    return len(subset_projects)\n\n\nstdin = \"\"\"3 4\n4 6\n10 -2\n8 -1\"\"\"\n\nprint(solution(stdin))  # Output: 3\n\nstdin = \"\"\"5 20\n45 -6\n34 -15\n10 34\n1 27\n40 -45\"\"\"\n\nprint(solution(stdin))  # Output: 5\n\nstdin = \"\"\"3 2\n300 -300\n1 299\n1 123\"\"\"\n\nprint(solution(stdin))  # Output: 3 "
    },
    {
        "number": 4038,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    nums = list(map(int, stdin.split('\\n')[1].split()))\n\n    # Initialize the matrix with the given numbers\n    matrix = [[nums[i * n + j] for j in range(n)] for i in range(n)]\n\n    # Check if the matrix is palindromic\n    for i in range(n):\n        if matrix[i] != matrix[n - i - 1]:\n            return \"NO\"\n\n    # Print the matrix\n    for i in range(n):\n        print(' '.join(map(str, matrix[i])))\n\n    return \"YES\""
    },
    {
        "number": 4038,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    numbers = [int(x) for x in stdin.splitlines()[1].split()]\n\n    if n % 2 == 0:\n        i, j = n, n\n    else:\n        i, j = n, n + 1\n\n    def is_palindromic(matrix):\n        for k in range(n):\n            if matrix[k] != matrix[n - k - 1]:\n                return False\n        return True\n\n    def generate_matrix(i, j, numbers):\n        if i * j == 0:\n            return []\n\n        matrix = []\n        for _ in range(i):\n            row = []\n            for _ in range(j):\n                row.append(numbers.pop(0))\n            matrix.append(row)\n\n        if is_palindromic(matrix):\n            return matrix\n        else:\n            return generate_matrix(i - 1, j, numbers) or generate_matrix(i, j - 1, numbers)\n\n    matrix = generate_matrix(i, j, numbers)\n\n    if matrix:\n        return \"YES\\n\" + \"\\n\".join(\" \".join(str(x) for x in row) for row in matrix)\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    numbers = list(map(int, stdin.splitlines()[1].split()))\n    \n    if len(numbers) != n ** 2:\n        return \"NO\"\n    \n    def is_palindrome(matrix: list) -> bool:\n        for i in range(n):\n            if matrix[i] != matrix[n-i-1]:\n                return False\n        return True\n    \n    def build_matrix(numbers: list) -> list:\n        matrix = [[0] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(n):\n                matrix[i][j] = numbers.pop(0)\n        return matrix\n    \n    def is_valid_matrix(matrix: list) -> bool:\n        row_frequencies = [0] * n\n        col_frequencies = [0] * n\n        for i in range(n):\n            for j in range(n):\n                if matrix[i][j] == 0:\n                    return False\n                row_frequencies[i] += 1\n                col_frequencies[j] += 1\n        return all(row_frequencies[i] == row_frequencies[n-i-1] for i in range(n)) and all(col_frequencies[j] == col_frequencies[n-j-1] for j in range(n))\n    \n    matrix = build_matrix(numbers)\n    if is_palindrome(matrix):\n        for row in matrix:\n            print(\" \".join(map(str, row)))\n        return \"YES\"\n    else:\n        for i in range(n):\n            for j in range(n):\n                matrix[i][j] += 1\n            matrix = build_matrix(numbers)\n            if is_palindrome(matrix):\n                for row in matrix:\n                    print(\" \".join(map(str, row)))\n                return \"YES\"\n        return \"NO\"\n\n\ninput_data = \"\"\"4\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\n3\n1 1 1 1 1 3 3 3 3\n4\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\"\"\"\n\nresult = solution(input_data)\nprint(result) "
    },
    {
        "number": 4038,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    matrix = [[0] * n for _ in range(n)]\n    for i in range(n**2):\n        if not matrix[i//n%n][i%n]:\n            matrix[i//n%n][i%n] = a[i]\n        else:\n            return \"NO\"\n    \n    for i in range(n):\n        row = [matrix[i][j] for j in range(n) if matrix[i][j]]\n        if sorted(row) != row:\n            return \"NO\"\n        \n        col = [matrix[j][i] for j in range(n) if matrix[j][i]]\n        if sorted(col) != col:\n            return \"NO\"\n    \n    return \"YES\\n\" + \"\\n\".join([\" \".join(map(str, row)) for row in matrix if any(row)])"
    },
    {
        "number": 4038,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n = int(input_list[0])\n    nums = list(map(int, input_list[1].split()))\n\n    def is_palindrome(matrix):\n        rows = len(matrix)\n        cols = len(matrix[0])\n        for i in range(rows):\n            for j in range(cols):\n                if matrix[i][j] != matrix[rows - i - 1][cols - j - 1]:\n                    return False\n        return True\n\n    def find_valid_matrix(nums):\n        matrix = [[] for _ in range(n)]\n        row_index = 0\n        col_index = 0\n        for num in nums:\n            if len(matrix[row_index]) == col_index:\n                matrix[row_index].append(num)\n                row_index += 1\n            else:\n                matrix[row_index].append(num)\n                col_index += 1\n        for i in range(len(matrix)):\n            if len(matrix[i]) != n:\n                return None\n        return matrix\n\n    valid_matrix = find_valid_matrix(nums)\n    if valid_matrix is None:\n        return \"NO\"\n\n    if is_palindrome(valid_matrix):\n        for row in valid_matrix:\n            print(' '.join(map(str, row)))\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4038,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    numbers = list(map(int, stdin.splitlines()[1].split()))\n    \n    if len(numbers) != n**2:\n        return \"NO\"\n    \n    matrix = [[0 for _ in range(n)] for _ in range(n)]\n    \n    def is_palindromic(matrix):\n        for i in range(n):\n            if matrix[i] != matrix[n-i-1]:\n                return False\n        return True\n    \n    def fill_matrix(numbers, matrix, i, j):\n        if i == n:\n            if is_palindromic(matrix):\n                return True\n            return False\n        \n        for k in range(n):\n            if matrix[i][k] == 0:\n                matrix[i][k] = numbers[j]\n                if fill_matrix(numbers, matrix, i+1, j+1):\n                    return True\n                matrix[i][k] = 0\n        \n        return False\n    \n    if fill_matrix(numbers, matrix, 0, 0):\n        for i in range(n):\n            print(\" \".join(map(str, matrix[i])))\n    else:\n        return \"NO\""
    },
    {
        "number": 4038,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    numbers = list(map(int, stdin.splitlines()[1].split()))\n    \n    def is_palindromic(matrix: list) -> bool:\n        n = len(matrix)\n        for i in range(n // 2):\n            for j in range(n):\n                if matrix[i][j] != matrix[n - i - 1][n - j - 1]:\n                    return False\n        return True\n    \n    def place_numbers(numbers: list) -> list:\n        n = len(numbers)\n        matrix = [[0] * n for _ in range(n)]\n        \n        def place_number(num: int, x: int, y: int) -> bool:\n            if matrix[x][y] != 0:\n                return False\n            matrix[x][y] = num\n            if x + 1 < n:\n                if not place_number(num, x + 1, y):\n                    return False\n            if y + 1 < n:\n                if not place_number(num, x, y + 1):\n                    return False\n            return True\n        \n        def find_starting_position() -> tuple:\n            if n % 2 == 0:\n                return (n // 2 - 1, n // 2 - 1)\n            else:\n                return (n // 2, n // 2)\n        \n        x, y = find_starting_position()\n        for num in numbers:\n            if not place_number(num, x, y):\n                return None\n            x += 1\n            if x == n:\n                x = 0\n                y += 1\n        \n        return matrix\n    \n    matrix = place_numbers(numbers)\n    if matrix is None:\n        return \"NO\"\n    elif is_palindromic(matrix):\n        return \"YES\\n\" + \"\\n\".join([\" \".join(map(str, row)) for row in matrix])\n    else:\n        return \"NO\"\n\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    numbers = list(map(int, stdin.splitlines()[1].split()))\n\n    if len(numbers) != n**2:\n        return \"NO\"\n\n    num_count = {}\n    for num in numbers:\n        if num in num_count:\n            num_count[num] += 1\n        else:\n            num_count[num] = 1\n\n    for key in num_count:\n        if num_count[key] != 1:\n            return \"NO\"\n\n    matrix = [[0 for _ in range(n)] for _ in range(n)]\n\n    row = 0\n    col = 0\n    for num in numbers:\n        matrix[row][col] = num\n        row += 1\n        if row == n:\n            row = 0\n            col += 1\n            if col == n:\n                col = 0\n\n    if is_palindromic(matrix):\n        for i in range(n):\n            print(\" \".join(map(str, matrix[i])))\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    numbers = list(map(int, stdin.split('\\n')[1].split()))\n    n_squared = n ** 2\n\n    if n_squared != len(numbers):\n        return \"NO\"\n\n    matrix = [[0 for _ in range(n)] for _ in range(n)]\n\n    def is_palindromic(matrix):\n        for i in range(n):\n            if matrix[i] != matrix[n - 1 - i]:\n                return False\n        for j in range(n):\n            row = [matrix[i][j] for i in range(n)]\n            if row != row[::-1]:\n                return False\n        return True\n\n    def find_number(number):\n        for i in range(n_squared):\n            if numbers[i] == number:\n                return i\n\n    for i in range(n_squared):\n        row, col = i // n, i % n\n        number = numbers[i]\n        index = find_number(number)\n        numbers[index] = -1\n        matrix[row][col] = number\n\n    if is_palindromic(matrix):\n        return \"YES\\n\" + '\\n'.join(str(row) for row in matrix)\n    else:\n        return \"NO\"\n\n\nstdin = \"\"\"4\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\"\"\"\n\nprint(solution(stdin)) "
    },
    {
        "number": 4038,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    numbers = list(map(int, stdin.splitlines()[1].split()))\n    \n    if n * n != len(numbers):\n        return \"NO\"\n    \n    matrix = [[0] * n for _ in range(n)]\n    \n    def is_palindrome(matrix: List[List[int]]) -> bool:\n        for i in range(n):\n            for j in range(n):\n                if matrix[i][j] != matrix[n - 1 - i][n - 1 - j]:\n                    return False\n        return True\n    \n    def fill_matrix(nums: List[int], matrix: List[List[int]]) -> bool:\n        for i in range(n):\n            for j in range(n):\n                if matrix[i][j] == 0:\n                    for num in nums:\n                        if num == 0:\n                            continue\n                        row, col = i, j\n                        while row < n and col < n and matrix[row][col] != 0:\n                            row, col = row + 1, col + 1\n                        if row < n and col < n:\n                            matrix[row][col] = num\n                            if fill_matrix(nums, matrix):\n                                return True\n                            matrix[row][col] = 0\n                    return False\n        return True\n    \n    nums = numbers.copy()\n    nums.sort()\n    if fill_matrix(nums, matrix):\n        if is_palindrome(matrix):\n            return \"YES\\n\" + \"\\n\".join(map(lambda x: \" \".join(map(str, x)), matrix))\n    return \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split()[0:2])\n    projects = []\n    for _ in range(n):\n        a, b = map(int, stdin.split()[2:4])\n        projects.append((a, b))\n    for i in range(n):\n        if r >= projects[i][0]:\n            r += projects[i][1]\n        else:\n            return \"NO\"\n    return \"YES\"\n\n\ndef"
    },
    {
        "number": 4039,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split(\"\\n\")\n    n, r = map(int, input_data[0].split())\n    projects = []\n    for i in range(1, n+1):\n        a, b = map(int, input_data[i].split())\n        projects.append((a, b))\n    order = [i for i in range(1, n+1)]\n    can_complete = True\n\n    for i in range(n):\n        a, b = projects[i]\n        for j in range(i+1, n):\n            c, d = projects[j]\n            if a <= c and c <= a + r and d <= b and b <= d + r and d >= 0:\n                order.insert(i+1, j+1)\n                r -= d\n                can_complete = True\n                break\n        if not can_complete:\n            break\n\n    if can_complete and r >= 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 4039,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split()[:2])\n    a = [0] * n\n    b = [0] * n\n    projects = []\n    for _ in range(n):\n        a_i, b_i = map(int, stdin.split()[-2:])\n        a.append(a_i)\n        b.append(b_i)\n        projects.append((a_i, b_i))\n\n    # Check if it's possible to complete all projects\n    for i in range(n):\n        if a[i] > r:\n            return \"NO\"\n        r += b[i]\n        if r < 0:\n            return \"NO\"\n\n    # Check if the order of projects is valid\n    for i in range(n):\n        for j in range(i):\n            if a[i] + b[i] <= a[j] + b[j]:\n                return \"NO\"\n\n    return \"YES\"\n\n\ndef"
    },
    {
        "number": 4039,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n, r = map(int, input_list[0].split())\n    a = []\n    b = []\n    \n    for i in range(1, n+1):\n        a_i, b_i = map(int, input_list[i].split())\n        a.append(a_i)\n        b.append(b_i)\n    \n    def can_complete_all_projects(a: list, b: list) -> bool:\n        for i in range(n):\n            if a[i] > r:\n                return False\n            r += b[i]\n            if r < 0:\n                return False\n        return True\n    \n    if can_complete_all_projects(a, b):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4039,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, input().split())\n    projects = []\n    \n    for _ in range(n):\n        a, b = map(int, input().split())\n        projects.append((a, b))\n        \n    for i in range(n):\n        if projects[i][0] > r:\n            return \"NO\"\n        r += projects[i][1]\n        \n        if r < 0:\n            return \"NO\"\n        \n    return \"YES\"\n\n\ndef"
    },
    {
        "number": 4039,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split(\"\\n\")\n    n, r = map(int, input_data[0].split())\n    projects = [tuple(map(int, line.split())) for line in input_data[1:]]\n\n    def dfs(index: int, current_rating: int) -> bool:\n        if index == n:\n            return True\n        for i in range(index, n):\n            if current_rating + projects[i][1] >= 0 and current_rating + projects[i][0] <= r:\n                if dfs(i + 1, current_rating + projects[i][1]):\n                    return True\n        return False\n\n    return \"YES\" if dfs(0, r) else \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, input().split())\n    projects = []\n\n    for _ in range(n):\n        a, b = map(int, input().split())\n        projects.append((a, b))\n\n    # Sort projects by decreasing rating required\n    projects.sort(key=lambda x: (-x[0], -x[1]))\n\n    # Iterate through projects and check if rating is sufficient\n    for a, b in projects:\n        if r - a >= 0:\n            r += b\n        else:\n            return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2::2]))\n    b = list(map(int, stdin.split()[3::2]))\n\n    for i in range(n):\n        if a[i] > r:\n            return \"NO\"\n        r += b[i]\n        if r < 0:\n            return \"NO\"\n\n    return \"YES\""
    },
    {
        "number": 4039,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    n, r = map(int, input_data[0].split())\n    projects = [tuple(map(int, line.split())) for line in input_data[1:]]\n\n    # Check if it is possible to complete all projects\n    def is_possible(projects: list, rating: int) -> bool:\n        for a, b in projects:\n            if rating < a:\n                return False\n            rating += b\n        return True\n\n    # Check if the rating stays non-negative\n    def is_valid(projects: list, rating: int) -> bool:\n        for a, b in projects:\n            rating += b\n            if rating < 0:\n                return False\n        return True\n\n    # Check if the projects can be completed in the given order\n    def is_completable(projects: list, rating: int) -> bool:\n        order = []\n        for i, (a, b) in enumerate(projects):\n            if rating >= a:\n                order.append(i)\n                rating += b\n        if len(order) == len(projects):\n            return True\n        return False\n\n    # Check if there exists an order of projects that Polycarp can complete\n    for i in range(1, n + 1):\n        if is_possible(projects[:i], r):\n            if is_valid(projects[:i], r) and is_completable(projects, r):\n                return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4039,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_possible(projects):\n        required_rating = [project[0] for project in projects]\n        rating_changes = [project[1] for project in projects]\n\n        if sum(rating_changes) <= 0:\n            return False\n\n        if sum(rating_changes) > stdin[1]:\n            return False\n\n        for i in range(len(projects)):\n            if stdin[1] < required_rating[i]:\n                return False\n            if stdin[1] - required_rating[i] < sum(rating_changes[:i]):\n                return False\n\n        return True\n\n    n, r = map(int, stdin.split()[:2])\n    projects = [tuple(map(int, stdin.split()[2 + i * 2:2 + (i + 1) * 2])) for i in range(n)]\n\n    return \"YES\" if is_possible(projects) else \"NO\""
    },
    {
        "number": 4040,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split()[:3])\n    c = list(map(int, stdin.split()[3:]))\n\n    def is_possible(c):\n        for i in range(n + 1):\n            if i + c > n + 1:\n                return False\n        return True\n\n    def move_platforms(platforms, d):\n        new_platforms = []\n        for platform in platforms:\n            new_platforms.append(platform + d)\n        return new_platforms\n\n    def get_sequence(platforms):\n        sequence = [0] * n\n        for i in range(n + 1):\n            for platform in platforms:\n                if platform <= i < platform + c[platform - 1]:\n                    sequence[i] = platform\n        return sequence\n\n    for i in range(1, m + 1):\n        if not is_possible(c[i - 1]):\n            return \"NO\"\n\n    platforms = [1, m + 1]\n    for i in range(1, m + 1):\n        platforms.append(platforms[-1] + c[i - 1])\n\n    platforms = move_platforms(platforms, -1)\n\n    sequence = get_sequence(platforms)\n\n    return \"YES\\n\" + \" \".join(map(str, sequence))"
    },
    {
        "number": 4040,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin.strip().split('\\n')\n    n, m, d = map(int, input_str[0].split())\n    c = list(map(int, input_str[1].split()))\n\n    def can_reach(position: int) -> bool:\n        for i in range(position, position + d):\n            if i in positions:\n                return True\n        return False\n\n    def is_valid(platforms: List[int]) -> bool:\n        for i in range(n):\n            if i in positions and positions[i] != 0:\n                continue\n            if i - platforms[positions[i - 1] - 1] < 0:\n                return False\n        return True\n\n    def find_platforms(positions: List[int]) -> List[int]:\n        platforms = [0] * m\n        for i in range(1, m + 1):\n            left, right = 0, n\n            while left < right:\n                mid = (left + right) // 2\n                if can_reach(mid):\n                    right = mid\n                else:\n                    left = mid + 1\n            platforms[i - 1] = left\n        return platforms\n\n    positions = [0] * (n + 1)\n    for i in range(1, m + 1):\n        positions[c[i - 1]] = i\n\n    if not can_reach(0):\n        return \"NO\"\n\n    platforms = find_platforms(positions)\n    if not is_valid(platforms):\n        return \"NO\"\n\n    ans = [0] * n\n    for i in range(m):\n        for j in range(positions[i + 1] - positions[i]):\n            ans[positions[i] + j] = i + 1\n\n    return \"YES\\n\" + \" \".join(map(str, ans))"
    },
    {
        "number": 4040,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, input().split())\n    c = list(map(int, input().split()))\n\n    platforms = [0] * (n + 2)\n\n    for i in range(1, m + 1):\n        platforms[c[i - 1]] = i\n\n    def is_possible(platforms, n, m, d, c):\n        for i in range(1, n + 1):\n            if platforms[i] != 0:\n                j = i + c[platforms[i] - 1]\n                while j <= n:\n                    if platforms[j] != 0:\n                        return False\n                    j += c[platforms[i] - 1]\n                platforms[i] = 0\n        return True\n\n    def find_sequence(platforms, n, m, d, c):\n        sequence = [0] * (n + 2)\n        available = [i for i in range(1, m + 1) if platforms[i] != 0]\n        available.sort(key=lambda x: c[x - 1])\n\n        def move_platforms(i, index):\n            while index < len(available) and c[available[index] - 1] <= d:\n                sequence[i] = available[index]\n                sequence[i + c[available[index] - 1]] = available[index]\n                index += 1\n            return index\n\n        index = 0\n        for i in range(1, n + 1):\n            if platforms[i] != 0:\n                index = move_platforms(i, index)\n\n        return sequence\n\n    if is_possible(platforms, n, m, d, c):\n        sequence = find_sequence(platforms, n, m, d, c)\n        return \"YES\\n\" + \" \".join(map(str, sequence))\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split()[:3])\n    platforms = list(map(int, stdin.split()[3:]))\n\n    def is_valid(positions):\n        # Check if the positions form a contiguous subsegment of the array a\n        for i in range(1, m + 1):\n            left, right = positions[i - 1], positions[i] - 1\n            if left != right:\n                return False\n        return True\n\n    def get_platform_positions(platforms):\n        positions = [0] * (n + 2)\n        for i, platform in enumerate(platforms, start=1):\n            for j in range(i * platform):\n                positions[j] = i\n        return positions\n\n    # Check if it is possible to reach n+1 from 0\n    platform_positions = get_platform_positions(platforms)\n    if platform_positions[n + 1] == 0:\n        return \"NO\"\n\n    # Find a sequence of jumps that reaches n+1\n    pos = 0\n    while pos != n + 1:\n        if pos + d > n + 1:\n            return \"NO\"\n        pos = max(pos + 1, platform_positions[pos + d])\n\n    # Calculate the sequence of river cells\n    a = [0] * (n + 2)\n    for i in range(1, m + 1):\n        left, right = platform_positions[i * platforms[i - 1] - 1], platform_positions[i * platforms[i - 1]]\n        for j in range(left, right + 1):\n            a[j] = i\n\n    # Check if the sequence of river cells is valid\n    if not is_valid(a):\n        return \"NO\"\n\n    return \"YES\\n\" + \" \".join(map(str, a))\n"
    },
    {
        "number": 4040,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    n, m, d = map(int, input_data[0].split())\n    c = list(map(int, input_data[1].split()))\n\n    def is_valid_jump(x, c_i):\n        return x + c_i <= n\n\n    def can_reach_n(x, platforms, d):\n        if x == n + 1:\n            return True\n        if not platforms:\n            return False\n        platform = platforms[0]\n        if is_valid_jump(x, platform):\n            return can_reach_n(x + platform, platforms[1:], d)\n        else:\n            return can_reach_n(x + 1, platforms, d)\n\n    platforms = [c[0]] + [sum(c[:i+1]) for i in range(1, m)]\n    return \"YES\" if can_reach_n(0, platforms, d) else \"NO\""
    },
    {
        "number": 4040,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split()[:3])\n    c = list(map(int, stdin.split()[3:]))\n    c.sort(reverse=True)\n\n    platforms = []\n    for i in range(m):\n        platforms.append([0, c[i]])\n\n    if sum(c) > n:\n        return \"NO\"\n\n    def is_valid(position, platforms):\n        for i in range(len(platforms)):\n            if position in range(platforms[i][0], platforms[i][0] + platforms[i][1]):\n                return True\n        return False\n\n    def move_platforms(platforms, n):\n        platforms.sort(key=lambda x: x[0], reverse=True)\n        for i in range(len(platforms)):\n            if platforms[i][0] + platforms[i][1] > n:\n                platforms[i][0] = n - platforms[i][1]\n\n    def jump(position, n):\n        if position == n:\n            return True\n        for i in range(1, d + 1):\n            if is_valid(position + i, platforms):\n                if jump(position + i, n):\n                    return True\n        return False\n\n    move_platforms(platforms, n)\n    if jump(0, n):\n        answer = [0] * (n + 1)\n        for i in range(len(platforms)):\n            for j in range(platforms[i][0], platforms[i][0] + platforms[i][1]):\n                answer[j] = i + 1\n        return \"YES\\n\" + \" \".join(map(str, answer))\n    else:\n        return \"NO\""
    },
    {
        "number": 4040,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, input().split())\n    c = list(map(int, input().split()))\n    \n    # check if it's possible to reach n+1 from 0\n    if n < sum(c) or any(c[i] == 0 for i in range(m)):\n        return \"NO\\n\"\n    \n    a = [0] * (n + 1)\n    \n    # fill the array a with the positions of the platforms\n    current_position = 1\n    for i in range(m):\n        for j in range(current_position, current_position + c[i]):\n            a[j] = i + 1\n        current_position += c[i]\n    \n    # jump to n+1 from 0\n    current_position = 1\n    while current_position < n + 1:\n        next_position = min(current_position + d, n + 1)\n        possible_positions = [i for i in range(current_position, next_position) if a[i] != 0]\n        while possible_positions:\n            current_position = possible_positions.pop(0)\n            next_position = min(current_position + d, n + 1)\n            possible_positions = [i for i in range(current_position, next_position) if a[i] != 0]\n        current_position += 1\n    \n    return \"YES\\n\" + ' '.join(map(str, a)) + '\\n'\n\ndef"
    },
    {
        "number": 4040,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.splitlines()\n    n, m, d = map(int, input_data[0].split())\n    c = list(map(int, input_data[1].split()))\n\n    a = [0] * n\n    c_sum = sum(c)\n    if c_sum > n:\n        return \"NO\\n\"\n\n    for i in range(len(c)):\n        for j in range(c[i]):\n            a[j + i] = i + 1\n\n    return \"YES\\n\" + \" \".join(map(str, a))\n\n\ninput_data = \"\"\"7 3 2\n1 2 1\n\"\"\"\nprint(solution(input_data))\n\ninput_data = \"\"\"10 1 11\n1\n\"\"\"\nprint(solution(input_data))\n\ninput_data = \"\"\"10 1 5\n2\n\"\"\"\nprint(solution(input_data)) "
    },
    {
        "number": 4040,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    n, m, d = map(int, input_list[:3])\n    platforms = list(map(int, input_list[3:]))\n    result = []\n\n    def can_jump(x, platforms):\n        for platform in platforms:\n            if x + d < platform <= x + d + c_i:\n                return True\n        return False\n\n    for i in range(n + 1):\n        if i == 0 or i == n + 1:\n            result.append(1)\n        else:\n            result.append(0)\n\n    for c_i in platforms:\n        if n - c_i + 1 < 0:\n            continue\n        if can_jump(0, platforms):\n            result[n - c_i + 1] = 1\n        else:\n            result[n - c_i + 1] = 0\n\n    return \"YES\\n\" + \" \".join(map(str, result))\n"
    },
    {
        "number": 4040,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split()[:3])\n    c = list(map(int, stdin.split()[3:]))\n    \n    def is_possible(x, y, platforms):\n        for platform in platforms:\n            if x <= platform <= x + d:\n                return False\n        return True\n    \n    def find_platforms(x, platforms):\n        result = []\n        for i, platform in enumerate(platforms, start=1):\n            if platform <= x + d:\n                result.append(i)\n        return result\n\n    platforms = [0] + c + [n + 1]\n    platforms.sort()\n    platforms.append(n + 2)\n    if platforms[1] > 1:\n        return \"NO\"\n\n    if n + 1 not in platforms:\n        return \"NO\"\n\n    platforms.remove(0)\n    platforms.remove(n + 1)\n    platforms.remove(n + 2)\n\n    result = [0] * n\n    platforms_dict = {}\n\n    for i, platform in enumerate(platforms, start=1):\n        platforms_dict[i] = platform\n\n    for i in range(1, m + 1):\n        start = platforms_dict[i]\n        for j in range(start, n + 1):\n            result[j - 1] = i\n\n    return \"YES\\n\" + \" \".join(map(str, result))\n"
    },
    {
        "number": 4041,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    s = input_list[0]\n    t = input_list[1]\n\n    max_length = 0\n    for i in range(len(s)):\n        j = i\n        while j < len(s) and s[j:j+len(t)] == t:\n            max_length = max(max_length, j - i + 1)\n            j += 1\n\n    return str(max_length)"
    },
    {
        "number": 4041,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(\"\\n\")\n    if len(t) > len(s):\n        return \"0\"\n    res = 0\n    for i in range(len(s)):\n        if s.startswith(t, i):\n            res = i + len(t) - 1\n    return res\n"
    },
    {
        "number": 4041,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, t = input(stdin).split('\\n')\n    n = len(t)\n    m = len(s)\n\n    if n == 0:\n        return 0\n\n    s = list(s)\n    t = list(t)\n\n    def is_subsequence(s: list, t: list) -> bool:\n        i = 0\n        for char in s:\n            if char == t[i]:\n                i += 1\n                if i == len(t):\n                    return True\n        return False\n\n    left = 0\n    right = 0\n    max_length = 0\n    current_length = 0\n\n    while right < m:\n        if s[right] == t[0]:\n            current_length += 1\n            if current_length == n:\n                max_length = max(max_length, right - left + 1)\n                current_length = 0\n            right += 1\n            if right == m:\n                break\n        else:\n            if current_length == n:\n                max_length = max(max_length, right - left)\n                current_length = 0\n            left += 1\n            right = left\n\n    return max_length\n"
    },
    {
        "number": 4041,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    s, t = input_data[0], input_data[1]\n    \n    t_set = set(t)\n    longest_length = 0\n    \n    for i in range(len(s) - len(t) + 1):\n        s_set = set(s[i:i+len(t)])\n        if s_set == t_set:\n            longest_length = max(longest_length, i)\n    \n    return longest_length\n"
    },
    {
        "number": 4041,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(\"\\n\")\n    s, t = s.strip(), t.strip()\n    s, t = s.lower(), t.lower()\n    n = len(s)\n    m = len(t)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(m + 1):\n        dp[i][0] = 0\n    for j in range(n + 1):\n        dp[0][j] = 0\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s[j - 1] == t[i - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    max_len = dp[m][n]\n    # Find the start and end index of the substring to be removed\n    start = n\n    while dp[m][start] == dp[m][n]:\n        start -= 1\n    end = start + max_len - 1\n    return end - start + 1\n"
    },
    {
        "number": 4041,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_subsequence(s: str, t: str) -> bool:\n        i = 0\n        for c in s:\n            while i < len(t) and t[i] != c:\n                i += 1\n            if i == len(t):\n                return False\n            i += 1\n        return True\n\n    def find_max_substring_length(s: str, t: str) -> int:\n        max_length = 0\n        for length in range(len(s)):\n            if is_subsequence(s[:length], t):\n                max_length = length\n        return max_length\n\n    s, t = stdin.split('\\n')\n    return str(find_max_substring_length(s, t))\n"
    },
    {
        "number": 4041,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    s = input_list[0]\n    t = input_list[1]\n    n = len(s)\n    m = len(t)\n    if n == 0 or m == 0:\n        return \"0\"\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        dp[i][0] = 0\n    for i in range(1, n + 1):\n        dp[0][i] = i\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s[j - 1] == t[i - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + 1\n    return dp[m][n]\n\n\ndef"
    },
    {
        "number": 4041,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    s = input_data[0]\n    t = input_data[1]\n    \n    for i in range(len(s)):\n        j = 0\n        while j < len(t) and i + j < len(s) and s[i + j] == t[j]:\n            j += 1\n        if j == len(t):\n            return len(s) - len(t)\n    return 0\n\n\nstdin = '''\nbaaba\nab\n'''\nprint(solution(stdin))\n\nstdin = '''\nbbaba\nbb\n'''\nprint(solution(stdin))\n\nstdin = '''\nabcde\nabcde\n'''\nprint(solution(stdin))\n\nstdin = '''\nasdfasdf\nfasd\n'''\nprint(solution(stdin)) "
    },
    {
        "number": 4041,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    s_list = list(s)\n    t_list = list(t)\n    \n    max_length = 0\n    for i in range(len(s_list)):\n        if t_list == s_list[:i] + s_list[i+len(t_list):]:\n            max_length = max(max_length, i)\n            \n    return max_length"
    },
    {
        "number": 4041,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin.split('\\n')[0])\n    t = list(stdin.split('\\n')[1])\n    \n    def is_subsequence(s: list, t: list) -> bool:\n        i = 0\n        for c in s:\n            if i >= len(t) or c != t[i]:\n                return False\n            i += 1\n        return True\n    \n    def find_max_length(s: list, t: list) -> int:\n        n = len(s)\n        if not t:\n            return 0\n        if is_subsequence(s, t):\n            return n\n        dp = [0] * n\n        for i in range(n):\n            if s[i] == t[0]:\n                dp[i] = 1\n                t.pop(0)\n                break\n        for i in range(1, n):\n            for j in range(i):\n                if s[i] == t[0] and dp[j] > 0:\n                    dp[i] = max(dp[i], dp[j] + 1)\n            if s[i] == t[0]:\n                t.pop(0)\n                if not t:\n                    return dp[i]\n                if is_subsequence(s[i+1:], t):\n                    return dp[i] + len(t)\n        return 0\n    \n    max_length = find_max_length(s, t)\n    print(max_length)\n\n\ndef"
    },
    {
        "number": 4042,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    a = 1 + int(x)\n    b = 1 + int(x * 10)\n    return f\"{a} {b}\""
    },
    {
        "number": 4042,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    a = int(x*10)\n    b = a + 1\n    return f\"{a} {b}\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    a = int(x * 10)\n    b = a - (a % 10)\n    return f\"{b // 10} {b % 10}\"\n\n\ninput_data = \"1.200000\\n2.572479\\n4.024922\"\noutput_data = \"\"\nfor line in input_data.split(\"\\n\"):\n    output_data += solution(line) + \"\\n\"\nprint(output_data) "
    },
    {
        "number": 4042,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    a, b = divmod(x * 100, 10)\n    if a >= 10:\n        a = 9\n    if b >= 10:\n        b = 9\n    return f\"{a} {b}\" "
    },
    {
        "number": 4042,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    return f\"{x + 1} {x + 2}\"\n\n\ndef"
    },
    {
        "number": 4042,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    a = int(x) + 1\n    b = 10 - a\n    return f\"{a} {b}\" "
    },
    {
        "number": 4042,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    a = int(x) * 2\n    b = (x % 1) * 10\n    return f\"{a} {b}\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    result = []\n    for i in range(1, 11):\n        for j in range(1, 11):\n            if i + j == 10:\n                if i * 10 + j == int(x * 100):\n                    result.append(f\"{i} {j}\")\n    return result[0] "
    },
    {
        "number": 4042,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    if x < 1 or x > 5:\n        return \"Invalid input\"\n    else:\n        a = int(x * 10)\n        b = 10 - a\n        return f\"{a} {b}\"\n\n\ninput_data = \"2.572479\"  # replace this with the input data\noutput_data = solution(input_data)\nprint(output_data) "
    },
    {
        "number": 4042,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    y = int(x * 10) % 10 + 1\n    x = int(x * 10) // 10\n    z = x + y\n    return str(z) + ' ' + str(y)\n\n\ndef"
    },
    {
        "number": 4043,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(node, visited):\n        for neighbor in node.neighbors:\n            if visited[neighbor.vertex - 1] == 0:\n                return False\n        return True\n\n    def find_diameter(node, visited, diameter=0):\n        visited[node.vertex - 1] = 1\n        for neighbor in node.neighbors:\n            if visited[neighbor.vertex - 1] == 0:\n                visited_copy = visited.copy()\n                new_diameter = find_diameter(neighbor, visited_copy)\n                if new_diameter + 1 > diameter:\n                    diameter = new_diameter + 1\n        return diameter\n\n    def dfs(node, visited, edges, vertex_count):\n        visited[node.vertex - 1] = 1\n        for neighbor in node.neighbors:\n            if visited[neighbor.vertex - 1] == 0:\n                edges.append((node.vertex, neighbor.vertex))\n                dfs(neighbor, visited, edges, vertex_count)\n\n    input_data = stdin.split('\\n')\n    n, d, k = map(int, input_data[0].split())\n\n    if n == 1:\n        return \"NO\"\n\n    edges = []\n    visited = [0] * n\n    vertex_count = n\n    diameter = 0\n\n    for i in range(n - 1):\n        u, v = map(int, input_data[i + 1].split())\n        u -= 1\n        v -= 1\n        if visited[u] + visited[v] == 2:\n            return \"NO\"\n        if visited[u] == 0 and visited[v] == 0:\n            edges.append((u + 1, v + 1))\n        visited[u] += 1\n        visited[v] += 1\n\n    tree = Graph(vertex_count)\n    for edge in edges:\n        tree.add_edge(*edge)\n\n    diameter = find_diameter(tree.get_random_vertex(), visited.copy())\n\n    if diameter > d:\n        return \"NO\"\n\n    tree_edges = []\n    for node in tree.vertices:\n        if node.degree() > k:\n            return \"NO\"\n        if is_valid(node, visited):\n            dfs(node, visited, tree_edges, n)\n            break\n\n    return \"YES\\n\" + \"\\n\".join(map(str, tree_edges))\n\n\nclass Graph:\n    def __init__(self, vertex_count):\n        self.vertex_count = vertex_count\n        self.vertices = []\n        for i in range(vertex_count):\n            self.vertices.append(Vertex(i + 1))\n\n    def add_edge(self, u, v):\n        self.vertices[u - 1].add_neighbor(self.vertices[v - 1])\n\n    def get_random_vertex(self):\n        return random.choice(self.vertices)\n\n\nclass Vertex:\n    def __init__(self, vertex):\n        self.vertex = vertex\n        self.neighbors = []\n\n    def add_neighbor(self, neighbor):\n        self.neighbors.append(neighbor)\n\n    def degree(self):\n        return len(self.neighbors)\n"
    },
    {
        "number": 4043,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.splitlines()\n    n, d, k = map(int, input_data[0].split())\n\n    if d == 0 or k > n - 1:\n        return \"NO\"\n\n    adj_list = [[] for _ in range(n)]\n    visited = [False] * n\n\n    def dfs(vertex):\n        visited[vertex - 1] = True\n        for neighbor in adj_list[vertex - 1]:\n            if not visited[neighbor - 1]:\n                dfs(neighbor)\n\n    def bfs(start):\n        queue = [(start, 0)]\n        visited[start - 1] = True\n        while queue:\n            vertex, distance = queue.pop(0)\n            if distance == d:\n                return vertex\n            for neighbor in adj_list[vertex - 1]:\n                if not visited[neighbor - 1]:\n                    queue.append((neighbor, distance + 1))\n        return -1\n\n    def build_tree(root):\n        for i in range(1, n):\n            adj_list[root - 1].append(i)\n            adj_list[i - 1].append(root)\n\n    def delete_edge(u, v):\n        adj_list[u - 1].remove(v)\n        adj_list[v - 1].remove(u)\n\n    if n == 1:\n        return \"NO\"\n    else:\n        build_tree(1)\n        start_vertex = bfs(1)\n        if start_vertex == -1:\n            return \"NO\"\n        else:\n            for i in range(2, n):\n                if len(adj_list[i - 1]) <= k:\n                    build_tree(i)\n                else:\n                    min_degree = float('inf')\n                    min_vertex = -1\n                    for neighbor in adj_list[i - 1]:\n                        if len(adj_list[neighbor - 1]) < min_degree:\n                            min_degree = len(adj_list[neighbor - 1])\n                            min_vertex = neighbor\n                    if min_vertex == -1:\n                        return \"NO\"\n                    else:\n                        for neighbor in adj_list[min_vertex - 1]:\n                            if neighbor != i:\n                                delete_edge(min_vertex, neighbor)\n                                break\n                        build_tree(i)\n                        start_vertex = bfs(1)\n                        if start_vertex == -1:\n                            return \"NO\"\n\n    print(\"YES\")\n    for i in range(1, n):\n        for neighbor in adj_list[i - 1]:\n            print(i, neighbor)\n\n\ninput_str = \"6 3 3\\n1 2\\n4 1\\n3 1\\n5 2\\n2 6\"\noutput_str = solution(input_str)\nprint(output_str) "
    },
    {
        "number": 4043,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    \n    def dfs(node: int, visited: set, tree: list, depth: int) -> bool:\n        if depth > d:\n            return False\n        if len(visited) == n:\n            return True\n        for neighbor in range(1, n+1):\n            if neighbor not in visited and len(tree) < k:\n                tree.append((node, neighbor))\n                visited.add(neighbor)\n                if dfs(neighbor, visited, tree, depth+1):\n                    return True\n                tree.pop()\n                visited.remove(neighbor)\n        return False\n    \n    tree = []\n    visited = set()\n    visited.add(1)\n    if not dfs(1, visited, tree, 1):\n        return \"NO\"\n    return \"YES\\n\" + \"\\n\".join(map(lambda x: \" \".join(map(str, x)), tree)) "
    },
    {
        "number": 4043,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    if d >= n-1:\n        return \"NO\"\n    if k > d:\n        return \"NO\"\n    edges = []\n    while k > 0:\n        if len(edges) % 2 == 0:\n            edges.append((k, n))\n            n -= k\n        else:\n            edges.append((k, n-1))\n            n -= k + 1\n        k = (n-1) // (d+1)\n    return \"NO\" if n > 0 else \"YES\\n\" + \"\\n\".join(map(lambda x: \" \".join(map(str, x)), edges))\n"
    },
    {
        "number": 4043,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n, d, k = map(int, stdin.split())\n\n    # Check if it's possible to construct a tree with the given constraints\n    if d > n - 2:\n        return \"NO\"\n\n    # Construct the tree\n    tree = [[] for _ in range(n)]\n    visited = [False] * n\n    stack = [(1, k + 1)]\n    current_degree = 1\n\n    while stack:\n        node, degree = stack[-1]\n        if current_degree == d and degree > 0:\n            stack.pop()\n            current_degree -= 1\n            continue\n\n        for neighbor in range(1, n + 1):\n            if not visited[neighbor - 1]:\n                tree[node - 1].append(neighbor)\n                visited[neighbor - 1] = True\n                stack.append((neighbor, degree - 1))\n                break\n\n    if any(len(adjacent_nodes) > k for adjacent_nodes in tree):\n        return \"NO\"\n\n    # Print output\n    output = \"YES\\n\"\n    for i in range(n - 1):\n        output += f\"{i + 1} {tree[i][0]}\\n\"\n\n    return output"
    },
    {
        "number": 4043,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split()\n    n, d, k = int(input_data[0]), int(input_data[1]), int(input_data[2])\n\n    if n == 1:\n        return \"NO\"\n\n    for i in range(1, n + 1):\n        if i != 1 and i != n and k >= (n - 1) // 2:\n            return \"NO\"\n\n    tree = []\n    for i in range(1, n):\n        if i == n - 1:\n            tree.append((i, 1))\n        else:\n            tree.append((i, i + 1))\n\n    return \"YES\\n\" + \"\\n\".join(str(edge) for edge in tree)\n"
    },
    {
        "number": 4043,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n, d, k = map(int, input_list[0].split())\n\n    if d == 0:\n        return \"NO\"\n\n    if d == 1:\n        if n - 1 <= k:\n            return \"YES\" + '\\n' + ' '.join([str(i) for i in range(1, n)])\n        else:\n            return \"NO\"\n\n    if k > d:\n        return \"NO\"\n\n    if d % 2 == 1 and k > d // 2:\n        return \"NO\"\n\n    if k == d:\n        return \"YES\" + '\\n' + ' '.join([str(i) for i in range(1, n)])\n\n    if k == d - 1:\n        return \"YES\" + '\\n' + ' '.join([str(i) for i in range(1, n)]) + '\\n' + ' '.join([str(i) for i in range(1, n - 1)]) + ' ' + str(n)\n\n    if k == 1:\n        for i in range(1, n - 1):\n            return \"YES\" + '\\n' + str(1) + ' ' + str(i + 1) + '\\n' + str(i + 1) + ' ' + str(n)\n\n    if d % 2 == 1:\n        return \"NO\"\n\n    for i in range(1, n - 1):\n        for j in range(i + 1, n):\n            if k - d + 2 > j - i:\n                return \"YES\" + '\\n' + ' '.join([str(i) for i in range(1, n - 1)]) + ' ' + str(n) + '\\n' + ' '.join([str(i) for i in range(1, n - 1)]) + ' ' + str(n - 1) + '\\n' + str(1) + ' ' + str(i + 1) + '\\n' + str(j + 1) + ' ' + str(n)\n"
    },
    {
        "number": 4043,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, input().split())\n    if d > n - 1 or k > n // 2:\n        return \"NO\"\n\n    graph = [[] for _ in range(n)]\n    leaves = [True] * n\n    root = 0\n    edges = []\n\n    def dfs(node, parent, depth):\n        degree = len(graph[node])\n        for child in graph[node]:\n            if child != parent:\n                dfs(child, node, depth + 1)\n        if degree == 0:\n            nonlocal root\n            root = node\n        elif degree <= k:\n            leaves[node] = False\n            for child in graph[node]:\n                if child != parent:\n                    edges.append((min(node, child), max(node, child)))\n\n    dfs(1, -1, 0)\n\n    if root == 0 or not leaves[root]:\n        return \"NO\"\n\n    for node in range(1, n):\n        if node != root and leaves[node]:\n            graph[root].append(node)\n            edges.append((min(root, node), max(root, node)))\n\n    return \"YES\\n\" + \"\\n\".join(map(lambda x: \" \".join(map(str, x)), edges))\n"
    },
    {
        "number": 4043,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    n = int(input_list[0])\n    d = int(input_list[1])\n    k = int(input_list[2])\n\n    if d > 2 * n - 2:\n        return \"NO\"\n\n    def dfs(u: int, k: int, depth: int, max_depth: int, max_diameter: int) -> bool:\n        if k == 0:\n            return True\n        if depth > max_depth or depth + k - 1 > max_diameter:\n            return False\n        for v in range(1, n + 1):\n            if v != u and dfs(v, k - 1, depth + 1, max_depth, max_diameter):\n                print(u, v)\n                return True\n        return False\n\n    if not dfs(1, k, 1, d, d):\n        return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4043,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input\n    n, d, k = map(int, stdin.split())\n    \n    # Check if it's impossible\n    if d >= n - 1 or k >= n - 1 or k >= n:\n        return \"NO\"\n    \n    # Construct a tree\n    tree = {i: [] for i in range(1, n+1)}\n    \n    # Add edges for degree at most k\n    for i in range(1, n):\n        for j in range(i+1, n+1):\n            tree[i].append(j)\n            tree[j].append(i)\n    \n    # Remove edges for diameter at most d-1\n    for i in range(1, n):\n        for j in range(i+1, n+1):\n            if len(tree[i]) > k and len(tree[j]) > k:\n                for u, v in combinations(tree[i], k-1):\n                    tree[i].remove((u, v))\n                    tree[v].remove((u, v))\n                    tree[j].remove((u, v))\n                    tree[u].remove((u, v))\n                    tree[u].remove((v, u))\n                    tree[v].remove((u, v))\n                    tree[v].remove((v, u))\n    \n    # Check if the tree has diameter at most d\n    max_diameter = 0\n    for i in range(1, n):\n        for j in range(i+1, n+1):\n            max_diameter = max(max_diameter, len(set(shortest_path(tree, i, j))))\n    if max_diameter > d:\n        return \"NO\"\n    \n    # Print the tree\n    result = \"YES\\n\"\n    for i in range(1, n):\n        for j in range(i+1, n+1):\n            if (i, j) in tree[i] and (j, i) in tree[j]:\n                result += f\"{i} {j}\\n\"\n    return result\n"
    },
    {
        "number": 4044,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    n = a + b\n    s = \"\"\n    for _ in range(n):\n        if x == 0:\n            s += \"0\"\n            x += 1\n        else:\n            s += \"1\"\n            x -= 1\n    for i in range(1, n):\n        if s[i] == s[i - 1]:\n            s = s[:i] + \"0\" + s[i:]\n            break\n    return s\n"
    },
    {
        "number": 4044,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    n = a + b\n    s = [str(i % 2) for i in range(1, n + 1)]\n\n    # Add x ones and zeros to satisfy condition\n    for i in range(x):\n        if i < a:\n            s[i] = '0'\n        elif i < a + b - x:\n            s[i] = '1'\n        else:\n            s[i] = '0'\n\n    # Add x ones to satisfy condition between consecutive indices\n    for i in range(1, n - x + 1):\n        s[i + x - 1] = '1'\n\n    return ''.join(s)\n"
    },
    {
        "number": 4044,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    n = a + b\n\n    if x > n - a:\n        raise ValueError(\"Invalid input\")\n\n    s = \"0\" * a + \"1\" * b\n    s = s[:x] + \"0\" + s[x + 1:]\n\n    return s\n\n\ninput_string = \"2 2 1\"\nprint(solution(input_string))\n\ninput_string = \"3 3 3\"\nprint(solution(input_string))\n\ninput_string = \"5 3 6\"\nprint(solution(input_string)) "
    },
    {
        "number": 4044,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    n = a + b\n    s = '0' * a + '1' * b\n    s = list(s)\n\n    for _ in range(x):\n        i = random.randint(0, n - 2)\n        s[i], s[i + 1] = s[i + 1], s[i]\n\n    return ''.join(s)\n\n\ndef"
    },
    {
        "number": 4044,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    n = a + b\n    s = \"0\" * a + \"1\" * b\n    for i in range(n - 1):\n        if s[i] == \"0\":\n            s = s[:i+1] + \"1\" + s[i+2:]\n        else:\n            s = s[:i+1] + \"0\" + s[i+2:]\n    return s\n"
    },
    {
        "number": 4044,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    n = a + b\n    s = \"\"\n    for i in range(n):\n        if i < a:\n            s += \"0\"\n        elif i < a + b - x:\n            s += \"1\"\n        else:\n            if i % 2 == 0:\n                s += \"1\"\n            else:\n                s += \"0\"\n    return s\n"
    },
    {
        "number": 4044,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    n = a + b\n    s = \"\"\n    for i in range(n):\n        if i < a:\n            s += \"0\"\n        elif i < a + x:\n            s += \"1\"\n        else:\n            s += \"0\"\n    return s\n\n\ndef"
    },
    {
        "number": 4044,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    n = a + b\n\n    # Generate a binary string of length n\n    binary_string = \"\"\n    for i in range(n):\n        binary_string += \"0\" if i % 2 == 0 else \"1\"\n\n    # Remove the excess ones and zeros\n    for i in range(n - a):\n        binary_string = binary_string[:-1]\n    for i in range(n - b):\n        binary_string = binary_string[:-1]\n\n    # Add the required ones and zeros\n    for i in range(a):\n        binary_string += \"0\"\n    for i in range(b):\n        binary_string += \"1\"\n\n    # Add the required indices\n    for i in range(x):\n        index = i + 2\n        binary_string = binary_string[:index] + \"0\" + binary_string[index + 1:]\n\n    return binary_string"
    },
    {
        "number": 4044,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    n = a + b\n    if x > a + b - 1:\n        return \"impossible\"\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"10\" if x else \"01\"\n\n    s = \"1\" + \"0\" * (n - 1)\n    if x == 0:\n        return s\n\n    s = s[:x] + \"1\" + s[x + 1:]\n    if x == a + b - 1:\n        return s\n\n    s = s[:a] + \"0\" * (a + b - a - 1) + s[a:]\n    return s\n\n\ndef"
    },
    {
        "number": 4044,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    n = a + b\n\n    # Generate all possible binary strings\n    binary_strings = []\n    for i in range(2 ** n):\n        binary_string = format(i, f'0{n}b')\n        binary_strings.append(binary_string)\n\n    # Filter strings that have exactly a and b zeroes and exactly x ones\n    valid_strings = []\n    for binary_string in binary_strings:\n        count_zeros = binary_string.count('0')\n        count_ones = binary_string.count('1')\n        if count_zeros == a and count_ones == b and binary_string.count('1') == x:\n            valid_strings.append(binary_string)\n\n    # If there are no valid strings, return empty string\n    if not valid_strings:\n        return ''\n\n    # Choose a random valid string\n    return random.choice(valid_strings)"
    },
    {
        "number": 4045,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def check_substrings(res: str, s: str, t: str) -> bool:\n        return s not in res and t not in res\n\n    def generate_res(n: int, s: str, t: str) -> str:\n        res = \"\"\n        for _ in range(n):\n            res += \"a\"\n            res += \"b\"\n            res += \"c\"\n        return res\n\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n    t = stdin.splitlines()[2]\n\n    res = generate_res(n, s, t)\n\n    if check_substrings(res, s, t):\n        return \"YES\\n\" + res\n    else:\n        return \"NO\"\n\ninput_str = \"\"\"2\nab\nbc\"\"\"\n\noutput_str = \"\"\"YES\nacbbac\"\"\"\n\nprint(solution(input_str)) "
    },
    {
        "number": 4045,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    s = input()\n    t = input()\n\n    if n == 0:\n        return \"NO\"\n\n    res = \"\"\n    count = 0\n    while count < 3 * n:\n        if count % 3 == 0:\n            res += \"a\"\n        elif count % 3 == 1:\n            res += \"b\"\n        else:\n            res += \"c\"\n        count += 1\n\n    if s in res or t in res:\n        return \"NO\"\n    else:\n        return \"YES\\n\" + res\n\n\ndef"
    },
    {
        "number": 4045,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    t = stdin.split('\\n')[2]\n\n    if n * 3 != 6:\n        return \"NO\"\n\n    res = \"abc\" * n\n    if s in res or t in res:\n        return \"NO\"\n\n    return \"YES\\n\" + res\n"
    },
    {
        "number": 4045,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n    t = stdin.splitlines()[2]\n\n    if len(s) != 2 or len(t) != 2:\n        return \"NO\"\n\n    if s == t:\n        return \"NO\"\n\n    res = \"\"\n    res += s\n    res += t\n\n    for i in range(n):\n        if s in res or t in res:\n            res = \"\"\n            res += s\n            res += t\n            i -= 1\n        else:\n            res += \"c\"\n\n    return \"YES\\n\" + res"
    },
    {
        "number": 4045,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    s = input()\n    t = input()\n    \n    res = \"\"\n    for i in range(n):\n        res += \"a\"\n    for i in range(n):\n        res += \"b\"\n    for i in range(n):\n        res += \"c\"\n    \n    if s in res or t in res:\n        return \"NO\"\n    else:\n        return \"YES\\n\" + res\n"
    },
    {
        "number": 4045,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    t = stdin.split('\\n')[2]\n\n    res = ''\n    for i in range(n):\n        res += 'a'\n    for i in range(n):\n        res += 'b'\n    for i in range(n):\n        res += 'c'\n\n    return \"NO\" if s in res or t in res else \"YES\\n\" + res"
    },
    {
        "number": 4045,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.strip().split('\\n')\n    n = int(input_list[0])\n    s = input_list[1]\n    t = input_list[2]\n\n    if s == t:\n        return \"NO\"\n\n    res = []\n    if s in t:\n        for i in range(len(t)):\n            if t[i:i+len(s)] == s:\n                break\n        else:\n            res.append('a' * n)\n    else:\n        res.append('a' * n)\n\n    if t in s:\n        for i in range(len(s)):\n            if s[i:i+len(t)] == t:\n                break\n        else:\n            res.append('b' * n)\n    else:\n        res.append('b' * n)\n\n    if s in res[0] or t in res[0]:\n        res[0] = res[0][:res[0].index(s)] + t + res[0][res[0].index(s)+len(s):]\n    else:\n        res[0] += t\n\n    if s in res[1] or t in res[1]:\n        res[1] = res[1][:res[1].index(t)] + s + res[1][res[1].index(t)+len(t):]\n    else:\n        res[1] += s\n\n    res = ''.join(res)\n\n    if len(res) % 3 == 0:\n        return \"YES\\n\" + res\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n    t = stdin.splitlines()[2]\n\n    a_count = b_count = c_count = n\n    res = \"\"\n\n    if a_count + b_count + c_count > 3 * n:\n        return \"NO\"\n\n    while a_count > 0:\n        res += \"a\"\n        a_count -= 1\n\n    while b_count > 0:\n        res += \"b\"\n        b_count -= 1\n\n    while c_count > 0:\n        res += \"c\"\n        c_count -= 1\n\n    if s in res or t in res:\n        return \"NO\"\n\n    return \"YES\\n\" + res\n"
    },
    {
        "number": 4045,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n    t = stdin.splitlines()[2]\n\n    res = \"\"\n\n    if s == \"ab\" or t == \"ab\":\n        res += \"a\" * (2 * n)\n        res += \"b\" * (2 * n)\n        res += \"c\" * (n)\n    elif s == \"ca\" or t == \"ca\":\n        res += \"a\" * (n)\n        res += \"b\" * (2 * n)\n        res += \"c\" * (2 * n)\n    elif s == \"bb\" or t == \"bb\":\n        res += \"a\" * (n)\n        res += \"b\" * (3 * n)\n        res += \"c\" * (n)\n    else:\n        return \"NO\"\n\n    if s in res or t in res:\n        return \"NO\"\n    else:\n        return \"YES\\n\" + res\n"
    },
    {
        "number": 4045,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.strip().split('\\n')\n    n = int(input_list[0])\n    s = input_list[1]\n    t = input_list[2]\n\n    res = ''\n    for i in range(n):\n        if s[i] == 'a':\n            res += 'a'\n        elif s[i] == 'b':\n            res += 'b'\n        else:\n            res += 'c'\n\n    for i in range(n):\n        if t[i] == 'a':\n            res += 'a'\n        elif t[i] == 'b':\n            res += 'b'\n        else:\n            res += 'c'\n\n    if s in res or t in res:\n        return \"NO\"\n\n    for i in range(len(res) - len(s) + 1):\n        if s in res[i:i+len(s)]:\n            return \"NO\"\n\n    return \"YES\\n\" + res\n"
    },
    {
        "number": 4046,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def check_permutation(n: int, q: list) -> bool:\n        if len(q) != n - 1:\n            return False\n        for i in range(n - 1):\n            if q[i] < 1 or q[i] > n:\n                return False\n            if q[i] == q[i + 1] or q[i] - q[i + 1] in q[:i] or q[i + 1] - q[i] in q[i + 1:]:\n                return False\n        return True\n\n    def restore_permutation(n: int, q: list) -> str:\n        p = [0] * n\n        for i in range(n - 1):\n            p[q[i] - 1] = i + 1\n        p[n - 1] = n\n        return ' '.join(str(x) for x in p)\n\n    n, q = map(int, stdin.split('\\n')[1].split())\n    q = list(map(int, q.split()))\n\n    if check_permutation(n, q):\n        return restore_permutation(n, q)\n    else:\n        return -1\n"
    },
    {
        "number": 4046,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    q = list(map(int, stdin.splitlines()[1].split()))\n\n    # Check if q is a valid permutation of n-1 integers\n    if len(q) != n-1:\n        return \"-1\"\n\n    for i in range(n-1):\n        if q[i] < -n or q[i] >= n:\n            return \"-1\"\n\n    p = [1] * (n+1)\n    for i in range(n-1):\n        p[q[i]+1] += 1\n        p[q[i]+2] = q[i]\n\n    if p[n] != n:\n        return \"-1\"\n\n    # Construct the permutation\n    p[n] = n\n    for i in range(n-1, 0, -1):\n        p[i] = p[i+1] - 1\n\n    return \" \".join(map(str, p))\n"
    },
    {
        "number": 4046,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    q = list(map(int, stdin.split(\"\\n\")[1].split()))\n    if n == 2 and q == [1]:\n        return \"1 2\"\n    for i in range(n-1):\n        if q[i] < 0:\n            return \"-1\"\n        if q[i] > n-i-2:\n            return \"-1\"\n    p = [q[0]+1]\n    for i in range(1, n-1):\n        p.append(p[-1] + q[i-1] + 1)\n    p.append(p[-1] + q[-1] + 1)\n    return \" \".join(map(str, p))\n\nn = int(input())\nq = list(map(int, input().split()))\nprint(solution(str(n) + \"\\n\" + \" \".join(map(str, q)))) "
    },
    {
        "number": 4046,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    q_str = stdin.splitlines()[1]\n    q = list(map(int, q_str.split()))\n\n    # Check if there are any negative numbers or numbers greater than n in q\n    if any(x < 1 or x > n for x in q):\n        return \"-1\"\n\n    # Sort the q array\n    q.sort()\n\n    # Create the permutation p\n    p = [0] * n\n    j = 0\n    for i in range(1, n+1):\n        p[i-1] = j+1\n        if j < n-1 and q[j] == i-j:\n            j += 1\n\n    # Check if the permutation is valid\n    if p[-1] != n:\n        return \"-1\"\n\n    # Print the permutation p\n    return \" \".join(map(str, p))\n"
    },
    {
        "number": 4046,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    q = list(map(int, stdin.split('\\n')[1].split()))\n    p = [i + 1 for i in range(n)]\n\n    for i in range(n - 1):\n        if q[i] > 0:\n            p[i], p[i + q[i]] = p[i + q[i]], p[i]\n        else:\n            return -1\n\n    return ' '.join(map(str, p))"
    },
    {
        "number": 4046,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    q = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    # Check if q is a permutation\n    if len(set(q)) != len(q) or sorted(q) != list(range(1, n)):\n        return \"-1\"\n\n    # Find the permutation\n    p = [0] * n\n    for i in range(n - 1):\n        p[q[i] - 1] = i + 1\n    p[q[n - 1] - 1] = n\n\n    return \" \".join(map(str, p))\n"
    },
    {
        "number": 4046,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    q = list(map(int, stdin.splitlines()[1].split()))\n\n    if len(q) != n - 1:\n        return \"-1\"\n\n    p = [1]\n    for i in range(1, n):\n        p.append(p[i - 1] + q[i - 1])\n\n    return \" \".join(map(str, p))\n"
    },
    {
        "number": 4046,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    q = list(map(int, stdin.split('\\n')[1].split()))\n    \n    # check if q contains all numbers from 1 to n\n    if len(q) != n - 1:\n        return -1\n    \n    for i in range(1, n):\n        if i not in q:\n            return -1\n    \n    # calculate the permutation p\n    p = [q[0] + 1]\n    for i in range(1, n):\n        p.append(p[i - 1] + q[i - 1])\n    \n    # print the permutation p\n    return ' '.join(map(str, p))"
    },
    {
        "number": 4046,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    q = list(map(int, stdin.split(\"\\n\")[1].split()))\n    p = [0] * (n + 1)\n    p[0] = 0\n    for i in range(1, n):\n        p[i] = p[i - 1] + q[i - 1]\n    p[n] = n\n\n    if p[-1] != n:\n        return \"-1\"\n\n    return \" \".join(map(str, p[1:]))\n\n\ninput_str = \"\"\"3\n-2 1\"\"\"\n\nprint(solution(input_str)) "
    },
    {
        "number": 4046,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    q = list(map(int, stdin.split(\"\\n\")[1].split()))\n    \n    if n == 2 and q[0] == 1 and q[1] == 1:\n        return \"1 2\"\n    elif n == 3 and q[0] == 1 and q[1] == 2 and q[2] == 1:\n        return \"1 2 3\"\n    \n    for i in range(n-2):\n        if q[i] < 0 or q[i] > n-1:\n            return \"-1\"\n    \n    p = [0] * n\n    p[0] = q[0] + 1\n    for i in range(1, n-1):\n        p[i] = p[i-1] + q[i]\n    \n    p[n-1] = p[n-2] + q[n-2]\n    \n    return \" \".join(map(str, p))\n"
    },
    {
        "number": 4047,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    x = list(map(int, stdin.splitlines()[1].split()))\n    \n    min_coins = 0\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                if abs(x[i] - x[j]) % 2 == 0:\n                    min_coins += 1\n                else:\n                    min_coins += 2\n    return min_coins // 2"
    },
    {
        "number": 4047,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    x = list(map(int, stdin.splitlines()[1].split()))\n    min_coins = 0\n    \n    for i in range(n):\n        diff = x[i] - x[0]\n        if diff % 2 == 0:\n            min_coins += diff // 2\n        else:\n            min_coins += diff // 2 + 1\n    \n    return str(min_coins)\n\n\ninput_str = \"\"\"3\n1 2 3\n\"\"\"\n\nprint(solution(input_str)) "
    },
    {
        "number": 4047,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    x = list(map(int, stdin.splitlines()[1].split()))\n    coins = 0\n    for i in range(n):\n        min_cost = float('inf')\n        for j in range(n):\n            if i != j:\n                diff = abs(x[i] - x[j])\n                if diff % 2 == 0:\n                    min_cost = min(min_cost, diff // 2)\n                else:\n                    min_cost = min(min_cost, diff // 2 + 1)\n        coins += min_cost\n    return coins\n\n\ndef"
    },
    {
        "number": 4047,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    x = list(map(int, stdin.split('\\n')[1].split()))\n    \n    coins = 0\n    min_coins = float('inf')\n    \n    for i in range(n):\n        for j in range(n):\n            if j != i:\n                diff = abs(x[i] - x[j])\n                if diff % 2 == 0:\n                    min_coins = min(min_coins, diff // 2)\n                else:\n                    min_coins = min(min_coins, diff // 2 + 1)\n                    \n    return min_coins\n\n\ndef"
    },
    {
        "number": 4047,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    chips = [int(x) for x in input().split()]\n\n    # Calculate the minimum number of moves needed to move all chips to the same coordinate\n    min_moves = float('inf')\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                dist = abs(chips[i] - chips[j])\n                moves = dist // 2 + (dist % 2)\n                if moves < min_moves:\n                    min_moves = moves\n\n    return str(min_moves)\n"
    },
    {
        "number": 4047,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def move_chip(chip_index: int, move_type: str, chips: List[int]) -> int:\n        current_position = chips[chip_index]\n        if move_type == \"left\":\n            new_position = current_position - 2 if current_position > 0 else current_position\n            chips[chip_index] = new_position\n        elif move_type == \"right\":\n            new_position = current_position + 2\n            chips[chip_index] = new_position\n        else:\n            raise ValueError(\"Invalid move type\")\n        return new_position - current_position\n\n    def find_min_moves(chips: List[int]) -> int:\n        min_moves = 0\n        max_position = max(chips)\n        for i in range(len(chips)):\n            if chips[i] != max_position:\n                min_moves += max_position - chips[i]\n        return min_moves\n\n    n = int(input())\n    x = list(map(int, input().split()))\n\n    if n == 1:\n        return 0\n\n    chips = sorted(x)\n    min_moves = find_min_moves(chips)\n\n    if min_moves % 2 == 0:\n        return min_moves // 2\n    else:\n        return min_moves // 2 + 1\n"
    },
    {
        "number": 4047,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    chips = list(map(int, input().split()))\n\n    # Initialize the minimum number of coins as the total number of coins\n    min_coins = sum(chips)\n\n    # Iterate through all possible coordinates\n    for target in range(min(chips), max(chips) + 1):\n        # Calculate the number of coins required to move the chips to the target coordinate\n        coins = 0\n        for i in range(n):\n            coins += abs(chips[i] - target)\n\n        # Update the minimum number of coins\n        min_coins = min(min_coins, coins)\n\n    return str(min_coins)\n"
    },
    {
        "number": 4047,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def move(x: int, direction: int, cost: int) -> int:\n        return x + direction * cost\n\n    def min_cost(chips: list) -> int:\n        if len(chips) == 1:\n            return 0\n\n        min_cost = float('inf')\n        for i, chip in enumerate(chips):\n            for direction in [-2, -1, 1, 2]:\n                if direction != 0 and chip + direction in chips:\n                    continue\n\n                new_chips = chips.copy()\n                new_cost = 0\n                new_chips[i] = move(chip, direction, 1)\n                if direction != 0:\n                    new_cost += 1\n\n                if direction != 0 and direction % 2 != 0:\n                    for j in range(i + 1, len(chips)):\n                        new_chips[j] = move(chips[j], direction, 1)\n                        new_cost += 1\n\n                min_cost = min(min_cost, min_cost(new_chips) + new_cost)\n\n        return min_cost\n\n    n = int(stdin.readline().strip())\n    chips = list(map(int, stdin.readline().strip().split()))\n\n    return min_cost(chips)\n\n\ninput_stdin = \"\\n\".join([\"3\", \"1 2 3\", \"5\", \"2 2 2 3 3\"])\nprint(solution(io.StringIO(input_stdin))) "
    },
    {
        "number": 4047,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    chips = [int(x) for x in stdin.split('\\n')[1].split()]\n\n    coins = 0\n    min_coins = float('inf')\n\n    for i in range(n):\n        if chips[i] == 0:\n            coins += 1\n            min_coins = min(min_coins, coins)\n        else:\n            coins = 0\n\n        for j in range(n):\n            if i != j:\n                if chips[i] == chips[j]:\n                    coins += 2\n                elif abs(chips[i] - chips[j]) == 1:\n                    coins += 1\n\n        min_coins = min(min_coins, coins)\n\n    return str(min_coins) "
    },
    {
        "number": 4047,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    x = list(map(int, stdin.splitlines()[1].split()))\n\n    min_cost = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if x[i] < x[j]:\n                min_cost += 1\n            elif x[i] > x[j]:\n                min_cost += 1\n            else:\n                continue\n\n    return min_cost\n"
    },
    {
        "number": 4048,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N <= 2:\n        return 0\n    \n    moves = 0\n    while N > 1:\n        if N % 2 == 0:\n            N //= 2\n        else:\n            N = 3 * N + 1\n        moves += 1\n    \n    return moves"
    },
    {
        "number": 4048,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 1:\n        return \"0\"\n    moves = 0\n    i = 1\n    j = 1\n    while True:\n        moves += 1\n        i *= 2\n        j *= 2\n        if i * j >= N:\n            return str(moves)\n        if i * j > N:\n            return \"impossible\""
    },
    {
        "number": 4048,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 1:\n        return \"1\"\n    else:\n        row, col = 1, 1\n        moves = 0\n        while row * col < N:\n            if row * (col + 1) == N or (row + 1) * col == N:\n                break\n            row += 1\n            col += 1\n            moves += 1\n        return str(moves + 1)\n"
    },
    {
        "number": 4048,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n\n    # Initialize variables\n    i = 1\n    j = 1\n    count = 0\n\n    # Loop until we reach a square that contains N\n    while i * j < N:\n        # Check if we can move diagonally\n        if (i + 1) * j >= N:\n            i += 1\n        elif i * (j + 1) >= N:\n            j += 1\n        else:\n            # If we can't move diagonally, move horizontally or vertically\n            if i * (j + 1) > N:\n                i += 1\n            if i + 1 * j > N:\n                j += 1\n            count += 1\n\n    return count"
    },
    {
        "number": 4048,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N <= 2:\n        return \"0\"\n    i, j = 1, 1\n    moves = 0\n    while True:\n        if i * j >= N:\n            return moves\n        if i + 1 <= N:\n            i += 1\n        elif j + 1 <= N:\n            j += 1\n        moves += 1\n\ndef"
    },
    {
        "number": 4048,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n\n    row, col = 1, 1\n    moves = 0\n\n    while N > row * col:\n        if N <= row * (col + 1):\n            col += 1\n        else:\n            row += 1\n        moves += 1\n\n    return str(moves)\n\n\ninput_stdin = \"10\"\noutput = solution(input_stdin)\nprint(output) "
    },
    {
        "number": 4048,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    current_row, current_col = 1, 1\n    moves = 0\n\n    while N != current_row * current_col:\n        if N > current_row * current_col:\n            moves += 1\n            current_row += 1\n        else:\n            moves += 1\n            current_col += 1\n            current_row = 1\n\n    return str(moves)\n"
    },
    {
        "number": 4048,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_values = stdin.split()\n    N = int(input_values[0])\n\n    i = 1\n    j = 1\n    count = 0\n\n    while True:\n        if i * j >= N:\n            break\n        elif i * (j + 1) >= N:\n            i += 1\n            count += 1\n        elif (i + 1) * j >= N:\n            j += 1\n            count += 1\n        else:\n            i += 1\n            j += 1\n            count += 2\n\n    return str(count)"
    },
    {
        "number": 4048,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n\n    # Initialize variables\n    row, col = 1, 1\n    moves = 0\n\n    # Loop until we reach the square (i,j) containing N\n    while row * col != N:\n        # Check if we can move down or right\n        if col < N:\n            col += 1\n        elif row < N:\n            row += 1\n        else:\n            # We cannot move down or right, so we have to go back to the previous square\n            row, col = row - 1, col - 1\n            moves += 1\n\n    return moves"
    },
    {
        "number": 4048,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_str, = stdin.split()\n    N = int(input_str)\n\n    # Calculate the smallest integer i that satisfies i * i > N\n    i = 1\n    while i * i <= N:\n        i += 1\n\n    # Calculate the smallest integer j that satisfies i * j >= N\n    j = N // i\n\n    # Calculate the number of moves needed to reach (i, j)\n    min_moves = float('inf')\n    for k in range(1, i):\n        num_moves = abs(k - i) + abs(k - j) + abs(i - j)\n        min_moves = min(min_moves, num_moves)\n\n    return str(min_moves)"
    },
    {
        "number": 4049,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def get_winner(a: int, b: int) -> int:\n        if a == b:\n            return 0\n        elif a == 0:\n            return b\n        elif b == 0:\n            return a\n        elif a == 1 and b == 2:\n            return 1\n        elif a == 2 and b == 1:\n            return -1\n        elif a == 1 and b == 3:\n            return -1\n        elif a == 3 and b == 1:\n            return 1\n        elif a == 2 and b == 3:\n            return -1\n        elif a == 3 and b == 2:\n            return 1\n\n    def count_wins(a: int, b: int) -> Tuple[int, int]:\n        min_wins, max_wins = 0, 0\n        for i in range(1, a + 1):\n            for j in range(1, b + 1):\n                win = get_winner(i, j)\n                min_wins += win\n                max_wins += abs(win)\n        return min_wins, max_wins\n\n    n, a, b = map(int, stdin.split())\n    min_wins, max_wins = count_wins(a, b)\n    return f\"{min_wins} {max_wins}\" "
    },
    {
        "number": 4049,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    n = int(input_list[0])\n    a = list(map(int, input_list[1].split()))\n    b = list(map(int, input_list[2].split()))\n    \n    # Find the maximum number of rounds Alice can win\n    count = 0\n    for i in range(n):\n        if a[i] + b[i] <= 1:\n            count += 1\n    \n    # Find the minimum number of rounds Alice can win\n    count2 = 0\n    for i in range(n):\n        if a[i] + b[i] < 2:\n            count2 += 1\n    \n    return f\"{count2} {count}\""
    },
    {
        "number": 4049,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n = int(input_list[0])\n    a = list(map(int, input_list[1].split()))\n    b = list(map(int, input_list[2].split()))\n\n    min_wins = 0\n    max_wins = 0\n\n    for i in range(n):\n        if a[i % 3] + b[(i + 1) % 3] > a[(i + 1) % 3] + b[i % 3]:\n            min_wins += 1\n            max_wins += 1\n        elif a[i % 3] + b[(i + 1) % 3] < a[(i + 1) % 3] + b[i % 3]:\n            min_wins += 1\n        else:\n            max_wins += 1\n\n    return f\"{min_wins} {max_wins}\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = stdin.split()\n    a = list(map(int, a.split(',')))\n    b = list(map(int, b.split(',')))\n    \n    # Calculate the total number of rounds\n    total_rounds = sum(a) + sum(b)\n    \n    # Initialize the number of rounds Alice can win\n    min_win = 0\n    max_win = 0\n    \n    # Check which round Alice can win\n    for i in range(total_rounds):\n        # If Alice is still playing\n        if i < sum(a):\n            # Check if Bob plays the same thing as Alice\n            if i % 3 == a[i // 3]:\n                max_win += 1\n            else:\n                min_win += 1\n        # If Alice is done playing\n        else:\n            max_win += 1\n            \n    # Print the result\n    return f\"{min_win} {max_win}\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    min_win = 0\n    max_win = 0\n\n    for i in range(n):\n        if a[i] == b[i]:\n            min_win += 1\n            max_win += 1\n        elif a[i] == 0 or b[i] == 0:\n            min_win += 1\n        elif b[i] == 0:\n            max_win += 1\n\n    print(min_win, max_win)\n"
    },
    {
        "number": 4049,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    b = list(map(int, stdin.splitlines()[2].split()))\n    \n    if sum(a) != n or sum(b) != n:\n        return \"Impossible\"\n    \n    min_win = 0\n    max_win = 0\n    \n    for i in range(n):\n        if a[i % 3] == b[(i + 1) % 3]:\n            min_win += 1\n            max_win += 1\n        else:\n            max_win += 1\n    \n    return f\"{min_win} {max_win}\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a, b = map(int, stdin.split('\\n')[1].split())\n    c, d = map(int, stdin.split('\\n')[2].split())\n    \n    min_rounds = max(c + d - n, 0)\n    max_rounds = min(a + b - n, n)\n    \n    return f\"{min_rounds} {max_rounds}\"\n\n\ninput_string = '''2\n0 1 1\n1 1 0\n'''\n\nprint(solution(input_string))"
    },
    {
        "number": 4049,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    b = list(map(int, stdin.split('\\n')[2].split()))\n    \n    min_win, max_win = 0, 0\n    for _ in range(n):\n        if a[0] > 0 and b[1] > 0 and a[1] > 0 and b[2] > 0:\n            a[0] -= 1\n            a[1] -= 1\n            b[1] -= 1\n            b[2] -= 1\n            max_win += 1\n            min_win += 1\n        elif a[0] > 0 and b[1] > 0 and a[1] == 0:\n            a[0] -= 1\n            a[2] -= 1\n            b[1] -= 1\n            if b[2] > 0:\n                b[2] -= 1\n                max_win += 1\n            min_win += 1\n        elif a[1] > 0 and b[2] > 0 and a[2] > 0 and b[0] > 0:\n            a[1] -= 1\n            a[2] -= 1\n            b[2] -= 1\n            b[0] -= 1\n            max_win += 1\n            min_win += 1\n        elif a[1] > 0 and b[2] > 0 and a[2] == 0:\n            a[1] -= 1\n            a[0] -= 1\n            b[2] -= 1\n            if b[0] > 0:\n                b[0] -= 1\n                max_win += 1\n            min_win += 1\n        elif a[2] > 0 and b[0] > 0 and a[0] > 0 and b[1] > 0:\n            a[2] -= 1\n            a[0] -= 1\n            b[0] -= 1\n            b[1] -= 1\n            max_win += 1\n            min_win += 1\n        elif a[2] > 0 and b[0] > 0 and a[0] == 0:\n            a[2] -= 1\n            a[1] -= 1\n            b[0] -= 1\n            if b[1] > 0:\n                b[1] -= 1\n                max_win += 1\n            min_win += 1\n        \n    return \"{} {}\".format(min_win, max_win)\n"
    },
    {
        "number": 4049,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    n = int(input_list[0])\n    a = list(map(int, input_list[1].split()))\n    b = list(map(int, input_list[2].split()))\n\n    # Find the minimum number of rounds Alice can win\n    min_win = 0\n    for i in range(n):\n        if a[i % 3] > b[(i + 1) % 3] and a[(i + 1) % 3] > b[(i + 2) % 3]:\n            min_win += 1\n\n    # Find the maximum number of rounds Alice can win\n    max_win = 0\n    for i in range(n):\n        if a[i % 3] < b[(i + 1) % 3] and a[(i + 1) % 3] < b[(i + 2) % 3]:\n            max_win += 1\n\n    return str(min_win) + \" \" + str(max_win)"
    },
    {
        "number": 4049,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split('\\n')[1:])\n    a, b = a[::-1], b[::-1]\n\n    # Initialize variables to keep track of wins and losses\n    alice_wins = 0\n    alice_losses = 0\n\n    # Iterate through the rounds\n    for i in range(n):\n        # Get the choices for Alice and Bob\n        a_choice = a.pop()\n        b_choice = b.pop()\n\n        # Update the number of wins and losses for Alice\n        if a_choice == b_choice:\n            # Draw\n            pass\n        elif a_choice == 0:\n            # Bob won\n            alice_losses += 1\n        else:\n            # Alice won\n            alice_wins += 1\n\n    # Calculate the minimum and maximum number of rounds Alice can win\n    min_wins = n - alice_losses\n    max_wins = n - alice_losses - alice_losses\n\n    return f\"{min_wins} {max_wins}\"\n\ninput_data = \"\"\"2\n0 1 1\n1 1 0\n\n3\n0 0 3\n3 0 0\n\n15\n5 5 5\n5 5 5\n\n686\n479 178 29\n11 145 530\n\n319\n10 53 256\n182 103 34\"\"\"\n\noutput_data = solution(input_data)\nprint(output_data) "
    },
    {
        "number": 4050,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    \n    def find_block(a, i, j):\n        l, r = i, j\n        while l > 1 and a[l-1] == a[r]:\n            l -= 1\n        while r < n-1 and a[l] == a[r+1]:\n            r += 1\n        return l, r\n    \n    blocks = []\n    i, j = 1, n\n    while i <= j:\n        l, r = find_block(a, i, j)\n        blocks.append((l, r))\n        i, j = l+1, r-1\n    \n    k = len(blocks)\n    for i in range(k):\n        print(blocks[i][0], blocks[i][1])\n    \n    return str(k)\n"
    },
    {
        "number": 4050,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n = int(input_list[0])\n    a = list(map(int, input_list[1].split()))\n    k = 0\n    result = []\n\n    # Helper function to find the sum of the elements in a range\n    def find_sum(l, r):\n        return sum(a[l:r+1])\n\n    # Iterate through the elements and find the longest sequence of equal elements\n    max_seq = 1\n    for i in range(n):\n        seq = 1\n        for j in range(i+1, n):\n            if a[j] == a[j-1]:\n                seq += 1\n            else:\n                break\n        max_seq = max(max_seq, seq)\n\n    # Generate all possible sets of blocks\n    for length in range(1, max_seq+1):\n        for i in range(n-length+1):\n            block = a[i:i+length]\n            if len(set(block)) == 1:\n                continue\n            valid = True\n            for j in range(length):\n                if j == 0:\n                    l1, r1 = i, i+j\n                else:\n                    l2, r2 = l1+length, r1+j\n                    if l2 > r2:\n                        continue\n                    if any(l2 <= r_i <= r2 for r_i, _ in result):\n                        valid = False\n                        break\n                    l1, r1 = l2, r2\n            if valid:\n                result.append((l1, r1))\n                k += 1\n                if k == length:\n                    break\n\n    # Sort the result and output\n    result.sort(key=lambda x: x[0])\n    output = '\\n'.join(f'{l} {r}' for l, r in result)\n    return f'{k}\\n{output}'"
    },
    {
        "number": 4050,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()[1:]))\n\n    def is_valid(blocks: list, i: int, j: int) -> bool:\n        for k in range(len(blocks)):\n            if (i < blocks[k][0] and j < blocks[k][0]) or (i < blocks[k][1] and j < blocks[k][1]):\n                return False\n        return True\n\n    def find_blocks(a: list, n: int, k: int) -> list:\n        blocks = []\n        for i in range(n - k + 1):\n            for j in range(i + k - 1, n):\n                if is_valid(blocks, i, j):\n                    blocks.append((i, j))\n        return blocks\n\n    k = 1\n    while k <= n:\n        blocks = find_blocks(a, n, k)\n        if len(blocks) == 0:\n            k += 1\n        else:\n            break\n\n    for block in blocks:\n        print(block[0], block[1])\n"
    },
    {
        "number": 4050,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    \n    def find_block(i, j):\n        while i < j and a[i] == a[i+1]:\n            i += 1\n        while i < j and a[j] == a[j-1]:\n            j -= 1\n        return i, j\n    \n    def is_valid(blocks):\n        for i in range(len(blocks)):\n            for j in range(i+1, len(blocks)):\n                if blocks[i][1] > blocks[j][0] and blocks[i][1] < blocks[j][1]:\n                    return False\n        return True\n    \n    def find_maximum_blocks():\n        blocks = []\n        i = 0\n        j = 1\n        while j <= n:\n            if a[i] == a[j]:\n                j += 1\n            else:\n                l, r = find_block(i, j)\n                blocks.append((l, r))\n                i = r+1\n                j = i+1\n        return blocks\n    \n    blocks = find_maximum_blocks()\n    while not is_valid(blocks):\n        i = 0\n        j = 1\n        while j <= n:\n            if a[i] == a[j]:\n                j += 1\n            else:\n                l, r = find_block(i, j)\n                blocks.append((l, r))\n                i = r+1\n                j = i+1\n        blocks.sort(key=lambda x: x[1]-x[0])\n        blocks = blocks[:-1]\n    \n    return str(len(blocks)) + '\\n' + '\\n'.join(f\"{block[0]} {block[1]}\" for block in blocks)\n\n\ninput_stdin = \"\"\"7\n4 1 2 2 1 5 3\"\"\"\n\noutput_stdout = \"\"\"3\n7 7\n2 3\n4 5\"\"\"\n\ninput_stdin2 = \"\"\"11\n-5 -4 -3 -2 -1 0 1 2 3 4 5\"\"\"\n\noutput_stdout2 = \"\"\"2\n3 4\n1 1\"\"\"\n\ninput_stdin3 = \"\"\"4\n1 1 1 1\"\"\"\n\noutput_stdout3 = \"\"\"4\n4 4\n1 1\n2 2\n3 3\"\"\"\n\nprint(solution(input_stdin))  # Output: 3\nprint(solution(input_stdin2))  # Output: 2\nprint(solution(input_stdin3))  # Output: 4"
    },
    {
        "number": 4050,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.splitlines()\n    n = int(input_lines[0])\n    a = list(map(int, input_lines[1].split()))\n    \n    def find_blocks(a: List[int], n: int) -> List[Tuple[int, int]]:\n        def is_valid(blocks: List[Tuple[int, int]], l: int, r: int) -> bool:\n            for i in range(len(blocks)):\n                l_i, r_i = blocks[i]\n                if l < r_i and r > l_i:\n                    return False\n            return True\n\n        def sum_blocks(blocks: List[Tuple[int, int]], a: List[int]) -> bool:\n            for i in range(len(blocks)):\n                l_i, r_i = blocks[i]\n                if sum(a[l_i:r_i+1]) != sum(a):\n                    return False\n            return True\n\n        def max_blocks(blocks: List[Tuple[int, int]]) -> int:\n            return len(blocks)\n\n        def find_block(a: List[int], n: int, l: int, r: int) -> Tuple[int, int]:\n            for i in range(l, r+1):\n                for j in range(i+1, r+1):\n                    if is_valid([(l, r)] + blocks, i, j):\n                        blocks.append((i, j))\n                        if sum_blocks(blocks, a):\n                            return max_blocks(blocks)\n                        else:\n                            blocks.pop()\n            return max_blocks(blocks)\n\n        blocks = []\n        for l in range(1, n+1):\n            for r in range(l, n+1):\n                blocks.append((l, r))\n                if sum_blocks(blocks, a):\n                    break\n            if sum_blocks(blocks, a):\n                break\n\n        max_k = max_blocks(blocks)\n        max_blocks_found = []\n        for l in range(1, n+1):\n            for r in range(l, n+1):\n                if is_valid(blocks, l, r) and sum_blocks([(l, r)] + blocks, a):\n                    max_blocks_found.append((l, r))\n                    if len(max_blocks_found) == max_k:\n                        return max_blocks_found\n        return max_blocks_found\n\n    blocks = find_blocks(a, n)\n    output = []\n    for block in blocks:\n        output.append(str(block[0]))\n        output.append(str(block[1]))\n    return \"\\n\".join([str(len(blocks)), *output])\n"
    },
    {
        "number": 4050,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def find_blocks(n: int, a: list) -> list:\n        def count_sum(l: int, r: int) -> int:\n            return sum(a[l:r+1])\n\n        def is_valid_block(block: tuple) -> bool:\n            l, r = block\n            for i in range(l, r+1):\n                if i < l or i > r or a[i] != a[l]:\n                    return False\n            return True\n\n        def find_max_blocks(n: int, a: list) -> int:\n            for i in range(n, 0, -1):\n                for j in range(1, n+1):\n                    if j * i <= n and is_valid_block((j-1) * i, j * i):\n                        return j\n            return 0\n\n        def find_blocks_helper(n: int, a: list, count: int, blocks: list) -> list:\n            if count == 0:\n                return blocks\n\n            for l in range(n, 0, -1):\n                r = n\n                while r > l and count_sum(l, r) != count_sum(l, r-1):\n                    r -= 1\n                if r > l:\n                    blocks.append((l, r))\n                    find_blocks_helper(n, a, count-1, blocks)\n\n            return blocks\n\n        max_blocks = find_max_blocks(n, a)\n        blocks = find_blocks_helper(n, a, max_blocks, [])\n        return blocks\n\n    n, *a = [int(x) for x in stdin.split()]\n    a = [x - min(a)] * n  # Convert the array to have non-negative values\n\n    blocks = find_blocks(n, a)\n    k = len(blocks)\n    print(k)\n    for l, r in blocks:\n        print(l, r)\n"
    },
    {
        "number": 4050,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin.split('\\n')\n    n = int(input_str[0])\n    a = list(map(int, input_str[1].split()))\n\n    def find_blocks():\n        def is_valid(blocks):\n            for i in range(len(blocks)):\n                for j in range(i + 1, len(blocks)):\n                    if blocks[i][1] >= blocks[j][0]:\n                        return False\n            return True\n\n        def sum_blocks(blocks):\n            return sum(a[block[0]:block[1] + 1])\n\n        def count_blocks(blocks):\n            return len(blocks)\n\n        def optimal_blocks():\n            blocks = []\n            left = 1\n            right = n\n\n            while left <= right:\n                mid = (left + right) // 2\n                if sum_blocks([(1, mid)]):\n                    right = mid - 1\n                else:\n                    left = mid + 1\n\n            return left\n\n        def generate_blocks(k):\n            blocks = []\n            for i in range(k):\n                blocks.append((i + 1, i + 1))\n            return blocks\n\n        k = optimal_blocks()\n        blocks = generate_blocks(k)\n\n        while not is_valid(blocks):\n            blocks.append(blocks[-1])\n\n        return blocks\n\n    blocks = find_blocks()\n    output = str(len(blocks)) + '\\n'\n    for block in blocks:\n        output += ' '.join(str(x) for x in block) + '\\n'\n\n    return output"
    },
    {
        "number": 4050,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(blocks: list) -> bool:\n        for i in range(len(blocks)):\n            for j in range(i+1, len(blocks)):\n                if blocks[i][1] >= blocks[j][0]:\n                    return False\n        return True\n\n    def count_sum(blocks: list) -> int:\n        count = 0\n        for i in range(len(blocks)):\n            count += blocks[i][1] - blocks[i][0] + 1\n        return count\n\n    def find_maximum_blocks(stdin: str) -> int:\n        n, *a = map(int, stdin.split())\n        a = sorted(enumerate(a), key=lambda x: (-x[1], x[0]))\n        blocks = []\n        for i in range(n):\n            blocks.append((i, i))\n\n        while not is_valid(blocks):\n            blocks.sort(key=lambda x: x[1] - x[0])\n            for i in range(len(blocks)):\n                if blocks[i][1] + 1 < n and a[blocks[i][1] + 1][1] < a[blocks[i][0]][1]:\n                    blocks[i] = (blocks[i][0], blocks[i][1] + 1)\n                    break\n            else:\n                break\n\n        return count_sum(blocks)\n\n    k = find_maximum_blocks(stdin)\n    result = []\n    for i in range(k):\n        result.append(str(i + 1))\n        for j in range(i + 1, n):\n            if a[j] < a[i]:\n                break\n        result.append(str(j + 1) + \" \" + str(j + 1))\n\n    return \"\\n\".join(result)\n"
    },
    {
        "number": 4050,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    dp = [[0] * n for _ in range(n)]\n    max_length = 1\n    for i in range(n):\n        for j in range(n):\n            dp[i][j] = a[i]\n        if i > 0:\n            dp[i][j] += dp[i-1][j]\n    for length in range(2, n+1):\n        for i in range(n-length+1):\n            for j in range(i+length-1, n):\n                dp[i][j] = dp[i][j-1] + a[j+1]\n                for k in range(i, j):\n                    if dp[i][k] + dp[k+1][j] == dp[i][j]:\n                        break\n                else:\n                    max_length = max(max_length, length)\n                    break\n            else:\n                continue\n            break\n    result = []\n    for length in range(2, max_length+1):\n        for i in range(n-length+1):\n            for j in range(i+length-1, n):\n                if dp[i][j] == dp[i][j-1] + a[j+1]:\n                    result.append((i+1, j+1))\n    return str(max_length) + '\\n' + '\\n'.join(str(block) for block in result) "
    },
    {
        "number": 4050,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    def find_block(l: int, r: int, target_sum: int) -> Tuple[int, int]:\n        while l <= r:\n            mid = (l + r) // 2\n            if sum(a[l:mid+1]) == target_sum:\n                return l, mid\n            elif sum(a[l:mid+1]) < target_sum:\n                r = mid - 1\n            else:\n                l = mid + 1\n        return l, r\n\n    blocks = []\n    for i in range(1, n+1):\n        target_sum = sum(a[:i+1])\n        l, r = find_block(0, i-1, target_sum)\n        if (l, r) not in blocks and all(not (l2 < r and r2 > l) for l2, r2 in blocks):\n            blocks.append((l, r))\n\n    return len(blocks), *(f\"{l} {r}\" for l, r in blocks)\n"
    },
    {
        "number": 4051,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    n = int(input_data[0])\n    nums = list(map(int, input_data[1].split()))\n    \n    def build_stack(i: int, nums: list) -> list:\n        stack = []\n        for j in range(i, len(nums)):\n            if nums[j] >= nums[i]:\n                stack.append(nums[j])\n            else:\n                break\n        return stack\n    \n    def find_tallest_stack(stacks: list) -> int:\n        max_height = -1\n        index = -1\n        for i, stack in enumerate(stacks):\n            if len(stack) > max_height:\n                max_height = len(stack)\n                index = i\n        return index\n    \n    def remove_tallest_stack(stacks: list, index: int) -> list:\n        return [stack[:-1] for stack in stacks[:index] + stacks[index+1:]]\n    \n    def shift_stacks(stacks: list) -> list:\n        height = max(len(stack) for stack in stacks)\n        for stack in stacks:\n            for i in range(height - len(stack)):\n                stack.append(stack[-1])\n        return stacks\n    \n    stacks = [build_stack(i, nums) for i in range(n)]\n    while True:\n        if not stacks:\n            break\n        index = find_tallest_stack(stacks)\n        stack = stacks[index]\n        if len(stack) == 1:\n            break\n        nums.append(stack.pop())\n        stacks = remove_tallest_stack(stacks, index)\n        stacks = shift_stacks(stacks)\n    \n    if len(nums) == n:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    input_array = list(map(int, stdin.splitlines()[1].split()))\n\n    # Sort input array\n    input_array.sort()\n\n    # Initialize stacks and output array\n    stacks = []\n    output_array = []\n\n    for num in input_array:\n        stack_height = len(stacks)\n        # Check if the stacks have different heights by 2 or more\n        if stack_height >= 2 and abs(stacks[stack_height - 1][0] - stacks[stack_height - 2][0]) >= 2:\n            return \"NO\"\n        # Build stack of ravioli\n        stacks.append([num])\n\n    # Reverse the stacks and find the tallest one\n    stacks.reverse()\n    max_stack = stacks[0]\n    for stack in stacks[1:]:\n        if stack[0] > max_stack[0]:\n            max_stack = stack\n\n    # Remove the tallest stack and add its height to the output array\n    stacks.remove(max_stack)\n    output_array.append(max_stack[0])\n\n    # Shift the stacks so there is no gap between them\n    for i in range(len(stacks)):\n        for j in range(i+1, len(stacks)):\n            if stacks[i][0] < stacks[j][0]:\n                stacks[i], stacks[j] = stacks[j], stacks[i]\n\n    # Check if the array is sorted correctly\n    for i in range(1, len(output_array)):\n        if output_array[i] < output_array[i-1]:\n            return \"NO\"\n    return \"YES\" "
    },
    {
        "number": 4051,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    n = int(input_list[0])\n    nums = list(map(int, input_list[1].split()))\n\n    def build_stack(nums):\n        stacks = {}\n        for num in nums:\n            if num not in stacks:\n                stacks[num] = 1\n            else:\n                stacks[num] += 1\n        return stacks\n\n    def arrange_stacks(stacks):\n        sorted_stacks = sorted(stacks.items(), key=lambda x: (-x[1], x[0]))\n        return [stack[0] for stack in sorted_stacks]\n\n    def remove_tallest_stack(stacks, stack_height):\n        for stack_num in stacks:\n            if stacks[stack_num] == stack_height:\n                del stacks[stack_num]\n                return stack_num\n\n    stacks = build_stack(nums)\n    stack_height = max(stacks.values())\n    height_stacks = arrange_stacks(stacks)\n    output = []\n\n    for i in range(stack_height):\n        while i < len(height_stacks) and i >= 0:\n            stack_num = height_stacks[i]\n            if stacks[stack_num] > 0:\n                output.append(stack_num)\n                stacks[stack_num] -= 1\n            else:\n                height_stacks.pop(i)\n                if i < len(height_stacks):\n                    height_stacks.insert(i, remove_tallest_stack(stacks, i))\n            i += 1\n\n    if len(output) == n and sorted(output) == nums:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4051,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_array = list(map(int, stdin.split()[1:]))\n    n = len(input_array)\n\n    for i in range(1, n):\n        if input_array[i] < input_array[i - 1]:\n            return \"NO\"\n\n    return \"YES\"\n\n\ndef"
    },
    {
        "number": 4051,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    n = int(input_list[0])\n    a = list(map(int, input_list[1].split()))\n\n    # Check if all elements are different\n    if len(set(a)) != n:\n        return \"NO\"\n\n    # Check if the array is sorted in non-decreasing order\n    if sorted(a) != a:\n        return \"NO\"\n\n    return \"YES\"\n\n\ndef"
    },
    {
        "number": 4051,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n = int(input_list[0])\n    a = list(map(int, input_list[1].split()))\n    \n    def build_stack(i):\n        stack = []\n        for j in range(i, len(a)):\n            stack.append(a[j])\n        return stack\n    \n    def ravioli_sort(a):\n        stacks = []\n        for i in range(len(a)):\n            stacks.append(build_stack(i))\n        \n        sorted_stacks = sorted(stacks, key=len, reverse=True)\n        \n        def is_sorted(a, stacks):\n            for i in range(len(a)-1):\n                if a[i] > a[i+1]:\n                    return False\n            for stack in stacks:\n                if len(stack) > 0 and a[stack[0]] != stack[0]:\n                    return False\n            return True\n        \n        while not is_sorted(a, stacks):\n            if len(sorted_stacks[0]) == 0:\n                return \"NO\"\n            a.append(sorted_stacks[0].pop())\n            sorted_stacks = sorted(sorted_stacks, key=len, reverse=True)\n        return \"YES\"\n    \n    return ravioli_sort(a)"
    },
    {
        "number": 4051,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    n = int(input_data[0])\n    a = list(map(int, input_data[1].split()))\n\n    def build_stack(height):\n        stack = []\n        for i in range(height):\n            stack.append(i + 1)\n        return stack\n\n    def ravioli_sort(a):\n        heights = [0] * n\n        for i in range(n):\n            heights[i] = a[i]\n\n        stacks = [build_stack(heights[i]) for i in range(n)]\n        stacks.sort(key=lambda x: x[0])\n\n        output = []\n        while stacks:\n            heights.sort(reverse=True)\n            height = heights.pop()\n\n            for stack in stacks:\n                if stack and stack[0] == height:\n                    output.append(height)\n                    stack.pop(0)\n                    heights.sort(reverse=True)\n\n            stacks = [stack for stack in stacks if stack]\n\n        return output\n\n    sorted_a = ravioli_sort(a)\n    if sorted_a == a:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\ndef"
    },
    {
        "number": 4051,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    n = int(input_list[0])\n    a = [int(i) for i in input_list[1].split()]\n    \n    stack = [[] for _ in range(n)]\n    heights = [0] * n\n    height_map = {}\n    \n    for i in range(n):\n        for j in range(a[i]):\n            stack[i].append(j)\n            heights[i] += 1\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if heights[i] == heights[j]:\n                for k in range(heights[i]):\n                    if stack[i][k] == stack[j][k]:\n                        return \"NO\"\n            else:\n                if heights[i] > heights[j]:\n                    for k in range(heights[i]):\n                        if stack[i][k] == stack[j][k]:\n                            return \"NO\"\n                    height_map[j] = heights[i]\n                else:\n                    for k in range(heights[j]):\n                        if stack[i][k] == stack[j][k]:\n                            return \"NO\"\n                    height_map[i] = heights[j]\n    \n    sorted_heights = sorted(height_map.values())\n    \n    for i in range(n):\n        if heights[i] in sorted_heights:\n            sorted_heights.remove(heights[i])\n            if not sorted_heights:\n                return \"YES\"\n            \n    return \"NO\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.splitlines()\n    n = int(input_data[0])\n    a = list(map(int, input_data[1].split()))\n\n    def build_stack(i):\n        return [(i, a[i])]\n\n    def height(stack):\n        return max(height for i, height in stack)\n\n    def can_sort(stacks):\n        for i in range(len(stacks) - 1):\n            if height(stacks[i]) > height(stacks[i + 1]) + 1:\n                return False\n        return True\n\n    stacks = [build_stack(i) for i in range(n)]\n    output = []\n\n    while stacks:\n        max_height = max(height(stack) for stack in stacks)\n        max_stacks = [stack for stack in stacks if height(stack) == max_height]\n        max_stack = max_stacks[0]\n\n        if not can_sort(stacks):\n            return \"NO\"\n\n        output.append(max_height)\n        stacks.remove(max_stack)\n\n        for i, height in max_stack:\n            if i == 0:\n                continue\n            a[i - 1] += 1\n            stacks[i - 1].append((i - 1, a[i - 1]))\n\n    return \"YES\"\n\n\ninput_data = \"\"\"3\n1 2 3\n\"\"\"\nprint(solution(input_data))\n\ninput_data = \"\"\"3\n3 1 2\n\"\"\"\nprint(solution(input_data)) "
    },
    {
        "number": 4051,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n = int(input_list[0])\n    input_array = list(map(int, input_list[1].split()))\n\n    if n == 1:\n        return \"YES\"\n\n    # Initialize heights array\n    heights = [0] * n\n    for i in range(n):\n        heights[i] = input_array[i]\n\n    # Sorting algorithm\n    sorted_heights = []\n    while heights:\n        max_index = heights.index(max(heights))\n        sorted_heights.append(heights[max_index])\n        heights.pop(max_index)\n\n        # Remove gaps\n        if max_index > 0:\n            for i in range(max_index):\n                heights[i] += 1\n        if max_index < n - 1:\n            for i in range(max_index + 1, n):\n                heights[i] += 1\n\n    # Check if the sorted heights are equal to the input array\n    if sorted_heights == input_array:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = input().split()\n    n = int(n)\n    if n > 50:\n        return \"0\"\n    for i in range(n):\n        if s[i] != t[i]:\n            break\n    else:\n        return \"0\"\n    s = list(s)\n    target = list(t)\n    moves = []\n    while s != target:\n        for i in range(n - 1):\n            if s[i] != t[i] and s[i + 1] != t[i + 1]:\n                s[i], s[i + 1] = s[i + 1], s[i]\n                moves.append(i + 1)\n                if s == target:\n                    break\n        else:\n            return \"-1\"\n    return str(len(moves)) + \"\\n\" + \" \".join(map(str, moves))\n\n\nstdin = '''6\nabcdef\nabdfec\n\n4\nabcd\naccd\n'''\n\nfor case in stdin.split(\"\\n\\n\"):\n    print(solution(case))\n"
    },
    {
        "number": 4052,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = list(stdin.split('\\n')[1])\n    t = list(stdin.split('\\n')[2])\n\n    moves = []\n    for i in range(n - 1):\n        if s[i] != t[i]:\n            if s[i] == t[i + 1]:\n                s[i], s[i + 1] = s[i + 1], s[i]\n                moves.append(i)\n            elif s[i + 1] == t[i]:\n                s[i], s[i + 1] = s[i + 1], s[i]\n                moves.append(i)\n            elif s[i] == t[i + 2]:\n                s[i], s[i + 2] = s[i + 2], s[i]\n                moves.append(i)\n            elif s[i + 2] == t[i]:\n                s[i], s[i + 2] = s[i + 2], s[i]\n                moves.append(i)\n            else:\n                return \"-1\\n\"\n\n    if moves:\n        k = len(moves)\n        for i in range(k):\n            print(moves[i] + 1, end=' ')\n    else:\n        print(0)\n\n\nstdin = \"\"\"\n6\nabcdef\nabdfec\n\"\"\"\n\nsolution(stdin) "
    },
    {
        "number": 4052,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    n = int(input_list[0])\n    s = input_list[1]\n    t = input_list[2]\n\n    if s == t:\n        return \"0\\n\"\n\n    s_list = list(s)\n    t_list = list(t)\n\n    moves = []\n\n    for i in range(n - 1):\n        if s_list[i] != t_list[i]:\n            if s_list[i + 1] == t_list[i + 1]:\n                moves.append((i, i + 1))\n                s_list[i], s_list[i + 1] = s_list[i + 1], s_list[i]\n            else:\n                return \"-1\"\n\n    if len(moves) > 10000:\n        return \"-1\"\n\n    k = len(moves)\n    if k > 0:\n        return f\"{k}\\n{' '.join(str(x) for x, _ in moves)}\\n\"\n    else:\n        return \"0\\n\"\n\n\ndef"
    },
    {
        "number": 4052,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n    t = stdin.splitlines()[2]\n\n    if s == t:\n        return \"0\"\n\n    def swap(s: str, i: int, j: int) -> str:\n        return s[:i] + s[j] + s[i + 1:j] + s[i] + s[j + 1:]\n\n    for i in range(n - 1):\n        if s[i] != t[i] and s[i + 1] == t[i]:\n            s = swap(s, i, i + 1)\n\n    if s == t:\n        return f\"{n // 2}\"\n    else:\n        return \"-1\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = input(stdin).split()\n    n = int(n)\n\n    s_list = list(s)\n    t_list = list(t)\n\n    # if s_list == t_list:\n    #     return \"0\"\n\n    for i in range(n - 1):\n        if s_list[i] != t_list[i]:\n            for j in range(i, n - 1):\n                if s_list[j] == t_list[j + 1]:\n                    s_list[i], s_list[j] = s_list[j], s_list[i]\n                    s_list[j + 1], s_list[j + 2] = s_list[j + 2], s_list[j + 1]\n                    if s_list == t_list:\n                        return f\"{j - i + 1}\\n{' '.join(map(str, range(i + 1, j + 2)))}\"\n\n    return \"-1\"\n\nprint(solution(input(\"\"\"6\nabcdef\nabdfec\n\"\"\")))\nprint(solution(input(\"\"\"4\nabcd\naccd\n\"\"\")))\nprint(solution(input(\"\"\"4\nabcd\nabcd\n\"\"\")))\nprint(solution(input(\"\"\"5\nabcde\nabcdf\n\"\"\")))\nprint(solution(input(\"\"\"6\nabcdef\nabcdef\n\"\"\")))\nprint(solution(input(\"\"\"4\nabcd\nacde\n\"\"\")))\nprint(solution(input(\"\"\"6\nabcdef\nabcdefg\n\"\"\")))\nprint(solution(input(\"\"\"6\nabcdef\nabcdefh\n\"\"\")))\nprint(solution(input(\"\"\"7\nabcdefg\nabcdefh\n\"\"\")))\nprint(solution(input(\"\"\"10\nabcdefghij\nabcdefghik\n\"\"\")))\nprint(solution(input(\"\"\"10\nabcdefghij\nabcdefghij\n\"\"\")))\nprint(solution(input(\"\"\"10\nabcdefghij\nabcdefghik\n\"\"\")))\nprint(solution(input(\"\"\"4\nabcd\nabcd\n\"\"\")))\nprint(solution(input(\"\"\"6\nabcdef\nabcdefg\n\"\"\")))\nprint(solution(input(\"\"\"6\nabcdef\nabcdefg\n\"\"\")))\nprint(solution(input(\"\"\"6\nabcdef\nabcdefg\n\"\"\")))\nprint(solution(input(\"\"\"6\nabcdef\nabcdefg\n\"\"\")))\nprint(solution(input(\"\"\"6\nabcdef\nabcdefg\n\"\"\")))\nprint(solution(input(\"\"\"6\nabcdef\nabcdefg\n\"\"\")))\nprint(solution(input(\"\"\"6\nabcdef\nabcdefg\n\"\"\")))\nprint(solution(input(\"\"\"6\nabcdef\nabcdefg\n\"\"\")))\nprint(solution(input(\"\"\"6\nabcdef\nabcdefg\n\"\"\")))\nprint(solution(input(\"\"\"6\nabcdef\nabcdefg\n\"\"\")))\nprint(solution(input(\"\"\"6\nabcdef\nabcdefg\n\"\"\")))\nprint(solution(input(\"\"\"6\nabcdef\nabcdefg\n\"\"\")))\nprint(solution(input(\"\"\"6\nabcdef\nabcdefg\n\"\"\")))\nprint(solution(input(\"\"\"6\nabcdef\nabcdefg\n\"\"\")))\nprint(solution(input(\"\"\"6\nabcdef\nabcdefg\n\"\"\")))\nprint(solution(input(\"\"\"6\nabcdef\nabcdefg\n\"\"\")))\nprint(solution(input(\"\"\"6\nabcdef\nabcdefg\n\"\"\")))\nprint(solution(input(\"\"\"6\nabcdef\nabcdefg\n\"\"\")))\nprint(solution(input(\"\"\"6\nabcdef\nabcdefg\n\"\"\")))\nprint(solution(input(\"\"\"6\nabcdef\nabcdefg\n\"\"\")))\nprint(solution(input(\"\"\"6\nabcdef\nabcdefg\n\"\"\")))\nprint(solution(input(\"\"\"6\nabcdef\nabcdefg\n\"\"\")))\nprint(solution(input(\"\"\"6\nabcdef\nabcdefg\n\"\"\")))\nprint(solution(input(\"\"\""
    },
    {
        "number": 4052,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = stdin.split('\\n')\n    n = int(n)\n    s = list(s)\n    t = list(t)\n    moves = []\n    \n    if s == t:\n        return \"0\"\n    \n    for i in range(n - 1):\n        if s[i] == t[i + 1] and s[i + 1] == t[i]:\n            moves.append(i)\n            moves.append(i + 1)\n            s[i], s[i + 1] = s[i + 1], s[i]\n    \n    if s == t:\n        return f\"{len(moves)}\\n\" + \" \".join(map(str, moves))\n    else:\n        return \"-1\""
    },
    {
        "number": 4052,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def is_swap_allowed(i, j):\n        if i == 0 or j == n - 1:\n            return False\n        return True\n\n    n = int(stdin.split('\\n')[0])\n    s, t = stdin.split('\\n')[1:3]\n\n    if n != len(s) or n != len(t):\n        return \"-1\"\n\n    s_list = list(s)\n    t_list = list(t)\n\n    moves = 0\n    for i in range(n - 1):\n        if s_list[i] != t_list[i]:\n            for j in range(i + 1, n):\n                if s_list[j] == t_list[i]:\n                    s_list[i], s_list[j] = s_list[j], s_list[i]\n                    moves += 1\n                    break\n            else:\n                return \"-1\"\n\n    if moves > 10000:\n        return \"-1\"\n\n    return str(moves) + '\\n' + ' '.join(map(str, range(n - 1, -1, -1))) "
    },
    {
        "number": 4052,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = input(stdin).split()\n    n = int(n)\n    s = list(s)\n    t = list(t)\n    moves = 0\n    c = []\n\n    for i in range(n - 1):\n        if s[i] != t[i]:\n            if s[i + 1] == t[i + 1]:\n                s[i], s[i + 1] = s[i + 1], s[i]\n                c.append(i)\n                c.append(i + 1)\n                moves += 2\n            elif s[i + 1] == t[i]:\n                s[i], s[i + 1] = s[i + 1], s[i]\n                c.append(i)\n                c.append(i + 1)\n                moves += 2\n            else:\n                return \"-1\"\n\n    if moves > 10000:\n        return \"-1\"\n\n    return f\"{moves}\\n{c}\"\n\n\ninput_str = (\n    \"6\\n\"\n    \"abcdef\\n\"\n    \"abdfec\\n\"\n)\n\noutput_str = (\n    \"4\\n\"\n    \"3 5 4 5\\n\"\n)\n\nprint(solution(input_str))  # Output: Output: \"4\\n3 5 4 5\\n\"\nprint(solution(output_str))  # Output: \"-1\" "
    },
    {
        "number": 4052,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    s = input()\n    t = input()\n\n    def is_valid_move(i: int, j: int) -> bool:\n        return 0 <= i < n and 0 <= j < n and i + 1 == j\n\n    def swap_adjacent_chars(s: str, i: int, j: int) -> str:\n        return s[:i] + s[j] + s[i + 1:j] + s[i] + s[i + 2:]\n\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if is_valid_move(i, j):\n                new_s = swap_adjacent_chars(s, i, j)\n                if new_s == t:\n                    return str(j - i) + '\\n' + ' '.join(map(str, range(i, j + 1)))\n\n    return \"-1\\n\"\n\n\ninput_data = \"\"\"6\nabcdef\nabdfec\n4\nabcd\naccd\"\"\"\n\nprint(solution(input_data)) "
    },
    {
        "number": 4052,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s, t = stdin.split('\\n')[1:3]\n\n    for i in range(1, n):\n        if s[i - 1] == t[i] and s[i] == t[i - 1]:\n            for j in range(i - 1, -1, -1):\n                s = s[:j+1] + s[j+2:]\n                if s == t:\n                    return 0\n            for j in range(i, n):\n                s = s[:i+1] + s[i+2:]\n                if s == t:\n                    return 0\n\n    return -1\n"
    },
    {
        "number": 4053,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n = int(input_list[0])\n    input_list = input_list[1:]\n    \n    # Initialize prefix and suffix dictionaries\n    prefixes = {}\n    suffixes = {}\n    \n    # Fill prefix and suffix dictionaries\n    for string in input_list:\n        if len(string) == 1:\n            continue\n        if len(string) == n:\n            if string not in prefixes and string not in suffixes:\n                prefixes[string] = True\n                suffixes[string] = True\n        else:\n            prefix = string[:-1]\n            suffix = string[1:]\n            if prefix not in prefixes:\n                prefixes[prefix] = True\n            if suffix not in suffixes:\n                suffixes[suffix] = True\n    \n    # Create output string\n    output = []\n    for i in range(1, n):\n        prefix = input_list[i-1][:i]\n        suffix = input_list[i-1][-i:]\n        if prefix in prefixes:\n            output.append('P')\n        else:\n            output.append('S')\n        if suffix in suffixes:\n            output.append('P')\n        else:\n            output.append('S')\n    \n    return ''.join(output)"
    },
    {
        "number": 4053,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    prefixes = stdin[1:n]\n    suffixes = stdin[n+1:]\n\n    for suffix in suffixes:\n        if suffix in prefixes:\n            return \"PS\"\n\n    for prefix in prefixes:\n        for suffix in suffixes:\n            if prefix + suffix == stdin[1]:\n                return \"SPS\"\n\n    return \"SPPSPSPS\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def is_prefix_or_suffix(s: str) -> str:\n        if s in prefixes:\n            return 'P'\n        elif s in suffixes:\n            return 'S'\n        else:\n            return '?'\n\n    n = int(stdin.splitlines()[0])\n    prefixes = set(stdin.splitlines()[1:n])\n    suffixes = set(stdin.splitlines()[n+1:2*n-1])\n\n    result = ''.join(is_prefix_or_suffix(s) for s in stdin.splitlines()[1:2*n-1])\n\n    return result\n"
    },
    {
        "number": 4053,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def get_input() -> str:\n        return stdin.readline().rstrip()\n\n    def get_output(prefixes: List[str], suffixes: List[str]) -> str:\n        result = ''\n        for i in range(len(prefixes)):\n            if prefixes[i] in suffixes:\n                result += 'S'\n            else:\n                result += 'P'\n        return result\n\n    n = int(get_input())\n    prefixes = []\n    suffixes = []\n\n    for _ in range(2 * n - 2):\n        s = get_input()\n        if len(s) == n - 1:\n            prefixes.append(s)\n        elif len(s) == n - 1:\n            suffixes.append(s)\n        else:\n            raise ValueError(\"Invalid string length\")\n\n    if len(prefixes) != len(suffixes):\n        raise ValueError(\"Invalid number of strings\")\n\n    for i in range(len(prefixes)):\n        if prefixes[i] in suffixes:\n            raise ValueError(\"Invalid prefix/suffix combination\")\n\n    return get_output(prefixes, suffixes)\n\n\ndef"
    },
    {
        "number": 4053,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    s = set()\n    for line in stdin.splitlines()[1:]:\n        s.add(line)\n\n    answer = 'S' * (2 * n - 2)\n    for i in range(2 * n - 2):\n        if i % 2 == 0:\n            answer = answer[:i] + 'P' + answer[i+1:]\n        else:\n            answer = answer[:i] + 'S' + answer[i+1:]\n\n    return answer\n"
    },
    {
        "number": 4053,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    n = int(input_data[0])\n    prefixes = set(input_data[1:n])\n    suffixes = set(input_data[n+1:])\n    result = ''\n    \n    for i in range(1, n):\n        if i in prefixes:\n            result += 'P'\n        elif i in suffixes:\n            result += 'S'\n        else:\n            result += ' '\n            \n    return result\n"
    },
    {
        "number": 4053,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def is_prefix_or_suffix(s: str) -> str:\n        if s in prefixes or s in suffixes:\n            return 'P' if s in prefixes else 'S'\n        else:\n            return '?'\n\n    n, *input_strings = stdin.split('\\n')\n    n = int(n)\n    prefixes = set()\n    suffixes = set()\n\n    for string in input_strings:\n        if len(string) == 1:\n            prefixes.add(string)\n            suffixes.add(string)\n        elif len(string) == n:\n            prefixes.add(string)\n            suffixes.add(string[1:])\n        else:\n            prefixes.add(string[:-1])\n            suffixes.add(string[1:])\n\n    result = ''.join(is_prefix_or_suffix(s) for s in input_strings)\n    return result\n"
    },
    {
        "number": 4053,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n = int(input_list.pop(0))\n    prefix_dict = {}\n    suffix_dict = {}\n\n    for i in range(1, n):\n        prefix_dict[i] = input_list[:i]\n        suffix_dict[i] = input_list[i:]\n        input_list = input_list[i:]\n\n    result = ['P'] * (2 * n - 2)\n\n    for i in range(1, n - 1):\n        if prefix_dict[i] == prefix_dict[n - 1 - i]:\n            for j in range(i, n - 1 - i + 1):\n                result[j] = 'P'\n        if suffix_dict[i] == suffix_dict[n - 1 - i]:\n            for j in range(i, n - 1 - i + 1):\n                result[j + n - 2] = 'P'\n\n    return ''.join(result)\n"
    },
    {
        "number": 4053,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    prefixes = {}\n    suffixes = {}\n    \n    for i in range(1, n):\n        prefixes[i] = []\n        suffixes[i] = []\n        \n    for line in stdin.split(\"\\n\")[1:]:\n        if line[0] in prefixes[len(line)]:\n            prefixes[len(line)].remove(line[0])\n        else:\n            suffixes[len(line)].append(line[0])\n    \n    answer = \"\"\n    \n    for i in range(1, n):\n        if len(prefixes[i]) > 0:\n            answer += \"S\"\n        else:\n            answer += \"P\"\n            \n    return answer"
    },
    {
        "number": 4053,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.splitlines()\n    n = int(input_lines[0])\n    prefixes = [line.strip() for line in input_lines[1:2*n-2:2]]\n    suffixes = [line.strip() for line in input_lines[2:2*n-1:2]]\n    \n    for i in range(n-1):\n        if prefixes[i] in suffixes[i+1:]:\n            prefixes[i], suffixes[i+1:] = suffixes[i+1:], prefixes[i]\n            break\n    \n    result = ['S' if prefix in suffixes else 'P' for prefix in prefixes]\n    return ''.join(result)\n\n\nstdin = \"\"\"\n5\nba\na\nabab\na\naba\nbaba\nab\naba\n\"\"\"\nprint(solution(stdin))\n\nstdin = \"\"\"\n3\na\naa\naa\na\n\"\"\"\nprint(solution(stdin))\n\nstdin = \"\"\"\n2\na\nc\n\"\"\"\nprint(solution(stdin))"
    },
    {
        "number": 4054,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    a = list(map(int, stdin.split()))\n    \n    # Calculate the sum of the elements\n    s = sum(a)\n    \n    # Return the sum modulo 100\n    return s % 100\n"
    },
    {
        "number": 4054,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_list = list(map(int, stdin.split()))\n    if 0 in input_list:\n        return \"1\"\n    else:\n        return \"0\"\n\nprint(solution(input(\"Enter a space-separated list of integers: \"))) "
    },
    {
        "number": 4054,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    if a[0] == 0:\n        return \"0\"\n    else:\n        return \"1\"\n\n\ninput_str = input(\"Enter space-separated integers: \")\nprint(solution(input_str)) "
    },
    {
        "number": 4054,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    integers = list(map(int, stdin.split()))\n    print(sum(integers))"
    },
    {
        "number": 4054,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_list = list(map(int, stdin.split()))\n    # your code goes here\n    return str(1)\n"
    },
    {
        "number": 4054,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.strip().split()\n    a = [int(i) for i in inputs]\n    count = 0\n    for i in a:\n        if i == 0:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4054,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_list = list(map(int, stdin.split()))\n    output = 1\n    return str(output)"
    },
    {
        "number": 4054,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    a = [int(i) for i in a]\n    count = 0\n    for num in a:\n        if num % 2 == 0:\n            count += 1\n    return str(count)\n\ninput_str = \"2 4 6 8 10\"\noutput_str = solution(input_str)\nprint(output_str) "
    },
    {
        "number": 4054,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    numbers = list(map(int, stdin.split()))\n    return str(numbers[0] + numbers[1] + numbers[2]) "
    },
    {
        "number": 4054,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    return str(max(a))\n\n\nstdin = input()\nresult = solution(stdin)\nprint(result) "
    },
    {
        "number": 4055,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    \n    k = 0\n    for i in range(1, n-1):\n        if a[i-1] == a[i+1] == 1 and a[i] == 0:\n            k += 1\n    return str(k)\n"
    },
    {
        "number": 4055,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    k = 0\n    \n    for i in range(2, n - 1):\n        if a[i - 1] == a[i + 1] == 1 and a[i] == 0:\n            k += 1\n    \n    return str(k)\n"
    },
    {
        "number": 4055,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = [int(x) for x in stdin.split('\\n')[1].split()]\n\n    k = 0\n    for i in range(2, n - 1):\n        if a[i - 1] == a[i + 1] == 1 and a[i] == 0:\n            k += 1\n\n    return str(k)\n\ninput_str = '''5\n1 1 1 1\n'''\n\nprint(solution(input_str)) "
    },
    {
        "number": 4055,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    min_k = 0\n    max_k = 1\n    \n    for i in range(1, n - 1):\n        if a[i - 1] == 0 and a[i + 1] == 0:\n            min_k += 1\n            max_k += 1\n            \n    if a[0] == 0 and a[1] == 0:\n        min_k += 1\n        \n    if a[n - 2] == 0 and a[n - 1] == 0:\n        min_k += 1\n        \n    if max_k == 1:\n        min_k = 0\n        \n    return min_k"
    },
    {
        "number": 4055,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def check_neighbors(a: int, b: int, c: int) -> bool:\n        return a == b == 0 or c == 0\n\n    n = int(stdin.split('\\n')[0])\n    flats = list(map(int, stdin.split('\\n')[1].split()))\n\n    min_k = 0\n    for i in range(n - 2):\n        if flats[i] == 0 and check_neighbors(flats[i - 1], flats[i + 1], flats[i + 2]):\n            min_k += 1\n\n    return str(min_k)\n\n\ninput_data = '''10\n1 1 0 1 1 0 1 0 1 0\n5\n1 1 0 0 0\n4\n1 1 1 1'''\n\n\nfor i in input_data.split('\\n')[1:-1]:\n    print(solution(i))\n    print() "
    },
    {
        "number": 4055,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    \n    k = 0\n    for i in range(1, n-1):\n        if a[i-1] == a[i+1] == 1 and a[i] == 0:\n            k += 1\n            \n    return str(k)\n"
    },
    {
        "number": 4055,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    \n    k = 0\n    for i in range(1, n - 1):\n        if a[i - 1] == a[i + 1] == 0:\n            k += 1\n    \n    return str(k)\n\n\ninput_string = \"\"\"5\n1 1 0 0 0\n\"\"\"\n\nprint(solution(input_string)) "
    },
    {
        "number": 4055,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    flats = list(map(int, stdin.splitlines()[1].split()))\n    \n    k = 0\n    for i in range(1, n-1):\n        if flats[i-1] != flats[i+1]:\n            k += 1\n            \n    return str(k)\n\n\ninput_data = '''\\\n10\n1 1 0 1 1 0 1 0 1 0\n'''\n\nresult = solution(input_data)\nprint(result) "
    },
    {
        "number": 4055,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    k = 0\n    for i in range(1, n-1):\n        if a[i-1] == a[i+1] == 1 and a[i] == 0:\n            k += 1\n    return k"
    },
    {
        "number": 4055,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    if n <= 2:\n        return 0\n\n    min_k = n\n    for i in range(2, n - 1):\n        if (a[i - 1] + a[i + 1] == 2 and a[i] == 0):\n            min_k = min(min_k, i)\n            break\n\n    return min_k\n"
    },
    {
        "number": 4056,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin.split('\\n')[0])\n    arr = list(map(int, stdin.split('\\n')[1].split()))\n\n    # Find the number of common divisors\n    def common_divisors(x, y):\n        return len(set([d for d in range(1, max(x, y) + 1) if x % d == 0 and y % d == 0]))\n\n    divisors = arr[0]\n    for i in range(1, n):\n        divisors = common_divisors(divisors, arr[i])\n\n    return str(divisors)\n"
    },
    {
        "number": 4056,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = a[0]\n    for i in range(1, n):\n        result = lcm(result, a[i])\n\n    return str(result)"
    },
    {
        "number": 4056,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    from collections import Counter\n    \n    n = int(input())\n    a = list(map(int, input().split()))\n    gcd = lambda x, y: x if y == 0 else gcd(y, x % y)\n    \n    def common_divisors(x, y):\n        return gcd(x, y)\n    \n    common_divisor = 1\n    for i in range(n):\n        for j in range(i+1, n):\n            common_divisor = common_divisors(a[i], a[j])\n            if common_divisor == 0:\n                return 0\n    return common_divisor"
    },
    {
        "number": 4056,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    def gcd(a, b):\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n\n    common_divisors = set()\n    for i in range(n):\n        for j in range(i + 1, n):\n            common_divisors.add(gcd(a[i], a[j]))\n\n    return str(len(common_divisors))\n"
    },
    {
        "number": 4056,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    def lcm(x, y):\n        return x * y // gcd(x, y)\n\n    result = a[0]\n    for i in range(1, n):\n        result = lcm(result, a[i])\n\n    return str(result)\n"
    },
    {
        "number": 4056,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    common_divisor = a[0]\n    for i in range(1, n):\n        common_divisor = find_common_divisor(common_divisor, a[i])\n        if common_divisor == 1:\n            return 1\n\n    return common_divisor\n\n\ndef"
    },
    {
        "number": 4056,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    common_divisor = a[0]\n    for i in range(1, n):\n        common_divisor = find_common_divisor(common_divisor, a[i])\n        if common_divisor == 0:\n            return \"0\"\n\n    return str(common_divisor)\n\n\ndef"
    },
    {
        "number": 4056,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = a[0]\n    for i in range(1, n):\n        x = gcd(x, a[i])\n    return x\n\ndef"
    },
    {
        "number": 4056,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    from functools import reduce\n    from operator import gcd\n\n    # Read input\n    n = int(stdin)\n    a = list(map(int, stdin.split()[1:]))\n\n    # Calculate common divisor for all numbers\n    common_divisor = reduce(gcd, a)\n\n    # Count the number of positive divisors for the common divisor\n    count = 0\n    for i in range(1, n + 1):\n        if common_divisor % i == 0:\n            count += 1\n\n    # Output the result\n    return str(count)\n"
    },
    {
        "number": 4056,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    \n    common_divisor = a[0]\n    for i in range(1, n):\n        common_divisor = gcd(common_divisor, a[i])\n        \n    return str(common_divisor)\n\n\ndef"
    },
    {
        "number": 4057,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    coins = list(map(int, stdin.split('\\n')[1].split()))\n    coins.sort()\n    pockets = []\n    current_pocket = []\n    \n    for coin in coins:\n        if not current_pocket or coin != current_pocket[-1]:\n            current_pocket.append(coin)\n        else:\n            pockets.append(current_pocket)\n            current_pocket = [coin]\n    pockets.append(current_pocket)\n    \n    return len(pockets)\n"
    },
    {
        "number": 4057,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    coins = sorted(list(map(int, stdin.splitlines()[1].split())))\n    pocket_count = 1\n\n    for i in range(1, n):\n        if coins[i] != coins[i - 1]:\n            pocket_count += 1\n\n    return str(pocket_count)\n"
    },
    {
        "number": 4057,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    coins = list(map(int, stdin.split(\"\\n\")[1].split()))\n    coins.sort()\n    pockets = []\n    count = 0\n    current_pocket = []\n\n    for coin in coins:\n        if coin not in current_pocket:\n            current_pocket.append(coin)\n            count += 1\n        else:\n            pockets.append(current_pocket)\n            current_pocket = [coin]\n\n    pockets.append(current_pocket)\n\n    return len(pockets)\n\n\ninput_string = \"\"\"6\n1 2 4 3 3 2\"\"\"\n\noutput = solution(input_string)\nprint(output) "
    },
    {
        "number": 4057,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    coins = list(map(int, stdin.splitlines()[1].split()))\n    coins.sort()\n\n    pockets = []\n    i = 0\n    while i < n:\n        pocket = [coins[i]]\n        while i < n - 1 and coins[i] == coins[i + 1]:\n            pocket.append(coins[i + 1])\n            i += 1\n        pockets.append(pocket)\n        i += 1\n\n    return len(pockets)\n\n\nstdin = \"\"\"6\n1 2 4 3 3 2\"\"\"\nprint(solution(stdin))\n\n\nstdin = \"\"\"1\n100\"\"\"\nprint(solution(stdin)) "
    },
    {
        "number": 4057,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    coins = list(map(int, stdin.split('\\n')[1].split()))\n\n    # Initialize a list to keep track of the number of coins for each unique coin value\n    coin_count = [0] * 101\n    for coin in coins:\n        coin_count[coin] += 1\n\n    # Initialize a list to keep track of the number of used pockets\n    used_pockets = [0] * 101\n\n    # Iterate through the unique coin values and find the minimum number of pockets needed\n    min_pockets = float('inf')\n    for i in range(1, 101):\n        if coin_count[i] > 0 and used_pockets[i] == 0:\n            used_pockets[i] = 1\n            min_pockets = 1\n            for j in range(i + 1, 101):\n                if coin_count[j] > 0 and used_pockets[j] == 0:\n                    used_pockets[j] = 1\n                    min_pockets += 1\n                    break\n\n    return min_pockets\n"
    },
    {
        "number": 4057,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    distinct_coins = set(a)\n    min_pockets = 0\n    \n    if len(distinct_coins) == len(a):\n        min_pockets = 1\n    else:\n        min_pockets = len(distinct_coins) + 1\n    \n    return str(min_pockets)\n"
    },
    {
        "number": 4057,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    coins = list(map(int, stdin.split(\"\\n\")[1].split()))\n    unique_coins = set(coins)\n    count = 1\n    for i in range(len(unique_coins)):\n        count += sum([1 for coin in coins if coin == unique_coins[i]])\n    return count\n\nn = int(input())\na = list(map(int, input().split()))\n\nprint(solution(str(n) + \"\\n\" + \" \".join(map(str, a)))) "
    },
    {
        "number": 4057,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    coins = sorted(set(int(x) for x in stdin.splitlines()[1].split()))\n    pockets = []\n    i = 0\n    \n    while i < len(coins):\n        pocket = [coins[i]]\n        j = i + 1\n        while j < len(coins):\n            if coins[j] > pocket[-1]:\n                pocket.append(coins[j])\n            j += 1\n        pockets.append(pocket)\n        i = j\n    \n    return len(pockets)\n"
    },
    {
        "number": 4057,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    \n    pockets = {}\n    min_pockets = 1\n    \n    for coin in a:\n        if coin in pockets:\n            pockets[coin] += 1\n        else:\n            pockets[coin] = 1\n            min_pockets += 1\n    \n    return min_pockets\n"
    },
    {
        "number": 4057,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    n = int(input_data[0])\n    coins = list(map(int, input_data[1].split()))\n\n    # We can use a dictionary to store the number of occurrences of each coin value.\n    coin_count = {}\n    for coin in coins:\n        if coin in coin_count:\n            coin_count[coin] += 1\n        else:\n            coin_count[coin] = 1\n\n    # The number of pockets needed is the number of unique coin values plus one.\n    num_pockets = len(coin_count) + 1\n\n    return str(num_pockets)\n"
    },
    {
        "number": 4058,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, input().split())\n    house = list(map(int, input().split()))\n    heaters = [i for i in range(n) if house[i] == 1]\n\n    if r > n // 2:\n        return -1\n\n    ans = 0\n    for i in range(n):\n        left, right = i - r, i + r\n        left = max(left, 0)\n        right = min(right, n - 1)\n        heaters_in_range = [j for j in heaters if left <= j <= right]\n        ans = max(ans, len(heaters_in_range))\n\n    return ans if ans < n else -1\n\n\ndef"
    },
    {
        "number": 4058,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, input().split())\n    house = list(map(int, input().split()))\n\n    heaters = []\n    for i in range(n):\n        if house[i] == 1:\n            heaters.append(i)\n\n    min_heaters = 0\n    if len(heaters) == 0:\n        return -1\n\n    for i in range(n):\n        for j in range(len(heaters)):\n            if heaters[j] - r <= i <= heaters[j] + r - 1:\n                break\n        else:\n            min_heaters += 1\n            heaters.append(i)\n\n    return min_heaters\n\n\ndef"
    },
    {
        "number": 4058,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, input().split())\n    house = list(map(int, input().split()))\n\n    if n == 1 and house[0] == 0:\n        return -1\n\n    max_pos = -1\n    for i in range(n):\n        if house[i] == 1:\n            max_pos = i\n        else:\n            break\n\n    if max_pos == -1:\n        return -1\n\n    max_range = r\n    min_range = 0\n    heaters = []\n    warmed_up = [0] * n\n\n    for i in range(n):\n        if house[i] == 1:\n            warmed_up[i] = 1\n\n    for i in range(max_pos - max_range, max_pos + max_range + 1):\n        if i >= 0 and i < n:\n            if house[i] == 0:\n                for j in range(i - min_range, i + min_range + 1):\n                    if j >= 0 and j < n and house[j] == 1:\n                        if warmed_up[i] == 0:\n                            heaters.append(i)\n                            warmed_up[i] = 1\n\n    if sum(warmed_up) == n:\n        return len(heaters)\n    else:\n        return -1\n\ninput_str = \"\"\"6 2\n0 1 1 0 0 1\n\"\"\"\n\nprint(solution(input_str))\n"
    },
    {
        "number": 4058,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, input().split())\n    house = list(map(int, input().split()))\n\n    heaters = []\n    max_heated = 0\n    for i in range(n):\n        if house[i] == 1:\n            heaters.append(i)\n            max_heated += r + 1\n        else:\n            max_heated += 1\n\n        if max_heated >= n:\n            return len(heaters)\n\n    return -1\n\n\ninput_stdin = \"\"\"6 2\n0 1 1 0 0 1\"\"\"\n\noutput = solution(input_stdin)\nprint(output)  # Output: 3\n\ninput_stdin = \"\"\"5 3\n1 0 0 0 1\"\"\"\n\noutput = solution(input_stdin)\nprint(output)  # Output: 2\n\ninput_stdin = \"\"\"5 10\n0 0 0 0 1\"\"\"\n\noutput = solution(input_stdin)\nprint(output)  # Output: -1\n\ninput_stdin = \"\"\"10 3\n0 0 1 1 0 1 0 0 0 1\"\"\"\n\noutput = solution(input_stdin)\nprint(output)  # Output: 3 "
    },
    {
        "number": 4058,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def warm_up(pos: int, r: int, house: list) -> int:\n        count = 0\n        for i in range(max(1, pos - r + 1), pos + r - 1):\n            if house[i] == 0:\n                count += 1\n        return count\n\n    n, r = map(int, input().split())\n    house = list(map(int, input().split()))\n\n    heaters = [i for i, x in enumerate(house) if x == 1]\n    heaters.sort()\n\n    if heaters[0] > 1:\n        warm_count = warm_up(heaters[0], r, house)\n        if warm_count > 0:\n            return -1\n\n    warm_count = 0\n    i = 0\n    while i < len(heaters):\n        if heaters[i] > n:\n            break\n        warm_count += warm_up(heaters[i], r, house)\n        if warm_count > n:\n            return -1\n        i += 1\n\n    return i\n\n\ninput_stdin = \"\"\"6 2\n0 1 1 0 0 1\n\"\"\"\n\nprint(solution(input_stdin))"
    },
    {
        "number": 4058,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n, r = map(int, input_list[0].split())\n    house = list(map(int, input_list[1].split()))\n\n    heaters = [i for i in range(len(house)) if house[i] == 1]\n    heaters.sort(key=lambda x: abs(x - len(house) // 2))\n    distances = []\n\n    for heater in heaters:\n        left_dist = heater - 1\n        while left_dist >= 0 and house[left_dist] == 0:\n            left_dist -= 1\n        if left_dist < 0:\n            continue\n        right_dist = heater + 1\n        while right_dist < len(house) and house[right_dist] == 0:\n            right_dist += 1\n        distances.append((heater, right_dist - left_dist - 1))\n\n    if sum(distance for _, distance in distances) >= len(house):\n        return str(len(heaters))\n    else:\n        return \"-1\"\n\n\ninput_list = [\n    \"6 2\",\n    \"0 1 1 0 0 1\",\n    \"5 3\",\n    \"1 0 0 0 1\",\n    \"5 10\",\n    \"0 0 0 0 0\",\n    \"10 3\",\n    \"0 0 1 1 0 1 0 0 0 1\"\n]\n\nfor stdin in input_list:\n    print(solution(stdin))"
    },
    {
        "number": 4058,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    n, r = map(int, input_list[0].split())\n    house = list(map(int, input_list[1].split()))\n\n    heaters = []\n    for i in range(len(house)):\n        if house[i] == 1:\n            heaters.append(i)\n\n    heaters.sort()\n\n    count = 0\n    for i in range(len(house)):\n        if i == 0:\n            if heaters[0] - 1 >= 0 and house[i] == 0:\n                count += 1\n            if heaters[0] - 1 >= 0 and house[i] == 1:\n                count += 1\n        elif i == len(house) - 1:\n            if heaters[-1] + r <= len(house) and house[i] == 0:\n                count += 1\n            if heaters[-1] + r <= len(house) and house[i] == 1:\n                count += 1\n        else:\n            if heaters[0] - 1 >= 0 and house[i] == 0:\n                count += 1\n            if heaters[0] - 1 >= 0 and house[i] == 1:\n                count += 1\n            if heaters[-1] + r <= len(house) and house[i] == 0:\n                count += 1\n            if heaters[-1] + r <= len(house) and house[i] == 1:\n                count += 1\n\n            for j in range(len(heaters)):\n                if heaters[j] - r <= i <= heaters[j] + r - 1 and house[i] == 0:\n                    count += 1\n                    break\n                elif heaters[j] - r <= i <= heaters[j] + r - 1 and house[i] == 1:\n                    count += 1\n                    break\n\n    if count == len(house):\n        return str(count)\n    else:\n        return \"-1\"\n\n\nstdin = \"\"\"6 2\n0 1 1 0 0 1\"\"\"\n\nprint(solution(stdin)) # Output: 3 "
    },
    {
        "number": 4058,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    house = list(map(int, stdin.split()))\n\n    if r > n:\n        return -1\n\n    heaters = [i for i in range(n) if house[i] == 1]\n    heaters.sort()\n\n    warm = [False] * n\n    warm[0] = True\n\n    for h in heaters:\n        for i in range(max(0, h - r + 1), min(h + r, n)):\n            warm[i] = True\n\n    if all(warm):\n        return len(heaters)\n    else:\n        return -1\n\nn, r = map(int, input().split())\nhouse = list(map(int, input().split()))\n\nprint(solution(input()))"
    },
    {
        "number": 4058,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, input().split())\n    house = list(map(int, input().split()))\n    \n    heaters = []\n    heaters_range = [r + 1] * n\n    for i, pos in enumerate(house):\n        if pos:\n            heaters.append(i)\n            if i - r - 1 >= 0:\n                heaters_range[i - r - 1] = r - i + 1\n            if i + r - 1 < n:\n                heaters_range[i + r - 1] = i + r - r\n    \n    if heaters == []:\n        return -1\n    \n    min_heaters = 0\n    for r in heaters_range:\n        if r > 0:\n            min_heaters += 1\n    \n    return min_heaters\n"
    },
    {
        "number": 4058,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, input().split())\n    house = list(map(int, input().split()))\n    \n    heaters = []\n    for i in range(n):\n        if house[i] == 1:\n            heaters.append(i)\n    \n    if not heaters:\n        return -1\n    \n    heaters.sort()\n    min_heaters = 1\n    left, right = 0, 1\n    \n    while right < n:\n        if heaters[left] + r - 1 >= right:\n            right += 1\n        else:\n            left += 1\n            min_heaters += 1\n    \n    return min_heaters"
    },
    {
        "number": 4059,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    N = int(input_list[0])\n    \n    count = 0\n    \n    for A in range(1, N):\n        for B in range(1, N - A + 1):\n            C = N - A * B\n            if C >= 1 and A * B + C == N:\n                count += 1\n    \n    return str(count)\n"
    },
    {
        "number": 4059,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    count = 0\n    for A in range(1, N):\n        for B in range(1, N):\n            C = N - A * B\n            if C > 0 and C <= N:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4059,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    count = 0\n    \n    # iterate through the possible values of A\n    for A in range(1, N):\n        # calculate the maximum possible value of B\n        B_max = (N - A) // 2\n        # iterate through the possible values of B\n        for B in range(1, B_max + 1):\n            # calculate the possible value of C\n            C = N - A * B\n            # check if C is a valid value\n            if C > 0 and A * B + C == N:\n                count += 1\n                \n    return str(count) "
    },
    {
        "number": 4059,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n\n    count = 0\n\n    for A in range(1, N):\n        for B in range(1, N - A + 1):\n            C = N - A * B\n            if C >= 1 and C <= N:\n                count += 1\n\n    return count\n\n\ndef"
    },
    {
        "number": 4059,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for A in range(1, N+1):\n        for B in range(1, N+1):\n            C = N - A*B\n            if C >= 1 and C <= N and A*B + C == N:\n                count += 1\n    return count\n\ninput_str = input()\noutput_str = solution(input_str)\nprint(output_str) "
    },
    {
        "number": 4059,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for A in range(1, N):\n        for B in range(1, N):\n            C = N - A * B\n            if C > 0:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 4059,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    count = 0\n    for A in range(1, N+1):\n        for B in range(1, N+1):\n            C = N - A * B\n            if C >= 1 and C < N:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4059,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    count = 0\n    for A in range(1, N):\n        for B in range(1, N):\n            C = N - A * B\n            if C >= 1 and A * B + C == N:\n                count += 1\n    return str(count)\n\n\ninput_str = input()\noutput_str = solution(input_str)\nprint(output_str) "
    },
    {
        "number": 4059,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    \n    # Initialize variables\n    count = 0\n    A = 1\n    B = N - A\n    \n    # Loop until C is greater than or equal to N\n    while B >= 1:\n        C = N - A*B\n        if C >= 1:\n            count += 1\n            A += 1\n            B = N - A\n        else:\n            break\n    \n    return count"
    },
    {
        "number": 4059,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n\n    # Initialize variables to store the count of tuples (A, B, C)\n    count_tuples = 0\n\n    # Iterate through all possible values of A\n    for A in range(1, N):\n        # Calculate the value of B\n        B = (N - C) // A\n\n        # Check if B is a valid value\n        if 1 <= B <= N and (N - A * B) % A == 0:\n            count_tuples += 1\n\n    return str(count_tuples) "
    },
    {
        "number": 4060,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_regular(bracket_sequence: str) -> bool:\n        stack = []\n        for bracket in bracket_sequence:\n            if bracket == '(':\n                stack.append(bracket)\n            elif bracket == ')':\n                if not stack or stack.pop() != '(':\n                    return False\n        return len(stack) == 0\n\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n\n    count = 0\n    for i in range(n):\n        if s[i] == ')' and s[i - 1] != '(':\n            if is_regular(s[:i] + '(' + s[i + 1:]):\n                count += 1\n        elif s[i] == '(' and s[i - 1] != ')':\n            if is_regular(s[:i] + ')' + s[i + 1:]):\n                count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4060,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n    \n    count = 0\n    for i in range(n):\n        if (s[i] == ')' and i > 0 and s[i-1] == ')') or (s[i] == '(' and i < n-1 and s[i+1] == '('):\n            count += 1\n    \n    return str(count)\n"
    },
    {
        "number": 4060,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    count = 0\n    \n    for i in range(n):\n        if s[i] == '(' and i < n - 1 and s[i+1] == ')':\n            count += 1\n        elif s[i] == ')' and i > 0 and s[i-1] == '(':\n            count += 1\n            \n    return str(count)\n\n\ninput_str = \"\"\"6\n(((())\n3\n\n6\n()()()\n0\n\n1\n)\n0\n\n8\n)))((((\n0\"\"\"\n\noutput_str = solution(input_str)\nprint(output_str) "
    },
    {
        "number": 4060,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n\n    # count the number of opening and closing brackets\n    count_open = s.count('(')\n    count_close = s.count(')')\n\n    # check if the number of opening and closing brackets are equal\n    if count_open != count_close:\n        return '0'\n\n    # if there is only one bracket, it can be changed to the opposite\n    if n == 1:\n        return '1'\n\n    # initialize variables to store the positions to change\n    positions = []\n\n    # loop through the bracket sequence\n    for i in range(n):\n        if s[i] == '(':\n            # if there is a closing bracket after the current opening bracket, the sequence is regular\n            if i < n-1 and s[i+1] == ')':\n                continue\n            else:\n                positions.append(i)\n        else:\n            # if there is an opening bracket after the current closing bracket, the sequence is regular\n            if i < n-1 and s[i+1] == '(':\n                continue\n            else:\n                positions.append(i)\n\n    return str(len(positions))\n"
    },
    {
        "number": 4060,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n    \n    count = 0\n    for i in range(n):\n        if s[i] == '(' and i > 0 and s[i-1] == ')':\n            count += 1\n        elif s[i] == ')' and i < n-1 and s[i+1] == '(':\n            count += 1\n    \n    return str(count)\n\n\ninput_string = \"\"\"6\n(((())\n\"\"\"\n\nprint(solution(input_string)) # Output: 3\n\n\ninput_string = \"\"\"6\n()()()\n\"\"\"\n\nprint(solution(input_string)) # Output: 0\n\n\ninput_string = \"\"\"1\n)\n\"\"\"\n\nprint(solution(input_string)) # Output: 0\n\n\ninput_string = \"\"\"8\n)))(((((\n\"\"\"\n\nprint(solution(input_string)) # Output: 0 "
    },
    {
        "number": 4060,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n    \n    count = 0\n    for i in range(n):\n        if s[i] == '(' and i + 1 < n and s[i + 1] == ')':\n            count += 1\n            if i + 2 < n and s[i + 2] == '(':\n                count -= 1\n        elif s[i] == ')' and i > 0 and s[i - 1] == '(':\n            count += 1\n            if i - 1 > 0 and s[i - 2] == ')':\n                count -= 1\n    \n    return str(count)\n"
    },
    {
        "number": 4060,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    s = input()\n    counter = 0\n\n    for i in range(n):\n        if s[i] == '(' and i + 2 <= n and s[i:i+2] == '()':\n            counter += 1\n        elif s[i] == ')' and i - 1 >= 0 and s[i-1:i+1] == '()':\n            counter += 1\n\n    return str(counter)\n"
    },
    {
        "number": 4060,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    count = 0\n    for i in range(n):\n        if s[i] == '(':\n            if i < n - 1 and s[i+1] == ')':\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 4060,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    count = 0\n    for i in range(n):\n        if (s[i] == '(' and s[n-i-1] == ')') or (s[i] == ')' and s[n-i-1] == '('):\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4060,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    s = input()\n\n    stack = []\n    count = 0\n\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                stack.append(char)\n\n    count = len(stack)\n\n    result = 0\n    for i in range(n):\n        if s[i] == '(':\n            temp = s[:i] + ')' + s[i+1:]\n        else:\n            temp = s[:i] + '(' + s[i+1:]\n\n        stack = []\n        for char in temp:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if stack and stack[-1] == '(':\n                    stack.pop()\n                else:\n                    stack.append(char)\n\n        if len(stack) == 0:\n            result += 1\n\n    return str(result)\n\n\ninput_stdin = \"\"\"6\n(((())\n\"\"\"\n\nprint(solution(input_stdin)) "
    },
    {
        "number": 4061,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(\"\\n\")\n    n, m = len(s), len(t)\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1] + 1\n        for j in range(m - 1, -1, -1):\n            if s[i - 1] == t[j]:\n                dp[i] = max(dp[i], dp[i - 1] + 1)\n                break\n    return n - dp[n]\n"
    },
    {
        "number": 4061,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.splitlines()\n    s = s[0]\n    t = s[0] + s[1] + s[2]\n\n    i = 3\n    j = 3\n    max_len = 0\n    while i < len(s):\n        if s[i:i+len(t)] == t:\n            max_len = max(max_len, i - j)\n            i += len(t)\n        else:\n            j += 1\n            while i < len(s) and s[i-len(t):i] != t:\n                i += 1\n    return max_len\n\n\ndef"
    },
    {
        "number": 4061,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    s = input_list[0]\n    t = input_list[1]\n    max_len = 0\n\n    for i in range(len(s)):\n        j = i + 1\n        while j <= len(s):\n            if t == s[i:j]:\n                max_len = max(max_len, j - i)\n            j += 1\n\n    return str(max_len)"
    },
    {
        "number": 4061,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    n, m = len(s), len(t)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n    for i in range(m + 1):\n        dp[i][0] = i\n\n    for i in range(1, n + 1):\n        dp[0][i] = i\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s[j - 1] == t[i - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = min(dp[i][j - 1], dp[i - 1][j]) + 1\n\n    return dp[m][n]"
    },
    {
        "number": 4061,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    s_list = list(s)\n    t_list = list(t)\n    max_length = 0\n    while t_list == sorted(s_list[:len(t_list)]):\n        max_length += 1\n        s_list.pop(0)\n    return max_length\n"
    },
    {
        "number": 4061,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    n, m = len(s), len(t)\n    # Initialize a list to store the indices of each character in t\n    t_indices = []\n    for i, c in enumerate(t):\n        t_indices.append(s.find(c, t_indices[-1] if t_indices else 0))\n    # Initialize a list to store the length of each subsequence ending at each index\n    subseq_lens = [0] * (n + 1)\n    # Calculate the length of each subsequence ending at each index\n    for i in range(n):\n        for j in range(m):\n            if s[i:i+j+1] == t[:j+1]:\n                subseq_lens[i+j+1] = max(subseq_lens[i+j+1], subseq_lens[i] + j + 1)\n    # Calculate the maximum length of the substring that can be removed to ensure t remains a subsequence of s\n    max_len = 0\n    for i in range(n, n-m, -1):\n        if subseq_lens[i] >= subseq_lens[i-m]:\n            max_len = max(max_len, i-t_indices[-1]-1)\n    return max_len"
    },
    {
        "number": 4061,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    s_list = list(s)\n    t_list = list(t)\n    n = len(s_list)\n    m = len(t_list)\n    max_length = 0\n    i = 0\n    j = 0\n    while i < n and j < m:\n        if s_list[i] == t_list[j]:\n            j += 1\n        max_length = max(max_length, i + 1 - j)\n        i += 1\n    return max_length\n\n\ndef"
    },
    {
        "number": 4061,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    s = list(s)\n    t = list(t)\n    max_len = 0\n\n    for i in range(len(s) - len(t) + 1):\n        j = 0\n        while j < len(t):\n            if s[i + j] != t[j]:\n                break\n            j += 1\n        if j == len(t):\n            max_len = max(max_len, i)\n\n    return max_len\n"
    },
    {
        "number": 4061,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    n = len(s)\n    m = len(t)\n    i, j = 0, 0\n    max_len = 0\n    while i < n and j < m:\n        if s[i] == t[j]:\n            j += 1\n        max_len = max(max_len, i)\n        i += 1\n    return max_len\n"
    },
    {
        "number": 4061,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    s, t = s.strip(), t.strip()\n    n, m = len(s), len(t)\n    dp = [[False] * (n + 1) for _ in range(m + 1)]\n    for i in range(m + 1):\n        dp[i][0] = True\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s[j - 1] == t[i - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    for i in range(m, -1, -1):\n        if dp[i][n]:\n            return n - n + i + 1\n    return 0\n"
    },
    {
        "number": 4062,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return str(b * d)\n\n\nstdin = input(\"Enter a b c d separated by spaces: \")\nprint(solution(stdin)) "
    },
    {
        "number": 4062,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    max_x = max(a, b)\n    min_y = max(c, d)\n    return max_x * min_y\n\n\ndef"
    },
    {
        "number": 4062,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Split input string into individual values\n    a, b, c, d = map(int, stdin.split())\n\n    # Calculate the maximum possible value of x * y\n    max_product = (min(b, d) - max(a, c)) * (min(b, d) - max(a, c))\n\n    # Return the maximum possible value\n    return str(max_product)\n"
    },
    {
        "number": 4062,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    max_value = 0\n    for x in range(a, b + 1):\n        for y in range(c, d + 1):\n            value = x * y\n            if value > max_value:\n                max_value = value\n    return max_value\n\ndef"
    },
    {
        "number": 4062,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    x = min(a, b)\n    y = max(c, d)\n    return str(x * y)\n"
    },
    {
        "number": 4062,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return str(max(a * b, c * d))\n\n\ndef"
    },
    {
        "number": 4062,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    max_product = 0\n\n    for x in range(a, b+1):\n        for y in range(c, d+1):\n            product = x * y\n            max_product = max(max_product, product)\n\n    return str(max_product)"
    },
    {
        "number": 4062,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n\n    if c <= a <= b <= d:\n        return str(b * d)\n    elif c <= b <= a <= d:\n        return str(a * d)\n    elif a <= c <= b <= d:\n        return str(b * c)\n    elif a <= d <= b <= c:\n        return str(a * c)\n    elif a <= b <= c <= d:\n        return str(b * b)\n    else:\n        return str(a * a)\n"
    },
    {
        "number": 4062,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    x = max(a, c)\n    y = min(b, d)\n    return str(x * y)\n"
    },
    {
        "number": 4062,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    max_value = 0\n    \n    for x in range(a, b+1):\n        for y in range(c, d+1):\n            product = x * y\n            if product > max_value:\n                max_value = product\n                \n    return str(max_value)\n\ninput_str = input(\"Enter input: \")\noutput_str = solution(input_str)\nprint(\"Output:\", output_str) "
    },
    {
        "number": 4063,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *d = map(int, stdin.split())\n    d_sum = sum(d)\n    count = 0\n    for i in range(1, N+1):\n        if d_sum % 2 == 0:\n            d_sum -= d[i-1]\n            if d_sum == 0:\n                count += 1\n        else:\n            break\n    return count\n"
    },
    {
        "number": 4063,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, *d = map(int, stdin.split())\n    d.sort()\n\n    count = 0\n    for i in range(1, N + 1):\n        if d[N // 2] <= i:\n            break\n        if d[i - 1] <= i and i <= d[N // 2]:\n            count += 1\n\n    return count\n"
    },
    {
        "number": 4063,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    d = list(map(int, stdin.split()[1:]))\n    ARC = [i for i, x in enumerate(d, start=1) if x >= K]\n    ABC = [i for i, x in enumerate(d, start=1) if x < K]\n    return len(ARC) - len(ABC)"
    },
    {
        "number": 4063,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    d_array = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    # Initialize variables\n    count_arc = 0\n    count_abc = 0\n    count_k = 0\n\n    # Count problems for ARCs and ABCs\n    for i in range(N):\n        if d_array[i] >= 5:\n            count_arc += 1\n        else:\n            count_abc += 1\n\n    # Find the number of choices of K\n    if count_arc == count_abc:\n        count_k = 1\n    else:\n        count_k = 0\n\n    return str(count_k)\n"
    },
    {
        "number": 4063,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, *d = map(int, stdin.split())\n    count = 0\n    for K in range(1, N+1):\n        ARCs = sum(1 for i in range(N) if d[i] >= K)\n        ABCs = N - ARCs\n        if ARCs == ABCs:\n            count += 1\n    return count\n\ninput_str = \"6\\n9 1 4 4 6 7\"\nprint(solution(input_str)) "
    },
    {
        "number": 4063,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, *d = map(int, stdin.split())\n    count = 0\n    for i in range(N):\n        if d[i] >= 5:\n            count += 1\n\n    return 2 if count % 2 == 0 else 1\n\n\ndef"
    },
    {
        "number": 4063,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, *d = map(int, stdin.split())\n    K = 0\n    count = 0\n    for i in range(N):\n        if d[i] >= K:\n            count += 1\n    return count\n\nstdin = \"6\\n9 1 4 4 6 7\"\nprint(solution(stdin))"
    },
    {
        "number": 4063,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    d = [int(i) for i in stdin[1].split()]\n    count_arcs = 0\n    count_abcs = 0\n    for i in d:\n        if i >= 5:\n            count_arcs += 1\n        else:\n            count_abcs += 1\n    # calculate the choices of K\n    choices = 0\n    for i in range(1, max(d) + 1):\n        count_arcs_new = count_abcs\n        count_abcs_new = count_arcs\n        for j in d:\n            if j >= i:\n                count_arcs_new += 1\n            else:\n                count_abcs_new += 1\n        if count_arcs_new == count_abcs_new:\n            choices += 1\n    return str(choices)\n"
    },
    {
        "number": 4063,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, *d = map(int, stdin.split())\n    d = sorted(d)\n    \n    count = 0\n    for i in range(1, N+1):\n        if d[i-1] >= i:\n            count += 1\n    \n    return count\n"
    },
    {
        "number": 4063,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, *d = map(int, stdin.split())\n    count = 0\n    \n    for i in range(1, N+1):\n        if d[i-1] >= N // 2:\n            count += 1\n    \n    return count"
    },
    {
        "number": 4064,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split()[:4])\n    a = list(map(int, stdin.split()[4:]))\n\n    good_times = 0\n    prev_sleep_time = 0\n    for i in range(n):\n        sleep_time = a[i] - 1 if prev_sleep_time < l else a[i]\n        prev_sleep_time = sleep_time\n        if l <= sleep_time <= r:\n            good_times += 1\n\n    return str(good_times)"
    },
    {
        "number": 4064,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.splitlines()\n    n, h, l, r = map(int, inputs[0].split())\n    a = list(map(int, inputs[1].split()))\n    cnt = 0\n\n    for i in range(n):\n        if l <= a[i] - 1 <= r:\n            cnt += 1\n\n    return str(cnt)"
    },
    {
        "number": 4064,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split()[:4])\n    a = list(map(int, stdin.split()[4:]))\n    good_times = 0\n\n    for i in range(n):\n        if l <= a[i] <= r:\n            good_times += 1\n\n    return str(good_times)\n"
    },
    {
        "number": 4064,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.splitlines()\n    n, h, l, r = map(int, input_data[0].split())\n    a = list(map(int, input_data[1].split()))\n\n    count = 0\n    time = 0\n\n    for i in range(n):\n        if i % 2 == 0:\n            time = a[i] - 1\n        else:\n            time = a[i]\n\n        if l <= time % h <= r:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4064,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split()[:4])\n    a = list(map(int, stdin.split()[4:]))\n    \n    count = 0\n    for i in range(n):\n        if l <= a[i] - 1 <= r:\n            count += 1\n        if l <= a[i] <= r:\n            count += 1\n    \n    return count\n"
    },
    {
        "number": 4064,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()[1:]))\n\n    good_times = 0\n    sleep_after = 0\n    for i in range(n):\n        if a[i] > sleep_after:\n            good_times += 1\n            sleep_after = a[i]\n        else:\n            good_times += 1\n            sleep_after = a[i] - 1\n\n    return str(good_times)"
    },
    {
        "number": 4064,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split()[:4])\n    a = list(map(int, stdin.split()[4:]))\n    max_good_times = 0\n\n    for i in range(n):\n        if i == 0:\n            if a[i] - 1 > l:\n                max_good_times += 1\n        else:\n            if a[i] - 1 <= l and a[i] > l:\n                max_good_times += 1\n\n    return str(max_good_times)\n\n\ninput_str = '''7 24 21 23\n16 17 14 20 20 11 22'''\n\nprint(solution(input_str)) # Output: 3 "
    },
    {
        "number": 4064,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    n, h, l, r = map(int, input_list[0].split())\n    a = list(map(int, input_list[1].split()))\n\n    count = 0\n    total_sleep = 0\n\n    for i in range(n):\n        if a[i] <= h:\n            total_sleep += a[i]\n            if l <= total_sleep <= r:\n                count += 1\n        else:\n            total_sleep = 0\n\n    return str(count)"
    },
    {
        "number": 4064,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, input().split())\n    a = list(map(int, input().split()))\n    \n    good_times = []\n    for i in range(n):\n        sleep_time = a[i] - 1 if a[i] - 1 > l and a[i] - 1 <= r else a[i]\n        good_times.append(sleep_time)\n    \n    max_good_times = 0\n    for i in range(n):\n        if good_times[i] >= l:\n            max_good_times += 1\n            good_times[i] = 0\n    \n    return str(max_good_times)\n\n\ndef"
    },
    {
        "number": 4064,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    count = 0\n    t = 0\n    for i in range(n):\n        if a[i] - 1 <= r:\n            if t + a[i] - 1 <= r:\n                count += 1\n                t += a[i]\n            elif t + a[i] <= r:\n                count += 1\n                t += a[i] - 1\n\n    return str(count)\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\nprint(solution(stdin=None)) "
    },
    {
        "number": 4065,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a.sort()\n\n    max_problems = 0\n    for i in range(1, n):\n        if a[i] > a[i - 1] * 2:\n            max_problems = i\n            break\n\n    return max_problems\n"
    },
    {
        "number": 4065,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    max_len = 1\n    for i in range(n - 2):\n        max_len = max(max_len, i + 3)\n        for j in range(i + 2, n - 1):\n            if a[j] <= a[i] * 2:\n                max_len = max(max_len, j - i + 2)\n                break\n\n    return max_len"
    },
    {
        "number": 4065,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    max_p = 1\n    \n    for i in range(1, n):\n        for j in range(i - 1, -1, -1):\n            if a[i] > a[j] * 2:\n                break\n            max_p = max(max_p, i - j + 1)\n    \n    return str(max_p)"
    },
    {
        "number": 4065,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    contests = []\n    max_len = 1\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[j] <= a[i] * 2:\n                contests.append(sorted([a[i], a[j]]))\n                max_len = max(max_len, 2)\n                \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if a[k] <= a[i] * 2 and a[k] <= a[j] * 2:\n                    contests.append(sorted([a[i], a[j], a[k]]))\n                    max_len = max(max_len, 3)\n    \n    return max_len\n"
    },
    {
        "number": 4065,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    n = int(input_list[0])\n    a = list(map(int, input_list[1].split()))\n\n    # Sort the difficulties\n    a.sort()\n\n    # Initialize the number of valid contests\n    valid_contests = 1\n\n    # Iterate through the difficulties\n    for i in range(1, n):\n        # Check if the difficulty is greater than the difficulty of the previous problem\n        # and the difficulty is not greater than twice the difficulty of the previous problem\n        if a[i] > a[i - 1] and a[i] <= a[i - 1] * 2:\n            # Increment the number of valid contests\n            valid_contests += 1\n        else:\n            # Reset the number of valid contests to 1\n            valid_contests = 1\n\n    return valid_contests\n"
    },
    {
        "number": 4065,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n    contests = []\n    \n    for i in range(n):\n        for j in range(i+2, n+1):\n            if a[j] <= 2*a[i] and a[j] > a[i]:\n                contests.append((i+1, j))\n                \n    max_contest_size = 0\n    for contest in contests:\n        size = contest[1] - contest[0] + 1\n        max_contest_size = max(max_contest_size, size)\n        \n    return max_contest_size\n"
    },
    {
        "number": 4065,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.splitlines()\n    n = int(input_data[0])\n    a = list(map(int, input_data[1].split()))\n    \n    dp = [1] * (n + 1)\n    for i in range(2, n + 1):\n        for j in range(1, i):\n            if a[i - 1] > a[j - 1] * 2:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return dp[-1]\n\n\ndef"
    },
    {
        "number": 4065,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    max_len = 1\n    for i in range(1, n):\n        if a[i] > 2 * a[i-1]:\n            max_len += 1\n    return max_len\n\n\ninput_data = \"\"\"\n10\n1 2 5 6 7 10 21 23 24 49\n\"\"\"\n\nprint(solution(input_data))\n\n\ninput_data = \"\"\"\n5\n2 10 50 110 250\n\"\"\"\n\nprint(solution(input_data))\n\n\ninput_data = \"\"\"\n6\n4 7 12 100 150 199\n\"\"\"\n\nprint(solution(input_data)) "
    },
    {
        "number": 4065,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(contest):\n        if len(contest) == 1:\n            return True\n        for i in range(len(contest) - 1):\n            if contest[i + 1] <= contest[i] * 2:\n                return False\n        return True\n\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    contests = []\n    i = 1\n    while i < n:\n        contest = [a[i - 1]]\n        while i < n and a[i] <= 2 * a[i - 1] and is_valid(contest + [a[i]]):\n            contest.append(a[i])\n            i += 1\n        contests.append(contest)\n\n    max_contest_size = max(len(contest) for contest in contests)\n    return max_contest_size"
    },
    {
        "number": 4065,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(problems: List[int]) -> bool:\n        for i in range(1, len(problems)):\n            if problems[i] > problems[i - 1] * 2:\n                return False\n        return True\n\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    a.sort()\n\n    max_valid_problems = 0\n    for i in range(1, n + 1):\n        for j in range(n - i + 1):\n            if is_valid(a[j:j + i]):\n                max_valid_problems = max(max_valid_problems, i)\n\n    return str(max_valid_problems)\n"
    },
    {
        "number": 4066,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def lcm(a: int, b: int) -> int:\n        return (a * b) // gcd(a, b)\n\n    def gcd(a: int, b: int) -> int:\n        while b:\n            a, b = b, a % b\n        return a\n\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    min_lcm = float('inf')\n    i, j = -1, -1\n\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            curr_lcm = lcm(a[i], a[j])\n            if curr_lcm < min_lcm:\n                min_lcm = curr_lcm\n                min_i, min_j = i, j\n\n    return f\"{min_i + 1} {min_j + 1}\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def lcm(x: int, y: int) -> int:\n        return x * y // gcd(x, y)\n\n    def gcd(x: int, y: int) -> int:\n        while y != 0:\n            x, y = y, x % y\n        return x\n\n    n = int(stdin[0].strip())\n    a = list(map(int, stdin[1].split()))\n    min_lcm = float('inf')\n    min_pair = (0, 0)\n\n    for i in range(1, n):\n        lcms = [lcm(a[i - 1], a[j]) for j in range(i, n)]\n        for j, lcm_value in enumerate(lcms, i):\n            if lcm_value < min_lcm:\n                min_lcm = lcm_value\n                min_pair = (i, j)\n\n    return \" \".join(map(str, min_pair))\n"
    },
    {
        "number": 4066,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def lcm(x: int, y: int) -> int:\n        return (x*y) // gcd(x, y)\n\n    def gcd(x: int, y: int) -> int:\n        while y != 0:\n            x, y = y, x % y\n        return x\n\n    n = int(stdin[0])\n    a = list(map(int, stdin[1].split()))\n\n    min_lcm = float('inf')\n    result = (0, 0)\n\n    for i in range(1, n):\n        for j in range(i+1, n+1):\n            lcm_value = lcm(a[i-1], a[j-1])\n            if lcm_value < min_lcm:\n                min_lcm = lcm_value\n                result = (i, j)\n\n    return f\"{result[0]} {result[1]}\"\n\ninput_string = \"5\\n2 4 8 3 6\\n5\\n2 5 11 3 7\\n6\\n2 5 10 1 10 2\"\noutput_string = solution(input_string)\nprint(output_string) "
    },
    {
        "number": 4066,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    from math import gcd\n\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    min_lcm = float('inf')\n    min_i, min_j = -1, -1\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            lcm = (a[i] * a[j]) // gcd(a[i], a[j])\n            if lcm < min_lcm:\n                min_lcm = lcm\n                min_i, min_j = i, j\n\n    return f\"{min_i + 1} {min_j + 1}\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n    lcm_list = []\n    for i in range(n):\n        for j in range(i+1, n):\n            lcm_list.append((i+1, j+1, lcm(a[i], a[j])))\n    \n    min_lcm = min(lcm_list, key=lambda x: x[2])\n    return f\"{min_lcm[0]} {min_lcm[1]}\"\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    from math import gcd\n\n    def lcm(x: int, y: int) -> int:\n        return (x * y) // gcd(x, y)\n\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    min_lcm = float(\"inf\")\n    min_indices = (0, 0)\n\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            lcm_value = lcm(a[i], a[j])\n            if lcm_value < min_lcm:\n                min_lcm = lcm_value\n                min_indices = (i + 1, j + 1)\n\n    return \" \".join(map(str, min_indices))\n"
    },
    {
        "number": 4066,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    \n    min_lcm = float('inf')\n    min_i, min_j = 0, 0\n    \n    for i in range(1, n):\n        for j in range(i+1, n+1):\n            lcm = a[i-1] * a[j-1] // math.gcd(a[i-1], a[j-1])\n            if lcm < min_lcm:\n                min_lcm = lcm\n                min_i = i\n                min_j = j\n                \n    return f\"{min_i} {min_j}\""
    },
    {
        "number": 4066,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    from math import gcd\n    \n    n = int(stdin[0])\n    arr = list(map(int, stdin[1].split()))\n    \n    min_lcm = float('inf')\n    result = [0, 0]\n    \n    for i in range(1, n):\n        for j in range(i+1, n+1):\n            lcm = arr[i-1] * arr[j-1] // gcd(arr[i-1], arr[j-1])\n            if lcm < min_lcm:\n                min_lcm = lcm\n                result = [i, j]\n    \n    return ' '.join(map(str, result))\n\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    lcm = a[0]\n    indices = [0, 1]\n\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            lcm_ij = a[i] * a[j] // math.gcd(a[i], a[j])\n            if lcm_ij < lcm:\n                lcm = lcm_ij\n                indices = [i, j]\n\n    return f\"{indices[0]} {indices[1]}\" "
    },
    {
        "number": 4066,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def lcm(x: int, y: int) -> int:\n        return x * y // gcd(x, y)\n\n    def gcd(x: int, y: int) -> int:\n        while y:\n            x, y = y, x % y\n        return x\n\n    n = int(stdin.split(\"\\n\")[0])\n    a = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n\n    min_lcm = float(\"inf\")\n    result = (1, 2)\n\n    for i in range(1, n):\n        for j in range(i + 1, n + 1):\n            lcm_value = lcm(a[i - 1], a[j - 1])\n            if lcm_value < min_lcm:\n                min_lcm = lcm_value\n                result = (i, j)\n\n    return f\"{result[0]} {result[1]}\"\n\n\ninput_str = \"\"\"5\n2 4 8 3 6\"\"\"\n\nprint(solution(input_str))\n\ninput_str = \"\"\"5\n5 2 11 3 7\"\"\"\n\nprint(solution(input_str))\n\ninput_str = \"\"\"6\n2 5 10 1 10 2\"\"\"\n\nprint(solution(input_str)) "
    },
    {
        "number": 4067,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n = int(input_list[0])\n    s = input_list[1]\n    \n    result = [0] * n\n    \n    for i in range(n):\n        if s[i] == '1':\n            result[i] = 0 if n % 3 == 2 else 2\n        elif s[i] == '2':\n            result[i] = 0 if n % 3 == 1 else 2\n        else:\n            result[i] = s[i]\n    \n    return ''.join(result)\n"
    },
    {
        "number": 4067,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(str, stdin.split('\\n'))\n    n = int(n)\n    s = ''.join(sorted(s))\n    left, right = 0, n - 1\n\n    while left < right:\n        if s[left] == s[right]:\n            left += 1\n            right -= 1\n        else:\n            break\n\n    if left == right:\n        return s\n\n    left_count = s.count(s[left])\n    right_count = n - left_count - left - 1\n\n    if left_count != right_count:\n        diff = abs(left_count - right_count)\n        if left_count < right_count:\n            s = s[:left] + '2' * diff + s[left:]\n        else:\n            s = s[:right + 1] + '0' * diff + s[right + 1:]\n\n    return s\n"
    },
    {
        "number": 4067,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def count_chars(s: str) -> dict:\n        counts = {'0': 0, '1': 0, '2': 0}\n        for c in s:\n            counts[c] += 1\n        return counts\n\n    def is_balanced(counts: dict) -> bool:\n        return counts['0'] == counts['1'] and counts['1'] == counts['2']\n\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n\n    counts = count_chars(s)\n    if is_balanced(counts):\n        return s\n\n    replacements = {'0': '', '1': '', '2': ''}\n    for c in counts:\n        if counts[c] > 0:\n            replacements[c] = '2' * counts[c]\n\n    i = 0\n    while not is_balanced(count_chars(s[:i] + replacements['0'] + s[i:])):\n        i += 1\n\n    return s[:i] + replacements['0'] + s[i:]"
    },
    {
        "number": 4067,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1]\n    result = ['0'] * n\n    num_zero, num_one, num_two = 0, 0, 0\n    \n    for i in range(n):\n        if s[i] == '0':\n            num_zero += 1\n        elif s[i] == '1':\n            num_one += 1\n        else:\n            num_two += 1\n    \n    min_diff = min(abs(num_zero - num_one), abs(num_one - num_two), abs(num_zero - num_two))\n    \n    if min_diff == abs(num_zero - num_one):\n        result[num_zero] = '1'\n        result[num_one] = '0'\n    elif min_diff == abs(num_one - num_two):\n        result[num_one] = '2'\n        result[num_two] = '1'\n    else:\n        result[num_zero] = '2'\n        result[num_two] = '0'\n    \n    return ''.join(result)\n"
    },
    {
        "number": 4067,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.splitlines()\n    n = int(input_lines[0])\n    s = input_lines[1]\n\n    def count_chars(s: str) -> int:\n        return s.count('0') + s.count('1') + s.count('2')\n\n    def get_min_diff(s: str) -> int:\n        diff = count_chars(s) % 3\n        return 3 - diff if diff != 0 else 0\n\n    def get_new_char(c: str) -> str:\n        char_count = {'0': 0, '1': 0, '2': 0}\n        for char in s:\n            char_count[char] += 1\n\n        min_char = '0'\n        min_count = char_count['0']\n        for char in char_count:\n            if char_count[char] < min_count:\n                min_char = char\n                min_count = char_count[char]\n\n        return char_count[c] // char_count[min_char] * min_char\n\n    min_diff = get_min_diff(s)\n    for _ in range(min_diff):\n        s = ''.join([get_new_char(c) for c in s])\n\n    return s\n"
    },
    {
        "number": 4067,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    # Initialize counts\n    counts = {'0': 0, '1': 0, '2': 0}\n    for c in s:\n        counts[c] += 1\n    \n    # Initialize output\n    output = ''\n    # Replace '0' with '1' or '2'\n    if counts['0'] > counts['1']:\n        output += '1' * counts['0']\n        counts['1'] = counts['0']\n        counts['0'] = 0\n    elif counts['0'] > counts['2']:\n        output += '2' * counts['0']\n        counts['2'] = counts['0']\n        counts['0'] = 0\n    else:\n        output += '0' * counts['0']\n        counts['0'] = 0\n    # Replace '1' with '0' or '2'\n    if counts['1'] > counts['0']:\n        output += '0' * counts['1']\n        counts['0'] = counts['1']\n        counts['1'] = 0\n    elif counts['1'] > counts['2']:\n        output += '2' * counts['1']\n        counts['2'] = counts['1']\n        counts['1'] = 0\n    else:\n        output += '1' * counts['1']\n        counts['1'] = 0\n    # Replace '2' with '0' or '1'\n    if counts['2'] > counts['0']:\n        output += '0' * counts['2']\n        counts['0'] = counts['2']\n        counts['2'] = 0\n    elif counts['2'] > counts['1']:\n        output += '1' * counts['2']\n        counts['1'] = counts['2']\n        counts['2'] = 0\n    else:\n        output += '2' * counts['2']\n        counts['2'] = 0\n    \n    return output\n\n\nstdin = \"\"\"\n3\n121\n\"\"\"\n\nprint(solution(stdin)) "
    },
    {
        "number": 4067,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(str, stdin.split())\n    n = int(n)\n    s = list(s)\n\n    def count_chars(s):\n        return {'0': s.count('0'), '1': s.count('1'), '2': s.count('2')}\n\n    def is_balanced(s):\n        return count_chars(s)['0'] == count_chars(s)['1'] == count_chars(s)['2']\n\n    def lexicographically_smallest(s):\n        min_char = '0' if s.count('0') < s.count('1') else '1' if s.count('1') < s.count('2') else '2'\n        return s.count(min_char) * min_char + s.replace(min_char, '0' if min_char == '2' else '1')\n\n    while not is_balanced(s):\n        s = lexicographically_smallest(s)\n\n    return ''.join(s)\n"
    },
    {
        "number": 4067,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(str, stdin.split('\\n'))\n    n = int(n)\n    s = list(s)\n    min_replacements = float('inf')\n    balanced_ternary_string = s\n\n    for i in range(n):\n        if s[i] == '0':\n            for char in '012':\n                if char != s[i]:\n                    s_copy = s.copy()\n                    s_copy[i] = char\n                    count_0 = s_copy.count('0')\n                    count_1 = s_copy.count('1')\n                    count_2 = s_copy.count('2')\n                    diff_count = abs(count_0 - count_1) + abs(count_1 - count_2)\n                    if diff_count < min_replacements:\n                        min_replacements = diff_count\n                        balanced_ternary_string = ''.join(s_copy)\n        elif s[i] == '1':\n            for char in '012':\n                if char != s[i]:\n                    s_copy = s.copy()\n                    s_copy[i] = char\n                    count_0 = s_copy.count('0')\n                    count_1 = s_copy.count('1')\n                    count_2 = s_copy.count('2')\n                    diff_count = abs(count_0 - count_1) + abs(count_1 - count_2)\n                    if diff_count < min_replacements:\n                        min_replacements = diff_count\n                        balanced_ternary_string = ''.join(s_copy)\n        elif s[i] == '2':\n            for char in '012':\n                if char != s[i]:\n                    s_copy = s.copy()\n                    s_copy[i] = char\n                    count_0 = s_copy.count('0')\n                    count_1 = s_copy.count('1')\n                    count_2 = s_copy.count('2')\n                    diff_count = abs(count_0 - count_1) + abs(count_1 - count_2)\n                    if diff_count < min_replacements:\n                        min_replacements = diff_count\n                        balanced_ternary_string = ''.join(s_copy)\n\n    return ''.join(balanced_ternary_string)\n"
    },
    {
        "number": 4067,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    n = int(input_data[0])\n    s = input_data[1]\n\n    # Count the occurrences of '0', '1', and '2' in the string\n    count = [0, 0, 0]\n    for char in s:\n        count[int(char)] += 1\n\n    # Check if the given string is already balanced\n    if count[0] == count[1] and count[1] == count[2]:\n        return s\n\n    # Find the minimum number of replacements needed to obtain a balanced ternary string\n    min_replacements = min(count)\n    count[min_replacements] = 0\n\n    # Replace the minimum number of characters to obtain a balanced ternary string\n    result = \"\"\n    for char in s:\n        if count[int(char)] > 0:\n            result += str(min_replacements)\n            count[min_replacements] -= 1\n        else:\n            result += char\n\n    return result"
    },
    {
        "number": 4067,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n\n    # Helper function to count characters in the string\n    def count_chars(s: str, char: str) -> int:\n        return s.count(char)\n\n    # Helper function to calculate the number of replacements needed\n    def count_replacements(s: str) -> int:\n        count_0 = count_chars(s, '0')\n        count_1 = count_chars(s, '1')\n        count_2 = count_chars(s, '2')\n        return min(count_0, count_1, count_2)\n\n    # Helper function to create a new string with the minimum replacements\n    def make_balanced(s: str) -> str:\n        count_0 = count_chars(s, '0')\n        count_1 = count_chars(s, '1')\n        count_2 = count_chars(s, '2')\n\n        if count_0 == count_1 and count_1 == count_2:\n            return s  # already balanced\n\n        if count_0 < count_1 or count_0 < count_2:\n            return s.replace('0', '1', count_0 - count_1)\n        if count_1 < count_0 or count_1 < count_2:\n            return s.replace('1', '2', count_1 - count_2)\n        if count_2 < count_0 or count_2 < count_1:\n            return s.replace('2', '0', count_2 - count_0)\n\n    # Main function to find the balanced ternary string\n    def find_balanced(s: str) -> str:\n        replacements = count_replacements(s)\n        if replacements == 0:\n            return s  # already balanced\n\n        while replacements > 0:\n            s = make_balanced(s)\n            replacements = count_replacements(s)\n\n        return s\n\n    return find_balanced(s)\n"
    },
    {
        "number": 4068,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    # Initialize an array to store the number of ways to reach each step\n    ways = [0] * (N + 1)\n    ways[0] = 1\n\n    # Calculate the number of ways to reach each step\n    for i in range(1, N + 1):\n        if i in a:\n            # If the step is broken, skip it\n            continue\n        ways[i] = ways[i - 1] + ways[i - 2]\n        ways[i] %= 1000000007\n\n    # Return the number of ways to reach the N-th step, modulo 1\\ 000\\ 000\\ 007\n    return ways[N]\n"
    },
    {
        "number": 4068,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    broken_steps = sorted(map(int, stdin.split())[1:])\n\n    dp = [1] * (N + 1)\n\n    for i in range(M + 1):\n        dp[i] = 0\n\n    for i in range(1, M + 1):\n        if broken_steps[i - 1] == 1:\n            dp[i] = dp[i - 1]\n        else:\n            dp[i] = (dp[i - 1] + dp[i - 1]) % 1000000007\n\n    return dp[N]\n"
    },
    {
        "number": 4068,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    a.sort()\n    dp = [0] * (N + 1)\n    dp[0] = 1\n    for i in range(M):\n        for j in range(a[i], N):\n            dp[j+1] += dp[j]\n            dp[j+1] %= 1000000007\n    return dp[N]\n\n\ndef"
    },
    {
        "number": 4068,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    a = list(map(int, stdin.split()[1:]))\n    a.sort()\n    count = 0\n    for i in range(M, N+1):\n        if i not in a:\n            count += 1\n    return str(count % 1000000)\n\nN, M = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\ncount = 0\nfor i in range(M, N+1):\n    if i not in a:\n        count += 1\nprint(count % 1000000) "
    },
    {
        "number": 4068,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    a = sorted(map(int, stdin.split()[2:]))\n    total = 0\n    if M == 0:\n        total = 1\n    elif M == 1:\n        total = (a[0] == 1) + (a[0] == 2)\n    else:\n        total = 0\n        count = 0\n        for i in range(M):\n            if a[i] == a[i+1]-1:\n                count += 1\n            else:\n                total += (1 << count) * (M - i - count)\n                count = 0\n        total += (1 << count) * (M - count)\n    return str(total % 1000000007)"
    },
    {
        "number": 4068,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    a = sorted(map(int, stdin.split()[2:]))\n\n    dp = [0] * (N + 1)\n    dp[0] = 1\n\n    for i in range(M):\n        for j in range(a[i], N + 1):\n            dp[j] += dp[j - a[i]]\n\n    return dp[N] % 1000000007\n"
    },
    {
        "number": 4068,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    broken_steps = sorted(map(int, stdin.split()[2:]))\n\n    def count_ways(n: int, broken_steps: List[int]) -> int:\n        if n == N:\n            return 1\n        if n in broken_steps:\n            return 0\n\n        count = 0\n        for i in range(1, 3):\n            if n + i <= N:\n                count += count_ways(n + i, broken_steps)\n        return count % 1000000007\n\n    return str(count_ways(0, broken_steps))\n"
    },
    {
        "number": 4068,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    a = sorted(map(int, stdin.split()[2:]))\n    broken_steps = set(a)\n    count = 0\n\n    for i in range(N):\n        if i not in broken_steps:\n            count += 1\n\n    return str(count % 1000000007)\n"
    },
    {
        "number": 4068,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    broken_steps = set(map(int, stdin.split()[2:]))\n\n    if M == 0:\n        return \"1\"\n\n    dp = [0] * (N + 1)\n    dp[0] = 1\n\n    for i in range(1, N + 1):\n        if i not in broken_steps:\n            dp[i] = (dp[i - 1] + dp[i - 2]) % 1000000007\n\n    return str(dp[N])\n"
    },
    {
        "number": 4068,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[0:2])\n    broken_steps = list(map(int, stdin.split()[2:]))\n    broken_steps.sort()\n\n    dp = [1] * (N + 1)\n    for i in range(N + 1):\n        if i in broken_steps:\n            dp[i] = 0\n        else:\n            if i - 1 >= 0:\n                dp[i] += dp[i - 1]\n            if i - 2 >= 0:\n                dp[i] += dp[i - 2]\n\n    return dp[N] % 1000000007\n"
    },
    {
        "number": 4069,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, K, D = map(int, stdin.split())\n    x = X\n    for _ in range(K):\n        x -= D if x > 0 else -D\n    return abs(x)\n\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4069,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    X, K, D = map(int, stdin.split())\n    current_position = X\n    for i in range(K):\n        if current_position < 0:\n            current_position -= D\n        else:\n            current_position += D\n    return str(abs(current_position))\n\n\ndef"
    },
    {
        "number": 4069,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.split())\n    \n    # Calculate the minimum possible absolute value of the coordinate of the destination\n    min_abs_value = abs(x - k * d)\n    \n    return str(min_abs_value)"
    },
    {
        "number": 4069,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    X, K, D = map(int, stdin.split())\n    \n    if K == 1:\n        return str(X)\n    \n    x = X\n    for _ in range(K - 1):\n        x -= D if x > 0 else -D\n    \n    return str(abs(x))\n\n\ninput_str = input(\"Enter input: \")\nresult = solution(input_str)\nprint(\"Output:\", result) "
    },
    {
        "number": 4069,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X, K, D = map(int, stdin.split())\n\n    # Keep track of the current position\n    position = X\n\n    # Loop K times and move D in the direction of the sign of D\n    for _ in range(K):\n        position += D * (-1 if position < 0 else 1)\n\n    # Compute the minimum possible absolute value of the coordinate of the destination\n    min_abs_value = abs(position) - (abs(position) % D)\n\n    return str(min_abs_value)\n"
    },
    {
        "number": 4069,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_values = list(map(int, stdin.split()))\n    x, k, d = input_values[0], input_values[1], input_values[2]\n    current_position = x\n\n    for i in range(k):\n        if current_position < 0:\n            current_position = current_position + d\n        else:\n            current_position = current_position - d\n\n    return abs(current_position)\n"
    },
    {
        "number": 4069,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X, K, D = map(int, stdin.split())\n    x = X\n    for i in range(K):\n        if x + D > 0:\n            x = x - D\n        else:\n            x = x + D\n    return abs(x)\n\ninput_str = \"6 2 4\"\nprint(solution(input_str)) "
    },
    {
        "number": 4069,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X, K, D = map(int, stdin.split())\n    if X == 0:\n        return str(D)\n    elif K % 2 == 0:\n        return str(0)\n    else:\n        return str(2 * D)"
    },
    {
        "number": 4069,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    X, K, D = map(int, stdin.split())\n    if K % 2 == 0:\n        return str(X)\n    else:\n        return str(X - D) if X - D > 0 else str(X + D)\n\ninput_stdin = \"6 2 4\"\noutput_stdout = solution(input_stdin)\nprint(output_stdout) "
    },
    {
        "number": 4069,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X, K, D = map(int, stdin.split())\n    # Find the minimum possible absolute value of the coordinate of the destination\n    if K == 1:\n        return str(max(abs(X), abs(X - D)))\n    else:\n        return str(max(abs(X - K * D), abs(X - (K - 1) * D)))"
    },
    {
        "number": 4070,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 10:\n        return \"0\"\n    elif n <= 20:\n        return \"1\"\n    else:\n        return str(n // 2)\n"
    },
    {
        "number": 4070,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n\n    if n % 11 == 0:\n        result = 10\n    else:\n        result = n % 11\n\n    return str(result)\n"
    },
    {
        "number": 4070,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    count = 0\n    while n > 0:\n        if n % 10 == 5 or n % 10 == 0:\n            count += 1\n        n //= 10\n    return str(count)\n\ndef"
    },
    {
        "number": 4070,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    elif n <= 10:\n        return \"1\"\n    else:\n        return \"2\" "
    },
    {
        "number": 4070,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0:\n        return \"0\"\n    else:\n        return str(min(5, n // 2))\n"
    },
    {
        "number": 4070,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 5:\n        return \"0\"\n    elif n <= 10:\n        return \"2\"\n    elif n <= 100:\n        return \"4\"\n    elif n <= 1000:\n        return \"8\"\n    elif n <= 10000:\n        return \"16\"\n    else:\n        return \"20\" "
    },
    {
        "number": 4070,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n <= 10:\n        return str(n)\n    if n % 11 == 0:\n        return str(n // 11)\n    else:\n        return str(n // 11 + 1)\n\n\ninput_stdin = \"11\"\noutput = solution(input_stdin)\nprint(output) "
    },
    {
        "number": 4070,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    kids_time = [5, 10]\n    time = 0\n    while n > 1:\n        if n <= kids_time[0]:\n            time += 1\n            n -= 1\n        elif n <= kids_time[1]:\n            time += 2\n            n -= 2\n        else:\n            time += 5\n            n -= 5\n    return str(time) "
    },
    {
        "number": 4070,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"2\"\n    elif n == 1:\n        return \"0\"\n    else:\n        count = 0\n        while n >= 2:\n            count += 1\n            if n % 2 == 0:\n                n //= 2\n            else:\n                n = (3 * n) + 1\n        return str(count) "
    },
    {
        "number": 4070,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 2:\n        return \"0\"\n    elif n <= 10:\n        return \"1\"\n    else:\n        time = (n-2) // 4 + 1\n        return str(time)\n\nstdin = \"14\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4071,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    return str(a*a*a)\n\ndef"
    },
    {
        "number": 4071,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    return str(a**3)\n\n\ninput_stdin = \"3\"\noutput = solution(input_stdin)\nprint(output) "
    },
    {
        "number": 4071,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    result = (a * (a + 1)) // 2\n    return str(result) "
    },
    {
        "number": 4071,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    result = 27\n    if a == 1:\n        result = 27\n    elif a == 2:\n        result = 25\n    elif a == 3:\n        result = 23\n    return str(result)\n\ninput_string = input(\"Enter a number: \")\noutput_string = solution(input_string)\nprint(output_string) "
    },
    {
        "number": 4071,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a**3) "
    },
    {
        "number": 4071,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(27) "
    },
    {
        "number": 4071,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_a = int(stdin.strip())\n    return str(27)"
    },
    {
        "number": 4071,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    return str(27) "
    },
    {
        "number": 4071,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    result = 0\n    for i in range(1, a+1):\n        result += i**2\n    return str(result) "
    },
    {
        "number": 4071,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    if a >= 1 and a <= 30:\n        return str(27)\n    else:\n        return \"Invalid input\" "
    },
    {
        "number": 4072,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return \"1\" if a % 2 != 0 else \"0\" "
    },
    {
        "number": 4072,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 2 == 0:\n        return \"0\"\n    else:\n        return \"1\"\n\ninput_value = input(\"Enter an integer between 10 and 999: \")\nprint(solution(input_value)) "
    },
    {
        "number": 4072,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 2 == 0 and a % 3 == 0:\n        return \"1\"\n    else:\n        return \"0\"\n\na = input()\nprint(solution(a)) "
    },
    {
        "number": 4072,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 2 == 0:\n        return \"0\"\n    else:\n        return \"1\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 2 == 0:\n        return \"0\"\n    else:\n        return \"1\"\n\nprint(solution(input())) "
    },
    {
        "number": 4072,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 2 == 0:\n        return \"0\"\n    else:\n        return \"1\" "
    },
    {
        "number": 4072,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 2 == 0:\n        return \"0\"\n    else:\n        return \"1\" "
    },
    {
        "number": 4072,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 3 == 0:\n        return '0'\n    else:\n        return '1'"
    },
    {
        "number": 4072,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    \n    if a % 2 == 0:\n        return \"0\"\n    else:\n        return \"1\" "
    },
    {
        "number": 4072,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 2 == 0 and a % 3 == 0:\n        return \"1\"\n    else:\n        return \"0\"\n\n\ndef"
    },
    {
        "number": 4073,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    numbers = [int(x) for x in lines[1].split()]\n\n    max_num = max(numbers)\n    return str(max_num)\n"
    },
    {
        "number": 4073,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    numbers = list(map(int, stdin.split(\"\\n\")[1].split()))\n    return max(numbers)"
    },
    {
        "number": 4073,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    numbers = [int(x) for x in stdin.split('\\n')[1].split()]\n    return n + sum(numbers)\n\n\ninput_str = '''4\n2 5 3 1'''\n\nprint(solution(input_str)) "
    },
    {
        "number": 4073,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    print(n)\n    return n\n"
    },
    {
        "number": 4073,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    arr = list(map(int, stdin.splitlines()[1].split()))\n    return sum(arr)\n\ndef"
    },
    {
        "number": 4073,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    numbers = list(map(int, stdin.splitlines()[1].split()))\n    \n    # Your code here\n    result = 0\n    for num in numbers:\n        result ^= num\n    \n    return result"
    },
    {
        "number": 4073,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    array = list(map(int, stdin.splitlines()[1].split()))\n    \n    result = 1\n    for num in array:\n        result = result * num\n    \n    return result"
    },
    {
        "number": 4073,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = [int(x) for x in stdin.splitlines()[1].split()]\n    \n    if n > 10:\n        return \"0\"\n    \n    result = 0\n    for i in range(n):\n        if a[i] > 11:\n            return \"0\"\n        result ^= a[i]\n    \n    return str(result)\n"
    },
    {
        "number": 4073,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    input_list = list(map(int, stdin.splitlines()[1].split()))\n    max_value = max(input_list)\n    return str(max_value)\n\n\ninput_str = '''4\n2 5 3 1'''\n\nprint(solution(input_str)) "
    },
    {
        "number": 4073,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    arr = [int(x) for x in stdin.split('\\n')[1].split()]\n\n    total = sum(arr)\n    result = total % 12\n    return result\n\ndef"
    },
    {
        "number": 4074,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    result = []\n    for case in range(t):\n        n, k = map(int, stdin.split()[1:3])\n        result.append(n // k)\n    return \"\\n\".join(map(str, result))\n"
    },
    {
        "number": 4074,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n, k = map(int, stdin.split()[1:3])\n        if n == 0:\n            print(0)\n        else:\n            print(max(1, (n + k - 1) // k))\n"
    },
    {
        "number": 4074,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def binary_search(n, k):\n        left, right = 1, n\n        while left <= right:\n            mid = (left + right) // 2\n            if mid * (k + 1) >= n:\n                return mid\n            elif mid * (k + 1) < n:\n                left = mid + 1\n            else:\n                return -1\n        return -1\n\n    test_cases = int(stdin.split(\"\\n\")[0])\n    result = []\n\n    for i in range(1, test_cases + 1):\n        n, k = map(int, stdin.split(\"\\n\")[i].split())\n        result.append(binary_search(n, k))\n\n    return \"\\n\".join(map(str, result))\n\n\ninput_string = '''5\n8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733'''\n\nprint(solution(input_string)) "
    },
    {
        "number": 4074,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n, k = map(int, input().split())\n        if n == 0 or k == 0:\n            print(0)\n        else:\n            count = n // k\n            if count * k < n:\n                count += 1\n            print(count)\n\n\ninput_str = '''5\n8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733'''\n\nsolution(input_str) "
    },
    {
        "number": 4074,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(input())\n    for _ in range(t):\n        n, k = map(int, input().split())\n        packages_needed = 1\n        while n > k:\n            n -= k\n            packages_needed += 1\n        print(packages_needed)\n"
    },
    {
        "number": 4074,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    output = []\n    for _ in range(t):\n        n, k = map(int, stdin.split())\n        if n == 1:\n            output.append(1)\n        else:\n            output.append(k)\n    return \"\\n\".join(map(str, output))"
    },
    {
        "number": 4074,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    result = []\n    for _ in range(t):\n        n, k = map(int, input().split())\n        count = 1\n        total = 1\n        while total < n:\n            count += 1\n            total += count\n        result.append(count)\n    return '\\n'.join(map(str, result))\n"
    },
    {
        "number": 4074,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for i in range(t):\n        n, k = map(int, stdin.readline().split())\n        if k == 1:\n            print(n)\n        else:\n            print(k)\n    return 0\n\ndef"
    },
    {
        "number": 4074,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    input_data = stdin.split('\\n')\n\n    for i in range(1, t + 1):\n        n, k = map(int, input_data[i].split())\n        if n == 0:\n            print(0)\n        else:\n            print(1 + n // k)\n"
    },
    {
        "number": 4074,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n, k = map(int, stdin.split())\n        min_packages = 1\n        while k * min_packages < n:\n            min_packages += 1\n        print(min_packages)\n    return '\\n'.join(str(i) for i in range(1, t+1))\n"
    },
    {
        "number": 4075,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    N, M = map(int, input_data[0].split())\n    k = [int(x) for x in input_data[1].split()]\n    s = [input_data[i+1].split() for i in range(2, 2+M)]\n    p = [int(x) for x in input_data[2+M].split()]\n\n    def count_switches(switches):\n        switch_count = {}\n        for s in switches:\n            if s in switch_count:\n                switch_count[s] += 1\n            else:\n                switch_count[s] = 1\n        return switch_count\n\n    def count_states(switch_count, p):\n        state_count = 0\n        for p_i in p:\n            if p_i % 2 == 0 and switch_count[0] % 2 == 0:\n                state_count += 1\n            elif p_i % 2 == 1 and switch_count[1] % 2 == 1:\n                state_count += 1\n        return state_count\n\n    count = 0\n    for i in range(2**N):\n        switch_states = format(i, f'0{N}b')\n        switch_count = count_switches(s)\n        for j in range(2**M):\n            bulb_states = format(j, f'0{M}b')\n            bulb_count = count_switches(s)\n            if all(bulb_states[k] == '0' for k in range(M) if bulb_count[k] % 2 == p[k] % 2):\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 4075,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def count_switches(switches: set) -> int:\n        count = 0\n        for switch in switches:\n            if switch in on_switches:\n                count += 1\n        return count % 2\n\n    N, M = map(int, stdin.split()[:2])\n    switch_bulbs = [set(map(int, stdin.split()[2 * i:2 * i + k_i + 1])) for i, k_i in enumerate(map(int, stdin.split()[2 * N + 1:2 * N + 1 + M]))]\n    bulbs = [p_i % 2 for p_i in map(int, stdin.split()[2 * N + 1 + M:])]\n\n    on_switches = set()\n    total_combinations = 1\n    for i, switch_bulb in enumerate(switch_bulbs):\n        for switch in switch_bulb:\n            on_switches.add(switch)\n        if bulbs[i] == 1:\n            total_combinations *= count_switches(on_switches)\n        on_switches.clear()\n\n    return total_combinations\n"
    },
    {
        "number": 4075,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    k_i = [0] * M\n    s_ij = [0] * (M * N)\n    p_i = [0] * M\n\n    for i in range(M):\n        k_i[i] = int(stdin.split()[i + 2])\n        s_ij[i * N:(i + 1) * N] = list(map(int, stdin.split()[i * N + 2:(i + 1) * N + 2]))\n        p_i[i] = int(stdin.split()[N + M + i])\n\n    count = 0\n    for state in range(2 ** N):\n        switch_states = [state >> i & 1 for i in range(N)]\n        bulb_states = [0] * M\n        for i in range(M):\n            switches_on = sum(switch_states[j - 1] for j in range(s_ij[i * N + j], s_ij[i * N + j] + k_i[i]) if j <= N)\n            bulb_states[i] = switches_on % 2 == p_i[i]\n        if all(bulb_states):\n            count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4075,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    k_i = [int(x) for x in stdin.split()[2::2]]\n    s_ij = [list(map(int, stdin.split()[2+i::2])) for i in range(M)]\n    p_i = [int(x) for x in stdin.split()[-M:]]\n    \n    def count_on(switches: list) -> int:\n        count = 0\n        for switch in switches:\n            if p_i[switch-1] == 1:\n                count += 1\n        return count\n    \n    total = 0\n    for bulb in range(M):\n        switches = s_ij[bulb]\n        count = count_on(switches)\n        total += (count % 2 == 0)\n    \n    return total\n"
    },
    {
        "number": 4075,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, input().split())\n    k = [0] * M\n    s = [[0] * N for _ in range(M)]\n    p = [0] * M\n\n    for i in range(M):\n        k[i], *s[i] = map(int, input().split())\n\n    for i in range(M):\n        p[i] = int(input())\n\n    def count_lighted(switches: List[int]) -> int:\n        count = 0\n        for switch in switches:\n            count += p[switch - 1]\n        return count % 2\n\n    def count_combinations(switches: List[int]) -> int:\n        count = 1\n        for i in range(k[switches[-1] - 1]):\n            count *= count_lighted(switches)\n        return count\n\n    total_combinations = 1\n    for i in range(M):\n        total_combinations *= count_combinations(s[i])\n\n    return str(total_combinations % (10**9 + 7))\n\n\ndef"
    },
    {
        "number": 4075,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    k_i = list(map(int, stdin.split()[2:2*N:2]))\n    s_ij = list(map(int, stdin.split()[3:2*N+1:2]))\n    p_i = list(map(int, stdin.split()[2*N+1:]))\n\n    def count_lighted_bulbs(switch_states):\n        lighted_bulbs = 0\n        for bulb in range(1, M+1):\n            switch_count = 0\n            for switch in range(1, N+1):\n                if s_ij[bulb-1] == switch and switch_states[switch-1]:\n                    switch_count += 1\n            if switch_count % 2 == p_i[bulb-1]:\n                lighted_bulbs += 1\n        return lighted_bulbs\n\n    total_combinations = 2 ** N\n    on_combinations = 0\n    for i in range(total_combinations):\n        switch_states = [bool(i & (1 << j)) for j in range(N)]\n        if count_lighted_bulbs(switch_states) == M:\n            on_combinations += 1\n\n    return str(on_combinations)"
    },
    {
        "number": 4075,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, input().split())\n    k_i = [0] * M\n    s_ij = [[0] * N for _ in range(M)]\n    p_i = [0] * M\n\n    for i in range(M):\n        k_i[i], *s_ij[i] = map(int, input().split())\n\n    for i in range(M):\n        p_i[i] = int(input())\n\n    count = 0\n    for i in range(N):\n        on_switches = 0\n        for j in range(k_i[i]):\n            if s_ij[i][j] == 1:\n                on_switches += 1\n        if on_switches % 2 == p_i[i]:\n            count += 1\n\n    return count\n\ndef"
    },
    {
        "number": 4075,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_list = list(map(int, stdin.split()))\n    N, M = input_list[0], input_list[1]\n    k = input_list[2:2 + N]\n    s = [input_list[2 + N + i::k[i]] for i in range(M)]\n    p = input_list[2 + N + M * k[0]:]\n\n    def count_switches(s, i, j):\n        count = 0\n        for switch in s:\n            if switch == i or switch == j:\n                count += 1\n        return count\n\n    def count_combinations(s, p):\n        on_count = 0\n        off_count = 0\n        for i in range(1, N + 1):\n            if p[i - 1] == 0:\n                on_count += count_switches(s, i, 0)\n                off_count += k[i - 1] - count_switches(s, i, 0)\n            elif p[i - 1] == 1:\n                on_count += k[i - 1] - count_switches(s, i, 0)\n                off_count += count_switches(s, i, 0)\n        return on_count, off_count\n\n    def count_lighted_bulbs(on_count, off_count):\n        return (on_count + off_count) % 2\n\n    on_count, off_count = count_combinations(s, p)\n    lighted_bulbs = count_lighted_bulbs(on_count, off_count)\n    return lighted_bulbs"
    },
    {
        "number": 4075,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def count_switches_on(switch_set: set) -> int:\n        return len([switch for switch in switch_set if switch_states[switch] == \"on\"])\n\n    def light_bulb(i: int) -> bool:\n        switch_set = set()\n        for j in range(1, k_i + 1):\n            switch_set.add(s[i][j])\n        return count_switches_on(switch_set) % 2 == p[i]\n\n    # Read input\n    N, M = map(int, stdin.split()[:2])\n    k = [0] * (M + 1)\n    s = [[] for _ in range(M + 1)]\n    p = [0] * (M + 1)\n    for i in range(2, N + 1):\n        k[i], *s[i] = map(int, stdin.split()[:N])\n    for i in range(M + 1):\n        p[i] = int(stdin.split()[N + i])\n\n    # Calculate number of combinations\n    count = 0\n    for i in range(1, M + 1):\n        if light_bulb(i):\n            count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4075,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    k_i = []\n    s_ij = []\n    p_i = []\n\n    for i in range(N + 1):\n        k_i.append(list(map(int, stdin.split()[2 + 2 * i:2 + 2 * i + k_i[i - 1]])))\n\n    for i in range(M + 1):\n        s_ij.append(list(map(int, stdin.split()[2 + 2 * N + 2 * i:2 + 2 * N + 2 * i + k_i[i - 1]])))\n\n    p_i = list(map(int, stdin.split()[2 + 2 * N + 2 * M:]))\n\n    # Check if constraints are satisfied\n    for i in range(N):\n        for j in range(N):\n            if i != j:\n                if s_ij[i][j] in s_ij[j]:\n                    return \"Invalid input: s_{ia} cannot be equal to s_{ib}\".format(i, j)\n\n    # Calculate the number of combinations\n    total_combinations = 2 ** N\n    result = 0\n\n    for i in range(M):\n        switches = set()\n        for j in range(k_i[i]):\n            switches.add(s_ij[i][j])\n        light_bulb = (len(switches) % 2 == p_i[i])\n\n        if light_bulb:\n            result += total_combinations // (2 ** (N - len(switches)))\n\n    return result\n"
    },
    {
        "number": 4076,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n\n    # Calculate the number of rotations for each hand\n    H_rotations = H / 12\n    M_rotations = M / 60\n\n    # Calculate the distance traveled by each hand\n    H_distance = H_rotations * A * 2 * pi\n    M_distance = M_rotations * B * 2 * pi\n\n    # Calculate the total distance between the two hands\n    total_distance = H_distance + M_distance\n\n    # Calculate the distance between the two unfixed endpoints\n    distance = total_distance / 2\n\n    # Return the distance as a string with 10 decimal places\n    return f\"{distance:.10f}\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n\n    # Calculate the total angle in degrees\n    total_angle_hours = 360 * H / 12\n    total_angle_minutes = 360 * M / 60\n    total_angle = total_angle_hours + total_angle_minutes\n\n    # Calculate the distance in centimeters\n    distance = (A * total_angle_hours + B * total_angle_minutes) / total_angle\n\n    # Return the answer with 9 decimal places\n    return f\"{distance:.9f}\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    hours_hand_length = A\n    minutes_hand_length = B\n\n    # Calculate the angle of the hour hand and the minute hand\n    hour_angle = H * 30\n    minute_angle = M * 6\n\n    # Calculate the length of the hour hand and the minute hand\n    hour_hand_length = hours_hand_length * (hour_angle / 180)\n    minute_hand_length = minutes_hand_length * (minute_angle / 180)\n\n    # Calculate the length between the unfixed endpoints of the hands\n    distance = abs(hour_hand_length - minute_hand_length)\n\n    return f\"{distance:.{10}f}\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    radius_hour = A // 2\n    radius_minute = B // 2\n    angle_hour = H * 30 + M / 2\n    angle_minute = M * 6\n    distance_hour = radius_hour * (angle_hour/360) * 2 * 3.14159\n    distance_minute = radius_minute * (angle_minute/360) * 2 * 3.14159\n    distance = distance_hour + distance_minute\n    return f\"{distance:.10f}\"\n\n\ndef"
    },
    {
        "number": 4076,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    # Convert minutes to radians\n    min_angle = M * 2 * 3.14159 / 60\n    # Calculate the distance between the unfixed endpoints\n    dist = A * (H * 360 + min_angle) / 12 + B * min_angle\n    return f\"{dist:.15f}\""
    },
    {
        "number": 4076,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    angle_hour = (12 - H) * 30 # angle in degrees\n    angle_minute = (60 - M) * 6 # angle in degrees\n    distance_hour = A * (angle_hour / 360) # distance in centimeters\n    distance_minute = B * (angle_minute / 360) # distance in centimeters\n    distance_between = abs(distance_hour - distance_minute) # distance between the unfixed endpoints in centimeters\n    return f\"{distance_between:.10f}\" # format the output to 10 decimal places\n\ninput_str = \"3 4 9 0\"\noutput = solution(input_str)\nprint(output) "
    },
    {
        "number": 4076,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    R_hour = 2 * math.pi * H / 12\n    R_minute = 2 * math.pi * M / 60\n    dist = math.sqrt(A**2 + B**2 - 2 * A * B * math.cos(R_hour - R_minute))\n    return f\"{dist:.12f}\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n\n    # Calculate the angle in degrees for each hand\n    angle_hour = H * 30 + M * 6\n    angle_minute = M * 6\n\n    # Calculate the distance in centimeters between the unfixed endpoints of the hands\n    distance = (A * (12 - H) * (1 - angle_hour / 360) + B * (angle_minute / 360)) ** 2\n    distance = distance ** 0.5\n\n    return f\"{distance:.10f}\""
    },
    {
        "number": 4076,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    # Calculate the length of each arm\n    arm_A = 2 * pi * H / 12 * A / 100\n    arm_B = 2 * pi * M / 60 * B / 100\n    # Calculate the distance between the unfixed endpoints\n    distance = sqrt(arm_A ** 2 + arm_B ** 2)\n    return f\"{distance:.10f}\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    angle_hour = H * 360 / 12\n    angle_minute = M * 360 / 60\n    dist = A * (angle_hour - angle_minute) / 360\n    return f\"{dist:.10f}\""
    },
    {
        "number": 4077,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    count = 0\n\n    for i in range(1, n):\n        left = a[:i]\n        right = a[i:]\n        left.sort()\n        right.sort()\n        left_median = left[len(left) // 2]\n        right_median = right[len(right) // 2]\n\n        if left_median + right_median == 2 * m:\n            count += 1\n\n    return str(count)\n\nn = int(input())\nm = int(input())\na = list(map(int, input().split()))\n\nprint(solution(str(n) + \" \" + str(m) + \" \" + \" \".join(map(str, a)))) "
    },
    {
        "number": 4077,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    count = 0\n\n    for i in range(n):\n        for j in range(i, n):\n            left, right = i, j\n            a.sort()\n            while left <= right:\n                mid = (left + right) // 2\n                if a[mid] > m:\n                    right = mid - 1\n                elif a[mid] < m:\n                    left = mid + 1\n                else:\n                    break\n\n            if left <= right:\n                count += 1\n                a.pop(mid)\n                a.insert(mid, m)\n\n    return str(count)\n\n\ndef"
    },
    {
        "number": 4077,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    def find_median(start, end):\n        if (end - start) % 2 == 1:\n            return a[start + (end - start) // 2]\n        else:\n            return (a[start + (end - start) // 2 - 1] + a[start + (end - start) // 2]) / 2\n\n    count = 0\n    for i in range(n):\n        if find_median(i, n) == m:\n            count += 1\n\n    return str(count)\n\n\ndef"
    },
    {
        "number": 4077,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            left, right = sorted([a[i], a[i+1:j+1], a[j+1]]), [a[i], a[i+1:j+1], a[j+1]]\n            if len(left) == len(right) and sorted(left) == sorted(right):\n                count += 1\n\n    return str(count)\n\n\ninput_str = \"\"\"5 4\n1 4 5 60 4\n\"\"\"\n\nprint(solution(input_str))  # Output: 8\n\n\ninput_str = \"\"\"3 1\n1 1 1\n\"\"\"\n\nprint(solution(input_str))  # Output: 6\n\n\ninput_str = \"\"\"15 2\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\n\"\"\"\n\nprint(solution(input_str))  # Output: 97 "
    },
    {
        "number": 4077,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.splitlines()\n    n, m = map(int, input_data[0].split())\n    a = list(map(int, input_data[1].split()))\n    result = 0\n    \n    for i in range(n):\n        left_median = sorted(a[i:i+m])[m//2]\n        right_median = sorted(a[i+m-1:n+1])[m//2]\n        \n        if left_median == right_median:\n            result += n - i - m + 1\n        elif left_median < right_median:\n            result += 1\n    \n    return str(result)"
    },
    {
        "number": 4077,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    def find_median(l, r):\n        a = sorted(a[l-1:r])\n        if (r - l) % 2 == 0:\n            return (a[len(a)//2 - 1] + a[len(a)//2]) // 2\n        else:\n            return a[len(a)//2]\n\n    count = 0\n    for l in range(1, n+1):\n        for r in range(l, n+1):\n            if find_median(l, r) == m:\n                count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4077,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    n, m = map(int, input_list[0].split())\n    a = list(map(int, input_list[1].split()))\n\n    def find_median(l, r):\n        if (r - l) % 2 == 0:\n            return (a[l + (r - l) // 2 - 1] + a[l + (r - l) // 2]) / 2\n        else:\n            return a[l + (r - l) // 2]\n\n    count = 0\n    for l in range(n):\n        for r in range(l, n):\n            if find_median(l, r) == m:\n                count += 1\n\n    return count\n"
    },
    {
        "number": 4077,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n, m = map(int, input_list[0].split())\n    a = list(map(int, input_list[1].split()))\n\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if len(a[i:j]) % 2 == 1:\n                if sorted(a[i:j])[len(a[i:j])//2] == m:\n                    count += 1\n            else:\n                if sorted(a[i:j])[len(a[i:j])//2-1:len(a[i:j])//2+1] == [m, m]:\n                    count += 1\n\n    return str(count)"
    },
    {
        "number": 4077,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.splitlines()[0].split())\n    a = list(map(int, stdin.splitlines()[1].split()))\n    count = 0\n\n    for l in range(n):\n        for r in range(l, n):\n            if m == sorted(a[l:r+1])[len(a[l:r+1])//2]:\n                count += 1\n\n    return str(count)\n\n\ninput_string = \"\"\"5 4\n1 4 5 60 4\n3 1\n1 1 1\n15 2\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\"\"\"\n\nprint(solution(input_string)) "
    },
    {
        "number": 4077,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    \n    count = 0\n    for l in range(n):\n        for r in range(l, n):\n            if sorted(a[l:r+1])[(r-l+1)//2] == m:\n                count += 1\n    \n    return str(count)"
    },
    {
        "number": 4078,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def max_diff(arr):\n        return max(arr) - min(arr)\n\n    input_data = stdin.splitlines()\n    n, m = map(int, input_data[0].split())\n    a = list(map(int, input_data[1].split()))\n    segments = [tuple(map(int, input_data[i].split())) for i in range(2, m + 2)]\n\n    max_diff_b = -1\n    segments_applied = []\n\n    for i in range(m):\n        l, r = segments[i]\n        b = [a[j] - 1 if l <= j <= r else a[j] for j in range(n)]\n        new_diff = max_diff(b)\n        if new_diff > max_diff_b:\n            max_diff_b = new_diff\n            segments_applied = [i]\n        elif new_diff == max_diff_b:\n            segments_applied.append(i)\n\n    output = f\"{max_diff_b}\\n{len(segments_applied)}\\n\" + \" \".join(map(str, segments_applied))\n    return output\n\ninput_data = '''5 4\n2 -2 3 1 2\n1 3\n4 5\n2 5\n1 3'''\n\nprint(solution(input_data))\n\ninput_data = '''5 4\n2 -2 3 1 4\n3 5\n3 4\n2 4\n2 5'''\n\nprint(solution(input_data))\n\ninput_data = '''1 0\n1000000'''\n\nprint(solution(input_data)) "
    },
    {
        "number": 4078,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.splitlines()\n    n, m = map(int, input[0].split())\n    a = list(map(int, input[1].split()))\n    segments = []\n    for i in range(2, len(input)):\n        l, r = map(int, input[i].split())\n        segments.append((l, r))\n\n    def max_diff(b):\n        return max(b) - min(b)\n\n    def apply_segments(a, segments):\n        for l, r in segments:\n            a[l-1:r] = [x-1 for x in a[l-1:r]]\n        return a\n\n    best_diff = 0\n    best_segments = []\n\n    for selected_segments in itertools.combinations(segments, len(segments)):\n        b = apply_segments(a.copy(), selected_segments)\n        diff = max_diff(b)\n        if diff > best_diff:\n            best_diff = diff\n            best_segments = [x + 1 for x, _ in selected_segments]\n\n    return str(best_diff) + '\\n' + str(len(best_segments)) + '\\n' + ' '.join(str(x) for x in best_segments) + '\\n' "
    },
    {
        "number": 4078,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def apply_segments(a: list, segments: list) -> list:\n        for segment in segments:\n            for i in range(segment[0], segment[1] + 1):\n                a[i] -= 1\n        return a\n\n    def max_diff(a: list) -> int:\n        return max(a) - min(a)\n\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    segments = [tuple(map(int, input().split())) for _ in range(m)]\n\n    best_diff = 0\n    best_segments = []\n    for subset in itertools.combinations(range(m), m):\n        segments_subset = [segments[i] for i in subset]\n        a_new = apply_segments(a.copy(), segments_subset)\n        diff = max_diff(a_new)\n        if diff > best_diff:\n            best_diff = diff\n            best_segments = segments_subset\n\n    output = f\"{best_diff}\\n{m}\\n\"\n    output += \" \".join(str(i + 1) for i in best_segments)\n    return output\n\ninput_data = \"\"\"5 4\n2 -2 3 1 2\n1 3\n4 5\n2 5\n1 3\n\"\"\"\n\nprint(solution(input_data)) "
    },
    {
        "number": 4078,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    n, m = map(int, input_list[0].split())\n    a = list(map(int, input_list[1].split()))\n    segments = [list(map(int, input_list[i+2].split())) for i in range(m)]\n\n    def update_array(a, segments):\n        for segment in segments:\n            for i in range(segment[0], segment[1]+1):\n                a[i] -= 1\n        return a\n\n    def max_diff(a):\n        return max(a) - min(a)\n\n    best_diff = 0\n    best_segments = []\n\n    for i in range(1, 1 << m):\n        segments_to_apply = [j for j in range(m) if (i & (1 << j))]\n        updated_a = update_array(a.copy(), [segments[j] for j in segments_to_apply])\n        diff = max_diff(updated_a)\n\n        if diff > best_diff:\n            best_diff = diff\n            best_segments = segments_to_apply\n\n    output = str(best_diff) + '\\n' + str(len(best_segments)) + '\\n' + ' '.join(map(str, sorted(best_segments)))\n    return output\n"
    },
    {
        "number": 4078,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    segments = []\n    for _ in range(m):\n        l, r = map(int, input().split())\n        segments.append((l, r))\n    \n    # create array b\n    b = a.copy()\n    max_diff = 0\n    for segment in segments:\n        for i in range(segment[0]-1, segment[1]):\n            b[i] -= 1\n        diff = max(b) - min(b)\n        if diff > max_diff:\n            max_diff = diff\n    \n    print(max_diff)\n    print(0)\n    print(\"\")"
    },
    {
        "number": 4078,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    n, m = map(int, input_list[0].split())\n    a = list(map(int, input_list[1].split()))\n    segments = []\n    for i in range(2, 2 + m):\n        l, r = map(int, input_list[i].split())\n        segments.append((l, r))\n\n    max_diff = 0\n    chosen_segments = []\n    for i in range(m):\n        for j in range(i + 1, m):\n            for l, r in segments:\n                a_copy = a.copy()\n                for k in range(l, r + 1):\n                    if k in [i + 1, j + 1]:\n                        a_copy[k - 1] -= 1\n                    else:\n                        a_copy[k - 1] += 1\n                diff = max(a_copy) - min(a_copy)\n                if diff > max_diff:\n                    max_diff = diff\n                    chosen_segments = [(i + 1, j + 1)]\n                elif diff == max_diff:\n                    chosen_segments.append((i + 1, j + 1))\n\n    print(max_diff)\n    print(len(chosen_segments))\n    for segment in chosen_segments:\n        print(segment[0], segment[1])\n\n\nstdin = \"\"\"5 4\n2 -2 3 1 2\n1 3\n4 5\n2 5\n1 3\"\"\"\n\nsolution(stdin) "
    },
    {
        "number": 4078,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def max_diff(array):\n        return max(array) - min(array)\n\n    def update_array(array, segments):\n        for segment in segments:\n            for i in range(segment[0] - 1, segment[1]):\n                array[i] -= 1\n        return array\n\n    n, m = map(int, stdin.splitlines()[0].split())\n    a = list(map(int, stdin.splitlines()[1].split()))\n    segments = [tuple(map(int, line.split())) for line in stdin.splitlines()[2:]]\n\n    best_array = a\n    best_diff = max_diff(update_array(a, segments))\n\n    for i in range(m):\n        for j in range(i + 1, m):\n            segments_subset = [segments[i], segments[j]]\n            diff = max_diff(update_array(a, segments_subset))\n            if diff > best_diff:\n                best_diff = diff\n                best_array = update_array(a, segments_subset)\n\n    return str(best_diff) + \"\\n\" + str(len(segments)) + \"\\n\" + \" \".join(map(str, sorted(range(m), key=lambda x: -best_array[x])[:2])) + \"\\n\" "
    },
    {
        "number": 4078,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    segments = []\n    for i in range(m):\n        l, r = map(int, input().split())\n        segments.append((l, r))\n\n    def process_segments(segments, a):\n        for l, r in segments:\n            for i in range(l, r + 1):\n                a[i - 1] -= 1\n        return a\n\n    max_diff = float('-inf')\n    max_diff_segments = []\n    for i in range(2**m):\n        binary = bin(i)[2:].zfill(m)\n        selected_segments = [segments[j] for j in range(m) if binary[j] == '1']\n        processed_a = process_segments(selected_segments, a.copy())\n        diff = max(processed_a) - min(processed_a)\n        if diff > max_diff:\n            max_diff = diff\n            max_diff_segments = selected_segments\n\n    output = f\"{max_diff}\\n{len(max_diff_segments)}\\n\"\n    for segment in max_diff_segments:\n        output += f\"{segment[0]} {segment[1]}\\n\"\n\n    return output\n"
    },
    {
        "number": 4078,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    n, m = map(int, input_data[0].split())\n    a = list(map(int, input_data[1].split()))\n    segments = [list(map(int, input_data[i+2].split())) for i in range(m)]\n\n    def get_new_array(a, segments):\n        for segment in segments:\n            l, r = segment\n            for i in range(l-1, r):\n                a[i] -= 1\n        return a\n\n    def get_max_diff(a):\n        return max(a) - min(a)\n\n    best_diff = 0\n    best_segments = []\n\n    for i in range(2**m):\n        segments_used = [segments[j] for j in range(m) if i & (1<<j)]\n        new_array = get_new_array(a.copy(), segments_used)\n        diff = get_max_diff(new_array)\n\n        if diff > best_diff:\n            best_diff = diff\n            best_segments = segments_used\n\n    output = f\"{best_diff}\\n{len(best_segments)}\\n\"\n    output += ' '.join(map(str, [seg[1] for seg in best_segments]))\n    return output"
    },
    {
        "number": 4078,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def apply_segments(a: List[int], segments: List[Tuple[int, int]]) -> List[int]:\n        for l, r in segments:\n            for i in range(l - 1, r):\n                a[i] -= 1\n        return a\n\n    n, m = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:n + 2]))\n    segments = [tuple(map(int, stdin.split()[n + 2 + i:n + 4 + i])) for i in range(m)]\n\n    max_diff = 0\n    best_segments = []\n\n    for i in range(m):\n        for j in range(i + 1, m):\n            segments_set = {i, j}\n            b = apply_segments(a.copy(), [segments[k] for k in segments_set])\n            diff = max(b) - min(b)\n            if diff > max_diff:\n                max_diff = diff\n                best_segments = segments_set\n\n    return f\"{max_diff}\\n{len(best_segments)}\\n{ ' '.join(map(str, sorted(best_segments))) }\" "
    },
    {
        "number": 4079,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    strings = stdin.splitlines()[1:]\n    for i, s in enumerate(strings, start=1):\n        if len(s) != len(set(s)):\n            print(\"No\")\n            continue\n        if len(s) == 1:\n            print(\"Yes\")\n            continue\n        for j in range(len(s) - 1):\n            if ord(s[j]) + 1 != ord(s[j + 1]):\n                print(\"No\")\n                break\n        else:\n            print(\"Yes\")\n"
    },
    {
        "number": 4079,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    strings = stdin.splitlines()[1:]\n    for string in strings:\n        if is_diverse(string):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\ndef"
    },
    {
        "number": 4079,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    strings = stdin.split('\\n')[1:]\n    \n    for string in strings:\n        if not (is_consecutive(string) and is_distinct(string)):\n            print(\"No\")\n        else:\n            print(\"Yes\")\n            \ndef"
    },
    {
        "number": 4079,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    strings = stdin.split(\"\\n\")[1:]\n    for i in range(n):\n        string = strings[i]\n        if len(string) != len(set(string)):\n            print(\"No\")\n            continue\n        prev = None\n        for letter in string:\n            if prev is None:\n                prev = letter\n                continue\n            if ord(prev) + 1 != ord(letter):\n                print(\"No\")\n                break\n            prev = letter\n        else:\n            print(\"Yes\")\n"
    },
    {
        "number": 4079,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    lines = stdin.splitlines()[1:]\n    for line in lines:\n        if 'a' not in line and 'z' not in line:\n            if sorted(set(line)) == list(range(97, 123)):\n                print(\"Yes\")\n            else:\n                print(\"No\")\n        else:\n            print(\"No\")\n\n\nstdin = \"\"\"8\nfced\nxyz\nr\ndabcef\naz\naa\nbad\nbabc\"\"\"\nsolution(stdin) "
    },
    {
        "number": 4079,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_diverse(s: str) -> bool:\n        if len(s) != len(set(s)):\n            return False\n        prev_char = 'a'\n        for char in s:\n            if ord(char) - ord(prev_char) > 1:\n                return False\n            prev_char = char\n        return True\n\n    n = int(stdin.splitlines()[0])\n    result = []\n    for line in stdin.splitlines()[1:]:\n        if is_diverse(line):\n            result.append(\"Yes\")\n        else:\n            result.append(\"No\")\n    return \"\\n\".join(result)\n\n\ninput_str = \"\"\"8\nfced\nxyz\nr\ndabcef\naz\naa\nbad\nbabc\"\"\"\nprint(solution(input_str)) "
    },
    {
        "number": 4079,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    strings = stdin.splitlines()[1:]\n    \n    for string in strings:\n        letters = set()\n        for char in string:\n            if char not in letters:\n                letters.add(char)\n            else:\n                break\n        else:\n            print(\"Yes\")\n        print(\"No\")\n"
    },
    {
        "number": 4079,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def is_consecutive(s: str) -> bool:\n        s = sorted(s)\n        for i in range(len(s) - 1):\n            if ord(s[i]) + 1 != ord(s[i + 1]):\n                return False\n        return True\n\n    def has_duplicates(s: str) -> bool:\n        return len(set(s)) != len(s)\n\n    n = int(stdin.splitlines()[0])\n    output = []\n    for i in range(1, n + 1):\n        s = stdin.splitlines()[i]\n        if is_consecutive(s) and not has_duplicates(s):\n            output.append(\"Yes\")\n        else:\n            output.append(\"No\")\n    return \"\\n\".join(output)"
    },
    {
        "number": 4079,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lines = stdin.split('\\n')[1:]\n    for i, line in enumerate(lines):\n        letters = sorted(list(set(line)))\n        if len(letters) != 26:\n            print(\"No\")\n        else:\n            print(\"Yes\")"
    },
    {
        "number": 4079,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    strings = stdin.splitlines()[1:]\n    for string in strings:\n        if len(string) != len(set(string)):\n            print(\"No\")\n        else:\n            for i in range(len(string) - 1):\n                if ord(string[i]) + 1 != ord(string[i + 1]):\n                    print(\"No\")\n                    break\n            else:\n                print(\"Yes\")\n\n\ninput_str = \"\"\"8\nfced\nxyz\nr\ndabcef\naz\naa\nbad\nbabc\"\"\"\nsolution(input_str) "
    },
    {
        "number": 4080,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    n, m = map(int, input_list[0].split())\n    a = list(map(int, input_list[1].split()))\n    segments = [tuple(map(int, input_list[i].split())) for i in range(2, len(input_list))]\n\n    max_diff = 0\n    used_segments = []\n\n    for segment in segments:\n        l, r = segment\n        min_val = min(a[l-1:r])\n        max_val = max(a[l-1:r])\n        diff = max_val - min_val\n\n        if diff > max_diff:\n            max_diff = diff\n            used_segments = [segment]\n        elif diff == max_diff:\n            used_segments.append(segment)\n\n    result = max_diff * len(used_segments)\n\n    return f\"{result}\\n{len(used_segments)}\\n{' '.join(map(str, used_segments))}\""
    },
    {
        "number": 4080,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:n+2]))\n    segments = []\n    for i in range(m):\n        l, r = map(int, stdin.split()[n+2+i*2:n+2+(i+1)*2])\n        segments.append((l, r))\n    \n    def max_diff(b):\n        return max(b) - min(b)\n\n    def apply_segments(a, segments):\n        for l, r in segments:\n            for i in range(l-1, r):\n                a[i] -= 1\n        return a\n\n    max_diff_b = 0\n    optimal_segments = []\n    for subset in itertools.combinations(segments, len(segments)//2):\n        b = apply_segments(a, subset)\n        diff_b = max_diff(b)\n        if diff_b > max_diff_b:\n            max_diff_b = diff_b\n            optimal_segments = subset\n\n    return f\"{max_diff_b}\\n{len(optimal_segments)}\\n\" + \" \".join(map(str, [i+1 for i, s in enumerate(segments) if s in optimal_segments])) + \"\\n\""
    },
    {
        "number": 4080,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    n, m = map(int, input_data[0].split())\n    a = list(map(int, input_data[1].split()))\n    segments = [tuple(map(int, input_data[i + 1].split())) for i in range(m)]\n\n    max_diff = float('-inf')\n    selected_segments = []\n\n    for i in range(m):\n        for j in range(m):\n            if i != j:\n                l, r = segments[i]\n                l1, r1 = segments[j]\n                l_new = max(l, l1)\n                r_new = min(r, r1)\n                if l_new <= r_new:\n                    b = a.copy()\n                    for k in range(l_new, r_new + 1):\n                        b[k - 1] -= 1\n                    diff = max(b) - min(b)\n                    if diff > max_diff:\n                        max_diff = diff\n                        selected_segments = [i + 1, j + 1]\n\n    result = f\"{max_diff}\\n{len(selected_segments)}\\n\" + ' '.join(map(str, selected_segments))\n\n    return result\n"
    },
    {
        "number": 4080,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    segments = []\n\n    for _ in range(m):\n        l, r = map(int, input().split())\n        segments.append((l, r))\n\n    def apply_segments(segments):\n        b = a.copy()\n        for segment in segments:\n            l, r = segment\n            for i in range(l, r + 1):\n                b[i - 1] -= 1\n        return b\n\n    def max_diff(b):\n        return max(b) - min(b)\n\n    best_diff = -float('inf')\n    best_segments = []\n\n    for i in range(1 << m):\n        segments_set = [segments[j] for j in range(m) if (i & (1 << j))]\n        b = apply_segments(segments_set)\n        diff = max_diff(b)\n\n        if diff > best_diff:\n            best_diff = diff\n            best_segments = [j for j in range(m) if (i & (1 << j))]\n\n    result = best_diff\n    q = len(best_segments)\n    c = best_segments\n\n    return f\"{result}\\n{q}\\n{' '.join(map(str, c))}\\n\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def calc_max_diff(b: List[int]) -> int:\n        return max(b) - min(b)\n\n    def update_array(a: List[int], segments: List[Tuple[int, int]]) -> List[int]:\n        for l, r in segments:\n            for i in range(l - 1, r):\n                a[i] -= 1\n        return a\n\n    n, m = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:n + 2]))\n    segments = [tuple(map(int, stdin.split()[i + n + 2:i + n + 4])) for i in range(m)]\n\n    best_diff = 0\n    best_segments = []\n\n    for selected_segments in itertools.combinations(segments, len(segments) // 2):\n        updated_a = update_array(a.copy(), selected_segments)\n        diff = calc_max_diff(updated_a)\n        if diff > best_diff:\n            best_diff = diff\n            best_segments = selected_segments\n\n    answer = f\"{best_diff}\\n{len(best_segments)}\\n\"\n    answer += \" \".join(str(i + 1) for i, _ in enumerate(best_segments))\n\n    return answer\n\n\nstdin = \"\"\"5 4\n2 -2 3 1 2\n1 3\n4 5\n2 5\n1 3\n\"\"\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4080,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.splitlines()[0].split())\n    a = list(map(int, stdin.splitlines()[1].split()))\n    segments = [list(map(int, line.split())) for line in stdin.splitlines()[2:]]\n\n    def apply_segments(a, segments):\n        for segment in segments:\n            l, r = segment[0] - 1, segment[1] - 1\n            a[l], a[r] = a[r], a[l]\n        return a\n\n    max_diff = 0\n    for i in range(1, 1 << m):\n        segments_set = [segments[j] for j in range(m) if (i & (1 << j))]\n        b = apply_segments(a[:], segments_set)\n        new_diff = max(b) - min(b)\n        if new_diff > max_diff:\n            max_diff = new_diff\n\n    result = str(max_diff) + \"\\n\" + str(len(segments)) + \"\\n\"\n    for i in range(1, 1 << m):\n        segments_set = [segments[j] for j in range(m) if (i & (1 << j))]\n        b = apply_segments(a[:], segments_set)\n        if max_diff == max(b) - min(b):\n            result += \" \".join(map(str, [j + 1 for j in range(m) if (i & (1 << j))])) + \"\\n\"\n            break\n\n    return result\n"
    },
    {
        "number": 4080,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def max_diff(arr: List[int]) -> int:\n        return max(arr) - min(arr)\n\n    input_data = stdin.splitlines()\n    n, m = map(int, input_data[0].split())\n    a = list(map(int, input_data[1].split()))\n    segments = [tuple(map(int, input_data[i+2].split())) for i in range(m)]\n\n    if n == 1:\n        return \"0\\n0\\n\"\n\n    max_diff_val = float('-inf')\n    result = []\n\n    for i in range(2**m):\n        segments_used = [j for j in range(m) if (i & (1 << j)) > 0]\n        new_a = [a[k] - 1 if any(k >= segments[s][0] and k <= segments[s][1] for s in segments_used) else a[k] for k in range(n)]\n        diff = max_diff(new_a)\n        if diff > max_diff_val:\n            max_diff_val = diff\n            result = segments_used\n\n    return f\"{max_diff_val}\\n{len(result)}\\n{' '.join(map(str, result))}\\n\" "
    },
    {
        "number": 4080,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin.strip()\n    lines = input_str.split(\"\\n\")\n\n    n, m = map(int, lines[0].split())\n    a = list(map(int, lines[1].split()))\n    segments = []\n\n    for i in range(2, len(lines), 2):\n        l, r = map(int, lines[i].split())\n        segments.append((l, r))\n\n    def apply_segments(segments):\n        b = a.copy()\n        for l, r in segments:\n            b[l - 1:r] = [x - 1 for x in b[l - 1:r]]\n        return b\n\n    def max_diff(b):\n        return max(b) - min(b)\n\n    max_diff_value = 0\n    applied_segments = []\n\n    for segments_set in itertools.combinations(segments, m):\n        b = apply_segments(segments_set)\n        diff_value = max_diff(b)\n        if diff_value > max_diff_value:\n            max_diff_value = diff_value\n            applied_segments = segments_set\n\n    output = f\"{max_diff_value}\\n{len(applied_segments)}\\n\"\n    output += \" \".join(str(x + 1) for x in sorted(applied_segments))\n    return output\n"
    },
    {
        "number": 4080,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n, m = map(int, input_list[0].split())\n    a = list(map(int, input_list[1].split()))\n    segments = [list(map(int, input_list[i+2].split())) for i in range(m)]\n\n    def apply_segments(arr, segments):\n        for segment in segments:\n            for i in range(segment[0]-1, segment[1]):\n                arr[i] -= 1\n        return arr\n\n    def max_diff(arr):\n        return max(arr) - min(arr)\n\n    max_diff_b = 0\n    best_choice = []\n\n    for choice in range(m+1):\n        for subset in itertools.combinations(segments, choice):\n            b = apply_segments(a.copy(), subset)\n            diff = max_diff(b)\n            if diff > max_diff_b:\n                max_diff_b = diff\n                best_choice = [segment[1] for segment in subset]\n\n    output = f\"{max_diff_b}\\n{len(best_choice)}\\n{' '.join(map(str, best_choice))}\"\n\n    return output\n"
    },
    {
        "number": 4080,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def get_maximum_diff(b: List[int]) -> int:\n        return max(b) - min(b)\n\n    n, m = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:n + 2]))\n    segments = []\n\n    for _ in range(m):\n        l, r = map(int, stdin.split()[n + 2:])\n        segments.append((l, r))\n\n    b = list(a)\n    max_diff = 0\n    selected_segments = []\n\n    for l, r in segments:\n        b[l - 1:r] = [x - 1 for x in b[l - 1:r]]\n        new_diff = get_maximum_diff(b)\n\n        if new_diff > max_diff:\n            max_diff = new_diff\n            selected_segments = [(l, r)]\n        elif new_diff == max_diff:\n            selected_segments.append((l, r))\n\n        b[l - 1:r] = [x + 1 for x in b[l - 1:r]]\n\n    return f\"{max_diff}\\n{len(selected_segments)}\\n{' '.join(map(str, selected_segments))}\"\n\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    max_increasing_sequence = 1\n    left_moves = []\n\n    for i in range(n):\n        if a[i] > max_increasing_sequence:\n            max_increasing_sequence = a[i]\n            left_moves = [True] * i + [False] * (n - i)\n        elif a[i] == max_increasing_sequence:\n            left_moves.append(True)\n        else:\n            left_moves.append(False)\n\n    output_sequence = [max_increasing_sequence]\n    output_moves = []\n\n    for i in range(n - 1, -1, -1):\n        if left_moves[i]:\n            output_sequence.append(a[i])\n            output_moves.append('L')\n        else:\n            output_sequence.append(output_sequence[-1] + 1)\n            output_moves.append('R')\n\n    output_sequence.reverse()\n    output_moves.reverse()\n\n    return f\"{max_increasing_sequence}\\n{''.join(output_moves)}\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = [int(x) for x in stdin.splitlines()[1].split()]\n    a.sort()\n\n    dp = [1] * n\n    dp_l = [True] * n\n    dp_r = [True] * n\n    for i in range(n - 1, -1, -1):\n        if i + 1 < n and a[i] != a[i + 1]:\n            dp_l[i] = dp_r[i + 1]\n        if i > 0 and a[i] != a[i - 1]:\n            dp_r[i] = dp_l[i - 1]\n        dp[i] = dp_l[i] + dp_r[i]\n\n    k = max(dp)\n    s = ''\n    for i in range(n - 1, -1, -1):\n        if dp_l[i] and dp[i] == k:\n            s += 'L'\n            k -= 1\n        elif dp_r[i] and dp[i] == k:\n            s += 'R'\n            k -= 1\n\n    return k, s[::-1]\n"
    },
    {
        "number": 4081,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    \n    def is_increasing(sequence):\n        return all(sequence[i] < sequence[i+1] for i in range(len(sequence) - 1))\n    \n    def get_longest_increasing_subsequence(sequence):\n        longest_increasing_subsequence = []\n        for element in sequence:\n            if not is_increasing(longest_increasing_subsequence) or len(longest_increasing_subsequence) == 0:\n                longest_increasing_subsequence.append(element)\n            else:\n                i = 0\n                while i < len(longest_increasing_subsequence) and longest_increasing_subsequence[i] < element:\n                    i += 1\n                longest_increasing_subsequence.insert(i, element)\n        return longest_increasing_subsequence\n    \n    longest_increasing_subsequence = get_longest_increasing_subsequence(a)\n    k = len(longest_increasing_subsequence)\n    s = ['L' if a[i] == longest_increasing_subsequence[i] else 'R' for i in range(k)]\n    \n    return str(k) + '\\n' + ''.join(s)"
    },
    {
        "number": 4081,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split('\\n'))\n    s = []\n    for i in range(1, n+1):\n        if i not in a:\n            s.append('R')\n        else:\n            s.append('L')\n    return n, ''.join(s)"
    },
    {
        "number": 4081,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    \n    left_sequence = [True] * n\n    right_sequence = [True] * n\n    result = []\n    \n    for i in range(n):\n        if left_sequence[i]:\n            left_sequence[i] = False\n            result.append('L')\n            for j in range(i+1, n):\n                if a[i] < a[j] and left_sequence[j]:\n                    left_sequence[j] = False\n            if i == n-1:\n                result.append('R')\n    \n    for i in range(n-1, -1, -1):\n        if right_sequence[i]:\n            right_sequence[i] = False\n            result.append('R')\n            for j in range(i-1, -1, -1):\n                if a[i] > a[j] and right_sequence[j]:\n                    right_sequence[j] = False\n            if i == 0:\n                result.append('L')\n    \n    k = len(result)\n    s = ''.join(result)\n    \n    return k, s\n"
    },
    {
        "number": 4081,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a = list(sorted(set(a)))  # Remove duplicates and sort\n    len_a = len(a)\n    max_len = 0\n    for i in range(len_a):\n        if i < len_a - 1 and a[i] + 1 == a[i+1]:\n            continue\n        new_a = a[:i] + a[i+1:]\n        new_len = solution(str(n) + '\\n' + ' '.join(map(str, new_a)))\n        max_len = max(max_len, new_len)\n    return max_len + 1, 'L' * max_len\n"
    },
    {
        "number": 4081,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    dp = [[0] * (2 * n) for _ in range(2)]\n\n    for i in range(n):\n        dp[0][i] = i\n        dp[1][i] = i + n\n\n    for i in range(n, 2 * n):\n        if i - n in a:\n            dp[0][i] = dp[0][i - n]\n        else:\n            dp[0][i] = -1\n\n        if i - n - 1 in a:\n            dp[1][i] = dp[1][i - 1]\n        else:\n            dp[1][i] = -1\n\n        dp[0][i] = max(dp[0][i], dp[0][i - 1])\n        dp[1][i] = max(dp[1][i], dp[1][i - 1])\n\n    result = max(dp[0][2 * n - 1], dp[1][2 * n - 1])\n    seq = ['L'] * result\n\n    for i in range(2 * n - 2, -1, -1):\n        if dp[0][i] != dp[1][i]:\n            seq[result - 1 - i // n] = 'R'\n            result -= 1\n\n    return result, ''.join(seq)\n"
    },
    {
        "number": 4081,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    max_len = 1\n    max_str = 'L'\n\n    for i in range(n):\n        left_len = 1\n        left_str = 'L'\n        right_len = 1\n        right_str = 'R'\n\n        for j in range(i + 1, n):\n            if a[j] > a[i]:\n                left_len += 1\n                left_str += 'R'\n            else:\n                break\n\n        for j in range(i - 1, -1, -1):\n            if a[j] < a[i]:\n                right_len += 1\n                right_str += 'L'\n            else:\n                break\n\n        if left_len + right_len > max_len:\n            max_len = left_len + right_len\n            max_str = left_str + right_str\n\n    return max_len, max_str\n"
    },
    {
        "number": 4081,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def find_longest_increasing_subsequence(sequence):\n        dp = [1] * len(sequence)\n        for i in range(1, len(sequence)):\n            for j in range(i):\n                if sequence[i] > sequence[j]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return max(dp), dp\n\n    n = int(stdin.splitlines()[0])\n    sequence = list(map(int, stdin.splitlines()[1].split()))\n    max_length, dp = find_longest_increasing_subsequence(sequence)\n\n    # Create the string of 'L's and 'R's\n    result = ['L' if i else 'R' for i in dp]\n    result = ''.join(result[:max_length])\n\n    return max_length, result\n"
    },
    {
        "number": 4081,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, input().split())\n    a = sorted(list(set(a)))\n    \n    max_len = 0\n    max_s = \"\"\n    \n    for i in range(n):\n        if i == 0 or a[i] > a[i-1]:\n            left_len = i + 1\n            left_s = \"L\" * left_len\n            \n            right_len = n - i - left_len + 1\n            right_s = \"R\" * right_len\n            \n            seq_len = left_len + right_len\n            seq_s = left_s + right_s\n            \n            if seq_len > max_len:\n                max_len = seq_len\n                max_s = seq_s\n                \n    return max_len, max_s\n\ninput_str = \"\"\"5\n2 1 5 4 3\n7\n1 3 5 6 7 4 2\n3\n1 2 3\n4\n1 2 4 3\"\"\"\n\nresult = solution(input_str)\nprint(\"Output:\\n\", result[0], \"\\n\", result[1]) "
    },
    {
        "number": 4082,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    if n == 1:\n        return \"1\"\n\n    def is_increasing(subarray: list) -> bool:\n        for i in range(len(subarray) - 1):\n            if subarray[i] >= subarray[i + 1]:\n                return False\n        return True\n\n    max_length = 1\n    for i in range(n):\n        subarray = a[i:]\n        if is_increasing(subarray):\n            length = len(subarray)\n            if length > max_length:\n                max_length = length\n\n    return str(max_length)"
    },
    {
        "number": 4082,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    if n <= 2:\n        return n\n\n    a.sort()\n    left = a[1] - a[0]\n    right = n - 1\n    max_length = right - left + 1\n\n    for i in range(2, n - 1):\n        left = max(left, a[i] - a[i - 1])\n        right = min(right, n - i - 1)\n        max_length = max(max_length, right - left + 1)\n\n    return max_length\n"
    },
    {
        "number": 4082,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    n = int(input_list[0])\n    a = list(map(int, input_list[1:]))\n    \n    if n == 2:\n        return str(2)\n    \n    max_len = 1\n    max_len_without_max = 1\n    max_val = a[0]\n    \n    for i in range(1, n):\n        if a[i] > max_val:\n            max_len += 1\n            max_val = a[i]\n        else:\n            max_len_without_max = max(max_len_without_max, max_len)\n            max_len = 1\n            max_val = a[i]\n    \n    return str(max(max_len, max_len_without_max))\n\nn = 5\na = [1, 2, 5, 3, 4]\nprint(solution(str(n) + \"\\n\" + \" \".join(map(str, a))))\n\nn = 2\na = [1, 2]\nprint(solution(str(n) + \"\\n\" + \" \".join(map(str, a))))\n\nn = 7\na = [6, 5, 4, 3, 2, 4, 3]\nprint(solution(str(n) + \"\\n\" + \" \".join(map(str, a))))"
    },
    {
        "number": 4082,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = [int(x) for x in stdin.splitlines()[1].split()]\n\n    if n == 2:\n        return str(max(a))\n\n    # Remove one element\n    max_len = 0\n    for i in range(n):\n        new_a = a[:i] + a[i+1:]\n        new_len = len(new_a)\n        for j in range(new_len):\n            if new_a[j] < new_a[j+1]:\n                max_len = max(max_len, j+2)\n\n    return str(max_len)"
    },
    {
        "number": 4082,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def get_max_length(arr):\n        max_length = 1\n        current_length = 1\n        for i in range(1, len(arr)):\n            if arr[i] > arr[i - 1]:\n                current_length += 1\n                max_length = max(max_length, current_length)\n            else:\n                current_length = 1\n        return max_length\n\n    n = int(stdin.split('\\n')[0])\n    arr = [int(x) for x in stdin.split('\\n')[1].split()]\n\n    if n > 2 * 10**5:\n        return \"Invalid input\"\n\n    if n < 2:\n        return \"Invalid input\"\n\n    if max(arr) > 10**9:\n        return \"Invalid input\"\n\n    arr.sort()\n    max_length = get_max_length(arr)\n    return max_length\n"
    },
    {
        "number": 4082,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    arr = list(map(int, stdin.splitlines()[1].split()))\n    max_length = 1\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            max_length += 1\n        else:\n            max_length = 1\n    return str(max_length)\n\n\ndef"
    },
    {
        "number": 4082,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    if n <= 2:\n        return n\n\n    max_length = 1\n    current_length = 1\n\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 1\n\n    return max(max_length, current_length)\n"
    },
    {
        "number": 4082,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def increasing_subarray_length(arr):\n        n = len(arr)\n        inc_len = 1\n        max_inc_len = 1\n        for i in range(1, n):\n            if arr[i] > arr[i - 1]:\n                inc_len += 1\n                max_inc_len = max(max_inc_len, inc_len)\n            else:\n                inc_len = 1\n        return max_inc_len\n\n    n = int(stdin.split('\\n')[0])\n    arr = list(map(int, stdin.split('\\n')[1].split()))\n\n    if n > 1:\n        arr.remove(max(arr))\n        return increasing_subarray_length(arr)\n    else:\n        return 1\n"
    },
    {
        "number": 4082,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    if n <= 1:\n        return n\n\n    max_length = 1\n    current_length = 1\n\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            current_length += 1\n            if current_length > max_length:\n                max_length = current_length\n        else:\n            current_length = 1\n\n    return max_length\n"
    },
    {
        "number": 4082,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_data = list(map(int, stdin.split()))\n    n = input_data[0]\n    a = input_data[1:]\n    if n == 2:\n        return str(max(2, 1))\n    a_copy = a.copy()\n    a_copy.sort()\n    a_copy.reverse()\n    max_len = 1\n    removed = False\n    for i in range(1, n - 1):\n        if a[i] == a_copy[i]:\n            if not removed:\n                a.pop(i)\n                removed = True\n                break\n        else:\n            max_len = max(max_len, i + 1)\n    if not removed:\n        a.pop()\n    return str(max_len)\n\n\ndef"
    },
    {
        "number": 4083,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    \n    min_ops = 0\n    count = 0\n    for num in a:\n        while num % 2 == 0 and count < k:\n            num //= 2\n            min_ops += 1\n            count += 1\n        if count == k:\n            break\n    \n    return str(min_ops)\n\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\nprint(solution(str(n) + ' ' + str(k) + ' ' + ' '.join(map(str, a)))) "
    },
    {
        "number": 4083,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    \n    count = 0\n    for i in range(n):\n        while a[i] % 2 == 0 and a[i] > 0:\n            a[i] //= 2\n            count += 1\n    \n    if sum(a) >= k:\n        return str(count)\n    else:\n        return str(count + (k - sum(a)) // n)"
    },
    {
        "number": 4083,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    count = 0\n    for i in range(n):\n        if a[i] % 2 == 1:\n            a[i] //= 2\n            count += 1\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] == a[j]:\n                count -= 1\n    return str(count)\n"
    },
    {
        "number": 4083,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    # Initialize count for each element\n    count = [0] * (max(a) + 1)\n    for num in a:\n        count[num] += 1\n\n    # Find minimum number of operations required\n    min_ops = float('inf')\n    for num, cnt in enumerate(count):\n        if cnt >= k:\n            min_ops = 0\n            break\n        if cnt > 0:\n            min_ops = min(min_ops, 1 + (k - cnt) // cnt)\n\n    return str(min_ops)\n"
    },
    {
        "number": 4083,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_values = stdin.split('\\n')\n    n, k = map(int, input_values[0].split())\n    a = list(map(int, input_values[1].split()))\n\n    count = 0\n    for i in range(n):\n        while a[i] % 2 == 0:\n            a[i] //= 2\n            count += 1\n\n    if k > 0:\n        count += (k - 1)\n\n    return str(count)"
    },
    {
        "number": 4083,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    def is_equal(i, j):\n        return a[i] == a[j]\n\n    def count_equal_pairs(n, k):\n        count = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if is_equal(i, j):\n                    count += 1\n                    if count == k:\n                        return True\n        return False\n\n    def count_operations(a):\n        count = 0\n        for i in range(n):\n            if a[i] > 0:\n                a[i] //= 2\n                count += 1\n        return count\n\n    operations_required = count_operations(a)\n    while not count_equal_pairs(n, k):\n        operations_required += count_operations(a)\n\n    return str(operations_required)\n"
    },
    {
        "number": 4083,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    n, k = map(int, input_data[0].split())\n    a = list(map(int, input_data[1].split()))\n\n    operations = 0\n    equal_count = 0\n\n    for num in a:\n        while num > k:\n            num //= 2\n            operations += 1\n        equal_count += num\n\n    return str(operations)"
    },
    {
        "number": 4083,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    # Count the number of times each element appears in the array\n    count = [0] * (2 * 10**5 + 1)\n    for i in a:\n        count[i] += 1\n    # Find the minimum number of operations required to obtain at least k equal numbers\n    min_ops = float('inf')\n    for i in range(1, 2 * 10**5 + 1):\n        if count[i] >= k:\n            min_ops = min(min_ops, count[i])\n    return min_ops\n\n\ninput_stdin = \"\"\"5 3\n1 2 2 4 5\"\"\"\n\nresult = solution(input_stdin)\nprint(result) "
    },
    {
        "number": 4083,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    min_ops = float('inf')\n    count = {}\n\n    for num in a:\n        if num not in count:\n            count[num] = 1\n        else:\n            count[num] += 1\n\n    for num in a:\n        if num % 2 == 1 and num != 1:\n            min_ops = min(min_ops, count[num])\n\n    min_ops = max(min_ops, 0)\n    min_ops = min(min_ops, n - k)\n\n    return str(min_ops)\n"
    },
    {
        "number": 4083,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    \n    # calculate the frequency of each element in the array\n    freq = [0] * (max(a) + 1)\n    for num in a:\n        freq[num] += 1\n    \n    # count the number of equal numbers\n    count = sum(freq[1:]) // 2\n    \n    # calculate the minimum number of operations required\n    operations = 0\n    for i in range(1, len(freq)):\n        if freq[i] > 0:\n            operations += freq[i]\n            if count >= k:\n                break\n            count += freq[i] // 2\n    \n    return str(operations)"
    },
    {
        "number": 4084,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    M = 10**100\n    total_blue = M * A\n    total_red = M * B\n    total_balls = total_blue + total_red\n    first_N_balls = total_balls % N\n    blue_balls_first_N = (first_N_balls * A) // total_blue\n    return blue_balls_first_N\n"
    },
    {
        "number": 4084,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    return (N * (A + B)) // (A + B + 1)\n\nstdin = \"8 3 4\"\nresult = solution(stdin)\nprint(result)"
    },
    {
        "number": 4084,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split()\n    N, A, B = map(int, input_data)\n\n    if A + B > 10**18:\n        return \"Invalid Input\"\n\n    blue_balls = 0\n    for _ in range(10**100):\n        blue_balls += A\n        blue_balls += B\n\n    return blue_balls // N\n"
    },
    {
        "number": 4084,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    M = 10**100\n    max_blue = (N * (A + B) + M - 1) // M * A\n    min_blue = (N * (A + B) - M + 1) // M * A\n    return min_blue"
    },
    {
        "number": 4084,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n\n    # Calculate the number of blue balls after the first N balls\n    blue_balls = N * B\n\n    # Calculate the number of red balls after the first N balls\n    red_balls = N * A\n\n    # Calculate the total number of balls after the first N balls\n    total_balls = blue_balls + red_balls\n\n    # Calculate the total number of blue balls after the first N balls\n    blue_balls_after_N = total_balls - red_balls\n\n    # Calculate the number of blue balls among the first N balls\n    blue_balls_among_N = min(blue_balls_after_N, N)\n\n    return blue_balls_among_N\n"
    },
    {
        "number": 4084,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n\n    blue_balls = 0\n    for _ in range(10**100):\n        blue_balls += A\n        blue_balls += B\n\n    return blue_balls // N"
    },
    {
        "number": 4084,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    total_balls = A + B\n    blue_balls = (N * (N - 1)) // 2 * B\n    red_balls = (N * (N - 1)) // 2 * A\n    result = blue_balls + red_balls\n    return result"
    },
    {
        "number": 4084,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    if A + B > 10**18:\n        return \"0\"\n    return str(A * (N + 1) + B * N)\n\nN, A, B = map(int, input().split())\nprint(solution(str(N) + \" \" + str(A) + \" \" + str(B))) "
    },
    {
        "number": 4084,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    total_balls = A + B\n    blue_balls = (N * (N - 1)) // 2\n    total_blue_balls = blue_balls + A\n    if total_balls <= N:\n        return total_blue_balls\n    else:\n        return N\n\n\nstdin = input(\"Enter the input values: \")\nprint(solution(stdin)) "
    },
    {
        "number": 4084,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    M = 10**100\n    first_N_blue_balls = (B * M // 2) + (N * A * B) // (2 * M)\n    return first_N_blue_balls"
    },
    {
        "number": 4085,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.splitlines()[0])\n    result = []\n\n    for i in range(1, t + 1):\n        n = int(stdin.splitlines()[i].split()[0])\n        divisors = list(map(int, stdin.splitlines()[i].split()[1:]))\n\n        if n < 3:\n            result.append(-1)\n            continue\n\n        divisors.sort()\n        start = divisors[0]\n        end = divisors[-1]\n        x = divisors[0]\n\n        if x == 1:\n            x = divisors[1]\n\n        for d in divisors:\n            if d % x == 0:\n                continue\n            if d < x:\n                start = d\n            else:\n                end = d - 1\n                break\n\n        while start <= end:\n            mid = (start + end) // 2\n            if len(divisors) != len(list(filter(lambda x: x % mid == 0, divisors))):\n                start = mid + 1\n            else:\n                end = mid - 1\n\n        if start <= end:\n            result.append(-1)\n        else:\n            result.append(start)\n\n    return \"\\n\".join(map(str, result)) "
    },
    {
        "number": 4085,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split(\"\\n\")[0])\n    result = []\n    \n    for i in range(1, t + 1):\n        n = int(stdin.split(\"\\n\")[2 * i - 1])\n        divisors = list(map(int, stdin.split(\"\\n\")[2 * i].split()))\n        divisors.sort()\n        \n        if n == 1:\n            result.append(-1)\n            continue\n        \n        left, right = 1, divisors[-1]\n        while left <= right:\n            mid = (left + right) // 2\n            if sum(div for div in divisors if div <= mid) == n:\n                right = mid - 1\n            else:\n                left = mid + 1\n                \n        result.append(left)\n        \n    return \"\\n\".join(map(str, result))\n\n\ninput_string = \"2\\n8\\n8 2 12 6 4 24 16 3\\n1\\n2\"\nprint(solution(input_string))\n"
    },
    {
        "number": 4085,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split(\"\\n\")[0])\n    output = []\n    for _ in range(t):\n        n = int(stdin.split(\"\\n\")[1])\n        divisors = sorted(list(set(map(int, stdin.split(\"\\n\")[2].split()))))\n        if len(divisors) == n:\n            for i in range(2, n):\n                if divisors[i] - divisors[i-1] != 1:\n                    output.append(-1)\n                    break\n            else:\n                output.append(divisors[-1])\n        else:\n            output.append(-1)\n        stdin = stdin[2+n:]\n    return \"\\n\".join(map(str, output)) "
    },
    {
        "number": 4085,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def find_x(divisors):\n        x = divisors[0]\n        for d in divisors[1:]:\n            x = x * d // gcd(x, d)\n        return x\n\n    t = int(stdin.split(\"\\n\")[0])\n    output = []\n\n    for _ in range(t):\n        n = int(stdin.split(\"\\n\")[1])\n        divisors = list(map(int, stdin.split(\"\\n\")[2].split()))\n\n        if n == 1:\n            output.append(-1)\n        else:\n            x = find_x(divisors)\n            if x * x == divisors[-1]:\n                output.append(x)\n            else:\n                output.append(-1)\n\n    return \"\\n\".join(map(str, output))\n"
    },
    {
        "number": 4085,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    t = int(input_list[0])\n    result = []\n\n    for i in range(1, t * 2 + 1, 2):\n        n = int(input_list[i])\n        divisors = list(map(int, input_list[i + 1].split()))\n\n        if n == 1 and len(divisors) == 2:\n            if divisors[0] == 1 and divisors[1] == 2:\n                result.append(2)\n            else:\n                result.append(-1)\n        elif n == 2 and len(divisors) == 3:\n            if divisors[0] == 1 and divisors[1] == 2 and divisors[2] == 3:\n                result.append(3)\n            else:\n                result.append(-1)\n        else:\n            result.append(-1)\n\n    return \"\\n\".join(map(str, result))\n"
    },
    {
        "number": 4085,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.splitlines()\n    t = int(input_data[0])\n    output = []\n    for i in range(1, t*2+1, 2):\n        n = int(input_data[i])\n        divisors = list(map(int, input_data[i+1].split()))\n        if len(divisors) == n:\n            x = divisors[0]\n            for d in divisors:\n                x = lcm(x, d)\n            output.append(x)\n        else:\n            output.append(-1)\n    return '\\n'.join(map(str, output))\n\ndef"
    },
    {
        "number": 4085,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a: int, b: int) -> int:\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n\n    def is_almost_divisors(divisors: list, x: int) -> bool:\n        for d in divisors:\n            if d > 1 and d != x and x % d != 0:\n                return False\n        return True\n\n    t = int(stdin[0])\n    result = []\n    for i in range(1, t * 2 + 1, 2):\n        n = int(stdin[i])\n        divisors = [int(d) for d in stdin[i + 1].split()]\n        x = 1\n        while not is_almost_divisors(divisors, x):\n            x += 1\n        if x > 1000000:\n            result.append(-1)\n        else:\n            result.append(x)\n\n    return \"\\n\".join(map(str, result))\n"
    },
    {
        "number": 4085,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a: int, b: int) -> int:\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n\n    def lcm(a: int, b: int) -> int:\n        return a * b // gcd(a, b)\n\n    def almost_all_divisors(guessed_number: int, divisors: List[int]) -> bool:\n        for divisor in divisors:\n            if divisor == guessed_number or divisor == 1:\n                return False\n        return True\n\n    t = int(stdin[0])\n    input_data = stdin[1].split()\n    result = []\n    for i in range(t):\n        n = int(input_data[0])\n        input_data = input_data[1:]\n        divisors = [int(divisor) for divisor in input_data[:n]]\n        input_data = input_data[n:]\n        if not almost_all_divisors(divisors[0], divisors[1:]):\n            result.append(-1)\n        else:\n            lcm_value = reduce(lcm, divisors)\n            result.append(lcm_value)\n    return \"\\n\".join(str(r) for r in result)\n"
    },
    {
        "number": 4085,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    output = []\n    \n    for i in range(1, t+1):\n        n = int(stdin.split('\\n')[i*2].split()[0])\n        divisors = list(map(int, stdin.split('\\n')[i*2+1].split()))\n        \n        x = divisors[0]\n        for j in range(1, n):\n            x = lcm(x, divisors[j])\n            \n        if x == 1:\n            output.append(\"-1\")\n        else:\n            output.append(x)\n            \n    return \"\\n\".join(map(str, output))\n\ndef"
    },
    {
        "number": 4085,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split(\"\\n\")[0])\n    outputs = []\n\n    for i in range(1, t+1):\n        n = int(stdin.split(\"\\n\")[i*2].split()[0])\n        divisors = list(map(int, stdin.split(\"\\n\")[i*2+1].split()))\n\n        if n > len(divisors) + 1:\n            outputs.append(\"-1\")\n            continue\n\n        for j in range(n):\n            divisors.remove(divisors[0])\n            divisors.append(divisors[0] + divisors[1])\n            divisors.remove(divisors[-1])\n            divisors.append(divisors[-1] + divisors[-2])\n            divisors.remove(divisors[-2])\n\n        if divisors == [240, 242, 244, 246, 248, 250]:\n            outputs.append(\"-1\")\n        else:\n            x = divisors[0]\n            for j in range(1, len(divisors)):\n                x = gcd(x, divisors[j])\n            outputs.append(x)\n\n    return \"\\n\".join(map(str, outputs))\n\n\ndef"
    },
    {
        "number": 4086,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    a_dict = {}\n    for i in range(n):\n        if a[i] not in a_dict:\n            a_dict[a[i]] = i\n    x = len(a_dict)\n    result = [a_dict[i] for i in sorted(a_dict)]\n    return f\"{x}\\n{' '.join(map(str, result))}\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    unique_a = list(set(a))\n    result = []\n    for i in unique_a:\n        index = a.index(i)\n        if index == n - 1:\n            result.append(i)\n        else:\n            a.pop(index)\n    x = len(result)\n    return f\"{x}\\n\" + \" \".join(map(str, result))\n\n\ninput_str = \"\"\"6\n1 5 5 1 6 1\n5\n2 4 2 4 4\n5\n6 6 6 6 6\"\"\"\n\noutput_str = solution(input_str)\nprint(output_str)\n"
    },
    {
        "number": 4086,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    a_dict = {}\n    \n    for i in range(n):\n        if a[i] not in a_dict:\n            a_dict[a[i]] = i\n    \n    x = len(a_dict)\n    output = []\n    \n    for key in sorted(a_dict.keys()):\n        output.append(key)\n    \n    return f\"{x}\\n{' '.join(map(str, output))}\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    unique_elements = set()\n    result = []\n    rightmost_index = {}\n\n    for i, element in enumerate(a):\n        if element not in unique_elements:\n            unique_elements.add(element)\n            rightmost_index[element] = i\n\n    for element in sorted(unique_elements):\n        result.append(element)\n\n    output = \" \".join(map(str, result))\n\n    return f\"{len(unique_elements)}\\n{output}\"\n\n\ninput_data = \"\"\"6\n1 5 5 1 6 1\n5\n2 4 2 4 4\n5\n6 6 6 6 6\"\"\"\n\noutput_data = \"\"\"\n3\n5 6 1 \n2\n2 4 \n1\n6 \n\"\"\"\n\n\ninput_cases = input_data.strip().split(\"\\n\\n\")\noutput_cases = output_data.strip().split(\"\\n\\n\")\n\n\nfor i, input_case in enumerate(input_cases):\n    input_string = input_case.replace(\"\\n\", \"\\n\").strip()\n    output_case = output_cases[i].strip()\n\n    result = solution(input_string)\n\n    if result != output_case:\n        print(f\"Case #{i+1} failed\")\n        print(\"Input:\")\n        print(input_string)\n        print(\"Expected output:\")\n        print(output_case)\n        print(\"Actual output:\")\n        print(result)\n        break\nelse:\n    print(\"All test cases passed\") "
    },
    {
        "number": 4086,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def remove_duplicates(arr):\n        unique_arr = []\n        seen = set()\n        for i in range(len(arr)-1, -1, -1):\n            if arr[i] not in seen:\n                seen.add(arr[i])\n                unique_arr.append(arr[i])\n        return unique_arr[::-1]\n\n    n = int(stdin.splitlines()[0])\n    arr = list(map(int, stdin.splitlines()[1].split()))\n    unique_arr = remove_duplicates(arr)\n\n    result = f\"{len(unique_arr)}\\n{' '.join(map(str, unique_arr))}\\n\"\n\n    return result\n\n\ninput_str = \"\"\"6\n1 5 5 1 6 1\n5\n2 4 2 4 4\n5\n6 6 6 6 6\"\"\"\n\noutput_str = \"\"\"3\n5 6 1 \n2\n2 4 \n1\n6\"\"\"\n\nprint(solution(input_str))\nprint(output_str) "
    },
    {
        "number": 4086,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    result = []\n    seen = set()\n\n    for num in a[::-1]:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n\n    x = len(result)\n    result = result[::-1]\n\n    output = \" \".join(map(str, result))\n\n    return f\"{x}\\n{output}\"\n\n\nstdin = \"6\\n1 5 5 1 6 1\"\nprint(solution(stdin))\n\nstdin = \"5\\n2 4 2 4 4\"\nprint(solution(stdin))\n\nstdin = \"5\\n6 6 6 6 6\"\nprint(solution(stdin)) "
    },
    {
        "number": 4086,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    a_set = set()\n    result = []\n\n    for i in range(n - 1, -1, -1):\n        if a[i] not in a_set:\n            a_set.add(a[i])\n            result.append(a[i])\n\n    return f\"{len(result)}\\n{' '.join(map(str, result))}\\n\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    seen = set()\n    unique_a = []\n    rightmost_occurrence = {}\n\n    for i, x in enumerate(a):\n        if x not in rightmost_occurrence:\n            rightmost_occurrence[x] = i\n        else:\n            rightmost_occurrence[x] = i\n\n    for x in sorted(rightmost_occurrence.keys()):\n        unique_a.append(x)\n\n    x = len(unique_a)\n    result = \" \".join(map(str, unique_a))\n\n    return f\"{x}\\n{result}\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    a_dict = {}\n    result = []\n\n    for num in a:\n        if num not in a_dict:\n            a_dict[num] = True\n            result.append(num)\n\n    output = \" \".join(map(str, result))\n    return f\"{len(result)}\\n{output}\" "
    },
    {
        "number": 4086,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    a.sort()\n    x = 1\n    result = [a[0]]\n    \n    for i in range(1, len(a)):\n        if a[i] != a[i-1]:\n            result.append(a[i])\n            x += 1\n    \n    return f\"{x}\\n{' '.join(map(str, result))}\""
    },
    {
        "number": 4087,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 4 == 0:\n        return str(a)\n    elif a % 4 == 1:\n        return str(a + 1)\n    elif a % 4 == 2:\n        return str(a + 2)\n    elif a % 4 == 3:\n        return str(a + 3)\n"
    },
    {
        "number": 4087,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    next_interesting_number = a\n    while True:\n        digits_sum = sum(int(digit) for digit in str(next_interesting_number))\n        if digits_sum % 4 == 0:\n            break\n        next_interesting_number += 1\n    return str(next_interesting_number)"
    },
    {
        "number": 4087,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    while True:\n        sum_of_digits = sum(int(digit) for digit in str(a))\n        if sum_of_digits % 4 == 0:\n            break\n        a += 1\n    return str(a)\n"
    },
    {
        "number": 4087,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n\n    def sum_of_digits(n: int) -> int:\n        digits = [int(digit) for digit in str(n)]\n        return sum(digits)\n\n    def find_nearest_interesting_number(n: int) -> int:\n        while True:\n            if sum_of_digits(n) % 4 == 0:\n                return n\n            n += 1\n\n    nearest_interesting_number = find_nearest_interesting_number(a)\n    return str(nearest_interesting_number)\n\n\ndef"
    },
    {
        "number": 4087,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    sum_digits = sum(int(digit) for digit in str(a))\n\n    if sum_digits % 3 == 0:\n        result = a + (3 - sum_digits % 3)\n    elif sum_digits % 4 == 0:\n        result = a\n    else:\n        result = a + (4 - sum_digits % 4)\n\n    return str(result)\n"
    },
    {
        "number": 4087,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    min_sum = float('inf')\n    min_number = float('inf')\n\n    for i in range(a, 1001):\n        digit_sum = sum(int(digit) for digit in str(i))\n        if digit_sum % 4 == 0 and i % 3 == 0 and i < min_number:\n            min_sum = digit_sum\n            min_number = i\n\n    return str(min_number)\n\ninput_str = \"432\"\nprint(solution(input_str))\n\ninput_str = \"99\"\nprint(solution(input_str))\n\ninput_str = \"237\"\nprint(solution(input_str))\n\ninput_str = \"42\"\nprint(solution(input_str)) "
    },
    {
        "number": 4087,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    n = a + 1\n    while True:\n        s = sum(int(d) for d in str(n))\n        if s % 4 == 0:\n            return str(n)\n        n += 1\n"
    },
    {
        "number": 4087,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    n = a\n    while True:\n        digits_sum = sum(int(d) for d in str(n))\n        if digits_sum % 4 == 0:\n            break\n        n += 1\n    return str(n)\n\n\ninput_data = input()  # Get input from standard input\nresult = solution(input_data)  # Call the solution function\nprint(result)  # Output the result to standard output "
    },
    {
        "number": 4087,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    digit_sum = sum(int(digit) for digit in str(a))\n\n    if digit_sum % 3 == 0:\n        return a\n\n    if digit_sum % 4 != 0:\n        return -1\n\n    count = 0\n    n = a\n    while count < digit_sum // 4:\n        n += 1\n        count = sum(int(digit) for digit in str(n)) // 4\n\n    return n\n"
    },
    {
        "number": 4087,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def sum_of_digits(n: int) -> int:\n        return sum(map(int, str(n)))\n\n    def is_interesting(n: int) -> bool:\n        return (sum_of_digits(n) % 4 == 0)\n\n    a = int(stdin.strip())\n    if is_interesting(a):\n        return str(a)\n\n    def is_interesting_number(n: int) -> bool:\n        return is_interesting(n) and (n > a)\n\n    for i in range(a + 1, 1001):\n        if is_interesting_number(i):\n            return str(i)\n\n    return \"No interesting number found.\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def generate_string(s: str, b: List[int]) -> str:\n        result = []\n        for i in range(1, len(s) + 1):\n            current_sum = 0\n            for j in range(1, len(s) + 1):\n                if j == i:\n                    continue\n                current_sum += abs(i - j)\n            if current_sum == b[i - 1]:\n                result.append(s[i - 1])\n        return ''.join(result)\n\n    def is_valid(s: str, b: List[int]) -> bool:\n        temp = generate_string(s, b)\n        return temp == s\n\n    def get_first_valid_string(s: str, b: List[int]) -> str:\n        result = generate_string(s, b)\n        while not is_valid(s, b):\n            s = result\n            result = generate_string(s, b)\n        return result\n\n    q = int(stdin.readline().strip())\n    for _ in range(q):\n        s = stdin.readline().strip()\n        m = int(stdin.readline().strip())\n        b = [int(x) for x in stdin.readline().strip().split()]\n        print(get_first_valid_string(s, b))\n"
    },
    {
        "number": 4088,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    answers = []\n    for _ in range(q):\n        s = stdin.readline().strip()\n        m = int(stdin.readline().strip())\n        b = list(map(int, stdin.readline().strip().split()))\n        if m == 0:\n            answers.append(\"\")\n            continue\n        t = \"\"\n        for c in s:\n            t += c if b.pop(0) == 0 else \"\"\n        while b:\n            t += s[s.index(chr(97 + b.pop(0)))]\n        answers.append(t)\n    return \"\\n\".join(answers)\n"
    },
    {
        "number": 4088,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def distance(i: int, j: int) -> int:\n        return abs(i - j)\n\n    def b_sum(s: str, b: List[int]) -> bool:\n        return sum(distance(i, s.index(chr(c))) for i, c in enumerate(b)) == sum(b)\n\n    def find_t(s: str, b: List[int]) -> str:\n        t = list(s)\n        t.sort()\n        return ''.join(t)\n\n    def find_valid_t(s: str, b: List[int]) -> str:\n        t = find_t(s, b)\n        if not b_sum(t, b):\n            for i in range(len(t)):\n                if t[i] == chr(b[i]):\n                    continue\n                if t[i] > chr(b[i]):\n                    t[i] = chr(b[i])\n                    break\n                else:\n                    for j in range(len(t)):\n                        if t[j] > t[i]:\n                            t[j], t[i] = t[i], t[j]\n                            break\n            if b_sum(t, b):\n                return ''.join(t)\n        return ''.join(t)\n\n    q = int(stdin.readline())\n    output = []\n    for _ in range(q):\n        s = stdin.readline().strip()\n        m = int(stdin.readline())\n        b = list(map(int, stdin.readline().strip().split()))\n        t = find_valid_t(s, b)\n        output.append(t)\n    return '\\n'.join(output)\n"
    },
    {
        "number": 4088,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def compute_distances(s: str, b: List[int]) -> List[int]:\n        distances = []\n        for i in range(len(s)):\n            sum_distances = 0\n            for j in range(len(s)):\n                if i != j and s[j] > s[i]:\n                    sum_distances += abs(i - j)\n            distances.append(sum_distures)\n        return distances\n\n    def find_suitable_strings(s: str, b: List[int], distances: List[int]) -> List[str]:\n        suitable_strings = []\n        for i in range(len(s)):\n            for j in range(len(s)):\n                if j > i and s[j] > s[i] and distances[j] == b[j]:\n                    suitable_strings.append(s[:i] + s[j] + s[i + 1:] + s[i])\n        return suitable_strings\n\n    cases = stdin.split(\"\\n\")\n    test_cases = int(cases[0])\n    results = []\n    for i in range(1, test_cases * 3, 3):\n        s = cases[i]\n        m = int(cases[i + 1])\n        b = [int(x) for x in cases[i + 2].split()]\n        if len(s) != m:\n            raise ValueError(\"The length of the string and the array are not equal.\")\n        distances = compute_distances(s, b)\n        suitable_strings = find_suitable_strings(s, b, distances)\n        results.append(suitable_strings[0])\n    return \"\\n\".join(results)"
    },
    {
        "number": 4088,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n\n    for _ in range(q):\n        s = stdin.readline().strip()\n        m = int(stdin.readline().strip())\n        b = list(map(int, stdin.readline().strip().split()))\n\n        t = sorted(set(s))\n        for i, c in enumerate(s):\n            t[ord(c) - ord('a')] = chr(ord('a') + i)\n        t = ''.join(t)\n\n        result = []\n        for i, c in enumerate(t):\n            dist = 0\n            for j in range(len(s)):\n                if s[j] > c:\n                    dist += j - i\n            result.append(dist)\n\n        if result == b:\n            print(t)\n        else:\n            print(\"NO SOLUTION\")\n\n\nstdin = \"\"\"4\nabac\n3\n2 1 0\nabc\n1\n0\nabba\n3\n1 0 1\necoosdcefr\n10\n38 13 24 14 11 5 3 24 17 0\"\"\"\n\nsolution(io.StringIO(stdin)) "
    },
    {
        "number": 4088,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def find_answer(s, b):\n        s_list = list(s)\n        result = []\n        for i in range(len(s_list)):\n            if i % 2 == 1:\n                result.append(s_list[i])\n        return ''.join(result)\n\n    q = int(stdin[0])\n    result = []\n    for i in range(1, len(stdin), 3):\n        s = stdin[i]\n        m = int(stdin[i+1])\n        b_str = stdin[i+2].split()\n        b = [int(b_str[i]) for i in range(m)]\n\n        answer = find_answer(s, b)\n        result.append(answer)\n\n    return '\\n'.join(result)\n"
    },
    {
        "number": 4088,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def distance(i: int, j: int) -> int:\n        return abs(i - j)\n\n    def calculate_b(t: str) -> list[int]:\n        result = [0] * len(t)\n        for i in range(1, len(t)):\n            for j in range(i):\n                if t[j] < t[i]:\n                    result[i] += distance(i, j)\n        return result\n\n    def is_valid(s: str, b: list[int]) -> bool:\n        t = \"\"\n        for i, c in enumerate(sorted(s)):\n            t += c\n        return calculate_b(t) == b\n\n    q = int(stdin.readline())\n    for _ in range(q):\n        s = stdin.readline().strip()\n        m = int(stdin.readline())\n        b = list(map(int, stdin.readline().strip().split()))\n\n        # Generate all possible strings and check if they satisfy the conditions\n        valid_strings = [s[:i] + s[i + 1:] for i in range(len(s))]\n        for string in valid_strings:\n            if is_valid(string, b):\n                print(string)\n                break\n\n        # Output \"No solution\" if no string satisfies the conditions\n        else:\n            print(\"No solution\")"
    },
    {
        "number": 4088,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def count_b(t: str, b: List[int]) -> bool:\n        counter = [0] * 26\n        for char in t:\n            counter[ord(char) - ord('a')] += 1\n        result = [0] * len(b)\n        for i, cnt in enumerate(counter):\n            for j in range(len(b)):\n                result[j] += abs(i - j) * cnt\n        return result == b\n\n    q = int(stdin.splitlines()[0])\n    output = []\n    for i in range(1, q + 1):\n        _, s = stdin.splitlines()[i - 1].split()\n        _, m = stdin.splitlines()[i + q // 2 - 1].split()\n        b = list(map(int, stdin.splitlines()[i + q // 2 + 1].split()))\n        for t in itertools.permutations(s):\n            if count_b(t, b):\n                output.append(''.join(t))\n                break\n    return '\\n'.join(output)\n\n\ninput_str = '''4\nabac\n3\n2 1 0\nabc\n1\n0\nabba\n3\n1 0 1\necoosdcefr\n10\n38 13 24 14 11 5 3 24 17 0'''\n\noutput_str = solution(input_str)\nprint(output_str)\n"
    },
    {
        "number": 4088,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def calculate_b(t: str) -> list:\n        b = []\n        for i in range(len(t)):\n            distance = 0\n            for j in range(len(t)):\n                if j != i and ord(t[j]) > ord(t[i]):\n                    distance += abs(i - j)\n            b.append(distance)\n        return b\n\n    def is_valid(s: str, t: str, b: list) -> bool:\n        if len(s) != len(t):\n            return False\n\n        b_calculated = calculate_b(t)\n        return b_calculated == b\n\n    def find_valid_strings(s: str, b: list) -> list:\n        valid_strings = []\n        for i in range(len(s)):\n            for j in range(i + 1, len(s) + 1):\n                valid_strings.append(s[i:j])\n\n        valid_strings_b = [calculate_b(t) for t in valid_strings]\n        valid_strings = [t for t, b_t in zip(valid_strings, valid_strings_b) if b_t == b]\n        return valid_strings\n\n    def main(stdin: str) -> str:\n        q = int(stdin.splitlines()[0])\n        answers = []\n        for _ in range(q):\n            s = stdin.splitlines()[1]\n            m = int(stdin.splitlines()[2])\n            b = list(map(int, stdin.splitlines()[3].split()))\n\n            valid_strings = find_valid_strings(s, b)\n            for t in valid_strings:\n                if is_valid(s, t, b):\n                    answers.append(t)\n                    break\n\n            print(answers[-1])\n            answers.clear()\n\n    stdin = stdin.replace(\"\\n\", \"\\r\")\n    main(stdin)\n\n\nstdin = \"\"\"4\nabac\n3\n2 1 0\nabc\n1\n0\nabba\n3\n1 0 1\necoosdcefr\n10\n38 13 24 14 11 5 3 24 17 0\n\"\"\"\n\nsolution(stdin)\n"
    },
    {
        "number": 4088,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def calculate_b(t: str) -> list[int]:\n        b = [0] * len(t)\n        for i in range(1, len(t)):\n            b[i] = sum(abs(i - j) for j in range(len(t)) if t[j] > t[i])\n        return b\n\n    def find_t(s: str, b: list[int]) -> str:\n        if len(s) != len(b):\n            raise ValueError(\"s and b must have the same length\")\n\n        candidates = {c: [i for i in range(len(s)) if s[i] == c] for c in set(s)}\n        result = []\n\n        for i in range(len(s)):\n            if b[i] == 0:\n                result.append(s[i])\n            else:\n                available_letters = [c for c in candidates if candidates[c] and any(j > i for j in candidates[c])]\n                if not available_letters:\n                    raise ValueError(\"No suitable candidate found\")\n                available_letters.sort(key=lambda c: abs(candidates[c][0] - i))\n                result.append(available_letters[0])\n                candidates[available_letters[0]].remove(candidates[available_letters[0]][0])\n\n        return \"\".join(result)\n\n    q = int(stdin.readline().strip())\n    for _ in range(q):\n        s = stdin.readline().strip()\n        m = int(stdin.readline().strip())\n        b = list(map(int, stdin.readline().strip().split()))\n        if len(s) != m:\n            raise ValueError(\"s and b must have the same length\")\n        try:\n            t = find_t(s, b)\n            print(t)\n        except ValueError as e:\n            print(e)\n"
    },
    {
        "number": 4089,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    count = 26\n    for i in range(5):\n        if N <= count:\n            return 'abcdefghijklmnopqrstuvwxyz'[N-1] + 'abcdefghijklmnopqrstuvwxyz'[i]*(i+1)\n        count *= 26\n    return 'aaaaa' + 'abcdefghijklmnopqrstuvwxyz'[N-1]\n"
    },
    {
        "number": 4089,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n\n    # Generate the number of digits for each group\n    digits = [26, 26, 26, 26, 26]\n    while sum(digits) < n:\n        digits.append(26)\n\n    # Calculate the index for each group\n    index = n - 1\n    for i in range(len(digits)):\n        digits[i] -= 1\n        index //= 26\n\n    # Calculate the name for the dog\n    name = \"\"\n    for i in range(len(digits)):\n        name = chr(ord('a') + index % digits[i]) + name\n        index //= digits[i]\n\n    return name"
    },
    {
        "number": 4089,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n\n    if N <= 26:\n        return chr(97 + N - 1)\n    elif 27 <= N <= 701:\n        return chr(96 + (N - 1) // 26) + chr(97 + (N - 1) % 26)\n    elif 702 <= N <= 18277:\n        q, r = (N - 2) // 26, (N - 2) % 26\n        if r == 0:\n            return chr(96 + q) + chr(97 + 25)\n        else:\n            return chr(96 + q) + chr(97 + r)\n    elif 18278 <= N <= 475253:\n        q, r = (N - 3) // 26, (N - 3) % 26\n        if r == 0:\n            return chr(96 + q) + chr(97 + 24)\n        else:\n            return chr(96 + q) + chr(97 + r)\n    elif 475254 <= N <= 1000000000000001:\n        q, r = (N - 4) // 26, (N - 4) % 26\n        if r == 0:\n            return chr(96 + q) + chr(97 + 23)\n        else:\n            return chr(96 + q) + chr(97 + r)\n    else:\n        raise ValueError(\"Invalid input\")\n"
    },
    {
        "number": 4089,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if 1 <= N <= 26:\n        return chr(ord('a') + N - 1)\n    elif 27 <= N <= 701:\n        base = ord('a') - 1\n        N -= 26\n        if N % 26 == 0:\n            return chr(base + N // 26) + 'z'\n        else:\n            return chr(base + N // 26) + chr(base + N % 26)\n    elif 702 <= N <= 18277:\n        base = ord('a') - 1\n        N -= 701\n        if N % 26 == 0:\n            return chr(base + N // 26) + 'z'\n        else:\n            return chr(base + N // 26) + chr(base + N % 26)\n    elif 18278 <= N <= 475253:\n        base = ord('a') - 1\n        N -= 18277\n        if N % 26 == 0:\n            return chr(base + N // 26) + 'z'\n        else:\n            return chr(base + N // 26) + chr(base + N % 26)\n    elif 475254 <= N <= 1000000000000001:\n        base = ord('a') - 1\n        N -= 475253\n        if N % 26 == 0:\n            return chr(base + N // 26) + 'z'\n        else:\n            return chr(base + N // 26) + chr(base + N % 26)"
    },
    {
        "number": 4089,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if 1 <= N <= 26:\n        return chr(ord('a') + N - 1)\n    elif 27 <= N <= 701:\n        return chr(ord('a') + (N - 26) // 26 - 1) + chr(ord('a') + (N - 26) % 26)\n    elif 703 <= N <= 18277:\n        return chr(ord('a') + (N - 702) // 26) * 2 + chr(ord('a') + (N - 702) % 26)\n    elif 18279 <= N <= 475253:\n        return chr(ord('a') + (N - 18278) // 26) * 3 + chr(ord('a') + ((N - 18278) % 26) // 2) + chr(ord('a') + (N - 18278) % 26 % 2)\n    elif 475255 <= N <= 1000000000000001:\n        return chr(ord('a') + (N - 475254) // 26) * 4 + chr(ord('a') + ((N - 475254) % 26) // 2) + chr(ord('a') + (N - 475254) % 26 % 2)\n    else:\n        return \"Invalid Input\"\n\ndef"
    },
    {
        "number": 4089,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    letters = list(\"abcdefghijklmnopqrstuvwxyz\")\n    result = \"\"\n    \n    if N <= 26:\n        result = letters[N-1]\n    elif N <= 701:\n        result = letters[(N-1)//26-1] + letters[((N-1) % 26) if (N-1) % 26 != 0 else 25]\n    elif N <= 18277:\n        result = letters[((N-1)//700) % 26] * (((N-1) // 700) + 1)\n    elif N <= 475253:\n        result = letters[((N-1)//1827) % 26] * (((N-1) // 1827) + 1)\n    else:\n        result = letters[((N-1)//4752) % 26] * (((N-1) // 4752) + 1)\n    \n    return result\n"
    },
    {
        "number": 4089,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if 1 <= N <= 26:\n        return chr(ord('a') + N - 1)\n    elif 27 <= N <= 701:\n        return chr(ord('a') + (N - 1) // 26) + chr(ord('a') + (N - 1) % 26)\n    elif 702 <= N <= 18277:\n        return chr(ord('a') + (N - 1) // 700) * 2 + chr(ord('a') + ((N - 1) % 700) // 26) + chr(ord('a') + ((N - 1) % 700) % 26)\n    elif 18278 <= N <= 475253:\n        return chr(ord('a') + (N - 1) // 18276) * 3 + chr(ord('a') + ((N - 1) % 18276) // 26) + chr(ord('a') + ((N - 1) % 18276) % 26)\n    elif 475254 <= N <= 1000000000000001:\n        return chr(ord('a') + (N - 1) // 475253) * 4 + chr(ord('a') + ((N - 1) % 475253) // 26) + chr(ord('a') + ((N - 1) % 475253) % 26)"
    },
    {
        "number": 4089,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n\n    if 1 <= N <= 26:\n        return chr(97 + N - 1)\n    elif 27 <= N <= 701:\n        return chr(97 + (N - 27) // 26) + chr(96 + (N - 1) % 26)\n    elif 703 <= N <= 18277:\n        return chr(97 + (N - 703) // 26) + chr(96 + (N - 703) % 26)\n    elif 18279 <= N <= 475253:\n        return chr(97 + (N - 18279) // 26) + chr(96 + (N - 18279) % 26)\n    elif 475255 <= N <= 1000000000000001:\n        return chr(97 + (N - 475255) // 26) + chr(96 + (N - 475255) % 26)\n    else:\n        raise ValueError(\"N is not within the valid range\")\n"
    },
    {
        "number": 4089,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    \n    if 1 <= N <= 26:\n        return chr(ord('a') + N - 1)\n    elif 27 <= N <= 701:\n        return chr(ord('a') + (N - 27) // 26 - 1) + chr(ord('a') + (N - 27) % 26)\n    elif 703 <= N <= 18277:\n        return chr(ord('a') + (N - 703) // 700 - 1) + chr(ord('a') + ((N - 703) % 700) // 26 - 1) + chr(ord('a') + ((N - 703) % 700) % 26)\n    elif 18279 <= N <= 475254:\n        return chr(ord('a') + (N - 18279) // 1413 - 1) + chr(ord('a') + ((N - 18279) % 1413) // 26 - 1) + chr(ord('a') + ((N - 18279) % 1413) % 26) + str(N)[-1]\n    elif 475255 <= N <= 1000000000000001:\n        return chr(ord('a') + (N - 475255) // 2497 - 1) + chr(ord('a') + ((N - 475255) % 2497) // 26 - 1) + chr(ord('a') + ((N - 475255) % 2497) % 26) + str(N)[-2:]\n    else:\n        return \"Invalid input.\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if 1 <= N <= 26:\n        return chr(97 + N - 1)\n    elif 27 <= N <= 702:\n        return chr(96 + (N - 26) // 26) + chr(96 + (N - 26) % 26)\n    elif 703 <= N <= 18277:\n        return chr(95 + (N - 702) // 701) * 2 + chr(97 + (N - 702) % 701 // 26) + chr(97 + (N - 702) % 26)\n    elif 18278 <= N <= 475254:\n        return chr(95 + (N - 18277) // 18276) * 3 + chr(96 + (N - 18277) % 18276 // 701) * 2 + chr(97 + (N - 18277) % 26)\n    elif 475255 <= N <= 1000000000000001:\n        return chr(95 + (N - 475254) // 475253) * 4 + chr(95 + (N - 475254) % 475253 // 18276) * 3 + chr(96 + (N - 475254) % 18276 // 701) * 2 + chr(97 + (N - 475254) % 26)\n    else:\n        return \"invalid input\"\n\n\ndef"
    },
    {
        "number": 4090,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    words = stdin.splitlines()[1].split()\n    word_segments = []\n\n    for i in range(n):\n        j = i\n        while j < n and ''.join(words[i:j + 1]).islower():\n            j += 1\n        word_segments.append(words[i:j])\n\n    abbreviations = []\n    for i in range(len(word_segments) - 1):\n        for j in range(i + 2, len(word_segments)):\n            if len(word_segments[i]) == len(word_segments[j]) and word_segments[i] == word_segments[j]:\n                abbreviations.append((i, j))\n\n    if not abbreviations:\n        return len(stdin.splitlines()[1])\n\n    min_length = len(stdin.splitlines()[1])\n    for i, j in abbreviations:\n        abbreviation = ''.join(word.capitalize() for word in word_segments[i])\n        new_text = stdin.splitlines()[1].replace(abbreviation, abbreviation.lower())\n        min_length = min(min_length, len(new_text))\n\n    return min_length\n"
    },
    {
        "number": 4090,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    words = stdin.split('\\n')[1].split()\n\n    def segment_equality(i1: int, j1: int, i2: int, j2: int) -> bool:\n        if j1 - i1 != j2 - i2:\n            return False\n        for t in range(j1 - i1):\n            if words[i1 + t] != words[i2 + t]:\n                return False\n        return True\n\n    def compute_min_length(words: List[str]) -> int:\n        min_length = 0\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                for k in range(i + 1, n):\n                    for l in range(k + 1, n):\n                        if segment_equality(i, j, k, l) and segment_equality(k, l, i, j):\n                            min_length = max(min_length, len(words[i].upper()) + len(words[j].upper()) + len(words[k].upper()) + len(words[l].upper()))\n        return min_length\n\n    return compute_min_length(words)\n"
    },
    {
        "number": 4090,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    words = stdin.splitlines()[1].split()\n    segments = []\n    segment_len = 1\n\n    for i in range(1, n):\n        if words[i] == words[i - 1]:\n            segment_len += 1\n        else:\n            segments.append(segment_len)\n            segment_len = 1\n\n    segments.append(segment_len)\n\n    min_length = sum(segments)\n\n    for i in range(len(segments)):\n        for j in range(i + 2, len(segments)):\n            if segments[i] != segments[j] and segments[i] != 1 and segments[j] != 1:\n                abbreviation_len = (segments[i] - 1) + (segments[j] - 1)\n                min_length = min(min_length, abbreviation_len)\n\n    return min_length\n\n\ndef"
    },
    {
        "number": 4090,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def is_equal_segment(w: str, i1: int, j1: int, i2: int, j2: int) -> bool:\n        if j1 - i1 != j2 - i2:\n            return False\n        for t in range(j1 - i1):\n            if w[i1 + t] != w[i2 + t]:\n                return False\n        return True\n\n    n = int(stdin[0])\n    words = stdin[1].split()\n    text = ' '.join(words)\n    words = [word.lower() for word in words]\n    if n <= 1:\n        return len(text)\n\n    for i in range(n - 2):\n        for j in range(i + 2, n):\n            for k in range(i + 2, j):\n                for l in range(k + 2, n):\n                    if is_equal_segment(text, i, j, k, l) and is_equal_segment(words, i, j, k, l):\n                        return min(len(text), len(words) + (j - i) + (l - k) + 2)\n\n    return len(text)\n\n\ndef"
    },
    {
        "number": 4090,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def abbreviate(words):\n        n = len(words)\n        segments = []\n        for i in range(n):\n            for j in range(i + 1, n + 1):\n                if j - i == 1:\n                    continue\n                if j - i > 1 and (j - i) % 2 == 0:\n                    continue\n                segments.append((i, j))\n        min_length = float('inf')\n        for i, j in segments:\n            abbreviation = ''.join([word[0].upper() for word in words[i:j]])\n            new_words = words[:i] + [abbreviation] + words[j:]\n            min_length = min(min_length, sum(len(word) for word in new_words))\n        return min_length\n\n    n = int(stdin.split('\\n')[0])\n    words = stdin.split('\\n')[1].split()\n    return abbreviate(words)\n\n\ndef"
    },
    {
        "number": 4090,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def abbreviate(text: str) -> str:\n        words = text.split()\n        segments = []\n        for i in range(len(words)):\n            for j in range(i + 2, len(words) + 1):\n                segment = words[i:j]\n                if len(segment) > 1 and segment == segment[0].upper() + segment[1:]:\n                    segments.append((i, j - 1))\n        segments.sort(key=lambda x: x[1] - x[0], reverse=True)\n        for i, j in segments:\n            if all(words[k] == words[i].upper() for k in range(i, j)):\n                words[i:j + 1] = [words[i].upper()]\n                break\n        return ' '.join(words)\n\n    n = int(stdin.splitlines()[0])\n    text = stdin.splitlines()[1]\n\n    min_length = len(abbreviate(text))\n    return min_length\n"
    },
    {
        "number": 4090,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    words = stdin.split('\\n')[1].split(' ')\n\n    def can_abbreviate(w1: str, w2: str) -> bool:\n        return w1[0].upper() == w2[0].upper() and len(w1) == len(w2)\n\n    def find_abbreviations(words: List[str]) -> List[Tuple[int, int]]:\n        abbreviations = []\n        for i in range(1, len(words)):\n            for j in range(i + 1, len(words) + 1):\n                for k in range(i, j):\n                    if can_abbreviate(words[i], words[k]):\n                        abbreviations.append((i, k))\n        return abbreviations\n\n    def abbreviate(words: List[str], abbreviations: List[Tuple[int, int]]) -> str:\n        def get_abbreviation(i: int, j: int) -> str:\n            return ''.join(word[0].upper() for word in words[i:j + 1])\n\n        for i, j in abbreviations:\n            words[i:j + 1] = [get_abbreviation(i, j)] * (j - i + 1)\n\n        return ' '.join(words)\n\n    abbreviations = find_abbreviations(words)\n    if len(abbreviations) <= 1:\n        return len(' '.join(words))\n\n    min_length = len(' '.join(words))\n    for i, j in abbreviations:\n        abbreviated_words = abbreviate(words.copy(), [(i, j)])\n        min_length = min(min_length, len(abbreviated_words))\n\n    return min_length\n\n\nstdin = \"\"\"6\nto be or not to be\"\"\"\n\nprint(solution(stdin))\n\nstdin = \"\"\"10\na ab a a b ab a a b c\"\"\"\n\nprint(solution(stdin))\n\nstdin = \"\"\"6\naa bb aa aa bb bb\"\"\"\n\nprint(solution(stdin)) "
    },
    {
        "number": 4090,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    words = stdin.splitlines()[1].split()\n\n    def abbreviate(start, end):\n        result = [words[start]]\n        for i in range(start + 1, end + 1):\n            if words[i] == words[i - 1][0].upper():\n                result[-1] += words[i][0].upper()\n            else:\n                result.append(words[i][0].upper())\n        return ''.join(result)\n\n    def is_equal(start1, end1, start2, end2):\n        return end1 - start1 == end2 - start2 and end1 >= start1 and end2 >= start2 and all(words[i1] == words[i2] for i1, i2 in zip(range(start1, end1 + 1), range(start2, end2 + 1)))\n\n    min_length = len(words)\n    for i in range(len(words)):\n        for j in range(i + 2, len(words) - 1):\n            for k in range(j + 2, len(words) - 1):\n                if is_equal(i, j, k, k + 1):\n                    min_length = min(min_length, len(abbreviate(i, j)) + len(abbreviate(k, k + 1)) - 1)\n\n    return min_length\n"
    },
    {
        "number": 4090,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_equal(w1: str, w2: str) -> bool:\n        if len(w1) != len(w2):\n            return False\n        for i in range(len(w1)):\n            if w1[i] != w2[i]:\n                return False\n        return True\n\n    n = int(stdin[0])\n    words = stdin[1].split()\n    word_length = len(words)\n\n    def abbreviate(w: str) -> str:\n        return w[0].upper()\n\n    def can_abbreviate(i: int, j: int) -> bool:\n        if i == j:\n            return False\n        for k in range(i + 1, j):\n            if not is_equal(words[i], words[k]):\n                return False\n        return True\n\n    min_length = 0\n    for i in range(word_length):\n        min_length += len(words[i])\n    for i in range(word_length - 1):\n        for j in range(i + 1, word_length):\n            if can_abbreviate(i, j):\n                abbreviation = abbreviate(words[i])\n                min_length += len(abbreviation)\n                for k in range(i + 1, j):\n                    min_length -= len(words[k])\n                min_length -= len(words[j])\n                break\n\n    return min_length\n"
    },
    {
        "number": 4090,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    words = stdin.splitlines()[1].split()\n    n_segments = n - 1\n    min_length = n * 2\n    \n    for i in range(n_segments):\n        for j in range(i + 1, n_segments + 1):\n            segment = ''.join([words[k][0].upper() for k in range(i, j)])\n            new_length = 2 * (j - i) + sum(len(words[k]) for k in range(i, j))\n            min_length = min(min_length, new_length)\n    \n    return min_length\n"
    },
    {
        "number": 4091,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    def max_profit(problems, k):\n        max_profit_sum = float('-inf')\n        for distribution in generate_distributions(problems, k):\n            profit = sum(max(a[i:j]) for i, j in distribution)\n            max_profit_sum = max(max_profit_sum, profit)\n        return max_profit_sum\n\n    def generate_distributions(problems, k):\n        for i in range(1, k + 1):\n            if i == 1:\n                yield [(0, problems)]\n            else:\n                for distribution in generate_distributions(problems - i, k - i):\n                    yield [(i, problems)] + distribution\n\n    max_profit_sum = max_profit(n, k)\n    distribution = generate_distributions(n, k)\n    t = [0] * k\n    for i in range(k):\n        t[i] = next(distribution)\n        if i > 0:\n            t[i] += t[i - 1]\n    print(max_profit_sum)\n    print(' '.join(map(str, t)))\n"
    },
    {
        "number": 4091,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def max_profit(problems: list) -> int:\n        max_profit = 0\n        for i in range(len(problems)):\n            max_profit = max(max_profit, problems[i])\n        return max_profit\n\n    def max_total_profit(problems: list, days: int) -> tuple:\n        if days == 1:\n            return (1,) * len(problems)\n        profit_by_day = [0] * days\n        for i in range(len(problems)):\n            profit_by_day[0] += problems[i]\n        for i in range(1, days):\n            profit_by_day[i] = profit_by_day[i - 1] - max_profit(problems[:i])\n        max_profit = profit_by_day[days - 1] - max_profit(problems[:days])\n        max_profit_by_day = max_profit\n        max_profit_by_day = max(max_profit_by_day, profit_by_day[0] - max_profit(problems[1:]))\n        for i in range(2, days):\n            max_profit_by_day = max(max_profit_by_day, profit_by_day[i] - max_profit(problems[:i]), profit_by_day[i - 1] - max_profit(problems[i:]))\n        return (max_profit_by_day,) * days\n\n    n, k = map(int, stdin.split()[:2])\n    problems = list(map(int, stdin.split()[2:]))\n    profit, solutions = max_total_profit(problems, k)\n    print(profit)\n    print(*solutions)\n"
    },
    {
        "number": 4091,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def max_profit(start, end, a):\n        max_profit = a[start]\n        max_index = start\n        for i in range(start + 1, end + 1):\n            if a[i] > max_profit:\n                max_profit = a[i]\n                max_index = i\n        return max_index, max_profit\n\n    def solve_problems(k, a, n):\n        days = []\n        for i in range(k):\n            days.append([0, n])\n\n        for i in range(n):\n            max_index, max_profit = max_profit(days[0][0], days[0][1], a)\n            days[0][0] = max_index + 1\n            days[0][1] = n\n\n            for j in range(1, k):\n                if days[j - 1][1] < max_index:\n                    days[j][0] = days[j - 1][0]\n                else:\n                    days[j][0] = days[j - 1][0]\n                days[j][1] = max_index\n\n        total_profit = sum([a[days[i][0] - 1] for i in range(k)])\n        return total_profit\n\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    total_profit = solve_problems(k, a, n)\n    t = [0] * k\n    for i in range(k):\n        t[i] = a.index(max(a[t[i]:])) + 1\n\n    return total_profit, \" \".join(map(str, t)) + \"\\n\"\n\n\ninput_str = \"\"\"8 3\n5 4 2 6 5 1 9 2\n\"\"\"\n\noutput_str = \"\"\"20\n3 2 3\n\"\"\"\n\nprint(solution(input_str))\nprint(solution(output_str)) "
    },
    {
        "number": 4091,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            for l in range(i):\n                r = min(i, l + j)\n                dp[i][j] = max(dp[i][j], dp[l][j - (r - l)] + sum(a[l:r]))\n\n    total_profit = dp[n][k]\n\n    if n == k:\n        t = [1] * k\n    else:\n        t = [dp[i][k - (k - i)] - dp[0][k - (k - i)] for i in range(1, n + 1)]\n\n    return f\"{total_profit}\\n{t[0]}\" if len(t) == 1 else f\"{total_profit}\\n{' '.join(map(str, t))}\"\n\n\ninput_data = \"\"\"8 3\n5 4 2 6 5 1 9 2\"\"\"\n\noutput_data = \"\"\"20\n3 2 3\"\"\"\n\nprint(solution(input_data))\nprint(output_data) "
    },
    {
        "number": 4091,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    \n    # initialize the dp table\n    dp = [[[0] * (k + 1) for _ in range(n + 1)] for _ in range(k + 1)] for _ in range(k + 1)]\n    \n    # fill the dp table\n    for i in range(k + 1):\n        for j in range(n + 1):\n            for l in range(i + 1):\n                r = j\n                while l <= r and r <= j:\n                    dp[i][j][l] = max(dp[i][j][l], dp[i][j][l - 1] + a[r])\n                    r -= 1\n    \n    # find the optimal distribution\n    t = [0] * k\n    for i in range(k, 0, -1):\n        max_profit = float('-inf')\n        for l in range(i, n + 1):\n            if dp[i][n][l] > max_profit:\n                max_profit = dp[i][n][l]\n                t[i - 1] = n - l + 1\n    \n    # print the maximum profit and the optimal distribution\n    return str(max_profit) + '\\n' + ' '.join(map(str, t))"
    },
    {
        "number": 4091,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    n, k = map(int, input_data[0].split())\n    a = list(map(int, input_data[1].split()))\n    \n    # Initialize the profit and days_solved lists\n    profit = [0] * k\n    days_solved = [0] * k\n    \n    for i in range(n):\n        max_profit = 0\n        for j in range(k):\n            if i % k == j:\n                # First problem of the day\n                profit[j] = a[i]\n                days_solved[j] = 1\n            else:\n                # Not the first problem of the day\n                if a[i] > max_profit:\n                    # Update the maximum profit and the day\n                    max_profit = a[i]\n                    profit[j] = max_profit\n                    days_solved[j] += 1\n        \n        # Update the total profit\n        total_profit = sum(profit)\n        \n    # Calculate the number of problems to solve in each day\n    t = [total_profit // k] * k\n    for i in range(total_profit % k):\n        t[i] += 1\n        \n    output = f\"{total_profit}\\n\" + \" \".join(map(str, t))\n    return output\n"
    },
    {
        "number": 4091,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def max_profit(arr: list, n: int, k: int) -> int:\n        if k >= n:\n            return sum(arr)\n\n        dp = [[0] * (k + 1) for _ in range(n + 1)]\n\n        for i in range(1, n + 1):\n            for j in range(1, k + 1):\n                max_profit_i = 0\n                for l in range(i):\n                    max_profit_i = max(max_profit_i, arr[l] + dp[i - 1][j - 1])\n                dp[i][j] = max(dp[i][j], max_profit_i)\n\n        return dp[n][k]\n\n    def max_profit_dist(arr: list, n: int, k: int) -> list:\n        dp = [[0] * k for _ in range(n + 1)]\n\n        for i in range(1, n + 1):\n            max_profit_i = 0\n            for j in range(1, k + 1):\n                max_profit_i = max(max_profit_i, arr[i - 1] + dp[i - 1][j - 1])\n            dp[i][j - 1] = max(dp[i][j - 1], max_profit_i)\n\n        t = [0] * k\n        j = k\n        for i in range(n, 0, -1):\n            while j > 0 and dp[i][j - 1] <= dp[i][j]:\n                j -= 1\n            t[j - 1] += 1\n\n        return t\n\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    profit = max_profit(a, n, k)\n    t = max_profit_dist(a, n, k)\n\n    return f\"{profit}\\n{ ' '.join(map(str, t)) }\""
    },
    {
        "number": 4091,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    def calculate_profit(start, end):\n        return max(a[i] for i in range(start, end + 1))\n\n    max_profit = 0\n    for i in range(k):\n        max_profit += calculate_profit(i, i)\n\n    if k > 1:\n        for i in range(k - 1):\n            max_profit += calculate_profit(i, i + k - 1)\n\n    return str(max_profit) + \"\\n\" + \" \".join(map(str, [k] * n))\n\n\ninput_str = \"\"\"8 3\n5 4 2 6 5 1 9 2\n\"\"\"\n\nprint(solution(input_str)) # Output: 20\\n3 2 3\n\n\ninput_str = \"\"\"5 1\n1 1 1 1 1\n\"\"\"\n\nprint(solution(input_str)) # Output: 1\\n5\n\n\ninput_str = \"\"\"4 2\n1 2000 2000 2\n\"\"\"\n\nprint(solution(input_str)) # Output: 4000\\n2 2 "
    },
    {
        "number": 4091,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    # Calculate the maximum profit for each day\n    profits = [0] * k\n    for i in range(n):\n        for j in range(k):\n            profits[j] = max(profits[j], a[i])\n\n    # Calculate the maximum total profit\n    total_profit = sum(profits)\n\n    # Calculate the number of problems to be solved for each day\n    t = [0] * k\n    for i in range(n):\n        t[i % k] += 1\n\n    # Print the maximum total profit and the number of problems to be solved for each day\n    return f\"{total_profit}\\n{' '.join(map(str, t))}\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.splitlines()\n    n, k = map(int, input_data[0].split())\n    a = list(map(int, input_data[1].split()))\n\n    max_profit = 0\n    for i in range(1, k + 1):\n        for j in range(i, n + 1):\n            profit = sum(a[l:r])\n            if profit > max_profit:\n                max_profit = profit\n\n    t = [0] * k\n    t[0] = n\n\n    for i in range(k):\n        for j in range(i + 1, n):\n            if a[j] > a[i]:\n                t[i] += 1\n                break\n\n    output = f\"{max_profit}\\n{' '.join(map(str, t))}\"\n\n    return output\n"
    },
    {
        "number": 4092,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    mod_a = []\n    for i in range(n):\n        if i % 2 == 0:\n            mod_a.append(a[i])\n        else:\n            mod_a.append(-a[i])\n    \n    count = 0\n    for i in range(n-1):\n        if mod_a[i] + mod_a[i+1] == 0:\n            count += 1\n    \n    return count"
    },
    {
        "number": 4092,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    def sum_subsegments(a):\n        n = len(a)\n        s = [0] * (n + 1)\n        for i in range(n):\n            s[i + 1] = s[i] + a[i]\n        return [(s[i] - s[j]) for i in range(n + 1) for j in range(i + 1, n + 1)]\n\n    def count_insertions(subsegments):\n        count = 0\n        for s in subsegments:\n            if s == 0:\n                count += 1\n        return count\n\n    subsegments = sum_subsegments(a)\n    insertions = count_insertions(subsegments)\n\n    return str(insertions)\n"
    },
    {
        "number": 4092,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    def is_sum_zero(start: int, end: int) -> bool:\n        if start == end:\n            return False\n        if start + 1 == end:\n            return a[start] + a[end] == 0\n        return (is_sum_zero(start, end - 1) and a[end] == -a[start]) or (is_sum_zero(start + 1, end) and a[start] == -a[end])\n\n    count = 0\n    for i in range(n - 1):\n        if is_sum_zero(0, i) or is_sum_zero(i + 1, n - 1):\n            count += 1\n\n    return count\n"
    },
    {
        "number": 4092,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    arr = list(map(int, input().split()))\n\n    def insert_integers(arr, index, count):\n        if count == 0:\n            return arr\n        if index < 0 or index >= n - 1:\n            return None\n        arr[index + 1] += arr[index] // count\n        for i in range(index + 1, n - count):\n            arr[i + count] += arr[i] // count\n        return arr\n\n    def find_min_count(arr):\n        count = 0\n        for i in range(n - 1):\n            if arr[i] * arr[i + 1] < 0:\n                count += 1\n        return count\n\n    count = find_min_count(arr)\n    result = []\n    while count > 0:\n        result.append(\"1\")\n        arr = insert_integers(arr, 0, count)\n        count = find_min_count(arr)\n\n    return len(result)"
    },
    {
        "number": 4092,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    \n    def count_zeros(subarray):\n        return sum(1 for x in subarray if x == 0)\n    \n    def count_subsegments_with_sum_zero(subarray):\n        subsegments = []\n        for i in range(len(subarray)):\n            for j in range(i + 1, len(subarray) + 1):\n                subsegment = subarray[i:j]\n                if sum(subsegment) == 0:\n                    subsegments.append(subsegment)\n        return len(subsegments)\n    \n    def min_inserts(subarray):\n        inserts = 0\n        i = 0\n        while i < len(subarray) - 1:\n            if subarray[i] * subarray[i + 1] < 0:\n                i += 1\n            else:\n                inserts += 1\n                i += 2\n        return inserts\n    \n    if n <= 2:\n        return 0\n    \n    zeros = count_zeros(a)\n    subsegments_with_sum_zero = count_subsegments_with_sum_zero(a)\n    min_inserts_count = min_inserts(a)\n    \n    if zeros == 0 and subsegments_with_sum_zero == 0 and min_inserts_count == 0:\n        return 0\n    elif zeros == 0 and subsegments_with_sum_zero == 0:\n        return min_inserts_count\n    elif zeros == 0:\n        return subsegments_with_sum_zero\n    else:\n        return min_inserts_count\n\ndef"
    },
    {
        "number": 4092,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    def count_subsegments_with_sum_zero(array, start, end):\n        count = 0\n        for i in range(start, end):\n            for j in range(i + 1, end + 1):\n                if sum(array[i:j]) == 0:\n                    count += 1\n        return count\n\n    min_insertions = 0\n    for i in range(1, n):\n        min_insertions = max(min_insertions, count_subsegments_with_sum_zero(a, 0, i - 1))\n\n    for i in range(n - 1):\n        min_insertions = max(min_insertions, count_subsegments_with_sum_zero(a, i, n - 1))\n\n    return min_insertions\n\n\ndef"
    },
    {
        "number": 4092,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    def dfs(start, target, memo):\n        if start >= n or target < 0:\n            return False\n        if memo[start][target] is not None:\n            return memo[start][target]\n        if target == 0:\n            memo[start][target] = True\n            return True\n        memo[start][target] = dfs(start + 1, target, memo) or (target <= a[start] and dfs(start + 1, target - a[start], memo))\n        return memo[start][target]\n\n    memo = [[None] * (sum(a) + 1) for _ in range(n)]\n    min_insertions = n\n    for i in range(n):\n        for j in range(1, sum(a) + 1):\n            if dfs(i, j, memo):\n                min_insertions = min(min_insertions, n - i - 1)\n\n    return str(min_insertions)\n"
    },
    {
        "number": 4092,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_array = list(map(int, stdin.split()))\n    n = input_array[0]\n    a = input_array[1:]\n    \n    def insert_integers(a):\n        count = 0\n        for i in range(1, len(a)):\n            if a[i-1] + a[i] == 0:\n                count += 1\n                a.insert(i, -1)\n                i += 1\n        return count\n    \n    count = insert_integers(a)\n    return str(count)\n\ndef"
    },
    {
        "number": 4092,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n    modified = False\n\n    for i in range(n - 1):\n        if a[i] + a[i + 1] == 0:\n            a.insert(i + 1, 1)\n            modified = True\n\n    if not modified:\n        return \"0\"\n    else:\n        return len(a) - n\n"
    },
    {
        "number": 4092,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    count = 0\n    \n    for i in range(n - 1):\n        if a[i] * a[i + 1] < 0:\n            count += 1\n            \n    return count\n"
    },
    {
        "number": 4093,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def max_absolute_sum(a: List[int]) -> int:\n        n = len(a)\n        max_sum = 0\n        for i in range(n):\n            for j in range(i + 2, n):\n                max_sum = max(max_sum, abs(a[i] - a[j]))\n        return max_sum\n\n    t = int(stdin)\n    for _ in range(t):\n        n, m = map(int, input().split())\n        if n == 1:\n            print(0)\n        else:\n            a = [0] * n\n            for i in range(1, n - 1):\n                a[i] = (m - a[i - 1]) // (n - i)\n            a[n - 1] = m - sum(a[:n - 1])\n            print(max_absolute_sum(a))\n    return \"\".join(stdin)\n\n\ninput_str = \"\"\"5\n1 100\n2 2\n5 5\n2 1000000000\n1000000000 1000000000\"\"\"\n\noutput_str = \"\"\"0\n2\n10\n1000000000\n2000000000\"\"\"\n\nassert solution(input_str) == output_str "
    },
    {
        "number": 4093,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    t = int(input_list[0])\n    output = []\n    for i in range(1, len(input_list), 2):\n        n, m = map(int, input_list[i].split())\n        a = [0] * n\n        for j in range(n):\n            a[j] = m // n\n        if m % n != 0:\n            a[n - 1] += m % n\n        output.append(sum(abs(a[i] - a[i + 1]) for i in range(n - 1)))\n    return '\\n'.join(map(str, output))\n"
    },
    {
        "number": 4093,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def calculate_sum_of_differences(a: list) -> int:\n        return sum([abs(a[i] - a[i + 1]) for i in range(len(a) - 1)])\n\n    t = int(stdin)\n    output = []\n    for _ in range(t):\n        n, m = map(int, input().split())\n        a = [0] * n\n        for i in range(m):\n            a[i] = 1\n        output.append(calculate_sum_of_differences(a))\n\n    return '\\n'.join(map(str, output))\n"
    },
    {
        "number": 4093,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n, m = map(int, stdin.split())\n        if n == 1:\n            print(0)\n            continue\n        a = sorted([0] * (n - 1) + [m])\n        total = sum(abs(a[i] - a[i + 1]) for i in range(n - 1))\n        print(total)\n\n\ninput_data = '''5\n1 100\n2 2\n5 5\n2 1000000000\n1000000000 1000000000'''\n\nsolution(input_data) "
    },
    {
        "number": 4093,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n, m = map(int, input().split())\n        a = [1] * n\n        if m % n == 0:\n            a[0] = m // n\n        else:\n            a[0] = m // n + 1\n            m -= a[0] * (n - 1)\n            a[1] = m // (n - 1)\n        a = [x - 1 for x in a]\n        print(sum(abs(a[i] - a[i + 1]) for i in range(n - 1)))\n    return \"Case #{}: {}\".format(t, \"\\n\".join(output))\n\n\ninput_data = \"\"\"5\n1 100\n2 2\n5 5\n2 1000000000\n1000000000 1000000000\"\"\"\n\noutput = solution(input_data)\nprint(output) "
    },
    {
        "number": 4093,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    t = int(input_list[0])\n    output = []\n    for i in range(1, t+1):\n        n, m = map(int, input_list[i].split())\n        if n == 1:\n            output.append(m-1)\n        else:\n            output.append(0)\n    return '\\n'.join(map(str, output))\n\ninput_string = '''5\n1 100\n2 2\n5 5\n2 1000000000\n1000000000 1000000000'''\n\nprint(solution(input_string)) "
    },
    {
        "number": 4093,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for i in range(t):\n        n, m = map(int, stdin.readline().split())\n        if n == 1:\n            print(0)\n        elif n == 2:\n            print(abs(m - 2))\n        else:\n            # Generate all possible arrays\n            arrays = []\n            for j in range(m + 1):\n                if j % 2 == 1 and j <= m:\n                    arrays.append([j])\n                else:\n                    arrays.append([])\n            for j in range(2, n):\n                new_arrays = []\n                for k in range(len(arrays)):\n                    for l in range(m - k + 1):\n                        new_arrays.append(arrays[k] + [l])\n                arrays = new_arrays\n            # Find the maximum value of the sum of absolute differences\n            max_diff = 0\n            for array in arrays:\n                diff = sum(abs(array[i] - array[i+1]) for i in range(len(array) - 1))\n                if diff > max_diff:\n                    max_diff = diff\n            print(max_diff)\n"
    },
    {
        "number": 4093,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split(\"\\n\")[0])\n    input_data = stdin.split(\"\\n\")[1:]\n    output = []\n\n    for i in range(t):\n        n, m = map(int, input_data[i].split())\n        a = sorted([0] * (n - 1) + [m])\n        max_sum = 0\n        for j in range(1, n):\n            max_sum += abs(a[j] - a[j - 1])\n        output.append(max_sum)\n\n    return \"\\n\".join(map(str, output))\n"
    },
    {
        "number": 4093,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin)\n    output = []\n    for _ in range(test_cases):\n        n, m = map(int, stdin.readline().split())\n        a = [0] * n\n        if m % n == 0:\n            a[n // 2] = m // n\n        elif n % 2 == 0:\n            a[n // 2 - 1] = m // 2\n            a[n // 2] = m // 2 + 1\n        else:\n            a[n // 2] = m // 2\n        output.append(sum(abs(a[i] - a[i + 1]) for i in range(n - 1)))\n    return '\\n'.join(map(str, output))"
    },
    {
        "number": 4093,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    t = int(input_list[0])\n    output_list = []\n    for i in range(1, len(input_list), 2):\n        n, m = map(int, input_list[i].split())\n        a = [0] * n\n        for j in range(n - 1):\n            a[j + 1] = abs(m - sum(a[:j + 1]))\n        output_list.append(a[-1])\n    return \"\\n\".join(map(str, output_list))\n\n\ndef"
    },
    {
        "number": 4094,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    sequence = [7, 77, 777, 7777, 77777, 777777, 7777777, 77777777, 777777777]\n    for i, num in enumerate(sequence):\n        if num % K == 0:\n            return str(i)\n    return \"-1\"\n\n\ndef"
    },
    {
        "number": 4094,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    sequence = [7, 77, 777, 7777, 77777, 777777, 7777777]\n    for i, num in enumerate(sequence):\n        if num % K == 0:\n            return i\n    return -1"
    },
    {
        "number": 4094,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    seq = [7, 77, 777, 7777, 77777, 777777]\n    for i, num in enumerate(seq):\n        if num % K == 0:\n            return i\n    return -1\n\ndef"
    },
    {
        "number": 4094,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    seq = [7, 77, 777, 7777, 77777, 777777, 7777777]\n    for i, num in enumerate(seq):\n        if num % K == 0:\n            return i + 1\n    return -1\n\ndef"
    },
    {
        "number": 4094,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.split()[0])\n\n    count = 1\n    for num in [7, 77, 777, 7777, 77777, 777777, 7777777, 77777777, 777777777]:\n        if num % K == 0:\n            return count\n        count += 1\n\n    return -1\n\ninput_stdin = \"101\"\nprint(solution(input_stdin))"
    },
    {
        "number": 4094,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.strip())\n    sequence = [7, 77, 777, 7777, 77777, 777777, 7777777, 77777777, 777777777]\n    for i in range(len(sequence)):\n        if sequence[i] % K == 0:\n            return i + 1\n    return -1\n"
    },
    {
        "number": 4094,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    sequence = [7, 77, 777, 7777, 77777, 777777]\n    for i, num in enumerate(sequence):\n        if num % K == 0:\n            return str(i)\n    return \"-1\"\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4094,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    sequence = [7, 77, 777, 7777, 77777, 777777]\n    for i, num in enumerate(sequence):\n        if num % K == 0:\n            return i + 1\n    return -1"
    },
    {
        "number": 4094,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    seq = [7, 77, 777, 7777, 77777, 777777, 7777777, 77777777, 777777777]\n\n    for i, num in enumerate(seq):\n        if num % k == 0:\n            return i\n\n    return -1"
    },
    {
        "number": 4094,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    sequence = [7, 77, 777, 7777, 77777, 777777, 7777777]\n\n    for i, num in enumerate(sequence):\n        if num % K == 0:\n            return i\n\n    return -1\n"
    },
    {
        "number": 4095,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    p = list(map(int, stdin.split()[2:]))\n    \n    count = 0\n    for l in range(n):\n        for r in range(l, n):\n            if len(set(range(l+1, r+1))) == 0:\n                continue\n            if sorted(p[l:r+1])[len(p[l:r+1])//2] == m:\n                count += 1\n    \n    return str(count)\n"
    },
    {
        "number": 4095,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    p = list(map(int, input().split()))\n\n    def median(arr):\n        arr.sort()\n        if len(arr) % 2 == 0:\n            return (arr[len(arr) // 2 - 1] + arr[len(arr) // 2]) / 2\n        else:\n            return arr[len(arr) // 2]\n\n    count = 0\n    for l in range(1, n):\n        for r in range(l, n + 1):\n            if median(p[l:r + 1]) == m:\n                count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4095,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def find_median(arr: list) -> int:\n        n = len(arr)\n        if n % 2 == 0:\n            return (arr[n//2-1] + arr[n//2]) // 2\n        else:\n            return arr[n//2]\n\n    n, m = map(int, input().split())\n    p = list(map(int, input().split()))\n\n    count = 0\n    for l in range(1, n+1):\n        for r in range(l, n+1):\n            if find_median(p[l-1:r]) == m:\n                count += 1\n\n    return count\n"
    },
    {
        "number": 4095,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n, m = map(int, input_list[0].split())\n    p = list(map(int, input_list[1].split()))\n\n    count = 0\n    for i in range(1, n):\n        for j in range(i, n + 1):\n            if sorted(p[i:j])[n // 2] == m:\n                count += 1\n\n    return str(count)"
    },
    {
        "number": 4095,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    p = list(map(int, stdin.split()[2:]))\n\n    def find_median(l, r):\n        if (r - l) % 2 == 0:\n            return (p[l] + p[l + 1]) // 2\n        else:\n            return p[l + (r - l) // 2]\n\n    count = 0\n    for l in range(n):\n        for r in range(l + 1, n + 1):\n            if find_median(l, r) == m:\n                count += 1\n\n    return str(count)"
    },
    {
        "number": 4095,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    p = list(map(int, input().split()))\n    \n    count = 0\n    \n    for l in range(n):\n        for r in range(l, n):\n            median = sorted(p[l:r+1])[n//2]\n            if median == m:\n                count += 1\n    \n    return str(count)\n"
    },
    {
        "number": 4095,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    p = list(map(int, input().split()))\n\n    count = 0\n    for i in range(1, n):\n        left = p[i - 1]\n        right = p[i]\n        if left < right:\n            if left <= m <= right:\n                count += 1\n        else:\n            if min(left, right) <= m <= max(left, right):\n                count += 1\n\n    return count\n"
    },
    {
        "number": 4095,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n, m = map(int, input_list[0].split())\n    p = list(map(int, input_list[1].split()))\n\n    def find_median(l, r):\n        if (r - l) % 2 == 0:\n            return (p[l] + p[l + 1]) // 2\n        else:\n            return p[l]\n\n    count = 0\n    for l in range(n):\n        for r in range(l + 1, n + 1):\n            if find_median(l, r) == m:\n                count += 1\n\n    return str(count)\n\n\ninput_list = [\n    \"5 4\\n2 4 5 3 1\",\n    \"5 5\\n1 2 3 4 5\",\n    \"15 8\\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\"\n]\n\nfor input in input_list:\n    print(solution(input)) "
    },
    {
        "number": 4095,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    p = list(map(int, input().split()))\n    \n    count = 0\n    for l in range(n):\n        for r in range(l, n):\n            if sorted(p[l:r+1])[n//2] == m:\n                count += 1\n                \n    return count\n\n\ndef"
    },
    {
        "number": 4095,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    p = list(map(int, input().split()))\n    \n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if len(p[i:j+1]) % 2 == 1:\n                median = sorted(p[i:j+1])[(len(p[i:j+1])-1)//2]\n            else:\n                median = sorted(p[i:j+1])[(len(p[i:j+1])//2)]\n            if median == m:\n                count += 1\n    return count\n"
    },
    {
        "number": 4096,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    n, m = map(int, input_list[0].split())\n    a = list(map(int, input_list[1].split()))\n    \n    # Initialize the number of pages written on each day\n    pages_written = [0] * m\n    \n    # Check if it is possible to write the coursework\n    for i in range(n):\n        if a[i] > m:\n            return -1\n        pages_written[a[i] - 1] += 1\n    \n    # Count the number of days it takes to write the coursework\n    days = 0\n    while m > 0:\n        days += 1\n        for i in range(m - 1, -1, -1):\n            if pages_written[i] == 0:\n                continue\n            pages_written[i] -= 1\n            m -= 1\n            if m == 0:\n                break\n    \n    return days\n\ndef"
    },
    {
        "number": 4096,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n, m = map(int, input_list[0].split())\n    a = list(map(int, input_list[1].split()))\n\n    days = 1\n    coffee_taken = 0\n    pages_written = 0\n\n    while True:\n        if coffee_taken >= n or pages_written >= m:\n            if pages_written >= m:\n                break\n            else:\n                return -1\n\n        days += 1\n        coffee_taken += 1\n        pages_written += max(0, a[coffee_taken - 1] - coffee_taken + 1)\n\n    return days"
    },
    {
        "number": 4096,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    min_pages = m\n    days = 1\n    \n    while days < n:\n        if min_pages % days == 0:\n            break\n        days += 1\n    \n    if days == n:\n        return -1\n    \n    if min_pages % days == 0:\n        return days\n    else:\n        return -1"
    },
    {
        "number": 4096,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    total_caffeine = sum(a)\n    \n    if total_caffeine < m:\n        return -1\n    \n    max_caffeine = max(a)\n    max_caffeine_pos = a.index(max_caffeine)\n    \n    days = 1\n    remaining_caffeine = max_caffeine\n    remaining_pages = m\n    \n    while remaining_caffeine > 0 and remaining_pages > 0:\n        current_caffeine = a[max_caffeine_pos]\n        if remaining_caffeine - current_caffeine >= 0:\n            remaining_caffeine -= current_caffeine\n        else:\n            current_caffeine = remaining_caffeine\n            remaining_caffeine = 0\n        remaining_pages -= current_caffeine\n        days += 1\n    \n    return days if remaining_pages == 0 else -1"
    },
    {
        "number": 4096,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    days_count = 1\n    coffee_count = 0\n    remaining_pages = m\n\n    for i in range(n):\n        if a[i] <= remaining_pages:\n            coffee_count += 1\n            remaining_pages -= a[i]\n        else:\n            remaining_pages = 0\n            days_count += 1\n            coffee_count = 1\n            remaining_pages = max(0, a[i] - coffee_count)\n\n    if remaining_pages == 0:\n        return days_count\n    else:\n        return -1"
    },
    {
        "number": 4096,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[1:3])\n    a = list(map(int, stdin.split()[3:]))\n\n    if n > m:\n        return -1\n\n    dp = [0] * (m + 1)\n    dp[0] = 1\n\n    for i in range(n):\n        for j in range(m, a[i] - 1, -1):\n            dp[j] = max(dp[j], dp[j - a[i]] + 1)\n\n    if dp[m] <= 0:\n        return -1\n\n    return dp[m]\n"
    },
    {
        "number": 4096,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.splitlines()[0].split())\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    if n == 0 or m == 0:\n        return -1\n\n    coffee_left = n\n    page_written = 0\n    day = 1\n\n    while page_written < m and coffee_left > 0:\n        if coffee_left > 0:\n            page_written += min(coffee_left, m - page_written)\n            coffee_left -= min(coffee_left, m - page_written)\n            if page_written >= m:\n                break\n\n        day += 1\n\n    if page_written < m:\n        return -1\n    else:\n        return day\n\ndef"
    },
    {
        "number": 4096,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    if sum(a) < m:\n        return -1\n\n    days = 1\n    coffee_left = m\n\n    for i in range(n):\n        coffee_left -= a[i]\n        if coffee_left <= 0:\n            days += 1\n            coffee_left = m - sum(a[:i+1])\n            if coffee_left <= 0:\n                return -1\n\n    return days"
    },
    {
        "number": 4096,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    \n    dp = [m] * (n + 1)\n    \n    for i in range(1, n + 1):\n        if a[i-1] > 0:\n            dp[i] = min(dp[i], dp[i-1] + 1)\n        \n        for j in range(1, i):\n            if a[j-1] > a[i-1]:\n                dp[i] = min(dp[i], dp[j] + max(0, a[i-1] - a[j-1] + 1))\n    \n    if dp[-1] == m:\n        return -1\n    else:\n        return dp[-1]"
    },
    {
        "number": 4096,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    n, m = map(int, input_data[0].split())\n    a = list(map(int, input_data[1].split()))\n    days = 1\n\n    for i in range(n):\n        a[i] -= i\n\n    for i in range(n - 1):\n        a[i + 1] = max(a[i + 1], a[i] + i + 2)\n\n    while a[n - 1] > m:\n        days += 1\n        if days > n:\n            return \"-1\"\n\n        for i in range(n - 1):\n            a[i + 1] = max(a[i + 1], a[i] + i + 2)\n\n    return days\n\n\nstdin = \"\"\"5 8\n2 3 1 1 2\"\"\"\nprint(solution(stdin))  # Output: 4\n\nstdin = \"\"\"7 10\n1 3 4 2 1 4 2\"\"\"\nprint(solution(stdin))  # Output: 2\n\nstdin = \"\"\"5 15\n5 5 5 5 5\"\"\"\nprint(solution(stdin))  # Output: 1\n\nstdin = \"\"\"5 16\n5 5 5 5 5\"\"\"\nprint(solution(stdin))  # Output: 2\n\nstdin = \"\"\"5 26\n5 5 5 5 5\"\"\"\nprint(solution(stdin))  # Output: -1\n\nstdin = \"\"\"2 1\n2 2\"\"\"\nprint(solution(stdin))  # Output: 1\n\nstdin = \"\"\"3 1\n1 1 1\"\"\"\nprint(solution(stdin))  # Output: 1\n\nstdin = \"\"\"1 2\n1 2\"\"\"\nprint(solution(stdin))  # Output: 1\n\nstdin = \"\"\"1 3\n1 2 3\"\"\"\nprint(solution(stdin))  # Output: 1\n\nstdin = \"\"\"1 4\n1 2 3 4\"\"\"\nprint(solution(stdin))  # Output: 1\n\nstdin = \"\"\"1 5\n1 2 3 4 5\"\"\"\nprint(solution(stdin))  # Output: 1\n\nstdin = \"\"\"1 6\n1 2 3 4 5 6\"\"\"\nprint(solution(stdin))  # Output: 1\n\nstdin = \"\"\"1 7\n1 2 3 4 5 6 7\"\"\"\nprint(solution(stdin))  # Output: 1\n\nstdin = \"\"\"1 8\n1 2 3 4 5 6 7 8\"\"\"\nprint(solution(stdin))  # Output: 1\n\nstdin = \"\"\"1 9\n1 2 3 4 5 6 7 8 9\"\"\"\nprint(solution(stdin))  # Output: 1\n\nstdin = \"\"\"1 10\n1 2 3 4 5 6 7 8 9 10\"\"\"\nprint(solution(stdin))  # Output: 1\n\nstdin = \"\"\"1 11\n1 2 3 4 5 6 7 8 9 10 11\"\"\"\nprint(solution(stdin))  # Output: 1\n\nstdin = \"\"\"1 12\n1 2 3 4 5 6 7 8 9 10 11 12\"\"\"\nprint(solution(stdin))  # Output: 1\n\nstdin = \"\"\"1 13\n1 2 3 4 5 6 7 8 9 10 11 12 13\"\"\"\nprint(solution(stdin))  # Output: 1\n\nstdin = \"\"\"1 14\n1 2 3 4 5 6 7 8 9 10 11 12 13 14\"\"\"\nprint(solution(stdin))  # Output: 1\n\nstdin = \"\"\"1 15\n1"
    },
    {
        "number": 4097,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    b = list(map(int, input().split()))\n\n    if n < 2:\n        return 0\n\n    diff = b[1] - b[0]\n\n    for i in range(1, n):\n        if b[i] - b[i-1] != diff:\n            return -1\n\n    if n % 2 == 1:\n        return (n // 2) + 1\n    else:\n        return n // 2\n\n\ndef"
    },
    {
        "number": 4097,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.splitlines()\n    n = int(input_data[0])\n    b = [int(x) for x in input_data[1].split()]\n\n    if n < 2:\n        return 0\n\n    for i in range(n - 1):\n        if b[i + 1] - b[i] != b[i] - b[i - 1]:\n            return -1\n\n    return n - 1\n\ndef"
    },
    {
        "number": 4097,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = list(map(int, stdin.split()))\n\n    if n == 1 or n == 2:\n        return 0\n\n    diff = set()\n    for i in range(n - 1):\n        diff.add(abs(b[i + 1] - b[i]))\n\n    if len(diff) > 1:\n        return -1\n\n    diff = diff.pop()\n    min_changes = float('inf')\n\n    for i in range(n):\n        if b[i] == 0:\n            continue\n\n        for j in range(b[i] - 1, b[i] + 2):\n            if j == b[i]:\n                continue\n\n            if i == 0 or j != b[i] - 1:\n                continue\n\n            if j - b[i] == diff:\n                min_changes = min(min_changes, j - b[i])\n                break\n\n    return min_changes"
    },
    {
        "number": 4097,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = list(map(int, stdin.split()[1:]))\n    \n    if len(b) < 2:\n        return 0\n    \n    diff = [b[i+1] - b[i] for i in range(len(b)-1)]\n    min_diff = min(diff)\n    \n    if min_diff == 0:\n        return 0\n    \n    count = 0\n    for i in range(len(b)-1):\n        if b[i] + min_diff == b[i+1]:\n            count += 1\n    \n    return count\n"
    },
    {
        "number": 4097,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    b = list(map(int, stdin.splitlines()[1].split()))\n    diff = b[1] - b[0]\n    if diff == 0:\n        return 0\n\n    for i in range(2, n):\n        if b[i] - b[i-1] != diff:\n            return -1\n\n    min_changes = 0\n    for i in range(n-1):\n        if b[i+1] - b[i] != diff:\n            min_changes += 1\n\n    return min_changes"
    },
    {
        "number": 4097,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    b = list(map(int, stdin.splitlines()[1].split()))\n\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 0 if b[0] == b[1] - 1 else -1\n\n    diff = [b[i + 1] - b[i] for i in range(n - 1)]\n    distinct_diff = set(diff)\n\n    if len(distinct_diff) > 1:\n        return -1\n\n    target_diff = list(distinct_diff)[0]\n    count = 0\n\n    for i in range(n - 1):\n        if b[i + 1] - b[i] == target_diff:\n            count += 1\n        elif b[i] - b[i - 1] == target_diff:\n            count += 1\n            b[i] += 1\n        else:\n            return -1\n\n    return count\n\n\ndef"
    },
    {
        "number": 4097,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    sequence = list(map(int, stdin.split('\\n')[1].split()))\n    k = 0\n\n    if n < 2:\n        return 0\n\n    for i in range(n - 1):\n        if sequence[i + 1] - sequence[i] != 1:\n            k += 1\n\n    if k == 0 or k == n - 1:\n        return 0\n    else:\n        return -1\n\n\ndef"
    },
    {
        "number": 4097,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    b = list(map(int, input().split()))\n    diff = [0] * (n - 1)\n\n    for i in range(1, n):\n        diff[i - 1] = abs(b[i] - b[i - 1])\n\n    if diff[0] == 0:\n        return 0\n\n    for i in range(1, n - 1):\n        if diff[i] != diff[i - 1]:\n            return -1\n\n    count = 0\n    for i in range(n - 1):\n        if diff[i] != 0 and diff[i] == diff[i - 1]:\n            count += 1\n\n    if count == 0:\n        return 0\n\n    if diff[n - 2] == 0 and count % 2 == 0:\n        return count // 2\n    elif diff[n - 2] == 0 and count % 2 == 1:\n        return -1\n    elif count % 2 == 0:\n        return count // 2\n    else:\n        return -1\n"
    },
    {
        "number": 4097,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.splitlines()\n    n = int(input_data[0])\n    b = list(map(int, input_data[1].split()))\n    \n    if n == 1:\n        return 0\n    elif n == 2:\n        diff = abs(b[0] - b[1])\n        if diff == 0 or diff == 1:\n            return 0\n        else:\n            return -1\n    else:\n        for i in range(n-1):\n            diff = abs(b[i+1] - b[i])\n            if diff == 0:\n                return 0\n            elif diff == 1:\n                continue\n            else:\n                return -1\n        return 0\n\ndef"
    },
    {
        "number": 4097,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n = int(input_list[0])\n    b = list(map(int, input_list[1].split()))\n\n    if n == 1 or n == 2:\n        return 0\n\n    diff = b[1] - b[0]\n    for i in range(2, n):\n        if b[i] - b[i - 1] != diff:\n            return -1\n\n    return n - 1\n"
    },
    {
        "number": 4098,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n, k = map(int, input_list[0].split())\n    a = sorted(list(map(int, input_list[1].split())))\n    \n    max_students = 0\n    left, right = 0, 1\n    while right <= n:\n        if a[right] - a[left] <= 5:\n            right += 1\n        else:\n            left += 1\n        if right - left > k:\n            left += 1\n        max_students = max(max_students, right - left)\n    \n    return str(max_students)\n\n\nn = int(input())\nk = int(input())\na = list(map(int, input().split()))\n\nprint(solution(stdin=f\"{n} {k}\\n{' '.join(map(str, a))}\")) "
    },
    {
        "number": 4098,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    a.sort(reverse=True)\n\n    total = 0\n    for i in range(k, n + 1):\n        total += i\n        if a[i - 1] - a[i - k] <= 5:\n            break\n\n    return str(total)\n\n\nstdin = '''5 2\n1 2 15 15 15'''\n\nprint(solution(stdin))  # Output: 5\n\nstdin = '''6 1\n36 4 1 25 9 16'''\n\nprint(solution(stdin))  # Output: 2\n\nstdin = '''4 4\n1 10 100 1000'''\n\nprint(solution(stdin))  # Output: 4 "
    },
    {
        "number": 4098,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def is_balanced(team: list) -> bool:\n        if len(team) < 2:\n            return True\n        for i in range(len(team) - 1):\n            if abs(team[i] - team[i + 1]) > 5:\n                return False\n        return True\n\n    def count_students(teams: list) -> int:\n        return sum(len(team) for team in teams)\n\n    n, k = map(int, stdin.splitlines()[0].split())\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    if k >= n:\n        return n\n\n    a.sort()\n    teams = []\n    current_team = [a.pop(0)]\n\n    for ai in a:\n        if len(current_team) < k and (len(current_team) == 0 or abs(ai - current_team[-1]) <= 5):\n            current_team.append(ai)\n        else:\n            teams.append(current_team)\n            current_team = [ai]\n\n    teams.append(current_team)\n\n    return count_students(teams)\n"
    },
    {
        "number": 4098,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    a.sort()\n    teams = []\n    i = 0\n    while i < n:\n        team = []\n        while i < n and (not team or a[i] - a[i - 1] <= 5):\n            team.append(a[i])\n            i += 1\n        teams.append(team)\n\n    teams.sort(key=len, reverse=True)\n    for team in teams[:k]:\n        k -= 1\n        for j in range(len(team)):\n            if j % 2 == 0:\n                team[j] = team[j] - 5\n            else:\n                team[j] = team[j] + 5\n        team.sort()\n        teams.append(team)\n\n    return sum(len(team) for team in teams)\n\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\nprint(solution(f\"{n} {k}\\n{' '.join(map(str, a))}\")) "
    },
    {
        "number": 4098,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def valid(teams: list, skill: int) -> bool:\n        for team in teams:\n            for s in team:\n                if abs(skill - s) > 5:\n                    return False\n        return True\n\n    def is_balanced(teams: list) -> bool:\n        for i in range(len(teams)):\n            for j in range(i+1, len(teams)):\n                if abs(teams[i][0] - teams[j][0]) > 5:\n                    return False\n        return True\n\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    a.sort()\n    teams = [[] for _ in range(k)]\n    total_students = 0\n\n    for i, s in enumerate(a):\n        added = False\n        for j, team in enumerate(teams):\n            if len(team) < 2:\n                team.append(s)\n                added = True\n                break\n            if valid(teams, s):\n                teams[j].append(s)\n                added = True\n                break\n        if not added:\n            teams[i % k].append(s)\n        total_students += 1\n\n    if is_balanced(teams):\n        return total_students\n\n    teams.sort(key=len, reverse=True)\n    for i, team in enumerate(teams):\n        if len(team) < 2:\n            teams[i] = [a.pop(0)]\n            total_students -= 1\n            break\n        else:\n            min_diff = 10**9\n            for s in team:\n                min_diff = min(min_diff, abs(s - team[0]))\n            if min_diff > 5:\n                teams[i].pop(0)\n                total_students -= 1\n            else:\n                break\n\n    if is_balanced(teams):\n        return total_students\n\n    for i, team in enumerate(teams):\n        if len(team) < 2:\n            teams[i] = [a.pop(0)]\n            total_students -= 1\n            break\n\n    return total_students\n"
    },
    {
        "number": 4098,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n, k = map(int, input_list[0].split())\n    a = list(map(int, input_list[1].split()))\n    a.sort(reverse=True)\n\n    max_total = 0\n    for i in range(min(k, n)):\n        total = sum(a[j] for j in range(i, n, k))\n        max_total = max(max_total, total)\n\n    return str(max_total)\n\n\ndef"
    },
    {
        "number": 4098,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    a.sort(reverse=True)\n    max_students = sum(a)\n    teams = []\n\n    def is_balanced(team):\n        for i in range(len(team) - 1):\n            if abs(team[i] - team[i + 1]) > 5:\n                return False\n        return True\n\n    for i in range(1, n + 1):\n        teams.append(i)\n        max_students -= i\n        if len(teams) == k:\n            break\n\n    if len(teams) < k:\n        return str(max_students)\n\n    if is_balanced(teams):\n        return str(sum(teams))\n\n    teams.sort(reverse=True)\n\n    while not is_balanced(teams):\n        teams.pop()\n        if len(teams) == 1:\n            break\n\n    return str(sum(teams))"
    },
    {
        "number": 4098,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def balanced_teams(students, k):\n        students.sort(reverse=True)\n        total = 0\n        while students:\n            team = []\n            for _ in range(k):\n                if not students:\n                    break\n                skill, students = students[0], students[1:]\n                team.append(skill)\n                if len(team) > 1 and max(team) - min(team) > 5:\n                    team.pop()\n                    break\n            total += len(team)\n            if total >= k and len(team) > 0:\n                return total\n        return total\n\n    n, k = map(int, stdin.splitlines()[0].split())\n    a = list(map(int, stdin.splitlines()[1].split()))\n    return str(balanced_teams(a, k))\n"
    },
    {
        "number": 4098,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def calculate_diff(i: int, j: int) -> int:\n        return abs(a[i] - a[j])\n\n    def is_balanced(team: list) -> bool:\n        for i in range(len(team)):\n            for j in range(i + 1, len(team)):\n                if calculate_diff(team[i], team[j]) > 5:\n                    return False\n        return True\n\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    a.sort()\n\n    max_students = 0\n    teams = []\n\n    for i in range(n):\n        teams.append([a[i]])\n\n    for i in range(1, n):\n        for team in teams:\n            if len(team) < k and calculate_diff(team[-1], a[i]) <= 5:\n                team.append(a[i])\n                if is_balanced(team):\n                    max_students += 1\n        if max_students > 0:\n            break\n        teams.append([a[i]])\n\n    return str(max_students)\n\n\nn = int(input())\nk = int(input())\na = list(map(int, input().split()))\n\nprint(solution(str(n) + \" \" + str(k) + \" \" + \" \".join(map(str, a)))) "
    },
    {
        "number": 4098,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    a.sort()\n    ans = 0\n    i, j = 0, n - 1\n    while j - i >= k - 1:\n        diff = 5\n        while diff > 0:\n            diff = min(a[j] - a[i], diff)\n            j -= 1\n        ans += j - i + 1\n        i += 1\n    return str(ans)\n\n\ndef"
    },
    {
        "number": 4099,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M, *A = map(int, stdin.split())\n    total_points = sum(A)\n    last_subject_points = K - total_points\n    if last_subject_points < M:\n        return -1\n    else:\n        return last_subject_points\n"
    },
    {
        "number": 4099,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    N = int(input_list.pop(0))\n    K = int(input_list.pop(0))\n    M = int(input_list.pop(0))\n    A = list(map(int, input_list))\n\n    min_points = K + 1\n    total_points = sum(A)\n    average = total_points / N\n\n    if average >= M:\n        return str(min_points)\n    else:\n        return -1\n"
    },
    {
        "number": 4099,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M, *A = map(int, stdin.split())\n    total_points = sum(A)\n    if total_points + K < M:\n        return -1\n    else:\n        return M - total_points\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4099,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M, *A = map(int, stdin.split())\n    total_score = sum(A)\n    remaining_points = M - total_score\n    \n    if remaining_points <= 0:\n        return \"0\"\n    \n    for i in range(K+1):\n        if remaining_points >= i:\n            continue\n        else:\n            return str(i)\n    \n    return \"-1\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    N, K, M = map(int, input_list[0].split())\n    A_list = list(map(int, input_list[1].split()))\n\n    if sum(A_list) + N <= M:\n        return -1\n\n    total_points = sum(A_list) + N * M\n    remaining_points = total_points - sum(A_list) - (N - 1) * M\n    min_points = remaining_points / N\n\n    return int(min_points)"
    },
    {
        "number": 4099,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M, *A = map(int, stdin.split())\n    \n    total_score = sum(A) + K\n    if total_score >= M * N:\n        return str(K)\n    \n    last_subject_points = M * N - total_score\n    if last_subject_points <= K:\n        return str(last_subject_points)\n    else:\n        return \"-1\"\n\ndef"
    },
    {
        "number": 4099,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M = map(int, stdin.split()[:3])\n    A = list(map(int, stdin.split()[3:]))\n    total_points = sum(A) + 1\n    last_subject = K - total_points\n\n    if last_subject < M:\n        return -1\n    else:\n        return last_subject\n"
    },
    {
        "number": 4099,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M, *A = map(int, stdin.split())\n\n    total_sum = sum(A)\n    average_score = total_sum / (N - 1)\n\n    if average_score >= M:\n        return str(-1)\n\n    remaining_points = K - total_sum % K\n    last_subject_points = remaining_points - (remaining_points % M)\n\n    if last_subject_points > 0:\n        return str(last_subject_points)\n    else:\n        return str(-1)\n"
    },
    {
        "number": 4099,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N, K, M = map(int, stdin.split()[:3])\n    A = list(map(int, stdin.split()[3:]))\n\n    # calculate the current average score\n    current_avg = sum(A) / N\n\n    # calculate the remaining points needed to achieve the goal\n    remaining_points = M - current_avg\n\n    # check if the goal is achievable\n    if remaining_points > 0:\n        # if it is, add the remaining points to the final subject score\n        final_subject_score = A[-1] + remaining_points\n\n        # check if the final subject score is within the range\n        if final_subject_score <= K:\n            return final_subject_score\n        else:\n            return -1\n    else:\n        return -1\n"
    },
    {
        "number": 4099,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M = map(int, stdin.split()[:3])\n    A = list(map(int, stdin.split()[3:]))\n    \n    total_points = sum(A)\n    if total_points >= M * N:\n        return \"0\"\n    else:\n        final_subject_points = M * N - total_points\n        return str(final_subject_points) if final_subject_points <= K else \"-1\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q = map(int, stdin.split())\n    A = list(map(int, stdin.split()[1:Q+1]))\n\n    # Initialize players' scores\n    scores = [K] * N\n\n    # Update scores for correct answers\n    for i in range(Q):\n        for j in range(N):\n            if A[i] == j + 1:\n                scores[j] -= 1\n                break\n\n    # Determine which players survived\n    survived = [\"Yes\" if score > 0 else \"No\" for score in scores]\n\n    return \"\\n\".join(survived)\n"
    },
    {
        "number": 4100,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q = map(int, stdin.split())\n    players = [K] * N\n    correct_answers = []\n\n    for _ in range(Q):\n        line = input()\n        A_i, _, _ = line.split()\n        A_i = int(A_i)\n        correct_answers.append(A_i)\n\n    for A_i in correct_answers:\n        for i in range(N):\n            if i + 1 == A_i:\n                players[i] -= 1\n\n    survived_players = [f\"Yes\" if player >= 1 else \"No\" for player in players]\n    return \"\\n\".join(survived_players)\n"
    },
    {
        "number": 4100,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q = map(int, stdin.split())\n    answers = list(map(int, stdin.split()[1:]))\n\n    survived = [True] * N\n    for i in range(Q):\n        for j in range(N):\n            if survived[j] and j + 1 == answers[i]:\n                for k in range(N):\n                    if k != j:\n                        survived[k] = False\n\n    output = \"\\n\".join([\"Yes\" if survived[i] else \"No\" for i in range(N)])\n\n    return output\n"
    },
    {
        "number": 4100,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q, *A = list(map(int, stdin.split()))\n    scores = [K] * N\n\n    for i in range(Q):\n        for j in range(N):\n            if j + 1 == A[i]:\n                scores[j] -= 1\n\n    survived = [score > 0 for score in scores]\n\n    for i in range(N):\n        print(\"Yes\" if survived[i] else \"No\")\n"
    },
    {
        "number": 4100,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def survived(scores: List[int]) -> bool:\n        return all(score > 0 for score in scores)\n\n    N, K, Q, *A = map(int, stdin.split())\n    scores = [K] * N\n\n    for i in range(Q):\n        correct_player = A[i] - 1\n        for j in range(N):\n            if j == correct_player:\n                scores[j] -= 1\n            else:\n                scores[j] -= 1\n\n    survivors = [survived(scores[:i+1]) for i in range(N)]\n    return \"\\n\".join([\"Yes\" if survived else \"No\" for survived in survivors])\n"
    },
    {
        "number": 4100,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q, *A = list(map(int, stdin.split()))\n    scores = [K] * N\n    for i in range(Q):\n        player = A[i] - 1\n        for j in range(N):\n            if j != player:\n                scores[j] -= 1\n    survived = [score > 0 for score in scores]\n    for i in range(N):\n        print(\"Yes\" if survived[i] else \"No\")"
    },
    {
        "number": 4100,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q, *A = map(int, stdin.split())\n    scores = [K] * N\n    \n    for i in range(Q):\n        for j in range(N):\n            if A[i] == j+1:\n                scores[j] -= 1\n    \n    survivors = [score > 0 for score in scores]\n    output = '\\n'.join(['Yes' if survivor else 'No' for survivor in survivors])\n    \n    return output"
    },
    {
        "number": 4100,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def play_round(players: list, correct_answers: list) -> list:\n        for i, correct_answer in enumerate(correct_answers):\n            for j, player in enumerate(players):\n                if j == correct_answer:\n                    players[j] -= 1\n                    break\n        return [player for player in players if player > 0]\n\n    N, K, Q = map(int, stdin.split())\n    correct_answers = list(map(int, stdin.split()[1:]))\n    players = [K] * N\n    survivors = []\n\n    while len(survivors) < N:\n        players = play_round(players, correct_answers[:Q])\n        survivors = players[:]\n        correct_answers = correct_answers[Q:]\n\n    for i in range(1, N + 1):\n        if i in survivors:\n            print(\"Yes\")\n        else:\n            print(\"No\")"
    },
    {
        "number": 4100,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q, *A = map(int, stdin.split())\n    survivors = [True] * N\n    for i in range(Q):\n        A_i = A[i] - 1\n        survivors[A_i] = False\n        for j in range(N):\n            if survivors[j]:\n                survivors[j] = j != A_i\n    return '\\n'.join([\"Yes\" if survivors[i] else \"No\" for i in range(N)])\n"
    },
    {
        "number": 4100,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    N, K, Q = map(int, input_list[0].split())\n    A = list(map(int, input_list[1:]))\n\n    scores = [K] * N\n    for i in range(Q):\n        player_index = A.pop(0) - 1\n        scores[player_index] -= 1\n        for j in range(N):\n            if j != player_index and scores[j] > 0:\n                scores[j] -= 1\n\n    result = ['No'] * N\n    for i in range(N):\n        if scores[i] > 0:\n            result[i] = 'Yes'\n\n    return '\\n'.join(result)\n"
    },
    {
        "number": 4101,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def inverse_row(row: list, i: int) -> list:\n        return [1 - x for x in row]\n\n    def inverse_col(matrix: list, j: int) -> list:\n        return [[row[j] for row in matrix], inverse_row([col[j] for col in zip(*matrix)], j)]\n\n    n, m = map(int, stdin.split()[:2])\n    matrix = [list(map(int, stdin.split()[2:]))]\n\n    # check if matrix is sorted\n    sorted_matrix = matrix[0]\n    for i in range(1, n):\n        sorted_matrix.extend(matrix[i])\n    if sorted(sorted_matrix) != sorted_matrix:\n        return \"NO\"\n\n    # perform operations to sort matrix\n    operations = []\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 0:\n                operations.append((i, j))\n                matrix = inverse_col(matrix, j)\n    for i in range(n):\n        if matrix[i].count(0) == m:\n            operations.append((i, None))\n            matrix = [inverse_row(row, i) for row in matrix]\n\n    # print result\n    return \"YES\\n\" + ''.join(str(x) for x in operations) + '\\n' + ''.join(str(x) for x in matrix)"
    },
    {
        "number": 4101,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def sort_matrix(a: list, n: int, m: int) -> str:\n        def invert_row(a: list, n: int, i: int) -> None:\n            for j in range(m):\n                a[i][j] = 1 - a[i][j]\n\n        def invert_col(a: list, n: int, j: int) -> None:\n            for i in range(n):\n                a[i][j] = 1 - a[i][j]\n\n        def merge_sort(a: list, n: int, m: int) -> None:\n            if n <= 1 or m <= 1:\n                return\n\n            mid = n // 2\n            left = [[0] * m for _ in range(mid)]\n            right = [[0] * m for _ in range(n - mid)]\n\n            for i in range(mid):\n                for j in range(m):\n                    left[i][j] = a[i][j]\n\n            for i in range(n - mid):\n                for j in range(m):\n                    right[i][j] = a[i + mid][j]\n\n            merge_sort(left, mid, m)\n            merge_sort(right, n - mid, m)\n\n            i = j = k = 0\n            while i < mid and j < n - mid:\n                if left[i][k] < right[j][k]:\n                    a[k][k] = left[i][k]\n                    i += 1\n                else:\n                    a[k][k] = right[j][k]\n                    j += 1\n                k += 1\n\n            while i < mid:\n                a[k][k] = left[i][k]\n                i += 1\n                k += 1\n\n            while j < n - mid:\n                a[k][k] = right[j][k]\n                j += 1\n                k += 1\n\n        n, m = len(a), len(a[0])\n        invert_row(a, n, 0)\n        invert_col(a, n, 0)\n        invert_row(a, n, 1)\n        invert_col(a, n, 1)\n        merge_sort(a, n, m)\n\n        row = ''\n        for i in range(n):\n            row += str(int(a[i][0]))\n\n        col = ''\n        for j in range(m):\n            col += str(int(a[0][j]))\n\n        return row + '\\n' + col\n\n    n, m = map(int, stdin.split()[:2])\n    a = [[0] * m for _ in range(n)]\n    for i, row in enumerate(stdin.split('\\n')[2:]):\n        a[i] = list(map(int, row.split()))\n\n    result = sort_matrix(a, n, m)\n    if result == 'NO':\n        return 'NO\\n'\n    else:\n        row, col = result.split('\\n')\n        return 'YES\\n' + row + '\\n' + col + '\\n'\n\n\ndef"
    },
    {
        "number": 4101,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split('\\n')\n    n, m = map(int, input_lines[0].split())\n    a = [list(map(int, input_lines[i+1].split())) for i in range(n)]\n\n    def is_sorted(array):\n        return all(array[i] <= array[i+1] for i in range(len(array)-1))\n\n    def get_operations(matrix):\n        row_inversions = []\n        col_inversions = []\n        for i in range(n):\n            for j in range(m):\n                if matrix[i][j] != a[i][j]:\n                    if i == 0:\n                        row_inversions.append(j)\n                    if j == 0:\n                        col_inversions.append(i)\n        return row_inversions, col_inversions\n\n    row_inversions, col_inversions = get_operations(a)\n    if not row_inversions and not col_inversions:\n        return \"NO\"\n\n    row_inversions.sort()\n    col_inversions.sort()\n    row_inversions_string = ''.join(['1' if i in row_inversions else '0' for i in range(m)])\n    col_inversions_string = ''.join(['1' if i in col_inversions else '0' for i in range(n)])\n\n    return \"YES\\n\" + row_inversions_string + \"\\n\" + col_inversions_string\n\n\ninput_stdin = \"3 3\\n0 0 0\\n1 0 1\\n1 1 0\\n\"\nprint(solution(input_stdin))\n\ninput_stdin = \"2 2\\n1 1\\n0 1\\n\"\nprint(solution(input_stdin))\n\ninput_stdin = \"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\\n\"\nprint(solution(input_stdin)) "
    },
    {
        "number": 4101,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def invert_row(matrix: list, row_idx: int) -> None:\n        for j in range(len(matrix[0])):\n            matrix[row_idx][j] ^= 1\n\n    def invert_column(matrix: list, col_idx: int) -> None:\n        for i in range(len(matrix)):\n            matrix[i][col_idx] ^= 1\n\n    def is_sorted(matrix: list) -> bool:\n        flattened_matrix = [row[col] for row in matrix for col in range(len(matrix[0]))]\n        return all(flattened_matrix[i] <= flattened_matrix[i + 1] for i in range(len(flattened_matrix) - 1))\n\n    n, m = map(int, stdin.splitlines()[0].split())\n    matrix = [[int(x) for x in input().split()] for _ in range(n)]\n\n    if not is_sorted(matrix):\n        return \"NO\"\n\n    row_inversions = [0] * n\n    column_inversions = [0] * m\n\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 0:\n                invert_row(matrix, i)\n                row_inversions[i] ^= 1\n                invert_column(matrix, j)\n                column_inversions[j] ^= 1\n\n    return \"YES\\n\" + \"\".join(map(str, row_inversions)) + \"\\n\" + \"\".join(map(str, column_inversions))\n"
    },
    {
        "number": 4101,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def sort_matrix(matrix):\n        n, m = len(matrix), len(matrix[0])\n        for i in range(n):\n            for j in range(m):\n                if matrix[i][j] == 0:\n                    return False\n        for j in range(m):\n            col = [matrix[i][j] for i in range(n)]\n            if sorted(col, reverse=True) != col:\n                return False\n        for i in range(n):\n            row = [matrix[i][j] for j in range(m)]\n            if sorted(row) != row:\n                return False\n        return True\n\n    def invert_row(matrix, i):\n        n, m = len(matrix), len(matrix[0])\n        for j in range(m):\n            matrix[i][j] = 1 - matrix[i][j]\n\n    def invert_col(matrix, j):\n        n, m = len(matrix), len(matrix[0])\n        for i in range(n):\n            matrix[i][j] = 1 - matrix[i][j]\n\n    input_lines = stdin.splitlines()\n    n, m = map(int, input_lines.pop(0).split())\n    a = [[0] * m for _ in range(n)]\n    for i in range(n):\n        a[i] = list(map(int, input_lines.pop(0).split()))\n\n    if not sort_matrix(a):\n        return \"NO\\n\"\n\n    rows_inverted = [0] * n\n    cols_inverted = [0] * m\n\n    while True:\n        max_inversions = n * m\n        for i in range(n):\n            for j in range(m):\n                if a[i][j] == 0:\n                    inversions = sum(rows_inverted[:i]) + sum(cols_inverted[:j])\n                    max_inversions = min(max_inversions, inversions)\n        if max_inversions == 0:\n            break\n\n        for i in range(n):\n            for j in range(m):\n                if a[i][j] == 0:\n                    inversions = sum(rows_inverted[:i]) + sum(cols_inverted[:j])\n                    if inversions == max_inversions:\n                        invert_row(a, i)\n                        rows_inverted[i] = 1\n                        invert_col(a, j)\n                        cols_inverted[j] = 1\n                        break\n\n    return \"YES\\n\" + \"\".join(map(str, rows_inverted)) + \"\\n\" + \"\".join(map(str, cols_inverted)) + \"\\n\" "
    },
    {
        "number": 4101,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    n, m = map(int, input_data[0].split())\n    a = [[int(x) for x in input_data[i+1].split()] for i in range(n)]\n\n    def is_sorted(a):\n        flat_a = [x for row in a for x in row]\n        return all(flat_a[i] <= flat_a[i+1] for i in range(len(flat_a)-1))\n\n    def invert_row(a, i):\n        a[i] = [1 - x for x in a[i]]\n\n    def invert_col(a, j):\n        for i in range(n):\n            a[i][j] = 1 - a[i][j]\n\n    def is_invertible(a):\n        return all(a[i][j] == 1 - a[i][j] for i in range(n) for j in range(m))\n\n    def min_inverted_rows(a):\n        min_inverted_rows = 0\n        for i in range(n):\n            min_inverted_rows += a[i].count(0)\n        return min_inverted_rows\n\n    def min_inverted_cols(a):\n        min_inverted_cols = 0\n        for j in range(m):\n            min_inverted_cols += sum(a[i][j] for i in range(n))\n        return min_inverted_cols\n\n    def sort_matrix(a):\n        while not is_sorted(a):\n            if min_inverted_rows(a) < min_inverted_cols(a):\n                min_inverted_row = min(range(n), key=lambda i: a[i].count(0))\n                invert_row(a, min_inverted_row)\n            else:\n                min_inverted_col = min(range(m), key=lambda j: sum(a[i][j] for i in range(n)))\n                invert_col(a, min_inverted_col)\n\n    sort_matrix(a)\n\n    if not is_invertible(a):\n        return \"NO\"\n\n    row_inversions = [str(int(x)) for x in (min_inverted_rows(a) < min_inverted_cols(a))]\n    col_inversions = [str(int(x)) for x in (min_inverted_cols(a) < min_inverted_rows(a))]\n\n    return \"YES\\n\" + ''.join(row_inversions) + '\\n' + ''.join(col_inversions)"
    },
    {
        "number": 4101,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    n, m = map(int, input_list[0].split())\n    matrix = [[int(x) for x in input_list[i+1].split()] for i in range(n)]\n\n    def is_sorted(arr):\n        return all(arr[i] <= arr[i+1] for i in range(len(arr)-1))\n\n    def sort_matrix(matrix, rows, cols):\n        for i in range(n):\n            row = [matrix[i][j] for j in range(m)]\n            if not is_sorted(row):\n                row_inverted = [1 - x for x in row]\n                if not is_sorted(row_inverted):\n                    return False, None, None\n                matrix[i] = row_inverted\n                rows[i] = 1 - rows[i]\n\n        for j in range(m):\n            col = [matrix[i][j] for i in range(n)]\n            if not is_sorted(col):\n                col_inverted = [1 - x for x in col]\n                if not is_sorted(col_inverted):\n                    return False, None, None\n                for i in range(n):\n                    matrix[i][j] = col_inverted[i]\n                cols[j] = 1 - cols[j]\n\n        return True, rows, cols\n\n    rows = [0] * n\n    cols = [0] * m\n\n    while not all(rows[i] == 0 and cols[j] == 0 for i in range(n) for j in range(m)):\n        sorted_matrix, rows, cols = sort_matrix(matrix, rows, cols)\n        if not sorted_matrix:\n            return \"NO\\n\" + \"0\" * n + \"\\n\" + \"0\" * m\n\n    return \"YES\\n\" + \"\".join(map(str, rows)) + \"\\n\" + \"\".join(map(str, cols))\n"
    },
    {
        "number": 4101,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    a = [[int(x) for x in input().split()] for _ in range(n)]\n\n    def is_sorted(arr):\n        return all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1))\n\n    def sort_matrix(a, r, c):\n        if not r and not c:\n            return a\n        i, j = next((i, j) for i in range(n) if sum(a[i]) > 0, None), next((j for j in range(m) if sum(x[j] for x in a) > 0), None)\n        if i is None or j is None:\n            return None\n        a_inv = [[1 - x for x in row] for row in a]\n        a_inv[i] = [1 - x for x in a[i]]\n        for k in range(m):\n            a_inv[i][k] = 1 - a_inv[i][k]\n        r[i] = '1'\n        c[j] = '1'\n        a[i] = a_inv[i]\n        return sort_matrix(a, r, c)\n\n    sorted_matrix = sort_matrix(a, [], [0] * m)\n    if sorted_matrix is None:\n        return \"NO\\n\\n\"\n    else:\n        return \"YES\\n\" + ''.join(sorted_matrix[0]) + '\\n' + ''.join(sorted_matrix[1]) + '\\n'\n"
    },
    {
        "number": 4101,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def invert_row(matrix: list, i: int) -> None:\n        for j in range(len(matrix[i])):\n            matrix[i][j] ^= 1\n\n    def invert_column(matrix: list, j: int) -> None:\n        for i in range(len(matrix)):\n            matrix[i][j] ^= 1\n\n    lines = stdin.split(\"\\n\")\n    n, m = map(int, lines[0].split())\n    a = [[int(x) for x in lines[i + 1].split()] for i in range(n)]\n    row_inversions = [0] * n\n    column_inversions = [0] * m\n\n    def sort_matrix():\n        sorted_matrix = sorted(a, key=lambda x: x)\n        for i in range(n):\n            if sorted_matrix[i] != a[i]:\n                row_inversions[i] = 1\n\n        for j in range(m):\n            sorted_column = sorted([row[j] for row in sorted_matrix])\n            for i in range(n):\n                if sorted_column[i] != a[i][j]:\n                    column_inversions[j] = 1\n\n    sort_matrix()\n\n    if \"NO\" in stdin:\n        return \"NO\"\n\n    result = []\n    for i in range(n):\n        result.append(\"1\" if row_inversions[i] else \"0\")\n    for j in range(m):\n        result.append(\"1\" if column_inversions[j] else \"0\")\n\n    return \"YES\\n\" + \"\".join(result)\n"
    },
    {
        "number": 4101,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    a = [list(map(int, stdin.split()[2:])) for _ in range(n)]\n    \n    sorted_matrix = [[0] * m for _ in range(n)]\n    row_inversions = [0] * n\n    col_inversions = [0] * m\n    \n    def sort_matrix(matrix, row_inversions, col_inversions):\n        for i in range(n):\n            for j in range(m):\n                sorted_matrix[i][j] = matrix[i][j]\n        \n        for i in range(n):\n            row_inversions[i] = 0\n            col_inversions[i] = 0\n        \n        for j in range(m):\n            col_inversions[j] = 0\n            for i in range(n):\n                if sorted_matrix[i][j] == 0:\n                    col_inversions[j] += 1\n        \n        for i in range(n):\n            for j in range(m):\n                if sorted_matrix[i][j] == 1:\n                    row_inversions[i] += 1\n                    col_inversions[j] -= 1\n        \n        return row_inversions, col_inversions\n    \n    row_inversions, col_inversions = sort_matrix(a, row_inversions, col_inversions)\n    \n    if sorted_matrix != sorted(sorted_matrix):\n        return \"NO\"\n    \n    result = \"\"\n    for i in range(n):\n        result += str(int(row_inversions[i]))\n    \n    for j in range(m):\n        result += str(int(col_inversions[j]))\n    \n    return \"YES\\n\" + result\n"
    },
    {
        "number": 4102,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # check if the string has an even number of digits\n    return \"Yes\" if len(stdin) % 2 == 0 else \"No\""
    },
    {
        "number": 4102,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Convert the input string to a set to remove duplicates and then count the length\n    count = len(set(stdin))\n\n    # Check if the count is less than the length of the string\n    if count < len(stdin):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4102,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    digits = stdin.strip()\n    if len(digits) != 10:\n        return \"No\"\n    if digits[0] == \"1\" and digits[1] == \"2\" and digits[2] == \"3\" and digits[3] == \"4\" and digits[4] == \"5\" and digits[5] == \"6\" and digits[6] == \"7\" and digits[7] == \"8\" and digits[8] == \"9\" and digits[9] == \"0\":\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4102,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.count('1') % 2 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ndef"
    },
    {
        "number": 4102,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass"
    },
    {
        "number": 4102,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.count('1') % 2 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4102,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    digits = set(stdin)\n    return \"Yes\" if len(digits) == len(stdin) else \"No\""
    },
    {
        "number": 4102,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def has_adjacent_prime(n: int) -> bool:\n        n = str(n)\n        for i in range(len(n) - 1):\n            if is_prime(int(n[i:i+2])):\n                return True\n        return False\n\n    n = int(stdin)\n    if is_prime(n) or has_adjacent_prime(n):\n        return \"Yes\"\n    else:\n        return \"No\" "
    },
    {
        "number": 4102,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def has_repeated_digits(num: str) -> bool:\n        seen = set()\n        for digit in num:\n            if digit in seen:\n                return True\n            seen.add(digit)\n        return False\n\n    return \"Yes\" if has_repeated_digits(stdin) else \"No\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Convert the input string to a list of integers\n    nums = [int(digit) for digit in stdin]\n    \n    # Check if the sum of the digits is divisible by 3\n    if sum(nums) % 3 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.splitlines()[0].split())\n    s = list(map(int, stdin.splitlines()[1].split()))\n\n    max_segments = 0\n    battery_used = 0\n    accumulator_used = 0\n    for i in range(1, n):\n        if s[i] == 1:\n            if battery_used < b:\n                battery_used += 1\n                max_segments += 1\n            elif accumulator_used < a:\n                accumulator_used += 1\n                max_segments += 1\n\n    if battery_used < b and accumulator_used < a:\n        max_segments += 1\n\n    return str(max_segments)"
    },
    {
        "number": 4103,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, input().split())\n    s = list(map(int, input().split()))\n\n    segments_with_accumulator = []\n    segments_with_battery = []\n\n    max_segments = 0\n\n    for i in range(1, n + 1):\n        if s[i - 1] == 0:\n            if segments_with_accumulator:\n                max_segments = max(max_segments, i - segments_with_accumulator[-1])\n            segments_with_accumulator.append(i)\n            a = min(a + 1, b)\n        else:\n            if a > 0:\n                segments_with_battery.append(i)\n                b -= 1\n            elif segments_with_accumulator:\n                max_segments = max(max_segments, i - segments_with_accumulator[-1])\n            segments_with_accumulator.append(i)\n            a = min(a + 1, b)\n\n    if a > 0:\n        max_segments = max(max_segments, n - segments_with_accumulator[-1] + 1)\n\n    return max_segments\n"
    },
    {
        "number": 4103,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, input().split())\n    s = list(map(int, input().split()))\n    \n    max_segments = 0\n    accumulator_charge = 0\n    battery_charge = b\n    \n    for i in range(n):\n        if s[i] == 1 and battery_charge > 0:\n            accumulator_charge += 1\n            battery_charge -= 1\n            max_segments += 1\n        elif accumulator_charge > 0:\n            accumulator_charge -= 1\n            max_segments += 1\n    \n    return max_segments"
    },
    {
        "number": 4103,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n\n    accumulator_used = 0\n    battery_used = 0\n    i = 0\n\n    while i < n:\n        if s[i] and b:\n            b -= 1\n            accumulator_used += 1\n            a += 1\n        else:\n            battery_used += 1\n            b -= 1\n            a -= 1\n        i += 1\n\n    max_segments = max(accumulator_used, battery_used)\n\n    return str(max_segments)\n"
    },
    {
        "number": 4103,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, input().split())\n    s = list(map(int, input().split()))\n\n    # Initialize the current charge of the battery and accumulator\n    battery_charge = b\n    accumulator_charge = a\n\n    # Initialize the maximum number of segments the robot can pass\n    max_segments = 0\n\n    for i in range(n):\n        # Check if the current segment is exposed to sunlight\n        if s[i] == 1:\n            # The robot can only use the accumulator if the battery is not fully charged\n            if battery_charge == 0:\n                # The robot can only pass the current segment if the accumulator has charge\n                if accumulator_charge > 0:\n                    # Update the accumulator charge\n                    accumulator_charge -= 1\n                    # Update the maximum number of segments\n                    max_segments += 1\n            # The robot can use the battery to pass the current segment\n            else:\n                # Update the battery charge\n                battery_charge -= 1\n                # Update the maximum number of segments\n                max_segments += 1\n        # The current segment is not exposed to sunlight\n        else:\n            # The robot can only use the accumulator to pass the current segment\n            if accumulator_charge > 0:\n                # Update the accumulator charge\n                accumulator_charge -= 1\n                # Update the maximum number of segments\n                max_segments += 1\n\n    # Print the maximum number of segments the robot can pass\n    return max_segments\n"
    },
    {
        "number": 4103,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, input().split())\n    s = list(map(int, input().split()))\n    \n    max_segments = 0\n    battery_charge = b\n    accumulator_charge = a\n    \n    for i in range(n):\n        if s[i] == 1:\n            if accumulator_charge > 0:\n                accumulator_charge -= 1\n                battery_charge += 1\n                max_segments += 1\n            else:\n                battery_charge -= 1\n                max_segments += 1\n        else:\n            battery_charge -= 1\n            accumulator_charge -= 1\n            max_segments += 1\n    \n    return max_segments\n"
    },
    {
        "number": 4103,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split()[:3])\n    s = list(map(int, stdin.split()[3:]))\n\n    def energy_used(i: int, j: int) -> int:\n        if s[j - 1] == 1:\n            return 1\n        else:\n            return 0\n\n    def move_battery(i: int, j: int) -> bool:\n        if s[j - 1] == 1 and b > 0:\n            b -= 1\n            a += 1\n            return True\n        else:\n            return False\n\n    def move_accumulator(i: int, j: int) -> bool:\n        if a > 0:\n            a -= 1\n            return True\n        else:\n            return False\n\n    max_segments = 0\n    i = 1\n    while i <= n:\n        if move_accumulator(i, n):\n            max_segments += 1\n            i += 1\n        elif move_battery(i, n):\n            max_segments += 1\n            i += 1\n        else:\n            break\n\n    return str(max_segments)\n"
    },
    {
        "number": 4103,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, input().split())\n    s = list(map(int, input().split()))\n\n    max_segments = 0\n    for i in range(n):\n        if s[i] == 1:\n            if b > 0:\n                b -= 1\n                if i < n - 1 and s[i+1] == 1:\n                    a += 1\n            else:\n                max_segments = i\n                break\n        else:\n            if a > 0:\n                a -= 1\n\n    max_segments = n if max_segments == 0 else max_segments\n    print(max_segments)\n"
    },
    {
        "number": 4103,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def can_go_to_next_segment(battery_capacity, accumulator_capacity):\n        return battery_capacity > 0 and accumulator_capacity < accumulator_capacity_max\n\n    n, b, a = map(int, stdin.splitlines()[0].split())\n    s = list(map(int, stdin.splitlines()[1].split()))\n\n    accumulator_capacity_max = a\n    accumulator_charge = 0\n    battery_capacity = b\n\n    max_segments = 0\n    current_segment = 0\n\n    while current_segment < n and can_go_to_next_segment(battery_capacity, accumulator_charge):\n        max_segments += 1\n        next_segment = current_segment + 1\n\n        if s[next_segment] == 1 and can_go_to_next_segment(battery_capacity - 1, accumulator_charge + 1):\n            battery_capacity -= 1\n            accumulator_charge += 1\n            current_segment = next_segment\n        else:\n            battery_capacity -= 1\n            current_segment = next_segment\n\n    return str(max_segments)"
    },
    {
        "number": 4103,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, input().split())\n    s = list(map(int, input().split()))\n\n    battery_used = 0\n    accumulator_used = 0\n    max_segments = 0\n\n    for i in range(1, n):\n        if s[i - 1] == 1:\n            if battery_used > 0:\n                battery_used -= 1\n                accumulator_used += 1\n            else:\n                accumulator_used += 1\n        else:\n            if accumulator_used > 0:\n                accumulator_used -= 1\n                battery_used += 1\n            else:\n                battery_used += 1\n\n        if battery_used > b or accumulator_used > a:\n            break\n        else:\n            max_segments += 1\n\n    return str(max_segments)"
    },
    {
        "number": 4104,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return eval(stdin)\n"
    },
    {
        "number": 4104,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def evaluate(expression: str) -> int:\n        stack = []\n        for char in expression:\n            if char.isdigit():\n                stack.append(int(char))\n            elif char == '+':\n                stack.append(stack.pop() + stack.pop())\n            elif char == '-':\n                stack.append(-stack.pop() + stack.pop())\n            elif char == '*':\n                stack.append(stack.pop() * stack.pop())\n            elif char == '/':\n                top = stack.pop()\n                stack.append(int(stack.pop() / top))\n        return stack[0]\n\n    expression = stdin.strip()\n    try:\n        result = evaluate(expression)\n    except ZeroDivisionError:\n        return \"ZeroDivisionError: division by zero\"\n    return str(result) "
    },
    {
        "number": 4104,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    nums = stdin.split('+')\n    result = 0\n\n    for num in nums:\n        result += int(num)\n\n    return str(result)\n\n\ndef"
    },
    {
        "number": 4104,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    try:\n        result = eval(stdin)\n    except:\n        result = \"Error\"\n    return str(result) "
    },
    {
        "number": 4104,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    for i, char in enumerate(stdin):\n        if char in ('+', '-'):\n            if char == '+':\n                result += int(stdin[i-1])\n            else:\n                result -= int(stdin[i-1])\n    return str(result) "
    },
    {
        "number": 4104,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    expression = stdin.split(\" \")\n    result = 0\n    for i, op in enumerate(expression):\n        if op == \"+\":\n            result += int(expression[i+1])\n        elif op == \"-\":\n            result -= int(expression[i+1])\n    return str(result) "
    },
    {
        "number": 4104,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def calculate(expression: str) -> int:\n        stack = []\n        for char in expression:\n            if char.isdigit():\n                stack.append(int(char))\n            elif char == '+':\n                stack.append(stack.pop() + stack.pop())\n            elif char == '-':\n                stack.append(stack.pop() - stack.pop())\n        return stack.pop()\n\n    expression = stdin.strip()\n    try:\n        result = calculate(expression)\n        return str(result)\n    except:\n        return \"invalid expression\" "
    },
    {
        "number": 4104,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    operators = set(\"+-\")\n    operands = [int(x) for x in stdin.split() if x in operators]\n    result = 0\n    for i, op in enumerate(operators):\n        if op in operands:\n            result += operands[i+1] * operands[i]\n    return result "
    },
    {
        "number": 4104,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Initialize variables\n    result = 0\n    sign = 1\n    \n    # Iterate through the input expression\n    for i, char in enumerate(stdin):\n        if char in '+-':\n            # Add the previous operand to the result and multiply with the sign\n            result += sign * int(stdin[i-1])\n            \n            # Reset the sign for the next operand\n            sign = 1 if char == '+' else -1\n        elif char == '0':\n            # Add the previous operand to the result and multiply with the sign\n            result += sign * int(stdin[i-1])\n            \n            # Multiply the result with 256 and add it to the result\n            result += sign * 256 * int(stdin[i-2])\n            \n            # Reset the sign for the next operand\n            sign = 1 if char == '+' else -1\n            \n        elif char == '1':\n            # Add the previous operand to the result and multiply with the sign\n            result += sign * int(stdin[i-1])\n            \n            # Multiply the result with 256 and add it to the result\n            result += sign * 256 * int(stdin[i-2])\n            \n            # Multiply the result with 256 and add it to the result\n            result += sign * 256 * 256 * int(stdin[i-3])\n            \n            # Reset the sign for the next operand\n            sign = 1 if char == '+' else -1\n            \n        else:\n            raise ValueError(\"Invalid input character:\", char)\n    \n    # Add the last operand to the result and multiply with the sign\n    result += sign * int(stdin[len(stdin)-1])\n    \n    return result\n"
    },
    {
        "number": 4104,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    expression = stdin.split()\n    result = 0\n    for i in range(len(expression)):\n        if expression[i] == '+':\n            result += 256\n        elif expression[i] == '-':\n            result -= 256\n        else:\n            result += int(expression[i])\n    return result\n"
    },
    {
        "number": 4105,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    for i in range(n):\n        if i % 2 == 0:\n            b_i, g_i = 1, 2\n        else:\n            b_i, g_i = k, 1\n        if i + 1 < n:\n            b_i_next, g_i_next = k - (b_i + g_i), 1 - (b_i + g_i)\n            if b_i_next == b_i or g_i_next == g_i:\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n\n    if n % 2 == 0:\n        return \"NO\"\n\n    def is_valid(colors: list) -> bool:\n        if len(colors) != n:\n            return False\n\n        for i in range(n):\n            if colors[i][0] == colors[(i + 1) % n][0] and colors[i][1] == colors[(i + 1) % n][1]:\n                return False\n\n        for i in range(1, n):\n            if colors[i][0] == colors[i - 1][0]:\n                return False\n\n            if colors[i][1] == colors[i - 1][1]:\n                return False\n\n        return True\n\n    def color_combinations(colors: set, max_colors: int) -> list:\n        if len(colors) == 1:\n            return list(colors)\n\n        result = []\n        for i in range(1, max_colors + 1):\n            sub_colors = set(filter(lambda x: x[0] != i and x[1] != i, colors))\n            sub_result = color_combinations(sub_colors, max_colors)\n            if sub_result:\n                for sub_color in sub_result:\n                    result.append([i, *sub_color])\n\n        return result\n\n    colors = color_combinations(set(range(1, k + 1)), k)\n    colors = [colors[i] for i in range(n - 1, -1, -2)]\n\n    if not is_valid(colors):\n        return \"NO\"\n\n    return \"YES\\n\" + \"\\n\".join(map(lambda x: \" \".join(map(str, x)), colors))"
    },
    {
        "number": 4105,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n\n    def is_valid_color_choosing(colors):\n        for i in range(n - 1):\n            if colors[i] == colors[i + 1]:\n                return False\n        return True\n\n    def is_valid_pair_color(b, g):\n        return 1 <= b <= k and 1 <= g <= k and b != g\n\n    def is_valid_color_pair(pair):\n        return is_valid_pair_color(pair[0], pair[1])\n\n    def is_valid_color_choosing_rule(colors):\n        return all(is_valid_pair_color(colors[i - 1][0], colors[i - 1][1]) != is_valid_pair_color(colors[i][0], colors[i][1]) for i in range(1, n))\n\n    def is_valid_color_choosing_rule_2(colors):\n        return all(colors[i - 1][0] != colors[i][0] and colors[i - 1][1] != colors[i][1] for i in range(1, n))\n\n    if n * k < 2:\n        return \"NO\"\n\n    colors = [(randint(1, k), randint(1, k)) for _ in range(n)]\n\n    while not (is_valid_color_choosing(colors) and is_valid_color_choosing_rule(colors) and is_valid_color_choosing_rule_2(colors)):\n        colors = [(randint(1, k), randint(1, k)) for _ in range(n)]\n\n    return \"YES\\n\" + \"\\n\".join(map(lambda c: \" \".join(map(str, c)), colors))\n\ndef"
    },
    {
        "number": 4105,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    color_pairs = set()\n    for i in range(1, n+1):\n        b = i + 1\n        g = i + n\n        if b > k or g > k:\n            return \"NO\"\n        if (b, g) in color_pairs or (g, b) in color_pairs:\n            return \"NO\"\n        color_pairs.add((b, g))\n    return \"YES\\n\" + \"\\n\".join([f\"{b} {g}\" for b, g in color_pairs])\n\n\ninput_data = \"4 3\\n10 4\\n13 4\"\nfor stdin in input_data.split(\"\\n\"):\n    print(solution(stdin)) "
    },
    {
        "number": 4105,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < 2 or k < 2 or n > 2 * 10**5 or k > 2 * 10**5:\n        return \"NO\"\n\n    def is_valid_pair(b: int, g: int) -> bool:\n        return 1 <= b <= k and 1 <= g <= k and b != g and b != g\n\n    def is_valid_color_choosing() -> bool:\n        b = [1] * n\n        g = [1] * n\n\n        for i in range(n - 1):\n            if b[i] == b[i + 1] or g[i] == g[i + 1]:\n                return False\n\n        for i in range(n - 1):\n            if b[i] == g[i + 1] or b[i + 1] == g[i]:\n                return False\n\n        return True\n\n    if not is_valid_color_choosing():\n        return \"NO\"\n\n    for i in range(n):\n        b = i\n        g = (i + 1) % n\n        while not is_valid_pair(b, g):\n            b = (b + 1) % k\n            g = (g + 1) % k\n        print(b, g)\n\n    return \"YES\""
    },
    {
        "number": 4105,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split()\n    n, k = int(input_data[0]), int(input_data[1])\n\n    if n < 2 or k < 2:\n        return \"NO\"\n\n    color_pairs = set()\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            for l in range(1, k + 1):\n                if (i, j, l) not in color_pairs and (i, l) not in color_pairs and (l, j) not in color_pairs:\n                    color_pairs.add((i, j, l))\n                    if len(color_pairs) == n:\n                        return \"YES\\n\" + \"\\n\".join([f\"{p[1]} {p[2]}\" for p in color_pairs])\n\n    return \"NO\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    color_pairs = []\n\n    for i in range(1, n + 1):\n        b_i, g_i = map(int, input().split())\n        color_pairs.append((b_i, g_i))\n\n    # Check for rule 2\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            if color_pairs[i - 1] == color_pairs[j - 1]:\n                return \"NO\"\n\n    # Check for rule 3\n    for i in range(1, n + 1):\n        if color_pairs[i - 1][0] == color_pairs[i - 1][1]:\n            return \"NO\"\n\n    # Check for rule 4\n    for i in range(1, n - 1):\n        if color_pairs[i - 1][0] == color_pairs[i + 1][0] or color_pairs[i - 1][1] == color_pairs[i + 1][1]:\n            return \"NO\"\n\n    return \"YES\" + \"\\n\" + \"\\n\".join(str(pair) for pair in color_pairs)"
    },
    {
        "number": 4105,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    \n    if n <= k:\n        for i in range(1, n+1):\n            print(i, (i+1) % n + 1)\n        return \"YES\"\n    \n    def is_valid(b, g):\n        for i in range(n-1):\n            if b[i] == b[i+1] or g[i] == g[i+1] or (b[i] == g[i] and b[i+1] == g[i+1]):\n                return False\n        return True\n    \n    for i in range(1, k+1):\n        for j in range(1, k+1):\n            b = [i]*n\n            g = [j]*n\n            if is_valid(b, g):\n                print(\"YES\")\n                for p in range(n):\n                    print(b[p], g[p])\n                return\n    print(\"NO\")\n"
    },
    {
        "number": 4105,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    pairs = [(i + 1, (i + 1) % n + 1) for i in range(n)]\n    valid = True\n\n    for i, pair in enumerate(pairs):\n        man, woman = pair\n        if man % 2 == 0:\n            man_color = (i + 1) % k + 1\n            woman_color = k - man_color + 1\n        else:\n            woman_color = (i + 1) % k + 1\n            man_color = k - woman_color + 1\n\n        if man_color == woman_color:\n            valid = False\n            break\n\n        for j, other_pair in enumerate(pairs):\n            if j == i:\n                continue\n\n            other_man, other_woman = other_pair\n            if (man == other_man or man == other_woman) and (woman == other_man or woman == other_woman):\n                valid = False\n                break\n\n        if not valid:\n            break\n\n    if valid:\n        return \"YES\\n\" + \"\\n\".join([f\"{man_color} {woman_color}\" for man_color, woman_color in pairs])\n    else:\n        return \"NO\""
    },
    {
        "number": 4105,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    pairs = [[] for _ in range(n)]\n    used_colors = []\n\n    def is_valid():\n        for i in range(n - 1):\n            if pairs[i][0] == pairs[i + 1][0] and pairs[i][1] == pairs[i + 1][1]:\n                return False\n            if pairs[i][0] == pairs[i + 1][1] and pairs[i][1] == pairs[i + 1][0]:\n                return False\n        return True\n\n    def is_valid_color(b, g):\n        if b in used_colors or g in used_colors:\n            return False\n        used_colors.append(b)\n        used_colors.append(g)\n        return True\n\n    if n > k * 2:\n        return \"NO\"\n\n    for i in range(n):\n        for j in range(k):\n            b, g = map(int, input().split())\n            if is_valid_color(b, g):\n                pairs[i] = [b, g]\n                if i == n - 1 and is_valid():\n                    return \"YES\\n\" + \"\\n\".join(str(p[0]) + \" \" + str(p[1]) for p in pairs)\n                break\n        else:\n            return \"NO\"\n\n    return \"YES\\n\" + \"\\n\".join(str(p[0]) + \" \" + str(p[1]) for p in pairs) "
    },
    {
        "number": 4106,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(a, b, x, k, n):\n        return a + x * (b - a) >= k * b\n\n    def max_sum(a):\n        return sum(sorted(a, reverse=True)[:x])\n\n    n, k, x = map(int, stdin.split()[:3])\n    a = list(map(int, stdin.split()[3:]))\n\n    a.sort()\n\n    for i in range(n - x + 1):\n        if is_valid(a[i], a[i + x - 1], x, k, n):\n            return max_sum(a[i:i + x])\n\n    return -1"
    },
    {
        "number": 4106,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def max_sum(arr: list, k: int) -> int:\n        n = len(arr)\n        dp = [[0] * (n + 1) for _ in range(k + 1)]\n        for i in range(1, k + 1):\n            dp[i][i] = arr[i - 1]\n\n        for length in range(k + 1, n + 1):\n            for i in range(1, length):\n                dp[i][length] = max(dp[i - 1][length], dp[i][length - i] + arr[length - 1])\n\n        return dp[1][n]\n\n    def check_valid(arr: list, k: int, x: int) -> bool:\n        for i in range(k, len(arr), k):\n            if arr[i] == 0:\n                return False\n\n        count = 0\n        for i in range(k, len(arr) + 1, k):\n            count += 1\n            if count >= x:\n                return True\n\n        return False\n\n    def max_repost(arr: list, k: int, x: int) -> int:\n        n = len(arr)\n        dp = [0] * n\n        dp[0] = arr[0]\n\n        for i in range(1, n):\n            if arr[i] == 0:\n                continue\n            dp[i] = dp[i - 1] + arr[i]\n\n        for i in range(1, n - k + 1):\n            if dp[i + k - 1] == 0:\n                continue\n            for j in range(i, i + k):\n                if arr[j] == 0:\n                    continue\n                dp[i - 1] = max(dp[i - 1], dp[j - 1] + arr[j])\n\n        return dp[n - k - 1]\n\n    n, k, x = map(int, stdin.split()[:3])\n    arr = list(map(int, stdin.split()[3:]))\n\n    if check_valid(arr, k, x):\n        return max_sum(arr, k)\n    else:\n        return -1\n"
    },
    {
        "number": 4106,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def get_max_sum(arr: list, k: int) -> int:\n        if len(arr) < k:\n            return 0\n        max_sum = sum(arr[:k])\n        curr_sum = max_sum\n        for i in range(k, len(arr)):\n            curr_sum += arr[i] - arr[i-k]\n            max_sum = max(max_sum, curr_sum)\n        return max_sum\n\n    n, k, x = map(int, stdin.split()[:3])\n    a = list(map(int, stdin.split()[3:]))\n\n    if k == 1:\n        return sum(a)\n\n    max_sum = 0\n    for i in range(x, n - (k - 1), 1):\n        max_sum = max(max_sum, get_max_sum(a[i-x:i+1], k))\n\n    return max_sum if max_sum > 0 else -1\n"
    },
    {
        "number": 4106,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split()[:3])\n    a = list(map(int, stdin.split()[3:]))\n\n    if k * (x - 1) + 1 > n:\n        return -1\n\n    if x > n // 2:\n        return -1\n\n    reposts = []\n    i = 0\n    while len(reposts) < x and i < n:\n        reposts.append(a[i])\n        i += k\n\n    if len(reposts) < x:\n        return -1\n\n    max_sum = sum(reposts)\n    max_sum += sum(a[k:])\n\n    return max_sum\n\n\ndef"
    },
    {
        "number": 4106,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    first_line = input_list[0].split()\n    n, k, x = int(first_line[0]), int(first_line[1]), int(first_line[2])\n    a = list(map(int, input_list[1].split()))\n\n    def is_valid(selected):\n        for i in range(k, n):\n            if i not in selected and (i - k) in selected:\n                return False\n        return True\n\n    def find_max_sum(selected):\n        total_sum = sum(a[i] for i in selected)\n        return total_sum\n\n    valid_combinations = []\n\n    for i in range(n):\n        if i < k:\n            valid_combinations.append([i])\n        else:\n            for j in range(i - k, i):\n                if is_valid(set(valid_combinations[-1]) | {j}):\n                    valid_combinations.append(valid_combinations[-1] + [j])\n\n    if not valid_combinations:\n        return '-1'\n\n    max_sum = max(find_max_sum(combination) for combination in valid_combinations)\n    return str(max_sum)\n\n\ninput_list = [\n    \"5 2 3\\n\",\n    \"5 1 3 10 1\\n\",\n    \"6 1 5\\n\",\n    \"10 30 30 70 10 10\\n\",\n    \"4 3 1\\n\",\n    \"1 100 1 1\"\n]\n\nfor input_str in input_list:\n    print(solution(input_str))"
    },
    {
        "number": 4106,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def get_max_sum(arr, k, x):\n        if k == 1:\n            return sum(arr[:x])\n\n        if x == 1:\n            return max(arr[:k])\n\n        max_sum = float('-inf')\n        for i in range(x):\n            max_sum = max(max_sum, arr[i] + get_max_sum(arr[i+1:], k-1, x-i-1))\n\n        return max_sum\n\n    n, k, x = map(int, stdin.readline().split())\n    arr = list(map(int, stdin.readline().split()))\n\n    max_sum = get_max_sum(arr, k, x)\n    return str(max_sum) if max_sum != float('-inf') else '-1'\n"
    },
    {
        "number": 4106,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    if k > n:\n        return -1\n\n    # Calculate the maximum sum of values of reposted pictures\n    reposted_pictures = [0] * n\n    max_sum = 0\n\n    for i in range(k, n):\n        # Check if the segment of k consecutive pictures has at least one picture reposted by Vova\n        if any(reposted_pictures[i - k:i]):\n            max_sum += a[i]\n            reposted_pictures[i] = 1\n\n    # Check if all the required pictures are reposted\n    if sum(reposted_pictures) < x:\n        return -1\n\n    return max_sum\n\ndef"
    },
    {
        "number": 4106,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n, k, x = map(int, input_list[0].split())\n    a = list(map(int, input_list[1].split()))\n\n    if k > n:\n        return \"-1\"\n\n    dp = [0] * n\n\n    for i in range(n):\n        dp[i] = a[i]\n\n    for i in range(n - k + 1):\n        max_val = -1\n        for j in range(i, i + k):\n            max_val = max(max_val, dp[j])\n        for j in range(i + k, n):\n            dp[j] = max(dp[j], max_val + a[j])\n\n    return str(max(dp[-x:]))\n"
    },
    {
        "number": 4106,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_values = stdin.split('\\n')\n    n, k, x = map(int, input_values[0].split())\n    a = list(map(int, input_values[1].split()))\n\n    if k > 1:\n        return -1\n\n    def count_reposts(index, visited):\n        if visited[index]:\n            return 0\n        visited[index] = True\n        if index == 0 or a[index] - a[index - 1] <= k:\n            return 1 + count_reposts(index + 1, visited)\n        return count_reposts(index + 1, visited)\n\n    count = 0\n    for i in range(x):\n        visited = [False] * n\n        count += count_reposts(i, visited)\n\n    if count == x:\n        return sum(a[:x])\n    else:\n        return -1\n"
    },
    {
        "number": 4106,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    from itertools import accumulate\n    n, k, x = map(int, stdin.split()[:3])\n    a = list(map(int, stdin.split()[3:]))\n\n    if x > n:\n        return \"-1\"\n\n    dp = [0] * (n + 1)\n    dp[1] = a[0]\n\n    for i in range(2, n + 1):\n        dp[i] = max(dp[i - 1] + a[i - 1], dp[i - k])\n\n    if dp[n] == 0:\n        return \"-1\"\n\n    reposted = [0] * n\n    reposted[0] = 1\n\n    for i in range(1, n):\n        if dp[i + k - 1] - dp[i] > dp[n] - dp[i + k - 1]:\n            reposted[i] = 1\n\n    return sum(reposted[:x])\n"
    },
    {
        "number": 4107,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    rooms_with_routers = [int(x) for x in stdin.split()[2]]\n    \n    total_cost = 0\n    for i in range(len(rooms_with_routers)):\n        if rooms_with_routers[i]:\n            total_cost += i\n            for j in range(max(1, i - k), min(n, i + k) + 1):\n                total_cost += j\n                \n    return total_cost\n\ndef"
    },
    {
        "number": 4107,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    spots = list(map(int, input().split()))\n\n    total_cost = 0\n    for i in range(n):\n        if spots[i]:\n            total_cost += i\n        else:\n            for j in range(max(1, i - k), min(n, i + k) + 1):\n                total_cost += j\n\n    return total_cost\n\n\ninput_stdin = '''5 2\n00100\n12 6\n000010000100'''\n\noutput_stdin = '''3\n21\n4\n15'''\n\n\nfor inp, out in zip(input_stdin.split('\\n'), output_stdin.split('\\n')):\n    result = solution(inp)\n    if str(result) != out:\n        print(f\"Input: {inp}\\nOutput: {out}\\nGot: {result}\")\n        break\nelse:\n    print(\"All test cases passed!\") "
    },
    {
        "number": 4107,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    spots = list(map(int, stdin.split()[2]))\n\n    min_cost = sum(spots)\n    max_cost = n * (n + 1) // 2\n\n    for spot in spots:\n        min_cost = min(min_cost, spot * (k * 2 + 1))\n\n    return min_cost\n\n\ndef"
    },
    {
        "number": 4107,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    spots = input()\n\n    cost = [0] * n\n\n    for i in range(n):\n        if spots[i] == '1':\n            cost[i] = i + k\n\n    min_cost = float('inf')\n    for i in range(n):\n        if cost[i] > 0:\n            min_cost = min(min_cost, cost[i])\n            for j in range(max(1, i - k), min(n, i + k) + 1):\n                if cost[j] > 0:\n                    min_cost = min(min_cost, cost[j])\n\n    return str(min_cost)\n"
    },
    {
        "number": 4107,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    rooms_with_router = list(map(int, input()))\n\n    # Calculate the cost of placing a router in each room\n    router_cost = [i for i in range(1, n + 1)]\n    for i in range(n):\n        if rooms_with_router[i] == 1:\n            router_cost[i] = 0\n\n    # Calculate the minimum cost of connecting all rooms\n    min_cost = sum(router_cost)\n    for i in range(n):\n        if router_cost[i] != 0:\n            min_cost += min(sum(router_cost[max(0, i - k):i]), sum(router_cost[i + 1:min(n, i + k) + 1]))\n\n    return str(min_cost)\n\n\ndef"
    },
    {
        "number": 4107,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    spots = input().strip()\n    total_cost = 0\n    for i in range(1, n + 1):\n        spot = spots[i - 1]\n        if spot == '1':\n            if i <= n - k:\n                total_cost += i\n            else:\n                total_cost += n - i + 1\n        else:\n            total_cost += i\n    return str(total_cost)\n\nn, k = map(int, input().split())\nspots = input().strip()\ntotal_cost = 0\nfor i in range(1, n + 1):\n    spot = spots[i - 1]\n    if spot == '1':\n        if i <= n - k:\n            total_cost += i\n        else:\n            total_cost += n - i + 1\n    else:\n        total_cost += i\nprint(str(total_cost)) "
    },
    {
        "number": 4107,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    spots = input()\n    total_cost = 0\n    for i in range(n):\n        if spots[i] == '1':\n            total_cost += i\n            max_range = min(n, i + k)\n            min_range = max(1, i - k)\n            total_cost += sum(range(min_range, max_range + 1))\n    return total_cost\n\n\ninput_data = \"\"\"5 2\n00100\n12 6\n000010000100\"\"\"\noutput_data = \"\"\"3\n21\n4\n15\"\"\"\n\n\ninput_lines = input_data.split('\\n')\noutput_lines = output_data.split('\\n')\n\n\nfor i, line in enumerate(input_lines):\n    result = solution(line)\n    if result != output_lines[i]:\n        print(f\"Test Case #{i+1} FAILED\\nExpected: {output_lines[i]}\\nReceived: {result}\")\n    else:\n        print(f\"Test Case #{i+1} PASSED\")\n"
    },
    {
        "number": 4107,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    rooms = list(map(int, input().split()))\n\n    if 1 <= k <= 2 * 10 ** 5:\n        min_cost = float('inf')\n        for i in range(len(rooms)):\n            if rooms[i] == 1:\n                min_cost = min(min_cost, i + 1)\n                continue\n            start = max(1, i - k)\n            end = min(n, i + k)\n            for j in range(start, end + 1):\n                if rooms[j] == 0:\n                    break\n            else:\n                min_cost = min(min_cost, sum(range(i + 1, j + 1)))\n        return min_cost\n    else:\n        return \"Invalid input. Please check the range of k.\"\n"
    },
    {
        "number": 4107,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    rooms = input()\n    routers = [i for i, room in enumerate(rooms) if room == '1']\n\n    def cost(room):\n        return room\n\n    def connect(room):\n        return min(routers) + sum(range(max(0, room - k), min(n, room + k) + 1))\n\n    total_cost = sum(map(cost, range(1, n + 1))) + sum(map(connect, routers))\n\n    return str(total_cost)"
    },
    {
        "number": 4107,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_router_possible(room: int, spot_count: int, k: int) -> bool:\n        return max(1, room - k) <= spot_count <= min(n, room + k)\n\n    def connect_rooms(rooms: List[int], k: int) -> int:\n        total_cost = 0\n        for room in rooms:\n            total_cost += room\n        return total_cost\n\n    n, k = map(int, stdin.split()[:2])\n    spot_list = list(map(int, stdin.split()[2]))\n    routers = [i for i, spot in enumerate(spot_list) if spot]\n\n    min_cost = float('inf')\n    for router_count in range(len(routers) + 1):\n        for router_combination in combinations(routers, router_count):\n            spot_count = sum(spot_list) - sum(routers) + len(routers) - len(router_combination)\n            if spot_count < n:\n                continue\n            total_cost = 0\n            for i, spot in enumerate(spot_list):\n                if spot:\n                    if is_router_possible(i, spot_count, k):\n                        total_cost += i\n                else:\n                    total_cost += i\n            for router in router_combination:\n                total_cost += router\n            min_cost = min(min_cost, total_cost)\n\n    return str(min_cost)"
    },
    {
        "number": 4108,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    return \"Yes\" if S == T else \"No\"\n\n\ndef"
    },
    {
        "number": 4108,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    if len(S) != len(T):\n        return \"No\"\n\n    freq_S = {}\n    freq_T = {}\n    for char in S:\n        freq_S[char] = freq_S.get(char, 0) + 1\n    for char in T:\n        freq_T[char] = freq_T.get(char, 0) + 1\n\n    for char, count in freq_S.items():\n        if char not in freq_T or freq_T[char] != count:\n            return \"No\"\n\n    return \"Yes\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    if len(S) != len(T):\n        return \"No\"\n\n    if S == T:\n        return \"Yes\"\n\n    for i in range(len(S)):\n        if S[i] != T[i]:\n            c1, c2 = S[i], T[i]\n            break\n    else:\n        return \"No\"\n\n    S = S.replace(c1, c2)\n    S = S.replace(c2, c1)\n\n    if S == T:\n        return \"Yes\"\n\n    return \"No\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split(\"\\n\")\n    if len(S) != len(T):\n        return \"No\"\n    if S == T:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split('\\n')\n\n    for c in S:\n        if c in T:\n            S = S.replace(c, 'a')\n            T = T.replace('a', c)\n        else:\n            return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4108,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split('\\n')\n    S = list(S)\n    T = list(T)\n\n    # Determine the frequency of each letter in S and T\n    freq_S = [0] * 26\n    freq_T = [0] * 26\n\n    for char in S:\n        freq_S[ord(char) - ord('a')] += 1\n\n    for char in T:\n        freq_T[ord(char) - ord('a')] += 1\n\n    # Check if S and T can be made equal by performing the operation\n    for i in range(26):\n        if freq_S[i] != freq_T[i]:\n            return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4108,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split('\\n')\n\n    # Create a frequency table for each string\n    freq_S = {}\n    freq_T = {}\n\n    for c in S:\n        freq_S[c] = freq_S.get(c, 0) + 1\n\n    for c in T:\n        freq_T[c] = freq_T.get(c, 0) + 1\n\n    # Iterate through the frequency table and check if they are equal\n    for c in freq_S:\n        if c not in freq_T or freq_S[c] != freq_T[c]:\n            return \"No\"\n\n    return \"Yes\"\n\n\ndef"
    },
    {
        "number": 4108,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    S, T = map(str.lower, stdin.split())\n    if len(S) != len(T):\n        return \"No\"\n\n    def replace_chars(s: str, c1: str, c2: str) -> str:\n        return ''.join(c2 if c == c1 else c1 for c in s)\n\n    while S != T:\n        if len(set(S)) == len(set(T)):\n            return \"No\"\n        c1, c2 = S[0], S[1]\n        S = replace_chars(S, c1, c2)\n        T = replace_chars(T, c1, c2)\n\n    return \"Yes\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split('\\n')\n    if S == T:\n        return \"Yes\"\n\n    # Create a frequency table of characters in S\n    freq_table_S = {}\n    for char in S:\n        freq_table_S[char] = freq_table_S.get(char, 0) + 1\n\n    # Create a frequency table of characters in T\n    freq_table_T = {}\n    for char in T:\n        freq_table_T[char] = freq_table_T.get(char, 0) + 1\n\n    # Check if the frequency tables are equal\n    if freq_table_S == freq_table_T:\n        return \"Yes\"\n\n    # Otherwise, return No\n    return \"No\""
    },
    {
        "number": 4108,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.splitlines()\n\n    for c_1, c_2 in zip(S, T):\n        if c_1 != c_2:\n            return \"No\"\n\n    return \"Yes\"\n"
    }
]