[
    {
        "number": 4000,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    n = int(stdin.split('\\n')[0])\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n\n    # Helper function to check if a path exists between two vertices\n    def has_path(u, v):\n        visited = [False] * (n + 1)\n        queue = [u]\n        while queue:\n            current = queue.pop(0)\n            if current == v:\n                return True\n            visited[current] = True\n            for neighbor in range(1, n + 1):\n                if not visited[neighbor] and (current, neighbor) in edges:\n                    queue.append(neighbor)\n        return False\n\n    # Find the vertices with the maximum number of edges\n    max_edges = 0\n    result = []\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            if has_path(i, j):\n                current_edges = len(set(map(tuple, edges)))\n                if current_edges > max_edges:\n                    max_edges = current_edges\n                    result = [i, j]\n\n    # Print the output\n    return f\"{max_edges}\\n{result[0]} {result[1]}\""
    },
    {
        "number": 4000,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    \n    def dfs(u: int, v: int, visited: set, cycle: set) -> int:\n        visited.add(u)\n        cycle.add(u)\n        count = 1\n        for neighbor in (w for w in range(1, n + 1) if (u, w) in edges or (w, u) in edges):\n            if neighbor == v:\n                return count\n            if neighbor not in visited:\n                count += dfs(neighbor, v, visited, cycle)\n            elif neighbor in cycle:\n                cycle.remove(neighbor)\n                return count + 1\n        cycle.remove(u)\n        return count\n    \n    a, b, c = None, None, None\n    max_count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            visited = set()\n            cycle = set()\n            count = dfs(i + 1, j + 1, visited, cycle)\n            if count > max_count:\n                max_count = count\n                a, b, c = i + 1, j + 1, i + 1\n            count = dfs(j + 1, i + 1, visited, cycle)\n            if count > max_count:\n                max_count = count\n                a, b, c = i + 1, j + 1, j + 1\n    \n    return f\"{max_count}\\n{a} {b} {c}\""
    },
    {
        "number": 4000,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def find_max_edges(tree):\n        def find_paths(tree, start, end, visited, path, paths):\n            if start == end:\n                paths.append(path)\n                return\n            for next_node in tree[start]:\n                if next_node not in visited:\n                    visited.add(next_node)\n                    find_paths(tree, next_node, end, visited, path + [next_node], paths)\n                    visited.remove(next_node)\n\n        n = len(tree)\n        paths_a_to_b = []\n        paths_b_to_c = []\n        paths_a_to_c = []\n\n        find_paths(tree, 0, 1, {0}, [0], paths_a_to_b)\n        find_paths(tree, 1, 2, {1}, [1], paths_a_to_b)\n        find_paths(tree, 2, 3, {2}, [2], paths_a_to_b)\n        find_paths(tree, 3, 4, {3}, [3], paths_a_to_b)\n        find_paths(tree, 4, 5, {4}, [4], paths_a_to_b)\n\n        find_paths(tree, 1, 2, {1}, [1], paths_b_to_c)\n        find_paths(tree, 2, 3, {2}, [2], paths_b_to_c)\n        find_paths(tree, 3, 4, {3}, [3], paths_b_to_c)\n        find_paths(tree, 4, 5, {4}, [4], paths_b_to_c)\n        find_paths(tree, 4, 6, {4}, [4], paths_b_to_c)\n\n        find_paths(tree, 0, 1, {0}, [0], paths_a_to_c)\n        find_paths(tree, 0, 2, {0}, [0], paths_a_to_c)\n        find_paths(tree, 0, 3, {0}, [0], paths_a_to_c)\n        find_paths(tree, 0, 4, {0}, [0], paths_a_to_c)\n        find_paths(tree, 0, 5, {0}, [0], paths_a_to_c)\n\n        max_edges = 0\n        for path in paths_a_to_b:\n            max_edges = max(max_edges, len(path) - 1)\n        for path in paths_b_to_c:\n            max_edges = max(max_edges, len(path) - 1)\n        for path in paths_a_to_c:\n            max_edges = max(max_edges, len(path) - 1)\n\n        return max_edges\n\n    n = int(stdin.readline())\n    tree = [set() for _ in range(n)]\n\n    for _ in range(n - 1):\n        x, y = map(int, stdin.readline().split())\n        tree[x - 1].add(y - 1)\n        tree[y - 1].add(x - 1)\n\n    max_edges = find_max_edges(tree)\n    a, b, c = 0, 1, 2\n    print(max_edges)\n    print(a + 1, b + 1, c + 1)"
    },
    {
        "number": 4000,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def find_edge(u, v, edges):\n        for edge in edges:\n            if set(edge) == set((u, v)):\n                return edge\n        return None\n\n    def find_paths(u, v, edges):\n        visited = set()\n        paths = []\n        stack = [(u, [])]\n\n        while stack:\n            node, path = stack.pop()\n            visited.add(node)\n\n            for neighbor in (v, u):\n                edge = find_edge(node, neighbor, edges)\n                if edge and neighbor not in path and neighbor not in visited:\n                    new_path = path + [edge]\n                    if neighbor == v:\n                        paths.append(new_path)\n                    else:\n                        stack.append((neighbor, new_path))\n\n        return paths\n\n    def max_edges(a, b, c, edges):\n        paths = set()\n        for path in find_paths(a, b, edges):\n            paths.update(path)\n        for path in find_paths(b, c, edges):\n            paths.update(path)\n        for path in find_paths(a, c, edges):\n            paths.update(path)\n\n        return len(paths)\n\n    n = int(stdin.readline())\n    edges = []\n    for _ in range(n - 1):\n        u, v = map(int, stdin.readline().split())\n        edges.append((u, v))\n\n    max_count = 0\n    for a in range(1, n + 1):\n        for b in range(a + 1, n + 1):\n            for c in range(b + 1, n + 1):\n                count = max_edges(a, b, c, edges)\n                if count > max_count:\n                    max_count = count\n                    result = (a, b, c)\n\n    return str(max_count) + \"\\n\" + \" \".join(map(str, result))"
    },
    {
        "number": 4000,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n\n    def dfs(u: int, visited: set, count: int, res: int) -> int:\n        visited.add(u)\n        for v in range(1, n + 1):\n            if v not in visited and (u, v) in edges:\n                count = dfs(v, visited, count + 1, res)\n                res = max(res, count)\n        return res\n\n    a = 1\n    b = max(range(1, n + 1), key=lambda x: dfs(x, {a}, 0, 0))\n    c = max(range(1, n + 1), key=lambda x: dfs(x, {b}, 0, 0))\n\n    count = max(dfs(a, {b, c}, 0, 0), dfs(b, {a, c}, 0, 0), dfs(c, {a, b}, 0, 0))\n\n    return f\"{count}\\n{a} {b} {c}\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    graph = [[] for _ in range(n)]\n    \n    for line in stdin.split('\\n')[1:]:\n        if line:\n            a, b = map(int, line.split())\n            graph[a-1].append(b-1)\n            graph[b-1].append(a-1)\n    \n    def count_edges_between(a, b, visited, count):\n        visited[a] = True\n        for neighbor in graph[a]:\n            if not visited[neighbor]:\n                count_edges_between(neighbor, b, visited, count)\n            elif neighbor != b:\n                count += 1\n        visited[a] = False\n    \n    a, b, c = 0, 0, 0\n    max_count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                visited = [False] * n\n                count = 0\n                count_edges_between(i, j, visited, count)\n                count_edges_between(j, k, visited, count)\n                count_edges_between(i, k, visited, count)\n                if count > max_count:\n                    max_count = count\n                    a, b, c = i+1, j+1, k+1\n    \n    return str(max_count) + \"\\n\" + str(a) + \" \" + str(b) + \" \" + str(c)"
    },
    {
        "number": 4000,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    n = int(stdin.readline().strip())\n    edges = []\n    for i in range(n - 1):\n        a, b = map(int, stdin.readline().strip().split())\n        edges.append((a, b))\n\n    # Find the three vertices\n    def find_three_vertices(edges: list) -> tuple:\n        vertices = set()\n        for edge in edges:\n            vertices.add(edge[0])\n            vertices.add(edge[1])\n        vertices = list(vertices)\n        for i in range(len(vertices) - 2):\n            for j in range(i + 1, len(vertices) - 1):\n                for k in range(j + 1, len(vertices)):\n                    if (vertices[i], vertices[j]) not in edges and (vertices[i], vertices[k]) not in edges and (vertices[j], vertices[k]) not in edges:\n                        return (vertices[i], vertices[j], vertices[k])\n        return None\n\n    # Count the number of edges in the paths\n    def count_edges(edges: list, a: int, b: int, c: int) -> int:\n        paths_count = 0\n        for edge in edges:\n            if (edge[0] == a and edge[1] == b) or (edge[0] == b and edge[1] == a):\n                paths_count += 1\n            elif (edge[0] == a and edge[1] == c) or (edge[0] == c and edge[1] == a):\n                paths_count += 1\n            elif (edge[0] == b and edge[1] == c) or (edge[0] == c and edge[1] == b):\n                paths_count += 1\n        return paths_count\n\n    three_vertices = find_three_vertices(edges)\n    if three_vertices is None:\n        return \"Impossible\"\n    a, b, c = three_vertices\n    max_edges = count_edges(edges, a, b, c)\n    result = f\"{max_edges}\\n{a} {b} {c}\"\n    return result"
    },
    {
        "number": 4000,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(graph, start, visited):\n        visited.add(start)\n        for neighbor in graph[start]:\n            if neighbor not in visited:\n                dfs(graph, neighbor, visited)\n    \n    def count_edges_on_paths(graph, a, b, c, path_a_b, path_b_c, path_a_c):\n        count = 0\n        for edge in path_a_b:\n            if edge in graph[a]:\n                count += 1\n        for edge in path_b_c:\n            if edge in graph[b]:\n                count += 1\n        for edge in path_a_c:\n            if edge in graph[a]:\n                count += 1\n        return count\n    \n    n = int(stdin.split(\"\\n\")[0])\n    graph = [set() for _ in range(n + 1)]\n    \n    for i in range(1, n + 1):\n        graph[i].add(i)\n    \n    for edge in stdin.split(\"\\n\")[1:]:\n        a, b = map(int, edge.split())\n        graph[a].add(b)\n        graph[b].add(a)\n    \n    max_count = 0\n    result = None\n    \n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            for k in range(j + 1, n + 1):\n                visited_a = set()\n                visited_b = set()\n                visited_c = set()\n                \n                dfs(graph, i, visited_a)\n                dfs(graph, j, visited_b)\n                dfs(graph, k, visited_c)\n                \n                path_a_b = set()\n                path_b_c = set()\n                path_a_c = set()\n                \n                for a in visited_a:\n                    for b in visited_b:\n                        path_a_b.add((min(a, b), max(a, b)))\n                \n                for b in visited_b:\n                    for c in visited_c:\n                        path_b_c.add((min(b, c), max(b, c)))\n                \n                for a in visited_a:\n                    for c in visited_c:\n                        path_a_c.add((min(a, c), max(a, c)))\n                \n                count = count_edges_on_paths(graph, i, j, k, path_a_b, path_b_c, path_a_c)\n                \n                if count > max_count:\n                    max_count = count\n                    result = (i, j, k)\n    \n    return f\"{max_count}\\n{result}\""
    },
    {
        "number": 4000,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    edges = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n\n    def dfs(start: int, visited: set) -> int:\n        visited.add(start)\n        count = 1\n        for end in range(1, n + 1):\n            if end not in visited and (start, end) in edges:\n                count += dfs(end, visited)\n        return count\n\n    max_edges = 0\n    max_vertices = []\n    for a in range(1, n + 1):\n        for b in range(1, n + 1):\n            if a != b:\n                for c in range(1, n + 1):\n                    if c not in (a, b) and (a, c) in edges and (b, c) in edges:\n                        visited = set()\n                        count_a_to_b = dfs(a, visited)\n                        count_b_to_c = dfs(b, visited)\n                        count_a_to_c = dfs(c, visited)\n                        count_edges = count_a_to_b + count_b_to_c + count_a_to_c - 3\n                        if count_edges > max_edges:\n                            max_edges = count_edges\n                            max_vertices = [a, b, c]\n\n    return f\"{max_edges}\\n{max_vertices[0]} {max_vertices[1]} {max_vertices[2]}\""
    },
    {
        "number": 4000,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    edges = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    max_edges = 0\n    result = []\n\n    def dfs(u, visited, parent, count):\n        nonlocal max_edges, result\n        visited[u] = True\n        for v, w in edges:\n            if not visited[v]:\n                dfs(v, visited, u, count + w)\n                if max_edges < count:\n                    max_edges = count\n                    result = [u, v]\n            elif v != parent:\n                count += w\n\n    for i in range(1, n + 1):\n        visited = [False] * (n + 1)\n        dfs(i, visited, -1, 0)\n\n    a, b = result\n    result = []\n    max_edges = 0\n    for i in range(1, n + 1):\n        visited = [False] * (n + 1)\n        dfs(i, visited, -1, 0)\n        if i not in result and max_edges < count:\n            max_edges = count\n            result = [i]\n\n    c = result[0]\n\n    return str(max_edges) + \"\\n\" + \" \".join(str(x) for x in [a, b, c])"
    },
    {
        "number": 4001,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    divisors = list(map(int, stdin.splitlines()[1].split()))\n\n    divisors_set = set(divisors)\n    x_divisors = [d for d in divisors_set if divisors.count(d) % 2 == 1]\n    y_divisors = [d for d in divisors_set if divisors.count(d) % 2 == 0]\n\n    x = 1\n    for d in x_divisors:\n        x *= d\n\n    y = 1\n    for d in y_divisors:\n        y *= d\n\n    return f\"{x} {y}\""
    },
    {
        "number": 4001,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    divisors = stdin.splitlines()[1].split()\n    x_divisors = []\n    y_divisors = []\n    \n    for divisor in divisors:\n        if divisor not in x_divisors:\n            x_divisors.append(divisor)\n        if divisor not in y_divisors:\n            y_divisors.append(divisor)\n    \n    x = 1\n    for i in range(len(x_divisors)):\n        x *= int(x_divisors[i])\n    \n    y = 1\n    for i in range(len(y_divisors)):\n        y *= int(y_divisors[i])\n    \n    return f\"{x} {y}\""
    },
    {
        "number": 4001,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    divisors = list(map(int, stdin.splitlines()[1].split()))\n\n    def restore_numbers(divisors):\n        divisors = sorted(divisors)\n        x_divisors = []\n        y_divisors = []\n        for i in range(len(divisors)):\n            if i % 2 == 0:\n                x_divisors.append(divisors[i])\n            else:\n                y_divisors.append(divisors[i])\n        x = 1\n        y = 1\n        for divisor in x_divisors:\n            x *= divisor\n        for divisor in y_divisors:\n            y *= divisor\n        return x, y\n\n    x, y = restore_numbers(divisors)\n    return f\"{x} {y}\""
    },
    {
        "number": 4001,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    divisors = list(map(int, stdin.readline().strip().split()))\n    x_divisors = []\n    y_divisors = []\n\n    for divisor in divisors:\n        if divisor not in x_divisors:\n            x_divisors.append(divisor)\n        elif divisor not in y_divisors:\n            y_divisors.append(divisor)\n\n    x = 1\n    y = 1\n    for divisor in x_divisors:\n        x *= divisor\n\n    for divisor in y_divisors:\n        y *= divisor\n\n    return f\"{x} {y}\"\n\ninput_data = \"\"\"10\n10 2 8 1 2 4 1 20 4 5\"\"\"\n\nprint(solution(input_data)) "
    },
    {
        "number": 4001,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, divisors = stdin.split('\\n')\n    n = int(n)\n    divisors = list(map(int, divisors.split()))\n    x_divisors = []\n    y_divisors = []\n\n    for i in range(0, len(divisors), 2):\n        if divisors[i] == divisors[i + 1]:\n            x_divisors.append(divisors[i])\n            y_divisors.append(divisors[i + 1])\n\n    x = 1\n    y = 1\n\n    for divisor in x_divisors:\n        x *= divisor\n\n    for divisor in y_divisors:\n        y *= divisor\n\n    return f\"{x} {y}\""
    },
    {
        "number": 4001,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    divisors = list(map(int, stdin.readline().strip().split()))\n\n    divisors_count = {}\n    for d in divisors:\n        divisors_count[d] = divisors_count.get(d, 0) + 1\n\n    x = y = 1\n    for i in range(2, 10000):\n        if i not in divisors_count:\n            continue\n\n        x_divisors_count = y_divisors_count = divisors_count.copy()\n        x_divisors_count[i] -= 1\n        y_divisors_count[i] -= 1\n\n        for j in range(i + 1, 10000):\n            if j not in y_divisors_count:\n                continue\n\n            y_divisors_count[j] -= 1\n            x_divisors_count[j] -= 1\n\n            if all(v == 0 for v in x_divisors_count.values()) and all(v == 0 for v in y_divisors_count.values()):\n                return f\"{x} {y}\"\n\n            y_divisors_count[j] += 1\n        x_divisors_count[i] += 1\n\n    return \"No solution found\""
    },
    {
        "number": 4001,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    divisors = stdin.readline().strip().split()\n    divisors = list(map(int, divisors))\n    divisors_set = set(divisors)\n\n    def find_pair(divisor: int) -> tuple:\n        for d in divisors_set:\n            if divisor * d in divisors_set:\n                return (divisor, d)\n        return None\n\n    x, y = 1, 1\n    for divisor in divisors_set:\n        pair = find_pair(divisor)\n        if pair:\n            x *= pair[0]\n            y *= pair[1]\n            divisors_set.remove(pair[0])\n            divisors_set.remove(pair[1])\n\n    return f\"{x} {y}\""
    },
    {
        "number": 4001,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    divisors = [int(x) for x in stdin.splitlines()[1].split()]\n    x_divisors = []\n    y_divisors = []\n\n    for divisor in divisors:\n        if divisor not in x_divisors:\n            x_divisors.append(divisor)\n        if divisor not in y_divisors:\n            y_divisors.append(divisor)\n\n    x = 1\n    for divisor in x_divisors:\n        x *= divisor\n\n    y = 1\n    for divisor in y_divisors:\n        y *= divisor\n\n    return f\"{x} {y}\"\n\n\ndef"
    },
    {
        "number": 4001,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def merge_divisors(x, y):\n        divisors = sorted(list(set(x + y)))\n        return \" \".join(str(d) for d in divisors)\n\n    def get_divisors(n):\n        divisors = []\n        for i in range(1, n + 1):\n            if n % i == 0:\n                divisors.append(i)\n        return divisors\n\n    input_lines = stdin.split('\\n')\n    n = int(input_lines[0])\n    divisors = [int(d) for d in input_lines[1].split()]\n\n    x_divisors = []\n    y_divisors = []\n\n    for div in divisors:\n        if div % 2 == 0:\n            x_divisors.append(div)\n            y_divisors.append(div)\n        else:\n            if div % 2 == 0:\n                x_divisors.append(div)\n            else:\n                y_divisors.append(div)\n\n    x = merge_divisors(x_divisors, y_divisors)\n    y = merge_divisors(y_divisors, x_divisors)\n\n    return f\"{x} {y}\""
    },
    {
        "number": 4001,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    divisors = list(map(int, stdin.readline().strip().split()))\n\n    # Find the x and y values that correspond to the given list of divisors\n    x = 1\n    y = 1\n    for div in divisors:\n        x *= div\n        y *= div\n\n    # Print the x and y values\n    return f\"{x} {y}\""
    },
    {
        "number": 4002,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[:3])\n    a = [list(map(int, line.split())) for line in stdin.split('\\n')[1:n+1]]\n    \n    def max_sum_divisible_by_k(a, k):\n        max_sum = 0\n        for row in a:\n            row.sort(reverse=True)\n            for i in range(m//2):\n                max_sum += row.pop(0)\n            if max_sum % k != 0:\n                max_sum -= max_sum % k\n        return max_sum\n    \n    max_sum = max_sum_divisible_by_k(a, k)\n    return str(max_sum)"
    },
    {
        "number": 4002,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[0:3])\n    matrix = [list(map(int, stdin.split()[i:i+m])) for i in range(1, n*m+1, m)]\n\n    def max_sum_divisible_by_k(matrix: List[List[int]]) -> int:\n        n = len(matrix)\n        m = len(matrix[0])\n        k = abs(k)\n        max_sum = 0\n\n        for i in range(n):\n            num_choices = math.floor(m / 2)\n            row_choices = []\n\n            for j in range(m):\n                if num_choices > 0:\n                    row_choices.append(j)\n                    num_choices -= 1\n\n            row_choices = sorted(row_choices, key=lambda x: -matrix[i][x])\n\n            row_sum = sum(matrix[i][j] for j in row_choices[:math.floor(m / 2)])\n            if row_sum % k == 0:\n                max_sum += row_sum\n            else:\n                max_sum += (row_sum // k + 1) * k\n\n        return max_sum\n\n    return str(max_sum_divisible_by_k(matrix))"
    },
    {
        "number": 4002,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[:3])\n    a = [list(map(int, stdin.split()[3:3+m])) for _ in range(n)]\n    max_sum = 0\n\n    for i in range(n):\n        row_sum = 0\n        row = sorted(a[i], reverse=True)\n        for j in range(len(row) // 2):\n            row_sum += row[j]\n        row_sum += row[len(row) // 2] if len(row) % 2 == 1 else 0\n        max_sum = max(max_sum, row_sum)\n\n    return str(max_sum % k)\n"
    },
    {
        "number": 4002,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[:3])\n    matrix = [list(map(int, input().split())) for _ in range(n)]\n    \n    max_sum = 0\n    \n    for i in range(n):\n        row_elements = [matrix[i][j] for j in range(m) if j < m // 2 + (i % 2 == 0)]\n        row_sum = sum(row_elements)\n        max_sum = max(max_sum, row_sum)\n    \n    return str(max_sum % k)\n"
    },
    {
        "number": 4002,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[:3])\n    matrix = [list(map(int, input().split())) for _ in range(n)]\n\n    max_sum = -1\n    for row in matrix:\n        row.sort(reverse=True)\n        row_sum = sum(row[:m//2])\n        if row_sum % k == 0 and row_sum > max_sum:\n            max_sum = row_sum\n\n    return str(max_sum)\n"
    },
    {
        "number": 4002,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[0:3])\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.split()[3:3+m])))\n    max_sum = 0\n    for i in range(n):\n        row_sum = 0\n        for j in range(m):\n            if a[i][j] % k == 0:\n                row_sum += a[i][j]\n        for j in range(min(m//2, (m-1)//2)+1):\n            row_sum += a[i][j] % k\n            row_sum += a[i][m-1-j] % k\n        max_sum = max(max_sum, row_sum)\n    return str(max_sum)\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4002,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def max_sum_divisible_by_k(matrix, k):\n        n, m, k = len(matrix), len(matrix[0]), k\n        max_sum = 0\n        \n        for row in matrix:\n            row.sort(reverse=True)\n            for i in range(m // 2):\n                max_sum += row[i]\n            max_sum %= k\n        \n        return max_sum\n    \n    n, m, k = map(int, stdin.split())\n    matrix = [list(map(int, input().split())) for _ in range(n)]\n    \n    return str(max_sum_divisible_by_k(matrix, k))\n\ninput_stdin = \"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\"\nprint(solution(input_stdin)) "
    },
    {
        "number": 4002,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[:3])\n    a = [list(map(int, stdin.split()[3:]))[i * m:(i + 1) * m] for i in range(n)]\n\n    def max_sum(row):\n        row.sort(reverse=True)\n        return sum(row[:max_count])\n\n    max_count = floor(m / 2)\n\n    max_sum_divisible_by_k = 0\n    for i in range(n):\n        max_sum_divisible_by_k = max(max_sum_divisible_by_k, max_sum(a[i]) - max_sum(a[i]) % k)\n\n    return str(max_sum_divisible_by_k)\n\n\ndef"
    },
    {
        "number": 4002,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    n, m, k = map(int, stdin.readline().split())\n    a = [list(map(int, stdin.readline().split())) for _ in range(n)]\n\n    # Initialize the maximum sum\n    max_sum = 0\n\n    # Iterate through each row\n    for row in a:\n        # Sort the row in descending order\n        row.sort(reverse=True)\n\n        # Choose the first half (rounded down) elements in the row\n        row = row[: (m + 1) // 2]\n\n        # Calculate the sum of the chosen elements\n        row_sum = sum(row)\n\n        # Check if the sum is divisible by k\n        if row_sum % k == 0:\n            # Update the maximum sum if necessary\n            max_sum = max(max_sum, row_sum)\n\n    return str(max_sum)"
    },
    {
        "number": 4002,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[:3])\n    a = [list(map(int, stdin.split()[3:][i*m:(i+1)*m])) for i in range(n)]\n    max_sum = -1\n    \n    for i in range(n):\n        row = a[i]\n        row.sort(reverse=True)\n        sum_elements = sum(row[:m//2+1])\n        remainder = sum_elements % k\n        if remainder != 0:\n            sum_elements += k - remainder\n        max_sum = max(max_sum, sum_elements)\n    \n    return str(max_sum)"
    },
    {
        "number": 4003,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, sequence = stdin.split()\n    n = int(n)\n    a = list(map(int, sequence.split()))\n\n    def longest_increasing_subsequence(sequence):\n        tails = [0] * n\n        length = 0\n        for num in sequence:\n            i, j = 0, length\n            while i <= j:\n                mid = (i + j) // 2\n                if tails[mid] < num:\n                    i = mid + 1\n                else:\n                    j = mid - 1\n            tails[i] = num\n            length = max(length, i + 1)\n        return length\n\n    return str(longest_increasing_subsequence(a))\n\ninput_string = input()\nprint(solution(input_string)) "
    },
    {
        "number": 4003,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = [int(x) for x in stdin.split()[1:]]\n\n    def dfs(start, end, path, max_path):\n        if start > end:\n            return\n        for i in range(start, end + 1):\n            if i == start or a[i] > a[i - 1]:\n                dfs(i + 1, end, path + 'R', max_path)\n                if len(max_path) < len(path) + 1:\n                    max_path = path + 'R'\n            else:\n                dfs(start, i - 1, path + 'L', max_path)\n                if len(max_path) < len(path) + 1:\n                    max_path = path + 'L'\n        return max_path\n\n    max_path = dfs(0, len(a) - 1, '', '')\n    return str(len(max_path)) + '\\n' + max_path\n\ninputs = [\n    \"5\\n1 2 4 3 2\",\n    \"7\\n1 3 5 6 5 4 2\",\n    \"3\\n2 2 2\",\n    \"4\\n1 2 4 3\"\n]\n\nfor input in inputs:\n    print(solution(input)) "
    },
    {
        "number": 4003,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a = stdin.split()\n    n = int(n)\n    a = list(map(int, a.split()))\n\n    max_length = 0\n    for i in range(n):\n        if a[i] > a[i - 1]:\n            length = 1\n            for j in range(i + 1, n):\n                if a[j] > a[j - 1]:\n                    length += 1\n                else:\n                    break\n            max_length = max(max_length, length)\n\n    s = \"\"\n    if max_length == 0:\n        return \"1\\nR\"\n\n    for i in range(max_length):\n        if a[i] > a[i - 1]:\n            s += \"L\"\n        else:\n            s += \"R\"\n\n    return f\"{max_length}\\n{s}\"\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    a = list(map(int, a.split()))\n    left, right = [], []\n    for i in range(n):\n        if a[i] < a[i - 1]:\n            right.append(a[i - 1])\n            left.append(a[i])\n    return max(len(left), len(right)), \"L\" * len(left) + \"R\" * len(right)\n\ninput_string = input()\nn, a = input_string.split(\"\\n\")\noutput = solution(n + \"\\n\" + a)\nprint(output[0])\nprint(output[1]) "
    },
    {
        "number": 4003,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a = list(map(int, stdin.split()))\n    left = []\n    right = []\n    result = []\n\n    for i in range(n):\n        while left and a[i] <= left[-1]:\n            left.pop()\n        left.append(a[i])\n\n        while right and a[n - i - 1] <= right[-1]:\n            right.pop()\n        right.append(a[n - i - 1])\n\n        if not left or not right:\n            result.append(i)\n\n    return max(result)\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    max_increasing_seq = 0\n    leftmost_element = 0\n    rightmost_element = n - 1\n    increasing_seq = \"\"\n\n    while leftmost_element <= rightmost_element:\n        if a[leftmost_element] <= a[rightmost_element]:\n            increasing_seq += \"L\"\n            leftmost_element += 1\n        else:\n            increasing_seq += \"R\"\n            rightmost_element -= 1\n\n        if len(increasing_seq) > max_increasing_seq:\n            max_increasing_seq = len(increasing_seq)\n\n    return max_increasing_seq + \"\\n\" + increasing_seq\n\ninput_str = \"5\\n1 2 4 3 2\\n\"\noutput_str = solution(input_str)\nprint(output_str)\n\ninput_str = \"7\\n1 3 5 6 5 4 2\\n\"\noutput_str = solution(input_str)\nprint(output_str)\n\ninput_str = \"3\\n2 2 2\\n\"\noutput_str = solution(input_str)\nprint(output_str)\n\ninput_str = \"4\\n1 2 4 3\\n\"\noutput_str = solution(input_str)\nprint(output_str) "
    },
    {
        "number": 4003,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    def find_sequence(a):\n        left_max = [0] * n\n        right_max = [0] * n\n        for i in range(1, n):\n            left_max[i] = max(left_max[i - 1], a[i - 1])\n        for i in range(n - 2, -1, -1):\n            right_max[i] = max(right_max[i + 1], a[i + 1])\n        return [max(left_max[i] + right_max[i], a[i]) for i in range(n)]\n\n    def sequence_length(a, sequence):\n        n = len(sequence)\n        if n == 0:\n            return 0\n        count = 1\n        i = 1\n        while i < n:\n            if sequence[i - 1] < sequence[i]:\n                count += 1\n                i += 1\n            else:\n                break\n        return count\n\n    sequence = find_sequence(a)\n    k = sequence_length(a, sequence)\n    moves = ['L' if a[i] > sequence[i] else 'R' for i in range(k)]\n    return str(k) + '\\n' + ''.join(moves)\n\n\ninputs = [\n    '5\\n1 2 4 3 2',\n    '7\\n1 3 5 6 5 4 2',\n    '3\\n2 2 2',\n    '4\\n1 2 4 3'\n]\n\nfor input in inputs:\n    print(solution(input)) "
    },
    {
        "number": 4003,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    max_increasing_sequence = []\n    max_increasing_sequence_length = 0\n\n    left_move = 0\n    right_move = 0\n\n    while left_move < n and right_move < n:\n        if a[left_move] < a[right_move]:\n            max_increasing_sequence.append(a[left_move])\n            left_move += 1\n        else:\n            max_increasing_sequence.append(a[right_move])\n            right_move += 1\n\n        if len(max_increasing_sequence) > max_increasing_sequence_length:\n            max_increasing_sequence_length = len(max_increasing_sequence)\n\n    result = 'L' * max_increasing_sequence_length\n    return str(max_increasing_sequence_length) + '\\n' + result"
    },
    {
        "number": 4003,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a = stdin.split('\\n')\n    n = int(n)\n    a = list(map(int, a.split()))\n\n    def check_increasing(start: int, end: int) -> bool:\n        for i in range(start, end):\n            if a[i] >= a[i + 1]:\n                return False\n        return True\n\n    def find_max_increasing_sequence() -> str:\n        max_k = 0\n        max_s = \"\"\n        for i in range(n):\n            left = check_increasing(0, i)\n            if left:\n                k = i + 1\n                right = check_increasing(i + 1, n)\n                if right:\n                    if k > max_k:\n                        max_k = k\n                        max_s = \"L\" * i + \"R\" * k\n            right = check_increasing(0, i + 1)\n            if right:\n                k = i + 2\n                left = check_increasing(i + 2, n)\n                if left:\n                    if k > max_k:\n                        max_k = k\n                        max_s = \"L\" * i + \"R\" * k\n        return max_k, max_s\n\n    k, s = find_max_increasing_sequence()\n    return str(k) + \"\\n\" + s\n"
    },
    {
        "number": 4003,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    k = 1\n    moves = ['L']\n    prev_move = 'L'\n\n    for i in range(1, n):\n        if a[i] > a[i-1]:\n            k += 1\n            moves.append('L')\n        elif a[i] < a[i-1]:\n            moves.append('R')\n            if k == 1 or prev_move == 'R':\n                k += 1\n                moves.append('L')\n                prev_move = 'L'\n            else:\n                prev_move = 'R'\n        else:\n            moves.append('R')\n\n    return f\"{k}\\n{''.join(moves)}\""
    },
    {
        "number": 4004,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    min_sum = sum(a)\n    max_sum = n * max(a)\n    \n    for d in range(max_sum - min_sum + 1):\n        total_sum = sum([x + (d if x < d else -d) for x in a])\n        if total_sum == 0:\n            return str(d)\n    \n    return \"-1\"\n\ndef"
    },
    {
        "number": 4004,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    arr = list(map(int, stdin.splitlines()[1].split()))\n    \n    if len(arr) != n:\n        return \"-1\"\n    \n    min_value = min(arr)\n    max_value = max(arr)\n    target = max_value - min_value\n    \n    if target == 0:\n        return str(0)\n    \n    for i in range(target + 1):\n        temp = [num + i for num in arr]\n        if len(set(temp)) == 1:\n            return str(i)\n    \n    return \"-1\""
    },
    {
        "number": 4004,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    \n    a_min = min(a)\n    a_max = max(a)\n    D = a_min\n    \n    if a_max - a_min <= D:\n        return str(D)\n    else:\n        return \"-1\""
    },
    {
        "number": 4004,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    if len(set(a)) == 1:\n        return str(0)\n\n    a_min = min(a)\n    a_max = max(a)\n    D = a_min\n\n    while D <= a_max - a_min:\n        is_possible = True\n        for i in range(n):\n            if a[i] - D < 0:\n                is_possible = False\n                break\n            elif a[i] + D > a_max:\n                is_possible = False\n                break\n        if is_possible:\n            return str(D)\n        D += 1\n\n    return '-1'\n"
    },
    {
        "number": 4004,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().split()))\n\n    a_set = set(a)\n    if len(a_set) == 1:\n        return str(-1)\n\n    min_d = float(\"inf\")\n    for d in range(max(a)):\n        if all(sum(a) % len(a) == (a[0] - d) % len(a) for a in a_set):\n            min_d = min(min_d, d)\n\n    return str(min_d) if min_d != float(\"inf\") else str(-1)\n"
    },
    {
        "number": 4004,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    a = list(map(int, a.split()))\n\n    if len(a) != n:\n        return -1\n\n    a_set = set(a)\n    min_diff = min(a_set)\n    max_diff = max(a_set)\n\n    if min_diff == max_diff:\n        return 0\n\n    min_d = min_diff\n    max_d = max_diff - min_diff\n    result = min(min_d, max_d)\n\n    if result == float('inf'):\n        return -1\n\n    return result\n"
    },
    {
        "number": 4004,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    if len(a) != n:\n        raise ValueError(\"Input Error: Array size does not match the number of elements.\")\n\n    a_set = set(a)\n    if len(a_set) == 1:\n        return \"-1\"\n\n    min_val = min(a_set)\n    max_val = max(a_set)\n    target_val = max_val - min_val\n\n    if target_val == 0:\n        return \"-1\"\n\n    return str(target_val)"
    },
    {
        "number": 4004,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    a_set = set(a)\n    \n    if len(a_set) == 1:\n        return str(0)\n    \n    a_min = min(a)\n    a_max = max(a)\n    \n    if a_min == 0 and a_max == 0:\n        return str(0)\n    \n    if a_min == 0 or a_max == 0:\n        return str(-1)\n    \n    if a_min == a_max:\n        return str(-1)\n    \n    for i in range(1, a_min):\n        if (a_max - a_min) % i == 0:\n            D = i\n        else:\n            continue\n        \n        if sum((a_max - a_min) // D) == len(a):\n            return str(D)\n    \n    return str(-1)"
    },
    {
        "number": 4004,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    max_value = max(a)\n    min_value = min(a)\n    diff = max_value - min_value\n\n    if diff == 0:\n        return \"0\"\n\n    if n == 1:\n        return \"0\"\n\n    for i in range(1, diff + 1):\n        if diff % i == 0:\n            if all(((max_value - i) + (min_value + i)) % j == 0 for j in range(1, n + 1)):\n                return str(i)\n\n    return \"-1\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    a_min = min(a)\n    a_max = max(a)\n\n    if a_min == a_max:\n        return str(0)\n\n    d = a_max - a_min\n    for i in range(1, d + 1):\n        if d % i == 0:\n            for j in range(len(a)):\n                if a[j] % i != 0:\n                    break\n            else:\n                return str(i)\n\n    return \"-1\""
    },
    {
        "number": 4005,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_visible(white: Tuple[int, int, int, int], black1: Tuple[int, int, int, int], black2: Tuple[int, int, int, int]) -> bool:\n        x1, y1, x2, y2 = white\n        x3, y3, x4, y4 = black1\n        x5, y5, x6, y6 = black2\n        \n        # Check if any part of the white sheet is visible\n        if x1 < x3 and x2 > x4 and y1 < y3 and y2 > y4:\n            return True\n        if x1 < x5 and x2 > x6 and y1 < y5 and y2 > y6:\n            return True\n        \n        # Check if any corner of the white sheet is inside the black sheets\n        if (x1 <= x3 <= x2 or x1 <= x4 <= x2) and (y1 <= y3 <= y2 or y1 <= y4 <= y2):\n            return True\n        if (x1 <= x5 <= x2 or x1 <= x6 <= x2) and (y1 <= y5 <= y2 or y1 <= y6 <= y2):\n            return True\n        \n        # Check if any point of the white sheet is inside the black sheets\n        if (x1 <= x3 <= x2 and y1 <= y3 <= y2) or (x1 <= x4 <= x2 and y1 <= y4 <= y2):\n            return True\n        if (x1 <= x5 <= x2 and y1 <= y5 <= y2) or (x1 <= x6 <= x2 and y1 <= y6 <= y2):\n            return True\n        \n        return False\n\n    input_values = [int(x) for x in stdin.split()]\n    white = (input_values[0], input_values[1], input_values[2], input_values[3])\n    black1 = (input_values[4], input_values[5], input_values[6], input_values[7])\n    black2 = (input_values[8], input_values[9], input_values[10], input_values[11])\n    \n    return \"YES\" if is_visible(white, black1, black2) else \"NO\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def is_visible(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) -> bool:\n        if (x1 <= x3 and x2 >= x4 and y1 <= y3 and y2 >= y4) or (x1 <= x5 and x2 >= x6 and y1 <= y5 and y2 >= y6):\n            return False\n        return any(not (x1 < x < x2 and y1 < y < y2) for x, y in ((x3, y3), (x4, y4), (x5, y5), (x6, y6)))\n\n    inputs = stdin.splitlines()\n    x1, y1, x2, y2 = map(int, inputs[0].split())\n    x3, y3, x4, y4 = map(int, inputs[1].split())\n    x5, y5, x6, y6 = map(int, inputs[2].split())\n\n    return \"YES\" if is_visible(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) else \"NO\""
    },
    {
        "number": 4005,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    input_lines = stdin.splitlines()\n    white_sheet_coords = tuple(map(int, input_lines[0].split()))\n    black_sheet_1_coords = tuple(map(int, input_lines[1].split()))\n    black_sheet_2_coords = tuple(map(int, input_lines[2].split()))\n\n    # check if any part of the white sheet is visible\n    if is_visible(white_sheet_coords, black_sheet_1_coords, black_sheet_2_coords):\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef"
    },
    {
        "number": 4005,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # split input by '\\n' to separate input lines\n    input_lines = stdin.split('\\n')\n\n    # parse input\n    white_sheet = tuple(map(int, input_lines[0].split()))\n    black_sheet1 = tuple(map(int, input_lines[1].split()))\n    black_sheet2 = tuple(map(int, input_lines[2].split()))\n\n    # check if there is some part of the white sheet that can be seen\n    for x in range(white_sheet[0], white_sheet[2] + 1):\n        for y in range(white_sheet[1], white_sheet[3] + 1):\n            # check if the point (x, y) is not strictly inside the white sheet\n            if not (white_sheet[0] < x < white_sheet[2] and white_sheet[1] < y < white_sheet[3]):\n                # check if the point (x, y) is strictly outside of both black sheets\n                if (x, y) not in black_sheet1 and (x, y) not in black_sheet2:\n                    return \"YES\"\n\n    return \"NO\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def can_see_part_of_sheet(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) -> bool:\n        # Check if any point is not strictly inside the white sheet and strictly outside of both black sheets\n        for x in range(max(x1, x3, x5), min(x2, x4, x6) + 1):\n            for y in range(max(y1, y3, y5), min(y2, y4, y6) + 1):\n                if not (x1 < x < x2 and y1 < y < y2) and (x3 < x < x4 or x5 < x < x6 or y3 < y < y4 or y5 < y < y6):\n                    return True\n        return False\n\n    input_lines = stdin.splitlines()\n    x1, y1, x2, y2 = map(int, input_lines[0].split())\n    x3, y3, x4, y4 = map(int, input_lines[1].split())\n    x5, y5, x6, y6 = map(int, input_lines[2].split())\n\n    return \"YES\" if can_see_part_of_sheet(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) else \"NO\""
    },
    {
        "number": 4005,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    white_sheet_coords, black_sheets_coords = stdin.split(\"\\n\")\n    white_sheet_coords = tuple(map(int, white_sheet_coords.split()))\n    black_sheets_coords = [tuple(map(int, line.split())) for line in black_sheets_coords.split(\"\\n\")]\n\n    def is_point_inside_sheet(x: int, y: int, sheet_coords: Tuple[int, int, int, int]) -> bool:\n        x1, y1, x2, y2 = sheet_coords\n        return x1 <= x <= x2 and y1 <= y <= y2\n\n    def is_point_visible(x: int, y: int) -> bool:\n        return not is_point_inside_sheet(x, y, white_sheet_coords) and all(not is_point_inside_sheet(x, y, sheet_coords) for sheet_coords in black_sheets_coords)\n\n    if any(is_point_visible(x, y) for x in range(1, 11) for y in range(1, 11)):\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef"
    },
    {
        "number": 4005,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split('\\n')\n    white_sheet_corners = tuple(map(int, input_lines[0].split()))\n    black_sheet_corners1 = tuple(map(int, input_lines[1].split()))\n    black_sheet_corners2 = tuple(map(int, input_lines[2].split()))\n\n    def is_point_inside(x, y):\n        return (x_1 <= x < x_2) and (y_1 <= y < y_2)\n\n    def is_point_outside(x, y):\n        return not is_point_inside(x, y)\n\n    x_1, y_1, x_2, y_2 = white_sheet_corners\n    x_3, y_3, x_4, y_4 = black_sheet_corners1\n    x_5, y_5, x_6, y_6 = black_sheet_corners2\n\n    for x in range(max(x_1, x_3, x_5), min(x_2, x_4, x_6) + 1):\n        for y in range(max(y_1, y_3, y_5), min(y_2, y_4, y_6) + 1):\n            if is_point_outside(x, y):\n                return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4005,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def is_visible(white_sheet, black_sheets):\n        for black_sheet in black_sheets:\n            if (\n                white_sheet[0] >= black_sheet[0]\n                and white_sheet[1] >= black_sheet[1]\n                and white_sheet[2] <= black_sheet[2]\n                and white_sheet[3] <= black_sheet[3]\n            ):\n                return False\n        return True\n\n    input_lines = stdin.splitlines()\n    white_sheet = tuple(map(int, input_lines[0].split()))\n    black_sheets = [tuple(map(int, line.split())) for line in input_lines[1:]]\n\n    return \"YES\" if is_visible(white_sheet, black_sheets) else \"NO\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    coords = [[int(x) for x in line.split()] for line in lines]\n\n    white_sheet = coords[0]\n    black_sheet1 = coords[1]\n    black_sheet2 = coords[2]\n\n    white_x1, white_y1, white_x2, white_y2 = white_sheet\n    black_x1, black_y1, black_x2, black_y2 = black_sheet1\n    black_x3, black_y3, black_x4, black_y4 = black_sheet2\n\n    if white_x1 > black_x1 and white_x1 < black_x2 and white_y1 < black_y1 and white_y1 < black_y2:\n        return \"YES\"\n    if white_x2 > black_x1 and white_x2 < black_x2 and white_y2 > black_y1 and white_y2 > black_y2:\n        return \"YES\"\n    if white_y1 > black_y1 and white_y1 < black_y2 and white_x1 < black_x1 and white_x1 < black_x2:\n        return \"YES\"\n    if white_y2 > black_y1 and white_y2 < black_y2 and white_x2 > black_x1 and white_x2 > black_x2:\n        return \"YES\"\n\n    if white_x1 > black_x3 and white_x1 < black_x4 and white_y1 < black_y3 and white_y1 < black_y4:\n        return \"YES\"\n    if white_x2 > black_x3 and white_x2 < black_x4 and white_y2 > black_y3 and white_y2 > black_y4:\n        return \"YES\"\n    if white_y1 > black_y3 and white_y1 < black_y4 and white_x1 < black_x3 and white_x1 < black_x4:\n        return \"YES\"\n    if white_y2 > black_y3 and white_y2 < black_y4 and white_x2 > black_x3 and white_x2 > black_x4:\n        return \"YES\"\n\n    return \"NO\"\n\n\ninput_str = \"\"\"3 3 7 5\n0 0 4 6\n0 0 7 4\"\"\"\n\nprint(solution(input_str)) # Output: YES "
    },
    {
        "number": 4005,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    white_sheet_coords = stdin[:4]\n    black_sheet_1_coords = stdin[4:8]\n    black_sheet_2_coords = stdin[8:]\n\n    def is_point_inside_sheet(sheet_coords, point):\n        x, y = point\n        x_min, y_min, x_max, y_max = sheet_coords\n        return x_min < x < x_max and y_min < y < y_max\n\n    def is_point_outside_both_sheets(white_sheet_coords, black_sheet_1_coords, black_sheet_2_coords, point):\n        return (not is_point_inside_sheet(white_sheet_coords, point)) and \\\n               (not is_point_inside_sheet(black_sheet_1_coords, point)) and \\\n               (not is_point_inside_sheet(black_sheet_2_coords, point))\n\n    white_sheet_points = [(x, y) for x in range(white_sheet_coords[0], white_sheet_coords[2] + 1) for y in range(white_sheet_coords[1], white_sheet_coords[3] + 1)]\n    visible_points = [point for point in white_sheet_points if is_point_outside_both_sheets(white_sheet_coords, black_sheet_1_coords, black_sheet_2_coords, point)]\n\n    if visible_points:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4006,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    def f(x):\n        trailing_zeros = 0\n        while x % 10 == 0:\n            trailing_zeros += 1\n            x //= 10\n        return x, trailing_zeros\n\n    def count_reachable_numbers(n):\n        seen = set([n])\n        stack = [n]\n        while stack:\n            current = stack.pop()\n            new_value, trailing_zeros = f(current)\n            for i in range(trailing_zeros + 1):\n                new_number = new_value * 10 ** i + i\n                seen.add(new_number)\n                stack.append(new_number)\n        return len(seen)\n\n    result = count_reachable_numbers(n)\n    return str(result)"
    },
    {
        "number": 4006,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, 10**9 + 1):\n        if i == n:\n            count += 1\n        else:\n            x = i\n            while x % 10 == 0:\n                x //= 10\n            x += 1\n            if x == n:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4006,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    def f(x):\n        while x % 10 == 0:\n            x //= 10\n        return x + 1\n    \n    def count_reachable(n):\n        visited = set()\n        q = [(n, 0)]\n        while q:\n            x, depth = q.pop(0)\n            if x in visited:\n                continue\n            visited.add(x)\n            q.append((f(x), depth+1))\n        return len(visited)\n    \n    return str(count_reachable(n))"
    },
    {
        "number": 4006,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    reachable_nums = set()\n    reachable_nums.add(n)\n    num = n\n    \n    while True:\n        num_str = str(num)\n        if '0' not in num_str:\n            break\n        num_str = num_str.replace('0', '')\n        num = int(num_str)\n        \n    for i in range(1, 10):\n        reachable_nums.add(num + i)\n        \n    return str(len(reachable_nums))"
    },
    {
        "number": 4006,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n+1):\n        if i <= 1:\n            continue\n        x = i\n        while x != 1:\n            if x % 10 == 0:\n                x //= 10\n            else:\n                break\n        if x == 1:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4006,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    \n    def f(x: int) -> int:\n        num = x + 1\n        while num % 10 == 0:\n            num //= 10\n        return num\n    \n    reachable = set()\n    for i in range(1, n + 1):\n        x = i\n        while x <= n:\n            reachable.add(x)\n            x = f(x)\n    \n    return str(len(reachable))"
    },
    {
        "number": 4006,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n+1):\n        count += 1\n        while i % 10 == 0:\n            i //= 10\n    return str(count)"
    },
    {
        "number": 4006,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 0\n    \n    for i in range(1, n+1):\n        temp = i\n        while temp % 10 == 0:\n            temp //= 10\n        count += 1\n        \n    return str(count)"
    },
    {
        "number": 4006,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 0\n    for i in range(1, n + 1):\n        count += 1\n        if str(i).endswith(\"0\"):\n            continue\n        while not str(i).endswith(\"0\"):\n            i = i // 10\n        count += 1\n    return str(count)\n\ninput_value = \"1098\"\nprint(solution(input_value)) "
    },
    {
        "number": 4006,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 0\n    for i in range(1, n + 1):\n        temp = i\n        while temp % 10 == 0:\n            temp //= 10\n        if temp != i:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4007,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    friends = list(map(int, stdin.split()[1:]))\n\n    # Count the number of people who don't know whom they want to give the gift to\n    unknown_count = friends.count(0)\n\n    # Initialize the output list with the given information\n    output = [friends[i] if friends[i] != 0 else -1 for i in range(n)]\n\n    # Fill in the unknown values\n    for i in range(n):\n        if output[i] == -1:\n            if unknown_count == 0:\n                raise ValueError(\"There is no answer for this input\")\n            for j in range(1, n + 1):\n                if j not in output:\n                    output[i] = j\n                    output[j - 1] = i + 1\n                    unknown_count -= 1\n                    break\n        elif output[i] in output:\n            raise ValueError(\"There is no answer for this input\")\n\n    # Check if the output is valid\n    if len(set(output)) != n:\n        raise ValueError(\"There is no answer for this input\")\n\n    return \" \".join(map(str, output))"
    },
    {
        "number": 4007,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    f = list(map(int, stdin.split()[1:]))\n\n    # Initialize the adjacency matrix\n    adj = [[0] * n for _ in range(n)]\n\n    # Fill in the adjacency matrix\n    for i in range(n):\n        if f[i] == 0:\n            adj[i][i] = 1\n        else:\n            adj[i][f[i] - 1] = 1\n\n    # Check if the graph is bipartite\n    colors = [-1] * n\n    for i in range(n):\n        if colors[i] == -1:\n            colors[i] = 0\n            queue = [i]\n            while queue:\n                node = queue.pop(0)\n                for j in range(n):\n                    if adj[node][j] == 1 and colors[j] == -1:\n                        colors[j] = 1 - colors[node]\n                        queue.append(j)\n\n    # Check if the graph is connected\n    if any(colors[i] == -1 for i in range(n)):\n        raise ValueError(\"The graph is not connected.\")\n\n    # Calculate the degree of each node\n    degree = [0] * n\n    for i in range(n):\n        for j in range(n):\n            degree[i] += adj[i][j]\n\n    # Calculate the number of odd-degree nodes\n    odd_degree_nodes = sum(1 for d in degree if d % 2 != 0)\n\n    if odd_degree_nodes % 2 != 0:\n        raise ValueError(\"The graph is not bipartite.\")\n\n    # Calculate the number of nodes in each part of the graph\n    even_degree_nodes = n // 2\n    odd_degree_nodes = n - even_degree_nodes\n\n    # Calculate the number of nodes in the first part of the graph\n    first_part_nodes = (even_degree_nodes - odd_degree_nodes) // 2\n\n    # Calculate the number of nodes in the second part of the graph\n    second_part_nodes = even_degree_nodes - first_part_nodes\n\n    # Assign the numbers to the nodes in the first part of the graph\n    result = [0] * n\n    assigned = 0\n    for i in range(n):\n        if colors[i] == 0:\n            result[i] = assigned + 1\n            assigned += 1\n            if assigned > first_part_nodes:\n                raise ValueError(\"The graph is not bipartite.\")\n\n    # Assign the numbers to the nodes in the second part of the graph\n    for i in range(n):\n        if colors[i] == 1 and result[i] == 0:\n            result[i] = assigned + 1\n            assigned += 1\n            if assigned > second_part_nodes:\n                raise ValueError(\"The graph is not bipartite.\")\n\n    return \" \".join(map(str, result))\n"
    },
    {
        "number": 4007,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    f_i = list(map(int, stdin.splitlines()[1].split()))\n\n    # Create a graph where each node represents a friend and there is an edge between two nodes if the i-th friend wants to give the gift to the j-th friend\n    graph = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        if f_i[i] != 0:\n            graph[i][f_i[i] - 1] = 1\n\n    # Find a path that visits each node exactly once\n    visited = [False] * n\n    path = [-1] * n\n\n    def dfs(node: int) -> bool:\n        if visited[node]:\n            return False\n        visited[node] = True\n\n        for i in range(n):\n            if graph[node][i] == 1:\n                if dfs(i):\n                    path[i] = node\n                    return True\n\n        return False\n\n    start_node = 0\n    while not dfs(start_node):\n        start_node += 1\n\n    # Reverse the path to get the answer\n    for i in range(n - 1, -1, -1):\n        if path[i] != -1:\n            f_i[i] = n + path[i]\n\n    return \" \".join(map(str, f_i)) "
    },
    {
        "number": 4007,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    f = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    # Find all the indices where f_i = 0\n    unknown_indices = [i for i in range(n) if f[i] == 0]\n\n    # Initialize a list to keep track of which indices have been assigned to which friends\n    used_indices = [False] * n\n\n    # Assign each friend a gift and a receiver\n    for i in range(n):\n        if f[i] == 0:\n            # If the current friend doesn't know whom to give the gift to, we can assign them any unused index\n            new_friend = unknown_indices.pop(0)\n            f[i] = new_friend + 1\n            used_indices[new_friend] = True\n        else:\n            # If the current friend knows whom to give the gift to, we can assign them the corresponding index\n            f[i] = f[i]\n            used_indices[f[i] - 1] = True\n\n    # If there are any remaining unknown indices, we can assign them to any unused friend\n    while unknown_indices:\n        new_friend = unknown_indices.pop(0)\n        for i in range(n):\n            if not used_indices[i]:\n                f[new_friend] = i + 1\n                used_indices[i] = True\n                break\n\n    return \" \".join(map(str, f))"
    },
    {
        "number": 4007,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    friend_gifts = list(map(int, stdin.readline().strip().split()))\n    \n    friends_to_give_to = []\n    for i in range(n):\n        if friend_gifts[i] == 0:\n            friends_to_give_to.append(i + 1)\n    \n    given_to = [0] * n\n    received_from = [0] * n\n    for i in range(n):\n        if friend_gifts[i] != 0:\n            friend_to_give_to = friend_gifts[i] - 1\n            given_to[i] = friend_to_give_to\n            received_from[friend_to_give_to] = i\n    \n    if len(friends_to_give_to) != n - len(set(received_from)):\n        raise ValueError(\"There is no solution.\")\n    \n    for i in range(n):\n        if given_to[i] == 0:\n            friend_to_give_to = friends_to_give_to.pop(0)\n            given_to[i] = friend_to_give_to\n            received_from[friend_to_give_to] = i\n    \n    return \" \".join(map(str, [n * i + friend_gifts[i] for i in range(n)]))"
    },
    {
        "number": 4007,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    gifts = list(map(int, stdin.split()[1:]))\n\n    # Find the friends that don't know whom they want to give the gift to\n    unknown = [i for i, gift in enumerate(gifts) if gift == 0]\n\n    # For each unknown friend, find the friend that wants to give the gift to them\n    for i in unknown:\n        # Find the friend that wants to give the gift to the unknown friend\n        friend_to_give = [j for j, gift in enumerate(gifts) if gift == i+1]\n\n        # Find the friend that the friend_to_give wants to give the gift to\n        friend_to_receive = [j for j, gift in enumerate(gifts) if gift == friend_to_give[0]+1]\n\n        # Update the gift value for the unknown friend\n        gifts[i] = friend_to_receive[0]+1\n\n    return \" \".join(map(str, gifts))"
    },
    {
        "number": 4007,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    gifts = [int(x) for x in stdin.splitlines()[1].split()]\n\n    # Initialize the result array with the given values\n    result = [0] * n\n    for i, gift in enumerate(gifts):\n        if gift != 0:\n            result[i] = gift\n\n    # Find all the missing values\n    missing_values = [i for i, gift in enumerate(gifts) if gift == 0]\n\n    # Fill the missing values\n    for i in missing_values:\n        target = i + 1\n        while target in result or target == i:\n            target += 1\n            if target > n:\n                target = 1\n\n        result[i] = target\n\n    # Convert the result to a string and return it\n    return \" \".join(str(x) for x in result)"
    },
    {
        "number": 4007,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    f = list(map(int, stdin.splitlines()[1].split()))\n    \n    for i in range(n):\n        if f[i] == 0:\n            for j in range(1, n + 1):\n                if j not in f and j != i:\n                    f[i] = j\n                    break\n    \n    for i in range(n):\n        if f[f[i] - 1] == i + 1:\n            for j in range(1, n + 1):\n                if j not in f:\n                    f[f[i] - 1] = j\n                    break\n    \n    for i in range(n):\n        if f[i] == 0:\n            for j in range(1, n + 1):\n                if j not in f:\n                    f[i] = j\n                    break\n    \n    result = []\n    for i in range(n):\n        result.append(f[i])\n    \n    return \" \".join(map(str, result))"
    },
    {
        "number": 4007,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    gifts = list(map(int, stdin.split()[1:]))\n\n    def dfs(current: int, gift: int, visited: set) -> None:\n        if current == n:\n            nonlocal result\n            result.append(gift)\n            return\n\n        for i in range(n):\n            if i not in visited and i != current and gifts[current] != i + 1:\n                visited.add(i)\n                dfs(current + 1, gift | (1 << i), visited)\n                visited.remove(i)\n\n    result = []\n    dfs(0, 0, set())\n\n    return \" \".join(map(str, result))\n"
    },
    {
        "number": 4007,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    known_friends = [int(x) - 1 for x in stdin.split()[1:]]\n\n    # Initialize an empty list to store the possible solutions\n    solutions = []\n\n    # Iterate through each friend and try to find a valid solution\n    for i in range(n):\n        # Skip the friend if their value is already known\n        if known_friends[i] != 0:\n            continue\n\n        # Initialize an empty list to store the possible values for the current friend\n        possible_values = []\n\n        # Iterate through each other friend and try to find a valid value\n        for j in range(n):\n            if j == i or known_friends[j] == 0 or j in possible_values:\n                continue\n\n            # Check if the current friend can give the gift to the j-th friend\n            if not any(j in x for x in solutions):\n                # Add the j-th friend to the possible values for the current friend\n                possible_values.append(j)\n\n        # Check if the current friend has at least one possible value\n        if len(possible_values) == 0:\n            continue\n\n        # Initialize an empty list to store the updated solution\n        updated_solution = [0] * n\n\n        # Assign the current friend their possible value\n        updated_solution[i] = possible_values[0] + 1\n\n        # Iterate through each other friend and assign their possible value\n        for j in range(n):\n            if updated_solution[i] == j + 1:\n                continue\n\n            if known_friends[j] == 0:\n                updated_solution[j] = find_value(j, updated_solution)\n            else:\n                updated_solution[j] = known_friends[j]\n\n        # Add the updated solution to the list of possible solutions\n        solutions.append(updated_solution)\n\n    # Check if there is at least one valid solution\n    if len(solutions) == 0:\n        return \"IMPOSSIBLE\"\n\n    # Print the first valid solution\n    return \" \".join(map(str, [x + 1 for x in solutions[0]]))\n\ndef"
    },
    {
        "number": 4008,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    array = list(map(int, stdin.split()[2:]))\n\n    def is_valid(coloring):\n        for i in range(1, k + 1):\n            color_count = 0\n            for j in range(n):\n                if coloring[j] == i:\n                    color_count += 1\n            if color_count == 0:\n                return False\n        return True\n\n    def generate_coloring():\n        if n == 0:\n            return []\n\n        coloring = [0] * n\n        coloring[0] = 1\n        next_color = 2\n\n        for i in range(1, n):\n            coloring[i] = next_color\n            next_color = (next_color % k) + 1\n\n        if is_valid(coloring):\n            return coloring\n        else:\n            return None\n\n    coloring = generate_coloring()\n    if coloring is None:\n        return \"NO\"\n    else:\n        return \"YES\" + \" \" + \" \".join(map(str, coloring))\n"
    },
    {
        "number": 4008,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    # Check if there are enough colors\n    if k < n:\n        return \"NO\"\n\n    # Assign colors to the elements\n    color_count = [0] * k\n    for i in range(n):\n        for j in range(k):\n            if j + 1 not in a:\n                color_count[j] += 1\n                a[i] = j + 1\n                break\n\n    # Check if each color has at least one element\n    for count in color_count:\n        if count == 0:\n            return \"NO\"\n\n    # If everything is okay, print the coloring\n    return \"YES\" + \" \" + \" \".join(map(str, a))\n"
    },
    {
        "number": 4008,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    \n    if k < len(a):\n        return \"NO\"\n    \n    colors = [0] * k\n    for i in range(len(a)):\n        for j in range(k):\n            if colors[j] == a[i]:\n                break\n            if j == k-1:\n                colors[j+1] = a[i]\n                break\n                \n    if sum(colors) == 0:\n        return \"NO\"\n    else:\n        return \"YES\" + \"\\n\" + \" \".join(str(x) for x in colors) "
    },
    {
        "number": 4008,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    if len(a) > k * (k + 1) // 2:\n        return \"NO\"\n\n    for i in range(1, k + 1):\n        if sum(1 for j in range(len(a)) if a[j] == i) < 1:\n            return \"NO\"\n\n    for i in range(1, k + 1):\n        for j in range(i + 1, k + 1):\n            if sum(1 for x in a if x == i or x == j) >= len(a):\n                return \"NO\"\n\n    return \"YES\" + \" \" + \" \".join(str(i) for i in range(1, k + 1) for j in range(len(a)) if a[j] == i)\n\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4008,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    if k < n:\n        return \"NO\"\n\n    colors = [-1] * k\n    for i in range(n):\n        assigned = False\n        for j in range(k):\n            if colors[j] == a[i]:\n                assigned = True\n                break\n        if not assigned:\n            for j in range(k):\n                if colors[j] == -1:\n                    colors[j] = a[i]\n                    break\n\n    for i in range(n):\n        assigned = False\n        for j in range(k):\n            if colors[j] == a[i]:\n                assigned = True\n                break\n        if not assigned:\n            return \"NO\"\n\n    return \"YES\" + \" \" + \" \".join(str(color) for color in colors)\n\n\ndef"
    },
    {
        "number": 4008,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    if k <= 0 or n <= 0:\n        return \"NO\"\n\n    if len(a) != n:\n        return \"NO\"\n\n    for i in range(n):\n        if a[i] <= 0:\n            return \"NO\"\n        if a[i] > k:\n            return \"NO\"\n\n    if k >= n:\n        return \"YES\\n\" + \" \".join(str(i) for i in range(1, k+1)) * n\n\n    for i in range(1, k+1):\n        if i not in a:\n            return \"NO\"\n\n    def find_coloring(a, k, colors, current_color, current_index):\n        if current_index == len(a):\n            return True\n        for color in range(1, k+1):\n            if color not in colors and color != current_color:\n                colors[current_index] = color\n                if find_coloring(a, k, colors, color, current_index+1):\n                    return True\n                del colors[current_index]\n        return False\n\n    colors = [0] * n\n    if find_coloring(a, k, colors, 0, 0):\n        return \"YES\\n\" + \" \".join(str(colors[i]) for i in range(n))\n    else:\n        return \"NO\"\n\ndef"
    },
    {
        "number": 4008,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    if len(a) != n:\n        return \"NO\"\n\n    # Check if there are at least k distinct elements in the array\n    if len(set(a)) < k:\n        return \"NO\"\n\n    # Create a dictionary to store the number of elements in each color\n    color_count = {i: 0 for i in range(1, k+1)}\n\n    # Assign colors to the elements\n    for i, x in enumerate(a):\n        for c in range(1, k+1):\n            if color_count[c] < len(set(a)):\n                color_count[c] += 1\n                a[i] = c\n                break\n\n    # Check if all elements have been colored\n    if any(x == 0 for x in a):\n        return \"NO\"\n\n    return \"YES\\n{}\".format(\" \".join(str(x) for x in a))\n"
    },
    {
        "number": 4008,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, input().split()))\n\n    if k < n:\n        return \"NO\"\n\n    color_counts = [0] * k\n    element_colors = [0] * n\n\n    for i, a_i in enumerate(a):\n        found_color = False\n        for color in range(1, k + 1):\n            if color_counts[color - 1] < 1:\n                element_colors[i] = color\n                color_counts[color - 1] += 1\n                found_color = True\n                break\n        if not found_color:\n            return \"NO\"\n\n    return \"YES\\n\" + \" \".join(map(str, element_colors))\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4008,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    colors = [0] * k\n    used_colors = set()\n\n    for num in a:\n        for color in range(k):\n            if num == color + 1:\n                colors[color] += 1\n                used_colors.add(color)\n                break\n\n    if len(used_colors) == k:\n        return \"YES\\n\" + \" \".join(str(i + 1) for i in range(k) if colors[i] > 0)\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, input().split()))\n\n    if n > k:\n        return \"NO\"\n\n    for i in range(1, k + 1):\n        if not any(a.count(i) > 0):\n            return \"NO\"\n\n    coloring = [0] * k\n    for i in range(n):\n        c = a[i]\n        if coloring[c - 1] == 0:\n            coloring[c - 1] = i + 1\n        else:\n            return \"NO\"\n\n    return \"YES\\n\" + \" \".join(map(str, coloring))\n\n\ndef"
    },
    {
        "number": 4009,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    num = int(stdin.split(\"\\n\")[1], 2)\n\n    def count_ones(num: int) -> int:\n        count = 0\n        while num > 0:\n            if num & 1:\n                count += 1\n            num >>= 1\n        return count\n\n    def count_zeros(num: int) -> int:\n        return n - count_ones(num)\n\n    remainder = num % (10 ** x)\n    if count_zeros(remainder) >= y:\n        return \"0\"\n\n    min_operations = float(\"inf\")\n    for i in range(n):\n        if (num >> i) & 1:\n            new_num = num ^ (1 << i)\n            new_remainder = new_num % (10 ** x)\n            if count_zeros(new_remainder) >= y:\n                min_operations = min(min_operations, i + 1)\n\n    return str(min_operations) if min_operations != float(\"inf\") else \"1\"\n\ninput_str = \"11 5 2\\n11010100101\"\nprint(solution(input_str))\n\ninput_str = \"11 5 1\\n11010100101\"\nprint(solution(input_str)) "
    },
    {
        "number": 4009,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split()[0:3])\n    number = stdin.split()[1]\n    \n    # Find the remainder of the given number\n    remainder = int(number) % (10**x)\n    \n    # Find the number of operations needed to obtain the desired remainder\n    count = 0\n    while remainder != 10**y:\n        last_digit = int(number[-1])\n        if last_digit == 0:\n            number = number[:-1] + '1'\n        else:\n            number = number[:-1] + '0'\n        remainder = int(number) % (10**x)\n        count += 1\n    \n    return str(count)"
    },
    {
        "number": 4009,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    digits = list(stdin.split()[1])\n    current_remainder = int(\"\".join(digits), 2) % (10**x)\n    target_remainder = 10**y\n    min_operations = 0\n    \n    while current_remainder != target_remainder:\n        if current_remainder > target_remainder:\n            current_remainder -= (10**x)\n        else:\n            current_remainder += (10**x) - target_remainder\n        min_operations += 1\n    \n    return str(min_operations)"
    },
    {
        "number": 4009,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    num = list(map(int, stdin.split()[1]))\n\n    # Calculate the remainder of the number divided by 10^x\n    remainder = sum([num[i] * (10**(n-i-1)) for i in range(x)]) % (10**x)\n\n    # Calculate the minimum number of operations\n    operations = 0\n    while remainder != 10**y:\n        # Calculate the index of the first non-zero digit\n        index = 0\n        while index < x and num[index] == 0:\n            index += 1\n\n        # If there is no non-zero digit, toggle the first digit\n        if index == x:\n            num[0] = 1 - num[0]\n\n        # Toggle the next non-zero digit\n        else:\n            num[index] = 1 - num[index]\n            for i in range(index+1, x):\n                num[i] = 1 - num[i]\n\n        operations += 1\n        remainder = sum([num[i] * (10**(n-i-1)) for i in range(x)]) % (10**x)\n\n    return operations"
    },
    {
        "number": 4009,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    num = stdin.strip()\n\n    remainder = int(num[:x]) % (10 ** x)\n    operations = 0\n\n    if remainder < 10 ** y:\n        operations += (10 ** y - remainder) // 10 ** (x - 1)\n\n    return str(operations)\n"
    },
    {
        "number": 4009,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = list(map(int, stdin.split()))\n    digits = list(map(int, stdin.split()))\n\n    remainder = 10 ** y\n    target_remainder = 10 ** x\n\n    current_remainder = sum(digits[i] * (10 ** (n - 1 - i)) for i in range(n))\n\n    min_operations = 0\n    for i in range(n):\n        operations = 0\n        for j in range(i, n):\n            operations += digits[j]\n            new_remainder = (current_remainder - operations) % target_remainder\n            if new_remainder == remainder:\n                return str(j - i + 1)\n            if new_remainder < remainder:\n                break\n        min_operations = max(min_operations, j - i + 1)\n\n    return str(min_operations)"
    },
    {
        "number": 4009,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, input().split())\n    num = input()\n    \n    if num[0] == '0':\n        return 0\n    \n    count = 0\n    for i in range(1, x):\n        if num[i] == '1':\n            count += 1\n            num = num[:i] + '0' + num[i+1:]\n    \n    if num[-1] == '1':\n        count += 1\n        num = num[:-1] + '0'\n    \n    for i in range(x, n):\n        if num[i] == '1':\n            count += 1\n            num = num[:i] + '0' + num[i+1:]\n    \n    return count"
    },
    {
        "number": 4009,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    digits = list(stdin.split()[1])\n    \n    def count_operations(index: int) -> int:\n        count = 0\n        for i in range(index, n):\n            if digits[i] == '0':\n                count += 1\n                digits[i] = '1'\n        return count\n\n    operations = 0\n    for i in range(x):\n        if i >= y:\n            operations += count_operations(i)\n        else:\n            operations += count_operations(i) + count_operations(i - y)\n\n    return operations\n\ninput_str = input()\nresult = solution(input_str)\nprint(result) "
    },
    {
        "number": 4009,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, input().split())\n    digits = list(map(int, input().strip()))\n    min_operations = 0\n    \n    # Calculate the current remainder\n    remainder = sum(digits[i] * 10**(n-1-i) for i in range(x)) % 10**x\n    \n    # Calculate the target remainder\n    target_remainder = 10**y\n    \n    # If the target remainder is already achieved, return 0\n    if remainder == target_remainder:\n        return \"0\"\n    \n    # Calculate the next remainder by flipping the last digit of the number\n    next_remainder = (remainder - 1) % 10**x\n    \n    # Calculate the minimum number of operations needed to reach the target remainder\n    while next_remainder != target_remainder:\n        remainder = next_remainder\n        next_remainder = (remainder - 1) % 10**x\n        min_operations += 1\n    \n    return str(min_operations)"
    },
    {
        "number": 4009,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    number = stdin.split()[1]\n\n    # Count the number of ones in the first x-y digits\n    ones = 0\n    for i in range(x - y):\n        ones += int(number[i])\n\n    # Calculate the remainder\n    remainder = (ones * (10 ** y)) % (10 ** x)\n\n    # Calculate the minimum number of operations\n    operations = n - x\n\n    return str(operations)"
    },
    {
        "number": 4010,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.split(\"\\n\")\n    t = int(test_cases[0])\n    results = []\n\n    for i in range(1, t * 2 + 1, 2):\n        n = int(test_cases[i])\n        a = list(map(int, test_cases[i + 1].split()))\n\n        for j in range(n):\n            for k in range(j + 2, n + 1):\n                if is_palindrome(a[j:k]):\n                    results.append(\"YES\")\n                    break\n            else:\n                continue\n            break\n        else:\n            results.append(\"NO\")\n\n    return \"\\n\".join(results)\n\n\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.split(\"\\n\")\n    t = int(test_cases[0])\n    results = []\n\n    for i in range(1, 2 * t + 1, 2):\n        n = int(test_cases[i])\n        a = list(map(int, test_cases[i + 1].split()))\n\n        for j in range(n - 2):\n            if a[j] == a[j + 1] == a[j + 2]:\n                results.append(\"YES\")\n                break\n        else:\n            results.append(\"NO\")\n\n    return \"\\n\".join(results)\n"
    },
    {
        "number": 4010,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Read the number of test cases\n    test_cases = int(stdin.readline())\n\n    # Read and process each test case\n    for i in range(test_cases):\n        # Read the length of the array\n        n = int(stdin.readline())\n        # Read the array\n        a = list(map(int, stdin.readline().split()))\n\n        # Check if there is a palindrome subsequence of length at least 3\n        has_palindrome = False\n        for j in range(n - 2):\n            for k in range(j + 2, n):\n                if a[j] == a[k]:\n                    has_palindrome = True\n                    break\n            if has_palindrome:\n                break\n\n        # Print the result\n        print(\"YES\" if has_palindrome else \"NO\")"
    },
    {
        "number": 4010,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.split(\"\\n\")\n    result = []\n    for i in range(0, len(test_cases), 2):\n        n = int(test_cases[i])\n        a = list(map(int, test_cases[i+1].split()))\n        has_palindrome = False\n        for j in range(n):\n            for k in range(j+2, n+1):\n                if k - j < 3:\n                    continue\n                if a[j:k] == a[j:k][::-1]:\n                    has_palindrome = True\n                    break\n            if has_palindrome:\n                break\n        result.append(\"YES\" if has_palindrome else \"NO\")\n    return \"\\n\".join(result)"
    },
    {
        "number": 4010,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline())\n    for _ in range(cases):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n\n        for i in range(n - 2):\n            if a[i] == a[i + 1] == a[i + 2]:\n                print(\"YES\")\n                break\n        else:\n            print(\"NO\")"
    },
    {
        "number": 4010,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    res = []\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        has_palindrome = False\n        for j in range(n-2):\n            for k in range(j+2, n):\n                if a[j] == a[k] and is_palindrome(a[j:k+1]):\n                    has_palindrome = True\n                    break\n            if has_palindrome:\n                break\n        res.append(\"YES\" if has_palindrome else \"NO\")\n    return \"\\n\".join(res)\n\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.splitlines()\n    t = int(test_cases[0])\n    output = []\n\n    for i in range(1, t * 2 + 1, 2):\n        n = int(test_cases[i])\n        a = list(map(int, test_cases[i + 1].split()))\n        has_palindrome = False\n\n        for j in range(n):\n            for k in range(j, n):\n                if a[j:k+1] == a[j:k+1][::-1]:\n                    has_palindrome = True\n                    break\n            if has_palindrome:\n                break\n\n        output.append(\"YES\" if has_palindrome else \"NO\")\n\n    return \"\\n\".join(output)\n\n\ninput_str = \"\"\"5\n3\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5 5\n\"\"\"\n\nprint(solution(input_str)) "
    },
    {
        "number": 4010,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline())\n    for i in range(T):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n\n        has_palindrome = False\n        for j in range(n):\n            for k in range(j + 2, n):\n                subsequence = a[j:k+1]\n                if subsequence == subsequence[::-1]:\n                    has_palindrome = True\n                    break\n            if has_palindrome:\n                break\n\n        print(\"YES\" if has_palindrome else \"NO\")"
    },
    {
        "number": 4010,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.split(\"\\n\", 1)[0])\n    result = []\n\n    for i in range(test_cases):\n        n = int(input())\n        a = list(map(int, input().split()))\n\n        for j in range(n - 2):\n            if a[j] == a[j + 1] and a[j] == a[j + 2]:\n                result.append(\"YES\")\n                break\n        else:\n            result.append(\"NO\")\n\n    return \"\\n\".join(result)\n"
    },
    {
        "number": 4010,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num_test_cases = int(stdin.readline())\n    for _ in range(num_test_cases):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        for i in range(n - 2):\n            if a[i] == a[i + 1] == a[i + 2]:\n                print(\"YES\")\n                break\n        else:\n            print(\"NO\")\n\nimport sys\nwith open('input.txt', 'r') as stdin:\n    solution(stdin) "
    },
    {
        "number": 4011,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    a = stdin[1:n+1]\n    f = list(map(int, stdin[n+2:].split()))\n\n    def replace_digit(digit: str, index: int) -> str:\n        return str(f[int(digit) - 1])\n\n    def replace_segment(segment: str) -> str:\n        return ''.join([replace_digit(digit, index) for index, digit in enumerate(segment)])\n\n    def get_max(index: int) -> str:\n        if index == n:\n            return replace_segment(a)\n\n        max_segment = a[index:]\n        for i in range(index+1, n+1):\n            segment = a[index:i]\n            replaced_segment = replace_segment(segment)\n            if int(replaced_segment) > int(max_segment):\n                max_segment = replaced_segment\n\n        return str(max(int(max_segment), get_max(index+1)))\n\n    return get_max(0)"
    },
    {
        "number": 4011,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, f = stdin.split('\\n')\n    n = int(n)\n    f = [int(x) for x in f.split(' ')]\n\n    def find_max(x: str) -> int:\n        if len(x) == 1:\n            return f[int(x) - 1]\n        if len(x) == 2:\n            return max(f[int(x[0]) - 1], f[int(x[1]) - 1])\n        if len(x) == 3:\n            return max(f[int(x[0]) - 1], f[int(x[1]) - 1], f[int(x[2]) - 1])\n\n    max_value = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            substring = a[i:j]\n            max_value = max(max_value, find_max(substring))\n\n    return str(max_value)"
    },
    {
        "number": 4011,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, f = stdin.split('\\n')\n    n = int(n)\n    a = list(map(int, a))\n    f = list(map(int, f.split()))\n\n    for i in range(len(a)):\n        for j in range(i, len(a)):\n            if j - i + 1 == len(a) // 2:\n                temp = a.copy()\n                for k in range(i, j + 1):\n                    temp[k] = f[temp[k]]\n                return ''.join(map(str, temp))\n\ndef"
    },
    {
        "number": 4011,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = stdin.readline().strip()\n    f = list(map(int, stdin.readline().strip().split()))\n\n    def f_transform(x: int) -> int:\n        return f[x - 1]\n\n    def max_subarray(arr: List[int]) -> int:\n        max_ending_here = 0\n        max_so_far = 0\n        for x in arr:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n\n    def max_transformed_subarray(arr: List[int], transform: Callable[[int], int]) -> int:\n        transformed_arr = [transform(x) for x in arr]\n        return max_subarray(transformed_arr)\n\n    a_arr = list(map(int, a))\n    max_transformed_a = max_transformed_subarray(a_arr, f_transform)\n\n    return str(max_transformed_a)\n"
    },
    {
        "number": 4011,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = input()\n    mapping = list(map(int, input().split()))\n\n    max_number = \"\"\n    max_value = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            subsegment = a[i:j + 1]\n            new_value = int(\"\".join(str(mapping[int(digit) - 1]) for digit in subsegment))\n            if new_value > max_value:\n                max_value = new_value\n                max_number = subsegment\n    return str(max_value)"
    },
    {
        "number": 4011,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, f = stdin.split('\\n')\n    n = int(n)\n    f = list(map(int, f.split()))\n\n    max_num = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            subsegment = a[i:j]\n            subsegment_list = list(map(int, subsegment))\n            new_subsegment = [f[x - 1] for x in subsegment_list]\n            new_num = int(''.join(map(str, new_subsegment)))\n            max_num = max(max_num, new_num)\n\n    return str(max_num)"
    },
    {
        "number": 4011,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, f = stdin.strip().split('\\n')\n    n = int(n)\n    f = [int(x) for x in f.split()]\n    # Calculate the maximum subsegment length to choose\n    max_length = n // 2 if n % 2 == 0 else n // 2 + 1\n    max_result = 0\n    \n    # Iterate over all possible subsegment lengths\n    for i in range(1, max_length + 1):\n        # Iterate over all possible subsegments of the given length\n        for j in range(n - i + 1):\n            # Calculate the result of replacing the current subsegment with the mapped digits\n            segment = a[j:j+i]\n            mapped_segment = ''.join(str(f[int(x)]) for x in segment)\n            # Update the maximum result if needed\n            max_result = max(max_result, int(mapped_segment))\n    \n    return str(max_result)"
    },
    {
        "number": 4011,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = stdin.readline().strip()\n    f = list(map(int, stdin.readline().strip().split()))\n\n    # find the maximum possible number by replacing each digit with the corresponding value in f\n    max_number = ''\n    for digit in a:\n        max_number += str(f[int(digit) - 1])\n\n    return max_number"
    },
    {
        "number": 4011,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, f = stdin.split(\"\\n\")\n    n = int(n)\n    a = [int(x) for x in a]\n    f = [int(x) for x in f.split()]\n\n    # Find the maximum subarray sum\n    max_subarray_sum = 0\n    for i in range(n):\n        subarray_sum = sum([f[x] for x in a[i:]])\n        if subarray_sum > max_subarray_sum:\n            max_subarray_sum = subarray_sum\n\n    return str(max_subarray_sum)"
    },
    {
        "number": 4011,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = stdin.split(\"\\n\")[1]\n    f = list(map(int, stdin.split(\"\\n\")[2].split(\" \")))\n    \n    # Find the maximum possible number by replacing the digits with the maximum value of the function\n    max_a = \"\".join([str(f[-1])] * n)\n    \n    # Check if replacing the digits in the number with the minimum value of the function gives a higher result\n    min_a = \"\".join([str(f[0])] * n)\n    \n    if int(min_a) > int(max_a):\n        max_a = min_a\n    \n    return max_a"
    },
    {
        "number": 4012,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def find_min_operations(a, b, c):\n        min_operations = float('inf')\n        for i in range(-1, 2):\n            for j in range(-1, 2):\n                for k in range(-1, 2):\n                    if i == 0 and j == 0 and k == 0:\n                        continue\n                    x = a + i\n                    y = b + j\n                    z = c + k\n                    if x <= 0 or y <= 0 or z <= 0 or x == y or y == z or z == x:\n                        continue\n                    if y % x == 0 and z % y == 0:\n                        min_operations = min(min_operations, abs(i) + abs(j) + abs(k))\n        return min_operations\n\n    test_cases = int(stdin.strip())\n    output = \"\"\n\n    for _ in range(test_cases):\n        a, b, c = map(int, stdin.strip().split())\n        min_operations = find_min_operations(a, b, c)\n        output += str(min_operations) + \"\\n\"\n        if min_operations == float('inf'):\n            output += \"0\" * 3 + \"\\n\"\n        else:\n            output += \" \".join(map(str, [a, b, c])) + \"\\n\"\n\n    return output"
    },
    {
        "number": 4012,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_test_cases = int(stdin.split(\"\\n\")[0])\n    result = \"\"\n    for i in range(1, num_test_cases + 1):\n        a, b, c = map(int, stdin.split(\"\\n\")[i].split())\n        if a > b:\n            a, b = b, a\n        if b > c:\n            b, c = c, b\n        if a > b:\n            a, b = b, a\n\n        if a + 1 == b and b + 1 == c:\n            result += f\"{0}\\n{a} {b} {c}\\n\"\n        else:\n            res = 0\n            if b % a != 0:\n                b += (a - b % a)\n                res += 1\n            if c % b != 0:\n                c += (b - c % b)\n                res += 1\n            result += f\"{res}\\n{a} {b} {c}\\n\"\n    return result\n\ninput_str = \"8\\n1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\"\noutput = solution(input_str)\nprint(output) "
    },
    {
        "number": 4012,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def is_divisible(a, b, c):\n        return b % a == 0 and c % b == 0\n\n    def find_triple(a, b, c):\n        res = 0\n        if not (1 <= a <= b <= c <= 10**4):\n            return res, 0, 0, 0\n\n        if b == c and is_divisible(a, b, c):\n            return res, a, b, c\n\n        while not is_divisible(a, b, c):\n            res += 1\n            if b < a:\n                b += 1\n            elif c < b:\n                c += 1\n            else:\n                a += 1\n\n        return res, a, b, c\n\n    t = int(stdin.readline())\n    for i in range(t):\n        a, b, c = map(int, stdin.readline().split())\n        res, A, B, C = find_triple(a, b, c)\n        print(res)\n        print(A, B, C)"
    },
    {
        "number": 4012,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def is_divisible(a, b, c):\n        return b % a == 0 and c % b == 0\n\n    def min_operations(a, b, c):\n        if b < a:\n            a, b = b, a\n        if c < b:\n            b, c = c, b\n        count = 0\n        if a < 0:\n            count += abs(a)\n            a = 1\n        if b < 0:\n            count += abs(b)\n            b = 1\n        if c < 0:\n            count += abs(c)\n            c = 1\n        while a * b < c:\n            b += 1\n            count += 1\n        return count\n\n    t = int(stdin.split()[0])\n    result = []\n    for i in range(t):\n        a, b, c = map(int, stdin.split()[1:])\n        if is_divisible(a, b, c):\n            result.append(0)\n            result.append(f\"{a} {b} {c}\")\n        else:\n            count = min_operations(a, b, c)\n            result.append(count)\n            a += count\n            b += count\n            c += count\n            result.append(f\"{a} {b} {c}\")\n    return \"\\n\".join(map(str, result))\n\ninput_str = \"\"\"8\n1 2 3\n123 321 456\n5 10 15\n15 18 21\n100 100 101\n1 22 29\n3 19 38\n6 30 46\"\"\"\nprint(solution(input_str)) "
    },
    {
        "number": 4012,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def min_operations(a: int, b: int, c: int) -> int:\n        if b % a != 0:\n            b += a - (b % a)\n        if c % b != 0:\n            c += b - (c % b)\n        return b - a\n\n    t = int(stdin.readline())\n    res = []\n\n    for _ in range(t):\n        a, b, c = map(int, stdin.readline().split())\n        min_ops = min_operations(a, b, c)\n        res.append((min_ops, a, b, c))\n\n    for r in res:\n        print(r[0])\n        print(r[1], r[2], r[3])"
    },
    {
        "number": 4012,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.split(\"\\n\")\n    output = []\n    \n    for i in range(1, int(test_cases[0]) + 1):\n        a, b, c = map(int, test_cases[i].split())\n        res = 0\n        A, B, C = a, b, c\n        \n        if a % b != 0:\n            res += b - a % b\n            A += res - a % b\n        if b % c != 0:\n            res += c - b % c\n            B += res - b % c\n            \n        output.append(res)\n        output.append(\" \".join(map(str, [A, B, C])))\n        \n    return \"\\n\".join(map(str, output))"
    },
    {
        "number": 4012,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.strip().split(\"\\n\")[0])\n    results = []\n\n    for i in range(1, test_cases + 1):\n        a, b, c = map(int, stdin.strip().split(\"\\n\")[i].split())\n        res = 0\n        A, B, C = a, b, c\n\n        if A % B != 0:\n            res += B - A % B\n            A += B - A % B\n\n        if A % C != 0:\n            res += C - A % C\n            A += C - A % C\n\n        if B % C != 0:\n            res += B\n            B = C\n\n        results.append((res, f\"{A} {B} {C}\\n\"))\n\n    for result in results:\n        print(result[0])\n        print(result[1])"
    },
    {
        "number": 4012,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    t = int(lines[0])\n    results = []\n\n    for i in range(1, t + 1):\n        a, b, c = map(int, lines[i].split())\n        operations = []\n\n        # If a is not divisible by b, increase b by 1\n        if b % a != 0:\n            operations.append((a, b, c, \"+b\"))\n\n        # If b is not divisible by c, increase c by 1\n        if c % b != 0:\n            operations.append((a, b, c, \"+c\"))\n\n        # If b is not divisible by a, decrease a by 1 and increase b and c by 1\n        if b % a != 0 and a > 1:\n            operations.append((a, b, c, \"-a+b+c\"))\n\n        # If b is not divisible by a and c, decrease a and increase b by 1\n        if b % a != 0 and c % b != 0 and a > 1:\n            operations.append((a, b, c, \"-a+b\"))\n\n        # If a is not divisible by b, decrease b by 1 and increase a and c by 1\n        if b % a != 0 and a > 1:\n            operations.append((a, b, c, \"-b+a+c\"))\n\n        # If a is not divisible by b and c, decrease b and c by 1\n        if b % a != 0 and c % b != 0:\n            operations.append((a, b, c, \"-b-c\"))\n\n        # If a is not divisible by b and c, decrease a, b and c by 1\n        if b % a != 0 and c % b != 0:\n            operations.append((a, b, c, \"-a-b-c\"))\n\n        min_operations = min(len(operations), key=lambda x: x[3])\n        result = (min_operations[3], a + min_operations[3], b + min_operations[3], c + min_operations[3])\n        results.append(result)\n\n    return \"\\n\".join(f\"{res} {a} {b} {c}\" for res, a, b, c in results)\n\ninput_str = \"\"\"8\n1 2 3\n123 321 456\n5 10 15\n15 18 21\n100 100 101\n1 22 29\n3 19 38\n6 30 46\"\"\"\n\nprint(solution(input_str)) "
    },
    {
        "number": 4012,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def find_solution(a: int, b: int, c: int) -> tuple:\n        if a <= 0 or b <= 0 or c <= 0:\n            return (0, (0, 0, 0))\n        if b % a == 0 and c % b == 0:\n            return (0, (a, b, c))\n        if b % a != 0 and c % b != 0:\n            if b % a < c % b:\n                return find_solution(a + 1, b, c)\n            else:\n                return find_solution(a, b + 1, c)\n        if b % a == 0 and c % b != 0:\n            return find_solution(a, b, c + 1)\n        else:\n            return find_solution(a - 1, b, c)\n\n    def print_solution(result: tuple) -> None:\n        print(result[0])\n        print(result[1][0], result[1][1], result[1][2])\n\n    cases = stdin.split('\\n')\n    t = int(cases.pop(0))\n\n    for i in range(t):\n        a, b, c = map(int, cases[i].split(' '))\n        result = find_solution(a, b, c)\n        print_solution(result)\n\ninput_data = '''\n8\n1 2 3\n123 321 456\n5 10 15\n15 18 21\n100 100 101\n1 22 29\n3 19 38\n6 30 46\n'''\nsolution(input_data) "
    },
    {
        "number": 4012,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    cases = stdin.split('\\n')\n    cases = [case.split() for case in cases]\n    cases = [list(map(int, case)) for case in cases if len(case) == 3]\n    output = []\n    for case in cases:\n        a, b, c = case\n        min_ops = float('inf')\n        for i in range(2 * (c - a) + 1):\n            for j in range(2 * (c - b) + 1):\n                if (b - a) % (i + j) == 0 and (c - b) % (b - a) == 0:\n                    min_ops = min(min_ops, i + j)\n        if min_ops == float('inf'):\n            output.append('-1')\n        else:\n            a += min_ops\n            b = a + i + 1\n            c = b + j + 1\n            output.append(f\"{min_ops}\\n{a} {b} {c}\")\n    return '\\n'.join(output)\n\ninput_str = '''8\n1 2 3\n123 321 456\n5 10 15\n15 18 21\n100 100 101\n1 22 29\n3 19 38\n6 30 46'''\n\nprint(solution(input_str)) "
    },
    {
        "number": 4013,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n    \n    min_instability = float(\"inf\")\n    for i in range(n):\n        new_a = a[:i] + a[i+1:]\n        instability = max(new_a) - min(new_a)\n        min_instability = min(min_instability, instability)\n    \n    return str(min_instability)"
    },
    {
        "number": 4013,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    instability = max(a) - min(a)\n    min_instability = instability\n\n    for i in range(n):\n        a_minus_i = [x for j, x in enumerate(a) if i != j]\n        instability_minus_i = max(a_minus_i) - min(a_minus_i)\n        min_instability = min(min_instability, instability_minus_i)\n\n    return str(min_instability)"
    },
    {
        "number": 4013,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    instability = max(a) - min(a)\n    min_instability = instability\n\n    for i in range(n):\n        temp = a[:i] + a[i+1:]\n        temp_instability = max(temp) - min(temp)\n        if temp_instability < min_instability:\n            min_instability = temp_instability\n\n    return str(min_instability)"
    },
    {
        "number": 4013,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    a.sort()\n    return str(min(a[-1] - a[0], a[-2] - a[1]))"
    },
    {
        "number": 4013,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    min_instability = float(\"inf\")\n    for i in range(n):\n        new_instability = max(a[:i] + a[i+1:]) - min(a[:i] + a[i+1:])\n        min_instability = min(min_instability, new_instability)\n\n    return str(min_instability)"
    },
    {
        "number": 4013,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    a = list(map(int, lines[1].split()))\n    \n    min_instability = float('inf')\n    for i in range(n):\n        new_array = a[:i] + a[i+1:]\n        instability = max(new_array) - min(new_array)\n        min_instability = min(min_instability, instability)\n    \n    return str(min_instability)"
    },
    {
        "number": 4013,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    if n == 1:\n        return \"0\"\n    \n    a.sort()\n    max_diff = a[-1] - a[0]\n    \n    for i in range(n-1):\n        diff = a[i+1] - a[0]\n        if diff < max_diff:\n            max_diff = diff\n    \n    return str(max_diff)\n\n\nwith open(\"input.txt\", \"r\") as stdin:\n    with open(\"output.txt\", \"w\") as stdout:\n        stdout.write(solution(stdin)) "
    },
    {
        "number": 4013,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    a.sort()\n    return str(a[-1] - a[0])"
    },
    {
        "number": 4013,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    a.sort()\n\n    min_instability = float('inf')\n    for i in range(1, n):\n        min_instability = min(min_instability, a[i] - a[i-1])\n\n    return str(min_instability)"
    },
    {
        "number": 4013,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    a.sort()\n    \n    min_instability = float('inf')\n    for i in range(n-1):\n        instability = a[i+1] - a[i]\n        if instability < min_instability:\n            min_instability = instability\n    \n    return str(min_instability)"
    },
    {
        "number": 4014,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    exams = []\n    for i in range(m):\n        s_i, d_i, c_i = map(int, stdin.split()[3*i+2:3*i+5])\n        exams.append((s_i, d_i, c_i))\n\n    schedule = [0] * (n + 1)\n    for s_i, d_i, c_i in exams:\n        if s_i == d_i:\n            return \"-1\"\n        for day in range(s_i, d_i - 1 + 1):\n            schedule[day] = max(schedule[day], c_i)\n        schedule[d_i - 1] = max(schedule[d_i - 1], m + 1)\n\n    for i in range(m):\n        s_i, d_i, c_i = exams[i]\n        if schedule[s_i - 1] == c_i:\n            schedule[s_i - 1] = i + 1\n\n    return \" \".join(map(str, schedule[1:]))"
    },
    {
        "number": 4014,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    exams = []\n    for line in stdin.split('\\n')[1:]:\n        s, d, c = map(int, line.split())\n        exams.append((s, d, c))\n\n    def check_exam(exam, day):\n        s, d, c = exam\n        return s <= day < d\n\n    def calculate_schedule(exams):\n        schedule = [0] * (n + 1)\n        for exam in exams:\n            for day in range(exam[1]):\n                if schedule[day] == 0:\n                    schedule[day] = exam[0]\n                    break\n        return schedule\n\n    def find_schedule(exams):\n        schedule = [0] * (n + 1)\n        for exam in exams:\n            for day in range(exam[1]):\n                if schedule[day] == 0 and not any(check_exam(exam2, day) for exam2 in exams if exam2 != exam):\n                    schedule[day] = exam[0]\n                    break\n        return schedule\n\n    schedule = calculate_schedule(exams)\n    if all(i == 0 for i in schedule):\n        return -1\n    else:\n        return \" \".join(map(str, find_schedule(exams)))"
    },
    {
        "number": 4014,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    exams = []\n    for line in stdin.split('\\n')[1:]:\n        s, d, c = map(int, line.split())\n        exams.append((s, d, c))\n\n    if len(exams) != m:\n        return \"-1\"\n\n    # Sort exams by the day they start\n    exams.sort(key=lambda x: x[0])\n\n    # Initialize schedule with all rest days\n    schedule = [0] * n\n\n    # Calculate the number of days needed to prepare for each exam\n    for s, d, c in exams:\n        for day in range(s, d - 1):\n            schedule[day] = -1\n        schedule[d - 1] = c\n\n    # Check if all exams can be passed\n    for exam_day in [exam[1] - 1 for exam in exams]:\n        if schedule[exam_day] == -1:\n            return \"-1\"\n\n    # Calculate the schedule\n    for day in range(n):\n        if schedule[day] == 0:\n            continue\n        for i, exam in enumerate(exams, start=1):\n            if exam[0] <= day < exam[1] - 1 and schedule[day] == -1:\n                schedule[day] = i\n                break\n\n    return ' '.join(str(day) for day in schedule)\n"
    },
    {
        "number": 4014,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    exams = []\n    for i in range(m):\n        s, d, c = map(int, stdin.split()[3*i+2:3*i+5])\n        exams.append((s, d, c))\n\n    # Check if it's possible to pass all exams\n    possible = True\n    for i in range(m):\n        for j in range(i+1, m):\n            if (exams[i][1] - exams[i][0] + 1) + (exams[j][1] - exams[j][0] + 1) > n:\n                possible = False\n                break\n        if not possible:\n            break\n\n    if not possible:\n        return \"-1\"\n\n    # Create a schedule\n    schedule = [0] * (n + 1)\n    for i in range(m):\n        s, d, c = exams[i]\n        schedule[s-1] = i+1\n        for j in range(s, d):\n            schedule[j] = i+1\n        schedule[d-1] = 0\n\n    # Check if the schedule is valid\n    for i in range(n):\n        if schedule[i] > 0 and schedule[i+1] > 0:\n            return \"-1\"\n\n    # Convert the schedule to the required format\n    result = []\n    for i in range(n):\n        if schedule[i] > 0:\n            result.append(schedule[i])\n        else:\n            result.append(0)\n    return \" \".join(map(str, result))"
    },
    {
        "number": 4014,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    exams = []\n    for i in range(m):\n        s, d, c = map(int, stdin.split()[2:5])\n        exams.append((s, d, c, i+1))\n\n    schedule = [0] * (n+1)\n    for exam in exams:\n        for i in range(exam[0], exam[1]-1):\n            schedule[i] = exam[3]\n        schedule[exam[1]-1] = 0\n\n    for exam in exams:\n        for i in range(exam[0], exam[1]-1):\n            if schedule[i] == 0:\n                schedule[i] = exam[3]\n                break\n\n    for i in range(n+1):\n        if schedule[i] == 0:\n            schedule[i] = (m+1)\n\n    return \" \".join(map(str, schedule))\n\n\ndef"
    },
    {
        "number": 4014,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    exams = []\n    for i in range(m):\n        s_i, d_i, c_i = map(int, stdin.split()[3*i:3*i+3])\n        exams.append((s_i, d_i, c_i))\n\n    schedule = [0] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(m):\n            if exams[j][0] <= i < exams[j][1]:\n                if schedule[i] == 0:\n                    schedule[i] = j + 1\n                else:\n                    return \"-1\"\n            elif exams[j][1] == i:\n                schedule[i] = 0\n\n    return \" \".join(map(str, schedule))\n\n\ndef"
    },
    {
        "number": 4014,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    exams = []\n    for _ in range(m):\n        s, d, c = map(int, stdin.split()[2:])\n        exams.append((s, d, c))\n\n    def is_possible(day: int) -> bool:\n        current_exams = [e for e in exams if e[0] <= day < e[1]]\n        if not current_exams:\n            return True\n        if len(current_exams) > 1:\n            return False\n        exam = current_exams[0]\n        if exam[2] > 1:\n            return False\n        if exam[1] - exam[0] != exam[2]:\n            return False\n        if not is_possible(exam[1]):\n            return False\n        if not is_possible(exam[0]):\n            return False\n        return True\n\n    result = [0] * (n + 1)\n    for day in range(1, n + 1):\n        if is_possible(day):\n            for exam in exams:\n                if exam[0] <= day < exam[1]:\n                    result[day] = exam[2] + 1\n                    break\n            else:\n                result[day] = 0\n        else:\n            result[day] = -1\n    return \" \".join(map(str, result[1:])) "
    },
    {
        "number": 4014,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    exams = []\n    for i in range(m):\n        s_i, d_i, c_i = map(int, stdin.split()[3*i+2:3*(i+1)])\n        exams.append((s_i, d_i, c_i))\n\n    # Check if there are enough days to prepare for all exams\n    total_days_to_prepare = sum(c_i for _, _, c_i in exams)\n    if n < total_days_to_prepare:\n        return \"-1\"\n\n    # Sort exams by the day of the exam\n    exams.sort(key=lambda x: x[1])\n\n    # Initialize variables for the schedule\n    schedule = [0] * n\n    current_day = 1\n    for s_i, d_i, c_i in exams:\n        while current_day < s_i:\n            schedule[current_day] = 0\n            current_day += 1\n\n        # Check if the current day is a day of some exam\n        if schedule[current_day - 1] != 0:\n            return \"-1\"\n\n        # Mark the current day as a day of the exam\n        schedule[current_day - 1] = (m + 1)\n\n        # Find a day to prepare for the exam\n        days_to_prepare = 0\n        while days_to_prepare < c_i:\n            current_day += 1\n            if schedule[current_day - 1] == 0:\n                schedule[current_day - 1] = i + 1\n                days_to_prepare += 1\n\n    return \" \".join(map(str, schedule)) "
    },
    {
        "number": 4014,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    exams = []\n    for i in range(m):\n        s, d, c = map(int, stdin.split()[3*i+2:3*(i+1)])\n        exams.append((s, d, c))\n    \n    exams.sort(key=lambda x: x[1])\n    \n    def find_schedule(exams: List[Tuple[int, int, int]]) -> List[int]:\n        schedule = [0] * n\n        current_exam = 0\n        current_day = 1\n        \n        while current_exam < len(exams):\n            exam = exams[current_exam]\n            s, d, c = exam\n            if s == current_day:\n                schedule[s-1] = current_exam + 1\n                current_day = d - c\n            else:\n                current_day = d\n            current_exam += 1\n            \n        if current_day > n:\n            return []\n        else:\n            return schedule\n    \n    schedule = find_schedule(exams)\n    \n    if not schedule:\n        return \"-1\"\n    else:\n        result = []\n        for i in range(n):\n            if schedule[i] == 0:\n                result.append(0)\n            elif schedule[i] > 0:\n                result.append(schedule[i])\n            else:\n                result.append(0)\n        return \" \".join(map(str, result))"
    },
    {
        "number": 4014,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def can_pass_exam(schedule: List[int], exam_index: int) -> bool:\n        exam_start = s[exam_index]\n        exam_end = d[exam_index]\n        exam_preparation_days = c[exam_index]\n        for day in range(exam_start, exam_end - 1):\n            if schedule[day] != exam_index + 1:\n                return False\n            if schedule[day + 1] != 0:\n                return False\n        return True\n\n    def get_schedule(n: int, m: int, s: List[int], d: List[int], c: List[int]) -> List[int]:\n        schedule = [0] * n\n        for i in range(m):\n            for day in range(s[i], d[i] - 1):\n                if schedule[day] != 0:\n                    return None\n                schedule[day] = i + 1\n        return schedule\n\n    def print_schedule(schedule: List[int]) -> str:\n        return \" \".join(map(str, schedule))\n\n    n, m = list(map(int, stdin.split()))\n    s = []\n    d = []\n    c = []\n\n    for _ in range(m):\n        s.append(int(input()))\n        d.append(int(input()))\n        c.append(int(input()))\n\n    schedule = get_schedule(n, m, s, d, c)\n    if schedule is None:\n        return \"-1\"\n\n    for i in range(m):\n        if not can_pass_exam(schedule, i):\n            return \"-1\"\n\n    return print_schedule(schedule)\n"
    },
    {
        "number": 4015,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n\n    if n > m:\n        return \"-1\"\n\n    count = 0\n    while n != m:\n        if n < m:\n            if m % 3 == 0:\n                n *= 3\n                count += 1\n            else:\n                n *= 2\n                count += 1\n        else:\n            if n % 2 == 0:\n                n //= 2\n                count += 1\n            else:\n                return \"-1\"\n\n    return str(count)\n"
    },
    {
        "number": 4015,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n > m:\n        return -1\n\n    moves = 0\n    while n < m:\n        if m % 2 == 0:\n            n *= 2\n            moves += 1\n        elif m % 3 == 0:\n            n *= 3\n            moves += 1\n        else:\n            return -1\n\n    return moves\n\n\ndef"
    },
    {
        "number": 4015,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    \n    if n > m:\n        return -1\n    \n    count = 0\n    while n < m:\n        count += 1\n        if n % 2 == 0:\n            n *= 2\n        else:\n            n *= 3\n    \n    return count"
    },
    {
        "number": 4015,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n > m:\n        return -1\n\n    moves = 0\n    while n != m:\n        if n < m:\n            if m % 2 == 0:\n                m //= 2\n            else:\n                m *= 3\n            moves += 1\n        else:\n            if n % 3 == 0:\n                n //= 3\n            else:\n                n //= 2\n            moves += 1\n\n    return str(moves)\n"
    },
    {
        "number": 4015,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m:\n        return \"0\"\n    elif n > m:\n        return \"-1\"\n\n    count = 0\n    while n != m:\n        if n * 3 <= m:\n            n *= 3\n            count += 1\n        else:\n            n *= 2\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4015,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    if n == m:\n        return \"0\"\n\n    count = 0\n    while n < m:\n        n *= 2\n        count += 1\n\n    if n == m:\n        return str(count)\n\n    return \"-1\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m:\n        return \"0\"\n    \n    def is_power_of_two(num: int) -> bool:\n        return num & (num - 1) == 0\n    \n    def count_moves(start: int, end: int) -> int:\n        if start == end:\n            return 0\n        if start >= end:\n            return -1\n        if is_power_of_two(start):\n            return count_moves(start * 2, end) + 1\n        return count_moves(start * 3, end) + 1\n\n    return str(count_moves(n, m))"
    },
    {
        "number": 4015,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n\n    def is_transformable(n: int, m: int) -> bool:\n        if n == m:\n            return True\n        elif m < n:\n            return False\n        elif n == 1:\n            return True\n        elif m % 2 == 1:\n            return False\n        elif n % 2 == 0:\n            return is_transformable(n // 2, m)\n        else:\n            return is_transformable(n * 2, m) or is_transformable(n * 3, m)\n\n    if is_transformable(n, m):\n        count = 0\n        while n != m:\n            if m % 2 == 0 and n % 2 == 0:\n                n //= 2\n            elif n % 2 == 1:\n                n *= 3\n            count += 1\n        return str(count)\n    else:\n        return \"-1\""
    },
    {
        "number": 4015,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n\n    def count_moves(start: int, end: int) -> int:\n        if start == end:\n            return 0\n        if start > end:\n            return -1\n        if start * 2 == end or start * 3 == end:\n            return 1\n        return -1\n\n    moves = 0\n    while n != m:\n        moves += count_moves(n, m)\n        if moves == -1:\n            return \"-1\"\n        n *= 2 if n * 2 == m else 3\n\n    return str(moves)"
    },
    {
        "number": 4015,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n > m:\n        n, m = m, n\n\n    if n == m:\n        return \"0\"\n\n    if n == 1:\n        return str(m - 1)\n\n    count = 0\n    while n != m:\n        count += 1\n        if n % 2 == 0:\n            n //= 2\n        else:\n            if 3 * n <= m:\n                n *= 3\n            else:\n                return \"-1\"\n    return str(count)"
    },
    {
        "number": 4016,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin.split('\\n')[1]\n    \n    s = t * k\n    for i in range(k):\n        s = s[:i] + t + s[i + n:]\n    \n    return s"
    },
    {
        "number": 4016,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin.split()[1]\n    \n    s = t * k\n    if k == 1:\n        return s\n    \n    for i in range(1, k):\n        s = t * i + s\n        \n    return s\n\n\ndef"
    },
    {
        "number": 4016,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = input().strip()\n    \n    s = t * (k // n)\n    if k % n != 0:\n        s += t[:k % n]\n    \n    return s"
    },
    {
        "number": 4016,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = input()\n\n    s = t * k\n    while len(s) < len(t) * k:\n        s += t\n\n    return s[:len(t) * k]"
    },
    {
        "number": 4016,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin.split('\\n')[-1]\n    \n    if n == 1:\n        return t * k\n    \n    s = t\n    for i in range(k - 1):\n        s += t\n        \n    return s\n    \ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4016,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.splitlines()[0].split())\n    t = stdin.splitlines()[1]\n\n    # Initialize string s with t repeated k times\n    s = t * k\n\n    # Calculate the positions where t appears in s\n    positions = [i for i in range(len(s) - n + 1) if s[i:i + n] == t]\n\n    # If the number of positions is less than k, it means we need to add more t's to s\n    if len(positions) < k:\n        # Calculate the number of t's we need to add to s to have at least k positions\n        extra_t = k - len(positions)\n\n        # Calculate the length of the new part of s that we need to add\n        new_len = len(s) + extra_t * n\n\n        # Calculate the positions of the new part of s that we need to add\n        new_positions = [i for i in range(len(s), new_len - n + 1) if s[i:i + n] == t]\n\n        # Add the new part of s to s\n        s += t * (extra_t + len(new_positions))\n\n    return s"
    },
    {
        "number": 4016,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin.split('\\n')[1]\n\n    s = t * k\n    return s"
    },
    {
        "number": 4016,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.splitlines()[0].split()))\n    t = stdin.splitlines()[1]\n    \n    # Generate all possible combinations of substrings\n    possible_substrings = []\n    for i in range(len(t)):\n        for j in range(i+1, len(t)+1):\n            possible_substrings.append(t[i:j])\n    \n    # Check if the target substring can be formed by concatenating a subset of the possible substrings\n    for i in range(len(possible_substrings)**k):\n        # Generate the binary representation of i\n        binary_representation = format(i, f'0{len(possible_substrings)**k}b')\n        \n        # Convert the binary representation to a list of indices\n        indices = [int(binary_representation[j], 2) for j in range(len(possible_substrings)**k)]\n        \n        # Check if the target substring can be formed by concatenating the selected substrings\n        concatenated_substring = ''.join([possible_substrings[indices[j]] for j in range(len(indices))])\n        if concatenated_substring == t*k:\n            return concatenated_substring\n    \n    # If no solution is found, return an empty string\n    return ''"
    },
    {
        "number": 4016,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin.split()[1]\n    s = t * (k // len(t) + 1)\n    return s[:n * k]"
    },
    {
        "number": 4016,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    t = stdin.readline().strip()\n    \n    s = t * k\n    return s[:-n] + t"
    },
    {
        "number": 4017,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    arr = list(map(int, stdin.split('\\n')[1].split()))\n    \n    nice_indices = []\n    for i in range(n):\n        new_arr = arr[:i] + arr[i+1:]\n        if sum(new_arr) == sum(arr[:i]) + sum(arr[i+1:]):\n            nice_indices.append(i+1)\n    \n    return (\n        f\"{len(nice_indices)}\\n\"\n        f\"{' '.join(map(str, nice_indices))}\"\n    )"
    },
    {
        "number": 4017,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    \n    nice_indices = []\n    \n    for i in range(n):\n        new_array = a[:i] + a[i+1:]\n        if sum(new_array) == sum(new_array) - a[i]:\n            nice_indices.append(i+1)\n    \n    result = \"\"\n    if len(nice_indices) == 0:\n        result += \"0\\n\"\n    else:\n        result += str(len(nice_indices)) + \"\\n\"\n        result += \" \".join(map(str, nice_indices)) + \"\\n\"\n    \n    return result"
    },
    {
        "number": 4017,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    nice_indices = []\n    for i in range(n):\n        new_a = a[:i] + a[i+1:]\n        if sum(new_a) == sum(set(new_a)):\n            nice_indices.append(i+1)\n\n    result = str(len(nice_indices)) + '\\n'\n    result += ' '.join(map(str, nice_indices))\n    return result\n\n\nwith open('input.txt', 'r') as stdin, open('output.txt', 'w') as stdout:\n    stdout.write(solution(stdin))\n"
    },
    {
        "number": 4017,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    nice_indices = []\n    \n    for i in range(n):\n        new_array = a[:i] + a[i+1:]\n        if sum(new_array) == sum(a) - a[i]:\n            nice_indices.append(i+1)\n    \n    return (str(len(nice_indices)) + \"\\n\" + \" \".join(map(str, nice_indices))) if nice_indices else \"0\""
    },
    {
        "number": 4017,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    nice_indices = []\n    \n    for i in range(n):\n        temp_array = a[:i] + a[i+1:]\n        if sum(temp_array) == sum(a[i+1:]):\n            nice_indices.append(i+1)\n    \n    result = [len(nice_indices), \" \".join(map(str, nice_indices))]\n    \n    return \"\\n\".join(map(str, result))\n\n\ninput_data = \"\"\"5\n2 5 1 2 2\n8 3 5 2\n5\n2 1 2 4 3\"\"\"\n\nprint(solution(input_data)) "
    },
    {
        "number": 4017,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    nice_indices = []\n\n    for j in range(n):\n        a_copy = a.copy()\n        removed_element = a_copy.pop(j)\n        if sum(a_copy) == sum(a) - removed_element:\n            nice_indices.append(j + 1)\n\n    return f\"{len(nice_indices)}\\n{' '.join(map(str, nice_indices))}\""
    },
    {
        "number": 4017,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    nice_indices = []\n    \n    for i in range(n):\n        remaining_elements = [a[j] for j in range(n) if j != i]\n        if sum(remaining_elements) == sum(a) - a[i]:\n            nice_indices.append(i + 1)\n    \n    if len(nice_indices) == 0:\n        return \"0\"\n    else:\n        return str(len(nice_indices)) + \"\\n\" + \" \".join(map(str, nice_indices))"
    },
    {
        "number": 4017,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def is_good(arr: List[int]) -> bool:\n        total = sum(arr)\n        return any(total - x == sum(arr[:i] + arr[i+1:]) for i, x in enumerate(arr))\n\n    n = int(stdin.split(\"\\n\")[0])\n    arr = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    nice_indices = []\n    for i in range(n):\n        new_arr = arr[:i] + arr[i+1:]\n        if is_good(new_arr):\n            nice_indices.append(i+1)\n\n    result = [str(len(nice_indices))]\n    result.extend(map(str, nice_indices))\n    return \"\\n\".join(result)"
    },
    {
        "number": 4017,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    nice_indices = []\n    total_sum = sum(a)\n\n    for i in range(n):\n        if total_sum == a[i]:\n            nice_indices.append(i + 1)\n        else:\n            a[i] -= 1\n            total_sum -= a[i]\n            if total_sum == sum(a[:i]) + sum(a[i+1:]):\n                nice_indices.append(i + 1)\n            a[i] += 1\n            total_sum += a[i]\n\n    return str(len(nice_indices)) + \"\\n\" + \" \".join(map(str, nice_indices))\n"
    },
    {
        "number": 4017,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    \n    nice_indices = []\n    for i in range(n):\n        good_sum = sum(a) - a[i]\n        if good_sum == a[i] or good_sum in a[i+1:]:\n            nice_indices.append(i+1)\n    \n    return str(len(nice_indices)) + \"\\n\" + \" \".join(map(str, nice_indices))"
    },
    {
        "number": 4018,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(input())\n    min_cost = float('inf')\n    for i in range(1, 2**n):\n        subseq = []\n        for j in range(n):\n            if (i >> j) & 1:\n                subseq.append(s[j])\n        if len(set(subseq)) == k:\n            min_cost = min(min_cost, n - len(subseq))\n    return -1 if min_cost == float('inf') else min_cost\n\ndef"
    },
    {
        "number": 4018,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(input())\n\n    def is_subsequence(t):\n        j = 0\n        for c in s:\n            if c == t[j]:\n                j += 1\n                if j == len(t):\n                    return True\n        return False\n\n    def cost(t):\n        return n - len(t)\n\n    min_cost = float('inf')\n    for i in range(1, n + 1):\n        for j in range(n - i + 1):\n            t = s[j:j + i]\n            if is_subsequence(t):\n                min_cost = min(min_cost, cost(t))\n\n    if min_cost == float('inf'):\n        return '-1'\n    else:\n        return str(min_cost)"
    },
    {
        "number": 4018,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = input().strip()\n    if len(set(s)) < k:\n        return -1\n    else:\n        return n"
    },
    {
        "number": 4018,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(stdin.split()[1])\n    min_cost = float('inf')\n    visited = set()\n    queue = [(0, n, s)]\n\n    while queue:\n        cost, size, state = queue.pop(0)\n        if size == k:\n            min_cost = min(min_cost, cost)\n            continue\n        if (size, tuple(state)) in visited:\n            continue\n        visited.add((size, tuple(state)))\n\n        for i in range(len(state)):\n            for j in range(i + 1, len(state) + 1):\n                subseq = state[i:j]\n                subseq_cost = len(subseq)\n                new_state = state[:i] + state[j:]\n                new_size = size - subseq_cost\n                new_cost = cost + subseq_cost\n                queue.append((new_cost, new_size, new_state))\n\n    return min_cost if min_cost != float('inf') else -1"
    },
    {
        "number": 4018,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(input())\n\n    def subseq(i, j):\n        if i == j:\n            return set([s[i:j+1]])\n        return set(subseq(i, k) for k in range(j, i-1, -1))\n\n    def cost(t):\n        return n - len(t)\n\n    def is_valid(i, j, t):\n        if i == j:\n            return True\n        return i in t or j in t\n\n    def min_cost(i, j, t, visited):\n        if (i, j, tuple(sorted(t))) in visited:\n            return visited[(i, j, tuple(sorted(t)))]\n        if len(t) == k:\n            visited[(i, j, tuple(sorted(t)))] = cost(t)\n            return visited[(i, j, tuple(sorted(t)))]\n        min_c = float('inf')\n        for sub in subseq(i, j):\n            for t_new in set(t):\n                if is_valid(sub[0], sub[-1], t_new):\n                    min_c = min(min_c, min_cost(i, j, t_new | sub, visited))\n        visited[(i, j, tuple(sorted(t)))] = min_c\n        return visited[(i, j, tuple(sorted(t)))]\n\n    visited = {}\n    result = min_cost(0, len(s) - 1, set(), visited)\n    return result if result != float('inf') else -1"
    },
    {
        "number": 4018,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, s = stdin.split()\n    n, k = int(n), int(k)\n    if k > 26**n:\n        return \"-1\"\n    return str(n * k)\n\ninput_data = input(\"Enter n and k separated by a space, followed by the string s: \")\nresult = solution(input_data)\nprint(result) "
    },
    {
        "number": 4018,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    s = stdin.split()[2]\n\n    def generate_subsequences(s: str, n: int, k: int) -> int:\n        subsequences = set()\n        for i in range(n):\n            for j in range(i, n):\n                subsequences.add(s[i:j+1])\n        return len(subsequences)\n\n    if generate_subsequences(s, n, k) < k:\n        return \"-1\"\n\n    subsequences = set()\n    for i in range(n):\n        for j in range(i, n):\n            subsequences.add(s[i:j+1])\n    subsequences = list(subsequences)\n    subsequences.sort(key=lambda x: (len(x), x), reverse=True)\n\n    total_cost = 0\n    for subsequence in subsequences:\n        if k == 0:\n            break\n        total_cost += n - len(subsequence)\n        k -= 1\n\n    return str(total_cost)\n"
    },
    {
        "number": 4018,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    s = input()\n    # Your code here\n    return \"\""
    },
    {
        "number": 4018,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, s = map(int, stdin.split())\n    subsequences = set()\n    total_cost = 0\n    s = sorted(s)\n\n    def add_subsequence(start, end):\n        nonlocal total_cost\n        subsequence = ''.join(s[start:end+1])\n        if subsequence not in subsequences:\n            subsequences.add(subsequence)\n            total_cost += end - start + 1\n\n    add_subsequence(0, n-1)\n\n    if len(subsequences) < k:\n        return -1\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            add_subsequence(i, j-1)\n            if len(subsequences) == k:\n                break\n        if len(subsequences) == k:\n            break\n\n    return total_cost\n\ndef"
    },
    {
        "number": 4018,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(stdin.split()[1])\n    res = float('inf')\n    for mask in range(1<<n):\n        subseq = [s[i] for i in range(n) if (mask & (1<<i))]\n        if len(subseq) != len(set(subseq)):\n            continue\n        if len(subseq) == k:\n            return str(n - len(subseq))\n        if len(subseq) > k:\n            continue\n        res = min(res, n - len(subseq))\n    return str(res) if res != float('inf') else \"-1\""
    },
    {
        "number": 4019,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def read_input(stdin: str):\n        n, m, D = map(int, stdin.split()[:3])\n        edges = []\n        for line in stdin.split('\\n')[3:]:\n            if line:\n                v, u = map(int, line.split())\n                edges.append((v, u))\n        return n, m, D, edges\n\n    def spanning_tree(n, m, D, edges):\n        # Create an adjacency list for the graph\n        adj_list = [[] for _ in range(n)]\n        for v, u in edges:\n            adj_list[v - 1].append(u - 1)\n            adj_list[u - 1].append(v - 1)\n\n        def dfs(start, visited, parent):\n            visited[start] = True\n            for u in adj_list[start]:\n                if not visited[u]:\n                    if dfs(u, visited, start):\n                        return True\n                elif u != parent:\n                    return True\n            return False\n\n        visited = [False] * n\n        for i in range(n):\n            if not visited[i]:\n                if dfs(i, visited, -1) or D != 1:\n                    return False\n        return True\n\n    n, m, D, edges = read_input(stdin)\n    if spanning_tree(n, m, D, edges):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4019,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, D = map(int, stdin.split()[:3])\n    adj_list = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        u, v = map(int, stdin.split()[-2:])\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n    \n    def dfs(v, visited, parent):\n        visited[v] = True\n        if v == 1:\n            if len(adj_list[v]) != D:\n                return False\n        for u in adj_list[v]:\n            if not visited[u]:\n                if not dfs(u, visited, v):\n                    return False\n        return True\n    \n    for i in range(1, n + 1):\n        if dfs(i, [False] * (n + 1), None):\n            result = [\"YES\"]\n            visited = [False] * (n + 1)\n            dfs(1, visited, None)\n            edges = set()\n            for i in range(1, n + 1):\n                for j in adj_list[i]:\n                    if visited[i] and visited[j] and (j, i) not in edges:\n                        edges.add((i, j))\n            result.extend([f\"{u} {v}\" for u, v in sorted(edges)])\n            return \"\\n\".join(result)\n    return \"NO\""
    },
    {
        "number": 4019,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, D = map(int, stdin.split()[:3])\n    adj_list = [[] for _ in range(n)]\n    edges = set()\n\n    for _ in range(m):\n        v, u = map(int, stdin.split()[3:])\n        adj_list[v - 1].append(u - 1)\n        adj_list[u - 1].append(v - 1)\n        edges.add(tuple(sorted([v, u])))\n\n    def dfs(start: int, visited: set, parent: int) -> bool:\n        visited.add(start)\n        if start == 0 and len(visited) > 1 and adj_list[0][0] in visited:\n            return False\n\n        for neighbor in adj_list[start]:\n            if neighbor not in visited:\n                if not dfs(neighbor, visited.copy(), start):\n                    return False\n        return True\n\n    spanning_tree = []\n    for edge in edges:\n        if D == 1:\n            break\n        visited = set()\n        if dfs(edge[0], visited, -1):\n            spanning_tree.append(edge)\n            D -= 1\n\n    if D == 1:\n        if len(spanning_tree) == n - 1:\n            return \"YES\\n\" + '\\n'.join([f\"{v + 1} {u + 1}\" for (v, u) in spanning_tree])\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"\n\n\ndef"
    },
    {
        "number": 4019,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, D = map(int, stdin.split()[:3])\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:m+1]]\n    \n    def dfs(start, visited, graph):\n        visited[start] = True\n        for v in graph[start]:\n            if not visited[v]:\n                dfs(v, visited, graph)\n    \n    def find_spanning_tree(start, visited, graph):\n        dfs(start, visited, graph)\n        if all(visited):\n            return True\n        for i, edge in enumerate(edges):\n            if not visited[edge[0]] and not visited[edge[1]]:\n                visited[edge[0]] = True\n                visited[edge[1]] = True\n                if find_spanning_tree(start, visited, graph):\n                    return True\n                visited[edge[0]] = False\n                visited[edge[1]] = False\n        return False\n    \n    graph = [[] for _ in range(n)]\n    for edge in edges:\n        graph[edge[0]].append(edge[1])\n        graph[edge[1]].append(edge[0])\n    \n    for start in range(1, n):\n        if find_spanning_tree(start, [False] * n, graph):\n            break\n    else:\n        return \"NO\\n\"\n    \n    result = []\n    for edge in edges:\n        if graph[edge[0]] == [edge[1]] or graph[edge[1]] == [edge[0]]:\n            result.append(edge)\n    \n    if D == 2:\n        return \"YES\\n\" + \" \".join(map(str, result)) + \"\\n\"\n    else:\n        return \"NO\\n\""
    },
    {
        "number": 4019,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, D = map(int, stdin.split()[:3])\n    edges = [tuple(map(int, line.split())) for line in stdin.split(\"\\n\")[1:]]\n\n    def dfs(start, used, graph):\n        if len(used) == n:\n            return True\n        for v in graph[start]:\n            if v not in used:\n                used.add(v)\n                if dfs(v, used, graph):\n                    return True\n                used.remove(v)\n        return False\n\n    def find_spanning_tree(D):\n        graph = [[] for _ in range(n)]\n        for v, u in edges:\n            graph[v - 1].append(u - 1)\n            graph[u - 1].append(v - 1)\n\n        for i in range(n):\n            if dfs(i, {i}, graph) and len([e for e in edges if e[0] == 1 or e[1] == 1]) == D - 1:\n                return True\n        return False\n\n    if find_spanning_tree(D):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4019,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split()[:3])\n    edges = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    \n    # Check if there is a spanning tree with the required degree\n    degrees = [0] * n\n    degrees[0] = d\n    visited = [False] * n\n    visited[0] = True\n    queue = [0]\n    \n    while queue:\n        v = queue.pop(0)\n        for u in range(n):\n            if (v, u) in edges or (u, v) in edges and not visited[u]:\n                degrees[u] += degrees[v]\n                visited[u] = True\n                queue.append(u)\n    \n    if degrees[1:] == [d] * (n-1):\n        # There is a spanning tree with the required degree\n        # Construct the tree\n        visited = [False] * n\n        visited[0] = True\n        tree = []\n        \n        while not all(visited):\n            for v in range(n):\n                if not visited[v]:\n                    for u in range(n):\n                        if (v, u) in edges or (u, v) in edges and not visited[u]:\n                            tree.append((v+1, u+1))\n                            visited[u] = True\n                            break\n        \n        return \"YES\\n\" + '\\n'.join(f\"{u} {v}\" for u, v in tree)\n    \n    else:\n        return \"NO\""
    },
    {
        "number": 4019,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split()[:3])\n    edges = [tuple(map(int, line.split())) for line in stdin.split(\"\\n\")[2:-1]]\n\n    adj_list = [[] for _ in range(n)]\n    for edge in edges:\n        adj_list[edge[0] - 1].append(edge[1] - 1)\n        adj_list[edge[1] - 1].append(edge[0] - 1)\n\n    def dfs(node: int, visited: set, parent: int = None) -> bool:\n        visited.add(node)\n        if node == 0:\n            return len(visited) == n and adj_list[0][0] in visited\n        for neighbor in adj_list[node]:\n            if neighbor not in visited:\n                if dfs(neighbor, visited, node):\n                    return True\n        return False\n\n    if d == 1:\n        return \"NO\"\n\n    for node in range(n):\n        if len(adj_list[node]) != d - 1:\n            continue\n        visited = set()\n        if dfs(node, visited):\n            spanning_tree = []\n            for edge in edges:\n                if edge[0] == node + 1 and edge[1] in visited:\n                    spanning_tree.append((edge[0], edge[1]))\n                elif edge[1] == node + 1 and edge[0] in visited:\n                    spanning_tree.append((edge[1], edge[0]))\n            return \"YES\\n\" + \"\\n\".join(f\"{x} {y}\" for x, y in spanning_tree)\n\n    return \"NO\""
    },
    {
        "number": 4019,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, D = map(int, stdin.split()[0:3])\n    edges = []\n    for line in stdin.split('\\n')[1:]:\n        v, u = map(int, line.split())\n        if v != u:\n            edges.append((v, u))\n\n    def dfs(start, graph, visited):\n        visited.add(start)\n        for v in graph[start]:\n            if v not in visited:\n                dfs(v, graph, visited)\n\n    def check_spanning_tree(start, graph, visited, degree):\n        dfs(start, graph, visited)\n        return degree == len(visited) - 1\n\n    def create_graph(edges):\n        graph = {i: set() for i in range(1, n + 1)}\n        for v, u in edges:\n            graph[v].add(u)\n            graph[u].add(v)\n        return graph\n\n    def print_spanning_tree(start, graph, visited, degree):\n        dfs(start, graph, visited)\n        if degree == len(visited) - 1:\n            print(\"YES\")\n            for i in range(1, n):\n                for v in graph[i]:\n                    if v in visited:\n                        print(i, v)\n        else:\n            print(\"NO\")\n\n    graph = create_graph(edges)\n    visited = set()\n    for start in range(1, n + 1):\n        if start not in visited:\n            if check_spanning_tree(start, graph, visited, D):\n                print_spanning_tree(start, graph, visited, D)\n                return\n\n    print(\"NO\")\n\ndef"
    },
    {
        "number": 4019,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, D = map(int, stdin.split()[:3])\n    edges = stdin.split()[3:]\n    edges = [(int(u), int(v)) for u, v in zip(edges[0::2], edges[1::2])]\n\n    def find_spanning_tree(graph, D):\n        def dfs(graph, visited, current, path, result):\n            visited[current] = True\n            path.append(current)\n\n            for neighbor in graph[current]:\n                if not visited[neighbor]:\n                    dfs(graph, visited, neighbor, path, result)\n\n            path.pop()\n            visited[current] = False\n\n        def check_degree(graph, D):\n            visited = [False] * n\n            dfs(graph, visited, 1, [], [])\n            return visited.count(True) == D\n\n        for i in range(n):\n            for j in range(i + 1, n):\n                graph[i].add(j)\n                graph[j].add(i)\n\n        spanning_tree = []\n        result = check_degree(graph, D)\n        return result, spanning_tree\n\n    graph = [set() for _ in range(n)]\n\n    for u, v in edges:\n        graph[u].add(v)\n        graph[v].add(u)\n\n    result, spanning_tree = find_spanning_tree(graph, D)\n\n    if not result:\n        return \"NO\"\n    else:\n        output = \"YES\"\n        for u, v in spanning_tree:\n            output += f\"\\n{u} {v}\"\n        return output"
    },
    {
        "number": 4019,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, D = map(int, stdin.split()[:3])\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[2:]]\n\n    # Initialize the adjacency matrix and degree of each vertex\n    adj = [[0] * n for _ in range(n)]\n    degree = [0] * n\n\n    for edge in edges:\n        v, u = edge\n        adj[v - 1][u - 1] = adj[u - 1][v - 1] = 1\n        degree[v - 1] += 1\n        degree[u - 1] += 1\n\n    # Check if there is a spanning tree with the required degree\n    for i in range(n):\n        if degree[i] == D and i == 0:\n            break\n    else:\n        return \"NO\"\n\n    # DFS algorithm to find the spanning tree\n    def dfs(v: int, visited: set):\n        visited.add(v)\n        for u in range(n):\n            if adj[v][u] and u not in visited:\n                dfs(u, visited)\n\n    spanning_tree = []\n    dfs(0, spanning_tree)\n\n    # Reconstruct the spanning tree edges\n    result = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            if adj[i][j]:\n                if i in spanning_tree and j in spanning_tree:\n                    result.append((i + 1, j + 1))\n\n    return \"YES\\n\" + \"\\n\".join(f\"{v} {u}\" for v, u in result)"
    },
    {
        "number": 4020,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h_1, m_1 = [int(x) for x in stdin.split()[0].split(':')]\n    h_2, m_2 = [int(x) for x in stdin.split()[1].split(':')]\n\n    total_minutes = (h_2 - h_1) * 60 + (m_2 - m_1)\n    midpoint = total_minutes // 2\n\n    h_3 = h_1 + midpoint // 60\n    m_3 = (midpoint % 60)\n\n    return f\"{h_3:02d}:{m_3:02d}\""
    },
    {
        "number": 4020,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, stdin[0].split(\":\"))\n    h2, m2 = map(int, stdin[1].split(\":\"))\n    \n    total_minutes = (h2 * 60 + m2) - (h1 * 60 + m1)\n    midpoint_minutes = total_minutes // 2\n    \n    mid_h = midpoint_minutes // 60\n    mid_m = midpoint_minutes % 60\n    \n    if h1 + mid_h >= 24:\n        mid_h -= 24\n    elif h1 + mid_h < 0:\n        mid_h += 24\n    \n    return f\"{mid_h:02}:{mid_m:02}\"\n\ninputs = [\n    [\"10:00\", \"11:00\"],\n    [\"11:10\", \"11:12\"],\n    [\"01:02\", \"03:02\"],\n]\n\nfor input_str in inputs:\n    print(solution(input_str)) "
    },
    {
        "number": 4020,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1, h2, m2 = map(int, stdin.split())\n\n    total_minutes = (h2 * 60 + m2) - (h1 * 60 + m1)\n    midpoint = total_minutes // 2 + (h1 * 60 + m1)\n\n    mid_h, mid_m = divmod(midpoint, 60)\n\n    return f\"{mid_h:02d}:{mid_m:02d}\"\n\ndef"
    },
    {
        "number": 4020,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, stdin.split(':'))\n    h2, m2 = map(int, stdin.split(':'))\n\n    total_minutes = (h2 - h1) * 60 + (m2 - m1)\n    midpoint_minutes = total_minutes // 2\n\n    midpoint_hours, midpoint_minutes = divmod(midpoint_minutes, 60)\n\n    return f\"{midpoint_hours:02d}:{midpoint_minutes:02d}\"\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4020,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    h_1, m_1 = map(int, stdin.split(':'))\n    h_2, m_2 = map(int, stdin.split(':'))\n\n    total_minutes = (h_2 - h_1) * 60 + (m_2 - m_1)\n    midpoint = total_minutes // 2\n\n    mid_h = h_1 + midpoint // 60\n    mid_m = m_1 + midpoint % 60\n\n    return f\"{mid_h:02d}:{mid_m:02d}\"\n\ndef"
    },
    {
        "number": 4020,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1, h2, m2 = map(int, stdin.split())\n    total_minutes = (h2 - h1) * 60 + (m2 - m1)\n    mid_minutes = total_minutes // 2\n    mid_hours = mid_minutes // 60\n    mid_minutes %= 60\n    mid_hours += h1\n    if mid_hours >= 24:\n        mid_hours -= 24\n    return f\"{mid_hours:02d}:{mid_minutes:02d}\"\n\ninput_stdin = input()\nh1, m1 = map(int, input_stdin.split(':'))\ninput_stdin = input()\nh2, m2 = map(int, input_stdin.split(':'))\nstdin = f\"{h1} {m1} {h2} {m2}\"\nprint(solution(stdin)) "
    },
    {
        "number": 4020,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1, h2, m2 = map(int, stdin.split())\n    total_minutes = (h2 - h1) * 60 + m2 - m1\n    mid_minutes = total_minutes // 2\n    mid_hours = mid_minutes // 60\n    mid_minutes %= 60\n    mid_hours += h1\n    if mid_hours >= 24:\n        mid_hours -= 24\n    return f\"{mid_hours:02d}:{mid_minutes:02d}\""
    },
    {
        "number": 4020,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    h1, m1 = map(int, stdin[0].split(':'))\n    h2, m2 = map(int, stdin[1].split(':'))\n\n    # Calculate the length of the contest in minutes\n    contest_length_minutes = (h2 - h1) * 60 + (m2 - m1)\n\n    # Check if the contest lasts an even number of minutes\n    if contest_length_minutes % 2 != 0:\n        raise ValueError(\"The contest lasts an odd number of minutes\")\n\n    # Calculate the midpoint time in minutes\n    midpoint_minutes = contest_length_minutes // 2\n\n    # Calculate the midpoint time in hours and minutes\n    midpoint_hours = midpoint_minutes // 60\n    midpoint_minutes = midpoint_minutes % 60\n\n    # Calculate the difference between the start and midpoint times in hours and minutes\n    diff_hours = midpoint_hours - h1\n    diff_minutes = midpoint_minutes - m1\n\n    # Adjust the midpoint time if the difference is negative\n    if diff_hours < 0 or (diff_hours == 0 and diff_minutes < 0):\n        diff_hours += 24\n        diff_minutes += 60\n\n    # Calculate the midpoint time in the format hh:mm\n    midpoint_time = f\"{diff_hours:02d}:{diff_minutes:02d}\"\n\n    return midpoint_time"
    },
    {
        "number": 4020,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    h_1, m_1, h_2, m_2 = map(int, stdin.split())\n    m_mid = (m_1 + m_2) // 2\n    h_3 = h_1 + (m_mid // 60)\n    m_3 = m_mid % 60\n    return f\"{h_3:02d}:{m_3:02d}\"\n\ndef"
    },
    {
        "number": 4020,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1, h2, m2 = map(int, stdin.split())\n    \n    mid_minutes = (m1 + m2) // 2\n    mid_hours = (h1 + h2) // 2\n    \n    if (m1 + m2) % 2 == 1:\n        mid_hours += 1\n    \n    mid_minutes %= 60\n    \n    return f\"{mid_hours:02d}:{mid_minutes:02d}\"\n\ndef"
    },
    {
        "number": 4021,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(int(a**0.5))"
    },
    {
        "number": 4021,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(int(a ** 0.5) + 1)"
    },
    {
        "number": 4021,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    count = 0\n    for i in range(1, a + 1):\n        if i % 2 == 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4021,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    count = 0\n    while a > 0:\n        count += a & 1\n        a >>= 1\n    return str(count)\n\ninput_str = input(\"Enter an integer between 1 and 64: \")\noutput = solution(input_str)\nprint(output) "
    },
    {
        "number": 4021,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    result = 0\n    for i in range(1, a+1):\n        result += i\n    return str(result)"
    },
    {
        "number": 4021,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    count = 0\n    while a > 0:\n        count += a % 2\n        a //= 2\n    return str(count)"
    },
    {
        "number": 4021,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    result = 0\n    while a > 0:\n        result += 1\n        a >>= 1\n    return str(result)\n\ndef"
    },
    {
        "number": 4021,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    count = 0\n    while a > 0:\n        a //= 2\n        count += 1\n    return str(count) "
    },
    {
        "number": 4021,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    count = 0\n    i = 1\n    while i <= a:\n        if a % i == 0:\n            count += 1\n        i += 1\n    return str(count) "
    },
    {
        "number": 4021,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(bin(a).count('1'))"
    },
    {
        "number": 4022,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    segments = []\n    for _ in range(n):\n        l, r = map(int, stdin.readline().strip().split())\n        segments.append((l, r))\n\n    segments.sort()\n    max_length = 0\n\n    for i in range(n - 1):\n        l, r = segments[i]\n        next_l, next_r = segments[i + 1]\n        intersection_length = min(r, next_r) - max(l, next_l)\n        max_length = max(max_length, intersection_length)\n\n    return str(max_length)"
    },
    {
        "number": 4022,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def find_intersection(segments: list) -> str:\n        x_coords = []\n        y_coords = []\n        \n        for segment in segments:\n            x_coords.extend(segment)\n            y_coords.extend(sorted(segment))\n        \n        intersection = []\n        for i in range(len(x_coords) - 1):\n            if x_coords[i] == x_coords[i + 1]:\n                intersection.append(x_coords[i])\n        \n        if len(intersection) == 0:\n            return \"0\"\n        else:\n            return str(max(intersection) - min(intersection))\n    \n    def remove_segment(segments: list) -> str:\n        max_length = 0\n        max_segment = None\n        for segment in segments:\n            remaining_segments = [s for s in segments if s != segment]\n            intersection = find_intersection(remaining_segments)\n            if int(intersection) > max_length:\n                max_length = int(intersection)\n                max_segment = segment\n        \n        if max_segment is None:\n            return \"0\"\n        else:\n            segments.remove(max_segment)\n            return str(max_length)\n    \n    n = int(stdin.readline().strip())\n    segments = []\n    \n    for _ in range(n):\n        l, r = map(int, stdin.readline().strip().split())\n        segments.append((l, r))\n    \n    return remove_segment(segments)"
    },
    {
        "number": 4022,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    segments = []\n    for i in range(1, n + 1):\n        l, r = map(int, lines[i].split())\n        segments.append((l, r))\n\n    max_length = 0\n    for i in range(n):\n        remaining_segments = segments[:i] + segments[i+1:]\n        current_length = max_length_of_intersection(remaining_segments)\n        max_length = max(max_length, current_length)\n\n    return str(max_length)\n\ndef"
    },
    {
        "number": 4022,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    segments = [tuple(map(int, line.split())) for line in lines[1:]]\n\n    max_length = 0\n    for i in range(n):\n        remaining_segments = segments[:i] + segments[i+1:]\n        current_length = find_max_intersection_length(remaining_segments)\n        if current_length > max_length:\n            max_length = current_length\n\n    return str(max_length)\n\ndef"
    },
    {
        "number": 4022,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    segments = []\n\n    for i in range(n):\n        l, r = map(int, stdin.split('\\n')[i + 1].split())\n        segments.append((l, r))\n\n    def find_intersection(segments):\n        result = []\n        for i in range(len(segments)):\n            for j in range(i + 1, len(segments)):\n                l1, r1 = segments[i]\n                l2, r2 = segments[j]\n                if r1 < l2 or r2 < l1:\n                    continue\n                intersection = max(l1, l2), min(r1, r2)\n                result.append(intersection)\n        return result\n\n    max_length = 0\n    for i in range(len(segments)):\n        remaining_segments = segments[:i] + segments[i + 1:]\n        intersection = find_intersection(remaining_segments)\n        length = sum(r - l for l, r in intersection)\n        max_length = max(max_length, length)\n\n    return str(max_length)"
    },
    {
        "number": 4022,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    segments = []\n    for i in range(1, n+1):\n        l, r = map(int, lines[i].split())\n        segments.append((l, r))\n    \n    def intersection_length(seg1: Tuple[int], seg2: Tuple[int]) -> int:\n        a, b = seg1\n        c, d = seg2\n        if b < c or d < a:\n            return 0\n        return max(0, min(b, d) - max(a, c))\n    \n    max_intersection = 0\n    for i in range(n):\n        intersection = 0\n        for j in range(n):\n            if i == j:\n                continue\n            intersection += intersection_length(segments[i], segments[j])\n        max_intersection = max(max_intersection, intersection)\n    \n    return str(max_intersection)"
    },
    {
        "number": 4022,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    segments = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n\n    max_length = 0\n    for i in range(n):\n        remaining_segments = segments[:i] + segments[i+1:]\n        intersections = []\n\n        for j in range(len(remaining_segments)):\n            for k in range(j+1, len(remaining_segments)):\n                l1, r1 = remaining_segments[j]\n                l2, r2 = remaining_segments[k]\n                intersections.append(max(l1, l2))\n                intersections.append(min(r1, r2))\n\n        max_length = max(max_length, max(intersections) - min(intersections))\n\n    return str(max_length)\n"
    },
    {
        "number": 4022,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def find_intersection(segments: List[List[int]]) -> List[int]:\n        segments.sort(key=lambda x: x[0])\n        result = []\n        for i in range(len(segments) - 1):\n            if segments[i][1] < segments[i + 1][0]:\n                return result\n            start = max(segments[i][0], segments[i + 1][0])\n            end = min(segments[i][1], segments[i + 1][1])\n            if start <= end:\n                result.append(start)\n                result.append(end)\n        return result\n\n    n = int(stdin.readline().strip())\n    segments = [list(map(int, input().split())) for _ in range(n)]\n    max_length = 0\n    for i in range(n):\n        remaining_segments = segments[:i] + segments[i + 1:]\n        length = sum(find_intersection(remaining_segments))\n        max_length = max(max_length, length)\n    return str(max_length)"
    },
    {
        "number": 4022,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    segments = [tuple(map(int, line.strip().split())) for line in stdin]\n    max_length = 0\n    \n    for i in range(n):\n        segments_without_i = segments[:i] + segments[i+1:]\n        intersection = segments_without_i[0]\n        for j in range(1, len(segments_without_i)):\n            intersection = intersect(intersection, segments_without_i[j])\n            if intersection[0] == intersection[1]:\n                break\n        length = intersection[1] - intersection[0]\n        if length > max_length:\n            max_length = length\n            \n    return str(max_length)\n\ndef"
    },
    {
        "number": 4022,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def find_intersection(segments):\n        segments.sort(key=lambda x: x[0])\n        intersections = []\n        for i in range(len(segments) - 1):\n            for j in range(i + 1, len(segments)):\n                if segments[i][0] > segments[j][1]:\n                    continue\n                start = max(segments[i][0], segments[j][0])\n                end = min(segments[i][1], segments[j][1])\n                if start <= end:\n                    intersections.append((start, end))\n        return intersections\n\n    n = int(stdin.readline().strip())\n    segments = []\n    for _ in range(n):\n        l, r = map(int, stdin.readline().strip().split())\n        segments.append((l, r))\n\n    max_length = 0\n    for i in range(n):\n        remaining_segments = segments[:i] + segments[i+1:]\n        length = find_intersection(remaining_segments)\n        if len(length) > 0:\n            max_length = max(max_length, length[0][1] - length[0][0])\n\n    return str(max_length)\n\ninput_string = \"\"\nwith open(\"input.txt\", \"r\") as file:\n    input_string = file.read()\n\nwith open(\"output.txt\", \"w\") as file:\n    file.write(solution(input_string)) "
    },
    {
        "number": 4023,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def can_build_wall(heights: List[int]) -> bool:\n        for i in range(1, len(heights)):\n            if heights[i] > heights[i - 1]:\n                return False\n        return True\n\n    def build_wall(heights: List[int]) -> List[int]:\n        result = [0] * len(heights)\n        result[0] = 1\n\n        for i in range(1, len(heights)):\n            if heights[i] == heights[i - 1]:\n                result[i] = result[i - 1] + 1\n\n        return result\n\n    def has_empty_spaces(heights: List[int], wall: List[int]) -> bool:\n        for i in range(len(wall)):\n            if heights[i] != wall[i]:\n                return True\n        return False\n\n    n = int(stdin.readline().strip())\n    heights = list(map(int, stdin.readline().strip().split()))\n\n    wall = build_wall(heights)\n\n    if can_build_wall(wall) and not has_empty_spaces(heights, wall):\n        return \"YES\"\n    else:\n        return \"NO\"\n\ninput_str = \"\"\"5\n2 1 1 2 5\"\"\"\nprint(solution(input_str)) "
    },
    {
        "number": 4023,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    if len(a) != n:\n        return \"NO\"\n\n    for i in range(len(a) - 1):\n        if a[i] == a[i + 1]:\n            a[i] += 1\n            a[i + 1] += 1\n\n    if a.count(a[0]) == len(a) and all(1 <= a[i] <= n for i in range(len(a))):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4023,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    wall_heights = list(map(int, stdin.splitlines()[1].split()))\n    \n    for i in range(n):\n        if wall_heights[i] > 10**9:\n            return \"NO\"\n    \n    wall_heights.sort()\n    min_height = wall_heights[0]\n    max_height = wall_heights[-1]\n    \n    if max_height - min_height > 1:\n        return \"NO\"\n    \n    for i in range(1, n):\n        if wall_heights[i] - wall_heights[i-1] > 1:\n            return \"NO\"\n    \n    return \"YES\""
    },
    {
        "number": 4023,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    heights = list(map(int, stdin.split()[1:]))\n\n    for i in range(n - 1):\n        if heights[i] != heights[i + 1]:\n            heights[i] += 1\n            heights[i + 1] += 1\n\n    if all(x == heights[0] for x in heights) and sum(heights) % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4023,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    heights = list(map(int, stdin.split()[1:]))\n\n    max_height = max(heights)\n    min_height = min(heights)\n\n    if max_height - min_height <= 2:\n        return \"YES\"\n    else:\n        return \"NO\"\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4023,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    heights = list(map(int, stdin.readline().strip().split()))\n\n    min_height = min(heights)\n    max_height = max(heights)\n\n    if max_height - min_height <= 2:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4023,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def can_complete_wall(heights: List[int]) -> bool:\n        max_height = max(heights)\n        min_height = min(heights)\n\n        if max_height - min_height > 2:\n            return False\n\n        for i in range(1, len(heights)):\n            if heights[i] - heights[i - 1] != 1 and heights[i - 1] - heights[i] != 1:\n                return False\n\n        return True\n\n    n = int(stdin.splitlines()[0])\n    heights = list(map(int, stdin.splitlines()[1].split()))\n\n    return \"YES\" if can_complete_wall(heights) else \"NO\""
    },
    {
        "number": 4023,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    for i in range(1, n):\n        if a[i] == a[i - 1] and i < n - 1:\n            a[i] += 1\n            a[i + 1] += 1\n        elif i == n - 1:\n            a[i - 1] += 1\n            a[i] += 1\n\n    if len(set(a)) == 1 and a[0] == a[-1]:\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef"
    },
    {
        "number": 4023,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    if max(a) == min(a):\n        return \"YES\"\n    \n    for i in range(n - 1):\n        if a[i] == a[i + 1]:\n            a[i] += 1\n            a[i + 1] += 1\n    \n    if max(a) == min(a):\n        return \"YES\"\n    \n    return \"NO\"\n\ninput_data = '''5\n2 1 1 2 5'''\noutput = solution(input_data)\nprint(output)\n\ninput_data = '''3\n4 5 3'''\noutput = solution(input_data)\nprint(output)\n\ninput_data = '''2\n10 10'''\noutput = solution(input_data)\nprint(output) "
    },
    {
        "number": 4023,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    initial_heights = list(map(int, stdin.readline().strip().split()))\n\n    # Check if the initial heights satisfy the condition\n    if all(initial_heights[i] == initial_heights[i + 1] for i in range(n - 1)):\n        return \"YES\"\n\n    # Check if the initial heights are equal to each other\n    if all(initial_heights[i] == initial_heights[0] for i in range(1, n)):\n        return \"YES\"\n\n    return \"NO\""
    },
    {
        "number": 4024,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(input())\n    set_s = set()\n    min_cost = 0\n\n    def is_subsequence(t, s):\n        t_index = 0\n        for char in s:\n            if t_index < len(t) and char == t[t_index]:\n                t_index += 1\n        return t_index == len(t)\n\n    def generate_subsequences(s):\n        subsequences = []\n        for i in range(len(s)):\n            for j in range(i, len(s)):\n                subsequences.append(\"\".join(s[i:j+1]))\n        return subsequences\n\n    def add_subsequence(t):\n        nonlocal min_cost\n        set_s.add(t)\n        min_cost += n - len(t)\n\n    def backtrack(start):\n        if len(set_s) == k:\n            return True\n        if start >= n:\n            return False\n        for i in range(start, n):\n            t = \"\".join(s[start:i+1])\n            if is_subsequence(t, s) and t not in set_s:\n                set_s.add(t)\n                add_subsequence(t)\n                if backtrack(i+1):\n                    return True\n                set_s.remove(t)\n        return False\n\n    if len(set_s) + len(generate_subsequences(s)) >= k:\n        backtrack(0)\n        return str(min_cost)\n    else:\n        return \"-1\"\n"
    },
    {
        "number": 4024,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split('\\n')[1]\n    subseq = []\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            subseq.append(s[i:j+1])\n    \n    subseq = list(set(subseq))\n    subseq.sort(key=len)\n    \n    cost = [0] * len(subseq)\n    for i in range(1, len(subseq)):\n        for j in range(i):\n            if subseq[i] not in subseq[j]:\n                cost[i] = max(cost[i], cost[j] + len(s) - len(subseq[i]))\n    \n    if len(subseq) < k:\n        return \"-1\"\n    else:\n        return str(cost[len(subseq) - 1])\n\n\ndef"
    },
    {
        "number": 4024,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    s = stdin.split()[2]\n    subseq = []\n    total_cost = 0\n\n    for i in range(1, len(s) + 1):\n        for j in range(len(s) - i + 1):\n            sub = s[j:j + i]\n            if sub not in subseq:\n                subseq.append(sub)\n                total_cost += n - i\n\n    if len(subseq) < k:\n        return \"-1\"\n    else:\n        return str(total_cost)\n\n\ndef"
    },
    {
        "number": 4024,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split('\\n')[1]\n    s_set = set(s)\n\n    if len(s_set) < k:\n        return -1\n\n    subseq_costs = []\n    for i in range(1, len(s) + 1):\n        for j in range(len(s) - i + 1):\n            subseq = s[j:j + i]\n            if len(set(subseq)) == 1:\n                subseq_costs.append((subseq, len(s) - i))\n\n    subseq_costs.sort(key=lambda x: x[1])\n\n    if len(subseq_costs) < k:\n        return -1\n\n    return sum(subseq_cost[1] for subseq_cost in subseq_costs[:k])\n"
    },
    {
        "number": 4024,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split('\\n')[1]\n    \n    if k > len(s):\n        return \"-1\"\n    \n    dp = [float('inf')] * (k+1)\n    dp[0] = 0\n    \n    for i in range(len(s)):\n        for j in range(k, 0, -1):\n            if dp[j-1] < float('inf'):\n                dp[j] = min(dp[j], dp[j-1] + len(s) - i - 1)\n            if s[i] not in s[:i]:\n                if dp[j-1] < float('inf'):\n                    dp[j] = min(dp[j], dp[j-1] + len(s) - i - 1)\n                else:\n                    dp[j] = min(dp[j], len(s) - i - 1)\n    \n    return dp[k] if dp[k] != float('inf') else \"-1\"\n\ndef"
    },
    {
        "number": 4024,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, s = stdin.split()\n    n = int(n)\n    k = int(k)\n    \n    # Check if it's possible to obtain the set S of size k\n    if len(set(s)) < k:\n        return \"-1\"\n    \n    # Initialize the set S\n    S = set(s)\n    \n    # Calculate the minimum cost\n    min_cost = n\n    for subseq in itertools.combinations(s, n - k):\n        subseq = \"\".join(subseq)\n        if len(set(subseq)) == len(subseq):\n            min_cost = min(min_cost, n - len(subseq))\n    \n    return str(min_cost)"
    },
    {
        "number": 4024,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(stdin.split()[1])\n    s.sort()\n    visited = [False] * n\n    min_cost = float('inf')\n\n    def backtrack(start, curr_cost, curr_set):\n        nonlocal min_cost\n        if len(curr_set) == k:\n            min_cost = min(min_cost, curr_cost)\n            return\n        if curr_cost > min_cost:\n            return\n        for i in range(start, n):\n            if not visited[i]:\n                visited[i] = True\n                backtrack(i + 1, curr_cost + n - i - 1, curr_set + [s[i]])\n                visited[i] = False\n\n    backtrack(0, 0, [])\n\n    return min_cost if min_cost != float('inf') else -1"
    },
    {
        "number": 4024,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()[1]\n    \n    def is_subsequence(t: str) -> bool:\n        temp = \"\"\n        for char in s:\n            if char in t:\n                temp += char\n        return temp == t\n\n    def cost(t: str) -> int:\n        return n - len(t)\n\n    def min_cost(k: int) -> int:\n        if k > n:\n            return -1\n        if k == n:\n            return 0\n        min_cost_set = float('inf')\n        for i in range(n):\n            for j in range(i+1, n+1):\n                t = s[i:j]\n                if is_subsequence(t):\n                    cost_t = cost(t)\n                    total_cost = cost_t + (k-1)*cost_t\n                    min_cost_set = min(min_cost_set, total_cost)\n        return min_cost_set\n\n    result = min_cost(k)\n    return str(result)"
    },
    {
        "number": 4024,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split('\\n')[1]\n    \n    # Helper function to check if a string is a subsequence of s\n    def is_subsequence(t):\n        t_index = 0\n        for char in s:\n            if t_index < len(t) and char == t[t_index]:\n                t_index += 1\n        return t_index == len(t)\n    \n    # Helper function to calculate the cost of a subsequence\n    def cost(t):\n        return len(s) - len(t)\n    \n    # Initialize variables for the dynamic programming algorithm\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    \n    # Iterate through the possible subsequences and update dp\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            if is_subsequence(s[:j]):\n                dp[i] = min(dp[i], dp[j - 1] + cost(s[:j]))\n    \n    # Check if it is possible to obtain a set of size k\n    if dp[n] == float('inf'):\n        return -1\n    else:\n        return dp[n]"
    },
    {
        "number": 4024,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()[1]\n    if len(s) < k:\n        return -1\n    elif k == 1:\n        return 0\n    else:\n        s_set = set(s)\n        if len(s_set) < k:\n            return -1\n        else:\n            return n"
    },
    {
        "number": 4025,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n\n    # initialize the number of days the cat can eat\n    fish_days = (a // 7) + min(a % 7, 1)\n    rabbit_days = (b // 7) + min(b % 7, 1)\n    chicken_days = (c // 7) + min(c % 7, 1)\n\n    # calculate the maximum number of days the cat can eat\n    max_days = min(fish_days, rabbit_days, chicken_days)\n\n    return str(max_days)"
    },
    {
        "number": 4025,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    max_days = 0\n    max_days_day = ''\n    for day in ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']:\n        fish_food = 0\n        rabbit_stew = 0\n        chicken_stake = 0\n        for food in ['fish', 'rabbit', 'chicken']:\n            if day in ['Monday', 'Thursday', 'Sunday']:\n                if food == 'fish':\n                    fish_food += a\n                elif food == 'rabbit':\n                    rabbit_stew += b\n                else:\n                    chicken_stake += c\n            elif day == 'Tuesday':\n                rabbit_stew += b\n            elif day == 'Saturday':\n                rabbit_stew += b\n            else:\n                chicken_stake += c\n        if fish_food + rabbit_stew + chicken_stake > max_days:\n            max_days = fish_food + rabbit_stew + chicken_stake\n            max_days_day = day\n    return str(max_days) + ' ' + max_days_day"
    },
    {
        "number": 4025,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    \n    max_days = max(a, b, c)\n    \n    if a >= b and a >= c:\n        return max_days\n    elif b >= a and b >= c:\n        return max_days * 2\n    else:\n        return max_days * 3\n    \n    \n"
    },
    {
        "number": 4025,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n\n    max_days = max(a, b, c)\n\n    if max_days >= 7:\n        max_days = 7\n\n    return str(max_days)"
    },
    {
        "number": 4025,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    max_days = 0\n    max_day = None\n    for day in [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]:\n        current_day = day\n        fish_count = a if current_day in [\"Monday\", \"Thursday\", \"Sunday\"] else 0\n        rabbit_count = b if current_day in [\"Tuesday\", \"Saturday\"] else 0\n        chicken_count = c if current_day not in [\"Wednesday\", \"Saturday\", \"Sunday\"] else 0\n        total_count = fish_count + rabbit_count + chicken_count\n        if total_count > max_days:\n            max_days = total_count\n            max_day = current_day\n\n    return max_day\n\ndef"
    },
    {
        "number": 4025,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n\n    max_days = 0\n    max_days_start = 0\n\n    for i in range(7):\n        current_days = 0\n        current_a = a\n        current_b = b\n        current_c = c\n\n        for j in range(i, 7):\n            if j % 7 == 0 or j % 7 == 2 or j % 7 == 6:\n                if current_a > 0:\n                    current_a -= 1\n                else:\n                    break\n            elif j % 7 == 1 or j % 7 == 3 or j % 7 == 5:\n                if current_b > 0:\n                    current_b -= 1\n                else:\n                    break\n            else:\n                if current_c > 0:\n                    current_c -= 1\n                else:\n                    break\n            current_days += 1\n\n        if current_days > max_days:\n            max_days = current_days\n            max_days_start = i\n\n    return str(max_days)"
    },
    {
        "number": 4025,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n\n    fish_days = [0, 1, 0, 0, 1, 0, 1]  # 1 for fish, 0 for other\n    rabbit_days = [0, 0, 1, 0, 0, 1, 0]  # 1 for rabbit, 0 for other\n\n    fish_count = 0\n    rabbit_count = 0\n    chicken_count = 0\n\n    max_days = 0\n\n    for i in range(7):\n        fish_count += a * fish_days[i]\n        rabbit_count += b * rabbit_days[i]\n        chicken_count += c * (1 - fish_days[i] - rabbit_days[i])\n\n        if fish_count >= a and rabbit_count >= b and chicken_count >= c:\n            max_days = i + 1\n            break\n\n        if max_days < i + 1:\n            max_days = i + 1\n\n    return str(max_days)"
    },
    {
        "number": 4025,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    max_days = max(a, b, c)\n\n    if a >= b + c:\n        max_days = max(max_days, a + b)\n    elif b >= a + c:\n        max_days = max(max_days, b + c)\n    elif c >= a + b:\n        max_days = max(max_days, c + a)\n\n    return str(max_days)"
    },
    {
        "number": 4025,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    \n    max_days = 0\n    for day in range(7):\n        if day == 0 or day == 2 or day == 5:\n            if a > 0:\n                max_days = max(max_days, 1)\n                a -= 1\n            else:\n                break\n        elif day == 1 or day == 3:\n            if b > 0:\n                max_days = max(max_days, 1)\n                b -= 1\n            else:\n                break\n        else:\n            if c > 0:\n                max_days = max(max_days, 1)\n                c -= 1\n            else:\n                break\n                \n    return str(max_days)"
    },
    {
        "number": 4025,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    days_eaten = [0, 0, 0, 0, 0, 0, 0]\n\n    days_eaten[0] = a\n    days_eaten[1] = a + b\n    days_eaten[2] = days_eaten[1] + c\n    days_eaten[3] = days_eaten[2] + c\n    days_eaten[4] = days_eaten[3] + a\n    days_eaten[5] = days_eaten[4] + b\n    days_eaten[6] = days_eaten[5] + c\n\n    max_days = max(days_eaten)\n    return str(max_days)\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4026,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_square_symmetric(square: List[List[int]]) -> bool:\n        for i in range(len(square)):\n            for j in range(len(square)):\n                if square[i][j] != square[j][i]:\n                    return False\n        return True\n\n    def is_tile_inside_square(tile: List[List[int]], square_size: int) -> bool:\n        for row in tile:\n            for cell in row:\n                if cell < 1 or cell > square_size * square_size:\n                    return False\n        return True\n\n    def can_place_tile(tile: List[List[int]], square: List[List[int]], square_size: int) -> bool:\n        for i in range(square_size):\n            for j in range(square_size):\n                if tile == square[i][j]:\n                    return False\n        return True\n\n    def can_construct_square(n: int, m: int, tiles: List[List[List[int]]], square_size: int) -> bool:\n        square = [[0] * square_size for _ in range(square_size)]\n        for i in range(square_size):\n            for j in range(square_size):\n                for tile_type in range(n):\n                    tile = tiles[tile_type]\n                    if is_tile_inside_square(tile, square_size) and can_place_tile(tile, square, square_size):\n                        square[i][j] = tile\n                        if is_square_symmetric(square):\n                            return True\n                        square[i][j] = 0\n        return False\n\n    test_cases = stdin.strip().split('\\n')\n    t = int(test_cases.pop(0))\n    outputs = []\n\n    for i in range(t):\n        n, m = map(int, test_cases.pop(0).split())\n        tiles = []\n        for _ in range(n):\n            tile = [list(map(int, test_cases.pop(0).split())), list(map(int, test_cases.pop(0).split()))]\n            tiles.append(tile)\n        if can_construct_square(n, m, tiles, m):\n            outputs.append(\"YES\")\n        else:\n            outputs.append(\"NO\")\n\n    return \"\\n\".join(outputs)\n\ninput_str = \"\"\"6\n3 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n\"\"\"\n\nprint(solution(input_str)) "
    },
    {
        "number": 4026,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    test_cases = stdin.split('\\n')\n    test_cases = test_cases[1:]  # Remove first line\n    t = int(test_cases[0])  # Number of test cases\n    test_cases = test_cases[1:]  # Remove number of test cases\n\n    # Iterate over test cases\n    for i in range(t):\n        # Parse test case\n        n, m = map(int, test_cases[i * (2 * n + 2)].split())  # Number of types of tiles and size of the square\n        tiles = {}\n        for j in range(n):\n            # Parse tile description\n            tile = test_cases[i * (2 * n + 2) + 2 + j * 2:i * (2 * n + 2) + 4 + j * 2]\n            tile = list(map(int, tile))\n            tiles[(tile[0], tile[1])] = tile[2:]\n\n        # Check if Masha can construct the square\n        can_construct = True\n        for x in range(m):\n            for y in range(m):\n                if x == y:\n                    if (x == 0 and y == 0) or (x == m - 1 and y == m - 1):\n                        continue\n                    can_construct = False\n                    break\n                if tiles[(x + 1, y + 1)] != tiles[(y + 1, x + 1)]:\n                    can_construct = False\n                    break\n\n        # Print result\n        if can_construct:\n            print(\"YES\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 4026,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    cases = stdin.strip().split('\\n')\n    t = int(cases.pop(0))\n    for i in range(t):\n        n, m = map(int, cases.pop(0).split())\n        tiles = []\n        for j in range(2 * n):\n            tile = tuple(map(int, cases.pop(0).split()))\n            tiles.append(tile)\n        # Your solution goes here\n        # You can use a 2D list to represent the square and check for conditions\n        # If the conditions are met, return \"YES\" else \"NO\"\n        return \"YES\" if can_construct(n, m, tiles) else \"NO\"\n\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def is_symmetric(matrix: List[List[int]]) -> bool:\n        for i in range(len(matrix)):\n            for j in range(len(matrix)):\n                if matrix[i][j] != matrix[j][i]:\n                    return False\n        return True\n\n    def can_construct_square(tile_sizes: List[Tuple[int, int]], square_size: int) -> bool:\n        if square_size == 1:\n            return True\n        for i in range(square_size - 1):\n            for j in range(i + 1, square_size):\n                for tile in tile_sizes:\n                    if (tile[0] + tile[1]) % 2 != 0:\n                        continue\n                    if (tile[0] // 2) * (square_size - i - 1) + (tile[1] // 2) * (square_size - j - 1) == (tile[0] // 2) * (square_size - j - 1) + (tile[1] // 2) * (square_size - i - 1):\n                        return True\n        return False\n\n    test_cases = stdin.split(\"\\n\")\n    test_cases = test_cases[1:]\n    result = []\n\n    for i in range(0, len(test_cases), 2):\n        n = int(test_cases[i])\n        m = int(test_cases[i + 1])\n\n        tile_sizes = []\n        for j in range(n):\n            top_left, top_right = map(int, test_cases[i + 2 + j].split())\n            bottom_left, bottom_right = map(int, test_cases[i + 3 + j].split())\n            tile_sizes.append((top_left + bottom_left, top_right + bottom_right))\n\n        if can_construct_square(tile_sizes, m):\n            result.append(\"YES\")\n        else:\n            result.append(\"NO\")\n\n    return \"\\n\".join(result)\n"
    },
    {
        "number": 4026,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    cases = []\n    stdin = stdin.strip().split(\"\\n\")\n    t = int(stdin[0])\n    for i in range(1, t + 1):\n        n, m = map(int, stdin[i * (n + 2) - 1].split())\n        tile_types = []\n        for j in range(i * (n + 2), i * (n + 2) + 2 * n):\n            tile_types.append(list(map(int, stdin[j].split())))\n        cases.append((n, m, tile_types))\n\n    def is_symmetric(matrix):\n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                if matrix[i][j] != matrix[j][i]:\n                    return False\n        return True\n\n    def check_square(n, m, tile_types):\n        def can_construct(size):\n            for i in range(1, size + 1):\n                for j in range(1, size + 1):\n                    if i > j:\n                        continue\n                    for type_index in range(n):\n                        tile = tile_types[type_index]\n                        if tile[0] <= i and tile[1] <= j and tile[2] <= size - i and tile[3] <= size - j:\n                            return True\n            return False\n\n        if can_construct(m):\n            matrix = []\n            for i in range(m):\n                row = []\n                for j in range(m):\n                    row.append(0)\n                matrix.append(row)\n\n            for i in range(m):\n                for j in range(m):\n                    if i > j:\n                        continue\n                    for type_index in range(n):\n                        tile = tile_types[type_index]\n                        if tile[0] <= i and tile[1] <= j and tile[2] <= m - i and tile[3] <= m - j:\n                            matrix[i][j] = matrix[j][i] = 1\n                            break\n\n            return is_symmetric(matrix)\n        else:\n            return False\n\n    result = []\n    for case in cases:\n        result.append(\"YES\" if check_square(case[0], case[1], case[2]) else \"NO\")\n    return \"\\n\".join(result)\n\ninput_string = \"\"\"\n6\n3 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n\"\"\"\n\nprint(solution(input_string)) "
    },
    {
        "number": 4026,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def can_construct(tiles, m, n):\n        if m == 1:\n            return True\n        for i in range(n):\n            for j in range(i, n):\n                if tiles[i][j] != tiles[j][i]:\n                    return False\n        return True\n\n    def read_input(stdin: str):\n        test_cases = stdin.split('\\n')\n        t = int(test_cases[0])\n        test_results = []\n        for i in range(1, t + 1):\n            n, m = map(int, test_cases[i * 2 - 1].split())\n            tiles = []\n            for j in range(n):\n                tiles.append(list(map(int, test_cases[i * 2 + j].split())))\n            test_results.append((tiles, m, n))\n        return test_results\n\n    def print_results(test_results):\n        for tiles, m, n in test_results:\n            print(\"YES\" if can_construct(tiles, m, n) else \"NO\")\n\n    test_results = read_input(stdin)\n    print_results(test_results)"
    },
    {
        "number": 4026,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n, m = map(int, stdin.readline().split())\n        tiles = {}\n        for _ in range(2*n):\n            top_left, top_right = map(int, stdin.readline().split())\n            bottom_left, bottom_right = map(int, stdin.readline().split())\n            tiles[(top_left, top_right, bottom_left, bottom_right)] = True\n\n        # Check if Masha can construct the square\n        for i in range(1, m+1):\n            for j in range(1, m+1):\n                for k in range(1, m+1):\n                    for l in range(1, m+1):\n                        if i == k and j == l:\n                            continue\n                        if (i, j, k, l) in tiles and (k, l, i, j) in tiles:\n                            continue\n                        else:\n                            break\n                    else:\n                        continue\n                    break\n                else:\n                    print(\"YES\")\n                    break\n            else:\n                print(\"NO\")\n                break\n        stdin.readline()\n        stdin.readline()\n"
    },
    {
        "number": 4026,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    cases = stdin.split(\"\\n\")\n    t = int(cases[0])\n    result = []\n\n    for i in range(1, t + 1):\n        n, m = map(int, cases[i].split())\n        tiles = {}\n        for j in range(2 * n):\n            tile_type, value = cases[2 * n + i + j].split()\n            tiles[tile_type] = int(value)\n\n        # Check if it's possible to construct the square\n        is_possible = True\n        for i in range(m):\n            for j in range(m):\n                if i == j:\n                    if (i + 1) % 2 != 0:\n                        continue\n                    if (j + 1) % 2 != 0:\n                        continue\n                if (i + 1) % 2 != 0 or (j + 1) % 2 != 0:\n                    continue\n                if i > j:\n                    continue\n                if (i, j) in tiles.values():\n                    continue\n                if (j, i) in tiles.values():\n                    continue\n                if (i + 1, j) in tiles.values():\n                    continue\n                if (j + 1, i) in tiles.values():\n                    continue\n                if (i + 1, j + 1) in tiles.values():\n                    continue\n                if (j + 1, i + 1) in tiles.values():\n                    continue\n                is_possible = False\n                break\n            if not is_possible:\n                break\n\n        result.append(\"YES\" if is_possible else \"NO\")\n\n    return \"\\n\".join(result)\n\n\ninput_data = \"\"\"3 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n\"\"\"\n\noutput = solution(input_data)\nprint(output) "
    },
    {
        "number": 4026,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.split(\"\\n\")\n    t = int(test_cases[0])\n    for i in range(1, t+1):\n        n, m = map(int, test_cases[i*2-1].split())\n        tiles = []\n        for j in range(2*n):\n            tile = test_cases[i*2-1+j].split()\n            tiles.append((int(tile[0]), int(tile[1])))\n        \n        for j in range(m):\n            for k in range(m):\n                for tile in tiles:\n                    if j == 0 and k == 0 and tile[0] == tile[1] and tile[0] == tiles[0][0]:\n                        continue\n                    elif j == 0 and k == m-1 and tile[0] == tile[1] and tile[0] == tiles[0][1]:\n                        continue\n                    elif j == m-1 and k == 0 and tile[1] == tile[0] and tile[1] == tiles[0][1]:\n                        continue\n                    elif j == m-1 and k == m-1 and tile[1] == tile[0] and tile[1] == tiles[0][0]:\n                        continue\n                    elif j == 0 and k > 0 and k < m-1 and tile[0] == tiles[0][0] and tiles[0][0] == tiles[0][1]:\n                        continue\n                    elif j > 0 and j < m-1 and k == 0 and tile[1] == tiles[0][0] and tiles[0][0] == tiles[0][1]:\n                        continue\n                    elif j > 0 and j < m-1 and k > 0 and k < m-1 and tile[0] == tiles[0][0] and tiles[0][0] == tiles[0][1]:\n                        continue\n                    elif j == m-1 and k > 0 and k < m-1 and tile[1] == tiles[0][0] and tiles[0][0] == tiles[0][1]:\n                        continue\n                    elif j > 0 and j < m-1 and k == m-1 and tile[1] == tiles[0][1] and tiles[0][1] == tiles[0][0]:\n                        continue\n                    elif j == 0 and k > 0 and k < m-1 and tile[0] == tiles[0][1] and tiles[0][1] == tiles[0][0]:\n                        continue\n                    elif j > 0 and j < m-1 and k == 0 and tile[1] == tiles[0][1] and tiles[0][1] == tiles[0][0]:\n                        continue\n                    elif j > 0 and j < m-1 and k > 0 and k < m-1 and tile[0] == tiles[0][1] and tiles[0][1] == tiles[0][0]:\n                        continue\n                    elif j == m-1 and k > 0 and k < m-1 and tile[1] == tiles[0][1] and tiles[0][1] == tiles[0][0]:\n                        continue\n                    else:\n                        break\n                else:\n                    print(\"YES\")\n                    break\n            else:\n                print(\"NO\")\n                break\n                \n"
    },
    {
        "number": 4026,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.split(\"\\n\")\n    t = int(test_cases[0])\n    results = []\n\n    for i in range(1, t * 2 + 1, 2):\n        n, m = map(int, test_cases[i].split())\n        tiles = []\n\n        for j in range(i + 1, i + 1 + 2 * n, 2):\n            top_left, top_right = map(int, test_cases[j].split())\n            bottom_left, bottom_right = map(int, test_cases[j + 1].split())\n            tiles.append([(top_left, top_right), (bottom_left, bottom_right)])\n\n        if is_symmetric(m, tiles):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n\n    return \"\\n\".join(results)\n\n\ndef"
    },
    {
        "number": 4027,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    sum_a = sum_b = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            sum_a += i\n        else:\n            sum_b += i\n    return str(abs(sum_a - sum_b))"
    },
    {
        "number": 4027,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n % 2 == 0:\n        return str(n // 2)\n    else:\n        return str(n // 2 + 1)"
    },
    {
        "number": 4027,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 2 or n == 3:\n        return \"0\"\n    elif n % 2 == 0:\n        return str(n // 2)\n    else:\n        return str(n // 2 + 1)"
    },
    {
        "number": 4027,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n % 2 == 0:\n        return str(n // 2)\n    else:\n        return str(n // 2 + 1)"
    },
    {
        "number": 4027,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return str(n // 2)\n    else:\n        return str(n // 2)"
    },
    {
        "number": 4027,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return str(n // 2)\n    else:\n        return str(n // 2) + '\\n' + str(n // 2 + 1)"
    },
    {
        "number": 4027,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a_sum = 0\n    b_sum = 0\n    \n    for i in range(1, n+1):\n        if i % 2 == 0:\n            a_sum += i\n        else:\n            b_sum += i\n    \n    return str(abs(a_sum - b_sum))\n"
    },
    {
        "number": 4027,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    if n % 2 == 0:\n        return str(n // 2)\n    else:\n        return str(n // 2 + 1)"
    },
    {
        "number": 4027,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sequence = [i for i in range(1, n+1)]\n    min_diff = float('inf')\n    for i in range(1, n):\n        sum_a = sum(sequence[:i])\n        sum_b = sum(sequence[i:])\n        diff = abs(sum_a - sum_b)\n        min_diff = min(min_diff, diff)\n    return str(min_diff)"
    },
    {
        "number": 4027,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b = divmod(n, 2)\n    if b == 1:\n        a += 1\n    return str(a - (n // 2))"
    },
    {
        "number": 4028,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split()\n    n = int(n)\n    if n < 1 or n > 100 or len(s) < 1 or len(s) > 200:\n        return \"Invalid input\"\n    \n    modulo = 1000000007\n    count = 0\n    \n    for i in range(len(s)):\n        substring = s[i:i+n]\n        if substring == \"(\" * n:\n            count += 1\n    \n    return str(count * (2 ** (n-1)) % modulo)\n\n\ninput_str = input(\"Enter the input: \")\nprint(solution(input_str)) "
    },
    {
        "number": 4028,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    mod = 1000000007\n    total = 0\n    s_length = len(s)\n    for i in range(2*n - s_length + 1):\n        subseq = s\n        if i > 0:\n            subseq = \"(\" * i + subseq\n        if i + s_length < 2*n:\n            subseq += \")\" * (2*n - s_length - i)\n        total += count_valid_bracket_sequences(subseq)\n        total %= mod\n    return str(total)\n\ndef"
    },
    {
        "number": 4028,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split()\n    n = int(n)\n    s = list(s)\n    \n    def count_brackets(brackets, length):\n        if length == 0:\n            return 1\n        if brackets[0] == '(':\n            return count_brackets(brackets[1:], length - 1)\n        else:\n            return count_brackets(brackets[1:], length + 1)\n    \n    def generate_brackets(length):\n        if length == 0:\n            return [[]]\n        if length == 1:\n            return [['('], [')']]\n        result = []\n        for left in generate_brackets(length - 1):\n            for right in generate_brackets(1):\n                result.append(['('] + left + ['+', '1', '+'] + right + [')'])\n        return result\n    \n    def count_substring(brackets, substring):\n        count = 0\n        for i in range(len(brackets)):\n            if brackets[i:i + len(substring)] == substring:\n                count += 1\n        return count\n    \n    def count_regular_brackets(length, substring):\n        all_brackets = generate_brackets(length)\n        return sum([count_substring(bracket, substring) for bracket in all_brackets])\n    \n    regular_brackets_count = count_regular_brackets(2 * n, s)\n    result = regular_brackets_count % (10**9 + 7)\n    \n    return str(result)\n\ninput_file = open('input.txt', 'r')\noutput_file = open('output.txt', 'w')\n\ninput_data = input_file.read()\noutput_file.write(solution(input_data))\n\ninput_file.close()\noutput_file.close() "
    },
    {
        "number": 4028,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split()\n    n = int(n)\n\n    def is_valid(bracket_sequence):\n        stack = []\n        for char in bracket_sequence:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if not stack or stack.pop() != '(':\n                    return False\n            else:\n                return False\n        return not stack\n\n    def count_valid(length, substring):\n        count = 0\n        for i in range(length - len(substring) + 1):\n            if ''.join(['1', '+', substring, '1']) in is_valid(''.join(['(', '1', '+', substring, ')'] * (length - len(substring)) + ')'):\n                count += 1\n        return count\n\n    return str(count_valid(2 * n, s) % (10**9 + 7))"
    },
    {
        "number": 4028,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split()\n    n = int(n)\n    \n    count = 0\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substring = s[i:j]\n            if '(' in substring and ')' in substring:\n                count += 1\n    \n    result = count * pow(2, n - 1, 10**9 + 7)\n    return str(result)"
    },
    {
        "number": 4028,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split()\n    n = int(n)\n    s = int(s)\n    \n    mod = 10**9 + 7\n    result = 0\n    \n    # Edge case when s contains only one '(' or ')'\n    if s.count('(') == 1 or s.count(')') == 1:\n        if s.count('(') == 1 and s.count(')') == 0:\n            result = pow(2, n-1, mod)\n        elif s.count('(') == 0 and s.count(')') == 1:\n            result = pow(2, n-1, mod)\n        else:\n            result = 0\n        return str(result % mod)\n    \n    # Generate all possible bracket sequences\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            bracket_sequence = \"(\" * i + s + \")\" * j\n            if s in bracket_sequence:\n                result += 1\n    \n    return str(result % mod)"
    },
    {
        "number": 4028,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split()\n    n = int(n)\n    \n    count = 0\n    for i in range(2*n - len(s) + 1):\n        if s in '(' * i + ')' * (2*n - len(s) - i) + s:\n            count += 1\n    \n    return str(count % (10**9 + 7))"
    },
    {
        "number": 4028,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    mod = 1000000007\n    result = 0\n    for i in range(n):\n        if s[i] == '(' and s[i + n] == ')':\n            result = (result + 1) % mod\n        elif s[i] == '(':\n            result = (result + pow(2, n - 1, mod)) % mod\n        elif s[i] == ')':\n            result = (result + pow(2, n - 2, mod) * (pow(2, n - 1, mod) - 1)) % mod\n    return str(result)\n\nn = int(input())\ns = input()\n\nprint(solution(f\"{n} {s}\")) "
    },
    {
        "number": 4028,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split()\n    MOD = 1000000007\n\n    def count_brackets(bracket_sequence: str) -> int:\n        count = 0\n        for char in bracket_sequence:\n            if char == '(':\n                count += 1\n            else:\n                count -= 1\n        return count\n\n    def is_regular_bracket_sequence(bracket_sequence: str) -> bool:\n        stack = []\n        for char in bracket_sequence:\n            if char == '(':\n                stack.append(char)\n            else:\n                if not stack or stack[-1] == '(':\n                    stack.append(char)\n                else:\n                    stack.pop()\n        return not stack\n\n    def generate_bracket_sequences(s: str, prefix: str) -> str:\n        if len(prefix) == len(s) * 2:\n            if s in prefix:\n                if is_regular_bracket_sequence(prefix):\n                    regular_bracket_sequences.append(prefix)\n        else:\n            generate_bracket_sequences(s, prefix + '(')\n            generate_bracket_sequences(s, prefix + ')')\n\n    regular_bracket_sequences = []\n    generate_bracket_sequences(s, '')\n    result = 0\n\n    for bracket_sequence in regular_bracket_sequences:\n        count = count_brackets(bracket_sequence)\n        result += count * (count + 1) // 2\n        result %= MOD\n\n    return str(result)"
    },
    {
        "number": 4028,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(str, stdin.split())\n    MOD = 1000000007\n    prefix_count = [0] * (len(s) + 1)\n    suffix_count = [0] * (len(s) + 1)\n\n    for i in range(1, len(s) + 1):\n        prefix_count[i] = prefix_count[i - 1] + (s[i - 1] == '(')\n        suffix_count[i] = suffix_count[i - 1] - (s[i - 1] == ')')\n\n    result = 0\n    for i in range(len(s) - 1):\n        if s[i:i + len(s)] in s[i + 1:]:\n            substring_length = len(s[i:i + len(s)])\n            if substring_length % 2 == 0:\n                pairs_count = (prefix_count[substring_length // 2] - suffix_count[substring_length // 2]) % MOD\n                result += pairs_count\n\n    return str(result % MOD)\n"
    },
    {
        "number": 4029,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n % 2 != 0:\n        if n < 10 or n >= 10000000000000000:\n            return \"-1\"\n        first_digit = n // 10000000000000000\n        second_digit = (n % 10000000000000000) // 1000000000000000\n        n = n % 1000000000000000 + second_digit * 10000000000000 + first_digit\n        count += 1\n    if n % 25 != 0:\n        return \"-1\"\n    else:\n        return str(count)"
    },
    {
        "number": 4029,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 25 == 0:\n        return 0\n    \n    def is_valid(number: int) -> bool:\n        return number % 25 == 0\n\n    def get_min_moves(number: int) -> int:\n        count = 0\n        while number % 10 != 0:\n            number //= 10\n            count += 1\n        if count == 0:\n            return 0\n        while number % 10 == 0:\n            number //= 10\n            count += 1\n        if count == 0:\n            return 0\n        if number % 10 == 0:\n            count += 1\n        return count\n\n    def swap_adjacent_digits(number: int) -> int:\n        digits = list(str(number))\n        for i in range(len(digits) - 1):\n            if digits[i] == '0' or digits[i + 1] == '0':\n                continue\n            digits[i], digits[i + 1] = digits[i + 1], digits[i]\n            if is_valid(int(''.join(digits))):\n                return int(''.join(digits))\n            digits[i], digits[i + 1] = digits[i + 1], digits[i]\n        return -1\n\n    current_number = n\n    moves = 0\n    while True:\n        if current_number % 10 == 0:\n            current_number //= 10\n            moves += 1\n            continue\n        min_moves = get_min_moves(current_number)\n        if min_moves == 0:\n            return moves\n        current_number = swap_adjacent_digits(current_number)\n        if current_number == -1:\n            return -1\n        moves += 1"
    },
    {
        "number": 4029,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 25 == 0:\n        return \"0\"\n    else:\n        min_moves = float(\"inf\")\n        for i in range(len(str(n)) - 1):\n            if n % 10 == 0:\n                return -1\n            n -= n % 10\n            n //= 10\n            if n % 25 == 0:\n                return 0\n            n *= 10\n            min_moves = min(min_moves, n)\n        return min_moves"
    },
    {
        "number": 4029,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    mod = n % 25\n    if mod == 0:\n        return \"0\"\n\n    count = 0\n    while n > 0:\n        digit = n % 10\n        if digit == 0:\n            return \"-1\"\n        if digit > mod:\n            n -= (10 - digit)\n            count += 1\n        n //= 10\n\n    return str(count)\n"
    },
    {
        "number": 4029,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n % 25 != 0:\n        if n % 10 == 0:\n            return \"-1\"\n        elif n % 10 != 0 and (n // 10) % 10 == 0:\n            return \"-1\"\n        else:\n            if n % 10 != 0:\n                n = n % 10 + n // 10\n                count += 1\n            else:\n                n = n % 100 + n // 10\n                count += 1\n    return count\n\n\ndef"
    },
    {
        "number": 4029,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    def count_swaps(num: int) -> int:\n        count = 0\n        while num > 9999999999999999:\n            num = int(str(num)[::-1])\n            count += 1\n        return count\n\n    def is_divisible_by_25(num: int) -> bool:\n        return num % 25 == 0\n\n    swaps = count_swaps(n)\n    if swaps > 100:\n        return \"-1\"\n\n    result = n\n    for _ in range(swaps):\n        result = int(str(result)[::-1])\n\n    if is_divisible_by_25(result):\n        return str(swaps)\n    else:\n        return \"-1\""
    },
    {
        "number": 4029,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    digits = [int(d) for d in str(n)]\n    min_moves = 0\n\n    for i in range(len(digits) - 1):\n        if digits[i] > digits[i + 1]:\n            min_moves += digits[i] - digits[i + 1]\n            digits[i], digits[i + 1] = digits[i + 1], digits[i]\n\n    result = int(\"\".join([str(d) for d in digits]))\n\n    if result % 25 == 0:\n        return str(min_moves)\n    else:\n        return \"-1\""
    },
    {
        "number": 4029,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n % 25 == 0:\n        return \"0\"\n\n    def count_leading_zeros(num: int) -> int:\n        count = 0\n        while num and num % 10 == 0:\n            count += 1\n            num //= 10\n        return count\n\n    def swap_adjacent_digits(num: int) -> int:\n        reversed_num = 0\n        while num:\n            last_digit = num % 10\n            num //= 10\n            reversed_num = reversed_num * 10 + last_digit\n        return reversed_num\n\n    def count_moves(num: int) -> int:\n        count = 0\n        while count_leading_zeros(num) < count_leading_zeros(n):\n            num = swap_adjacent_digits(num)\n            count += 1\n        return count\n\n    return str(count_moves(n))"
    },
    {
        "number": 4029,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    n_str = str(n)\n    \n    def swap_digits(s: str, i: int, j: int) -> str:\n        s_list = list(s)\n        s_list[i], s_list[j] = s_list[j], s_list[i]\n        return ''.join(s_list)\n\n    def is_divisible_by_25(s: str) -> bool:\n        return int(s) % 25 == 0\n\n    def min_moves(n_str: str) -> int:\n        if is_divisible_by_25(n_str):\n            return 0\n\n        for i in range(len(n_str) - 1):\n            for j in range(i + 1, len(n_str)):\n                new_n_str = swap_digits(n_str, i, j)\n                if is_divisible_by_25(new_n_str):\n                    return 1\n\n        return -1\n\n    return str(min_moves(n_str))"
    },
    {
        "number": 4029,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    min_moves = -1\n    n_str = str(n)\n\n    def is_divisible_by_25(num: str) -> bool:\n        return int(num) % 25 == 0\n\n    def swap_adjacent_digits(num: str) -> str:\n        for i in range(len(num) - 1):\n            if num[i] < num[i + 1]:\n                return num[:i] + num[i + 1] + num[i] + num[i + 2:]\n        return num\n\n    while not is_divisible_by_25(n_str):\n        n_str = swap_adjacent_digits(n_str)\n        min_moves += 1\n\n    return min_moves"
    },
    {
        "number": 4030,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    \n    # Calculate the minimum number of colors\n    chars = set(s)\n    min_colors = len(chars)\n    \n    # Calculate the coloring\n    coloring = [min_colors] * n\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] != s[j]:\n                coloring[i] = coloring[j] = min(coloring[i], coloring[j])\n    \n    # Calculate the maximum color index\n    max_color = 1\n    for color in coloring:\n        if color > max_color:\n            max_color = color\n    \n    # Reverse the colors\n    for i in range(n):\n        coloring[i] = max_color - coloring[i] + 1\n    \n    return f\"{min_colors}\\n{' '.join(map(str, coloring))}\" "
    },
    {
        "number": 4030,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n\n    # Count the frequency of each character in the string\n    freq = {}\n    for char in s:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Sort the characters based on their frequency\n    sorted_chars = sorted(freq.keys(), key=lambda x: freq[x], reverse=True)\n\n    # Create a map of characters to colors\n    color_map = {}\n    color = 1\n    for char in sorted_chars:\n        color_map[char] = color\n        color += 1\n\n    # Calculate the minimum number of colors required\n    min_colors = color - 1\n\n    # Create the coloring array\n    coloring = [color_map[char] for char in s]\n\n    return str(min_colors) + \"\\n\" + \" \".join(map(str, coloring))"
    },
    {
        "number": 4030,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    s = stdin.split(\"\\n\")[1]\n    \n    # Find the minimum number of colors needed to sort the string\n    sorted_string = sorted(s)\n    res = 1\n    while s != sorted_string:\n        res += 1\n        temp = sorted_string\n        for i in range(1, n):\n            if s[i] != sorted_string[i-1] and s[i] != sorted_string[i]:\n                sorted_string[i-1], sorted_string[i] = sorted_string[i], sorted_string[i-1]\n        if s == sorted_string:\n            break\n    \n    # Color the string with the minimum number of colors\n    coloring = []\n    for i in range(n):\n        if s[i] == sorted_string[i]:\n            coloring.append(1)\n        else:\n            coloring.append(res)\n    \n    return str(res) + \"\\n\" + \" \".join(map(str, coloring))"
    },
    {
        "number": 4030,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    s_list = list(s)\n    s_list.sort()\n    color_count = 1\n    while True:\n        color_list = [-1] * n\n        for i in range(n):\n            color_list[i] = s_list.index(s[i]) + 1\n        if color_list == list(range(1, n+1)):\n            break\n        color_count += 1\n    return f\"{color_count}\\n{' '.join(map(str, color_list))}\""
    },
    {
        "number": 4030,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n\n    coloring = [1] * n\n    for i in range(n - 1):\n        if s[i] > s[i + 1]:\n            coloring[i] = coloring[i + 1] = max(coloring[i], coloring[i + 1]) + 1\n\n    res = max(coloring)\n    return f\"{res}\\n{' '.join(str(c) for c in coloring)}\""
    },
    {
        "number": 4030,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    s_sorted = sorted(s)\n    min_colors = len(set(s))\n    \n    for i in range(1, n):\n        if s_sorted[i] == s_sorted[i-1]:\n            continue\n        if s.count(s_sorted[i]) == 1:\n            min_colors -= 1\n    \n    colors = {c: i+1 for i, c in enumerate(set(s))}\n    coloring = [colors[c] for c in s]\n    \n    return f\"{min_colors}\\n{' '.join(str(c) for c in coloring)}\"\n\nn = int(input())\ns = input()\nprint(solution(f\"{n} {s}\")) "
    },
    {
        "number": 4030,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    min_colors = n\n    coloring = [-1] * n\n\n    # Try all possible colorings\n    for color in range(n):\n        current_coloring = [color + 1] * n\n        sorted_string = s\n\n        # Perform all possible swaps\n        while not is_sorted(sorted_string):\n            for i in range(n - 1):\n                if sorted_string[i] > sorted_string[i + 1] and current_coloring[i] != current_coloring[i + 1]:\n                    swap_colors(current_coloring, i, i + 1)\n                    swap_characters(sorted_string, i, i + 1)\n\n        # Check if current coloring is better than previous ones\n        if min_colors > max(current_coloring):\n            min_colors = max(current_coloring)\n            coloring = current_coloring\n\n    # Print the result\n    result = [str(color) for color in coloring]\n    return \"\\n\".join(result)\n\ndef"
    },
    {
        "number": 4030,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n\n    char_count = [0] * 26\n    for char in s:\n        char_count[ord(char) - ord('a')] += 1\n\n    max_count = max(char_count)\n    res = 1\n    while res * max_count <= n:\n        res += 1\n\n    min_colors = res\n    min_coloring = [0] * n\n    for i in range(n):\n        min_coloring[i] = (ord(s[i]) - ord('a') + 1) % min_colors\n\n    return str(min_colors) + '\\n' + ' '.join(map(str, min_coloring))"
    },
    {
        "number": 4030,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    s = stdin.split(\"\\n\")[1]\n\n    s_sorted = sorted(s)\n    s_sorted_color = [1] * n\n    s_color = [1] * n\n    s_map = {c: i for i, c in enumerate(s)}\n    s_map_sorted = {c: i for i, c in enumerate(s_sorted)}\n\n    for i in range(n):\n        s_sorted_color[i] = s_map_sorted[s[i]] + 1\n\n    res = max(s_sorted_color)\n    for i in range(n):\n        s_color[i] = s_sorted_color[s_map_sorted[s[i]]]\n\n    return f\"{res}\\n{' '.join(str(c) for c in s_color)}\""
    },
    {
        "number": 4030,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n\n    # Initialize variables\n    min_colors = n\n    min_coloring = [1] * n\n\n    # Iterate through all possible colorings\n    for color_count in range(1, n + 1):\n        for coloring in itertools.permutations(range(1, color_count + 1)):\n            # Check if the coloring is valid\n            if len(set(coloring)) == color_count:\n                # Sort the string using the coloring\n                sorted_string = [s[i] for i in range(n) if min_coloring[i] == coloring.index(min_coloring[i]) + 1]\n\n                # Check if the sorted string is equal to the original string\n                if sorted_string == sorted(s):\n                    # Update the minimum colors and coloring\n                    min_colors = color_count\n                    min_coloring = list(coloring)\n                    break\n\n    return str(min_colors) + \"\\n\" + \" \".join(str(color) for color in min_coloring)"
    },
    {
        "number": 4031,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.split('\\n')[0])\n    strings = stdin.split('\\n')[1:]\n\n    # check if any string is a substring of another string\n    for i in range(n):\n        for j in range(n):\n            if i != j and strings[i] not in strings[j]:\n                return \"NO\"\n\n    # sort strings based on the condition\n    sorted_strings = sorted(strings, key=lambda x: sum(1 for _ in re.finditer(x, ''.join(strings))))\n\n    return \"YES\\n\" + '\\n'.join(sorted_strings)"
    },
    {
        "number": 4031,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    strings = stdin.splitlines()[1:]\n    if len(strings) != n:\n        return \"NO\"\n    \n    sorted_strings = []\n    used_strings = []\n    for string in strings:\n        for i in range(len(sorted_strings) + 1):\n            if i < len(sorted_strings) and sorted_strings[i] in string:\n                continue\n            sorted_strings.insert(i, string)\n            used_strings.append(string)\n            break\n        else:\n            return \"NO\"\n    \n    if len(used_strings) == n:\n        return \"YES\\n\" + \"\\n\".join(sorted_strings)\n    else:\n        return \"NO\""
    },
    {
        "number": 4031,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    strings = stdin.split('\\n')[1:]\n\n    def is_substring(sub: str, s: str) -> bool:\n        return sub in s\n\n    def find_position(strings: List[str], s: str) -> int:\n        for i, string in enumerate(strings):\n            if is_substring(s, string):\n                return i\n        return -1\n\n    for i, string in enumerate(strings):\n        position = find_position(strings[:i], string)\n        if position == -1:\n            return \"NO\"\n\n    result = []\n    while strings:\n        string = strings.pop(0)\n        result.append(string)\n        new_strings = []\n        for s in strings:\n            if is_substring(string, s):\n                new_strings.append(s)\n        strings = new_strings\n\n    return \"YES\\n\" + \"\\n\".join(result)\n\ninput_data = \"5\\na\\naba\\nabacaba\\nb\\naba\"\noutput_data = solution(input_data)\nprint(output_data)\n\ninput_data = \"5\\na\\nabacaba\\nb\\naba\\nabab\"\noutput_data = solution(input_data)\nprint(output_data)\n\ninput_data = \"3\\nqwerty\\nqwerty\\nqwerty\"\noutput_data = solution(input_data)\nprint(output_data) "
    },
    {
        "number": 4031,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    strings = stdin.split('\\n')[1:]\n    \n    if n != len(strings):\n        return \"NO\"\n    \n    for i in range(n):\n        string = strings[i]\n        for j in range(n):\n            if j == i:\n                continue\n            if string not in strings[j]:\n                return \"NO\"\n    \n    return \"YES\\n\" + '\\n'.join(strings)\n\n\ninput_str = \"5\\na\\naba\\nabacaba\\nba\\naba\"\nprint(solution(input_str))\n\ninput_str = \"5\\na\\nabacaba\\nba\\naba\\nabab\"\nprint(solution(input_str))\n\ninput_str = \"3\\nqwerty\\nqwerty\\nqwerty\"\nprint(solution(input_str)) "
    },
    {
        "number": 4031,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    strings = [stdin.readline().strip() for _ in range(n)]\n    strings_dict = {}\n\n    for string in strings:\n        for i in range(len(string)):\n            for j in range(i + 1, len(string) + 1):\n                substring = string[i:j]\n                if substring not in strings_dict:\n                    strings_dict[substring] = []\n                strings_dict[substring].append(string)\n\n    result = []\n    for string in strings:\n        for substring in strings_dict:\n            if string in strings_dict[substring]:\n                result.append(substring)\n                break\n\n    if len(result) != len(strings):\n        return \"NO\"\n\n    return \"YES\" + \"\\n\" + \"\\n\".join(result)\n"
    },
    {
        "number": 4031,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    strings = [stdin.readline().strip() for _ in range(n)]\n    \n    if not strings:\n        return \"NO\"\n    \n    sorted_strings = sorted(strings, key=lambda x: (len(x), x))\n    result = []\n    \n    for string in sorted_strings:\n        is_valid = True\n        for i in range(len(result)):\n            if not result[i].endswith(string):\n                is_valid = False\n                break\n        if is_valid:\n            result.append(string)\n    \n    if len(result) == n:\n        return \"YES\\n\" + \"\\n\".join(result)\n    else:\n        return \"NO\""
    },
    {
        "number": 4031,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    strings = stdin.splitlines()[1:]\n    # check if it's possible to reorder the strings\n    reordered_strings = []\n    for s in strings:\n        if not all(reordered_strings[-1] in s for reordered_strings in reordered_strings):\n            return \"NO\"\n        reordered_strings.append(s)\n    # reorder the strings\n    for s in strings:\n        for reordered_strings in reordered_strings:\n            if s in reordered_strings:\n                reordered_strings.remove(s)\n                reordered_strings.insert(0, s)\n                break\n    return \"YES\" + \"\\n\" + \"\\n\".join(reordered_strings)\n\n\ninput_str = \"\"\"5\na\naba\nabacaba\nba\naba\"\"\"\nprint(solution(input_str))\n\ninput_str = \"\"\"5\na\nabacaba\nba\naba\nabab\"\"\"\nprint(solution(input_str))\n\ninput_str = \"\"\"3\nqwerty\nqwerty\nqwerty\"\"\"\nprint(solution(input_str)) "
    },
    {
        "number": 4031,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # read the input\n    n = int(stdin.split('\\n')[0])\n    strings = stdin.split('\\n')[1:]\n\n    # check if it is possible to reorder the strings\n    reordered = []\n    for string in strings:\n        if reordered and not string.startswith(reordered[-1]):\n            return \"NO\"\n        reordered.append(string)\n\n    # return the reordered strings\n    return \"YES\" + \"\\n\" + \"\\n\".join(reordered)\n"
    },
    {
        "number": 4031,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    strings = stdin.split(\"\\n\")\n    n = int(strings[0])\n    strings = strings[1:]\n\n    def is_subsequence(subseq, seq):\n        index = 0\n        for char in seq:\n            if char == subseq[index]:\n                index += 1\n            if index == len(subseq):\n                return True\n        return False\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if not is_subsequence(strings[i], strings[j]):\n                return \"NO\"\n\n    return \"YES\\n\" + \"\\n\".join(strings)\n\n\ndef"
    },
    {
        "number": 4031,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    strings = stdin.splitlines()[1:]\n    strings.sort(key=lambda x: (-len(x), x))\n\n    result = []\n    for s in strings:\n        if all(s in x for x in result):\n            result.append(s)\n        else:\n            return \"NO\"\n\n    return \"YES\\n\" + \"\\n\".join(result)\n\n\ndef"
    },
    {
        "number": 4032,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    difficulties = list(map(int, stdin.split()))\n\n    problems_solved = 0\n    left_index = 0\n    right_index = n - 1\n\n    while left_index <= right_index:\n        left_problem = difficulties[left_index]\n        right_problem = difficulties[right_index]\n\n        if left_problem <= k:\n            problems_solved += 1\n            left_index += 1\n        if right_problem <= k:\n            problems_solved += 1\n            right_index -= 1\n\n        if left_problem > k and right_problem > k:\n            break\n\n    return str(problems_solved)\n"
    },
    {
        "number": 4032,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    problems = list(map(int, stdin.split()[2:]))\n    \n    left, right = 0, n - 1\n    count = 0\n    \n    while left <= right:\n        if problems[left] <= k and problems[right] <= k:\n            count += 2\n            left += 1\n            right -= 1\n        elif problems[left] <= k and problems[right] > k:\n            count += 1\n            left += 1\n        elif problems[left] > k and problems[right] <= k:\n            count += 1\n            right -= 1\n        else:\n            break\n            \n    return str(count)"
    },
    {
        "number": 4032,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    problems = list(map(int, stdin.split()))\n    \n    solved_problems = 0\n    left_problems = problems[:n//2]\n    right_problems = problems[n//2:]\n    \n    while left_problems or right_problems:\n        if left_problems and left_problems[0] <= k:\n            left_problems = left_problems[1:]\n            solved_problems += 1\n        elif right_problems and right_problems[-1] <= k:\n            right_problems = right_problems[:-1]\n            solved_problems += 1\n        else:\n            break\n            \n    return str(solved_problems)"
    },
    {
        "number": 4032,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    problems = list(map(int, input().split()))\n    left_problems = problems[:]\n    right_problems = problems[::-1]\n\n    left_solved = 0\n    right_solved = 0\n\n    for i in range(n):\n        if i % 2 == 0:\n            if left_problems[i] <= k:\n                left_solved += 1\n            else:\n                break\n        else:\n            if right_problems[i] <= k:\n                right_solved += 1\n            else:\n                break\n\n    return str(min(left_solved, right_solved))\n"
    },
    {
        "number": 4032,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0].split())\n    problems = list(map(int, stdin.split()[1].split()))\n\n    left_problems = [problems[i] for i in range(n) if i % 2 == 0]\n    right_problems = [problems[i] for i in range(n) if i % 2 != 0]\n\n    left_solved = right_solved = 0\n    left_index = right_index = 0\n\n    while left_index < len(left_problems) and right_index < len(right_problems):\n        if left_problems[left_index] <= k:\n            left_solved += 1\n            left_index += 1\n        if right_problems[right_index] <= k:\n            right_solved += 1\n            right_index += 1\n\n    return str(max(left_solved, right_solved))"
    },
    {
        "number": 4032,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    problems = list(map(int, stdin.split()[2:]))\n\n    left_solved = 0\n    right_solved = 0\n    left_difficulty = problems[0]\n    right_difficulty = problems[-1]\n\n    while left_difficulty <= k and right_difficulty <= k:\n        if left_difficulty <= right_difficulty:\n            left_solved += 1\n            left_difficulty = problems[left_solved]\n        else:\n            right_solved -= 1\n            right_difficulty = problems[right_solved]\n\n    return str(left_solved + right_solved + 1)\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4032,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    problems = list(map(int, stdin.split()[2:]))\n    \n    solved = 0\n    left, right = 0, len(problems) - 1\n    \n    while left <= right:\n        if problems[left] <= k:\n            solved += 1\n            left += 1\n        else:\n            break\n        \n        if problems[right] <= k:\n            solved += 1\n            right -= 1\n        else:\n            break\n    \n    return str(solved)\n\ninput_str = input()\nresult = solution(input_str)\nprint(result) "
    },
    {
        "number": 4032,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    problems = list(map(int, stdin.split()[2:]))\n\n    left_problems = 0\n    right_problems = 0\n\n    for problem in problems:\n        if problem <= k:\n            if problems.index(problem) == 0:\n                left_problems += 1\n            elif problems.index(problem) == len(problems) - 1:\n                right_problems += 1\n\n    return str(max(left_problems, right_problems))\n\ndef"
    },
    {
        "number": 4032,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    difficulties = list(map(int, input().split()))\n\n    count = 0\n    left_index = 0\n    right_index = n - 1\n\n    while left_index <= right_index:\n        if difficulties[left_index] <= k:\n            count += 1\n            left_index += 1\n        elif difficulties[right_index] <= k:\n            count += 1\n            right_index -= 1\n        else:\n            break\n\n    return str(count)"
    },
    {
        "number": 4032,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    problems = list(map(int, stdin.split()))\n\n    left_problems = [problem for problem in problems if problem <= k]\n    right_problems = [problem for problem in problems[::-1] if problem <= k]\n\n    max_left_problems = len(left_problems)\n    max_right_problems = len(right_problems)\n\n    return str(min(max_left_problems, max_right_problems))\n\ninput_data = input()\nprint(solution(input_data)) "
    },
    {
        "number": 4033,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n\n    def get_min_perimeter(a: int, b: int, perimeter: int) -> int:\n        if a == 0 or b == 0:\n            return perimeter\n        if perimeter + a + b <= 2 * (a + b):\n            return get_min_perimeter(a - 1, b, perimeter + 2)\n        else:\n            return get_min_perimeter(a, b - 1, perimeter + 2)\n\n    return str(get_min_perimeter(a, b, 0))\n\ndef"
    },
    {
        "number": 4033,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    perimeter = min(a * b, (a + b) * 2)\n    return str(perimeter)"
    },
    {
        "number": 4033,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n\n    min_perimeter = float('inf')\n\n    for x in range(a + b + 1):\n        y = a + b - x\n        if x * y == a * b:\n            perimeter = 2 * (x + y)\n            min_perimeter = min(min_perimeter, perimeter)\n\n    return str(min_perimeter)"
    },
    {
        "number": 4033,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n\n    def min_perimeter(a, b):\n        if a == 1 or b == 1:\n            return 2 * (a + b)\n        elif a == b:\n            return 4 * a\n        else:\n            return min(2 * (a + b), 2 * (a - 1) + 2 * (b - 1) + 4)\n\n    return str(min_perimeter(a, b))"
    },
    {
        "number": 4033,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    min_perimeter = a + b\n    min_side_a = 0\n    min_side_b = 0\n\n    for i in range(1, a + b + 1):\n        if i * (a + b) == a * b:\n            min_perimeter = i * 2 * (a + b)\n            min_side_a = i\n            min_side_b = a + b\n            break\n        elif i * (a + b) > a * b:\n            break\n\n    return str(min_perimeter)"
    },
    {
        "number": 4033,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    \n    def is_valid(x: int, y: int) -> bool:\n        if x * y != a + b:\n            return False\n        if x > a or y > b:\n            return False\n        return True\n    \n    def min_perimeter(x: int, y: int) -> int:\n        return 2 * (x + y)\n    \n    min_perimeter_value = float('inf')\n    \n    for x in range(1, a + b + 1):\n        y = (a + b) // x\n        if is_valid(x, y):\n            perimeter = min_perimeter(x, y)\n            if perimeter < min_perimeter_value:\n                min_perimeter_value = perimeter\n    \n    return str(min_perimeter_value)\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4033,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    min_perimeter = float('inf')\n    for x in range(1, a + b + 1):\n        y = a + b - x\n        if x * y == a + b:\n            min_perimeter = min(min_perimeter, 2 * (x + y))\n    return str(min_perimeter)\n\ninput_str = input(\"Enter a and b: \")\nprint(solution(input_str)) "
    },
    {
        "number": 4033,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a + b < 2:\n        return str(a + b)\n    return str(a + b + 2)"
    },
    {
        "number": 4033,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    \n    def is_correct(x, y):\n        red_tiles = set()\n        blue_tiles = set()\n        for i in range(x):\n            for j in range(y):\n                if i % 2 == 0:\n                    red_tiles.add((i, j))\n                else:\n                    blue_tiles.add((i, j))\n        return len(red_tiles) == a and len(blue_tiles) == b\n    \n    min_perimeter = float('inf')\n    for x in range(a + b + 1):\n        for y in range(a + b + 1):\n            if x * y == a + b and is_correct(x, y):\n                perimeter = 2 * (x + y)\n                if perimeter < min_perimeter:\n                    min_perimeter = perimeter\n    \n    return str(min_perimeter)"
    },
    {
        "number": 4033,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    perimeters = []\n    \n    for i in range(min(a, b) + 1):\n        if a - i == b - i:\n            perimeters.append(2 * (a + b - i))\n        elif a - i == b:\n            perimeters.append(2 * (a - i) + 2 * b)\n        elif b - i == a:\n            perimeters.append(2 * (b - i) + 2 * a)\n    \n    return str(min(perimeters))\n\n\ninput_string = input()\nprint(solution(input_string)) "
    },
    {
        "number": 4034,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    \n    if n <= 1:\n        return \"YES\\n0\" * n\n    \n    if s == s[::-1]:\n        return \"YES\\n0\" * n\n    \n    for i in range(n - 1):\n        if s[i] > s[i + 1]:\n            return \"YES\\n0\" * n\n        \n        if s[i] < s[i + 1]:\n            break\n    else:\n        return \"NO\"\n    \n    for i in range(n - 1):\n        if s[i] > s[i + 1]:\n            s = s[:i] + s[i + 1] + s[i] + s[i + 2:]\n        elif s[i] < s[i + 1]:\n            break\n    \n    if s == s[::-1]:\n        return \"YES\\n0\" * n\n    else:\n        return \"NO\"\n    \n"
    },
    {
        "number": 4034,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split()\n    n = int(n)\n\n    if len(s) != n:\n        return \"NO\"\n\n    is_sorted = True\n    for i in range(n - 1):\n        if s[i] > s[i + 1]:\n            is_sorted = False\n            break\n\n    if is_sorted:\n        return \"YES\" + \"\\n\" + \"0\" * n\n\n    s_list = list(s)\n    s_list.sort()\n\n    for i in range(n):\n        if s[i] != s_list[i]:\n            return \"YES\" + \"\\n\" + \"\".join(\"1\" if i % 2 else \"0\" for i in range(n))\n\n    return \"NO\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n\n    if len(set(s)) == n:\n        return \"YES\\n\" + \"0\" * n\n\n    s = list(s)\n    for i in range(n):\n        if i < n - 1 and s[i] > s[i + 1]:\n            return \"YES\\n\" + \"0\" * n\n        if i > 0 and s[i] < s[i - 1]:\n            return \"YES\\n\" + \"0\" * n\n\n    return \"NO\""
    },
    {
        "number": 4034,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    # Check if s can be sorted by swaps\n    # If there are no pairs of different characters, it can be sorted\n    if len(set(s)) == 1:\n        return \"YES\\n0\" * n\n\n    # If there are pairs of different characters, sort them and find the largest possible interval between them\n    max_interval = 0\n    for i in range(len(s) - 1):\n        if s[i] != s[i + 1]:\n            max_interval = max(max_interval, i + 1 - 0)\n\n    # If the largest interval is smaller than n, it can be sorted\n    if max_interval >= n:\n        return \"YES\\n0\" * n\n    else:\n        return \"NO\""
    },
    {
        "number": 4034,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split()\n    n = int(n)\n\n    # Check if s can be sorted by some sequence of swaps\n    if sorted(s) == list(s):\n        return \"YES\" + \"\\n\" + \"0\" * n\n\n    # Initialize variables\n    one_color = ['0' for _ in range(n)]\n    other_color = ['1' for _ in range(n)]\n\n    # Iterate through the string and try to color it\n    for i in range(n - 1):\n        if s[i] > s[i + 1]:\n            one_color[i] = '1'\n            other_color[i + 1] = '0'\n        elif s[i] < s[i + 1]:\n            one_color[i + 1] = '1'\n            other_color[i] = '0'\n\n    # Check if the resulting coloring can sort the string\n    if ''.join(one_color) == ''.join(sorted(s)):\n        return \"YES\" + \"\\n\" + ''.join(one_color)\n    else:\n        return \"NO\""
    },
    {
        "number": 4034,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    \n    if len(set(s)) == 1:\n        return \"YES\\n\" + \"0\" * n\n    \n    for i in range(n - 1):\n        if s[i] > s[i + 1]:\n            return \"NO\"\n    \n    return \"YES\\n\" + \"0\" * n"
    },
    {
        "number": 4034,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    \n    # First, check if the string is already sorted\n    if s == ''.join(sorted(s)):\n        return \"YES\\n\" + ''.join('0' if c.islower() else '1' for c in s)\n    \n    # If not, try to swap two neighboring characters with different colors\n    for i in range(n - 1):\n        if s[i] != s[i + 1]:\n            new_s = s[:i] + s[i + 1] + s[i] + s[i + 2:]\n            if new_s == ''.join(sorted(new_s)):\n                return \"YES\\n\" + ''.join('0' if c.islower() else '1' for c in new_s)\n    \n    return \"NO\""
    },
    {
        "number": 4034,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n\n    for i in range(n):\n        for j in range(n):\n            if s[i] > s[j] and (i-1 < 0 or s[i] != s[i-1]) and (j+1 >= n or s[i] != s[j+1]):\n                return \"YES\\n\" + \"\".join(\"1\" if i % 2 == 0 else \"0\" for i in range(n))\n\n    return \"NO\""
    },
    {
        "number": 4034,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    s = stdin.split(\"\\n\")[1]\n    s_sorted = sorted(s)\n\n    if s == s_sorted:\n        return \"YES\\n\" + \"0\" * n\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if s_sorted[i] == s[j]:\n                if s[i] == s_sorted[j]:\n                    s[i], s[j] = s[j], s[i]\n                else:\n                    s[i] = s_sorted[j]\n                    s[j] = s[i]\n                return \"YES\\n\" + \"\".join([\"0\" if c == s_sorted[k] else \"1\" for k, c in enumerate(s)])\n\n    return \"NO\"\n\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4034,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    s_sorted = sorted(s)\n\n    for i in range(n):\n        if s[i] != s_sorted[i]:\n            if i == 0 or s[i] != s[i - 1]:\n                return \"NO\"\n\n    result = \"\"\n    for i in range(n):\n        if s[i] == s_sorted[i]:\n            result += \"0\"\n        else:\n            result += \"1\"\n\n    return \"YES\\n\" + result\n"
    },
    {
        "number": 4035,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    \n    if A > B:\n        return \"-1\"\n    \n    result = []\n    for i in range(A, B+1):\n        if (i * 0.08).is_integer() and (i * 0.1).is_integer():\n            result.append(i)\n    \n    if result:\n        return str(min(result))\n    else:\n        return \"-1\""
    },
    {
        "number": 4035,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    for i in range(A, B+1):\n        consumption_tax_8 = i * 0.08\n        consumption_tax_10 = i * 0.1\n        if int(consumption_tax_8) == A and int(consumption_tax_10) == B:\n            return str(i)\n    return \"-1\""
    },
    {
        "number": 4035,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n\n    if A > B:\n        return -1\n\n    for price in range(1, 101):\n        tax_8 = price * 0.08\n        tax_10 = price * 0.1\n\n        if int(tax_8) == A and int(tax_10) == B:\n            return str(price)\n\n    return -1"
    },
    {
        "number": 4035,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    for price in range(1, B+1):\n        if (price*0.08).is_integer() and (price*0.1).is_integer():\n            return str(price)\n    return \"-1\""
    },
    {
        "number": 4035,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n\n    def tax(price: int, rate: int) -> int:\n        return int(price * rate)\n\n    def is_valid(price: int) -> bool:\n        return tax(price, 0.08) == A and tax(price, 0.1) == B\n\n    for i in range(1, 10000):\n        if is_valid(i):\n            return str(i)\n\n    return \"-1\""
    },
    {
        "number": 4035,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    # Find the lowest price such that A <= price*0.08 and B <= price*0.1.\n    price = 0\n    while True:\n        if A <= price * 0.08 <= B:\n            break\n        price += 1\n    return str(price) if price != 0 else \"-1\""
    },
    {
        "number": 4035,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        return -1\n\n    for price in range(1, 101):\n        tax_8_percent = price * 0.08\n        tax_10_percent = price * 0.1\n\n        if (tax_8_percent % 1 < 0.01 or tax_8_percent % 1 > 0.99) and (tax_10_percent % 1 < 0.01 or tax_10_percent % 1 > 0.99):\n            continue\n\n        if int(tax_8_percent) == a and int(tax_10_percent) == b:\n            return str(price)\n\n    return -1"
    },
    {
        "number": 4035,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n\n    for i in range(a + 1, b + 1):\n        if (i * 0.08).is_integer() and (i * 0.1).is_integer():\n            return str(i)\n\n    return \"-1\""
    },
    {
        "number": 4035,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    for price in range(1, 101):\n        if A == round(price * 0.08) and B == round(price * 0.1):\n            return str(price)\n    return \"-1\""
    },
    {
        "number": 4035,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    result = -1\n\n    for price in range(1, 101):\n        tax_8 = price * 0.08\n        tax_10 = price * 0.1\n\n        if int(tax_8) == A and int(tax_10) == B:\n            if result == -1 or price < result:\n                result = price\n\n    return str(result)"
    },
    {
        "number": 4036,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    \n    if n == 0 or k == 0:\n        return \"NO\"\n    \n    if n % k != 0:\n        return \"NO\"\n    \n    a = [n // k] * k\n    for i in range(1, k):\n        a[i] = a[i - 1] * 2\n    \n    return \"YES\\n\" + \" \".join(map(str, a)) + \"\\n\""
    },
    {
        "number": 4036,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 0 or k == 0:\n        return \"NO\"\n    if k >= n:\n        return \"YES\\n\" + \" \".join(map(str, [n for _ in range(k)]))\n    a = [1] * k\n    i = 0\n    while sum(a) < n:\n        if a[i] * 2 <= n - sum(a) + a[i]:\n            a[i] *= 2\n        else:\n            a[i] = n - sum(a) + a[i]\n        i = (i + 1) % k\n    return \"YES\\n\" + \" \".join(map(str, a)) "
    },
    {
        "number": 4036,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 0 or k == 0:\n        return \"NO\"\n\n    if n == 1:\n        return \"YES\\n1\"\n\n    for x in range(1, n + 1):\n        a = [x]\n        for i in range(1, k - 1):\n            a.append(min(2 * a[-1], n - sum(a)))\n            if a[-1] == 0:\n                break\n        if sum(a) == n and all(x > 0 for x in a) and all(x < y for x, y in zip(a, a[1:])):\n            return \"YES\\n\" + \" \".join(map(str, a))\n\n    return \"NO\""
    },
    {
        "number": 4036,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n\n    if n < k:\n        return \"NO\"\n\n    a = [1] * k\n    for i in range(1, k):\n        a[i] = a[i - 1] * 2\n\n    total = sum(a)\n    if total != n:\n        return \"NO\"\n\n    return \"YES\\n\" + \" \".join(map(str, a))"
    },
    {
        "number": 4036,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k < 1 or k > 10**5 or n < 1 or n > 10**9:\n        return \"NO\"\n\n    if k == 1:\n        return \"YES\\n1\"\n\n    a = [1] * k\n    for i in range(k-1, 0, -1):\n        a[i] = 2 * a[i+1]\n\n    total = sum(a)\n    if total != n:\n        return \"NO\"\n\n    return \"YES\\n\" + \" \".join(map(str, a))"
    },
    {
        "number": 4036,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < k:\n        return \"NO\"\n    \n    if n == k:\n        return \"YES\\n\" + \" \".join(map(str, [1] * k))\n    \n    for i in range(1, k):\n        if n >= i + 1 and n <= i * 2:\n            return \"YES\\n\" + \" \".join(map(str, [i + 1] * k))\n    \n    return \"NO\""
    },
    {
        "number": 4036,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 0:\n        return \"NO\"\n    \n    if n == 1:\n        return \"YES\\n1\"\n    \n    a = []\n    for i in range(k):\n        if i == k - 1:\n            a.append(n - sum(a))\n            break\n        \n        x = n // k + (1 if i < n % k else 0)\n        if i == 0:\n            a.append(x)\n        else:\n            a.append(min(2 * a[i-1], x))\n    \n    if sum(a) != n:\n        return \"NO\"\n    \n    return \"YES\" + \"\\n\" + \" \".join(map(str, a)) "
    },
    {
        "number": 4036,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n\n    if n < k:\n        return \"NO\"\n\n    a = [1] * k\n    a[-1] = n - k + 1\n    for i in range(k - 2, -1, -1):\n        if a[i + 1] <= 2 * a[i]:\n            a[i] = a[i + 1] // 2\n        else:\n            a[i] = a[i + 1] // 2 - 1\n\n    if sum(a) != n:\n        return \"NO\"\n\n    return \"YES\\n\" + \" \".join(map(str, a))\n\n\ndef"
    },
    {
        "number": 4036,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1:\n        return \"YES\\n1\\n\"\n    if n == 2:\n        return \"NO\"\n    if n == 3:\n        if k == 1:\n            return \"YES\\n1 1\\n\"\n        else:\n            return \"NO\"\n    if k == 1:\n        if n % 2 == 1:\n            return \"NO\"\n        else:\n            return \"YES\\n\" + \" \".join(map(str, [n // 2] * k)) + \"\\n\"\n    if k == 2:\n        if n % 4 == 1 or n % 4 == 2:\n            return \"NO\"\n        else:\n            return \"YES\\n\" + \" \".join(map(str, [n // 4] * 2)) + \"\\n\"\n    if k >= n:\n        return \"YES\\n\" + \" \".join(map(str, [1] * n)) + \"\\n\"\n    if k == 3 and n % 6 == 1:\n        return \"NO\"\n    if k == 4 and n % 8 == 1:\n        return \"NO\"\n    if k == 5 and n % 10 == 1:\n        return \"NO\"\n    return \"YES\\n\" + \" \".join(map(str, [n // k] * k)) + \"\\n\"\n\n\ntest_cases = [\n    (\"26 6\", \"YES\\n1 2 4 5 6 8 \\n\"),\n    (\"8 3\", \"NO\\n\"),\n    (\"1 1\", \"YES\\n1 \\n\"),\n    (\"9 4\", \"NO\\n\"),\n    (\"10 4\", \"YES\\n3 3 2 2 \\n\"),\n    (\"11 5\", \"YES\\n2 3 2 3 2 \\n\"),\n    (\"12 6\", \"YES\\n2 3 2 3 2 2 \\n\"),\n    (\"20 7\", \"YES\\n3 3 2 3 2 2 2 \\n\"),\n    (\"30 10\", \"YES\\n3 3 2 3 2 2 2 3 3 3 \\n\"),\n]\n\nfor case, expected in test_cases:\n    assert solution(case) == expected\n\nprint(\"All test cases passed.\") "
    },
    {
        "number": 4036,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid_array(arr: List[int]) -> bool:\n        n = sum(arr)\n        if n != n_problems or any(a <= 0 for a in arr):\n            return False\n        for i in range(len(arr) - 1):\n            if arr[i] >= arr[i + 1] * 2:\n                return False\n        return True\n\n    def find_valid_array(n_problems: int, n_days: int) -> Optional[List[int]]:\n        def is_valid_sequence(sequence: List[int], remaining_problems: int) -> bool:\n            if len(sequence) == n_days:\n                return sum(sequence) == n_problems and is_valid_array(sequence)\n\n            for i in range(remaining_problems + 1):\n                if is_valid_sequence(sequence + [i], remaining_problems - i):\n                    return True\n            return False\n\n        for i in range(n_problems + 1):\n            if is_valid_sequence([i], n_problems - i):\n                return [i] + list(range(n_problems - i))\n        return None\n\n    n_problems, n_days = map(int, stdin.split())\n    if n_days > n_problems:\n        return \"NO\"\n\n    array = find_valid_array(n_problems, n_days)\n    if array is None:\n        return \"NO\"\n    return \"YES\\n{}\".format(\" \".join(map(str, array)))"
    },
    {
        "number": 4037,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, input().split())\n    projects = []\n    for _ in range(n):\n        a, b = map(int, input().split())\n        projects.append((a, b))\n\n    projects.sort(key=lambda x: x[0])\n    current_rating = r\n    max_subset_size = 0\n\n    for i, project in enumerate(projects):\n        a, b = project\n        if a <= current_rating:\n            current_rating += b\n            max_subset_size = max(max_subset_size, i + 1)\n        else:\n            break\n\n    return str(max_subset_size)\n\ninput_stdin = \"\"\"3 4\n4 6\n10 -2\n8 -1\"\"\"\nprint(solution(input_stdin)) # Output: 3 "
    },
    {
        "number": 4037,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split()[:2])\n    projects = []\n    for i in range(n):\n        a, b = map(int, stdin.split()[2:])\n        projects.append((a, b))\n\n    projects.sort(key=lambda x: x[0])\n    ans = 0\n    for i in range(len(projects)):\n        if r >= projects[i][0]:\n            ans += 1\n            r += projects[i][1]\n        else:\n            break\n\n    return str(ans)\n\ndef"
    },
    {
        "number": 4037,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, input().split())\n    projects = []\n    for _ in range(n):\n        a, b = map(int, input().split())\n        projects.append((a, b))\n    \n    def dfs(rating: int, index: int, visited: set) -> int:\n        if index == n:\n            return 0\n        if rating < 0:\n            return 0\n        if index in visited:\n            return 0\n        \n        visited.add(index)\n        return 1 + dfs(rating + projects[index][1], index + 1, visited)\n    \n    max_size = 0\n    for i in range(n):\n        max_size = max(max_size, dfs(r, i, set()))\n    \n    return str(max_size)"
    },
    {
        "number": 4037,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def get_projects_subset(projects: List[Tuple[int, int]], r: int) -> int:\n        projects.sort(key=lambda x: x[0], reverse=True)\n        result = 0\n        for a, b in projects:\n            if r + b >= 0:\n                result += 1\n                r += b\n            else:\n                break\n        return result\n\n    n, r = map(int, stdin.split())\n    projects = [tuple(map(int, input().split())) for _ in range(n)]\n    return str(get_projects_subset(projects, r))"
    },
    {
        "number": 4037,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split()[:2])\n    projects = []\n    for i in range(n):\n        a, b = map(int, stdin.split()[2*i:2*i+2])\n        projects.append((a, b))\n    \n    def is_valid(rating: int) -> bool:\n        for a, b in projects:\n            if rating < a:\n                return False\n            rating += b\n        return True\n    \n    def binary_search(target: int) -> int:\n        left, right = 0, 1000000\n        while left <= right:\n            mid = (left + right) // 2\n            if is_valid(mid):\n                right = mid - 1\n            else:\n                left = mid + 1\n        return left\n    \n    return str(binary_search(r))\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4037,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(projects, rating, i):\n        return rating + projects[i][1] >= 0\n\n    def backtrack(projects, rating, i, current_rating, used, result):\n        if is_valid(projects, rating, i):\n            if i == len(projects) - 1:\n                result.append(current_rating + 1)\n                return\n\n            backtrack(projects, rating, i + 1, current_rating + 1, used | {i}, result)\n\n    def find_max_subset(projects, rating):\n        result = []\n        backtrack(projects, rating, 0, 0, set(), result)\n        return max(result) if result else 0\n\n    n, r = map(int, stdin.split()[:2])\n    projects = []\n    for _ in range(n):\n        a, b = map(int, stdin.split()[2:])\n        projects.append((a, b))\n\n    return str(find_max_subset(projects, r))"
    },
    {
        "number": 4037,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    projects = []\n    \n    for _ in range(n):\n        a, b = map(int, stdin.split())\n        projects.append((a, b))\n    \n    def is_valid(subset, rating):\n        for a, b in subset:\n            if rating < a:\n                return False\n            rating += b\n        return rating >= 0\n    \n    def helper(projects, rating, index, subset):\n        if index == len(projects):\n            return 0\n        if is_valid(subset + [projects[index]], rating):\n            return max(helper(projects, rating + projects[index][1], index + 1, subset + [projects[index]]),\n                       helper(projects, rating, index + 1, subset))\n        return helper(projects, rating, index + 1, subset)\n    \n    result = helper(projects, r, 0, [])\n    \n    return str(result)"
    },
    {
        "number": 4037,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def check_subset(rating, a, b, idx, i):\n        if rating + b[i] >= 0 and idx == n:\n            return 1\n        elif idx == n:\n            return 0\n        if rating + b[idx] >= 0:\n            return max(check_subset(rating + b[idx], a, b, idx + 1, i),\n                        check_subset(rating, a, b, idx + 1, i))\n        else:\n            return check_subset(rating, a, b, idx + 1, i)\n\n    n, r = map(int, stdin.split()[:2])\n    a, b = [], []\n    for i in range(n):\n        a.append(int(stdin.split()[2 * i + 2]))\n        b.append(int(stdin.split()[2 * i + 3]))\n\n    max_rating = -1\n    for i in range(n):\n        for j in range(i, n):\n            max_rating = max(max_rating, check_subset(r, a, b, 0, j))\n\n    return str(max_rating)\n\ninput_1 = \"3 4\\n4 6\\n10 -2\\n8 -1\"\ninput_2 = \"5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45\"\ninput_3 = \"3 2\\n300 -300\\n1 299\\n1 123\"\n\nprint(solution(input_1))\nprint(solution(input_2))\nprint(solution(input_3)) "
    },
    {
        "number": 4037,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.readline().split())\n    projects = []\n    for _ in range(n):\n        a, b = map(int, stdin.readline().split())\n        projects.append((a, b))\n\n    projects.sort(key=lambda x: x[0], reverse=True)\n    rating = r\n    max_size = 0\n\n    for a, b in projects:\n        if rating >= a:\n            rating += b\n            max_size += 1\n\n    return str(max_size)"
    },
    {
        "number": 4037,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(rating, a, b):\n        return rating >= a\n\n    n, r, projects = map(int, stdin.split(\"\\n\")[0].split())\n    a_b_list = [list(map(int, line.split())) for line in stdin.split(\"\\n\")[1:]]\n\n    dp = [0] * (r + 1)\n    dp[0] = 1\n\n    for i in range(n):\n        a, b = a_b_list[i]\n        for j in range(r, 0, -1):\n            if is_valid(j, a, b):\n                dp[j] = max(dp[j], dp[j - b] + 1)\n\n    return str(dp[r])"
    },
    {
        "number": 4038,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_palindromic(matrix):\n        for i in range(n):\n            for j in range(n):\n                if matrix[i][j] != matrix[i][n - j - 1]:\n                    return False\n        return True\n\n    def reverse_rows(matrix):\n        new_matrix = []\n        for i in range(n):\n            new_matrix.append(matrix[n - i - 1])\n        return new_matrix\n\n    def reverse_columns(matrix):\n        new_matrix = []\n        for j in range(n):\n            new_row = []\n            for i in range(n):\n                new_row.append(matrix[i][n - j - 1])\n            new_matrix.append(new_row)\n        return new_matrix\n\n    n, numbers = stdin.split(\"\\n\")\n    n = int(n)\n    numbers = [int(num) for num in numbers.split(\" \")]\n\n    if len(numbers) != n * n:\n        return \"NO\"\n\n    matrix = [numbers[i:i+n] for i in range(0, len(numbers), n)]\n\n    if is_palindromic(matrix):\n        return \"YES\\n\" + \"\\n\".join([\" \".join(map(str, row)) for row in matrix])\n\n    reversed_matrix = reverse_rows(matrix)\n    if is_palindromic(reversed_matrix):\n        return \"YES\\n\" + \"\\n\".join([\" \".join(map(str, row)) for row in reversed_matrix])\n\n    reversed_columns_matrix = reverse_columns(matrix)\n    if is_palindromic(reversed_columns_matrix):\n        return \"YES\\n\" + \"\\n\".join([\" \".join(map(str, row)) for row in reversed_columns_matrix])\n\n    return \"NO\"\n\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    matrix = [list(map(int, stdin.split('\\n')[1].split())) for _ in range(n)]\n    \n    def is_palindromic(matrix: List[List[int]]) -> bool:\n        for i in range(n):\n            for j in range(n):\n                if matrix[i][j] != matrix[i][n-1-j]:\n                    return False\n                if matrix[i][j] != matrix[n-1-i][j]:\n                    return False\n        return True\n    \n    def count_nums(matrix: List[List[int]], num: int) -> int:\n        count = 0\n        for i in range(n):\n            for j in range(n):\n                if matrix[i][j] == num:\n                    count += 1\n        return count\n    \n    def find_positions(matrix: List[List[int]], num: int) -> List[Tuple[int, int]]:\n        positions = []\n        for i in range(n):\n            for j in range(n):\n                if matrix[i][j] == num:\n                    positions.append((i, j))\n        return positions\n    \n    def fill_matrix(matrix: List[List[int]], num: int, positions: List[Tuple[int, int]]) -> None:\n        for i, j in positions:\n            matrix[i][j] = num\n    \n    def check_solution(matrix: List[List[int]]) -> bool:\n        for i in range(n):\n            for j in range(n):\n                if count_nums(matrix, matrix[i][j]) != 1:\n                    return False\n        return True\n    \n    for i in range(n):\n        matrix[i].reverse()\n        for j in range(n):\n            matrix[i][j], matrix[i][n-1-j] = matrix[i][n-1-j], matrix[i][j]\n    \n    if is_palindromic(matrix):\n        return \"YES\\n\" + \"\\n\".join([\" \".join(map(str, row)) for row in matrix])\n    \n    for num in range(1, 1001):\n        if count_nums(matrix, num) == 1:\n            positions = find_positions(matrix, num)\n            fill_matrix(matrix, num, positions)\n            if is_palindromic(matrix) and check_solution(matrix):\n                return \"YES\\n\" + \"\\n\".join([\" \".join(map(str, row)) for row in matrix])\n            for p in positions:\n                matrix[p[0]][p[1]] = 0\n    \n    return \"NO\" "
    },
    {
        "number": 4038,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def is_palindromic(matrix):\n        rows = len(matrix)\n        cols = len(matrix[0])\n\n        for i in range(rows // 2):\n            if matrix[i] != matrix[rows - i - 1]:\n                return False\n\n        for j in range(cols):\n            if matrix[0][j] != matrix[rows - 1][j]:\n                return False\n\n        return True\n\n    def put_numbers_into_matrix(n, numbers):\n        matrix = [[0] * n for _ in range(n)]\n        numbers = list(numbers)\n\n        def find_empty_cell(matrix, row):\n            for j in range(n):\n                if matrix[row][j] == 0:\n                    return j\n            return -1\n\n        for i in range(n):\n            for j in range(n):\n                if matrix[i][j] == 0:\n                    empty_cell_row = i\n                    empty_cell_col = j\n                    break\n\n            for number in numbers:\n                if matrix[empty_cell_row][empty_cell_col] == 0:\n                    matrix[empty_cell_row][empty_cell_col] = number\n                    numbers.remove(number)\n                    break\n\n            if len(numbers) == 0:\n                return matrix\n\n            empty_cell_col = find_empty_cell(matrix, empty_cell_row)\n            if empty_cell_col == -1:\n                empty_cell_row += 1\n                empty_cell_col = 0\n\n        return matrix\n\n    n = int(stdin.readline().strip())\n    numbers = stdin.readline().strip().split()\n    matrix = put_numbers_into_matrix(n, numbers)\n\n    if is_palindromic(matrix):\n        for row in matrix:\n            print(\" \".join(map(str, row)))\n        return\n\n    print(\"NO\")"
    },
    {
        "number": 4038,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    matrix = stdin.split()[1:]\n    matrix = [list(map(int, matrix[i:i + n])) for i in range(0, len(matrix), n)]\n\n    def is_palindrome(matrix: list) -> bool:\n        for i in range(n // 2):\n            for j in range(n // 2):\n                if matrix[i][j] != matrix[n - 1 - i][n - 1 - j]:\n                    return False\n        return True\n\n    def reverse_rows(matrix: list) -> list:\n        return [matrix[n - 1 - i][::-1] for i in range(n)]\n\n    def reverse_cols(matrix: list) -> list:\n        return [[matrix[i][n - 1 - j] for j in range(n)] for i in range(n)]\n\n    def find_solution(matrix: list, used: set, row: int, col: int) -> bool:\n        if row == n:\n            if is_palindrome(matrix):\n                for row in matrix:\n                    print(\" \".join(map(str, row)))\n                return True\n            else:\n                return False\n\n        for num in range(1, n + 1):\n            if num not in used:\n                used.add(num)\n                matrix[row][col] = num\n                if find_solution(matrix, used, row + 1 if col == n - 1 else row, (col + 1) % n):\n                    return True\n                used.remove(num)\n                matrix[row][col] = 0\n        return False\n\n    if len(matrix) == n * n:\n        used = set()\n        for i in range(n):\n            for j in range(n):\n                if matrix[i][j] == 0:\n                    return \"NO\"\n                used.add(matrix[i][j])\n        if len(used) != n * n:\n            return \"NO\"\n\n        if find_solution(matrix, used, 0, 0):\n            return \"YES\"\n        else:\n            for i in range(n):\n                matrix[i] = reverse_rows(matrix[i])\n                if find_solution(matrix, used, 0, 0):\n                    return \"YES\"\n\n            for i in range(n):\n                matrix = reverse_cols(matrix)\n                if find_solution(matrix, used, 0, 0):\n                    return \"YES\"\n\n    return \"NO\"\n\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    numbers = [int(x) for x in stdin.splitlines()[1].split()]\n\n    if len(numbers) != n * n:\n        return \"NO\"\n\n    matrix = [[0] * n for _ in range(n)]\n    rows, cols = [0] * n, [0] * n\n\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = numbers.pop()\n            rows[i] += matrix[i][j]\n            cols[j] += matrix[i][j]\n\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[n-i-1][n-j-1] or (rows[i] != cols[j] and rows[i] != cols[j]):\n                return \"NO\"\n\n    for i in range(n):\n        for j in range(n):\n            print(matrix[i][j], end=\" \")\n        print()\n\n    return \"YES\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    matrix_numbers = list(map(int, stdin.split(\"\\n\")[1].split()))\n    if len(matrix_numbers) != n * n:\n        return \"NO\"\n\n    def is_palindrome(matrix: List[List[int]]) -> bool:\n        for row in range(n):\n            if matrix[row] != matrix[row][::-1]:\n                return False\n        for col in range(n):\n            if [row[col] for row in matrix] != [row[col] for row in matrix[::-1]]:\n                return False\n        return True\n\n    def backtrack(matrix: List[List[int]]) -> bool:\n        if len(matrix_numbers) == 0:\n            return is_palindrome(matrix)\n\n        row, col = len(matrix), len(matrix[0]) if matrix else 0\n        for i in range(row * col):\n            r, c = divmod(i, col)\n            if matrix and matrix[r][c] != -1:\n                continue\n            if not all(matrix_numbers.count(num) > 0 for num in range(1, 10)):\n                continue\n\n            matrix[r][c] = matrix_numbers.pop(0)\n            if backtrack(matrix):\n                return True\n            matrix[r][c] = -1\n            matrix_numbers.append(matrix[r][c])\n\n        return False\n\n    matrix = [[-1 for _ in range(n)] for _ in range(n)]\n    if backtrack(matrix):\n        return \"YES\\n\" + \"\\n\".join(\" \".join(str(cell) for cell in row) for row in matrix)\n    return \"NO\""
    },
    {
        "number": 4038,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    numbers = list(map(int, stdin.split('\\n')[1].split()))\n\n    def is_palindrome(matrix):\n        return matrix == matrix[::-1]\n\n    def is_valid(matrix):\n        if len(set(sum(matrix, []))) != n * n:\n            return False\n        if len(numbers) != n * n:\n            return False\n        for i in range(n):\n            for j in range(n):\n                if matrix[i][j] != numbers.pop(0):\n                    return False\n        return True\n\n    def fill_matrix(matrix):\n        for i in range(n):\n            for j in range(n):\n                for k in range(n * n):\n                    if numbers[k] not in matrix and (i, j) not in used_cells:\n                        matrix[i][j] = numbers.pop(k)\n                        used_cells.add((i, j))\n                        break\n\n    for i in range(n):\n        for j in range(n):\n            used_cells = set()\n            matrix = [[0] * n for _ in range(n)]\n            fill_matrix(matrix)\n            if is_valid(matrix) and is_palindrome(matrix):\n                return \"YES\\n\" + '\\n'.join([' '.join(map(str, row)) for row in matrix])\n\n    return \"NO\"\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    matrix = []\n    for row in range(n):\n        matrix.append([int(x) for x in stdin.split()[row * n: (row + 1) * n]])\n\n    def is_palindrome(matrix: List[List[int]]) -> bool:\n        for i in range(n // 2):\n            for j in range(n // 2):\n                if matrix[i][j] != matrix[n - i - 1][n - j - 1]:\n                    return False\n        return True\n\n    def reverse_rows(matrix: List[List[int]]) -> List[List[int]]:\n        return [row[::-1] for row in matrix]\n\n    def reverse_columns(matrix: List[List[int]]) -> List[List[int]]:\n        return [list(row) for row in zip(*matrix)]\n\n    def is_valid(matrix: List[List[int]]) -> bool:\n        unique_numbers = set()\n        for row in matrix:\n            unique_numbers.update(row)\n        return len(unique_numbers) == n**2\n\n    if is_valid(matrix) and is_palindrome(matrix):\n        return \"YES\\n\" + \"\\n\".join(\" \".join(str(x) for x in row) for row in matrix)\n    else:\n        return \"NO\"\n\ninput_str = input()\nn = int(input_str.split()[0])\nmatrix = []\nfor row in range(n):\n    matrix.append([int(x) for x in input_str.split()[row * n: (row + 1) * n]])\n\nprint(solution(input_str)) "
    },
    {
        "number": 4038,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_palindrome(matrix: List[List[int]]) -> bool:\n        return matrix == matrix[::-1]\n\n    def reverse_rows(matrix: List[List[int]]) -> List[List[int]]:\n        return matrix[::-1]\n\n    def reverse_columns(matrix: List[List[int]]) -> List[List[int]]:\n        return [[row[i] for row in matrix] for i in range(len(matrix[0]))]\n\n    def fill_matrix(n: int, numbers: List[int]) -> List[List[int]]:\n        matrix = [[0] * n for _ in range(n)]\n        for i, num in enumerate(numbers):\n            row, col = divmod(i, n)\n            matrix[row][col] = num\n        return matrix\n\n    n = int(stdin.readline())\n    numbers = list(map(int, stdin.readline().split()))\n\n    if len(numbers) != n * n:\n        return \"NO\"\n\n    matrix = fill_matrix(n, numbers)\n\n    if is_palindrome(matrix) or is_palindrome(reverse_rows(matrix)) or is_palindrome(reverse_columns(matrix)):\n        for row in matrix:\n            print(\" \".join(map(str, row)))\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    numbers = list(map(int, stdin.split()[1:]))\n    \n    def is_palindrome(matrix):\n        for i in range(n):\n            for j in range(n):\n                if matrix[i][j] != matrix[j][i]:\n                    return False\n        return True\n\n    def is_solution(matrix):\n        for row in matrix:\n            if len(set(row)) != n:\n                return False\n        for col in range(n):\n            col_values = [matrix[i][col] for i in range(n)]\n            if len(set(col_values)) != n:\n                return False\n        return True\n\n    def generate_matrix(numbers):\n        matrix = []\n        for i in range(n):\n            row = []\n            for j in range(n):\n                row.append(numbers[i * n + j])\n            matrix.append(row)\n        return matrix\n\n    def solve():\n        for permutation in itertools.permutations(numbers):\n            matrix = generate_matrix(permutation)\n            if is_palindrome(matrix) and is_solution(matrix):\n                return \"YES\\n\" + \"\\n\".join([\" \".join(map(str, row)) for row in matrix])\n        return \"NO\"\n\n    return solve()\n\nimport itertools"
    },
    {
        "number": 4039,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    projects = []\n\n    for _ in range(n):\n        a, b = map(int, stdin.split())\n        projects.append((a, b))\n\n    def dfs(i: int, remaining_rating: int) -> bool:\n        if i == n:\n            return remaining_rating >= 0\n\n        a, b = projects[i]\n\n        if remaining_rating >= a:\n            return dfs(i + 1, remaining_rating + b)\n        else:\n            return False\n\n    return \"YES\" if dfs(0, r) else \"NO\"\n\n\ndef"
    },
    {
        "number": 4039,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    projects = []\n    for i in range(n):\n        a, b = map(int, input().split())\n        projects.append((a, b))\n\n    def check_project_order(order):\n        current_rating = r\n        for i in order:\n            if current_rating >= projects[i][0]:\n                current_rating += projects[i][1]\n            else:\n                return False\n            if current_rating < 0:\n                return False\n        return True\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if check_project_order(range(i, j + 1)):\n                return \"YES\"\n            if check_project_order(range(j, i - 1, -1)):\n                return \"YES\"\n    return \"NO\"\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4039,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split()[:2])\n    projects = [list(map(int, line.split())) for line in stdin.split('\\n')[1:n+1]]\n    \n    def has_enough_rating(rating, required_rating) -> bool:\n        return rating >= required_rating\n    \n    def update_rating(rating, rating_change) -> int:\n        return rating + rating_change\n    \n    def is_valid_order(rating, order) -> bool:\n        for a, b in order:\n            if not has_enough_rating(rating, a):\n                return False\n            rating = update_rating(rating, b)\n            if rating < 0:\n                return False\n        return True\n    \n    valid_orders = []\n    for order in itertools.permutations(projects):\n        if is_valid_order(r, order):\n            valid_orders.append(order)\n    \n    return \"YES\" if valid_orders else \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    projects = []\n    for _ in range(n):\n        a, b = map(int, stdin.split())\n        projects.append((a, b))\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if projects[i][0] > projects[j][0]:\n                projects[i], projects[j] = projects[j], projects[i]\n\n    for i in range(n):\n        if r < projects[i][0]:\n            return \"NO\"\n        r += projects[i][1]\n        if r < 0:\n            return \"NO\"\n\n    return \"YES\"\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4039,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split()[:2])\n    projects = []\n\n    for line in stdin.split('\\n')[1:]:\n        if line:\n            a, b = map(int, line.split())\n            projects.append((a, b))\n\n    def is_possible(projects, r, i):\n        if i == len(projects):\n            return True\n\n        a, b = projects[i]\n        if r < a:\n            return False\n\n        return is_possible(projects, r + b, i + 1) or is_possible(projects, r - b, i + 1)\n\n    return \"YES\" if is_possible(projects, r, 0) else \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split()[0:2])\n    projects = []\n    for i in range(n):\n        a, b = map(int, stdin.split()[2:])\n        projects.append((a, b))\n    \n    for i in range(n):\n        if projects[i][0] > r:\n            return \"NO\"\n        r += projects[i][1]\n        if r <= 0:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4039,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, input().split())\n    projects = []\n    for i in range(n):\n        a, b = map(int, input().split())\n        projects.append((a, b))\n\n    def dfs(i, rating):\n        if i == n:\n            return rating == r\n\n        if rating < 0:\n            return False\n\n        return (dfs(i + 1, rating + projects[i][1]) or\n                dfs(i + 1, rating))\n\n    return \"YES\" if dfs(0, r) else \"NO\"\n\nstdin = '''3 4\n4 6\n10 -2\n8 -1\n'''\nprint(solution(stdin)) # Output: YES "
    },
    {
        "number": 4039,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split()[:2])\n    projects = []\n    for line in stdin.split(\"\\n\")[2:]:\n        if line:\n            a, b = map(int, line.split())\n            projects.append((a, b))\n\n    def is_possible(start_rating: int) -> bool:\n        for a, b in projects:\n            if start_rating < a:\n                return False\n            start_rating += b\n        return True\n\n    if is_possible(r):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4039,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # parse the input\n    n, r = map(int, stdin.split())\n    projects = []\n    for i in range(n):\n        a, b = map(int, stdin.split())\n        projects.append((a, b))\n\n    # sort the projects by the required rating in descending order\n    projects.sort(key=lambda x: x[0], reverse=True)\n\n    # initialize the current rating and the list of completed projects\n    rating = r\n    completed_projects = []\n\n    # iterate over the projects\n    for a, b in projects:\n        # check if the current rating is sufficient\n        if rating >= a:\n            # complete the project\n            rating += b\n            completed_projects.append((a, b))\n        else:\n            # the current rating is not sufficient, so stop\n            break\n\n    # check if all projects were completed\n    if len(completed_projects) == n:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4039,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, r = map(int, lines[0].split())\n    a = []\n    b = []\n    for i in range(1, n+1):\n        ai, bi = map(int, lines[i].split())\n        a.append(ai)\n        b.append(bi)\n\n    def is_valid(order: list) -> bool:\n        for i in order:\n            r -= a[i-1]\n            if r < 0:\n                return False\n            r += b[i-1]\n        return True\n\n    def permute(order: list, used: set, result: list) -> None:\n        if len(order) == n:\n            result.append(order.copy())\n            return\n        for i in range(n):\n            if i not in used:\n                order.append(i+1)\n                used.add(i)\n                permute(order, used, result)\n                order.pop()\n                used.remove(i)\n\n    valid_orders = []\n    used = set()\n    for i in range(n):\n        if i not in used:\n            order = [i+1]\n            used.add(i)\n            permute(order, used, valid_orders)\n            used.remove(i)\n\n    for order in valid_orders:\n        if is_valid(order):\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split()[0].split())\n    c = list(map(int, stdin.split()[1].split()))\n    \n    # Check if the sum of c_i is greater than n\n    if sum(c) > n:\n        return \"NO\"\n    \n    # Sort the platforms from left to right\n    c.sort()\n    \n    # Initialize the answer array\n    answer = [0] * (n + 2)\n    \n    # Fill the answer array\n    for i in range(m):\n        for j in range(c[i]):\n            answer[j + sum(c[:i])] = i + 1\n    \n    # Check if there are any intersections between platforms\n    for i in range(m - 1):\n        for j in range(i + 1, m):\n            if set(range(c[i])) & set(range(c[j])):\n                return \"NO\"\n    \n    # Check if the answer is valid\n    for i in range(1, m):\n        if answer.count(i) != c[i]:\n            return \"NO\"\n    \n    return \"YES\\n\" + \" \".join(map(str, answer[1:-1]))\n"
    },
    {
        "number": 4040,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.readline().split())\n    c = list(map(int, stdin.readline().split()))\n    c.sort()\n    c.append(n + 1)\n    result = [0] * (n + 2)\n\n    for i in range(1, m + 1):\n        for j in range(c[i - 1] + 1, c[i]):\n            result[j] = i\n\n    if n == 1:\n        return \"YES\\n\" + \" \".join(map(str, result))\n\n    if d == 1:\n        return \"YES\\n\" + \" \".join(map(str, result))\n\n    left_jump = 0\n    right_jump = n + 1\n    while left_jump <= right_jump:\n        if left_jump == right_jump:\n            return \"YES\\n\" + \" \".join(map(str, result))\n\n        if left_jump + d <= right_jump - d:\n            for i in range(left_jump + d, right_jump - d + 1):\n                if result[i] == 0 and result[i - 1] != 0 and result[i + 1] != 0:\n                    result[i] = result[i - 1]\n\n            left_jump += d\n            right_jump -= d\n        else:\n            left_jump += 1\n            right_jump -= 1\n\n    return \"NO\"\n\ninput_data = \"\"\nwith open(\"input.txt\", \"r\") as file:\n    input_data = file.read()\n\noutput = solution(input_data)\n\nwith open(\"output.txt\", \"w\") as file:\n    file.write(output) "
    },
    {
        "number": 4040,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split()[:3])\n    c = list(map(int, stdin.split()[3:]))\n    platforms = []\n    \n    if sum(c) > n:\n        return \"NO\"\n    \n    for i in range(m):\n        if c[i] > n:\n            return \"NO\"\n        platforms.append([n - c[i], n + 1])\n    \n    def can_jump(start: int, end: int, platforms: List[List[int]]) -> bool:\n        if start == end:\n            return True\n        \n        for platform in platforms:\n            if start >= platform[0] and end <= platform[1]:\n                return True\n        \n        return False\n    \n    def move_platform(platform: List[int], step: int) -> List[int]:\n        return [platform[0] + step, platform[1] + step]\n    \n    def find_jump_sequence(start: int, end: int, platforms: List[List[int]]) -> List[int]:\n        if start == end:\n            return [start]\n        \n        for platform in platforms:\n            if start >= platform[0] and end <= platform[1]:\n                new_platforms = platforms.copy()\n                new_platforms.remove(platform)\n                new_platforms.append(move_platform(platform, 1))\n                result = find_jump_sequence(start + 1, end, new_platforms)\n                if result:\n                    return [start] + result\n                \n                new_platforms.append(move_platform(platform, -1))\n                result = find_jump_sequence(start + 1, end, new_platforms)\n                if result:\n                    return [start] + result\n                \n        return []\n    \n    for i in range(n + 1):\n        if can_jump(0, i, platforms):\n            if can_jump(i, n + 1, platforms):\n                sequence = find_jump_sequence(0, n + 1, platforms)\n                if sequence:\n                    result = []\n                    for i in range(n + 1):\n                        if i in sequence:\n                            result.append(sequence.index(i) + 1)\n                        else:\n                            result.append(0)\n                    return \"YES\\n\" + \" \".join(map(str, result))\n    \n    return \"NO\"\n\ninput_data = input()\nstdin = \"\"\nwith open(\"input.txt\", \"r\") as file:\n    stdin = file.read()\noutput = solution(stdin)\nprint(output)<|im_sep|> "
    },
    {
        "number": 4040,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def can_jump(n, m, c, d):\n        for i in range(1, n + 1):\n            for j in range(m):\n                if i >= c[j] + j and i <= c[j] + j + d:\n                    return True\n        return False\n\n    def find_answer(n, m, c, d):\n        c.insert(0, 1)\n        c.append(1)\n        for i in range(n + 1):\n            if can_jump(n, m, c, d):\n                return True\n            else:\n                for j in range(1, m + 1):\n                    if i >= 1 and i <= c[j] - 1:\n                        c[j] -= 1\n                    elif i >= c[j] and i <= n - 1:\n                        c[j] += 1\n                if i == n:\n                    return False\n\n    n, m, d = map(int, stdin.split()[0:3])\n    c = list(map(int, stdin.split()[3:]))\n    if sum(c) > n:\n        return \"NO\"\n    else:\n        if find_answer(n, m, c, d):\n            a = [0] * (n + 2)\n            for i in range(1, m + 1):\n                for j in range(c[i]):\n                    a[j + i] = i\n            return \"YES\\n\" + \" \".join(str(x) for x in a)\n        else:\n            return \"NO\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split()[0].split())\n    c = list(map(int, stdin.split()[1].split()))\n    \n    # Check if sum of c_i's is less than n\n    if sum(c) > n:\n        return \"NO\"\n    \n    # Initialize the array a with all 0's\n    a = [0] * (n + 2)\n    \n    # Place the platforms\n    for i in range(m):\n        for j in range(c[i]):\n            a[j + 1] = i + 1\n    \n    # Check if it is possible to reach n+1 from 0\n    def is_reachable(i: int) -> bool:\n        visited = [False] * (n + 2)\n        visited[i] = True\n        queue = [i]\n        while queue:\n            current = queue.pop(0)\n            for j in range(1, d + 1):\n                if 0 <= current + j <= n + 1 and not visited[current + j]:\n                    visited[current + j] = True\n                    queue.append(current + j)\n        return visited[n + 1]\n    \n    if is_reachable(0):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4040,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split()[:3])\n    c = list(map(int, stdin.split()[3:]))\n    \n    if sum(c) > n:\n        return \"NO\"\n    \n    platforms = []\n    for i in range(m):\n        platforms.append((i + 1, c[i]))\n        \n    platforms = sorted(platforms, key=lambda x: x[1])\n    \n    for i in range(m - 1):\n        if platforms[i][1] + platforms[i + 1][1] > n:\n            return \"NO\"\n    \n    a = [0] * (n + 2)\n    \n    for index, length in platforms:\n        for i in range(length):\n            a[i + 1] = index\n    \n    for i in range(n + 1):\n        if a[i] != 0:\n            continue\n        \n        for j in range(i + 1, min(i + d + 1, n + 1)):\n            if a[j] != 0:\n                return \"YES\\n{}\".format(\" \".join(map(str, a)))\n    \n    return \"NO\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.readline().split())\n    c = list(map(int, stdin.readline().split()))\n    platforms = [0] * (n + 2)\n\n    for i in range(m):\n        for j in range(c[i]):\n            platforms[j] = i + 1\n\n    jumps = [0] * (n + 2)\n    for i in range(n + 1):\n        if platforms[i] == 0:\n            jumps[i] = 0\n        else:\n            jumps[i] = platforms[i]\n\n    for i in range(n, 0, -1):\n        if jumps[i] != 0:\n            j = i - d\n            while jumps[j] == 0 and j >= 0:\n                jumps[j] = jumps[i]\n                j -= d\n\n    if jumps[0] == 0:\n        return \"NO\"\n    else:\n        return \"YES\\n\" + \" \".join(map(str, jumps))\n\n\ndef"
    },
    {
        "number": 4040,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.readline().split())\n    c = list(map(int, stdin.readline().split()))\n    \n    # Check if the sum of c is greater than n\n    if sum(c) > n:\n        return \"NO\"\n    \n    # Create the platforms\n    platforms = []\n    for i in range(m):\n        platforms.append((sum(c[:i]), sum(c[:i+1])))\n    \n    # Check if the platforms intersect\n    for i in range(m-1):\n        for j in range(i+1, m):\n            if platforms[i][0] < platforms[j][0] < platforms[i][1] < platforms[j][1]:\n                return \"NO\"\n    \n    # Check if we can reach n+1 from 0\n    def can_reach(start: int, end: int) -> bool:\n        if start == end:\n            return True\n        \n        if start > end:\n            return False\n        \n        for platform in platforms:\n            if platform[0] <= start <= platform[1]:\n                return can_reach(start + d, end)\n        \n        return False\n    \n    if can_reach(0, n+1):\n        # Create the answer array\n        answer = [0] * (n+2)\n        for platform in platforms:\n            for i in range(platform[0], platform[1]):\n                answer[i] = platforms.index(platform) + 1\n        \n        return \"YES\\n\" + \" \".join(map(str, answer[1:-1]))\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = list(map(int, stdin.split()))\n    c = list(map(int, input().split()))\n\n    def can_reach(n, m, d, c):\n        total_length = sum(c)\n        if total_length > n:\n            return False\n\n        for i in range(m):\n            for j in range(m):\n                if i != j and c[i] + c[j] > total_length:\n                    return False\n\n        return True\n\n    if can_reach(n, m, d, c):\n        a = [0] * n\n        for i in range(m):\n            start = 1\n            end = n\n            for j in range(i):\n                if c[j] >= c[i]:\n                    start += c[j]\n            for j in range(i + 1, m):\n                if c[j] >= c[i]:\n                    end -= c[j]\n            if start >= end:\n                continue\n            a[start - 1] = i + 1\n            a[end - 1] = i + 1\n\n        for i in range(1, n):\n            if a[i] == 0:\n                if a[i - 1] != 0:\n                    a[i] = a[i - 1]\n\n        return \"YES\\n\" + \" \".join(map(str, a))\n    else:\n        return \"NO\"\n\ninput_str = input()\nstdin = input_str.strip()\nprint(solution(stdin)) "
    },
    {
        "number": 4040,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.readline().strip().split())\n    c = list(map(int, stdin.readline().strip().split()))\n    platforms = []\n    a = [0] * (n + 2)\n    \n    for i in range(1, m + 1):\n        for j in range(c[i - 1]):\n            a[j] = i\n    \n    if all(a[0] == 0) or all(a[-1] == 0):\n        return \"NO\"\n    \n    for i in range(1, m + 1):\n        for j in range(c[i - 1]):\n            if a[j] == i:\n                platforms.append([j, j + c[i - 1]])\n    \n    platforms.sort(key=lambda x: x[0])\n    \n    def is_intersecting(x):\n        for i in range(len(platforms)):\n            for j in range(i + 1, len(platforms)):\n                if x[0] >= platforms[i][0] and x[1] <= platforms[i][1] and x[0] >= platforms[j][0] and x[1] <= platforms[j][1]:\n                    return True\n        return False\n    \n    def is_valid(x):\n        for i in range(len(platforms)):\n            if x[0] >= platforms[i][0] and x[1] <= platforms[i][1]:\n                return i + 1\n        return 0\n    \n    if not any(is_intersecting(x) for x in [(0, 1), (1, 2), (2, 3), (3, 4)]):\n        return \"YES\"\n    \n    for i in range(1, n + 1):\n        for j in range(i + d, min(i + d + m, n + 1)):\n            if is_valid((i, j)) == 0 and not is_intersecting((i, j)):\n                return \"YES\"\n    \n    return \"NO\"\n\n\ndef"
    },
    {
        "number": 4041,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    max_len = 0\n\n    for i in range(len(s)):\n        if s[i:i+len(t)] == t:\n            max_len = max(max_len, len(t))\n\n    return max_len"
    },
    {
        "number": 4041,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    for i in range(len(s) - len(t) + 1):\n        if s[i:i + len(t)] == t:\n            break\n    else:\n        return '0'\n\n    return str(i)\n\ninput_data = '''\nbbaba\nbb\nbaaba\nab\nabcde\nabcde\nasdfasdf\nfasd\n'''\n\nfor case in input_data.split('\\n\\n'):\n    stdin = case.strip()\n    print(solution(stdin)) "
    },
    {
        "number": 4041,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    i = 0\n    j = 0\n    max_length = 0\n\n    while i < len(s) and j < len(t):\n        if s[i] == t[j]:\n            max_length = max(max_length, i - j + 1)\n            i += 1\n            j += 1\n        else:\n            i += 1\n\n    return max_length\n\ndef"
    },
    {
        "number": 4041,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.splitlines()\n    n, m = len(s), len(t)\n\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        for j in range(m + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = dp[i - 1][j]\n\n    return dp[n][m]\n\n\ndef"
    },
    {
        "number": 4041,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    n = len(s)\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1] + 1\n        if s[i - 1] == t[0]:\n            dp[i] = 0\n            j = 1\n            while i - j >= 0 and j < len(t):\n                if s[i - j - 1] == t[j]:\n                    dp[i] = max(dp[i], dp[i - j] + 1)\n                j += 1\n    return dp[-1]"
    },
    {
        "number": 4041,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.splitlines()\n    n = len(s)\n    dp = [0] * n\n\n    for i in range(n):\n        for j in range(i - 1, -1, -1):\n            if s[i] == t[dp[j]]:\n                dp[i] = j + 1\n                break\n\n    return max(dp)"
    },
    {
        "number": 4041,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(\"\\n\")\n    max_length = 0\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if s[i:j] == t:\n                max_length = max(max_length, j - i)\n    return str(max_length)\n\ninput_string = input()\nresult = solution(input_string)\nprint(result) "
    },
    {
        "number": 4041,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.splitlines()\n    i = 0\n    j = 0\n    max_length = 0\n\n    while i < len(s) and j < len(t):\n        if s[i] == t[j]:\n            max_length = max(max_length, i - j)\n            i += 1\n            j += 1\n        else:\n            i += 1\n\n    return max_length"
    },
    {
        "number": 4041,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    max_length = 0\n\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if s[i:j] == t:\n                max_length = max(max_length, j - i)\n\n    return max_length"
    },
    {
        "number": 4041,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    i, j = 0, 0\n    max_len = 0\n\n    while i < len(s) and j < len(t):\n        if s[i] == t[j]:\n            i += 1\n            j += 1\n            max_len = max(max_len, j)\n        else:\n            i += 1\n\n    return max_len"
    },
    {
        "number": 4042,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    if x < 1.000000 or x >= 5.000000:\n        raise ValueError(\"Input must be between 1.000000 and 4.999999\")\n    # Convert x to integer with 6 decimal places\n    x_int = int(x * 1000000)\n    # Generate all possible combinations of 2 integers between 1 and 10\n    # Store the total cost of each combination in a list\n    results = []\n    for i in range(1, 11):\n        for j in range(1, 11):\n            if i != j:\n                cost = abs(x_int - (i * 100000 + j * 10000))\n                results.append((i, j, cost))\n    # Sort the list by the cost in ascending order\n    results.sort(key=lambda x: x[2])\n    # Return the first result as a string\n    return f\"{results[0][0]} {results[0][1]}\" "
    },
    {
        "number": 4042,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    a = int(x // 1)\n    b = int(round((x % 1) * 10))\n    return f\"{a} {b}\" "
    },
    {
        "number": 4042,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    int_part = int(x)\n    dec_part = x - int_part\n    \n    if dec_part >= 0.2:\n        dec_part -= 0.2\n        int_part += 1\n    \n    result = int(dec_part * 10) + 1\n    \n    if result > 10:\n        result = 10\n    \n    return str(int_part) + ' ' + str(result)"
    },
    {
        "number": 4042,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    a = int(x // 1)\n    b = int((x % 1) * 10)\n    return f\"{a} {b}\""
    },
    {
        "number": 4042,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    \n    # calculate the first integer\n    first_int = int(x // 1)\n    # calculate the decimal part of the number\n    decimal = x - first_int\n    # calculate the second integer\n    second_int = int(decimal * 10)\n    \n    return str(first_int) + \" \" + str(second_int)"
    },
    {
        "number": 4042,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin.strip())\n    a = int(x // 1)\n    b = int((x % 1) * 10)\n    return f\"{a * b} {b}\""
    },
    {
        "number": 4042,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    a, b = 0, 0\n    while b < 10:\n        b += 1\n        if 1 + (x - b) / (b - 1) < 0:\n            break\n        a = b - 1\n    return f\"{a} {b}\" "
    },
    {
        "number": 4042,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    d1 = int(x // 1)  # integer part of x\n    d2 = int((x % 1) * 1000000)  # fractional part of x\n\n    # use d1 and d2 to calculate the two integers\n    # ...\n\n    # return the solution as a string\n    return f\"{i1} {i2}\""
    },
    {
        "number": 4042,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    whole, decimal = str(x).split('.')\n    whole = int(whole)\n    decimal = int(decimal)\n    \n    if whole == 1:\n        if decimal < 500000:\n            return f\"{10} 1\"\n        else:\n            return f\"1 10\"\n    elif whole == 2:\n        if decimal < 500000:\n            return f\"{10} 2\"\n        else:\n            return f\"2 10\"\n    elif whole == 3:\n        if decimal < 500000:\n            return f\"{10} 3\"\n        else:\n            return f\"3 10\"\n    elif whole == 4:\n        if decimal < 500000:\n            return f\"{10} 4\"\n        else:\n            return f\"4 10\"\n    elif whole == 5:\n        if decimal < 500000:\n            return f\"{10} 5\"\n        else:\n            return f\"5 10\"\n    else:\n        if decimal < 500000:\n            return f\"{10} 6\"\n        else:\n            return f\"6 10\""
    },
    {
        "number": 4042,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    if x < 1.000000 or x >= 5.000000:\n        return \"Invalid input\"\n\n    x_int = int(x * 1000000)\n    y_int = 1000000 - x_int\n    gcd = math.gcd(x_int, y_int)\n    x_int //= gcd\n    y_int //= gcd\n\n    if x_int > 10 or y_int > 10:\n        return \"Invalid input\"\n\n    return f\"{x_int} {y_int}\" "
    },
    {
        "number": 4043,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    \n    if k < d or (n - 1) < d * 2 - 2:\n        return \"NO\"\n    \n    result = \"YES\\n\"\n    \n    if k >= n - 1:\n        for i in range(1, n):\n            result += f\"{i} {i + 1}\\n\"\n        return result\n    \n    for i in range(2, k + 1):\n        result += f\"1 {i}\\n\"\n    \n    if k >= d:\n        for i in range(k + 1, n):\n            result += f\"{k + 1} {i}\\n\"\n    else:\n        for i in range(k + 1, k + d + 1):\n            result += f\"{k + 1} {i}\\n\"\n    \n    if d * 2 - 2 < n - 1:\n        for i in range(k + d + 1, n - 1):\n            for j in range(i + 1, n):\n                result += f\"{i} {j}\\n\"\n    \n    return result"
    },
    {
        "number": 4043,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    if k >= n - 1:\n        return \"NO\"\n\n    def dfs(start, visited, depth, edges):\n        if depth == d:\n            return True\n        for i in range(1, n + 1):\n            if i == start:\n                continue\n            if i not in visited and edges.get(start, []) < k:\n                visited.add(i)\n                edges[start] = edges.get(start, []) + [i]\n                edges[i] = edges.get(i, []) + [start]\n                if dfs(i, visited, depth + 1, edges):\n                    return True\n                edges[start].remove(i)\n                edges[i].remove(start)\n                visited.remove(i)\n        return False\n\n    edges = {}\n    start = 1\n    visited = set([start])\n    if dfs(start, visited, 1, edges):\n        result = \"YES\\n\"\n        for i in range(1, n):\n            if edges.get(i, []):\n                result += f\"{i} {edges[i][0]}\\n\"\n        return result\n    else:\n        return \"NO\""
    },
    {
        "number": 4043,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    \n    if n == 1 or d == 0 or k == 0:\n        return \"YES\\n\"\n    \n    if n == 2 and d == 1 and k == 1:\n        return \"YES\\n1 2\\n\"\n    \n    if k < d:\n        return \"NO\"\n    \n    graph = [[0] * n for _ in range(n)]\n    \n    def find_root(vertex: int) -> int:\n        if graph[vertex][0] == vertex:\n            return vertex\n        graph[vertex][0] = find_root(graph[vertex][0])\n        return graph[vertex][0]\n    \n    def union(vertex1: int, vertex2: int) -> None:\n        root1 = find_root(vertex1)\n        root2 = find_root(vertex2)\n        if root1 != root2:\n            graph[root1][0] = root2\n    \n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                graph[i][j] = 1\n    \n    for _ in range(n - 1):\n        vertex1, vertex2 = map(int, input().split())\n        union(vertex1 - 1, vertex2 - 1)\n    \n    if any(graph[i][0] != i for i in range(n)):\n        return \"NO\"\n    \n    result = \"YES\\n\"\n    for i in range(1, n):\n        for j in range(i):\n            if graph[i][j] == 1:\n                result += f\"{i + 1} {j + 1}\\n\"\n    \n    return result"
    },
    {
        "number": 4043,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    # Check if it is possible to construct the tree\n    if n == 1:\n        return \"NO\"\n    elif n == 2:\n        if d == 1 and k == 1:\n            return \"YES\\n1 2\"\n        else:\n            return \"NO\"\n    elif n == 3:\n        if d == 1 and k == 1:\n            return \"YES\\n1 2\\n2 3\"\n        elif d == 2 and k == 2:\n            return \"YES\\n1 2\\n2 3\\n1 3\"\n        else:\n            return \"NO\"\n    elif n == 4:\n        if d == 1 and k == 1:\n            return \"YES\\n1 2\\n2 3\\n3 4\"\n        elif d == 2 and k == 2:\n            return \"YES\\n1 2\\n2 3\\n3 4\\n1 3\"\n        elif d == 3 and k == 2:\n            return \"YES\\n1 2\\n2 3\\n3 4\\n1 3\\n1 4\"\n        else:\n            return \"NO\"\n    else:\n        # Tree diameter is at most 2k, so we can use this fact to determine the maximum number of edges\n        max_edges = n * (n - 1) // 2 - 2 * (k - 1)\n        if max_edges < n - 1:\n            return \"NO\"\n        else:\n            return \"YES\"\n\ninput_str = input()\nprint(solution(input_str))"
    },
    {
        "number": 4043,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    if d > (n-1) * (k-1) + k:\n        return \"NO\"\n    elif d > (n-1) * k:\n        return \"NO\"\n    else:\n        return \"YES\"\n\ninput_string = input(\"Enter n, d and k: \")\nprint(solution(input_string)) "
    },
    {
        "number": 4043,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.strip().split())\n\n    if n == 1:\n        return \"YES\\n\"\n\n    if k == 1 or (k > 1 and d == 1):\n        return \"NO\"\n\n    if d == 1:\n        if k == 2:\n            return \"YES\\n\" + \" \".join(f\"{i+1} {i+2}\" for i in range(n-1))\n        else:\n            return \"NO\"\n\n    if d == 2 and k == 2:\n        edges = []\n        for i in range(n-1):\n            edges.append(f\"{i+1} {i+2}\")\n            edges.append(f\"{i+2} {i+1}\")\n        return \"YES\\n\" + \"\\n\".join(edges)\n\n    if d > 2 and k == 2:\n        return \"NO\"\n\n    if d > 2 and k == 3:\n        return \"NO\"\n\n    if d % 2 == 0 and k >= 4:\n        return \"YES\\n\" + \" \".join(f\"{i+1} {i+2}\" for i in range(n-1))\n\n    return \"NO\""
    },
    {
        "number": 4043,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n\n    def dfs(node, depth, visited, edges):\n        if depth == d:\n            return True\n        visited[node] = True\n        for neighbor in range(1, n + 1):\n            if not visited[neighbor] and len(edges[neighbor]) < k:\n                edges[node].add(neighbor)\n                edges[neighbor].add(node)\n                if dfs(neighbor, depth + 1, visited, edges):\n                    return True\n                edges[node].remove(neighbor)\n                edges[neighbor].remove(node)\n        visited[node] = False\n        return False\n\n    edges = {i: set() for i in range(1, n + 1)}\n    visited = [False] * (n + 1)\n\n    if dfs(1, 1, visited, edges):\n        output = [\"YES\"]\n        for i in range(1, n + 1):\n            for j in edges[i]:\n                output.append(f\"{i} {j}\")\n        return \"\\n\".join(output)\n    return \"NO\"\n\n\ndef"
    },
    {
        "number": 4043,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n\n    if n * k < d * 2:\n        return \"NO\"\n\n    # Create a list of edges and vertices\n    edges = []\n    vertices = []\n\n    for i in range(n):\n        vertices.append(i + 1)\n\n    # Create a root vertex\n    root = 1\n    vertices.remove(root)\n\n    # Connect the root with the other vertices\n    for i in range(min(n - 1, k)):\n        if i < n - 1:\n            edges.append((root, vertices[i]))\n            vertices.remove(vertices[i])\n        else:\n            edges.append((root, vertices[0]))\n            vertices.remove(vertices[0])\n\n    # Create the remaining edges\n    for i in range(max(0, n - 3)):\n        vertex1 = random.choice(vertices)\n        vertices.remove(vertex1)\n        vertex2 = random.choice(vertices)\n        vertices.remove(vertex2)\n        edges.append((vertex1, vertex2))\n\n    # Check if the diameter is greater than or equal to d\n    if not check_diameter(edges, d):\n        return \"NO\"\n\n    # Check if the degree of each vertex is at most k\n    if not check_degree(edges, k):\n        return \"NO\"\n\n    # Create a tree with the given edges\n    tree = []\n    for edge in edges:\n        tree.append((edge[0], edge[1]))\n        tree.append((edge[1], edge[0]))\n\n    # Print the tree\n    return \"YES\\n\" + \"\\n\".join(f\"{edge[0]} {edge[1]}\" for edge in tree)\n\ndef"
    },
    {
        "number": 4043,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n\n    if k == 1:\n        return \"NO\"\n\n    if k > d:\n        return \"NO\"\n\n    tree = [[] for _ in range(n + 1)]\n    for i in range(1, n):\n        tree[i].append(i + 1)\n\n    for _ in range(d - 1):\n        for i in range(1, n):\n            if len(tree[i]) < k - 1:\n                tree[i].append(i + 1)\n\n    for i in range(1, n):\n        if len(tree[i]) < k:\n            return \"NO\"\n\n    result = [\"YES\"]\n    for i in range(1, n):\n        for j in tree[i]:\n            result.append(f\"{i} {j}\")\n\n    return \"\\n\".join(result)\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4043,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    if k > d // 2:\n        return \"NO\"\n\n    if n <= 1:\n        return \"YES\"\n\n    tree = []\n    for i in range(2, n + 1):\n        for j in range(1, i):\n            tree.append((i, j))\n\n    if len(tree) + 1 != n:\n        return \"NO\"\n\n    if max(sum(1 for _ in filter(lambda x: x[0] == x[1], tree)) for x in tree) > d:\n        return \"NO\"\n\n    return \"YES\" + \"\\n\" + \"\\n\".join(f\"{x[0]} {x[1]}\" for x in tree)\n\ndef"
    },
    {
        "number": 4044,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = list(map(int, stdin.split()))\n    s = [0] * a + [1] * b\n    for i in range(x):\n        if s[i] == s[i + 1]:\n            s[i] ^= 1\n    return \"\".join(map(str, s))\n"
    },
    {
        "number": 4044,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    if a + b < x * 2:\n        return \"impossible\"\n\n    s = \"0\" * a + \"1\" * b\n    for i in range(x):\n        if i % 2 == 0:\n            s = s[:a + i] + \"1\" + s[a + i + 1:]\n        else:\n            s = s[:a + i] + \"0\" + s[a + i + 1:]\n\n    return s"
    },
    {
        "number": 4044,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    \n    if x >= a + b:\n        return \"1\" * a + \"0\" * b\n    \n    s = [\"0\"] * a + [\"1\"] * b\n    for i in range(x):\n        if s[i] != s[i + 1]:\n            s[i] = \"0\" if s[i] == \"1\" else \"1\"\n    return \"\".join(s)"
    },
    {
        "number": 4044,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    s = [0] * a + [1] * b\n    for i in range(x):\n        s[i] = 1 - s[i]\n    return ''.join(map(str, s))"
    },
    {
        "number": 4044,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n\n    if x < a:\n        s = '0' * (a - x) + '1' * x + '0' * (b - (a - x))\n    elif x < a + b:\n        s = '0' * (a + b - x) + '1' * (x - a) + '0' * (b - (x - a))\n    else:\n        s = '0' * a + '1' * b\n\n    return s\n\n\ndef"
    },
    {
        "number": 4044,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    s = \"\"\n    \n    # Construct the binary string\n    for i in range(a + b):\n        if i < a:\n            s += \"0\"\n        elif i < a + b - x:\n            s += \"1\"\n        else:\n            s += \"0\"\n    \n    return s"
    },
    {
        "number": 4044,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    n = a + b\n    result = \"\"\n    \n    # Fill the string with zeroes\n    for i in range(a):\n        result += \"0\"\n    \n    # Fill the string with ones\n    for i in range(b):\n        result += \"1\"\n    \n    # Fill the string with zeroes or ones at indices specified by x\n    for i in range(x):\n        if result[i] == \"0\":\n            result = result[:i] + \"1\" + result[i+1:]\n        else:\n            result = result[:i] + \"0\" + result[i+1:]\n    \n    return result"
    },
    {
        "number": 4044,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    n = a + b\n    s = ['0'] * n\n    for i in range(x):\n        s[i] = '1'\n    return ''.join(s)"
    },
    {
        "number": 4044,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    zeroes = [\"0\"] * a\n    ones = [\"1\"] * b\n    i = 0\n    result = []\n\n    for zero in zeroes:\n        result.append(zero)\n        i += 1\n\n    for one in ones:\n        result.append(one)\n        i += 1\n\n    for _ in range(x - a - b):\n        if i % 2 == 0:\n            result.append(\"1\")\n        else:\n            result.append(\"0\")\n        i += 1\n\n    return \"\".join(result)\n\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4044,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    \n    s = []\n    zeroes = a\n    ones = b\n    indices = x\n    \n    for i in range(a + b):\n        if i < x:\n            if zeroes > 0:\n                s.append('0')\n                zeroes -= 1\n            else:\n                s.append('1')\n                ones -= 1\n        else:\n            if ones > 0:\n                s.append('1')\n                ones -= 1\n            else:\n                s.append('0')\n                zeroes -= 1\n                \n    return ''.join(s)"
    },
    {
        "number": 4045,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = stdin.split()\n    n = int(n)\n\n    if s in t or t in s:\n        return \"NO\"\n\n    res = \"a\" * n + \"b\" * n + \"c\" * n\n\n    for i in range(n):\n        if s in res[i:i+2] or t in res[i:i+2]:\n            return \"NO\"\n        if s == res[i:i+2] or t == res[i:i+2]:\n            res = res[:i] + res[i+2:] + res[i]\n\n    return \"YES\\n\" + res\n"
    },
    {
        "number": 4045,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    s = stdin.split(\"\\n\")[1]\n    t = stdin.split(\"\\n\")[2]\n    \n    # Check if the given strings are valid\n    if not all(c in \"abc\" for c in s + t):\n        return \"NO\"\n    \n    # Generate all possible strings with n characters for each letter\n    a_strings = [\"\".join(p) for p in itertools.product(\"a\", repeat=n)]\n    b_strings = [\"\".join(p) for p in itertools.product(\"b\", repeat=n)]\n    c_strings = [\"\".join(p) for p in itertools.product(\"c\", repeat=n)]\n    \n    # Check if any of the strings contain s or t as substrings\n    valid_a_strings = [s for s in a_strings if s not in s and s not in t]\n    valid_b_strings = [s for s in b_strings if s not in s and s not in t]\n    valid_c_strings = [s for s in c_strings if s not in s and s not in t]\n    \n    # If there are no valid strings, return \"NO\"\n    if not valid_a_strings or not valid_b_strings or not valid_c_strings:\n        return \"NO\"\n    \n    # Generate all possible combinations of valid strings\n    combinations = list(itertools.product(valid_a_strings, valid_b_strings, valid_c_strings))\n    \n    # Check if any of the combinations contain s or t as substrings\n    valid_combinations = [c for c in combinations if s not in \"\".join(c) and t not in \"\".join(c)]\n    \n    # If there are no valid combinations, return \"NO\"\n    if not valid_combinations:\n        return \"NO\"\n    \n    # Return \"YES\" and the first valid combination\n    return \"YES\\n\" + \"\".join(valid_combinations[0])"
    },
    {
        "number": 4045,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n\n    def is_valid(s: str, t: str, res: str) -> bool:\n        return s not in res and t not in res\n\n    for i in range(1, 4):\n        for j in range(1, 4):\n            for k in range(1, 4):\n                for l in range(1, 4):\n                    for m in range(1, 4):\n                        for n1 in range(1, 4):\n                            for n2 in range(1, 4):\n                                res = \"a\" * i + \"b\" * j + \"c\" * k\n                                res += \"a\" * l + \"b\" * m + \"c\" * n1 + \"a\" * n2\n                                if len(set(res)) == 3 and is_valid(s, t, res):\n                                    return \"YES\\n\" + res\n    return \"NO\""
    },
    {
        "number": 4045,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = stdin.split()\n    n = int(n)\n\n    if n == 1:\n        if s == 'aa' or s == 'bb' or s == 'cc' or t == 'aa' or t == 'bb' or t == 'cc':\n            return \"NO\"\n        else:\n            return \"YES\\naa\\n\"\n\n    elif n == 2:\n        if s == 'ab' or s == 'ac' or s == 'ba' or s == 'bc' or s == 'ca' or s == 'cb' or t == 'ab' or t == 'ac' or t == 'ba' or t == 'bc' or t == 'ca' or t == 'cb':\n            return \"NO\"\n        else:\n            res = s + t + s + t\n            return \"YES\\n\" + res + \"\\n\"\n\n    else:\n        if s == 'aa' or s == 'bb' or s == 'cc' or t == 'aa' or t == 'bb' or t == 'cc':\n            return \"NO\"\n        else:\n            res = s + t + s + t + s + t\n            return \"YES\\n\" + res + \"\\n\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = stdin.split()\n    n = int(n)\n\n    if s in t or t in s:\n        return \"NO\"\n\n    result = []\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                if s not in result and t not in result and result.count('a') == n and result.count('b') == n and result.count('c') == n:\n                    result.append(s[i % 2])\n                    result.append(t[j % 2])\n                    result.append(s[k % 2])\n\n    if result:\n        return \"YES\\n\" + \"\".join(result)\n    else:\n        return \"NO\"\n\ndef"
    },
    {
        "number": 4045,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = stdin.split()\n    n = int(n)\n    s, t = s.strip(), t.strip()\n\n    if n == 1:\n        if s == \"ab\" or s == \"ba\" or t == \"ab\" or t == \"ba\":\n            return \"NO\"\n        return \"YES\\nac\"\n\n    if s == t:\n        return \"NO\"\n\n    for char in s + t:\n        if char in \"ab\":\n            s = s.replace(char, \"b\")\n            t = t.replace(char, \"b\")\n        else:\n            s = s.replace(char, \"c\")\n            t = t.replace(char, \"c\")\n\n    if s == \"aa\" or s == \"bb\" or t == \"aa\" or t == \"bb\":\n        return \"NO\"\n\n    res = \"a\" * n\n    res += s\n    res += \"a\" * n\n    res += t\n    res += \"a\" * n\n\n    return \"YES\\n\" + res\n\ndef"
    },
    {
        "number": 4045,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = stdin.split()\n    n = int(n)\n    \n    if s in t or t in s:\n        return \"NO\"\n    \n    res = \"\"\n    for i in range(n):\n        if s[0] == t[0]:\n            res += s[1] + t[1]\n        elif s[0] == t[1]:\n            res += s[1] + t[0]\n        elif s[1] == t[0]:\n            res += s[0] + t[1]\n        else:\n            res += s[0] + t[0]\n        \n        if s[0] == s[1]:\n            s = s[1]\n        else:\n            s = s[0]\n        \n        if t[0] == t[1]:\n            t = t[1]\n        else:\n            t = t[0]\n    \n    return \"YES\\n\" + res\n\ndef"
    },
    {
        "number": 4045,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    t = stdin.split()[2]\n\n    def is_valid(res: str) -> bool:\n        return s not in res and t not in res\n\n    def find_res(n: int) -> str:\n        res = ''\n        for _ in range(n):\n            res += 'a'\n            res += 'b'\n            res += 'c'\n        return res\n\n    res = find_res(n)\n    if is_valid(res):\n        return \"YES\\n\" + res\n    else:\n        return \"NO\""
    },
    {
        "number": 4045,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = stdin.split()\n    n = int(n)\n    \n    if n == 0 or n > 10**5:\n        return \"NO\"\n\n    if s == t or s == \"aa\" or s == \"bb\" or s == \"cc\" or t == \"aa\" or t == \"bb\" or t == \"cc\":\n        return \"NO\"\n\n    result = []\n    for i in range(n):\n        result.extend([\"a\", \"b\", \"c\"])\n\n    if s in \"\".join(result) or t in \"\".join(result):\n        return \"NO\"\n\n    return \"YES\\n\" + \"\".join(result)\n"
    },
    {
        "number": 4045,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n    t = stdin.splitlines()[2]\n\n    if n == 1:\n        if s == \"ab\" or s == \"ba\" or t == \"ab\" or t == \"ba\":\n            return \"NO\"\n        if s == \"ac\" or s == \"ca\" or t == \"ac\" or t == \"ca\":\n            return \"NO\"\n        if s == \"bc\" or s == \"cb\" or t == \"bc\" or t == \"cb\":\n            return \"NO\"\n        else:\n            return \"YES\\n\" + s + t + s + t\n\n    if n == 2:\n        if s == \"ab\" or s == \"ba\" or t == \"ab\" or t == \"ba\":\n            return \"NO\"\n        if s == \"ac\" or s == \"ca\" or t == \"ac\" or t == \"ca\":\n            return \"NO\"\n        if s == \"bc\" or s == \"cb\" or t == \"bc\" or t == \"cb\":\n            return \"NO\"\n        else:\n            return \"YES\\n\" + s + s + t + t + s + t + t + s\n\n    if n == 3:\n        if s == \"ab\" or s == \"ba\" or t == \"ab\" or t == \"ba\":\n            return \"NO\"\n        if s == \"ac\" or s == \"ca\" or t == \"ac\" or t == \"ca\":\n            return \"NO\"\n        if s == \"bc\" or s == \"cb\" or t == \"bc\" or t == \"cb\":\n            return \"NO\"\n        else:\n            return \"YES\\n\" + s + t + s + t + s + t + s + t + s + t + s + t\n\n    if n == 4:\n        if s == \"ab\" or s == \"ba\" or t == \"ab\" or t == \"ba\":\n            return \"NO\"\n        if s == \"ac\" or s == \"ca\" or t == \"ac\" or t == \"ca\":\n            return \"NO\"\n        if s == \"bc\" or s == \"cb\" or t == \"bc\" or t == \"cb\":\n            return \"NO\"\n        else:\n            return \"YES\\n\" + s + t + s + t + s + t + s + t + s + t + s + t + s + t + s + t\n\n    if n == 5:\n        if s == \"ab\" or s == \"ba\" or t == \"ab\" or t == \"ba\":\n            return \"NO\"\n        if s == \"ac\" or s == \"ca\" or t == \"ac\" or t == \"ca\":\n            return \"NO\"\n        if s == \"bc\" or s == \"cb\" or t == \"bc\" or t == \"cb\":\n            return \"NO\"\n        else:\n            return \"YES\\n\" + s + t + s + t + s + t + s + t + s + t + s + t + s + t + s + t + s + t + s + t\n\n    return \"NO\""
    },
    {
        "number": 4046,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def find_permutation(n: int, q: List[int]) -> str:\n        if len(q) != n - 1:\n            return \"-1\"\n\n        permutation = [1] * n\n        for i in range(n - 1):\n            permutation[i + 1] = permutation[i] + q[i]\n\n        if sorted(permutation) != list(range(1, n + 1)):\n            return \"-1\"\n\n        return \" \".join(map(str, permutation))\n\n    n, q_str = stdin.strip().split('\\n')\n    n = int(n)\n    q = list(map(int, q_str.split()))\n\n    return find_permutation(n, q)\n"
    },
    {
        "number": 4046,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, q = stdin.split(\"\\n\")\n    n = int(n)\n    q = [int(x) for x in q.split(\" \")]\n    \n    def is_permutation(p):\n        return sorted(p) == list(range(1, n+1))\n    \n    def generate_permutation(q):\n        p = [1]\n        for i in range(n-1):\n            p.append(p[-1] + q[i])\n        return p\n    \n    if all(1 <= qi <= n for qi in q):\n        p = generate_permutation(q)\n        if is_permutation(p):\n            return \" \".join(map(str, p))\n    return \"-1\""
    },
    {
        "number": 4046,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    q = [int(x) for x in stdin.split()[1:]]\n\n    # Initialize the permutation with the first element\n    p = [1]\n\n    # Iterate through the rest of the elements\n    for i in range(1, n):\n        # Calculate the next element in the permutation\n        p.append(p[i-1] + q[i-1])\n\n    # Check if the permutation is valid\n    if len(p) != n or len(set(p)) != n:\n        return \"-1\"\n\n    # Return the permutation\n    return \" \".join(map(str, p))"
    },
    {
        "number": 4046,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, q = stdin.split('\\n')\n    n = int(n)\n    q = list(map(int, q.split()))\n    \n    if len(q) != n-1:\n        return \"-1\"\n    \n    p = [0] * n\n    p[0] = 1\n    \n    for i in range(n-1):\n        p[i+1] = p[i] + q[i]\n    \n    if sorted(p) != list(range(1, n+1)):\n        return \"-1\"\n    \n    return \" \".join(map(str, p))\n\n\ndef"
    },
    {
        "number": 4046,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, *q = map(int, stdin.split())\n\n    def is_valid_permutation(p: List[int]) -> bool:\n        return sorted(p) == list(range(1, n + 1))\n\n    def generate_permutation(q: List[int]) -> List[int]:\n        p = [q[0] + 1]\n        for i in range(1, len(q)):\n            p.append(p[-1] + q[i])\n        return p\n\n    for i in range(1, n):\n        q.append(i)\n\n    for i in range(n):\n        p = generate_permutation(q)\n        if is_valid_permutation(p):\n            return \" \".join(map(str, p))\n        q.insert(0, q.pop())\n\n    return \"-1\"\n\ninput_str = input(\"Enter the value of n and q as space separated integers: \")\nprint(solution(input_str)) "
    },
    {
        "number": 4046,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    q = [int(x) for x in stdin.split()[1:]]\n    permutation = []\n    for i in range(1, n + 1):\n        if len(permutation) == 0:\n            permutation.append(i)\n        else:\n            for j in range(len(permutation)):\n                permutation.append(permutation[j] + q[j])\n                if permutation[-1] > n:\n                    permutation.pop()\n                elif permutation[-1] == n:\n                    break\n    if len(permutation) == n:\n        return \" \".join(map(str, permutation))\n    else:\n        return \"-1\""
    },
    {
        "number": 4046,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    q = list(map(int, q.split()))\n    result = []\n    for i in range(n):\n        result.append(sum(q[:i+1]))\n    if len(set(result)) == len(result) and len(result) == n:\n        return \" \".join(map(str, result))\n    return -1 "
    },
    {
        "number": 4046,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    q = list(map(int, q.split()))\n    \n    if len(q) != n-1:\n        return -1\n    \n    p = [0] * n\n    p[0] = 1\n    \n    for i in range(n-1):\n        if i == 0:\n            p[i+1] = q[i] + 1\n        else:\n            p[i+1] = p[i] + q[i]\n    \n    if len(set(p)) != n:\n        return -1\n    \n    return ' '.join(map(str, p))\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4046,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    if not (-n <= q[0] <= n) or any(not (-n <= qi <= n) for qi in q):\n        return \"-1\"\n    \n    p = [None] * (n + 1)\n    p[1] = 1\n    for i in range(2, n + 1):\n        p[i] = p[i - 1] + q[i - 2]\n    \n    if sorted(p[1:]) != list(range(1, n + 1)):\n        return \"-1\"\n    \n    return \" \".join(map(str, p))\n\n\nn = int(input())\nq = list(map(int, input().split()))\n\nprint(solution(str(n) + \" \" + \" \".join(map(str, q)))) "
    },
    {
        "number": 4046,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, q = [int(x) for x in stdin.split()]\n    q = [int(x) for x in q.split()]\n    permutation = [1] * n\n    for i in range(1, n):\n        permutation[i] = permutation[i-1] + q[i-1]\n    if sorted(permutation) != list(range(1, n+1)):\n        return \"-1\"\n    return \" \".join(map(str, permutation))"
    },
    {
        "number": 4047,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, coords = stdin.split(\"\\n\")\n    n = int(n)\n    coords = list(map(int, coords.split()))\n    coins = 0\n    \n    target = coords[0]\n    for i in range(1, n):\n        diff = abs(coords[i] - target)\n        if diff % 2 == 0:\n            coins += diff // 2\n        else:\n            coins += (diff - 1) // 2 + 1\n    \n    return str(coins) "
    },
    {
        "number": 4047,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def min_coins(chips):\n        chips.sort()\n        coins = 0\n        for i in range(1, len(chips)):\n            coins += abs(chips[i] - chips[i - 1])\n        return coins\n\n    n = int(stdin.readline().strip())\n    chips = list(map(int, stdin.readline().strip().split()))\n    return str(min_coins(chips))"
    },
    {
        "number": 4047,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    x_coords = list(map(int, stdin.split()[1:]))\n\n    def get_min_cost(x_coord: int) -> int:\n        return x_coord // 2 + abs(x_coord % 2)\n\n    min_cost = min(sum(get_min_cost(x) for x in x_coords) - get_min_cost(x_coords[0]),\n                     sum(get_min_cost(x) for x in x_coords) - get_min_cost(x_coords[-1]))\n\n    return str(min_cost)\n"
    },
    {
        "number": 4047,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, coords = stdin.split()\n    n = int(n)\n    coords = [int(x) for x in coords.split()]\n\n    coins = 0\n    for i in range(n):\n        if coords.count(coords[i]) != n:\n            coins += abs(coords[i] - coords[0]) - 1\n\n    return str(coins)"
    },
    {
        "number": 4047,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    coords = list(map(int, stdin.split()[1:]))\n    \n    min_coin = sum(coords)\n    \n    for i in range(len(coords)):\n        if coords[i] % 2 == 1:\n            min_coin += (coords[i] - 1) // 2\n        else:\n            min_coin += (coords[i] // 2)\n    \n    return str(min_coin) "
    },
    {
        "number": 4047,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    chips = list(map(int, stdin.split()[1:]))\n    freq = [0] * 2000001\n    min_coin = float('inf')\n\n    for chip in chips:\n        freq[chip] += 1\n\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            if freq[i] > 0 and freq[j] > 0:\n                min_coin = min(min_coin, abs(i - j))\n\n    return str(min_coin)\n\ndef"
    },
    {
        "number": 4047,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def min_coins(x: int, x_i: int) -> int:\n        return min(x_i - 2, x_i - 1) if x != x_i else 0\n\n    n, chips = map(int, stdin.split())\n    x = chips[0]\n    coins = sum(min_coins(x, x_i) for x_i in chips)\n    return str(coins)"
    },
    {
        "number": 4047,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    chips = list(map(int, stdin.splitlines()[1].split()))\n\n    def move(chips: List[int], i: int, j: int, direction: int) -> int:\n        if direction == 0:\n            return chips[i] + 1\n        elif direction == 1:\n            return chips[i] + 2\n        else:\n            return chips[i] - 1\n\n    def min_coins(chips: List[int], index: int, coins: int, visited: Set[Tuple[int, int, int]]) -> int:\n        if index == len(chips):\n            return coins\n\n        if (index, coins, len(visited)) in visited:\n            return float('inf')\n\n        visited.add((index, coins, len(visited)))\n\n        min_coin = float('inf')\n        for i in range(len(chips)):\n            if i != index:\n                min_coin = min(min_coin, min_coins(chips, i, coins + move(chips, i, index, 0), visited))\n                min_coin = min(min_coin, min_coins(chips, i, coins + move(chips, i, index, 1), visited))\n                min_coin = min(min_coin, min_coins(chips, i, coins + move(chips, i, index, -1), visited))\n\n        return min_coin\n\n    return str(min_coins(chips, 0, 0, set()))"
    },
    {
        "number": 4047,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input().strip())\n    coordinates = list(map(int, input().strip().split()))\n    min_coins = sum(abs(coordinates[0] - x) for x in coordinates[1:])\n    \n    return str(min_coins)"
    },
    {
        "number": 4047,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *chip_coordinates = map(int, stdin.split())\n    min_coins = 0\n\n    for i in range(n):\n        if i == 0:\n            continue\n        min_coins += abs(chip_coordinates[i] - chip_coordinates[i - 1]) - 1\n\n    return str(min_coins)\n\n\ndef"
    },
    {
        "number": 4048,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    num_moves = 0\n    i, j = 1, 1\n\n    while i * j < N:\n        if i + 1 <= j:\n            i += 1\n        else:\n            j += 1\n        num_moves += 1\n\n    return str(num_moves)\n\ndef"
    },
    {
        "number": 4048,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    # Initialize variables to keep track of the minimum number of moves needed\n    min_moves = 0\n    i = 1\n    j = 1\n    \n    # Loop through the multiplication table\n    while i * j <= N:\n        # Calculate the number of moves needed to reach the next square\n        if i == 1:\n            moves = j - 1\n        else:\n            moves = i\n        \n        # If the number of moves needed is greater than the current minimum, break the loop\n        if moves > min_moves:\n            break\n        \n        # Update the minimum number of moves\n        min_moves = moves\n        \n        # Move to the next square\n        if i == 1:\n            j += 1\n        else:\n            i += 1\n    \n    # Return the minimum number of moves\n    return str(min_moves)"
    },
    {
        "number": 4048,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    min_moves = 0\n    i = j = 1\n    while True:\n        if i * j >= N:\n            min_moves += abs(i * j - N)\n            break\n        else:\n            min_moves += i + j - 1\n            i += 1\n            j += 1\n    return str(min_moves)"
    },
    {
        "number": 4048,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 1:\n        return 0\n    elif N == 2:\n        return 1\n    else:\n        i = 1\n        j = 1\n        moves = 0\n        while i*j < N:\n            if i*j + i < N:\n                i += 1\n            elif i*j + j < N:\n                j += 1\n            moves += 1\n        return moves + 1"
    },
    {
        "number": 4048,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    i = j = 1\n    \n    while i * j < N:\n        if i * j + i <= N:\n            i += 1\n        else:\n            j += 1\n        count += 1\n    \n    return str(count)"
    },
    {
        "number": 4048,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    min_moves = 0\n    x = 1\n    y = 1\n\n    while N > 1:\n        if N % x == 0:\n            y = N // x\n            min_moves += abs(x - 1) + abs(y - 1)\n            break\n        elif N % y == 0:\n            x = N // y\n            min_moves += abs(x - 1) + abs(y - 1)\n            break\n        else:\n            min_moves += 1\n            N -= x\n            x += 1\n\n    return str(min_moves)"
    },
    {
        "number": 4048,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    min_moves = 0\n    i, j = 1, 1\n\n    while i * j < N:\n        if i + 1 < j:\n            i += 1\n        else:\n            j += 1\n        min_moves += 1\n\n    return str(min_moves)"
    },
    {
        "number": 4048,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"0\"\n    if n == 2:\n        return \"1\"\n    if n == 3:\n        return \"2\"\n    if n == 4:\n        return \"3\"\n\n    # Finding the factors of n\n    factors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            factors.append(i)\n            if i != n // i:\n                factors.append(n//i)\n\n    # Sorting the factors in ascending order\n    factors.sort()\n\n    # Finding the minimum number of moves required\n    moves = 0\n    for factor in factors:\n        moves += factor\n\n    return str(moves)"
    },
    {
        "number": 4048,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    i, j = 1, 1\n    moves = 0\n\n    while True:\n        if i * j == N:\n            return str(moves)\n        elif i * j > N:\n            i -= 1\n        else:\n            i += 1\n            j += 1\n        moves += 1"
    },
    {
        "number": 4048,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 1:\n        return \"1\"\n    moves = 0\n    i, j = 1, 1\n    while i * j < N:\n        if i * j + i <= N:\n            i += 1\n        else:\n            j += 1\n        moves += 1\n    return str(moves)"
    },
    {
        "number": 4049,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a_rock, a_scissors, a_paper = map(int, stdin.splitlines()[1].split())\n    b_rock, b_scissors, b_paper = map(int, stdin.splitlines()[2].split())\n\n    min_wins = max_wins = 0\n    for a_r, a_s, a_p in [(a_rock, a_scissors, a_paper)]:\n        for b_r, b_s, b_p in [(b_rock, b_scissors, b_paper)]:\n            a_wins = a_r * b_s + a_s * b_p + a_p * b_r\n            min_wins = max(min_wins, a_wins)\n            max_wins = min(max_wins, n - a_wins)\n\n    return f\"{min_wins} {max_wins}\"\n\ndef"
    },
    {
        "number": 4049,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.split('\\n')[0])\n    a_rock, a_scissors, a_paper = map(int, stdin.split('\\n')[1].split())\n    b_rock, b_scissors, b_paper = map(int, stdin.split('\\n')[2].split())\n\n    # define the winning conditions\n    rock_pairs = [(a_rock, b_scissors), (b_rock, a_scissors)]\n    scissors_pairs = [(a_scissors, b_paper), (b_scissors, a_paper)]\n    paper_pairs = [(a_paper, b_rock), (b_paper, a_rock)]\n\n    # count the number of winning conditions for Alice\n    alice_wins = sum(1 for pair in rock_pairs if a_rock > b_scissors or a_rock == b_rock) + \\\n                   sum(1 for pair in scissors_pairs if a_scissors > b_paper or a_scissors == b_scissors) + \\\n                   sum(1 for pair in paper_pairs if a_paper > b_rock or a_paper == b_paper)\n\n    # calculate the minimum and maximum number of rounds Alice can win\n    min_alice_wins = max(alice_wins - a_rock - a_scissors - a_paper + 1, 0)\n    max_alice_wins = min(alice_wins, n)\n\n    return f\"{min_alice_wins} {max_alice_wins}\""
    },
    {
        "number": 4049,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n\n    min_rounds_alice_wins = 0\n    max_rounds_alice_wins = 0\n    for i in range(3):\n        for j in range(3):\n            if i != j:\n                min_rounds_alice_wins += min(a[i], b[j])\n                max_rounds_alice_wins += max(a[i], b[j])\n\n    return f\"{min_rounds_alice_wins} {max_rounds_alice_wins}\"\n\nstdin = open(\"input.txt\")\nstdout = open(\"output.txt\", \"w\")\nstdout.write(solution(stdin))\nstdout.close() "
    },
    {
        "number": 4049,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    b = list(map(int, stdin.splitlines()[2].split()))\n\n    alice_wins = 0\n    alice_loses = 0\n\n    for i in range(n):\n        if a[0] > 0 and b[1] > 0:\n            alice_wins += min(a[0], b[1])\n            a[0] -= min(a[0], b[1])\n            b[1] -= min(a[0], b[1])\n\n        if a[1] > 0 and b[2] > 0:\n            alice_wins += min(a[1], b[2])\n            a[1] -= min(a[1], b[2])\n            b[2] -= min(a[1], b[2])\n\n        if a[2] > 0 and b[0] > 0:\n            alice_wins += min(a[2], b[0])\n            a[2] -= min(a[2], b[0])\n            b[0] -= min(a[2], b[0])\n\n    return str(alice_wins) + \" \" + str(alice_wins + alice_loses)\n\nstdin = \"\"\"2\n0 1 1\n1 1 0\n\"\"\"\nprint(solution(stdin)) "
    },
    {
        "number": 4049,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    \n    min_wins = n\n    max_wins = 0\n    \n    for i in range(3):\n        for j in range(3):\n            if (i == 0 and j == 2) or (i == 2 and j == 0) or (i == 1 and j == 1):\n                min_wins = min(min_wins, n - a[i] - b[j])\n                max_wins = max(max_wins, n - a[i] - b[j])\n                \n    return f\"{min_wins} {max_wins}\""
    },
    {
        "number": 4049,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    \n    a_wins = 0\n    b_wins = 0\n    \n    for i in range(n):\n        if a[0] > 0:\n            a[0] -= 1\n            b_wins += 1\n        elif a[1] > 0:\n            a[1] -= 1\n            a_wins += 1\n        else:\n            a[2] -= 1\n            a_wins += 1\n    \n    for i in range(n):\n        if b[0] > 0:\n            b[0] -= 1\n            a_wins += 1\n        elif b[1] > 0:\n            b[1] -= 1\n            b_wins += 1\n        else:\n            b[2] -= 1\n            b_wins += 1\n    \n    return f\"{a_wins} {b_wins}\""
    },
    {
        "number": 4049,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    \n    a_wins = [0] * (n + 1)\n    b_wins = [0] * (n + 1)\n    draws = [0] * (n + 1)\n    \n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                a_wins[i] = 0\n                b_wins[j] = 0\n                draws[i] = 0\n            elif i == 0:\n                a_wins[i] = 0\n                b_wins[j] = b_wins[j - 1] + b_wins[j] + draws[j - 1]\n                draws[i] = draws[i - 1] + draws[i]\n            elif j == 0:\n                a_wins[i] = a_wins[i - 1] + a_wins[i] + draws[i - 1]\n                b_wins[j] = 0\n                draws[i] = draws[i - 1] + draws[i]\n            else:\n                a_wins[i] = a_wins[i - 1] + a_wins[i] + draws[i - 1]\n                b_wins[j] = b_wins[j - 1] + b_wins[j] + draws[j - 1]\n                \n            if i + j >= n:\n                break\n            elif a[i] == b[j]:\n                draws[i] += 1\n            elif a[i] == 0 and b[j] == 2:\n                a_wins[i] += 1\n            elif a[i] == 1 and b[j] == 0:\n                a_wins[i] += 1\n            elif a[i] == 2 and b[j] == 1:\n                a_wins[i] += 1\n                \n    return str(a_wins[n]) + \" \" + str(b_wins[n])"
    },
    {
        "number": 4049,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    a_rock, a_scissors, a_paper = a, 0, 0\n    b_rock, b_scissors, b_paper = b, 0, 0\n\n    # Count the number of each item for Alice and Bob\n    for i in range(n):\n        if a_rock > 0:\n            a_rock -= 1\n            b_rock += 1\n        elif a_scissors > 0:\n            a_scissors -= 1\n            b_scissors += 1\n        else:\n            a_paper -= 1\n            b_paper += 1\n\n    # Calculate the number of rounds Alice can win\n    min_rounds = max(b_rock + b_paper, a_rock + a_scissors, a_scissors + a_paper)\n    max_rounds = min(n - b_rock - b_paper, n - a_rock - a_scissors, n - a_scissors - a_paper)\n\n    return str(min_rounds) + \" \" + str(max_rounds)"
    },
    {
        "number": 4049,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a_counts = tuple(map(int, stdin.split(\"\\n\")[1].split()))\n    b_counts = tuple(map(int, stdin.split(\"\\n\")[2].split()))\n    \n    # Check if Alice can win\n    min_alice_wins = 0\n    max_alice_wins = 0\n    for a_count, b_count in zip(a_counts, b_counts):\n        if a_count > b_count:\n            max_alice_wins += a_count - b_count\n        else:\n            min_alice_wins += b_count - a_count\n    \n    return f\"{min_alice_wins} {max_alice_wins}\""
    },
    {
        "number": 4049,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a_rock, a_scissors, a_paper, b_rock, b_scissors, b_paper = map(int, stdin.split())\n\n    def rock_paper_scissors(a_rock, a_scissors, a_paper, b_rock, b_scissors, b_paper) -> tuple:\n        result = [0, 0]\n        for i in range(a_rock):\n            for j in range(b_scissors):\n                result[0] += 1\n        for i in range(a_scissors):\n            for j in range(b_paper):\n                result[0] += 1\n        for i in range(a_paper):\n            for j in range(b_rock):\n                result[0] += 1\n\n        for i in range(b_rock):\n            for j in range(a_scissors):\n                result[1] += 1\n        for i in range(b_scissors):\n            for j in range(a_paper):\n                result[1] += 1\n        for i in range(b_paper):\n            for j in range(a_rock):\n                result[1] += 1\n\n        return tuple(result)\n\n    return rock_paper_scissors(a_rock, a_scissors, a_paper, b_rock, b_scissors, b_paper)\n\ninput_str = \"3\\n0 0 3\\n3 0 0\"\noutput = solution(input_str)\nprint(output) "
    },
    {
        "number": 4050,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    a = a.split()\n    a = list(map(int, a))\n    sum_a = sum(a)\n    k = 1\n    blocks = []\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(a[i:j]) == sum_a / k:\n                blocks.append((i, j-1))\n                if k == 2:\n                    break\n                k += 1\n    return str(len(blocks)) + \"\\n\" + \"\\n\".join([f\"{i} {j}\" for i, j in blocks])\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4050,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, sequence = map(int, stdin.split())\n    sequence = [0] + sequence\n    result = []\n    sums = []\n    current_sum = 0\n    \n    for i in range(n+1):\n        current_sum += sequence[i]\n        sums.append(current_sum)\n    \n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if (sums[j] - sums[i-1]) % (j-i+1) == 0:\n                block = (i, j)\n                if block not in result:\n                    result.append(block)\n    \n    if not result:\n        return \"0\\n\"\n    \n    k = len(result)\n    output = str(k) + \"\\n\"\n    for block in result:\n        output += \"{} {}\\n\".format(block[0], block[1])\n    \n    return output\n\ninput_data = \"7\\n4 1 2 2 1 5 3\"\nprint(solution(input_data)) "
    },
    {
        "number": 4050,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split()))\n    a = sorted(set(a))\n    k = len(a)\n    blocks = [(l, l + k - 1) for l in range(1, n - k + 2)]\n\n    # Check if blocks do not intersect\n    for i in range(len(blocks)):\n        for j in range(i + 1, len(blocks)):\n            if blocks[i][1] >= blocks[j][0]:\n                k = min(k, blocks[i][1] - blocks[j][0] + 1)\n                if k == 1:\n                    return \"1\\n\" + \"1 1\"\n    if k == 1:\n        return \"1\\n\" + \"1 1\"\n\n    result = [f\"{blocks[i][0]} {blocks[i][1]}\" for i in range(k)]\n    return str(k) + \"\\n\" + \"\\n\".join(result)"
    },
    {
        "number": 4050,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, a = stdin.split('\\n')\n    n = int(n)\n    a = [int(x) for x in a.split()]\n    \n    # calculate the sum of all elements\n    total_sum = sum(a)\n    \n    # calculate the target block size\n    target_block_size = total_sum // n\n    \n    # initialize variables\n    l = 0\n    r = 0\n    k = 0\n    blocks = []\n    \n    # iterate over the array\n    while l < n:\n        # calculate the current block size\n        current_block_size = sum(a[l:r+1])\n        \n        # if the current block size is equal to the target block size\n        if current_block_size == target_block_size:\n            # add the block to the list\n            blocks.append((l, r))\n            k += 1\n            \n            # move the right boundary to the right\n            r += 1\n        else:\n            # move the right boundary to the right\n            r += 1\n        \n        # if the right boundary has reached the end of the array\n        if r == n:\n            # move the left boundary to the right\n            l += 1\n            r = l\n    \n    # print the number of blocks\n    output = str(k) + '\\n'\n    \n    # print the blocks\n    for block in blocks:\n        output += ' '.join(map(str, block)) + '\\n'\n    \n    return output"
    },
    {
        "number": 4050,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    \n    # Calculate the sum of all elements in the array\n    total_sum = sum(a)\n    \n    # Sort the array in descending order\n    a.sort(reverse=True)\n    \n    # Initialize the number of blocks\n    k = 1\n    \n    # Initialize the first block\n    l_1 = 1\n    r_1 = n\n    \n    # Calculate the sum of the first block\n    block_1_sum = sum(a[l_1-1:r_1])\n    \n    # Iterate through the remaining elements in the array\n    for i in range(n-1, 0, -1):\n        if a[i] == a[i-1]:\n            continue\n        \n        # Calculate the sum of the remaining elements\n        remaining_sum = sum(a[:i])\n        \n        # Calculate the sum of the block that starts at index i\n        block_sum = sum(a[i-1:n])\n        \n        # Check if the sum of the remaining elements is equal to the sum of the block that starts at index i\n        if remaining_sum == block_sum:\n            k += 1\n            l_k = i\n            r_k = n\n            break\n        else:\n            k = 1\n            l_1 = 1\n            r_1 = i\n            block_1_sum = remaining_sum\n            if remaining_sum == block_sum:\n                k += 1\n                l_k = i\n                r_k = n\n                break\n    \n    # Check if the sum of the last block is equal to the sum of the first block\n    if block_1_sum != block_sum:\n        return str(k-1)\n    \n    # Print the number of blocks\n    output = str(k) + '\\n'\n    \n    # Print the blocks in the specified format\n    for i in range(1, k+1):\n        output += f'{l_i} {r_i}\\n'\n        l_i = l_1 if i == 1 else l_k+1\n        r_i = r_1 if i == 1 else n\n    \n    return output"
    },
    {
        "number": 4050,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a = stdin.split('\\n')\n    n = int(n)\n    a = list(map(int, a.split()))\n    \n    total_sum = sum(a)\n    total_count = len(a)\n    \n    if n == 1:\n        return \"1\\n1 1\"\n    \n    # Check if the array is already in a block\n    if total_count == total_sum:\n        return \"1\\n1 {}\".format(n)\n    \n    # Try to find a block of size 2\n    for i in range(n - 1):\n        if a[i] + a[i + 1] == total_sum:\n            return \"1\\n{0} {1}\".format(i + 1, i + 2)\n    \n    # Try to find a block of size 3\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            if a[i] + a[i + 1] + a[j] + a[j + 1] == total_sum:\n                return \"1\\n{0} {1}\\n{2} {3}\".format(i + 1, i + 3, j + 1, j + 3)\n    \n    # Try to find a block of size 4\n    for i in range(n - 3):\n        for j in range(i + 1, n - 2):\n            for k in range(j + 1, n - 1):\n                if a[i] + a[i + 1] + a[i + 2] + a[j] + a[j + 1] + a[k] + a[k + 1] == total_sum:\n                    return \"1\\n{0} {1}\\n{2} {3}\\n{4} {5}\".format(i + 1, i + 4, j + 1, j + 3, k + 1, k + 3)\n    \n    # If we have not found any solution, we need to split the array into smaller blocks\n    block_count = n\n    for i in range(n - 1, 1, -1):\n        if sum(a[:i]) == total_sum:\n            block_count = i\n            break\n    \n    output = \"\"\n    output += str(block_count) + \"\\n\"\n    \n    current_sum = 0\n    current_index = 0\n    for i in range(n):\n        current_sum += a[i]\n        if current_sum == total_sum:\n            output += str(current_index + 1) + \" \" + str(i + 1) + \"\\n\"\n            current_sum = 0\n            current_index = i + 1\n    \n    return output"
    },
    {
        "number": 4050,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a = list(map(int, stdin.split()))\n    sums = [0] * (n + 1)\n    for i in range(1, n + 1):\n        sums[i] = sums[i - 1] + a[i - 1]\n    \n    k = 1\n    for i in range(2, n + 1):\n        if sums[i] - sums[0] == sums[i - 1] - sums[0]:\n            k += 1\n        else:\n            break\n    \n    result = [str(k)]\n    for i in range(k):\n        l = i + 1\n        r = n - k + 1 + i\n        result.append(f\"{l} {r}\")\n    \n    return \"\\n\".join(result)\n"
    },
    {
        "number": 4050,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a = stdin.split('\\n')\n    n = int(n)\n    a = list(map(int, a.split()))\n    \n    # Find the maximum sum of blocks\n    max_sum = max(a)\n    \n    # Find the indices of blocks with the maximum sum\n    indices = [i for i in range(n) if a[i] == max_sum]\n    \n    # Find the number of blocks\n    k = len(indices)\n    \n    # Generate the blocks\n    blocks = []\n    for i in range(k):\n        block = (indices[i], indices[i])\n        blocks.append(block)\n    \n    # Print the output\n    result = [str(k)]\n    for block in blocks:\n        result.append(f\"{block[0]+1} {block[1]+1}\")\n    return \"\\n\".join(result)"
    },
    {
        "number": 4050,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    a = a.split()\n    \n    # find the target sum of the blocks\n    target_sum = sum(a) // n\n    \n    # initialize the set of blocks\n    blocks = set()\n    \n    # iterate over the array and try to find blocks\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(a[i:j]) == target_sum and len(blocks) == 0:\n                blocks.add((i, j-1))\n            elif sum(a[i:j]) == target_sum:\n                # if the current block has the same sum as the target, check if it can be added\n                for block in blocks:\n                    if block[0] <= i <= block[1] or block[0] <= j-1 <= block[1]:\n                        break\n                else:\n                    blocks.add((i, j-1))\n    \n    # print the number of blocks\n    print(len(blocks))\n    \n    # print the blocks\n    for block in blocks:\n        print(block[0]+1, block[1]+1)\n    \n    return \"\""
    },
    {
        "number": 4050,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def check_disjoint(blocks):\n        n = len(blocks)\n        for i in range(n):\n            for j in range(i+1, n):\n                l_i, r_i = blocks[i]\n                l_j, r_j = blocks[j]\n                if l_i <= l_j <= r_i <= r_j or l_j <= l_i <= r_j <= r_i:\n                    return False\n        return True\n\n    def find_blocks(array):\n        n = len(array)\n        if n < 2:\n            return []\n        elif n == 2:\n            return [[1, 2]]\n        else:\n            blocks = []\n            start = 1\n            end = 2\n            sum_a = sum(array[start:end+1])\n            while end < n:\n                if sum_a == sum(array[start:end+2]) and sum_a == sum(array[end+1:end+2]):\n                    end += 1\n                else:\n                    blocks.append([start, end])\n                    start = end + 1\n                    end = start + 1\n                    sum_a = sum(array[start:end+1])\n            blocks.append([start, end])\n            return blocks\n\n    input_lines = stdin.splitlines()\n    n = int(input_lines[0])\n    array = list(map(int, input_lines[1].split()))\n    blocks = find_blocks(array)\n    k = len(blocks)\n    if k == 1:\n        return f\"{k}\\n{blocks[0][0]} {blocks[0][1]}\\n\"\n    else:\n        for i in range(k):\n            blocks[i].sort()\n        blocks.sort(key=lambda x: x[0])\n        if check_disjoint(blocks):\n            output = f\"{k}\\n\"\n            for block in blocks:\n                output += f\"{block[0]} {block[1]}\\n\"\n            return output\n        else:\n            return f\"{k}\\n{blocks[0][0]} {blocks[0][1]}\\n\" "
    },
    {
        "number": 4051,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, input_array = map(int, stdin.split())\n    input_array.sort()\n    stacks = [[] for _ in range(n)]\n    heights = [0] * n\n    \n    for i in range(n):\n        stacks[i] = [input_array[i]] * input_array[i]\n        heights[i] = input_array[i]\n    \n    sorted_array = []\n    while stacks:\n        max_index = heights.index(max(heights))\n        max_height = heights[max_index]\n        sorted_array.append(max_height)\n        del stacks[max_index]\n        del heights[max_index]\n        \n        if heights and max_height - min(heights) >= 2:\n            return \"NO\"\n        \n        for i in range(len(stacks)):\n            if heights[i] > 0:\n                stacks[i].pop()\n                heights[i] -= 1\n    \n    return \"YES\""
    },
    {
        "number": 4051,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    # Calculate the maximum height of the stacks\n    max_height = max(a)\n\n    # Check if the algorithm will sort the array correctly\n    if all(max_height - height >= 2 for height in a):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4051,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def can_sort(arr):\n        stacks = []\n        for a in arr:\n            stacks.append([a])\n\n        while len(stacks) > 1:\n            min_height = min(len(stacks[0]), len(stacks[1]))\n            min_index = 0 if len(stacks[0]) == min_height else 1\n            if min_height >= 1:\n                for i in range(min_height):\n                    stacks[0].append(stacks[1].pop(0))\n            stacks.pop(min_index)\n\n        return len(stacks) == 0\n\n    n = int(stdin.split('\\n')[0])\n    arr = list(map(int, stdin.split('\\n')[1].split()))\n\n    return \"YES\" if can_sort(arr) else \"NO\""
    },
    {
        "number": 4051,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, array = map(int, stdin.split('\\n')[1].split())\n    if not (1 <= n <= 10):\n        return \"NO\"\n    if not all(1 <= a <= 100 for a in array):\n        return \"NO\"\n    \n    sorted_array = sorted(array)\n    for i in range(n):\n        if array[i] != sorted_array[i]:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4051,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1:]))\n    \n    can_sort = True\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                can_sort = False\n                break\n        if not can_sort:\n            break\n    \n    return \"YES\" if can_sort else \"NO\""
    },
    {
        "number": 4051,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    can_sort = True\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(a[i] - a[j]) > 2:\n                can_sort = False\n                break\n        if not can_sort:\n            break\n    \n    return \"YES\" if can_sort else \"NO\""
    },
    {
        "number": 4051,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    array = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    if n <= 1:\n        return \"YES\"\n\n    for i in range(n - 1):\n        if abs(array[i] - array[i + 1]) >= 2:\n            return \"NO\"\n\n    return \"YES\"\n\n\ndef"
    },
    {
        "number": 4051,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    array = list(map(int, stdin.split()[1:]))\n    # Check if the array is sorted\n    sorted_array = sorted(array)\n    if sorted_array == array:\n        return \"YES\"\n\n    # Create stacks for each element in the array\n    stacks = [[] for _ in range(n)]\n    for i in range(n):\n        for j in range(array[i]):\n            stacks[i].append(i)\n\n    # Sort the stacks by their height\n    sorted_stacks = sorted(stacks, key=len, reverse=True)\n\n    # Sort the array using the described algorithm\n    output = []\n    while len(sorted_stacks) > 0:\n        # Get the tallest stack\n        tallest_stack = sorted_stacks[0]\n        if len(tallest_stack) > 0:\n            # Remove the top element from the stack\n            index = tallest_stack.pop(0)\n            # Add the height to the output array\n            output.append(array[index])\n            # Shift the stacks to the left\n            for stack in sorted_stacks:\n                if len(stack) > 0:\n                    stack.pop(0)\n            # Remove empty stacks\n            sorted_stacks = [stack for stack in sorted_stacks if len(stack) > 0]\n        else:\n            # Remove empty stacks\n            sorted_stacks.pop(0)\n\n    # Check if the sorted array is the same as the original array\n    if sorted(output) == sorted(array):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4051,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    \n    for i in range(n-1):\n        if abs(a[i+1] - a[i]) > 2:\n            return \"NO\"\n    \n    return \"YES\"\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4051,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1:]))\n\n    def count_slides(stacks: list) -> int:\n        count = 0\n        for i in range(len(stacks) - 1):\n            if stacks[i][0] - stacks[i + 1][0] >= 2:\n                count += 1\n        return count\n\n    def sort_ravioli(arr: list) -> list:\n        stacks = []\n        for num in arr:\n            stacks.append((num, [1] * num))\n\n        while len(stacks) > 1:\n            slides = count_slides(stacks)\n            if slides > 0:\n                return \"NO\"\n            stacks.sort(reverse=True, key=lambda x: x[0])\n            top_stack = stacks.pop(0)\n            new_stacks = []\n            for stack in stacks:\n                if stack[0] == top_stack[0]:\n                    stack[1].extend(top_stack[1])\n                else:\n                    new_stacks.append(stack)\n            new_stacks.append(top_stack)\n            stacks = new_stacks\n\n        return \"YES\"\n\n    return sort_ravioli(arr)"
    },
    {
        "number": 4052,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def swap(s: str, i: int, j: int) -> str:\n        chars = list(s)\n        chars[i], chars[j] = chars[j], chars[i]\n        return ''.join(chars)\n\n    n, s, t = stdin.split()\n    n = int(n)\n    moves = []\n\n    for i in range(n - 1):\n        if s[i] != t[i]:\n            if i == 0 and s[1] == t[0]:\n                s = swap(s, 0, 1)\n                moves.append(1)\n            elif i == n - 2 and s[n - 2] == t[n - 1]:\n                s = swap(s, n - 2, n - 1)\n                moves.append(n - 1)\n            else:\n                s = swap(s, i, i + 1)\n                moves.append(i + 1)\n\n    if s == t:\n        return str(len(moves)) + '\\n' + ' '.join(map(str, moves))\n    else:\n        return '-1'"
    },
    {
        "number": 4052,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n    t = stdin.splitlines()[2]\n\n    for i in range(n - 1):\n        if s[i:i+2] == t[i:i+2][::-1]:\n            return \"2\"\n\n    return \"-1\""
    },
    {
        "number": 4052,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    t = stdin.split('\\n')[2]\n\n    def is_swap_possible(s: str, t: str, i: int) -> bool:\n        return (s[i] == t[i]) and (s[i + 1] == t[i + 1])\n\n    def apply_swap(s: str, i: int) -> str:\n        return s[:i] + s[i + 1] + s[i] + s[i + 2:]\n\n    moves = 0\n    while moves < 10**4:\n        for i in range(n - 1):\n            if is_swap_possible(s, t, i):\n                s = apply_swap(s, i)\n                moves += 1\n                break\n        else:\n            return '-1'\n\n    swap_indices = [i + 1 for i, (a, b) in enumerate(zip(s, s[1:])) if a != b]\n    swap_indices.append(0)\n\n    output = f\"{moves}\\n{' '.join(map(str, swap_indices))}\"\n    return output "
    },
    {
        "number": 4052,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = stdin.split('\\n')\n    n = int(n)\n\n    if s == t:\n        return \"0\"\n\n    for i in range(n):\n        if s[i] != t[i]:\n            break\n\n    if i == n - 1:\n        return \"-1\"\n\n    diff = []\n    for j in range(i + 1, n):\n        if s[j] != t[j]:\n            diff.append(j)\n\n    moves = n - i - len(diff)\n\n    if moves > 10000:\n        return \"-1\"\n\n    result = []\n    if moves > 0:\n        result.append(moves)\n        for move in diff:\n            result.append(move)\n\n    return ' '.join(map(str, result))"
    },
    {
        "number": 4052,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    s = list(s)\n    t = list(t)\n    n = len(s)\n    if s == t:\n        return \"0\"\n    moves = []\n    for i in range(n):\n        if s[i] != t[i]:\n            for j in range(i + 1, n):\n                if s[j] != t[j]:\n                    if s[i] == t[j] and s[j] == t[i]:\n                        moves.append((i, j))\n                        moves.append((j, i))\n                        s[i], s[j] = s[j], s[i]\n                        break\n            else:\n                return \"-1\"\n    if s == t:\n        return str(len(moves)) + \"\\n\" + \" \".join(str(c) for c in moves)\n    else:\n        return \"-1\""
    },
    {
        "number": 4052,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = stdin.split()\n    n = int(n)\n    moves = 0\n\n    for i in range(n - 1):\n        if s[i] == t[i]:\n            continue\n        if s[i + 1] == t[i] and s[i] == t[i + 1]:\n            s = s[:i] + s[i + 1] + s[i] + s[i + 2:]\n            moves += 1\n            if moves > 10**4:\n                return \"-1\"\n\n    if s == t:\n        return str(moves) if moves else \"0\"\n    else:\n        return \"-1\"\n\n\ndef"
    },
    {
        "number": 4052,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    t = stdin.split('\\n')[2]\n\n    for i in range(n):\n        if s[i] != t[i]:\n            break\n    else:\n        return \"0\\n\"\n\n    moves = []\n    for i in range(n - 1):\n        if s[i] == t[i + 1] and s[i + 1] == t[i]:\n            moves.append(i + 1)\n            s = s[:i] + s[i + 1] + s[i] + s[i + 2:]\n\n    if s == t:\n        return str(len(moves)) + '\\n' + ' '.join(map(str, moves)) + '\\n'\n    else:\n        return \"-1\""
    },
    {
        "number": 4052,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = stdin.splitlines()\n    n = int(n)\n    s = list(s)\n    t = list(t)\n\n    def swap(i: int) -> None:\n        s[i], s[i + 1] = s[i + 1], s[i]\n\n    def reverse(i: int, j: int) -> None:\n        s[i:j + 1] = reversed(s[i:j + 1])\n\n    def is_solvable() -> bool:\n        for i in range(n):\n            if s[i] != t[i]:\n                return False\n        return True\n\n    def bfs() -> int:\n        queue = [(0, s.copy())]\n        visited = {tuple(s)}\n        level = 0\n\n        while queue:\n            level += 1\n            next_queue = []\n            for moves, state in queue:\n                for i in range(n - 1):\n                    swap(i)\n                    if tuple(state) not in visited:\n                        visited.add(tuple(state))\n                        next_queue.append((moves + 1, state.copy()))\n                    state = s.copy()\n\n                for i in range(1, n):\n                    reverse(0, i)\n                    if tuple(state) not in visited:\n                        visited.add(tuple(state))\n                        next_queue.append((moves + 1, state.copy()))\n                    state = s.copy()\n\n            queue = next_queue\n\n            for moves, state in queue:\n                if tuple(state) == tuple(t):\n                    return moves\n\n        return -1\n\n    if not is_solvable():\n        return \"-1\"\n\n    return str(bfs())"
    },
    {
        "number": 4052,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    s = lines[1]\n    t = lines[2]\n\n    if s == t:\n        return \"0\"\n\n    for i in range(1, n):\n        if s[i] != t[i]:\n            break\n    else:\n        i = 0\n\n    if s[i] == t[i + 1]:\n        return \"0\"\n\n    moves = []\n    for j in range(i + 1, n):\n        if s[j] == t[j - 1]:\n            moves.append(j)\n\n    if not moves:\n        return \"-1\"\n\n    k = len(moves)\n    if k > 10000:\n        return \"-1\"\n\n    return f\"{k}\\n{' '.join(str(move) for move in moves)}\"\n\ninput_data = \"\"\"6\nabcdef\nabdfec\"\"\"\nprint(solution(input_data))\n\ninput_data = \"\"\"4\nabcd\naccd\"\"\"\nprint(solution(input_data)) "
    },
    {
        "number": 4052,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def swap(s: str, i: int, j: int) -> str:\n        s = list(s)\n        s[i], s[j] = s[j], s[i]\n        return \"\".join(s)\n\n    n, s, t = stdin.splitlines()\n    n = int(n)\n\n    if s == t:\n        return \"0\"\n\n    for i in range(n - 1):\n        if s[i] == t[i + 1] and s[i + 1] == t[i]:\n            s = swap(s, i, i + 1)\n\n    if s == t:\n        moves = []\n        while moves:\n            move = moves.pop()\n            s = swap(s, move, move + 1)\n        return str(len(moves)) + \"\\n\" + \" \".join(map(str, moves))\n\n    return \"-1\"\n\n\ndef"
    },
    {
        "number": 4053,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    prefixes = set()\n    suffixes = set()\n    \n    for line in stdin.split('\\n')[1:]:\n        if not line:\n            continue\n        if len(line) == n:\n            prefixes.add(line)\n        else:\n            suffixes.add(line)\n            \n    result = []\n    \n    for prefix in prefixes:\n        for suffix in suffixes:\n            if prefix[:-1] == suffix[1:]:\n                result.append(prefix)\n                result.append(suffix)\n                break\n                \n    if not result:\n        return \"IMPOSSIBLE\"\n    \n    answer = []\n    for item in result:\n        if item in prefixes:\n            answer.append('P')\n        else:\n            answer.append('S')\n            \n    return ''.join(answer)"
    },
    {
        "number": 4053,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    prefixes_and_suffixes = stdin.splitlines()[1:]\n\n    # Count the occurrences of each prefix and suffix\n    prefixes_count = {}\n    suffixes_count = {}\n    for prefix_or_suffix in prefixes_and_suffixes:\n        if prefix_or_suffix in prefixes_count:\n            prefixes_count[prefix_or_suffix] += 1\n        else:\n            prefixes_count[prefix_or_suffix] = 1\n        if prefix_or_suffix[::-1] in suffixes_count:\n            suffixes_count[prefix_or_suffix[::-1]] += 1\n        else:\n            suffixes_count[prefix_or_suffix[::-1]] = 1\n\n    # Check if there is a string that is consistent with the given prefixes and suffixes\n    for string in prefixes_and_suffixes:\n        if prefixes_count[string] == suffixes_count[string]:\n            return \"P\" * prefixes_count[string] + \"S\" * suffixes_count[string]\n\n    # If there is no consistent string, return any answer\n    return \"P\" * (n - 1) + \"S\" * (n - 1) "
    },
    {
        "number": 4053,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    strings = stdin.split('\\n')[1:-1]\n    \n    prefix_suffix = set()\n    for s in strings:\n        prefix_suffix.add(s[::-1])\n        prefix_suffix.add(s[:-1])\n    \n    result = ''\n    for s in strings:\n        if s[1:] in prefix_suffix:\n            result += 'P'\n        else:\n            result += 'S'\n    \n    return result\n"
    },
    {
        "number": 4053,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    strings = stdin.splitlines()[1:]\n    prefixes = set(strings[:n-1])\n    suffixes = set(strings[n-1:])\n    \n    possible_strings = []\n    for prefix in prefixes:\n        for suffix in suffixes:\n            if prefix[:-1] == suffix and prefix[-1] == suffix[0]:\n                possible_strings.append(prefix + suffix)\n    \n    if not possible_strings:\n        return \"IMPOSSIBLE\"\n    \n    result = \"\"\n    for i in range(n):\n        for possible_string in possible_strings:\n            if possible_string[i] in prefixes:\n                result += \"P\"\n            else:\n                result += \"S\"\n    \n    return result\n"
    },
    {
        "number": 4053,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    prefixes_suffixes = [s for s in stdin.split(\"\\n\")[1:] if len(s) <= n]\n    prefixes = set()\n    suffixes = set()\n    for s in prefixes_suffixes:\n        for i in range(1, n):\n            if s[:i] in prefixes and s[i:] in suffixes:\n                break\n            elif s[:i] not in prefixes and s[i:] not in suffixes:\n                prefixes.add(s[:i])\n                suffixes.add(s[i:])\n    result = \"\"\n    for s in prefixes_suffixes:\n        if s in prefixes:\n            result += \"P\"\n        else:\n            result += \"S\"\n    return result\n\n\ninputs = [\n    \"5\\nba\\na\\nabab\\na\\naba\\nbaba\\nab\\naba\",\n    \"3\\naa\\naa\\na\\naba\\nbaba\\na\\nab\\naba\",\n    \"2\\na\\nc\\na\\naba\\nba\\nca\\nba\"\n]\n\nfor input_str in inputs:\n    print(solution(input_str)) "
    },
    {
        "number": 4053,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    prefixes_suffixes = stdin.split('\\n')[1:]\n    prefixes = set()\n    suffixes = set()\n    for i in range(1, n):\n        for j in range(len(prefixes_suffixes) // 2):\n            if prefixes_suffixes[2 * i - 2 + j] == prefixes_suffixes[2 * i + j]:\n                prefixes.add(prefixes_suffixes[2 * i - 2 + j])\n                suffixes.add(prefixes_suffixes[2 * i + j])\n            else:\n                continue\n    result = \"\"\n    for i in range(2 * n - 2):\n        if prefixes_suffixes[i] in prefixes:\n            result += 'P'\n        else:\n            result += 'S'\n    return result"
    },
    {
        "number": 4053,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    prefixes_and_suffixes = stdin.split(\"\\n\")[1:]\n    result = \"\"\n    \n    for i in range(len(prefixes_and_suffixes)):\n        prefix = prefixes_and_suffixes[i]\n        suffix = prefixes_and_suffixes[i+n-1]\n        if prefix == suffix:\n            result += \"P\"\n        else:\n            result += \"S\"\n            \n    return result\n    \n    \ninput_string = \"\"\"5\nba\na\nabab\na\naba\nbaba\nab\naba\n\"\"\"\nprint(solution(input_string)) "
    },
    {
        "number": 4053,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    prefixes_suffixes = set(stdin.split(\"\\n\")[1:])\n    possible_strings = set()\n    for i in range(1, n):\n        for prefix in prefixes_suffixes:\n            if prefix[0] == prefix[-1] and len(prefix) == i:\n                for suffix in prefixes_suffixes:\n                    if suffix[0] == suffix[-1] and len(suffix) == n - i:\n                        possible_strings.add(prefix + suffix)\n    \n    result = \"\"\n    for string in possible_strings:\n        for i, character in enumerate(string):\n            if i == len(string) - 1:\n                result += \"S\"\n            elif string[i+1:] in prefixes_suffixes:\n                result += \"P\"\n            else:\n                result += \"S\"\n        return result"
    },
    {
        "number": 4053,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    prefixes_suffixes = stdin.split('\\n')[1:]\n\n    prefixes = set()\n    suffixes = set()\n\n    for prefix_suffix in prefixes_suffixes:\n        if prefix_suffix in prefixes or prefix_suffix in suffixes:\n            continue\n\n        if len(prefix_suffix) == n - 1:\n            prefixes.add(prefix_suffix)\n        else:\n            suffixes.add(prefix_suffix)\n\n    string_to_guess = \"\"\n    for prefix_suffix in prefixes_suffixes:\n        if prefix_suffix in prefixes:\n            string_to_guess += 'P'\n        else:\n            string_to_guess += 'S'\n\n    return string_to_guess "
    },
    {
        "number": 4053,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    prefix_suffixes = stdin.split('\\n')[1:]\n    prefixes = [prefix for prefix in prefix_suffixes if len(prefix) == n - 1]\n    suffixes = [suffix for suffix in prefix_suffixes if len(suffix) == n - 1]\n\n    result = []\n    for i in range(n - 1, 0, -1):\n        if prefixes[i - 1] in prefixes[:i - 1] and suffixes[i - 1] in suffixes[:i - 1]:\n            result.append('S')\n        else:\n            result.append('P')\n\n    return ''.join(result)\n"
    },
    {
        "number": 4054,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    count_odd = sum([1 for i in a if i % 2 != 0])\n    if count_odd % 2 == 0:\n        return \"1\"\n    else:\n        return \"0\""
    },
    {
        "number": 4054,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    ingredients = {\n        \"I Aqua Fortis\": 2,\n        \"I Aqua Regia\": 4,\n        \"II Amalgama\": 6,\n        \"VII Minium\": 8,\n        \"IV Vitriol\": 10\n    }\n\n    total_value = 0\n    for ingredient in stdin.split():\n        total_value += ingredients.get(ingredient, 0)\n\n    return str(total_value)"
    },
    {
        "number": 4054,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split()]\n    a.sort(reverse=True)\n    for i in range(len(a)):\n        if a[i] == i + 1:\n            return str(i + 1)\n    return str(len(a) + 1)\n\ninput_str = \"2 4 6 8 10\"\nprint(solution(input_str)) "
    },
    {
        "number": 4054,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input by whitespace into a list of integers\n    int_list = list(map(int, stdin.split()))\n    \n    # Initialize the sum of the integers\n    total_sum = 0\n    \n    # Iterate through the list of integers\n    for num in int_list:\n        # Add the absolute value of the integer to the total sum\n        total_sum += abs(num)\n    \n    # If the total sum is even, return 0, otherwise return 1\n    if total_sum % 2 == 0:\n        return \"0\"\n    else:\n        return \"1\""
    },
    {
        "number": 4054,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"1\""
    },
    {
        "number": 4054,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function takes a string of integers as input and returns the sum of the integers.\n\n    Args:\n    stdin (str): A string of integers separated by spaces\n\n    Returns:\n    str: A single integer representing the sum of the input integers\n    \"\"\"\n    # Split the input string into a list of integers\n    int_list = [int(num) for num in stdin.split()]\n\n    # Calculate the sum of the integers\n    total = sum(int_list)\n\n    # Return the sum as a string\n    return str(total)"
    },
    {
        "number": 4054,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given a string of integers, returns a single integer.\n\n    Args:\n        stdin (str): A string of integers separated by spaces.\n\n    Returns:\n        str: A single integer.\n    \"\"\"\n    a_list = list(map(int, stdin.split()))\n    result = 0\n    for a in a_list:\n        if a % 2 == 0:\n            result += a\n    return str(result)"
    },
    {
        "number": 4054,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass"
    },
    {
        "number": 4054,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split()]\n    result = 1\n    for num in a:\n        result *= num\n    return str(result)"
    },
    {
        "number": 4054,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    a = list(map(int, stdin.split()))\n    \n    # calculate result\n    result = 0\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if a[i] * a[j] > result:\n                result = a[i] * a[j]\n    \n    return str(result)"
    },
    {
        "number": 4055,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    flats = list(map(int, stdin.split()))\n    n = len(flats)\n    \n    def is_disturbed(i):\n        if 1 < i < n and flats[i - 1] == flats[i + 1] == 1 and flats[i] == 0:\n            return True\n        return False\n    \n    disturbed = [i for i in range(1, n - 1) if is_disturbed(i)]\n    \n    count = 0\n    for i in range(len(disturbed)):\n        for j in range(i + 1, len(disturbed)):\n            if abs(disturbed[i] - disturbed[j]) == 2:\n                count += 1\n                break\n    \n    return str(count)\n\n\ndef"
    },
    {
        "number": 4055,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input().strip())\n    a = list(map(int, input().strip().split()))\n    max_k = 0\n    for i in range(1, n-1):\n        if a[i-1] == a[i+1] == 1 and a[i] == 0:\n            disturbed = 0\n            for j in range(n):\n                if a[j] == 1:\n                    disturbed += 1\n            if disturbed == i - 1:\n                max_k = max(max_k, i)\n    return str(max_k)"
    },
    {
        "number": 4055,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    light_states = list(map(int, stdin.split('\\n')[1].split()))\n\n    def is_disturbed(i):\n        return (1 < i < n) and (light_states[i - 1] == light_states[i + 1] == 1) and (light_states[i] == 0)\n\n    def count_disturbed(i):\n        count = 0\n        for j in range(n):\n            if is_disturbed(j):\n                count += 1\n        return count\n\n    min_k = n\n    for i in range(1, n - 1):\n        if light_states[i] == 1:\n            light_states[i] = 0\n            new_min_k = count_disturbed(i)\n            light_states[i] = 1\n            if new_min_k < min_k:\n                min_k = new_min_k\n\n    return str(min_k)"
    },
    {
        "number": 4055,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    light_status = list(map(int, input().split()))\n    \n    k = 0\n    while k < n - 1:\n        for i in range(1, n - 1):\n            if light_status[i - 1] == light_status[i + 1] == 1 and light_status[i] == 0:\n                light_status[i] = light_status[i - 1] = light_status[i + 1] = 0\n                k += 1\n        if k == 0:\n            break\n    \n    return str(k)"
    },
    {
        "number": 4055,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, flats = stdin.split()\n    n = int(n)\n    flats = list(map(int, flats))\n\n    def disturbed(i: int) -> bool:\n        return (i > 0 and i < n - 1 and flats[i - 1] == flats[i + 1] == 1 and flats[i] == 0)\n\n    count = 0\n    for i in range(n):\n        if disturbed(i):\n            count += 1\n\n    return str(count)\n\ndef"
    },
    {
        "number": 4055,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    def is_disturbed(i):\n        return 1 < i < n and a[i - 1] == a[i + 1] == 1 and a[i] == 0\n\n    k = 0\n    while k < n - 1 and not any(is_disturbed(i) for i in range(1, n)):\n        k += 1\n\n    return str(k)"
    },
    {
        "number": 4055,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, flats = stdin.splitlines()\n    n = int(n)\n    flats = list(map(int, flats.split()))\n    \n    def is_disturbed(i):\n        return 1 < i < n and flats[i - 1] == flats[i + 1] == 1 and flats[i] == 0\n    \n    k = 0\n    for i in range(n - 1):\n        if not is_disturbed(i) and not is_disturbed(i + 1):\n            k += 1\n    \n    return str(k)"
    },
    {
        "number": 4055,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    light_states = list(map(int, stdin.split()[1:]))\n\n    def is_disturbed(i: int) -> bool:\n        return 1 < i < n and light_states[i - 1] == light_states[i + 1] == 1 and light_states[i] == 0\n\n    count = 0\n    for i in range(1, n - 1):\n        if is_disturbed(i):\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4055,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, light_states = stdin.split(\"\\n\")\n    n = int(n)\n    light_states = [int(i) for i in light_states.split()]\n\n    min_k = n\n    for i in range(1, n-1):\n        if light_states[i-1] == light_states[i+1] == 1 and light_states[i] == 0:\n            min_k -= 1\n\n    return str(min_k)\n\n\ninput_string = '''\n10\n1 1 0 1 1 0 1 0 1 0\n'''\n\nprint(solution(input_string)) # Output: 2 "
    },
    {
        "number": 4055,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, light_states = stdin.split()\n    n = int(n)\n    light_states = [int(x) for x in light_states.split()]\n\n    def is_disturbed(i: int) -> bool:\n        return 1 < i < n and light_states[i - 1] == light_states[i + 1] == 1 and light_states[i] == 0\n\n    def turn_off_lights(pairwise_distinct_flats: set) -> bool:\n        for i in range(1, n - 1):\n            if i not in pairwise_distinct_flats and not is_disturbed(i):\n                return False\n        return True\n\n    for k in range(n):\n        for pairwise_distinct_flats in itertools.combinations(range(1, n - 1), k):\n            if turn_off_lights(set(pairwise_distinct_flats)):\n                return k\n    return 0 "
    },
    {
        "number": 4056,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = [int(x) for x in stdin.split('\\n')[1].split()]\n    \n    divisors = set()\n    for i in range(1, a[-1] + 1):\n        is_divisor = True\n        for j in range(len(a)):\n            if a[j] % i != 0:\n                is_divisor = False\n                break\n        if is_divisor:\n            divisors.add(i)\n    \n    return str(len(divisors))\n"
    },
    {
        "number": 4056,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    divisors = set()\n\n    for num in a:\n        for i in range(1, int(num**0.5)+1):\n            if num % i == 0:\n                divisors.add(i)\n                if i != num // i:\n                    divisors.add(num // i)\n\n    return str(len(divisors))"
    },
    {
        "number": 4056,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    x = 1\n    common_divisors = set()\n    for num in a:\n        while x <= num:\n            if num % x == 0:\n                common_divisors.add(x)\n            x += 1\n\n    return str(len(common_divisors))"
    },
    {
        "number": 4056,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    # Calculate the gcd of all elements in the array\n    gcd = a[0]\n    for i in range(1, n):\n        gcd = math.gcd(gcd, a[i])\n    \n    # Count the number of factors of the gcd\n    count = 0\n    for i in range(1, gcd + 1):\n        if gcd % i == 0:\n            count += 1\n    \n    return str(count)"
    },
    {
        "number": 4056,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    common_divisors = set(a[0].split())\n    \n    for i in range(1, len(a)):\n        divisors = set(a[i].split())\n        common_divisors = common_divisors.intersection(divisors)\n    \n    return str(len(common_divisors))"
    },
    {
        "number": 4056,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    divisors = set(a[0].divisors())\n    for i in range(1, n):\n        divisors.intersection_update(a[i].divisors())\n    return str(len(divisors))\n\ndef"
    },
    {
        "number": 4056,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    if not a:\n        return \"0\"\n    common_divisor = a[0]\n    for i in range(1, len(a)):\n        common_divisor = gcd(common_divisor, a[i])\n    count = 0\n    for i in range(1, common_divisor + 1):\n        if all(num % i == 0 for num in a):\n            count += 1\n    return str(count)\n\ndef"
    },
    {
        "number": 4056,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in range(2, max(a) + 1):\n        is_common_divisor = True\n        for j in a:\n            if j % i != 0:\n                is_common_divisor = False\n                break\n        if is_common_divisor:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4056,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    divisors = set()\n\n    for i in range(2, max(a) + 1):\n        valid = True\n        for j in a:\n            if j % i != 0:\n                valid = False\n                break\n        if valid:\n            divisors.add(i)\n\n    return str(len(divisors))"
    },
    {
        "number": 4056,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    common_divisors = set()\n    for i in range(1, a[-1] + 1):\n        if all(num % i == 0 for num in a):\n            common_divisors.add(i)\n\n    return str(len(common_divisors))\n"
    },
    {
        "number": 4057,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, coins = stdin.split()\n    n = int(n)\n    coins = list(map(int, coins.split()))\n\n    count = 0\n    pocket_count = 0\n    pockets = {}\n\n    for coin in coins:\n        if coin not in pockets:\n            pockets[coin] = pocket_count\n            pocket_count += 1\n            count += 1\n\n    return str(count)\n\ninput_str = input()\nresult = solution(input_str)\nprint(result) "
    },
    {
        "number": 4057,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    coins = list(map(int, stdin.split()[1:]))\n    coins.sort()\n    \n    pockets = 0\n    current_pocket = []\n    for coin in coins:\n        if not current_pocket or coin != current_pocket[-1]:\n            current_pocket.append(coin)\n        else:\n            current_pocket = [coin]\n            pockets += 1\n    \n    return str(pockets + 1)"
    },
    {
        "number": 4057,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    coins = list(map(int, stdin.split()[1:]))\n    \n    # Create a set to keep track of unique coin values\n    unique_coins = set(coins)\n    # Initialize the minimum number of pockets to n (the number of coins)\n    min_pockets = n\n    \n    # Iterate through the unique coin values\n    for coin in unique_coins:\n        # Count the number of times the coin appears in the coins list\n        coin_count = coins.count(coin)\n        # Calculate the minimum number of pockets needed for this coin value\n        num_pockets = (coin_count + (min_pockets - 1)) // min_pockets\n        # Update the minimum number of pockets if necessary\n        min_pockets = max(min_pockets, num_pockets)\n    \n    return str(min_pockets)"
    },
    {
        "number": 4057,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, coins = stdin.split()\n    n = int(n)\n    coins = list(map(int, coins.split()))\n    \n    pockets = []\n    for coin in coins:\n        found = False\n        for pocket in pockets:\n            if coin not in pocket:\n                pocket.append(coin)\n                found = True\n                break\n        if not found:\n            pockets.append([coin])\n    \n    return str(len(pockets))"
    },
    {
        "number": 4057,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, coins = stdin.split('\\n')\n    n = int(n)\n    coins = list(map(int, coins.split()))\n    \n    pocket_count = 0\n    pockets = []\n    for coin in coins:\n        found = False\n        for i, pocket in enumerate(pockets):\n            if pocket[-1] != coin:\n                pockets[i].append(coin)\n                found = True\n                break\n        if not found:\n            pocket_count += 1\n            pockets.append([coin])\n    \n    return str(pocket_count)\n\ndef"
    },
    {
        "number": 4057,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def distribute(pockets: List[List[int]], coin_value: int) -> None:\n        for pocket in pockets:\n            if len(pocket) == 0 or pocket[-1] != coin_value:\n                pocket.append(coin_value)\n                break\n\n    n = int(stdin.readline().strip())\n    coins = list(map(int, stdin.readline().strip().split()))\n\n    pockets = [[] for _ in range(n)]\n    for coin in coins:\n        distribute(pockets, coin)\n\n    return str(len(pockets))"
    },
    {
        "number": 4057,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, coins = stdin.split('\\n')\n    n = int(n)\n    coins = list(map(int, coins.split()))\n\n    unique_coins = set(coins)\n    pockets = [[] for _ in range(len(unique_coins))]\n\n    for coin in coins:\n        index = unique_coins.index(coin)\n        if not pockets[index]:\n            pockets[index].append(coin)\n        else:\n            for pocket in pockets:\n                if pocket[-1] != coin:\n                    pocket.append(coin)\n                    break\n\n    return str(len(pockets))"
    },
    {
        "number": 4057,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    coins = list(map(int, stdin.split()))\n    n = coins[0]\n    coins = coins[1:]\n    coins.sort()\n    pockets = 1\n    i = 1\n    while i < n:\n        if coins[i] != coins[i-1]:\n            pockets += 1\n        i += 1\n    return str(pockets)\n\ninput_str = input()\nn = int(input_str.split()[0])\ncoins = list(map(int, input_str.split()[1:]))\ncoins.sort()\n\nresult = solution(input_str)\nprint(result) "
    },
    {
        "number": 4057,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, coins = stdin.split('\\n')\n    n = int(n)\n    coins = list(map(int, coins.split()))\n    coins.sort()\n\n    pockets = 1\n    last_pocket = coins[0]\n    for coin in coins[1:]:\n        if coin != last_pocket:\n            pockets += 1\n            last_pocket = coin\n\n    return str(pockets)"
    },
    {
        "number": 4057,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def find_pockets(coins, value):\n        pocket_count = 1\n        pocket_sum = coins[0]\n        for coin in coins[1:]:\n            if pocket_sum + coin != value:\n                pocket_sum = coin\n                pocket_count += 1\n        return pocket_count\n\n    n, coins = stdin.split('\\n')\n    coins = list(map(int, coins.split()))\n    min_pockets = len(coins)\n\n    for i in range(len(coins)):\n        for j in range(i+1, len(coins)):\n            if coins[i] == coins[j]:\n                value = coins[i]\n                coins_without_duplicates = [c for c in coins if c != value]\n                pockets = find_pockets(coins_without_duplicates, value)\n                min_pockets = min(min_pockets, pockets)\n\n    return str(min_pockets)"
    },
    {
        "number": 4058,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, input().split())\n    heaters = list(map(int, input().split()))\n\n    current_heaters = 0\n    for i in range(n):\n        if heaters[i] == 1:\n            current_heaters += 1\n        if i + 1 >= r:\n            current_heaters -= heaters[i - r + 1]\n        if i - r + 1 >= 0:\n            current_heaters -= heaters[i - r + 1]\n        if i + 1 == n:\n            break\n\n    if current_heaters == n:\n        return current_heaters\n    else:\n        return -1"
    },
    {
        "number": 4058,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, r = list(map(int, stdin.split()))\n    heaters = list(map(int, input().split()))\n\n    warmed_up_positions = [False] * n\n    heaters_count = 0\n\n    for i in range(n):\n        if heaters[i] == 1:\n            left_border = max(0, i - r + 1)\n            right_border = min(n - 1, i + r - 1)\n\n            for j in range(left_border, right_border + 1):\n                warmed_up_positions[j] = True\n\n            heaters_count += 1\n\n    if all(warmed_up_positions):\n        return str(heaters_count)\n    else:\n        return \"-1\""
    },
    {
        "number": 4058,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split()[0].split())\n    heaters = list(map(int, stdin.split()[1].split()))\n\n    num_heaters = 0\n    num_heaters_needed = 0\n    max_end = 0\n    for i in range(n):\n        if heaters[i] == 1:\n            num_heaters += 1\n            max_end = max(max_end, i + r - 1)\n\n        if max_end >= i:\n            num_heaters_needed += 1\n\n    if num_heaters_needed >= num_heaters:\n        return str(num_heaters_needed)\n    else:\n        return \"-1\""
    },
    {
        "number": 4058,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split()[0].split())\n    heaters = list(map(int, stdin.split()[1].split()))\n\n    def can_warm_up(heater_position: int, r: int) -> bool:\n        return any(heaters[heater_position - r:heater_position + r])\n\n    heaters_count = 0\n    for i in range(n):\n        if heaters[i] == 0:\n            if can_warm_up(i, r):\n                continue\n            else:\n                return \"-1\"\n        heaters_count += 1\n\n    return str(heaters_count)"
    },
    {
        "number": 4058,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split()[0:2])\n    heaters = [int(x) for x in stdin.split()[2:]]\n    \n    def is_warm(heater_pos, element_pos):\n        return heater_pos - r + 1 <= element_pos <= heater_pos + r - 1\n    \n    warm_elements = [0] * n\n    for heater_pos, heater_val in enumerate(heaters):\n        if heater_val == 1:\n            for element_pos in range(n):\n                if is_warm(heater_pos, element_pos):\n                    warm_elements[element_pos] = 1\n                    \n    if sum(warm_elements) == n:\n        return str(len([heater for heater in heaters if heater == 1]))\n    else:\n        return \"-1\"\n    \n"
    },
    {
        "number": 4058,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split()[0].split())\n    house = list(map(int, stdin.split()[1].split()))\n\n    heaters = [[] for _ in range(n)]\n\n    for i in range(n):\n        if house[i] == 1:\n            for j in range(i - r + 1, i + r):\n                if 0 <= j < n:\n                    heaters[j].append(i)\n\n    count = 0\n    for heater_positions in heaters:\n        if len(heater_positions) > 0:\n            count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4058,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, input().split())\n    heaters = list(map(int, input().split()))\n    \n    count = 0\n    for i in range(n):\n        if heaters[i] == 1:\n            left = i - r + 1\n            right = i + r - 1\n            if left < 0:\n                left = 0\n            if right >= n:\n                right = n - 1\n            heaters[left:right+1] = [1] * (right - left + 1)\n    \n    if sum(heaters) == n:\n        count = n\n    else:\n        count = -1\n    \n    return str(count)"
    },
    {
        "number": 4058,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split()[0:2])\n    house = list(map(int, stdin.split()[2:]))\n\n    heaters = [i for i, h in enumerate(house) if h == 1]\n    heaters.sort()\n\n    def is_covered(i: int, j: int, heaters: list) -> bool:\n        for heater in heaters:\n            if heater - r + 1 <= i and heater + r - 1 >= j:\n                return True\n        return False\n\n    count = 0\n    i, j = 0, 0\n    while i < n and j < len(heaters):\n        if not is_covered(i, heaters[j], heaters):\n            count += 1\n            j += 1\n        i += 1\n\n    if i < n:\n        return -1\n    else:\n        return count"
    },
    {
        "number": 4058,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split()[0:2])\n    heaters = list(map(int, stdin.split()[2:]))\n\n    min_heaters = float('inf')\n    for i in range(n - r + 1):\n        heated_elements = heaters[i:i+r]\n        heated_positions = [j for j, heater in enumerate(heaters, i) if heater == 1]\n        if sum(heated_elements) == 0:\n            continue\n        min_heaters = min(min_heaters, len(heated_positions))\n\n    return min_heaters if min_heaters != float('inf') else -1\n"
    },
    {
        "number": 4058,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split()[:2])\n    heaters = list(map(int, stdin.split()[2:]))\n\n    heaters_on = [0] * n\n    warm_elements = 0\n    heaters_on[0] = 1\n\n    for i in range(1, n):\n        if heaters[i] == 1:\n            warm_elements += 2 * r - 1\n        if i >= r and heaters[i - r] == 1:\n            warm_elements -= 2 * r - 1\n\n        if warm_elements >= i + 1:\n            heaters_on[i] = 1\n            warm_elements -= i\n\n    if warm_elements == 0:\n        return str(heaters_on.count(1))\n    else:\n        return \"-1\"\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4059,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n\n    # Count the number of tuples that satisfy A \\times B + C = N\n    count = 0\n    for A in range(1, N + 1):\n        for B in range(1, N + 1):\n            C = N - A * B\n            if C > 0:\n                count += 1\n\n    return str(count)"
    },
    {
        "number": 4059,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for a in range(1, n + 1):\n        for b in range(1, n + 1):\n            c = n - a * b\n            if c > 0 and (a * b + c) == n:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4059,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    count = 0\n    for i in range(1, N):\n        for j in range(1, N):\n            if i * j == N:\n                count += 1\n            elif i * j < N:\n                k = N - i * j\n                if k > 0 and i * k + j * k == N:\n                    count += 1\n    return str(count)"
    },
    {
        "number": 4059,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    count = 0\n\n    for A in range(1, N):\n        for B in range(1, N):\n            C = N - A * B\n            if C > 0:\n                count += 1\n\n    return str(count)"
    },
    {
        "number": 4059,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n\n    for A in range(1, N + 1):\n        for B in range(1, N + 1):\n            C = N - A * B\n            if C > 0:\n                count += 1\n\n    return str(count)"
    },
    {
        "number": 4059,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 0\n\n    for a in range(1, n + 1):\n        for b in range(1, n + 1):\n            c = n - a * b\n            if c > 0:\n                count += 1\n\n    return str(count)"
    },
    {
        "number": 4059,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    \n    for a in range(1, n + 1):\n        for b in range(1, n + 1):\n            c = n - a * b\n            if c > 0 and c <= n:\n                count += 1\n                \n    return str(count)\n\ndef"
    },
    {
        "number": 4059,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Function to solve the problem of counting the number of tuples (A,B,C) of positive integers that satisfy A \\times B + C = N\n    \"\"\"\n    n = int(stdin)\n    count = 0\n    for a in range(1, n):\n        for b in range(1, n):\n            c = n - a*b\n            if c > 0:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4059,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for i in range(1, N + 1):\n        for j in range(1, i + 1):\n            if i * j == N:\n                count += 1\n            elif i * j > N:\n                break\n    return str(count)"
    },
    {
        "number": 4059,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 0\n    for a in range(1, n):\n        for b in range(1, n):\n            if a * b == n:\n                count += 1\n            elif a * b < n:\n                c = n - a * b\n                if c > 0:\n                    count += 1\n    return str(count)\n\ndef"
    },
    {
        "number": 4060,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    s = stdin.split(\"\\n\")[1]\n    \n    count = 0\n    \n    for i in range(n):\n        if s[i] == \"(\":\n            if i == 0 or s[i-1] == \")\":\n                count += 1\n            if i == n-1 or s[i+1] == \"(\":\n                count += 1\n        else:\n            if i == 0 or s[i-1] == \"(\":\n                count += 1\n            if i == n-1 or s[i+1] == \")\":\n                count += 1\n                \n    return str(count)"
    },
    {
        "number": 4060,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    \n    def is_regular(s: str) -> bool:\n        stack = []\n        for i in s:\n            if i == '(':\n                stack.append('(')\n            elif not stack or stack[-1] == '(':\n                return False\n            else:\n                stack.pop()\n        return not stack\n    \n    count = 0\n    for i in range(n):\n        if s[i] == '(':\n            s[i] = ')'\n            if is_regular(s):\n                count += 1\n            s[i] = '('\n        elif s[i] == ')':\n            s[i] = '('\n            if is_regular(s):\n                count += 1\n            s[i] = ')'\n    return str(count)\n\ninput_string = input()\nprint(solution(input_string)) "
    },
    {
        "number": 4060,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    \n    def is_regular(s: str) -> bool:\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if not stack or stack[-1] == ')':\n                    return False\n                stack.pop()\n            else:\n                continue\n        return not stack\n    \n    result = 0\n    for i in range(n):\n        if s[i] == '(':\n            s[i] = ')'\n            if is_regular(s):\n                result += 1\n            s[i] = '('\n        elif s[i] == ')':\n            s[i] = '('\n            if is_regular(s):\n                result += 1\n            s[i] = ')'\n        else:\n            continue\n    \n    return str(result)"
    },
    {
        "number": 4060,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    \n    def is_regular(s: str) -> bool:\n        stack = []\n        for i in s:\n            if i == '(':\n                stack.append('1')\n            elif not stack:\n                return False\n            else:\n                stack[-1] += '+'\n                stack.pop()\n        return not stack\n    \n    count = 0\n    for i in range(n):\n        if s[i] == '(':\n            s[i] = ')'\n        elif s[i] == ')':\n            s[i] = '('\n        else:\n            continue\n        if is_regular(''.join(s)):\n            count += 1\n        s[i] = '(' if s[i] == ')' else ')'\n    \n    return str(count)"
    },
    {
        "number": 4060,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    count = 0\n\n    for i in range(n):\n        if i == 0 or i == n - 1:\n            continue\n        if s[i] == ')' and s[i - 1] == '(':\n            count += 1\n        elif s[i] == '(' and s[i - 1] == ')':\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4060,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    s = stdin.split(\"\\n\")[1]\n\n    count = 0\n    for i in range(n):\n        if s[i] == '(' and s[i+1:].count(')') > s[i+1:].count('('):\n            count += 1\n        elif s[i] == ')' and s[i+1:].count('(')') > s[i+1:].count(')'):\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4060,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stack = []\n    count = 0\n    for char in stdin:\n        if char == \"(\":\n            stack.append(char)\n        else:\n            if len(stack) == 0:\n                count += 1\n            else:\n                stack.pop()\n    \n    count += len(stack)\n    \n    return count"
    },
    {
        "number": 4060,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    \n    def is_regular(bracket_sequence: str) -> bool:\n        stack = []\n        for i in range(len(bracket_sequence)):\n            if bracket_sequence[i] == '(':\n                stack.append('(')\n            else:\n                if not stack:\n                    return False\n                stack.pop()\n        return not stack\n    \n    def change_type(bracket_sequence: str, i: int) -> str:\n        new_sequence = list(bracket_sequence)\n        if new_sequence[i] == '(':\n            new_sequence[i] = ')'\n        else:\n            new_sequence[i] = '('\n        return \"\".join(new_sequence)\n    \n    count = 0\n    for i in range(n):\n        if is_regular(change_type(s, i)):\n            count += 1\n    \n    return count"
    },
    {
        "number": 4060,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stack = []\n    for char in stdin:\n        if char == '(':\n            stack.append('(')\n        elif char == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                stack.append(')')\n        else:\n            return \"Invalid input\"\n    count = 0\n    for i in range(len(stdin)):\n        temp = list(stdin)\n        if temp[i] == '(':\n            temp[i] = ')'\n        else:\n            temp[i] = '('\n        if is_regular(temp):\n            count += 1\n    return count\n\ndef"
    },
    {
        "number": 4060,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n\n    def is_regular(bracket_sequence: str) -> bool:\n        stack = []\n        for c in bracket_sequence:\n            if c == '(':\n                stack.append(c)\n            else:\n                if not stack:\n                    return False\n                stack.pop()\n        return not stack\n\n    count = 0\n    for i in range(n):\n        if s[i] == '(':\n            s[i] = ')'\n            if is_regular(s):\n                count += 1\n            s[i] = '('\n        elif s[i] == ')':\n            s[i] = '('\n            if is_regular(s):\n                count += 1\n            s[i] = ')'\n    return str(count)"
    },
    {
        "number": 4061,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.splitlines()\n\n    if t not in s:\n        return \"t is not a subsequence of s\"\n\n    index = 0\n    for char in s:\n        if char == t[index]:\n            index += 1\n        if index == len(t):\n            break\n    else:\n        return \"t is not a subsequence of s\"\n\n    return index\n\ndef"
    },
    {
        "number": 4061,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split()\n    max_len = 0\n    for i in range(len(s)):\n        if s[i:].startswith(t):\n            max_len = max(max_len, len(t))\n            if max_len == len(t):\n                return max_len\n    return max_len"
    },
    {
        "number": 4061,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    \n    n = len(s)\n    m = len(t)\n    dp = [0] * n\n    for i in range(n):\n        for j in range(m):\n            if s[i] == t[j]:\n                dp[i] = max(dp[i], j + 1)\n    \n    max_len = 0\n    for i in range(n):\n        if dp[i] == m:\n            max_len = i + 1\n            break\n    \n    return max_len\n\ndef"
    },
    {
        "number": 4061,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.splitlines()\n    max_len = 0\n    for i in range(len(s)):\n        if s[i:i+len(t)] == t:\n            max_len = max(max_len, len(t))\n    return max_len"
    },
    {
        "number": 4061,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    s_len, t_len = len(s), len(t)\n\n    dp = [[0] * (t_len + 1) for _ in range(s_len + 1)]\n\n    for i in range(1, s_len + 1):\n        for j in range(1, t_len + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = dp[i - 1][j]\n\n    for i in range(s_len, -1, -1):\n        if dp[i][-1] == t_len:\n            return i\n\n    return 0\n\ninput_str = input()\noutput = solution(input_str)\nprint(output) "
    },
    {
        "number": 4061,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    len_s, len_t = len(s), len(t)\n    \n    # DP table to store the longest common subsequence\n    dp = [[0] * (len_t + 1) for _ in range(len_s + 1)]\n    \n    # DP to find the longest common subsequence\n    for i in range(1, len_s + 1):\n        for j in range(1, len_t + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    # Backtracking to find the longest common subsequence\n    lcs = []\n    i, j = len_s, len_t\n    while i > 0 and j > 0:\n        if s[i - 1] == t[j - 1]:\n            lcs.append(s[i - 1])\n            i -= 1\n            j -= 1\n        elif dp[i - 1][j] > dp[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n    \n    # Reversing the lcs to get the longest common subsequence in the correct order\n    lcs = ''.join(reversed(lcs))\n    \n    # Finding the maximum possible length of the substring to remove\n    for i in range(len_s):\n        for j in range(i + 1, len_s + 1):\n            if t in s[i:j] and lcs in s[i:j]:\n                return j - i\n    \n    return 0 "
    },
    {
        "number": 4061,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    l = 0\n    r = len(s) - 1\n    res = 0\n\n    while l <= r:\n        if s[l:r+1].find(t) != -1:\n            res = max(res, r-l+1)\n            break\n        elif s[l+1:r+1].find(t) != -1:\n            res = max(res, r-l)\n            l += 1\n        elif s[l:r].find(t) != -1:\n            res = max(res, r-l+1)\n            r -= 1\n        else:\n            break\n\n    return str(res)\n\ndef"
    },
    {
        "number": 4061,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(\"\\n\")\n    if t in s:\n        return len(t)\n    else:\n        return 0"
    },
    {
        "number": 4061,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    s_len = len(s)\n    t_len = len(t)\n    dp = [[0] * (t_len + 1) for _ in range(s_len + 1)]\n\n    for i in range(1, s_len + 1):\n        for j in range(1, t_len + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = dp[i - 1][j]\n\n    return dp[s_len][t_len]\n\n\ninput_string = input()\nresult = solution(input_string)\nprint(result) "
    },
    {
        "number": 4061,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.splitlines()\n    result = \"\"\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if t in s[i:j]:\n                result = max(result, j - i)\n    return str(result)"
    },
    {
        "number": 4062,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    x_max = max(a, b)\n    y_max = max(c, d)\n    return str(x_max * y_max)"
    },
    {
        "number": 4062,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    max_value = 0\n\n    for x in range(a, b + 1):\n        for y in range(c, d + 1):\n            if x * y > max_value:\n                max_value = x * y\n\n    return str(max_value)"
    },
    {
        "number": 4062,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    max_product = -1\n\n    for x in range(a, b+1):\n        for y in range(c, d+1):\n            max_product = max(max_product, x*y)\n\n    return str(max_product)\n"
    },
    {
        "number": 4062,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    x_max = max(a, b)\n    y_max = max(c, d)\n    return str(x_max * y_max)"
    },
    {
        "number": 4062,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    max_value = 0\n\n    for x in range(a, b + 1):\n        for y in range(c, d + 1):\n            max_value = max(max_value, x * y)\n\n    return str(max_value)"
    },
    {
        "number": 4062,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    max_value = 0\n    for i in range(a, b+1):\n        for j in range(c, d+1):\n            max_value = max(max_value, i*j)\n    return str(max_value)"
    },
    {
        "number": 4062,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    max_value = 0\n\n    for x in range(a, b+1):\n        for y in range(c, d+1):\n            max_value = max(max_value, x * y)\n\n    return str(max_value)"
    },
    {
        "number": 4062,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    max_product = -1\n\n    for x in range(a, b + 1):\n        for y in range(c, d + 1):\n            max_product = max(max_product, x * y)\n\n    return str(max_product)\n\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4062,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    max_product = -1\n    \n    for i in range(a, b+1):\n        for j in range(c, d+1):\n            product = i * j\n            if product > max_product:\n                max_product = product\n                \n    return str(max_product)"
    },
    {
        "number": 4062,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    max_value = 0\n    \n    for x in range(a, b+1):\n        for y in range(c, d+1):\n            if x * y > max_value:\n                max_value = x * y\n    \n    return str(max_value)"
    },
    {
        "number": 4063,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *difficulties = stdin.split()\n    N = int(N)\n    difficulties = [int(d) for d in difficulties]\n\n    # Count the number of problems for ARCs and ABCs\n    arcs = sum(1 for d in difficulties if d >= 5)\n    abcs = N - arcs\n\n    # Find the number of choices of K that make the number of problems for ARCs and the number of problems for ABCs the same\n    count = 0\n    for k in range(1, max(arcs, abcs) + 1):\n        if arcs == abcs or arcs == abcs + 1 or abcs == arcs + 1:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4063,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, problems = stdin.split()\n    N = int(N)\n    problems = list(map(int, problems.split()))\n\n    # Calculate the number of problems for ARCs and ABCs\n    num_arc_problems = sum(1 for problem in problems if problem >= 5)\n    num_abc_problems = len(problems) - num_arc_problems\n\n    # Count the number of choices of K that make the number of problems for ARCs and ABCs the same\n    count = 0\n    for K in range(1, 10001):\n        if (sum(1 for problem in problems if problem >= K) == num_arc_problems) and (len(problems) - sum(1 for problem in problems if problem < K) == num_abc_problems):\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4063,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    difficulties = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n\n    num_arc_problems = 0\n    num_abc_problems = 0\n\n    for difficulty in difficulties:\n        if difficulty >= difficulties[0]:\n            num_arc_problems += 1\n        else:\n            num_abc_problems += 1\n\n    if num_arc_problems == num_abc_problems:\n        return str(difficulties[0])\n    else:\n        return \"There is no choice of K that makes the number of problems for ARCs and the number of problems for ABCs the same.\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, *difficulties = map(int, stdin.split())\n    problems = list(zip(range(1, N+1), difficulties))\n    N_ARCs = 0\n    N_ABCs = 0\n\n    for i in range(N):\n        for j in range(i+1, N):\n            if problems[i][1] > problems[j][1]:\n                N_ARCs += 1\n            else:\n                N_ABCs += 1\n\n    return str(N_ARCs * N_ABCs)"
    },
    {
        "number": 4063,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, difficulties = map(int, stdin.split(\"\\n\")[1].split())\n\n    # Count the number of problems for ARCs and ABCs\n    ARCs = 0\n    ABCs = 0\n    for diff in difficulties:\n        if diff >= K:\n            ARCs += 1\n        else:\n            ABCs += 1\n\n    # Count the number of choices of K that satisfy the condition\n    count = 0\n    for K in range(1, N + 1):\n        if ARCs == N // 2 and ABCs == N // 2:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4063,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, *difficulties = stdin.split()\n    N = int(N)\n    difficulties = [int(d) for d in difficulties]\n\n    # Sort the difficulties in ascending order\n    difficulties.sort()\n\n    # Initialize variables\n    count_for_arc = 0\n    count_for_abc = 0\n    choices = []\n\n    # Iterate through the difficulties\n    for difficulty in difficulties:\n        if difficulty >= N // 2:\n            count_for_arc += 1\n        else:\n            count_for_abc += 1\n\n        # Check if the counts are equal\n        if count_for_arc == count_for_abc:\n            choices.append(difficulty)\n\n    return str(len(choices))"
    },
    {
        "number": 4063,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, *d = map(int, stdin.split())\n    N = int(N)\n    \n    def count_problems(K: int) -> int:\n        return len([1 for i in range(N) if d[i] >= K])\n    \n    choices = [i for i in range(1, 100000) if count_problems(i) == count_problems(i+1)]\n    \n    return str(len(choices))"
    },
    {
        "number": 4063,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, difficulties = stdin.split(\"\\n\")\n    N = int(N)\n    difficulties = list(map(int, difficulties.split(\" \")))\n    count = 0\n\n    for i in range(N + 1):\n        num_ARCs = len([x for x in difficulties if x >= i])\n        num_ABCs = N - num_ARCs\n\n        if num_ARCs == num_ABCs:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4063,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, *difficulties = stdin.split()\n    N = int(N)\n    difficulties = [int(d) for d in difficulties]\n\n    def is_valid(K: int) -> bool:\n        count_arc = sum(1 for d in difficulties if d >= K)\n        count_abc = sum(1 for d in difficulties if d < K)\n        return count_arc == count_abc\n\n    valid_choices = [K for K in range(1, max(difficulties)) if is_valid(K)]\n    return str(len(valid_choices))"
    },
    {
        "number": 4063,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, problems = map(int, stdin.split())\n    problems = sorted(problems)\n\n    count_arc = 0\n    count_abc = 0\n\n    for problem in problems:\n        if problem >= problems[n // 2 - 1]:\n            count_arc += 1\n        else:\n            count_abc += 1\n\n    count_choices = 0\n    for i in range(problems[n // 2 - 1], problems[-1] + 1):\n        if count_arc - (problems[n // 2 - 1] - 1) == count_abc:\n            count_choices += 1\n\n    return str(count_choices)"
    },
    {
        "number": 4064,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split()[:4])\n    a = list(map(int, stdin.split()[4:]))\n    \n    good_times = 0\n    for i in range(n):\n        if l <= a[i] <= r:\n            good_times += 1\n        elif a[i] < l:\n            if (a[i] - 1) > l:\n                good_times += 1\n    return str(good_times)\n\ninput_data = input()\nresult = solution(input_data)\nprint(result) "
    },
    {
        "number": 4064,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split()[:4])\n    a = list(map(int, stdin.split()[4:]))\n\n    def is_good_time(start_time: int) -> bool:\n        return l <= start_time <= r\n\n    good_sleep_count = 0\n    current_time = 0\n\n    for i in range(n):\n        if is_good_time(current_time):\n            good_sleep_count += 1\n        if is_good_time(current_time + a[i] - 1):\n            good_sleep_count += 1\n        current_time += a[i]\n\n    return str(good_sleep_count)\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4064,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split()[:4])\n    a = list(map(int, stdin.split()[4:]))\n    good_sleep_times = 0\n    current_time = 0\n    \n    for i in range(n):\n        if l <= current_time + a[i] - 1 <= r:\n            good_sleep_times += 1\n        current_time += a[i] - 1\n    \n    return str(good_sleep_times)"
    },
    {
        "number": 4064,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r, *sleeps = map(int, stdin.split())\n    good_sleep_count = 0\n    time = 0\n    for i, sleep in enumerate(sleeps):\n        if l <= time + 1 <= r:\n            good_sleep_count += 1\n        if sleep - 1 >= l and sleep - 1 <= r:\n            time = sleep - 1\n        else:\n            time = sleep\n    return str(good_sleep_count)\n\n\ninput_string = input()\nprint(solution(input_string)) "
    },
    {
        "number": 4064,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def is_good_sleeping_time(current_time: int, sleep_time: int, l: int, r: int) -> bool:\n        return l <= current_time <= r\n\n    def optimal_sleep_times(n: int, h: int, l: int, r: int, a: List[int]) -> int:\n        good_sleep_times = 0\n        current_time = 0\n\n        for i in range(n):\n            if is_good_sleeping_time(current_time, a[i], l, r):\n                good_sleep_times += 1\n            else:\n                # Sleep after a[i] hours will be bad\n                current_time += a[i] - 1\n        return good_sleep_times\n\n    input_values = list(map(int, stdin.split()))\n    n, h, l, r = input_values[:4]\n    a = input_values[4:]\n\n    return str(optimal_sleep_times(n, h, l, r, a))"
    },
    {
        "number": 4064,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split()[:4])\n    a = list(map(int, stdin.split()[4:]))\n    \n    def is_good_sleep(time: int) -> bool:\n        return l <= time <= r\n\n    max_good_times = 0\n    total_sleep_time = 0\n    good_sleep_times = 0\n\n    for i in range(n):\n        total_sleep_time += a[i]\n        next_sleep_time = total_sleep_time\n\n        if i < n - 1:\n            next_sleep_time -= 1\n\n        if is_good_sleep(next_sleep_time):\n            good_sleep_times += 1\n            max_good_times = max(max_good_times, good_sleep_times)\n        else:\n            good_sleep_times = 0\n\n    return str(max_good_times)"
    },
    {
        "number": 4064,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split()[:4])\n    a = list(map(int, stdin.split()[4:]))\n    good_times = 0\n    \n    for i in range(n):\n        if l <= a[i] <= r:\n            good_times += 1\n        elif a[i] > r:\n            good_times += 1\n            a[i] -= 1\n            \n    return str(good_times)"
    },
    {
        "number": 4064,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split()[:4])\n    a = list(map(int, stdin.split()[4:]))\n\n    def is_good_sleep(start: int, end: int, time: int) -> bool:\n        return l <= time <= r\n\n    max_good_times = 0\n    current_time = 0\n\n    for i in range(n):\n        good_sleep_time = a[i] - 1 if current_time != 0 else a[i]\n        if is_good_sleep(0, h - 1, current_time + good_sleep_time):\n            max_good_times += 1\n        current_time += good_sleep_time\n\n    return str(max_good_times)"
    },
    {
        "number": 4064,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split()[:4])\n    a = list(map(int, stdin.split()[4:]))\n\n    def is_good_sleep_time(time):\n        return l <= time <= r\n\n    good_sleep_times = 0\n    current_time = 0\n    for i in range(n):\n        if is_good_sleep_time(current_time):\n            good_sleep_times += 1\n        current_time += a[i] - 1\n\n    return str(good_sleep_times)\n\n\ninput_data = input()\nprint(solution(input_data)) "
    },
    {
        "number": 4064,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split()[:4])\n    a = list(map(int, stdin.split()[4:]))\n    \n    good_times = 0\n    for i in range(n):\n        if l <= a[i] <= r:\n            good_times += 1\n            if i < n - 1 and a[i] < a[i + 1]:\n                good_times -= 1\n    \n    return str(good_times)"
    },
    {
        "number": 4065,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    difficulties = list(map(int, stdin.readline().split()))\n\n    def is_valid_contest(selected_problems):\n        for i in range(len(selected_problems) - 1):\n            if selected_problems[i + 1] > selected_problems[i] * 2:\n                return False\n        return True\n\n    max_valid_contest_size = 1\n    for contest_size in range(2, n + 1):\n        for start_index in range(n - contest_size + 1):\n            selected_problems = difficulties[start_index:start_index + contest_size]\n            if is_valid_contest(selected_problems):\n                max_valid_contest_size = max(max_valid_contest_size, contest_size)\n\n    return str(max_valid_contest_size)"
    },
    {
        "number": 4065,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    difficulties = list(map(int, stdin.split()[1:]))\n\n    count = 1\n    max_count = 1\n\n    for i in range(1, n):\n        if difficulties[i] <= difficulties[i - 1] * 2:\n            count += 1\n            max_count = max(max_count, count)\n        else:\n            count = 1\n\n    return str(max_count)\n\n\ninput_data = \"10 1 2 5 6 7 10 21 23 24 49\"\nprint(solution(input_data)) "
    },
    {
        "number": 4065,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, difficulties = stdin.split(\"\\n\")\n    n = int(n)\n    difficulties = list(map(int, difficulties.split()))\n    max_problems = 1\n    for i in range(1, n - 1):\n        for j in range(i + 1, n):\n            if difficulties[j] <= 2 * difficulties[i]:\n                max_problems = max(max_problems, j - i + 1)\n    return str(max_problems)\n\ninput_data = input()\nprint(solution(input_data)) "
    },
    {
        "number": 4065,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, difficulties = stdin.split('\\n')\n    difficulties = list(map(int, difficulties.split()))\n\n    def is_valid(selected_problems):\n        selected_problems.sort()\n        max_difficulty = selected_problems[-1]\n        for i in range(len(selected_problems) - 1):\n            if selected_problems[i] * 2 <= max_difficulty:\n                return False\n        return True\n\n    max_problems = 1\n    for i in range(1, len(difficulties)):\n        for j in range(i + 1, len(difficulties)):\n            if is_valid(difficulties[:i] + difficulties[j:]):\n                max_problems = max(max_problems, j - i + 1)\n\n    return str(max_problems)"
    },
    {
        "number": 4065,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    difficulties = list(map(int, stdin.split()[1:]))\n    max_count = 1\n    count = 0\n\n    for i in range(1, n):\n        if difficulties[i] <= 2 * difficulties[i - 1]:\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 0\n\n    return str(max(max_count, count))"
    },
    {
        "number": 4065,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    difficulties = list(map(int, lines[1].split()))\n\n    # Helper function to check if a contest is valid\n    def is_valid_contest(selected_problems):\n        selected_difficulties = [difficulties[i] for i in selected_problems]\n        for i in range(len(selected_problems) - 1):\n            if selected_difficulties[i + 1] > selected_difficulties[i] * 2:\n                return False\n        return True\n\n    # Find valid contests\n    valid_contests = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                valid_contest = [i, j, k]\n                if is_valid_contest(valid_contest):\n                    valid_contests.append(valid_contest)\n\n    # Find the maximum number of problems in a valid contest\n    max_problems = max(len(contest) for contest in valid_contests)\n\n    return str(max_problems)"
    },
    {
        "number": 4065,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    difficulties = [int(x) for x in stdin.split('\\n')[1].split()]\n\n    def is_valid_contest(problems: List[int]) -> bool:\n        for i in range(len(problems) - 1):\n            if difficulties[problems[i + 1]] > 2 * difficulties[problems[i]]:\n                return False\n        return True\n\n    valid_contests = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                contest = [i + 1, j + 1, k + 1]\n                if is_valid_contest(contest):\n                    valid_contests.append(contest)\n\n    return str(max(len(x) for x in valid_contests))"
    },
    {
        "number": 4065,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    difficulties = list(map(int, stdin.readline().strip().split()))\n    \n    max_contest_size = 1\n    current_contest_size = 1\n    \n    for i in range(1, n):\n        if difficulties[i] <= 2 * difficulties[i-1]:\n            current_contest_size += 1\n        else:\n            max_contest_size = max(max_contest_size, current_contest_size)\n            current_contest_size = 1\n            \n    return str(max(max_contest_size, current_contest_size))"
    },
    {
        "number": 4065,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    problems = list(map(int, stdin.split()))\n    n = problems[0]\n    difficulties = problems[1:]\n\n    contests = []\n    for i in range(n):\n        contest = [difficulties[i]]\n        if i + 1 < n and difficulties[i + 1] <= difficulties[i] * 2:\n            continue\n        if i + 2 < n and difficulties[i + 2] <= difficulties[i] * 2:\n            continue\n        if i + 3 < n and difficulties[i + 3] <= difficulties[i] * 2:\n            continue\n        contests.append(contest)\n\n    max_contest = max(contests, key=len)\n    return str(len(max_contest))\n\ninput_data = input()\nprint(solution(input_data)) "
    },
    {
        "number": 4065,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    difficulties = list(map(int, stdin.readline().split()))\n\n    def is_valid_contest(selected_problems: List[int]) -> bool:\n        selected_difficulties = [difficulties[i] for i in selected_problems]\n        sorted_difficulties = sorted(selected_difficulties)\n        for i in range(len(sorted_difficulties) - 1):\n            if sorted_difficulties[i + 1] <= sorted_difficulties[i] * 2:\n                return False\n        return True\n\n    max_valid_contest_size = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if is_valid_contest([i, j]):\n                max_valid_contest_size = 2\n                break\n        if max_valid_contest_size == 2:\n            break\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if is_valid_contest([i, j, k]):\n                    max_valid_contest_size = 3\n                    break\n            if max_valid_contest_size == 3:\n                break\n        if max_valid_contest_size == 3:\n            break\n\n    return str(max_valid_contest_size)"
    },
    {
        "number": 4066,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    min_lcm = float('inf')\n    min_indices = (0, 1)\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            lcm = compute_lcm(a[i], a[j])\n            if lcm < min_lcm:\n                min_lcm = lcm\n                min_indices = (i + 1, j + 1)\n                \n    return ' '.join(map(str, min_indices))\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a: int, b: int) -> int:\n        return a if b == 0 else gcd(b, a % b)\n\n    def lcm(a: int, b: int) -> int:\n        return a * b // gcd(a, b)\n\n    n, a = stdin.split()\n    n = int(n)\n    a = list(map(int, a.split()))\n\n    i, j, min_lcm = None, None, float('inf')\n\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            l = lcm(a[i], a[j])\n            if l < min_lcm:\n                min_lcm = l\n                min_i, min_j = i, j\n\n    return f\"{min_i + 1} {min_j + 1}\" "
    },
    {
        "number": 4066,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    lcm_min = float('inf')\n    result = None\n\n    for i in range(n):\n        for j in range(i+1, n):\n            lcm = find_lcm(a[i], a[j])\n            if lcm < lcm_min:\n                lcm_min = lcm\n                result = (i+1, j+1)\n\n    return f\"{result[0]} {result[1]}\"\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    min_lcm = float('inf')\n    min_pair = None\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            lcm = lcm_two_numbers(a[i], a[j])\n            if lcm < min_lcm:\n                min_lcm = lcm\n                min_pair = (i+1, j+1)\n    \n    return f\"{min_pair[0]} {min_pair[1]}\"\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    lcm_min = float('inf')\n    min_pair = (-1, -1)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            lcm = a[i] * a[j] // math.gcd(a[i], a[j])\n            if lcm < lcm_min:\n                lcm_min = lcm\n                min_pair = (i+1, j+1)\n\n    return \" \".join(map(str, min_pair))\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split('\\n')\n    n = int(input_lines[0])\n    a = list(map(int, input_lines[1].split()))\n\n    lcm_values = {}\n    for i in range(n):\n        for j in range(i+1, n):\n            lcm_values[(i, j)] = lcm(a[i], a[j])\n\n    min_lcm = min(lcm_values.values())\n    min_pairs = [pair for pair, lcm_value in lcm_values.items() if lcm_value == min_lcm]\n\n    min_pair = min_pairs[0]\n    return ' '.join(map(str, min_pair))\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    \n    lcm_list = [a[0]] * n\n    \n    for i in range(1, n):\n        for j in range(i+1, n+1):\n            lcm_list[i] = (a[i] * a[j]) // math.gcd(a[i], a[j])\n    \n    min_lcm = min(lcm_list)\n    min_index = lcm_list.index(min_lcm)\n    \n    return str(min_index+1) + ' ' + str(min_index+2)\n"
    },
    {
        "number": 4066,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    min_lcm = float('inf')\n    min_lcm_pair = []\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            lcm = (a[i] * a[j]) // math.gcd(a[i], a[j])\n            if lcm < min_lcm:\n                min_lcm = lcm\n                min_lcm_pair = [i+1, j+1]\n    \n    return f\"{min_lcm_pair[0]} {min_lcm_pair[1]}\" "
    },
    {
        "number": 4066,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    # Initialize lcm as a list of -1's\n    lcm = [-1] * n\n\n    # Calculate lcm for all pairs of elements\n    for i in range(n):\n        for j in range(i + 1, n):\n            lcm[i] = lcm[j] = min(lcm[i], lcm[j], lcm_calculator(a[i], a[j]))\n\n    # Find the pair of indices with minimum lcm\n    min_lcm = min(lcm)\n    min_indices = [i for i in range(n) if lcm[i] == min_lcm]\n\n    # Return the first pair of indices found\n    return \" \".join(map(str, min_indices))\n\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    min_lcm = float('inf')\n    result = (0, 0)\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            lcm = get_lcm(a[i], a[j])\n            if lcm < min_lcm:\n                min_lcm = lcm\n                result = (i + 1, j + 1)\n\n    return ' '.join(map(str, result))\n\ndef"
    },
    {
        "number": 4067,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    # Count the occurrences of each character in the input string\n    counts = {\"0\": 0, \"1\": 0, \"2\": 0}\n    for char in s:\n        counts[char] += 1\n\n    # Calculate the difference between the counts of each character\n    diff = counts[\"0\"] - counts[\"1\"]\n\n    # If the difference is positive, replace the '0' characters with '1' until the difference is 0\n    if diff > 0:\n        return s.replace(\"0\", \"1\", diff)\n\n    # If the difference is negative, replace the '1' characters with '0' until the difference is 0\n    elif diff < 0:\n        return s.replace(\"1\", \"0\", abs(diff))\n\n    # If the difference is 0, the string is already balanced, so return it\n    else:\n        return s"
    },
    {
        "number": 4067,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    count_0, count_1, count_2 = 0, 0, 0\n    \n    for char in s:\n        if char == '0':\n            count_0 += 1\n        elif char == '1':\n            count_1 += 1\n        else:\n            count_2 += 1\n    \n    diff = abs(count_0 - count_1)\n    min_count = min(diff, diff + count_2 - 2 * count_0)\n    \n    result = []\n    for char in s:\n        if char == '0' and min_count > 0:\n            result.append('1')\n            min_count -= 1\n        elif char == '1' and min_count > 0:\n            result.append('2')\n            min_count -= 1\n        else:\n            result.append(char)\n    \n    return ''.join(result)\n"
    },
    {
        "number": 4067,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n\n    # Count the number of characters '0', '1' and '2' in the given string\n    count_0 = s.count('0')\n    count_1 = s.count('1')\n    count_2 = s.count('2')\n\n    # Calculate the number of replacements needed\n    replacements = min(count_0, count_1, count_2)\n\n    # Initialize the balanced ternary string\n    balanced_string = ''\n\n    # Replace the characters in the given string with characters '0', '1' and '2' to obtain the balanced ternary string\n    i = 0\n    while i < n:\n        if s[i] == '0':\n            balanced_string += '1'\n            replacements -= 1\n            i += 3\n        elif s[i] == '1':\n            balanced_string += '2'\n            replacements -= 1\n            i += 3\n        elif s[i] == '2':\n            balanced_string += '0'\n            replacements -= 1\n            i += 3\n\n    # Add the remaining '0' and '1' characters to obtain the lexicographically smallest balanced ternary string\n    while replacements > 0:\n        if count_0 > count_1:\n            balanced_string += '0'\n            count_0 -= 1\n        else:\n            balanced_string += '1'\n            count_1 -= 1\n        replacements -= 1\n\n    return balanced_string"
    },
    {
        "number": 4067,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    if s.count('0') == s.count('1') == s.count('2'):\n        return s\n    s_list = list(s)\n    zero_count = s.count('0')\n    one_count = s.count('1')\n    two_count = s.count('2')\n    if zero_count > one_count:\n        s_list[s.index('0')] = '1'\n        s_list[s.index('1')] = '0'\n    elif zero_count < one_count:\n        s_list[s.index('1')] = '0'\n        s_list[s.index('2')] = '1'\n    else:\n        s_list[s.index('2')] = '0'\n        s_list[s.index('1')] = '2'\n        s_list[s.index('0')] = '1'\n    return ''.join(s_list)\n"
    },
    {
        "number": 4067,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n\n    # Initialize counts for each character\n    counts = {'0': 0, '1': 0, '2': 0}\n    for char in s:\n        counts[char] += 1\n\n    # Calculate the minimum number of replacements needed\n    min_replacements = min(counts['0'], counts['1'], counts['2'])\n\n    # Calculate the target counts for each character\n    target_counts = {'0': counts['0'] - min_replacements,\n                   '1': counts['1'] - min_replacements,\n                   '2': counts['2'] - min_replacements}\n\n    # Initialize the balanced string and the result\n    result = ''\n\n    # Iterate through the given string and replace characters as needed\n    for char in s:\n        if counts[char] > target_counts[char]:\n            result += char\n            counts[char] -= 1\n        else:\n            result += '2' if char == '0' else '0'\n            counts[char] -= 1\n            counts[result[-1]] += 1\n\n    return result"
    },
    {
        "number": 4067,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    count_0 = s.count('0')\n    count_1 = s.count('1')\n    count_2 = s.count('2')\n\n    if count_0 != count_1 or count_1 != count_2:\n        min_count = min(count_0, count_1, count_2)\n        max_count = max(count_0, count_1, count_2)\n        if min_count != max_count:\n            if count_0 == min_count:\n                s = s.replace('1', '0', count_1 - count_0)\n                s = s.replace('2', '0', count_2 - count_0)\n            elif count_1 == min_count:\n                s = s.replace('0', '1', count_0 - count_1)\n                s = s.replace('2', '1', count_2 - count_1)\n            else:\n                s = s.replace('0', '2', count_0 - count_2)\n                s = s.replace('1', '2', count_1 - count_2)\n        else:\n            s = s[:min_count] + s[min_count:].replace('0', '1', 1)\n\n    return s\n\ninput_data = sys.stdin.read()\nresult = solution(StringIO(input_data))\nprint(result) "
    },
    {
        "number": 4067,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n\n    # Count the number of occurrences of '0', '1', and '2' in the string\n    count_dict = {'0': 0, '1': 0, '2': 0}\n    for char in s:\n        count_dict[char] += 1\n\n    # Determine the number of replacements needed\n    num_replacements = 0\n    for key in count_dict:\n        if count_dict[key] % 3 != 0:\n            num_replacements += (count_dict[key] // 3) * 3\n            num_replacements += count_dict[key] % 3\n\n    # Calculate the balanced ternary string\n    if num_replacements % 3 == 0:\n        mid_index = n // 2\n        balanced_string = s[:mid_index] + s[mid_index] * (num_replacements // 3) + s[mid_index:]\n    else:\n        mid_index = n // 3\n        balanced_string = s[:mid_index] + s[mid_index] * (num_replacements // 3) + s[mid_index:]\n\n    return balanced_string"
    },
    {
        "number": 4067,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    \n    count = {'0': 0, '1': 0, '2': 0}\n    \n    for char in s:\n        count[char] += 1\n    \n    if count['0'] == count['1'] and count['1'] == count['2']:\n        return s\n    \n    s_list = list(s)\n    i = 0\n    while i < n and (count['0'] != count['1'] or count['1'] != count['2']):\n        if count['0'] != count['1']:\n            if s_list[i] == '0':\n                s_list[i] = '1'\n                count['0'] -= 1\n                count['1'] += 1\n            elif s_list[i] == '1':\n                s_list[i] = '2'\n                count['1'] -= 1\n                count['2'] += 1\n        else:\n            if s_list[i] == '1':\n                s_list[i] = '0'\n                count['1'] -= 1\n                count['0'] += 1\n            elif s_list[i] == '2':\n                s_list[i] = '1'\n                count['2'] -= 1\n                count['1'] += 1\n        i += 3\n        \n    return ''.join(s_list)"
    },
    {
        "number": 4067,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    count_0, count_1, count_2 = 0, 0, 0\n    \n    for char in s:\n        if char == '0':\n            count_0 += 1\n        elif char == '1':\n            count_1 += 1\n        else:\n            count_2 += 1\n    \n    if count_0 > count_1:\n        s = ['0'] * count_0 + ['1'] * count_1 + ['2'] * count_2\n    elif count_0 < count_1:\n        s = ['0'] * count_0 + ['1'] * count_1 + ['2'] * count_2\n    else:\n        s = ['0'] * count_0 + ['1'] * count_1 + ['2'] * count_2\n    \n    s = ''.join(s)\n    return s\n\ndef"
    },
    {
        "number": 4067,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n\n    count_0 = s.count('0')\n    count_1 = s.count('1')\n    count_2 = s.count('2')\n\n    min_count = min(count_0, count_1, count_2)\n\n    if count_0 != count_1 or count_1 != count_2:\n        if min_count == count_0:\n            min_count = min(count_0, count_2)\n            s = s.replace('0', '2', count_0 - min_count)\n            s = s.replace('2', '0', count_2 - min_count)\n        elif min_count == count_1:\n            min_count = min(count_1, count_2)\n            s = s.replace('1', '2', count_1 - min_count)\n            s = s.replace('2', '1', count_2 - min_count)\n        elif min_count == count_2:\n            min_count = min(count_0, count_1)\n            s = s.replace('0', '1', count_0 - min_count)\n            s = s.replace('1', '0', count_1 - min_count)\n\n    return s"
    },
    {
        "number": 4068,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, *broken_steps = stdin.split()\n    N = int(N)\n    M = int(M)\n    broken_steps = [int(step) for step in broken_steps]\n\n    dp = [0] * (N + 1)\n    dp[0] = 1\n\n    for i in range(1, N + 1):\n        if i not in broken_steps:\n            if i - 1 in dp:\n                dp[i] += dp[i - 1]\n            if i - 2 in dp:\n                dp[i] += dp[i - 2]\n            dp[i] %= 1000000007\n\n    return str(dp[-1])"
    },
    {
        "number": 4068,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M, broken_steps = stdin.split('\\n')\n    broken_steps = set(map(int, broken_steps.split()))\n    result = 0\n    \n    for i in range(N + 1):\n        if i not in broken_steps:\n            result = (result + 1) % (10**9 + 7)\n    \n    return str(result)\n\ninput_str = input()\nresult = solution(input_str)\nprint(result) "
    },
    {
        "number": 4068,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M, broken_steps = map(int, stdin.split())\n    broken_steps = set(map(int, broken_steps.split()))\n    \n    dp = [0] * (N + 1)\n    dp[0] = 1\n    \n    for i in range(1, N + 1):\n        if i in broken_steps:\n            continue\n        dp[i] += dp[i - 1]\n        if i > 1 and i - 2 not in broken_steps:\n            dp[i] += dp[i - 2]\n        dp[i] %= 1000000007\n    \n    return str(dp[N])"
    },
    {
        "number": 4068,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M, *broken_steps = stdin.split()\n    N = int(N)\n    M = int(M)\n    broken_steps = [int(step) for step in broken_steps]\n    \n    dp = [0] * (N + 1)\n    dp[0] = 1\n    \n    for i in range(1, N + 1):\n        if i in broken_steps:\n            continue\n        if i > 1:\n            dp[i] += dp[i - 2]\n        if i > 2:\n            dp[i] += dp[i - 3]\n        dp[i] %= 1000000007\n    \n    return str(dp[-1])"
    },
    {
        "number": 4068,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def find_broken_steps(broken_steps):\n        broken_steps.sort()\n        count = 0\n        for i in range(len(broken_steps)):\n            if broken_steps[i] == count:\n                count += 1\n            else:\n                break\n        return count\n\n    def count_ways_to_climb_stairs(n, m, broken_steps):\n        if m == 0:\n            return 1\n        if n == 0 or n == 1:\n            return 0\n\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1\n\n        for i in range(2, n + 1):\n            if i not in broken_steps:\n                dp[i] = dp[i - 1] + dp[i - 2]\n\n        return dp[n]\n\n    n, m = map(int, stdin.split()[0:2])\n    broken_steps = list(map(int, stdin.split()[2:]))\n\n    broken_steps_count = find_broken_steps(broken_steps)\n    steps_to_climb = count_ways_to_climb_stairs(n, m, broken_steps)\n\n    result = steps_to_climb * pow(2, broken_steps_count, 1000000007)\n\n    return result"
    },
    {
        "number": 4068,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M, *broken_steps = stdin.split()\n    N = int(N)\n    M = int(M)\n    broken_steps = set(map(int, broken_steps))\n\n    dp = [0] * (N + 1)\n    dp[0] = 1\n\n    for i in range(1, N + 1):\n        if i not in broken_steps:\n            dp[i] += dp[i - 1]\n\n        if i >= 2:\n            if i - 2 not in broken_steps:\n                dp[i] += dp[i - 2]\n\n    return str(dp[N] % (10**9 + 7))\n\ndef"
    },
    {
        "number": 4068,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, steps = map(int, stdin.split())\n    steps = set(steps)\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    \n    for i in range(1, n + 1):\n        if i not in steps:\n            dp[i] += dp[i - 1]\n        if i - 2 in steps:\n            dp[i] += dp[i - 2]\n        dp[i] %= 1000000007\n    \n    return dp[n]"
    },
    {
        "number": 4068,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, *steps = stdin.split()\n    n, m = int(n), int(m)\n    broken_steps = set(map(int, steps))\n    dp = [0] * (n + 1)\n    dp[0] = 1\n\n    for i in range(1, n + 1):\n        if i not in broken_steps:\n            dp[i] += dp[i - 1]\n        if i - 1 not in broken_steps:\n            dp[i] += dp[i - 2]\n        dp[i] %= 1000000007\n\n    return str(dp[n])"
    },
    {
        "number": 4068,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M, *steps = stdin.split()\n    N, M = int(N), int(M)\n    broken_steps = set(int(s) for s in steps)\n\n    dp = [0] * (N + 1)\n    dp[0] = 1\n\n    MOD = 1000000007\n\n    for i in range(N):\n        if i + 1 not in broken_steps and i + 2 not in broken_steps:\n            dp[i + 1] = (dp[i] + dp[i - 1]) % MOD\n        elif i + 1 in broken_steps and i + 2 not in broken_steps:\n            dp[i + 2] = (dp[i] + dp[i - 1]) % MOD\n        elif i + 1 not in broken_steps and i + 2 in broken_steps:\n            dp[i + 1] = dp[i] % MOD\n\n    return str(dp[-1])"
    },
    {
        "number": 4068,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M, broken_steps = map(int, stdin.split())\n    broken_steps = set(map(int, broken_steps.split()))\n\n    dp = [0] * (N + 1)\n    dp[0] = 1\n\n    for i in range(1, N + 1):\n        if i not in broken_steps:\n            if i - 1 not in broken_steps:\n                dp[i] += dp[i - 1]\n            if i - 2 not in broken_steps:\n                dp[i] += dp[i - 2]\n            dp[i] %= 1000000007\n\n    return str(dp[-1])\n\ndef"
    },
    {
        "number": 4069,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.split())\n\n    # Calculate the minimum absolute value of the coordinate of the destination\n    min_coordinate = x\n    for _ in range(k):\n        if x - d < 0:\n            x -= d\n        else:\n            x += d\n        min_coordinate = min(min_coordinate, x)\n\n    return str(abs(min_coordinate))"
    },
    {
        "number": 4069,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.split())\n\n    if k == 1:\n        return str(abs(x))\n\n    # Determine the minimum and maximum possible coordinates\n    min_coord = x + k * d if d > 0 else x - k * d\n    max_coord = x - k * d if d > 0 else x + k * d\n\n    return str(min(map(abs, (min_coord, max_coord))))\n"
    },
    {
        "number": 4069,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    X, K, D = map(int, stdin.split())\n    if D == 0:\n        return str(abs(X))\n    elif D > 0:\n        return str(abs(X) + (K-1) * D)\n    else:\n        return str(abs(X) + (K-1) * abs(D))"
    },
    {
        "number": 4069,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    x, k, d = map(int, stdin.split())\n\n    # calculate the minimum absolute value\n    min_abs_value = 0\n    for i in range(k):\n        x += d\n        min_abs_value = max(min_abs_value, abs(x))\n\n    # return the result\n    return str(min_abs_value)"
    },
    {
        "number": 4069,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # parse the input\n    X, K, D = map(int, stdin.split())\n\n    # calculate the minimum possible absolute value of the coordinate of the destination\n    min_abs_value = max(abs(X - D * K), abs(X + D * K))\n\n    # return the result\n    return str(min_abs_value)"
    },
    {
        "number": 4069,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    X, K, D = map(int, stdin.split())\n\n    # Initialize the minimum absolute value\n    min_abs_value = abs(X)\n\n    # Make K moves\n    for _ in range(K):\n        # Calculate the new coordinate\n        X += D\n        # Update the minimum absolute value\n        min_abs_value = min(min_abs_value, abs(X))\n\n    return str(min_abs_value)"
    },
    {
        "number": 4069,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.split())\n    min_abs_val = abs(x + (k // 2) * d)\n    return str(min_abs_val)"
    },
    {
        "number": 4069,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.split())\n    destination = x\n    for _ in range(k):\n        destination += d\n    return str(abs(destination))"
    },
    {
        "number": 4069,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    X, K, D = map(int, stdin.split())\n    \n    # Initialize the minimum absolute value to the current coordinate\n    min_abs_val = abs(X)\n    \n    # Iterate through K moves\n    for i in range(K):\n        # Update the minimum absolute value\n        min_abs_val = min(min_abs_val, abs(X + i * D))\n        min_abs_val = min(min_abs_val, abs(X - i * D))\n    \n    # Return the minimum absolute value of the destination\n    return str(min_abs_val)"
    },
    {
        "number": 4069,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X, K, D = map(int, stdin.split())\n    X_after_K_moves = X + K * D\n    return abs(X_after_K_moves)\n\ndef"
    },
    {
        "number": 4070,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 1:\n        return str(0)\n    for i in range(2, n+1):\n        if n % i == 0:\n            return str(i-1)\n    return str(0)"
    },
    {
        "number": 4070,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n > 0:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n -= 1\n        count += 1\n    return str(count)"
    },
    {
        "number": 4070,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n > 0:\n        if n % 2 == 0:\n            count += 1\n        n //= 2\n    return count"
    },
    {
        "number": 4070,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return str(n // 2)\n    else:\n        return str(n // 2 - 1)"
    },
    {
        "number": 4070,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n > 0:\n        if n % 2 == 0:\n            n = n // 2\n            count += 1\n        else:\n            n -= 1\n            count += 1\n    return str(count)"
    },
    {
        "number": 4070,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i * j == n:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4070,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 1:\n        return 0\n    else:\n        return n // 2\n"
    },
    {
        "number": 4070,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    \n    while n > 0:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n -= 1\n        count += 1\n    \n    return str(count)"
    },
    {
        "number": 4070,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n > 0:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n -= 1\n        count += 1\n    return str(count)"
    },
    {
        "number": 4070,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n > 0:\n        if n % 2 == 0:\n            n //= 2\n            count += 1\n        else:\n            n -= 1\n            count += 1\n    return str(count)"
    },
    {
        "number": 4071,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a * (a + 1) // 2)\n\ndef"
    },
    {
        "number": 4071,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    output = a*(a-1)*(a-2)//6\n    return str(output) "
    },
    {
        "number": 4071,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a * (a + 1) // 2)"
    },
    {
        "number": 4071,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    result = 0\n    for i in range(1, a+1):\n        for j in range(1, i+1):\n            result += i*j\n    return str(result) "
    },
    {
        "number": 4071,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a * (a + 1) // 2)\n\ndef"
    },
    {
        "number": 4071,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    result = (a**3) // 27\n    return str(result) "
    },
    {
        "number": 4071,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    result = 0\n    for i in range(1, a+1):\n        result += i\n    return str(result) "
    },
    {
        "number": 4071,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    result = (a * (a + 1)) // 2\n    return str(result) "
    },
    {
        "number": 4071,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a ** 3)\n\ninput_a = input(\"Enter an integer between 1 and 30: \")\noutput = solution(input_a)\nprint(output) "
    },
    {
        "number": 4071,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    result = 0\n    for i in range(1, a+1):\n        result += i\n    return str(result) "
    },
    {
        "number": 4072,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 10 == 0 or a % 10 == 1 or a % 10 == 2 or a % 10 == 3 or a % 10 == 4 or a % 10 == 5 or a % 10 == 6 or a % 10 == 8 or a % 10 == 9:\n        return \"1\"\n    else:\n        return \"0\""
    },
    {
        "number": 4072,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    if num % 2 == 0:\n        return \"1\"\n    else:\n        return \"0\""
    },
    {
        "number": 4072,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a > 99 and a < 1000:\n        return \"1\"\n    else:\n        return \"0\""
    },
    {
        "number": 4072,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 17 == 0:\n        return \"1\"\n    return \"0\""
    },
    {
        "number": 4072,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 2 == 0 or (a % 10 == 0 or a % 10 == 5):\n        return \"0\"\n    else:\n        return \"1\""
    },
    {
        "number": 4072,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if 10 <= a <= 999:\n        return str(a % 2)\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 4072,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if 10 <= a <= 999:\n        return \"1\" if a % 11 == 0 else \"0\"\n    else:\n        return \"Invalid input\" "
    },
    {
        "number": 4072,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 3 == 0 or a % 5 == 0:\n        return \"1\"\n    else:\n        return \"0\""
    },
    {
        "number": 4072,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if 10 <= a <= 999:\n        return \"1\" if a % 2 == 0 else \"0\"\n    else:\n        return \"Error: a must be between 10 and 999.\" "
    },
    {
        "number": 4072,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if 10 <= a <= 999 and a % 11 == 0:\n        return \"1\"\n    else:\n        return \"0\""
    },
    {
        "number": 4073,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n    a.sort(reverse=True)\n    return str(a[n-1])\n\nprint(solution(\"4\\n2 5 3 1\")) "
    },
    {
        "number": 4073,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n\n    max_num = max(a)\n\n    for i in range(n):\n        a[i] = max_num - a[i]\n\n    return str(sum(a))\n\ninput_data = \"4\\n2 5 3 1\"\noutput_data = solution(input_data)\nprint(output_data) "
    },
    {
        "number": 4073,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_values = stdin.split(\"\\n\")\n    n = int(input_values[0])\n    values = [int(x) for x in input_values[1].split(\" \")]\n    \n    max_value = max(values)\n    return max_value\n\ndef"
    },
    {
        "number": 4073,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1:]))\n    \n    max_val = max(arr)\n    return str(max_val)"
    },
    {
        "number": 4073,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    max_num = max(a)\n    index_max = a.index(max_num)\n    return str(index_max + 1)\n"
    },
    {
        "number": 4073,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    arr = [int(x) for x in stdin.split('\\n')[1].split()]\n\n    largest = max(arr)\n\n    return str(largest)\n\ninput_data = \"4\\n2 5 3 1\"\nprint(solution(input_data)) "
    },
    {
        "number": 4073,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    numbers = stdin.split('\\n')[1].split(' ')\n    \n    for i in range(n):\n        numbers[i] = int(numbers[i])\n    \n    max_number = max(numbers)\n    \n    return str(max_number)"
    },
    {
        "number": 4073,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.splitlines()[0])\n    a = [int(x) for x in stdin.splitlines()[1].split()]\n\n    # find the largest integer in the array\n    largest = max(a)\n\n    # count the occurrences of each number in the array\n    count = {}\n    for num in a:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n\n    # find the number that occurs most frequently\n    most_common = max(count, key=count.get)\n\n    # return the index of the largest number or the most common number if they are the same\n    if largest == most_common:\n        return str(a.index(largest))\n    else:\n        return str(a.index(most_common))"
    },
    {
        "number": 4073,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    nums = list(map(int, stdin.split(\"\\n\")[1].split(\" \")))\n\n    max_num = max(nums)\n    max_index = nums.index(max_num)\n\n    if max_index < 2:\n        return str(max_num)\n    else:\n        return str(nums[max_index - 2])"
    },
    {
        "number": 4073,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a_list = list(map(int, stdin.split('\\n')[1].split()))\n    return str(max(a_list)) "
    },
    {
        "number": 4074,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def min_packages(n: int, k: int) -> int:\n        if n <= k:\n            return n\n        return min_packages(n - k * (n // k), max(0, k - 1)) + n // k\n\n    t = int(stdin.strip().split(\"\\n\")[0])\n    result = []\n    for _ in range(t):\n        n, k = map(int, stdin.strip().split(\"\\n\")[1].split())\n        result.append(min_packages(n, k))\n\n    return \"\\n\".join(map(str, result))\n\n\ndef"
    },
    {
        "number": 4074,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.split(\"\\n\")\n    result = []\n    \n    for i in range(1, len(test_cases), 2):\n        n, k = map(int, test_cases[i].split())\n        \n        min_packages = 0\n        total_shovels = 0\n        \n        for j in range(1, k + 1):\n            package_shovels = j\n            package_count = (n - total_shovels) // package_shovels\n            \n            if package_count > 0:\n                min_packages += package_count\n                total_shovels += package_count * package_shovels\n                \n        result.append(str(min_packages))\n    \n    return \"\\n\".join(result)"
    },
    {
        "number": 4074,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.split('\\n')\n    t = int(test_cases.pop(0))\n    results = []\n\n    for i in range(t):\n        n, k = list(map(int, test_cases[i].split()))\n        results.append(n // k + (n % k != 0))\n\n    return '\\n'.join(map(str, results))"
    },
    {
        "number": 4074,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    cases = stdin.split(\"\\n\")\n    for i in range(1, len(cases), 2):\n        n, k = map(int, cases[i].split())\n        if n == 1:\n            result.append(1)\n        elif n == k:\n            result.append(1)\n        else:\n            result.append(n // k + 1)\n    return \"\\n\".join(map(str, result))"
    },
    {
        "number": 4074,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    cases = int(stdin.split(\"\\n\")[0])\n    for i in range(1, cases+1):\n        n, k = map(int, stdin.split(\"\\n\")[i].split())\n        packages = n // k\n        if n % k == 0:\n            result.append(str(packages))\n        else:\n            result.append(str(packages+1))\n    return \"\\n\".join(result)"
    },
    {
        "number": 4074,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    result = []\n\n    for _ in range(t):\n        n, k = map(int, stdin.readline().split())\n        if n % k == 0:\n            result.append(n // k)\n        else:\n            result.append(n // k + 1)\n\n    return \"\\n\".join(map(str, result))\n"
    },
    {
        "number": 4074,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.split(\"\\n\")\n    results = []\n    for test_case in test_cases:\n        n, k = map(int, test_case.split())\n        if n == 1:\n            results.append(1)\n        elif n == k:\n            results.append(1)\n        else:\n            # Calculate the minimum number of packages needed\n            num_packages = 1\n            shovels_needed = n\n            while shovels_needed > k * num_packages:\n                num_packages += 1\n                shovels_needed -= k * (num_packages - 1)\n            results.append(num_packages)\n    return \"\\n\".join(map(str, results))"
    },
    {
        "number": 4074,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def find_min_packages(n: int, k: int) -> int:\n        if n == 0:\n            return 0\n        if n > k:\n            return find_min_packages(n - k, k) + 1\n        if n == k:\n            return 1\n        return find_min_packages(n - 1, k - 1) + 1\n\n    test_cases = int(stdin.strip())\n    result = []\n\n    for _ in range(test_cases):\n        n, k = map(int, input().split())\n        result.append(find_min_packages(n, k))\n\n    return \"\\n\".join(map(str, result))"
    },
    {
        "number": 4074,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split(\"\\n\")\n    t = int(stdin_list[0])\n    results = []\n\n    for i in range(1, t+1):\n        n, k = map(int, stdin_list[i].split(\" \"))\n        result = (n // k) + ((n % k) != 0)\n        results.append(str(result))\n\n    return \"\\n\".join(results)\n\n\ndef"
    },
    {
        "number": 4074,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def min_packages(n: int, k: int) -> int:\n        if n == 0:\n            return 0\n        elif n == k:\n            return 1\n        elif k == 1:\n            return n\n        else:\n            return min(n // k + min_packages(n % k, k), min_packages(n, k-1) + 1)\n\n    output = []\n    test_cases = stdin.split()\n    t = int(test_cases.pop(0))\n\n    for _ in range(t):\n        n, k = map(int, test_cases.pop(0).split())\n        output.append(str(min_packages(n, k)))\n\n    return \"\\n\".join(output)"
    },
    {
        "number": 4075,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N, M = map(int, lines[0].split())\n    bulbs = []\n    \n    for i in range(1, M + 1):\n        line = lines[i].split()\n        k_i = int(line[0])\n        p_i = int(line[-1])\n        switches = set(map(int, line[1:-1]))\n        bulbs.append((k_i, switches, p_i))\n    \n    def lighted(k_i, switches, p_i):\n        count = 0\n        for switch in switches:\n            if switches[switch] == \"on\":\n                count += 1\n        return count % 2 == p_i\n    \n    def count_combinations(bulb_index, switch_states):\n        if bulb_index == M:\n            return 1\n        k_i, switches, p_i = bulbs[bulb_index]\n        count = 0\n        for switch in switches:\n            if switch_states[switch] == \"on\":\n                count += 1\n        if lighted(k_i, switches, p_i):\n            switch_states[list(switches)[0]] = \"off\"\n            switch_states[list(switches)[1]] = \"off\"\n            count_combinations(bulb_index + 1, switch_states)\n            switch_states[list(switches)[0]] = \"on\"\n            switch_states[list(switches)[1]] = \"on\"\n            count_combinations(bulb_index + 1, switch_states)\n        else:\n            count_combinations(bulb_index + 1, switch_states)\n        return count\n    \n    return str(count_combinations(0, {i: \"off\" for i in range(1, N + 1)}))"
    },
    {
        "number": 4075,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, m = map(int, lines[0].split())\n    bulbs = []\n    \n    for i in range(1, m + 1):\n        bulb = [int(x) for x in lines[i].split()[1:]]\n        bulbs.append((i, bulb))\n    \n    ps = [int(x) for x in lines[-1].split()]\n    \n    def count_on_states(switches):\n        count = 0\n        for switch in switches:\n            if switches[switch - 1]:\n                count += 1\n        return count\n    \n    def lighted_bulbs(bulb_index, bulb_switches):\n        lighted = 0\n        for switch in bulb_switches:\n            if switches[switch - 1]:\n                lighted += 1\n        return lighted % 2 == ps[bulb_index - 1]\n    \n    switches = [False] * n\n    result = 0\n    \n    for i in range(2**n):\n        binary = format(i, f'0{n}b')\n        for j in range(n):\n            switches[j] = binary[j] == '1'\n        \n        bulbs_lighted = 0\n        for bulb_index, bulb_switches in bulbs:\n            if lighted_bulbs(bulb_index, bulb_switches):\n                bulbs_lighted += 1\n        \n        if bulbs_lighted == m:\n            result += 1\n    \n    return str(result)"
    },
    {
        "number": 4075,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split(\"\\n\")[0].split())\n    switch_to_bulb = []\n    p_i = []\n\n    for i in range(1, M + 1):\n        switches = list(map(int, stdin.split(\"\\n\")[i].split()))\n        switch_to_bulb.append((switches[0], tuple(switches[1:])))\n        p_i.append(int(stdin.split(\"\\n\")[-1].split()[i - 1]))\n\n    def count_lighted_bulbs(switch_state: tuple) -> int:\n        count = 0\n        for switches in switch_to_bulb:\n            on_count = sum(switch_state[switch - 1] for switch in switches[1])\n            if on_count % 2 == p_i[switches[0] - 1]:\n                count += 1\n        return count\n\n    on_count = 0\n    off_count = 2 ** N - 1\n    total_count = 0\n\n    while on_count <= off_count:\n        total_count += count_lighted_bulbs(tuple(on_count >> i & 1 for i in range(N)))\n        on_count += 1\n\n    return str(total_count)"
    },
    {
        "number": 4075,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def count_lights(bulb: int, switches: List[int], p: List[int], bulb_switches: List[List[int]], lighted_count: Dict[Tuple[int, ...], int]) -> int:\n        if bulb >= len(p):\n            return 0\n        \n        if (tuple(switches), bulb) in lighted_count:\n            return lighted_count[tuple(switches), bulb]\n        \n        count = 0\n        for i in range(len(switches)):\n            if switches[i] == 1:\n                new_switches = switches.copy()\n                new_switches[i] = 0\n                count += count_lights(bulb + 1, new_switches, p, bulb_switches, lighted_count)\n        \n        lighted_count[tuple(switches), bulb] = count\n        return count\n\n    def main(stdin: str) -> str:\n        N, M = map(int, stdin.split()[:2])\n        bulb_switches = [list(map(int, input().split())) for _ in range(M)]\n        p = list(map(int, input().split()))\n        lighted_count = {}\n        \n        switches = [1] * N\n        count = count_lights(0, switches, p, bulb_switches, lighted_count)\n        return str(count)\n\n    return main(stdin)"
    },
    {
        "number": 4075,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split(\"\\n\")[0].split())\n    bulbs = {}\n    for i in range(1, M+1):\n        switches = list(map(int, stdin.split(\"\\n\")[i].split()))\n        p_i = int(stdin.split(\"\\n\")[-1].split()[i-1])\n        bulbs[i] = (switches[1:], p_i)\n\n    def count_combinations(switches: list, p: int) -> int:\n        on_count = sum(switches) % 2\n        return 1 if on_count == p else 0\n\n    combinations = 1\n    for bulb in bulbs.values():\n        combinations *= count_combinations(bulb[0], bulb[1])\n\n    return str(combinations)\n\ninput_data = \"2 2\\n2 1 2\\n1 2\\n0 1\"\nprint(solution(input_data)) "
    },
    {
        "number": 4075,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.strip().split(\"\\n\")\n    N, M = map(int, lines[0].split())\n    switches = []\n    for i in range(1, N+1):\n        switches.append(list(map(int, lines[i].split())))\n    p = list(map(int, lines[-1].split()))\n    \n    # Count the number of combinations of \"on\" and \"off\" states of the switches\n    def count_combinations(switches, p, bulb):\n        count = 0\n        for switch in switches:\n            # Count the number of \"on\" switches among the switches that light the bulb\n            on_count = sum(1 for s in switch if s in bulb)\n            # Check if the number of \"on\" switches is congruent to p_i modulo 2\n            if on_count % 2 == p[switch[0]-1]:\n                count += 1\n        return count\n    \n    # Iterate through all bulbs and count the number of combinations for each bulb\n    combinations = 1\n    for i in range(1, M+1):\n        bulb = set(switches[j][1:] for j in range(len(switches)) if switches[j][0] == i)\n        combinations *= count_combinations(switches, p, bulb)\n    \n    return str(combinations)"
    },
    {
        "number": 4075,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    bulb_switches = []\n    for i in range(m):\n        k_i, *switches = map(int, stdin.readline().split())\n        bulb_switches.append((k_i, switches))\n    p = list(map(int, stdin.readline().split()))\n\n    def count_lighted_combinations(bulb_switches: list, p: list) -> int:\n        count = 0\n        for i in range(len(bulb_switches)):\n            k_i, switches = bulb_switches[i]\n            count += count_lighted_combinations_recursive(switches, p[i], k_i)\n        return count\n\n    def count_lighted_combinations_recursive(switches: list, p_i: int, k_i: int) -> int:\n        if len(switches) == 0:\n            return int(p_i == 0)\n        return count_lighted_combinations_recursive(switches[1:], p_i, k_i) + count_lighted_combinations_recursive(switches[1:], p_i ^ 1, k_i - 1)\n\n    return str(count_lighted_combinations(bulb_switches, p))"
    },
    {
        "number": 4075,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def is_lighted(switches, p):\n        return sum(switches) % 2 == p\n\n    def count_combinations(N, M, switches, p):\n        if M == 0:\n            return 1\n        count = 0\n        for i in range(N):\n            switches_copy = switches.copy()\n            switches_copy[i] = not switches_copy[i]\n            bulb_lighted = is_lighted(switches_copy, p[M - 1])\n            count += count_combinations(N, M - 1, switches_copy, p) * bulb_lighted\n        return count\n\n    input_lines = stdin.split('\\n')\n    N, M = map(int, input_lines[0].split())\n    switches = [False] * N\n    p = []\n\n    for i in range(1, M + 1):\n        switch_indices = list(map(int, input_lines[i].split()))[1:]\n        k = switch_indices.pop(0)\n        p.append(switch_indices.index(i))\n\n        for switch_index in switch_indices:\n            switches[switch_index - 1] = True\n\n    return str(count_combinations(N, M, switches, p))"
    },
    {
        "number": 4075,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N, M = map(int, lines[0].split())\n    k_i = []\n    s_ij = []\n    p_i = []\n    for i in range(1, N + 1):\n        line = lines[i].split()\n        k_i.append(int(line[0]))\n        s_ij.append([int(switch) for switch in line[1:]])\n    p_i = [int(p) for p in lines[-1].split()]\n\n    def count_lights(i: int) -> int:\n        count = 0\n        for switch in s_ij[i]:\n            if switch in lighted_switches:\n                count += 1\n        return count % 2 == p_i[i]\n\n    def dfs(state: List[bool], pos: int) -> int:\n        if pos == N:\n            for i in range(M):\n                if not count_lights(i):\n                    return 0\n            return 1\n        if state[pos]:\n            return dfs(state, pos + 1)\n        result = 0\n        state[pos] = True\n        result += dfs(state, pos + 1)\n        state[pos] = False\n        result += dfs(state, pos + 1)\n        return result\n\n    lighted_switches = set()\n    for i in range(N):\n        for switch in s_ij[i]:\n            lighted_switches.add(switch)\n\n    result = dfs([False] * N, 0)\n    return str(result)\n\ndef"
    },
    {
        "number": 4075,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid_input(input_str: str) -> bool:\n        try:\n            N, M = map(int, input_str.split())\n            if 1 <= N <= 10 and 1 <= M <= 10:\n                return True\n            return False\n        except Exception:\n            return False\n\n    if not is_valid_input(stdin):\n        return \"Invalid input\"\n\n    N, M = map(int, stdin.split())\n    bulbs_switches = {}\n    bulbs_p = []\n\n    for i in range(M):\n        line = input()\n        bulb_info = list(map(int, line.split()))\n        k = bulb_info[0]\n        switches = bulb_info[1:]\n\n        if len(switches) != k:\n            return \"Invalid input\"\n\n        for switch in switches:\n            if not (1 <= switch <= N):\n                return \"Invalid input\"\n\n        bulbs_switches[i + 1] = switches\n\n    for i in range(M):\n        p = int(input())\n        if p not in [0, 1]:\n            return \"Invalid input\"\n        bulbs_p.append(p)\n\n    count = 0\n    for i in range(2 ** N):\n        bin_str = bin(i)[2:].zfill(N)\n        bulb_states = [0] * M\n\n        for j in range(N):\n            if bin_str[j] == '1':\n                for bulb in bulbs_switches:\n                    if j in bulbs_switches[bulb]:\n                        bulb_states[bulb - 1] = 1\n\n        lighted_bulbs = sum([1 for bulb_state, p in zip(bulb_states, bulbs_p) if bulb_state == p])\n\n        if lighted_bulbs == M:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4076,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    R_h = A / 2\n    R_m = B / 2\n    theta_h = (H + M / 60) * 2 * math.pi\n    theta_m = M * 2 * math.pi / 60\n    distance = abs(R_h * math.cos(theta_h) - R_m * math.cos(theta_m))\n    return f\"{distance:.10f}\""
    },
    {
        "number": 4076,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    \n    theta_hour = 2 * math.pi / 12\n    theta_min = 2 * math.pi / 60\n    \n    theta_hour_H = theta_hour * H\n    theta_min_M = theta_min * M\n    \n    d_AB = abs(A * math.sin(theta_hour_H) - B * math.sin(theta_min_M))\n    \n    return f\"{d_AB:.9f}\""
    },
    {
        "number": 4076,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.strip().split())\n    \n    # Calculate the total rotation angle for both hands\n    total_rotation_hour = 12 * 30 + H * 6  # 12 hours * 30 degrees + H hours * 6 degrees\n    total_rotation_minute = 60 * 30 + M * 6  # 60 minutes * 30 degrees + M minutes * 6 degrees\n    \n    # Calculate the distance between the hands\n    distance = abs(A - B) * math.sin(math.radians(total_rotation_minute - total_rotation_hour))\n    \n    return f\"{distance:.9f}\""
    },
    {
        "number": 4076,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n\n    # Calculate the angle the hour hand makes with the 12 o'clock position\n    hour_angle = H * (30 / 12) + (M / 2)\n\n    # Calculate the angle the minute hand makes with the 12 o'clock position\n    minute_angle = M * (6 / 12)\n\n    # Calculate the distance between the hands\n    distance = abs(A - B) * math.sin((hour_angle - minute_angle) * math.pi / 180)\n\n    return f\"{distance:.9f}\""
    },
    {
        "number": 4076,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    theta_hour = 2 * math.pi * H / 12\n    theta_minute = 2 * math.pi * M / 60\n    distance = A * math.cos(theta_hour) + B * math.cos(theta_minute)\n    return f\"{distance:.9f}\"\n\ndef"
    },
    {
        "number": 4076,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    \n    # Calculate the angle between the hour and minute hands\n    angle_hour = H * 30 + M / 2\n    angle_minute = M * 6\n    \n    # Calculate the distance between the unfixed endpoints of the hands\n    distance = abs(A * math.cos(math.radians(angle_hour)) + B * math.cos(math.radians(angle_minute)))\n    \n    return \"{:.9f}\".format(distance)"
    },
    {
        "number": 4076,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    H_angle = 30 * H + M / 2\n    M_angle = 6 * M\n    distance = A * math.sin(math.radians(H_angle)) + B * math.sin(math.radians(M_angle))\n    return f\"{distance:.9f}\""
    },
    {
        "number": 4076,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    angle_hour = H * 30 + M * 0.5\n    angle_minute = M * 6\n    angle_diff = abs(angle_hour - angle_minute)\n    distance = (A + B) * (1 - cos(angle_diff * pi / 180))\n    return f\"{distance:.9f}\""
    },
    {
        "number": 4076,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.strip().split())\n    \n    # Calculate the angle made by the minute hand\n    minute_angle = M * 6\n    \n    # Calculate the angle made by the hour hand\n    hour_angle = H * 30\n    \n    # Calculate the difference in angles\n    angle_diff = abs(minute_angle - hour_angle)\n    \n    # Calculate the distance between the unfixed endpoints of the hands\n    distance = abs(A * math.sin(math.radians(angle_diff)) + B * math.sin(math.radians(90 - angle_diff)))\n    \n    # Return the distance rounded off to 9 decimal places\n    return round(distance, 9)"
    },
    {
        "number": 4076,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    total_angle = (H * 30 + M) * 6  # Total angle in degrees\n    hour_angle = 360 / 12  # Angle between each hour\n    minute_angle = 360 / (12 * 60)  # Angle between each minute\n    hour_length = A\n    minute_length = B\n    hour_distance = hour_length * math.sin(math.radians(total_angle))\n    minute_distance = minute_length * math.sin(math.radians(total_angle))\n    return abs(hour_distance + minute_distance)"
    },
    {
        "number": 4077,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, input().split()))\n    \n    count = 0\n    for l in range(n):\n        for r in range(l, n):\n            subarray = a[l:r+1]\n            subarray.sort()\n            median = subarray[len(subarray) // 2] if len(subarray) % 2 == 1 else (subarray[len(subarray) // 2] + subarray[len(subarray) // 2 - 1]) / 2\n            \n            if median == m:\n                count += 1\n                \n    return str(count)"
    },
    {
        "number": 4077,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    def binary_search(arr: list, x: int) -> int:\n        left, right = 0, len(arr) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if arr[mid] == x:\n                return mid\n            elif arr[mid] < x:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return left\n\n    count = 0\n    for l in range(n):\n        for r in range(l, n):\n            sorted_a = sorted(a[l:r + 1])\n            median_index = binary_search(sorted_a, m)\n            if sorted_a[median_index] == m:\n                count += 2 * (r - l + 1) - (r - median_index)\n            else:\n                count += r - l + 1 - median_index\n\n    return str(count)\n"
    },
    {
        "number": 4077,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    def binary_search(arr, x):\n        left, right = 0, len(arr) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if arr[mid] == x:\n                return mid\n            elif arr[mid] < x:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return left\n\n    def median(arr, l, r):\n        if r - l + 1 % 2 == 0:\n            return (arr[l] + arr[l + (r - l + 1) // 2 - 1]) / 2\n        else:\n            return arr[l + (r - l + 1) // 2]\n\n    count = 0\n    for l in range(n):\n        for r in range(l + 1, n + 1):\n            if median(a, l, r - 1) <= m <= median(a, l, r):\n                count += 1\n\n    return str(count)"
    },
    {
        "number": 4077,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    count = 0\n\n    for l in range(1, n + 1):\n        for r in range(l, n + 1):\n            subarray = sorted(a[l - 1:r])\n            length = len(subarray)\n            median = subarray[length // 2] if length % 2 == 1 else (subarray[length // 2 - 1] + subarray[length // 2]) / 2\n\n            if median == m:\n                count += 1\n\n    return str(count)"
    },
    {
        "number": 4077,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    count = 0\n    for l in range(n):\n        for r in range(l, n):\n            median = sorted(a[l:r+1])[(l+r) // 2]\n            if median == m:\n                count += 1\n\n    return str(count)"
    },
    {
        "number": 4077,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    count = 0\n    \n    for l in range(n):\n        for r in range(l, n):\n            median = get_median(a, l, r)\n            if median == m:\n                count += 1\n                \n    return str(count)\n\ndef"
    },
    {
        "number": 4077,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    count = 0\n\n    for l in range(1, n):\n        for r in range(l, n):\n            sub_a = sorted(a[l-1:r+1])\n            median = sub_a[len(sub_a)//2] if len(sub_a) % 2 == 1 else (sub_a[len(sub_a)//2-1] + sub_a[len(sub_a)//2]) / 2\n            if median == m:\n                count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4077,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    count = 0\n\n    for l in range(1, n + 1):\n        for r in range(l, n + 1):\n            if sorted(a[l - 1:r])[len(a[l - 1:r]) // 2] == m:\n                count += 1\n\n    return str(count)\n\ninput_str = input()\noutput = solution(input_str)\nprint(output) "
    },
    {
        "number": 4077,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    count = 0\n\n    for l in range(1, n):\n        for r in range(l, n):\n            median = sorted(a[l:r+1])[len(a[l:r+1])//2]\n            if median == m:\n                count += 1\n\n    return str(count)"
    },
    {
        "number": 4077,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def median(a, b, c):\n        return a + b + c - min(a, b, c) - max(a, b, c)\n\n    def count_median(a, m, l, r):\n        return sum(median(a[i], a[i+1], a[i+2]) == m for i in range(l, r - 2))\n\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    return str(sum(count_median(a, m, l, r) for l in range(n) for r in range(l + 2, n+1)))\n\ndef"
    },
    {
        "number": 4078,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    segments = []\n    for _ in range(m):\n        l, r = map(int, stdin.split()[2:])\n        segments.append((l, r))\n\n    def get_value(segment, array):\n        result = 0\n        for i in range(segment[0] - 1, segment[1]):\n            result += array[i]\n        return result\n\n    def get_max_min(array):\n        return max(array) - min(array)\n\n    def apply_segments(array, segments_to_apply):\n        for segment in segments_to_apply:\n            for i in range(segment[0] - 1, segment[1]):\n                array[i] -= 1\n        return array\n\n    max_value = 0\n    segments_to_apply = []\n    for i in range(1, m + 1):\n        for segments_combination in itertools.combinations(segments, i):\n            array_after_applying = apply_segments(a.copy(), segments_combination)\n            value = get_max_min(array_after_applying)\n            if value > max_value:\n                max_value = value\n                segments_to_apply = segments_combination\n\n    return str(max_value) + \"\\n\" + str(len(segments_to_apply)) + \"\\n\" + \" \".join(str(s) for s in sorted(set(s[0] for s in segments_to_apply)))\n\ninput_stdin = \"\"\"5 4\n2 -2 3 1 2\n1 3\n4 5\n2 5\n1 3\"\"\"\nprint(solution(input_stdin))\n\ninput_stdin = \"\"\"5 4\n2 -2 3 1 4\n3 5\n3 4\n2 4\n2 5\"\"\"\nprint(solution(input_stdin))\n\ninput_stdin = \"\"\"1 0\n1000000\"\"\"\nprint(solution(input_stdin)) "
    },
    {
        "number": 4078,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    segments = []\n    for _ in range(m):\n        l, r = map(int, stdin.readline().split())\n        segments.append((l, r))\n\n    def reduce_array(array: List[int], segment: Tuple[int, int]) -> List[int]:\n        l, r = segment\n        return array[:l-1] + [x-1 for x in array[l-1:r]] + array[r:]\n\n    def max_min_diff(array: List[int]) -> int:\n        return max(array) - min(array)\n\n    def max_diff(segments: List[Tuple[int, int]]) -> int:\n        result = 0\n        for segment in segments:\n            reduced = reduce_array(a, segment)\n            diff = max_min_diff(reduced)\n            result = max(result, diff)\n        return result\n\n    max_diff_all = max_diff(segments)\n\n    for i, segment in enumerate(segments):\n        reduced = reduce_array(a, segment)\n        max_diff_without = max_diff(segments[:i] + segments[i+1:])\n        if max_diff_without >= max_diff_all:\n            continue\n        result = max_diff_all - max_diff_without\n        print(result)\n        print(1)\n        print(i+1)\n        return\n\n    print(0)\n    print(0)\n    return"
    },
    {
        "number": 4078,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, next(stdin).split())\n    a = list(map(int, next(stdin).split()))\n    segments = [tuple(map(int, next(stdin).split())) for _ in range(m)]\n\n    def decrement_segments(chosen_segments: List[int]) -> List[int]:\n        result = [0] * n\n        for segment in chosen_segments:\n            for i in range(l_j - 1, r_j):\n                result[i] -= 1\n        return result\n\n    max_result = 0\n    chosen_segments = []\n\n    for segment in segments:\n        l_j, r_j = segment\n        temp_result = max(a) - min(decrement_segments([segment]) + a)\n        if temp_result > max_result:\n            max_result = temp_result\n            chosen_segments = [segment]\n        elif temp_result == max_result:\n            chosen_segments.append(segment)\n\n    return f\"{max_result}\\n{len(chosen_segments)}\\n{' '.join(map(str, chosen_segments))}\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:2+n]))\n    segments = [tuple(map(int, stdin.split()[2+n+i*2:2+n+i*2+2])) for i in range(m)]\n\n    def decrease_segments(a, segments):\n        result = a[:]\n        for l, r in segments:\n            for i in range(l-1, r):\n                result[i] -= 1\n        return result\n\n    def max_min_diff(b):\n        return max(b) - min(b)\n\n    max_diff = 0\n    for i in range(1, 2**m):\n        binary_representation = format(i, f'0{m}b')\n        chosen_segments = [j for j in range(m) if binary_representation[j] == '1']\n        if not chosen_segments:\n            continue\n        decreased_array = decrease_segments(a, [segments[j] for j in chosen_segments])\n        diff = max_min_diff(decreased_array)\n        max_diff = max(max_diff, diff)\n\n    return str(max_diff) + '\\n' + '0\\n0'\n\ninput_data = '''5 4\n2 -2 3 1 2\n1 3\n4 5\n2 5\n1 3'''\noutput = solution(input_data)\nprint(output) "
    },
    {
        "number": 4078,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    segments = []\n\n    for _ in range(m):\n        l, r = map(int, stdin.split()[2:])\n        segments.append((l, r))\n\n    max_difference = -1\n    max_q = 0\n    max_c = []\n\n    for i in range(2**m):\n        c = [j for j in range(m) if (i & (1 << j)) > 0]\n        b = [0] * n\n\n        for j in range(m):\n            if j in c:\n                for k in range(segments[j][0] - 1, segments[j][1]):\n                    b[k] -= 1\n\n        current_difference = max(b) - min(b)\n\n        if current_difference > max_difference:\n            max_difference = current_difference\n            max_q = len(c)\n            max_c = c\n\n    return str(max_difference) + \"\\n\" + str(max_q) + \"\\n\" + \" \".join(map(str, max_c))"
    },
    {
        "number": 4078,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    segments = [tuple(map(int, stdin.readline().split())) for _ in range(m)]\n\n    max_diff = float('-inf')\n    chosen_segments = set()\n\n    def update_max_diff(segment: tuple) -> None:\n        nonlocal max_diff, chosen_segments\n        l, r = segment\n        a[l:r] = [x - 1 for x in a[l:r]]\n        max_a = max(a)\n        min_a = min(a)\n        diff = max_a - min_a\n        if diff > max_diff:\n            max_diff = diff\n            chosen_segments = {segment}\n        elif diff == max_diff:\n            chosen_segments.add(segment)\n\n    for segment in segments:\n        update_max_diff(segment)\n\n    q = len(chosen_segments)\n    result = [str(max_diff), str(q)]\n    result.extend(map(str, sorted(chosen_segments)))\n\n    return '\\n'.join(result)\n\ndef"
    },
    {
        "number": 4078,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    segments = [tuple(map(int, stdin.readline().split())) for _ in range(m)]\n\n    def count_difference(segments: List[Tuple[int, int]]) -> int:\n        a_min, a_max = float('inf'), float('-inf')\n        for l, r in segments:\n            a_min = min(a_min, min(a[l - 1:r]))\n            a_max = max(a_max, max(a[l - 1:r]))\n        return a_max - a_min\n\n    max_difference = float('-inf')\n    max_segments = []\n\n    for i in range(1, 2 ** m):\n        chosen_segments = [j + 1 for j in range(m) if (i >> j) & 1]\n        segments_diff = count_difference(\n            [segments[j - 1] for j in chosen_segments])\n        if segments_diff > max_difference:\n            max_difference = segments_diff\n            max_segments = chosen_segments\n\n    return str(max_difference) + '\\n' + str(len(max_segments)) + '\\n' + ' '.join(map(str, max_segments))\n\ninput_data = \"\"\"5 4\n2 -2 3 1 2\n1 3\n4 5\n2 5\n1 3\"\"\"\nstdin = io.StringIO(input_data)\nprint(solution(stdin)) "
    },
    {
        "number": 4078,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:2 + n]))\n    segments = []\n    for i in range(m):\n        l, r = map(int, stdin.split()[2 + n + i * 2:2 + n + i * 2 + 2])\n        segments.append((l, r))\n\n    def max_min_diff(b: list) -> int:\n        return max(b) - min(b)\n\n    best_diff = 0\n    best_indices = []\n\n    for i in range(1, 1 << m):\n        chosen_indices = [j for j in range(m) if (i & (1 << j)) > 0]\n        if len(chosen_indices) == 0:\n            continue\n\n        b = a.copy()\n        for j in chosen_indices:\n            l, r = segments[j]\n            for k in range(l, r + 1):\n                b[k - 1] -= 1\n\n        diff = max_min_diff(b)\n        if diff > best_diff:\n            best_diff = diff\n            best_indices = chosen_indices\n\n    return str(best_diff) + \"\\n\" + str(len(best_indices)) + \"\\n\" + \" \".join(map(str, sorted(best_indices)))\n\n\ninputs = [\n    \"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\",\n    \"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\",\n    \"1 0\\n1000000\\n1 1\\n1 1\"\n]\n\nfor input_str in inputs:\n    print(solution(input_str)) "
    },
    {
        "number": 4078,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, m = list(map(int, stdin.splitlines()[0].split()))\n    a = list(map(int, stdin.splitlines()[1].split()))\n    segments = []\n    for i in range(2, 2 + m):\n        l, r = list(map(int, stdin.splitlines()[i].split()))\n        segments.append((l, r))\n\n    # Initialize dp values\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            dp[i][j] = max(dp[i][j - 1], dp[i - 1][j]) + (a[j - 1] - a[i - 1])\n\n    # Initialize q_max, c_max, c_idx\n    q_max = 0\n    c_max = []\n    c_idx = []\n\n    # Iterate through segments and update q_max, c_max, c_idx\n    for i, (l, r) in enumerate(segments, 1):\n        for j in range(l, r + 1):\n            dp[l][r] = max(dp[l][r], dp[l][j - 1] + dp[j][r])\n        if dp[l][r] > q_max:\n            q_max = dp[l][r]\n            c_max = [i]\n            c_idx = [l, r]\n        elif dp[l][r] == q_max:\n            c_max.append(i)\n            c_idx.append(l)\n            c_idx.append(r)\n\n    # Print results\n    print(q_max)\n    print(len(c_max))\n    print(' '.join(map(str, sorted(c_max))))\n\n    return \"\""
    },
    {
        "number": 4078,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:2 + n]))\n    segments = []\n    for i in range(m):\n        l, r = map(int, stdin.split()[2 + n + i * 2:2 + n + i * 2 + 2])\n        segments.append((l, r))\n\n    def max_min_diff(b: List[int]) -> int:\n        return max(b) - min(b)\n\n    def apply_segments(a: List[int], segments_to_apply: List[int]) -> List[int]:\n        b = a.copy()\n        for segment_index in segments_to_apply:\n            l, r = segments[segment_index - 1]\n            for i in range(l - 1, r):\n                b[i] -= 1\n        return b\n\n    max_diff = 0\n    segments_to_apply = []\n    for segment_index in range(1, m + 1):\n        b = apply_segments(a, [segment_index])\n        diff = max_min_diff(b)\n        if diff > max_diff:\n            max_diff = diff\n            segments_to_apply = [segment_index]\n        elif diff == max_diff:\n            segments_to_apply.append(segment_index)\n\n    return f\"{max_diff}\\n{len(segments_to_apply)}\\n{' '.join(map(str, segments_to_apply))}\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    strings = stdin.split('\\n')\n    n = int(strings[0])\n    del strings[0]\n\n    result = []\n    for string in strings:\n        if len(set(string)) == len(string):\n            result.append(\"Yes\")\n        else:\n            result.append(\"No\")\n\n    return \"\\n\".join(result)\n"
    },
    {
        "number": 4079,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    strings = stdin.split(\"\\n\")\n    n = int(strings[0])\n    strings = strings[1:]\n\n    for string in strings:\n        if len(string) != len(set(string)):\n            print(\"No\")\n        else:\n            for i in range(len(string) - 1):\n                if ord(string[i]) - ord(string[i + 1]) != 1:\n                    print(\"No\")\n                    break\n            else:\n                print(\"Yes\")\n\nstdin = \"\"\"8\nfced\nxyz\nr\ndabcef\naz\naa\nbad\nbabc\"\"\"\nsolution(stdin) "
    },
    {
        "number": 4079,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    strings = stdin.splitlines()[1:]\n    \n    for string in strings:\n        if is_diverse(string):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\ndef"
    },
    {
        "number": 4079,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    strings = stdin.split(\"\\n\")\n    n = int(strings[0])\n    strings = strings[1:]\n\n    for s in strings:\n        if len(s) == 1:\n            print(\"Yes\")\n        else:\n            distinct_chars = set(s)\n            if len(distinct_chars) == len(s):\n                adjacent_letters = False\n                for i in range(len(s) - 1):\n                    if ord(s[i]) - ord(s[i + 1]) == 1:\n                        adjacent_letters = True\n                    else:\n                        adjacent_letters = False\n                        break\n                if adjacent_letters:\n                    print(\"Yes\")\n                else:\n                    print(\"No\")\n            else:\n                print(\"No\")"
    },
    {
        "number": 4079,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    strings = stdin.split(\"\\n\")[1:]\n    result = []\n\n    for string in strings:\n        if len(string) != len(set(string)):\n            result.append(\"No\")\n            continue\n\n        string = string.lower()\n        string = sorted(string)\n        for i in range(len(string) - 1):\n            if ord(string[i + 1]) - ord(string[i]) != 1:\n                result.append(\"No\")\n                break\n        else:\n            result.append(\"Yes\")\n\n    return \"\\n\".join(result)\n"
    },
    {
        "number": 4079,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_diverse(string: str) -> bool:\n        for i in range(len(string) - 1):\n            if abs(ord(string[i]) - ord(string[i+1])) != 1:\n                return False\n        return True\n\n    n = int(stdin.split(\"\\n\")[0])\n    strings = stdin.split(\"\\n\")[1:]\n\n    result = []\n    for string in strings:\n        result.append(\"Yes\" if is_diverse(string) else \"No\")\n\n    return \"\\n\".join(result)\n\ndef"
    },
    {
        "number": 4079,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    strings = stdin.split('\\n')[1:]\n\n    result = []\n\n    for string in strings:\n        if len(set(string)) != len(string):\n            result.append(\"No\")\n        elif all(ord(string[i]) - ord(string[i - 1]) == 1 for i in range(1, len(string))):\n            result.append(\"Yes\")\n        else:\n            result.append(\"No\")\n\n    return \"\\n\".join(result)\n"
    },
    {
        "number": 4079,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def is_diverse(s: str) -> bool:\n        if len(s) == 1:\n            return True\n        s_set = set(s)\n        if len(s_set) != len(s):\n            return False\n        s_set_list = sorted(list(s_set))\n        for i in range(len(s_set_list) - 1):\n            if ord(s_set_list[i + 1]) - ord(s_set_list[i]) != 1:\n                return False\n        return True\n\n    result = []\n    n = int(stdin.split('\\n')[0])\n    for i in range(1, n + 1):\n        s = stdin.split('\\n')[i]\n        result.append(\"Yes\" if is_diverse(s) else \"No\")\n    return \"\\n\".join(result)\n\ndef"
    },
    {
        "number": 4079,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    strings = stdin.split('\\n')[1:]\n    \n    for string in strings:\n        if string.isalpha() and len(string) == len(set(string)) and sorted(string) == list(string):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n            \n    return \"\"\n\ninput_str = \"\"\"8\nfced\nxyz\nr\ndabcef\naz\naa\nbad\nbabc\"\"\"\n\nsolution(input_str) "
    },
    {
        "number": 4079,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    strings = stdin.split(\"\\n\")[1:]\n    result = \"\"\n\n    for string in strings:\n        if len(set(string)) == len(string) and all(string[i] != string[i+1] for i in range(len(string)-1)):\n            result += \"Yes\\n\"\n        else:\n            result += \"No\\n\"\n\n    return result\n\ndef"
    },
    {
        "number": 4080,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:n+2]))\n    segments = []\n    for _ in range(m):\n        l, r = map(int, stdin.split()[2:])\n        segments.append((l, r))\n\n    max_diff = 0\n    selected_segments = []\n\n    def decrease_values(a: List[int], segments: List[Tuple[int, int]]) -> List[int]:\n        b = [x - 1 for x in a]\n        for l, r in segments:\n            for i in range(l-1, r):\n                b[i] -= 1\n        return b\n\n    def max_diff_and_selected_segments(a: List[int], segments: List[Tuple[int, int]]) -> Tuple[int, List[int]]:\n        b = decrease_values(a, segments)\n        diff = max(b) - min(b)\n        selected = [segments.index(x) + 1 for x in segments if x in segments[:len(b)//2]]\n        return diff, selected\n\n    for i in range(1, len(segments)//2 + 1):\n        for combo in combinations(segments, i):\n            diff, selected = max_diff_and_selected_segments(a, combo)\n            if diff > max_diff:\n                max_diff = diff\n                selected_segments = selected\n\n    return str(max_diff) + '\\n' + str(len(selected_segments)) + '\\n' + ' '.join(map(str, selected_segments)) + '\\n'"
    },
    {
        "number": 4080,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    segments = [list(map(int, stdin.split())) for _ in range(m)]\n\n    def max_min_diff(arr: list) -> int:\n        return max(arr) - min(arr)\n\n    def apply_segments(chosen_indices: set) -> list:\n        result = a.copy()\n        for index in chosen_indices:\n            l, r = segments[index - 1]\n            for i in range(l - 1, r):\n                result[i] -= 1\n        return result\n\n    best_diff = 0\n    best_chosen = set()\n\n    for i in range(1, 1 << m):\n        chosen = {j + 1 for j in range(m) if (i >> j) & 1}\n        applied = apply_segments(chosen)\n        diff = max_min_diff(applied)\n\n        if diff > best_diff:\n            best_diff = diff\n            best_chosen = chosen\n\n    result = [best_diff, len(best_chosen)]\n    result.extend(sorted(best_chosen))\n    return \" \".join(map(str, result))\n\n\ndef"
    },
    {
        "number": 4080,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, next(stdin).split())\n    a = list(map(int, next(stdin).split()))\n    segments = []\n    for _ in range(m):\n        l, r = map(int, next(stdin).split())\n        segments.append((l - 1, r - 1))\n    \n    max_diff = 0\n    selected_segments = set()\n    \n    for i in range(m):\n        for j in range(i + 1, m):\n            l_i, r_i = segments[i]\n            l_j, r_j = segments[j]\n            \n            if l_i <= l_j <= r_j <= r_i:\n                continue\n            \n            if l_j <= l_i <= r_i <= r_j:\n                continue\n            \n            new_a = [x - 1 if l_i <= k <= r_i or l_j <= k <= r_j else x for k, x in enumerate(a)]\n            diff = max(new_a) - min(new_a)\n            \n            if diff > max_diff:\n                max_diff = diff\n                selected_segments = {i + 1, j + 1}\n            elif diff == max_diff:\n                selected_segments.add(i + 1)\n                selected_segments.add(j + 1)\n    \n    return f\"{max_diff}\\n{len(selected_segments)}\\n{' '.join(map(str, selected_segments))}\"\n\ndef"
    },
    {
        "number": 4080,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    n, m = map(int, stdin.readline().strip().split())\n    a = list(map(int, stdin.readline().strip().split()))\n    segments = [tuple(map(int, stdin.readline().strip().split())) for _ in range(m)]\n    \n    # Initialize the result variables\n    max_diff = 0\n    chosen_segments = []\n    \n    # Iterate through the segments and update the result\n    for segment in segments:\n        l, r = segment\n        for i in range(l, r+1):\n            a[i] -= 1\n        diff = max(a) - min(a)\n        if diff > max_diff:\n            max_diff = diff\n            chosen_segments = [segment]\n        elif diff == max_diff:\n            chosen_segments.append(segment)\n    \n    # Print the result\n    result = [max_diff, len(chosen_segments)]\n    result.extend(sorted(i[0] for i in chosen_segments))\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 4080,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    segments = [list(map(int, stdin.split()[2+i*2:4+i*2])) for i in range(m)]\n\n    def calculate_max_diff(segments_to_apply: list) -> int:\n        b = [0] * n\n        for segment in segments_to_apply:\n            for i in range(segment[0]-1, segment[1]):\n                b[i] -= 1\n        return max(b) - min(b)\n\n    max_diff = 0\n    for i in range(1, 2 ** m):\n        binary_representation = bin(i)[2:].zfill(m)\n        segments_to_apply = [segments[j] for j in range(m) if binary_representation[j] == '1']\n        diff = calculate_max_diff(segments_to_apply)\n        if diff > max_diff:\n            max_diff = diff\n            chosen_segments = [j+1 for j in range(m) if binary_representation[j] == '1']\n\n    return str(max_diff) + '\\n' + str(len(chosen_segments)) + '\\n' + ' '.join(map(str, chosen_segments))"
    },
    {
        "number": 4080,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def max_min_diff(a, segments):\n        min_value = float('inf')\n        max_value = float('-inf')\n        for segment in segments:\n            min_value = min(min_value, min(a[segment[0] - 1:segment[1]]) - 1)\n            max_value = max(max_value, max(a[segment[0] - 1:segment[1]]) - 1)\n        return max_value - min_value\n\n    def find_max_diff(a, segments):\n        max_diff = 0\n        chosen_segments = set()\n        for segment in segments:\n            new_a = a.copy()\n            new_a[segment[0] - 1:segment[1]] = [x - 1 for x in new_a[segment[0] - 1:segment[1]]]\n            new_diff = max_min_diff(new_a, segments)\n            if new_diff > max_diff:\n                max_diff = new_diff\n                chosen_segments = {segment[0] - 1}\n            elif new_diff == max_diff:\n                chosen_segments.add(segment[0] - 1)\n        return max_diff, len(chosen_segments), chosen_segments\n\n    n, m = list(map(int, stdin.readline().strip().split()))\n    a = list(map(int, stdin.readline().strip().split()))\n    segments = []\n    for _ in range(m):\n        l, r = list(map(int, stdin.readline().strip().split()))\n        segments.append((l, r))\n\n    max_diff, q, chosen_segments = find_max_diff(a, segments)\n    return str(max_diff) + '\\n' + str(q) + '\\n' + ' '.join(map(str, chosen_segments))\n\ninput_str = ''\ninput_str += '5 4\\n'\ninput_str += '2 -2 3 1 2\\n'\ninput_str += '1 3\\n'\ninput_str += '4 5\\n'\ninput_str += '2 5\\n'\ninput_str += '1 3\\n'\nprint(solution(input_str)) "
    },
    {
        "number": 4080,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def max_diff(a: list) -> int:\n        return max(a) - min(a)\n\n    def decrease_segments(a: list, segments: list) -> int:\n        for segment in segments:\n            a[segment[0] - 1 : segment[1]] = [x - 1 for x in a[segment[0] - 1 : segment[1]]]\n        return a\n\n    def find_optimal_decrease(a: list, segments: list) -> tuple:\n        max_diff_value = 0\n        optimal_decrease = []\n\n        for i, segment in enumerate(segments, start=1):\n            a_copy = decrease_segments(a.copy(), [segment])\n            current_diff = max_diff(a_copy)\n\n            if current_diff > max_diff_value:\n                max_diff_value = current_diff\n                optimal_decrease = [i]\n            elif current_diff == max_diff_value:\n                optimal_decrease.append(i)\n\n        return max_diff_value, optimal_decrease\n\n    n, m = map(int, stdin.readline().strip().split())\n    a = list(map(int, stdin.readline().strip().split()))\n    segments = [list(map(int, stdin.readline().strip().split())) for _ in range(m)]\n\n    max_diff_value, optimal_decrease = find_optimal_decrease(a, segments)\n\n    return f\"{max_diff_value}\\n{len(optimal_decrease)}\\n{' '.join(map(str, optimal_decrease))}\" "
    },
    {
        "number": 4080,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    segments = []\n    for i in range(m):\n        l, r = map(int, stdin.split()[2:])\n        segments.append((l, r))\n\n    def score(chosen_segments):\n        b = [x - 1 for x in a]\n        for l, r in chosen_segments:\n            for i in range(l - 1, r):\n                b[i] += 1\n        return max(b) - min(b)\n\n    best_score = 0\n    chosen_segments = []\n    for _ in range(m + 1):\n        for subset in itertools.combinations(segments, _):\n            cur_score = score(subset)\n            if cur_score > best_score:\n                best_score = cur_score\n                chosen_segments = list(subset)\n\n    chosen_segments = [segments.index(x) + 1 for x in chosen_segments]\n    return f\"{best_score}\\n{len(chosen_segments)}\\n{' '.join(map(str, chosen_segments))}\"\n\nimport sys\nimport itertools\n\ntest_cases = int(sys.stdin.readline())\nfor i in range(test_cases):\n    print(solution(sys.stdin.read()))\n<|im_sep|> "
    },
    {
        "number": 4080,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, m = map(int, lines[0].split())\n    a = list(map(int, lines[1].split()))\n    segments = []\n    for i in range(2, 2 + m):\n        l, r = map(int, lines[i].split())\n        segments.append((l, r))\n\n    max_difference = float('-inf')\n    max_subset = set()\n\n    for subset in range(2**m):\n        chosen_segments = set()\n        for i in range(m):\n            if (subset & (1 << i)) > 0:\n                chosen_segments.add(i)\n\n        b = [a[i] - (1 if i in chosen_segments else 0) for i in range(n)]\n        difference = max(b) - min(b)\n\n        if difference > max_difference:\n            max_difference = difference\n            max_subset = chosen_segments\n\n    return f'{max_difference}\\n{len(max_subset)}\\n{\" \".join(map(str, max_subset))}'\n\ninput_data = \"\"\"5 4\n2 -2 3 1 2\n1 3\n4 5\n2 5\n1 3\n\"\"\"\nprint(solution(input_data))\n\ninput_data = \"\"\"5 4\n2 -2 3 1 4\n3 5\n3 4\n2 4\n2 5\n\"\"\"\nprint(solution(input_data))\n\ninput_data = \"\"\"1 0\n1000000\n\"\"\"\nprint(solution(input_data)) "
    },
    {
        "number": 4080,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    segments = []\n    for _ in range(m):\n        l, r = map(int, stdin.split()[2:])\n        segments.append((l, r))\n\n    def max_min_diff(a, segments):\n        b = [0] * len(a)\n        for l, r in segments:\n            for i in range(l - 1, r):\n                b[i] -= 1\n        return max(b) - min(b)\n\n    max_diff = 0\n    chosen_segments = []\n    for i in range(1, 2**m):\n        segments_to_apply = [segments[j-1] for j in range(m+1) if (1 << (j-1)) & i]\n        diff = max_min_diff(a, segments_to_apply)\n        if diff > max_diff:\n            max_diff = diff\n            chosen_segments = segments_to_apply\n\n    chosen_segments_indices = [segments.index(segment) + 1 for segment in chosen_segments]\n    return str(max_diff) + \"\\n\" + str(len(chosen_segments)) + \"\\n\" + \" \".join(map(str, chosen_segments_indices))"
    },
    {
        "number": 4081,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    if len(a) != n or len(set(a)) != n:\n        return \"Invalid input\"\n\n    def find_max_increasing_subsequence(a):\n        tails = [0] * n\n        prev = [-1] * n\n        length = 1\n        max_length = 1\n        for i in range(1, n):\n            if a[i] > a[tails[length - 1]]:\n                tails[length] = i\n                prev[i] = tails[length - 1]\n                length += 1\n                max_length = max(max_length, length)\n            else:\n                k = bisect_left(tails, a[i], low=0, high=length - 1)\n                if tails[k] == a[i]:\n                    prev[i] = prev[tails[k - 1]]\n                else:\n                    tails[k + 1] = i\n                    prev[i] = tails[k - 1]\n        return max_length\n\n    max_length = find_max_increasing_subsequence(a)\n\n    result = \"\"\n    curr_index = a.index(a[0])\n    for _ in range(max_length):\n        if curr_index == 0:\n            result += \"L\"\n        elif curr_index == n - 1:\n            result += \"R\"\n        curr_index = a.index(a[curr_index]) - 1 if curr_index > 0 else a.index(a[curr_index]) + 1\n\n    return str(max_length) + \"\\n\" + result"
    },
    {
        "number": 4081,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def find_increasing_sequence(a):\n        left = []\n        right = []\n        for i in range(len(a)):\n            if i == 0 or a[i] > a[i - 1]:\n                left.append(i)\n            if i == len(a) - 1 or a[i] < a[i + 1]:\n                right.append(i)\n        return left, right\n\n    def longest_increasing_subsequence(a):\n        n = len(a)\n        dp = [1] * n\n        prev = [-1] * n\n        for i in range(1, n):\n            for j in range(i):\n                if a[i] > a[j] and dp[i] < dp[j] + 1:\n                    dp[i] = dp[j] + 1\n                    prev[i] = j\n        max_len = max(dp)\n        max_indices = [i for i, x in enumerate(dp) if x == max_len]\n        ans = []\n        for max_index in max_indices:\n            subseq = []\n            while max_index != -1:\n                subseq.append(max_index)\n                max_index = prev[max_index]\n            ans.append(subseq[::-1])\n        return max_len, ans\n\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    left, right = find_increasing_sequence(a)\n    k, ans = longest_increasing_subsequence(a)\n    min_k = min(len(left), len(right))\n\n    if k < min_k:\n        k = min_k\n        ans = [left[:k], right[:k]]\n\n    left_moves = ''.join(['L' if i in left else 'R' for i in range(k)])\n    return f'{k}\\n{left_moves}'"
    },
    {
        "number": 4081,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    def find_max_length(a, i, j, left_moves, right_moves, increasing_sequence):\n        if i >= j:\n            return left_moves, right_moves, increasing_sequence\n\n        if a[i] < a[j]:\n            return find_max_length(a, i + 1, j, left_moves + 1, right_moves, increasing_sequence + (a[i],))\n        else:\n            return find_max_length(a, i, j - 1, left_moves, right_moves + 1, increasing_sequence + (a[j],))\n\n    max_length, max_sequence = 0, []\n    for i in range(n):\n        for j in range(n):\n            left_moves, right_moves, increasing_sequence = find_max_length(a, i, j, 0, 0, ())\n            if len(increasing_sequence) > max_length:\n                max_length = len(increasing_sequence)\n                max_sequence = increasing_sequence\n\n    result = \"\".join([\"L\" if a[i] == max_sequence[j] else \"R\" for j, i in enumerate(range(len(a)))])\n    return str(max_length) + \"\\n\" + result"
    },
    {
        "number": 4081,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, sequence = stdin.split('\\n')\n    n = int(n)\n    sequence = list(map(int, sequence.split()))\n\n    def dfs(sequence: List[int], path: List[str]) -> None:\n        if not sequence:\n            global max_len, max_path\n            if len(path) > max_len:\n                max_len = len(path)\n                max_path = path\n            return\n\n        dfs(sequence[1:], path + ['R'])\n        dfs(sequence[:-1], path + ['L'])\n\n    max_len = 0\n    max_path = []\n    dfs(sequence, [])\n\n    return f\"{max_len}\\n{''.join(max_path)}\"\n\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.splitlines()[0].split())\n    input_sequence = list(map(int, stdin.splitlines()[1].split()))\n\n    def find_longest_increasing_sequence(input_sequence):\n        longest_sequence = []\n        for i in range(n):\n            current_sequence = [input_sequence[i]]\n            j = i + 1\n            while j < n and input_sequence[j] > current_sequence[-1]:\n                current_sequence.append(input_sequence[j])\n                j += 1\n            if len(current_sequence) > len(longest_sequence):\n                longest_sequence = current_sequence\n        return longest_sequence\n\n    longest_increasing_sequence = find_longest_increasing_sequence(input_sequence)\n    longest_increasing_sequence_length = len(longest_increasing_sequence)\n\n    def find_moves_for_longest_increasing_sequence(longest_increasing_sequence, input_sequence):\n        moves = []\n        current_index = 0\n        for element in longest_increasing_sequence:\n            index_of_element = input_sequence.index(element)\n            if index_of_element < current_index:\n                moves.append('R')\n            else:\n                moves.append('L')\n            current_index = index_of_element + 1\n        return moves\n\n    moves = find_moves_for_longest_increasing_sequence(longest_increasing_sequence, input_sequence)\n\n    return f\"{longest_increasing_sequence_length}\\n{''.join(moves)}\""
    },
    {
        "number": 4081,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    left_moves = [False] * n\n    right_moves = [False] * n\n\n    # Set leftmost and rightmost moves for the first element\n    left_moves[0] = True\n    right_moves[n-1] = True\n\n    # Set leftmost and rightmost moves for the rest of the elements\n    for i in range(1, n):\n        if a[i] > a[i-1]:\n            left_moves[i] = True\n        if a[n-i-1] < a[n-i]:\n            right_moves[n-i-1] = True\n\n    # Find the longest increasing subsequence\n    max_length = 0\n    for i in range(n):\n        if left_moves[i]:\n            length = 1\n            j = i + 1\n            while j < n and a[j] > a[j-1]:\n                length += 1\n                j += 1\n            max_length = max(max_length, length)\n        if right_moves[i]:\n            length = 1\n            j = i - 1\n            while j >= 0 and a[j] < a[j+1]:\n                length += 1\n                j -= 1\n            max_length = max(max_length, length)\n\n    # Generate the longest increasing subsequence\n    sequence = [0] * max_length\n    left = True\n    i = 0\n    j = 0\n    while i < n and j < max_length:\n        if left_moves[i] and a[i] > sequence[j-1]:\n            sequence[j] = a[i]\n            left = True\n            i += 1\n            j += 1\n        elif right_moves[i] and a[i] > sequence[j-1]:\n            sequence[j] = a[i]\n            left = False\n            i += 1\n            j += 1\n        else:\n            i += 1\n\n    # Generate the output\n    output = \"\"\n    for i in range(max_length):\n        if left:\n            output += \"L\"\n        else:\n            output += \"R\"\n        if i < max_length-1:\n            output += \"R\"\n\n    return str(max_length) + \"\\n\" + output"
    },
    {
        "number": 4081,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    a = sorted(a)\n    moves = [chr(0)] * n\n\n    def dfs(index: int, count: int, increasing: bool) -> int:\n        if index == n:\n            return count\n        left = dfs(index + 1, count + 1, True)\n        right = dfs(index + 1, count, False)\n        return max(left, right)\n\n    max_count = dfs(0, 0, True)\n    return str(max_count) + \"\\n\" + \"\".join(moves)\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4081,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a = stdin.split()\n    n = int(n)\n    a = list(map(int, a.split()))\n\n    if len(a) != n:\n        raise ValueError(\"Invalid input\")\n\n    increasing_sequence = []\n    for i in range(n):\n        if len(increasing_sequence) == 0 or increasing_sequence[-1] < a[i]:\n            increasing_sequence.append(a[i])\n        else:\n            increasing_sequence = [a[i]]\n\n    max_length = len(increasing_sequence)\n    output_sequence = \"L\" * max_length\n\n    return str(max_length) + \"\\n\" + output_sequence\n\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, seq = stdin.split()\n    n = int(n)\n    seq = list(map(int, seq.split()))\n    moves = []\n    for i in range(n):\n        left, right = i, n - 1 - i\n        if seq[left] > seq[right]:\n            moves.append(right)\n        else:\n            moves.append(left)\n    increasing_seq = []\n    for move in moves:\n        if increasing_seq and seq[move] < increasing_seq[-1]:\n            continue\n        increasing_seq.append(seq[move])\n    return str(len(increasing_seq)) + \"\\n\" + \"\".join(\"R\" if move == moves[-1] else \"L\" for move in moves)\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a = stdin.split(\"\\n\")\n    n = int(n)\n    a = list(map(int, a.split()))\n    left_stack = []\n    right_stack = []\n\n    for num in a:\n        while left_stack and left_stack[-1] > num:\n            left_stack.pop()\n        left_stack.append(num)\n\n        while right_stack and right_stack[-1] < num:\n            right_stack.pop()\n        right_stack.append(num)\n\n    max_length = min(len(left_stack), len(right_stack))\n\n    result = [\"L\"] * max_length\n    for i in range(max_length):\n        if left_stack[i] != a[i]:\n            result[i] = \"R\"\n\n    return str(max_length) + \"\\n\" + \"\".join(result)\n\ndef"
    },
    {
        "number": 4082,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # initialize variables\n    max_len = 0\n    i = 0\n\n    while i < n:\n        j = i + 1\n        while j < n and a[j] > a[j - 1]:\n            j += 1\n        max_len = max(max_len, j - i)\n        i = j\n\n    return str(max_len)"
    },
    {
        "number": 4082,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    def max_increasing_subarray_length(arr: List[int]) -> int:\n        max_length = 1\n        current_length = 1\n        for i in range(1, len(arr)):\n            if arr[i] > arr[i - 1]:\n                current_length += 1\n                max_length = max(max_length, current_length)\n            else:\n                current_length = 1\n        return max_length\n\n    max_length = max_increasing_subarray_length(a)\n\n    for i in range(len(a)):\n        new_a = a[:i] + a[i+1:]\n        new_max_length = max_increasing_subarray_length(new_a)\n        max_length = max(max_length, new_max_length)\n\n    return str(max_length)"
    },
    {
        "number": 4082,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def find_largest_subarray(arr: List[int]) -> int:\n        if len(arr) == 1:\n            return 1\n        longest = 1\n        current = 1\n        for i in range(1, len(arr)):\n            if arr[i] > arr[i - 1]:\n                current += 1\n            else:\n                longest = max(longest, current)\n                current = 1\n        return max(longest, current)\n\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    max_length = find_largest_subarray(a)\n\n    for i in range(n):\n        new_a = a[:i] + a[i+1:]\n        new_length = find_largest_subarray(new_a)\n        max_length = max(max_length, new_length)\n\n    return str(max_length)"
    },
    {
        "number": 4082,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    \n    def max_increasing_subarray_length(arr, start, end):\n        if start == end:\n            return 1\n        if arr[start] > arr[end]:\n            return max(1, max_increasing_subarray_length(arr, start+1, end))\n        else:\n            mid = (start + end) // 2\n            return max(max_increasing_subarray_length(arr, start, mid), max_increasing_subarray_length(arr, mid+1, end))\n    \n    max_length = 0\n    for i in range(n):\n        max_length = max(max_length, max_increasing_subarray_length(a, 0, i) + max_increasing_subarray_length(a, i+1, n-1))\n        max_length = max(max_length, max_increasing_subarray_length(a, 0, i-1) + max_increasing_subarray_length(a, i, n-1))\n    \n    return str(max_length)\n"
    },
    {
        "number": 4082,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    max_length = 0\n\n    for i in range(n):\n        increasing_subarray_length = 1\n        for j in range(i + 1, n):\n            if a[j] > a[j - 1]:\n                increasing_subarray_length += 1\n            else:\n                break\n        max_length = max(max_length, increasing_subarray_length)\n\n    return str(max_length)\n\ndef"
    },
    {
        "number": 4082,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    max_len = 1\n    curr_len = 1\n    \n    for i in range(1, n):\n        if a[i] > a[i-1]:\n            curr_len += 1\n            max_len = max(max_len, curr_len)\n        else:\n            curr_len = 1\n    \n    return str(max_len)\n\ndef"
    },
    {
        "number": 4082,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    \n    max_length = 0\n    \n    for i in range(n):\n        current_length = 1\n        for j in range(i + 1, n):\n            if arr[j] > arr[j - 1]:\n                current_length += 1\n            else:\n                break\n        max_length = max(max_length, current_length)\n    \n    return str(max_length)"
    },
    {
        "number": 4082,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = [int(x) for x in stdin.split('\\n')[1].split()]\n    \n    if n == 1:\n        return str(n)\n    \n    max_length = 1\n    \n    for i in range(n-1):\n        if a[i+1] > a[i]:\n            max_length += 1\n        else:\n            max_length = 1\n    \n    return str(max_length)"
    },
    {
        "number": 4082,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1:]))\n    max_len = 1\n\n    for i in range(n - 1):\n        if arr[i] < arr[i + 1]:\n            temp = arr.copy()\n            del temp[i]\n            temp_len = 1\n            for j in range(1, len(temp)):\n                if temp[j] > temp[j - 1]:\n                    temp_len += 1\n                else:\n                    break\n            max_len = max(max_len, temp_len)\n\n    return str(max_len)"
    },
    {
        "number": 4082,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n    max_len = 0\n    for i in range(n):\n        curr_len = 1\n        for j in range(i+1, n):\n            if a[j] > a[j-1]:\n                curr_len += 1\n            else:\n                break\n        max_len = max(max_len, curr_len)\n        if i > 0 and a[i-1] > a[i]:\n            curr_len = 1\n            for j in range(i, n):\n                if a[j] > a[j-1]:\n                    curr_len += 1\n                else:\n                    break\n            max_len = max(max_len, curr_len)\n    return str(max_len) "
    },
    {
        "number": 4083,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, input().split()))\n\n    a.sort()\n    min_operations = 0\n    target = a[n - k]\n\n    for num in a:\n        operations = 0\n        while num > target:\n            num //= 2\n            operations += 1\n        min_operations = max(min_operations, operations)\n\n    return str(min_operations)"
    },
    {
        "number": 4083,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def count_pairs(a: List[int]) -> int:\n        a.sort()\n        count = 0\n        i = 0\n        while i < len(a):\n            j = i + 1\n            while j < len(a) and a[j] == a[i]:\n                j += 1\n            count += j - i - 1\n            i = j\n        return count\n\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    min_operations = 0\n    while count_pairs(a) < k:\n        min_operations += 1\n        a = [x // 2 for x in a]\n\n    return str(min_operations)"
    },
    {
        "number": 4083,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    count = {}\n    \n    for i in a:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    \n    max_count = max(count.values())\n    min_operations = (n - max_count) // (k - 1)\n    \n    if (n - max_count) % (k - 1) == 0:\n        return str(min_operations)\n    else:\n        return str(min_operations + 1)\n    \n"
    },
    {
        "number": 4083,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, input().split()))\n\n    a.sort()\n    i = 0\n    j = n - 1\n    min_ops = 0\n\n    while i <= j:\n        mid = (i + j) // 2\n        count = 1\n\n        for jj in range(mid + 1, n):\n            if a[jj] == a[mid]:\n                count += 1\n\n        if count >= k:\n            min_ops = mid + 1\n            j = mid - 1\n        else:\n            i = mid + 1\n\n    return str(min_ops)"
    },
    {
        "number": 4083,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, input().split()))\n\n    def divide(a: List[int]) -> int:\n        count = 0\n        for i in range(n):\n            while a[i] > 0:\n                a[i] = a[i] // 2\n                count += 1\n        return count\n\n    a.sort()\n    min_ops = float('inf')\n    for i in range(n - k + 1):\n        min_ops = min(min_ops, divide(a[i:i + k]))\n\n    return str(min_ops)\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4083,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, input().split()))\n\n    a.sort()\n\n    min_ops = 0\n    for i in range(n - k + 1):\n        if a[i] == a[i + k - 1]:\n            min_ops += 1\n        else:\n            min_ops += a[i + k - 1] - a[i]\n\n    return str(min_ops)"
    },
    {
        "number": 4083,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, input().split()))\n\n    # sort the array in descending order\n    a.sort(reverse=True)\n\n    # count the number of occurrences of each element in the array\n    count = [0] * (2 * 10 ** 5 + 1)\n    for element in a:\n        count[element] += 1\n\n    # calculate the minimum number of operations\n    min_operations = 0\n    for i in range(len(count)):\n        if count[i] >= k:\n            min_operations += i * (count[i] - k)\n        else:\n            min_operations += i * count[i]\n            k -= count[i]\n            if k == 0:\n                break\n\n    return str(min_operations)"
    },
    {
        "number": 4083,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    if k > n:\n        return \"0\"\n\n    a.sort()\n    min_ops = 0\n    for i in range(k - 1):\n        if a[i] != a[i + 1]:\n            min_ops += a[i] - a[i + 1]\n\n    min_ops += n * (a[k - 1] - a[0])\n\n    return str(min_ops)"
    },
    {
        "number": 4083,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    a.sort()\n    count = 1\n    i = 0\n\n    while i < n:\n        j = i + 1\n        while j < n and a[j] == a[i]:\n            j += 1\n\n        if j - i >= k:\n            return str(count)\n\n        count += 1\n        i = j\n\n    return str(count)"
    },
    {
        "number": 4083,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    while len(a) > k:\n        if a.count(max(a)) >= k:\n            break\n        max_a = max(a)\n        a = [x // 2 for x in a]\n        a = [x for x in a if x != 0]\n    return str(len(a) - k)"
    },
    {
        "number": 4084,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    blue_balls = (N // (A + B)) * A\n    if N % (A + B) >= A:\n        blue_balls += A\n    else:\n        blue_balls += N % (A + B)\n    return str(blue_balls)"
    },
    {
        "number": 4084,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    blue_count = A + B - 1\n    return str(min(blue_count, N))"
    },
    {
        "number": 4084,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    blue_count = N // (A + B) * A + min(N % (A + B), A)\n    return str(blue_count)"
    },
    {
        "number": 4084,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    total_blue = A + B\n    blue_count = A\n\n    for _ in range(total_blue - 1):\n        if blue_count < N:\n            blue_count += B\n\n    return str(blue_count)"
    },
    {
        "number": 4084,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    blue_balls = A + B\n    total_balls = 2 * N\n    return str(min(blue_balls, total_balls) // 2)"
    },
    {
        "number": 4084,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    total_balls = (A + B) * 10**100\n    blue_balls = total_balls // 2\n    first_N_balls = blue_balls + B\n    return str(first_N_balls) "
    },
    {
        "number": 4084,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    total_blue = (N + A - 1) // A * A\n    total_red = N - total_blue\n    return str(total_blue - (total_red + B - 1) // B * B)"
    },
    {
        "number": 4084,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    blue_balls = (N // (A + B)) * A\n    remaining_balls = N % (A + B)\n    if remaining_balls < A:\n        blue_balls += remaining_balls\n    else:\n        blue_balls += A\n    return str(blue_balls)"
    },
    {
        "number": 4084,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    total_balls = A + B\n    if total_balls > N:\n        return \"0\"\n    return str(A)"
    },
    {
        "number": 4084,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    total_balls = A + B\n    blue_balls = A\n    first_N_balls = blue_balls + min(N, blue_balls)\n    return str(first_N_balls)"
    },
    {
        "number": 4085,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split(\"\\n\")[0])\n    result = []\n    \n    for i in range(1, t+1):\n        n = int(stdin.split(\"\\n\")[i*2-1])\n        divisors = list(map(int, stdin.split(\"\\n\")[i*2].split()))\n        \n        if len(divisors) == len(set(divisors)):\n            min_x = min(divisors)\n            max_x = max(divisors)\n            \n            if max_x**2 >= min_x:\n                for i in range(min_x, max_x+1):\n                    if all(i % d == 0 for d in divisors):\n                        result.append(i)\n                        break\n                else:\n                    result.append(-1)\n            else:\n                result.append(-1)\n        else:\n            result.append(-1)\n            \n    return \"\\n\".join(map(str, result))"
    },
    {
        "number": 4085,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    result = []\n    \n    for i in range(1, t+1):\n        n = int(stdin.split('\\n')[i*2-1])\n        divisors = list(map(int, stdin.split('\\n')[i*2].split()))\n        \n        min_x = max(divisors)\n        max_x = 1\n        for d in divisors:\n            min_x = max(min_x, d*2)\n            max_x = min(max_x, d//2)\n        \n        if min_x > max_x:\n            result.append(-1)\n        else:\n            result.append(min_x)\n            \n    return '\\n'.join(map(str, result))\n\ninput_data = \"\"\"2\n8\n8 2 12 6 4 24 16 3\n1\n2\"\"\"\n\nprint(solution(input_data)) "
    },
    {
        "number": 4085,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.splitlines()[0])\n    output = []\n    for i in range(t):\n        n = int(stdin.splitlines()[i * 2 + 1])\n        divisors = stdin.splitlines()[i * 2 + 2].split()\n        divisors = [int(d) for d in divisors]\n        divisors.sort()\n\n        if divisors[-1] * divisors[-2] == divisors[0] * divisors[1]:\n            output.append(-1)\n        else:\n            output.append(divisors[0] * divisors[1])\n\n    return \"\\n\".join(map(str, output))"
    },
    {
        "number": 4085,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    result = []\n    \n    for i in range(1, t+1):\n        n = int(lines[i*2-1])\n        divisors = list(map(int, lines[i*2].split()))\n        \n        x = 1\n        for d in divisors:\n            x *= d\n            \n        for d in divisors:\n            if x % d == 0 and x // d in divisors:\n                result.append(x)\n                break\n        else:\n            result.append(-1)\n            \n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 4085,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.splitlines()[0])\n    output = []\n    for i in range(1, t+1):\n        n = int(stdin.splitlines()[i*2-1])\n        divisors = list(map(int, stdin.splitlines()[i*2]))\n        divisors.sort()\n        x = divisors[-1]\n        if len(divisors) == 1:\n            output.append(str(x))\n        elif len(divisors) == 2:\n            if divisors[0] == 1 and divisors[1] == x:\n                output.append(str(x))\n            else:\n                output.append(str(-1))\n        else:\n            for j in range(len(divisors)-2, 0, -1):\n                if divisors[j] * divisors[j+1] == x:\n                    output.append(str(x))\n                    break\n            else:\n                output.append(str(-1))\n    return '\\n'.join(output)"
    },
    {
        "number": 4085,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    queries = stdin.split(\"\\n\")\n    t = int(queries[0])\n    for i in range(1, t+1):\n        n = int(queries[i*2-1])\n        divisors = list(map(int, queries[i*2].split()))\n        if len(divisors) != n:\n            result.append(-1)\n            continue\n        divisors.sort()\n        min_x = divisors[-1]\n        for i in range(n-2, -1, -1):\n            if divisors[i]*min_x == divisors[-1]:\n                min_x = divisors[i]\n            else:\n                result.append(min_x)\n                break\n        else:\n            result.append(-1)\n    return \"\\n\".join(map(str, result))\n\ndef"
    },
    {
        "number": 4085,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def find_min_x(divisors: List[int]) -> int:\n        divisors.sort()\n        n = len(divisors)\n        for i in range(n - 2, -1, -1):\n            if divisors[i] * divisors[i + 1] > divisors[-1]:\n                return -1\n            x = divisors[i] * divisors[-1]\n            if x % divisors[i + 1] == 0:\n                return x\n        return -1\n\n    lines = stdin.splitlines()\n    t = int(lines[0])\n    result = []\n\n    for i in range(t):\n        n = int(lines[i * 2 + 1])\n        divisors = list(map(int, lines[i * 2 + 2].split()))\n        min_x = find_min_x(divisors)\n        result.append(str(min_x))\n\n    return \"\\n\".join(result)\n"
    },
    {
        "number": 4085,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    results = []\n\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        divisors = list(map(int, stdin.readline().strip().split()))\n        divisors.sort()\n\n        x = 1\n        for i in range(n):\n            if divisors[i] * x <= x:\n                x = divisors[i] * x\n            else:\n                break\n\n        if x == 1:\n            results.append(-1)\n        else:\n            results.append(x)\n\n    return \"\\n\".join(map(str, results))\n"
    },
    {
        "number": 4085,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    output = []\n    for i in range(1, t+1):\n        n = int(stdin.split('\\n')[i*2-1])\n        divisors = list(map(int, stdin.split('\\n')[i*2].split()))\n        if len(divisors) != len(set(divisors)):\n            output.append(-1)\n            continue\n        x = 1\n        for d in divisors:\n            x *= d\n        output.append(x)\n    return '\\n'.join(map(str, output))\n\ninput_data = \"\"\"2\n8\n8 2 12 6 4 24 16 3\n1\n2\"\"\"\nprint(solution(input_data)) "
    },
    {
        "number": 4085,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    queries = stdin.split('\\n')\n    t = int(queries[0])\n    result = []\n    \n    for i in range(1, t*2+1, 2):\n        n = int(queries[i])\n        divisors = list(map(int, queries[i+1].split()))\n        x = 1\n        \n        for d in divisors:\n            x *= d\n        \n        for d in divisors:\n            if x % d != 0:\n                result.append(-1)\n                break\n            else:\n                x //= d\n        else:\n            result.append(x)\n    \n    return \"\\n\".join(map(str, result))"
    },
    {
        "number": 4086,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    array = list(map(int, lines[1].split()))\n    unique_elements = set()\n    for i in range(n-1, -1, -1):\n        if array[i] not in unique_elements:\n            unique_elements.add(array[i])\n            array[i] = None\n    \n    return str(len(unique_elements)) + \"\\n\" + \" \".join(map(str, filter(lambda x: x is not None, array)))\n"
    },
    {
        "number": 4086,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    seen = set()\n    result = []\n    \n    for num in reversed(a):\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n            \n    return str(len(result)) + '\\n' + ' '.join(map(str, result))"
    },
    {
        "number": 4086,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    arr = list(map(int, stdin.splitlines()[1].split()))\n    unique_arr = list(set(arr))\n    result = []\n    \n    for i in unique_arr:\n        index = arr.index(i)\n        result.append(i)\n        \n    return str(len(result)) + \"\\n\" + \" \".join(map(str, result))\n\ndef"
    },
    {
        "number": 4086,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    # Remove duplicate elements\n    unique_a = list(set(a))\n\n    # Leave only the rightmost occurrence of each unique element\n    result = []\n    for num in unique_a:\n        result.append(a[a.index(num):][::-1][0])\n\n    # Print the number of elements and the resulting array\n    return str(len(result)) + '\\n' + ' '.join(map(str, result))"
    },
    {
        "number": 4086,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n, a = [int(x) for x in stdin.split()]\n    a = [int(x) for x in a.split()]\n    \n    # Remove duplicates\n    unique_a = list(set(a))\n    \n    # Keep only the rightmost occurrence\n    result = []\n    for element in unique_a:\n        result.append(a[a.index(element):][::-1].index(element) + 1)\n    \n    # Return output\n    return str(len(result)) + \"\\n\" + \" \".join(str(x) for x in result[::-1])"
    },
    {
        "number": 4086,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    unique_a = set(a)\n    result = []\n\n    for num in unique_a:\n        rightmost = a.index(num)\n        result.append(num)\n        a[rightmost] = None\n\n    x = len(result)\n    return str(x) + '\\n' + ' '.join(map(str, result))\n\ninputs = [\n    \"6\\n1 5 5 1 6 1\",\n    \"5\\n2 4 2 4 4\",\n    \"5\\n6 6 6 6 6\"\n]\n\nfor input in inputs:\n    print(solution(input)) "
    },
    {
        "number": 4086,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    unique_elements = set(a)\n    result = []\n\n    for element in unique_elements:\n        result.append(a[a.index(element):][::-1].index(element) + 1)\n\n    x = len(result)\n    result.sort()\n\n    return f\"{x}\\n{' '.join(map(str, result))}\" "
    },
    {
        "number": 4086,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    \n    # create a dictionary to store the unique elements and their positions\n    unique_elements = {}\n    for i in range(n):\n        if a[i] not in unique_elements:\n            unique_elements[a[i]] = i\n        else:\n            unique_elements[a[i]] = i\n    \n    # create a new list with the unique elements and their positions\n    result = []\n    for key in unique_elements:\n        result.append((key, unique_elements[key]))\n    \n    # sort the new list by the positions of the elements\n    result.sort(key=lambda x: x[1])\n    \n    # create the final list with the unique elements and print the number of elements\n    x = len(result)\n    print(x)\n    \n    # create the final list with the unique elements and print the elements\n    final_result = [result[i][0] for i in range(x)]\n    print(\" \".join(map(str, final_result)))"
    },
    {
        "number": 4086,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    array = list(map(int, stdin.split()[1:]))\n    \n    unique_elements = set(array)\n    x = len(unique_elements)\n    result = []\n    \n    for element in unique_elements:\n        index = array.index(element)\n        result.append(array[index])\n        \n    return str(x) + \"\\n\" + \" \".join(map(str, result))"
    },
    {
        "number": 4086,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    unique_a = list(set(a))\n    result = []\n    \n    for num in unique_a:\n        result.append(a[a.index(num):].index(num) + a.index(num))\n        \n    return str(len(result)) + \"\\n\" + \" \".join(map(str, unique_a[::-1][result]))"
    },
    {
        "number": 4087,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def sum_of_digits(n: int) -> int:\n        return sum(int(digit) for digit in str(n))\n\n    def is_interesting(n: int) -> bool:\n        return sum_of_digits(n) % 4 == 0\n\n    def next_larger_interesting(n: int) -> int:\n        while True:\n            n += 1\n            if is_interesting(n):\n                return n\n\n    a = int(stdin)\n    return str(next_larger_interesting(a))"
    },
    {
        "number": 4087,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    n = a\n    while not (sum(int(digit) for digit in str(n)) % 4 == 0 and n >= a):\n        n += 1\n    return str(n)"
    },
    {
        "number": 4087,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    while True:\n        digits_sum = sum(int(digit) for digit in str(a))\n        if digits_sum % 4 == 0:\n            return str(a)\n        a += 1"
    },
    {
        "number": 4087,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    n = a + 1\n    while True:\n        s = sum(int(digit) for digit in str(n))\n        if s % 4 == 0:\n            return str(n)\n        n += 1\n        \n"
    },
    {
        "number": 4087,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    n = a\n    while True:\n        digits_sum = sum(int(digit) for digit in str(n))\n        if digits_sum % 4 == 0:\n            return str(n)\n        n += 1"
    },
    {
        "number": 4087,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    interesting_num = a\n\n    while True:\n        digits_sum = sum(int(digit) for digit in str(interesting_num))\n        if digits_sum % 4 == 0:\n            break\n        interesting_num += 1\n\n    return str(interesting_num)"
    },
    {
        "number": 4087,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    def digit_sum(n: int) -> int:\n        return sum(map(int, str(n)))\n\n    n = a\n    while n % 4 != 0:\n        n += 1\n\n    while not (digit_sum(n) % 4 == 0 and n >= a):\n        n += 1\n\n    return str(n)"
    },
    {
        "number": 4087,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n\n    def digit_sum(n: int) -> int:\n        return sum(map(int, str(n)))\n\n    def is_interesting(n: int) -> bool:\n        return digit_sum(n) % 4 == 0\n\n    def next_interesting(n: int) -> int:\n        while not is_interesting(n):\n            n += 1\n        return n\n\n    return str(next_interesting(a))"
    },
    {
        "number": 4087,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    next_interesting = a\n    \n    while True:\n        digits_sum = sum(int(digit) for digit in str(next_interesting))\n        if digits_sum % 4 == 0:\n            return str(next_interesting)\n        next_interesting += 1"
    },
    {
        "number": 4087,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    # Step 1: Check if the input number is already interesting\n    a_digits_sum = sum(int(digit) for digit in str(a))\n    if a_digits_sum % 4 == 0:\n        return str(a)\n\n    # Step 2: Find the next interesting number\n    n = a\n    while True:\n        n += 1\n        n_digits_sum = sum(int(digit) for digit in str(n))\n        if n_digits_sum % 4 == 0:\n            return str(n)"
    },
    {
        "number": 4088,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def calculate_b(t: str) -> list:\n        b = []\n        for i in range(len(t)):\n            b.append(sum([abs(i - j) for j in range(len(t)) if t[j] > t[i]]))\n        return b\n\n    def is_solution(s: str, b: list) -> bool:\n        for t in permutations(s):\n            if calculate_b(t) == b:\n                return True\n        return False\n\n    def main():\n        q = int(stdin.readline())\n        results = []\n        for _ in range(q):\n            s = stdin.readline().strip()\n            m = int(stdin.readline())\n            b = list(map(int, stdin.readline().split()))\n\n            for i in range(len(s)):\n                for j in range(i + 1, len(s) + 1):\n                    if is_solution(s[i:j], b):\n                        results.append(''.join(permutations(s[i:j])))\n\n        return '\\n'.join(results)\n\n    return main()\n"
    },
    {
        "number": 4088,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    lines = stdin.splitlines()\n    q = int(lines[0])\n    results = []\n\n    for i in range(1, q * 3 + 1, 3):\n        s = lines[i]\n        m = int(lines[i+1])\n        b = [int(x) for x in lines[i+2].split()]\n\n        # find possible strings t\n        t_candidates = []\n        for j in range(1, len(s) + 1):\n            for t in itertools.permutations(s, len(s)):\n                if t[0] == s[0]:\n                    t_candidates.append(\"\".join(t))\n\n        # filter candidates based on b\n        for t in t_candidates:\n            b_calc = [0] * len(t)\n            for i in range(len(t)):\n                for j in range(i+1, len(t)):\n                    if t[j] > t[i]:\n                        b_calc[i] += j-i\n            if b_calc == b:\n                results.append(t)\n\n    return \"\\n\".join(results)"
    },
    {
        "number": 4088,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    cases = stdin.strip().split('\\n')\n    q = int(cases[0])\n    results = []\n\n    for i in range(1, q+1):\n        s = cases[3*i-2]\n        m = int(cases[3*i-1])\n        b = list(map(int, cases[3*i]))\n\n        def calculate_b(s: str, m: int, b: list) -> list:\n            result = [0] * len(s)\n            for i in range(len(s)):\n                for j in range(len(s)):\n                    if i != j:\n                        if s[j] > s[i]:\n                            result[i] += abs(j-i)\n            return result\n\n        possible_t = set()\n        for p in itertools.permutations(s):\n            if calculate_b(''.join(p), m, b) == b:\n                possible_t.add(''.join(p))\n\n        if len(possible_t) > 0:\n            results.append(next(iter(possible_t)))\n        else:\n            results.append(\"No solution\")\n\n    return '\\n'.join(results)"
    },
    {
        "number": 4088,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.splitlines()[0])\n    result = []\n    for i in range(1, q+1):\n        s, m = stdin.split(\"\\n\")[i*3-2].split()\n        m = int(m)\n        b = list(map(int, stdin.split(\"\\n\")[i*3-1].split()))\n        t = \"\"\n        for j in range(m):\n            for k in range(j+1, m):\n                if b[j] == b[k]:\n                    t += s[j]\n                    s = s[:j] + s[j+1:]\n                    break\n            else:\n                continue\n            break\n        result.append(t)\n    return \"\\n\".join(result)\n\ninput_data = '''4\nabac\n3\n2 1 0\nabc\n1\n0\nabba\n3\n1 0 1\necoosdcefr\n10\n38 13 24 14 11 5 3 24 17 0'''\n\nprint(solution(input_data)) "
    },
    {
        "number": 4088,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def calculate_b(t: str) -> list:\n        b = []\n        n = len(t)\n        for i in range(n):\n            b_i = 0\n            for j in range(n):\n                if j != i and t[j] > t[i]:\n                    b_i += abs(j - i)\n            b.append(b_i)\n        return b\n\n    def check_solution(s: str, b: list) -> str:\n        n = len(s)\n        m = len(b)\n        s = sorted(s)\n        for t in permutations(s):\n            b_t = calculate_b(''.join(t))\n            if b == b_t:\n                return ''.join(t)\n        return ''\n\n    q = int(stdin.readline())\n    for _ in range(q):\n        s = stdin.readline().strip()\n        m = int(stdin.readline().strip())\n        b = [int(x) for x in stdin.readline().split()]\n        print(check_solution(s, b))"
    },
    {
        "number": 4088,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    import re\n\n    def calculate_b(t: str) -> list[int]:\n        n = len(t)\n        b = [0] * n\n        for i in range(n):\n            for j in range(i + 1, n):\n                if t[j] > t[i]:\n                    b[i] += j - i\n        return b\n\n    def is_valid(s: str, m: int, b: list[int]) -> bool:\n        t = sorted(s)\n        b_calc = calculate_b(t)\n        return b_calc == b\n\n    def generate_string(s: str, b: list[int]) -> str:\n        n = len(s)\n        t = sorted(s)\n        b_calc = calculate_b(t)\n\n        for i in range(n):\n            if b_calc[i] != b[i]:\n                return \"\"\n\n        return \"\".join(t)\n\n    test_cases = stdin.split(\"\\n\")\n    output = []\n\n    for i in range(0, len(test_cases), 4):\n        s = test_cases[i]\n        m = int(test_cases[i + 1])\n        b = list(map(int, test_cases[i + 2].split(\" \")))\n\n        if is_valid(s, m, b):\n            output.append(generate_string(s, b))\n        else:\n            output.append(\"\")\n\n    return \"\\n\".join(output)\n\n\ndef"
    },
    {
        "number": 4088,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def b(t: str, m: int, b_arr: List[int]) -> bool:\n        n = len(t)\n        b_computed = [0] * n\n        for i in range(n):\n            for j in range(n):\n                if t[j] > t[i]:\n                    b_computed[i] += abs(i - j)\n        return b_computed == b_arr\n\n    def is_solution(s: str, t: str, m: int, b_arr: List[int]) -> bool:\n        return b(t, m, b_arr) and len(set(s)) == len(set(t))\n\n    def find_solution(s: str, m: int, b_arr: List[int]) -> str:\n        n = len(s)\n        for i in range(2**n):\n            perm = [s[j] for j in range(n) if (i >> j) & 1]\n            t = ''.join(perm)\n            if is_solution(s, t, m, b_arr):\n                return t\n        return \"\"\n\n    q = int(stdin.readline().strip())\n    output = []\n    for _ in range(q):\n        s = stdin.readline().strip()\n        m = int(stdin.readline().strip())\n        b_arr = list(map(int, stdin.readline().strip().split()))\n        output.append(find_solution(s, m, b_arr))\n\n    return \"\\n\".join(output)\n\nstdin = \"\"\"\n4\nabac\n3\n2 1 0\nabc\n1\n0\nabba\n3\n1 0 1\necoosdcefr\n10\n38 13 24 14 11 5 3 24 17 0\n\"\"\"\n\nprint(solution(stdin)) "
    },
    {
        "number": 4088,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split()[0])\n    output = []\n    for _ in range(q):\n        s, m, b = stdin.split('\\n', 2)\n        s = list(s)\n        b = list(map(int, b.split()))\n\n        for i in range(len(s)):\n            for j in range(i+1, len(s)+1):\n                s[i:j] = sorted(s[i:j])\n                if b == [sum(abs(i-j) for j, tj in enumerate(s) if tj > si) for si in s]:\n                    output.append(\"\".join(s))\n\n        stdin = stdin.split('\\n', 2)[2]\n\n    return \"\\n\".join(output)\n\n\ndef"
    },
    {
        "number": 4088,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    q = int(lines[0])\n    result = []\n\n    for i in range(1, q * 3 + 1, 3):\n        s = lines[i]\n        m = int(lines[i + 1])\n        b = list(map(int, lines[i + 2].split()))\n\n        for j in range(len(s)):\n            s_modified = s[:j] + s[j+1:]\n            t = sorted(list(s_modified))\n            b_calculated = [sum([abs(j - k) for k in range(len(t)) if t[k] > t[j]]) for j in range(len(t))]\n\n            if b_calculated == b:\n                result.append(\"\".join(t))\n\n    return \"\\n\".join(result)"
    },
    {
        "number": 4088,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    q = int(input())\n    for _ in range(q):\n        s = input()\n        m = int(input())\n        b = list(map(int, input().split()))\n        t = \"\"\n        for i in range(m):\n            for j in range(m):\n                if b[i] == abs(i - j):\n                    t += s[j]\n                    break\n        print(t)\n\nsolution(None) "
    },
    {
        "number": 4089,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N <= 26:\n        return chr(ord('a') + N - 1)\n    elif N <= 702:\n        n, m = divmod(N - 26, 26)\n        return chr(ord('a') + n - 1) + chr(ord('a') + m - 1)\n    elif N <= 18278:\n        n, m = divmod(N - 702, 26)\n        return chr(ord('a') + n // 26 - 1) + chr(ord('a') + (n % 26) - 1) + chr(ord('a') + m - 1)\n    elif N <= 475254:\n        n, m = divmod(N - 18278, 26)\n        return chr(ord('a') + n // 676 - 1) + chr(ord('a') + (n % 26) - 1) + chr(ord('a') + (n // 26) - 1) + chr(ord('a') + m - 1)\n    else:\n        n, m = divmod(N - 475254, 26)\n        return chr(ord('a') + n // 17576 - 1) + chr(ord('a') + (n % 26) - 1) + chr(ord('a') + ((n // 26) % 26) - 1) + chr(ord('a') + (n // 784) - 1) + chr(ord('a') + m - 1)"
    },
    {
        "number": 4089,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def get_name(num: int) -> str:\n        if num > 26:\n            return get_name(num // 26) + chr(ord('a') + num % 26 - 1)\n        else:\n            return chr(ord('a') + num - 1)\n\n    N = int(stdin)\n    if N % 26 == 0:\n        return get_name(N // 26 - 1) + get_name(26)\n    else:\n        return get_name(N // 26) + get_name(N % 26)"
    },
    {
        "number": 4089,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 1:\n        return \"a\"\n    elif N == 2:\n        return \"b\"\n    elif N == 26:\n        return \"z\"\n    else:\n        # calculate the number of alphabets required to represent the number\n        num_of_alphabets = 1\n        while N > 26 ** num_of_alphabets:\n            num_of_alphabets += 1\n\n        # calculate the index of the alphabet to be used\n        index = (N - 1) % (26 ** (num_of_alphabets - 1))\n\n        # calculate the number of times the alphabets need to be repeated\n        repeats = num_of_alphabets - 1\n\n        # calculate the alphabet to be used\n        alphabet = chr(ord('a') + index)\n\n        # repeat the alphabet and return the result\n        return alphabet * repeats"
    },
    {
        "number": 4089,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N <= 26:\n        return chr(ord('a') + N - 1)\n\n    base = ord('z') - ord('a') + 1\n    result = ''\n    while N > 0:\n        N -= 1\n        result = chr(ord('a') + (N % (base * 26) // base)) + result\n        N //= (base * 26)\n\n    return result"
    },
    {
        "number": 4089,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N <= 26:\n        return chr(ord('a') + N - 1)\n    elif N <= 702:\n        i = N - 26 - 1\n        quotient, remainder = divmod(i, 26)\n        return chr(ord('a') + remainder) * (quotient + 1)\n    elif N <= 18278:\n        i = N - 703\n        quotient, remainder = divmod(i, 26)\n        return chr(ord('a') + quotient) * (remainder + 1)\n    elif N <= 475254:\n        i = N - 18279\n        quotient, remainder = divmod(i, 26)\n        return chr(ord('a') + quotient) * (remainder + 1)\n    else:\n        i = N - 475255\n        quotient, remainder = divmod(i, 26)\n        return chr(ord('a') + quotient) * (remainder + 1)"
    },
    {
        "number": 4089,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    if N <= 26:\n        return chr(97 + N - 1)\n\n    base = 26\n    power = 1\n    while N > base ** power:\n        N -= base ** power\n        power += 1\n\n    if N == 0:\n        return \"a\" * (power - 1) + \"z\"\n    else:\n        if N % 26 == 0:\n            return \"a\" * (power - 1) + chr(96 + (N // 26))\n        else:\n            return \"a\" * (power - 2) + chr(97 + (N % 26) - 1)"
    },
    {
        "number": 4089,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    result = ''\n    base = len(letters)\n\n    while n > 0:\n        n, remainder = divmod(n - 1, base ** 4)\n        result = letters[remainder] + result\n        base = len(letters)\n\n    return result"
    },
    {
        "number": 4089,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N <= 26:\n        return chr(ord('a') + N - 1)\n\n    i = 2\n    base = 26\n    digits = []\n    while N > base:\n        digits.insert(0, (N % (base * i)) // (base * (i - 1)))\n        N -= (N % (base * i))\n        base *= 26\n        i += 1\n\n    digits.insert(0, N // (base * (i - 1)))\n    result = ''\n    for j in range(len(digits)):\n        result += chr(ord('a') + digits[j] - 1) * (i - j - 1)\n\n    return result"
    },
    {
        "number": 4089,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    result = \"\"\n    while N > 0:\n        result = alphabet[N % 26 - 1] + result\n        N //= 26\n    return result"
    },
    {
        "number": 4089,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 1 or n > 1000000000000001:\n        raise ValueError(\"Invalid input. Please enter a number between 1 and 1000000000000001.\")\n\n    div, mod = divmod(n, 26)\n    if div == 0:\n        return chr(ord('a') + mod - 1)\n\n    div, mod = divmod(div - 1, 26)\n    if div == 0:\n        return chr(ord('a') + mod) + chr(ord('a') + mod - 1)\n\n    div, mod = divmod(div - 1, 26)\n    if div == 0:\n        return chr(ord('a') + mod) + chr(ord('a') + mod - 1) + chr(ord('a') + mod - 1)\n\n    div, mod = divmod(div - 1, 26)\n    if div == 0:\n        return chr(ord('a') + mod) + chr(ord('a') + mod - 1) + chr(ord('a') + mod - 1) + chr(ord('a') + mod - 1)\n\n    div, mod = divmod(div - 1, 26)\n    return chr(ord('a') + mod) + chr(ord('a') + mod - 1) + chr(ord('a') + mod - 1) + chr(ord('a') + mod - 1) + chr(ord('a') + mod - 1)"
    },
    {
        "number": 4090,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    n = len(words)\n\n    def check_abbreviation(i: int, j: int, k: int) -> bool:\n        for t in range(i, j):\n            if words[t] != words[t + k]:\n                return False\n        return True\n\n    def min_length_after_abbreviation(i: int, j: int) -> int:\n        if check_abbreviation(i, j, 1):\n            return j - i\n        min_length = float('inf')\n        for k in range(2, j - i + 1):\n            if check_abbreviation(i, j, k):\n                min_length = min(min_length, k)\n        return min_length\n\n    min_length = float('inf')\n    for i in range(n - 1):\n        min_length = min(min_length, min_length_after_abbreviation(i, n))\n\n    return min_length"
    },
    {
        "number": 4090,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.strip().split()\n    n = len(words)\n\n    def is_abbreviation_possible(i, j):\n        if j - i < 2:\n            return False\n        segment_1 = words[i:j]\n        for t in range(j - i):\n            if words[i + t] != words[i + t - 1]:\n                segment_2 = words[i + t:j]\n                break\n        else:\n            return False\n\n        for t in range(j - i):\n            if segment_1[t] != segment_2[t]:\n                return False\n        return True\n\n    def min_length_after_abbreviation(i, j):\n        if not is_abbreviation_possible(i, j):\n            return 0\n        segment_1 = words[i:j]\n        for t in range(j - i):\n            if words[i + t] != words[i + t - 1]:\n                segment_2 = words[i + t:j]\n                break\n        return len(''.join(words[:i] + [segment_1[0].upper()] * (j - i) + words[j:])) + ''.join(segment_2[0].upper() * (len(segment_2) - 1)) + ''.join(words[j:]))\n\n    min_length = n\n    for i in range(n):\n        for j in range(i + 2, n + 1):\n            length = min_length_after_abbreviation(i, j)\n            if length < min_length:\n                min_length = length\n\n    return min_length\n"
    },
    {
        "number": 4090,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.strip().split(\" \")\n    n = len(words)\n    word_dict = {word: i for i, word in enumerate(words)}\n\n    def get_substring(i: int, j: int) -> str:\n        return \"\".join(words[i:j+1]).upper()\n\n    def is_abbreviation_possible(i: int, j: int, k: int, l: int) -> bool:\n        if j - i != l - k:\n            return False\n        for t in range(j - i + 1):\n            if words[i + t] != words[k + t]:\n                return False\n        return True\n\n    min_length = len(stdin)\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(n):\n                for l in range(k + 1, n):\n                    if is_abbreviation_possible(i, j, k, l):\n                        new_text = stdin[:word_dict[words[i]]] + get_substring(i, j) + stdin[word_dict[words[j + 1]]:]\n                        new_text = new_text[:word_dict[words[k]]] + get_substring(k, l) + new_text[word_dict[words[l + 1]]:]\n                        min_length = min(min_length, len(new_text))\n\n    return min_length"
    },
    {
        "number": 4090,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    n = len(words)\n    for i in range(n):\n        words[i] = words[i].lower()\n\n    min_len = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if i + j == n - 1:\n                continue\n            if words[i:j + 1] == words[j + 1:i + j + 1]:\n                min_len += 2\n                break\n    return min_len\n\ndef"
    },
    {
        "number": 4090,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    n = len(words)\n\n    # Check if there are any pairs of equal segments\n    for i in range(n):\n        for j in range(i + 2, n):\n            if len(words[i:j]) == len(words[j:]) and all(words[i:j][t] == words[j:][t] for t in range(len(words[i:j]))):\n                # Replace the segments with their abbreviations\n                abbreviation = ''.join(word[0] for word in words[i:j]).upper()\n                words[i:j] = [abbreviation]\n                break\n\n    return ' '.join(words)"
    },
    {
        "number": 4090,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    n = len(words)\n    if n == 1:\n        return len(words[0])\n    if n == 2:\n        return max(len(words[0]), len(words[1]))\n\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n\n    for length in range(1, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if length == 1:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = float('inf')\n                for t in range(i, j):\n                    dp[i][j] = min(dp[i][j], dp[i][t] + dp[t + 1][j])\n\n    return dp[0][n - 1]\n\ndef"
    },
    {
        "number": 4090,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    words = stdin.splitlines()[1].split()\n\n    for i in range(n):\n        for j in range(i + 2, n):\n            segment1 = words[i:j]\n            for k in range(j + 2, n):\n                segment2 = words[k:k + j - i]\n                if segment1 == segment2:\n                    return f\"{i + 1} {j} {k + 1}\"\n\n    return \"No abbreviation found\""
    },
    {
        "number": 4090,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    n = len(words)\n    max_len = 0\n    \n    for i in range(n):\n        for j in range(i + 2, n + 1):\n            if j - i > max_len:\n                if words[i:j] == words[i + 1:j] * (j - i - 1):\n                    max_len = j - i\n    \n    if max_len > 1:\n        new_words = []\n        start = 0\n        for i in range(1, n):\n            if words[i] != words[i - 1]:\n                new_words.append(words[start])\n                new_words.append(\"\".join(map(str.upper, words[start:i])))\n                start = i\n        new_words.append(words[start])\n        new_words.append(\"\".join(map(str.upper, words[start:n])))\n        return \" \".join(new_words)\n    else:\n        return \" \".join(words)\n"
    },
    {
        "number": 4090,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    n = len(words)\n    \n    for i in range(1, n):\n        for j in range(i + 1, n):\n            if j - i > 2:\n                break\n            \n            segment1 = \"\".join([word[0].upper() for word in words[i:j]])\n            segment2 = \"\".join([word[0].upper() for word in words[j:j + i]])\n            \n            if segment1 == segment2:\n                return len(\" \".join(words[:i] + [segment1.lower()] + words[j:]))\n            \n    return len(\" \".join(words))\n\ndef"
    },
    {
        "number": 4090,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_equal_segment(segment1, segment2):\n        if len(segment1) != len(segment2):\n            return False\n        for i in range(len(segment1)):\n            if segment1[i] != segment2[i]:\n                return False\n        return True\n\n    def abbreviate(text, segments_to_abbreviate):\n        new_text = []\n        start = 0\n        for segment in segments_to_abbreviate:\n            new_text.append(text[start:segment[0]])\n            new_text.append(''.join([word[0].upper() for word in text[segment[0]:segment[1] + 1]]))\n            start = segment[1] + 1\n        new_text.append(text[start:])\n        return ''.join(new_text)\n\n    n = int(stdin.readline())\n    words = stdin.readline().strip().split()\n    text = ' '.join(words)\n    min_length = len(text)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if is_equal_segment(words[i:j + 1], words[j + 1:i + 1]):\n                new_text = abbreviate(text, [(i, j), (j, i)])\n                min_length = min(min_length, len(new_text))\n    return str(min_length)\n"
    },
    {
        "number": 4091,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    problems = list(map(int, stdin.split()[2:]))\n\n    def get_profit(start_index: int, end_index: int) -> int:\n        return max(problems[start_index:end_index + 1])\n\n    def get_total_profit(day_schedule: List[int]) -> int:\n        total_profit = 0\n        for start_index, end_index in zip(day_schedule[:-1], day_schedule[1:]):\n            total_profit += get_profit(start_index, end_index)\n        return total_profit\n\n    def backtracking_solve(index: int, k: int, day_schedule: List[int]) -> None:\n        if k == 1:\n            day_schedule.append(index)\n            max_profit = get_total_profit(day_schedule)\n            if max_profit > total_max_profit:\n                total_max_profit = max_profit\n                best_schedule = day_schedule.copy()\n            return\n\n        for j in range(index, n):\n            day_schedule.append(j)\n            backtracking_solve(j + 1, k - 1, day_schedule)\n            day_schedule.pop()\n\n    total_max_profit = 0\n    best_schedule = []\n    backtracking_solve(0, k, [])\n\n    profit_per_day = [get_profit(start_index, end_index) for start_index, end_index in zip(best_schedule[:-1], best_schedule[1:])]\n\n    return str(total_max_profit) + \"\\n\" + \" \".join(map(str, profit_per_day))\n\n\ndef"
    },
    {
        "number": 4091,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    difficulties = list(map(int, stdin.split()[2:]))\n\n    # Calculate the maximum profit for each day\n    max_profit = [0] * k\n    for i in range(n):\n        for j in range(min(k, n - i)):\n            max_profit[j] = max(max_profit[j], difficulties[i] + (max_profit[j - 1] if j > 0 else 0))\n\n    # Calculate the total profit\n    total_profit = max_profit[-1]\n\n    # Find the distribution of problems\n    distribution = [0] * k\n    i = n - 1\n    j = k - 1\n    while j >= 0:\n        if max_profit[j] == total_profit:\n            distribution[j] = i + 1\n            total_profit -= difficulties[i]\n            i -= 1\n        j -= 1\n\n    return str(total_profit) + \"\\n\" + \" \".join(map(str, distribution))\n"
    },
    {
        "number": 4091,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    # Calculate the total profit for each day\n    total_profit = [0] * k\n    for i in range(n):\n        for j in range(k):\n            if i >= j * (n // k) and i < (j + 1) * (n // k):\n                total_profit[j] += a[i]\n\n    # Calculate the maximum total profit\n    max_profit = max(total_profit)\n\n    # Calculate the number of problems to solve for each day\n    t = [0] * k\n    for i in range(n):\n        for j in range(k):\n            if i >= j * (n // k) and i < (j + 1) * (n // k):\n                t[j] += 1\n\n    # Calculate the remaining problems to solve\n    remaining = n - sum(t)\n\n    # Distribute the remaining problems among days with the maximum profit\n    for j in range(k):\n        if total_profit[j] == max_profit:\n            t[j] += remaining // k\n            remaining -= remaining // k\n\n    # If there are remaining problems, distribute them among days with the maximum profit\n    if remaining > 0:\n        for j in range(k):\n            if total_profit[j] == max_profit:\n                t[j] += remaining\n                remaining -= remaining\n\n    return str(max_profit) + \"\\n\" + \" \".join(map(str, t))"
    },
    {
        "number": 4091,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    difficulties = list(map(int, stdin.split()[2:]))\n\n    def profit(problems: List[int]) -> int:\n        return max(difficulties[l:r]) if l < r else 0\n\n    dp = [[0] * (n + 1) for _ in range(k + 1)]\n\n    for j in range(1, k + 1):\n        for i in range(1, n + 1):\n            dp[j][i] = dp[j][i - 1]\n            if j == 1 or i - j >= 1:\n                dp[j][i] = max(dp[j][i], dp[j - 1][i - j] + profit(list(range(i - j, i))))\n\n    max_profit = dp[k][n]\n    result = []\n\n    j, i = k, n\n    while j > 0:\n        if dp[j][i] != dp[j - 1][i]:\n            result.append(i - j + 1)\n            j -= 1\n            i -= j\n\n    return str(max_profit) + \"\\n\" + \" \".join(map(str, result))"
    },
    {
        "number": 4091,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    # Calculate the maximum profit possible for each day\n    profit = [0] * n\n    for i in range(n):\n        for j in range(i, n):\n            profit[j] = max(profit[j], a[i] + (a[j+1:j+1+k-i] if j+1+k-i < n else []))\n\n    # Find the maximum total profit and the corresponding distribution\n    total_profit = max(profit)\n    distribution = []\n    count = 0\n    for i in range(n):\n        if profit[i] == total_profit:\n            distribution.append(i - count)\n            count = i\n    distribution.append(n - count)\n\n    # Print the results\n    return f\"{total_profit}\\n{' '.join(map(str, distribution))}\""
    },
    {
        "number": 4091,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    \n    # Calculate the maximum profit for each day\n    max_profit = [0] * k\n    for i in range(k):\n        max_profit[i] = max(a[:n-i*(n//k)])\n    \n    # Calculate the total profit\n    total_profit = sum(max_profit)\n    \n    # Calculate the number of problems for each day\n    problems_per_day = []\n    for i in range(k):\n        problems_per_day.append(a.count(max_profit[i]))\n    \n    # Print the results\n    return str(total_profit) + \"\\n\" + \" \".join(map(str, problems_per_day))"
    },
    {
        "number": 4091,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    # Calculate the maximum possible total profit and the distribution\n    total_profit = 0\n    distribution = [0] * k\n    for i in range(k):\n        max_profit = 0\n        problems_count = 0\n        for j in range(i * n // k, (i + 1) * n // k):\n            if a[j] > max_profit:\n                max_profit = a[j]\n            problems_count += 1\n        distribution[i] = problems_count\n        total_profit += max_profit\n\n    # Print the result\n    result = f\"{total_profit}\\n\" + \" \".join(map(str, distribution))\n    return result"
    },
    {
        "number": 4091,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, input().split()))\n    a_sorted = sorted(a, reverse=True)\n    t_sum = sum(a_sorted)\n    t_sum_per_day = t_sum // k\n    result = []\n    remaining = []\n\n    for i, num in enumerate(a_sorted):\n        if i < k - 1:\n            result.append(t_sum_per_day)\n        else:\n            remaining.append(num)\n\n    result[-1] += sum(remaining)\n\n    return str(sum(result)) + \"\\n\" + \" \".join(map(str, result))"
    },
    {
        "number": 4091,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    # Initialize dp[i][j] as the maximum profit achievable with i problems and j days left\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n\n    # Fill the dp table\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1] + a[i - 1])\n\n    # Initialize t[i] as the number of problems to solve in the i-th day\n    t = [0] * k\n\n    # Backtrack to find the distribution\n    i, j = n, k\n    while i > 0 and j > 0:\n        if dp[i][j] == dp[i - 1][j]:\n            i -= 1\n        else:\n            t[j - 1] += 1\n            i -= 1\n            j -= 1\n\n    return str(dp[n][k]) + \"\\n\" + \" \".join(map(str, t))"
    },
    {
        "number": 4091,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    \n    # Initialize the dp table with zeros\n    dp = [[0] * (n+1) for _ in range(n+1)]\n    \n    # Fill the dp table\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i <= j:\n                dp[i][j] = max(dp[i-1][j], a[i-1] + dp[i-1][j-1])\n    \n    # Initialize the result list\n    result = [0] * k\n    \n    # Calculate the total profit\n    total_profit = dp[n][n]\n    \n    # Calculate the number of problems for each day\n    j = n\n    for i in range(k-1, -1, -1):\n        profit = dp[j][j]\n        while profit > dp[j-1][j-1]:\n            j -= 1\n            result[i] += 1\n        total_profit -= profit\n    \n    # Print the results\n    return str(total_profit) + \"\\n\" + \" \".join(map(str, result))"
    },
    {
        "number": 4092,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().split()))\n\n    # Initialize variables\n    prefix_sum = [0] * (n + 1)\n    prefix_sum[0] = 1\n\n    # Calculate prefix sum\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + a[i - 1]\n\n    # Find subsegments with sum 0\n    min_insertions = n\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            if prefix_sum[j] - prefix_sum[i - 1] == 0:\n                min_insertions = min(min_insertions, j - i + 1)\n\n    return str(min_insertions)"
    },
    {
        "number": 4092,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    arr = list(map(int, input().split()))\n\n    min_insertions = 0\n    i = 0\n\n    while i < n:\n        if arr[i] == 0:\n            min_insertions += 1\n        else:\n            j = i + 1\n            while j < n and arr[j] != 0:\n                j += 1\n            if j == n:\n                break\n            if arr[i] * arr[j] == 0:\n                min_insertions += 1\n            else:\n                min_insertions += abs(arr[i]) // abs(arr[j]) + abs(arr[j]) // abs(arr[i])\n        i = j\n\n    return str(min_insertions)"
    },
    {
        "number": 4092,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    min_insertions = float('inf')\n    for i in range(n - 1):\n        if a[i] > 0 and a[i + 1] < 0:\n            min_insertions = min(min_insertions, abs(a[i]) + abs(a[i + 1]))\n        elif a[i] < 0 and a[i + 1] > 0:\n            min_insertions = min(min_insertions, abs(a[i]) + abs(a[i + 1]))\n        elif a[i] > 0 and a[i + 1] > 0:\n            min_insertions = min(min_insertions, abs(a[i]) + abs(a[i + 1]))\n        elif a[i] < 0 and a[i + 1] < 0:\n            min_insertions = min(min_insertions, abs(a[i]) + abs(a[i + 1]))\n\n    return str(min_insertions)"
    },
    {
        "number": 4092,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    min_insertions = n\n\n    for i in range(n):\n        current_sum = 0\n        for j in range(i, n):\n            current_sum += a[j]\n            if current_sum == 0:\n                min_insertions = min(min_insertions, j - i - 1)\n\n    return str(min_insertions)\n"
    },
    {
        "number": 4092,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    min_insertions = 0\n    i = 0\n    j = 1\n    while j < n:\n        if a[j] != 0:\n            if a[i] + a[j] == 0:\n                min_insertions += 1\n            i = j\n            j += 1\n        else:\n            j += 1\n            \n    return str(min_insertions)"
    },
    {
        "number": 4092,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1:]))\n    \n    max_negative = -10**9\n    min_positive = 10**9\n    \n    for i in range(n):\n        if arr[i] == 0:\n            return \"Can't be done\"\n        if arr[i] < 0:\n            max_negative = max(max_negative, arr[i])\n        else:\n            min_positive = min(min_positive, arr[i])\n    \n    min_negative_sum = max_negative * (n + 1)\n    max_positive_sum = min_positive * (n + 1)\n    \n    min_inserted = max(min_negative_sum, max_positive_sum) + 1\n    \n    return str(min_inserted)\n\ninput_str = input(\"Enter the input: \")\nprint(solution(input_str)) "
    },
    {
        "number": 4092,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    min_insertions = float('inf')\n    for i in range(n):\n        for j in range(i+2, n+1):\n            subarray = a[i:j]\n            if sum(subarray) == 0:\n                min_insertions = min(min_insertions, len(subarray) - 1)\n\n    return str(min_insertions)\n\n\ndef"
    },
    {
        "number": 4092,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    count = 0\n    for i in range(1, n):\n        if a[i] + a[i - 1] == 0:\n            count += 1\n\n    return str(count)\n\ninput_str = input()\nn = int(input_str.split()[0])\na = list(map(int, input_str.split()[1:]))\n\nprint(solution(input_str)) "
    },
    {
        "number": 4092,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    array = list(map(int, stdin.splitlines()[1].split()))\n\n    min_insertions = float('inf')\n\n    for i in range(n - 1):\n        if array[i] * array[i + 1] == 0:\n            min_insertions = 0\n            break\n\n    if min_insertions == float('inf'):\n        min_insertions = 0\n\n    return str(min_insertions)"
    },
    {
        "number": 4092,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    array = list(map(int, stdin.readline().split()))\n    \n    min_insertions = float('inf')\n    for i in range(n):\n        current_sum = 0\n        for j in range(i, n):\n            current_sum += array[j]\n            if current_sum == 0:\n                min_insertions = min(min_insertions, j - i + 1)\n            if min_insertions == 0:\n                return 0\n    \n    return min_insertions\n"
    },
    {
        "number": 4093,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.strip().split('\\n')[0])\n    result = []\n\n    for i in range(test_cases):\n        n, m = map(int, stdin.strip().split('\\n')[i+1].split())\n        if n == 1:\n            result.append(str(abs(m)))\n        elif n == 2:\n            result.append(str(abs(m - m)))\n        else:\n            a = [m] * n\n            for i in range(n-1):\n                a[i] = m - (n-1) + i\n            result.append(str(sum([abs(a[i] - a[i+1]) for i in range(n-1)])))\n\n    return '\\n'.join(result)\n\n\ntest_input = '''5\n1 100\n2 2\n5 5\n2 1000000000\n1000000000 1000000000\n'''\nprint(solution(test_input)) "
    },
    {
        "number": 4093,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def max_sum_of_abs_diff(n: int, m: int) -> int:\n        if n == 1:\n            return 0\n        if n == 2:\n            return max(m, 2 * m)\n        if n == 3:\n            return max(m, 2 * m)\n        if n == 4:\n            return max(m, 2 * m)\n        if n == 5:\n            return max(m, 2 * m)\n        if m < n:\n            return m\n        if m == n:\n            return m\n        if m % n == 0:\n            return m * n\n        if m % n == 1:\n            return m * n - 1\n        if m % n == 2:\n            return m * n - 2\n        if m % n == 3:\n            return m * n - 3\n        if m % n == 4:\n            return m * n - 4\n        if m % n == 5:\n            return m * n - 5\n        if m % n == 6:\n            return m * n - 6\n        if m % n == 7:\n            return m * n - 7\n        if m % n == 8:\n            return m * n - 8\n        if m % n == 9:\n            return m * n - 9\n\n    t = int(stdin.split()[0])\n    results = []\n\n    for _ in range(t):\n        n, m = map(int, stdin.split())\n        result = max_sum_of_abs_diff(n, m)\n        results.append(result)\n\n    return \"\\n\".join(map(str, results))"
    },
    {
        "number": 4093,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    results = []\n\n    for _ in range(t):\n        n, m = map(int, stdin.readline().split())\n        a = [0] * n\n        a[0] = m\n        for i in range(1, n):\n            a[i] = m - i * (m // n)\n        results.append(sum(abs(a[i] - a[i + 1]) for i in range(n - 1)))\n\n    return \"\\n\".join(map(str, results))"
    },
    {
        "number": 4093,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    test_cases = int(stdin.splitlines()[0])\n    results = []\n    \n    for i in range(test_cases):\n        n, m = map(int, stdin.splitlines()[i+1].split())\n        \n        # Create the array with the maximum sum of absolute differences\n        a = [m] * n\n        a[0] = 0\n        \n        # Calculate the maximum sum of absolute differences\n        result = sum(abs(a[i] - a[i+1]) for i in range(n-1))\n        \n        results.append(result)\n    \n    # Print the results\n    return \"\\n\".join(map(str, results))"
    },
    {
        "number": 4093,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    output = []\n    cases = int(stdin.strip().split(\"\\n\")[0])\n\n    for i in range(1, cases + 1):\n        n, m = map(int, stdin.strip().split(\"\\n\")[i].split())\n\n        if n == 1:\n            output.append(\"0\")\n        elif n == 2:\n            output.append(str(abs(m - 0)))\n        elif n == 3:\n            output.append(str(max(abs(m - 2 * 0), abs(m - 1 * 0 - 1 * 0))))\n        else:\n            output.append(str(min(max(abs(m - (n // 2) * (n // 2) + (n // 2) * (m - n // 2 * (n // 2)), abs(m - (n // 2) * (n // 2 - 1) + (n // 2) * (m - n // 2 * (n // 2 - 1))), abs(m - (n // 2) * (n // 2) + (n // 2 - 1) * (m - n // 2 * (n // 2))), abs(m - (n // 2) * (n // 2 - 1) + (n // 2 - 1) * (m - n // 2 * (n // 2 - 1))))), abs(m - (n // 2) * (n // 2) + (n // 2 - 1) * (m - n // 2 * (n // 2))), abs(m - (n // 2) * (n // 2 - 1) + (n // 2) * (m - n // 2 * (n // 2 - 1))), abs(m - (n // 2) * (n // 2 - 1) + (n // 2 - 1) * (m - n // 2 * (n // 2 - 1))), abs(m - (n // 2) * (n // 2) + (n // 2 - 1) * (m - n // 2 * (n // 2 - 1)) + 1) * 0)))))\n\n    return \"\\n\".join(output)"
    },
    {
        "number": 4093,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.strip().split(\"\\n\")[0])\n    output = []\n\n    for i in range(1, test_cases + 1):\n        n, m = map(int, stdin.strip().split(\"\\n\")[i].split())\n        a = []\n\n        if n == 1:\n            a.append(m)\n        else:\n            a = [m // n] * n\n            a[-1] += m % n\n\n        result = sum(abs(a[i] - a[i + 1]) for i in range(n - 1))\n        output.append(str(result))\n\n    return \"\\n\".join(output)\n"
    },
    {
        "number": 4093,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    output = []\n    for t in range(1, int(lines[0]) + 1):\n        n, m = map(int, lines[t].split())\n        if n == 1:\n            output.append(str(m))\n        elif m == 0:\n            output.append(str(0))\n        elif n == 2:\n            if m == 2:\n                output.append(str(2))\n            else:\n                output.append(str(m))\n        else:\n            # Find the maximum possible value of the sum of absolute differences\n            max_diff = -1\n            for i in range(m + 1):\n                for j in range(m + 1):\n                    if i + j == m:\n                        curr_diff = abs(i - j)\n                        if curr_diff > max_diff:\n                            max_diff = curr_diff\n            output.append(str(max_diff))\n    return \"\\n\".join(output)"
    },
    {
        "number": 4093,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    result = []\n\n    for _ in range(t):\n        n, m = map(int, stdin.split())\n        if n == 1:\n            result.append(str(m))\n        else:\n            if m == 0:\n                a = [m] * n\n            elif m % n == 0:\n                a = [m // n] * n\n            else:\n                a = [m // n + 1] * (m % n) + [m // n] * (n - m % n)\n\n            a.sort(reverse=True)\n            result.append(str(sum(abs(a[i] - a[i + 1]) for i in range(n - 1))))\n\n    return \"\\n\".join(result)\n"
    },
    {
        "number": 4093,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.splitlines()\n    t = int(input_lines[0])\n    result = []\n\n    for i in range(1, t + 1):\n        n, m = map(int, input_lines[i].split())\n        if n == 1:\n            result.append(str(m))\n        elif n == 2:\n            result.append(str(max(m - 1, m - 2)))\n        else:\n            result.append(str(m // n))\n\n    return \"\\n\".join(result)"
    },
    {
        "number": 4093,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    result = []\n\n    for _ in range(t):\n        n, m = map(int, stdin.split())\n        if n == 1:\n            result.append(0)\n        elif n == 2:\n            result.append(2)\n        elif n == 3:\n            result.append(2)\n        elif n == 4:\n            result.append(4)\n        elif n == 5:\n            result.append(10)\n        else:\n            result.append(m // n)\n\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 4094,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.strip())\n    sequence = []\n    for i in range(1, 1000001):\n        sequence.append(str(7 * i))\n    for index, element in enumerate(sequence):\n        if int(element) % K == 0:\n            return str(index + 1)\n    return \"-1\""
    },
    {
        "number": 4094,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    sequence = [7, 77, 777, 7777, 77777, 777777, 7777777, 77777777, 777777777, 7777777777, 77777777777, 777777777777, 7777777777777, 77777777777777, 777777777777777, 7777777777777777, 77777777777777777, 777777777777777777, 777777777777777779]\n    for index, num in enumerate(sequence):\n        if num % k == 0:\n            return str(index)\n    return \"-1\" "
    },
    {
        "number": 4094,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    count = 0\n    i = 1\n    while True:\n        if i % k == 0:\n            return str(count + 1)\n        count += 1\n        i *= 10"
    },
    {
        "number": 4094,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    position = -1\n    for i in range(1, 10**6):\n        if 7**i % K == 0:\n            position = i\n            break\n    return str(position)"
    },
    {
        "number": 4094,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    i = 1\n    while True:\n        if i * K % 10 == 0:\n            return str(i)\n        i += 1\n    return \"-1\""
    },
    {
        "number": 4094,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    count = 0\n    i = 1\n    found = False\n    while not found:\n        if i % K == 0:\n            found = True\n        else:\n            count += 1\n            i *= 10\n            if i >= K:\n                return -1\n    return count + 1"
    },
    {
        "number": 4094,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.strip())\n    sequence = [7, 77, 777]\n    for i, num in enumerate(sequence):\n        if num % K == 0:\n            return str(i + 1)\n    return \"-1\""
    },
    {
        "number": 4094,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    seq = [7]\n    result = -1\n    i = 0\n\n    while True:\n        next_num = seq[-1] * 10 + 7\n        if next_num % K == 0:\n            result = i + 1\n            break\n        seq.append(next_num)\n        i += 1\n\n    return str(result)"
    },
    {
        "number": 4094,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    position = -1\n    for i in range(1, 10**6):\n        if i % K == 0:\n            position = i\n            break\n    return str(position)"
    },
    {
        "number": 4094,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.strip())\n    sequence = [7]\n    for i in range(1, 1000000):\n        sequence.append(sequence[-1]*10 + 7)\n        if sequence[-1] % K == 0:\n            return str(sequence.index(sequence[-1]) + 1)\n    return \"-1\""
    },
    {
        "number": 4095,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    p = list(map(int, stdin.split()[2:]))\n\n    def median(l, r):\n        return sorted(p[l-1:r])[r-l//2]\n\n    count = 0\n    for l in range(1, n+1):\n        for r in range(l, n+1):\n            if median(l, r) == m:\n                count += 1\n\n    return str(count)"
    },
    {
        "number": 4095,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    p = list(map(int, stdin.split()[2:]))\n\n    def median(l: int, r: int) -> int:\n        if (r - l + 1) % 2 == 0:\n            return (p[l] + p[r - 1]) // 2\n        else:\n            return p[l + (r - l) // 2]\n\n    count = 0\n    for l in range(n):\n        for r in range(l, n):\n            if median(l, r) == m:\n                count += 1\n\n    return str(count)\n\n\ndef"
    },
    {
        "number": 4095,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    p = list(map(int, input().split()))\n    count = 0\n    \n    p.sort()\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if m == p[i+(j-i-1)//2]:\n                count += 1\n                \n    return str(count)"
    },
    {
        "number": 4095,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    p = list(map(int, stdin.split()[2:]))\n\n    def find_pairs(p: list, m: int) -> int:\n        pairs_count = 0\n        for l in range(n):\n            for r in range(l + 1, n + 1):\n                if len(p[l:r]) % 2 == 1:\n                    median = sorted(p[l:r])[(len(p[l:r]) - 1) // 2]\n                else:\n                    median = (sorted(p[l:r])[len(p[l:r]) // 2 - 1] + sorted(p[l:r])[len(p[l:r]) // 2]) / 2\n                if median == m:\n                    pairs_count += 1\n        return pairs_count\n\n    return str(find_pairs(p, m))"
    },
    {
        "number": 4095,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    p = list(map(int, stdin.split()[2:]))\n    count = 0\n\n    for l in range(1, n + 1):\n        for r in range(l, n + 1):\n            if sorted(p[l - 1:r])[len(p) // 2] == m:\n                count += 1\n\n    return str(count)\n\ndef"
    },
    {
        "number": 4095,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    p = list(map(int, stdin.split()[2:]))\n    \n    def find_median(l, r):\n        if r - l == 1:\n            return p[l]\n        if r - l == 2:\n            return min(p[l], p[l+1])\n        \n        mid = (l + r) // 2\n        return find_median(l, mid) if p[mid] >= p[mid+1] else find_median(mid, r)\n\n    count = 0\n    for l in range(n):\n        for r in range(l+1, n+1):\n            if find_median(l, r) == m:\n                count += 1\n    \n    return str(count)\n\ndef"
    },
    {
        "number": 4095,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def get_median(arr, left, right, target):\n        n = right - left + 1\n        if n % 2 == 1:\n            return arr[left + n // 2 - 1] == target\n        else:\n            return arr[left + n // 2 - 1] <= target <= arr[left + n // 2]\n\n    n, m = list(map(int, stdin.split()))\n    p = list(map(int, stdin.split()))\n\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if get_median(p, i, j - 1, m):\n                count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4095,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    p = list(map(int, stdin.split()[2:]))\n    \n    count = 0\n    \n    for l in range(1, n+1):\n        for r in range(l+1, n+1):\n            median = sorted(p[l-1:r])[(r-l)//2]\n            if median == m:\n                count += 1\n                \n    return str(count)"
    },
    {
        "number": 4095,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    p = list(map(int, stdin.split()))[n+1:]\n    \n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            median = get_median(p[i:j])\n            if median == m:\n                count += 1\n                \n    return str(count)\n\ndef"
    },
    {
        "number": 4095,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    p = list(map(int, stdin.split()[2:]))\n    \n    count = 0\n    for l in range(n):\n        for r in range(l, n):\n            median = sorted(p[l:r+1])[len(p)//2]\n            if median == m:\n                count += 1\n    \n    return str(count)\n\nstdin = input(\"Enter the values of n and m separated by space: \")\nresult = solution(stdin)\nprint(\"The number of pairs of indices is:\", result) "
    },
    {
        "number": 4096,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    cups = list(map(int, stdin.split()))\n    if sum(cups) < m:\n        return -1\n\n    if n == 1 and cups[0] >= m:\n        return 1\n\n    cups.sort(reverse=True)\n    days = 1\n    total_pages = 0\n    for cup in cups:\n        if cup == 0:\n            continue\n        if total_pages + cup >= m:\n            return days\n        total_pages += cup\n        days += 1\n\n    return -1"
    },
    {
        "number": 4096,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, input().split()))\n    \n    # Check if it is possible to write the coursework\n    for cup in a:\n        if cup < m:\n            return \"-1\"\n    \n    # Calculate the minimum number of days\n    min_days = 0\n    max_pages_left = m\n    for cup in a:\n        max_pages_left -= cup\n        if max_pages_left < 0:\n            return \"-1\"\n        if max_pages_left > 0:\n            min_days += 1\n    \n    return str(min_days)\n\n\ninput_data = input()\nprint(solution(input_data)) "
    },
    {
        "number": 4096,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    cups = list(map(int, stdin.split()[2:]))\n    \n    # Check if it's impossible to finish the coursework\n    if max(cups) < m:\n        return \"-1\"\n    \n    # Initialize variables\n    days_needed = 0\n    pages_written = 0\n    total_pages = 0\n    \n    # Iterate through the cups of coffee\n    for cup in cups:\n        # Calculate the number of pages that can be written with this cup\n        pages_to_write = min(m - pages_written, cup)\n        \n        # Update the total number of pages written\n        pages_written += pages_to_write\n        \n        # If we've written the whole coursework, break out of the loop\n        if pages_written == m:\n            break\n        \n        # If we've written more than half of the coursework, add a day\n        if pages_written >= m / 2:\n            days_needed += 1\n    \n    # If we've not written the whole coursework, add a day and try again\n    if pages_written < m:\n        days_needed += 1\n    \n    return str(days_needed)"
    },
    {
        "number": 4096,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def can_write(days: int, cups: List[int], m: int) -> bool:\n        page_count = 0\n        for day in range(days):\n            for cup in cups:\n                if cup > day:\n                    break\n                pages = max(0, cup - day)\n                page_count += pages\n                if page_count >= m:\n                    return True\n        return False\n\n    n, m = map(int, stdin.split()[0].split())\n    cups = list(map(int, stdin.split()[1].split()))\n\n    for days in range(1, m + 1):\n        if can_write(days, cups, m):\n            return str(days)\n\n    return \"-1\"\n"
    },
    {
        "number": 4096,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))[n:]\n\n    def drink_coffee(page_goal: int, days_left: int, a_index: int) -> int:\n        if days_left == 0 or a_index == n:\n            return page_goal\n\n        if page_goal <= 0:\n            return page_goal\n\n        if a_index == n:\n            return page_goal\n\n        page_goal -= a[a_index]\n        days_left -= 1\n        return drink_coffee(page_goal, days_left, a_index + 1)\n\n    days = 0\n    while True:\n        page_goal = m\n        days_left = days\n        a_index = 0\n        if drink_coffee(page_goal, days_left, a_index) >= 0:\n            return str(days)\n        days += 1\n\n    return \"-1\"\n\n\ninput_str = input()\nn, m = map(int, input_str.split())\na = list(map(int, input_str.split()))[n:]\n\nprint(solution(input_str)) "
    },
    {
        "number": 4096,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, input().split()))\n\n    if m <= 0:\n        return \"-1\"\n\n    def write_pages(a_list, days):\n        pages_written = 0\n        for cup in a_list:\n            pages_written += min(days, cup)\n            days -= cup\n            if days <= 0:\n                break\n        return pages_written\n\n    days = 0\n    while True:\n        days += 1\n        pages_written = write_pages(a, m)\n        if pages_written >= m:\n            return str(days)\n        elif days >= 1000000:\n            return \"-1\""
    },
    {
        "number": 4096,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, input().split()))\n    \n    max_pages = sum(a)\n    if max_pages < m:\n        return -1\n    \n    days = 0\n    current_pages = 0\n    current_cups = 0\n    \n    while current_pages < m:\n        days += 1\n        for cup in a:\n            if cup > 0 and current_cups < n:\n                pages = min(cup, m - current_pages)\n                current_pages += pages\n                cup -= pages\n            current_cups += 1\n    \n    return days if current_pages >= m else -1"
    },
    {
        "number": 4096,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    cups_of_coffee = list(map(int, stdin.split()))\n\n    def write_pages(num_cups: int) -> int:\n        pages_written = 0\n        for i in range(num_cups):\n            pages_written += min(cups_of_coffee[i], m - pages_written)\n        return pages_written\n\n    total_pages = 0\n    for i in range(n):\n        total_pages += write_pages(i + 1)\n\n    if total_pages >= m:\n        return str(total_pages // m)\n    else:\n        return \"-1\"\n\ninput_data = input()\nn, m = map(int, input_data.split())\ncups_of_coffee = list(map(int, input_data.split()))\nprint(solution(input_data)) "
    },
    {
        "number": 4096,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    # Precalculate the maximum pages that can be written in each day\n    max_pages_each_day = []\n    for i in range(m):\n        max_pages_each_day.append(sum(a[j] - j for j in range(n) if a[j] - j >= i))\n\n    # Check if the coursework can be completed in one day\n    if sum(max_pages_each_day) >= m:\n        return \"1\"\n\n    # Check if the coursework can be completed in two days\n    if max_pages_each_day[0] + sum(max_pages_each_day[1:]) >= m:\n        return \"2\"\n\n    # If the coursework cannot be completed in one or two days, it is impossible\n    return \"-1\"\n"
    },
    {
        "number": 4096,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    \n    def write(pages, caffeine):\n        if pages == 0:\n            return True\n        if caffeine == 0:\n            return False\n        return write(pages - 1, caffeine - 1) or write(pages, caffeine - 1)\n\n    for i in range(n):\n        if write(m, a[i]):\n            return str(m // a[i]) if m % a[i] == 0 else str(m // a[i] + 1)\n    return \"-1\"\n\ndef"
    },
    {
        "number": 4097,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    b = list(map(int, stdin.split()[1:]))\n\n    if n == 1 or n == 2:\n        return str(0)\n\n    b_diff = [b[i] - b[i - 1] for i in range(1, n)]\n    unique_diff = list(set(b_diff))\n\n    if len(unique_diff) != 1:\n        return str(-1)\n\n    min_changes = 0\n    for i in range(1, n):\n        if b[i] - b[i - 1] != unique_diff[0]:\n            min_changes += 1\n\n    return str(min_changes)"
    },
    {
        "number": 4097,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    b = list(map(int, stdin.split()[1:]))\n\n    def is_arithmetic_progression(seq: list) -> bool:\n        if len(seq) <= 2:\n            return True\n        diff = seq[1] - seq[0]\n        for i in range(1, len(seq) - 1):\n            if seq[i + 1] - seq[i] != diff:\n                return False\n        return True\n\n    def min_changes_to_make_arithmetic_progression(seq: list) -> int:\n        if not seq:\n            return 0\n        if len(seq) == 1 or is_arithmetic_progression(seq):\n            return 0\n\n        min_changes = float('inf')\n        for i in range(len(seq)):\n            for j in range(2):\n                new_seq = seq.copy()\n                new_seq[i] += (-1) ** j\n                if is_arithmetic_progression(new_seq):\n                    min_changes = min(min_changes, 1)\n                else:\n                    min_changes = min(min_changes, min_changes_to_make_arithmetic_progression(new_seq))\n        return min_changes\n\n    if is_arithmetic_progression(b):\n        return \"0\"\n    return str(min_changes_to_make_arithmetic_progression(b))\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4097,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def is_arithmetic_progression(seq: List[int]) -> bool:\n        if len(seq) <= 2:\n            return True\n        diff = seq[1] - seq[0]\n        for i in range(1, len(seq) - 1):\n            if seq[i + 1] - seq[i] != diff:\n                return False\n        return True\n\n    def change_elements(seq: List[int], max_changes: int) -> int:\n        if not seq or len(seq) == 1:\n            return 0\n        if max_changes == 0:\n            return -1\n\n        seq.sort()\n        diff = seq[1] - seq[0]\n        min_changes = float('inf')\n\n        for i in range(1, len(seq) - 1):\n            if seq[i + 1] - seq[i] == diff:\n                continue\n\n            new_diff = seq[i + 1] - seq[i]\n            left_changes = max_changes - (i - 1)\n\n            if left_changes >= 2:\n                if new_diff > diff:\n                    seq[i] += 1\n                    seq[i + 1] += 1\n                else:\n                    seq[i] -= 1\n                    seq[i + 1] -= 1\n                min_changes = min(min_changes, change_elements(seq, max_changes - 2))\n                seq[i] -= 1\n                seq[i + 1] -= 1\n\n        return min_changes\n\n    n = int(stdin.split()[0])\n    seq = list(map(int, stdin.split()[1:]))\n\n    if not seq or len(seq) == 1:\n        return str(0)\n\n    max_changes = n\n    while max_changes >= 0:\n        if is_arithmetic_progression(seq):\n            return str(max_changes)\n        max_changes -= 1\n\n    return str(-1)\n"
    },
    {
        "number": 4097,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    b = list(map(int, stdin.split()[1:]))\n    min_count = 0\n\n    # Check if the sequence is already an arithmetic progression\n    for i in range(len(b) - 1):\n        if b[i + 1] - b[i] != b[1] - b[0]:\n            break\n        min_count += 1\n    else:\n        return str(min_count)\n\n    # Find the longest arithmetic subsequence\n    max_length = 1\n    for i in range(len(b) - 1):\n        count = 1\n        for j in range(i + 1, len(b)):\n            if b[j] - b[i] == b[1] - b[0]:\n                count += 1\n            else:\n                break\n        max_length = max(max_length, count)\n\n    if max_length < n:\n        return \"-1\"\n\n    # Find the minimum number of elements to change\n    for i in range(len(b) - 1):\n        if b[i + 1] - b[i] != b[1] - b[0]:\n            break\n        min_count += 1\n    else:\n        return str(min_count)\n\n    for i in range(len(b) - 1, -1, -1):\n        if b[i] + 1 <= b[1] + n - 2 * min_count:\n            min_count += 1\n        elif b[i] - 1 >= b[1] - n + 2 * min_count:\n            min_count += 1\n        else:\n            break\n\n    return str(min_count)"
    },
    {
        "number": 4097,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    b = list(map(int, stdin.readline().strip().split()))\n\n    min_changes = n + 1\n    for i in range(2**n):\n        changes = 0\n        new_sequence = [x for x in b]\n        for j in range(n):\n            if (i >> j) & 1:\n                changes += 1\n                if new_sequence[j] > 0:\n                    new_sequence[j] -= 1\n                else:\n                    new_sequence[j] += 1\n        if is_arithmetic_progression(new_sequence):\n            min_changes = min(min_changes, changes)\n\n    return str(min_changes) if min_changes != n + 1 else \"-1\"\n\n\ndef"
    },
    {
        "number": 4097,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_arithmetic_progression(sequence: List[int]) -> bool:\n        diff = sequence[1] - sequence[0]\n        for i in range(2, len(sequence)):\n            if sequence[i] - sequence[i - 1] != diff:\n                return False\n        return True\n\n    def min_changes_to_make_arithmetic_progression(sequence: List[int]) -> int:\n        if len(sequence) == 1:\n            return 0\n\n        max_diff = max(sequence) - min(sequence)\n        diff_to_change = 0\n        for i in range(1, len(sequence)):\n            diff = sequence[i] - sequence[i - 1]\n            if diff != 1:\n                diff_to_change += 1\n\n        return min(diff_to_change, max_diff)\n\n    n = int(stdin.readline().strip())\n    sequence = list(map(int, stdin.readline().strip().split()))\n\n    if is_arithmetic_progression(sequence):\n        print(0)\n    else:\n        min_changes = min_changes_to_make_arithmetic_progression(sequence)\n        if min_changes == 0:\n            print(-1)\n        else:\n            print(min_changes)"
    },
    {
        "number": 4097,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    b = list(map(int, stdin.split()[1:]))\n\n    def is_arithmetic_progression(sequence: List[int]) -> bool:\n        if len(sequence) == 1 or len(sequence) == 2:\n            return True\n\n        diff = sequence[1] - sequence[0]\n        for i in range(2, len(sequence)):\n            if sequence[i] - sequence[i - 1] != diff:\n                return False\n\n        return True\n\n    def min_changes(sequence: List[int]) -> int:\n        def helper(sequence: List[int], index: int) -> int:\n            if index == len(sequence):\n                return 0\n\n            min_count = float(\"inf\")\n            for i in range(len(sequence)):\n                if i != index:\n                    new_sequence = sequence.copy()\n                    new_sequence[index] = new_sequence[index] + new_sequence[i] - sequence[i]\n                    new_sequence[i] = sequence[i]\n                    min_count = min(min_count, helper(new_sequence, index + 1))\n\n            return min_count\n\n        return helper(sequence, 0)\n\n    if not is_arithmetic_progression(b):\n        return str(min_changes(b))\n    else:\n        return \"0\"\n\ninput_str = input(\"Enter the sequence: \")\noutput = solution(input_str)\nprint(output) "
    },
    {
        "number": 4097,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    sequence = list(map(int, stdin.split()[1:]))\n    \n    def is_arithmetic_progression(sequence):\n        if len(sequence) <= 1:\n            return True\n        diff = sequence[1] - sequence[0]\n        for i in range(2, len(sequence)):\n            if sequence[i] - sequence[i-1] != diff:\n                return False\n        return True\n\n    def min_changes_to_arithmetic_progression(sequence):\n        min_changes = 0\n        for i in range(1, len(sequence)):\n            diff = sequence[i] - sequence[i-1]\n            if diff == 0:\n                continue\n            if diff > 1:\n                min_changes += diff - 1\n            elif diff < 0:\n                min_changes += abs(diff)\n        return min_changes\n\n    if not is_arithmetic_progression(sequence):\n        return str(min_changes_to_arithmetic_progression(sequence))\n    else:\n        return \"0\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    b = list(map(int, stdin.split()[1:]))\n\n    if n == 1 or n == 2:\n        return str(0)\n\n    min_changes = n\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            diff = b[j] - b[i]\n            if diff > 1:\n                min_changes = min(min_changes, diff - 1)\n            elif diff < 1:\n                min_changes = min(min_changes, 1 - diff)\n\n    return str(-1) if min_changes == n else str(min_changes)\n"
    },
    {
        "number": 4097,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_arithmetic_progression(sequence: List[int]) -> bool:\n        if len(sequence) <= 2:\n            return True\n        diff = sequence[1] - sequence[0]\n        for i in range(2, len(sequence)):\n            if sequence[i] - sequence[i - 1] != diff:\n                return False\n        return True\n\n    def min_changes_to_make_ap(sequence: List[int]) -> int:\n        min_changes = 0\n        for i in range(len(sequence) - 1):\n            diff = sequence[i + 1] - sequence[i]\n            if diff == 0 or diff == 1:\n                continue\n            if sequence[i] == 0:\n                min_changes += 1\n                continue\n            if diff > 1:\n                min_changes += diff - 1\n            else:\n                min_changes += 1\n        return min_changes\n\n    n = int(stdin.readline())\n    sequence = list(map(int, stdin.readline().split()))\n\n    if n < 1 or n > 100000:\n        return -1\n\n    for b in sequence:\n        if b < 1 or b > 1000000000:\n            return -1\n\n    if is_arithmetic_progression(sequence):\n        return 0\n\n    return min_changes_to_make_ap(sequence)\n\ndef"
    },
    {
        "number": 4098,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_balanced(team):\n        return max(team) - min(team) <= 5\n\n    def count_balanced_teams(students, k):\n        n = len(students)\n        count = 0\n        for i in range(n):\n            team = [students[i]]\n            for j in range(i+1, n):\n                team.append(students[j])\n                if len(team) == 2 and is_balanced(team):\n                    count += 1\n                    if count >= k:\n                        return count\n                elif len(team) == 3 and is_balanced(team):\n                    count += 1\n                    if count >= k:\n                        return count\n        return count\n\n    n, k = map(int, stdin.split())\n    students = list(map(int, stdin.split()))[n+1:]\n    return str(count_balanced_teams(students, k))"
    },
    {
        "number": 4098,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    skills = list(map(int, input().split()))\n    \n    def is_balanced(team):\n        return max(team) - min(team) <= 5\n    \n    def is_valid(teams):\n        return len(teams) <= k and all(is_balanced(team) for team in teams)\n    \n    def max_students_in_teams(teams):\n        return sum(len(team) for team in teams)\n    \n    def solve(i, teams):\n        if i == n:\n            return max_students_in_teams(teams)\n        else:\n            max_students = 0\n            for j in range(len(teams)):\n                teams[j].append(skills[i])\n                if is_valid(teams):\n                    max_students = max(max_students, solve(i + 1, teams))\n                teams[j].pop()\n            return max_students\n    \n    def solve_max(teams):\n        max_students = 0\n        for i in range(n):\n            teams.append([skills[i]])\n            if is_valid(teams):\n                max_students = max(max_students, solve(i + 1, teams))\n            teams.pop()\n        return max_students\n    \n    return str(solve_max([]))"
    },
    {
        "number": 4098,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    a.sort()\n    count = 1\n    max_count = 0\n\n    for i in range(len(a) - 1):\n        if a[i + 1] - a[i] <= 5:\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 1\n\n    max_count = max(max_count, count)\n\n    if max_count > k:\n        return \"No solution\"\n    else:\n        return str(max_count)"
    },
    {
        "number": 4098,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    skills = list(map(int, input().split()))\n\n    skills.sort()\n    teams = []\n\n    def find_balanced_teams(start: int, end: int, min_diff: int) -> int:\n        if end - start + 1 <= min_diff:\n            return 0\n        if end - start + 1 <= k:\n            return end - start + 1\n\n        for i in range(min_diff, end - start + 1):\n            team1_size = find_balanced_teams(start, start + i - 1, min_diff)\n            team2_size = find_balanced_teams(start + i, end, max(i - min_diff, 1))\n            if team1_size == 0 or team2_size == 0:\n                continue\n            total_size = team1_size + team2_size\n            if total_size > k:\n                continue\n            return total_size\n        return 0\n\n    start = 0\n    min_diff = 5\n    while start < len(skills):\n        end = start\n        while end < len(skills) and skills[end] - skills[start] <= min_diff:\n            end += 1\n        if end - start + 1 > k:\n            min_diff += 1\n        else:\n            teams.append(find_balanced_teams(start, end - 1, min_diff))\n            start = end\n            min_diff = 5\n\n    return str(max(teams))"
    },
    {
        "number": 4098,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    students = list(map(int, stdin.split()[2:]))\n\n    # sort students by skill level\n    students.sort()\n\n    # initialize variables\n    result = 0\n    max_teams = min(n, k)\n    min_teams = 1\n\n    while min_teams <= max_teams:\n        # try to create a team with the current number of teams\n        current_teams = min_teams\n        current_students = 0\n        current_team = []\n\n        for i in range(n):\n            # add student to the current team\n            current_team.append(students[i])\n            current_students += 1\n\n            # if the team is full, add it to the result\n            if len(current_team) == current_teams:\n                current_team.sort()\n                for j in range(len(current_team) - 1):\n                    if current_team[j + 1] - current_team[j] > 5:\n                        break\n                else:\n                    result = max(result, current_students)\n                current_team = []\n\n        # if the team is not full, add the remaining students to a new team\n        if current_team:\n            result = max(result, current_students)\n            current_team.sort()\n            for i in range(len(current_team) - 1):\n                if current_team[i + 1] - current_team[i] > 5:\n                    break\n            else:\n                result = max(result, current_students)\n\n        # update min_teams and max_teams\n        if current_students == result:\n            max_teams = min_teams - 1\n        else:\n            min_teams += 1\n\n    return str(result)"
    },
    {
        "number": 4098,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    students = list(map(int, input().split()))\n    students.sort()\n    min_skill = students[0]\n    max_skill = students[-1]\n    max_students = 0\n\n    for i in range(1, min(k, n) + 1):\n        team_size = n // i\n        if team_size * 2 <= n:\n            max_students = max(max_students, team_size)\n\n        if i < k:\n            for j in range(min_skill, max_skill + 1, 5):\n                if j < students[team_size - 1] and students[team_size - 1] - j <= 5:\n                    team_size += 1\n                    max_students = max(max_students, team_size)\n\n    return str(max_students)"
    },
    {
        "number": 4098,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    # Sort students by their programming skill\n    a.sort()\n\n    # Initialize variables to keep track of the maximum number of students in balanced teams\n    max_num_students = 0\n    num_students = 0\n\n    # Loop through the sorted programming skills\n    for i in range(n):\n        # Check if adding the current student to the current team will result in a balanced team\n        if i == 0 or abs(a[i] - a[i - 1]) <= 5:\n            # Add the current student to the current team\n            num_students += 1\n            # Check if the current team has more than one student and is not full\n            if num_students > 1 and (i + 1 == n or abs(a[i] - a[i + 1]) > 5):\n                # Check if adding the current team to the list of teams will result in no more than k teams\n                if k > 0:\n                    # Add the current team to the list of teams\n                    k -= 1\n                    max_num_students += num_students\n                    # Reset the number of students in the current team\n                    num_students = 0\n                else:\n                    # No more teams allowed, break the loop\n                    break\n\n    return str(max_num_students)"
    },
    {
        "number": 4098,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    students = list(map(int, input().split()))\n\n    students.sort()\n    count = 0\n    result = 0\n    i = 0\n\n    while i < n:\n        count += 1\n        j = i + 1\n        while j < n and abs(students[j] - students[i]) <= 5:\n            count += 1\n            j += 1\n        if count >= k:\n            result = max(result, count)\n            count = 0\n        i = j\n\n    return str(result)\n\n\ndef"
    },
    {
        "number": 4098,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    a.sort()\n    teams = []\n\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if a[j] - a[i] <= 5:\n                teams.append((i, j))\n\n    if not teams:\n        return str(n)\n\n    max_students = 0\n    for i in range(len(teams)):\n        for j in range(i + 1, len(teams)):\n            team_a, team_b = teams[i], teams[j]\n            if (team_b[1] - team_a[0] - 1) // 2 <= k - 2:\n                max_students = max(max_students, team_a[1] - team_a[0] + team_b[1] - team_b[0] - 1)\n\n    return str(max_students)\n"
    },
    {
        "number": 4098,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    students = list(map(int, stdin.split()[2:]))\n\n    students.sort(reverse=True)\n    teams = []\n    min_team_size = n // k\n    max_team_size = n // k + 1\n\n    for size in range(min_team_size, max_team_size + 1):\n        for i in range(0, len(students) - size + 1, size):\n            team = students[i:i + size]\n            if all(abs(team[i] - team[j]) <= 5 for i in range(len(team)) for j in range(i + 1, len(team))):\n                teams.append(team)\n\n    return str(sum(sum(team) for team in teams))\n\n\ninput_str = \"5 2\\n1 2 15 15 15\"\nprint(solution(input_str)) "
    },
    {
        "number": 4099,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M, *A = map(int, stdin.split())\n    total_score = sum(A) + K\n    avg_score = total_score / N\n\n    if avg_score >= M:\n        return \"0\"\n    else:\n        return str(int(M - avg_score) * K)"
    },
    {
        "number": 4099,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split()[:3])\n    prev_scores = list(map(int, stdin.split()[3:]))\n    \n    avg_prev = sum(prev_scores) / len(prev_scores)\n    avg_required = (m - avg_prev) / (n - len(prev_scores))\n    \n    if avg_required <= 0:\n        return str(int(avg_required))\n    else:\n        return str(int(avg_required))"
    },
    {
        "number": 4099,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    N, K, M = int(input_list[0]), int(input_list[1]), int(input_list[2])\n    A = [int(x) for x in input_list[3:]]\n    total_points = sum(A) + K - A[-1]\n    avg = total_points / N\n    if avg >= M:\n        return -1\n    else:\n        return int(M - avg)"
    },
    {
        "number": 4099,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    N, K, M, *scores = map(int, stdin.split())\n\n    # Calculate the average score of the exams already taken\n    average_score = sum(scores) / N\n\n    # Calculate the minimum number of points required on the final subject\n    min_points_required = max(0, K * (N - M) - (N - 1) * average_score)\n\n    # Check if the goal is achievable\n    if min_points_required > K:\n        print(-1)\n    else:\n        print(min_points_required)"
    },
    {
        "number": 4099,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split()[:3])\n    a = list(map(int, stdin.split()[3:]))\n\n    total_points = sum(a)\n    avg_points = total_points / n\n\n    if avg_points >= m:\n        return str(k - 1)\n\n    min_points = k - total_points\n    avg_after_min_points = (total_points + min_points) / n\n\n    if avg_after_min_points >= m:\n        return str(min_points)\n    else:\n        return \"-1\""
    },
    {
        "number": 4099,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split()[:3])\n    prev_scores = list(map(int, stdin.split()[3:]))\n    total_score = sum(prev_scores)\n    avg_score = total_score / n\n    min_score = (m - avg_score) * k\n    \n    if min_score < 0:\n        return -1\n    else:\n        return int(min_score)\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4099,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M, *scores = map(int, stdin.split())\n    \n    total_score = sum(scores)\n    avg_score = total_score / (N - 1)\n    \n    if avg_score >= M:\n        return \"-1\"\n    \n    min_points = max(0, M - avg_score)\n    max_points = (M * (N - 1) + total_score) / N\n    \n    return str(int(min_points)) if min_points <= max_points else \"-1\""
    },
    {
        "number": 4099,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n, k, m = map(int, stdin.split()[:3])\n    a_i = list(map(int, stdin.split()[3:]))\n\n    # Calculate average score without final subject\n    average = sum(a_i) / (n - 1)\n\n    # Calculate minimum points required on final subject\n    if average >= m:\n        return -1  # goal is already achieved\n    else:\n        return int((m - average) * k) + 1  # round up to the nearest integer"
    },
    {
        "number": 4099,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def calculate_average(scores):\n        return sum(scores) / len(scores)\n\n    def is_goal_achievable(average_score, goal):\n        return average_score >= goal\n\n    def minimum_score_to_achieve_goal(remaining_scores, goal, current_average):\n        required_score = goal * (N - len(remaining_scores)) - current_average\n        return max(0, required_score)\n\n    input_list = [int(x) for x in stdin.split()]\n    N, K, M = input_list[:3]\n    scores = input_list[3:]\n\n    average_score = calculate_average(scores)\n\n    if not is_goal_achievable(average_score, M):\n        return \"-1\"\n\n    remaining_scores = [K - x for x in scores]\n    return str(minimum_score_to_achieve_goal(remaining_scores, M, average_score))"
    },
    {
        "number": 4099,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M = map(int, stdin.split()[:3])\n    A = list(map(int, stdin.split()[3:]))\n    \n    total_score = sum(A)\n    avg_score = total_score / N\n    \n    if avg_score >= M:\n        return \"0\"\n    \n    if N == 1:\n        if avg_score >= M:\n            return \"0\"\n        else:\n            return \"-1\"\n    \n    min_points_required = int((M - avg_score) * K / (N - 1))\n    return str(min_points_required)"
    },
    {
        "number": 4100,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, q, *answers = map(int, stdin.split())\n    players_scores = [k] * n\n    \n    for answer in answers:\n        for i in range(n):\n            if i != answer - 1:\n                players_scores[i] -= 1\n    \n    return \"\\n\".join(\"Yes\" if score > 0 else \"No\" for score in players_scores)"
    },
    {
        "number": 4100,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n_players, initial_score, num_questions = map(int, input().split())\n    answers = list(map(int, input().split()))\n    scores = [initial_score] * n_players\n    \n    for answer in answers:\n        scores[answer-1] -= 1\n    \n    return \"\\n\".join(\"Yes\" if score > 0 else \"No\" for score in scores)"
    },
    {
        "number": 4100,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n, k, q = map(int, lines[0].split())\n    a = list(map(int, lines[1:]))\n    scores = [k] * n\n\n    for i in a:\n        scores[i - 1] -= 1\n\n    for i in range(n):\n        if scores[i] < 1:\n            scores[i] = 0\n\n    return \"\\n\".join(\"Yes\" if s > 0 else \"No\" for s in scores)"
    },
    {
        "number": 4100,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, q, *answers = map(int, stdin.split())\n    scores = [k] * n\n    \n    for a in answers:\n        scores[a-1] -= 1\n        \n    survived = [i+1 for i, score in enumerate(scores) if score >= 0]\n    result = [\"Yes\" if i in survived else \"No\" for i in range(1, n+1)]\n    \n    return \"\\n\".join(result)\n\nstdin = \"6 3 4\\n3\\n1\\n3\\n2\\n\"\nprint(solution(stdin)) "
    },
    {
        "number": 4100,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def is_survived(player_id: int, scores: List[int], answers: List[int]) -> bool:\n        for answer in answers:\n            if answer == player_id:\n                for i in range(len(scores)):\n                    if i != player_id - 1:\n                        scores[i] -= 1\n        return scores[player_id - 1] > 0\n\n    n, k, q = map(int, stdin.split()[0:3])\n    players_answers = list(map(int, stdin.split()[3:]))\n    players_scores = [k] * n\n\n    result = []\n    for i in range(1, n + 1):\n        if is_survived(i, players_scores, players_answers):\n            result.append(\"Yes\")\n        else:\n            result.append(\"No\")\n\n    return \"\\n\".join(result)\n\ninput_str = \"6 3 4\\n3\\n1\\n3\\n2\"\nprint(solution(input_str)) "
    },
    {
        "number": 4100,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, q, *answers = map(int, stdin.split())\n    scores = [k] * n\n    \n    for i, answer in enumerate(answers, 1):\n        for j in range(n):\n            if j != answer - 1:\n                scores[j] -= 1\n    \n    return \"\\n\".join(\"Yes\" if score > 0 else \"No\" for score in scores)"
    },
    {
        "number": 4100,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, k, q = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split('\\n', 1)[1:]]\n\n    # initialize players' scores\n    scores = [k] * n\n\n    # process answers\n    for player in a:\n        scores[player - 1] += 1\n        for i in range(n):\n            if i != player - 1:\n                scores[i] -= 1\n\n    # determine survivors\n    survivors = []\n    for i in range(n):\n        if scores[i] >= 0:\n            survivors.append(i + 1)\n\n    # output result\n    result = [\"No\"] * n\n    for survivor in survivors:\n        result[survivor - 1] = \"Yes\"\n    return \"\\n\".join(result)"
    },
    {
        "number": 4100,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, k, q = map(int, lines[0].split())\n    answers = list(map(int, lines[1:]))\n    scores = [k] * n\n    \n    for answer in answers:\n        scores[answer-1] -= 1\n        for i in range(n):\n            if i != answer-1:\n                scores[i] -= 1\n    \n    result = \"\"\n    for i in range(1, n+1):\n        if scores[i-1] >= 0:\n            result += \"Yes\\n\"\n        else:\n            result += \"No\\n\"\n    \n    return result\n\ndef"
    },
    {
        "number": 4100,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q, *answers = map(int, stdin.split())\n    scores = [K] * N\n    \n    for answer in answers:\n        scores[answer - 1] -= 1\n    \n    return '\\n'.join(['Yes' if s >= 0 else 'No' for s in scores])\n\ninput_str = \"6 3 4\\n3\\n1\\n3\\n2\"\nprint(solution(input_str)) "
    },
    {
        "number": 4100,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q = map(int, stdin.split()[:3])\n    A_list = list(map(int, stdin.split()[3:]))\n    \n    players_scores = [K] * N\n    for A_i in A_list:\n        players_scores[A_i-1] -= 1\n    \n    return '\\n'.join(['Yes' if score >= 0 else 'No' for score in players_scores])"
    },
    {
        "number": 4101,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, m = map(int, lines[0].split())\n    a = []\n    for i in range(1, n + 1):\n        row = list(map(int, lines[i].split()))\n        a.append(row)\n\n    def is_sorted(matrix):\n        flat_matrix = [matrix[i][j] for i in range(n) for j in range(m)]\n        return all(flat_matrix[i] <= flat_matrix[i + 1] for i in range(len(flat_matrix) - 1))\n\n    def invert_rows(matrix, rows):\n        for row in rows:\n            matrix[row] = [1 - matrix[row][j] for j in range(m)]\n        return matrix\n\n    def invert_columns(matrix, columns):\n        inverted_matrix = []\n        for row in matrix:\n            inverted_row = [1 - row[j] for j in range(m)]\n            inverted_matrix.append(inverted_row)\n        for j in columns:\n            inverted_matrix = [inverted_matrix[i][:j] + inverted_matrix[i][j+1:] for i in range(n)]\n        return inverted_matrix\n\n    def is_sorted_after_operations(matrix):\n        sorted_matrix = invert_rows(matrix, [0])\n        if not is_sorted(sorted_matrix):\n            sorted_matrix = invert_columns(matrix, [0])\n        if not is_sorted(sorted_matrix):\n            sorted_matrix = invert_rows(sorted_matrix, [0, 1])\n        if not is_sorted(sorted_matrix):\n            sorted_matrix = invert_columns(sorted_matrix, [0, 1])\n        return is_sorted(sorted_matrix)\n\n    sorted_matrix = is_sorted_after_operations(a)\n    if sorted_matrix:\n        rows = ''.join(['0' if i % 2 == 0 else '1' for i in range(n)])\n        columns = ''.join(['0' if j % 2 == 0 else '1' for j in range(m)])\n        return \"YES\\n\" + rows + \"\\n\" + columns\n    else:\n        return \"NO\""
    },
    {
        "number": 4101,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.split()[2 + i*m: 2 + (i+1)*m])))\n    \n    if not sorted(a):\n        return \"NO\"\n    \n    row_inversion = \"\"\n    col_inversion = \"\"\n    \n    for i in range(n):\n        if a[i] != sorted(a[i]):\n            row_inversion += \"1\"\n            for j in range(m):\n                a[i][j] = 1 - a[i][j]\n        else:\n            row_inversion += \"0\"\n    \n    for j in range(m):\n        if a[0][j] == 0:\n            col_inversion += \"1\"\n        else:\n            col_inversion += \"0\"\n    \n    return \"YES\\n\" + row_inversion + \"\\n\" + col_inversion"
    },
    {
        "number": 4101,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    a = [list(map(int, line.split())) for line in stdin.split()[2:]]\n    \n    # Check if the matrix is sorted\n    sorted_matrix = all(a[i][j] <= a[i][j+1] for i in range(n) for j in range(m-1))\n    \n    if not sorted_matrix:\n        # Matrix is not sorted, find the operations to sort it\n        r = []\n        c = []\n        inverted_rows = set()\n        inverted_cols = set()\n        \n        for i in range(n):\n            if a[i] not in inverted_rows:\n                inverted_rows.add(a[i])\n                r.append('1')\n            else:\n                inverted_rows.remove(a[i])\n                r.append('0')\n        \n        for j in range(m):\n            col = [a[i][j] for i in range(n)]\n            if col not in inverted_cols:\n                inverted_cols.add(col)\n                c.append('1')\n            else:\n                inverted_cols.remove(col)\n                c.append('0')\n        \n        return 'YES\\n' + ''.join(r) + '\\n' + ''.join(c)\n    \n    else:\n        # Matrix is already sorted\n        return 'NO'"
    },
    {
        "number": 4101,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    matrix = [list(map(int, line.split())) for line in stdin.split('\\n')[1:n+1]]\n    sorted_matrix = sorted(sum(matrix, []))\n    is_sorted = all(sorted_matrix[i] <= sorted_matrix[i+1] for i in range(len(sorted_matrix)-1))\n\n    if not is_sorted:\n        return \"NO\"\n\n    row_inversion = [0] * n\n    col_inversion = [0] * m\n\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 0:\n                row_inversion[i] = 1 - row_inversion[i]\n                col_inversion[j] = 1 - col_inversion[j]\n\n    return \"YES\\n\" + \"\".join(map(str, row_inversion)) + \"\\n\" + \"\".join(map(str, col_inversion))"
    },
    {
        "number": 4101,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def check_sorted(a: List[List[int]]) -> bool:\n        flattened = [a[i][j] for i in range(len(a)) for j in range(len(a[0]))]\n        return all(flattened[i] <= flattened[i + 1] for i in range(len(flattened) - 1))\n\n    def invert_row(a: List[List[int]], i: int) -> List[List[int]]:\n        a[i] = [1 - a[i][j] for j in range(len(a[0]))]\n        return a\n\n    def invert_column(a: List[List[int]], j: int) -> List[List[int]]:\n        for i in range(len(a)):\n            a[i][j] = 1 - a[i][j]\n        return a\n\n    lines = stdin.split(\"\\n\")\n    n, m = map(int, lines[0].split())\n    a = [[int(x) for x in lines[i + 1].split()] for i in range(n)]\n\n    if not check_sorted(a):\n        return \"NO\"\n\n    row_ops = \"\".join(\"1\" if a[i][0] == 1 else \"0\" for i in range(n))\n    col_ops = \"\".join(\"1\" if a[0][j] == 1 else \"0\" for j in range(m))\n\n    return \"YES\\n\" + row_ops + \"\\n\" + col_ops"
    },
    {
        "number": 4101,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, stdin.split()[2:m+2])))\n\n    def is_sorted(matrix):\n        for i in range(n):\n            for j in range(m):\n                if matrix[i][j] > matrix[i][j+1]:\n                    return False\n        return True\n\n    def invert_row(matrix, row):\n        for j in range(m):\n            matrix[row][j] = 1 - matrix[row][j]\n\n    def invert_column(matrix, column):\n        for i in range(n):\n            matrix[i][column] = 1 - matrix[i][column]\n\n    def sort_matrix(matrix):\n        operations = []\n        for i in range(n):\n            invert_row(matrix, i)\n            operations.append(\"1\")\n        for j in range(m):\n            invert_column(matrix, j)\n            operations.append(\"0\")\n        return operations\n\n    if is_sorted(matrix):\n        return \"YES\\n\" + \"\".join(sort_matrix(matrix))\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def is_sorted(matrix: List[List[int]]) -> bool:\n        flattened = [matrix[i][j] for i in range(len(matrix)) for j in range(len(matrix[0]))]\n        return all(flattened[i] <= flattened[i + 1] for i in range(len(flattened) - 1))\n\n    def invert(matrix: List[List[int]], row_or_col: str, index: int) -> None:\n        if row_or_col == \"row\":\n            matrix[index] = [1 - matrix[index][j] for j in range(len(matrix[0]))]\n        else:\n            for i in range(len(matrix)):\n                matrix[i][index] = 1 - matrix[i][index]\n\n    n, m = map(int, stdin.split()[0].split())\n    matrix = [[int(x) for x in stdin.split()[i + 1].split()] for i in range(n)]\n\n    if not is_sorted(matrix):\n        return \"NO\"\n\n    for i in range(n):\n        for j in range(m):\n            invert(matrix, \"row\", i)\n            invert(matrix, \"col\", j)\n            if is_sorted(matrix):\n                return \"YES\\n\" + \"\".join(map(str, [int(matrix[i][-1]) for i in range(n)])) + \"\\n\" + \"\".join(map(str, [int(matrix[-1][j]) for j in range(m)]))\n            invert(matrix, \"row\", i)\n            invert(matrix, \"col\", j)\n\n    return \"NO\""
    },
    {
        "number": 4101,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n, m = map(int, lines[0].split())\n    a = []\n\n    for i in range(1, n + 1):\n        row = list(map(int, lines[i].split()))\n        a.append(row)\n\n    def invert_row(i: int) -> None:\n        a[i - 1] = [1 - x for x in a[i - 1]]\n\n    def invert_column(j: int) -> None:\n        for i in range(n):\n            a[i][j - 1] = 1 - a[i][j - 1]\n\n    def is_sorted() -> bool:\n        sorted_a = [x for row in a for x in row]\n        return all(sorted_a[i] <= sorted_a[i + 1] for i in range(len(sorted_a) - 1))\n\n    for i in range(1, n + 1):\n        invert_row(i)\n        if is_sorted():\n            return \"YES\\n\" + \"1\" * n + \"\\n\" + \"1\" * m\n        invert_row(i)\n\n    for j in range(1, m + 1):\n        invert_column(j)\n        if is_sorted():\n            return \"YES\\n\" + \"0\" * n + \"\\n\" + \"1\" * m\n        invert_column(j)\n\n    return \"NO\""
    },
    {
        "number": 4101,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, m = map(int, lines[0].split())\n    a = [list(map(int, line.split())) for line in lines[1:]]\n\n    def sort_matrix(matrix):\n        for i in range(len(matrix)):\n            for j in range(len(matrix[i])):\n                matrix[i][j] = 1 - matrix[i][j]\n\n        for j in range(len(matrix[0])):\n            col = [matrix[i][j] for i in range(len(matrix))]\n            col.sort()\n            for i in range(len(matrix)):\n                matrix[i][j] = 1 - col[i]\n\n        for i in range(len(matrix)):\n            matrix[i].sort()\n\n    def is_sorted(matrix):\n        flat = [matrix[i][j] for i in range(len(matrix)) for j in range(len(matrix[i]))]\n        return all(flat[i] <= flat[i + 1] for i in range(len(flat) - 1))\n\n    sort_matrix(a)\n    if is_sorted(a):\n        row_inversion = ''.join('1' if i % 2 else '0' for i in range(n))\n        col_inversion = ''.join('1' if i % 2 else '0' for i in range(m))\n        return \"YES\\n\" + row_inversion + \"\\n\" + col_inversion\n    else:\n        return \"NO\"\n\ninput_string = \"\"\"2 2\n1 1\n0 1\"\"\"\nprint(solution(input_string))\n\ninput_string = \"\"\"3 4\n0 0 0 1\n0 0 0 0\n1 1 1 1\"\"\"\nprint(solution(input_string))\n\ninput_string = \"\"\"3 3\n0 0 0\n1 0 1\n1 1 0\"\"\"\nprint(solution(input_string)) "
    },
    {
        "number": 4101,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.split())))\n\n    sorted_matrix = sorted(a)\n    if sorted_matrix == a:\n        return \"YES\\n0\" * n + \"\\n0\" * m\n    else:\n        return \"NO\""
    },
    {
        "number": 4102,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    digits = set(stdin)\n    return \"Yes\" if len(digits) == len(stdin) else \"No\""
    },
    {
        "number": 4102,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    if n == 1:\n        return \"No\"\n\n    for i in range(n // 2):\n        if stdin[i] != stdin[n - i - 1]:\n            return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4102,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Check if the string has any repeating digits\n    for i in range(len(stdin)):\n        for j in range(i+1, len(stdin)):\n            if stdin[i] == stdin[j]:\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4102,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    nums = set()\n    for char in stdin:\n        if char in nums:\n            return \"Yes\"\n        nums.add(char)\n    return \"No\""
    },
    {
        "number": 4102,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    if num % 2 == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4102,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) < 2:\n        return \"No\"\n\n    for i in range(1, len(stdin)):\n        if stdin[i] == stdin[i - 1]:\n            return \"Yes\"\n\n    return \"No\"\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4102,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) != len(set(stdin)):\n        return \"No\"\n    else:\n        return \"Yes\"\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4102,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if len(set(stdin)) < len(stdin) else \"No\""
    },
    {
        "number": 4102,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    return \"Yes\" if len(set(stdin)) == len(stdin) else \"No\""
    },
    {
        "number": 4102,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function takes a string of digits as input and returns \"Yes\" or \"No\" based on whether the digits in the string are all the same or not.\n\n    Args:\n    stdin (str): A string of digits\n\n    Returns:\n    str: \"Yes\" or \"No\"\n    \"\"\"\n    if len(set(stdin)) == 1:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4103,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    n, b, a, s = list(map(int, stdin.split()))\n    s = list(map(int, s.split()))\n    \n    # Initialize variables\n    max_segments = 0\n    current_battery = b\n    current_accumulator = a\n    current_segment = 0\n    \n    # Loop through all segments\n    while current_segment < n:\n        # Check if current segment is exposed\n        if s[current_segment] == 1:\n            # Increase accumulator if using battery\n            if current_battery > 0:\n                current_accumulator = min(current_accumulator + 1, a)\n                current_battery -= 1\n                max_segments += 1\n            # Else, try to use accumulator\n            else:\n                current_accumulator -= 1\n                current_segment += 1\n        # If current segment is not exposed\n        else:\n            # Use battery if possible\n            if current_battery > 0:\n                current_battery -= 1\n                max_segments += 1\n            # Else, use accumulator\n            else:\n                current_accumulator -= 1\n                current_segment += 1\n                \n        # Increase current segment\n        current_segment += 1\n        \n    return str(max_segments)"
    },
    {
        "number": 4103,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split()[:3])\n    s = list(map(int, stdin.split()[3:]))\n\n    max_segments = 0\n    battery_charge = b\n    accumulator_charge = a\n\n    for i in range(n):\n        if s[i] == 1 and accumulator_charge > 0:\n            accumulator_charge -= 1\n            battery_charge -= 1\n            max_segments += 1\n        elif battery_charge > 0:\n            battery_charge -= 1\n            max_segments += 1\n\n    return str(max_segments)\n"
    },
    {
        "number": 4103,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def simulate(n, b, a, segments) -> int:\n        current_battery = b\n        current_accumulator = a\n        segments_passed = 0\n        \n        for i, exposed in enumerate(segments):\n            if current_battery == 0:\n                if current_accumulator == 0:\n                    break\n                current_accumulator -= 1\n            current_battery -= 1\n            segments_passed += 1\n            \n            if exposed:\n                if current_accumulator == a:\n                    continue\n                current_accumulator += 1\n        \n        return segments_passed\n\n    n, b, a = map(int, stdin.split())\n    segments = list(map(int, input().split()))\n    \n    return str(simulate(n, b, a, segments))"
    },
    {
        "number": 4103,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, input().split())\n    s = list(map(int, input().split()))\n    \n    segments_passed = 0\n    accumulator_charged = 0\n    battery_used = 0\n    \n    for i in range(n):\n        if s[i] == 1:\n            accumulator_charged += 1\n            if accumulator_charged > a:\n                break\n            if battery_used == b:\n                break\n        else:\n            battery_used += 1\n            if battery_used > b:\n                break\n            if accumulator_charged == a:\n                break\n        \n        segments_passed += 1\n    \n    return str(segments_passed)\n\ndef"
    },
    {
        "number": 4103,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split()[:3])\n    s = list(map(int, stdin.split()[3:]))\n    \n    # Calculate the number of segments that can be passed using the battery\n    battery_segments = sum(1 for i in range(n) if s[i] == 0)\n    \n    # Calculate the number of segments that can be passed using the accumulator\n    accumulator_segments = sum(1 for i in range(n) if s[i] == 1)\n    \n    # Calculate the number of segments that can be passed using the battery and accumulator\n    battery_accumulator_segments = min(battery_segments, accumulator_segments)\n    \n    # Calculate the number of segments that can be passed using the accumulator only\n    accumulator_only_segments = accumulator_segments - battery_accumulator_segments\n    \n    # Calculate the maximum number of segments that can be passed\n    max_segments = battery_segments + accumulator_only_segments\n    \n    return str(max_segments)"
    },
    {
        "number": 4103,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split()[0].split())\n    s = list(map(int, stdin.split()[1].split()))\n\n    max_segments = 0\n    battery_charge = b\n    accumulator_charge = a\n\n    for i in range(n):\n        if s[i] == 1 and battery_charge > 0:\n            battery_charge -= 1\n            max_segments += 1\n        elif accumulator_charge > 0:\n            accumulator_charge -= 1\n            max_segments += 1\n        else:\n            break\n\n    return str(max_segments)"
    },
    {
        "number": 4103,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a, s = list(map(int, stdin.split()))\n    s = list(map(int, s.split()))\n    \n    max_segments = 0\n    accumulator_charge = 0\n    battery_charge = b\n    \n    for i in range(1, n):\n        if s[i]:\n            if accumulator_charge < a and battery_charge > 0:\n                accumulator_charge += 1\n                battery_charge -= 1\n                max_segments += 1\n            else:\n                break\n        else:\n            if battery_charge > 0:\n                battery_charge -= 1\n                max_segments += 1\n            else:\n                break\n                \n    return str(max_segments)"
    },
    {
        "number": 4103,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a, s = map(int, stdin.split())\n    s = list(map(int, s))\n    max_passed_segments = 0\n\n    for i in range(n):\n        if s[i] == 1:\n            a += 1\n        b -= 1\n        max_passed_segments += 1\n        if a > 0:\n            if b == 0:\n                a -= 1\n                b = n - i - 1\n            else:\n                b -= 1\n        else:\n            if b == 0:\n                break\n            else:\n                b -= 1\n\n    return str(max_passed_segments)"
    },
    {
        "number": 4103,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a, s = map(int, stdin.split())\n    s = list(map(int, s))\n\n    accumulator_used = 0\n    battery_used = 0\n    segments_passed = 0\n\n    for i in range(n):\n        if s[i] == 1:\n            if accumulator_used < a:\n                accumulator_used += 1\n            else:\n                if battery_used < b:\n                    battery_used += 1\n                else:\n                    break\n        else:\n            if accumulator_used < a:\n                accumulator_used += 1\n            else:\n                battery_used += 1\n        segments_passed += 1\n\n    return str(segments_passed)"
    },
    {
        "number": 4103,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split()[:3])\n    s = list(map(int, stdin.split()[3:]))\n    \n    max_segments = 0\n    accumulator_charge = a\n    battery_charge = b\n    \n    for i in range(n):\n        if s[i] == 1:\n            accumulator_charge += 1\n            if accumulator_charge > a:\n                accumulator_charge = a\n        \n        if battery_charge >= 1 and (s[i] == 0 or accumulator_charge > 0):\n            max_segments += 1\n            battery_charge -= 1\n            if s[i] == 1:\n                accumulator_charge -= 1\n            \n    return str(max_segments)"
    },
    {
        "number": 4104,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    result = eval(stdin)\n    if result < 0:\n        result = result * -1\n    return str(result)"
    },
    {
        "number": 4104,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Let's implement the buggy reference solution\n    # Here's the bug: it calculates the expression using Python's default integer arithmetic, which may produce unexpected results for large numbers\n    return str(eval(stdin))"
    },
    {
        "number": 4104,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    operators = [\"+\", \"-\"]\n    operands = stdin.split(\"-\" if \"-\" in stdin else \"+\")\n    result = int(operands[0])\n    \n    for i in range(1, len(operands)):\n        if i % 2 == 1:\n            result -= int(operands[i])\n        else:\n            result += int(operands[i])\n    \n    return str(result)"
    },
    {
        "number": 4104,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    result = eval(stdin)\n    return str(result)"
    },
    {
        "number": 4104,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stack = []\n    num = 0\n    sign = None\n\n    for c in stdin:\n        if c.isdigit():\n            num = num * 10 + int(c)\n        elif c == '-' or c == '+':\n            if sign is not None:\n                stack.append(sign)\n            sign = c\n        elif c == ' ':\n            stack.append(num)\n            num = 0\n            sign = None\n\n    if sign is not None:\n        stack.append(sign)\n    stack.append(num)\n\n    while len(stack) > 1:\n        x1 = stack.pop()\n        op = stack.pop()\n        x2 = stack.pop()\n        if op == '+':\n            stack.append(x1 + x2)\n        elif op == '-':\n            stack.append(x1 - x2)\n\n    return str(stack[0])\n\n\ninput_data = input()\noutput = solution(input_data)\nprint(output) "
    },
    {
        "number": 4104,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    from operator import add, sub\n\n    def eval_expression(expression: str) -> int:\n        stack = []\n        operators = {'+': add, '-': sub}\n        for token in re.findall(r'\\d+|\\+|\\-', expression):\n            if token.isdigit():\n                stack.append(int(token))\n            else:\n                if len(stack) < 2:\n                    return \"Invalid expression\"\n                b = stack.pop()\n                a = stack.pop()\n                op = operators[token]\n                stack.append(op(a, b))\n        return stack[0]\n\n    return str(eval_expression(stdin))"
    },
    {
        "number": 4104,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    expression = stdin.strip()\n    result = 0\n    \n    for i in range(len(expression)):\n        if expression[i] == '+':\n            result += int(expression[i-1])\n        elif expression[i] == '-':\n            result -= int(expression[i-1])\n        elif i == len(expression) - 1:\n            result += int(expression[i])\n    \n    return str(result)"
    },
    {
        "number": 4104,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stack = []\n    for c in stdin:\n        if c.isdigit():\n            stack.append(int(c))\n        else:\n            b = stack.pop()\n            a = stack.pop()\n            if c == \"+\":\n                stack.append(a + b)\n            elif c == \"-\":\n                stack.append(a - b)\n    return str(stack.pop())"
    },
    {
        "number": 4104,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stack = []\n    for char in stdin:\n        if char.isdigit():\n            stack.append(int(char))\n        elif char == '+':\n            stack.append(stack.pop() + stack.pop())\n        elif char == '-':\n            stack.append(-stack.pop() + stack.pop())\n    return str(stack.pop())\n\ndef"
    },
    {
        "number": 4104,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    expression = stdin\n    result = 0\n    sign = 1\n    for i in range(len(expression)):\n        if expression[i] == '+':\n            result += sign * int(expression[:i])\n            expression = expression[i+1:]\n            sign = 1\n        elif expression[i] == '-':\n            result += sign * int(expression[:i])\n            expression = expression[i+1:]\n            sign = -1\n    result += sign * int(expression)\n    return str(result)\n"
    },
    {
        "number": 4105,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    pairs = set()\n    for b in range(1, k+1):\n        for g in range(1, k+1):\n            if (b, g) not in pairs:\n                pairs.add((b, g))\n    \n    for i in range(1, n):\n        pairs.discard((pairs[i][0], pairs[i-1][1]))\n        pairs.discard((pairs[i][1], pairs[i-1][0]))\n    \n    if len(pairs) < n:\n        return \"NO\"\n    else:\n        return \"YES\\n\" + \"\\n\".join(f\"{b} {g}\" for b, g in pairs) "
    },
    {
        "number": 4105,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n > k:\n        return \"NO\"\n\n    def is_valid(colors: list) -> bool:\n        for i in range(n - 1):\n            if colors[i] == colors[i + 1] or (colors[i] == colors[i + 1] + 1) or (colors[i] == colors[i + 1] - 1):\n                return False\n        return True\n\n    def generate_colors(colors: list, index: int) -> bool:\n        if index == n:\n            return is_valid(colors)\n        for i in range(1, k + 1):\n            colors[index] = i\n            if generate_colors(colors, index + 1):\n                return True\n            colors[index] = 0\n        return False\n\n    colors = [0] * n\n    if generate_colors(colors, 0):\n        output = \"YES\\n\"\n        for i in range(n):\n            output += f\"{colors[i]} {colors[(i + 1) % n]}\\n\"\n        return output\n    else:\n        return \"NO\""
    },
    {
        "number": 4105,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    \n    # Check if n is even\n    if n % 2 != 0:\n        return \"NO\"\n    \n    # Create a list of all possible color combinations\n    color_combinations = [[i, j] for i in range(1, k+1) for j in range(1, k+1) if i != j]\n    \n    # Create a list of all possible pairs\n    all_pairs = list(zip(range(1, n+1), range(2, n+1)))\n    \n    # Check if there are enough unique pairs\n    if len(color_combinations) * len(all_pairs) < n:\n        return \"NO\"\n    \n    # Create a list of all possible combinations of pairs and colors\n    all_combinations = [color_combinations[i//len(all_pairs)] + list(all_pairs[i%len(all_pairs)]) for i in range(len(color_combinations) * len(all_pairs))]\n    \n    # Filter out invalid combinations\n    valid_combinations = [combination for combination in all_combinations if len(set(combination[2:])) == 2]\n    \n    # Check if there are enough valid combinations\n    if len(valid_combinations) < n:\n        return \"NO\"\n    \n    # Choose n valid combinations at random\n    chosen_combinations = random.sample(valid_combinations, n)\n    \n    # Convert the chosen combinations to the desired output format\n    output = \"\\n\".join([f\"{combination[2]-1} {combination[3]-1}\" for combination in chosen_combinations])\n    \n    return \"YES\\n\" + output "
    },
    {
        "number": 4105,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n\n    def is_valid(costumes: tuple) -> bool:\n        for i in range(n - 1):\n            if costumes[i] == costumes[i + 1]:\n                return False\n            if costumes[i] == k - costumes[i]:\n                return False\n        return True\n\n    for b in range(1, k + 1):\n        for g in range(1, k + 1):\n            if is_valid((b, g) + tuple(k - x for x in (b, g))[:n - 2]):\n                return \"YES\\n\" + \"\\n\".join(f\"{b} {g}\" for b, g in zip((b, g) + tuple(k - x for x in (b, g))[:n - 2]))\n    return \"NO\""
    },
    {
        "number": 4105,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k < 2:\n        return \"NO\"\n\n    def has_solution(n: int, k: int) -> bool:\n        if n < 2 or k < 2:\n            return False\n\n        colors = set(range(1, k + 1))\n        man_costumes = [0] * n\n        woman_costumes = [0] * n\n\n        def is_valid(i: int, color: int) -> bool:\n            if i < 0 or i >= n:\n                return False\n            if man_costumes[i] == color or woman_costumes[i] == color:\n                return False\n            if i > 0 and (man_costumes[i - 1] == color or woman_costumes[i - 1] == color):\n                return False\n            return True\n\n        def place_costume(i: int, man: bool) -> bool:\n            if i < 0 or i >= n:\n                return False\n            if man:\n                for color in colors:\n                    if is_valid(i, color):\n                        man_costumes[i] = color\n                        return place_costume(i - 1, False)\n                return False\n            else:\n                for color in colors:\n                    if is_valid(i, color):\n                        woman_costumes[i] = color\n                        return place_costume(i - 1, True)\n                return False\n\n        return place_costume(n - 1, False)\n\n    if has_solution(n, k):\n        result = [\"YES\"]\n        for i in range(n):\n            result.append(\"{} {}\".format(man_costumes[i], woman_costumes[i]))\n        return \"\\n\".join(result)\n    else:\n        return \"NO\""
    },
    {
        "number": 4105,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    colors = set(range(1, k + 1))\n\n    def is_valid_pair(pair: tuple) -> bool:\n        return pair[0] != pair[1] and pair[0] != pair[1] + n\n\n    def is_valid_color_combination(colors: list) -> bool:\n        for i in range(len(colors) - 1):\n            if colors[i] == colors[i + 1]:\n                return False\n        return True\n\n    def is_valid_adjacent_colors(colors: list) -> bool:\n        for i in range(len(colors) - 1):\n            if colors[i] == colors[i + 1]:\n                return False\n        return True\n\n    for b in colors:\n        for g in colors:\n            if b != g:\n                pairs = [(b, g)]\n                for _ in range(n - 1):\n                    pairs.append((pairs[-1][1], pairs[-1][0] + k))\n                if is_valid_color_combination(pairs) and is_valid_adjacent_colors(pairs):\n                    return \"YES\\n\" + \"\\n\".join(f\"{b} {g}\" for b, g in pairs)\n\n    return \"NO\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    if k >= n:\n        return \"NO\"\n\n    b_colors = list(range(1, k + 1))\n    g_colors = list(range(1, k + 1))\n\n    b_colors.sort(reverse=True)\n    g_colors.sort(reverse=True)\n\n    chosen_colors = []\n    for i in range(n):\n        if not b_colors or not g_colors:\n            return \"NO\"\n\n        b_color = b_colors.pop()\n        g_color = g_colors.pop()\n\n        chosen_colors.append((b_color, g_color))\n\n        if i == n - 2:\n            if b_color == chosen_colors[i + 1][0] or g_color == chosen_colors[i + 1][1]:\n                return \"NO\"\n\n        elif i == n - 1:\n            if b_color == chosen_colors[0][0] or g_color == chosen_colors[0][1]:\n                return \"NO\"\n\n        elif b_color == chosen_colors[i + 1][0] and g_color == chosen_colors[i + 1][1]:\n            return \"NO\"\n\n    return \"YES\\n\" + \"\\n\".join(f\"{b} {g}\" for b, g in chosen_colors)\n\n\ntest_cases = [\n    \"4 3\\n\",\n    \"10 4\\n\",\n    \"13 4\\n\"\n]\n\nfor test_case in test_cases:\n    print(solution(test_case)) "
    },
    {
        "number": 4105,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n <= 1:\n        return \"NO\"\n\n    def find_color(used_colors):\n        for color in range(1, k + 1):\n            if color not in used_colors:\n                return color\n        return None\n\n    colors = [0] * (n * 2)\n    used_colors = set()\n\n    for i in range(n):\n        colors[i * 2] = find_color(used_colors)\n        colors[i * 2 + 1] = find_color(used_colors)\n        used_colors.add(colors[i * 2])\n        used_colors.add(colors[i * 2 + 1])\n\n        if colors[i * 2] == colors[i * 2 + 1]:\n            return \"NO\"\n\n    for i in range(n):\n        if colors[i * 2] == colors[i * 2 + 2]:\n            return \"NO\"\n\n    for i in range(n):\n        if colors[i * 2] == colors[i * 2 + 2]:\n            return \"NO\"\n\n    for i in range(n - 1):\n        if colors[i * 2] == colors[i * 2 + 4]:\n            return \"NO\"\n\n    for i in range(n - 1):\n        if colors[i * 2 + 1] == colors[i * 2 + 3]:\n            return \"NO\"\n\n    return \"YES\\n\" + \"\\n\".join(f\"{colors[i]}\" for i in range(n * 2))\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4105,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n > 2 * 10**5 or k > 2 * 10**5:\n        return \"NO\"\n\n    if n > k:\n        return \"NO\"\n\n    used_costumes = set()\n    for i in range(n):\n        for b in range(1, k + 1):\n            for g in range(1, k + 1):\n                if i == 0 and (b, g) in used_costumes:\n                    continue\n                if i > 0 and ((b, g) == (b_prev, g_prev) or (b, g) == (b_prev, g_prev)):\n                    continue\n                if i > 1 and (b == b_prev or g == g_prev):\n                    continue\n                if i > 0 and (b == b_prev or g == g_prev):\n                    continue\n                used_costumes.add((b, g))\n                b_prev, g_prev = b, g\n                break\n            else:\n                continue\n            break\n        else:\n            return \"NO\"\n\n    b_costumes = [b for b, _ in used_costumes]\n    g_costumes = [g for _, g in used_costumes]\n\n    if len(used_costumes) != n:\n        return \"NO\"\n\n    return \"YES\" + \"\\n\" + \"\\n\".join(f\"{b} {g}\" for b, g in zip(b_costumes, g_costumes))"
    },
    {
        "number": 4105,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < 2 or n > 2 * 10**5 or k < 2 or k > 2 * 10**5:\n        return \"NO\"\n\n    def is_valid(b, g):\n        return b != g and all((b, g) != (b_i, g_i) for b_i, g_i in zip(b[:i], g[:i])) and all((b[i] != b_i, g[i] != g_i) for i, (b_i, g_i) in enumerate(zip(b, g))) and all((b[i] != b[i+1], g[i] != g[i+1]) for i in range(n-1))\n\n    for b in range(1, k+1):\n        for g in range(1, k+1):\n            if b == g:\n                continue\n            b_list = [b]\n            g_list = [g]\n            for i in range(1, n):\n                b_list.append(b_list[-1] + 1 if b_list[-1] != k else 1)\n                g_list.append(g_list[-1] + 1 if g_list[-1] != k else 1)\n            if is_valid(b_list, g_list):\n                for i in range(n):\n                    print(b_list[i], g_list[i])\n                return \"YES\"\n\n    return \"NO\"\n\n\ninput_str = input()\noutput = solution(input_str)\nprint(output) "
    },
    {
        "number": 4106,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    # Check if there is no way to satisfy all conditions\n    if x < k:\n        return \"-1\"\n\n    # Calculate the maximum sum of values of reposted pictures\n    a.sort(reverse=True)\n    total_sum = sum(a[:x])\n\n    # Check if there are segments with at least one repost\n    for i in range(n - x + 1):\n        if sum(a[i:i+k]) >= k:\n            return str(total_sum)\n\n    return \"-1\""
    },
    {
        "number": 4106,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, input().split())\n    a = list(map(int, input().split()))\n    \n    if x < k:\n        return -1\n    \n    a.sort(reverse=True)\n    total_sum = sum(a[:x])\n    return total_sum\n\ninput_data = \"5 2 3\\n5 1 3 10 1\"\nprint(solution(input_data)) # Output: 18\n\ninput_data = \"6 1 5\\n10 30 30 70 10 10\"\nprint(solution(input_data)) # Output: -1\n\ninput_data = \"4 3 1\\n1 100 1 1\"\nprint(solution(input_data)) # Output: 100 "
    },
    {
        "number": 4106,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split()[:3])\n    beauties = list(map(int, stdin.split()[3:]))\n    \n    # Check if there is no way to satisfy all conditions in the problem statement\n    if x > n:\n        return \"-1\"\n    \n    # Sort the beauties in descending order\n    beauties.sort(reverse=True)\n    \n    # Initialize variables\n    max_sum = 0\n    current_sum = 0\n    i = 0\n    j = 0\n    \n    while i < n:\n        if j < n and beauties[i] >= beauties[j]:\n            current_sum += beauties[i]\n            i += 1\n        else:\n            j += 1\n            if j >= k:\n                max_sum = max(max_sum, current_sum)\n                current_sum = 0\n                j = 0\n                \n    return str(max_sum) "
    },
    {
        "number": 4106,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split()[:3])\n    a = list(map(int, stdin.split()[3:]))\n\n    if x < k or x > n or k > n:\n        return \"-1\"\n\n    dp = [0] * (n + 1)\n    for i in range(n - k + 1):\n        dp[i + k] = max(dp[i + k], dp[i] + sum(a[i:i + k]))\n\n    for i in range(n - x + 1):\n        if dp[i + x] == 0:\n            return \"-1\"\n\n    return str(dp[n])"
    },
    {
        "number": 4106,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def check(k, x, a):\n        n = len(a)\n        if x > n:\n            return False\n        for i in range(0, n - x + 1, k):\n            if sum(a[i:i+x]) == 0:\n                return False\n        return True\n\n    n, k, x = map(int, stdin.split()[:3])\n    a = list(map(int, stdin.split()[3:]))\n\n    if not check(k, x, a):\n        return \"-1\"\n\n    a.sort(reverse=True)\n    max_sum = sum(a[:x])\n    return str(max_sum)"
    },
    {
        "number": 4106,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split()[:3])\n    a = list(map(int, stdin.split()[3:]))\n    \n    max_sum = -1\n    \n    for i in range(k, x + 1):\n        for j in range(n - i + 1):\n            current_sum = sum(a[j:j+i])\n            if current_sum > max_sum:\n                max_sum = current_sum\n    \n    return str(max_sum) if max_sum != -1 else \"-1\""
    },
    {
        "number": 4106,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def find_segments(arr, k):\n        segments = []\n        start = 0\n        for i in range(1, len(arr)):\n            if arr[i] != arr[i - 1]:\n                end = i\n                segments.append((start, end))\n                start = end\n        segments.append((start, len(arr)))\n        return segments\n\n    def max_sum(segments, x):\n        segments.sort(key=lambda s: s[1] - s[0], reverse=True)\n        total_sum = 0\n        for i, (start, end) in enumerate(segments):\n            if x == 0:\n                return total_sum\n            if i == len(segments) - 1:\n                total_sum += sum(arr[start:end])\n                x -= end - start\n            elif x >= end - start:\n                x -= end - start\n            else:\n                total_sum += sum(arr[start:start + x])\n                x = 0\n                break\n        return total_sum if x == 0 else -1\n\n    n, k, x = map(int, input().split())\n    arr = list(map(int, input().split()))\n\n    if x > n:\n        return -1\n\n    segments = find_segments(arr, k)\n    result = max_sum(segments, x)\n\n    return str(result)"
    },
    {
        "number": 4106,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split()[:3])\n    a = list(map(int, stdin.split()[3:]))\n    max_sum = 0\n\n    for i in range(n - x + 1):\n        segment = a[i:i+x]\n        if all(segment[j:j+k] == segment[:k] for j in range(len(segment)-k+1)):\n            max_sum = max(max_sum, sum(segment))\n\n    return str(max_sum) if max_sum != 0 else \"-1\"\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4106,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def can_repost(arr: List[int], k: int) -> bool:\n        n = len(arr)\n        if n < k:\n            return False\n        for i in range(n - k + 1):\n            if arr[i:i+k].count(1) >= 1:\n                return True\n        return False\n\n    n, k, x = map(int, stdin.split()[:3])\n    arr = list(map(int, stdin.split()[3:]))\n    memo = {}\n\n    def dp(i: int, x: int) -> int:\n        if (i, x) in memo:\n            return memo[(i, x)]\n        if i == n or x == 0:\n            return 0\n\n        memo[(i, x)] = max(dp(i + 1, x), arr[i] + dp(i + 1, x - 1))\n        return memo[(i, x)]\n\n    max_sum = 0\n    for i in range(n - k + 1):\n        if can_repost(arr[i:i+k], k):\n            max_sum = max(max_sum, dp(i, x))\n\n    return max_sum"
    },
    {
        "number": 4106,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(arr: List[int], k: int) -> bool:\n        count = 0\n        for i in range(len(arr)):\n            if arr[i]:\n                count += 1\n                if count >= k:\n                    return True\n            else:\n                count = 0\n        return False\n\n    def knapsack(arr: List[int], k: int) -> int:\n        dp = [0] * (k + 1)\n        for i in range(1, len(arr) + 1):\n            for j in range(k, 0, -1):\n                if j - arr[i - 1] >= 0:\n                    dp[j] = max(dp[j], dp[j - arr[i - 1]] + arr[i - 1])\n        return dp[k]\n\n    n, k, x = map(int, stdin.readline().split())\n    arr = list(map(int, stdin.readline().split()))\n    arr.sort(reverse=True)\n\n    if x > n:\n        return -1\n\n    if x >= k:\n        return sum(arr[:x])\n\n    if x + k > n:\n        return -1\n\n    if k == 1:\n        return sum(arr[:x])\n\n    if k > x:\n        return -1\n\n    dp = [False] * (n + 1)\n    dp[0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, min(i + 1, x + 1)):\n            if dp[i - j]:\n                dp[i] = True\n                break\n\n    if not is_valid(dp, k):\n        return -1\n\n    return knapsack(arr, x)"
    },
    {
        "number": 4107,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0].split())\n    s = stdin.split()[1]\n\n    def can_place_router(i: int) -> bool:\n        return s[i - 1] == '1'\n\n    def connected_rooms(i: int, k: int) -> list[int]:\n        return list(range(max(1, i - k), min(n, i + k) + 1))\n\n    def router_cost(i: int, k: int) -> int:\n        return sum(i for i in connected_rooms(i, k))\n\n    min_cost = float('inf')\n    for i in range(1, n + 1):\n        if not can_place_router(i):\n            continue\n        router_cost_ = router_cost(i, k)\n        direct_cost = sum(range(1, i)) + sum(range(i + 1, n + 1))\n        min_cost = min(min_cost, router_cost_ + direct_cost)\n\n    return str(min_cost)"
    },
    {
        "number": 4107,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(stdin.split()[1])\n\n    # Calculate the minimum total cost of connecting all rooms to the Internet\n    min_cost = 0\n    for i in range(n):\n        if s[i] == '0':\n            min_cost += i\n        else:\n            min_cost += i + k\n\n    return str(min_cost)"
    },
    {
        "number": 4107,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, s = stdin.split()\n    n, k = int(n), int(k)\n    s = list(s)\n\n    def cost(i: int) -> int:\n        return i\n\n    def router_cost(i: int) -> int:\n        return i\n\n    def connect_rooms(start: int, end: int) -> int:\n        if start > end:\n            return 0\n        return sum(cost(i) for i in range(start, end + 1))\n\n    total_cost = 0\n    for i, is_router in enumerate(s):\n        if is_router == '1':\n            left_room = max(1, i - k)\n            right_room = min(n, i + k)\n            total_cost += connect_rooms(left_room, i - 1) + router_cost(i) + connect_rooms(i + 1, right_room)\n        else:\n            total_cost += connect_rooms(i, i)\n\n    return str(total_cost)"
    },
    {
        "number": 4107,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, s = stdin.split()\n    n = int(n)\n    k = int(k)\n    s = list(s)\n\n    total_cost = 0\n\n    for i in range(n):\n        if s[i] == '1':\n            min_room = max(1, i - k)\n            max_room = min(n, i + k)\n            for j in range(min_room, max_room + 1):\n                if s[j - 1] == '1':\n                    total_cost += j\n                else:\n                    total_cost += 1\n\n    return str(total_cost)\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4107,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    s = input()\n\n    def calculate_cost(i: int) -> int:\n        return i + 1\n\n    def calculate_cost_with_router(i: int) -> int:\n        return i + 1 + k\n\n    total_cost = 0\n    for i in range(n):\n        if s[i] == '1':\n            if i == 0 or i == n - 1:\n                total_cost += calculate_cost(i)\n            else:\n                total_cost += min(\n                    calculate_cost(i),\n                    calculate_cost_with_router(i)\n                )\n        else:\n            total_cost += calculate_cost(i)\n\n    return str(total_cost)"
    },
    {
        "number": 4107,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    s = input()\n    n_routers = s.count('1')\n    \n    if n_routers > k:\n        return \"Impossible\"\n    \n    def min_cost(start: int, end: int, k: int) -> int:\n        if start > end:\n            return 0\n        elif start == end:\n            return start\n        \n        mid = (start + end) // 2\n        return min(min_cost(start, mid, k) + mid * k, min_cost(mid + 1, end, k) + (end - mid) * k)\n    \n    min_cost_sum = sum(min_cost(i, min(i + k - 1, n), k) for i in range(1, n + 1) if s[i - 1] == '0')\n    return str(min_cost_sum + n_routers * k)"
    },
    {
        "number": 4107,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k, s = stdin.split()\n    n, k = int(n), int(k)\n    s = list(s)\n    \n    min_cost = 0\n    for i in range(n):\n        if s[i] == '1':\n            min_cost += i\n            for j in range(max(1, i - k), min(n, i + k) + 1):\n                s[j-1] = '0'\n    \n    for i in range(n):\n        if s[i] == '0':\n            min_cost += i + 1\n    \n    return str(min_cost)\n"
    },
    {
        "number": 4107,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()[1]\n\n    min_cost = 0\n    for i in range(n):\n        if s[i] == '1':\n            min_cost += i\n\n    return str(min_cost + k * (n - 1))\n\ninput_data = input()\nprint(solution(input_data)) "
    },
    {
        "number": 4107,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split('\\n')[1]\n    \n    # Calculate the minimum total cost of connecting all rooms to the Internet\n    total_cost = 0\n    for i, router in enumerate(s):\n        if router == '1':\n            total_cost += i + 1\n            start = max(1, i - k)\n            end = min(n, i + k)\n            for j in range(start, end + 1):\n                if s[j] == '1':\n                    total_cost += j\n                    \n    return str(total_cost)"
    },
    {
        "number": 4107,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    s = stdin.readline().strip()\n    \n    min_cost = 0\n    \n    for i in range(n):\n        if s[i] == '1':\n            min_cost += i\n    \n    return str(min_cost)\n\ninput_str = \"\"\nwith open('input.txt', 'r') as file:\n    input_str = file.read()\n\nwith open('output.txt', 'w') as file:\n    file.write(solution(input_str)) "
    },
    {
        "number": 4108,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.strip().split()\n\n    def perform_operation(string: str, c_1: str, c_2: str) -> str:\n        return string.replace(c_1, c_2).replace(c_2, c_1)\n\n    for i in range(len(S)):\n        for j in range(i + 1, len(S)):\n            S_new = perform_operation(S, S[i], S[j])\n            if S_new == T:\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4108,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    if S == T:\n        return \"Yes\"\n\n    for c1 in ascii_lowercase:\n        for c2 in ascii_lowercase:\n            if c1 == c2:\n                continue\n\n            new_S = S.replace(c1, c2).replace(c2, c1)\n            if new_S == T:\n                return \"Yes\"\n\n    return \"No\"\n\nimport sys\nimport string\n\ninput_data = sys.stdin.read()\nresult = solution(input_data)\nprint(result) "
    },
    {
        "number": 4108,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split('\\n')\n    for i in range(len(S)):\n        if S[i] != T[i]:\n            S = S[:i] + T[i] + S[i + 1:]\n            T = T[:i] + S[i] + T[i + 1:]\n    return \"Yes\" if S == T else \"No\"\n\nstdin = \"azzel\\napple\"\nprint(solution(stdin)) "
    },
    {
        "number": 4108,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n\n    if len(S) != len(T):\n        return \"No\"\n\n    for c1, c2 in itertools.permutations(set(S), 2):\n        if c1 == c2:\n            continue\n        S_new = S.replace(c1, c2).replace(c2, c1)\n        if S_new == T:\n            return \"Yes\"\n\n    return \"No\"\n\nimport sys\nimport itertools\n\nstdin = sys.stdin.read()\nprint(solution(stdin)) "
    },
    {
        "number": 4108,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    for c1 in set(s):\n        for c2 in set(s):\n            if c1 != c2:\n                s_new = s.replace(c1, c2).replace(c2, c1)\n                if s_new == t:\n                    return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4108,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    s = list(s)\n    t = list(t)\n\n    for i in range(len(s)):\n        if s[i] != t[i]:\n            s[i] = 'x'\n            t[i] = 'x'\n\n    if ''.join(s) == ''.join(t):\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4108,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    if S == T:\n        return \"Yes\"\n\n    for c_1 in set(S):\n        for c_2 in set(S):\n            if c_1 == c_2:\n                continue\n            if S.replace(c_1, c_2).replace(c_2, c_1) == T:\n                return \"Yes\"\n\n    return \"No\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    for i in range(len(S)):\n        if S[i] != T[i]:\n            S_c1 = S[i]\n            T_c1 = T[i]\n            S_c2 = S[i+1]\n            T_c2 = T[i+1]\n            if S_c1 == S_c2 or S_c1 == T_c2 or S_c2 == T_c1:\n                return \"No\"\n            else:\n                S = S.replace(S_c1, S_c2).replace(S_c2, S_c1)\n                T = T.replace(T_c1, T_c2).replace(T_c2, T_c1)\n    return \"Yes\" if S == T else \"No\""
    },
    {
        "number": 4108,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    \n    def can_be_made_equal(s: str, t: str) -> bool:\n        if len(s) != len(t):\n            return False\n        \n        for i in range(len(s)):\n            if s[i] != t[i]:\n                s_new = s[:i] + t[i] + s[i+1:]\n                t_new = t[:i] + s[i] + t[i+1:]\n                return can_be_made_equal(s_new, t_new)\n        return True\n    \n    if can_be_made_equal(S, T):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4108,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    if s == t:\n        return \"Yes\"\n    for c1 in ascii_lowercase:\n        for c2 in ascii_lowercase:\n            if c1 == c2:\n                continue\n            s_new = s.replace(c1, c2).replace(c2, c1)\n            if s_new == t:\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4109,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read the input\n    N, M, X = map(int, stdin.split())\n    books = [list(map(int, input().split())) for _ in range(N)]\n    \n    # sort the books based on the gain in understanding level per yen\n    books.sort(key=lambda x: x[0] / x[1], reverse=True)\n    \n    # initialize the understanding levels to 0\n    levels = [0] * M\n    \n    # loop through the books and update the understanding levels\n    total_cost = 0\n    for book in books:\n        yen, gain = book\n        for j in range(M):\n            levels[j] += gain[j]\n        \n        # check if all the understanding levels are X or higher\n        if all(level >= X for level in levels):\n            return str(total_cost)\n        \n        # add the cost of the book to the total cost\n        total_cost += yen\n    \n    # if the loop finishes without achieving the objective, return -1\n    return \"-1\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    M, N, yen_list, A = parse_input(stdin)\n    max_level = max_level_needed(M)\n    min_yen = float('inf')\n    for i in range(N):\n        for j in range(M):\n            if A[i][j] >= max_level:\n                min_yen = min(min_yen, yen_list[i])\n                break\n        if min_yen != float('inf'):\n            break\n    if min_yen == float('inf'):\n        return \"impossible\"\n    return str(min_yen)\n\ndef"
    },
    {
        "number": 4109,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def can_achieve_target(target: int, max_price: int, books: List[List[int]]) -> bool:\n        dp = [False] * (target + 1)\n        dp[0] = True\n        for price, increase in books:\n            if price > max_price:\n                continue\n            for i in range(target, -1, -1):\n                if i - increase >= 0 and dp[i - increase]:\n                    dp[i] = True\n        return dp[target]\n\n    def min_money(target: int, max_price: int, books: List[List[int]]) -> int:\n        dp = [math.inf] * (target + 1)\n        dp[0] = 0\n        for price, increase in books:\n            if price > max_price:\n                continue\n            for i in range(target, -1, -1):\n                if i - increase >= 0:\n                    dp[i] = min(dp[i], dp[i - increase] + price)\n        return dp[target] if dp[target] != math.inf else -1\n\n    M, N, C, A = map(int, stdin.split())\n    books = []\n    for _ in range(N):\n        Ai, Ci, Xi = map(int, input().split())\n        books.append([Xi, Ai])\n\n    max_price = max(Ci for Ci, _ in books)\n    target = M * A\n\n    if can_achieve_target(target, max_price, books):\n        return str(min_money(target, max_price, books))\n    else:\n        return \"Takahashi can't achieve the objective.\" "
    },
    {
        "number": 4109,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    M, N, A, C = map(int, stdin.split())\n    A = [list(map(int, input().split())) for _ in range(N)]\n    dp = [[float('inf')] * (M + 1) for _ in range(N + 1)]\n    dp[0][0] = 0\n    \n    for i in range(1, N + 1):\n        for j in range(M + 1):\n            for k in range(N):\n                dp[i][j] = min(dp[i][j], dp[k][j - A[k - 1][i - 1]] + C[k - 1])\n                \n    for j in range(M, -1, -1):\n        if dp[N][j] != float('inf'):\n            return f\"Yes\\n{dp[N][j]}\"\n        \n    return \"No\" "
    },
    {
        "number": 4109,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # read input from stdin\n    N, M, X = map(int, stdin.split())\n    books = [list(map(int, input().split())) for _ in range(N)]\n    dp = [[float('inf') for _ in range(X + 1)] for _ in range(M + 1)]\n    dp[0][0] = 0\n\n    for i in range(N):\n        for j in range(M):\n            for k in range(X + 1):\n                if dp[j][k] > dp[j][k - books[i][1]] + books[i][0]:\n                    dp[j][k] = dp[j][k - books[i][1]] + books[i][0]\n\n    if dp[M][X] == float('inf'):\n        return \"not achievable\"\n    else:\n        return str(dp[M][X]) + \" yen\" "
    },
    {
        "number": 4109,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def read_int(stdin: str, idx: int) -> int:\n        return int(stdin[idx:idx+2])\n\n    N, M = read_int(stdin, 0), read_int(stdin, 2)\n    A = [list(map(int, stdin[i:i+M*2].split())) for i in range(4, len(stdin), M*2+2)]\n    C = list(map(int, stdin[4:].split()))\n\n    y = [float('inf')] * (M+1)\n    y[0] = 0\n\n    for i in range(N):\n        for j in range(M):\n            y[j+1] = min(y[j+1], y[j] + A[i][j])\n\n    for j in range(M, 0, -1):\n        if y[j] == float('inf'):\n            return \"impossible\"\n\n    return str(sum(C[:i+1]))\n"
    },
    {
        "number": 4109,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def read_line() -> str:\n        return stdin.readline().strip()\n\n    def read_int() -> int:\n        return int(read_line())\n\n    M, N = map(read_int, stdin.readline().split())\n    books = []\n    for _ in range(N):\n        _, *A = map(int, read_line().split())\n        books.append(A)\n\n    # Calculate the maximum understanding level of each algorithm\n    max_understanding = [max(book[j] for book in books) for j in range(M)]\n\n    # Check if it's possible to achieve the objective\n    objective_reachable = all(max_understanding >= X)\n\n    # If it's not possible to achieve the objective, return -1\n    if not objective_reachable:\n        return \"-1\\n\"\n\n    # Calculate the minimum amount of money needed to achieve the objective\n    min_money = 0\n    for book in books:\n        max_increase = max(book)\n        min_money += sum(1 for increase in book if increase >= max_increase)\n\n    return f\"{min_money}\\n\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X = map(int, stdin.split())\n    books = []\n\n    for _ in range(N):\n        line = input().split()\n        books.append([int(line[0]), tuple(map(int, line[1:]))])\n\n    books.sort(key=lambda x: x[0], reverse=True)\n\n    total = 0\n    for i in range(N):\n        if all(books[i][1][j] + total >= X for j in range(M)):\n            return str(total)\n        total += books[i][0]\n\n    return \"impossible\""
    },
    {
        "number": 4109,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def check_achievable(books, curr_levels, target_level):\n        for book in books:\n            for i in range(M):\n                if curr_levels[i] + book[i] >= target_level:\n                    break\n            else:\n                return False\n        return True\n\n    N, M, X = map(int, stdin.split())\n    books = [list(map(int, input().split())) for _ in range(N)]\n    target_level = [X] * M\n\n    if not check_achievable(books, [0] * M, X):\n        return \"Impossible\"\n\n    total_cost = 0\n    for book in books:\n        max_cost = 1000000000  # Maximum possible cost\n        max_levels = [0] * M\n\n        for cost in range(max_cost):\n            curr_levels = [curr_levels[i] + book[i] for i in range(M)]\n            if all(level >= X for level in curr_levels):\n                return str(total_cost + cost)\n            if cost < max_cost:\n                max_levels = [max(max_levels[i], curr_levels[i]) for i in range(M)]\n                max_cost = max(max_cost, cost + sum(max(0, X - level) for level in max_levels))\n\n    return \"Impossible\" "
    },
    {
        "number": 4109,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    M, N, yen_list, algorithm_list = parse_input(stdin)\n\n    # Initialize understanding levels to 0\n    understanding_levels = [0] * M\n\n    # Iterate through books and update understanding levels\n    for i in range(N):\n        for j in range(M):\n            understanding_levels[j] += algorithm_list[i][j]\n\n    # Check if objective is achievable\n    if all(level >= X for level in understanding_levels):\n        # Objective is achievable\n        # Calculate the minimum amount of money needed\n        total_yen = sum(yen_list)\n        min_yen_needed = min(yen_list)\n        num_books_needed = total_yen // min_yen_needed\n        return f\"Yes, {num_books_needed}\"\n    else:\n        # Objective is not achievable\n        return \"No\"\n\n\ndef"
    },
    {
        "number": 4110,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    D, G = map(int, stdin.split()[:2])\n    problems = [list(map(int, line.split())) for line in stdin.split('\\n')[1:-1]]\n    problems.sort(key=lambda x: x[0], reverse=True)\n\n    total_points = 0\n    count = 0\n\n    for p, c in problems:\n        if total_points + p >= G:\n            return str(count)\n        total_points += p\n        count += 1\n\n    return \"Unreachable\"\n\ninput_str = \"2 700\\n3 500\\n5 800\"\nprint(solution(input_str)) "
    },
    {
        "number": 4110,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    D, G = map(int, input().split())\n    p_c = []\n\n    for _ in range(D):\n        p, c = map(int, input().split())\n        p_c.append((p, c))\n\n    min_problems = float('inf')\n\n    for i in range(1, D + 1):\n        p, c = p_c[i - 1]\n        perfect_bonus = (G - 100 * i) // 100 * c\n        problems_needed = (G - perfect_bonus) // 100 * i\n\n        if problems_needed < min_problems:\n            min_problems = problems_needed\n\n    return str(min_problems)"
    },
    {
        "number": 4110,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_values = stdin.split()\n    D = int(input_values[0])\n    G = int(input_values[1])\n\n    p_c = []\n    for i in range(D):\n        p, c = map(int, input_values[2 + i*2:4 + i*2])\n        p_c.append((p, c))\n\n    p_c.sort(key=lambda x: x[0], reverse=True)\n\n    perfect_bonus = 0\n    total_problems = 0\n\n    for problem in p_c:\n        p, c = problem\n        perfect_bonus += c\n        total_problems += p\n\n        if perfect_bonus + total_problems >= G:\n            return str(total_problems)\n\n    return \"Impossible\""
    },
    {
        "number": 4110,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    D, G = map(int, lines[0].split())\n    problems = {}\n    \n    for line in lines[1:-1]:\n        p, c = map(int, line.split())\n        problems[c] = p\n    \n    for c in sorted(problems.keys(), reverse=True):\n        G -= problems[c] * 100\n        if G >= 0:\n            return str(sum(problems.values()))\n    return \"Not possible\""
    },
    {
        "number": 4110,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    lines = stdin.split(\"\\n\")\n    D, G = map(int, lines[0].split())\n    p_c = [tuple(map(int, line.split())) for line in lines[1:]]\n    \n    # Calculate base score and perfect bonuses\n    base_score = sum(p * c for p, c in p_c)\n    perfect_bonuses = sum(p * c for p, c in p_c if p == 100)\n    \n    # Calculate the minimum number of problems to solve\n    min_problems = (G - base_score) // perfect_bonuses\n    if min_problems * perfect_bonuses < G - base_score:\n        min_problems += 1\n    \n    return str(min_problems)"
    },
    {
        "number": 4110,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    D, G = map(int, stdin.split())\n    p_c = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    p_sum = sum(p for p, c in p_c)\n    c_sum = sum(c for p, c in p_c)\n    total_score = 0\n    problems_solved = 0\n\n    for p, c in p_c:\n        total_score += p * problems_solved\n        if total_score + c >= G:\n            return problems_solved + 1\n        problems_solved += p\n\n    return -1  # this should never happen"
    },
    {
        "number": 4110,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    D, G = map(int, stdin.split()[0:2])\n    p_c = [list(map(int, line.split())) for line in stdin.split()[2:]]\n\n    p_sum = sum(p * c // 100 for p, c in p_c)\n    perfect_bonus = sum(c for _, c in p_c)\n    min_problems = p_sum + (G - p_sum - perfect_bonus) // 100\n\n    return str(min_problems)"
    },
    {
        "number": 4110,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    D, G = map(int, input().split())\n    problems = {}\n    \n    for i in range(D):\n        p, c = map(int, input().split())\n        problems[100 * (i + 1)] = (p, c)\n    \n    total_score = 0\n    for score, (p, c) in problems.items():\n        total_score += p * score\n    \n    count = 0\n    for score, (p, c) in problems.items():\n        count += (G - total_score) // score\n        if (G - total_score) % score == 0:\n            count -= 1\n        total_score += p * count * score\n    \n    return str(count)\n\nstdin = \"2 700\\n3 500\\n5 800\"\nprint(solution(stdin)) "
    },
    {
        "number": 4110,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    D, G = map(int, input().split())\n    p_values = []\n    c_values = []\n\n    for _ in range(D):\n        p_value, c_value = map(int, input().split())\n        p_values.append(p_value)\n        c_values.append(c_value)\n\n    min_problems = sum(p_values)\n    for i in range(D):\n        total_points = p_values[i] * 100\n        perfect_bonus = c_values[i]\n        if G >= total_points + perfect_bonus:\n            min_problems = min(min_problems, p_values[i])\n\n    return str(min_problems)"
    },
    {
        "number": 4110,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_values = stdin.split(\"\\n\")\n    D, G = map(int, input_values[0].split())\n    problems = []\n    \n    for i in range(1, D+1):\n        p_i, c_i = map(int, input_values[i].split())\n        problems.extend([100*i]*p_i)\n    \n    problems.sort(reverse=True)\n    \n    total_score = 0\n    problems_solved = 0\n    \n    for score in problems:\n        total_score += score\n        problems_solved += 1\n        \n        if total_score >= G:\n            return str(problems_solved)"
    },
    {
        "number": 4111,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    good_candies = 0\n    \n    for i in range(n):\n        if sum(a[:i]) == sum(a[i+1:]):\n            good_candies += 1\n    \n    return str(good_candies)\n"
    },
    {
        "number": 4111,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    good_candies = []\n    total_weight_odd = 0\n    total_weight_even = 0\n    for i in range(1, n):\n        if i % 2 == 0:\n            total_weight_even += a[i]\n        else:\n            total_weight_odd += a[i]\n    if total_weight_even == total_weight_odd:\n        good_candies.append(n)\n    for i in range(1, n):\n        if i % 2 == 0:\n            total_weight_even -= a[i]\n        else:\n            total_weight_odd -= a[i]\n        if i % 2 == 0:\n            total_weight_even += a[i-1]\n        else:\n            total_weight_odd += a[i-1]\n        if total_weight_even == total_weight_odd:\n            good_candies.append(i)\n    return str(len(good_candies))"
    },
    {
        "number": 4111,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    weights = list(map(int, stdin.splitlines()[1].split()))\n    good_candies = 0\n\n    for i in range(1, n):\n        # Calculate the sums of weights eaten in even and odd days\n        odd_sum = sum(weights[:i][::2])\n        even_sum = sum(weights[:i][1::2])\n\n        # Check if the sums are equal\n        if odd_sum == even_sum:\n            good_candies += 1\n\n    return str(good_candies)"
    },
    {
        "number": 4111,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, weights = stdin.split('\\n')\n    n = int(n)\n    weights = list(map(int, weights.split()))\n\n    def get_sum(candy_index):\n        sum_even = 0\n        sum_odd = 0\n        for i in range(n):\n            if i % 2 == 0:\n                sum_even += weights[i]\n            else:\n                sum_odd += weights[i]\n            if i == candy_index:\n                return sum_even, sum_odd\n\n    good_candies = 0\n    for i in range(n):\n        even_sum, odd_sum = get_sum(i)\n        if even_sum == odd_sum:\n            good_candies += 1\n\n    return str(good_candies)\n\ninput_str = input()\nresult = solution(input_str)\nprint(result) "
    },
    {
        "number": 4111,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    weights = list(map(int, stdin.split()[1:]))\n    \n    good_candies = []\n    for i in range(n):\n        tanya_even = 0\n        tanya_odd = 0\n        for j in range(i+1):\n            tanya_odd += weights[j]\n        for j in range(i+1, n):\n            tanya_even += weights[j]\n        if tanya_even == tanya_odd:\n            good_candies.append(i+1)\n    \n    return str(len(good_candies))"
    },
    {
        "number": 4111,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    weights = list(map(int, stdin.splitlines()[1].split()))\n    good_candies = 0\n    \n    for i in range(1, n):\n        tanya_sum_even = sum(weights[:i])\n        tanya_sum_odd = sum(weights[i:])\n        \n        if tanya_sum_even == tanya_sum_odd:\n            good_candies += 1\n    \n    return str(good_candies)"
    },
    {
        "number": 4111,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    good_candies = 0\n    for i in range(1, n):\n        candies_eaten_in_even_days = 0\n        candies_eaten_in_odd_days = 0\n        for j in range(i):\n            candies_eaten_in_even_days += a[j]\n        for j in range(i, n):\n            candies_eaten_in_odd_days += a[j]\n        if candies_eaten_in_even_days == candies_eaten_in_odd_days:\n            good_candies += 1\n\n    return str(good_candies)"
    },
    {
        "number": 4111,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    a = list(map(int, a.split()))\n\n    def is_good(i: int) -> bool:\n        dad_weight = a[i - 1]\n        tanya_weights = [weight for j, weight in enumerate(a) if j != i - 1]\n        even_weights = []\n        odd_weights = []\n\n        for j, weight in enumerate(tanya_weights):\n            if j % 2 == 0:\n                even_weights.append(weight)\n            else:\n                odd_weights.append(weight)\n\n        even_sum = sum(even_weights)\n        odd_sum = sum(odd_weights)\n\n        if even_sum == odd_sum:\n            return True\n        else:\n            return False\n\n    good_candies = [i for i in range(1, n + 1) if is_good(i)]\n    return str(len(good_candies))"
    },
    {
        "number": 4111,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def sum_even_odd(candies):\n        even_sum = sum(candies[::2])\n        odd_sum = sum(candies[1::2])\n        return even_sum, odd_sum\n\n    n, candies = stdin.split()\n    n = int(n)\n    candies = list(map(int, candies.split()))\n\n    good_candies = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if candies[i] != candies[j]:\n                even_sum, odd_sum = sum_even_odd(candies[i + 1:j])\n                if even_sum == odd_sum:\n                    good_candies += 1\n\n    return str(good_candies)\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4111,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, weights = stdin.splitlines()\n    n = int(n)\n    weights = list(map(int, weights.split()))\n    good_candies = 0\n\n    for i in range(1, n):\n        if sum(weights[:i]) == sum(weights[i::2]):\n            good_candies += 1\n\n    return str(good_candies)"
    },
    {
        "number": 4112,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split()[:3])\n    a = list(map(int, stdin.split()[3:]))\n    \n    total_beauty = sum(a)\n    min_beauty_per_segment = a[0]\n    \n    if x > n:\n        return \"-1\"\n    \n    if x == 0:\n        return \"0\"\n    \n    for i in range(1, n):\n        min_beauty_per_segment = min(min_beauty_per_segment, a[i])\n    \n    if x * min_beauty_per_segment < total_beauty:\n        return \"-1\"\n    \n    if x * min_beauty_per_segment > total_beauty:\n        return str(total_beauty)\n    \n    return str(x * min_beauty_per_segment)\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4112,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split()[:3])\n    a = list(map(int, stdin.split()[3:]))\n\n    # Calculate the sum of the beauty values of all pictures\n    total_beauty = sum(a)\n\n    # If the number of pictures to repost is more than the total number of pictures,\n    # there is no way to satisfy all conditions in the problem statement.\n    if x > n:\n        return -1\n\n    # Calculate the maximum sum of values of reposted pictures if Vova follows conditions\n    # described in the problem statement.\n    max_sum = 0\n\n    # Iterate through all possible segment lengths\n    for segment_length in range(1, n + 1):\n        # Check if the segment length is greater than or equal to k\n        if segment_length >= k:\n            # Calculate the number of segments of length segment_length\n            num_segments = n // segment_length\n\n            # Calculate the number of segments that have at least one repost\n            reposted_segments = n % segment_length\n            if reposted_segments == 0:\n                reposted_segments = segment_length\n            num_reposted_segments = n // reposted_segments\n\n            # Calculate the maximum sum of values of reposted pictures for the current segment length\n            current_sum = num_segments * sum(a[:segment_length]) + num_reposted_segments * sum(a[segment_length - 1::reposted_segments])\n\n            # Update the maximum sum if the current sum is greater\n            if current_sum > max_sum:\n                max_sum = current_sum\n\n    # Check if there is no way to satisfy all conditions in the problem statement\n    if max_sum == 0:\n        return -1\n\n    # Return the maximum sum of values of reposted pictures\n    return max_sum"
    },
    {
        "number": 4112,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    max_sum = -1\n    for i in range(n - x + 1):\n        current_sum = sum(a[i:i+x])\n        if x == n:\n            return str(current_sum)\n        if all(a[j:j+k].count(a[i]) >= 1 for j in range(i, i + n - x - k + 1)):\n            max_sum = max(max_sum, current_sum)\n\n    return str(max_sum)\n\ninput_stdin = \"\"\"\n5 2 3\n5 1 3 10 1\n\n6 1 5\n10 30 30 70 10 10\n\n4 3 1\n1 100 1 1\n\"\"\"\n\nprint(solution(input_stdin)) "
    },
    {
        "number": 4112,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split()[:3])\n    a = list(map(int, stdin.split()[3:]))\n    \n    if x > n:\n        return \"-1\"\n    \n    max_sum = 0\n    for i in range(n - x + 1):\n        segment = a[i:i + x]\n        if len(set(segment)) == x:\n            max_sum = max(max_sum, sum(segment))\n    \n    if max_sum == 0:\n        return \"-1\"\n    else:\n        return str(max_sum)\n\ninput_string = input()\nprint(solution(input_string)) "
    },
    {
        "number": 4112,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, input().split()))\n\n    def is_valid(i, j):\n        return j - i >= k and sum(a[i:j]) >= x\n\n    def find_max_sum(i, j):\n        if not is_valid(i, j):\n            return 0\n\n        if j - i == x:\n            return sum(a[i:j])\n\n        max_sum = 0\n        for mid in range(i + 1, j - x + 1):\n            left_sum = find_max_sum(i, mid)\n            right_sum = find_max_sum(mid, j)\n            max_sum = max(max_sum, left_sum + right_sum)\n\n        return max_sum\n\n    return find_max_sum(0, n)"
    },
    {
        "number": 4112,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split()[:3])\n    a = list(map(int, stdin.split()[3:]))\n    \n    # Check if conditions are not met\n    if x < k or k > n:\n        return \"-1\"\n    \n    # Sort the array in descending order\n    a.sort(reverse=True)\n    \n    # Calculate the maximum sum of reposted pictures\n    max_sum = sum(a[:x])\n    \n    # Check if there is at least one picture reposted in each segment\n    for i in range(n - x + 1):\n        if any(a[i:i + k]):\n            continue\n        else:\n            return \"-1\"\n    \n    return str(max_sum)"
    },
    {
        "number": 4112,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split()[0].split())\n    beauty = list(map(int, stdin.split()[1].split()))\n    \n    total_beauty = sum(beauty)\n    min_beauty = min(beauty)\n    \n    if x > n:\n        return -1\n    \n    if k == 1:\n        return total_beauty\n    \n    if min_beauty * x > total_beauty:\n        return -1\n    \n    max_sum = 0\n    for i in range(x):\n        temp_sum = 0\n        for j in range(i, n, x):\n            temp_sum += beauty[j]\n        max_sum = max(max_sum, temp_sum)\n    \n    return max_sum"
    },
    {
        "number": 4112,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split()[0:3])\n    a = list(map(int, stdin.split()[3:]))\n\n    # Check if it's possible to repost pictures with given constraints\n    if x > n:\n        return \"-1\"\n\n    max_sum = 0\n    for i in range(n - k + 1):\n        segment_sum = sum(a[i:i + k])\n        max_sum = max(max_sum, segment_sum)\n\n    if max_sum <= 0:\n        return \"-1\"\n\n    # Calculate the maximum sum of values of reposted pictures\n    min_segment_sum = min(max_sum, sum(a))\n    max_sum = sum(sorted(a, reverse=True)[:x])\n\n    return str(max_sum)\n"
    },
    {
        "number": 4112,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split()[:3])\n    a = list(map(int, stdin.split()[3:]))\n\n    def is_valid(picked: List[int]) -> bool:\n        return all(len(picked[i:i+k]) >= 1 for i in range(n-k+1))\n\n    def pick_pictures(picked: List[int]) -> int:\n        return sum(a[i] for i in picked)\n\n    def binary_search(left: int, right: int, picked: List[int]) -> int:\n        while left <= right:\n            mid = (left + right) // 2\n            if is_valid(picked + [mid]):\n                left = mid + 1\n            else:\n                right = mid - 1\n        return right\n\n    picked = []\n    for _ in range(x):\n        picked.append(binary_search(0, n-1, picked))\n\n    if len(picked) != len(set(picked)):\n        return \"-1\"\n\n    return str(pick_pictures(picked))"
    },
    {
        "number": 4112,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split()[:3])\n    a = list(map(int, stdin.split()[3:]))\n\n    if x > n:\n        return \"-1\"\n\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n\n    for length in range(1, k + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            dp[i][j] = float(\"-inf\")\n            for r in range(i, j + 1):\n                if r == i:\n                    dp[i][j] = max(dp[i][j], a[j])\n                elif r == j:\n                    dp[i][j] = max(dp[i][j], dp[i + 1][j - 1] + a[i])\n                else:\n                    dp[i][j] = max(dp[i][j], dp[i + 1][j - 1] + a[i])\n\n    total_sum = sum(a)\n    if dp[0][n - 1] == float(\"-inf\"):\n        return \"-1\"\n\n    reposted = 0\n    for i in range(n - 1, -1, -1):\n        if dp[0][i] == dp[0][i + 1] and a[i] != dp[0][i]:\n            reposted += a[i]\n            x -= 1\n            if x == 0:\n                return str(reposted)\n        elif dp[0][i] != dp[0][i + 1]:\n            reposted += dp[0][i]\n            x -= 1\n            if x == 0:\n                return str(reposted)\n\n    return \"-1\""
    },
    {
        "number": 4113,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    \n    # Check if we can buy one cake and one doughnut for N dollars\n    if N == 11:\n        return \"Yes\"\n    \n    # Check if we can buy two cakes for N dollars\n    if N == 8:\n        return \"Yes\"\n    \n    # Check if we can buy two doughnuts for N dollars\n    if N == 14:\n        return \"Yes\"\n    \n    # Check if we can buy one cake, one doughnut, and one cake for N dollars\n    if N == 12:\n        return \"Yes\"\n    \n    # Check if we can buy one cake, one doughnut, and one doughnut for N dollars\n    if N == 15:\n        return \"Yes\"\n    \n    # Check if we can buy one cake, two doughnuts, and one cake for N dollars\n    if N == 16:\n        return \"Yes\"\n    \n    # Check if we can buy one cake, two doughnuts, and one doughnut for N dollars\n    if N == 18:\n        return \"Yes\"\n    \n    return \"No\""
    },
    {
        "number": 4113,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n\n    if N % 4 == 0:\n        return \"Yes\"\n    elif N % 7 == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4113,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 7 == 0:\n        return \"Yes\"\n    if n % 4 == 0:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4113,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 7 == 0 or n % 4 == 0:\n        return \"Yes\"\n    elif n % 11 == 0:\n        return \"Yes\"\n    elif n > 11 and (n - 11) % 7 == 0:\n        return \"Yes\"\n    elif n > 11 and (n - 11) % 4 == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4113,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 4 == 0:\n        return \"Yes\"\n    elif N % 7 == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4113,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    \n    if N < 8:\n        return \"No\"\n    else:\n        return \"Yes\"\n    \n"
    },
    {
        "number": 4113,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 4 == 0 or N % 7 == 0:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4113,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    # Check if it's possible to buy cakes and doughnuts for exactly N dollars\n    if N % 7 == 0 or N % 4 == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4113,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 1 or n > 100:\n        return \"No\"\n    \n    if n % 7 == 0:\n        return \"Yes\"\n    elif n % 4 == 0:\n        return \"Yes\"\n    elif n % 11 == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4113,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 0 or N > 100:\n        return \"Invalid input\"\n\n    if N % 7 == 0:\n        return \"Yes\"\n    elif N % 4 == 0:\n        return \"Yes\"\n    elif N % 11 == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4114,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    altitudes = {}\n\n    for line in stdin.splitlines()[1:]:\n        x, y, h = map(int, line.split())\n        altitudes[(x, y)] = h\n\n    def get_altitude(x, y):\n        return max(h - abs(x - c_x) - abs(y - c_y), 0)\n\n    def find_center():\n        nonlocal altitudes\n        x_candidates = set()\n        y_candidates = set()\n        h_candidates = set()\n\n        for (x, y), h in altitudes.items():\n            x_candidates.add(x)\n            y_candidates.add(y)\n            h_candidates.add(h)\n\n        c_x = sum(x_candidates) / len(x_candidates)\n        c_y = sum(y_candidates) / len(y_candidates)\n        h = sum(h_candidates) / len(h_candidates)\n\n        return int(c_x), int(c_y), int(h)\n\n    c_x, c_y, h = find_center()\n\n    return f\"{c_x} {c_y} {h}\"\n\ninput_str = \"\"\"4\n2 3 5\n2 1 5\n1 2 5\n3 2 5\"\"\"\nprint(solution(input_str)) "
    },
    {
        "number": 4114,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    x_y_h = []\n    for i in range(1, n+1):\n        x, y, h = map(int, lines[i].split())\n        x_y_h.append((x, y, h))\n    \n    C_X, C_Y, H = 0, 0, 0\n    for x, y, h in x_y_h:\n        altitude = max(H - abs(x - C_X) - abs(y - C_Y), 0)\n        if h > altitude:\n            C_X, C_Y, H = x, y, h\n        else:\n            H = max(H, altitude)\n    return f\"{C_X} {C_Y} {H}\""
    },
    {
        "number": 4114,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    points = []\n    for i in range(1, n+1):\n        x, y, h = map(int, lines[i].split())\n        points.append((x, y, h))\n\n    c_x = 0\n    c_y = 0\n    height = 0\n\n    for x, y, h in points:\n        c_x += x\n        c_y += y\n        height = max(height, h)\n\n    c_x //= n\n    c_y //= n\n    height += 1\n\n    return f\"{c_x} {c_y} {height}\""
    },
    {
        "number": 4114,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    coordinates = []\n    heights = []\n    for i in range(1, N+1):\n        x, y, h = map(int, lines[i].split())\n        coordinates.append((x, y))\n        heights.append(h)\n    \n    # Calculate the center coordinates\n    C_X = sum([coord[0] for coord in coordinates]) // N\n    C_Y = sum([coord[1] for coord in coordinates]) // N\n    \n    # Calculate the height\n    H = max(heights)\n    \n    return f\"{C_X} {C_Y} {H}\""
    },
    {
        "number": 4114,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    points = []\n    for i in range(1, n+1):\n        x, y, h = map(int, stdin.split('\\n')[i].split())\n        points.append((x, y, h))\n    \n    c_x = sum(x for x, y, h in points) / len(points)\n    c_y = sum(y for x, y, h in points) / len(points)\n    h = max(h for x, y, h in points)\n    \n    return f\"{int(c_x)} {int(c_y)} {int(h)}\""
    },
    {
        "number": 4114,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def altitude(x, y):\n        return max(height - abs(x - cx) - abs(y - cy), 0)\n\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    points = [(int(line.split()[0]), int(line.split()[1]), int(line.split()[2])) for line in lines[1:N+1]]\n    height = max(point[2] for point in points)\n\n    possible_cxs = [point[0] for point in points if point[2] == height]\n    possible_cys = [point[1] for point in points if point[2] == height]\n\n    cx = possible_cxs[0]\n    cy = possible_cys[0]\n    for x, y in points:\n        if altitude(x, y) == height:\n            cx = x\n            cy = y\n            break\n\n    return f\"{cx} {cy} {height}\""
    },
    {
        "number": 4114,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    coordinates = {}\n\n    for i in range(1, N + 1):\n        x, y, h = map(int, stdin.split('\\n')[i].split())\n        if (x, y) not in coordinates:\n            coordinates[(x, y)] = h\n        else:\n            coordinates[(x, y)] = max(coordinates[(x, y)], h)\n\n    C_X = C_Y = H = None\n    for x, y in coordinates:\n        h = coordinates[(x, y)]\n        if H is None or h > H:\n            H = h\n            C_X, C_Y = x, y\n\n    return f\"{C_X} {C_Y} {H}\" "
    },
    {
        "number": 4114,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def altitude(x, y, cx, cy, h):\n        return max(h - abs(x - cx) - abs(y - cy), 0)\n\n    def center(height, altitudes):\n        cx = cy = 0\n        sum_h = sum_x = sum_y = sum_xx = sum_xy = sum_yy = 0\n\n        for x, y, h in altitudes:\n            a = altitude(x, y, cx, cy, height)\n            if a == 0:\n                return cx, cy, height\n\n            sum_h += h\n            sum_x += x * h\n            sum_y += y * h\n            sum_xx += x * x * h\n            sum_xy += x * y * h\n            sum_yy += y * y * h\n\n        denom = sum_h * sum_xx - sum_x * sum_x\n        if denom == 0:\n            return cx, cy, height\n\n        cx = (sum_h * sum_xy - sum_x * sum_y) / denom\n        cy = (sum_xx * sum_y - sum_x * sum_xy) / denom\n        h = (sum_h * sum_xx + sum_x * sum_x - sum_xx * sum_x + sum_x * sum_h - sum_h * sum_xy) / denom\n\n        return round(cx), round(cy), round(h)\n\n    lines = stdin.strip().split(\"\\n\")\n    N = int(lines[0])\n    altitudes = [tuple(map(int, line.split())) for line in lines[1:]]\n\n    center_coords, height = center(1, altitudes)\n    return \" \".join(map(str, center_coords)) + \" \" + str(height)"
    },
    {
        "number": 4114,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split('\\n')\n    n = int(data[0])\n    coords_h = []\n    \n    for i in range(1, n+1):\n        x, y, h = map(int, data[i].split())\n        coords_h.append((x, y, h))\n    \n    coords_h.sort(key=lambda x: x[2])\n    c_x, c_y = coords_h[0][0], coords_h[0][1]\n    \n    h = coords_h[n-1][2]\n    for x, y, alt in coords_h:\n        if alt != h:\n            break\n        if x == c_x and y == c_y:\n            continue\n        if abs(x - c_x) + abs(y - c_y) == h:\n            c_x, c_y = (c_x + x) // 2, (c_y + y) // 2\n    \n    return f\"{c_x} {c_y} {h}\"\n\ninput_data = '''\n4\n2 3 5\n2 1 5\n1 2 5\n3 2 5\n'''\nprint(solution(input_data)) "
    },
    {
        "number": 4114,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    points = []\n    for i in range(1, N + 1):\n        x, y, h = map(int, lines[i].split())\n        points.append((x, y, h))\n\n    # Calculate the center coordinates and the height\n    center = (0, 0)\n    height = 0\n    for x, y, h in points:\n        if h == 0:\n            continue\n        altitude = max(height - abs(x - center[0]) - abs(y - center[1]), 0)\n        if altitude < h:\n            center = (x, y)\n            height = h\n\n    # Return the result\n    return f\"{center[0]} {center[1]} {height}\""
    },
    {
        "number": 4115,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    n = len(s)\n    odd = 0\n    for i in range(n // 2):\n        if s[i] != s[n - 1 - i]:\n            odd += 1\n    if n % 2 == 0:\n        return odd\n    else:\n        if s[n // 2] != s[n - 1 - (n // 2)]:\n            return odd + 1\n        else:\n            return odd"
    },
    {
        "number": 4115,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    hugs = 0\n\n    # Check if the string is already palindrome\n    if s == s[::-1]:\n        return hugs\n\n    # Check if the string has odd length\n    if n % 2 == 1:\n        mid = n // 2\n        for i in range(mid):\n            if s[i] != s[n - i - 1]:\n                hugs += 1\n        return hugs\n\n    # If the string has even length, we can make it palindrome by changing one character\n    left, right = 0, n - 1\n    while left < right:\n        if s[left] != s[right]:\n            hugs += 1\n            break\n        left += 1\n        right -= 1\n\n    return hugs\n"
    },
    {
        "number": 4115,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    count = 0\n    for i in range(n // 2):\n        if s[i] != s[n - i - 1]:\n            count += 1\n    if n % 2 == 1:\n        count -= 1\n    return count"
    },
    {
        "number": 4115,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    s_rev = s[::-1]\n    if s == s_rev:\n        return 0\n    else:\n        hugs = 0\n        for i in range(n):\n            if s[i] != s_rev[i]:\n                hugs += 1\n                s = s[:i] + s_rev[i] + s[i+1:]\n                if s == s_rev:\n                    return hugs\n        return hugs\n\ndef"
    },
    {
        "number": 4115,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    min_hugs = n\n    for i in range(n):\n        if s[i] != s[n-i-1]:\n            min_hugs = min(min_hugs, i + n-i-1)\n    return min_hugs"
    },
    {
        "number": 4115,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    if s == s[::-1]:  # Check if the given string is already a palindrome\n        return \"0\"\n    for i in range(n // 2):\n        if s[i] != s[n - 1 - i]:  # Find the middle position where the characters are different\n            return \"2\"\n    return \"1\"  # If the given string has odd length, then it can be made palindrome by changing a single character. "
    },
    {
        "number": 4115,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    min_hugs = n\n    \n    for i in range(n // 2):\n        if s[i] != s[n-i-1]:\n            min_hugs -= 1\n    \n    if n % 2 == 1 and s[n//2] != s[n//2+1]:\n        min_hugs -= 1\n    \n    return str(min_hugs)"
    },
    {
        "number": 4115,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    n = len(S)\n    min_hugs = 0\n    for i in range(n // 2):\n        if S[i] != S[n - 1 - i]:\n            min_hugs += 1\n    return min_hugs"
    },
    {
        "number": 4115,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    left, right = 0, len(s) - 1\n    changes = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            changes += 1\n            if left + 1 < right and s[left + 1] == s[right]:\n                left += 1\n            elif left < right - 1 and s[left] == s[right - 1]:\n                right -= 1\n            else:\n                s[right] = s[left]\n                left += 1\n                right -= 1\n        else:\n            left += 1\n            right -= 1\n\n    return changes"
    },
    {
        "number": 4115,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    for i in range(n//2):\n        if s[i] != s[n-1-i]:\n            break\n    else:\n        i = n//2\n    return n-2*i"
    },
    {
        "number": 4116,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if i * j == N:\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4116,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if i * j == n:\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4116,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if i * j == N:\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4116,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, 10):\n        for j in range(i, 10):\n            if i * j == n:\n                return \"Yes\"\n    return \"No\"\n\ndef"
    },
    {
        "number": 4116,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if i * j == N:\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4116,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    for i in range(1, 10):\n        for j in range(i, 10):\n            if i * j == N:\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4116,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if i * j == n:\n                return \"Yes\"\n    return \"No\"\n\ndef"
    },
    {
        "number": 4116,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if i * j == n:\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4116,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if i * j == n:\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4116,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if i * j == N:\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4117,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, sticks = stdin.split('\\n')\n    N = int(N)\n    sticks = [int(s) for s in sticks.split()]\n\n    # Sort the sticks to make it easier to find triangles\n    sticks.sort()\n\n    # Initialize the count of triangles\n    count = 0\n\n    # Iterate over all possible combinations of three sticks\n    for i in range(N - 2):\n        for j in range(i + 1, N - 1):\n            for k in range(j + 1, N):\n                # Check if the three sticks can form a triangle\n                if sticks[i] + sticks[j] > sticks[k] and sticks[j] + sticks[k] > sticks[i] and sticks[i] + sticks[k] > sticks[j]:\n                    count += 1\n\n    return str(count)"
    },
    {
        "number": 4117,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    sticks = list(map(int, lines[1].split()))\n    count = 0\n\n    for i in range(N):\n        for j in range(i + 1, N):\n            for k in range(j + 1, N):\n                if sticks[i] + sticks[j] > sticks[k] and sticks[i] + sticks[k] > sticks[j] and sticks[j] + sticks[k] > sticks[i]:\n                    count += 1\n\n    return str(count)"
    },
    {
        "number": 4117,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, sticks = stdin.split(\"\\n\")\n    N = int(N)\n    sticks = list(map(int, sticks.split()))\n\n    count = 0\n    for i in range(N-2):\n        for j in range(i+1, N-1):\n            for k in range(j+1, N):\n                if sticks[i] + sticks[j] > sticks[k] and sticks[j] + sticks[k] > sticks[i] and sticks[i] + sticks[k] > sticks[j]:\n                    count += 1\n\n    return str(count)\n\ndef"
    },
    {
        "number": 4117,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, sticks = stdin.split(\"\\n\")\n    N = int(N)\n    sticks = list(map(int, sticks.split()))\n    \n    def is_triangle(a, b, c):\n        return a + b > c and a + c > b and b + c > a\n\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                if sticks[i] != sticks[j] != sticks[k] and is_triangle(sticks[i], sticks[j], sticks[k]):\n                    count += 1\n\n    return str(count)"
    },
    {
        "number": 4117,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, sticks = stdin.split('\\n')\n    N = int(N)\n    sticks = list(map(int, sticks.split()))\n\n    def is_triangle(a: int, b: int, c: int) -> bool:\n        return a + b > c and b + c > a and a + c > b\n\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            for k in range(j + 1, N):\n                if sticks[i] != sticks[j] and sticks[j] != sticks[k] and sticks[i] != sticks[k]:\n                    if is_triangle(sticks[i], sticks[j], sticks[k]):\n                        count += 1\n\n    return str(count)"
    },
    {
        "number": 4117,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_triangle(a: int, b: int, c: int) -> bool:\n        return a + b > c and b + c > a and a + c > b\n\n    def find_triangles(n: int, lengths: List[int]) -> int:\n        counts = [0] * n\n        for i in range(n):\n            for j in range(i + 1, n):\n                for k in range(j + 1, n):\n                    if lengths[i] + lengths[j] > lengths[k] and lengths[j] + lengths[k] > lengths[i] and lengths[i] + lengths[k] > lengths[j]:\n                        counts[i] += 1\n                        counts[j] += 1\n                        counts[k] += 1\n        return sum(counts)\n\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    lengths = list(map(int, lines[1].split()))\n\n    return str(find_triangles(n, lengths))"
    },
    {
        "number": 4117,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *lengths = map(int, stdin.split())\n    N = len(lengths)\n    lengths.sort()\n    count = 0\n\n    for i in range(N - 2):\n        j = i + 1\n        k = N - 1\n\n        while j < k:\n            if lengths[i] + lengths[j] > lengths[k]:\n                j += 1\n            elif lengths[i] + lengths[j] < lengths[k]:\n                k -= 1\n            else:\n                count += 1\n                j += 1\n                k -= 1\n\n    return str(count)"
    },
    {
        "number": 4117,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, *L = map(int, stdin.split())\n\n    def is_valid(a, b, c):\n        return a + b > c and a + c > b and b + c > a\n\n    return sum(1 for i in range(N) for j in range(i + 1, N) for k in range(j + 1, N) if is_valid(L[i], L[j], L[k]))"
    },
    {
        "number": 4117,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    sticks = [int(x) for x in lines[1].split()]\n\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                if sticks[i] + sticks[j] > sticks[k] and sticks[j] + sticks[k] > sticks[i] and sticks[k] + sticks[i] > sticks[j]:\n                    count += 1\n\n    return str(count)"
    },
    {
        "number": 4117,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, *L = map(int, stdin.split())\n    L = sorted(set(L))\n    \n    count = 0\n    for i in range(N-2):\n        for j in range(i+1, N-1):\n            k = L.index(L[i]+L[j])\n            if k > j:\n                count += 1\n    \n    return str(count)\n\ndef"
    },
    {
        "number": 4118,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n\n    if 1 <= A <= 9 and 1 <= B <= 9:\n        return A * B\n    else:\n        return -1"
    },
    {
        "number": 4118,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a in range(1, 10) and b in range(1, 10):\n        return str(a * b)\n    else:\n        return \"-1\"\n\ninput_str = input()\nresult = solution(input_str)\nprint(result) "
    },
    {
        "number": 4118,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    \n    if a == 1:\n        if b == 1:\n            return \"1\"\n        elif b == 2:\n            return \"2\"\n        elif b == 3:\n            return \"3\"\n        elif b == 4:\n            return \"4\"\n        elif b == 5:\n            return \"5\"\n        elif b == 6:\n            return \"6\"\n        elif b == 7:\n            return \"7\"\n        elif b == 8:\n            return \"8\"\n        elif b == 9:\n            return \"9\"\n        else:\n            return \"-1\"\n    elif a == 2:\n        if b == 1:\n            return \"2\"\n        elif b == 2:\n            return \"4\"\n        elif b == 3:\n            return \"6\"\n        elif b == 4:\n            return \"8\"\n        else:\n            return \"-1\"\n    elif a == 3:\n        if b == 1:\n            return \"3\"\n        elif b == 2:\n            return \"6\"\n        elif b == 3:\n            return \"9\"\n        else:\n            return \"-1\"\n    elif a == 4:\n        if b == 1:\n            return \"4\"\n        elif b == 2:\n            return \"8\"\n        else:\n            return \"-1\"\n    elif a == 5:\n        if b == 1:\n            return \"5\"\n        else:\n            return \"-1\"\n    elif a == 6:\n        if b == 1:\n            return \"6\"\n        else:\n            return \"-1\"\n    elif a == 7:\n        if b == 1:\n            return \"7\"\n        else:\n            return \"-1\"\n    elif a == 8:\n        if b == 1:\n            return \"8\"\n        else:\n            return \"-1\"\n    elif a == 9:\n        if b == 1:\n            return \"9\"\n        else:\n            return \"-1\"\n    else:\n        return \"-1\""
    },
    {
        "number": 4118,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A in range(1, 10) and B in range(1, 10):\n        result = A * B\n        return str(result)\n    else:\n        return str(-1)"
    },
    {
        "number": 4118,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    result = A * B\n    return str(result) if 1 <= A <= 9 and 1 <= B <= 9 else \"-1\""
    },
    {
        "number": 4118,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A in range(1, 10) and B in range(1, 10):\n        return str(A * B)\n    else:\n        return str(-1)\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4118,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    \n    if 1 <= A <= 9 and 1 <= B <= 9:\n        return str(A * B)\n    else:\n        return -1"
    },
    {
        "number": 4118,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    result = A * B\n\n    if 1 <= A <= 9 and 1 <= B <= 9:\n        return str(result)\n    else:\n        return \"-1\""
    },
    {
        "number": 4118,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    \n    result = -1\n    for i in range(1, 10):\n        if i * A == B or i * B == A:\n            result = max(A, B) * min(A, B)\n            break\n    \n    return str(result)\n\ndef"
    },
    {
        "number": 4118,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n\n    if 1 <= A <= 9 and 1 <= B <= 9:\n        result = A * B\n        return str(result)\n    else:\n        return \"-1\""
    },
    {
        "number": 4119,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.strip().split(\"\\n\")\n    n, m = map(int, lines[0].split())\n    coordinates = list(map(int, lines[1].split()))\n\n    # Initialize visited coordinates and count\n    visited = set(coordinates)\n    count = 0\n\n    # Iterate through coordinates and calculate minimum moves\n    for x in coordinates:\n        # Calculate distance to next coordinate\n        distance = coordinates.index(x) - coordinates.index(max(coordinates))\n        # If distance is greater than 1, move to next coordinate\n        while distance > 1:\n            count += 1\n            distance -= 1\n        # If distance is 1, move to next coordinate and update visited\n        if distance == 1:\n            count += 1\n            visited.add(x - 1)\n        # If distance is 0, move to next coordinate\n        else:\n            visited.add(x + 1)\n\n    # If there are still unvisited coordinates, calculate additional moves\n    unvisited = set(range(min(visited), max(visited) + 1)) - visited\n    for x in unvisited:\n        count += abs(x - coordinates[0])\n\n    return str(count)"
    },
    {
        "number": 4119,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculates the minimum number of moves required to reach all coordinates X_1, X_2, ..., X_M.\n\n    Args:\n        stdin (str): The input string containing the number of pieces (N) and the number of coordinates to visit (M), followed by the M coordinates X_1, X_2, ..., X_M.\n\n    Returns:\n        str: The minimum number of moves required to reach all coordinates X_1, X_2, ..., X_M.\n    \"\"\"\n    # Read input from stdin\n    input_list = stdin.split(\"\\n\")\n    N = int(input_list[0])\n    M = int(input_list[1])\n    coordinates = [int(x) for x in input_list[2].split()]\n\n    # Initialize a dictionary to store the coordinates of each piece\n    pieces = {}\n    for i in range(N):\n        pieces[i+1] = []\n\n    # Populate the dictionary with the initial coordinates of each piece\n    for i in range(N):\n        pieces[i+1].append(coordinates[i])\n\n    # Initialize a set to store the coordinates that have already been visited\n    visited_coordinates = set()\n\n    # Add the initial coordinates to the set of visited coordinates\n    for coordinate in coordinates:\n        visited_coordinates.add(coordinate)\n\n    # Initialize a counter to keep track of the number of moves\n    moves = 0\n\n    # Iterate through each coordinate X_i\n    for coordinate in coordinates:\n        # Find the piece that is currently at coordinate X_i\n        current_piece = None\n        for piece, piece_coordinates in pieces.items():\n            if coordinate in piece_coordinates:\n                current_piece = piece\n                break\n\n        # Find the coordinates that are reachable from coordinate X_i\n        reachable_coordinates = [coordinate + 1, coordinate - 1]\n\n        # Move the piece to one of the reachable coordinates\n        for reachable_coordinate in reachable_coordinates:\n            if reachable_coordinate not in visited_coordinates:\n                # Move the piece to the reachable coordinate\n                pieces[current_piece].remove(coordinate)\n                pieces[current_piece].append(reachable_coordinate)\n                visited_coordinates.add(reachable_coordinate)\n                moves += 1\n                break\n\n    return str(moves)"
    },
    {
        "number": 4119,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def find_minimum_moves(pieces, coords):\n        visited = set(pieces)\n        current_piece = None\n        moves = 0\n\n        while len(visited) < len(coords):\n            if current_piece is None:\n                current_piece = pieces[0]\n            new_piece = current_piece + 1\n            if new_piece in visited or new_piece in pieces:\n                new_piece = current_piece - 1\n            if new_piece in visited or new_piece in pieces:\n                return -1\n            visited.add(new_piece)\n            current_piece = new_piece\n            moves += 1\n\n        return moves\n\n    N, M = stdin.split()\n    N, M = int(N), int(M)\n    pieces = list(map(int, stdin.split()[N+1:]))\n    coords = list(map(int, stdin.split()[1:N+1]))\n\n    result = find_minimum_moves(pieces, coords)\n    return str(result)"
    },
    {
        "number": 4119,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, coordinates = stdin.split()\n    n, m = int(n), int(m)\n    coordinates = list(map(int, coordinates.split()))\n\n    visited_coordinates = set(coordinates)\n    unvisited_coordinates = set(range(1, n + 1)) - visited_coordinates\n\n    moves = 0\n    while unvisited_coordinates:\n        next_coordinate = max(visited_coordinates) + 1\n        if next_coordinate in unvisited_coordinates:\n            moves += 1\n            visited_coordinates.add(next_coordinate)\n            unvisited_coordinates.remove(next_coordinate)\n        else:\n            break\n\n    return str(moves)\n\ninput_str = \"2 5\\n10 12 1 2 14\"\nprint(solution(input_str)) "
    },
    {
        "number": 4119,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def min_moves(pieces: list, visited: set, target: int, current: int) -> int:\n        if target in visited:\n            return 0\n        visited.add(current)\n        min_move = float('inf')\n        for piece in pieces:\n            if piece == current:\n                continue\n            if piece == target:\n                min_move = 1\n                break\n            min_move = min(min_move, min_moves(pieces, visited, target, piece) + 1)\n        return min_move\n\n    n, m = map(int, stdin.split()[0:2])\n    target_coordinates = list(map(int, stdin.split()[2:]))\n    pieces = [0] * n\n    target_piece = 0\n    min_move = float('inf')\n    for i in range(m):\n        x = target_coordinates[i]\n        for j in range(n):\n            if pieces[j] == x:\n                min_move = min(min_move, min_moves(pieces, set(), x, target_piece))\n                target_piece = x\n                break\n    return str(min_move)\n\ninput_str = \"2 5\\n10 12 1 2 14\"\nprint(solution(input_str)) "
    },
    {
        "number": 4119,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[0:2])\n    coordinates = list(map(int, stdin.split()[2:]))\n    visited_coordinates = set(coordinates)\n    pieces = [0] * N\n\n    for i in range(N):\n        pieces[i] = i + 1\n\n    def move(piece, coordinate):\n        pieces[piece - 1] = coordinate\n\n    def is_valid_move(piece, coordinate):\n        if coordinate == pieces[piece - 1] + 1 or coordinate == pieces[piece - 1] - 1:\n            return True\n        return False\n\n    def is_objective_achieved():\n        for coordinate in coordinates:\n            if not coordinate in visited_coordinates:\n                return False\n        return True\n\n    def find_minimum_moves():\n        moves = 0\n        while not is_objective_achieved():\n            for i in range(N):\n                for j in range(N):\n                    if i == j or pieces[i] == pieces[j]:\n                        continue\n                    for coordinate in coordinates:\n                        if is_valid_move(i + 1, coordinate):\n                            move(i + 1, coordinate)\n                            moves += 1\n                            break\n                        if is_valid_move(j + 1, coordinate):\n                            move(j + 1, coordinate)\n                            moves += 1\n                            break\n            visited_coordinates.update(coordinates)\n        return moves\n\n    return str(find_minimum_moves())"
    },
    {
        "number": 4119,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N, M = map(int, lines[0].split())\n    coordinates = list(map(int, lines[1].split()))\n    \n    visited = set(coordinates)\n    pieces = [i+1 for i in range(N)]\n    \n    def is_visitable(coord: int) -> bool:\n        for piece in pieces:\n            if piece == coord:\n                return False\n        return True\n    \n    def move_piece(piece: int, to: int) -> None:\n        pieces[piece-1] = to\n    \n    moves = 0\n    while len(visited) < M:\n        for piece in pieces:\n            if is_visitable(piece+1):\n                move_piece(piece, piece+1)\n            elif is_visitable(piece-1):\n                move_piece(piece, piece-1)\n        moves += 1\n    \n    return str(moves)"
    },
    {
        "number": 4119,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M, coordinates = stdin.split('\\n')\n    N, M = int(N), int(M)\n    coordinates = [int(x) for x in coordinates.split()]\n    \n    # Initialize variables\n    min_moves = float('inf')\n    visited = set(coordinates)\n    \n    # Generate all possible moves\n    def generate_moves(piece: int) -> List[Tuple[int, int]]:\n        return [(piece - 1, piece + 1)]\n    \n    # Recursive backtracking algorithm\n    def backtrack(current_moves: int) -> None:\n        nonlocal min_moves\n        \n        if current_moves >= min_moves:\n            return\n        \n        # If all coordinates are visited, update min_moves\n        if len(visited) == M:\n            min_moves = min(min_moves, current_moves)\n            return\n        \n        # Iterate through each piece\n        for piece in range(1, N + 1):\n            if piece not in visited:\n                # Try each possible move\n                for new_piece, old_piece in generate_moves(piece):\n                    visited.add(old_piece)\n                    backtrack(current_moves + 1)\n                    visited.remove(old_piece)\n    \n    # Start recursive backtracking\n    backtrack(0)\n    \n    return str(min_moves)"
    },
    {
        "number": 4119,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(visited, start, target, pieces):\n        if start == target:\n            return True\n        for i in range(len(pieces)):\n            if visited[pieces[i]] == 0:\n                visited[pieces[i]] = 1\n                if dfs(visited, start + 1, target, pieces):\n                    return True\n                visited[pieces[i]] = 0\n        return False\n\n    def min_moves(pieces):\n        start, target = min(pieces), max(pieces)\n        visited = [0] * (target - start + 1)\n        visited[start - min(pieces)] = 1\n        count = 0\n\n        while start < target:\n            if dfs(visited, start, target, pieces):\n                return count\n            else:\n                for i in range(len(pieces)):\n                    if visited[pieces[i]] == 0:\n                        visited[pieces[i]] = 1\n                        count += 1\n                        start += 1\n                        break\n        return -1\n\n    n, m = map(int, stdin.split(\"\\n\")[0].split())\n    pieces = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    return str(min_moves(pieces))\n\ninput_str = \"2 5\\n10 12 1 2 14\"\nprint(solution(input_str)) "
    },
    {
        "number": 4119,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(x, pieces) -> bool:\n        for piece in pieces:\n            if abs(piece - x) == 1:\n                return True\n        return False\n\n    def min_moves(pieces, visited, x, depth):\n        if x in visited:\n            return 0\n        visited.add(x)\n\n        if x not in pieces:\n            return float('inf')\n\n        if depth == M:\n            return 0\n\n        return min(min_moves(pieces, visited, x - 1, depth + 1),\n               min_moves(pieces, visited, x + 1, depth + 1)) + 1\n\n    N, M = map(int, stdin.split()[0:2])\n    pieces = set(map(int, stdin.split()[2:]))\n    visited = set()\n\n    moves = min_moves(pieces, visited, X_1, 0)\n    return moves if moves != float('inf') else -1"
    },
    {
        "number": 4120,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[:3])\n    roads = []\n    for i in range(m):\n        a, b = map(int, stdin.split()[3:])\n        roads.append((a, b))\n\n    def find_all_paths(start, end, visited, path):\n        if start == end:\n            return [path]\n        paths = []\n        for neighbor in graph[start] - visited:\n            paths += find_all_paths(neighbor, end, visited | {neighbor}, path + [neighbor])\n        return paths\n\n    graph = {i: set() for i in range(1, n + 1)}\n    for a, b in roads:\n        graph[a].add(b)\n        graph[b].add(a)\n\n    max_dist = n * (n - 1) // 2\n    min_dist = float('inf')\n    options = []\n    for i in range(1, n):\n        paths = find_all_paths(1, i, {1}, [])\n        dist = sum(len(path) - 1 for path in paths)\n        if dist < min_dist:\n            min_dist = dist\n            options = [('1' * (m - len(paths)) + '0' * len(paths)).lstrip('0') for _ in range(k)]\n        elif dist == min_dist:\n            options.append('1' * (m - len(paths)) + '0' * len(paths)).lstrip('0'))\n        if len(options) == k:\n            break\n\n    return str(len(options)) + '\\n' + '\\n'.join(options)"
    },
    {
        "number": 4120,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[:3])\n    roads = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:m+1]]\n\n    def dfs(city, visited):\n        visited.add(city)\n        for a, b in roads:\n            if a == city:\n                dfs(b, visited)\n            elif b == city:\n                dfs(a, visited)\n\n    def is_connected(visited):\n        return len(visited) == n\n\n    def add_road(chosen_roads, i):\n        chosen_roads[i-1] = '1'\n\n    def remove_road(chosen_roads, i):\n        chosen_roads[i-1] = '0'\n\n    def is_valid_option(chosen_roads):\n        visited = set()\n        dfs(1, visited)\n        return is_connected(visited)\n\n    def find_valid_options():\n        chosen_roads = ['0'] * m\n        options = []\n\n        for i in range(1, m+1):\n            add_road(chosen_roads, i)\n            if is_valid_option(chosen_roads):\n                options.append(''.join(chosen_roads))\n            remove_road(chosen_roads, i)\n\n        return options\n\n    valid_options = find_valid_options()\n    t = min(k, len(valid_options))\n\n    return str(t) + '\\n' + '\\n'.join(valid_options[:t])"
    },
    {
        "number": 4120,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[0:3])\n    roads = [tuple(map(int, line.split())) for line in stdin.split('\\n')[2:m+2]]\n    options = []\n\n    def backtrack(index, count, selected):\n        if count == n - 1:\n            options.append(''.join(selected))\n            return\n\n        for i in range(index, m):\n            if roads[i][0] == 1 or roads[i][1] == 1:\n                continue\n            selected[i] = '1'\n            backtrack(i, count + 1, selected)\n            selected[i] = '0'\n\n    backtrack(0, 1, ['0'] * m)\n    return str(len(options)) + '\\n' + '\\n'.join(options)\n"
    },
    {
        "number": 4120,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[:3])\n    roads = [tuple(map(int, line.split())) for line in stdin.split(\"\\n\")[2:]]\n\n    def dfs(start: int, visited: set) -> set:\n        visited.add(start)\n        for a, b in roads:\n            if a in visited and b not in visited:\n                dfs(b, visited)\n            elif b in visited and a not in visited:\n                dfs(a, visited)\n        return visited\n\n    connected_cities = dfs(1, set())\n    valid_options = []\n\n    for i in range(1, n):\n        if i not in connected_cities:\n            continue\n        for j in range(i + 1, n):\n            if j not in connected_cities:\n                continue\n            for roads_chosen in itertools.combinations(roads, n - 1):\n                current_option = \"\".join(\"1\" if (a, b) in roads_chosen or (b, a) in roads_chosen else \"0\" for a, b in sorted(roads))\n                if current_option not in valid_options:\n                    valid_options.append(current_option)\n\n    if len(valid_options) > k:\n        valid_options = valid_options[:k]\n\n    return str(len(valid_options)) + \"\\n\" + \"\\n\".join(valid_options)\n\nimport sys\nimport itertools"
    },
    {
        "number": 4120,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()[:3]))\n    roads = [list(map(int, line.split())) for line in stdin.split(\"\\n\")[3:3+m]]\n\n    def is_valid(choice):\n        reachable_cities = {1}\n        for i in range(m):\n            if choice[i] == '1':\n                for j in range(m):\n                    if choice[j] == '1' and any(roads[j][0] == roads[i][0] or roads[j][0] == roads[i][1] or roads[j][1] == roads[i][0] or roads[j][1] == roads[i][1]):\n                        reachable_cities.add(roads[j][0])\n                        reachable_cities.add(roads[j][1])\n        return len(reachable_cities) == n\n\n    def count_distance(choice):\n        distance = 0\n        for i in range(1, n):\n            if any(choice[j] == '1' and (roads[j][0] == i or roads[j][1] == i) for j in range(m)):\n                distance += 1\n        return distance\n\n    valid_choices = [choice for choice in product('01', repeat=m) if is_valid(choice)]\n    valid_choices.sort(key=count_distance)\n\n    output = f\"{min(k, len(valid_choices))}\\n\"\n    for i in range(min(k, len(valid_choices))):\n        output += \"\".join(valid_choices[i]) + \"\\n\"\n\n    return output"
    },
    {
        "number": 4120,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def read_input():\n        n, m, k = map(int, input().split())\n        roads = [tuple(map(int, input().split())) for _ in range(m)]\n        return n, m, k, roads\n\n    def valid_options(n: int, m: int, roads: List[Tuple[int, int]]) -> List[str]:\n        visited = [False] * (n + 1)\n        components = []\n\n        def dfs(node: int, component: List[int]):\n            visited[node] = True\n            component.append(node)\n\n            for neighbor in [a for a, b in roads if node == a or node == b]:\n                if not visited[neighbor]:\n                    dfs(neighbor, component)\n\n        for i in range(1, n + 1):\n            if not visited[i]:\n                component = []\n                dfs(i, component)\n                components.append(component)\n\n        options = []\n        for i in range(1, n):\n            for j in range(i + 1, n + 1):\n                selected_roads = [(a, b) for a, b in roads if a in components[i - 1] and b in components[j - 1]]\n                unselected_roads = [(a, b) for a, b in roads if a not in components[i - 1] or b not in components[j - 1]]\n\n                selected_roads_str = \"1\" * len(selected_roads) + \"0\" * len(unselected_roads)\n                options.append(selected_roads_str)\n\n        return options\n\n    n, m, k, roads = read_input()\n    options = valid_options(n, m, roads)\n    return str(len(options)) + \"\\n\" + \"\\n\".join(options)\n\nstdin = \"\"\"4 4 3\n1 2\n2 3\n1 4\n4 3\n\"\"\"\nprint(solution(stdin))\n\nstdin = \"\"\"4 6 3\n1 2\n2 3\n1 4\n4 3\n2 4\n1 3\n\"\"\"\nprint(solution(stdin))\n\nstdin = \"\"\"5 6 2\n1 2\n1 3\n2 4\n2 5\n3 4\n3 5\n\"\"\"\nprint(solution(stdin)) "
    },
    {
        "number": 4120,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n, m, k = map(int, stdin.split()[:3])\n    roads = []\n    for i in range(m):\n        a, b = map(int, stdin.split()[3+i*2:5+i*2])\n        roads.append((a, b))\n    \n    # Sort roads by the first city number\n    roads.sort(key=lambda x: x[0])\n    \n    # Helper function to check if a road is needed for the repair\n    def is_road_needed(road: tuple, selected_roads: list) -> bool:\n        a, b = road\n        for selected_road in selected_roads:\n            if a in selected_road or b in selected_road:\n                return False\n        return True\n    \n    # Helper function to find all combinations of selected roads\n    def find_combinations(remaining_roads: list, k: int) -> list:\n        if k == 0:\n            return [[]]\n        combinations = []\n        for i in range(len(remaining_roads)):\n            road = remaining_roads[i]\n            needed = is_road_needed(road, combinations[-1]) if combinations else True\n            if needed:\n                new_combinations = find_combinations(remaining_roads[i+1:], k-1)\n                for new_combination in new_combinations:\n                    combinations.append([road] + new_combination)\n        return combinations\n    \n    # Find all combinations of selected roads\n    combinations = find_combinations(roads, k)\n    \n    # Calculate the total sum of distances for each combination\n    sums = []\n    for combination in combinations:\n        sum_of_distances = 0\n        for i in range(1, n+1):\n            distance = len(combination)\n            for road in combination:\n                if i in road:\n                    distance -= 1\n            sum_of_distances += distance\n        sums.append(sum_of_distances)\n    \n    # Find the minimum sum and return the corresponding combinations\n    min_sum = min(sums)\n    min_combinations = [combinations[i] for i in range(len(combinations)) if sums[i] == min_sum]\n    \n    # Convert combinations to the required format\n    result = []\n    for combination in min_combinations:\n        binary_combination = ''\n        for i in range(1, n+1):\n            for road in combination:\n                if i in road:\n                    binary_combination += '1'\n                    break\n            else:\n                binary_combination += '0'\n        result.append(binary_combination)\n    \n    return str(len(min_combinations)) + '\\n' + '\\n'.join(result)"
    },
    {
        "number": 4120,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[0:3])\n    roads = [tuple(map(int, line.strip().split())) for line in stdin.split(\"\\n\")[1:]]\n\n    def sum_distances(road_set: set) -> int:\n        distances = [0] * (n + 1)\n        distances[1] = 0\n        for a, b in road_set:\n            distances[b] = min(distances[b], distances[a] + 1)\n        return sum(distances[2:])\n\n    min_sum = float('inf')\n    min_set = set()\n    for i in range(1, 2**m):\n        road_set = set((a, b) for j in range(m) if (i >> j) & 1 for a, b in roads)\n        if len(road_set) == m - 1:\n            curr_sum = sum_distances(road_set)\n            if curr_sum < min_sum:\n                min_sum = curr_sum\n                min_set = road_set\n\n    return str(len(min_set)) + \"\\n\" + \"\\n\".join([\"\".join(['1' if (a, b) in min_set else '0' for a, b in roads])]) + \"\\n\" + \"\\n\".join([\"\".join(['1' if (a, b) in min_set else '0' for a, b in roads[::-1]])])\n"
    },
    {
        "number": 4120,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, m, k = map(int, lines[0].split())\n    roads = []\n    for line in lines[1:]:\n        a, b = map(int, line.split())\n        roads.append((a, b))\n\n    def dfs(city, visited, path):\n        if len(path) == n - 1:\n            return [path]\n\n        paths = []\n        for i in range(1, n + 1):\n            if i not in visited:\n                new_visited = visited.copy()\n                new_visited.add(i)\n                new_path = path.copy()\n                new_path.append(i)\n                paths.extend(dfs(i, new_visited, new_path))\n\n        return paths\n\n    valid_paths = dfs(1, {1}, [1])\n\n    if k >= len(valid_paths):\n        return str(len(valid_paths)) + '\\n' + '\\n'.join([''.join(['1' if (i + 1) in path else '0' for i in range(n)]) for path in valid_paths])\n\n    result = []\n    for i in range(n):\n        remaining_roads = [road for road in roads if i not in road]\n        for path in valid_paths:\n            if i not in path:\n                continue\n            for combination in itertools.combinations(remaining_roads, n - 1 - len(path)):\n                if set().union(*combination) == set(range(1, n + 1)):\n                    result.append(combination)\n\n    result = list(set([''.join(['1' if (i + 1) in path else '0' for i in range(n)]) for path in result]))\n\n    return str(len(result)) + '\\n' + '\\n'.join(result)\n\nimport sys\n\ninput_stdin = sys.stdin.read()\nprint(solution(input_stdin)) "
    },
    {
        "number": 4120,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    roads = []\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        roads.append((a, b))\n\n    def dfs(node, visited):\n        if visited[node]:\n            return 0\n        visited[node] = True\n        return 1 + sum(dfs(nei, visited) for nei in adj[node])\n\n    adj = [[] for _ in range(n)]\n    for a, b in roads:\n        adj[a - 1].append(b - 1)\n        adj[b - 1].append(a - 1)\n\n    visited = [False] * n\n    dist = dfs(0, visited)\n\n    res = []\n    for i in range(2 ** (m - 1)):\n        binary = bin(i)[2:].zfill(m - 1)\n        if sum(1 for j in binary if j == '1') == k - 1:\n            option = '0' * m\n            for j in range(m - 1):\n                if binary[j] == '1':\n                    option = option[:j] + '1' + option[j + 1:]\n            res.append(option)\n\n    return str(len(res)) + '\\n' + '\\n'.join(res)"
    },
    {
        "number": 4121,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    heights = list(map(int, stdin.split('\\n')[1].split()))\n    if max(heights) == 0:\n        return \"YES\"\n\n    for i in range(1, n):\n        if heights[i] == heights[i - 1]:\n            heights[i] += 1\n            heights[i - 1] += 1\n\n    if len(set(heights)) == 1:\n        return \"YES\"\n\n    return \"NO\"\n\nn = int(input())\nheights = list(map(int, input().split()))\n\nprint(solution(f\"{n}\\n{' '.join(map(str, heights))}\")) "
    },
    {
        "number": 4121,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a = sorted(set(a))\n    if len(a) == 1:\n        if a[0] > 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    for i in range(1, len(a)):\n        if a[i] - a[i-1] > 1:\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4121,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    # Check if all parts of the wall have the same height\n    if len(set(a)) == 1:\n        return \"YES\"\n\n    # Check if the wall has no empty spaces inside it\n    for i in range(n - 1):\n        if a[i] + 1 == a[i + 1]:\n            return \"YES\"\n\n    return \"NO\""
    },
    {
        "number": 4121,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    heights = list(map(int, stdin.split('\\n')[1].split()))\n\n    min_height = min(heights)\n    max_height = max(heights)\n\n    if min_height == max_height:\n        return \"YES\"\n\n    for i in range(1, n):\n        if heights[i] - heights[i - 1] == 1:\n            return \"YES\"\n\n    return \"NO\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    # Check if the wall is already complete\n    if all(a[i] == a[i+1] for i in range(n-1)):\n        return \"YES\"\n    \n    # Check if there are any empty spaces inside the wall\n    if any(a[i] == 0 for i in range(n)):\n        return \"NO\"\n    \n    # Check if the wall can be completed using bricks\n    for i in range(n-1):\n        if a[i] == a[i+1]:\n            a[i] += 1\n            a[i+1] += 1\n        elif a[i] + 2 == a[i+1]:\n            a[i] += 2\n    \n    # Check if the wall is complete after the above steps\n    if all(a[i] == a[i+1] for i in range(n-1)):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4121,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    initial_heights = list(map(int, input().split()))\n\n    # Check if all parts have the same height\n    if len(set(initial_heights)) == 1:\n        return \"YES\"\n\n    # Check if wall has no empty spaces inside it\n    for i in range(n - 1):\n        if initial_heights[i] == initial_heights[i + 1]:\n            return \"YES\"\n        elif initial_heights[i] > initial_heights[i + 1]:\n            return \"NO\"\n        elif initial_heights[i] < initial_heights[i + 1]:\n            return \"NO\"\n\n    return \"YES\""
    },
    {
        "number": 4121,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    if len(a) != n:\n        return \"NO\"\n    \n    for i in range(1, len(a)):\n        if a[i] == a[i-1] + 1 or a[i] == a[i-1] - 1:\n            a[i-1] += 1\n            a[i] += 1\n            \n    if len(set(a)) == 1:\n        return \"YES\"\n    else:\n        return \"NO\"\n    \n    \n"
    },
    {
        "number": 4121,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    heights = list(map(int, stdin.split()[1:]))\n\n    def can_complete(heights: List[int]) -> bool:\n        max_height = max(heights)\n        return all(height == max_height for height in heights)\n\n    def place_bricks(heights: List[int]) -> bool:\n        for i in range(len(heights) - 1):\n            if heights[i] == heights[i + 1]:\n                heights[i] += 1\n                heights[i + 1] += 1\n                if can_complete(heights):\n                    return True\n                heights[i] -= 1\n                heights[i + 1] -= 1\n                if place_bricks(heights):\n                    return True\n        return False\n\n    if can_complete(heights):\n        return \"YES\"\n    else:\n        return \"NO\" if not place_bricks(heights) else \"YES\"\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4121,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    def is_wall_complete() -> bool:\n        return len(set(a)) == 1 and max(a) == n\n\n    def can_put_brick_vertically(i: int) -> bool:\n        return a[i] % 2 == 0\n\n    def can_put_brick_horizontally(i: int) -> bool:\n        return i + 1 < n and a[i] == a[i + 1]\n\n    def put_brick_vertically(i: int) -> None:\n        a[i] += 2\n\n    def put_brick_horizontally(i: int) -> None:\n        a[i] += 1\n        a[i + 1] += 1\n\n    def put_bricks_until_complete() -> None:\n        while not is_wall_complete():\n            for i in range(n):\n                if can_put_brick_vertically(i):\n                    put_brick_vertically(i)\n                elif can_put_brick_horizontally(i):\n                    put_brick_horizontally(i)\n\n    put_bricks_until_complete()\n\n    return \"YES\" if is_wall_complete() else \"NO\"\n\ndef"
    },
    {
        "number": 4121,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, heights = map(int, stdin.split())\n    heights = list(map(int, heights.split()))\n    \n    for i in range(n):\n        if heights[i] > heights[i-1] and heights[i] > heights[i+1]:\n            return \"NO\"\n        elif heights[i] > heights[i-1] and heights[i] == heights[i+1]:\n            heights[i] += 1\n            heights[i+1] += 1\n        elif heights[i] < heights[i-1] and heights[i] == heights[i+1]:\n            heights[i-1] += 1\n            heights[i] += 1\n            heights[i+1] += 1\n    \n    if all(heights[i] == heights[i+1] for i in range(n-1)):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\ndef"
    },
    {
        "number": 4122,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.split()[0:2])\n    d = list(map(int, stdin.split()[2:]))\n    \n    hp = H\n    for i in range(n):\n        hp += d[i]\n        if hp <= 0:\n            return str(i+1)\n    \n    return \"-1\"\n\n\ninput_data = input()\nprint(solution(input_data)) "
    },
    {
        "number": 4122,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.split())\n    d = list(map(int, input().split()))\n    monster_hp = H\n    \n    for i in range(n):\n        monster_hp += d[i]\n        if monster_hp <= 0:\n            return str(i+1)\n    \n    return \"-1\"\n\ndef"
    },
    {
        "number": 4122,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.split())\n    d = list(map(int, stdin.split()))[n+1:]\n    \n    hp = H\n    for i in range(n):\n        hp += d[i]\n        if hp <= 0:\n            return str(i+1)\n    return \"-1\""
    },
    {
        "number": 4122,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, input().split())\n    d = list(map(int, input().split()))\n    \n    hp = H\n    for minute in range(n):\n        hp += d[minute]\n        if hp <= 0:\n            return str(minute + 1)\n    \n    return \"-1\""
    },
    {
        "number": 4122,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    H, n, *d = map(int, stdin.split())\n    hp = H\n    k = 1\n\n    for i in range(n):\n        hp += d[i]\n        if hp <= 0:\n            return str(k)\n        k += 1\n\n    return \"-1\"\n\ndef"
    },
    {
        "number": 4122,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.split()[:2])\n    d = list(map(int, stdin.split()[2:]))\n\n    hp = H\n    minute = 0\n    while True:\n        for i in range(n):\n            hp += d[i]\n            if hp <= 0:\n                return str(minute)\n        minute += n\n\n    return '-1'"
    },
    {
        "number": 4122,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.split()[:2])\n    d = list(map(int, stdin.split()[2:]))\n    hp = H\n    minute = 1\n\n    for i in range(n):\n        hp += d[i]\n        if hp <= 0:\n            return str(minute)\n        minute += 1\n\n    return \"-1\""
    },
    {
        "number": 4122,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.readline().split())\n    d = list(map(int, stdin.readline().split()))\n    \n    hp = H\n    for i in range(n):\n        hp += d[i]\n        if hp <= 0:\n            return str(i + 1)\n    \n    return \"-1\""
    },
    {
        "number": 4122,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    H, n, d = stdin.split()\n    H, n = int(H), int(n)\n    d = [int(x) for x in d.split()]\n    \n    hp = H\n    for i in range(n):\n        hp += d[i]\n        if hp <= 0:\n            return str(i+1)\n    return \"-1\"\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4122,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.split()[:2])\n    d = list(map(int, stdin.split()[2:]))\n    hp = H\n\n    for i in range(n):\n        hp += d[i]\n        if hp <= 0:\n            return str(i + 1)\n\n    return \"-1\"\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4123,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    two_grams = {}\n    for i in range(len(s) - 1):\n        two_gram = s[i:i+2]\n        if two_gram in two_grams:\n            two_grams[two_gram] += 1\n        else:\n            two_grams[two_gram] = 1\n    max_gram = \"\"\n    max_count = 0\n    for gram, count in two_grams.items():\n        if count > max_count:\n            max_gram = gram\n            max_count = count\n    return max_gram\n\ninput_str = input()\nresult = solution(input_str)\nprint(result) "
    },
    {
        "number": 4123,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    max_count = 0\n    max_two_gram = \"\"\n    \n    for i in range(n-1):\n        two_gram = s[i:i+2]\n        count = 0\n        for j in range(n-1):\n            if s[j:j+2] == two_gram:\n                count += 1\n        if count > max_count:\n            max_count = count\n            max_two_gram = two_gram\n    \n    return max_two_gram\n"
    },
    {
        "number": 4123,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split()\n    n = int(n)\n    \n    max_count = 0\n    max_gram = \"\"\n    \n    for i in range(n - 1):\n        gram = s[i:i+2]\n        count = s.count(gram)\n        \n        if count > max_count:\n            max_count = count\n            max_gram = gram\n            \n    return max_gram"
    },
    {
        "number": 4123,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    \n    max_count = 0\n    max_two_gram = \"\"\n    \n    for i in range(n - 1):\n        two_gram = s[i:i+2]\n        count = 1\n        for j in range(i + 2, n):\n            if s[j:j+2] == two_gram:\n                count += 1\n        if count > max_count:\n            max_count = count\n            max_two_gram = two_gram\n            \n    return max_two_gram\n"
    },
    {
        "number": 4123,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    s = stdin.split(\"\\n\")[1]\n    \n    two_grams = {}\n    \n    for i in range(n-1):\n        two_gram = s[i:i+2]\n        if two_gram in two_grams:\n            two_grams[two_gram] += 1\n        else:\n            two_grams[two_gram] = 1\n    \n    max_count = 0\n    max_two_gram = \"\"\n    \n    for two_gram in two_grams:\n        if two_grams[two_gram] > max_count:\n            max_count = two_grams[two_gram]\n            max_two_gram = two_gram\n    \n    return max_two_gram\n\n\ninput_str = \"7\\nABACABA\"\noutput_str = solution(input_str)\nprint(output_str)\n\ninput_str = \"5\\nZZZAA\"\noutput_str = solution(input_str)\nprint(output_str) "
    },
    {
        "number": 4123,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()[1]\n    n = len(s)\n    two_grams = set()\n    \n    for i in range(n-1):\n        two_grams.add(s[i:i+2])\n    \n    freq = {}\n    \n    for gram in two_grams:\n        freq[gram] = s.count(gram)\n    \n    max_freq = max(freq.values())\n    for gram in freq:\n        if freq[gram] == max_freq:\n            return gram"
    },
    {
        "number": 4123,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split('\\n')\n    n = int(n)\n\n    two_grams = {}\n    max_count = 0\n    for i in range(n - 1):\n        two_gram = s[i:i+2]\n        if two_gram in two_grams:\n            two_grams[two_gram] += 1\n            max_count = max(max_count, two_grams[two_gram])\n        else:\n            two_grams[two_gram] = 1\n\n    for two_gram, count in two_grams.items():\n        if count == max_count:\n            return two_gram"
    },
    {
        "number": 4123,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    two_grams = {}\n    for i in range(n - 1):\n        gram = s[i:i+2]\n        if gram in two_grams:\n            two_grams[gram] += 1\n        else:\n            two_grams[gram] = 1\n\n    max_count = 0\n    max_gram = \"\"\n    for gram, count in two_grams.items():\n        if count > max_count:\n            max_count = count\n            max_gram = gram\n\n    return max_gram"
    },
    {
        "number": 4123,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    s = stdin.split(\"\\n\")[1]\n\n    two_grams = []\n\n    for i in range(n - 1):\n        two_grams.append(s[i] + s[i + 1])\n\n    two_gram_count = {}\n\n    for gram in two_grams:\n        if gram in two_gram_count:\n            two_gram_count[gram] += 1\n        else:\n            two_gram_count[gram] = 1\n\n    max_count = 0\n    max_gram = \"\"\n\n    for gram in two_gram_count:\n        if two_gram_count[gram] > max_count:\n            max_count = two_gram_count[gram]\n            max_gram = gram\n\n    return max_gram"
    },
    {
        "number": 4123,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n\n    two_grams = {}\n    for i in range(n - 1):\n        two_gram = s[i:i+2]\n        if two_gram in two_grams:\n            two_grams[two_gram] += 1\n        else:\n            two_grams[two_gram] = 1\n\n    max_count = 0\n    max_gram = ''\n    for gram, count in two_grams.items():\n        if count > max_count:\n            max_count = count\n            max_gram = gram\n\n    return max_gram"
    },
    {
        "number": 4124,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    if len(s) > len(t):\n        s, t = t, s\n\n    moves = 0\n    for i in range(len(s)):\n        if s[i] != t[i]:\n            moves += 1\n        else:\n            moves += 2\n\n    return moves"
    },
    {
        "number": 4124,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    \n    if s == t:\n        return len(s)\n    \n    s_len, t_len = len(s), len(t)\n    s_moves, t_moves = 0, 0\n    \n    while s_len > 0 and t_len > 0:\n        if s[0] == t[0]:\n            s_moves += 1\n            t_moves += 1\n            s = s[1:]\n            t = t[1:]\n            s_len -= 1\n            t_len -= 1\n        else:\n            if s_len > 1:\n                s_moves += 1\n                s = s[1:]\n                s_len -= 1\n            elif t_len > 1:\n                t_moves += 1\n                t = t[1:]\n                t_len -= 1\n            else:\n                break\n                \n    return s_moves + t_moves"
    },
    {
        "number": 4124,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.splitlines()\n    if not s and not t:\n        return \"0\"\n    if s == t:\n        return str(len(s) + len(t))\n    if not s:\n        return str(len(t))\n    if not t:\n        return str(len(s))\n    return str(abs(len(s) - len(t)))"
    },
    {
        "number": 4124,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(\"\\n\")\n    return min(len(s) + len(t), abs(len(s) - len(t)))"
    },
    {
        "number": 4124,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(\"\\n\")\n    s_len, t_len = len(s), len(t)\n    if s == t:\n        return f\"{s_len + t_len}\"\n\n    dp = [[0] * (t_len + 1) for _ in range(s_len + 1)]\n\n    for i in range(s_len + 1):\n        for j in range(t_len + 1):\n            if i == 0 or j == 0:\n                continue\n            elif s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + 1\n\n    return dp[s_len][t_len]\n"
    },
    {
        "number": 4124,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    i, j = 0, 0\n    count = 0\n\n    while i < len(s) and j < len(t):\n        if s[i] == t[j]:\n            i += 1\n            j += 1\n        else:\n            count += 1\n            if len(s) == len(t):\n                count += 1\n            break\n\n    return count"
    },
    {
        "number": 4124,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    return abs(len(s) - len(t))\n"
    },
    {
        "number": 4124,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    length_s, length_t = len(s), len(t)\n\n    if length_s > length_t:\n        s, t = t, s\n        length_s, length_t = length_t, length_s\n\n    if length_s > length_t:\n        return length_s + length_t\n\n    moves = abs(length_s - length_t)\n    return length_s + length_t - moves\n"
    },
    {
        "number": 4124,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split('\\n')\n    n, m = len(s), len(t)\n\n    if n < m:\n        s, t = t, s\n        n, m = m, n\n\n    if n > m:\n        diff = n - m\n        s = s[:diff] + s[diff:]\n        n = m\n\n    moves = 0\n    for i in range(n):\n        if s[i] != t[i]:\n            moves += 1\n\n    return moves"
    },
    {
        "number": 4124,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    min_length = min(len(s), len(t))\n    for i in range(min_length):\n        if s[i] != t[i]:\n            min_length = i\n            break\n    return len(s) + len(t) - min_length * 2"
    },
    {
        "number": 4125,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split()[0:2])\n    coordinates = list(map(int, stdin.split()[2:]))\n\n    coordinates.sort()\n    max_d = 1\n    for i in range(1, len(coordinates)):\n        max_d = max(max_d, abs(coordinates[i] - coordinates[i - 1]))\n\n    return str(max_d)"
    },
    {
        "number": 4125,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split()[0:2])\n    cities = list(map(int, stdin.split()[2:]))\n\n    min_city = min(cities)\n    max_city = max(cities)\n    max_D = 0\n\n    for D in range(min_city, max_city + 1):\n        visited = set()\n        current_x = X\n        for city in cities:\n            if city - D in visited:\n                visited.add(city)\n                current_x = city - D\n            elif city + D in visited:\n                visited.add(city)\n                current_x = city + D\n            else:\n                break\n        if len(visited) == N:\n            max_D = D\n\n    return str(max_D)\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4125,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, X = map(int, stdin.split('\\n')[0].split(' '))\n    cities = list(map(int, stdin.split('\\n')[1].split(' ')))\n    \n    # Find the maximum value of D\n    D = 1\n    visited = set()\n    while len(visited) < N:\n        D += 1\n        for city in cities:\n            visited.add(city - D)\n            visited.add(city + D)\n    \n    return str(D - 1)"
    },
    {
        "number": 4125,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split()[:2])\n    x = list(map(int, stdin.split()[2:]))\n\n    x.sort()\n    max_D = 1\n\n    for i in range(len(x)):\n        distance = x[i] - X\n        if distance <= 0:\n            continue\n\n        floor_D = distance // (i + 1)\n        ceil_D = floor_D + 1\n\n        if floor_D >= max_D:\n            max_D = floor_D\n\n        if ceil_D >= max_D:\n            max_D = ceil_D\n\n    return str(max_D)\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4125,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n, x = map(int, lines[0].split())\n    cities = list(map(int, lines[1].split()))\n\n    max_distance = max(cities) - min(cities)\n    return str(max_distance)\n\ndef"
    },
    {
        "number": 4125,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def can_visit_all_cities(D, X, cities):\n        current_position = X\n        visited_cities = set()\n\n        for city in cities:\n            if abs(city - current_position) <= D:\n                visited_cities.add(city)\n                current_position = city\n\n        return len(visited_cities) == len(cities)\n\n    N, X = list(map(int, stdin.split()[0:2]))\n    cities = list(map(int, stdin.split()[2:]))\n\n    left, right = 1, max(cities) - X\n    while left <= right:\n        mid = (left + right) // 2\n        if can_visit_all_cities(mid, X, cities):\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return str(left - 1)\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4125,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, X = map(int, stdin.split()[0:2])\n    x = list(map(int, stdin.split()[2:]))\n    \n    # Initialize variables\n    visited = [False] * N\n    max_D = 0\n    \n    # Iterate through all possible values of D\n    for D in range(1, max(x) + 1):\n        # Check if all cities can be visited with D\n        can_visit_all = True\n        for i in range(N):\n            if not visited[i]:\n                # Check if city can be visited with D\n                if (X - x[i]) % (2 * D) == 0:\n                    visited[i] = True\n                else:\n                    can_visit_all = False\n                    break\n        \n        # Update max_D if all cities can be visited\n        if can_visit_all:\n            max_D = D\n    \n    # Return max_D\n    return str(max_D)"
    },
    {
        "number": 4125,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, X, *x_coordinates = map(int, stdin.split())\n    x_coordinates.sort()\n\n    left, right = 1, max(x_coordinates) - X + 1\n    while left < right:\n        mid = (left + right) // 2\n        visited = set()\n        current_coordinate = X\n        for x in x_coordinates:\n            if x - current_coordinate > mid:\n                current_coordinate = x - mid\n            visited.add(current_coordinate)\n            current_coordinate += mid\n\n        if len(visited) == N:\n            right = mid\n        else:\n            left = mid + 1\n\n    return str(right)\n"
    },
    {
        "number": 4125,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split()[0:2])\n    coordinates = list(map(int, stdin.split()[2:]))\n\n    coordinates.sort()\n    coordinates.append(X)\n\n    def can_reach_city(x: int, d: int) -> bool:\n        for city in coordinates:\n            if city > x + d or city < x - d:\n                return False\n        return True\n\n    left = 1\n    right = coordinates[-1] - coordinates[0]\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if can_reach_city(X, mid):\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return str(left - 1)\n\ndef"
    },
    {
        "number": 4125,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split()[:2])\n    cities = list(map(int, stdin.split()[2:]))\n    \n    # Find the minimum and maximum difference between any two cities\n    min_diff = float('inf')\n    max_diff = float('-inf')\n    for i in range(len(cities)):\n        for j in range(i+1, len(cities)):\n            diff = abs(cities[i] - cities[j])\n            min_diff = min(min_diff, diff)\n            max_diff = max(max_diff, diff)\n    \n    # Find the maximum D that visits all cities\n    max_D = min(min_diff, X - min_diff)\n    \n    return str(max_D)"
    },
    {
        "number": 4126,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n\n    # Check if length of string is odd\n    if n % 2 == 0:\n        return \"No\"\n\n    # Check if string is a palindrome\n    if s != s[::-1]:\n        return \"No\"\n\n    # Check if the 1st through ((N-1)/2)-th characters are palindromes\n    if s[: (n + 1) // 2] != s[: (n + 1) // 2][::-1]:\n        return \"No\"\n\n    # Check if the (N+3)/2-st through N-th characters are palindromes\n    if s[(n + 3) // 2 :] != s[(n + 3) // 2 :][::-1]:\n        return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4126,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    middle = n // 2\n    if n % 2 == 0 or n < 3 or n > 99:\n        return \"No\"\n    if s[:middle] != s[middle+1:][::-1]:\n        return \"No\"\n    if s[middle+1:] != s[:n-middle-1][::-1]:\n        return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4126,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    \n    if n % 2 == 0 or n < 3 or n > 99:\n        return \"No\"\n    \n    mid = n // 2\n    \n    for i in range(mid):\n        if s[i] != s[n - i - 1]:\n            return \"No\"\n        \n        if i < mid - 1:\n            if s[i + 1] != s[n - i - 2]:\n                return \"No\"\n    \n    return \"Yes\""
    },
    {
        "number": 4126,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n\n    # Check if S is a palindrome\n    if s != s[::-1]:\n        return \"No\"\n\n    # Check if the string formed by the 1-st through ((N-1)/2)-th characters is a palindrome\n    if s[:n//2] != s[:n//2][::-1]:\n        return \"No\"\n\n    # Check if the string consisting of the (N+3)/2-st through N-th characters is a palindrome\n    if s[n//2+1:][::-1] != s[n//2+1:]:\n        return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4126,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n\n    if n % 2 == 0 or n < 3 or n > 99:\n        return \"No\"\n\n    if s != s[::-1]:\n        return \"No\"\n\n    mid = n // 2\n    if s[:mid] != s[:mid][::-1]:\n        return \"No\"\n\n    if s[(n + 3) // 2 - 1:] != s[(n + 3) // 2 - 1:][::-1]:\n        return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4126,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n\n    def is_palindrome(string: str) -> bool:\n        return string == string[::-1]\n\n    if n % 2 == 0 or n < 3 or n > 99:\n        return \"No\"\n\n    if not is_palindrome(s):\n        return \"No\"\n\n    left_index, right_index = 1, (n - 1) // 2\n    while left_index <= right_index:\n        if s[left_index] != s[right_index]:\n            return \"No\"\n        left_index += 1\n        right_index -= 1\n\n    left_index, right_index = (n + 3) // 2, n - 1\n    while left_index <= right_index:\n        if s[left_index] != s[right_index]:\n            return \"No\"\n        left_index += 1\n        right_index -= 1\n\n    return \"Yes\""
    },
    {
        "number": 4126,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n\n    if n % 2 == 0:\n        return \"No\"\n\n    mid = n // 2\n    left = s[:mid]\n    right = s[mid + 1:]\n\n    if left != left[::-1]:\n        return \"No\"\n\n    if right != right[::-1]:\n        return \"No\"\n\n    return \"Yes\"\n\ndef"
    },
    {
        "number": 4126,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    N = len(S)\n    if N % 2 == 0:\n        return \"No\"\n\n    # check if S is a palindrome\n    for i in range(N // 2):\n        if S[i] != S[N - i - 1]:\n            return \"No\"\n\n    # check if the string formed by the 1-st through ((N-1)/2)-th characters of S is a palindrome\n    left_half = S[1:(N - 1) // 2]\n    for i in range(len(left_half) // 2):\n        if left_half[i] != left_half[len(left_half) - i - 1]:\n            return \"No\"\n\n    # check if the string consisting of the (N+3)/2-st through N-th characters of S is a palindrome\n    right_half = S[(N + 3) // 2:N]\n    for i in range(len(right_half) // 2):\n        if right_half[i] != right_half[len(right_half) - i - 1]:\n            return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4126,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n\n    # Check if the length of S is odd\n    if n % 2 == 0:\n        return \"No\"\n\n    # Check if S is a palindrome\n    if s != s[::-1]:\n        return \"No\"\n\n    # Check if the middle character is even or odd\n    if n % 2 == 0:\n        middle_left = n // 2\n        middle_right = n // 2\n    else:\n        middle_left = n // 2 - 1\n        middle_right = n // 2 + 1\n\n    # Check if the left substring is a palindrome\n    left_substring = s[:middle_left]\n    if left_substring != left_substring[::-1]:\n        return \"No\"\n\n    # Check if the right substring is a palindrome\n    right_substring = s[middle_right:]\n    if right_substring != right_substring[::-1]:\n        return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4126,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    N = len(S)\n    if N % 2 == 0:\n        return \"No\"\n\n    is_palindrome = lambda s: s == s[::-1]\n\n    def is_strong_palindrome(S):\n        for i in range(N // 2):\n            if S[i] != S[-i - 1]:\n                return False\n        return True\n\n    if is_palindrome(S) and is_strong_palindrome(S):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4127,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(float, stdin.split())\n    result = a * b\n    truncated_result = int(result)\n    return str(truncated_result)\n\ndef"
    },
    {
        "number": 4127,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(float, stdin.split())\n    result = a * b\n    result = int(result)  # truncate fractional part\n    return str(result)"
    },
    {
        "number": 4127,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(float, stdin.split())\n    result = A * B\n    truncated_result = int(result)\n    return str(truncated_result)"
    },
    {
        "number": 4127,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    result = A * B\n    truncated_result = int(result)\n    return str(truncated_result)\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4127,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    result = A * B\n    integer_part = int(result)\n    return str(integer_part)"
    },
    {
        "number": 4127,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(float, stdin.split())\n    result = A * B\n    truncated_result = int(result)\n    return str(truncated_result)"
    },
    {
        "number": 4127,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(float, stdin.split())\n    result = A * B\n    result = int(result)\n    return str(result)"
    },
    {
        "number": 4127,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    result = A * B\n    truncated = int(result)\n    return str(truncated)"
    },
    {
        "number": 4127,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(float, stdin.split())\n    product = A * B\n    truncated = int(product)\n    return str(truncated)\n\ndef"
    },
    {
        "number": 4127,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(float, stdin.split())\n    result = A * B\n    truncated_result = int(result)\n    return str(truncated_result)"
    },
    {
        "number": 4128,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.strip())\n    results = []\n    for i in range(cases):\n        n = int(stdin.strip())\n        if n == 0:\n            results.append(\"0\")\n        elif n == 1:\n            results.append(\"1\")\n        else:\n            ways = 0\n            for a in range(1, n // 2 + 1):\n                if n - a >= a:\n                    ways += 1\n            results.append(str(ways))\n    return \"\\n\".join(results)\n\n\ndef"
    },
    {
        "number": 4128,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for i in range(t):\n        n = int(input())\n        count = 0\n        for a in range(1, n//2 + 1):\n            b = n - a\n            if a > b:\n                count += 1\n        print(count)"
    },
    {
        "number": 4128,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def count_ways(n: int) -> int:\n        if n == 0 or n == 1:\n            return 1\n        ways = 0\n        for i in range(n // 2 + 1, 0, -1):\n            ways += count_ways(i - 1) * count_ways(n - i)\n        return ways\n\n    def main() -> None:\n        t = int(stdin.readline())\n        for _ in range(t):\n            n = int(stdin.readline())\n            print(count_ways(n))\n\n    main()\n"
    },
    {
        "number": 4128,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    result = []\n    for _ in range(t):\n        n = int(input())\n        if n == 1:\n            result.append(\"1\")\n        elif n == 2:\n            result.append(\"0\")\n        else:\n            result.append(str(n - 1))\n    return \"\\n\".join(result)\n\ndef"
    },
    {
        "number": 4128,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def count_ways(n: int, a: int, b: int) -> int:\n        if n < a + b or a < b or a > n:\n            return 0\n        elif a == n or b == n:\n            return 1\n        else:\n            return count_ways(n - 1, a - 1, b + 1) + count_ways(n - 1, a + 1, b - 1)\n\n    t = int(stdin.strip().split()[0])\n    results = []\n    for i in range(t):\n        n = int(input())\n        a = 1\n        b = 1\n        count = 0\n        while a <= n // 2:\n            count += count_ways(n, a, b)\n            b += 1\n        results.append(count)\n\n    return \"\\n\".join(map(str, results))\n"
    },
    {
        "number": 4128,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split(\"\\n\")\n    t = int(stdin_list[0])\n    result = []\n    \n    for i in range(1, t+1):\n        n = int(stdin_list[i])\n        if n == 1:\n            result.append(\"1\")\n        elif n == 2:\n            result.append(\"2\")\n        elif n > 2:\n            result.append(str((n-1)//2 + 1))\n        else:\n            result.append(\"0\")\n    \n    return \"\\n\".join(result)"
    },
    {
        "number": 4128,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.strip().split('\\n')\n    result = []\n    \n    for test_case in test_cases[1:]:\n        n = int(test_case)\n        count = 0\n        \n        for i in range(1, n // 2 + 1):\n            if i > n - i:\n                break\n            count += 1\n        \n        result.append(str(count))\n    \n    return '\\n'.join(result)\n\ninput_str = '''6\n7\n1\n2\n3\n2000000000\n763243547'''\noutput_str = solution(input_str)\nprint(output_str) "
    },
    {
        "number": 4128,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    result = []\n\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        count = 0\n\n        for a in range(1, n // 2 + 1):\n            b = n - a\n            if a > b:\n                count += 1\n\n        result.append(str(count))\n\n    return '\\n'.join(result)\n"
    },
    {
        "number": 4128,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.split(\"\\n\")\n    result = []\n    for test_case in test_cases[1:]:\n        n = int(test_case)\n        count = 0\n        for a in range(1, n + 1):\n            b = n - a\n            if a > b:\n                count += 1\n        result.append(str(count))\n    return \"\\n\".join(result)"
    },
    {
        "number": 4128,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.readline())\n    answer = \"\"\n\n    for _ in range(test_cases):\n        n = int(stdin.readline())\n        count = 0\n\n        for a in range(1, n + 1):\n            if a > n - a:\n                break\n            count += 1\n\n        answer += str(count) + \"\\n\"\n\n    return answer\n\n\ndef"
    },
    {
        "number": 4129,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split()[:3])\n    roads = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:m+1]]\n    graph = [[] for _ in range(n+1)]\n    for u, v in roads:\n        graph[u].append(v)\n        graph[v].append(u)\n\n    def dfs(u: int) -> bool:\n        visited = [False] * (n+1)\n        def traverse(v: int) -> bool:\n            if not visited[v]:\n                visited[v] = True\n                for w in graph[v]:\n                    traverse(w)\n                return True\n            return False\n        return traverse(u)\n\n    count = 0\n    for i in range(1, n+1):\n        if i != s and not dfs(i):\n            count += 1\n    return str(count)\n\ninput_data = '''9 9 1\n1 2\n1 3\n2 3\n1 5\n5 6\n6 1\n1 8\n9 8\n7 1'''\nprint(solution(input_data)) # Output: 3\n\ninput_data = '''5 4 5\n1 2\n2 3\n3 4\n4 1'''\nprint(solution(input_data)) # Output: 1 "
    },
    {
        "number": 4129,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n    roads = {}\n    for _ in range(m):\n        u, v = map(int, input().split())\n        if u not in roads:\n            roads[u] = []\n        if v not in roads:\n            roads[v] = []\n        roads[u].append(v)\n        roads[v].append(u)\n\n    visited = [False] * (n + 1)\n    queue = [s]\n    visited[s] = True\n\n    while queue:\n        city = queue.pop(0)\n        for neighbor in roads[city]:\n            if not visited[neighbor]:\n                visited[neighbor] = True\n                queue.append(neighbor)\n\n    if all(visited[1:]):\n        return \"0\"\n\n    count = 0\n    for i in range(1, n + 1):\n        if not visited[i]:\n            count += 1\n            visited[i] = True\n            queue.append(i)\n\n    return str(count)\n"
    },
    {
        "number": 4129,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split()[:3])\n    roads = set()\n    graph = [set() for _ in range(n+1)]\n\n    for _ in range(m):\n        u, v = map(int, stdin.split()[3:])\n        graph[u].add(v)\n        graph[v].add(u)\n        roads.add((min(u, v), max(u, v)))\n\n    visited = [False] * (n+1)\n    queue = [s]\n    visited[s] = True\n\n    while queue:\n        for city in graph[queue.pop(0)]:\n            if not visited[city]:\n                visited[city] = True\n                queue.append(city)\n\n    if all(visited):\n        return \"0\"\n\n    new_roads = 0\n    new_graph = [set() for _ in range(n+1)]\n\n    for u, v in roads:\n        new_graph[u].add(v)\n        new_graph[v].add(u)\n\n    for u in range(1, n+1):\n        for v in range(u+1, n+1):\n            if not new_graph[u] & new_graph[v]:\n                new_roads += 1\n\n    return str(new_roads)\n"
    },
    {
        "number": 4129,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split()[:3])\n    roads = [tuple(map(int, line.split())) for line in stdin.split()[3:]]\n    graph = [[0 for _ in range(n+1)] for _ in range(n+1)]\n\n    for u, v in roads:\n        graph[u][v] = graph[v][u] = 1\n\n    def bfs(start):\n        visited = [False] * (n+1)\n        visited[start] = True\n        queue = [start]\n        for u in queue:\n            for v in range(1, n+1):\n                if not visited[v] and graph[u][v]:\n                    visited[v] = True\n                    queue.append(v)\n        return visited.count(False)\n\n    new_roads = bfs(s)\n    if new_roads == 0:\n        return 0\n\n    for u, v in roads:\n        graph[u][v] = graph[v][u] = 0\n\n    total_roads = n * (n-1) // 2\n    min_roads = total_roads\n\n    for u in range(1, n+1):\n        if graph[s][u] or graph[u][s]:\n            continue\n        for v in range(1, n+1):\n            if u == v or graph[u][v] or graph[v][u]:\n                continue\n            graph[u][v] = graph[v][u] = 1\n            new_roads = bfs(s)\n            if new_roads < min_roads:\n                min_roads = new_roads\n            graph[u][v] = graph[v][u] = 0\n\n    return min_roads"
    },
    {
        "number": 4129,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split()[0:3])\n    roads = {}\n    for i in range(m):\n        u, v = map(int, stdin.split()[3*i+3:3*i+5])\n        if u in roads:\n            roads[u].append(v)\n        else:\n            roads[u] = [v]\n        if v in roads:\n            roads[v].append(u)\n        else:\n            roads[v] = [u]\n    \n    visited = [False] * (n+1)\n    queue = [s]\n    visited[s] = True\n    count = 0\n    \n    while queue:\n        next_queue = []\n        for city in queue:\n            for neighbor in roads[city]:\n                if not visited[neighbor]:\n                    visited[neighbor] = True\n                    count += 1\n                    next_queue.append(neighbor)\n        queue = next_queue\n    \n    if count == n:\n        return \"0\"\n    else:\n        return str(n - count)"
    },
    {
        "number": 4129,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split()[:3])\n    adj_list = [[] for _ in range(n + 1)]\n    for i in range(m):\n        u, v = map(int, stdin.split()[3*i+3:3*i+5])\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n\n    def dfs(node: int, visited: set) -> set:\n        visited.add(node)\n        for neighbor in adj_list[node]:\n            if neighbor not in visited:\n                visited = dfs(neighbor, visited)\n        return visited\n\n    all_visited = dfs(s, set())\n    extra_roads = 0\n    for i in range(1, n + 1):\n        if i not in all_visited:\n            extra_roads += 1\n\n    return str(extra_roads)"
    },
    {
        "number": 4129,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, input().split())\n    roads = set()\n    for _ in range(m):\n        u, v = map(int, input().split())\n        roads.add((u, v))\n        roads.add((v, u))\n\n    visited = set([s])\n    queue = [s]\n    extra_roads = 0\n\n    while queue:\n        city = queue.pop(0)\n        for neighbor in range(1, n + 1):\n            if neighbor == city:\n                continue\n            if (city, neighbor) not in roads and (neighbor, city) not in roads:\n                extra_roads += 1\n                roads.add((city, neighbor))\n                roads.add((neighbor, city))\n            if neighbor not in visited:\n                visited.add(neighbor)\n                queue.append(neighbor)\n\n    return str(extra_roads)\n\n\ninput_string = \"\"\ninput_string += \"9 9 1\\n\"\ninput_string += \"1 2\\n\"\ninput_string += \"1 3\\n\"\ninput_string += \"2 3\\n\"\ninput_string += \"1 5\\n\"\ninput_string += \"5 6\\n\"\ninput_string += \"6 1\\n\"\ninput_string += \"1 8\\n\"\ninput_string += \"9 8\\n\"\ninput_string += \"7 1\\n\"\n\nprint(solution(input_string)) "
    },
    {
        "number": 4129,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split()[:3])\n    roads = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:m+1]]\n    graph = [set() for _ in range(n)]\n    \n    for road in roads:\n        u, v = road\n        graph[u-1].add(v-1)\n        graph[v-1].add(u-1)\n    \n    def dfs(graph, start, visited):\n        visited.add(start)\n        for neighbor in graph[start]:\n            if neighbor not in visited:\n                dfs(graph, neighbor, visited)\n    \n    visited = set()\n    dfs(graph, s-1, visited)\n    \n    return str(len(visited) - 1)"
    },
    {
        "number": 4129,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split()[:3])\n    cities = set(range(1, n+1))\n    roads = set()\n    for line in stdin.split(\"\\n\")[3:]:\n        if line:\n            u, v = map(int, line.split())\n            roads.add((u, v))\n    reachable = set()\n    queue = [s]\n    while queue:\n        city = queue.pop(0)\n        if city in reachable:\n            continue\n        reachable.add(city)\n        for u, v in roads:\n            if u == city and v not in reachable:\n                queue.append(v)\n            elif v == city and u not in reachable:\n                queue.append(u)\n    return str(len(cities - reachable))"
    },
    {
        "number": 4129,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split()[:3])\n    graph = [[] for _ in range(n+1)]\n\n    for i in range(m):\n        u, v = map(int, stdin.split()[3+2*i:5+2*i])\n        graph[u].append(v)\n        graph[v].append(u)\n\n    def dfs(u, visited):\n        if u in visited:\n            return True\n        visited.add(u)\n        for v in graph[u]:\n            if not dfs(v, visited):\n                return False\n        return True\n\n    count = 0\n    for i in range(1, n+1):\n        if i != s and not dfs(i, set()):\n            count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4130,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    weights = list(map(int, stdin.readline().strip().split()))\n    unique_weights = set(weights)\n    max_count = 0\n\n    for weight in unique_weights:\n        count = weights.count(weight)\n        if count > max_count:\n            max_count = count\n\n    return str(max_count)"
    },
    {
        "number": 4130,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, weights = stdin.split()\n    n = int(n)\n    weights = list(map(int, weights.split()))\n\n    unique_weights = set(weights)\n    unique_weights = sorted(list(unique_weights))\n\n    max_team_size = 0\n    for i in range(len(unique_weights)):\n        for j in range(i + 1, len(unique_weights)):\n            team_size = len(unique_weights[i:j])\n            if team_size > max_team_size:\n                max_team_size = team_size\n\n    return str(max_team_size)"
    },
    {
        "number": 4130,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a_str = stdin.split('\\n')\n    n = int(n)\n    a = [int(x) for x in a_str.split()]\n    \n    boxers = set()\n    max_boxers = 0\n    \n    for weight in a:\n        boxers.add(weight)\n        max_boxers = max(max_boxers, len(boxers))\n        \n    return str(max_boxers)"
    },
    {
        "number": 4130,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, weights = stdin.split()\n    n = int(n)\n    weights = list(map(int, weights.split()))\n\n    unique_weights = set(weights)\n    max_team_size = 0\n\n    for weight in unique_weights:\n        temp_weights = [w for w in weights if w != weight]\n        team_size = len(temp_weights) + 1\n        if team_size > max_team_size:\n            max_team_size = team_size\n\n    return str(max_team_size)"
    },
    {
        "number": 4130,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, boxers = stdin.split()\n    n = int(n)\n    boxers = [int(x) for x in boxers.split()]\n\n    boxers.sort()\n    unique_boxers = set(boxers)\n\n    unique_boxers.discard(1)\n    max_boxers = len(unique_boxers)\n\n    return str(max_boxers)\n"
    },
    {
        "number": 4130,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    weights = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    max_team_size = 0\n    for i in range(1, 150001):\n        team_weights = set()\n        for weight in weights:\n            team_weights.add(weight + i)\n        max_team_size = max(max_team_size, len(team_weights))\n\n    return str(max_team_size)\n\ndef"
    },
    {
        "number": 4130,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, weights = stdin.split(\"\\n\")\n    n = int(n)\n    weights = list(map(int, weights.split()))\n    \n    unique_weights = set(weights)\n    unique_count = len(unique_weights)\n    return str(unique_count)\n\ndef"
    },
    {
        "number": 4130,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    weights = list(map(int, stdin.split()[1:]))\n    boxers = set()\n    max_boxers = 0\n\n    for weight in weights:\n        if weight > 1:\n            boxers.add(weight - 1)\n        if weight < 150001:\n            boxers.add(weight + 1)\n\n    if len(boxers) > max_boxers:\n        max_boxers = len(boxers)\n\n    return str(max_boxers)\n\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4130,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    weights = list(map(int, lines[1].split()))\n    \n    max_team_size = 0\n    for i in range(1, len(weights)):\n        weights[i] = min(weights[i], weights[i-1]+1, 150001-weights[i-1])\n        \n    weights = sorted(set(weights))\n    max_team_size = len(weights)\n    \n    return str(max_team_size)\n\n\ndef"
    },
    {
        "number": 4130,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    weights = list(map(int, lines[1].split()))\n    max_weight = max(weights)\n    \n    # Make sure that the maximum weight is not 150000\n    if max_weight >= 150000:\n        return str(n)\n    \n    # Create a list to store the number of unique boxers with each weight\n    weight_count = [0] * (max_weight + 1)\n    for weight in weights:\n        weight_count[weight] += 1\n    \n    # Initialize variables to store the maximum number of boxers in a team and the number of unique boxers with the maximum weight\n    max_boxers = 0\n    max_unique_boxers = 0\n    \n    # Iterate through all the weights and find the maximum number of boxers in a team\n    for unique_boxers in range(1, len(weight_count) + 1):\n        boxers = sum(weight_count[:unique_boxers])\n        if boxers > max_boxers:\n            max_boxers = boxers\n            max_unique_boxers = unique_boxers - 1\n        elif boxers == max_boxers and unique_boxers - 1 > max_unique_boxers:\n            max_unique_boxers = unique_boxers - 1\n    \n    return str(max_boxers)"
    },
    {
        "number": 4131,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n, m = map(int, lines[0].split())\n    prefectures = {}\n    for i in range(1, m+1):\n        line = lines[i].split()\n        prefecture, year = map(int, line)\n        if prefecture not in prefectures:\n            prefectures[prefecture] = []\n        prefectures[prefecture].append(year)\n    \n    result = []\n    for i in range(1, n+1):\n        if i not in prefectures:\n            continue\n        prefecture_cities = sorted(prefectures[i])\n        for j, year in enumerate(prefecture_cities, 1):\n            id_number = f\"{i:06d}{j:06d}\"\n            result.append(id_number)\n    \n    return \"\\n\".join(result)"
    },
    {
        "number": 4131,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split('\\n')\n    n, m = map(int, input_lines[0].split())\n    prefectures = []\n    city_years = []\n    city_ids = []\n\n    for i in range(1, m + 1):\n        prefecture, year = map(int, input_lines[i].split())\n        prefectures.append(prefecture)\n        city_years.append((year, i - 1))\n\n    city_years.sort()\n\n    for i in range(m):\n        city_ids.append((prefectures[city_years[i][1]], i + 1))\n\n    return '\\n'.join(['{:06d}{:06d}'.format(prefecture, index) for prefecture, index in city_ids])\n\ndef"
    },
    {
        "number": 4131,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    num_prefectures, num_cities = map(int, lines[0].split())\n    cities = []\n    prefecture_to_city_list = [[] for _ in range(num_prefectures)]\n    \n    for i in range(1, num_cities + 1):\n        prefecture, year = map(int, lines[i].split())\n        city = {\"prefecture\": prefecture, \"year\": year, \"index\": i}\n        cities.append(city)\n        prefecture_to_city_list[prefecture - 1].append(city)\n    \n    cities.sort(key=lambda city: (city[\"prefecture\"], city[\"year\"]))\n    \n    for prefecture, city_list in enumerate(prefecture_to_city_list, 1):\n        for index, city in enumerate(city_list, 1):\n            city[\"index\"] = index\n    \n    result = []\n    for city in cities:\n        id_number = f\"{city['prefecture']:0>6}{city['index']:0>6}\"\n        result.append(id_number)\n    \n    return \"\\n\".join(result)\n\ninput_str = \"2 3\\n1 32\\n2 63\\n1 12\"\nprint(solution(input_str)) "
    },
    {
        "number": 4131,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[0:2])\n    prefectures = [[] for _ in range(N)]\n\n    for i in range(M):\n        prefecture, year = map(int, stdin.split()[2*i:2*(i+1)])\n        prefectures[prefecture-1].append((year, i+1))\n\n    for prefecture in prefectures:\n        prefecture.sort()\n\n    city_id = []\n    for prefecture in prefectures:\n        for i, (year, city_index) in enumerate(prefecture):\n            city_id.append(f\"{city_index:06d}\")\n\n    return \"\".join(city_id)\n\ninput_string = \"2 3\\n1 32\\n2 63\\n1 12\"\nprint(solution(input_string)) "
    },
    {
        "number": 4131,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    prefectures, cities = map(int, stdin.split())\n    city_info = [tuple(map(int, input().split())) for _ in range(cities)]\n    city_info.sort(key=lambda x: x[1])\n\n    id_numbers = []\n    for city_index, (prefecture, year) in enumerate(city_info, start=1):\n        id_numbers.append(f\"{prefecture:06d}{city_index:06d}\")\n\n    return \"\\n\".join(id_numbers)\n\nstdin = input()\nwhile stdin:\n    print(solution(stdin))\n    stdin = input() "
    },
    {
        "number": 4131,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    prefectures = {}\n    cities = []\n\n    for line in stdin.split('\\n')[2:]:\n        if line:\n            prefecture, year = map(int, line.split())\n            city = (year, prefecture)\n            cities.append(city)\n            if prefecture in prefectures:\n                prefectures[prefecture].append(city)\n            else:\n                prefectures[prefecture] = [city]\n\n    id_numbers = []\n    for i, city in enumerate(sorted(cities)):\n        year, prefecture = city\n        x = prefectures[prefecture].index(city) + 1\n        id_numbers.append(f\"{prefecture:06d}{x:06d}\")\n\n    return \"\\n\".join(id_numbers)"
    },
    {
        "number": 4131,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[0:2])\n    cities = []\n    prefectures = [[] for _ in range(N+1)]\n    \n    for i in range(M):\n        line = stdin.split()[2*i+2:2*(i+1)]\n        P_i, Y_i = map(int, line)\n        cities.append((P_i, Y_i, i+1))\n        prefectures[P_i].append(i+1)\n    \n    cities.sort(key=lambda x: (x[0], x[1]))\n    for i in range(N+1):\n        prefectures[i].sort()\n    \n    result = []\n    for i in range(M):\n        city = cities[i]\n        prefecture = prefectures[city[0]]\n        index = prefecture.index(city[2]) + 1\n        if index < 10:\n            index = \"0\" + str(index)\n        else:\n            index = str(index)\n        result.append(\"0\"*(6-len(str(city[0]))) + str(city[0]) + index)\n    \n    return \"\\n\".join(result)"
    },
    {
        "number": 4131,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    prefectures = {}\n    n, m = map(int, stdin.split()[0:2])\n    cities = [tuple(map(int, line.split())) for line in stdin.split()[2:]]\n    \n    for i, city in enumerate(cities):\n        prefecture = city[0]\n        if prefecture in prefectures:\n            prefectures[prefecture].append(i)\n        else:\n            prefectures[prefecture] = [i]\n    \n    result = []\n    for prefecture, cities in sorted(prefectures.items()):\n        for i, city in enumerate(cities):\n            result.append(f\"{prefecture:06d}{i+1:06d}\")\n    \n    return \"\\n\".join(result)\n\nstdin = \"2 3\\n1 32\\n2 63\\n1 12\"\nprint(solution(stdin)) "
    },
    {
        "number": 4131,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[0:2])\n    cities = []\n    for line in stdin.split()[2:]:\n        prefecture, year = map(int, line.split())\n        cities.append((prefecture, year))\n    \n    id_numbers = []\n    for i, (prefecture, year) in enumerate(cities):\n        x = sorted([y for _, y in cities if _ == prefecture and y <= year], reverse=True).index(year) + 1\n        id_numbers.append(f\"{prefecture:06d}{x:06d}\")\n    \n    return \"\\n\".join(id_numbers)\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4131,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num_prefectures, num_cities = map(int, stdin.split()[0:2])\n    prefectures = [int(line.split()[0]) for line in stdin.split()[2:]]\n    years = [int(line.split()[1]) for line in stdin.split()[2:]]\n\n    city_ids = []\n    for i in range(num_cities):\n        prefecture = prefectures[i]\n        year = years[i]\n        city_index = 1\n\n        for j in range(i + 1, num_cities):\n            if prefectures[j] == prefecture and years[j] < year:\n                city_index += 1\n\n        prefecture_str = str(prefecture).zfill(6)\n        city_index_str = str(city_index).zfill(6)\n\n        city_id = prefecture_str + city_index_str\n        city_ids.append(city_id)\n\n    return \"\\n\".join(city_ids)\n\nstdin = \"2 3\\n1 32\\n2 63\\n1 12\"\nprint(solution(stdin)) "
    },
    {
        "number": 4132,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    A = list(map(int, lines[1].split()))\n    assert len(A) == N\n\n    def is_alive(monster: int) -> bool:\n        return A[monster - 1] > 0\n\n    def attack(monster1: int, monster2: int) -> None:\n        A[monster2 - 1] -= A[monster1 - 1]\n\n    while len([i for i in range(1, N + 1) if is_alive(i)]) > 1:\n        attack(random.choice([i for i in range(1, N + 1) if is_alive(i)]), random.choice([i for i in range(1, N + 1) if is_alive(i)]))\n\n    return str(A[-1])"
    },
    {
        "number": 4132,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, *healths = map(int, stdin.split())\n\n    while len(healths) > 1:\n        attacker = random.randint(0, len(healths) - 1)\n        target = random.randint(0, len(healths) - 1)\n\n        while target == attacker:\n            target = random.randint(0, len(healths) - 1)\n\n        healths[target] -= healths[attacker]\n\n        healths = [health for health in healths if health > 0]\n\n    return str(healths[0])\n\nimport random\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4132,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    lines = stdin.strip().split(\"\\n\")\n    N = int(lines[0])\n    healths = [int(x) for x in lines[1].split()]\n\n    # If only one monster is left, return its health\n    if N == 1:\n        return str(healths[0])\n\n    # Calculate the total health of the monsters\n    total_health = sum(healths)\n\n    # Calculate the minimum possible final health of the last monster\n    min_final_health = max(healths)\n    for health in healths:\n        if health < min_final_health:\n            min_final_health = health\n\n    return str(min_final_health)"
    },
    {
        "number": 4132,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, *health = stdin.split()\n    N = int(N)\n    health = [int(h) for h in health]\n\n    while len(health) > 1:\n        first_monster = random.randrange(N)\n        second_monster = random.randrange(N)\n\n        while second_monster == first_monster:\n            second_monster = random.randrange(N)\n\n        health[first_monster] -= health[second_monster]\n        health[second_monster] = 0\n\n        health = [h for h in health if h > 0]\n        N = len(health)\n\n    return str(health[0])"
    },
    {
        "number": 4132,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, health_values = stdin.split(\"\\n\")\n    N = int(N)\n    health_values = list(map(int, health_values.split()))\n    \n    while len(health_values) > 1:\n        attacker_index = random.randint(0, len(health_values) - 1)\n        target_index = random.randint(0, len(health_values) - 1)\n        \n        while target_index == attacker_index:\n            target_index = random.randint(0, len(health_values) - 1)\n        \n        attacker_health = health_values[attacker_index]\n        target_health = health_values[target_index]\n        \n        health_values[target_index] -= attacker_health\n        \n        if health_values[target_index] <= 0:\n            health_values.pop(target_index)\n    \n    return str(health_values[0])"
    },
    {
        "number": 4132,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_monsters, health_values = stdin.split(\"\\n\")\n    num_monsters = int(num_monsters)\n    health_values = [int(h) for h in health_values.split()]\n\n    while len(health_values) > 1:\n        # Choose two random monsters to attack\n        attacker = random.choice(health_values)\n        target = random.choice(health_values)\n\n        # Reduce target's health by attacker's current health\n        target -= attacker\n\n        # Remove monster from list if it's no longer alive\n        if target <= 0:\n            health_values.remove(target)\n\n    return str(health_values[0])"
    },
    {
        "number": 4132,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, healths = stdin.split()\n    N = int(N)\n    healths = [int(h) for h in healths]\n\n    while len(healths) > 1:\n        attacker = random.choice(healths)\n        defender = random.choice([h for h in healths if h != attacker])\n        defender -= attacker\n        healths = [h for h in healths if h > 0]\n\n    return str(healths[0])"
    },
    {
        "number": 4132,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def take_input() -> List[int]:\n        n, *health = map(int, stdin.split())\n        return n, health\n\n    def is_alive(health: int) -> bool:\n        return health > 0\n\n    def attack(attacked: int, attacker: int, health: List[int]) -> None:\n        health[attacked - 1] -= health[attacker - 1]\n\n    def attack_random(health: List[int]) -> None:\n        alive = [i + 1 for i in range(n) if is_alive(health[i])]\n        while len(alive) > 1:\n            attacked = random.choice(alive)\n            attacker = random.choice([i for i in alive if i != attacked])\n            attack(attacked, attacker, health)\n            if not is_alive(health[attacker - 1]):\n                alive.remove(attacker)\n            if not is_alive(health[attacked - 1]):\n                alive.remove(attacked)\n\n    n, health = take_input()\n    attack_random(health)\n    return str(health[-1])"
    },
    {
        "number": 4132,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, healths = stdin.split()\n    n = int(n)\n    healths = [int(health) for health in healths.split()]\n    monsters = [i for i in range(n)]\n    while len(monsters) > 1:\n        attacker = random.choice(monsters)\n        defender = random.choice(monsters)\n        while attacker == defender:\n            defender = random.choice(monsters)\n        monsters.remove(defender)\n        healths[attacker] += healths[defender]\n        healths[defender] = 0\n    return str(healths[0])"
    },
    {
        "number": 4132,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, healths = stdin.split('\\n')\n    N = int(N)\n    healths = list(map(int, healths.split()))\n\n    while len(healths) > 1:\n        attacker = random.randint(0, len(healths) - 1)\n        target = random.randint(0, len(healths) - 1)\n        while attacker == target:\n            target = random.randint(0, len(healths) - 1)\n        healths[target] -= healths[attacker]\n        healths = [health for health in healths if health > 0]\n\n    return str(healths[0])"
    },
    {
        "number": 4133,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # TODO: implement the solution function\n    pass"
    },
    {
        "number": 4133,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    jaws = {}\n    stomach = []\n    diet = []\n\n    for i, char in enumerate(stdin):\n        if char in ('+', '-', '*', '/'):\n            jaws[i] = char\n        elif char in ('_', '?', ':', '>'):\n            diet.append(char)\n        elif char in ('<', ','):\n            diet.append(char)\n            stomach.append(int(stdin[i-1]) if i > 0 and stdin[i-1] in ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9') else 0)\n\n    if not diet or len(diet) % 2 != 0:\n        return \"false\"\n\n    for i in range(len(diet) - 2, -1, -2):\n        if diet[i] == '>' and len(stomach) < len(jaws):\n            return \"false\"\n        elif diet[i] == '>':\n            stomach[-1] += int(stdin[jaws[list(jaws.keys())[len(stomach)]]])\n        elif diet[i] == ',' and len(stomach) < len(jaws):\n            return \"false\"\n        elif diet[i] == ',':\n            stomach.append(int(stdin[jaws[list(jaws.keys())[len(stomach)]]]) if len(jaws) > len(stomach) else 0)\n        elif diet[i] == '<' and len(stomach) < len(jaws):\n            return \"false\"\n        elif diet[i] == '<':\n            stomach.pop()\n        elif diet[i] == '+' and len(stomach) < len(jaws):\n            return \"false\"\n        elif diet[i] == '+':\n            stomach[-1] += stomach[-2]\n        elif diet[i] == '-' and len(stomach) < len(jaws):\n            return \"false\"\n        elif diet[i] == '-':\n            stomach[-1] -= stomach[-2]\n        elif diet[i] == '*' and len(stomach) < len(jaws):\n            return \"false\"\n        elif diet[i] == '*':\n            stomach[-1] *= stomach[-2]\n        elif diet[i] == '/' and len(stomach) < len(jaws):\n            return \"false\"\n        elif diet[i] == '/':\n            stomach[-1] //= stomach[-2]\n        else:\n            return \"false\"\n\n    if len(stomach) != len(jaws):\n        return \"false\"\n\n    return ''.join(str(x) for x in stomach)"
    },
    {
        "number": 4133,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(name: str) -> bool:\n        count = 0\n        for char in name:\n            if char in \"?()/+*-_><,\":\n                count += 1\n        return count == len(name)\n\n    def get_jaws(name: str) -> list:\n        jaws = []\n        stack = []\n        for char in name:\n            if char == \"(\":\n                stack.append(\"(\")\n            elif char == \")\":\n                jaws.append(stack.pop())\n            elif char == \"+\":\n                jaws.append(\"+\")\n            elif char == \"*\":\n                jaws.append(\"*\")\n        return jaws\n\n    def get_min_sequence(jaws: list) -> str:\n        sequence = \"\"\n        for jaw in jaws:\n            if jaw == \"(\":\n                sequence += \"0\"\n            elif jaw == \")\":\n                sequence += \"9\"\n            elif jaw == \"+\":\n                sequence += \"2\"\n            elif jaw == \"*\":\n                sequence += \"5\"\n        return sequence\n\n    if not is_valid(stdin):\n        return \"false\"\n\n    jaws = get_jaws(stdin)\n    min_sequence = get_min_sequence(jaws)\n\n    return min_sequence"
    },
    {
        "number": 4133,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    jaws = list(stdin)\n    stomach = []\n    \n    def can_feed(jaws, stomach):\n        for jaw in jaws:\n            if jaw == \">\":\n                stomach.append(stomach.pop())\n            elif jaw == \"<\":\n                stomach.append(stomach.pop(0))\n            elif jaw == \"+\":\n                if not stomach:\n                    return False\n                stomach[-1] = str(int(stomach[-1]) + 1)\n            elif jaw == \"-\":\n                if not stomach:\n                    return False\n                stomach[-1] = str(int(stomach[-1]) - 1)\n            elif jaw == \"*\":\n                if not stomach or len(stomach) < 2:\n                    return False\n                stomach[-1] = str(int(stomach[-2]) * int(stomach[-1]))\n                stomach.pop(-2)\n            elif jaw == \"/\":\n                if not stomach or len(stomach) < 2:\n                    return False\n                stomach[-1] = str(int(stomach[-2]) // int(stomach[-1]))\n                stomach.pop(-2)\n        return stomach == []\n\n    def find_min_feed(jaws, stomach):\n        if can_feed(jaws, stomach):\n            return ''.join(stomach)\n        min_feed = find_min_feed(jaws, stomach + [\"0\"])\n        if min_feed is not None:\n            return min_feed\n        min_feed = find_min_feed(jaws, stomach + [\"1\"])\n        if min_feed is not None:\n            return min_feed\n        min_feed = find_min_feed(jaws, stomach + [\"2\"])\n        if min_feed is not None:\n            return min_feed\n        min_feed = find_min_feed(jaws, stomach + [\"3\"])\n        if min_feed is not None:\n            return min_feed\n        min_feed = find_min_feed(jaws, stomach + [\"4\"])\n        if min_feed is not None:\n            return min_feed\n        min_feed = find_min_feed(jaws, stomach + [\"5\"])\n        if min_feed is not None:\n            return min_feed\n        min_feed = find_min_feed(jaws, stomach + [\"6\"])\n        if min_feed is not None:\n            return min_feed\n        min_feed = find_min_feed(jaws, stomach + [\"7\"])\n        if min_feed is not None:\n            return min_feed\n        min_feed = find_min_feed(jaws, stomach + [\"8\"])\n        if min_feed is not None:\n            return min_feed\n        min_feed = find_min_feed(jaws, stomach + [\"9\"])\n        if min_feed is not None:\n            return min_feed\n        return None\n\n    min_feed = find_min_feed(jaws, stomach)\n    \n    if min_feed:\n        return min_feed\n    else:\n        return \"false\""
    },
    {
        "number": 4133,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    jaws = stdin.count(\"_\") + stdin.count(\"-\") + stdin.count(\"+\")\n    stomach = stdin.count(\"*\") + stdin.count(\"/\")\n    \n    if jaws == 0:\n        return \"false\"\n    \n    if stomach > jaws:\n        return \"false\"\n    \n    result = []\n    for i in range(stomach):\n        result.append(\"9\")\n    \n    for i in range(jaws - stomach):\n        result.append(\"0\")\n    \n    return \"\".join(result)"
    },
    {
        "number": 4133,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    jaws = \"\"\n    for char in stdin:\n        if char in \"><^v\":\n            jaws += char\n        elif char in \"+-*\":\n            jaws += \"+\"\n    diet = {\n        \"__\": \"0\",\n        \"_-\": \"1\",\n        \"-_\": \"2\",\n        \"--\": \"3\",\n        \"__*\": \"4\",\n        \"_-*\": \"5\",\n        \"-_*\": \"6\",\n        \"--*\": \"7\",\n        \"__+\": \"8\",\n        \"_-+\": \"9\",\n        \"-_-\": \"10\",\n        \"--+\": \"11\",\n        \"__*+\": \"12\",\n        \"_-*+\": \"13\",\n        \"-_*+\": \"14\",\n        \"--*+\": \"15\",\n    }\n    result = \"\"\n    for char in jaws:\n        if char == \">\":\n            result += diet[\"__\"]\n        elif char == \"<\":\n            result += diet[\"_-\"]\n        elif char == \"^\":\n            result += diet[\"-_\"]\n        elif char == \"v\":\n            result += diet[\"--\"]\n        elif char == \"*\":\n            result += diet[\"__*\"]\n        elif char == \"+\":\n            result += diet[\"__+\"]\n    return result if result else \"false\""
    },
    {
        "number": 4133,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid_sequence(jaws: str, sequence: str) -> bool:\n        jaws_pointer = 0\n        sequence_pointer = 0\n        while jaws_pointer < len(jaws):\n            if jaws[jaws_pointer] == '+':\n                jaws_pointer += 1\n                if jaws_pointer >= len(jaws) or sequence[sequence_pointer] != '1':\n                    return False\n                sequence_pointer += 1\n            elif jaws[jaws_pointer] == '-':\n                jaws_pointer += 1\n                if jaws_pointer >= len(jaws) or sequence[sequence_pointer] != '0':\n                    return False\n                sequence_pointer += 1\n            else:\n                return False\n            jaws_pointer += 1\n        return sequence_pointer == len(sequence)\n\n    def get_valid_sequences(jaws: str) -> list[str]:\n        valid_sequences = []\n        for i in range(10 ** (len(jaws) - jaws.count('_'))):\n            sequence = str(i).zfill(len(jaws) - jaws.count('_'))\n            if is_valid_sequence(jaws, sequence):\n                valid_sequences.append(sequence)\n        return valid_sequences\n\n    jaws, feed_direction = stdin.split(':')\n    feed_direction = feed_direction.strip()\n\n    if feed_direction == '-__>__':\n        valid_sequences = get_valid_sequences(jaws)\n        return min(valid_sequences) if valid_sequences else 'false'\n    else:\n        return 'false'"
    },
    {
        "number": 4133,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) < 13 or len(stdin) > 1024:\n        return \"false\"\n\n    jaws = stdin.split(\"/\")[0]\n    stomach = stdin.split(\":\")[1].split(\">\")[0].replace(\",\", \"\")\n\n    jaws_length = len(jaws)\n    stomach_length = len(stomach)\n\n    if jaws_length == 0 or stomach_length == 0:\n        return \"false\"\n\n    if jaws_length > 10 or stomach_length > 10:\n        return \"false\"\n\n    jaws_variables = set(jaws)\n    stomach_variables = set(stomach)\n\n    if len(jaws_variables) > 10 or len(stomach_variables) > 10:\n        return \"false\"\n\n    if not jaws_variables.issubset({\"_\", \"(\"}):\n        return \"false\"\n\n    if not stomach_variables.issubset({\"_\", \".\"}):\n        return \"false\"\n\n    if not all(char in \"0123456789\" for char in jaws):\n        return \"false\"\n\n    if not all(char in \"0123456789\" for char in stomach):\n        return \"false\"\n\n    jaws_variables = sorted(jaws_variables, key=lambda x: -ord(x))\n    stomach_variables = sorted(stomach_variables, key=lambda x: -ord(x))\n\n    variables = jaws_variables + stomach_variables\n    result = \"\"\n\n    for var in variables:\n        if var == \"_\":\n            result += \"0\"\n        else:\n            result += \"1\"\n\n    return result"
    },
    {
        "number": 4133,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    jaws = stdin[1:-1]\n    if '?' in jaws or '+' in jaws or '*' in jaws or '/' in jaws:\n        return \"false\"\n    \n    jaws = jaws.replace('_', '0')\n    jaws = jaws.replace('-', '1')\n    jaws = jaws.replace('+', '2')\n    jaws = jaws.replace('*', '3')\n    jaws = jaws.replace('/', '4')\n    jaws = jaws.replace('>', '5')\n    jaws = jaws.replace('<', '6')\n    jaws = jaws.replace(':', '7')\n    jaws = jaws.replace(',', '8')\n    \n    jaws = list(map(int, jaws))\n    jaws.sort()\n    \n    return ''.join(map(str, jaws))"
    },
    {
        "number": 4133,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    golorp_name = stdin\n    jaws = golorp_name[1:-1].split(\"/\")\n    stomach = []\n    for jaw in jaws:\n        if \"+\" in jaw:\n            stomach.append(max(map(int, jaw.split(\"+\"))))\n        elif \"-\" in jaw:\n            stomach.append(min(map(int, jaw.split(\"-\"))))\n        else:\n            stomach.append(int(jaw))\n    if len(stomach) == 0:\n        return \"false\"\n    stomach.sort()\n    return \"\".join(str(x) for x in stomach)"
    },
    {
        "number": 4134,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def xor_sum(path):\n        return path[0] ^ path[-1]\n\n    def explore(n, m, k, i, j, memo, path, count):\n        if i == n and j == m:\n            if xor_sum(path) == k:\n                count[0] += 1\n            return\n\n        if i > n or j > m:\n            return\n\n        if (i, j) in memo:\n            return\n\n        memo.add((i, j))\n\n        explore(n, m, k, i + 1, j, memo, path + [a[i][j]], count)\n        explore(n, m, k, i, j + 1, memo, path + [a[i][j]], count)\n\n        memo.remove((i, j))\n\n    lines = stdin.split('\\n')\n    n, m, k = map(int, lines[0].split())\n    a = [[int(x) for x in line.split()] for line in lines[1:n + 1]]\n\n    memo = set()\n    count = [0]\n    explore(n, m, k, 1, 1, memo, [a[0][0]], count)\n\n    return str(count[0])"
    },
    {
        "number": 4134,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[:3])\n    grid = []\n    for _ in range(n):\n        row = list(map(int, input().split()))\n        grid.append(row)\n\n    def xor_sum(path):\n        xor_result = 0\n        for x, y in path:\n            xor_result ^= grid[x-1][y-1]\n        return xor_result\n\n    def dfs(path, x, y):\n        if x == n and y == m:\n            if xor_sum(path) == k:\n                nonlocal count\n                count += 1\n            return\n\n        if x < n:\n            path.append((x+1, y))\n            dfs(path, x+1, y)\n            path.pop()\n\n        if y < m:\n            path.append((x, y+1))\n            dfs(path, x, y+1)\n            path.pop()\n\n    count = 0\n    dfs([], 1, 1)\n    return str(count)"
    },
    {
        "number": 4134,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(path, k):\n        xor = 0\n        for num in path:\n            xor ^= num\n        return xor == k\n\n    def backtrack(i, j, k):\n        if i == n and j == m:\n            if is_valid(path, k):\n                return 1\n            else:\n                return 0\n\n        if i < n:\n            path.append(a[i][j])\n            count = backtrack(i + 1, j, k)\n            path.pop()\n            if count > 0:\n                return count\n\n        if j < m:\n            path.append(a[i][j])\n            count = backtrack(i, j + 1, k)\n            path.pop()\n            if count > 0:\n                return count\n\n        return 0\n\n    n, m, k = map(int, stdin.split()[:3])\n    a = [list(map(int, line.split())) for line in stdin.split(\"\\n\")[1:n+1]]\n    path = []\n    return str(backtrack(0, 0, k))"
    },
    {
        "number": 4134,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(i, j, xor_sum) -> bool:\n        return (xor_sum ^ a[i][j]) == xor_sum\n\n    def count_paths(i, j, xor_sum, memo) -> int:\n        if i == n and j == m:\n            return 1 if xor_sum == k else 0\n\n        if (i, j, xor_sum) in memo:\n            return memo[(i, j, xor_sum)]\n\n        if not is_valid(i, j, xor_sum):\n            memo[(i, j, xor_sum)] = 0\n            return 0\n\n        count = count_paths(i + 1, j, xor_sum ^ a[i][j], memo)\n        if j + 1 <= m:\n            count += count_paths(i, j + 1, xor_sum ^ a[i][j], memo)\n\n        memo[(i, j, xor_sum)] = count\n        return count\n\n    input_data = [line.strip() for line in stdin.split(\"\\n\") if line]\n    n, m, k = map(int, input_data[0].split())\n    a = [list(map(int, line.split())) for line in input_data[1:]]\n\n    memo = {}\n    result = count_paths(1, 1, 0, memo)\n    return str(result)"
    },
    {
        "number": 4134,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[0:3])\n    grid = []\n    for i in range(n):\n        row = list(map(int, stdin.split()[3:]))\n        grid.append(row)\n    \n    def xor_sum(path: List[int]) -> int:\n        result = 0\n        for number in path:\n            result ^= number\n        return result\n    \n    def dfs(i: int, j: int, path: List[int]) -> int:\n        if i == n and j == m:\n            if xor_sum(path) == k:\n                return 1\n            else:\n                return 0\n        \n        count = 0\n        if i < n:\n            count += dfs(i + 1, j, path + [grid[i][j]])\n        if j < m:\n            count += dfs(i, j + 1, path + [grid[i][j]])\n        \n        return count\n    \n    return str(dfs(0, 0, []))"
    },
    {
        "number": 4134,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def xor(a: int, b: int) -> int:\n        return a ^ b\n\n    def count_paths(grid: List[List[int]], xor_sum: int) -> int:\n        n, m = len(grid), len(grid[0])\n        dp = [[0] * m for _ in range(n)]\n        dp[0][0] = 1\n\n        for i in range(n):\n            for j in range(m):\n                if i > 0:\n                    dp[i][j] |= dp[i - 1][j]\n                if j > 0:\n                    dp[i][j] |= dp[i][j - 1]\n\n        xor_sums = [0] * (m + 1)\n        for i in range(n):\n            for j in range(m):\n                xor_sums[xor(xor_sums[j], grid[i][j])] += dp[i][j]\n\n        return xor_sums[xor_sum]\n\n    n, m, k = map(int, stdin.split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    return str(count_paths(grid, k))\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4134,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def xor_sum(path):\n        xor = 0\n        for i in range(1, len(path) + 1):\n            xor ^= path[i - 1]\n        return xor\n\n    def dfs(x, y, path, xor):\n        nonlocal count\n        if x == n and y == m:\n            if xor_sum(path) == k:\n                count += 1\n            return\n\n        if x < n and a[x][y] not in path:\n            path.append(a[x][y])\n            dfs(x + 1, y, path, xor ^ a[x][y])\n            path.pop()\n\n        if y < m and a[x][y] not in path:\n            path.append(a[x][y])\n            dfs(x, y + 1, path, xor ^ a[x][y])\n            path.pop()\n\n    n, m, k = map(int, stdin.split()[:3])\n    a = [list(map(int, input().split())) for _ in range(n)]\n    count = 0\n\n    dfs(0, 0, [a[0][0]], 0)\n\n    return str(count)\n"
    },
    {
        "number": 4134,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def xor_sum(path):\n        return functools.reduce(lambda x, y: x ^ y, path)\n\n    def find_paths(grid, n, m, k, x, y, visited, path, paths):\n        if x == n and y == m:\n            if xor_sum(path) == k:\n                paths.append(path.copy())\n            return\n\n        if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] == -1:\n            return\n\n        visited[x][y] = True\n        path.append(grid[x][y])\n\n        find_paths(grid, n, m, k, x + 1, y, visited, path, paths)\n        find_paths(grid, n, m, k, x, y + 1, visited, path, paths)\n\n        path.pop()\n        visited[x][y] = False\n\n    n, m, k = map(int, stdin.split()[0:3])\n    grid = [list(map(int, stdin.split()[i:i+m])) for i in range(n, n+m*n, m)]\n    visited = [[False] * m for _ in range(n)]\n    paths = []\n\n    find_paths(grid, n, m, k, 0, 0, visited, [], paths)\n\n    return str(len(paths))"
    },
    {
        "number": 4134,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    grid = []\n    \n    for i in range(n):\n        row = list(map(int, input().split()))\n        grid.append(row)\n    \n    def is_valid(x, y):\n        return 0 <= x < n and 0 <= y < m\n    \n    def dfs(x, y, visited, xor_sum):\n        if not is_valid(x, y) or (x, y) in visited:\n            return 0\n        \n        visited.add((x, y))\n        xor_sum ^= grid[x][y]\n        \n        return (1 if x == n - 1 and y == m - 1 and xor_sum == k else 0) + dfs(x + 1, y, visited, xor_sum) + dfs(x, y + 1, visited, xor_sum)\n    \n    return str(dfs(0, 0, set(), 0))"
    },
    {
        "number": 4134,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, m, k = list(map(int, lines[0].split()))\n    a = []\n    for i in range(n):\n        a.append(list(map(int, lines[i+1].split())))\n\n    def xor(a, b):\n        return a ^ b\n\n    def is_valid(path, k):\n        return xor(path[0], k) == xor(path[-1], k)\n\n    def dfs(i, j, k, path, memo):\n        if i == n and j == m:\n            if is_valid(path, k):\n                return 1\n            return 0\n\n        if i < 0 or i >= n or j < 0 or j >= m:\n            return 0\n\n        if (i, j, k) in memo:\n            return memo[(i, j, k)]\n\n        memo[(i, j, k)] = dfs(i+1, j, xor(k, a[i][j]), path + [a[i][j]], memo) + dfs(i, j+1, xor(k, a[i][j]), path + [a[i][j]], memo)\n\n        return memo[(i, j, k)]\n\n    return str(dfs(0, 0, 0, [a[0][0]], {}))"
    },
    {
        "number": 4135,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    s = list(t)\n    for d in range(n, 0, -1):\n        if n % d == 0:\n            s[:d] = s[:d][::-1]\n    return ''.join(s)\n"
    },
    {
        "number": 4135,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, t = stdin.split()\n    n = int(n)\n\n    for d in range(n, 0, -1):\n        if n % d == 0:\n            s = t[:d][::-1] + t[d:]\n            if s == t:\n                return s\n\n    return \"\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, t = stdin.split()\n    n = int(n)\n    \n    for d in range(n, 0, -1):\n        if n % d == 0:\n            substring = t[:d]\n            reversed_substring = substring[::-1]\n            t = reversed_substring + t[d:]\n            break\n    \n    return t"
    },
    {
        "number": 4135,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.strip().split('\\n')\n    n = int(n)\n    t = s[::-1]\n\n    for d in range(n, 0, -1):\n        if n % d == 0:\n            t = t[:d][::-1] + t[d:]\n\n    return t[::-1]\n\n\nn = input()\ns = input()\nprint(solution(f'{len(s)}\\n{s}')) "
    },
    {
        "number": 4135,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split()\n    n = int(n)\n\n    for d in range(n, 0, -1):\n        if n % d == 0:\n            substring = s[:d]\n            decrypted_substring = substring[::-1]\n            encrypted_substring = s[d:]\n            decrypted_s = decrypted_substring + encrypted_substring\n            s = decrypted_s\n\n    return s\n"
    },
    {
        "number": 4135,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, t = stdin.split()\n    n = int(n)\n    for i in range(n, 0, -1):\n        if n % i == 0:\n            substring = t[:i][::-1] + t[i:]\n            if substring == t:\n                return t[:i][::-1] + t[i:]\n    return t"
    },
    {
        "number": 4135,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, encrypted_string = stdin.split(\"\\n\")\n    n = int(n)\n\n    for i in range(n, 0, -1):\n        if n % i == 0:\n            substring = encrypted_string[:i][::-1]\n            encrypted_string = encrypted_string[:i] + substring + encrypted_string[i:]\n\n    return encrypted_string[::-1]\n\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(str, stdin.split())\n    n = int(n)\n    for d in range(n, 0, -1):\n        if n % d == 0:\n            substring = s[:d]\n            if substring[::-1] == s[:d]:\n                s = s[:d] + s[d:]\n                return s\n    return s"
    },
    {
        "number": 4135,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split()\n    n = int(n)\n    decrypted = \"\"\n\n    for d in range(n, 0, -1):\n        if d != 1:\n            substring = s[:d]\n            decrypted = substring[::-1] + s[d:]\n        else:\n            decrypted = s\n\n        if decrypted == s:\n            break\n\n    return decrypted\n"
    },
    {
        "number": 4135,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    s = \"a\" * n\n\n    for d in range(n, 0, -1):\n        if d == 1:\n            continue\n\n        substring = s[:d]\n        reversed_substring = substring[::-1]\n        s = reversed_substring + s[d:]\n\n    return s\n"
    },
    {
        "number": 4136,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)"
    },
    {
        "number": 4136,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)\n"
    },
    {
        "number": 4136,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)"
    },
    {
        "number": 4136,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b) "
    },
    {
        "number": 4136,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)"
    },
    {
        "number": 4136,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)"
    },
    {
        "number": 4136,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)"
    },
    {
        "number": 4136,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)"
    },
    {
        "number": 4136,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b) "
    },
    {
        "number": 4136,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)"
    },
    {
        "number": 4137,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the expression\n    expression = stdin.strip()\n    operands = [int(op) for op in expression.split('+')]\n    signs = ['+'] * (len(operands) - 1)\n\n    # Generate the Brainfuck code\n    code = '++>'\n    for i in range(len(operands)):\n        code += '+' * operands[i]\n        if i < len(signs) and signs[i] == '-':\n            code += '>[-<+>]<[->+<]>-'\n        else:\n            code += '>[-<+>]<[->-<]>-'\n    code += '.'\n\n    return code"
    },
    {
        "number": 4137,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stack = []\n    for c in stdin:\n        if c.isdigit():\n            stack.append(int(c))\n        elif c == '+':\n            stack.append('+')\n        elif c == '-':\n            stack.append('-')\n    \n    # Convert the infix expression to postfix notation\n    postfix = []\n    operators = {'+', '-'}\n    while stack:\n        if stack[-1] in operators:\n            while postfix and postfix[-1] in operators and (stack[-1] == '+' and postfix[-1] == '-' or stack[-1] == '-' and postfix[-1] == '+'):\n                postfix.pop()\n            postfix.append(stack.pop())\n        elif stack[-1] in {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}:\n            postfix.append(stack.pop())\n    \n    # Generate Brainfuck code for the postfix expression\n    bf = []\n    operators = {'+', '-'}\n    for c in postfix:\n        if c in operators:\n            bf.append('>[<+>-]<')\n        else:\n            bf.append('+' * c + '>')\n    \n    # Generate the Brainfuck code for initializing memory cells to 0\n    bf.append('>' * 30000)\n    \n    # Generate the Brainfuck code for outputting the result\n    bf.append('<' * 30000 + '+')\n    \n    return ''.join(bf)\n"
    },
    {
        "number": 4137,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stack = []\n    operators = {'+': lambda a, b: a + b, '-': lambda a, b: a - b}\n\n    for c in stdin:\n        if c.isdigit():\n            stack.append(int(c))\n        elif c in operators:\n            if len(stack) < 2:\n                raise ValueError(\"Invalid expression\")\n            b = stack.pop()\n            a = stack.pop()\n            result = operators[c](a, b)\n            stack.append(result)\n\n    if len(stack) != 1:\n        raise ValueError(\"Invalid expression\")\n\n    output = \"\"\n    for i in range(30000):\n        output += \">\"\n\n    output += \"<\"\n\n    for i in range(256):\n        output += \"+\" if i < stack[0] else \"-\"\n        output += \">\"\n\n    output += \"[\"\n\n    for i in range(256):\n        output += \"<\" if i < stack[0] else \"\"\n        output += \"+\" if i < stack[0] else \"-\"\n        output += \">\"\n\n    output += \"]\"\n\n    output += \".\"\n\n    return output\n\n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stack = []\n    bf_code = \"\"\n    \n    for char in stdin:\n        if char.isdigit():\n            stack.append(char)\n        else:\n            if char == '+':\n                bf_code += \"+\"\n            elif char == '-':\n                bf_code += \"-\"\n            elif char == '>':\n                bf_code += \">\"\n            elif char == '<':\n                bf_code += \"<\"\n            elif char == '[':\n                bf_code += \"[\"\n            elif char == ']':\n                bf_code += \"]\"\n            elif char == '.':\n                bf_code += \".\"\n            \n            if char in '+-<>':\n                while len(stack) > 1:\n                    bf_code += stack.pop()\n                    bf_code += \">\"\n                    bf_code += stack.pop()\n                    bf_code += \"<\"\n                    bf_code += \"[>+>+<<-]\"\n                    bf_code += stack.pop()\n                    bf_code += \">\"\n                    bf_code += stack.pop()\n                    bf_code += \"<\"\n                    bf_code += \"[<+>-]\"\n                    bf_code += \">\"\n                    bf_code += stack.pop()\n                    bf_code += \"<\"\n                    bf_code += \"[\" + bf_code.count(\">\")*\"-\" + \"]\"\n                    bf_code += stack.pop()\n                    bf_code += \">\"\n                    bf_code += \"[\" + bf_code.count(\"-\")*\"+\" + \"]\"\n                    bf_code += \"]\"\n                    \n                if len(stack) == 1:\n                    bf_code += stack.pop()\n                    bf_code += \">\"\n                    bf_code += stack.pop()\n                    bf_code += \"<\"\n                    bf_code += \"[>+>+<<-]\"\n                    bf_code += stack.pop()\n                    bf_code += \">\"\n                    bf_code += stack.pop()\n                    bf_code += \"<\"\n                    bf_code += \"[<+>-]\"\n                    bf_code += \">\"\n                    bf_code += stack.pop()\n                    bf_code += \"<\"\n                    bf_code += \"[\" + bf_code.count(\">\")*\"-\" + \"]\"\n                    bf_code += stack.pop()\n                    bf_code += \">\"\n                    bf_code += \"[\" + bf_code.count(\"-\")*\"+\" + \"]\"\n                    bf_code += \"]\"\n                    \n                if len(stack) == 0:\n                    bf_code += \"+\"\n                    bf_code += \"[\" + bf_code.count(\">\")*\"-\" + \"]\"\n                    bf_code += \"+\"\n                    bf_code += \"[\" + bf_code.count(\"-\")*\"+\" + \"]\"\n                    bf_code += \"-\"\n                    bf_code += \">\"\n                    bf_code += \"[\" + bf_code.count(\"-\")*\"+\" + \"]\"\n                    bf_code += \"<\"\n                    bf_code += \"[\" + bf_code.count(\">\")*\"-\" + \"]\"\n                    bf_code += \"<\"\n                    bf_code += \"[\" + bf_code.count(\"+\")*\"-\" + \"]\"\n                    bf_code += \">\"\n                    bf_code += \"[\" + bf_code.count(\"-\")*\"+\" + \"]\"\n                    bf_code += \"]\"\n                    bf_code += \">\"\n                    bf_code += \"[\" + bf_code.count(\"-\")*\"+\" + \"]\"\n                    bf_code += \"<\"\n                    bf_code += \"[\" + bf_code.count(\">\")*\"-\" + \"]\"\n                    bf_code += \"<\"\n                    bf_code += \"[\" + bf_code.count(\"+\")*\"-\" + \"]\"\n                    bf_code +="
    },
    {
        "number": 4137,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Calculate the result of the expression\n    result = calculate(stdin)\n\n    # Create a Brainfuck program that prints the result\n    bf_program = f\"++>[{result:0{8}b}]{result}>\"\n\n    return bf_program\n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    operands = stdin.split(\"+\")\n    if \"-\" in stdin:\n        operands = stdin.split(\"-\")\n\n    program = []\n    for i, operand in enumerate(operands):\n        if i == 0:\n            program.append(\">\" * int(operand))\n        else:\n            program.append(\"+\" * int(operand))\n\n    program.append(\"[<+>-]<\")\n\n    return \"\".join(program) + \".\" * 256"
    },
    {
        "number": 4137,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    memory = [0] * 30000\n    memory_pointer = 0\n    instruction_pointer = 0\n    input_pointer = 0\n    output = \"\"\n\n    while instruction_pointer < len(stdin):\n        if stdin[instruction_pointer] == \">\":\n            memory_pointer += 1\n        elif stdin[instruction_pointer] == \"<\":\n            memory_pointer = max(0, memory_pointer - 1)\n        elif stdin[instruction_pointer] == \"+\":\n            memory[memory_pointer] += 1\n        elif stdin[instruction_pointer] == \"-\":\n            memory[memory_pointer] -= 1\n        elif stdin[instruction_pointer] == \".\":\n            output += chr(memory[memory_pointer])\n        elif stdin[instruction_pointer] == \",\":\n            memory[memory_pointer] = ord(stdin[input_pointer])\n            input_pointer += 1\n        elif stdin[instruction_pointer] == \"[\":\n            if memory[memory_pointer] == 0:\n                while stdin[instruction_pointer] != \"]\":\n                    instruction_pointer += 1\n        elif stdin[instruction_pointer] == \"]\":\n            if memory[memory_pointer] != 0:\n                while stdin[instruction_pointer] != \"[\":\n                    instruction_pointer -= 1\n\n        instruction_pointer += 1\n\n    return output\n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_list = list(stdin.replace(\" \", \"\"))\n    expression = []\n    for i in range(len(input_list)):\n        if input_list[i] == \"+\":\n            expression.append(\"+\")\n        elif input_list[i] == \"-\":\n            expression.append(\"-\")\n        else:\n            expression.append(input_list[i])\n\n    bf_code = \"\"\n    for i in range(len(expression)):\n        if expression[i] == \"+\":\n            bf_code += \"+\"\n        elif expression[i] == \"-\":\n            bf_code += \"-\"\n        else:\n            bf_code += \">\"\n            bf_code += \"[\"\n            bf_code += \"<\"\n            bf_code += \"+\"\n            bf_code += \">\"\n            bf_code += \"-\"\n            bf_code += \"<\"\n            bf_code += \"-\"\n            bf_code += \"]\"\n            bf_code += \">\"\n            bf_code += \"+\"\n            bf_code += \">\"\n            bf_code += \"+\"\n            bf_code += \"[\"\n            bf_code += \"<\"\n            bf_code += \"-\"\n            bf_code += \">\"\n            bf_code += \"-\"\n            bf_code += \"]\"\n            bf_code += \">\"\n            bf_code += \"-\"\n            bf_code += \">\"\n            bf_code += \"+\"\n            bf_code += \">\"\n            bf_code += \"+\"\n            bf_code += \"[\"\n            bf_code += \"<\"\n            bf_code += \"+\"\n            bf_code += \">\"\n            bf_code += \"+\"\n            bf_code += \"]\"\n            bf_code += \">\"\n            bf_code += \"+\"\n            bf_code += \">\"\n            bf_code += \"+\"\n            bf_code += \"[\"\n            bf_code += \"<\"\n            bf_code += \"-\"\n            bf_code += \">\"\n            bf_code += \"-\"\n            bf_code += \"]\"\n            bf_code += \">\"\n            bf_code += \"-\"\n            bf_code += \">\"\n            bf_code += \"+\"\n            bf_code += \">\"\n            bf_code += \"+\"\n            bf_code += \"[\"\n            bf_code += \"<\"\n            bf_code += \"+\"\n            bf_code += \">\"\n            bf_code += \"+\"\n            bf_code += \"]\"\n            bf_code += \">\"\n            bf_code += \"+\"\n            bf_code += \">\"\n            bf_code += \"+\"\n            bf_code += \"[\"\n            bf_code += \"<\"\n            bf_code += \"-\"\n            bf_code += \">\"\n            bf_code += \"-\"\n            bf_code += \"]\"\n            bf_code += \">\"\n            bf_code += \"-\"\n            bf_code += \">\"\n            bf_code += \"+\"\n            bf_code += \">\"\n            bf_code += \"+\"\n            bf_code += \"[\"\n            bf_code += \"<\"\n            bf_code += \"+\"\n            bf_code += \">\"\n            bf_code += \"+\"\n            bf_code += \"]\"\n            bf_code += \">\"\n            bf_code += \"+\"\n            bf_code += \">\"\n            bf_code += \"+\"\n            bf_code += \"[\"\n            bf_code += \"<\"\n            bf_code += \"-\"\n            bf_code += \">\"\n            bf_code += \"-\"\n            bf_code += \"]\"\n            bf_code += \">\"\n            bf_code += \"-\"\n            bf_code += \">\"\n            bf_code += \"+\"\n            bf_code += \">\"\n            bf_code += \"+\"\n            bf_code += \"[\"\n            bf_code += \"<\"\n            bf_code += \"+\"\n            bf_code += \">\"\n            bf_code += \"+\"\n            bf_code += \""
    },
    {
        "number": 4137,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    bf_code = []\n    operands = stdin.split('+')\n    bf_code.append('++>')\n    for operand in operands:\n        bf_code.append(f'{len(operand)}>')\n        for char in operand:\n            bf_code.append(f'[{char}-]')\n        bf_code.append(f'<[<{len(operand)}>-]<')\n    bf_code.append('+++++++++++++++++++++++++++++++++++++++++++++++')\n    return ''.join(bf_code)\n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Initialize the memory cells and the pointer\n    memory = [0] * 30000\n    pointer = 0\n\n    # Loop through the expression\n    expression = stdin.split(\"+\")\n    for part in expression:\n        sub_expression = part.split(\"-\")\n        for number in sub_expression:\n            # Move the pointer to the next cell\n            memory[pointer] = int(number)\n            pointer += 1\n\n            # Move the pointer back to the start\n            if pointer == len(memory):\n                pointer = 0\n\n    # Generate the Brainfuck program to print the result\n    program = \"++>++[<[>+<-]>+<-]>\"\n    for _ in range(len(memory)):\n        program += \"+\"\n\n    program += \".\"\n\n    return program\n\ndef"
    },
    {
        "number": 4138,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    q = int(input_list[0])\n    output = []\n    \n    for i in range(1, q+1):\n        k = int(input_list[i])\n        if k <= 56:\n            output.append(str(k-1))\n        else:\n            k -= 56\n            if k % 9 == 0:\n                output.append(str((k//9) + 1))\n            else:\n                output.append(str(((k//9) + 1) + (k % 9)))\n    \n    return '\\n'.join(output)"
    },
    {
        "number": 4138,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    sequence = '11212312341234512345612345671234567812345678912345678910'\n    \n    for _ in range(q):\n        k = int(stdin.readline().strip())\n        index = k - 1\n        if index >= len(sequence):\n            index %= len(sequence)\n        print(sequence[index], end='')\n        \n"
    },
    {
        "number": 4138,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.split(\"\\n\")[0])\n    sequence = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    result = []\n    \n    for _ in range(queries):\n        k = int(stdin.split(\"\\n\")[1])\n        index = 0\n        \n        for i in range(1, k + 1):\n            index += i\n        \n        result.append(str(sequence[index % 10]))\n        \n    return \"\\n\".join(result)\n\ndef"
    },
    {
        "number": 4138,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    queries = [int(line) for line in stdin.split(\"\\n\")[1:]]\n    sequence = \"11212312341234512345612345671234567812345678912345678910\"\n    result = [sequence[i-1] for i in queries]\n    return \"\\n\".join(result)"
    },
    {
        "number": 4138,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.splitlines()[0])\n    sequence = \"11212312341234512345612345671234567812345678912345678910\"\n    result = []\n\n    for _ in range(queries):\n        k = int(stdin.splitlines()[_ + 1])\n        result.append(sequence[k - 1])\n\n    return \"\\n\".join(result)"
    },
    {
        "number": 4138,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    sequence = \"11212312341234512345612345671234567812345678912345678910\"\n\n    for i in range(q):\n        k = int(stdin.readline())\n        if k <= len(sequence):\n            x = sequence[k - 1]\n        else:\n            k -= len(sequence)\n            x = sequence[k % 10]\n        print(x)"
    },
    {
        "number": 4138,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split('\\n')[0])\n    queries = stdin.split('\\n')[1:]\n    \n    sequence = \"11212312341234512345612345671234567812345678912345678910\"\n    sequence += \"\".join([str(i) for i in range(11, 100)])\n    sequence += \"\".join([str(i) for i in range(100, 1000)])\n    \n    result = []\n    \n    for query in queries:\n        k = int(query)\n        if k <= len(sequence):\n            result.append(sequence[k-1])\n        else:\n            k -= len(sequence)\n            k %= len(sequence)\n            result.append(sequence[k-1])\n    \n    return \"\\n\".join(result)\n\n\ninput_str = \"5\\n1\\n3\\n20\\n38\\n56\"\noutput_str = solution(input_str)\nprint(output_str)\n\ninput_str = \"4\\n2132\\n506\\n999999999999999999\\n1000000000000000000\"\noutput_str = solution(input_str)\nprint(output_str) "
    },
    {
        "number": 4138,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split('\\n')[0])\n    k_list = stdin.split('\\n')[1:]\n    sequence = \"11212312341234512345612345671234567812345678912345678910\"\n    \n    for i in range(q):\n        k = int(k_list[i])\n        if k <= len(sequence):\n            x = sequence[k-1]\n        else:\n            x = sequence[len(sequence) - 1]\n        print(x)\n    \n    return \"\"\n\ndef"
    },
    {
        "number": 4138,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.splitlines()[0])\n    sequence = \"11212312341234512345612345671234567812345678912345678910\"\n\n    def find_element(k: int) -> int:\n        if k <= len(sequence):\n            return int(sequence[k-1])\n        else:\n            prev_block_size = 0\n            for i in range(1, k//9+1):\n                prev_block_size += i\n            curr_block_size = k - prev_block_size\n            curr_block = \"\".join(str(i) for i in range(1, curr_block_size+1))\n            return int(curr_block[k-prev_block_size-1])\n\n    output = \"\"\n    for i in range(1, q+1):\n        k = int(stdin.splitlines()[i])\n        output += str(find_element(k)) + \"\\n\"\n\n    return output"
    },
    {
        "number": 4138,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    sequence = \"11212312341234512345612345671234567812345678912345678910\"\n    \n    for i in range(q):\n        k = int(stdin.readline().strip())\n        x = sequence[k - 1]\n        print(x)"
    },
    {
        "number": 4139,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for i in range(1, N+1):\n        s = str(i)\n        if '7' in s and '5' in s and '3' in s:\n            count += 1\n    return str(count)\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4139,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n\n    for num in range(1, N + 1):\n        if (\n            \"7\" in str(num)\n            and \"5\" in str(num)\n            and \"3\" in str(num)\n        ):\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4139,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    count = 0\n    for num in range(1, N + 1):\n        if '7' in str(num) and '5' in str(num) and '3' in str(num):\n            count += 1\n    return str(count)"
    },
    {
        "number": 4139,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    count = 0\n\n    for num in range(1, N + 1):\n        num_str = str(num)\n        if \"7\" in num_str and \"5\" in num_str and \"3\" in num_str:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4139,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for i in range(1, N+1):\n        if '7' in str(i) and '5' in str(i) and '3' in str(i):\n            count += 1\n    return str(count)"
    },
    {
        "number": 4139,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for num in range(1, n+1):\n        if all(str(digit) in str(num) for digit in [3, 5, 7]):\n            count += 1\n    return str(count)\n\nn = input()\nprint(solution(n)) "
    },
    {
        "number": 4139,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    \n    for num in range(1, N+1):\n        num_str = str(num)\n        if '7' in num_str and '5' in num_str and '3' in num_str:\n            count += 1\n    \n    return str(count)"
    },
    {
        "number": 4139,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n\n    for num in range(1, N+1):\n        num_str = str(num)\n        if '7' in num_str and '5' in num_str and '3' in num_str:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4139,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n\n    for num in range(1, N + 1):\n        num_str = str(num)\n        if '7' in num_str and '5' in num_str and '3' in num_str:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4139,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n\n    for num in range(1, N+1):\n        if all(digit in str(num) for digit in \"357\") and len(set(str(num))) == 3:\n            count += 1\n\n    return str(count)\n\ninput_stdin = input()\noutput = solution(input_stdin)\nprint(output) "
    },
    {
        "number": 4140,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    count = 0\n    for i in range(len(s) - 1):\n        if s[i] == s[i+1]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4140,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    count = 0\n\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4140,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin.strip())\n    count = 0\n\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4140,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    count = 0\n\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4140,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    count = 0\n    for i in range(len(s) - 1):\n        if s[i] == s[i+1]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4140,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    count = 0\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            count += 1\n    return str(count // 2)"
    },
    {
        "number": 4140,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    num_tiles = len(s)\n    count_diff_colors = 0\n    for i in range(num_tiles):\n        if i > 0 and s[i] == s[i - 1]:\n            count_diff_colors += 1\n        if i < num_tiles - 1 and s[i] == s[i + 1]:\n            count_diff_colors += 1\n    return str(count_diff_colors // 2)"
    },
    {
        "number": 4140,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    count = 0\n    for i in range(1, n):\n        if s[i] == s[i-1]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4140,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    count = 0\n    for i in range(len(s) - 1):\n        if s[i] == s[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 4140,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S = list(stdin.strip())\n    count = 0\n\n    # Traverse through the list of tiles\n    for i in range(len(S) - 1):\n        # If the current and next tiles have the same color, increment the counter\n        if S[i] == S[i + 1]:\n            count += 1\n\n    # If the last and first tiles have the same color, increment the counter\n    if S[-1] == S[0]:\n        count += 1\n\n    return str(count)"
    },
    {
        "number": 4141,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    numbers = [int(num) for num in stdin.split()[1:]]\n    even_numbers = [num for num in numbers if num % 2 == 0]\n    for num in even_numbers:\n        if num % 3 != 0 and num % 5 != 0:\n            return \"DENIED\"\n    return \"APPROVED\"\n\ndef"
    },
    {
        "number": 4141,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_list = [int(x) for x in stdin.split()[1:]]\n    even_numbers = [x for x in input_list if x % 2 == 0]\n    should_allow_entry = all(x % 3 == 0 or x % 5 == 0 for x in even_numbers)\n    return \"APPROVED\" if should_allow_entry else \"DENIED\""
    },
    {
        "number": 4141,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_list = [int(x) for x in stdin.split()]\n    n = input_list[0]\n    input_list = input_list[1:]\n\n    for num in input_list:\n        if num % 2 == 0 and num % 3 != 0 and num % 5 != 0:\n            return \"DENIED\"\n\n    return \"APPROVED\""
    },
    {
        "number": 4141,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n, *numbers = map(int, stdin.split())\n    \n    # Check if the condition is satisfied\n    condition_satisfied = True\n    for number in numbers:\n        if number % 2 == 0 and (number % 3 != 0 or number % 5 != 0):\n            condition_satisfied = False\n            break\n    \n    # Return the result\n    return \"APPROVED\" if condition_satisfied else \"DENIED\""
    },
    {
        "number": 4141,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    num_of_values = int(lines[0])\n    values = list(map(int, lines[1].split()))\n\n    for value in values:\n        if value % 2 == 0 and value % 3 != 0 and value % 5 != 0:\n            return \"DENIED\"\n\n    return \"APPROVED\""
    },
    {
        "number": 4141,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    numbers = list(map(int, stdin.split()))\n    n = numbers[0]\n    even_numbers = [x for x in numbers[1:] if x % 2 == 0]\n\n    for even_number in even_numbers:\n        if even_number % 3 != 0 and even_number % 5 != 0:\n            return \"DENIED\"\n\n    return \"APPROVED\""
    },
    {
        "number": 4141,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    even_divisible_by_3_or_5 = True\n    N, *A = stdin.split()\n    N = int(N)\n\n    for a in A:\n        a = int(a)\n        if a % 2 == 0 and a % 3 != 0 and a % 5 != 0:\n            even_divisible_by_3_or_5 = False\n            break\n\n    if even_divisible_by_3_or_5:\n        return \"APPROVED\"\n    else:\n        return \"DENIED\""
    },
    {
        "number": 4141,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    input_list = [int(i) for i in input_list]\n    N = input_list[0]\n    A = input_list[1:]\n    \n    for num in A:\n        if num % 2 == 0 and num % 3 != 0 and num % 5 != 0:\n            return \"DENIED\"\n    \n    return \"APPROVED\""
    },
    {
        "number": 4141,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    nums = list(map(int, stdin.split('\\n')[1].split()))\n    even_nums = [num for num in nums if num % 2 == 0]\n    \n    for even_num in even_nums:\n        if even_num % 3 != 0 and even_num % 5 != 0:\n            return 'DENIED'\n    \n    return 'APPROVED'"
    },
    {
        "number": 4141,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    even_numbers = []\n    for number in stdin.split():\n        number = int(number)\n        if number % 2 == 0:\n            even_numbers.append(number)\n    \n    for even_number in even_numbers:\n        if even_number % 3 != 0 and even_number % 5 != 0:\n            return \"DENIED\"\n    \n    return \"APPROVED\""
    },
    {
        "number": 4142,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    for i in range(len(S)):\n        if i % 2 == 0 and S[i] not in [\"L\", \"U\", \"D\"]:\n            return \"No\"\n        elif i % 2 == 1 and S[i] not in [\"R\", \"U\", \"D\"]:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4142,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    for i in range(1, len(s), 2):\n        if s[i] not in ['R', 'U', 'D']:\n            return \"No\"\n    for i in range(0, len(s), 2):\n        if s[i] not in ['L', 'U', 'D']:\n            return \"No\"\n    return \"Yes\"\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4142,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S = list(stdin)\n    for i in range(len(S)):\n        if (i % 2 == 0 and S[i] not in ['L', 'U', 'D']) or (i % 2 != 0 and S[i] not in ['R', 'U', 'D']):\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4142,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    dance = stdin\n\n    for index, step in enumerate(dance):\n        if (index + 1) % 2 == 0:\n            if step not in ['L', 'U', 'D']:\n                return \"No\"\n        else:\n            if step not in ['R', 'U', 'D']:\n                return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4142,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    n = len(s)\n    \n    for i in range(n):\n        if i % 2 == 0 and s[i] not in ['L', 'U', 'D']:\n            return \"No\"\n        if i % 2 == 1 and s[i] not in ['R', 'U', 'D']:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4142,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Check if the string is empty\n    if not stdin:\n        return \"No\"\n\n    # Split the string into a list of characters\n    char_list = list(stdin)\n\n    # Check if each character in an odd position is R, U, or D\n    for i in range(1, len(char_list), 2):\n        if char_list[i] not in [\"R\", \"U\", \"D\"]:\n            return \"No\"\n\n    # Check if each character in an even position is L, U, or D\n    for i in range(0, len(char_list), 2):\n        if char_list[i] not in [\"L\", \"U\", \"D\"]:\n            return \"No\"\n\n    # If all the conditions are satisfied, return Yes\n    return \"Yes\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S = list(stdin)\n    for i in range(1, len(S), 2):\n        if S[i] not in ('R', 'U', 'D'):\n            return 'No'\n    for i in range(0, len(S), 2):\n        if S[i] not in ('L', 'U', 'D'):\n            return 'No'\n    return 'Yes'"
    },
    {
        "number": 4142,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    if len(s) % 2 == 0:\n        for i in range(1, len(s), 2):\n            if s[i] not in [\"R\", \"U\", \"D\"]:\n                return \"No\"\n        for i in range(0, len(s), 2):\n            if s[i] not in [\"L\", \"U\", \"D\"]:\n                return \"No\"\n    else:\n        for i in range(0, len(s), 2):\n            if s[i] not in [\"R\", \"U\", \"D\"]:\n                return \"No\"\n        for i in range(1, len(s), 2):\n            if s[i] not in [\"L\", \"U\", \"D\"]:\n                return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4142,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    for i in range(1, len(s) + 1, 2):\n        if s[i - 1] not in ['R', 'U', 'D']:\n            return \"No\"\n    for i in range(0, len(s), 2):\n        if s[i] not in ['L', 'U', 'D']:\n            return \"No\"\n    return \"Yes\"\n\ninput_str = input().strip()\nprint(solution(input_str)) "
    },
    {
        "number": 4142,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Convert stdin to a list of characters\n    dance_steps = list(stdin)\n\n    # Check if the length of the dance_steps is odd or even\n    if len(dance_steps) % 2 == 0:\n        # If the length of the dance_steps is even\n        # Check if every even-indexed character is L, U, or D\n        for i in range(1, len(dance_steps), 2):\n            if dance_steps[i] not in ['L', 'U', 'D']:\n                return \"No\"\n        # Check if every odd-indexed character is R, U, or D\n        for i in range(0, len(dance_steps), 2):\n            if dance_steps[i] not in ['R', 'U', 'D']:\n                return \"No\"\n    else:\n        # If the length of the dance_steps is odd\n        # Check if every odd-indexed character is R, U, or D\n        for i in range(1, len(dance_steps), 2):\n            if dance_steps[i] not in ['R', 'U', 'D']:\n                return \"No\"\n        # Check if every even-indexed character is L, U, or D\n        for i in range(0, len(dance_steps), 2):\n            if dance_steps[i] not in ['L', 'U', 'D']:\n                return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4143,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C, D, E = map(int, stdin.split())\n    # Calculate the maximum number of people that can be transported in each mode of transport\n    train_capacity = A\n    bus_capacity = B\n    taxi_capacity = C\n    airplane_capacity = D\n    ship_capacity = E\n    \n    # Calculate the total number of people who can reach City 6 in each minute\n    time = 0\n    total_people_reached = N\n    while total_people_reached > 0:\n        time += 1\n        # Update the number of people reached by each mode of transport\n        train_reached = min(total_people_reached, train_capacity)\n        bus_reached = min(total_people_reached - train_reached, bus_capacity)\n        taxi_reached = min(total_people_reached - train_reached - bus_reached, taxi_capacity)\n        airplane_reached = min(total_people_reached - train_reached - bus_reached - taxi_reached, airplane_capacity)\n        ship_reached = min(total_people_reached - train_reached - bus_reached - taxi_reached - airplane_reached, ship_capacity)\n        \n        # Update the total number of people reached\n        total_people_reached = train_reached + bus_reached + taxi_reached + airplane_reached + ship_reached\n    \n    return str(time)"
    },
    {
        "number": 4143,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    N, A, B, C, D, E = map(int, stdin.split())\n    \n    # Initialize variables\n    trains = 0\n    buses = 0\n    taxis = 0\n    airplanes = 0\n    ships = 0\n    time = 0\n    \n    # Travel as long as there are people left at City 1\n    while N > 0:\n        # Train leaves City 1 every minute\n        trains += 1\n        trains %= A\n        N -= trains\n        \n        # Bus leaves City 2 every minute\n        buses += 1\n        buses %= B\n        N -= buses\n        \n        # Taxi leaves City 3 every minute\n        taxis += 1\n        taxis %= C\n        N -= taxis\n        \n        # Airplane leaves City 4 every minute\n        airplanes += 1\n        airplanes %= D\n        N -= airplanes\n        \n        # Ship leaves City 5 every minute\n        ships += 1\n        ships %= E\n        N -= ships\n        \n        # Increase time by one minute\n        time += 1\n    \n    # Return the minimum time required for all of the people to reach City 6\n    return str(time)"
    },
    {
        "number": 4143,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C, D, E = map(int, stdin.split())\n    \n    # Initialize the number of people at each city\n    city1 = N\n    city2 = 0\n    city3 = 0\n    city4 = 0\n    city5 = 0\n    city6 = 0\n    \n    # Initialize the number of vehicles at each city\n    train = A\n    bus = B\n    taxi = C\n    airplane = D\n    ship = E\n    \n    time = 0\n    \n    # While there are still people at City 1, continue to distribute the vehicles\n    while city1 > 0:\n        time += 1\n        \n        # Distribute the train vehicles\n        if train > 0 and city1 > 0:\n            # Calculate the number of people who can travel by train\n            train_capacity = min(train, city1)\n            \n            # Update the number of people at each city\n            city1 -= train_capacity\n            city2 += train_capacity\n            \n            # Update the number of train vehicles\n            train -= 1\n        \n        # Distribute the bus vehicles\n        if bus > 0 and city2 > 0:\n            # Calculate the number of people who can travel by bus\n            bus_capacity = min(bus, city2)\n            \n            # Update the number of people at each city\n            city2 -= bus_capacity\n            city3 += bus_capacity\n            \n            # Update the number of bus vehicles\n            bus -= 1\n        \n        # Distribute the taxi vehicles\n        if taxi > 0 and city3 > 0:\n            # Calculate the number of people who can travel by taxi\n            taxi_capacity = min(taxi, city3)\n            \n            # Update the number of people at each city\n            city3 -= taxi_capacity\n            city4 += taxi_capacity\n            \n            # Update the number of taxi vehicles\n            taxi -= 1\n        \n        # Distribute the airplane vehicles\n        if airplane > 0 and city4 > 0:\n            # Calculate the number of people who can travel by airplane\n            airplane_capacity = min(airplane, city4)\n            \n            # Update the number of people at each city\n            city4 -= airplane_capacity\n            city5 += airplane_capacity\n            \n            # Update the number of airplane vehicles\n            airplane -= 1\n        \n        # Distribute the ship vehicles\n        if ship > 0 and city5 > 0:\n            # Calculate the number of people who can travel by ship\n            ship_capacity = min(ship, city5)\n            \n            # Update the number of people at each city\n            city5 -= ship_capacity\n            city6 += ship_capacity\n            \n            # Update the number of ship vehicles\n            ship -= 1\n    \n    return str(time)"
    },
    {
        "number": 4143,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C, D, E = map(int, stdin.split())\n    \n    time = 0\n    \n    # Trains\n    while N > A:\n        time += 1\n        N -= A\n    \n    # Buses\n    while N > B:\n        time += 1\n        N -= B\n    \n    # Taxis\n    while N > C:\n        time += 1\n        N -= C\n    \n    # Airplanes\n    while N > D:\n        time += 1\n        N -= D\n    \n    # Ships\n    while N > E:\n        time += 1\n        N -= E\n    \n    return str(time)"
    },
    {
        "number": 4143,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C, D, E = map(int, stdin.split())\n\n    # Initialize variables to keep track of the number of people at each city\n    people_at_city1 = N\n    people_at_city2 = 0\n    people_at_city3 = 0\n    people_at_city4 = 0\n    people_at_city5 = 0\n    people_at_city6 = 0\n\n    # Initialize variables to keep track of the maximum number of people that can be transported by each mode of transport\n    max_people_train = A\n    max_people_bus = B\n    max_people_taxi = C\n    max_people_airplane = D\n    max_people_ship = E\n\n    # Initialize variables to keep track of the time taken by each mode of transport\n    time_train = 1\n    time_bus = 1\n    time_taxi = 1\n    time_airplane = 1\n    time_ship = 1\n\n    # Calculate the minimum time required for all people to reach City 6\n    time = 0\n    while people_at_city6 < N:\n        # Transport people from City 1 to City 2\n        if people_at_city1 > 0 and people_at_city2 < max_people_train:\n            people_at_city2 += min(max_people_train, people_at_city1)\n            people_at_city1 -= min(max_people_train, people_at_city1)\n\n        # Transport people from City 2 to City 3\n        if people_at_city2 > 0 and people_at_city3 < max_people_bus:\n            people_at_city3 += min(max_people_bus, people_at_city2)\n            people_at_city2 -= min(max_people_bus, people_at_city2)\n\n        # Transport people from City 3 to City 4\n        if people_at_city3 > 0 and people_at_city4 < max_people_taxi:\n            people_at_city4 += min(max_people_taxi, people_at_city3)\n            people_at_city3 -= min(max_people_taxi, people_at_city3)\n\n        # Transport people from City 4 to City 5\n        if people_at_city4 > 0 and people_at_city5 < max_people_airplane:\n            people_at_city5 += min(max_people_airplane, people_at_city4)\n            people_at_city4 -= min(max_people_airplane, people_at_city4)\n\n        # Transport people from City 5 to City 6\n        if people_at_city5 > 0 and people_at_city6 < max_people_ship:\n            people_at_city6 += min(max_people_ship, people_at_city5)\n            people_at_city5 -= min(max_people_ship, people_at_city5)\n\n        time += 1\n\n    return str(time)"
    },
    {
        "number": 4143,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C, D, E = map(int, stdin.split())\n\n    # Calculate the number of vehicles required for each transportation method\n    trains = (N + A - 1) // A\n    buses = (N + B - 1) // B\n    taxis = (N + C - 1) // C\n    airplanes = (N + D - 1) // D\n    ships = (N + E - 1) // E\n\n    # Calculate the total time required for all vehicles to reach City 6\n    total_time = trains + buses + taxis + airplanes + ships\n\n    return str(total_time)"
    },
    {
        "number": 4143,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    N, A, B, C, D, E = map(int, stdin.split())\n\n    # Initialize variables\n    time = 0\n    people_at_city_1 = N\n    people_at_city_2 = 0\n    people_at_city_3 = 0\n    people_at_city_4 = 0\n    people_at_city_5 = 0\n    people_at_city_6 = 0\n\n    # Travel time for each vehicle\n    train_time = 1\n    bus_time = 1\n    taxi_time = 1\n    airplane_time = 1\n    ship_time = 1\n\n    # Travel time for each vehicle (minutes)\n    train_time_minutes = 1\n    bus_time_minutes = 1\n    taxi_time_minutes = 1\n    airplane_time_minutes = 1\n    ship_time_minutes = 1\n\n    # Initialize the number of available seats for each vehicle\n    train_seats = A\n    bus_seats = B\n    taxi_seats = C\n    airplane_seats = D\n    ship_seats = E\n\n    # Iterate until all people have reached City 6\n    while people_at_city_6 < N:\n        # Update time\n        time += 1\n\n        # Train: Move people from City 1 to City 2\n        if people_at_city_1 > 0 and train_seats > 0:\n            train_capacity = min(people_at_city_1, train_seats)\n            people_at_city_1 -= train_capacity\n            train_seats -= train_capacity\n            people_at_city_2 += train_capacity\n\n        # Bus: Move people from City 2 to City 3\n        if people_at_city_2 > 0 and bus_seats > 0:\n            bus_capacity = min(people_at_city_2, bus_seats)\n            people_at_city_2 -= bus_capacity\n            bus_seats -= bus_capacity\n            people_at_city_3 += bus_capacity\n\n        # Taxi: Move people from City 3 to City 4\n        if people_at_city_3 > 0 and taxi_seats > 0:\n            taxi_capacity = min(people_at_city_3, taxi_seats)\n            people_at_city_3 -= taxi_capacity\n            taxi_seats -= taxi_capacity\n            people_at_city_4 += taxi_capacity\n\n        # Airplane: Move people from City 4 to City 5\n        if people_at_city_4 > 0 and airplane_seats > 0:\n            airplane_capacity = min(people_at_city_4, airplane_seats)\n            people_at_city_4 -= airplane_capacity\n            airplane_seats -= airplane_capacity\n            people_at_city_5 += airplane_capacity\n\n        # Ship: Move people from City 5 to City 6\n        if people_at_city_5 > 0 and ship_seats > 0:\n            ship_capacity = min(people_at_city_5, ship_seats)\n            people_at_city_5 -= ship_capacity\n            ship_seats -= ship_capacity\n            people_at_city_6 += ship_capacity\n\n        # Update number of people at each city\n        people_at_city_1 = N - people_at_city_2 - people_at_city_3 - people_at_city_4 - people_at_city_5 - people_at_city_6\n        people_at_city_2 = people_at_city_2 - people_at_city_3\n        people_at_city_3 = people_at_city_3 - people_at_city_4\n        people_at_city_4 = people_at_city_4 - people_at_city_5\n        people_at_city_5 = people_at_city_5 - people_at_city_6\n\n    return str(time)"
    },
    {
        "number": 4143,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C, D, E = map(int, stdin.split())\n    \n    time = 0\n    people_in_train = 0\n    people_in_bus = 0\n    people_in_taxi = 0\n    people_in_airplane = 0\n    people_in_ship = 0\n    \n    while N > 0:\n        # Trains can take at most A people at a time\n        people_in_train = min(A, N)\n        N -= people_in_train\n        \n        # Buses can take at most B people at a time\n        people_in_bus = min(B, N)\n        N -= people_in_bus\n        \n        # Taxis can take at most C people at a time\n        people_in_taxi = min(C, N)\n        N -= people_in_taxi\n        \n        # Airplanes can take at most D people at a time\n        people_in_airplane = min(D, N)\n        N -= people_in_airplane\n        \n        # Ships can take at most E people at a time\n        people_in_ship = min(E, N)\n        N -= people_in_ship\n        \n        time += 1\n        \n    return str(time)"
    },
    {
        "number": 4143,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C, D, E = map(int, stdin.split())\n\n    def min_travel_time(start, end, available_vehicles):\n        return start + (end - start - 1) // available_vehicles + 1\n\n    time_to_reach_city_6 = min_travel_time(1, 6, E)\n    time_to_reach_city_5 = min_travel_time(1, 5, D)\n    time_to_reach_city_4 = min_travel_time(1, 4, C)\n    time_to_reach_city_3 = min_travel_time(1, 3, B)\n    time_to_reach_city_2 = min_travel_time(1, 2, A)\n\n    total_time = max(time_to_reach_city_6, time_to_reach_city_5 + time_to_reach_city_4,\n                    time_to_reach_city_3 + time_to_reach_city_4 + time_to_reach_city_5,\n                    time_to_reach_city_2 + time_to_reach_city_3 + time_to_reach_city_4 + time_to_reach_city_5)\n\n    return str(total_time)"
    },
    {
        "number": 4143,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C, D, E = map(int, stdin.split())\n    N_remaining = N\n    time = 0\n\n    while N_remaining > 0:\n        if N_remaining >= A + B + C + D + E:\n            N_remaining -= A + B + C + D + E\n            time += 1\n        else:\n            break\n\n    return str(time)"
    },
    {
        "number": 4144,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    result = 0\n    for i in range(N + 1):\n        for j in range(N + 1):\n            for k in range(N + 1):\n                if i + j + k == N and i > 0 and j > 0 and k > 0:\n                    result += 1\n    return str(result % (10**9 + 7))"
    },
    {
        "number": 4144,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n\n    for i in range(10**N):\n        binary = bin(i)[2:].zfill(N)\n        if '0' in binary and '9' in binary:\n            count += 1\n\n    return str(count % (10**9 + 7))"
    },
    {
        "number": 4144,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    count = 0\n    for i in range(10**N):\n        binary = format(i, f'0{N}b')\n        if '0' in binary and '9' in binary:\n            count += 1\n    return str(count % (10**9 + 7))\n\ninput_str = input()\nprint(solution(input_str))"
    },
    {
        "number": 4144,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    total = 10 ** n\n    result = total\n\n    for i in range(n):\n        result = (result * 10) % (10 ** 9 + 7)\n\n    return str(result)"
    },
    {
        "number": 4144,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    modulo = 10**9 + 7\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if j - i > 1:\n                continue\n            for k in range(10):\n                for l in range(10):\n                    if k == 0 or k == 9 or l == 0 or l == 9:\n                        count += 1\n                    elif k == l and k != 0 and k != 9:\n                        count += 1\n    return str(count % modulo)"
    },
    {
        "number": 4144,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    MOD = 10**9 + 7\n\n    def count_sequences(start, end, length):\n        if length == 1:\n            return start + 1\n        return (count_sequences(start, end - 1, length - 1) + count_sequences(start + 1, end, length - 1)) % MOD\n\n    return str(count_sequences(0, 9, N))\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4144,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    answer = 0\n\n    for i in range(N):\n        for j in range(10):\n            sequence = [0] * i + [j] + [9]\n            if len(set(sequence)) == 10:\n                answer += 1\n\n    return str(answer % (10**9 + 7))"
    },
    {
        "number": 4144,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    result = (N + 2) * (N + 1) // 2\n    return str(result % (10**9 + 7))"
    },
    {
        "number": 4144,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    total = 10 ** n\n    if n == 1:\n        return str(total)\n    elif n == 2:\n        return str(total * 2)\n    else:\n        result = (total * (total - 1) // 2) * 4\n        result %= 10**9 + 7\n        return str(result)"
    },
    {
        "number": 4144,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 0\n    for i in range(n+1):\n        for j in range(n+1):\n            if i != j and i*9 == n*j:\n                count += 1\n            elif i != j and j*9 == n*i:\n                count += 1\n    return str(count % (10**9 + 7))"
    },
    {
        "number": 4145,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def find_next_prime(num: int) -> int:\n        while True:\n            num += 1\n            if is_prime(num):\n                return num\n\n    next_prime = find_next_prime(X)\n    return str(next_prime)"
    },
    {
        "number": 4145,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for prime in prime_numbers:\n        if prime >= X:\n            return str(prime)"
    },
    {
        "number": 4145,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    prime = X\n\n    while True:\n        prime += 1\n        is_prime = True\n        for i in range(2, int(prime**0.5) + 1):\n            if prime % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            break\n\n    return str(prime)"
    },
    {
        "number": 4145,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    prime = X\n    while True:\n        prime += 1\n        is_prime = True\n        for i in range(2, prime):\n            if prime % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            return str(prime)"
    },
    {
        "number": 4145,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    prime_numbers = [2]\n    number = 3\n\n    while len(prime_numbers) < X:\n        is_prime = True\n        for i in range(2, int(number ** 0.5) + 1):\n            if number % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_numbers.append(number)\n        number += 1\n\n    return str(prime_numbers[X - 2])\n\n\ninput_value = input()\noutput = solution(input_value)\nprint(output) "
    },
    {
        "number": 4145,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    x = int(stdin.strip())\n    result = x + 1\n    while True:\n        if is_prime(result):\n            return str(result)\n        result += 1\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4145,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    import math\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    x = int(stdin.strip())\n    while True:\n        if is_prime(x):\n            return str(x)\n        x += 1"
    },
    {
        "number": 4145,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    import math\n\n    X = int(stdin.strip())\n    prime = False\n\n    while not prime:\n        X += 1\n        prime = True\n\n        for i in range(2, int(math.sqrt(X)) + 1):\n            if X % i == 0:\n                prime = False\n                break\n\n    return str(X)"
    },
    {
        "number": 4145,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    \n    X = int(stdin)\n    prime = False\n    i = 2\n    \n    while not prime:\n        prime = True\n        for j in range(2, int(math.sqrt(i))+1):\n            if i % j == 0:\n                prime = False\n                break\n        if prime:\n            if i >= X:\n                return str(i)\n        i += 1\n        \n"
    },
    {
        "number": 4145,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    i = X\n    while True:\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            return str(i)\n        i += 1"
    },
    {
        "number": 4146,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *sequence = map(int, stdin.split())\n\n    # Check if sequence is already /\\/\\/\\/\n    if all(sequence[i] == sequence[i + 2] for i in range(0, n - 2, 2)):\n        return str(0)\n\n    # Count the occurrences of each number in the sequence\n    count = {}\n    for num in sequence:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n\n    # If there are more than 2 different numbers, it's not possible to make it /\\/\\/\\/\n    if len(count) > 2:\n        return str(-1)\n\n    # Find the index of the elements that need to be replaced\n    to_replace = []\n    for i in range(0, n - 2, 2):\n        if sequence[i] != sequence[i + 2]:\n            to_replace.append(i)\n\n    # Return the number of elements that need to be replaced\n    return str(len(to_replace))"
    },
    {
        "number": 4146,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *v = stdin.split()\n    n = int(n)\n    v = [int(x) for x in v]\n\n    if n % 2 != 0 or len(set(v)) != 2:\n        return str(-1)\n\n    if n <= 2:\n        return str(0)\n\n    if n == 4:\n        if v[0] == v[1] and v[2] == v[3]:\n            return str(0)\n        return str(1)\n\n    if v[0] == v[1] and v[2] == v[3]:\n        return str(0)\n    elif v[0] == v[2] and v[1] == v[3]:\n        return str(0)\n    else:\n        return str(1)"
    },
    {
        "number": 4146,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, sequence = stdin.split(\"\\n\")\n    n = int(n)\n    sequence = list(map(int, sequence.split()))\n\n    if n % 2 != 0 or n < 2 or n > 10**5:\n        return \"Invalid input\"\n\n    for i in range(n - 2):\n        if sequence[i] != sequence[i + 2]:\n            return \"Not /\\/\\/\\/\"\n\n    if len(set(sequence)) != 2:\n        return \"Not /\\/\\/\\/\"\n\n    return \"Minimum number of elements to replace: 1\"\n\ninput_data = \"4\\n3 1 3 2\"\nprint(solution(input_data)) "
    },
    {
        "number": 4146,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    v = list(map(int, stdin.split()[1:]))\n\n    count_dict = {}\n    count = 0\n\n    for i in range(n):\n        if v[i] not in count_dict:\n            count_dict[v[i]] = 0\n        count_dict[v[i]] += 1\n        count += 1\n\n    if count < 4:\n        return -1\n\n    if count == 4:\n        for i in range(n):\n            if v[i] != v[i + 1]:\n                return 1\n        return 0\n\n    if count == 5:\n        return 1\n\n    if count == 6:\n        return 2\n\n    return -1"
    },
    {
        "number": 4146,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, sequence = stdin.split()\n    n = int(n)\n    sequence = [int(i) for i in sequence.split()]\n    count = {}\n    for i in sequence:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    if len(count) == 2:\n        return 0\n    else:\n        return len(sequence) - 2"
    },
    {
        "number": 4146,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *v = map(int, stdin.split())\n\n    # Count the frequency of each unique element in the sequence\n    freq = {}\n    for x in v:\n        if x not in freq:\n            freq[x] = 0\n        freq[x] += 1\n\n    # Find the two elements that appear only once\n    unique_elements = [x for x in freq if freq[x] == 1]\n\n    if len(unique_elements) < 2:\n        # There are not enough unique elements to make the sequence /\\/\\/\\/\n        return str(-1)\n\n    # Count the number of occurrences of the two unique elements\n    count_1, count_2 = 0, 0\n    for i in range(n):\n        if v[i] == unique_elements[0]:\n            count_1 += 1\n        elif v[i] == unique_elements[1]:\n            count_2 += 1\n\n    # Calculate the minimum number of elements to be replaced\n    min_replacements = min(count_1, count_2)\n\n    return str(min_replacements)"
    },
    {
        "number": 4146,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    sequence = list(map(int, stdin.split()[1:]))\n\n    count = {}\n    for num in sequence:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n\n    different_numbers = len(count)\n    if different_numbers == 2:\n        return str(0)\n\n    min_replacements = n\n    for num in count:\n        if count[num] > 1:\n            min_replacements = min(min_replacements, count[num])\n\n    return str(min_replacements)\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4146,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, seq = stdin.split()\n    n = int(n)\n    seq = list(map(int, seq.split()))\n\n    unique_elements = set(seq)\n    if len(unique_elements) != 2:\n        return str(-1)\n\n    frequency = [0] * n\n    for num in unique_elements:\n        frequency[seq.index(num)] = 1\n\n    max_index = max(range(n), key=lambda i: frequency[i])\n\n    if max_index == n - 1:\n        return str(1)\n    else:\n        return str(2)"
    },
    {
        "number": 4146,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, seq = stdin.split()\n    n = int(n)\n    seq = list(map(int, seq.split()))\n\n    # check if sequence is /\\/\\/\\/\n    if len(seq) != n:\n        raise ValueError(\"Invalid input\")\n\n    unique_values = set(seq)\n    if len(unique_values) != 2:\n        return \"0\"\n\n    i = 0\n    count = 0\n    while i < n - 1:\n        if seq[i] != seq[i + 2]:\n            count += 1\n        i += 2\n\n    if count == 0:\n        return \"0\"\n    else:\n        return str(count)"
    },
    {
        "number": 4146,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, sequence = stdin.split()\n    n = int(n)\n    sequence = list(map(int, sequence.split()))\n\n    count = {}\n    min_num = float('inf')\n    max_num = float('-inf')\n    for num in sequence:\n        if num not in count:\n            count[num] = 1\n        else:\n            count[num] += 1\n        min_num = min(min_num, num)\n        max_num = max(max_num, num)\n\n    if len(count) != 2:\n        return \"not possible\"\n\n    if count[min_num] == 2 or count[max_num] == 2:\n        return \"0\"\n\n    if count[min_num] == 1 and count[max_num] == 1:\n        return str(len(sequence) // 2)\n\n    if count[min_num] == 1:\n        return str(count[max_num])\n\n    return str(count[min_num])\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4147,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = map(int, stdin.split())\n    l = list(map(int, stdin.split()[N + 1:]))\n\n    def mp_needed(l: list, target: list) -> int:\n        target = sorted(target, reverse=True)\n        result = 0\n        for length in target:\n            index = bisect_right(l, length)\n            if index == 0:\n                return float('inf')\n            l.pop(index - 1)\n            result += index - 1\n        return result\n\n    return str(mp_needed(l, [A, B, C]))"
    },
    {
        "number": 4147,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.splitlines()\n    N, A, B, C = map(int, lines[0].split())\n    lengths = list(map(int, lines[1:]))\n    \n    # sort bamboos by length\n    lengths.sort(reverse=True)\n    \n    # initialize variables\n    total_mp = 0\n    used_bamboos = set()\n    \n    # use Extension Magic to increase length of bamboos\n    for i in range(len(lengths)):\n        if lengths[i] >= C:\n            break\n        if lengths[i] >= B:\n            total_mp += 1\n            lengths[i] += 1\n        elif lengths[i] >= A:\n            total_mp += 2\n            lengths[i] += 2\n        else:\n            total_mp += 3\n            lengths[i] += 3\n        used_bamboos.add(i)\n    \n    # use Composition Magic to create bamboos\n    for i in range(len(lengths)):\n        if i not in used_bamboos:\n            for j in range(i+1, len(lengths)):\n                if j not in used_bamboos:\n                    total_mp += 10\n                    if lengths[i] + lengths[j] >= C:\n                        break\n                    elif lengths[i] + lengths[j] >= B:\n                        lengths[i] += 1\n                    elif lengths[i] + lengths[j] >= A:\n                        lengths[i] += 2\n                    else:\n                        lengths[i] += 3\n                    used_bamboos.add(i)\n                    used_bamboos.add(j)\n                    break\n    \n    # print result\n    return str(total_mp) "
    },
    {
        "number": 4147,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N, A, B, C = map(int, lines[0].split())\n    l_arr = list(map(int, lines[1:]))\n\n    def magics(mp: int, l: int, m: int) -> int:\n        if m == 1:\n            return max(0, l - 1)\n        elif m == 2:\n            return l + 1\n        else:\n            return l + max(0, l - 1)\n\n    # Sort the bamboos in descending order\n    l_arr.sort(reverse=True)\n\n    # Use the magics to obtain the three bamboos of lengths A, B, C\n    mp_used = 0\n    for l in l_arr:\n        if l >= C:\n            continue\n        mp_used += magics(mp_used, l, 1)\n        if mp_used >= 10:\n            mp_used += magics(mp_used, l, 2)\n            mp_used += magics(mp_used, A - l, 2)\n            break\n\n    return str(mp_used)"
    },
    {
        "number": 4147,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def can_obtain(lengths: List[int], target: int) -> bool:\n        for length in lengths:\n            if length >= target:\n                return True\n        return False\n\n    def extension_magic(bamboo: int) -> int:\n        return bamboo + 1\n\n    def shortening_magic(bamboo: int) -> int:\n        return bamboo - 1\n\n    def composition_magic(bamboos: List[int]) -> int:\n        return sum(bamboos)\n\n    def use_magic(bamboos: List[int], target: int) -> int:\n        total_mp = 0\n        while not can_obtain(bamboos, target):\n            extension_count = sum([1 if bamboo >= 2 else 0 for bamboo in bamboos])\n            if extension_count > 0:\n                total_mp += 1\n                bamboos = [extension_magic(bamboo) if bamboo >= 2 else bamboo for bamboo in bamboos]\n            else:\n                shorten_count = sum([1 if bamboo >= 2 else 0 for bamboo in bamboos])\n                total_mp += shorten_count\n                bamboos = [shortening_magic(bamboo) if bamboo >= 2 else bamboo for bamboo in bamboos]\n            if len(bamboos) >= 2:\n                total_mp += 10\n                bamboos = [composition_magic(bamboos)]\n        return total_mp\n\n    input_data = list(map(int, stdin.split('\\n')))\n    N, A, B, C = input_data[0], input_data[1], input_data[2], input_data[3]\n    l = input_data[4:]\n\n    total_mp = use_magic(l, A) + use_magic([l[i] for i in range(len(l)) if i != l.index(max(l))], B) + use_magic([l[i] for i in range(len(l)) if i != l.index(min(l))], C)\n\n    return str(total_mp)"
    },
    {
        "number": 4147,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = [int(x) for x in stdin.strip().split()]\n    l_list = [int(x) for x in stdin.strip().split(\"\\n\", maxsplit=N)]\n    \n    # Calculate the sum of lengths of all bamboos\n    total_length = sum(l_list)\n    \n    # Initialize the cost of all three magics\n    extension_cost = 2\n    shortening_cost = 1\n    composition_cost = 10\n    \n    # Initialize the minimum cost needed for achieving the objective\n    min_cost = float(\"inf\")\n    \n    # Iterate through all possible combinations of bamboos\n    for i in range(1, N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                # Check if the sum of lengths of bamboos is equal to A, B, and C\n                if l_list[i-1] + l_list[j-1] + l_list[k-1] == A and l_list[i-1] + l_list[j-1] + l_list[k-1] == B and l_list[i-1] + l_list[j-1] + l_list[k-1] == C:\n                    # Initialize the cost for using magics on bamboos\n                    magics_cost = 0\n                    \n                    # Use Extension Magic on bamboos\n                    if l_list[i-1] != A:\n                        magics_cost += extension_cost\n                        l_list[i-1] += 1\n                    if l_list[j-1] != B:\n                        magics_cost += extension_cost\n                        l_list[j-1] += 1\n                    if l_list[k-1] != C:\n                        magics_cost += extension_cost\n                        l_list[k-1] += 1\n                    \n                    # Use Composition Magic on bamboos\n                    if l_list[i-1] + l_list[j-1] != A or l_list[i-1] + l_list[k-1] != B or l_list[j-1] + l_list[k-1] != C:\n                        magics_cost += composition_cost\n                        l_list[i-1] = l_list[i-1] + l_list[j-1]\n                        l_list[j-1] = l_list[k-1] + l_list[j-1]\n                        l_list[k-1] = l_list[k-1] + l_list[i-1] - l_list[i-1] - l_list[j-1]\n                    \n                    # Use Shortening Magic on bamboos\n                    if l_list[i-1] > 1:\n                        magics_cost += shortening_cost\n                        l_list[i-1] -= 1\n                    if l_list[j-1] > 1:\n                        magics_cost += shortening_cost\n                        l_list[j-1] -= 1\n                    if l_list[k-1] > 1:\n                        magics_cost += shortening_cost\n                        l_list[k-1] -= 1\n                    \n                    # Check if the cost is the minimum cost\n                    if magics_cost < min_cost:\n                        min_cost = magics_cost\n                    \n                    # Reset the bamboo lengths\n                    l_list[i-1] -= 1\n                    l_list[j-1] += 1\n                    l_list[k-1] += 1\n                    \n    return str(min_cost)"
    },
    {
        "number": 4147,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = map(int, stdin.split())\n    l = list(map(int, stdin.split()))[1:]\n\n    min_mp = float('inf')\n    for i in range(2**N):\n        used_bamboos = [False] * N\n        bamboos = []\n\n        # Check if the current combination can obtain the required bamboos\n        for j in range(N):\n            if i & (1 << j):\n                bamboos.append(l[j])\n                used_bamboos[j] = True\n        if len(bamboos) < 3:\n            continue\n\n        if (A not in bamboos or B not in bamboos or C not in bamboos) or (bamboos.count(A) + bamboos.count(B) + bamboos.count(C)) != 3:\n            continue\n\n        # Calculate the minimum MP needed for this combination\n        mp_used = 0\n        for bamboo in bamboos:\n            if bamboo == A:\n                continue\n            if bamboo == B:\n                continue\n            if bamboo == C:\n                continue\n            if bamboo == A - 1 or bamboo == B - 1 or bamboo == C - 1:\n                mp_used += 1\n            else:\n                mp_used += 2\n\n        min_mp = min(min_mp, mp_used)\n\n    return str(min_mp)"
    },
    {
        "number": 4147,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, A, B, C = map(int, stdin.split())\n    bamboos = list(map(int, stdin.split()))[N+1:]\n\n    # Use Extension Magic to obtain A\n    while len(bamboos) > 0 and bamboos[-1] < A:\n        bamboos[-1] += 1\n        bamboos = bamboos[:-1]\n\n    # Combine bamboos to obtain B\n    bamboos_to_combine = bamboos[:]\n    while len(bamboos_to_combine) > 1 and sum(bamboos_to_combine) > B:\n        bamboo1, bamboo2 = bamboos_to_combine[:2]\n        bamboos_to_combine = [bamboo1 + bamboo2] + bamboos_to_combine[2:]\n\n    # Combine bamboos to obtain C\n    bamboos_to_combine = bamboos[:]\n    while len(bamboos_to_combine) > 1 and sum(bamboos_to_combine) > C:\n        bamboo1, bamboo2 = bamboos_to_combine[:2]\n        bamboos_to_combine = [bamboo1 + bamboo2] + bamboos_to_combine[2:]\n\n    # Calculate MP needed\n    mp_needed = 2 * (N - len(bamboos)) + 10 * (N - len(bamboos_to_combine))\n\n    return str(mp_needed)"
    },
    {
        "number": 4147,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = map(int, stdin.split()[:4])\n    l_list = list(map(int, stdin.split()[4:]))\n\n    def can_obtain(target: int, remaining_bamboos: list) -> bool:\n        if target == 0:\n            return True\n        for bamboo in remaining_bamboos:\n            if bamboo >= target:\n                return True\n        return False\n\n    def magic_needed(N: int, A: int, B: int, C: int, l_list: list) -> int:\n        mp_needed = 0\n        remaining_bamboos = [l for l in l_list]\n\n        if not can_obtain(A, remaining_bamboos):\n            return -1\n\n        mp_needed += 1\n        remaining_bamboos.remove(max(remaining_bamboos))\n\n        if not can_obtain(B, remaining_bamboos):\n            return -1\n\n        mp_needed += 1\n        remaining_bamboos.remove(max(remaining_bamboos))\n\n        if not can_obtain(C, remaining_bamboos):\n            return -1\n\n        mp_needed += 1\n        remaining_bamboos.remove(max(remaining_bamboos))\n\n        if not can_obtain(A, remaining_bamboos):\n            mp_needed += 1\n            remaining_bamboos.remove(max(remaining_bamboos))\n\n        if not can_obtain(B, remaining_bamboos):\n            mp_needed += 1\n            remaining_bamboos.remove(max(remaining_bamboos))\n\n        if not can_obtain(C, remaining_bamboos):\n            mp_needed += 1\n            remaining_bamboos.remove(max(remaining_bamboos))\n\n        return mp_needed\n\n    result = magic_needed(N, A, B, C, l_list)\n    return str(result)"
    },
    {
        "number": 4147,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = map(int, stdin.split()[:4])\n    l_list = list(map(int, stdin.split()[4:]))\n\n    # Base cases\n    if A < C or C > B:\n        return \"IMPOSSIBLE\"\n\n    if A == B == C:\n        return \"0\"\n\n    # Initialize variables\n    mp_needed = 0\n    bamboo_dict = {0: 0}\n    bamboos_needed = [0] * 1001\n\n    # Count number of bamboos needed for each length\n    for length in l_list:\n        if length in bamboo_dict:\n            bamboo_dict[length] += 1\n        else:\n            bamboo_dict[length] = 1\n\n        for i in range(length, 1001):\n            bamboos_needed[i] += 1\n\n    # Helper function to calculate the cost of a single bamboo\n    def get_cost(length: int) -> int:\n        if length == 1:\n            return 0\n        if length % 2 == 0:\n            return length // 2 + get_cost(length // 2)\n        else:\n            return length // 2 + 1 + get_cost(length // 2 + 1)\n\n    # Helper function to calculate the minimum MP needed for a given bamboo length\n    def get_min_mp(length: int) -> int:\n        if length in bamboo_dict:\n            return 0\n        min_cost = 1001\n        for i in range(length):\n            cost = get_cost(length) + get_min_mp(i)\n            if cost < min_cost:\n                min_cost = cost\n        return min_cost\n\n    # Calculate the minimum MP needed for the three bamboos\n    for length in range(1, 1001):\n        mp_needed += bamboos_needed[length] * get_min_mp(length)\n\n    return str(mp_needed)"
    },
    {
        "number": 4147,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def extension_magic(bamboo, length):\n        bamboo.append(length)\n\n    def shortening_magic(bamboo):\n        if bamboo[-1] >= 2:\n            bamboo[-1] -= 1\n\n    def composition_magic(bamboos):\n        if len(bamboos) == 2:\n            return [bamboos[0] + bamboos[1]]\n        elif len(bamboos) == 1:\n            return [bamboos[0] // 2, bamboos[0] - bamboos[0] // 2]\n\n    def sum_of_magics(mp, bamboos, target_lengths):\n        mp_consumed = 0\n        for target_length in target_lengths:\n            for i in range(len(bamboos)):\n                if bamboos[i] < target_length:\n                    continue\n                if bamboos[i] == target_length:\n                    mp_consumed += 0\n                    break\n                if bamboos[i] > target_length:\n                    mp_consumed += 1\n                    extension_magic(bamboos, target_length)\n                    break\n            else:\n                mp_consumed += 10\n                new_bamboos = composition_magic(bamboos)\n                while len(new_bamboos) < 2:\n                    mp_consumed += 10\n                    new_bamboos = composition_magic(new_bamboos)\n                bamboos = new_bamboos\n            for _ in range(len(bamboos) - 1):\n                mp_consumed += 1\n                shortening_magic(bamboos)\n        return mp_consumed\n\n    def main():\n        n, a, b, c = map(int, input().split())\n        bamboos = [int(input()) for _ in range(n)]\n        target_lengths = sorted([a, b, c], reverse=True)\n        mp_needed = sum_of_magics(0, bamboos, target_lengths)\n        print(mp_needed)\n\n    main()"
    },
    {
        "number": 4148,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split('\\n')\n    N = int(N)\n    result = []\n\n    for char in S:\n        if char.isalpha():\n            shifted_char = chr(((ord(char) - ord('A') + N) % 26) + ord('A'))\n            result.append(shifted_char)\n        else:\n            result.append(char)\n\n    return ''.join(result)"
    },
    {
        "number": 4148,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split()\n    N = int(N)\n    shifted_string = \"\"\n\n    for char in S:\n        if char.isalpha():\n            shifted_char = chr(((ord(char) - 65 + N) % 26) + 65)\n        else:\n            shifted_char = char\n        shifted_string += shifted_char\n\n    return shifted_string\n"
    },
    {
        "number": 4148,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split()\n    N = int(N)\n    \n    result = []\n    for char in S:\n        if char.isupper():\n            shifted_char = chr(((ord(char) - ord('A') + N) % 26) + ord('A'))\n            result.append(shifted_char)\n        else:\n            result.append(char)\n    \n    return ''.join(result)"
    },
    {
        "number": 4148,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split('\\n')\n    N = int(N)\n    result = ''\n\n    for char in S:\n        if char.isupper():\n            shifted_char = chr(((ord(char) - ord('A') + N) % 26) + ord('A'))\n            result += shifted_char\n        else:\n            result += char\n\n    return result"
    },
    {
        "number": 4148,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split()\n    N = int(N)\n\n    shifted_S = \"\"\n\n    for char in S:\n        shifted_char = chr(((ord(char) - ord('A') + N) % 26) + ord('A'))\n        shifted_S += shifted_char\n\n    return shifted_S\n\ndef"
    },
    {
        "number": 4148,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split(\"\\n\")\n    N = int(N)\n    \n    def shift(c):\n        return chr(((ord(c) - 65 + N) % 26) + 65)\n    \n    return \"\".join(shift(c) for c in S)"
    },
    {
        "number": 4148,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split()\n    N = int(N)\n\n    result = \"\"\n\n    for char in S:\n        shifted_char = chr(((ord(char) - ord('A') + N) % 26) + ord('A'))\n        result += shifted_char\n\n    return result\n\ndef"
    },
    {
        "number": 4148,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split()\n    N = int(N)\n    result = \"\"\n    for char in S:\n        shifted_char = chr((ord(char) - ord('A') + N) % 26 + ord('A'))\n        result += shifted_char\n    return result"
    },
    {
        "number": 4148,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.strip().split()\n    N = int(N)\n    \n    result = \"\"\n    \n    for char in S:\n        shifted_char = chr(((ord(char) - ord('A') + N) % 26) + ord('A'))\n        result += shifted_char\n    \n    return result"
    },
    {
        "number": 4148,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split('\\n')\n    N = int(N)\n    \n    def shift_char(char: str) -> str:\n        if char.isupper():\n            offset = ord(char) - ord('A')\n            new_offset = (offset + N) % 26\n            return chr(new_offset + ord('A'))\n        else:\n            return char\n        \n    result = ''.join([shift_char(char) for char in S])\n    return result"
    },
    {
        "number": 4149,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    b = list(map(int, stdin.split()[1:]))\n    a = []\n    for i in range(n):\n        if b[i] in [2, 3, 5]:\n            a.append(b[i])\n        else:\n            for j in range(i+1, len(b)):\n                if b[j] % b[i] == 0:\n                    a.append(b[i])\n                    break\n    return \" \".join(map(str, a))"
    },
    {
        "number": 4149,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    b = list(map(int, stdin.split('\\n')[1].split()))\n    a = []\n    b_prime = False\n    \n    for i in range(n):\n        if is_prime(b[i]):\n            a.append(b[i])\n            b_prime = True\n            continue\n        for j in range(i+1, len(b)):\n            if b[i] % b[j] == 0 and b[i] != b[j]:\n                a.append(b[j])\n                b_prime = False\n                break\n        if b_prime:\n            for j in range(len(b), 2*n):\n                if b[i] % b[j] == 0 and b[i] != b[j]:\n                    a.append(b[j])\n                    break\n    a = sorted(a[:n])\n    return ' '.join(map(str, a))\n\ndef"
    },
    {
        "number": 4149,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    b = [int(x) for x in lines[1].split()]\n\n    a = []\n    for i in range(n):\n        if is_prime(b[2*i]):\n            p = b[2*i]\n            for j in range(i+1, n):\n                if b[2*j] == p:\n                    a.append(b[2*i])\n                    break\n        else:\n            for j in range(i+1, n):\n                if b[2*j] % b[2*i] == 0 and b[2*j] != b[2*i]:\n                    a.append(b[2*i])\n                    break\n\n    a = sorted(a)\n    return \" \".join(map(str, a))\n\ndef"
    },
    {
        "number": 4149,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    b = [int(x) for x in stdin.split()[1:]]\n    \n    a = []\n    for i in range(n):\n        if is_prime(b[i]):\n            p_a = 2\n            while not is_prime(b[i] * p_a):\n                p_a += 1\n            a.append(p_a)\n        else:\n            factors = []\n            for j in range(2, int(b[i] ** 0.5) + 1):\n                if b[i] % j == 0:\n                    factors.append(j)\n            factors.append(b[i])\n            a.append(max(factors))\n    \n    return \" \".join(str(x) for x in a)\n\ndef"
    },
    {
        "number": 4149,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    from itertools import permutations\n    \n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    def prime_index(n: int) -> int:\n        primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, "
    },
    {
        "number": 4149,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def get_prime(n):\n        if n == 1:\n            return 2\n        else:\n            primes = [2]\n            current = 3\n            while len(primes) < n:\n                is_prime = True\n                for prime in primes:\n                    if current % prime == 0:\n                        is_prime = False\n                        break\n                if is_prime:\n                    primes.append(current)\n                current += 2\n            return primes[-1]\n\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    n = int(stdin.readline().strip())\n    b = list(map(int, stdin.readline().strip().split()))\n    a = []\n    for i in range(n):\n        if i == 0:\n            a.append(b[0])\n        elif i % 2 == 0:\n            a.append(b[i])\n        else:\n            a.append(gcd(b[i], b[i-1]))\n\n    primes = [get_prime(i) for i in range(n, 2*n)]\n    for i in range(n):\n        if a[i] in primes:\n            a[i] = primes.index(a[i]) + 2\n        else:\n            a[i] = gcd(a[i], primes[i-n])\n\n    a.sort()\n    return ' '.join(map(str, a))\n\n\ndef"
    },
    {
        "number": 4149,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    b = list(map(int, stdin.split()[1:]))\n    a = []\n    b_prime = False\n    b_divisor = False\n\n    for i in range(n):\n        if b[i] == b[i + n]:\n            a.append(b[i])\n        elif is_prime(b[i]):\n            a.append(b[i])\n            b_prime = True\n        else:\n            divisor = find_greatest_divisor(b[i])\n            a.append(divisor)\n            b_divisor = True\n\n    if b_prime:\n        a = sorted(a)\n    elif b_divisor:\n        a = sorted(a, reverse=True)\n\n    return \" \".join(map(str, a))\n\ndef"
    },
    {
        "number": 4149,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, b = stdin.strip().split('\\n')\n    n = int(n)\n    b = list(map(int, b.split()))\n    a = []\n\n    for i in range(n):\n        if b[i] == 2:\n            a.append(2)\n            b.pop(i)\n        elif b[i] == 3:\n            a.append(3)\n            b.pop(i)\n        else:\n            for j in range(i+1, len(b)):\n                if b[i] % b[j] == 0:\n                    a.append(b[j])\n                    b.pop(j)\n                    break\n                elif b[j] % b[i] == 0:\n                    a.append(b[i])\n                    b.pop(i)\n                    break\n\n    return ' '.join(map(str, a))"
    },
    {
        "number": 4149,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    b = list(map(int, stdin.split()[1:]))\n    b = b[:n]\n    \n    a = []\n    p = 2\n    primes = [2]\n    \n    for i in range(n):\n        if b[i] in primes:\n            a.append(p)\n            p += 1\n        else:\n            for j in range(2, b[i]):\n                if b[i] % j == 0:\n                    a.append(j)\n                    break\n                    \n    return \" \".join(map(str, a))"
    },
    {
        "number": 4149,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    b = list(map(int, stdin.splitlines()[1].split()))\n    a = []\n    b_idx = 0\n    p = 2\n    while b_idx < 2*n:\n        if b[b_idx] == 2:\n            b_idx += 1\n            a.append(2)\n        elif b[b_idx] == 3:\n            b_idx += 1\n            a.append(3)\n        else:\n            if b[b_idx] == p:\n                b_idx += 1\n                p = next_prime(p)\n            a.append(b[b_idx])\n            b_idx += 1\n    return ' '.join(map(str, a))\n\ndef"
    },
    {
        "number": 4150,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    skills = list(map(int, stdin.split()[2:]))\n    skills.sort()\n    students = [False] * n\n    teams = [''] * n\n\n    def choose_students(students: list, skills: list, k: int) -> list:\n        result = []\n        left, right = 0, len(skills) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if skills[mid] <= k:\n                result.append(mid)\n                left = mid + 1\n            else:\n                right = mid - 1\n        return result\n\n    for i in range(n):\n        if not students[i]:\n            first_choices = choose_students(students, skills, skills[i])\n            second_choices = choose_students(students, skills, n - skills[i])\n            for j in first_choices:\n                teams[j] = '1'\n                students[j] = True\n            for j in second_choices:\n                teams[j] = '2'\n                students[j] = True\n\n    return ''.join(teams)"
    },
    {
        "number": 4150,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    skills = list(map(int, stdin.split()))\n    stdin = stdin.split()\n    students = list(map(int, stdin[1:]))\n    \n    teams = [\"\", \"\"]\n    for i in range(len(students)):\n        if students[i] not in teams:\n            teams[i % 2] += str(students[i])\n            left = students.index(students[i]) - k if students.index(students[i]) - k >= 0 else 0\n            right = students.index(students[i]) + k if students.index(students[i]) + k < len(students) else len(students)\n            for j in range(left, right):\n                if students[j] not in teams:\n                    teams[i % 2] += str(students[j])\n                    students.pop(j)\n                else:\n                    continue\n    return teams[0] + teams[1]\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4150,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    student_skills = list(map(int, stdin.split()[2:]))\n    team1 = set()\n    team2 = set()\n\n    while student_skills:\n        max_skill = max(student_skills)\n        max_skill_index = student_skills.index(max_skill)\n        student_skills.pop(max_skill_index)\n        team1.add(max_skill)\n\n        left_skills = [student_skills[i] for i in range(max(0, max_skill_index - k + 1), max_skill_index + 1)]\n        right_skills = [student_skills[i] for i in range(max_skill_index + 1, min(max_skill_index + k + 1, len(student_skills)))]\n\n        for skill in left_skills:\n            if skill not in team1:\n                team1.add(skill)\n                student_skills.remove(skill)\n\n        for skill in right_skills:\n            if skill not in team1:\n                team1.add(skill)\n                student_skills.remove(skill)\n\n    result = []\n    for i in range(1, n + 1):\n        if i in team1:\n            result.append('1')\n        else:\n            result.append('2')\n\n    return ''.join(result)\n\ninput_string = input()\nprint(solution(input_string)) "
    },
    {
        "number": 4150,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    students = list(map(int, stdin.split()[2:]))\n    stdin_list = [students.index(i) + 1 for i in sorted(students, reverse=True)]\n\n    first_team = []\n    second_team = []\n    while stdin_list:\n        if len(stdin_list) >= k + 1:\n            first_coach_index = stdin_list.pop(k)\n            first_coach_students = sorted([stdin_list.pop(i - 1) for i in range(k, 0, -1)], reverse=True)\n            first_team.extend(first_coach_students)\n        elif len(stdin_list) > 1:\n            first_coach_index = stdin_list.pop(0)\n            first_coach_students = sorted([stdin_list.pop(i - 1) for i in range(len(stdin_list))], reverse=True)\n            first_team.extend(first_coach_students)\n        elif len(stdin_list) == 1:\n            first_coach_index = stdin_list.pop(0)\n            first_team.append(first_coach_index)\n\n        if len(stdin_list) >= k + 1:\n            second_coach_index = stdin_list.pop(k)\n            second_coach_students = sorted([stdin_list.pop(i - 1) for i in range(k, 0, -1)], reverse=True)\n            second_team.extend(second_coach_students)\n        elif len(stdin_list) > 1:\n            second_coach_index = stdin_list.pop(0)\n            second_coach_students = sorted([stdin_list.pop(i - 1) for i in range(len(stdin_list))], reverse=True)\n            second_team.extend(second_coach_students)\n        elif len(stdin_list) == 1:\n            second_coach_index = stdin_list.pop(0)\n            second_team.append(second_coach_index)\n\n    result = \"\"\n    for i in range(1, n + 1):\n        if i in first_team:\n            result += \"1\"\n        else:\n            result += \"2\"\n\n    return result"
    },
    {
        "number": 4150,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    skills = list(map(int, stdin.split()[2:]))\n    students = [i+1 for i in range(n)]\n    first_team = []\n    second_team = []\n    while students:\n        max_skill = max(skills)\n        max_index = skills.index(max_skill)\n        max_student = students[max_index]\n        skills.pop(max_index)\n        students.pop(max_index)\n        for i in range(max(0, max_index-k), min(n-k, max_index)+k+1):\n            if skills[i] != max_skill and students[i] not in first_team + second_team:\n                if skills[i] > max_skill:\n                    first_team.append(students[i])\n                else:\n                    second_team.append(students[i])\n    return ''.join(['1' if i in first_team else '2' for i in range(1, n+1)])"
    },
    {
        "number": 4150,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    skills = list(map(int, stdin.split()[2:]))\n    \n    first_team = []\n    second_team = []\n    students = list(range(1, n+1))\n    \n    while students:\n        max_skill = max(skills)\n        max_index = skills.index(max_skill)\n        max_student = students[max_index]\n        \n        students.remove(max_student)\n        skills.remove(max_skill)\n        \n        if len(students) >= 2*k:\n            first_team.append(max_student)\n            for i in range(max_index-k, max_index+k+1):\n                if 0 <= i < len(students) and students[i] not in first_team:\n                    first_team.append(students[i])\n                    students.remove(students[i])\n                    skills.remove(skills[i])\n                \n        else:\n            second_team.append(max_student)\n            for i in range(max_index-k, max_index+k+1):\n                if 0 <= i < len(students) and students[i] not in second_team:\n                    second_team.append(students[i])\n                    students.remove(students[i])\n                    skills.remove(skills[i])\n    \n    result = ['2' if i in second_team else '1' for i in range(1, n+1)]\n    \n    return ''.join(result)"
    },
    {
        "number": 4150,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    skills = list(map(int, stdin.split()[2:]))\n\n    first_team = []\n    second_team = []\n    students_left = [i + 1 for i in range(n)]\n\n    for i in range(n):\n        if students_left:\n            max_skill_index = skills.index(max(skills))\n            max_skill_student = students_left[max_skill_index]\n            del skills[max_skill_index]\n            del students_left[max_skill_index]\n\n            chosen_students = [max_skill_student]\n            left_index = max_skill_index - 1\n            while left_index >= 0 and len(chosen_students) < k:\n                if skills[left_index] in students_left:\n                    chosen_students.append(students_left[students_left.index(skills[left_index])])\n                    del skills[left_index]\n                    del students_left[students_left.index(skills[left_index])]\n                left_index -= 1\n\n            right_index = max_skill_index + 1\n            while right_index < len(skills) and len(chosen_students) < k:\n                if skills[right_index] in students_left:\n                    chosen_students.append(students_left[students_left.index(skills[right_index])])\n                    del skills[right_index]\n                    del students_left[students_left.index(skills[right_index])]\n                right_index += 1\n\n            if i % 2 == 0:\n                first_team += chosen_students\n            else:\n                second_team += chosen_students\n\n    result = ''\n    for student in range(1, n + 1):\n        if student in first_team:\n            result += '1'\n        else:\n            result += '2'\n\n    return result\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4150,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    students = list(map(int, stdin.split()))\n    std_skills = [0] * n\n    teams = [[] for _ in range(2)]\n\n    for i in range(n):\n        std_skills[students[i] - 1] = i\n\n    def choose_student(students: List[int], k: int) -> int:\n        if len(students) <= k:\n            return students[0]\n        diff = [abs(students[i] - students[0]) for i in range(1, len(students))]\n        min_diff = min(diff)\n        min_index = diff.index(min_diff) + 1\n        return students[min_index]\n\n    while len(students) > 0:\n        std_index = choose_student(students, k)\n        std = students.pop(std_index)\n        teams[0].append(std)\n\n        if len(students) > 0:\n            std_index = choose_student(students, k)\n            std = students.pop(std_index)\n            teams[1].append(std)\n\n    result = [\"1\" if students in teams[0] else \"2\" for students in students_list]\n    return \"\".join(result)"
    },
    {
        "number": 4150,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    skills = list(map(int, input().split()))\n    first_team = set()\n    second_team = set()\n    skills.sort(reverse=True)\n    index = 0\n    \n    while len(skills) > 0:\n        if index >= len(skills):\n            index = 0\n        if skills[index] not in first_team and skills[index] not in second_team:\n            first_team.add(skills[index])\n            for i in range(max(index - k + 1, 0), min(index + k, len(skills))):\n                if skills[i] not in first_team and skills[i] not in second_team:\n                    first_team.add(skills[i])\n        skills.pop(index)\n        index += 1\n        \n    result = \"\"\n    for i in range(n):\n        if i + 1 in first_team:\n            result += \"1\"\n        else:\n            result += \"2\"\n    return result\n\ndef"
    },
    {
        "number": 4150,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    skills = list(map(int, stdin.split()))\n    students = [(s, i) for i, s in enumerate(skills)]\n    students.sort(reverse=True)\n\n    teams = [[], []]\n    for student in students:\n        team = (teams[0] if len(teams[0]) < len(teams[1]) else teams[1])\n        team.append(student)\n        index = student[1]\n        left_range = list(range(max(0, index-k), index))\n        right_range = list(range(index+1, min(index+k+1, len(students))))\n        for i in left_range + right_range:\n            teams[0 if teams[0] == team else 1].append(students[i])\n\n    first_team_index = [s[1] for s in teams[0]]\n    second_team_index = [s[1] for s in teams[1]]\n\n    first_team_str = \"\".join(\"1\" if i in first_team_index else \"2\" for i in range(n))\n    second_team_str = \"\".join(\"2\" if i in second_team_index else \"1\" for i in range(n))\n\n    return first_team_str + \"\\n\" + second_team_str"
    },
    {
        "number": 4151,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    def is_monotonic(b: list) -> bool:\n        for i in range(len(b) - 1):\n            if b[i] > b[i + 1]:\n                return False\n        return True\n\n    def find_monotonic_renumeration(a: list, n: int, prefix: list) -> int:\n        if n == 0:\n            if is_monotonic(prefix):\n                return 1\n            else:\n                return 0\n        count = 0\n        for i in range(len(a)):\n            new_prefix = prefix.copy()\n            new_prefix.append(i)\n            count += find_monotonic_renumeration(a, n - 1, new_prefix)\n        return count\n\n    return str(find_monotonic_renumeration(a, n, []) % 998244353)"
    },
    {
        "number": 4151,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    sys.setrecursionlimit(10 ** 6)\n\n    def dfs(a, b, index, visited, count):\n        if index == len(a):\n            count[0] += 1\n            return\n        if index in visited:\n            return\n        visited.add(index)\n        for i in range(len(b)):\n            if a[index] == a[i]:\n                dfs(a, b, i, visited, count)\n        visited.remove(index)\n\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = [0] * n\n    count = [0]\n    dfs(a, b, 0, set(), count)\n    return str(count[0] % 998244353)\n\ninput_str = \"\"\"5\n1 2 1 2 3\n2\n100 1\n4\n1 3 3 7\"\"\"\nprint(solution(input_str)) "
    },
    {
        "number": 4151,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    if n == 2:\n        return \"2\"\n\n    count = 0\n    for i in range(n):\n        count += count_monotonic_renumerations(a, i, i + 1)\n\n    return str(count % 998244353)\n\n\ndef"
    },
    {
        "number": 4151,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    count = [1] * n\n    res = 1\n    for i in range(n):\n        for j in range(i):\n            if a[i] == a[j]:\n                count[i] += count[j]\n        res *= count[i]\n        res %= 998244353\n    return str(res)"
    },
    {
        "number": 4151,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    mod = 998244353\n    count = 0\n    prev = None\n    for i in range(n):\n        if a[i] != prev:\n            count += 1\n            prev = a[i]\n    return str(count * (count + 1) // 2 % mod)\n\nwith open('input.txt', 'r') as stdin, open('output.txt', 'w') as stdout:\n    stdout.write(solution(stdin))"
    },
    {
        "number": 4151,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = [int(x) for x in stdin.split('\\n')[1].split()]\n    a.sort()\n    count = 1\n    for i in range(n-1):\n        if a[i] == a[i+1]:\n            count += 1\n        else:\n            count *= 2\n            count %= 998244353\n    return str(count)"
    },
    {
        "number": 4151,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    # Initialize the monotonic renumeration array\n    b = [0] * n\n    b[0] = 0\n\n    # Helper function to check if the monotonicity condition is met\n    def is_monotonic(a: List[int], b: List[int]) -> bool:\n        for i in range(1, n - 1):\n            if a[i] == a[i + 1]:\n                if b[i] != b[i + 1]:\n                    return False\n            else:\n                if b[i] + 1 != b[i + 1]:\n                    return False\n        return True\n\n    # Helper function to calculate the next monotonic renumeration\n    def next_monotonic(a: List[int], b: List[int]) -> List[int]:\n        b[0] = 0\n        for i in range(1, n):\n            if a[i] == a[i - 1]:\n                b[i] = b[i - 1]\n            else:\n                b[i] = b[i - 1] + 1\n        return b\n\n    # Count the number of monotonic renumerations\n    count = 1\n    while True:\n        if is_monotonic(a, b):\n            count += 1\n        else:\n            break\n        b = next_monotonic(a, b)\n\n    # Return the result modulo 998244353\n    return str(count % 998244353)"
    },
    {
        "number": 4151,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    b = [0] * n\n    b[0] = 0\n    count = 1\n    prev = a[0]\n    \n    for i in range(1, n):\n        if a[i] == prev:\n            b[i] = b[i-1]\n        else:\n            count += 1\n            b[i] = b[i-1] + 1\n        prev = a[i]\n    \n    return str(count % 998244353)"
    },
    {
        "number": 4151,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_monotonic_renumeration(b: List[int]) -> bool:\n        return b[0] == 0 and all(b[i] == b[i + 1] or b[i] + 1 == b[i + 1] for i in range(len(b) - 1))\n\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    b_sets = set()\n    for perm in itertools.permutations(a):\n        b = [0] * n\n        b[0] = 0\n        for i in range(1, n):\n            if perm[i] == perm[i - 1]:\n                b[i] = b[i - 1]\n            else:\n                b[i] = b[i - 1] + 1\n        if is_monotonic_renumeration(b):\n            b_sets.add(tuple(b))\n\n    return str(len(b_sets) % 998244353)"
    },
    {
        "number": 4151,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = [int(x) for x in stdin.splitlines()[1].split()]\n    b = [0] * n\n    count = 0\n    i = 0\n    j = 0\n    while i < n:\n        while i < n and a[i] == a[j]:\n            b[i] = b[j]\n            i += 1\n        if i == n:\n            break\n        b[i] = b[j] + 1\n        j = i\n        i += 1\n        while i < n and b[i] == b[i - 1] + 1:\n            i += 1\n    count += 1\n    b = [0] * n\n    i = 0\n    j = 0\n    while i < n:\n        while i < n and a[i] == a[j]:\n            b[i] = b[j]\n            i += 1\n        if i == n:\n            break\n        b[i] = b[j]\n        j = i\n        i += 1\n        while i < n and b[i] == b[i - 1]:\n            i += 1\n    if b != [0] * n:\n        count += 1\n    return str(count % 998244353)"
    },
    {
        "number": 4152,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_power_of_two(num):\n        return num & (num - 1) == 0\n\n    def is_good(a, b):\n        if a > b:\n            a, b = b, a\n        return is_power_of_two(a + b)\n\n    def is_good_sequence(sequence):\n        for i in range(len(sequence)):\n            for j in range(i + 1, len(sequence)):\n                if is_good(sequence[i], sequence[j]):\n                    break\n            else:\n                return False\n        return True\n\n    n = int(stdin.readline().strip())\n    sequence = list(map(int, stdin.readline().strip().split()))\n\n    if n == 0:\n        return \"0\"\n\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            if is_good(sequence[i], sequence[j]):\n                break\n        else:\n            continue\n        break\n    else:\n        if is_good_sequence(sequence):\n            return \"0\"\n        return str(n)\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if sequence[i] + sequence[j] == 0:\n                continue\n            if is_good(sequence[i], sequence[j]):\n                break\n        else:\n            continue\n        break\n    else:\n        return str(n - 1)\n\n    for i in range(n):\n        if is_good_sequence(sequence[:i] + sequence[i + 1:]):\n            return str(n - 1)\n\n    return \"0\""
    },
    {
        "number": 4152,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    def is_power_of_two(num: int) -> bool:\n        return num != 0 and (num & (num - 1)) == 0\n\n    def find_power_of_two(num: int) -> int:\n        for d in range(31):\n            if is_power_of_two(1 << d):\n                if (1 << d) == num:\n                    return d\n            else:\n                break\n        return -1\n\n    def is_good(sequence: List[int]) -> bool:\n        n = len(sequence)\n        for i in range(n):\n            found = False\n            for j in range(n):\n                if i != j:\n                    if is_power_of_two(sequence[i] + sequence[j]):\n                        found = True\n                        break\n            if not found:\n                return False\n        return True\n\n    def remove_elements(sequence: List[int]) -> int:\n        removed = 0\n        while not is_good(sequence):\n            removed += 1\n            sequence.pop(sequence.index(max(sequence)))\n        return removed\n\n    removed = remove_elements(a)\n\n    return str(removed)"
    },
    {
        "number": 4152,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    \n    def is_good(seq: list) -> bool:\n        for i in range(len(seq)):\n            for j in range(len(seq)):\n                if i != j and 2**x == seq[i] + seq[j]:\n                    return True\n        return False\n    \n    for i in range(len(a)):\n        for j in range(len(a)):\n            if i != j and 2**x == a[i] + a[j]:\n                a[i] = 0\n                a[j] = 0\n    \n    return str(len(a) - len(list(filter(lambda x: x != 0, a)))))"
    },
    {
        "number": 4152,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    sequence = list(map(int, stdin.splitlines()[1].split()))\n    \n    def is_good(sequence: List[int]) -> bool:\n        if len(sequence) == 0:\n            return True\n        for i in range(len(sequence)):\n            found = False\n            for j in range(len(sequence)):\n                if i == j:\n                    continue\n                if 2**k == sequence[i] + sequence[j] for k in range(32):\n                    found = True\n                    break\n            if not found:\n                return False\n        return True\n    \n    def min_remove(sequence: List[int]) -> int:\n        if is_good(sequence):\n            return 0\n        for i in range(len(sequence)):\n            new_sequence = sequence[:i] + sequence[i+1:]\n            if is_good(new_sequence):\n                return 1\n        return 0\n    \n    return str(min_remove(sequence))\n"
    },
    {
        "number": 4152,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    min_to_delete = n\n    for i in range(n):\n        for j in range(n):\n            if i != j and (2**x == a[i]+a[j] for x in range(30)):\n                min_to_delete = min(min_to_delete, n-2)\n                break\n    return str(min_to_delete)"
    },
    {
        "number": 4152,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    sequence = list(map(int, stdin.readline().split()))\n\n    def is_power_of_two(x: int) -> bool:\n        return (x & (x - 1)) == 0\n\n    def find_power_of_two_pair(sequence: list) -> tuple:\n        for i in range(len(sequence)):\n            for j in range(i+1, len(sequence)):\n                if is_power_of_two(sequence[i] + sequence[j]):\n                    return (i, j)\n        return (-1, -1)\n\n    def delete_one_element(sequence: list) -> list:\n        i, j = find_power_of_two_pair(sequence)\n        if i == -1:\n            return sequence\n        sequence.pop(i)\n        return delete_one_element(sequence)\n\n    while n > 0:\n        sequence = delete_one_element(sequence)\n        n -= 1\n\n    return str(len(sequence))"
    },
    {
        "number": 4152,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    sequence = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    def is_power_of_two(number: int) -> bool:\n        return bin(number)[2:].count('1') == 1\n\n    def good_sequence(sequence: List[int], index: int) -> bool:\n        if index == 0:\n            return True\n        for i in range(index):\n            if is_power_of_two(sequence[i] + sequence[index]):\n                return True\n        return False\n\n    def good_sequences(sequence: List[int], start: int) -> int:\n        if start == len(sequence):\n            return 0\n        if good_sequence(sequence, start):\n            return good_sequences(sequence, start + 1)\n        else:\n            return 1 + good_sequences(sequence, start + 1)\n\n    return str(good_sequences(sequence, 0))"
    },
    {
        "number": 4152,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    powers_of_two = [2**i for i in range(32)]\n    \n    def is_good(seq):\n        for i in range(len(seq)):\n            for j in range(len(seq)):\n                if i != j and (seq[i] + seq[j]) in powers_of_two:\n                    return True\n        return False\n    \n    if is_good(a):\n        return '0'\n    \n    for i in range(len(a)):\n        a_copy = a.copy()\n        a_copy.pop(i)\n        if is_good(a_copy):\n            return '1'\n    \n    return str(len(a))"
    },
    {
        "number": 4152,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    sequence = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    def is_good(sequence: List[int]) -> bool:\n        if not sequence:\n            return True\n        for i in range(len(sequence)):\n            found = False\n            for j in range(len(sequence)):\n                if i != j and (sequence[i] + sequence[j]) & (sequence[i] + sequence[j] - 1) == 0:\n                    found = True\n                    break\n            if not found:\n                return False\n        return True\n\n    def good_elements_count(sequence: List[int]) -> int:\n        count = 0\n        for element in sequence:\n            if not any((element + other) & (element + other - 1) == 0 for other in sequence):\n                count += 1\n        return count\n\n    good_count = good_elements_count(sequence)\n    if good_count == 0:\n        return str(n)\n    return str(good_count)"
    },
    {
        "number": 4152,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    good_count = 0\n\n    for i in range(n):\n        found = False\n        for j in range(n):\n            if i != j:\n                if (a[i] + a[j]) in powers_of_two:\n                    found = True\n                    break\n        if not found:\n            good_count += 1\n\n    return str(good_count)\n\npowers_of_two = [2**i for i in range(30)]"
    },
    {
        "number": 4153,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stack = []\n    for cube in stdin:\n        if cube == \"0\":\n            stack.append(\"red\")\n        else:\n            stack.append(\"blue\")\n\n    count = 0\n    while len(stack) > 1:\n        if stack[-1] == \"red\" and stack[-2] == \"blue\":\n            stack.pop()\n            stack.pop()\n            count += 2\n        else:\n            stack.pop()\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4153,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = len(stdin)\n    red_count = 0\n    blue_count = 0\n    max_count = 0\n\n    for cube in stdin:\n        if cube == \"0\":\n            red_count += 1\n        else:\n            blue_count += 1\n\n    max_count = min(red_count, blue_count)\n\n    return max_count\n\ndef"
    },
    {
        "number": 4153,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = len(stdin)\n    red_count = stdin.count('0')\n    blue_count = stdin.count('1')\n\n    if red_count <= blue_count:\n        return str(red_count)\n    else:\n        return str(blue_count)"
    },
    {
        "number": 4153,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = len(stdin)\n    red_count = 0\n    blue_count = 0\n\n    for cube in stdin:\n        if cube == \"0\":\n            red_count += 1\n        else:\n            blue_count += 1\n\n    return min(red_count, blue_count)"
    },
    {
        "number": 4153,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Convert the input string into a list of integers\n    colors = [int(color) for color in stdin]\n    \n    # Initialize the stack with the bottom cube\n    stack = [colors[0]]\n    \n    # Loop through the rest of the cubes\n    for color in colors[1:]:\n        # If the top of the stack is blue and the current cube is red,\n        # we can remove both the top cube and the current cube\n        if stack[-1] == 1 and color == 0:\n            stack.pop()\n        else:\n            # Otherwise, we can just add the current cube to the stack\n            stack.append(color)\n    \n    # Return the number of cubes removed, which is the length of the stack\n    return len(stack)"
    },
    {
        "number": 4153,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    red_count = s.count('0')\n    blue_count = s.count('1')\n    return max(red_count, blue_count)"
    },
    {
        "number": 4153,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    blue_count = s.count(\"1\")\n    red_count = len(s) - blue_count\n    \n    if red_count < blue_count:\n        return \"0\"\n    \n    return str(blue_count)"
    },
    {
        "number": 4153,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    cubes = list(stdin)\n    stack = []\n    \n    for i in range(len(cubes)):\n        if cubes[i] == '0':\n            stack.append(i)\n        else:\n            if stack and stack[-1] == i - 1:\n                stack.pop()\n            else:\n                stack.append(i)\n                \n    return len(cubes) - len(stack)"
    },
    {
        "number": 4153,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    N = len(S)\n    count = 0\n\n    for i in range(N):\n        if S[i] == '0' and (i+1) < N and S[i+1] == '1':\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4153,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = len(stdin)\n    red_cubes = []\n    blue_cubes = []\n\n    for i in range(N):\n        if stdin[i] == \"0\":\n            red_cubes.append(i)\n        else:\n            blue_cubes.append(i)\n\n    red_cubes.sort(reverse=True)\n    blue_cubes.sort()\n\n    max_cubes_removed = 0\n\n    i = 0\n    j = 0\n\n    while i < len(red_cubes) and j < len(blue_cubes):\n        if red_cubes[i] == blue_cubes[j] - 1:\n            max_cubes_removed += 1\n            i += 1\n            j += 1\n        elif red_cubes[i] > blue_cubes[j] - 1:\n            j += 1\n        else:\n            i += 1\n\n    return max_cubes_removed\n"
    },
    {
        "number": 4154,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N, M = map(int, lines[0].split())\n    gates = []\n    for i in range(1, M+1):\n        gates.append(list(map(int, lines[i].split())))\n\n    id_cards = [False] * (N+1)\n    for gate in gates:\n        for card in range(gate[0], gate[1]+1):\n            id_cards[card] = True\n\n    count = 0\n    for i in range(1, N+1):\n        if id_cards[i]:\n            count += 1\n\n    return str(count)\n\ninput_str = \"4 2\\n1 3\\n2 4\"\nprint(solution(input_str))  # Output: 2 "
    },
    {
        "number": 4154,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.readline().split())\n    gates = []\n\n    for _ in range(M):\n        gates.append(list(map(int, stdin.readline().split())))\n\n    id_cards = [False] * N\n\n    for gate in gates:\n        for i in range(gate[0], gate[1] + 1):\n            id_cards[i - 1] = True\n\n    return str(id_cards.count(True))"
    },
    {
        "number": 4154,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, input().split())\n    gates = []\n    for _ in range(M):\n        gates.append(tuple(map(int, input().split())))\n    \n    count = 0\n    for i in range(1, N+1):\n        if all(i >= L_i-1 and i <= R_i-1 for L_i, R_i in gates):\n            count += 1\n    \n    return str(count)"
    },
    {
        "number": 4154,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N, M = map(int, lines[0].split())\n    gates = []\n\n    for i in range(1, M + 1):\n        L, R = map(int, lines[i].split())\n        gates.append((L, R))\n\n    id_cards = set()\n    for L, R in gates:\n        for i in range(L, R + 1):\n            id_cards.add(i)\n\n    return str(len(id_cards))"
    },
    {
        "number": 4154,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    lines = stdin.split('\\n')\n    N, M = map(int, lines[0].split())\n    gates = []\n    \n    for i in range(1, M + 1):\n        L, R = map(int, lines[i].split())\n        gates.append((L, R))\n    \n    # Initialize a list to store the number of ID cards that allow us to pass all the gates alone\n    count = [0] * (N + 1)\n    \n    # Iterate through each gate and update the count list accordingly\n    for i in range(M):\n        L, R = gates[i]\n        for j in range(L, R + 1):\n            count[j] += 1\n    \n    # Count the number of ID cards that allow us to pass all the gates alone\n    for i in range(1, N + 1):\n        if count[i] == M:\n            count[0] += 1\n    \n    return str(count[0])"
    },
    {
        "number": 4154,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N, M = map(int, lines[0].split())\n    gates = [list(map(int, lines[i].split())) for i in range(1, M+1)]\n    id_cards = [False] * N\n    \n    for i in range(M):\n        for j in range(gates[i][0], gates[i][1]+1):\n            id_cards[j-1] = True\n    \n    count = 0\n    for i in range(N):\n        if all(id_cards[:i] + id_cards[i+1:]):\n            count += 1\n    \n    return str(count)"
    },
    {
        "number": 4154,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.split(\"\\n\")\n    N, M = map(int, lines[0].split())\n    gates = []\n    for line in lines[1:-1]:\n        L, R = map(int, line.split())\n        gates.append((L, R))\n\n    # Initialize the number of ID cards for each gate\n    card_counts = [0] * N\n\n    # Count the number of ID cards for each gate\n    for L, R in gates:\n        card_counts[L-1] += 1\n        card_counts[R-1] += 1\n\n    # Count the number of cards that can pass all gates\n    num_cards = 0\n    for count in card_counts:\n        if count >= M:\n            num_cards += 1\n\n    return str(num_cards)"
    },
    {
        "number": 4154,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N, M = map(int, lines[0].split(\" \"))\n    gates = []\n    for i in range(1, M + 1):\n        L, R = map(int, lines[i].split(\" \"))\n        gates.append((L, R))\n    \n    count = 0\n    for i in range(1, N + 1):\n        can_pass = True\n        for gate in gates:\n            if i < gate[0] or i > gate[1]:\n                can_pass = False\n                break\n        if can_pass:\n            count += 1\n    \n    return str(count)"
    },
    {
        "number": 4154,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split(\"\\n\")\n    N, M = map(int, input_lines[0].split())\n    gates = [list(map(int, input_lines[i+1].split())) for i in range(M)]\n\n    id_cards = [False] * N\n\n    for i in range(M):\n        for j in range(gates[i][0], gates[i][1] + 1):\n            id_cards[j-1] = True\n\n    count = id_cards.count(True)\n\n    return str(count)"
    },
    {
        "number": 4154,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, m = map(int, lines[0].split())\n    gates = []\n    \n    for i in range(1, m + 1):\n        l, r = map(int, lines[i].split())\n        gates.append((l, r))\n    \n    def can_pass_gate(card_number: int, gate_range: tuple) -> bool:\n        return card_number >= gate_range[0] and card_number <= gate_range[1]\n    \n    def can_pass_all_gates(card_number: int) -> bool:\n        for gate_range in gates:\n            if not can_pass_gate(card_number, gate_range):\n                return False\n        return True\n    \n    valid_card_numbers = [i for i in range(1, n + 1) if can_pass_all_gates(i)]\n    return len(valid_card_numbers)"
    },
    {
        "number": 4155,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h_str = stdin.strip().split('\\n')\n    n = int(n)\n    h = list(map(int, h_str.strip().split()))\n    min_ops = 0\n    prev_h = 0\n    for i in range(n):\n        if h[i] > prev_h:\n            min_ops += h[i] - prev_h\n            prev_h = h[i]\n    return str(min_ops)"
    },
    {
        "number": 4155,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    h = list(map(int, lines[1].split()))\n\n    operations = 0\n    for i in range(N):\n        left, right = i, i\n        while left >= 0 and h[left] == h[i]:\n            left -= 1\n        while right < N and h[right] == h[i]:\n            right += 1\n        operations += (right - left - 1) // 2\n\n    return str(operations)"
    },
    {
        "number": 4155,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    heights = list(map(int, lines[1].split(' ')))\n\n    # Initialize variables\n    operations = 0\n    prev_left = 0\n\n    # Iterate through heights\n    for i, height in enumerate(heights):\n        # Check if we need to start a new operation\n        if height != 0 and prev_left != i:\n            operations += 1\n            prev_left = i\n\n    # Perform last operation if needed\n    if prev_left != N - 1:\n        operations += 1\n\n    # Return result\n    return str(operations)"
    },
    {
        "number": 4155,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # read input from stdin\n    N, heights = stdin.split()\n    N = int(N)\n    heights = list(map(int, heights.split()))\n\n    # sort the flowers by height in ascending order\n    sorted_flowers = sorted(enumerate(heights), key=lambda x: x[1])\n\n    # initialize variables\n    operations = 0\n    current_height = 0\n\n    for index, height in sorted_flowers:\n        # if the current height is less than the required height,\n        # increase the current height and perform a watering operation\n        if current_height < height:\n            operations += 1\n            current_height = height\n\n    # return the minimum number of watering operations required\n    return str(operations)"
    },
    {
        "number": 4155,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    h = [int(x) for x in lines[1].split()]\n\n    def water(l, r):\n        for i in range(l, r + 1):\n            h[i - 1] += 1\n\n    water_count = 0\n    i = 1\n    while i <= N:\n        j = i\n        while j <= N and h[j - 1] == 0:\n            j += 1\n        if j > i:\n            water(i, j - 1)\n            water_count += 1\n        i = j\n\n    return str(water_count)"
    },
    {
        "number": 4155,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, h = stdin.split()\n    N = int(N)\n    h = list(map(int, h.split()))\n    \n    count = 0\n    for i in range(1, N+1):\n        if h[i-1] > 0:\n            continue\n        l, r = i, i\n        while r <= N and h[r-1] == 0:\n            r += 1\n        if r > N:\n            continue\n        count += 1\n        for j in range(l, r):\n            h[j-1] += 1\n            \n    return str(count)"
    },
    {
        "number": 4155,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    heights = list(map(int, lines[1].split()))\n    assert len(heights) == N\n\n    # Initialize variables\n    min_watering_operations = 0\n    watered_flowers = set()\n\n    # Iterate through the heights and perform the watering operation\n    for i, h in enumerate(heights):\n        # Check if flower has already been watered\n        if i in watered_flowers:\n            continue\n\n        # Perform the watering operation\n        min_watering_operations += 1\n        watered_flowers.update(range(i, i + h))\n\n    return str(min_watering_operations)"
    },
    {
        "number": 4155,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, h = stdin.split(\"\\n\")\n    N = int(N)\n    h = [int(x) for x in h.split()]\n\n    def count_operations(l, r):\n        return sum(1 for i in range(l, r + 1) if h[i - 1] < N)\n\n    operations = [(x, x + 1) for x in range(1, N + 1)]\n    operations.sort(key=lambda x: count_operations(*x))\n\n    result = 0\n    for l, r in operations:\n        current_count = count_operations(l, r)\n        if current_count == 0:\n            break\n        result += current_count\n\n    return str(result)"
    },
    {
        "number": 4155,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    h = list(map(int, lines[1].split()))\n\n    h_count = [0] * (n + 1)\n\n    for i in range(n):\n        h_count[h[i]] += 1\n\n    count = 0\n    for i in range(n + 1):\n        if h_count[i] > 1:\n            count += h_count[i] - 1\n\n    return str(count)"
    },
    {
        "number": 4155,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Get the input\n    N, h = map(int, stdin.strip().split())\n    \n    # Sort the heights and calculate the number of watering operations\n    h.sort()\n    operations = 0\n    for i in range(1, N + 1):\n        if h[i - 1] != i:\n            operations += 1\n    \n    return str(operations)"
    },
    {
        "number": 4156,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, w = list(map(int, stdin.split()[:2]))\n    a = list(map(int, stdin.split()[2:]))\n    \n    count = 0\n    for i in range(n):\n        count += abs(a[i])\n        if count > w:\n            return 0\n    \n    return min(count, w)\n\ndef"
    },
    {
        "number": 4156,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    def dfs(start, end, current_passengers, memo):\n        if (start, end, current_passengers) in memo:\n            return memo[(start, end, current_passengers)]\n\n        if current_passengers > w:\n            return 0\n\n        if end == n:\n            return 1\n\n        result = 0\n        for i in range(start, end + 1):\n            if i > 0 and a[i] - a[i - 1] > w:\n                continue\n            result += dfs(i + 1, end, current_passengers + a[i], memo)\n\n        memo[(start, end, current_passengers)] = result\n        return result\n\n    return str(dfs(0, 0, 0, {}))\n\ninput_str = input()\noutput_str = solution(input_str)\nprint(output_str) "
    },
    {
        "number": 4156,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    def possible_ways(n: int, w: int, a: List[int]) -> int:\n        if n == 0:\n            return 1 if w >= 0 else 0\n\n        ways = 0\n        for x in range(min(w, -a[n - 1]) + 1):\n            ways += possible_ways(n - 1, w - x, a)\n\n        return ways\n\n    return str(possible_ways(n, w, a))"
    },
    {
        "number": 4156,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    # Calculate the sum of changes in the number of passengers\n    s = sum(a)\n\n    # Check if there is a contradiction\n    if s > w or s < -w:\n        return \"0\"\n\n    # Initialize the number of possible combinations\n    combinations = 0\n\n    # Calculate the number of possible combinations for each initial number of passengers\n    for i in range(-w, w + 1):\n        if i + s >= 0 and i + s <= w:\n            combinations += 1\n\n    return str(combinations)"
    },
    {
        "number": 4156,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split()[0:2])\n    bus_stops = list(map(int, stdin.split()[2:]))\n    \n    def is_valid(x: int) -> bool:\n        passengers = x\n        for a in bus_stops:\n            passengers += a\n            if passengers > w:\n                return False\n        return True\n    \n    count = 0\n    for x in range(w+1):\n        if is_valid(x):\n            count += 1\n    \n    return str(count)"
    },
    {
        "number": 4156,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    def helper(index: int, passengers: int) -> int:\n        if index == n:\n            return passengers\n        change = a[index]\n        if passengers + change > w:\n            return 0\n        if passengers + change < 0:\n            return 0\n        return helper(index + 1, passengers + change) + helper(index + 1, passengers)\n\n    count = helper(0, 0)\n\n    return str(count)\n\n\ninput_data = input()\nprint(solution(input_data)) "
    },
    {
        "number": 4156,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    def valid_combination(capacity: int) -> int:\n        count = 0\n        passengers = 0\n\n        for i in range(n):\n            passengers += a[i]\n            if passengers > capacity:\n                break\n            count += 1\n\n        return count\n\n    valid_count = 0\n\n    for i in range(w + 1):\n        valid_count += valid_combination(i)\n\n    return str(valid_count)"
    },
    {
        "number": 4156,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    # check if there is a contradiction\n    for i in range(n):\n        if a[i] > w:\n            return \"0\"\n\n    # calculate possible initial numbers of passengers\n    possible_passengers = set()\n    for i in range(n):\n        if i == 0:\n            possible_passengers.add(0)\n        else:\n            prev_diff = a[i-1]\n            for passenger in possible_passengers.copy():\n                new_passenger = passenger + prev_diff\n                if new_passenger <= w:\n                    possible_passengers.add(new_passenger)\n                else:\n                    possible_passengers.remove(passenger)\n\n    return str(len(possible_passengers))"
    },
    {
        "number": 4156,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.readline().strip().split())\n    bus_stops = list(map(int, stdin.readline().strip().split()))\n    \n    result = 0\n    for i in range(w+1):\n        people_count = i\n        for j in range(n):\n            people_count -= bus_stops[j]\n            if people_count < 0:\n                break\n        else:\n            result += 1\n    \n    return str(result)"
    },
    {
        "number": 4156,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    \n    # Initially there can be 0 or more passengers\n    # If there are more than w passengers, there will be a contradiction\n    count = 0\n    for i in range(w + 1):\n        if i - a[0] >= 0:\n            count += 1\n        if i + a[0] <= w:\n            count += 1\n    \n    return str(count)"
    },
    {
        "number": 4157,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    sequence = list(map(int, stdin.split('\\n')[1].split()))\n    answer = []\n    x = sequence[0]\n    answer.append(x)\n    for i in range(1, n):\n        if sequence[i] == x * 2:\n            answer.append(x * 2)\n            x = x * 2\n        else:\n            answer.append(x // 3)\n            x = x // 3\n    return \" \".join(str(x) for x in answer)\n"
    },
    {
        "number": 4157,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    sequence = list(map(int, stdin.split()[1:]))\n    result = [0] * n\n    result[0] = sequence[0]\n\n    for i in range(1, n):\n        if sequence[i] == 3 * result[i - 1]:\n            result[i] = sequence[i]\n        else:\n            result[i] = 3 * result[i - 1]\n\n    return \" \".join(map(str, result))\n\n\ndef"
    },
    {
        "number": 4157,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    seq = list(map(int, stdin.split('\\n')[1].split()))\n    \n    def is_valid(x: int, seq: List[int]) -> bool:\n        if len(seq) == 1:\n            return True\n        if seq[0] == x * 3:\n            return is_valid(x * 3, seq[1:])\n        if seq[0] == x * 2:\n            return is_valid(x * 2, seq[1:])\n        return False\n    \n    for i in range(n):\n        if is_valid(seq[i], seq[i+1:]):\n            return \" \".join(map(str, seq[:i+1][::-1]))\n    return \"No solution exists.\" "
    },
    {
        "number": 4157,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    numbers = [int(x) for x in stdin.splitlines()[1].split()]\n    \n    def is_valid(arr):\n        if len(arr) != n:\n            return False\n        for i in range(1, n):\n            if arr[i] != arr[i - 1] * 2 and arr[i] != arr[i - 1] // 3:\n                return False\n        return True\n\n    def next_move(numbers):\n        moves = []\n        for i in range(1, n):\n            if numbers[i] == numbers[i - 1] * 2:\n                moves.append((i, \"double\"))\n            elif numbers[i] == numbers[i - 1] // 3:\n                moves.append((i, \"third\"))\n        return moves\n\n    def find_solution(numbers, k):\n        if k == n:\n            if is_valid(numbers):\n                return numbers\n            return None\n        moves = next_move(numbers)\n        for move in moves:\n            new_numbers = numbers.copy()\n            if move[1] == \"double\":\n                new_numbers[move[0]] = new_numbers[move[0] - 1] * 2\n            else:\n                new_numbers[move[0]] = new_numbers[move[0] - 1] // 3\n            result = find_solution(new_numbers, k + 1)\n            if result is not None:\n                return result\n        return None\n\n    solution = find_solution(numbers, 0)\n    if solution is None:\n        return \"No solution exists\"\n    return \" \".join(str(x) for x in solution)\n\ninput_str = \"6\\n4 8 6 3 12 9\\n\"\nprint(solution(input_str))\n\ninput_str = \"4\\n42 28 84 126\\n\"\nprint(solution(input_str))\n\ninput_str = \"2\\n1000000000000000000 3000000000000000000\\n\"\nprint(solution(input_str)) "
    },
    {
        "number": 4157,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    sequence = list(map(int, input().split()))\n    \n    result = []\n    for i in range(n):\n        if i == 0:\n            result.append(sequence[0])\n            continue\n        \n        if sequence[i] == sequence[i-1] * 2 or sequence[i] == sequence[i-1] // 3:\n            result.append(sequence[i])\n        else:\n            result.append(sequence[i])\n            result.append(sequence[i-1])\n            \n    return \" \".join(map(str, result))"
    },
    {
        "number": 4157,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    given_sequence = list(map(int, stdin.split()[1:]))\n    \n    def is_valid_sequence(sequence: List[int]) -> bool:\n        if len(sequence) != n:\n            return False\n        for i in range(n - 1):\n            if sequence[i + 1] not in (sequence[i] * 2, sequence[i] // 3):\n                return False\n        return True\n    \n    def find_next_number(sequence: List[int]) -> int:\n        for num in sequence:\n            if num not in (sequence[-1] * 2, sequence[-1] // 3):\n                return num\n    \n    def reorder(sequence: List[int]) -> List[int]:\n        result = [sequence[0]]\n        for _ in range(n - 1):\n            next_number = find_next_number(sequence)\n            sequence.remove(next_number)\n            result.append(next_number)\n        return result\n    \n    if is_valid_sequence(given_sequence):\n        return \" \".join(map(str, given_sequence))\n    else:\n        return \" \".join(map(str, reorder(given_sequence)))"
    },
    {
        "number": 4157,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    sequence = list(map(int, stdin.split()[1:]))\n    \n    # create a dictionary to store the sequence in the order of operations\n    result_dict = {}\n    \n    # initialize the first number\n    x = sequence[0]\n    result_dict[x] = 0\n    \n    # loop through the sequence and perform the operations\n    for num in sequence[1:]:\n        if num // 3 == x:\n            # multiply the number by 2\n            x = num * 2\n            result_dict[x] = result_dict[num] + 1\n        elif num == x * 2:\n            # divide the number by 3\n            x = num // 3\n            result_dict[x] = result_dict[num] + 1\n    \n    # create the rearranged sequence\n    rearranged_sequence = [0] * n\n    for num in sorted(result_dict):\n        index = result_dict[num]\n        rearranged_sequence[index] = num\n    \n    return \" \".join(str(x) for x in rearranged_sequence)"
    },
    {
        "number": 4157,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    sequence = list(map(int, stdin.split()[1:]))\n    result = []\n    x = sequence[0]\n    \n    for i in range(n):\n        if sequence[i] % 2 == 0:\n            x = sequence[i]\n            result.append(x)\n        else:\n            x = sequence[i] * 2\n            result.append(x)\n            \n    return \" \".join(str(x) for x in result)"
    },
    {
        "number": 4157,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    numbers = list(map(int, input().split()))\n    output = []\n    \n    # Helper function to check if a number can be obtained from the previous one by dividing by 3 or multiplying by 2\n    def can_be_obtained(num1, num2):\n        return num2 == num1 * 2 or num2 == num1 // 3\n    \n    # Starting with the last number, check if it can be obtained from the previous one\n    for i in range(n-1, -1, -1):\n        if can_be_obtained(numbers[i+1], numbers[i]):\n            output.append(numbers[i])\n            if len(output) == n:\n                break\n    \n    return \" \".join(map(str, output))"
    },
    {
        "number": 4157,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, sequence = map(int, stdin.split())\n\n    # Create the original sequence\n    original_sequence = [sequence]\n    for i in range(n - 1):\n        if original_sequence[i] % 3 == 0:\n            original_sequence.append(original_sequence[i] * 2)\n        else:\n            original_sequence.append(original_sequence[i] // 3)\n\n    # Sort the original sequence to match the given sequence\n    original_sequence.sort()\n\n    # Find the index of the first element in the original sequence\n    first_index = original_sequence.index(sequence)\n\n    # Rearrange the sequence to match the original sequence\n    reordered_sequence = [original_sequence[(first_index + i) % n] for i in range(n)]\n\n    return \" \".join(map(str, reordered_sequence))\n"
    },
    {
        "number": 4158,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    x = list(map(int, stdin.readline().split()))\n    \n    def is_valid(x: list) -> bool:\n        for i in range(len(x)):\n            for j in range(i+1, len(x)):\n                if 2 ** bin(x[i] ^ x[j]).count('1') not in [2**i for i in range(len(bin(max(x))))]:\n                    return False\n        return True\n    \n    result = max([x[i:] for i in range(n) if is_valid(x[i:])], key=len)\n    return str(len(result)) + '\\n' + ' '.join(map(str, result))"
    },
    {
        "number": 4158,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    points = list(map(int, stdin.readline().split()))\n    \n    max_subset_size = 0\n    max_subset = []\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                distance1 = abs(points[i] - points[j])\n                distance2 = abs(points[j] - points[k])\n                distance3 = abs(points[i] - points[k])\n                \n                if distance1 == distance2 and distance1 == distance3:\n                    subset_size = 3\n                    subset = [points[i], points[j], points[k]]\n                    \n                    for l in range(n):\n                        if l not in subset:\n                            distance4 = abs(points[i] - points[l])\n                            distance5 = abs(points[j] - points[l])\n                            distance6 = abs(points[k] - points[l])\n                            \n                            if distance4 == distance5 and distance4 == distance6:\n                                subset_size += 1\n                                subset.append(points[l])\n                                \n                    if subset_size > max_subset_size:\n                        max_subset_size = subset_size\n                        max_subset = subset\n                        \n    return str(max_subset_size) + \"\\n\" + \" \".join(map(str, max_subset))\n\ndef"
    },
    {
        "number": 4158,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, points = stdin.splitlines()\n    n = int(n)\n    points = [int(x) for x in points.split()]\n    \n    points.sort()\n    max_size = 0\n    subset = []\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            distance = points[j] - points[i]\n            power_of_two = 0\n            while distance > 0:\n                if distance % 2 == 1:\n                    break\n                power_of_two += 1\n                distance //= 2\n            if distance == 0:\n                if j - i > max_size:\n                    max_size = j - i\n                    subset = points[i:j+1]\n                    \n    return str(max_size) + \"\\n\" + \" \".join(map(str, subset))\n\ndef"
    },
    {
        "number": 4158,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    points = list(map(int, stdin.split()[1:]))\n\n    points.sort()\n    max_m = 0\n    for i in range(n):\n        temp_m = 1\n        j = 1\n        while j < n:\n            if points[i] + 2 ** j <= points[j]:\n                temp_m += 1\n            j += 1\n        max_m = max(max_m, temp_m)\n\n    result = []\n    for i in range(n):\n        temp_m = 1\n        j = 1\n        while j < n:\n            if points[i] + 2 ** j <= points[j]:\n                temp_m += 1\n                if temp_m == max_m:\n                    result.append(points[i])\n                    break\n            j += 1\n\n    return str(max_m) + \"\\n\" + \" \".join(map(str, result))"
    },
    {
        "number": 4158,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def is_power_of_two(d: int) -> bool:\n        return d != 0 and (d & (d - 1)) == 0\n\n    def get_max_subset(points: list) -> list:\n        n = len(points)\n        dp = [[False for _ in range(n)] for _ in range(n)]\n\n        for i in range(n):\n            dp[i][i] = True\n\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                for k in range(i + 1, j):\n                    if is_power_of_two(points[j] - points[i]) and is_power_of_two(points[k] - points[j]):\n                        dp[i][j] = dp[i][k] = True\n\n        max_size = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if dp[i][j]:\n                    max_size = max(max_size, j - i + 1)\n\n        return [points[i] for i in range(max_size)]\n\n    n, points = stdin.strip().split('\\n')\n    points = list(map(int, points.split()))\n    max_subset = get_max_subset(points)\n\n    return str(len(max_subset)) + \"\\n\" + \" \".join(map(str, max_subset))"
    },
    {
        "number": 4158,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_power_of_two(distance):\n        return distance & (distance - 1) == 0\n\n    def find_subset(points):\n        n = len(points)\n        subset = set()\n        for i in range(n):\n            for j in range(i + 1, n):\n                if is_power_of_two(abs(points[i] - points[j])):\n                    subset.add(points[i])\n                    subset.add(points[j])\n        return subset\n\n    n = int(stdin.readline().strip())\n    points = list(map(int, stdin.readline().strip().split()))\n    subset = find_subset(points)\n\n    if not subset:\n        return \"0\"\n\n    return str(len(subset)) + \"\\n\" + \" \".join(map(str, sorted(list(subset))))\n\n\ndef"
    },
    {
        "number": 4158,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, points = stdin.split('\\n')\n    n = int(n)\n    points = [int(x) for x in points.split()]\n\n    max_m = 0\n    max_points = []\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                distances = [abs(points[i] - points[j]), abs(points[j] - points[k]), abs(points[k] - points[i])]\n                if all(d == 2**x for d, x in zip(distances, range(len(distances)))):\n                    m = len(set([points[i], points[j], points[k]]))\n                    if m > max_m:\n                        max_m = m\n                        max_points = [points[i], points[j], points[k]]\n\n    return str(max_m) + '\\n' + ' '.join(map(str, max_points))\n\n\nwith open('input.txt', 'r') as file:\n    stdin = file.read()\n\nwith open('output.txt', 'w') as file:\n    file.write(solution(stdin)) "
    },
    {
        "number": 4158,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, points = stdin.split()\n    n = int(n)\n    points = list(map(int, points.split()))\n    points.sort()\n    \n    max_subset_size = 1\n    max_subset = [points[0]]\n    \n    for i in range(1, n):\n        if points[i] - points[i-1] == 2**max_subset_size:\n            max_subset_size += 1\n            max_subset.append(points[i])\n        elif points[i] - points[i-1] == 2**(max_subset_size-1):\n            max_subset_size += 1\n            max_subset = [points[i-1], points[i]]\n        else:\n            continue\n    \n    max_subset_size -= 1\n    max_subset = max_subset[:max_subset_size+1]\n    \n    result = f\"{max_subset_size}\\n\"\n    result += \" \".join(map(str, max_subset))\n    \n    return result "
    },
    {
        "number": 4158,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *coords = stdin.split()\n    n = int(n)\n    coords = list(map(int, coords))\n    coords.sort()\n    \n    result = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (coords[j] - coords[i]) == 2 * (coords[k] - coords[j]):\n                    result.append((i, j, k))\n    \n    if not result:\n        return \"0\\n\"\n    \n    result.sort(key=lambda x: len(set(x)))\n    max_length = len(set(result[-1]))\n    \n    max_coords = []\n    for i, j, k in result:\n        if len(set((i, j, k))) == max_length:\n            max_coords.append((i, j, k))\n    \n    max_coords = list(set().union(*max_coords))\n    max_coords.sort(key=lambda x: coords[x])\n    \n    return f\"{max_length}\\n{' '.join(map(str, [coords[i] for i in max_coords]))}\\n\""
    },
    {
        "number": 4158,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, points = stdin.split()\n    points = list(map(int, points.split()))\n    points.sort()\n    max_size = 0\n    max_subset = []\n\n    def is_power_of_two(distance: int) -> bool:\n        return distance > 0 and (distance & (distance - 1)) == 0\n\n    def find_max_subset(start: int, end: int) -> int:\n        nonlocal max_size, max_subset\n        if start == end:\n            return 1\n        if not is_power_of_two(points[end] - points[start]):\n            return 1\n        mid = (start + end) // 2\n        left_subset_size = find_max_subset(start, mid)\n        right_subset_size = find_max_subset(mid + 1, end)\n        left_subset = points[start:mid + 1]\n        right_subset = points[mid + 1:end + 1]\n        if left_subset_size + right_subset_size > max_size:\n            max_size = left_subset_size + right_subset_size\n            max_subset = left_subset + right_subset\n        return max(left_subset_size, right_subset_size)\n\n    find_max_subset(0, n - 1)\n    return f\"{max_size}\\n{' '.join(map(str, max_subset))}\" "
    },
    {
        "number": 4159,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n\n    takahashi_cookies = A\n    aoki_cookies = B\n\n    for _ in range(K):\n        if takahashi_cookies > 0:\n            takahashi_cookies -= 1\n        elif aoki_cookies > 0:\n            aoki_cookies -= 1\n\n    return f\"{takahashi_cookies} {aoki_cookies}\""
    },
    {
        "number": 4159,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    A_cookies = A\n    B_cookies = B\n\n    for _ in range(K):\n        if A_cookies > 0:\n            A_cookies -= 1\n        elif B_cookies > 0:\n            B_cookies -= 1\n\n    return f\"{A_cookies} {B_cookies}\""
    },
    {
        "number": 4159,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    takahashi_cookies = A\n    aoki_cookies = B\n\n    for i in range(K):\n        if takahashi_cookies >= 1:\n            takahashi_cookies -= 1\n        elif aoki_cookies >= 1:\n            aoki_cookies -= 1\n\n    return f\"{takahashi_cookies} {aoki_cookies}\""
    },
    {
        "number": 4159,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    takahashi_cookies = A\n    aoki_cookies = B\n\n    for _ in range(K):\n        if takahashi_cookies > 0:\n            takahashi_cookies -= 1\n        elif aoki_cookies > 0:\n            aoki_cookies -= 1\n\n    return f\"{takahashi_cookies} {aoki_cookies}\""
    },
    {
        "number": 4159,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    A, B, K = map(int, stdin.split())\n\n    # Perform K actions\n    for _ in range(K):\n        if A > 0:\n            A -= 1\n        elif B > 0:\n            B -= 1\n\n    # Return the final counts\n    return f\"{A} {B}\""
    },
    {
        "number": 4159,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    \n    takahashi_cookies = A\n    aoki_cookies = B\n    \n    for _ in range(K):\n        if takahashi_cookies > 0:\n            takahashi_cookies -= 1\n        elif aoki_cookies > 0:\n            aoki_cookies -= 1\n            \n    return f\"{takahashi_cookies} {aoki_cookies}\""
    },
    {
        "number": 4159,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    A -= K\n    B -= K\n    if A < 0:\n        A = 0\n    if B < 0:\n        B = 0\n    return f\"{A} {B}\"\n\ndef"
    },
    {
        "number": 4159,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n\n    takahashi_cookies, aoki_cookies = A, B\n\n    for _ in range(K):\n        if takahashi_cookies > 0:\n            takahashi_cookies -= 1\n        elif aoki_cookies > 0:\n            aoki_cookies -= 1\n\n    return f\"{takahashi_cookies} {aoki_cookies}\""
    },
    {
        "number": 4159,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    takahashi_cookies, aoki_cookies = A, B\n    \n    for _ in range(K):\n        if takahashi_cookies > 0:\n            takahashi_cookies -= 1\n        elif aoki_cookies > 0:\n            aoki_cookies -= 1\n    \n    return f\"{takahashi_cookies} {aoki_cookies}\""
    },
    {
        "number": 4159,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    takahashi_cookies = A\n    aoki_cookies = B\n\n    for _ in range(K):\n        if takahashi_cookies > 0:\n            takahashi_cookies -= 1\n        elif aoki_cookies > 0:\n            aoki_cookies -= 1\n\n    return f\"{takahashi_cookies} {aoki_cookies}\""
    },
    {
        "number": 4160,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip())\n    balance = 100\n    years = 0\n    \n    while balance < X:\n        balance += balance * 0.01\n        years += 1\n        \n    return str(years)"
    },
    {
        "number": 4160,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip())\n    balance = 100\n    years = 0\n    while balance < X:\n        balance += balance * 0.01\n        years += 1\n    return str(years)"
    },
    {
        "number": 4160,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    balance = 100\n    years = 0\n    while balance < X:\n        balance *= 1.01\n        years += 1\n    return str(years)"
    },
    {
        "number": 4160,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip())\n    balance = 100\n    years = 0\n\n    while balance < X:\n        balance = balance + 100 + (balance * 0.01)\n        years += 1\n\n    return str(years)"
    },
    {
        "number": 4160,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip())\n    balance = 100\n    years = 0\n\n    while balance < X:\n        balance = balance * 1.01\n        years += 1\n\n    return str(years)"
    },
    {
        "number": 4160,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    balance = 100\n    years = 0\n\n    while balance < x:\n        balance *= 1.01\n        years += 1\n\n    return str(years)"
    },
    {
        "number": 4160,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip())\n    balance = 100\n    years = 0\n    while balance < X:\n        balance = balance * 1.01\n        years += 1\n    return str(years)"
    },
    {
        "number": 4160,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    balance = 100\n    years = 0\n\n    while balance < X:\n        balance += balance * 0.01\n        years += 1\n\n    return str(years)"
    },
    {
        "number": 4160,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    balance = 100\n    year = 0\n    while balance < X:\n        balance = balance * 1.01\n        year += 1\n    return str(year)"
    },
    {
        "number": 4160,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    balance = 100\n    years = 0\n\n    while balance < X:\n        balance *= 1.01\n        balance = int(balance)\n        years += 1\n\n    return str(years)"
    },
    {
        "number": 4161,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    result = 0\n    for a in range(1, K+1):\n        for b in range(1, K+1):\n            for c in range(1, K+1):\n                result += math.gcd(a, b, c)\n    return str(result)\n\ninput_str = input()\noutput_str = solution(input_str)\nprint(output_str) "
    },
    {
        "number": 4161,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    total = 0\n\n    for a in range(1, k + 1):\n        for b in range(1, k + 1):\n            for c in range(1, k + 1):\n                total += math.gcd(a, math.gcd(b, c))\n\n    return str(total)\n\ndef"
    },
    {
        "number": 4161,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    result = 0\n    \n    for a in range(1, k+1):\n        for b in range(1, k+1):\n            for c in range(1, k+1):\n                result += gcd(a, b, c)\n                \n    return str(result)\n\ndef"
    },
    {
        "number": 4161,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.strip())\n    total = 0\n    \n    for a in range(1, K+1):\n        for b in range(1, K+1):\n            for c in range(1, K+1):\n                total += math.gcd(a, math.gcd(b, c))\n                \n    return str(total)"
    },
    {
        "number": 4161,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    result = 0\n    \n    for a in range(1, K+1):\n        for b in range(1, K+1):\n            for c in range(1, K+1):\n                result += math.gcd(a, b, c)\n    \n    return str(result)"
    },
    {
        "number": 4161,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.strip())\n    result = 0\n\n    for a in range(1, K + 1):\n        for b in range(1, K + 1):\n            for c in range(1, K + 1):\n                result += gcd(a, b, c)\n\n    return str(result)\n\ndef"
    },
    {
        "number": 4161,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.strip())\n    ans = 0\n    for a in range(1, K+1):\n        for b in range(1, K+1):\n            for c in range(1, K+1):\n                ans += gcd(a, b, c)\n    return str(ans)\n\ndef"
    },
    {
        "number": 4161,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.strip())\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = 0\n    for a in range(1, K + 1):\n        for b in range(1, K + 1):\n            for c in range(1, K + 1):\n                result += gcd(a, b) * gcd(b, c) * gcd(c, a)\n    return str(result)\n\nK = int(input().strip())\nprint(solution(str(K))) "
    },
    {
        "number": 4161,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.strip())\n    total = 0\n    \n    for a in range(1, K+1):\n        for b in range(1, K+1):\n            for c in range(1, K+1):\n                total += math.gcd(a, math.gcd(b, c))\n                \n    return str(total)"
    },
    {
        "number": 4161,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.strip())\n    total_gcd = 0\n    \n    for a in range(1, K + 1):\n        for b in range(1, K + 1):\n            for c in range(1, K + 1):\n                total_gcd += math.gcd(a, b, c)\n    \n    return str(total_gcd)"
    },
    {
        "number": 4162,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *a = map(int, stdin.split())\n    f = lambda m: sum(m % ai for ai in a)\n\n    max_f = -1\n    for i in range(1, 10**6):\n        if f(i) > max_f:\n            max_f = f(i)\n\n    return str(max_f)"
    },
    {
        "number": 4162,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *arr = map(int, stdin.split())\n    max_f = -1\n\n    for m in range(1, 1000001):\n        f_value = sum([m % a for a in arr])\n        if f_value > max_f:\n            max_f = f_value\n\n    return str(max_f)"
    },
    {
        "number": 4162,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Get the input\n    n, numbers = stdin.split()\n    n = int(n)\n    numbers = list(map(int, numbers.split()))\n\n    # Define the function f\n    def f(m: int) -> int:\n        result = 0\n        for num in numbers:\n            result += m % num\n        return result\n\n    # Find the maximum value of f\n    max_f = -1\n    for i in range(1, 10000):\n        max_f = max(max_f, f(i))\n\n    # Return the result\n    return str(max_f)"
    },
    {
        "number": 4162,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    N = int(input_list[0])\n    a_list = list(map(int, input_list[1].split()))\n\n    def f(m: int) -> int:\n        return sum([m % a for a in a_list])\n\n    max_f = -1\n    for i in range(2, 1000000):\n        current_f = f(i)\n        if current_f > max_f:\n            max_f = current_f\n\n    return str(max_f)"
    },
    {
        "number": 4162,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    a = list(map(int, lines[1].split()))\n\n    def f(m: int) -> int:\n        result = 0\n        for i in range(N):\n            result += m % a[i]\n        return result\n\n    max_f = -1\n    for i in range(1, 10000):\n        current_f = f(i)\n        if current_f > max_f:\n            max_f = current_f\n\n    return str(max_f)\n\ninput_str = \"3\\n3 4 6\"\nprint(solution(input_str))  # Output: 10 "
    },
    {
        "number": 4162,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    line1, line2 = stdin.split('\\n')\n    N = int(line1)\n    a = list(map(int, line2.split()))\n\n    def f(m):\n        return sum((m % i) for i in a)\n\n    max_f = -1\n    for m in range(N):\n        max_f = max(max_f, f(m))\n\n    return str(max_f)\n"
    },
    {
        "number": 4162,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    a = [int(x) for x in lines[1].split()]\n\n    def f(m: int) -> int:\n        return sum([m % x for x in a])\n\n    max_f = -1\n    for m in range(1000001):\n        max_f = max(max_f, f(m))\n\n    return str(max_f)"
    },
    {
        "number": 4162,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *moduli = map(int, stdin.split())\n\n    def f(m: int) -> int:\n        return sum(m % a for a in moduli)\n\n    max_f = 0\n    for m in range(max(moduli)):\n        max_f = max(max_f, f(m))\n\n    return str(max_f)"
    },
    {
        "number": 4162,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    n = int(input_list[0])\n    a = [int(x) for x in input_list[1].split()]\n    \n    def f(m: int) -> int:\n        result = 0\n        for i in range(n):\n            result += m % a[i]\n        return result\n    \n    max_f = 0\n    for i in range(max(a) * n):\n        max_f = max(max_f, f(i))\n    \n    return str(max_f)"
    },
    {
        "number": 4162,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, *a = map(int, stdin.split())\n    f = lambda m: sum([(m % ai) for ai in a])\n    max_f = max([f(m) for m in range(1000001)])\n    return str(max_f)"
    },
    {
        "number": 4163,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    dice_rolls = [tuple(map(int, line.split())) for line in lines[1:]]\n\n    doublet_count = 0\n    for i in range(n - 2):\n        if (dice_rolls[i][0] == dice_rolls[i][1] and\n            dice_rolls[i + 1][0] == dice_rolls[i + 1][1] and\n            dice_rolls[i + 2][0] == dice_rolls[i + 2][1]):\n            doublet_count += 1\n            if doublet_count >= 3:\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4163,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.strip().split('\\n')\n    n = int(input_lines[0])\n    rolls = []\n    for i in range(1, n+1):\n        rolls.append(tuple(map(int, input_lines[i].split())))\n\n    for i in range(n-2):\n        if rolls[i][0] == rolls[i][1] and \\\n           rolls[i+1][0] == rolls[i+1][1] and \\\n           rolls[i+2][0] == rolls[i+2][1]:\n            return \"Yes\"\n\n    return \"No\"\n\ndef"
    },
    {
        "number": 4163,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_list = [line.strip() for line in stdin.split(\"\\n\") if line.strip()]\n    N = int(input_list[0])\n    doublets_in_a_row = 0\n\n    for i in range(N - 2):\n        dice1 = tuple(map(int, input_list[i + 1].split()))\n        dice2 = tuple(map(int, input_list[i + 2].split()))\n\n        if dice1 == dice2:\n            doublets_in_a_row += 1\n            if doublets_in_a_row >= 3:\n                return \"Yes\"\n        else:\n            doublets_in_a_row = 0\n\n    return \"No\""
    },
    {
        "number": 4163,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    dice_rolls = []\n    \n    for i in range(1, N+1):\n        roll = tuple(map(int, lines[i].split()))\n        dice_rolls.append(roll)\n        \n    triplet_count = 0\n    for i in range(N-2):\n        if dice_rolls[i] == dice_rolls[i+1] == dice_rolls[i+2]:\n            triplet_count += 1\n            \n    return 'Yes' if triplet_count >= 1 else 'No'"
    },
    {
        "number": 4163,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split('\\n')[1:]\n    doublets_count = 0\n    for i in range(len(stdin_list)-2):\n        dice_roll_1 = stdin_list[i].split()\n        dice_roll_2 = stdin_list[i+1].split()\n        dice_roll_3 = stdin_list[i+2].split()\n        if dice_roll_1[0] == dice_roll_1[1] and dice_roll_2[0] == dice_roll_2[1] and dice_roll_3[0] == dice_roll_3[1]:\n            doublets_count += 1\n            if doublets_count >= 3:\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4163,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    dice_pairs = []\n    \n    for i in range(1, N+1):\n        dice_pairs.append(tuple(map(int, lines[i].split())))\n    \n    for i in range(N-2):\n        if dice_pairs[i] == dice_pairs[i+1] == dice_pairs[i+2]:\n            return \"Yes\"\n    \n    return \"No\""
    },
    {
        "number": 4163,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    dice_rolls = stdin.split('\\n')[1:N+1]\n\n    for i in range(N - 2):\n        current_roll = dice_rolls[i]\n        next_roll = dice_rolls[i+1]\n        third_roll = dice_rolls[i+2]\n\n        if current_roll == next_roll == third_roll:\n            return \"Yes\"\n\n    return \"No\""
    },
    {
        "number": 4163,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split(\"\\n\")\n    n = int(input_lines[0])\n    dice_rolls = [list(map(int, line.split())) for line in input_lines[1:]]\n\n    for i in range(n - 2):\n        if (\n            dice_rolls[i][0] == dice_rolls[i][1]\n            and dice_rolls[i + 1][0] == dice_rolls[i + 1][1]\n            and dice_rolls[i + 2][0] == dice_rolls[i + 2][1]\n        ):\n            return \"Yes\"\n\n    return \"No\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num_rolls, *dice_rolls = stdin.split()\n    num_rolls = int(num_rolls)\n    num_doublets = 0\n\n    for i in range(num_rolls - 2):\n        if dice_rolls[i] == dice_rolls[i + 1] == dice_rolls[i + 2]:\n            num_doublets += 1\n            if num_doublets >= 3:\n                return \"Yes\"\n\n    return \"No\""
    },
    {
        "number": 4163,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split()\n    n = int(inputs[0])\n    dice_rolls = []\n    for i in range(1, n * 2 + 1, 2):\n        dice_rolls.append((int(inputs[i]), int(inputs[i+1])))\n\n    for i in range(n - 2):\n        if dice_rolls[i] == dice_rolls[i+1] == dice_rolls[i+2]:\n            return \"Yes\"\n\n    return \"No\"\n\nstdin = \"\"\"5\n1 2\n6 6\n4 4\n3 3\n3 2\"\"\"\n\nprint(solution(stdin)) "
    },
    {
        "number": 4164,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area_r = 3.14 * (r ** 2)\n    area_1 = 3.14 * 1 ** 2\n    count = area_r // area_1\n    return str(count)"
    },
    {
        "number": 4164,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area_r = round(3.14 * (r ** 2))\n    area_1 = round(3.14 * (1 ** 2))\n    count = area_r // area_1\n    return str(count)\n\nr = input()\nprint(solution(r)) "
    },
    {
        "number": 4164,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    pi = 3.141592653589793\n    area_r = pi * r ** 2\n    area_1 = pi * 1 ** 2\n    result = area_r / area_1\n    return str(int(result))"
    },
    {
        "number": 4164,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area_r = 3.14 * r * r\n    area_1 = 3.14\n    result = int(area_r / area_1)\n    return str(result)\n\ninput_data = input()\nresult = solution(input_data)\nprint(result) "
    },
    {
        "number": 4164,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area_circle_r = 3.14 * r ** 2\n    area_circle_1 = 3.14 * 1 ** 2\n    result = area_circle_r // area_circle_1\n    return str(result)"
    },
    {
        "number": 4164,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    pi = 3.14159\n    area_r = pi * r ** 2\n    area_1 = pi * 1 ** 2\n    times_larger = area_r // area_1\n    return str(times_larger)"
    },
    {
        "number": 4164,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area_r = 3.14 * r * r\n    area_1 = 3.14 * 1 * 1\n    result = int(area_r / area_1)\n    return str(result)\n\ndef"
    },
    {
        "number": 4164,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area_r = 3.14 * (r ** 2)\n    area_1 = 3.14 * (1 ** 2)\n    result = area_r / area_1\n    return str(int(result))"
    },
    {
        "number": 4164,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area_r = 3.14 * r * r\n    area_1 = 3.14 * 1 * 1\n    return str(int(area_r // area_1))"
    },
    {
        "number": 4164,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area_r = 3.14159 * r * r\n    area_1 = 3.14159\n    count = int(area_r / area_1)\n    return str(count)\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4165,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N = int(lines[0])\n    sides = [int(x) for x in lines[1].split()]\n\n    max_side = max(sides)\n    sum_other_sides = sum(sides) - max_side\n\n    if max_side < sum_other_sides:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4165,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, *sides = map(int, stdin.split())\n\n    if len(sides) != N:\n        return \"Invalid input.\"\n\n    max_side = max(sides)\n    other_sides_sum = sum(sides) - max_side\n\n    if max_side < other_sides_sum:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4165,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, sides = stdin.split()\n    n = int(n)\n    sides = [int(side) for side in sides.split()]\n\n    max_side = max(sides)\n    sum_sides = sum(sides)\n\n    if max_side < sum_sides - max_side:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4165,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, *sides = [int(x) for x in stdin.split()]\n    L_max = max(sides)\n    L_sum = sum(sides) - L_max\n    \n    if L_max < L_sum:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4165,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, L = stdin.split()\n    N = int(N)\n    L = list(map(int, L.split()))\n\n    max_side = max(L)\n    other_sides = sum(L) - max_side\n\n    if max_side < other_sides:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4165,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_list = list(map(int, stdin.split()))\n    n = input_list[0]\n    side_lengths = input_list[1:]\n    max_side_length = max(side_lengths)\n    other_sides_sum = sum(side_lengths) - max_side_length\n\n    if max_side_length < other_sides_sum:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4165,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, sides = stdin.split()\n    n = int(n)\n    sides = [int(side) for side in sides.split()]\n\n    longest_side = max(sides)\n    other_sides_sum = sum(sides) - longest_side\n\n    if longest_side < other_sides_sum:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4165,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, *sides = map(int, stdin.split())\n    \n    if len(sides) != N:\n        raise ValueError(\"Incorrect number of sides\")\n    \n    longest_side = max(sides)\n    other_sides_sum = sum(sides) - longest_side\n    \n    if longest_side < other_sides_sum:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4165,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, *sides = list(map(int, stdin.split()))\n    L_1, L_2, L_3, L_4 = sides[:4]\n\n    if L_1 > sum(sides[1:]) or L_2 > sum(sides[1:]) or L_3 > sum(sides[1:]) or L_4 > sum(sides[1:]) or N != len(sides):\n        return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4165,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, *sides = list(map(int, stdin.split()))\n\n    max_side = max(sides)\n    sum_sides = sum(sides) - max_side\n\n    return \"Yes\" if max_side < sum_sides else \"No\"\n\ndef"
    },
    {
        "number": 4166,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def check_condition(N: int, conditions: List[Tuple[int, int]]) -> bool:\n        number = 0\n        for i, (s, c) in enumerate(conditions, 1):\n            digit = c * (10**(N-s))\n            if i == 1:\n                number = digit\n            else:\n                number += digit\n        return number > 0\n\n    N, M = map(int, stdin.split()[:2])\n    conditions = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:-1]]\n\n    for i in range(10**N):\n        if check_condition(N, conditions):\n            return str(i)\n    return \"-1\""
    },
    {
        "number": 4166,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    inputs = stdin.splitlines()\n    N, M = map(int, inputs[0].split())\n    constraints = [tuple(map(int, line.split())) for line in inputs[1:]]\n\n    # Generate all possible integers with N digits\n    min_integer = 10**(N-1)\n    max_integer = 10**N - 1\n    possible_integers = range(min_integer, max_integer + 1)\n\n    # Check if any integer satisfies the constraints\n    for integer in possible_integers:\n        # Convert integer to string\n        integer_str = str(integer)\n\n        # Check if all constraints are satisfied\n        satisfied = True\n        for s_i, c_i in constraints:\n            if integer_str[N - s_i] != str(c_i):\n                satisfied = False\n                break\n\n        # If all constraints are satisfied, return the smallest such integer\n        if satisfied:\n            return str(integer)\n\n    # No integer satisfies the constraints, return -1\n    return \"-1\""
    },
    {
        "number": 4166,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    conditions = {}\n    for line in stdin.split('\\n')[2:]:\n        if not line:\n            break\n        s, c = map(int, line.split())\n        conditions[s] = c\n\n    def check_condition(num: str) -> bool:\n        for s, c in conditions.items():\n            if int(num[N - s]) != c:\n                return False\n        return True\n\n    def find_minimum_num() -> str:\n        minimum = 10 ** (N - 1)\n        for i in range(minimum, 10 ** N):\n            if check_condition(str(i)):\n                return str(i)\n        return \"-1\"\n\n    return find_minimum_num()"
    },
    {
        "number": 4166,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.splitlines()\n    N, M = map(int, input_lines[0].split())\n    constraints = []\n\n    for i in range(1, M + 1):\n        s, c = map(int, input_lines[i].split())\n        constraints.append((s, c))\n\n    constraints.sort(key=lambda x: x[0])\n\n    def satisfies_constraints(number: int, constraints: List[Tuple[int, int]]) -> bool:\n        for (s, c) in constraints:\n            if (number // 10 ** (s - 1)) % 10 != c:\n                return False\n        return True\n\n    min_number = 0\n    max_number = 10 ** N - 1\n    result = -1\n\n    while min_number <= max_number:\n        mid = (min_number + max_number) // 2\n        if satisfies_constraints(mid, constraints):\n            result = mid\n            min_number = mid + 1\n        else:\n            max_number = mid - 1\n\n    return str(result)"
    },
    {
        "number": 4166,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    digits = [[] for _ in range(10)]\n\n    for _ in range(m):\n        si, ci = map(int, input().split())\n        digits[ci].append(si)\n\n    for i in range(10):\n        if digits[i] and digits[i] == sorted(digits[i]):\n            return str(i * (10 ** (n - len(digits[i]))))\n\n    return \"-1\"\n\ninput_data = \"\"\"3 3\n1 7\n3 2\n1 7\"\"\"\nprint(solution(input_data)) "
    },
    {
        "number": 4166,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def check_condition(n: int, s: List[Tuple[int, int]], M: int) -> bool:\n        digits = list(map(int, str(n)))\n        for i in range(M):\n            if digits[s[i] - 1] != s[i]:\n                return False\n        return True\n\n    N, M = map(int, stdin.split()[:2])\n    s_c = list(map(int, stdin.split()[2:]))\n    s = [s_c[i] for i in range(0, 2 * M, 2)]\n    c = [s_c[i] for i in range(1, 2 * M, 2)]\n\n    min_n = 0\n    max_n = 10 ** N - 1\n    while min_n <= max_n:\n        mid_n = (min_n + max_n) // 2\n        if check_condition(mid_n, s, M):\n            max_n = mid_n - 1\n        else:\n            min_n = mid_n + 1\n\n    return str(min_n) if min_n != 10 ** N - 1 else \"-1\"\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4166,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid_number(number: str, s_c: List[Tuple[int, int]]) -> bool:\n        s_c_dict = {i: c for i, c in s_c}\n        for i, c in enumerate(number, start=1):\n            if i in s_c_dict and int(c) != s_c_dict[i]:\n                return False\n        return True\n\n    def find_smallest_number(n: int, s_c: List[Tuple[int, int]]) -> int:\n        for i in range(10 ** (n - 1), 10 ** n):\n            number = str(i)\n            if is_valid_number(number, s_c):\n                return int(number)\n        return -1\n\n    lines = stdin.splitlines()\n    n, m = map(int, lines[0].split())\n    s_c = [tuple(map(int, line.split())) for line in lines[1:]]\n\n    return str(find_smallest_number(n, s_c))"
    },
    {
        "number": 4166,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N, M = map(int, lines[0].split())\n    constraints = []\n    for line in lines[1:]:\n        s, c = map(int, line.split())\n        constraints.append((s, c))\n\n    def is_valid(num: int) -> bool:\n        num_str = str(num)\n        if len(num_str) != N:\n            return False\n        for s, c in constraints:\n            if num_str[N - s] != str(c):\n                return False\n        return True\n\n    min_num = -1\n    for i in range(10**(N-1), 10**N):\n        if is_valid(i):\n            min_num = i\n            break\n\n    return str(min_num)"
    },
    {
        "number": 4166,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.strip().split('\\n')\n    N, M = map(int, input_lines[0].split())\n    constraints = {int(s): c for s, c in map(lambda x: x.split(), input_lines[1:])}\n    \n    def check_constraints(num: int) -> bool:\n        num_str = str(num)\n        if len(num_str) != N:\n            return False\n        for s, c in constraints.items():\n            if c != int(num_str[s - 1]):\n                return False\n        return True\n    \n    for i in range(10**(N - 1), 10**N):\n        if check_constraints(i):\n            return str(i)\n    return '-1'"
    },
    {
        "number": 4166,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[0:2])\n    conditions = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:1+M]]\n    \n    def satisfies_condition(n: int) -> bool:\n        for s, c in conditions:\n            if n // (10 ** (s - 1)) % 10 != c:\n                return False\n        return True\n    \n    smallest_integer = -1\n    for i in range(10 ** (N - 1), 10 ** N):\n        if satisfies_condition(i):\n            smallest_integer = i\n            break\n    \n    return str(smallest_integer)"
    },
    {
        "number": 4167,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n\n    def is_multiple(x: int, k: int) -> bool:\n        return x % k == 0\n\n    def count_triples(n: int, k: int) -> int:\n        count = 0\n        for a in range(1, n + 1):\n            for b in range(a, n + 1):\n                for c in range(b, n + 1):\n                    if is_multiple(a + b, k) and is_multiple(b + c, k) and is_multiple(c + a, k):\n                        count += 1\n        return count\n\n    return str(count_triples(N, K))\n"
    },
    {
        "number": 4167,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    count = 0\n    for a in range(1, N + 1):\n        for b in range(1, N + 1):\n            for c in range(1, N + 1):\n                if (a + b) % K == 0 and (b + c) % K == 0 and (c + a) % K == 0:\n                    count += 1\n    return str(count)"
    },
    {
        "number": 4167,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    count = 0\n\n    for a in range(1, N // 3 + 1):\n        for b in range(1, N // 2 + 1):\n            for c in range(1, N + 1):\n                if a + b + c > N:\n                    break\n                if (a + b) % K == 0 and (b + c) % K == 0 and (c + a) % K == 0:\n                    count += 1\n\n    return str(count)"
    },
    {
        "number": 4167,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n\n    count = 0\n    for a in range(1, N + 1):\n        for b in range(1, N + 1):\n            for c in range(1, N + 1):\n                if (a + b) % K == 0 and (b + c) % K == 0 and (c + a) % K == 0:\n                    count += 1\n\n    return str(count)"
    },
    {
        "number": 4167,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    result = []\n\n    for a in range(1, N + 1):\n        for b in range(1, N + 1):\n            for c in range(1, N + 1):\n                if a + b == b + c == c + a and (a + b) % K == 0 and (b + c) % K == 0 and (c + a) % K == 0:\n                    result.append((a, b, c))\n\n    return f\"{len(result)}\""
    },
    {
        "number": 4167,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    count = 0\n    \n    for a in range(1, N+1):\n        for b in range(1, N+1):\n            for c in range(1, N+1):\n                if (a + b) % K == 0 and (b + c) % K == 0 and (c + a) % K == 0:\n                    count += 1\n    \n    return str(count)"
    },
    {
        "number": 4167,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    count = 0\n    for a in range(1, N + 1, K):\n        for b in range(a, N + 1, K):\n            for c in range(b, N + 1, K):\n                if (a + b) % K == 0 and (b + c) % K == 0 and (c + a) % K == 0:\n                    count += 1\n    return str(count)\n\ndef"
    },
    {
        "number": 4167,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    count = 0\n\n    for a in range(1, N + 1):\n        for b in range(1, N + 1):\n            for c in range(1, N + 1):\n                if (a + b) % K == 0 and (b + c) % K == 0 and (c + a) % K == 0:\n                    count += 1\n\n    return str(count)"
    },
    {
        "number": 4167,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n\n    count = 0\n    for a in range(1, N+1):\n        for b in range(1, N+1):\n            for c in range(1, N+1):\n                if a+b == b+c == c+a and (a+b)%K == 0:\n                    count += 1\n\n    return str(count)\n\ndef"
    },
    {
        "number": 4167,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    count = 0\n\n    for a in range(1, N + 1):\n        for b in range(1, N + 1):\n            for c in range(1, N + 1):\n                if (a + b) % K == 0 and (b + c) % K == 0 and (c + a) % K == 0:\n                    count += 1\n\n    return str(count)"
    },
    {
        "number": 4168,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 0:\n        return \"0\"\n    elif N < 0:\n        N = abs(N)\n        res = \"1\"\n    else:\n        res = \"\"\n\n    while N > 0:\n        if N % 2 == 1:\n            res = \"1\" + res\n            N -= 1\n        else:\n            res = \"0\" + res\n        N //= 2\n\n    return res\n"
    },
    {
        "number": 4168,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 0:\n        return \"0\"\n    result = \"\"\n    while N != 0:\n        result += str(N & 1)\n        N = N >> 1\n    result = result[::-1]\n    return result"
    },
    {
        "number": 4168,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 0:\n        return \"0\"\n    result = []\n    while N > 0:\n        N, rem = divmod(N, -2)\n        result.append(str(rem))\n    return \"\".join(result)\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4168,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 0:\n        return \"0\"\n    res = \"\"\n    while N:\n        if N % 2 == 0:\n            res += \"0\"\n            N = N // -2\n        else:\n            res += \"1\"\n            N = (N + 1) // -2\n    return res"
    },
    {
        "number": 4168,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 0:\n        return \"0\"\n    res = \"\"\n    while N > 0:\n        if N % 2 == 1:\n            res = \"1\" + res\n            N -= 1\n        else:\n            res = \"0\" + res\n        N //= -2\n    return res "
    },
    {
        "number": 4168,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    \n    if N == 0:\n        return \"0\"\n    \n    result = \"\"\n    while N > 0:\n        result = str(N & 1) + result\n        N = N >> 1\n    \n    return result"
    },
    {
        "number": 4168,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 0:\n        return \"0\"\n    elif N > 0:\n        result = \"\"\n        while N != 0:\n            result += str(N % 2)\n            N //= -2\n        return result[::-1]\n    else:\n        return \"1\" + solution(str(N + 1))\n\ndef"
    },
    {
        "number": 4168,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N == 0:\n        return \"0\"\n    result = \"\"\n    while N != 0:\n        N, remainder = divmod(N, -2)\n        result = str(remainder) + result\n    return result"
    },
    {
        "number": 4168,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N == 0:\n        return \"0\"\n    result = \"\"\n    while N != 0:\n        remainder = N % (-2)\n        if remainder >= 0:\n            result = \"0\" + result\n            N += 2\n        else:\n            result = \"1\" + result\n            N -= 2\n    return result "
    },
    {
        "number": 4168,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 0:\n        return \"0\"\n    if N == 1:\n        return \"1\"\n    if N == -1:\n        return \"10\"\n    res = \"\"\n    while N != 0:\n        if N % 2 == 0:\n            res = \"0\" + res\n        else:\n            res = \"1\" + res\n        N = - (N // -2)\n    return res"
    },
    {
        "number": 4169,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    num_stores, num_drinks = map(int, lines[0].split())\n    store_data = [list(map(int, line.split())) for line in lines[1:]]\n\n    total_drinks = 0\n    min_cost = 0\n    store_index = 0\n    while total_drinks < num_drinks:\n        cans_left = num_drinks - total_drinks\n        cans_bought = min(cans_left, store_data[store_index][1])\n        total_drinks += cans_bought\n        min_cost += cans_bought * store_data[store_index][0]\n        store_index += 1\n\n    return str(min_cost)"
    },
    {
        "number": 4169,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split('\\n')[0].split())\n    stores = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n\n    def min_money(m, stores):\n        if m == 0:\n            return 0\n        stores.sort(key=lambda x: x[1], reverse=True)\n        max_can_per_store = [min(m, store[1]) for store in stores]\n        m -= sum(max_can_per_store)\n        return max_can_per_store[-1] * stores[-1][0] + min_money(m, stores[:-1])\n\n    return str(min_money(M, stores))"
    },
    {
        "number": 4169,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    prices = [list(map(int, input().split())) for _ in range(N)]\n    prices.sort(key=lambda x: x[1] / x[0])  # Sort by price per can\n    cans_bought = 0\n    total_cost = 0\n    for price in prices:\n        cans_to_buy = min(M - cans_bought, price[1])\n        total_cost += cans_to_buy * price[0]\n        cans_bought += cans_to_buy\n        if cans_bought == M:\n            break\n    return str(total_cost)"
    },
    {
        "number": 4169,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    N, M = map(int, lines[0].split())\n    stores = []\n    for i in range(1, N+1):\n        A, B = map(int, lines[i].split())\n        stores.append((A, B))\n    \n    total_cans = 0\n    money = 0\n    stores.sort(key=lambda x: x[1], reverse=True)\n    \n    for cans, price in stores:\n        if total_cans + cans > M:\n            cans = M - total_cans\n        money += cans * price\n        total_cans += cans\n        if total_cans == M:\n            break\n    \n    return str(money)\n\nstdin = \"\"\"2 5\n4 9\n2 4\"\"\"\nprint(solution(stdin)) # Output: 12 "
    },
    {
        "number": 4169,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N, M = map(int, lines[0].split())\n    B, A = [], []\n\n    for i in range(1, N + 1):\n        B_i, A_i = map(int, lines[i].split())\n        B.append(B_i)\n        A.append(A_i)\n\n    B.sort(reverse=True)\n    A.sort(reverse=True)\n\n    total_bought = 0\n    spent = 0\n\n    for i in range(N):\n        cans_bought = min(B[i], M - total_bought)\n        total_bought += cans_bought\n        spent += cans_bought * A[i]\n\n        if total_bought == M:\n            return str(spent)\n\n    return \"Impossible\""
    },
    {
        "number": 4169,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N, M = map(int, lines[0].split())\n    stores = [list(map(int, line.split())) for line in lines[1:]]\n    stores.sort(key=lambda x: x[1], reverse=True)\n\n    total_can_count = 0\n    total_cost = 0\n\n    for store in stores:\n        can_count = min(M - total_can_count, store[1])\n        total_can_count += can_count\n        total_cost += can_count * store[0]\n\n        if total_can_count == M:\n            break\n\n    return str(total_cost)\n"
    },
    {
        "number": 4169,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[0:2])\n    prices_and_stocks = stdin.split()[2:]\n    prices = [int(prices_and_stocks[i]) for i in range(0, len(prices_and_stocks), 2)]\n    stocks = [int(prices_and_stocks[i]) for i in range(1, len(prices_and_stocks), 2)]\n\n    def min_money_needed(N: int, M: int, prices: list, stocks: list) -> int:\n        dp = [float('inf')] * (M + 1)\n        dp[0] = 0\n\n        for i in range(1, N + 1):\n            for j in range(M, stocks[i - 1] - 1, -1):\n                dp[j] = min(dp[j], dp[j - stocks[i - 1]] + prices[i - 1])\n\n        return dp[M]\n\n    return str(min_money_needed(N, M, prices, stocks))"
    },
    {
        "number": 4169,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def knapSack(W, wt, val, n):\n        K = [[0 for x in range(W + 1)] for x in range(n + 1)]\n\n        for i in range(n + 1):\n            for w in range(W + 1):\n                if i == 0 or w == 0:\n                    K[i][w] = 0\n                elif wt[i - 1] <= w:\n                    K[i][w] = max(val[i - 1] + K[i - 1][w - wt[i - 1]], K[i - 1][w])\n                else:\n                    K[i][w] = K[i - 1][w]\n\n        return K[n][W]\n\n    lines = stdin.split(\"\\n\")\n    N, M = list(map(int, lines[0].split()))\n    store_info = [list(map(int, line.split())) for line in lines[1:]]\n\n    wt = [row[1] for row in store_info]\n    val = [row[0] for row in store_info]\n\n    return knapSack(M, wt, val, len(wt))\n\nstdin = \"2 5\\n4 9\\n2 4\\n\"\nprint(solution(stdin)) # Output: 12 "
    },
    {
        "number": 4169,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[0:2])\n    store_prices = []\n    for i in range(N):\n        A, B = map(int, stdin.split()[2*i+2:2*i+4])\n        store_prices.append((A, B))\n\n    store_prices.sort(key=lambda x: x[0])\n\n    total_can_count = 0\n    total_cost = 0\n\n    for price in store_prices:\n        A, B = price\n        if total_can_count + B <= M:\n            total_can_count += B\n            total_cost += B * A\n        else:\n            remaining_can_count = M - total_can_count\n            total_cost += remaining_can_count * A\n            break\n\n    return str(total_cost)"
    },
    {
        "number": 4169,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.splitlines()[0].split())\n    store_prices = [list(map(int, line.split())) for line in stdin.splitlines()[1:]]\n\n    store_prices.sort(key=lambda x: x[1])\n\n    current_can_count = 0\n    current_price = 0\n\n    for can_price, can_count in store_prices:\n        if current_can_count + can_count <= M:\n            current_can_count += can_count\n            current_price += can_price * can_count\n        else:\n            remaining_cans = M - current_can_count\n            current_price += can_price * remaining_cans\n            break\n\n    return str(current_price)\n"
    },
    {
        "number": 4170,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *heights = map(int, stdin.split())\n    max_moves = 0\n    current_square = 0\n    \n    for i in range(1, n):\n        if heights[i] <= heights[current_square]:\n            max_moves += 1\n            current_square = i\n            \n    return str(max_moves)"
    },
    {
        "number": 4170,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    H = list(map(int, lines[1].split()))\n    max_moves = 0\n    \n    for i in range(N-1):\n        if H[i] >= H[i+1]:\n            max_moves += 1\n    \n    return str(max_moves)"
    },
    {
        "number": 4170,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # split the input string into a list of strings\n    input_list = stdin.split()\n\n    # convert the list of strings into a list of integers\n    n = int(input_list[0])\n    h_list = [int(x) for x in input_list[1:]]\n\n    # initialize the maximum number of moves and the index of the current square\n    max_moves = 0\n    current_index = 0\n\n    # loop through all the squares\n    for i in range(n):\n        # check if the next square has a higher height\n        if i + 1 < n and h_list[i] <= h_list[i + 1]:\n            # if so, move to the next square and increment the counter\n            current_index = i + 1\n            max_moves += 1\n        else:\n            # if not, break out of the loop\n            break\n\n    # return the maximum number of moves\n    return str(max_moves)"
    },
    {
        "number": 4170,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input into a list of integers\n    N, *H = list(map(int, stdin.split()))\n\n    # Initialize a list to store the indices of the squares with the maximum height\n    max_indices = [0]\n\n    # Find the indices of the squares with the maximum height\n    for i in range(1, N):\n        if H[i] >= H[max_indices[-1]]:\n            max_indices.append(i)\n\n    # Calculate the number of times you can move\n    moves = 0\n    for i in range(len(max_indices) - 1):\n        moves += abs(max_indices[i + 1] - max_indices[i]) - 1\n\n    return str(moves)"
    },
    {
        "number": 4170,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    N = int(input_list[0])\n    heights = list(map(int, input_list[1:]))\n    max_moves = 0\n    \n    for i in range(N):\n        j = i + 1\n        moves = 0\n        while j < N and heights[j] <= heights[i]:\n            moves += 1\n            j += 1\n        max_moves = max(max_moves, moves)\n    \n    return str(max_moves)"
    },
    {
        "number": 4170,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, *heights = map(int, stdin.split())\n    max_moves = 0\n    i = 0\n    while i < N - 1:\n        if heights[i] >= heights[i+1]:\n            break\n        i += 1\n        max_moves += 1\n    return str(max_moves)"
    },
    {
        "number": 4170,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, *heights = map(int, stdin.split())\n    max_moves = 0\n    \n    for i in range(N-1):\n        if heights[i] <= heights[i+1]:\n            max_moves += 1\n        else:\n            break\n    \n    return str(max_moves)"
    },
    {
        "number": 4170,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *heights = map(int, stdin.split())\n    if len(heights) != n:\n        return \"Invalid input\"\n\n    max_moves = 0\n    current_height = heights[0]\n\n    for i in range(1, n):\n        next_height = heights[i]\n        if next_height <= current_height:\n            max_moves += 1\n        else:\n            break\n        current_height = next_height\n\n    return str(max_moves)"
    },
    {
        "number": 4170,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the maximum number of times you can move given N squares arranged in a row from left to right, the height of each square,\n    and the index of the square where you land.\n\n    Args:\n        stdin: A string containing the number of squares and the heights of each square separated by space.\n\n    Returns:\n        The maximum number of times you can move.\n    \"\"\"\n    N, *heights = map(int, stdin.split())\n    landed_index = heights.index(max(heights))\n    moves = 0\n\n    for i in range(landed_index + 1, N):\n        if heights[i] >= heights[i - 1]:\n            moves += 1\n        else:\n            break\n\n    return str(moves)\n"
    },
    {
        "number": 4170,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    heights = [int(x) for x in lines[1].split()]\n    \n    max_moves = 0\n    for i in range(N):\n        moves = 0\n        for j in range(i+1, N):\n            if heights[j] <= heights[i]:\n                moves += 1\n            else:\n                break\n        max_moves = max(max_moves, moves)\n    \n    return str(max_moves)\n\ndef"
    },
    {
        "number": 4171,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, input().split()))\n\n    min_operations = -1\n\n    for i in range(n):\n        count = 0\n        for j in range(n):\n            count += a[j] // (2 ** i)\n        if count >= k:\n            min_operations = i\n            break\n\n    return str(min_operations)"
    },
    {
        "number": 4171,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    \n    # Sort the array in non-decreasing order\n    a.sort()\n    \n    # Calculate the minimum number of operations required to obtain at least k equal numbers\n    num_ops = 0\n    num_equal = 0\n    prev_num = -1\n    \n    for num in a:\n        if num == prev_num:\n            continue\n        \n        # Calculate the number of times the current number needs to be divided by 2 to obtain k equal numbers\n        target_num = num // (2**(k-1))\n        num_times = 0\n        \n        while target_num > 0:\n            target_num //= 2\n            num_times += 1\n        \n        # If the current number can't be divided by 2 enough times to obtain k equal numbers,\n        # add the number of operations required to divide the previous number by 2 until it can\n        if num_times == 0:\n            num_ops += num // 2 - prev_num // 2\n            num_equal += num // 2 - prev_num // 2\n        \n        # Otherwise, add the number of operations required to divide the current number by 2\n        else:\n            num_ops += num_times - 1\n            num_equal += num_times - 1\n        \n        prev_num = num\n    \n    return num_ops"
    },
    {
        "number": 4171,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    min_operations = float('inf')\n    for target_value in range(1, max(a) + 1):\n        operations = 0\n        for value in a:\n            operations += value // target_value\n\n        if operations >= k:\n            min_operations = min(min_operations, operations)\n\n    return str(min_operations)\n\ninput_data = \"5 3\\n1 2 2 4 5\"\nprint(solution(input_data))  # Output: 1\n\ninput_data = \"5 3\\n1 2 3 4 5\"\nprint(solution(input_data))  # Output: 2\n\ninput_data = \"5 3\\n1 2 3 3 3\"\nprint(solution(input_data))  # Output: 0 "
    },
    {
        "number": 4171,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    a.sort()\n    unique_a = len(set(a))\n\n    if unique_a == k:\n        return \"0\"\n    elif unique_a < k:\n        return \"-1\"\n\n    min_operations = 0\n    for i in range(unique_a - k):\n        min_operations += a[n - unique_a + i]\n\n    return str(min_operations)"
    },
    {
        "number": 4171,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    \n    a.sort()\n    \n    if len(a) < k:\n        return \"IMPOSSIBLE\"\n    \n    min_operations = 0\n    \n    for i in range(k):\n        if i == 0 or a[i] != a[i-1]:\n            min_operations += a[i]\n            a[i] //= 2\n        else:\n            min_operations += a[i] // 2\n            a[i] //= 2\n            \n    return str(min_operations)"
    },
    {
        "number": 4171,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, input().split()))\n    \n    # Calculate the frequency of each number in the array\n    frequency = {}\n    for num in a:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n            \n    # Sort the frequency dictionary by value in descending order\n    sorted_frequency = sorted(frequency.items(), key=lambda x: x[1], reverse=True)\n    \n    # Initialize the result variable\n    result = 0\n    \n    # Iterate over the sorted frequency dictionary\n    for num, count in sorted_frequency:\n        # If we have found at least k equal numbers, return the result\n        if count >= k:\n            return str(result)\n        # Otherwise, divide all the numbers with the current number by 2 and increment the result\n        else:\n            for i in range(len(a)):\n                a[i] //= num\n            result += 1\n            \n    # If we have not found at least k equal numbers after iterating over the entire array, it is not possible\n    return \"IMPOSSIBLE\""
    },
    {
        "number": 4171,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    a.sort()\n    min_operations = 0\n    \n    for i in range(n):\n        if i >= k - 1:\n            if a[i] == a[i - k + 1]:\n                min_operations += 1\n            else:\n                break\n    \n    return str(min_operations)"
    },
    {
        "number": 4171,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    \n    # Find the mode of the array\n    mode = max(set(a), key=a.count)\n    \n    # Calculate the number of elements that need to be changed to reach k equal numbers\n    elements_to_change = k - a.count(mode)\n    \n    # Calculate the number of operations required to change the elements\n    operations = 0\n    for num in a:\n        operations += num // 2\n    \n    # If the number of elements to change is odd, add an extra operation\n    operations += elements_to_change % 2\n    \n    return str(operations)"
    },
    {
        "number": 4171,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def min_operations(a, k) -> int:\n        n = len(a)\n        a.sort()\n\n        count = [0] * n\n        count[0] = 1\n\n        for i in range(1, n):\n            if a[i] == a[i - 1]:\n                count[i] = count[i - 1] + 1\n            else:\n                count[i] = 1\n\n        for i in range(n - 1, -1, -1):\n            if count[i] >= k:\n                return i\n\n        return -1\n\n    n, k = map(int, stdin.split())\n    a = list(map(int, input().split()))\n\n    return str(min_operations(a, k))\n\ndef"
    },
    {
        "number": 4171,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, input().split()))\n\n    a.sort()\n    min_operations = 0\n\n    if k == n:\n        return str(min_operations)\n\n    current_value = a[0]\n    for i in range(1, n):\n        if a[i] != current_value:\n            min_operations += i - 1\n            current_value = a[i]\n            if i >= k:\n                break\n\n    min_operations += n - a[-1]\n    return str(min_operations)\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4172,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, input().split()))\n\n    # count the frequency of each element in the array\n    freq = {}\n    for num in a:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # calculate the minimum number of moves required\n    moves = 0\n    for num, count in freq.items():\n        if count >= k:\n            continue\n        # move the minimum element k - count times\n        moves += k - count\n        # move the maximum element count - 1 times\n        moves += count - 1\n\n    return str(moves)"
    },
    {
        "number": 4172,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    count = {}\n    for i in a:\n        if i not in count:\n            count[i] = 1\n        else:\n            count[i] += 1\n    \n    min_moves = float('inf')\n    for key, value in count.items():\n        moves = (n - value) // k\n        if value >= k and moves < min_moves:\n            min_moves = moves\n    \n    return str(min_moves)\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4172,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    a.sort()\n    min_moves = 0\n\n    for i in range(n):\n        if a[i] == a[i + 1]:\n            min_moves += 1\n        else:\n            break\n\n    if min_moves >= k:\n        return str(min_moves)\n\n    max_moves = n - min_moves\n    target_moves = k - min_moves\n    if target_moves > max_moves:\n        return \"Impossible\"\n    return str(min_moves + target_moves)"
    },
    {
        "number": 4172,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    a.sort()\n    count = 0\n    unique = 1\n    min_moves = 0\n\n    for i in range(1, n):\n        if a[i] == a[i - 1]:\n            count += 1\n        else:\n            if count >= k:\n                min_moves += (unique - count)\n            count = 1\n            unique += 1\n\n    if count >= k:\n        min_moves += (unique - count)\n    else:\n        min_moves = -1\n\n    return str(min_moves)"
    },
    {
        "number": 4172,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    a.sort()\n    min_moves = 0\n    equal_elements = 0\n    for i in range(n):\n        if a[i] == a[i-1]:\n            continue\n        else:\n            equal_elements += 1\n            if equal_elements >= k:\n                break\n            min_moves += a[i] - a[i-1] - 1\n            if i != n-1 and a[i+1] - a[i] == 1:\n                equal_elements += 1\n            else:\n                min_moves += 1\n                equal_elements = 1\n    return str(min_moves)"
    },
    {
        "number": 4172,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, input().split()))\n\n    a.sort()\n    count = 1\n    i = 1\n\n    while count < k:\n        if a[i] != a[i - 1]:\n            count += 1\n        i += 1\n\n    return i - 1"
    },
    {
        "number": 4172,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    \n    a.sort()\n    count = 1\n    for i in range(1, n):\n        if a[i] == a[i-1]:\n            count += 1\n        else:\n            break\n    \n    if count >= k:\n        return \"0\"\n    \n    min_val = a[0]\n    max_val = a[-1]\n    min_count = a.count(min_val)\n    max_count = a.count(max_val)\n    \n    if min_count > max_count:\n        return str(min_count - k)\n    elif max_count > min_count:\n        return str(max_count - k)\n    else:\n        return \"0\"\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4172,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, input().split()))\n\n    a.sort()\n    min_moves = 0\n    count = 1\n\n    for i in range(n):\n        if a[i] == a[i + 1]:\n            count += 1\n        else:\n            min_moves += max(0, k - count)\n            count = 1\n\n    min_moves += max(0, k - count)\n\n    return str(min_moves)\n\ndef"
    },
    {
        "number": 4172,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    \n    count_dict = {}\n    for num in a:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    max_count = 0\n    for count in count_dict.values():\n        max_count = max(max_count, count)\n    \n    return str(max(max_count - 1, 0))\n\ndef"
    },
    {
        "number": 4172,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().strip().split())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    a.sort()\n\n    count_min = a.count(a[0])\n    count_max = a.count(a[-1])\n\n    if count_min >= k:\n        return str(0)\n\n    if count_max >= k:\n        return str(0)\n\n    min_value = a[0]\n    max_value = a[-1]\n\n    min_count = 0\n    max_count = 0\n\n    for i in range(n):\n        if a[i] == min_value:\n            min_count += 1\n        else:\n            break\n\n    for i in range(n - 1, -1, -1):\n        if a[i] == max_value:\n            max_count += 1\n        else:\n            break\n\n    if min_count >= k and max_count >= k:\n        return str(0)\n\n    if min_count < k and max_count < k:\n        return str(max(min_count, max_count))\n\n    if min_count >= k:\n        return str(max_count)\n    else:\n        return str(min_count)\n\n\ninput_data = \"\"\"6 5\n1 2 2 4 2 3\n7 5\n3 3 2 1 1 1 3\"\"\"\nprint(solution(input_data)) "
    },
    {
        "number": 4173,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.split('\\n')[0])\n    outputs = []\n\n    for i in range(queries):\n        n, a, b = map(int, stdin.split('\\n')[i+1].split())\n        bottle_1_count = n // 1\n        bottle_2_count = (n - bottle_1_count) // 2\n\n        total_cost = bottle_1_count * a + bottle_2_count * b\n        outputs.append(total_cost)\n\n    return '\\n'.join(map(str, outputs))"
    },
    {
        "number": 4173,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    queries = stdin.split('\\n')\n    q = int(queries.pop(0))\n    output = []\n    \n    for i in range(q):\n        n, a, b = map(int, queries[i].split())\n        min_burles = float('inf')\n        \n        for bottle_type in (1, 2):\n            bottle_count = n // bottle_type\n            if bottle_count * bottle_type < n:\n                bottle_count += 1\n            min_burles = min(min_burles, bottle_count * (a if bottle_type == 1 else b))\n        \n        output.append(min_burles)\n    \n    return '\\n'.join(map(str, output))\n"
    },
    {
        "number": 4173,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    queries = []\n    lines = stdin.split('\\n')\n    q = int(lines[0])\n\n    for i in range(1, q+1):\n        n, a, b = map(int, lines[i].split())\n        queries.append((n, a, b))\n\n    def min_cost(n: int, a: int, b: int) -> int:\n        if n <= 2:\n            return n * min(a, b)\n\n        bottles_1 = n // 2\n        bottles_2 = n - bottles_1\n        return bottles_1 * a + bottles_2 * b\n\n    result = [min_cost(n, a, b) for n, a, b in queries]\n    return '\\n'.join(map(str, result))\n\nstdin = \"\"\"4\n10 1 3\n7 3 2\n1 1000 1\n1000000000000 42 88\"\"\"\nprint(solution(stdin)) "
    },
    {
        "number": 4173,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n_queries = int(stdin.split('\\n', 1)[0])\n    queries = stdin.split('\\n')[1:]\n    results = []\n    \n    for query in queries:\n        n, a, b = map(int, query.split())\n        \n        if n % 2 == 0:\n            results.append(a * (n // 2) + b * (n // 2))\n        else:\n            results.append(a * ((n + 1) // 2) + b * ((n - 1) // 2))\n    \n    return '\\n'.join(map(str, results))"
    },
    {
        "number": 4173,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split('\\n')[0])\n    result = []\n\n    for _ in range(q):\n        n, a, b = map(int, stdin.split('\\n')[1].split())\n\n        if n % 2 == 0:\n            result.append(a * (n // 2) + b * (n // 2))\n        else:\n            result.append(a * (n // 2) + b * ((n // 2) + 1))\n\n    return '\\n'.join(map(str, result))\n\ninput_string = \"\"\"4\n10 1 3\n7 3 2\n1 1000 1\n1000000000000 42 88\"\"\"\n\nprint(solution(input_string)) "
    },
    {
        "number": 4173,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split('\\n')[0])\n    results = []\n    \n    for i in range(1, q + 1):\n        n, a, b = map(int, stdin.split('\\n')[i].split())\n        bottles_1 = n // 1\n        bottles_2 = (n - bottles_1) // 2\n        price = bottles_1 * a + bottles_2 * b\n        results.append(price)\n    \n    return '\\n'.join(map(str, results))"
    },
    {
        "number": 4173,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    for _ in range(q):\n        n, a, b = map(int, stdin.readline().strip().split())\n        if n > 1:\n            if n % 2 == 0:\n                print((n // 2) * b)\n            else:\n                print((n // 2) * b + a)\n        else:\n            print(a)\n    return \"\""
    },
    {
        "number": 4173,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.readline().strip())\n    result = []\n\n    for _ in range(queries):\n        n, a, b = map(int, stdin.readline().strip().split())\n        liters_first_bottle = a\n        liters_second_bottle = b\n        bottles_first_bottle = n // liters_first_bottle\n        bottles_second_bottle = (n - bottles_first_bottle * liters_first_bottle) // liters_second_bottle\n\n        total_cost = bottles_first_bottle * a + bottles_second_bottle * b\n        result.append(total_cost)\n\n    return \"\\n\".join(map(str, result))"
    },
    {
        "number": 4173,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    results = []\n\n    for _ in range(q):\n        n, a, b = map(int, stdin.readline().split())\n\n        bottle_count_1 = n // 1\n        bottle_count_2 = (n - bottle_count_1) // 2\n\n        total_cost = bottle_count_1 * a + bottle_count_2 * b\n        results.append(str(total_cost))\n\n    return \"\\n\".join(results)\n\ninput_data = \"\"\"4\n10 1 3\n7 3 2\n1 1000 1\n1000000000000 42 88\"\"\"\n\nresult = solution(input_data)\nprint(result) "
    },
    {
        "number": 4173,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    result = []\n    \n    for _ in range(q):\n        n, a, b = map(int, stdin.readline().split())\n        \n        if n % 2 == 0:\n            result.append((n // 2) * a)\n        else:\n            result.append((n // 2) * a + b)\n    \n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 4174,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(x) for x in stdin.split()]\n    L = [int(x) for x in stdin.split()[2:]]\n    count = 0\n    for i in range(1, n+1):\n        d_i = sum(L[:i])\n        if d_i <= x:\n            count += 1\n    return str(count)\n\ninput_str = \"3 6\\n3 4 5\"\nprint(solution(input_str)) "
    },
    {
        "number": 4174,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split()[0:2])\n    l = list(map(int, stdin.split()[2:]))\n    \n    bounces = [0] * (n + 1)\n    bounces[0] = 0\n    \n    for i in range(1, n + 1):\n        bounces[i] = bounces[i - 1] + l[i - 1]\n    \n    count = 0\n    for b in bounces:\n        if b <= x:\n            count += 1\n    \n    return str(count)"
    },
    {
        "number": 4174,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    L = list(map(int, input().split()))\n    \n    bounces = [0] * (n + 1)\n    bounces[0] = 0\n    \n    for i in range(1, n + 1):\n        bounces[i] = bounces[i-1] + L[i-1]\n        \n    count = 0\n    \n    for b in bounces:\n        if b <= x:\n            count += 1\n            \n    return str(count)"
    },
    {
        "number": 4174,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, x = map(int, lines[0].split())\n    l = list(map(int, lines[1].split()))\n\n    d = [0]\n    for i in range(1, n + 1):\n        d.append(d[i - 1] + l[i - 1])\n\n    count = 0\n    for i in range(1, n + 1):\n        if d[i] <= x:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4174,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def bounce_count(N: int, L: list[int], X: int) -> int:\n        D = 0\n        count = 0\n        for i in range(N + 1):\n            D += L[i]\n            if D <= X:\n                count += 1\n        return count\n\n    N, X = map(int, stdin.split()[:2])\n    L = list(map(int, stdin.split()[2:]))\n\n    return str(bounce_count(N, L, X))"
    },
    {
        "number": 4174,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split()[:2])\n    ls = list(map(int, stdin.split()[2:]))\n    \n    count = 0\n    d = 0\n    \n    for l in ls:\n        d += l\n        if d <= x:\n            count += 1\n    \n    return str(count)"
    },
    {
        "number": 4174,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, X = map(int, stdin.split()[0].split(' '))\n    L = list(map(int, stdin.split()[1].split(' ')))\n\n    # initialize variables\n    bounces = 0\n    D = 0\n\n    # loop through all bounces\n    for i in range(N + 1):\n        D += L[i]\n\n        # check if bounce coordinate is at most X\n        if D <= X:\n            bounces += 1\n\n    return str(bounces)"
    },
    {
        "number": 4174,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, x = map(int, stdin.split()[0].split(' '))\n    ls = list(map(int, stdin.split()[1].split(' ')))\n    \n    # Calculate coordinates\n    ds = [0] + list(accumulate(ls))\n    \n    # Count number of bounces\n    count = 0\n    for d in ds:\n        if d <= x:\n            count += 1\n            \n    return str(count)"
    },
    {
        "number": 4174,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    L = list(map(int, input().split()))\n    \n    # initialize variables\n    count = 0\n    D = 0\n    \n    # loop through the number of bounces\n    for i in range(N+1):\n        # calculate the next coordinate\n        D += L[i-1]\n        \n        # check if the coordinate is at most X\n        if D <= X:\n            count += 1\n    \n    return str(count)"
    },
    {
        "number": 4174,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split()[0:2])\n    l_list = list(map(int, stdin.split()[2:]))\n    d_list = [0]\n    \n    for i in range(n):\n        d_list.append(d_list[-1] + l_list[i])\n    \n    count = 0\n    \n    for d in d_list:\n        if d <= x:\n            count += 1\n    \n    return str(count)"
    },
    {
        "number": 4175,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split(\"\\n\")\n    if len(words) < 2:\n        return \"No\"\n    \n    n = int(words[0])\n    if n < 2 or n > 100:\n        return \"No\"\n    \n    last_char = \"\"\n    word_set = set()\n    \n    for i in range(1, n+1):\n        word = words[i]\n        if not word.isalpha() or not word.islower() or not (1 <= len(word) <= 10):\n            return \"No\"\n        \n        if word in word_set:\n            return \"No\"\n        \n        if i == 1:\n            last_char = word[-1]\n        else:\n            if word[0] != last_char:\n                return \"No\"\n            \n            last_char = word[-1]\n        \n        word_set.add(word)\n    \n    return \"Yes\""
    },
    {
        "number": 4175,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split(\"\\n\")\n    n = int(words[0])\n    used_words = set()\n\n    for word in words[1:]:\n        if len(used_words) == 0 or word[0] == used_words[-1][-1]:\n            used_words.add(word)\n        else:\n            return \"No\"\n\n    if len(used_words) == n:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4175,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split(\"\\n\")\n    N = int(words[0])\n    words = words[1:]\n\n    if N != len(set(words)):\n        return \"No\"\n\n    for i in range(N - 1):\n        if words[i][-1] != words[i + 1][0]:\n            return \"No\"\n\n    return \"Yes\"\n\nstdin = \"4\\nhoge\\nenglish\\nhoge\\nenigma\"\nprint(solution(stdin)) "
    },
    {
        "number": 4175,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split(\"\\n\")\n    N = int(words[0])\n    prev_word = \"\"\n    seen_words = set()\n\n    for i in range(1, N + 1):\n        word = words[i]\n        if word in seen_words:\n            return \"No\"\n        if not prev_word or prev_word[-1] != word[0]:\n            return \"No\"\n        seen_words.add(word)\n        prev_word = word\n\n    return \"Yes\""
    },
    {
        "number": 4175,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split(\"\\n\")\n    n = int(words[0])\n    words = words[1:]\n\n    if len(words) != n:\n        return \"No\"\n\n    for i in range(1, n):\n        if words[i] in words[:i]:\n            return \"No\"\n        if words[i - 1][-1] != words[i][0]:\n            return \"No\"\n\n    return \"Yes\"\n\ndef"
    },
    {
        "number": 4175,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split('\\n')\n    num_words = int(words[0])\n    used_words = set()\n    prev_word = \"\"\n\n    for i in range(1, num_words + 1):\n        word = words[i]\n        if word in used_words:\n            return \"No\"\n        if i == 1:\n            used_words.add(word)\n            prev_word = word[-1]\n        else:\n            if word[0] != prev_word:\n                return \"No\"\n            used_words.add(word)\n            prev_word = word[-1]\n\n    return \"Yes\"\n\ninput_str = '''4\nhoge\nenglish\nhoge\nenigma'''\n\nprint(solution(input_str)) "
    },
    {
        "number": 4175,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split('\\n')\n    N = int(words[0])\n    words = words[1:]\n\n    if len(words) != N:\n        return \"No\"\n\n    for i in range(N):\n        for j in range(i + 1, N):\n            if words[i][0] == words[j][-1] and words[i] == words[j]:\n                return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4175,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split(\"\\n\")[1:]\n    if len(words) != int(words[0]):\n        return \"No\"\n\n    for i in range(1, len(words)):\n        if words[i] == words[i - 1]:\n            return \"No\"\n        if words[i][0] != words[i - 1][-1]:\n            return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4175,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split('\\n')\n    N = int(words[0])\n    used_words = set()\n    last_char = ''\n\n    for i in range(1, N + 1):\n        word = words[i]\n        if word in used_words:\n            return 'No'\n        if not word[0].isalpha() or not word[-1].isalpha() or word[0].isupper() or word[-1].isupper():\n            return 'No'\n        if i == 1:\n            last_char = word[-1]\n        elif word[0].lower() != last_char:\n            return 'No'\n        else:\n            last_char = word[-1]\n        used_words.add(word)\n\n    return 'Yes'"
    },
    {
        "number": 4175,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split('\\n')\n    num_words = int(words[0])\n    announced_words = set()\n    \n    for i in range(1, num_words+1):\n        word = words[i]\n        if word in announced_words:\n            return \"No\"\n        \n        if i > 1 and word[0] != words[i-2][-1]:\n            return \"No\"\n        \n        announced_words.add(word)\n    \n    return \"Yes\""
    },
    {
        "number": 4176,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    min_pieces = min(A, B) * min(A, B)\n    return str(min_pieces)"
    },
    {
        "number": 4176,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        raise ValueError(\"A and B cannot be the same value\")\n    pieces = max(a, b) * 2\n    return str(pieces)"
    },
    {
        "number": 4176,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(min(A * B, (A + B) // 2 * max(A, B)))"
    },
    {
        "number": 4176,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    min_pieces = max(A, B)\n    result = min_pieces * (min_pieces // 2)\n    return str(result)"
    },
    {
        "number": 4176,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A > B:\n        A, B = B, A\n    min_pieces = (A * (A + 1)) // 2\n    return str(min_pieces)"
    },
    {
        "number": 4176,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == B:\n        return \"Not possible\"\n    elif A > B:\n        A, B = B, A\n    pieces = (A * B) // gcd(A, B)\n    return str(pieces)\n\ndef"
    },
    {
        "number": 4176,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.split()))\n    return str(min(A+B, (A*B)//max(A,B)))\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4176,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(min(A*B, (A+B)//2))"
    },
    {
        "number": 4176,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == B:\n        return \"Invalid input. A and B cannot be equal.\"\n    elif A > B:\n        return str(A)\n    else:\n        return str(B)"
    },
    {
        "number": 4176,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    min_pieces = min(A, B) * 2\n    return str(min_pieces)"
    },
    {
        "number": 4177,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"xxxxxx\""
    },
    {
        "number": 4177,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\".join(\"x\" for _ in stdin)"
    },
    {
        "number": 4177,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\".join(\"x\" for char in stdin)"
    },
    {
        "number": 4177,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\".join(['x' for _ in stdin])"
    },
    {
        "number": 4177,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"xxxxxxx\""
    },
    {
        "number": 4177,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Replace every character in S with x and print the result.\n\n    Args:\n        stdin: A string representing the input string S.\n\n    Returns:\n        A string representing the result after replacing every character with x.\n    \"\"\"\n    result = \"\"\n    for char in stdin:\n        result += \"x\"\n    return result\n"
    },
    {
        "number": 4177,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    result = \"\"\n    for i in range(len(s)):\n        result += \"x\"\n    return result"
    },
    {
        "number": 4177,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"xxxxxxx\""
    },
    {
        "number": 4177,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"xxxxxxx\"\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4177,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"xxxxxx\""
    },
    {
        "number": 4178,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *H = map(int, stdin.split())\n    for i in range(1, N):\n        if H[i] < H[i-1]:\n            H[i-1] -= 1\n    if all(H[i] <= H[i-1] for i in range(1, N)):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4178,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, *heights = stdin.split()\n    N = int(N)\n    heights = list(map(int, heights))\n\n    for i in range(1, N):\n        if heights[i] < heights[i - 1]:\n            heights[i] = heights[i - 1]\n\n    for i in range(1, N):\n        if heights[i] < heights[i - 1]:\n            return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4178,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    heights = list(map(int, lines[1].split()))\n\n    if n == 1:\n        return \"Yes\"\n\n    decremented = False\n    for i in range(1, n):\n        if heights[i] < heights[i - 1]:\n            heights[i] -= 1\n            decremented = True\n\n    if decremented and all(heights[i] <= heights[i + 1] for i in range(n - 1)):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4178,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    heights = list(map(int, lines[1].split()))\n\n    for i in range(1, N):\n        if heights[i] < heights[i-1]:\n            heights[i] += 1\n            if heights[i] < heights[i-1]:\n                return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4178,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    heights = list(map(int, lines[1].split()))\n\n    for i in range(1, N):\n        if heights[i] < heights[i - 1]:\n            heights[i - 1] -= 1\n        else:\n            heights[i] = heights[i - 1] + 1\n\n    if all(heights[i] <= heights[i - 1] for i in range(1, N)):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4178,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n, *heights = list(map(int, stdin.split()))\n\n    # Check if heights are non-decreasing\n    for i in range(1, n):\n        if heights[i] < heights[i-1]:\n            # Decrease height of the i-th square by 1\n            heights[i-1] -= 1\n            # Recheck heights\n            for j in range(i+1, n):\n                if heights[j] < heights[j-1]:\n                    return \"No\"\n            break\n    return \"Yes\""
    },
    {
        "number": 4178,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, *heights = map(int, stdin.split())\n\n    if len(heights) != N:\n        return \"No\"\n\n    for i in range(1, N):\n        if heights[i] < heights[i - 1]:\n            heights[i] += 1\n\n    for i in range(1, N):\n        if heights[i] < heights[i - 1]:\n            return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4178,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *heights = map(int, stdin.split())\n    if len(heights) != n:\n        raise ValueError(\"Invalid input\")\n\n    if n == 1:\n        return \"Yes\"\n\n    for i in range(1, n):\n        if heights[i] < heights[i - 1]:\n            heights[i] = heights[i - 1]\n\n    for i in range(n - 1):\n        if heights[i] >= heights[i + 1]:\n            return \"Yes\"\n\n    return \"No\""
    },
    {
        "number": 4178,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    H = [int(x) for x in lines[1].split()]\n\n    for i in range(1, N):\n        if H[i] < H[i-1]:\n            H[i-1] -= 1\n\n    for i in range(N-1):\n        if H[i] >= H[i+1]:\n            return \"Yes\"\n\n    return \"No\""
    },
    {
        "number": 4178,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    heights = [int(x) for x in lines[1].split(' ')]\n\n    for i in range(1, N):\n        if heights[i-1] >= heights[i]:\n            heights[i-1] -= 1\n        elif heights[i-1] < heights[i]:\n            return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4179,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, C = map(int, stdin.split()[:3])\n    B = list(map(int, stdin.split()[3:3+M]))\n    A = list(map(int, stdin.split()[3+M:]))\n    A = [list(map(int, A[i:i+M])) for i in range(0, len(A), M)]\n    count = 0\n    \n    for i in range(N):\n        result = sum([A[i][j] * B[j] for j in range(M)]) + C\n        if result > 0:\n            count += 1\n    \n    return str(count)"
    },
    {
        "number": 4179,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N, M, C = map(int, lines[0].split())\n    B = list(map(int, lines[1].split()))\n    A = [list(map(int, line.split())) for line in lines[2:]]\n\n    correct_codes = 0\n    for a in A:\n        if sum(b * a_i for b, a_i in zip(B, a)) + C > 0:\n            correct_codes += 1\n\n    return str(correct_codes)"
    },
    {
        "number": 4179,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n, m, c = map(int, lines[0].split())\n    b = list(map(int, lines[1].split()))\n    a = [list(map(int, line.split())) for line in lines[2:]]\n\n    correct_codes = 0\n    for code in a:\n        sum_ = sum([code[i] * b[i] for i in range(m)]) + c\n        if sum_ > 0:\n            correct_codes += 1\n\n    return str(correct_codes)"
    },
    {
        "number": 4179,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def calculate_code_result(code: List[int], B: List[int]) -> int:\n        return sum(a * b for a, b in zip(code, B)) + C\n\n    N, M, C = map(int, stdin.split('\\n')[0].split())\n    B = list(map(int, stdin.split('\\n')[1].split()))\n    A = [list(map(int, stdin.split('\\n')[i + 2].split())) for i in range(N)]\n\n    correct_codes = sum(calculate_code_result(code, B) > 0 for code in A)\n\n    return str(correct_codes)"
    },
    {
        "number": 4179,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N, M, C = map(int, lines[0].split())\n    B = list(map(int, lines[1].split()))\n    A = [list(map(int, line.split())) for line in lines[2:]]\n    \n    count = 0\n    for i in range(N):\n        if sum([A[i][j] * B[j] for j in range(M)]) + C > 0:\n            count += 1\n    \n    return str(count)"
    },
    {
        "number": 4179,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N, M, C = map(int, lines[0].split())\n    B = list(map(int, lines[1].split()))\n    A = [list(map(int, lines[i+2].split())) for i in range(N)]\n\n    correct_codes = 0\n\n    for i in range(N):\n        total = 0\n        for j in range(M):\n            total += A[i][j] * B[j]\n        if total + C > 0:\n            correct_codes += 1\n\n    return str(correct_codes)"
    },
    {
        "number": 4179,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N, M, C = map(int, lines[0].split())\n    B = list(map(int, lines[1].split()))\n    codes = []\n    for i in range(2, len(lines)):\n        A = list(map(int, lines[i].split()))\n        codes.append(A)\n\n    correct_codes = 0\n    for code in codes:\n        if sum([code[i] * B[i] for i in range(M)]) + C > 0:\n            correct_codes += 1\n\n    return str(correct_codes)"
    },
    {
        "number": 4179,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N, M, C = map(int, lines[0].split())\n    B = list(map(int, lines[1].split()))\n    A = []\n    for i in range(2, N + 2):\n        A.append(list(map(int, lines[i].split())))\n\n    count = 0\n    for i in range(N):\n        total = C\n        for j in range(M):\n            total += A[i][j] * B[j]\n        if total > 0:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4179,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    N, M, C = map(int, lines[0].split())\n    B = list(map(int, lines[1].split()))\n    A = []\n    for i in range(2, N+2):\n        A.append(list(map(int, lines[i].split())))\n    \n    def correct_codes(A, B, C):\n        count = 0\n        for i in range(N):\n            code = sum([A[i][j]*B[j] for j in range(M)]) + C\n            if code > 0:\n                count += 1\n        return count\n    \n    return str(correct_codes(A, B, C))\n\ninput_str = \"\"\"2 3 -10\n1 2 3\n3 2 1\n1 2 2\"\"\"\nprint(solution(input_str)) "
    },
    {
        "number": 4179,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    n, m, c = map(int, lines[0].split())\n    b = list(map(int, lines[1].split()))\n    codes = []\n    for line in lines[2:]:\n        codes.append(list(map(int, line.split())))\n\n    correct_codes = 0\n    for code in codes:\n        result = sum([code[i] * b[i] for i in range(m)]) + c\n        if result > 0:\n            correct_codes += 1\n\n    return str(correct_codes)"
    },
    {
        "number": 4180,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    hundred_bill = 1000\n    change = 0\n    count = n // hundred_bill\n    change = n % hundred_bill\n\n    return str(change)"
    },
    {
        "number": 4180,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    bills = [1000, 500, 100, 50, 10, 5, 1]\n    change = 0\n\n    for bill in bills:\n        while N >= bill:\n            change += bill\n            N -= bill\n\n    return str(change)"
    },
    {
        "number": 4180,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Convert input string to integer\n    N = int(stdin.strip())\n\n    # Calculate the minimum number of bills required\n    count_1000 = N // 1000\n    count_500 = (N % 1000) // 500\n    count_100 = (N % 1000) % 500 // 100\n    count_50 = ((N % 1000) % 500) % 100 // 50\n    count_10 = ((N % 1000) % 500) % 100 % 50 // 10\n\n    # Calculate the amount of change\n    change = 1000 * count_1000 + 500 * count_500 + 100 * count_100 + 50 * count_50 + 10 * count_10\n\n    # Return the amount of change as a string\n    return str(N - change)"
    },
    {
        "number": 4180,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    # Calculate the change\n    change = N - 1000\n    if change >= 0:\n        change += 1000\n        change -= 1000\n\n    # Calculate the number of bills\n    count = change // 1000\n\n    return str(count)"
    },
    {
        "number": 4180,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    change = 0\n    bills = [500, 100, 50, 10, 5, 1]\n    for bill in bills:\n        while N >= bill:\n            N -= bill\n            change += bill\n    return str(change)"
    },
    {
        "number": 4180,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    total_yen = 0\n    count_1000 = 0\n    count_500 = 0\n    count_100 = 0\n    count_50 = 0\n    count_10 = 0\n    count_5 = 0\n\n    if N >= 10000:\n        count_10000 = N // 10000\n        N -= count_10000 * 10000\n    if N >= 5000:\n        count_5000 = N // 5000\n        N -= count_5000 * 5000\n    if N >= 2000:\n        count_2000 = N // 2000\n        N -= count_2000 * 2000\n    if N >= 1000:\n        count_1000 = N // 1000\n        N -= count_1000 * 1000\n    if N >= 500:\n        count_500 = N // 500\n        N -= count_500 * 500\n    if N >= 100:\n        count_100 = N // 100\n        N -= count_100 * 100\n    if N >= 50:\n        count_50 = N // 50\n        N -= count_50 * 50\n    if N >= 10:\n        count_10 = N // 10\n        N -= count_10 * 10\n    if N >= 5:\n        count_5 = N // 5\n        N -= count_5 * 5\n\n    total_yen = count_1000 * 1000 + count_500 * 500 + count_100 * 100 + count_50 * 50 + count_10 * 10 + count_5 * 5\n\n    return str(total_yen)"
    },
    {
        "number": 4180,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    change = N % 1000\n    num_of_bills = N // 1000\n    if change == 0:\n        return f\"{num_of_bills}\"\n    else:\n        return f\"{num_of_bills+1}\"\n\ndef"
    },
    {
        "number": 4180,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    bills = [1000, 500, 100, 50, 10, 5, 1]\n    change = 0\n\n    for bill in bills:\n        change += N // bill\n        N %= bill\n\n    return str(change)"
    },
    {
        "number": 4180,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    bills = [1000, 500, 100, 50, 10, 5, 1]\n    change = 0\n\n    for bill in bills:\n        while N >= bill:\n            N -= bill\n            change += bill\n\n    return str(change)"
    },
    {
        "number": 4180,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    change = 0\n    bills = [500, 100, 50, 10, 5, 1]\n\n    for bill in bills:\n        count = stdin // bill\n        change += count * bill\n        stdin -= count * bill\n\n    return str(change)"
    },
    {
        "number": 4181,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N = int(lines[0])\n    A = list(map(int, lines[1].split()))\n    B = list(map(int, lines[2].split()))\n    \n    total_monsters = sum(A)\n    heroes_used = [False] * N\n    max_monsters = 0\n    \n    for i in range(N):\n        if not heroes_used[i]:\n            monsters_defeated = min(total_monsters, B[i])\n            max_monsters += monsters_defeated\n            total_monsters -= monsters_defeated\n            heroes_used[i] = True\n            if i + 1 < N and not heroes_used[i + 1]:\n                monsters_defeated = min(total_monsters, B[i + 1])\n                max_monsters += monsters_defeated\n                total_monsters -= monsters_defeated\n                heroes_used[i + 1] = True\n    \n    return str(max_monsters)"
    },
    {
        "number": 4181,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    A = [int(x) for x in lines[1].split()]\n    B = [int(x) for x in lines[2].split()]\n\n    max_monsters = 0\n    for i in range(N):\n        if A[i] + A[i+1] <= B[i]:\n            max_monsters += A[i] + A[i+1]\n        elif A[i] <= B[i]:\n            max_monsters += A[i]\n        elif A[i+1] <= B[i]:\n            max_monsters += A[i+1]\n        else:\n            max_monsters += B[i]\n\n    return str(max_monsters)"
    },
    {
        "number": 4181,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = stdin.split('\\n')\n    n = int(n)\n    a = list(map(int, a.split()))\n    b = list(map(int, b.split()))\n\n    max_monsters = 0\n    for i in range(n):\n        max_monsters += min(a[i], b[i])\n\n    return str(max_monsters)\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4181,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a_b_list = stdin.strip().split(\"\\n\")\n    n = int(n)\n    a_list, b_list = a_b_list.strip().split()\n    a_list = list(map(int, a_list.split()))\n    b_list = list(map(int, b_list.split()))\n\n    total_monsters = sum(a_list)\n    if total_monsters == 0:\n        return str(total_monsters)\n\n    a_list.pop()\n    b_list.pop()\n    max_monsters = 0\n\n    for i in range(n):\n        max_monsters += min(a_list[i], b_list[i] + b_list[i - 1] if i > 0 else b_list[i])\n\n    return str(max_monsters)"
    },
    {
        "number": 4181,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    A = [int(x) for x in lines[1].split()]\n    B = [int(x) for x in lines[2].split()]\n\n    max_monsters = 0\n    for i in range(N):\n        max_monsters += min(A[i], B[i] + B[i+1])\n\n    return str(max_monsters)"
    },
    {
        "number": 4181,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input and split it into two lists\n    n, *attacks = stdin.split()\n    n = int(n)\n    As = attacks[:n+1]\n    Bs = attacks[n+1:]\n    \n    # Convert the attack lists from strings to integers\n    As = list(map(int, As))\n    Bs = list(map(int, Bs))\n    \n    # Initialize the total monsters defeated and the index of the current town\n    total_monsters = 0\n    curr_town = 0\n    \n    # Iterate through the heroes and their maximum attacks\n    for hero_max_attacks in Bs:\n        # Calculate the maximum number of monsters that can be defeated in the current town\n        max_monsters = min(As[curr_town], As[curr_town+1], hero_max_attacks)\n        \n        # Add the maximum number of monsters to the total\n        total_monsters += max_monsters\n        \n        # Move to the next town\n        curr_town += 1\n    \n    return str(total_monsters)"
    },
    {
        "number": 4181,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    A = list(map(int, lines[1].split()))\n    B = list(map(int, lines[2].split()))\n    \n    total_monsters = 0\n    for i in range(N):\n        total_monsters += min(A[i], B[i])\n        total_monsters += min(A[i+1], B[i])\n    \n    return str(total_monsters)\n\ninput_str = \"\"\"\n2\n3 5 2\n4 5\n\"\"\"\nprint(solution(input_str)) # Output: 9 "
    },
    {
        "number": 4181,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    A = list(map(int, lines[1].split()))\n    B = list(map(int, lines[2].split()))\n    \n    # initialize variables\n    max_monsters = 0\n    i = 0\n    j = 1\n    \n    # iterate over all monsters\n    while i < N and j <= N:\n        # calculate the total number of monsters for the current town pair\n        total_monsters = A[i] + A[j]\n        \n        # calculate the maximum number of monsters that can be defeated\n        max_defeatable_monsters = min(total_monsters, B[i] + B[j - 1])\n        \n        # update the maximum number of monsters that can be defeated\n        max_monsters += max_defeatable_monsters\n        \n        # move to the next town pair\n        i += 1\n        j += 1\n    \n    return str(max_monsters)"
    },
    {
        "number": 4181,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *data = map(int, stdin.split())\n    a = data[:n+1]\n    b = data[n+1:]\n    max_monsters = 0\n    \n    for i in range(n):\n        monsters_to_defeat = min(a[i], b[i])\n        max_monsters += monsters_to_defeat\n        \n        if i+2 <= n+1:\n            monsters_to_defeat = min(a[i+1], b[i])\n            max_monsters += monsters_to_defeat\n    \n    return str(max_monsters)"
    },
    {
        "number": 4181,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    A = list(map(int, lines[1].split()))\n    B = list(map(int, lines[2].split()))\n    \n    # Calculate the maximum number of monsters that each hero can defeat\n    max_monsters = [min(A[i], B[i]) for i in range(N)]\n    \n    # Calculate the maximum number of monsters that the heroes can defeat\n    total_monsters = 0\n    for i in range(N):\n        total_monsters += max_monsters[i]\n        if i < N - 1 and A[i + 1] > max_monsters[i + 1]:\n            total_monsters += A[i + 1] - max_monsters[i + 1]\n    \n    return str(total_monsters)"
    },
    {
        "number": 4182,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    lines = stdin.split(\"\\n\")\n    N, M, X, Y = [int(x) for x in lines[0].split()]\n    x = [int(x) for x in lines[1].split()]\n    y = [int(x) for x in lines[2].split()]\n\n    # Check if war will break out\n    Z = X\n    while Z <= Y:\n        if Z not in x and Z not in y:\n            break\n        Z += 1\n\n    if Z > Y:\n        return \"War\"\n    else:\n        return \"No War\""
    },
    {
        "number": 4182,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    N, M, X, Y = map(int, stdin.split('\\n')[0].split())\n    x = list(map(int, stdin.split('\\n')[1].split()))\n    y = list(map(int, stdin.split('\\n')[2].split()))\n\n    # Sort the lists\n    x.sort()\n    y.sort()\n\n    # Initialize the low and high pointers for binary search\n    low = X + 1\n    high = Y\n\n    # Perform binary search to find Z\n    while low <= high:\n        mid = (low + high) // 2\n\n        # Check if Z satisfies all three conditions\n        if all(mid <= X for X in x) and all(mid > Y for Y in y):\n            return \"No War\"\n\n        # If Z doesn't satisfy the first condition, update the high pointer\n        if any(mid <= X for X in x):\n            low = mid + 1\n\n        # If Z doesn't satisfy the second condition, update the low pointer\n        if any(mid > Y for Y in y):\n            high = mid - 1\n\n    return \"War\""
    },
    {
        "number": 4182,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(Z: int, X: int, Y: int, x: list, y: list) -> bool:\n        if not (X < Z <= Y):\n            return False\n        if any(i >= Z for i in x) or any(i < Z for i in y):\n            return False\n        return True\n\n    def read_input(stdin: str) -> tuple:\n        N, M, X, Y = map(int, stdin.split()[:4])\n        x = list(map(int, stdin.split()[4:N+4]))\n        y = list(map(int, stdin.split()[N+4:]))\n        return N, M, X, Y, x, y\n\n    N, M, X, Y, x, y = read_input(stdin)\n    Z = X + 1\n    while is_valid(Z, X, Y, x, y):\n        Z += 1\n    return \"War\" if Z > Y else \"No War\""
    },
    {
        "number": 4182,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, M, X, Y = map(int, stdin.split()[:4])\n    xs = list(map(int, stdin.split()[4:4 + N]))\n    ys = list(map(int, stdin.split()[4 + N:]))\n    \n    # Sort cities by their coordinates\n    xs.sort()\n    ys.sort()\n    \n    # Check if war will break out\n    for Z in range(X + 1, Y):\n        if all(x < Z for x in xs) and all(y >= Z for y in ys):\n            return \"No War\"\n    return \"War\""
    },
    {
        "number": 4182,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input into lines\n    lines = stdin.strip().split('\\n')\n    \n    # Extract the input values\n    N, M, X, Y = map(int, lines[0].split())\n    x = list(map(int, lines[1].split()))\n    y = list(map(int, lines[2].split()))\n    \n    # Check if war will break out\n    Z = X + 1\n    while Z <= Y and all(i < Z for i in x) and all(i >= Z for i in y):\n        if Z == X:\n            break\n        Z += 1\n    \n    # Determine the output\n    if Z == X:\n        return \"No War\"\n    else:\n        return \"War\""
    },
    {
        "number": 4182,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y = map(int, stdin.split()[:4])\n    xs = list(map(int, stdin.split()[4:4+n]))\n    ys = list(map(int, stdin.split()[4+n:]))\n    \n    xs.sort()\n    ys.sort()\n    \n    for i in range(x, y):\n        if i not in xs and i not in ys:\n            print(\"No War\")\n            return\n    \n    print(\"War\")\n    return"
    },
    {
        "number": 4182,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input from standard input and split it into lines\n    lines = stdin.split(\"\\n\")\n    \n    # Parse the input\n    N, M, X, Y = [int(x) for x in lines[0].split()]\n    x_coordinates = [int(x) for x in lines[1].split()]\n    y_coordinates = [int(x) for x in lines[2].split()]\n    \n    # Check if there exists a Z that satisfies the conditions\n    for Z in range(X+1, Y):\n        if Z not in x_coordinates and Z not in y_coordinates:\n            # Found a Z that satisfies the conditions\n            return \"No War\"\n    \n    # War will break out\n    return \"War\""
    },
    {
        "number": 4182,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    N, M, X, Y = map(int, stdin.split()[:4])\n    xs = list(map(int, stdin.split()[4:N+4]))\n    ys = list(map(int, stdin.split()[4+N:]))\n\n    # Check if war will break out\n    z = None\n    for i in range(X, Y+1):\n        if all(i > x for x in xs) and all(i >= y for y in ys):\n            z = i\n            break\n\n    if z is not None:\n        return \"No War\"\n    else:\n        return \"War\""
    },
    {
        "number": 4182,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def check_war(Z: int) -> bool:\n        if X < Z <= Y and all(x < Z for x in x_coords) and all(y >= Z for y in y_coords):\n            return True\n        return False\n\n    # parse the input\n    lines = stdin.split(\"\\n\")\n    N, M, X, Y = map(int, lines[0].split())\n    x_coords = list(map(int, lines[1].split()))\n    y_coords = list(map(int, lines[2].split()))\n\n    # binary search for Z\n    left, right = X + 1, Y - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if check_war(mid):\n            return \"No War\"\n        elif all(x < mid for x in x_coords) and all(y >= mid for y in y_coords):\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return \"War\""
    },
    {
        "number": 4182,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, m, x, y = map(int, stdin.splitlines()[0].split())\n    xs = list(map(int, stdin.splitlines()[1].split()))\n    ys = list(map(int, stdin.splitlines()[2].split()))\n\n    # sort input lists\n    xs.sort()\n    ys.sort()\n\n    # check if war will break out\n    for z in range(x + 1, y):\n        if z not in xs and z not in ys:\n            return \"No War\"\n\n    return \"War\""
    },
    {
        "number": 4183,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split('\\n')\n    num_clocks = int(input_lines[0])\n    clock_times = [int(time) for time in input_lines[1:]]\n\n    lcm = min(clock_times)\n    for time in clock_times:\n        lcm = lcm * time // math.gcd(lcm, time)\n\n    return str(lcm)"
    },
    {
        "number": 4183,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    clocks, times = map(int, stdin.split('\\n'))\n    times = list(map(int, times.split()))\n    max_time = max(times)\n    result = max_time * len(times)\n    return str(result)"
    },
    {
        "number": 4183,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # read input from stdin\n    N, *T = map(int, stdin.split())\n\n    # calculate the LCM (Least Common Multiple) of the T values\n    lcm = T[0]\n    for i in range(1, N):\n        lcm = (lcm * T[i]) // math.gcd(lcm, T[i])\n\n    # calculate the number of seconds until the hands of all clocks point directly upward again\n    seconds = lcm\n\n    return str(seconds)"
    },
    {
        "number": 4183,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    T = list(map(int, lines[1:]))\n    gcd = T[0]\n\n    for i in range(1, N):\n        gcd = math.gcd(gcd, T[i])\n\n    return str(math.lcm(*T) // gcd)"
    },
    {
        "number": 4183,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    num_clocks = int(lines[0])\n    clock_times = [int(x) for x in lines[1:]]\n\n    lcm = 1\n    for t in clock_times:\n        lcm = lcm * t // math.gcd(lcm, t)\n\n    return str(lcm)\n\ninput_str = \"\"\"2\n2\n3\"\"\"\nprint(solution(input_str)) # Output: 6 "
    },
    {
        "number": 4183,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a: int, b: int) -> int:\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a: int, b: int) -> int:\n        return a * b // gcd(a, b)\n\n    N, *T = map(int, stdin.split())\n    lcm_of_T = 1\n    for t in T:\n        lcm_of_T = lcm(lcm_of_T, t)\n\n    return str(lcm_of_T)"
    },
    {
        "number": 4183,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    clocks, *times = stdin.split()\n    clocks = int(clocks)\n    times = [int(time) for time in times]\n\n    total = 1\n    for time in times:\n        if time % clocks == 0:\n            total *= time // clocks\n        else:\n            total *= (time // clocks) + 1\n\n    return str(total)"
    },
    {
        "number": 4183,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    num_clocks = int(lines[0])\n    clock_times = list(map(int, lines[1:]))\n\n    lcm = 1\n    for time in clock_times:\n        lcm = lcm * time // math.gcd(lcm, time)\n\n    return str(lcm)"
    },
    {
        "number": 4183,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    num_clocks = int(lines[0])\n    time_values = [int(line) for line in lines[1:]]\n\n    gcd = time_values[0]\n    for time in time_values:\n        gcd = math.gcd(gcd, time)\n\n    return str(max(time_values) // gcd)"
    },
    {
        "number": 4183,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, *T = map(int, stdin.split())\n    if N != len(T):\n        raise ValueError(\"Number of clocks and time values do not match\")\n\n    gcd = T[0]\n    for t in T:\n        gcd = math.gcd(gcd, t)\n\n    return str(max(T) // gcd * gcd)"
    },
    {
        "number": 4184,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip().split(\"\\n\")[0])\n    weights = list(map(int, stdin.strip().split(\"\\n\")[1].split()))\n\n    min_difference = float('inf')\n    for t in range(1, N):\n        s1 = sum(weights[:t])\n        s2 = sum(weights[t:])\n        difference = abs(s1 - s2)\n        if difference < min_difference:\n            min_difference = difference\n\n    return str(min_difference)"
    },
    {
        "number": 4184,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, weights = stdin.split('\\n')[1].split()\n    weights = [int(w) for w in weights]\n    N = int(N)\n    T = N // 2\n    min_diff = float('inf')\n\n    for i in range(T+1):\n        S_1 = sum(weights[:i])\n        S_2 = sum(weights[i:])\n        diff = abs(S_1 - S_2)\n        if diff < min_diff:\n            min_diff = diff\n\n    return str(min_diff)"
    },
    {
        "number": 4184,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    weights = list(map(int, stdin.split()[1:]))\n    min_diff = float('inf')\n\n    for T in range(2, N):\n        sum_weights_1 = sum(weights[:T])\n        sum_weights_2 = sum(weights[T:])\n        diff = abs(sum_weights_1 - sum_weights_2)\n        min_diff = min(min_diff, diff)\n\n    return str(min_diff)"
    },
    {
        "number": 4184,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, weights = int(stdin.split('\\n')[0]), stdin.split('\\n')[1].split()\n    weights = [int(weight) for weight in weights]\n\n    min_diff = float('inf')\n\n    for T in range(1, N):\n        S_1 = sum(weights[:T])\n        S_2 = sum(weights[T:])\n        diff = abs(S_1 - S_2)\n        min_diff = min(min_diff, diff)\n\n    return str(min_diff)"
    },
    {
        "number": 4184,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, weights = stdin.split('\\n')\n    N = int(N)\n    weights = list(map(int, weights.split()))\n\n    min_diff = float('inf')\n    for T in range(1, N):\n        s1 = sum(weights[:T])\n        s2 = sum(weights[T:])\n        diff = abs(s1 - s2)\n        min_diff = min(min_diff, diff)\n\n    return str(min_diff)\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4184,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    We can solve this problem using dynamic programming.\n    Let's create a function f(i, t) that returns the minimum possible absolute difference of S_1 and S_2 if we consider the weights from 1 to i and the division point is t.\n    Then we can find the minimum possible absolute difference of S_1 and S_2 by considering all possible values of t and finding the minimum value of f(N, t).\n\n    The function f can be defined as follows:\n    - if i = 1, f(1, t) = 0\n    - if i > 1 and t = 1, f(i, 1) = S_1\n    - if i > 1 and t = i, f(i, i) = S_2\n    - if i > 1 and t > 1 and t < i, f(i, t) = min(f(i - 1, t - 1) + W_i, f(i - 1, t) + W_i)\n\n    Then the minimum possible absolute difference of S_1 and S_2 can be found as the minimum value of f(N, t) for all t from 1 to N - 1.\n    \"\"\"\n    N, weights = parse_input(stdin)\n    f = [[0] * (N + 1) for _ in range(N + 1)]\n\n    for i in range(1, N + 1):\n        for t in range(1, N + 1):\n            if i == 1:\n                f[i][t] = 0\n            elif t == 1:\n                f[i][t] = sum(weights[:i])\n            elif t == i:\n                f[i][t] = sum(weights[i - 1:])\n            else:\n                f[i][t] = min(f[i - 1][t - 1] + weights[i - 1], f[i - 1][t] + weights[i - 1])\n\n    result = min(f[N][t] for t in range(1, N))\n    return str(abs(result))\n\ndef"
    },
    {
        "number": 4184,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, weights = stdin.split()\n    n = int(n)\n    weights = [int(w) for w in weights.split()]\n\n    min_diff = float('inf')\n    for t in range(1, n):\n        sum_1 = sum(weights[:t])\n        sum_2 = sum(weights[t:])\n        diff = abs(sum_1 - sum_2)\n        min_diff = min(min_diff, diff)\n\n    return str(min_diff)\n\ndef"
    },
    {
        "number": 4184,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    weights = list(map(int, stdin.split(\"\\n\")[1].split()))\n    min_difference = float(\"inf\")\n\n    for T in range(1, N):\n        S1 = sum(weights[:T])\n        S2 = sum(weights[T:])\n        difference = abs(S1 - S2)\n        min_difference = min(min_difference, difference)\n\n    return str(min_difference)"
    },
    {
        "number": 4184,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, weights = stdin.split()\n    n = int(n)\n    weights = list(map(int, weights.split()))\n\n    min_diff = float('inf')\n\n    for t in range(1, n):\n        s1 = sum(weights[:t])\n        s2 = sum(weights[t:])\n        diff = abs(s1 - s2)\n        min_diff = min(min_diff, diff)\n\n    return str(min_diff)"
    },
    {
        "number": 4184,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    weights = [int(x) for x in lines[1].split()]\n\n    min_difference = float('inf')\n\n    for t in range(1, n):\n        s1 = sum(weights[:t])\n        s2 = sum(weights[t:])\n        abs_diff = abs(s1 - s2)\n        min_difference = min(min_difference, abs_diff)\n\n    return str(min_difference)"
    },
    {
        "number": 4185,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    matrix = []\n    for i in range(n):\n        matrix.append(list(map(int, input().split())))\n\n    min_moves = 0\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if matrix[i - 1][j - 1] != (i - 1) * m + j:\n                min_moves += 1\n\n    return str(min_moves)\n\ninput_data = int(input())\ninput_str = \"\"\nfor i in range(input_data):\n    input_str += input() + \"\\n\"\n\noutput = solution(input_str)\nprint(output) "
    },
    {
        "number": 4185,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, m = map(int, lines[0].split())\n    matrix = [list(map(int, lines[i].split())) for i in range(1, n+1)]\n    min_moves = 0\n    \n    for i in range(1, m+1):\n        column = [matrix[j][i-1] for j in range(n)]\n        sorted_column = sorted(column)\n        moves = sum(abs(column.index(x) - sorted_column.index(x)) for x in column)\n        min_moves += moves\n    \n        # Cyclic shift the column\n        column[0], column[-1] = column[-1], column[0]\n        for i in range(1, n):\n            matrix[i-1][m-1], matrix[i][m-1] = matrix[i][m-1], matrix[i-1][m-1]\n    \n    return str(min_moves)"
    },
    {
        "number": 4185,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    matrix = []\n    for i in range(n):\n        matrix.append(list(map(int, stdin.split()[2:m + 2])))\n\n    # Check if the matrix is already good\n    good = True\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] != (i * m + j) % (n * m + 1):\n                good = False\n                break\n        if not good:\n            break\n\n    if good:\n        return \"0\"\n\n    # Calculate the minimum number of moves required\n    moves = 0\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] != (i * m + j) % (n * m + 1):\n                moves += abs(matrix[i][j] - (i * m + j) % (n * m + 1))\n\n    return str(moves)"
    },
    {
        "number": 4185,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    matrix = [list(map(int, line.split())) for line in stdin.split(\"\\n\")[1:n+1]]\n\n    def is_good_matrix(matrix: List[List[int]]) -> bool:\n        for i in range(n):\n            for j in range(m):\n                if matrix[i][j] != (i-1)*m + j + 1:\n                    return False\n        return True\n\n    def shift_column(matrix: List[List[int]], j: int):\n        column = [matrix[i][j] for i in range(n)]\n        column = column[-1:] + column[:-1]\n        for i in range(n):\n            matrix[i][j] = column[i]\n\n    if is_good_matrix(matrix):\n        return \"0\"\n\n    moves = 0\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] != (i-1)*m + j + 1:\n                matrix[i][j] = (i-1)*m + j + 1\n                moves += 1\n                shift_column(matrix, j)\n                moves += 1\n\n    if is_good_matrix(matrix):\n        return str(moves)\n    else:\n        return \"Impossible\" "
    },
    {
        "number": 4185,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def min_moves(matrix: List[List[int]]) -> int:\n        n = len(matrix)\n        m = len(matrix[0])\n\n        def is_good(matrix: List[List[int]]) -> bool:\n            for i in range(n):\n                for j in range(m):\n                    if matrix[i][j] != (i - 1) * m + j + 1:\n                        return False\n            return True\n\n        def shift_column(matrix: List[List[int]], j: int) -> None:\n            col = [matrix[i][j] for i in range(n)]\n            col = col[-1:] + col[:-1]\n            for i in range(n):\n                matrix[i][j] = col[i]\n\n        def make_good(matrix: List[List[int]]) -> int:\n            moves = 0\n            while not is_good(matrix):\n                for j in range(m):\n                    shift_column(matrix, j)\n                    moves += 1\n            return moves\n\n        return make_good(matrix)\n\n    n, m = map(int, stdin.split())\n    matrix = [list(map(int, input().split())) for _ in range(n)]\n    return str(min_moves(matrix))"
    },
    {
        "number": 4185,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n, m = map(int, stdin.split()[0].split())\n    matrix = [[int(x) for x in stdin.split()[i].split()] for i in range(1, n+1)]\n\n    # Initialize the target matrix\n    target_matrix = [[0 for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            target_matrix[i][j] = (i * m + j) % (n * m) + 1\n\n    # Calculate the minimum number of moves\n    moves = 0\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] != target_matrix[i][j]:\n                moves += abs(matrix[i][j] - target_matrix[i][j])\n\n    return str(moves)"
    },
    {
        "number": 4185,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [list(map(int, input().split())) for _ in range(n)]\n    steps = 0\n    for i in range(m):\n        column = [matrix[j][i] for j in range(n)]\n        min_value = min(column)\n        max_value = max(column)\n        steps += max_value - min_value\n        for j in range(n):\n            matrix[j][i] += max_value - min_value\n    return str(steps)"
    },
    {
        "number": 4185,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def min_moves(matrix: List[List[int]]) -> int:\n        n, m = len(matrix), len(matrix[0])\n        num_elements = n * m\n        target_matrix = [[(i - 1) * m + j + 1 for j in range(m)] for i in range(1, n + 1)]\n\n        def cyclic_shift(column_index: int) -> None:\n            for row_index in range(n):\n                matrix[row_index][column_index] = (matrix[row_index][column_index] + 1) % num_elements\n\n        def get_row_to_column_map(matrix: List[List[int]]) -> Dict[int, int]:\n            row_to_column_map = {}\n            for row_index in range(n):\n                row = matrix[row_index]\n                for column_index in range(m):\n                    if row[column_index] not in row_to_column_map:\n                        row_to_column_map[row[column_index]] = column_index\n            return row_to_column_map\n\n        def get_matrix_score(matrix: List[List[int]]) -> int:\n            row_to_column_map = get_row_to_column_map(matrix)\n            score = 0\n            for row_index in range(n):\n                for column_index in range(m):\n                    if matrix[row_index][column_index] != target_matrix[row_index][column_index]:\n                        score += abs(matrix[row_index][column_index] - target_matrix[row_index][column_index])\n            return score\n\n        def get_cyclic_shift_score(column_index: int) -> int:\n            cyclic_shift(column_index)\n            score = get_matrix_score(matrix)\n            cyclic_shift(column_index)\n            return score\n\n        min_score = float('inf')\n        for column_index in range(m):\n            score = get_cyclic_shift_score(column_index)\n            min_score = min(min_score, score)\n\n        return min_score\n\n    def read_input(stdin: str) -> List[List[int]]:\n        lines = stdin.split('\\n')\n        n, m = map(int, lines[0].split())\n        matrix = [list(map(int, line.split())) for line in lines[1:]]\n        return matrix\n\n    matrix = read_input(stdin)\n    min_moves_score = min_moves(matrix)\n    return str(min_moves_score)"
    },
    {
        "number": 4185,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [list(map(int, input().split())) for _ in range(n)]\n\n    # Check if the matrix is already good\n    is_good = True\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] != (i * m + j) % (n * m + 1):\n                is_good = False\n                break\n        if not is_good:\n            break\n\n    if is_good:\n        return \"0\"\n\n    # Calculate the number of moves required\n    move_count = 0\n    for j in range(m):\n        current_value = matrix[0][j]\n        while current_value != (j + 1) % (n * m + 1):\n            # Find the cell to change\n            for i in range(n):\n                if matrix[i][j] == current_value:\n                    break\n            # Change the value\n            matrix[i][j] = (current_value + 1) % (n * m + 1)\n            move_count += 1\n            current_value = (current_value + 1) % (n * m + 1)\n\n    return str(move_count)"
    },
    {
        "number": 4185,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0].split())\n    matrix = []\n    for i in range(n):\n        row = list(map(int, stdin.split()[i + 1].split()))\n        matrix.append(row)\n\n    min_moves = 0\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] != (i * m + j + 1):\n                min_moves += 1\n\n    return str(min_moves)\n\ninput_str = \"\"\nwhile True:\n    try:\n        input_str += input() + \"\\n\"\n    except:\n        break\n\noutput = solution(input_str)\nprint(output) "
    },
    {
        "number": 4186,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    skills = list(map(int, stdin.splitlines()[1].split()))\n\n    teams = n // 2\n    pairs = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            if skills[i] == skills[j]:\n                pairs.append((i, j))\n\n    pairs.sort(key=lambda x: skills[x[0]] + skills[x[1]])\n    problems = [0] * n\n\n    for pair in pairs:\n        problems[pair[0]] += skills[pair[1]] - 1\n        problems[pair[1]] += skills[pair[0]] - 1\n\n    return str(sum(problems))"
    },
    {
        "number": 4186,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    skills = [int(x) for x in stdin.splitlines()[1].split()]\n    \n    min_problems = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            if skills[i] == skills[j]:\n                min_problems = min(min_problems, n-2)\n                break\n    return str(min_problems)"
    },
    {
        "number": 4186,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    skills = list(map(int, stdin.split()[1:]))\n\n    def can_form_team(skill1, skill2):\n        return skill1 == skill2\n\n    def find_team(teams, skill):\n        for team in teams:\n            if can_form_team(team[0], skill):\n                team[0] = skill\n                return True\n        return False\n\n    def min_problems_to_form_teams(n, skills):\n        teams = [[skills[i], i] for i in range(n)]\n        teams.sort(key=lambda x: x[0])\n\n        total_problems = 0\n        for i in range(n // 2):\n            while not find_team(teams, skills[i + n // 2]):\n                total_problems += 1\n\n        return total_problems\n\n    return str(min_problems_to_form_teams(n, skills))"
    },
    {
        "number": 4186,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    skills = list(map(int, stdin.splitlines()[1].split()))\n\n    def find_teams(skills: List[int]) -> int:\n        skills.sort()\n        count = 0\n        for i in range(len(skills) - 1):\n            if skills[i] != skills[i + 1]:\n                count += 1\n        return count\n\n    teams = find_teams(skills)\n    problems_to_solve = (n // 2 - teams) * 2\n    return str(problems_to_solve)"
    },
    {
        "number": 4186,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, students = stdin.split()\n    n = int(n)\n    skills = [int(x) for x in students.split()]\n    pairs = []\n    for i in range(n//2):\n        for j in range(i+1, n//2):\n            pairs.append((i, j))\n\n    max_skill = max(skills)\n    min_problems = max_skill * n\n    min_problems_needed = min_problems\n\n    for pair in pairs:\n        i, j = pair\n        if skills[i] == skills[j]:\n            min_problems_needed -= 2 * skills[i]\n\n    return str(min_problems_needed)"
    },
    {
        "number": 4186,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, skills = stdin.split()\n    n = int(n)\n    skills = list(map(int, skills.split()))\n\n    max_skill = max(skills)\n    min_skill = min(skills)\n    min_problems = max_skill - min_skill\n    max_teams = n // 2\n\n    for i in range(min_problems):\n        count = 0\n        for skill in skills:\n            count += min(skill - i, n - skill - i)\n        if count >= max_teams:\n            return str(i)\n\n    return str(min_problems)"
    },
    {
        "number": 4186,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    skills = list(map(int, stdin.split(\"\\n\")[1].split()))\n    pairs = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if skills[i] == skills[j]:\n                pairs.append((i, j))\n    \n    if len(pairs) >= n//2:\n        return str(0)\n    \n    pairs.sort(key=lambda x: skills[x[0]] + skills[x[1]])\n    \n    min_problems = float('inf')\n    teams = 0\n    problems_solved = [0] * n\n    \n    for pair in pairs:\n        problems_solved[pair[0]] += 1\n        problems_solved[pair[1]] += 1\n        teams += 1\n        min_problems = min(min_problems, max(problems_solved))\n        if teams == n//2:\n            break\n    \n    return str(min_problems)"
    },
    {
        "number": 4186,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, skills = [int(x) for x in stdin.split()]\n    if n % 2 != 0:\n        raise ValueError(\"Number of students must be even.\")\n    skills.sort()\n    \n    count = 0\n    for i in range(n // 2):\n        count += abs(skills[2 * i] - skills[2 * i + 1])\n    \n    return str(count)\n\ninput_data = input()\nstdin = input_data.strip()\ntry:\n    print(solution(stdin))\nexcept ValueError as e:\n    print(str(e)) "
    },
    {
        "number": 4186,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input().strip())\n    a_list = list(map(int, input().strip().split()))\n    \n    # Create a dictionary to store the number of students with each skill\n    skill_dict = {}\n    for i in range(n):\n        skill = a_list[i]\n        if skill in skill_dict:\n            skill_dict[skill] += 1\n        else:\n            skill_dict[skill] = 1\n    \n    # Create a list to store the number of teams that can be formed with each skill\n    team_dict = {}\n    for skill, count in skill_dict.items():\n        team_count = min(count, skill_dict.get(skill, 0))\n        team_dict[skill] = team_count\n    \n    # Calculate the minimum number of problems to be solved\n    min_problems = 0\n    for skill, count in skill_dict.items():\n        min_problems += (count - team_dict[skill]) * skill\n    \n    return str(min_problems) "
    },
    {
        "number": 4186,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    skills = list(map(int, stdin.split()[1:]))\n\n    min_problems = 0\n    for i in range(n // 2):\n        max_skill = max(skills[i], skills[i + n // 2])\n        min_problems += max_skill\n\n    return str(min_problems)"
    },
    {
        "number": 4187,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    schedule = stdin.split('\\n')[1].split(' ')\n    current_rest = 0\n    max_rest = 0\n\n    for hour in schedule:\n        if hour == '1':\n            current_rest += 1\n        else:\n            max_rest = max(max_rest, current_rest)\n            current_rest = 0\n\n    return str(max_rest)"
    },
    {
        "number": 4187,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def get_max_rest(n: int, schedule: list) -> int:\n        max_rest = 0\n        current_rest = 0\n        for i in range(n):\n            if schedule[i] == 0:\n                current_rest = 0\n            else:\n                current_rest += 1\n                if current_rest > max_rest:\n                    max_rest = current_rest\n        return max_rest\n\n    n = int(stdin.readline())\n    schedule = list(map(int, stdin.readline().split()))\n\n    return str(get_max_rest(n, schedule))\n\ninput_string = \"\"\nwith open(\"input.txt\", \"r\") as file:\n    input_string = file.read()\n\noutput_string = solution(input_string)\nwith open(\"output.txt\", \"w\") as file:\n    file.write(output_string) "
    },
    {
        "number": 4187,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    schedule = stdin.split(\"\\n\")[1].split()\n\n    max_rest = 0\n    current_rest = 0\n\n    for i in range(n):\n        if int(schedule[i]) == 1:\n            max_rest = max(max_rest, current_rest)\n            current_rest = 0\n        else:\n            current_rest += 1\n\n    return str(max_rest)\n\ndef"
    },
    {
        "number": 4187,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    schedule = stdin.splitlines()[1].split()\n\n    max_rest = 0\n    current_rest = 0\n\n    for i in range(n):\n        if schedule[i] == '0':\n            current_rest += 1\n        else:\n            max_rest = max(max_rest, current_rest)\n            current_rest = 0\n\n    return str(max_rest)"
    },
    {
        "number": 4187,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, schedule = map(int, stdin.split())\n    schedule = [int(x) for x in schedule]\n    \n    max_rest = 0\n    current_rest = 0\n    \n    for i in range(n):\n        if schedule[i] == 1:\n            current_rest += 1\n        else:\n            max_rest = max(max_rest, current_rest)\n            current_rest = 0\n            \n    return str(max_rest)"
    },
    {
        "number": 4187,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    schedule = list(map(int, stdin.splitlines()[1].split()))\n\n    max_rest = 0\n    current_rest = 0\n\n    for hour in schedule:\n        if hour == 0:\n            current_rest += 1\n        else:\n            max_rest = max(max_rest, current_rest)\n            current_rest = 0\n\n    return str(max_rest)"
    },
    {
        "number": 4187,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    schedule = [int(x) for x in stdin.splitlines()[1].split()]\n\n    max_rest = 0\n    current_rest = 0\n\n    for i in range(n):\n        if schedule[i] == 1:\n            max_rest = max(max_rest, current_rest)\n            current_rest = 0\n        else:\n            current_rest += 1\n\n    return str(max_rest)\n"
    },
    {
        "number": 4187,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    schedule = list(map(int, stdin.splitlines()[1].split()))\n\n    max_rest_hours = 0\n    current_rest_hours = 0\n\n    for i in range(n):\n        if schedule[i] == 1:\n            current_rest_hours += 1\n        else:\n            max_rest_hours = max(max_rest_hours, current_rest_hours)\n            current_rest_hours = 0\n\n    return str(max_rest_hours)\n\n\ndef"
    },
    {
        "number": 4187,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    schedule = stdin.split('\\n')[1].split()\n    max_rest = 0\n    current_rest = 0\n\n    for i in range(n):\n        if schedule[i] == '1':\n            current_rest += 1\n            if current_rest > max_rest:\n                max_rest = current_rest\n        else:\n            current_rest = 0\n\n    return str(max_rest)"
    },
    {
        "number": 4187,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    schedule = list(map(int, stdin.split()[1:]))\n\n    max_rest = 0\n    current_rest = 0\n\n    for i in range(n):\n        if schedule[i] == 1:\n            max_rest = max(max_rest, current_rest)\n            current_rest = 0\n        else:\n            current_rest += 1\n\n    return str(max_rest)"
    },
    {
        "number": 4188,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    facts = {\n        1: 8848,  # Mount Everest peak\n        2: 958,  # Chapaev board game tournament\n        3: 12766,  # Largest online maths competition\n        4: 6695,  # Nile length\n        5: 1100,  # Amazon river width\n        6: 807,  # Angel Falls drop\n        7: 243,  # Uranium nucleon number\n        8: 68,  # Oymyakon temperature\n        9: 250,  # Medusa snake length\n        10: 134,  # Colonel Meow fur length\n        11: 10000,  # Sea otter hair density\n        12: 663268,  # Alaska area\n        13: 154103,  # Alaska coastline\n        14: 106,  # Turkmenistan flag color\n        15: 1642,  # Baikal depth\n        16: 1\n    }\n    return str(facts.get(int(stdin), 0))\n"
    },
    {
        "number": 4188,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    facts = {\n        1: 8848,\n        2: 958,\n        3: 12766,\n        4: 6695,\n        5: 1100,\n        6: 807,\n        7: 25,\n        8: 134,\n        9: 10000,\n        10: 1000000,\n        11: -68,\n        12: 134,\n        13: 154103,\n        14: 1642,\n        15: 106,\n        16: 1\n    }\n    return str(facts.get(int(stdin), 0))"
    },
    {
        "number": 4188,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    facts = {\n        1: 8848,\n        2: 958,\n        3: 12766,\n        4: 6695,\n        5: 1100,\n        6: 807,\n        7: 0,\n        8: 146,\n        9: 31962,\n        10: 134,\n        11: 10000,\n        12: 663268,\n        13: 154103,\n        14: 1642,\n        15: 106,\n        16: 177\n    }\n    return str(facts[int(stdin)])\n"
    },
    {
        "number": 4188,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    facts = [\n        (\"Mount Everest\", 8848),\n        (\"chapaev\", 958),\n        (\"Online maths competition\", 12766),\n        (\"Nile\", 6695),\n        (\"Amazon\", 1100),\n        (\"Angel Falls\", 807),\n        (\"Uranium\", 146),\n        (\"Oymyakon\", -68),\n        (\"Medusa\", 25),\n        (\"Meow\", 134),\n        (\"Sea otters\", 10000),\n        (\"Alaska\", 663268),\n        (\"Baikal\", 1642),\n        (\"Turkmenistan\", 106),\n    ]\n    fact = facts[int(stdin)-1]\n    return 1 if fact[1] == 0 else 0"
    },
    {
        "number": 4188,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    facts = {\n        \"Mount Everest\": 8848,\n        \"chapaev\": 958,\n        \"maths competition\": 12766,\n        \"Nile\": 6695,\n        \"Amazon river\": 1100,\n        \"Angel Falls\": 807,\n        \"Uranium\": 146,\n        \"Oymyakon\": -68,\n        \"Medusa\": 25,\n        \"Colonel Meow\": 134,\n        \"Sea otters\": 10000,\n        \"Alaska\": 663268,\n        \"Lake Baikal\": 1642,\n        \"Turkmenistan\": 106\n    }\n    facts_list = list(facts.keys())\n    stdin = int(stdin) - 1\n    fact = facts_list[stdin]\n    return facts[fact]"
    },
    {
        "number": 4188,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    facts = {\n        1: 8848,\n        2: 958,\n        3: 12766,\n        4: 6695,\n        5: 1100,\n        6: 807,\n        7: 31962,\n        8: 146,\n        9: 68,\n        10: 25,\n        11: 10000,\n        12: 663268,\n        13: 154103,\n        14: 1642,\n        15: 106,\n        16: 167\n    }\n    \n    input_fact_index = int(stdin)\n    if input_fact_index in facts:\n        output = 1\n    else:\n        output = 0\n    \n    return str(output) "
    },
    {
        "number": 4188,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    facts = [\n        (8848, 'Mount Everest'),\n        (958, 'chapaev'),\n        (12766, 'maths competition'),\n        (6695, 'Nile'),\n        (1100, 'Amazon river'),\n        (807, 'Angel Falls'),\n        (146, 'uranium'),\n        (31962, 'Everest View'),\n        (25, 'Medusa'),\n        (134, 'cat'),\n        (10000, 'hair on a cat'),\n        (663268, 'Alaska'),\n        (154103, 'Alaska coastline'),\n        (1642, 'Lake Baikal'),\n        (106, 'Turkmenistan flag')\n    ]\n    \n    n = int(stdin)\n    highest = max(facts, key=lambda x: x[0])[0]\n    result = 1 if n <= highest else 0\n    \n    return str(result)"
    },
    {
        "number": 4188,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    facts = {\n        1: 8848,\n        2: 958,\n        3: 12766,\n        4: 6695,\n        5: 1100,\n        6: 807,\n        7: 25,\n        8: 134,\n        9: 146,\n        10: -68,\n        11: 134,\n        12: 663268,\n        13: 154103,\n        14: 1642,\n        15: 106,\n        16: 1\n    }\n\n    return str(facts[int(stdin)]) "
    },
    {
        "number": 4188,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    facts = {\n        1: 2812,  # Everest\n        2: 958,  # chapaev\n        3: 12766,  # maths competition\n        4: 6695,  # Nile\n        5: 1100,  # Amazon\n        6: 807,  # Angel Falls\n        7: 238,  # Uranium\n        8: -68,  # Siberia\n        9: 134,  # Longest cat hair\n        10: 10000,  # Sea otters\n        11: 1642,  # Baikal\n        12: 106,  # Turkmenistan\n        13: 663268,  # Alaska\n        14: 154103,  # Coastline\n        15: 106  # Turkmenistan\n    }\n    \n    return str(facts[int(stdin)])\n"
    },
    {
        "number": 4188,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    facts = {\n        1: \"The highest mountain above sea level in the world is Mount Everest. Its peak rises to 8848 m.\",\n        2: \"The largest board game tournament consisted of 958 participants playing chapaev.\",\n        3: \"The largest online maths competition consisted of 12766 participants.\",\n        4: \"The Nile is credited as the longest river in the world. From its farthest stream in Burundi, it extends 6695 km in length.\",\n        5: \"While not in flood, the main stretches of the Amazon river in South America can reach widths of up to 1100 km at its widest points.\",\n        6: \"Angel Falls is the highest waterfall. Its greatest single drop measures 807 m.\",\n        7: \"Uranium is the heaviest of all the naturally occurring elements. Its most common isotope has a nucleus containing 146 neutrons.\",\n        8: \"The coldest permanently inhabited place is the Siberian village of Oymyakon, where the temperature of -68\u00b0C was registered in the twentieth century.\",\n        9: \"The longest snake held in captivity is over 25 feet long. Its name is Medusa.\",\n        10: \"Sea otters can have up to 10000 hairs per square inch. This is the most dense fur in the animal kingdom.\",\n        11: \"The largest state of USA is Alaska; its area is 663268 square miles Alaska has a longer coastline than all of the other 49 U.S. States put together: it is 154103 miles long.\",\n        12: \"Lake Baikal is the largest freshwater lake in the world. It reaches 1642\u00a0meters in depth and contains around one-fifth of the world\u2019s unfrozen fresh water.\",\n        13: \"The most colorful national flag is the one of Turkmenistan, with 106 colors.\",\n        14: \"The largest state of USA is Alaska; its area is 663268 square miles Alaska has a longer coastline than all of the other 49 U.S. States put together: it is 154103 miles long.\",\n        15: \"Lake Baikal is the largest freshwater lake in the world. It reaches 1642\u00a0meters in depth and contains around one-fifth of the world\u2019s unfrozen fresh water.\",\n        16: \"The most colorful national flag is the one of Turkmenistan, with 106 colors.\"\n    }\n    return facts.get(int(stdin), \"Invalid input.\")"
    },
    {
        "number": 4189,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    cheese_count = int(stdin.split('\\n')[0])\n    cheese_types = {}\n\n    for i in range(1, cheese_count + 1):\n        name, cheese_type = stdin.split('\\n')[i].split()\n        cheese_types[name] = cheese_type\n\n    soft_count = 0\n    hard_count = 0\n\n    for name, cheese_type in cheese_types.items():\n        if cheese_type == \"soft\":\n            soft_count += 1\n        else:\n            hard_count += 1\n\n    return max(soft_count, hard_count)"
    },
    {
        "number": 4189,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.splitlines()[0])\n    soft_cheeses = []\n    hard_cheeses = []\n\n    for i in range(1, N+1):\n        cheese, cheese_type = stdin.splitlines()[i].split()\n        if cheese_type == \"soft\":\n            soft_cheeses.append(cheese)\n        else:\n            hard_cheeses.append(cheese)\n\n    return str(len(soft_cheeses)) + \"\\n\" + str(len(hard_cheeses))"
    },
    {
        "number": 4189,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num_cheeses = int(stdin.split('\\n')[0])\n    cheese_types = {}\n    for line in stdin.split('\\n')[1:]:\n        if not line:\n            continue\n        cheese_name, cheese_type = line.split()\n        cheese_types[cheese_name] = cheese_type\n\n    soft_cheese_count = 0\n    hard_cheese_count = 0\n    for cheese_type in set(cheese_types.values()):\n        if cheese_type == 'soft':\n            soft_cheese_count += 1\n        else:\n            hard_cheese_count += 1\n\n    return min(soft_cheese_count, hard_cheese_count)"
    },
    {
        "number": 4189,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    soft_count = 0\n    hard_count = 0\n    soft_cheeses = set()\n    hard_cheeses = set()\n\n    for i in range(n):\n        cheese_name, cheese_type = stdin.readline().strip().split()\n        if cheese_type == \"soft\":\n            soft_cheeses.add(cheese_name)\n            soft_count += 1\n        else:\n            hard_cheeses.add(cheese_name)\n            hard_count += 1\n\n    for cheese in soft_cheeses:\n        if cheese in hard_cheeses:\n            soft_count -= 1\n            hard_count -= 1\n\n    return str(soft_count + hard_count)\n"
    },
    {
        "number": 4189,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    cheeses = {}\n    num_cheeses = int(stdin.split(\"\\n\")[0])\n    for i in range(1, num_cheeses + 1):\n        cheese, cheese_type = stdin.split(\"\\n\")[i].split(\" \")\n        cheeses[cheese] = cheese_type\n\n    unique_cheese_types = set(cheeses.values())\n    return len(unique_cheese_types)"
    },
    {
        "number": 4189,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    soft_count = 0\n    hard_count = 0\n    cheeses = stdin.split('\\n')\n    cheeses = cheeses[1:]\n\n    for cheese in cheeses:\n        name, type = cheese.split()\n        if type == 'soft':\n            soft_count += 1\n        else:\n            hard_count += 1\n\n    return str(min(soft_count, hard_count))\n\ninput = \"9\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\"\noutput = solution(input)\nprint(output)\n\ninput = \"6\\nparmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard\"\noutput = solution(input)\nprint(output) "
    },
    {
        "number": 4189,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    cheeses = {}\n    for line in stdin.splitlines():\n        if line.isdigit():\n            n = int(line)\n        else:\n            name, type = line.split()\n            cheeses[name] = type\n\n    hard_count = sum(1 for type in cheeses.values() if type == \"hard\")\n    soft_count = sum(1 for type in cheeses.values() if type == \"soft\")\n\n    return str(min(hard_count, soft_count))\n\ninput_data = \"\"\"\n6\nparmesan hard\nemmental hard\nedam hard\ncolby hard\ngruyere hard\nasiago hard\n\"\"\"\n\noutput_data = solution(input_data)\nprint(output_data) "
    },
    {
        "number": 4189,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    cheese_list = stdin.strip().split('\\n')\n    cheese_count = int(cheese_list[0])\n    soft_cheese_count = 0\n    hard_cheese_count = 0\n\n    for i in range(1, cheese_count + 1):\n        cheese_name, cheese_type = cheese_list[i].split()\n        if cheese_type == 'soft':\n            soft_cheese_count += 1\n        elif cheese_type == 'hard':\n            hard_cheese_count += 1\n\n    return max(soft_cheese_count, hard_cheese_count)"
    },
    {
        "number": 4189,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # split the input string by newline\n    cheeses = stdin.split('\\n')\n    # the first line contains the number of cheeses\n    n = int(cheeses[0])\n    # initialize a counter for each type of cheese\n    soft = 0\n    hard = 0\n    # iterate through the cheeses\n    for i in range(1, n+1):\n        # split the current cheese string into name and type\n        name, typ = cheeses[i].split()\n        # increment the counter for the type of the current cheese\n        if typ == \"soft\":\n            soft += 1\n        else:\n            hard += 1\n    # the output is the minimum of the two counters\n    return str(min(soft, hard)) "
    },
    {
        "number": 4189,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    cheeses = stdin.split('\\n')\n    cheeses_count = int(cheeses.pop(0))\n    hard_cheeses = 0\n    \n    for cheese in cheeses:\n        name, type = cheese.split(' ')\n        if type == 'hard':\n            hard_cheeses += 1\n    \n    return str(hard_cheeses)"
    },
    {
        "number": 4190,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    b = list(map(int, stdin.splitlines()[2].split()))\n\n    c = [(a[i] + b[i]) % n for i in range(n)]\n    c.sort()\n\n    return ' '.join(map(str, c))\n\ndef"
    },
    {
        "number": 4190,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    b = list(map(int, stdin.splitlines()[2].split()))\n\n    def count_zeros(arr):\n        return arr.count(0)\n\n    def lexicographically_minimum(arr1, arr2):\n        for i in range(n):\n            if arr1[i] < arr2[i]:\n                return True\n            elif arr1[i] > arr2[i]:\n                return False\n        return True\n\n    def merge_arrays(arr1, arr2):\n        merged = []\n        for i in range(n):\n            merged.append((arr1[i] + arr2[i]) % n)\n        return merged\n\n    def find_minimum_index(arr):\n        min_index = 0\n        for i in range(n):\n            if arr[i] < arr[min_index]:\n                min_index = i\n        return min_index\n\n    def find_zeros_indexes(arr):\n        zeros_indexes = []\n        for i in range(n):\n            if arr[i] == 0:\n                zeros_indexes.append(i)\n        return zeros_indexes\n\n    def reorder_zeros(arr):\n        zeros_indexes = find_zeros_indexes(arr)\n        for i in range(len(zeros_indexes)):\n            arr.remove(0)\n        return arr + [0] * len(zeros_indexes)\n\n    min_b = b\n    for i in range(n):\n        new_b = reorder_zeros(b)\n        new_c = merge_arrays(a, new_b)\n        if lexicographically_minimum(min_b, new_c):\n            min_b = new_b\n\n    return ' '.join(map(str, min_b))"
    },
    {
        "number": 4190,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    \n    def get_c(a: list, b: list) -> list:\n        return [(a[i] + b[i]) % n for i in range(n)]\n    \n    def is_lexicographically_minimum(c: list) -> bool:\n        for i in range(1, n):\n            if c[i] < c[i-1]:\n                return False\n        return True\n    \n    def reorder_b(b: list) -> list:\n        b_sorted = sorted(b)\n        index_map = {}\n        for i in range(n):\n            index_map[b_sorted[i]] = i\n        return [index_map[b[i]] for i in range(n)]\n    \n    b_reordered = reorder_b(b)\n    c_min = get_c(a, b_reordered)\n    while not is_lexicographically_minimum(c_min):\n        b_reordered = reorder_b(b_reordered)\n        c_min = get_c(a, b_reordered)\n    \n    return \" \".join(map(str, c_min))"
    },
    {
        "number": 4190,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def merge_sort(arr: list):\n        if len(arr) <= 1:\n            return arr\n\n        mid = len(arr) // 2\n        left = merge_sort(arr[:mid])\n        right = merge_sort(arr[mid:])\n\n        return merge(left, right)\n\n    def merge(left: list, right: list):\n        result = []\n        i = j = 0\n\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n\n        result.extend(left[i:])\n        result.extend(right[j:])\n\n        return result\n\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    c = [(a_i + b_i) % n for a_i, b_i in zip(a, b)]\n\n    sorted_c = merge_sort(c)\n\n    return \" \".join(map(str, sorted_c))"
    },
    {
        "number": 4190,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    b = list(map(int, stdin.splitlines()[2].split()))\n    \n    c = [(a[i] + b[i]) % n for i in range(n)]\n    b.sort(key=lambda x: (c.index(x), x))\n    \n    return ' '.join(map(str, c))"
    },
    {
        "number": 4190,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    b = list(map(int, stdin.split('\\n')[2].split()))\n    b.sort()\n    c = [(a[i] + b[i]) % n for i in range(n)]\n    return ' '.join(map(str, c))\n\ninput_data = \"\"\"\n4\n0 1 2 1\n3 2 1 1\n\"\"\"\nprint(solution(input_data))\n\ninput_data = \"\"\"\n7\n2 5 1 5 3 4 3\n2 4 3 5 6 5 1\n\"\"\"\nprint(solution(input_data)) "
    },
    {
        "number": 4190,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n\n    c = [(a[i] + b[i]) % n for i in range(n)]\n    c.sort()\n\n    return ' '.join(map(str, c))"
    },
    {
        "number": 4190,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def reorder_b(b: list) -> list:\n        for i in range(len(b)):\n            for j in range(i + 1, len(b)):\n                if b[j] < b[i]:\n                    b[i], b[j] = b[j], b[i]\n        return b\n\n    def c_min(a: list, b: list) -> list:\n        c = [(a[i] + b[i]) % len(a) for i in range(len(a))]\n        c.sort()\n        return c\n\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n\n    b = reorder_b(b)\n    c = c_min(a, b)\n\n    return \" \".join(map(str, c))\n"
    },
    {
        "number": 4190,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n\n    # Sort b array in ascending order\n    b.sort()\n\n    # Calculate the result array\n    c = [(a[i] + b[i]) % n for i in range(n)]\n\n    # Print the result array\n    return \" \".join(map(str, c))"
    },
    {
        "number": 4190,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    b = list(map(int, stdin.splitlines()[2].split()))\n\n    def lexicographically_minimum_c(a, b):\n        c = [(a[i] + b[i]) % n for i in range(n)]\n        for i in range(n):\n            for j in range(i):\n                if c[i] > c[j]:\n                    c[i], c[j] = c[j], c[i]\n        return c\n\n    c = lexicographically_minimum_c(a, b)\n    return ' '.join(map(str, c))"
    },
    {
        "number": 4191,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    rows = stdin.split(\"\\n\")\n    binary = \"\"\n    for row in rows:\n        binary += row\n    decimal = int(binary, 2)\n    return str(decimal % 2)\n\ninput_str = \"\"\"0\n1\n1\n0\"\"\"\n\noutput_str = solution(input_str)\nprint(output_str) "
    },
    {
        "number": 4191,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    if input_list.count('1') > len(input_list) // 2:\n        return '1'\n    else:\n        return '0'"
    },
    {
        "number": 4191,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    bits = [int(x) for x in stdin.split()]\n    result = 0\n    for bit in bits:\n        result = result ^ bit\n    return str(result)"
    },
    {
        "number": 4191,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    result = \"\"\n    for i in range(len(lines) - 1):\n        if lines[i] != lines[i + 1]:\n            result += lines[i]\n            break\n    return result if result else \"0\" "
    },
    {
        "number": 4191,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    binary_string = \"\"\n    for line in stdin.splitlines():\n        binary_string += line\n    return str(int(binary_string, 2))\n\ninput_str = \"0\\n1\\n1\\n0\"\noutput = solution(input_str)\nprint(output) "
    },
    {
        "number": 4191,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    binary_numbers = [int(line) for line in stdin.split()]\n    decimal_number = sum([bin_num * (2 ** idx) for idx, bin_num in enumerate(binary_numbers)])\n    return str(decimal_number % 3)"
    },
    {
        "number": 4191,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution for the problem.\n    \"\"\"\n    inputs = stdin.splitlines()\n    output = \"\"\n    for i in inputs:\n        if i == \"0\":\n            output += \"0\"\n        elif i == \"1\":\n            output += \"1\"\n    return output"
    },
    {
        "number": 4191,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    digits = list(stdin)\n    if len(digits) != 4:\n        raise ValueError(\"Input should be 4 digits\")\n    if digits.count(\"1\") >= 3:\n        return \"1\"\n    else:\n        return \"0\""
    },
    {
        "number": 4191,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    matrix = [list(line) for line in stdin.split()]\n    n, m = len(matrix), len(matrix[0])\n    if n % 2 == 0:\n        for i in range(n // 2):\n            for j in range(m):\n                if matrix[i][j] != matrix[n - 1 - i][j]:\n                    return '1'\n        for j in range(m // 2):\n            for i in range(n):\n                if matrix[i][j] != matrix[i][m - 1 - j]:\n                    return '1'\n    else:\n        mid = n // 2\n        for i in range(mid):\n            for j in range(m):\n                if matrix[i][j] != matrix[n - 1 - i][j]:\n                    return '1'\n        for j in range(m // 2):\n            if matrix[mid][j] != matrix[mid][m - 1 - j]:\n                return '1'\n    return '0'"
    },
    {
        "number": 4191,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    result = a ^ b ^ c ^ d\n    return str(result)\n\ninput_str = input()\noutput = solution(input_str)\nprint(output) "
    },
    {
        "number": 4192,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split())\n    time_to_travel = D / S\n\n    if time_to_travel <= T:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4192,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split())\n    time_to_place = D / S\n    if time_to_place <= T:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4192,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split())\n\n    time_needed = D / S\n\n    if time_needed <= T:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split())\n    distance_to_place = D\n    travel_time = distance_to_place / S\n    if travel_time <= T:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4192,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = [int(x) for x in stdin.split()]\n    distance = D / S\n    if distance <= T:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4192,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split())\n    \n    time_needed = D / S\n    \n    if time_needed <= T:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4192,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split())\n    time_to_travel = D / S\n    if time_to_travel <= T:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4192,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split())\n    time_to_travel = D / S\n    if time_to_travel <= T:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4192,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split())\n\n    distance_travelled = D / S\n    time_taken = distance_travelled * 60\n\n    if time_taken <= T:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4192,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split())\n    time_needed = D / S\n\n    if time_needed <= T:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4193,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def check_bingo(board: List[List[int]]) -> bool:\n        for i in range(3):\n            if board[i][0] == board[i][1] == board[i][2]:\n                return True\n            if board[0][i] == board[1][i] == board[2][i]:\n                return True\n        if board[0][0] == board[1][1] == board[2][2]:\n            return True\n        if board[0][2] == board[1][1] == board[2][0]:\n            return True\n        return False\n\n    lines = stdin.split('\\n')\n    board = [[int(x) for x in lines[i].split()] for i in range(3)]\n    numbers = [int(x) for x in lines[6:]]\n\n    for number in numbers:\n        for i in range(3):\n            for j in range(3):\n                if board[i][j] == number:\n                    board[i][j] = 0\n\n    return 'Yes' if check_bingo(board) else 'No'"
    },
    {
        "number": 4193,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    card = []\n    bingo_numbers = []\n    bingo = False\n\n    for i in range(3):\n        row = [int(x) for x in lines[i].split()]\n        card.append(row)\n\n    for line in lines[3:]:\n        bingo_numbers.append(int(line))\n\n    # Check rows\n    for i in range(3):\n        for bingo_number in bingo_numbers:\n            if bingo_number in card[i]:\n                card[i][card[i].index(bingo_number)] = \"X\"\n                if all(x == \"X\" for x in card[i]) or all(card[j][i] == \"X\" for j in range(3)):\n                    bingo = True\n                    break\n        if bingo:\n            break\n\n    # Check columns\n    for j in range(3):\n        for bingo_number in bingo_numbers:\n            if bingo_number in [card[i][j] for i in range(3)]:\n                for i in range(3):\n                    if card[i][j] == bingo_number:\n                        card[i][j] = \"X\"\n                        if all(x == \"X\" for x in card[i]) or all(card[j][i] == \"X\" for j in range(3)):\n                            bingo = True\n                            break\n                if bingo:\n                    break\n            if bingo:\n                break\n        if bingo:\n            break\n\n    # Check diagonals\n    diagonal1 = [card[i][i] for i in range(3)]\n    diagonal2 = [card[i][2 - i] for i in range(3)]\n\n    for bingo_number in bingo_numbers:\n        if bingo_number in diagonal1 or bingo_number in diagonal2:\n            for i in range(3):\n                for j in range(3):\n                    if card[i][j] == bingo_number:\n                        card[i][j] = \"X\"\n                        if all(x == \"X\" for x in diagonal1) or all(x == \"X\" for x in diagonal2):\n                            bingo = True\n                            break\n                if bingo:\n                    break\n            if bingo:\n                break\n\n    if bingo:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4193,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def check_bingo(matrix, row, col, n, bingo_numbers):\n        # Check row\n        row_bingo = True\n        for j in range(col, col + n):\n            if matrix[row][j] not in bingo_numbers:\n                row_bingo = False\n                break\n        if row_bingo:\n            return True\n\n        # Check column\n        col_bingo = True\n        for i in range(row, row + n):\n            if matrix[i][col] not in bingo_numbers:\n                col_bingo = False\n                break\n        if col_bingo:\n            return True\n\n        # Check diagonal\n        diag_bingo = True\n        for i in range(row, row + n):\n            j = col + (i - row)\n            if matrix[i][j] not in bingo_numbers:\n                diag_bingo = False\n                break\n        if diag_bingo:\n            return True\n\n        # Check anti-diagonal\n        anti_diag_bingo = True\n        for i in range(row, row + n):\n            j = col - (i - row)\n            if matrix[i][j] not in bingo_numbers:\n                anti_diag_bingo = False\n                break\n        if anti_diag_bingo:\n            return True\n\n        return False\n\n    lines = stdin.splitlines()\n    matrix = [[int(x) for x in line.split()] for line in lines[:3]]\n    bingo_numbers = [int(x) for x in lines[4:]]\n\n    for row in range(3):\n        for col in range(3):\n            if check_bingo(matrix, row, col, 3, bingo_numbers):\n                return \"Yes\"\n\n    return \"No\""
    },
    {
        "number": 4193,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input into rows, columns, and bingo numbers\n    rows, cols, bingo_nums = stdin.strip().split(\"\\n\\n\")\n\n    # Create a 2D array to represent the bingo card\n    card = [[int(num) for num in row.split()] for row in rows.split()]\n\n    # Convert bingo numbers to a set for faster lookup\n    bingo_nums = set(map(int, bingo_nums.split()))\n\n    # Function to check if a row has three marked numbers\n    def has_bingo(row: List[int]) -> bool:\n        return len([num for num in row if num in bingo_nums]) >= 3\n\n    # Check rows and columns for bingo\n    for row in card:\n        if has_bingo(row):\n            return \"Yes\"\n\n    for col in range(3):\n        if has_bingo([card[row][col] for row in range(3)]):\n            return \"Yes\"\n\n    # Check diagonal from top-left to bottom-right\n    if has_bingo([card[i][i] for i in range(3)]):\n        return \"Yes\"\n\n    # Check diagonal from top-right to bottom-left\n    if has_bingo([card[i][2 - i] for i in range(3)]):\n        return \"Yes\"\n\n    return \"No\""
    },
    {
        "number": 4193,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    card, bingo = stdin.split('\\n\\n')\n    bingo = bingo.split('\\n')\n    bingo = [int(x) for x in bingo]\n    \n    def check_bingo(marked: list, num: int) -> bool:\n        for row in marked:\n            if row.count(num) >= 3:\n                return True\n        \n        for j in range(3):\n            column = [row[j] for row in marked]\n            if column.count(num) >= 3:\n                return True\n            \n        diagonal1 = [marked[i][i] for i in range(3)]\n        diagonal2 = [marked[i][2-i] for i in range(3)]\n        if (diagonal1.count(num) >= 3) or (diagonal2.count(num) >= 3):\n            return True\n        \n        return False\n    \n    marked = [[int(x) for x in line.split()] for line in card.split('\\n')]\n    for num in bingo:\n        if check_bingo(marked, num):\n            return \"Yes\"\n    \n    return \"No\""
    },
    {
        "number": 4193,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input into rows, columns, and bingo numbers\n    rows, columns, bingo_numbers = stdin.split('\\n')\n    bingo_numbers = [int(num) for num in bingo_numbers.split()]\n\n    # Create the bingo card\n    card = [[int(num) for num in row.split()] for row in rows.split('\\n')]\n\n    # Check if we have a bingo\n    bingo = False\n    for i in range(3):\n        # Check rows\n        if all(card[i][j] in bingo_numbers for j in range(3)):\n            bingo = True\n            break\n        \n        # Check columns\n        if all(card[j][i] in bingo_numbers for j in range(3)):\n            bingo = True\n            break\n    \n    # Check diagonals\n    if all(card[i][i] in bingo_numbers for i in range(3)):\n        bingo = True\n    elif all(card[i][2-i] in bingo_numbers for i in range(3)):\n        bingo = True\n\n    return \"Yes\" if bingo else \"No\""
    },
    {
        "number": 4193,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    A = []\n    for line in lines[:3]:\n        A.append([int(x) for x in line.split()])\n    N = int(lines[3])\n    b = [int(x) for x in lines[4:]]\n\n    def check_bingo(bingo_card: List[List[int]]) -> bool:\n        rows = [set() for _ in range(3)]\n        cols = [set() for _ in range(3)]\n        diag1 = set()\n        diag2 = set()\n\n        for i in range(3):\n            for j in range(3):\n                if bingo_card[i][j] in b:\n                    rows[i].add(bingo_card[i][j])\n                    cols[j].add(bingo_card[i][j])\n                if i == j:\n                    diag1.add(bingo_card[i][j])\n                if i == 2 - j:\n                    diag2.add(bingo_card[i][j])\n\n        return any(len(row) >= 3 for row in rows) or \\\n               any(len(col) >= 3 for col in cols) or \\\n               len(diag1) >= 3 or len(diag2) >= 3\n\n    if check_bingo(A):\n        return \"Yes\"\n    else:\n        return \"No\"\n\nstdin = \"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\"\nprint(solution(stdin)) "
    },
    {
        "number": 4193,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    grid = [list(map(int, line.split())) for line in lines[:3]]\n    bingo_numbers = list(map(int, lines[4:]))\n\n    def check_bingo(i, j, number):\n        if grid[i][j] == number:\n            return True\n        return False\n\n    def check_row(i, number):\n        return any(check_bingo(i, j, number) for j in range(3))\n\n    def check_column(j, number):\n        return any(check_bingo(i, j, number) for i in range(3))\n\n    def check_diagonal(number):\n        return check_bingo(0, 0, number) and check_bingo(1, 1, number) and check_bingo(2, 2, number)\n\n    def check_bingo():\n        for number in bingo_numbers:\n            if any(check_row(i, number) for i in range(3)) or \\\n               any(check_column(j, number) for j in range(3)) or \\\n               check_diagonal(number):\n                return \"Yes\"\n        return \"No\"\n\n    return check_bingo()"
    },
    {
        "number": 4193,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def bingo(card: List[List[int]]) -> bool:\n        for i in range(3):\n            if all(card[i][j] in bingo_numbers for j in range(3)) or all(card[j][i] in bingo_numbers for j in range(3)):\n                return True\n        if all(card[i][i] in bingo_numbers for i in range(3)) or all(card[i][2 - i] in bingo_numbers for i in range(3)):\n            return True\n        return False\n\n    card, bingo_numbers = [], set()\n    for i, row in enumerate(stdin.splitlines()[:-1]):\n        card.append([int(num) for num in row.split()])\n    N = int(stdin.splitlines()[-1])\n    for line in stdin.splitlines()[-N - 1: -1]:\n        bingo_numbers.add(int(line))\n\n    return \"Yes\" if bingo(card) else \"No\""
    },
    {
        "number": 4193,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def check_bingo(bingo_card: list, marked_numbers: list) -> bool:\n        rows = [0] * 3\n        cols = [0] * 3\n        diagonal = 0\n        anti_diagonal = 0\n        \n        for i in range(3):\n            for j in range(3):\n                if bingo_card[i][j] in marked_numbers:\n                    rows[i] += 1\n                    cols[j] += 1\n                    if i == j:\n                        diagonal += 1\n                    if i + j == 2:\n                        anti_diagonal += 1\n        \n        return any(row == 3 for row in rows) or any(col == 3 for col in cols) or diagonal == 3 or anti_diagonal == 3\n\n    def parse_input(input_str: str) -> list:\n        lines = input_str.split('\\n')\n        bingo_card = [[int(num) for num in line.split()] for line in lines[:3]]\n        marked_numbers = [int(num) for num in lines[4:]]\n        \n        return bingo_card, marked_numbers\n\n    bingo_card, marked_numbers = parse_input(stdin)\n    return \"Yes\" if check_bingo(bingo_card, marked_numbers) else \"No\""
    },
    {
        "number": 4194,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from standard input\n    N, M = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n\n    # Sort the assignments by completion time\n    A.sort()\n\n    # Initialize the minimum number of days required to complete all assignments\n    min_days = sum(A)\n\n    # Initialize the maximum number of days Takahashi can hang out\n    max_hangout = N - min_days\n\n    # If Takahashi cannot complete all assignments, print -1\n    if max_hangout < 0:\n        return \"-1\"\n\n    # Calculate the maximum number of days Takahashi can hang out during the vacation\n    max_hangout = max(0, min_days - sum(A[:-1]))\n\n    return str(max_hangout)"
    },
    {
        "number": 4194,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    assignments = list(map(int, stdin.split()))\n\n    assignments.sort()\n    days_needed = sum(assignments)\n\n    if days_needed > N:\n        return \"-1\"\n\n    total_days = 0\n    for i in range(M):\n        if total_days + assignments[i] <= N:\n            total_days += assignments[i]\n\n    return str(N - total_days)\n\ndef"
    },
    {
        "number": 4194,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    assignments = list(map(int, stdin.split()[2:]))\n    \n    assignments.sort()\n    \n    total_days = sum(assignments)\n    \n    if total_days > N:\n        return -1\n    \n    days_left = N - total_days\n    max_hangout = 0\n    \n    for i in range(1, len(assignments)):\n        prev_assignment = assignments[i-1]\n        current_assignment = assignments[i]\n        days_between = current_assignment - prev_assignment\n        \n        if days_between > days_left:\n            max_hangout = days_left\n            break\n        else:\n            days_left -= days_between\n            max_hangout += days_between\n    \n    return str(max_hangout)"
    },
    {
        "number": 4194,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    assignments = list(map(int, stdin.split()))[M+1:]\n\n    if len(assignments) != M:\n        return -1\n\n    assignments.sort(reverse=True)\n\n    total_time = sum(assignments)\n    if total_time > N:\n        return -1\n\n    for i in range(len(assignments)):\n        if assignments[i] > N - i - 1:\n            return N - i - 1\n\n    return N - total_time\n\n\ndef"
    },
    {
        "number": 4194,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M, *A = map(int, stdin.split())\n    A.sort(reverse=True)\n    \n    max_days = N\n    for a in A:\n        if a <= max_days:\n            max_days -= a\n        else:\n            return \"-1\"\n    \n    return str(max_days)"
    },
    {
        "number": 4194,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, m = map(int, stdin.split())\n    assignments = list(map(int, input().split()))\n\n    # initialize variables\n    vacation_days = 0\n    hangout_days = 0\n    assignment_days = 0\n\n    # iterate over assignments and count vacation days\n    for i in range(m):\n        if assignments[i] + assignment_days > n:\n            return -1\n        assignment_days += assignments[i]\n        vacation_days = max(vacation_days, assignment_days)\n        hangout_days += n - assignment_days\n\n    # return result\n    return str(hangout_days)"
    },
    {
        "number": 4194,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, M = map(int, stdin.split())\n    A = list(map(int, input().split()))\n\n    # sort assignments by completion time\n    A.sort()\n\n    # calculate the maximum number of consecutive assignments\n    max_consecutive_assignments = 0\n    current_consecutive_assignments = 1\n    for i in range(1, M):\n        if A[i] <= A[i-1] + 1:\n            current_consecutive_assignments += 1\n        else:\n            max_consecutive_assignments = max(max_consecutive_assignments, current_consecutive_assignments)\n            current_consecutive_assignments = 1\n\n    # calculate the maximum number of days Takahashi can hang out\n    max_hangout_days = N - sum(A) + max_consecutive_assignments\n\n    # check if Takahashi can finish all assignments\n    if max_hangout_days >= M:\n        return str(max_hangout_days)\n    else:\n        return \"-1\""
    },
    {
        "number": 4194,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, input().split())\n    assignments = list(map(int, input().split()))\n\n    assignments.sort()\n    total_days = sum(assignments)\n    max_hangout_days = N - total_days\n\n    if max_hangout_days < 0:\n        return -1\n    else:\n        return str(max_hangout_days)\n\nstdin = \"41 2\\n5 6\"\nprint(solution(stdin)) "
    },
    {
        "number": 4194,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M, *assignments = map(int, stdin.split())\n    assignments.sort(reverse=True)\n    total_days = sum(assignments)\n    \n    if total_days > N:\n        return \"-1\"\n    \n    max_hangout = N - total_days\n    \n    return str(max_hangout)\n"
    },
    {
        "number": 4194,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input string into lines and convert the numbers to integers\n    N, M = list(map(int, stdin.split()[:2]))\n    A = list(map(int, stdin.split()[2:]))\n    \n    # Sort the assignments by their completion time\n    A.sort(reverse=True)\n    \n    # Initialize the current day and number of assignments completed\n    day, completed = 1, 0\n    \n    # Loop through the sorted assignments\n    for assignment in A:\n        # Check if the current day is within the vacation\n        if day <= N:\n            # Check if the assignment can be completed on the current day\n            if day + assignment - 1 <= N:\n                # Update the current day and the number of assignments completed\n                day += assignment\n                completed += 1\n            else:\n                break\n        else:\n            break\n    \n    # Check if all the assignments are completed\n    if completed == M:\n        # Return the maximum number of days Takahashi can hang out\n        return str(day)\n    else:\n        # Return -1 since he cannot complete all the assignments during the vacation\n        return str(-1)"
    },
    {
        "number": 4195,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split())\n    if D == 0:\n        return str(N)\n    else:\n        count = 0\n        for i in range(1, 10000):\n            for j in range(D+1):\n                if i % (100 * (j+1)) == 0:\n                    count += 1\n                    if count == N:\n                        return str(i)"
    },
    {
        "number": 4195,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split())\n    if D == 0:\n        return str(N)\n    elif D == 1:\n        return str(N * 100 + 99)\n    elif D == 2:\n        return str(N * 10000 + 9999)"
    },
    {
        "number": 4195,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split())\n\n    if D == 0:\n        return str(N)\n    elif D == 1:\n        return str(100 * N - 1)\n    elif D == 2:\n        return str(2 * 100 * N - 2)\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 4195,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input string\n    D, N = map(int, stdin.split())\n\n    # Calculate the minimum integer that can be divided by 100 exactly D times\n    min_integer = N - 1\n\n    # Adjust the minimum integer based on the value of D\n    if D == 0:\n        min_integer = 100 * (N - 1) + 1\n    elif D == 1:\n        min_integer = 100 * N\n    elif D == 2:\n        min_integer = 100 * N - 1\n\n    return str(min_integer)"
    },
    {
        "number": 4195,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split())\n    \n    if D == 0:\n        return str(N)\n    else:\n        # Calculate the minimum number that can be divided by 100 exactly D times\n        min_number = 100 * (D - 1) + 1\n        \n        # Calculate the number of integers that can be divided by 100 exactly D times\n        count = 100 ** D\n        \n        # Calculate the offset to add to min_number to get the N-th smallest integer\n        offset = (N - 1) * 100\n        \n        # Calculate the N-th smallest integer that would make Ringo happy\n        answer = min_number + offset\n        \n        return str(answer)"
    },
    {
        "number": 4195,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split())\n    if D == 0:\n        return str(N)\n    else:\n        start = 100 ** D\n        return str(start + N - 1)"
    },
    {
        "number": 4195,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split())\n    if D == 0:\n        result = N\n    elif D == 1:\n        result = 100 * N\n    else:\n        result = 10000 * N\n    return str(result)"
    },
    {
        "number": 4195,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split())\n\n    if D == 0:\n        return str(N)\n    else:\n        lower_limit = 100 if D == 1 else 10 ** (D - 1)\n        upper_limit = 10 ** D - 1\n        lower_count = (lower_limit - 1) // 100 + 1\n        upper_count = upper_limit // 100\n        target_count = lower_count + (N - 1)\n\n        if target_count > upper_count:\n            return str(upper_limit)\n\n        target_value = 100 * (target_count - 1) + 1\n        return str(target_value)"
    },
    {
        "number": 4195,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split())\n    \n    if D == 0:\n        return str(N)\n    else:\n        return str(N * 100)"
    },
    {
        "number": 4195,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split())\n    if D == 0:\n        return str(N)\n    else:\n        multiple = 100 ** D\n        return str(N * multiple)"
    },
    {
        "number": 4196,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *numbers = map(int, stdin.split())\n    max_gcd = 0\n    for i in range(1, 10**9 + 1):\n        gcd = 10**9\n        for j in range(n):\n            gcd = math.gcd(gcd, abs(numbers[j] - i))\n        max_gcd = max(max_gcd, gcd)\n    return str(max_gcd)"
    },
    {
        "number": 4196,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *blackboard = stdin.split()\n    n = int(n)\n    blackboard = [int(x) for x in blackboard]\n\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def replace_max_gcd(blackboard):\n        max_gcd = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                new_gcd = gcd(blackboard[i], blackboard[j])\n                if new_gcd > max_gcd:\n                    max_gcd = new_gcd\n        return max_gcd\n\n    max_gcd = replace_max_gcd(blackboard)\n\n    return str(max_gcd)"
    },
    {
        "number": 4196,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_list = list(map(int, stdin.split()))\n    N = input_list[0]\n    input_list.pop(0)\n    input_list.sort()\n    max_gcd = 1\n    \n    for i in range(len(input_list) - 1, 0, -1):\n        max_gcd = gcd(max_gcd, input_list[i])\n        \n    return str(max_gcd)\n\ndef"
    },
    {
        "number": 4196,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *numbers = map(int, stdin.split())\n    numbers = sorted(numbers)\n    max_gcd = 0\n\n    for i in range(1, 10**9 + 1):\n        gcd = find_gcd(numbers, i)\n        if gcd > max_gcd:\n            max_gcd = gcd\n\n    return str(max_gcd)\n\ndef"
    },
    {
        "number": 4196,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    numbers = list(map(int, lines[1].split()))\n    \n    max_gcd = 0\n    for i in range(1, 10**9 + 1):\n        gcd = find_gcd(numbers, i)\n        if gcd > max_gcd:\n            max_gcd = gcd\n    \n    return str(max_gcd)\n\ndef"
    },
    {
        "number": 4196,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n\n    N = int(stdin.split()[0])\n    A = list(map(int, stdin.split()[1:]))\n    max_gcd = 0\n\n    for i in range(N):\n        for j in range(i + 1, N):\n            max_gcd = max(max_gcd, gcd(A[i], A[j]))\n\n    return str(max_gcd)\n"
    },
    {
        "number": 4196,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = map(int, stdin.split())\n\n    def gcd(a: int, b: int) -> int:\n        while b:\n            a, b = b, a % b\n        return a\n\n    max_gcd = 1\n    for i in range(N):\n        for j in range(i + 1, N):\n            max_gcd = max(max_gcd, gcd(A[i], A[j]))\n\n    return str(max_gcd)\n\ndef"
    },
    {
        "number": 4196,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *nums = list(map(int, stdin.split()))\n    if n < 2 or n > 10**5 or len(nums) != n:\n        return \"Invalid input\"\n\n    def gcd(a: int, b: int) -> int:\n        while b:\n            a, b = b, a % b\n        return a\n\n    max_gcd = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            max_gcd = max(max_gcd, gcd(nums[i], nums[j]))\n\n    return str(max_gcd)"
    },
    {
        "number": 4196,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    N = int(stdin.split(\"\\n\")[0])\n    A = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    # Find the maximum possible greatest common divisor\n    max_gcd = 1\n    for i in range(N):\n        for j in range(i + 1, N):\n            gcd = math.gcd(A[i], A[j])\n            if gcd > max_gcd:\n                max_gcd = gcd\n\n    # Return the result\n    return str(max_gcd)"
    },
    {
        "number": 4196,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a: int, b: int) -> int:\n        while b:\n            a, b = b, a % b\n        return a\n\n    n, *integers = map(int, stdin.split())\n    max_gcd = 0\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            new_gcd = gcd(integers[i], integers[j])\n            if new_gcd > max_gcd:\n                max_gcd = new_gcd\n\n    return str(max_gcd)"
    },
    {
        "number": 4197,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split()))\n    graph = {i: [] for i in range(1, n+1)}\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if a[i-1] == j:\n                graph[i].append(j)\n    visited = set()\n    result = []\n    def dfs(node):\n        visited.add(node)\n        result.append(node)\n        for child in graph[node]:\n            if child not in visited:\n                dfs(child)\n    for node in graph:\n        if node not in visited:\n            dfs(node)\n    return ' '.join(map(str, result))\n"
    },
    {
        "number": 4197,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    a_list = [int(x) for x in lines[1].split()]\n    \n    a_dict = {}\n    for i in range(n):\n        a_dict[a_list[i]] = i + 1\n    \n    result = []\n    for i in range(n):\n        result.append(a_dict[i+1])\n    \n    return \" \".join(map(str, result))"
    },
    {
        "number": 4197,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a = [x - 1 for x in a]  # Adjust for 0-based indexing\n    \n    # Build the adjacency list\n    graph = [[] for _ in range(n)]\n    for i, count in enumerate(a):\n        if count > 1:\n            graph[i].append(i - 1)\n        if count < n:\n            graph[i].append(i + 1)\n    \n    # Depth-first search to find the entry order\n    visited = [False] * n\n    entry_order = []\n    \n    def dfs(node: int) -> None:\n        visited[node] = True\n        for neighbor in graph[node]:\n            if not visited[neighbor]:\n                dfs(neighbor)\n        entry_order.append(node)\n    \n    for i in range(n):\n        if not visited[i]:\n            dfs(i)\n    \n    return ' '.join(map(str, reversed(entry_order)))"
    },
    {
        "number": 4197,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = stdin.split()\n    N = int(N)\n    A = [int(a) for a in A]\n\n    order = [0] * (N + 1)\n    for i in range(N):\n        for j in range(N):\n            if A[i] == j + 1:\n                order[i] = j + 1\n                break\n\n    return \" \".join(str(num) for num in order[1:])"
    },
    {
        "number": 4197,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    a_list = [int(x) for x in lines[1].split()]\n    \n    # Initialize an empty list to store the student numbers in the order they entered the classroom\n    student_numbers = [None] * n\n    \n    # Reconstruct the order in which the students entered the classroom\n    for i in range(n):\n        student_number = [j for j in range(1, n+1) if a_list[j-1] == i+1][0]\n        student_numbers[i] = student_number\n    \n    # Print the student numbers in the order they entered the classroom\n    return ' '.join(str(x) for x in student_numbers)"
    },
    {
        "number": 4197,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *arr = stdin.split()\n    n = int(n)\n    arr = [int(i) for i in arr]\n    \n    # Create a dictionary with the student number and the number of students in the classroom when they entered\n    students = {i: arr[i-1] for i in range(1, n+1)}\n    \n    # Sort the students dictionary by the number of students in the classroom when they entered\n    sorted_students = sorted(students.items(), key=lambda x: x[1])\n    \n    # Extract the student numbers in the order they entered the classroom\n    order = [i[0] for i in sorted_students]\n    \n    return ' '.join(map(str, order))"
    },
    {
        "number": 4197,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, *A_i = stdin.split()\n    N = int(N)\n    A_i = [int(a) for a in A_i]\n\n    result = []\n\n    for i in range(1, N+1):\n        for j in range(1, N+1):\n            if A_i[j-1] == i:\n                result.append(j)\n                break\n\n    return \" \".join(map(str, result))\n\ndef"
    },
    {
        "number": 4197,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    N = int(stdin[0])\n    A = list(map(int, stdin[1].split()))\n\n    # create a dictionary to store the number of students in the classroom for each student\n    students_in_classroom = {}\n    for i in range(N):\n        students_in_classroom[i + 1] = A[i]\n\n    # sort the students based on the number of students in the classroom\n    sorted_students = sorted(students_in_classroom.items(), key=lambda x: x[1])\n\n    # create a list to store the order of students\n    order_of_students = [0] * N\n\n    # reconstruct the order of students\n    for i in range(N):\n        order_of_students[sorted_students[i][1] - 1] = sorted_students[i][0]\n\n    # print the order of students\n    return \" \".join(map(str, order_of_students))"
    },
    {
        "number": 4197,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = stdin.split()\n    N = int(N)\n    A = [int(x) for x in A]\n\n    students = {}\n    for i in range(1, N+1):\n        students[i] = []\n\n    for i, a in enumerate(A, start=1):\n        students[a].append(i)\n\n    result = []\n    while len(result) < N:\n        for i in range(1, N+1):\n            if students[i] and i not in result:\n                result.append(i)\n\n    return \" \".join(map(str, result))\n"
    },
    {
        "number": 4197,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    students = list(range(1, n + 1))\n    order = []\n\n    while students:\n        max_a = max(a)\n        max_i = a.index(max_a)\n        order.append(students[max_i])\n        students.pop(max_i)\n        a.pop(max_i)\n\n        for i in range(len(a)):\n            if a[i] > 0:\n                a[i] -= 1\n\n    return \" \".join(map(str, order))\n\n\ndef"
    },
    {
        "number": 4198,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    max_integer = 0\n\n    for i in range(1, 10**9 + 1):\n        price = A * i + B * len(str(i))\n        if price <= X:\n            max_integer = max(max_integer, i)\n        else:\n            break\n\n    return str(max_integer)"
    },
    {
        "number": 4198,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    N = 10**9\n    while X >= 0:\n        if A * N + B * len(str(N)) <= X:\n            N -= 1\n        else:\n            return str(N + 1) if A * N + B * len(str(N)) == X else str(0)"
    },
    {
        "number": 4198,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n\n    def calculate_price(N: int) -> int:\n        return A * N + B * len(str(N))\n\n    max_price = 0\n    max_integer = 0\n    for i in range(1, 10**9):\n        price = calculate_price(i)\n        if price > X:\n            break\n        if price > max_price:\n            max_price = price\n            max_integer = i\n\n    return str(max_integer)"
    },
    {
        "number": 4198,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n\n    def price(N: int) -> int:\n        return A * N + B * len(str(N))\n\n    for N in range(10**9, 0, -1):\n        if price(N) <= X:\n            return str(N)\n\n    return \"0\""
    },
    {
        "number": 4198,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    max_integer = 0\n    \n    for i in range(10**9, 0, -1):\n        price = A * i + B * len(str(i))\n        if price <= X:\n            max_integer = i\n            break\n    \n    return str(max_integer)"
    },
    {
        "number": 4198,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.strip().split())\n    max_integer = 0\n\n    for i in range(1, 10**9+1):\n        price = A * i + B * len(str(i))\n        if price <= X:\n            max_integer = i\n        else:\n            break\n\n    return str(max_integer)\n\n\ninput_string = input()\nprint(solution(input_string)) "
    },
    {
        "number": 4198,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    max_integer = 0\n\n    for i in range(1, 10**9 + 1):\n        price = A * i + B * len(str(i))\n        if price > X:\n            break\n        if i > max_integer:\n            max_integer = i\n\n    return str(max_integer)"
    },
    {
        "number": 4198,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.strip().split())\n    \n    max_integer = 0\n    for i in range(1, 10**9+1):\n        price = A * i + B * len(str(i))\n        if price <= X:\n            max_integer = i\n        else:\n            break\n    \n    return str(max_integer)"
    },
    {
        "number": 4198,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n\n    def calc_price(N: int) -> int:\n        return A * N + B * len(str(N))\n\n    def binary_search(left: int, right: int) -> int:\n        if left > right:\n            return 0\n\n        mid = (left + right) // 2\n        price = calc_price(mid)\n\n        if price > X:\n            return binary_search(left, mid - 1)\n        elif price < X:\n            return binary_search(mid + 1, right)\n        else:\n            return mid\n\n    return str(binary_search(1, 10**9))"
    },
    {
        "number": 4198,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n\n    def get_price(N: int) -> int:\n        return A * N + B * len(str(N))\n\n    for i in range(1, 10**9):\n        price = get_price(i)\n        if price <= X:\n            print(i)\n            break\n    else:\n        print(0)"
    },
    {
        "number": 4199,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, input().split())\n    h_list = list(map(int, input().split()))\n    count = 0\n\n    for h in h_list:\n        if h >= K:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4199,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    heights = list(map(int, stdin.split()[2:]))\n\n    count = 0\n    for height in heights:\n        if height >= k:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4199,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N, K = map(int, lines[0].split())\n    heights = list(map(int, lines[1].split()))\n    \n    count = 0\n    for height in heights:\n        if height >= K:\n            count += 1\n    \n    return str(count)"
    },
    {
        "number": 4199,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    heights = list(map(int, stdin.split()[2:]))\n    \n    count = 0\n    for height in heights:\n        if height >= k:\n            count += 1\n    \n    return str(count)"
    },
    {
        "number": 4199,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[0:2])\n    heights = list(map(int, stdin.split()[2:]))\n\n    count = 0\n    for height in heights:\n        if height >= K:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4199,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split()]\n    friends_heights = [int(x) for x in stdin.split()[2:]]\n    count = 0\n    for height in friends_heights:\n        if height >= K:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4199,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    N, K = map(int, input().split())\n    h_list = list(map(int, input().split()))\n\n    # Count the number of people who can ride the roller coaster\n    count = 0\n    for h in h_list:\n        if h >= K:\n            count += 1\n\n    # Return the result\n    return str(count)"
    },
    {
        "number": 4199,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[0:2])\n    heights = list(map(int, stdin.split()[2:]))\n\n    count = 0\n    for height in heights:\n        if height >= K:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4199,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[0:2])\n    heights = list(map(int, stdin.split()[2:]))\n    count = 0\n\n    for h in heights:\n        if h >= K:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4199,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n = int(n)\n    k = int(k)\n    heights = [int(x) for x in stdin.split()[2:]]\n    count = 0\n\n    for height in heights:\n        if height >= k:\n            count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4200,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    votes = list(map(int, stdin.split()[2:]))\n    total_votes = sum(votes)\n    min_vote_threshold = total_votes // (4 * m)\n\n    popular_items = [i for i, vote in enumerate(votes) if vote >= min_vote_threshold]\n\n    if len(popular_items) >= m:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4200,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[0:2])\n    votes = list(map(int, stdin.split()[2:]))\n\n    total_votes = sum(votes)\n    min_votes_to_select = total_votes / (4 * M)\n\n    sorted_votes = sorted(votes, reverse=True)\n    selected_items = 0\n    for vote in sorted_votes:\n        if vote >= min_votes_to_select:\n            selected_items += 1\n            if selected_items == M:\n                return \"Yes\"\n\n    return \"No\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    votes = list(map(int, input().split()))\n    total_votes = sum(votes)\n    min_vote_threshold = total_votes // (4 * M)\n    \n    popular_items = [i for i, vote in enumerate(votes) if vote >= min_vote_threshold]\n    \n    if len(popular_items) >= M:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4200,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    lines = stdin.split(\"\\n\")\n    N, M = map(int, lines[0].split())\n    A = list(map(int, lines[1].split()))\n    \n    # Calculate total number of votes and votes for each item\n    total_votes = sum(A)\n    item_votes = {}\n    for i in range(N):\n        item_votes[i] = A[i]\n    \n    # Check if M popular items can be selected\n    for i in range(M):\n        popular_item = max(item_votes, key=item_votes.get)\n        popular_votes = item_votes[popular_item]\n        if popular_votes < total_votes / (4*M):\n            return \"No\"\n        item_votes.pop(popular_item)\n        total_votes -= popular_votes\n    \n    return \"Yes\""
    },
    {
        "number": 4200,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N, M = map(int, stdin.split()[0:2])\n    A = list(map(int, stdin.split()[2:]))\n\n    # calculate total votes\n    total_votes = sum(A)\n\n    # sort items by popularity\n    A.sort(reverse=True)\n\n    # calculate votes for most popular M items\n    votes_for_M = sum(A[:M])\n\n    # check if we can select M popular items\n    if votes_for_M >= total_votes * 0.25:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4200,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    total_votes = sum(a)\n    min_vote_threshold = total_votes / (4 * m)\n    popular_items = [i for i, vote in enumerate(a) if vote >= min_vote_threshold]\n    if len(popular_items) >= m:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4200,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, M = map(int, stdin.split())\n    A = list(map(int, stdin.split()[2:]))\n\n    # Calculate total number of votes\n    total_votes = sum(A)\n\n    # Sort items by popularity\n    sorted_items = sorted(zip(A, range(N)), reverse=True)\n\n    # Count number of popular items\n    popular_items = 0\n    total_popular_votes = 0\n    for i in range(N):\n        if sorted_items[i][0] >= total_votes / (4*M):\n            popular_items += 1\n            total_popular_votes += sorted_items[i][0]\n\n    if popular_items >= M:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4200,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M, *A = list(map(int, stdin.split()))\n    total_votes = sum(A)\n    min_vote_threshold = total_votes // 4 * M\n    \n    popular_items = sorted(enumerate(A), key=lambda x: x[1], reverse=True)\n    popular_items = [(i, A[i]) for i, _ in popular_items]\n    \n    if len(popular_items) >= M:\n        for i in range(M-1):\n            if popular_items[i][1] < popular_items[i+1][1] * 4:\n                return \"No\"\n        return \"Yes\"\n    else:\n        return \"No\"\n\ndef"
    },
    {
        "number": 4200,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M, *A = map(int, stdin.split())\n    total_votes = sum(A)\n    min_vote_count = total_votes / (4 * M)\n\n    popular_items = [i for i, a in enumerate(A) if a >= min_vote_count]\n\n    if len(popular_items) >= M:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4200,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[0:2])\n    votes = list(map(int, stdin.split()[2:]))\n\n    total_votes = sum(votes)\n    min_votes = total_votes // (4 * M)\n\n    popular_items = sorted(enumerate(votes), key=lambda x: x[1], reverse=True)\n\n    count = 0\n    for i, vote in popular_items:\n        if vote >= min_votes:\n            count += 1\n        if count == M:\n            return \"Yes\"\n\n    return \"No\""
    },
    {
        "number": 4201,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    H, W, K = map(int, stdin.split()[:3])\n    grid = stdin.split(\"\\n\")[1:]\n\n    # Create a helper function to count the black squares in a grid\n    def count_black_squares(grid: List[str]) -> int:\n        count = 0\n        for row in grid:\n            count += row.count(\"#\")\n        return count\n\n    # Initialize variables\n    choices = 0\n    rows = [False] * H\n    cols = [False] * W\n\n    # Iterate through all possible choices\n    for i in range(H+1):\n        for j in range(W+1):\n            # Choose i rows and j columns\n            for k in range(i):\n                rows[k] = True\n            for k in range(j):\n                cols[k] = True\n\n            # Count the black squares in the remaining grid\n            remaining_grid = [\n                [cell for cell, col in zip(row, cols) if not col]\n                for row, row_in_grid in zip(grid, rows)\n                if not row_in_grid\n            ]\n            black_squares = count_black_squares(remaining_grid)\n\n            # Check if the number of black squares is equal to K\n            if black_squares == K:\n                choices += 1\n\n            # Unchoose the rows and columns\n            for k in range(i):\n                rows[k] = False\n            for k in range(j):\n                cols[k] = False\n\n    return str(choices)"
    },
    {
        "number": 4201,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = map(int, stdin.split()[:3])\n    rows, cols = [0] * H, [0] * W\n    \n    for i, row in enumerate(stdin.split('\\n')[1:H+1]):\n        for j, square in enumerate(row):\n            if square == '#':\n                rows[i] += 1\n                cols[j] += 1\n    \n    count = 0\n    for r in range(H+1):\n        for c in range(W+1):\n            if r * c == K:\n                count += 1\n    \n    return str(count)\n\n\ninput_str = \"\"\"2 3 2\n..#\n###\"\"\"\n\nprint(solution(input_str))  # Output: 5 "
    },
    {
        "number": 4201,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def paint_red(grid, rows, cols):\n        for row in rows:\n            grid[row] = ['r'] * len(grid[row])\n        for col in cols:\n            for i in range(len(grid)):\n                grid[i][col] = 'r'\n        return grid\n\n    def count_black_squares(grid):\n        return sum(row.count('#') for row in grid)\n\n    def count_choices(H, W, K):\n        grid = [list(input()) for _ in range(H)]\n        choices = 0\n        for i in range(H + 1):\n            for j in range(W + 1):\n                red_grid = paint_red(grid, range(i), range(j))\n                black_squares = count_black_squares(red_grid)\n                if black_squares == K:\n                    choices += 1\n        return choices\n\n    H, W, K = map(int, stdin.split()[:3])\n    return str(count_choices(H, W, K))\n\nH, W, K = 2, 3, 2\nprint(solution(f\"{H} {W} {K}\\n..#\\n###\")) # Output: 5 "
    },
    {
        "number": 4201,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = stdin.split()\n    H, W, K = int(H), int(W), int(K)\n    grid = [list(row) for row in stdin.split()[1:]]\n    \n    def paint(rows, columns):\n        black_count = 0\n        for row in rows:\n            for column in columns:\n                if grid[row][column] == '#':\n                    black_count += 1\n        return black_count\n    \n    count = 0\n    for i in range(H + 1):\n        for j in range(W + 1):\n            black_count = paint(range(i), range(j))\n            if black_count == K:\n                count += 1\n            black_count = paint(range(i), range(W - j, W))\n            if black_count == K:\n                count += 1\n            black_count = paint(range(H - i, H), range(j))\n            if black_count == K:\n                count += 1\n            black_count = paint(range(H - i, H), range(W - j, W))\n            if black_count == K:\n                count += 1\n    \n    return str(count)"
    },
    {
        "number": 4201,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = map(int, stdin.split()[:3])\n    grid = stdin.split()[3:]\n    grid = [list(row) for row in grid]\n\n    def count_black(rows: List[int], cols: List[int]) -> int:\n        black_count = 0\n        for i in rows:\n            for j in cols:\n                if grid[i - 1][j - 1] == \"#\":\n                    black_count += 1\n        return black_count\n\n    total_choices = 0\n    for rows in range(H + 1):\n        for cols in range(W + 1):\n            if count_black(range(1, rows + 1), range(1, cols + 1)) == K:\n                total_choices += 1\n\n    return str(total_choices)"
    },
    {
        "number": 4201,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    h, w, k = map(int, stdin.split()[:3])\n    grid = [list(row) for row in stdin.strip().split(\"\\n\")]\n    black_count = sum(row.count(\"#\") for row in grid)\n    row_choices = [(i, sum(1 for x in col if x == \"#\")) for i, col in enumerate(zip(*grid))]\n    col_choices = [(j, sum(1 for row in grid for x in row if x == \"#\" and j == grid.index(row))) for j in range(w)]\n    result = 0\n    for i, j in product(range(len(row_choices)), range(len(col_choices))):\n        if i == 0 and j == 0:\n            continue\n        new_black_count = black_count - row_choices[i][1] - col_choices[j][1]\n        if new_black_count == k:\n            result += 1\n    return str(result)\n\ndef"
    },
    {
        "number": 4201,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = map(int, stdin.split()[:3])\n    grid = [list(stdin.split()[3+i]) for i in range(H)]\n    count = 0\n    \n    for i in range(H+1):\n        for j in range(W+1):\n            if i != 0 and j != 0:\n                continue\n            if i == 0:\n                black_squares = sum([1 for x in range(W) if grid[0][x] == \"#\"])\n            elif j == 0:\n                black_squares = sum([1 for row in grid if row[0] == \"#\"])\n            else:\n                black_squares = sum([1 for x in range(W) if grid[i-1][x] == \"#\"])\n                black_squares += sum([1 for row in grid[:i-1] for x in range(W) if row[j-1] == \"#\"])\n                black_squares += sum([1 for row in grid[i:] for x in range(j-1, W) if row[x] == \"#\"])\n            if black_squares == K:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4201,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def count_black_squares(grid: List[List[str]]) -> int:\n        return sum(row.count('#') for row in grid)\n\n    def count_black_squares_after_operation(grid: List[List[str]], rows: List[int], columns: List[int]) -> int:\n        new_grid = [['' for _ in range(len(grid[0]))] for _ in range(len(grid))]\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if i in rows or j in columns:\n                    new_grid[i][j] = '.'\n                else:\n                    new_grid[i][j] = grid[i][j]\n        return count_black_squares(new_grid)\n\n    def count_choices(grid: List[List[str]], k: int) -> int:\n        h, w = len(grid), len(grid[0])\n        choices = 0\n        for rows in range(2 ** h):\n            for columns in range(2 ** w):\n                black_squares = count_black_squares_after_operation(grid, [i for i in range(h) if (1 << i) & rows], [j for j in range(w) if (1 << j) & columns])\n                if black_squares == k:\n                    choices += 1\n        return choices\n\n    h, w, k = map(int, stdin.split()[:3])\n    grid = [list(row) for row in stdin.split()[3:]]\n    return str(count_choices(grid, k))"
    },
    {
        "number": 4201,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = [int(x) for x in stdin.split()]\n    board = []\n    for i in range(H):\n        row = list(stdin.readline().strip())\n        board.append(row)\n    count = 0\n    for i in range(H + 1):\n        for j in range(W + 1):\n            for k in range(i + 1):\n                for l in range(j + 1):\n                    black_count = 0\n                    for x in range(i):\n                        for y in range(j):\n                            if board[x][y] == \"#\":\n                                black_count += 1\n                    if black_count == K:\n                        count += 1\n    return str(count)\n\ninput_str = \"2 3 2\\n..#\\n###\"\nprint(solution(input_str)) "
    },
    {
        "number": 4201,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = map(int, stdin.split()[:3])\n    grid = [list(line) for line in stdin.split()[3:]]\n\n    def count_black_squares(rows: set, columns: set) -> int:\n        count = 0\n        for i in rows:\n            for j in columns:\n                if grid[i-1][j-1] == '#':\n                    count += 1\n        return count\n\n    def count_valid_choices(K: int) -> int:\n        count = 0\n        for rows in range(H+1):\n            for columns in range(W+1):\n                black_squares = count_black_squares(set(range(1, rows+1)), set(range(1, columns+1)))\n                if black_squares == K:\n                    count += 1\n        return count\n\n    return str(count_valid_choices(K))"
    },
    {
        "number": 4202,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    min_product = float('inf')\n    for i in range(L, R):\n        for j in range(i+1, R+1):\n            product = (i * j) % 2019\n            if product < min_product:\n                min_product = product\n    return str(min_product)"
    },
    {
        "number": 4202,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    min_value = 2019\n    \n    for i in range(L, R):\n        for j in range(i+1, R+1):\n            product = i * j % 2019\n            if product < min_value:\n                min_value = product\n                \n    return str(min_value)"
    },
    {
        "number": 4202,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    min_product = 2019\n    \n    for i in range(L, R):\n        for j in range(i+1, R+1):\n            product = (i * j) % 2019\n            min_product = min(min_product, product)\n    \n    return str(min_product)"
    },
    {
        "number": 4202,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n\n    min_result = 2019\n    for i in range(L, R):\n        j = i + 1\n        result = (i * j) % 2019\n        min_result = min(min_result, result)\n\n    return str(min_result)"
    },
    {
        "number": 4202,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    MOD = 2019\n    i_min = L + 1\n    j_min = i_min + 1\n    min_product = i_min * j_min % MOD\n    \n    for i in range(L + 1, R):\n        j = i + 1\n        product = i * j % MOD\n        if product < min_product:\n            min_product = product\n            i_min = i\n            j_min = j\n            \n    return str(min_product)"
    },
    {
        "number": 4202,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n\n    # Calculate the minimum possible value of (i * j) mod 2019\n    min_product = 2019\n    for i in range(L, R):\n        for j in range(i + 1, R + 1):\n            product = (i * j) % 2019\n            if product < min_product:\n                min_product = product\n\n    return str(min_product)"
    },
    {
        "number": 4202,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    min_product = float('inf')\n    for i in range(L, R):\n        for j in range(i + 1, R + 1):\n            product = (i * j) % 2019\n            if product < min_product:\n                min_product = product\n    return str(min_product)"
    },
    {
        "number": 4202,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    if R - L + 1 < 2:\n        return \"-1\"\n\n    MOD = 2019\n    min_result = float(\"inf\")\n\n    for i in range(L, R):\n        j = L + (R - L) // 2\n        result = (i * j) % MOD\n        if result < min_result:\n            min_result = result\n\n        j = L + (R - L) // 2 - 1\n        result = (i * j) % MOD\n        if result < min_result:\n            min_result = result\n\n    return str(min_result)"
    },
    {
        "number": 4202,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    min_product = float('inf')\n    for i in range(L, R):\n        for j in range(i + 1, R + 1):\n            product = (i * j) % 2019\n            if product < min_product:\n                min_product = product\n    return str(min_product)"
    },
    {
        "number": 4202,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    min_value = float('inf')\n    for i in range(L, R):\n        for j in range(i+1, R+1):\n            min_value = min(min_value, (i*j) % 2019)\n    return str(min_value)"
    },
    {
        "number": 4203,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    if stdin[0] != 'A' or stdin[2] != 'C' or 'C' not in stdin[2:len(stdin)-1]:\n        return 'WA'\n    for char in stdin[3:-2]:\n        if char != char.lower():\n            return 'WA'\n    return 'AC'\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4203,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    if s[0] != 'A' or s.count('C') != 1 or not all(c.islower() or c in ('A', 'C') for c in s):\n        return 'WA'\n    return 'AC'"
    },
    {
        "number": 4203,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if not (S[0] == 'A' and S.count('C') == 1 and all(c.islower() for c in S[3:-1])):\n        return 'WA'\n    return 'AC'"
    },
    {
        "number": 4203,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) < 4 or len(stdin) > 10:\n        return \"WA\"\n    \n    if stdin[0] != 'A':\n        return \"WA\"\n    \n    if stdin[2] != 'C':\n        return \"WA\"\n    \n    for i in range(4, len(stdin) - 1):\n        if stdin[i] == 'C':\n            return \"WA\"\n    \n    for i in range(len(stdin)):\n        if stdin[i] < 'A' or (stdin[i] > 'Z' and stdin[i] < 'a') or stdin[i] > 'z':\n            return \"WA\"\n    \n    return \"AC\""
    },
    {
        "number": 4203,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    if s[0] != 'A' or s.count('C') != 1 or not all(c.islower() or c in ['A', 'C'] for c in s):\n        return 'WA'\n    return 'AC'"
    },
    {
        "number": 4203,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) < 4 or len(stdin) > 10:\n        return \"WA\"\n\n    if stdin[0] != \"A\":\n        return \"WA\"\n\n    if stdin.count(\"C\") != 1 or stdin.count(\"C\") != stdin.rfind(\"C\"):\n        return \"WA\"\n\n    for i in range(1, len(stdin) - 1):\n        if stdin[i] not in \"ABC\" and not stdin[i].islower():\n            return \"WA\"\n\n    return \"AC\""
    },
    {
        "number": 4203,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if len(S) < 4 or len(S) > 10:\n        return \"WA\"\n\n    if S[0] != \"A\":\n        return \"WA\"\n\n    if S.count(\"C\") != 1 or not S[2] == \"C\" or S.count(\"C\") != S.index(\"C\"):\n        return \"WA\"\n\n    for char in S:\n        if char not in \"ACE\":\n            if not char.islower():\n                return \"WA\"\n\n    return \"AC\""
    },
    {
        "number": 4203,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) < 4 or len(stdin) > 10:\n        return \"WA\"\n\n    if stdin[0] != \"A\":\n        return \"WA\"\n\n    if stdin[2] != \"C\" or stdin[2:5] != \"CcC\":\n        return \"WA\"\n\n    for i in range(3, len(stdin) - 1):\n        if stdin[i].isupper() and stdin[i] not in [\"A\", \"C\"]:\n            return \"WA\"\n\n    return \"AC\""
    },
    {
        "number": 4203,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Check if the first letter is an uppercase A\n    if stdin[0] != 'A':\n        return 'WA'\n\n    # Check if there is exactly one occurrence of C between the third character from the beginning and the second to last character (inclusive)\n    if stdin.count('C') != 1 or stdin.index('C') < 3 or stdin.index('C') >= len(stdin) - 1:\n        return 'WA'\n\n    # Check if all letters except the A and C mentioned above are lowercase\n    for letter in stdin:\n        if letter.isupper() and letter not in ('A', 'C'):\n            return 'WA'\n\n    return 'AC'"
    },
    {
        "number": 4203,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) < 4 or len(stdin) > 10:\n        return \"WA\"\n\n    if stdin[0] != \"A\":\n        return \"WA\"\n\n    if stdin[2] != \"C\":\n        return \"WA\"\n\n    for char in stdin[3:-1]:\n        if char.isupper():\n            return \"WA\"\n\n    return \"AC\""
    },
    {
        "number": 4204,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, K = stdin.split()\n    K = int(K)\n    S = list(S)\n    for i in range(5 * 10**15):\n        new_S = []\n        for s in S:\n            if s == '2':\n                new_S.extend(['2', '2'])\n            elif s == '3':\n                new_S.extend(['3', '3', '3'])\n            elif s == '4':\n                new_S.extend(['4', '4', '4', '4'])\n            elif s == '5':\n                new_S.extend(['5', '5', '5', '5', '5'])\n            elif s == '6':\n                new_S.extend(['6', '6', '6', '6', '6', '6'])\n            elif s == '7':\n                new_S.extend(['7', '7', '7', '7', '7', '7', '7'])\n            elif s == '8':\n                new_S.extend(['8', '8', '8', '8', '8', '8', '8', '8'])\n            elif s == '9':\n                new_S.extend(['9', '9', '9', '9', '9', '9', '9', '9', '9'])\n            else:\n                new_S.append(s)\n        S = new_S\n    return S[K-1]"
    },
    {
        "number": 4204,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    S, K = stdin.split()\n    K = int(K)\n    if len(S) > 100:\n        return \"Invalid input\"\n\n    def replace_digits(s: str) -> str:\n        replacements = {\n            '2': '22',\n            '3': '333',\n            '4': '4444',\n            '5': '55555',\n            '6': '666666',\n            '7': '7777777',\n            '8': '88888888',\n            '9': '999999999'\n        }\n        for k, v in replacements.items():\n            s = s.replace(k, v)\n        return s\n\n    S = replace_digits(S)\n\n    # Calculate the length of the string after 5 * 10^15 days\n    days = 5 * 10**15\n    total_length = 0\n    for _ in range(days):\n        S = replace_digits(S)\n        total_length += len(S)\n\n    # Find the K-th character from the left\n    for i in range(total_length):\n        if S[i] == '1':\n            K -= 1\n        if K == 0:\n            return S[i]\n\n    return \"Invalid input\""
    },
    {
        "number": 4204,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S, K = stdin.split()\n    K = int(K)\n\n    def replace_chars(s: str) -> str:\n        return s.replace('2', '22').replace('3', '333').replace('4', '4444').replace('5', '55555').replace('6', '666666').replace('7', '7777777').replace('8', '8888888').replace('9', '99999999')\n\n    S = replace_chars(S)\n\n    for _ in range(5 * 10**15):\n        S = replace_chars(S)\n\n    return S[K-1]"
    },
    {
        "number": 4204,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S, K = stdin.split()\n    K = int(K)\n\n    def replace(s: str) -> str:\n        return s.replace('2', '22').replace('3', '333').replace('4', '4444').replace('5', '55555').replace('6', '666666').replace('7', '7777777').replace('8', '8888888').replace('9', '99999999')\n\n    after_1_day = replace(S)\n    after_2_days = replace(after_1_day)\n    after_3_days = replace(after_2_days)\n    after_4_days = replace(after_3_days)\n    after_5_days = replace(after_4_days)\n\n    result = after_5_days\n    for _ in range(int(1e12) - 5):\n        result = replace(result)\n\n    return result[K-1]"
    },
    {
        "number": 4204,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S, K = stdin.split()\n    K = int(K)\n    \n    for day in range(5 * 10**15):\n        new_S = \"\"\n        for char in S:\n            if char == \"2\":\n                new_S += \"22\"\n            elif char == \"3\":\n                new_S += \"333\"\n            elif char == \"4\":\n                new_S += \"4444\"\n            elif char == \"5\":\n                new_S += \"55555\"\n            elif char == \"6\":\n                new_S += \"666666\"\n            elif char == \"7\":\n                new_S += \"7777777\"\n            elif char == \"8\":\n                new_S += \"88888888\"\n            elif char == \"9\":\n                new_S += \"999999999\"\n            else:\n                new_S += char\n        S = new_S\n    \n    return S[K-1]"
    },
    {
        "number": 4204,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S, K = stdin.split()\n    K = int(K)\n    for _ in range(5 * 10**15):\n        new_S = \"\"\n        for char in S:\n            if char == \"2\":\n                new_S += \"22\"\n            elif char == \"3\":\n                new_S += \"333\"\n            elif char == \"4\":\n                new_S += \"4444\"\n            elif char == \"5\":\n                new_S += \"55555\"\n            elif char == \"6\":\n                new_S += \"666666\"\n            elif char == \"7\":\n                new_S += \"7777777\"\n            elif char == \"8\":\n                new_S += \"88888888\"\n            elif char == \"9\":\n                new_S += \"999999999\"\n            else:\n                new_S += char\n        S = new_S\n\n    return S[K-1]"
    },
    {
        "number": 4204,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, k = stdin.split()\n    k = int(k)\n\n    def replace_chars(s: str) -> str:\n        return s.replace('2', '22').replace('3', '333').replace('4', '4444').replace('5', '55555').replace('6', '666666').replace('7', '7777777').replace('8', '8888888').replace('9', '99999999')\n\n    for _ in range(5 * 10**15):\n        s = replace_chars(s)\n\n    return s[k - 1]"
    },
    {
        "number": 4204,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    S, K = stdin.split()\n    K = int(K)\n    for i in range(5 * 10**15):\n        S = S.replace(\"2\", \"22\").replace(\"3\", \"333\").replace(\"4\", \"4444\").replace(\"5\", \"55555\").replace(\"6\", \"666666\").replace(\"7\", \"7777777\").replace(\"8\", \"88888888\").replace(\"9\", \"999999999\")\n    return S[K-1]"
    },
    {
        "number": 4204,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S, K = stdin.split()\n    K = int(K)\n\n    def count_chars(S: str, char: str) -> int:\n        return S.count(char)\n\n    def replace_chars(S: str, char: str, new_char: str) -> str:\n        return S.replace(char, new_char)\n\n    for day in range(1, 5 * 10**15 + 1):\n        S = replace_chars(S, \"2\", \"22\")\n        S = replace_chars(S, \"3\", \"333\")\n        S = replace_chars(S, \"4\", \"4444\")\n        S = replace_chars(S, \"5\", \"55555\")\n        S = replace_chars(S, \"6\", \"666666\")\n        S = replace_chars(S, \"7\", \"7777777\")\n        S = replace_chars(S, \"8\", \"88888888\")\n        S = replace_chars(S, \"9\", \"99999999\")\n\n    return S[K - 1]"
    },
    {
        "number": 4204,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S, K = stdin.split()\n    K = int(K)\n    for i in range(5 * 10**15):\n        S = S.replace('2', '22').replace('3', '333').replace('4', '4444').replace('5', '55555').replace('6', '666666').replace('7', '7777777').replace('8', '8888888').replace('9', '99999999')\n    \n    return S[K - 1]"
    },
    {
        "number": 4205,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def swap(p, i, j):\n        p[i], p[j] = p[j], p[i]\n\n    def can_sort(p):\n        for i in range(len(p) - 1):\n            if p[i] > p[i + 1]:\n                return False\n        return True\n\n    N, p = stdin.split()\n    p = [int(x) for x in p.split()]\n\n    if can_sort(p):\n        return \"YES\"\n\n    for i in range(len(p)):\n        for j in range(i + 1, len(p)):\n            if p[i] > p[j]:\n                swap(p, i, j)\n                if can_sort(p):\n                    return \"YES\"\n                swap(p, i, j)\n\n    return \"NO\""
    },
    {
        "number": 4205,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, p = stdin.split()\n    n = int(n)\n    p = [int(x) for x in p.split()]\n\n    if sorted(p) == p:\n        return \"YES\"\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if p[i] > p[j]:\n                p[i], p[j] = p[j], p[i]\n                if sorted(p) == p:\n                    return \"YES\"\n                p[i], p[j] = p[j], p[i]\n\n    return \"NO\""
    },
    {
        "number": 4205,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.strip().split())\n    if n != len(p):\n        return \"NO\"\n\n    if sorted(p) == list(range(1, n + 1)):\n        return \"YES\"\n\n    for i in range(n - 1):\n        if p[i] != i + 1:\n            break\n    else:\n        return \"YES\"\n\n    for j in range(n - 1, i, -1):\n        if p[j] != j + 1:\n            break\n    else:\n        return \"NO\"\n\n    if p[i] > p[j] and sorted(p[:i] + p[j:j + 1] + p[i + 1:j] + p[i:i + 1] + p[j + 1:]) == list(range(1, n + 1)):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4205,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # read input from stdin\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    p = list(map(int, lines[1].split()))\n\n    # check if p is a permutation of {1, 2, ..., N}\n    if set(p) != set(range(1, N + 1)):\n        return 'NO'\n\n    # check if p can be sorted in ascending order by swapping p_i and p_j\n    for i in range(N):\n        for j in range(i + 1, N):\n            if p[i] > p[j]:\n                return 'YES'\n    return 'NO'"
    },
    {
        "number": 4205,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, p = stdin.split()\n    N = int(N)\n    p = list(map(int, p.split()))\n\n    for i in range(N - 1):\n        for j in range(i + 1, N):\n            if p[i] > p[j]:\n                p[i], p[j] = p[j], p[i]\n                return \"YES\"\n\n    return \"NO\""
    },
    {
        "number": 4205,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def can_sort(p: List[int]) -> bool:\n        for i in range(1, len(p)):\n            if p[i] < p[i - 1]:\n                return False\n        return True\n\n    N, *p = stdin.split()\n    p = [int(x) for x in p]\n\n    if can_sort(p):\n        return \"YES\"\n\n    for i in range(len(p)):\n        for j in range(i + 1, len(p)):\n            if p[i] > p[j]:\n                p[i], p[j] = p[j], p[i]\n                if can_sort(p):\n                    return \"YES\"\n                p[i], p[j] = p[j], p[i]\n\n    return \"NO\""
    },
    {
        "number": 4205,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    p = list(map(int, stdin.split('\\n')[1].split()))\n\n    if sorted(p) == p:\n        return \"YES\"\n\n    for i in range(N):\n        for j in range(i + 1, N):\n            if p[i] > p[j]:\n                p[i], p[j] = p[j], p[i]\n                if sorted(p) == p:\n                    return \"YES\"\n                p[i], p[j] = p[j], p[i]\n\n    return \"NO\""
    },
    {
        "number": 4205,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, p = stdin.split('\\n')\n    n = int(n)\n    p = list(map(int, p.split()))\n\n    # Check if p is a permutation of {1, 2, ..., N}\n    if sorted(p) != list(range(1, n+1)):\n        return 'NO'\n\n    # Check if p can be sorted in ascending order using the given operation\n    for i in range(n):\n        if p[i] != i+1:\n            break\n    else:\n        return 'YES'\n\n    for j in range(i+1, n):\n        if p[j] != i+1:\n            break\n    else:\n        return 'NO'\n\n    for k in range(j+1, n):\n        if p[k] != j+1:\n            return 'NO'\n\n    return 'YES'"
    },
    {
        "number": 4205,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, p = stdin.split()\n    p = list(map(int, p.split()))\n\n    if len(p) != len(set(p)):\n        return \"NO\"\n\n    p.sort()\n    for i in range(len(p)):\n        if p[i] != i + 1:\n            j = p.index(i + 1)\n            p[i], p[j] = p[j], p[i]\n\n    if p == list(range(1, len(p) + 1)):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4205,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, *p = map(int, stdin.split())\n    if len(p) != N:\n        raise ValueError(\"Invalid input length\")\n    p = sorted(p)\n\n    for i in range(N):\n        if p[i] != i + 1:\n            return \"YES\"\n\n    return \"NO\"\n\ndef"
    },
    {
        "number": 4206,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    max_count = 0\n    for i in range(1, len(str(s))):\n        left_part = int(str(s)[:i])\n        right_part = int(str(s)[i:])\n        if left_part % 3 == 0 and right_part % 3 == 0:\n            max_count += 1\n        elif left_part % 3 == 0:\n            max_count += 1\n        elif right_part % 3 == 0:\n            max_count += 1\n    return str(max_count)"
    },
    {
        "number": 4206,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    max_count = 0\n    while s > 0:\n        count = 0\n        while s % 3 == 0:\n            s //= 3\n            count += 1\n        if count > max_count:\n            max_count = count\n        s //= 3\n    return str(max_count)"
    },
    {
        "number": 4206,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin.strip())\n    max_divisible = 0\n\n    for i in range(1, len(str(s)) - 1):\n        left = int(str(s)[:i])\n        right = int(str(s)[i:])\n\n        if left % 3 == 0 or right % 3 == 0:\n            max_divisible += 1\n\n    return str(max_divisible)\n\ndef"
    },
    {
        "number": 4206,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    s = str(s)\n    n = len(s)\n    max_count = 0\n    for i in range(n):\n        for j in range(i+2, n+1, 2):\n            count = 0\n            for k in range(i, j):\n                if int(s[k:k+2]) % 3 == 0:\n                    count += 1\n            max_count = max(max_count, count)\n    return str(max_count)\n\n\ndef"
    },
    {
        "number": 4206,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    s_str = str(s)\n    max_count = 0\n    \n    for i in range(1, len(s_str)):\n        left = s_str[:i]\n        right = s_str[i:]\n        count = 0\n        if int(left) % 3 == 0:\n            count += 1\n        if int(right) % 3 == 0:\n            count += 1\n        max_count = max(max_count, count)\n    \n    return str(max_count)\n\ndef"
    },
    {
        "number": 4206,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    max_count = 0\n    start = 0\n    end = len(str(s))\n    current_count = 0\n\n    while start < end:\n        digit = s % 10\n        if digit % 3 == 0:\n            current_count += 1\n\n        s //= 10\n        end -= 1\n\n        if start == end:\n            max_count = max(max_count, current_count)\n            break\n\n        if s % 10 == 0:\n            max_count = max(max_count, current_count)\n            current_count = 0\n            start += 1\n            end -= 1\n            s //= 10\n        else:\n            start += 1\n\n    return str(max_count)\n"
    },
    {
        "number": 4206,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    max_count = 0\n    for i in range(1, len(s)):\n        if s[i] == '0':\n            count = int(s[:i]) // 3 + int(s[i:]) // 3\n            if count > max_count:\n                max_count = count\n    if int(s) % 3 == 0:\n        max_count += 1\n    return str(max_count)\n\ndef"
    },
    {
        "number": 4206,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    max_count = 0\n    while s > 0:\n        s, d = divmod(s, 10)\n        if d == 0:\n            continue\n        count = d\n        while count % 3 != 0:\n            count -= 1\n        max_count = max(max_count, count)\n    return str(max_count)"
    },
    {
        "number": 4206,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    max_divisible_by_3 = 0\n    for i in range(1, len(str(s))):\n        left_part = int(str(s)[:i])\n        right_part = int(str(s)[i:])\n        if left_part % 3 == 0 or right_part % 3 == 0:\n            max_divisible_by_3 += 1\n    return str(max_divisible_by_3)\n\ndef"
    },
    {
        "number": 4206,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    max_count = 0\n\n    for i in range(1, len(s)):\n        if s[i] == '0' and s[i - 1] == '0':\n            continue\n        if int(s[i - 1:i + 1]) % 3 == 0:\n            max_count += 1\n\n    return str(max_count)\n"
    },
    {
        "number": 4207,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n    b = list(map(int, stdin.split(\"\\n\")[2].split()))\n\n    def count_zeroes(d: float) -> int:\n        count = 0\n        for i in range(n):\n            c_i = d * a[i] + b[i]\n            if c_i == 0:\n                count += 1\n        return count\n\n    max_zeroes = 0\n    for d in range(-10000, 10001):\n        zeroes = count_zeroes(d)\n        max_zeroes = max(max_zeroes, zeroes)\n\n    return str(max_zeroes)\n\ndef"
    },
    {
        "number": 4207,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    b = list(map(int, stdin.splitlines()[2].split()))\n\n    max_zeros = 0\n    for d in range(-1000000000, 100001):\n        c = [d * a[i] + b[i] for i in range(n)]\n        zeros = c.count(0)\n        max_zeros = max(max_zeros, zeros)\n\n    return str(max_zeros)"
    },
    {
        "number": 4207,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    b = [int(x) for x in stdin.readline().split()]\n\n    def count_zeroes(d):\n        return sum(1 for i in range(n) if d * a[i] + b[i] == 0)\n\n    max_zeroes = 0\n    for d in range(-10**9, 10**9):\n        max_zeroes = max(max_zeroes, count_zeroes(d))\n\n    return str(max_zeroes)\n\ndef"
    },
    {
        "number": 4207,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n\n    max_zeroes = 0\n    for d in range(-10**9, 10**9):\n        c = [d * a[i] + b[i] for i in range(n)]\n        current_zeroes = c.count(0)\n        max_zeroes = max(max_zeroes, current_zeroes)\n\n    return str(max_zeroes)"
    },
    {
        "number": 4207,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    max_zeros = 0\n    for d in range(-10**9, 10**10):\n        c = [d * a[i] + b[i] for i in range(n)]\n        zeros = c.count(0)\n        max_zeros = max(max_zeros, zeros)\n    \n    return str(max_zeros)"
    },
    {
        "number": 4207,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    max_zeroes = 0\n    d = 0\n\n    for i in range(1, n + 1):\n        c = [0] * n\n        for j in range(n):\n            c[j] = a[j] * i + b[j]\n        zeroes = c.count(0)\n        if zeroes > max_zeroes:\n            max_zeroes = zeroes\n            d = i\n\n    return str(max_zeroes)"
    },
    {
        "number": 4207,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    \n    c = [(d*a[i] + b[i]) for i in range(n)]\n    \n    count_zeroes = c.count(0)\n    \n    return str(count_zeroes)"
    },
    {
        "number": 4207,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n\n    def count_zeroes(d: float) -> int:\n        return sum(1 for i in range(n) if d * a[i] + b[i] == 0)\n\n    max_zeroes = 0\n    d_optimal = 0\n\n    for d in range(-1000, 1001):\n        num_zeroes = count_zeroes(d)\n        if num_zeroes > max_zeroes:\n            max_zeroes = num_zeroes\n            d_optimal = d\n\n    return str(max_zeroes)"
    },
    {
        "number": 4207,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n\n    # Determine the number of zeroes in array c\n    max_zeroes = 0\n\n    for d in range(-10**9, 10**9):\n        c = [d * a[i] + b[i] for i in range(n)]\n        zeroes = c.count(0)\n        max_zeroes = max(max_zeroes, zeroes)\n\n    return str(max_zeroes)"
    },
    {
        "number": 4207,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n\n    max_zeroes = 0\n    for d in range(-10**9, 10**9 + 1):\n        c = [d * a[i] + b[i] for i in range(n)]\n        num_zeroes = c.count(0)\n        max_zeroes = max(max_zeroes, num_zeroes)\n\n    return str(max_zeroes)"
    },
    {
        "number": 4208,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    left_colors = stdin.readline().strip()\n    right_colors = stdin.readline().strip()\n\n    compatible_pairs = []\n    for i in range(n):\n        for j in range(n):\n            if (left_colors[i] == right_colors[j] or\n                left_colors[i] == '?' or right_colors[j] == '?' or\n                (left_colors[i] == '?' and right_colors[j] == '?')):\n                compatible_pairs.append((i+1, j+1))\n\n    return compatible_pairs\n\ndef"
    },
    {
        "number": 4208,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    left_boot_colors = stdin.readline().strip()\n    right_boot_colors = stdin.readline().strip()\n\n    compatible_pairs = 0\n    pairs = []\n    for i in range(n):\n        for j in range(n):\n            if (left_boot_colors[i] == right_boot_colors[j] or\n                left_boot_colors[i] == '?' or right_boot_colors[j] == '?' or\n                left_boot_colors[i] == right_boot_colors[j]):\n                pairs.append((i + 1, j + 1))\n                compatible_pairs += 1\n\n    print(compatible_pairs)\n\n    for pair in pairs:\n        print(pair[0], pair[1])\n"
    },
    {
        "number": 4208,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def compatible(left: str, right: str) -> bool:\n        if left == '?' or right == '?':\n            return True\n        return left == right\n\n    n = int(stdin.splitlines()[0])\n    left_colors = stdin.splitlines()[1]\n    right_colors = stdin.splitlines()[2]\n\n    pairs = []\n    for i in range(n):\n        for j in range(n):\n            if compatible(left_colors[i], right_colors[j]):\n                pairs.append((i + 1, j + 1))\n\n    return len(pairs), '\\n'.join(f'{a} {b}' for a, b in pairs)"
    },
    {
        "number": 4208,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    l_colors = stdin.readline().strip()\n    r_colors = stdin.readline().strip()\n\n    compatible_pairs = []\n\n    for i in range(n):\n        for j in range(n):\n            if is_compatible(l_colors[i], r_colors[j]):\n                compatible_pairs.append((i+1, j+1))\n\n    return str(len(compatible_pairs)) + \"\\n\" + \"\\n\".join(f\"{a} {b}\" for a, b in compatible_pairs)\n\ndef"
    },
    {
        "number": 4208,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    left_colors = stdin.readline().strip()\n    right_colors = stdin.readline().strip()\n\n    max_pairs = 0\n    compatible_pairs = []\n\n    for i in range(n):\n        for j in range(n):\n            if left_colors[i] == right_colors[j] or left_colors[i] == '?' or right_colors[j] == '?' or (i, j) in compatible_pairs:\n                compatible_pairs.append((i, j))\n                max_pairs += 1\n\n    output = str(max_pairs) + '\\n'\n    for pair in compatible_pairs:\n        output += ' '.join(map(str, pair)) + '\\n'\n\n    return output\n\ninput_string = '''10\ncodeforces\ndodivthree\n'''\nprint(solution(input_string))\n\ninput_string = '''7\nabaca?b\nzabbbcc\n'''\nprint(solution(input_string))\n\ninput_string = '''9\nbambarbia\nhellocode\n'''\nprint(solution(input_string))\n\ninput_string = '''10\ncode??????\n??????test\n'''\nprint(solution(input_string)) "
    },
    {
        "number": 4208,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def compatible(c1: str, c2: str) -> bool:\n        return (c1 == c2) or (c1 == '?') or (c2 == '?')\n\n    n = int(stdin.split()[0])\n    left_colors = stdin.split()[1]\n    right_colors = stdin.split()[2]\n\n    pairs = []\n    for i in range(n):\n        for j in range(n):\n            if compatible(left_colors[i], right_colors[j]):\n                pairs.append((i+1, j+1))\n\n    return len(pairs), '\\n'.join([f'{i} {j}' for i, j in pairs])\n\n\ndef"
    },
    {
        "number": 4208,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    left_boots = stdin.split('\\n')[1]\n    right_boots = stdin.split('\\n')[2]\n\n    compatible_pairs = []\n    for left_index, left_color in enumerate(left_boots):\n        for right_index, right_color in enumerate(right_boots):\n            if (left_color == '?' or right_color == '?' or left_color == right_color) and (left_index, right_index) not in compatible_pairs:\n                compatible_pairs.append((left_index, right_index))\n\n    return str(len(compatible_pairs)) + '\\n' + '\\n'.join([f\"{pair[0]} {pair[1]}\" for pair in compatible_pairs])\n\ninput_str = \"\"\nwith open('input.txt', 'r') as file:\n    input_str = file.read()\n\noutput = solution(input_str)\nwith open('output.txt', 'w') as file:\n    file.write(output) "
    },
    {
        "number": 4208,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    left_boots = stdin.readline().strip()\n    right_boots = stdin.readline().strip()\n\n    compatible_pairs = []\n    for left_index, left_color in enumerate(left_boots):\n        for right_index, right_color in enumerate(right_boots):\n            if is_compatible(left_color, right_color):\n                compatible_pairs.append((left_index + 1, right_index + 1))\n\n    max_pairs = len(compatible_pairs)\n    print(max_pairs)\n\n    for pair in compatible_pairs:\n        print(pair[0], pair[1])\n\ndef"
    },
    {
        "number": 4208,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    left_boots = stdin.split('\\n')[1]\n    right_boots = stdin.split('\\n')[2]\n    \n    compatible_pairs = 0\n    pairs = []\n    \n    for i in range(n):\n        for j in range(n):\n            if (left_boots[i] == '?' or right_boots[j] == '?' or left_boots[i] == right_boots[j]):\n                compatible_pairs += 1\n                pairs.append((i+1, j+1))\n    \n    return str(compatible_pairs) + '\\n' + '\\n'.join(map(str, pairs))"
    },
    {
        "number": 4208,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    l = stdin.readline().strip()\n    r = stdin.readline().strip()\n\n    compatible_pairs = []\n\n    for i in range(n):\n        for j in range(n):\n            if (l[i] == r[j] or l[i] == '?' or r[j] == '?') and (i, j) not in compatible_pairs:\n                compatible_pairs.append((i + 1, j + 1))\n\n    return str(len(compatible_pairs)) + \"\\n\" + \"\\n\".join(map(lambda x: \" \".join(map(str, x)), compatible_pairs))\n\ninput_string = \"\"\nwith open(\"input.txt\", \"r\") as file:\n    input_string = file.read()\n\noutput = solution(input_string)\n\nwith open(\"output.txt\", \"w\") as file:\n    file.write(output)\n\nprint(output) "
    },
    {
        "number": 4209,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, a = stdin.split(\"\\n\")\n    n = int(n)\n    a = list(map(int, a.split()))\n    \n    # find the sum of the elements in the array\n    total_sum = sum(a)\n    \n    # create a list of possible block lengths\n    block_lengths = [i for i in range(1, n+1) if total_sum % i == 0]\n    \n    # initialize the maximum number of blocks and the best set of blocks\n    max_blocks = 0\n    best_blocks = []\n    \n    # iterate through all possible block lengths\n    for block_length in block_lengths:\n        # calculate the number of blocks and the required block sum\n        num_blocks = total_sum // block_length\n        block_sum = total_sum // num_blocks\n        \n        # initialize the current set of blocks\n        blocks = []\n        \n        # iterate through the array and find blocks with the required sum\n        index = 0\n        while index < n:\n            # check if the current block has the required sum\n            if sum(a[index:index+block_length]) == block_sum:\n                # add the block to the current set of blocks\n                blocks.append((index, index+block_length-1))\n                \n                # move the index to the next block\n                index += block_length\n            else:\n                # move the index to the next element\n                index += 1\n        \n        # check if the current set of blocks is better than the best set of blocks\n        if len(blocks) > max_blocks:\n            max_blocks = len(blocks)\n            best_blocks = blocks\n    \n    # print the number of blocks and the set of blocks\n    output = str(max_blocks) + \"\\n\"\n    for block in best_blocks:\n        output += \" \".join(map(str, block)) + \"\\n\"\n    \n    return output"
    },
    {
        "number": 4209,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    \n    a = sorted(a)\n    unique_elements = len(set(a))\n    \n    k = n // unique_elements\n    \n    if unique_elements == 1:\n        return f\"{n}\\n\" + '\\n'.join(f\"{i+1} {i+1}\" for i in range(n))\n    \n    blocks = []\n    for i in range(k):\n        l, r = i * unique_elements, (i+1) * unique_elements - 1\n        blocks.append((l+1, r+1))\n    \n    return f\"{k}\\n\" + '\\n'.join(f\"{l} {r}\" for l, r in blocks)\n\ndef"
    },
    {
        "number": 4209,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, sequence = stdin.strip().split(\"\\n\")\n    n = int(n)\n    a = [int(x) for x in sequence.strip().split(\" \")]\n    \n    # Check if all elements in the array have the same sum\n    if len(set([sum(a[:i]) for i in range(1, n+1)])) != 1:\n        return \"Cannot find a valid set of blocks.\"\n    \n    # Find the maximum number of blocks\n    max_blocks = n\n    for i in range(2, n):\n        if n % i == 0:\n            max_blocks = i\n    \n    # Find the block sizes for the maximum number of blocks\n    block_sizes = []\n    for i in range(1, max_blocks+1):\n        if n % i == 0:\n            block_sizes.append(n // i)\n    \n    # Find the blocks\n    blocks = []\n    for block_size in block_sizes:\n        for i in range(n - block_size + 1):\n            blocks.append((i+1, i+block_size))\n    \n    # Sort the blocks\n    blocks.sort(key=lambda x: (x[0], x[1]))\n    \n    # Print the result\n    result = str(len(blocks)) + \"\\n\"\n    for block in blocks:\n        result += f\"{block[0]} {block[1]}\\n\"\n    return result"
    },
    {
        "number": 4209,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    a = list(map(int, lines[1].split()))\n    if len(a) != n:\n        raise ValueError(\"Invalid input length\")\n    \n    # Calculate the sum of all elements\n    total_sum = sum(a)\n    \n    # Calculate the target sum for each block\n    target_sum = total_sum // n\n    \n    # Initialize the result list\n    result = []\n    \n    # Initialize the current block start index\n    current_start = 0\n    \n    # Iterate through the array\n    for i in range(n):\n        # Check if the sum of current block is equal to the target sum\n        if sum(a[current_start:i+1]) == target_sum:\n            # Add the block to the result list\n            result.append((current_start+1, i+1))\n            # Reset the current block start index\n            current_start = i+1\n    \n    # Check if the last block was not added to the result list\n    if current_start < n:\n        result.append((current_start+1, n))\n    \n    # Print the result\n    print(len(result))\n    for block in result:\n        print(f\"{block[0]} {block[1]}\")"
    },
    {
        "number": 4209,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a = stdin.split(\"\\n\")\n    n = int(n)\n    a = list(map(int, a.split()))\n\n    block_sum = sum(a) // n\n\n    blocks = []\n    for i in range(n):\n        for j in range(i, n):\n            if sum(a[i:j+1]) == block_sum:\n                blocks.append((i, j))\n\n    return str(len(blocks)) + \"\\n\" + \"\\n\".join(f\"{i} {j}\" for i, j in blocks) "
    },
    {
        "number": 4209,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    a = [a[i-1] for i in range(1, n+1)]\n    \n    # Find the maximum sum of any block\n    max_sum = max(a)\n    \n    # Initialize a list to store the blocks\n    blocks = []\n    \n    # Iterate through the array and find all blocks with the maximum sum\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(a[i:j]) == max_sum:\n                blocks.append((i,j-1))\n    \n    # Remove overlapping blocks\n    non_overlapping_blocks = []\n    for i in range(len(blocks)):\n        overlapping = False\n        for j in range(len(blocks)):\n            if i != j:\n                if blocks[i][0] <= blocks[j][0] <= blocks[i][1] and blocks[i][0] <= blocks[j][1] <= blocks[i][1]:\n                    overlapping = True\n                    break\n        if not overlapping:\n            non_overlapping_blocks.append(blocks[i])\n    \n    # Sort the non-overlapping blocks by the starting index\n    non_overlapping_blocks.sort(key=lambda x: x[0])\n    \n    # Print the number of non-overlapping blocks\n    k = len(non_overlapping_blocks)\n    print(k)\n    \n    # Print the non-overlapping blocks\n    for block in non_overlapping_blocks:\n        print(f\"{block[0]+1} {block[1]+1}\")\n    \n    return str(k) + \"\\n\" + \"\\n\".join(f\"{block[0]+1} {block[1]+1}\" for block in non_overlapping_blocks)\n\ndef"
    },
    {
        "number": 4209,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, seq = map(int, stdin.split())\n    if n > 1500:\n        raise ValueError(\"Invalid input\")\n\n    seq = sorted(seq)\n    block_sum = sum(seq) // n\n    block_count = n // len(seq)\n    blocks = []\n\n    for i in range(0, len(seq) * block_count, len(seq)):\n        blocks.append((i + 1, i + len(seq)))\n\n    for i in range(len(seq) - 1):\n        if seq[i] == seq[i + 1]:\n            block_count -= 1\n\n    return f\"{block_count}\\n\" + \"\\n\".join(f\"{l} {r}\" for l, r in blocks)\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4209,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a = stdin.split()\n    n = int(n)\n    a = list(map(int, a.split()))\n\n    def sum_block(start: int, end: int) -> int:\n        return sum(a[start:end+1])\n\n    max_sum = sum_block(0, n-1)\n    k = 0\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            block_sum = sum_block(i, j-1)\n            if block_sum == max_sum and j-i > k:\n                k = j-i\n\n    result = [f\"{i} {i+k-1}\" for i in range(n-k+1)]\n    result = [f\"{k}\\n\" + \"\\n\".join(result)]\n\n    return \"\\n\".join(result)\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4209,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_list = list(map(int, stdin.split()))\n    n = input_list[0]\n    a = input_list[1:]\n    \n    if n == 1:\n        return str(n) + \"\\n\" + str(1) + \" \" + str(1) + \"\\n\" + str(2) + \" \" + str(2) + \"\\n\" + str(3) + \" \" + str(3) + \"\\n\"\n    \n    sum_of_elements = sum(a)\n    target_sum = sum_of_elements // n\n    \n    current_sum = 0\n    blocks = []\n    block_start = 1\n    \n    for i in range(1, n+1):\n        current_sum += a[i-1]\n        \n        if current_sum == target_sum:\n            blocks.append((block_start, i))\n            block_start = i+1\n            current_sum = 0\n            \n    return str(len(blocks)) + \"\\n\" + \"\\n\".join([\" \".join(map(str, block)) for block in blocks]) + \"\\n\"\n\ndef"
    },
    {
        "number": 4209,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, a = stdin.split(\"\\n\")\n    n = int(n)\n    a = [int(x) for x in a.split()]\n\n    # find the sum of all elements\n    total_sum = sum(a)\n\n    # find the maximum number of blocks\n    max_blocks = n\n\n    # check if all elements are equal\n    if len(set(a)) == 1:\n        max_blocks = 1\n\n    # calculate the minimum possible block size\n    min_block_size = total_sum // max_blocks\n\n    # find the actual block size\n    actual_block_size = min_block_size\n    while actual_block_size * max_blocks > total_sum:\n        actual_block_size -= 1\n\n    # find the blocks\n    blocks = []\n    current_sum = 0\n    current_block = []\n    for i in range(n):\n        if current_sum + a[i] <= actual_block_size * (i + 1):\n            current_sum += a[i]\n            current_block.append(i)\n        else:\n            blocks.append(current_block)\n            current_block = [i]\n            current_sum = a[i]\n\n    # add the last block\n    blocks.append(current_block)\n\n    # output the result\n    output = [f\"{len(blocks)}\"]\n    for block in blocks:\n        output.append(f\"{block[0] + 1} {block[-1] + 1}\")\n\n    return \"\\n\".join(output)"
    },
    {
        "number": 4210,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            concatenated = int(str(a[i]) + str(a[j]))\n            if concatenated % k == 0:\n                count += 1\n    \n    return str(count)"
    },
    {
        "number": 4210,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def is_divisible_by_k(x: int, y: int, k: int) -> bool:\n        return (x * 10 + y) % k == 0\n\n    def count_pairs(a: list, k: int) -> int:\n        count = 0\n        for i in range(len(a)):\n            for j in range(i + 1, len(a)):\n                if is_divisible_by_k(a[i], a[j], k):\n                    count += 1\n        return count\n\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    return str(count_pairs(a, k))"
    },
    {
        "number": 4210,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            concatenated = int(str(a[i]) + str(a[j]))\n            if concatenated % k == 0:\n                count += 1\n\n    return str(count)"
    },
    {
        "number": 4210,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def is_divisible(x, y, k):\n        return (x * 10 + y) % k == 0\n\n    def count_pairs(arr, k):\n        n = len(arr)\n        count = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if is_divisible(arr[i], arr[j], k):\n                    count += 1\n        return count\n\n    n, k = list(map(int, stdin.split()))\n    arr = list(map(int, stdin.split()))\n\n    return str(count_pairs(arr, k))\n"
    },
    {
        "number": 4210,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    \n    count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            concatenated = int(str(a[i]) + str(a[j]))\n            if concatenated % k == 0:\n                count += 1\n    \n    return str(count)"
    },
    {
        "number": 4210,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    def is_concatenation_divisible(x, y):\n        return int(str(x) + str(y)) % k == 0\n\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if is_concatenation_divisible(a[i], a[j]):\n                count += 1\n\n    return str(count)"
    },
    {
        "number": 4210,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            concat = int(str(a[i]) + str(a[j]))\n            if concat % k == 0:\n                count += 1\n    \n    return str(count)"
    },
    {
        "number": 4210,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    \n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (a[i] * 10 + a[j]) % k == 0:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4210,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            concat = int(str(a[i]) + str(a[j]))\n            if concat % k == 0:\n                count += 1\n\n    return str(count)"
    },
    {
        "number": 4210,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_divisible(a, b, k):\n        return (str(a) + str(b)) % k == 0\n\n    def count_pairs(a, k):\n        n = len(a)\n        count = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if is_divisible(a[i], a[j], k):\n                    count += 1\n        return count\n\n    n, k = map(int, stdin.split())\n    a = list(map(int, input().split()))\n\n    return str(count_pairs(a, k))"
    },
    {
        "number": 4211,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    N = int(lines[0])\n    B = list(map(int, lines[1].split()))\n\n    max_sum = 0\n    for i in range(N-1):\n        max_sum += B[i]\n\n    A = [max_sum] * N\n    A[N-1] = 0\n\n    for i in range(N-2, 0, -1):\n        if B[i] < A[i] and B[i] < A[i+1]:\n            A[i] = max_sum - B[i]\n            A[i+1] = max_sum - B[i]\n        else:\n            A[i] = max(A[i], A[i+1])\n\n    return max(A)"
    },
    {
        "number": 4211,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.splitlines()[0])\n    B = list(map(int, stdin.splitlines()[1].split()))\n\n    # Initialize A with all 0's\n    A = [0] * N\n\n    # Fill in the first element of A\n    A[0] = B[0]\n\n    # Fill in the rest of A based on the given condition\n    for i in range(1, N):\n        A[i] = max(B[i-1], A[i-1])\n\n    # Calculate the sum of the elements in A\n    total_sum = sum(A)\n\n    # Return the result\n    return str(total_sum)"
    },
    {
        "number": 4211,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    B = list(map(int, stdin.split('\\n')[1].split()))\n\n    A = []\n    for i in range(N - 1):\n        A.append(max(B[i], B[i + 1]))\n    A.append(B[-1])\n\n    return str(sum(A))"
    },
    {
        "number": 4211,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    B = [int(x) for x in lines[1].split(' ')]\n    \n    A = [0] * N\n    A[0] = B[0]\n    A[N-1] = B[N-2]\n    \n    for i in range(1, N-1):\n        A[i] = max(B[i-1], B[i])\n    \n    return str(sum(A))\n\ndef"
    },
    {
        "number": 4211,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    B = [int(x) for x in stdin.split('\\n')[1].split()]\n\n    A = []\n    A.append(B[0] + 1)\n    for i in range(1, len(B)):\n        A.append(B[i] - A[i-1])\n\n    return str(sum(A))"
    },
    {
        "number": 4211,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.splitlines()[0])\n    B = list(map(int, stdin.splitlines()[1].split()))\n    max_sum = 0\n    max_A = []\n    for i in range(N):\n        if i == 0:\n            max_A.append(B[i])\n        else:\n            max_A.append(max(B[i-1], B[i]))\n        max_sum += max_A[-1]\n    return str(max_sum)"
    },
    {
        "number": 4211,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    B = stdin.split('\\n')[1].split()\n\n    A = [0] * N\n    A[0] = max(B[0], 0)\n\n    for i in range(1, N):\n        A[i] = max(B[i - 1] + A[i - 1], B[i] + A[i - 1], B[i])\n\n    return str(sum(A))\n\ndef"
    },
    {
        "number": 4211,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    N = int(lines[0])\n    B = list(map(int, lines[1].split()))\n\n    max_sum = B[0]\n    for i in range(1, N-1):\n        max_sum += B[i] + max(B[i-1], B[i])\n    max_sum += B[-1]\n\n    return str(max_sum)"
    },
    {
        "number": 4211,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    b = list(map(int, lines[1].split()))\n\n    # Calculate the prefix sum of B\n    prefix_sum = [0] * (n + 1)\n    for i in range(n):\n        prefix_sum[i + 1] = prefix_sum[i] + b[i]\n\n    # Calculate the maximum possible sum of the elements of A\n    max_sum = 0\n    for i in range(n):\n        max_sum += max(prefix_sum[i + 1] - prefix_sum[i] + 1, prefix_sum[i + 1])\n\n    return str(max_sum)"
    },
    {
        "number": 4211,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    B = [int(x) for x in lines[1].split()]\n\n    max_sum = 0\n    for i in range(N-1):\n        max_sum += max(B[i], B[i+1])\n\n    max_sum += B[-1]\n    return str(max_sum)"
    },
    {
        "number": 4212,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M, Q = map(int, stdin.split()[:3])\n    quadruples = []\n    for _ in range(Q):\n        a, b, c, d = map(int, stdin.split()[3:])\n        quadruples.append((a, b, c, d))\n    \n    # Initialize A with the smallest possible values\n    A = [1] * N\n    \n    # Iterate through each quadruple, checking if it can be satisfied by any possible sequence\n    max_score = 0\n    for a, b, c, d in quadruples:\n        # Check if the condition is satisfied for the current sequence\n        if A[b-1] - A[a-1] == c:\n            max_score += d\n        \n        # Check if the condition can be satisfied by any possible sequence\n        for i in range(a, b-1):\n            for j in range(b, N):\n                if A[j] - A[i] == c:\n                    max_score += d\n                    break\n    \n    return str(max_score)"
    },
    {
        "number": 4212,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input into lines\n    lines = stdin.split(\"\\n\")\n    \n    # Get the values of N, M, and Q\n    N, M, Q = map(int, lines[0].split())\n    \n    # Initialize the sequence A with all ones\n    A = [1] * N\n    \n    # Parse the quadruples\n    quadruples = []\n    for i in range(1, Q + 1):\n        a, b, c, d = map(int, lines[i].split())\n        quadruples.append((a - 1, b - 1, c, d))\n    \n    # Calculate the maximum score\n    max_score = 0\n    for a, b, c, d in quadruples:\n        if A[b] - A[a] == c:\n            max_score += d\n    \n    # Return the maximum score\n    return str(max_score)"
    },
    {
        "number": 4212,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M, Q, quadruples = int(stdin[0]), int(stdin[1]), int(stdin[2]), stdin[3:].split('\\n')\n    seq = [1] * N\n    scores = []\n    \n    for q in quadruples:\n        a, b, c, d = map(int, q.split())\n        scores.append((d, b - a - c))\n    \n    scores.sort(reverse=True)\n    \n    for s in scores:\n        if s[1] < N:\n            seq[s[1]] += s[0]\n        else:\n            break\n    \n    return str(max(seq))\n\n\ndef"
    },
    {
        "number": 4212,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M, Q, quadruples = stdin.split(\"\\n\")\n    N, M, Q = int(N), int(M), int(Q)\n\n    # Create the sequence A\n    A = list(range(1, N+1))\n\n    # Iterate through the quadruples and calculate the score\n    score = 0\n    for quadruple in quadruples.split(\"\\n\"):\n        a, b, c, d = map(int, quadruple.split())\n        for i in range(a-1, b):\n            if A[i] - A[i-1] == c:\n                score += d\n                break\n\n    return str(score)"
    },
    {
        "number": 4212,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def get_input() -> tuple:\n        input_values = list(map(int, input().split()))\n        N, M, Q = input_values[0:3]\n        quadruples = [input_values[i:i+4] for i in range(3, len(input_values), 4)]\n        return N, M, Q, quadruples\n\n    def get_sequence(N, M) -> list:\n        return [i for i in range(1, M+1)]\n\n    def score(A, quadruples) -> int:\n        total_score = 0\n        for quadruple in quadruples:\n            a, b, c, d = quadruple\n            if A[b-1] - A[a-1] == c:\n                total_score += d\n        return total_score\n\n    N, M, Q, quadruples = get_input()\n    A = get_sequence(N, M)\n    max_score = score(A, quadruples)\n\n    return str(max_score)"
    },
    {
        "number": 4212,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def score(A: list, quadruples: list) -> int:\n        result = 0\n        for a, b, c, d in quadruples:\n            if b <= len(A) and A[b - 1] - A[a - 1] == c:\n                result += d\n        return result\n\n    def max_score(N, M, Q, quadruples):\n        A = [1]\n        max_score = 0\n        for _ in range(N):\n            A.append(A[-1] + 1)\n            current_score = score(A, quadruples)\n            max_score = max(max_score, current_score)\n        return max_score\n\n    N, M, Q = map(int, stdin.splitlines()[0].split())\n    quadruples = []\n    for line in stdin.splitlines()[1:]:\n        a, b, c, d = map(int, line.split())\n        quadruples.append((a, b, c, d))\n\n    return str(max_score(N, M, Q, quadruples))"
    },
    {
        "number": 4212,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def score(A: list, quadruples: list) -> int:\n        result = 0\n        for a, b, c, d in quadruples:\n            if A[b - 1] - A[a - 1] == c:\n                result += d\n        return result\n\n    def is_valid(A: list, quadruples: list) -> bool:\n        for a, b, c in quadruples:\n            if A[b - 1] - A[a - 1] != c:\n                return False\n        return True\n\n    def find_max_score(N: int, M: int, quadruples: list) -> int:\n        A = [i for i in range(1, M + 1)]\n        while True:\n            if is_valid(A, quadruples):\n                return score(A, quadruples)\n            A = sorted(A)\n            for i in range(N - 1, 0, -1):\n                if A[i] != i + 1:\n                    A[i], A[i - 1] = A[i - 1], A[i]\n                    break\n\n    N, M, Q = map(int, stdin.splitlines()[0].split())\n    quadruples = []\n    for i in range(1, Q + 1):\n        a, b, c, d = map(int, stdin.splitlines()[i].split())\n        quadruples.append((a, b, c, d))\n\n    max_score = find_max_score(N, M, quadruples)\n    return str(max_score)\n\ninput_data = '''3 4 3\n1 3 3 100\n1 2 2 10\n2 3 2 10'''\nprint(solution(input_data)) "
    },
    {
        "number": 4212,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def get_score(A, a_b_c_d):\n        score = 0\n        for a, b, c, d in a_b_c_d:\n            if A[b] - A[a] == c:\n                score += d\n        return score\n\n    def find_max_score(N, M, Q, a_b_c_d):\n        A = [i for i in range(1, M+1)]\n        A.sort()\n        max_score = 0\n        for i in range(1, M+1):\n            for j in range(i+1, M+1):\n                for k in range(j+1, M+1):\n                    temp_A = A.copy()\n                    temp_A[i-1] = N\n                    temp_A[j-1] = N-1\n                    temp_A[k-1] = N-2\n                    temp_score = get_score(temp_A, a_b_c_d)\n                    max_score = max(max_score, temp_score)\n        return max_score\n\n    N, M, Q = map(int, stdin.split()[:3])\n    a_b_c_d = []\n    for _ in range(Q):\n        a, b, c, d = map(int, stdin.split()[3:])\n        a_b_c_d.append((a-1, b-1, c, d))\n\n    return str(find_max_score(N, M, Q, a_b_c_d))"
    },
    {
        "number": 4212,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def score(A, quadruples):\n        s = 0\n        for a, b, c, d in quadruples:\n            if A[b - 1] - A[a - 1] == c:\n                s += d\n        return s\n\n    def find_max_score(N, M, quadruples):\n        A = [i for i in range(1, M + 1)]\n        A.sort()\n        return max(score(A, quadruples), key=lambda x: x[1])\n\n    def read_input():\n        N, M, Q = map(int, input().split())\n        quadruples = []\n        for _ in range(Q):\n            a, b, c, d = map(int, input().split())\n            quadruples.append((a, b, c, d))\n        return N, M, quadruples\n\n    N, M, quadruples = read_input()\n    return str(find_max_score(N, M, quadruples))"
    },
    {
        "number": 4212,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M, Q, quadruples = stdin.split('\\n')\n    N, M, Q = int(N), int(M), int(Q)\n\n    # parse quadruples\n    for i in range(Q):\n        quadruples[i] = list(map(int, quadruples[i].split(' ')))\n\n    # sort the quadruples by c_i\n    quadruples.sort(key=lambda x: x[2])\n\n    # create the sequence A\n    A = [1] * N\n    for i in range(1, N):\n        A[i] = A[i - 1] + 1\n\n    # calculate the score for each quadruple\n    scores = []\n    for a, b, c, d in quadruples:\n        score = 0\n        for i in range(a, b):\n            if A[i] - A[i - 1] == c:\n                score += d\n        scores.append(score)\n\n    # return the maximum score\n    return str(max(scores))\n"
    },
    {
        "number": 4213,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    a = list(map(int, lines[1].split()))\n    max_diff = 0\n\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                diff = abs(a[i] - a[j])\n                if diff > max_diff:\n                    max_diff = diff\n\n    return str(max_diff)"
    },
    {
        "number": 4213,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_list = list(map(int, stdin.split()))\n    n = input_list[0]\n    sequence = input_list[1:]\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(sequence[i] - sequence[j])\n            if diff > max_diff:\n                max_diff = diff\n    return str(max_diff)\n\ndef"
    },
    {
        "number": 4213,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    A = list(map(int, stdin.split('\\n')[1].split()))\n    max_diff = -1\n    \n    for i in range(N):\n        for j in range(i+1, N):\n            diff = abs(A[i] - A[j])\n            if diff > max_diff:\n                max_diff = diff\n                \n    return str(max_diff)"
    },
    {
        "number": 4213,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = max(diff, abs(a[i] - a[j]))\n    return str(diff)"
    },
    {
        "number": 4213,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    A = [int(x) for x in lines[1].split(' ')]\n    max_diff = -1\n    for i in range(N):\n        for j in range(i+1, N):\n            diff = abs(A[i] - A[j])\n            if diff > max_diff:\n                max_diff = diff\n    return str(max_diff)"
    },
    {
        "number": 4213,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # split input into list\n    input_list = stdin.split()\n    \n    # parse N and A_i values\n    N = int(input_list[0])\n    A = list(map(int, input_list[1:]))\n    \n    # initialize max_diff as negative infinity\n    max_diff = float('-inf')\n    \n    # iterate through all pairs of indices (i, j) with i != j\n    for i in range(N):\n        for j in range(N):\n            if i != j:\n                # calculate absolute difference between A[i] and A[j]\n                diff = abs(A[i] - A[j])\n                \n                # update max_diff if necessary\n                max_diff = max(max_diff, diff)\n                \n    # return max_diff\n    return str(max_diff)"
    },
    {
        "number": 4213,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N = int(lines[0])\n    A = [int(x) for x in lines[1].split()]\n    \n    max_diff = -1\n    for i in range(N):\n        for j in range(N):\n            if i != j:\n                diff = abs(A[i] - A[j])\n                max_diff = max(max_diff, diff)\n    \n    return str(max_diff) "
    },
    {
        "number": 4213,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = map(int, stdin.split())\n    max_diff = 0\n    \n    for i in range(N):\n        for j in range(i+1, N):\n            diff = abs(A[i] - A[j])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return str(max_diff)"
    },
    {
        "number": 4213,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    line_list = stdin.strip().split('\\n')\n    N = int(line_list[0])\n    A = list(map(int, line_list[1].split()))\n    max_diff = float('-inf')\n    for i in range(N):\n        for j in range(i+1, N):\n            diff = abs(A[i] - A[j])\n            max_diff = max(max_diff, diff)\n    return str(max_diff)"
    },
    {
        "number": 4213,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input into a list of integers\n    sequence = list(map(int, stdin.split()))\n    n = sequence[0]\n    # Sort the sequence in ascending order\n    sequence.sort()\n    # Calculate the maximum absolute difference\n    max_diff = sequence[-1] - sequence[1]\n    return str(max_diff)"
    },
    {
        "number": 4214,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def distance(x1, y1, x2, y2):\n        return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5\n\n    def calculate_length(towns):\n        n = len(towns)\n        total_length = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                total_length += distance(towns[i][0], towns[i][1], towns[j][0], towns[j][1])\n        return total_length / (n * (n - 1))\n\n    towns = []\n    lines = stdin.strip().split('\\n')\n    for line in lines[1:]:\n        x, y = line.strip().split()\n        towns.append((int(x), int(y)))\n\n    average_length = calculate_length(towns)\n    return f\"{average_length:.6f}\""
    },
    {
        "number": 4214,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N = int(input())\n    coords = []\n    for i in range(N):\n        x, y = map(int, input().split())\n        coords.append((x, y))\n\n    # compute distance between towns\n    def distance(i, j):\n        return ((coords[i][0] - coords[j][0]) ** 2 + (coords[i][1] - coords[j][1]) ** 2) ** 0.5\n\n    # compute all possible paths\n    def paths():\n        from itertools import permutations\n        return permutations(range(N))\n\n    # compute average length\n    total_length = 0\n    num_paths = 0\n    for path in paths():\n        length = sum(distance(path[i], path[i + 1]) for i in range(N - 1))\n        total_length += length\n        num_paths += 1\n\n    return f\"{total_length / num_paths:.6f}\""
    },
    {
        "number": 4214,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    import math\n\n    # Parse input\n    n = int(stdin.splitlines()[0])\n    towns = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n\n    # Compute all possible paths\n    def all_paths(towns):\n        n = len(towns)\n        paths = []\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    paths.append((i, j))\n        return paths\n\n    # Calculate path length\n    def path_length(path, towns):\n        length = 0\n        for i in range(len(path) - 1):\n            length += math.sqrt((towns[path[i]][0] - towns[path[i + 1]][0]) ** 2 + (towns[path[i]][1] - towns[path[i + 1]][1]) ** 2)\n        return length\n\n    # Compute average path length\n    paths = all_paths(towns)\n    total_length = 0\n    for path in paths:\n        total_length += path_length(path, towns)\n    avg_length = total_length / len(paths)\n\n    return str(avg_length)"
    },
    {
        "number": 4214,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    N = int(stdin.split(\"\\n\")[0])\n    towns = [tuple(map(int, line.split())) for line in stdin.split(\"\\n\")[1:-1]]\n\n    # Compute the distance matrix\n    distance_matrix = []\n    for i in range(N):\n        row = []\n        for j in range(N):\n            row.append((towns[i][0] - towns[j][0]) ** 2 + (towns[i][1] - towns[j][1]) ** 2)\n        distance_matrix.append(row)\n\n    # Calculate the average length of paths\n    total_length = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            for k in range(j + 1, N):\n                total_length += (distance_matrix[i][j] + distance_matrix[j][k] + distance_matrix[k][i]) ** 0.5\n\n    average_length = total_length / (N * (N - 1) * (N - 2) / 6)\n    return str(average_length)"
    },
    {
        "number": 4214,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    import math\n\n    N = int(stdin.split('\\n')[0])\n    towns = []\n\n    for i in range(1, N + 1):\n        x, y = map(int, stdin.split('\\n')[i].split())\n        towns.append((x, y))\n\n    def distance(p1, p2):\n        return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2)\n\n    total_distance = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            total_distance += distance(towns[i], towns[j])\n\n    average_length = total_distance / (N * (N - 1))\n\n    return f\"{average_length:.6f}\""
    },
    {
        "number": 4214,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    points = [(int(x), int(y)) for x, y in [line.split() for line in lines[1:]]]\n\n    def distance(i, j):\n        return ((points[i][0] - points[j][0]) ** 2 + (points[i][1] - points[j][1]) ** 2) ** 0.5\n\n    def paths_lengths():\n        for i in range(N):\n            for j in range(i + 1, N):\n                for k in range(j + 1, N):\n                    yield distance(i, 0) + distance(0, j) + distance(j, k)\n                    yield distance(i, 0) + distance(0, k) + distance(k, j)\n                    yield distance(i, j) + distance(j, 0) + distance(0, k)\n                    yield distance(i, k) + distance(k, 0) + distance(0, j)\n                    yield distance(i, j) + distance(j, k) + distance(k, 0)\n                    yield distance(i, k) + distance(k, j) + distance(j, 0)\n\n    total_length = sum(paths_lengths())\n    avg_length = total_length / (N * (N - 1) * (N - 2) // 6)\n    return f\"{avg_length:.6f}\"\n\ninput_data = \"\"\"3\n0 0\n1 0\n0 1\"\"\"\noutput = solution(input_data)\nprint(output) "
    },
    {
        "number": 4214,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def distance(x1, y1, x2, y2):\n        return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5\n\n    def factorial(n):\n        return 1 if n == 1 else n * factorial(n - 1)\n\n    N = int(stdin.strip().split('\\n')[0])\n    towns = [tuple(map(int, line.strip().split())) for line in stdin.strip().split('\\n')[1:]]\n\n    total_length = 0\n    for i in range(factorial(N)):\n        current_length = 0\n        j = 0\n        for k in range(N):\n            current_length += distance(towns[i % N][j], towns[i % N][j + 1], towns[(i // N) % N][j], towns[(i // N) % N][j + 1])\n            j = (j + 1) % N\n        total_length += current_length\n\n    return str(total_length / factorial(N))"
    },
    {
        "number": 4214,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    towns = []\n    lines = stdin.split('\\n')[1:]\n    for line in lines:\n        x, y = line.split()\n        towns.append((int(x), int(y)))\n    \n    # Calculate distances and paths\n    distances = []\n    paths = []\n    n = len(towns)\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                x_i, y_i = towns[i]\n                x_j, y_j = towns[j]\n                distance = ((x_i - x_j) ** 2 + (y_i - y_j) ** 2) ** 0.5\n                distances.append(distance)\n                paths.append((i, j))\n    \n    # Calculate average path length\n    path_lengths = [sum(distances[i:i+n-1]) for i in range(0, len(distances), n-1)]\n    average_path_length = sum(path_lengths) / len(path_lengths)\n    \n    return \"{:.6f}\".format(average_path_length)"
    },
    {
        "number": 4214,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    import math\n\n    # Read input\n    N = int(input())\n    towns = []\n    for i in range(N):\n        x, y = map(int, input().split())\n        towns.append((x, y))\n\n    # Compute distance matrix\n    distances = []\n    for i in range(N):\n        row = []\n        for j in range(N):\n            x_i, y_i = towns[i]\n            x_j, y_j = towns[j]\n            distance = math.sqrt((x_i - x_j)**2 + (y_i - y_j)**2)\n            row.append(distance)\n        distances.append(row)\n\n    # Compute all permutations of towns\n    from itertools import permutations\n    paths = permutations(range(N))\n\n    # Compute path lengths\n    path_lengths = []\n    for path in paths:\n        length = sum([distances[path[i]][path[i+1]] for i in range(N-1)])\n        path_lengths.append(length)\n\n    # Compute average path length\n    average_length = sum(path_lengths) / len(path_lengths)\n\n    return f\"{average_length:.6f}\""
    },
    {
        "number": 4214,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Get the number of towns\n    n = int(stdin.splitlines()[0])\n\n    # Get the coordinates of each town\n    coordinates = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n\n    # Calculate the total distance for each path\n    distances = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            x1, y1 = coordinates[i]\n            x2, y2 = coordinates[j]\n            distance = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5\n            distances.append(distance)\n\n    # Calculate the average length\n    average_length = sum(distances) / len(distances)\n\n    # Return the result\n    return f\"{average_length:.6f}\""
    },
    {
        "number": 4215,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    uncovered_length = A - 2 * B\n    if uncovered_length < 0:\n        uncovered_length = 0\n    return str(uncovered_length)"
    },
    {
        "number": 4215,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    total_horizontal_length = A - 2 * B\n    if total_horizontal_length < 0:\n        total_horizontal_length = 0\n    return str(total_horizontal_length)"
    },
    {
        "number": 4215,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(2 * min(A, B))"
    },
    {
        "number": 4215,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    uncovered_length = A - 2 * B\n    return str(uncovered_length)"
    },
    {
        "number": 4215,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    curtain_length = A - B\n    uncovered_length = 2 * B\n\n    return str(uncovered_length)"
    },
    {
        "number": 4215,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    \n    total_length = 2 * B\n    if A <= 2 * B:\n        total_length -= A\n    \n    return str(total_length)"
    },
    {
        "number": 4215,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    uncovered_length = max(A - B, 0) + max(B - A, 0)\n    return str(uncovered_length)"
    },
    {
        "number": 4215,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split())\n    uncovered_length = max(A - 2 * B, 0)\n    return str(uncovered_length)"
    },
    {
        "number": 4215,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    total_uncovered_length = 2 * B\n    return str(total_uncovered_length)"
    },
    {
        "number": 4215,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A - 2 * B)"
    },
    {
        "number": 4216,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    min_f = float('inf')\n    min_pair = (0, 0)\n\n    for i in range(1, N + 1):\n        if N % i == 0:\n            f = max(len(str(i)), len(str(N // i)))\n            if f < min_f:\n                min_f = f\n                min_pair = (i, N // i)\n\n    return str(min_f)\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4216,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    f_min = float('inf')\n    a_min, b_min = 0, 0\n\n    for a in range(1, n + 1):\n        for b in range(1, n + 1):\n            if n == a * b:\n                f = max(len(str(a)), len(str(b)))\n                if f < f_min:\n                    f_min = f\n                    a_min, b_min = a, b\n\n    return str(f_min)\n\nn = \"10000\"\nprint(solution(n))  # Output: 3 "
    },
    {
        "number": 4216,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n\n    min_f = float('inf')\n    min_pair = None\n\n    for a in range(1, N + 1):\n        for b in range(a, N + 1):\n            if a * b == N:\n                f = max(len(str(a)), len(str(b)))\n                if f < min_f:\n                    min_f = f\n                    min_pair = (a, b)\n\n    return str(min_f)"
    },
    {
        "number": 4216,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    min_f = float('inf')\n    min_pair = None\n\n    for i in range(1, N + 1):\n        for j in range(1, N + 1):\n            if i * j == N:\n                f = max(len(str(i)), len(str(j)))\n                if f < min_f:\n                    min_f = f\n                    min_pair = (i, j)\n\n    return str(min_f) + '\\n' + str(min_pair)"
    },
    {
        "number": 4216,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    min_f = float('inf')\n    min_pair = (0, 0)\n\n    for a in range(1, N + 1):\n        for b in range(1, N + 1):\n            if a * b == N:\n                f = max(len(str(a)), len(str(b)))\n                if f < min_f:\n                    min_f = f\n                    min_pair = (a, b)\n\n    return str(min_f) + '\\n' + str(min_pair[0]) + ' ' + str(min_pair[1])"
    },
    {
        "number": 4216,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    min_f = float('inf')\n    min_pair = (0, 0)\n\n    for i in range(1, N + 1):\n        for j in range(1, N + 1):\n            if i * j == N:\n                f = max(len(str(i)), len(str(j)))\n                if f < min_f:\n                    min_f = f\n                    min_pair = (i, j)\n\n    return f\"{min_f}\"\n\nstdin = \"10000\"\nprint(solution(stdin))  # Output: 3 "
    },
    {
        "number": 4216,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    def num_digits(n: int) -> int:\n        return len(str(n))\n\n    def f(a: int, b: int) -> int:\n        return max(num_digits(a), num_digits(b))\n\n    min_value = float(\"inf\")\n    min_pair = (0, 0)\n\n    for a in range(1, N + 1):\n        for b in range(a, N + 1):\n            if a * b == N:\n                value = f(a, b)\n                if value < min_value:\n                    min_value = value\n                    min_pair = (a, b)\n\n    return str(min_value) + \"\\n\" + str(min_pair[0]) + \" \" + str(min_pair[1])"
    },
    {
        "number": 4216,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    min_f = 10**10\n    result = None\n    for a in range(1, n + 1):\n        for b in range(a, n + 1):\n            f = max(len(str(a)), len(str(b)))\n            if f < min_f:\n                min_f = f\n                result = (a, b)\n    return str(min_f) + \"\\n\" + str(result[0]) + \" \" + str(result[1])"
    },
    {
        "number": 4216,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    min_f = float('inf')\n    min_pair = (0, 0)\n\n    for a in range(1, N + 1):\n        for b in range(a, N + 1):\n            f = max(len(str(a)), len(str(b)))\n\n            if f < min_f:\n                min_f = f\n                min_pair = (a, b)\n\n    return f\"F({min_pair[0]}, {min_pair[1]}) has a minimum value of {min_f}.\""
    },
    {
        "number": 4216,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    min_f = float('inf')\n    result = None\n\n    for A in range(1, N + 1):\n        for B in range(A, N + 1):\n            if N == A * B:\n                f = max(len(str(A)), len(str(B)))\n                if f < min_f:\n                    min_f = f\n                    result = (A, B)\n\n    return str(min_f) + \"\\n\" + str(result)\n\ndef"
    },
    {
        "number": 4217,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # split the input by lines\n    lines = stdin.split(\"\\n\")\n\n    # read the first line containing the number of people and foods\n    N, M = map(int, lines[0].split())\n\n    # read the answers for each person\n    answers = [list(map(int, lines[i].split())) for i in range(1, N+1)]\n\n    # initialize a list to count the number of people who like each food\n    likes = [0] * M\n\n    # iterate over the answers for each person\n    for answer in answers:\n        # iterate over the foods liked by the person\n        for food in answer[1:]:\n            # increment the number of people who like the food\n            likes[food-1] += 1\n\n    # find the number of foods liked by all the N people\n    result = sum(1 for count in likes if count == N)\n\n    return str(result)"
    },
    {
        "number": 4217,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M, data = stdin.split('\\n')\n    N = int(N)\n    M = int(M)\n    K = [int(x) for x in data.split('\\n')]\n\n    liked_foods = set()\n\n    for i in range(N):\n        for food in K[i]:\n            liked_foods.add(food)\n\n    return str(len(liked_foods))"
    },
    {
        "number": 4217,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N, M = map(int, lines[0].split())\n    K_list = [int(x) for x in lines[1:N+1]]\n    A_list = [list(map(int, line.split())) for line in lines[N+1:]]\n\n    food_liked_by_all = set(range(1, M+1))\n\n    for i in range(N):\n        liked_foods = set(A_list[i][:K_list[i]])\n        food_liked_by_all.intersection_update(liked_foods)\n\n    return str(len(food_liked_by_all))"
    },
    {
        "number": 4217,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N, M = map(int, lines[0].split())\n    K = [int(x) for x in lines[1:]]\n    A = [list(map(int, lines[i+1].split()))[1:] for i in range(N)]\n\n    liked_foods = []\n    for food in range(1, M+1):\n        is_liked = True\n        for i in range(N):\n            if food not in A[i]:\n                is_liked = False\n                break\n        if is_liked:\n            liked_foods.append(food)\n\n    return str(len(liked_foods))"
    },
    {
        "number": 4217,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.splitlines()[0].split())\n    foods = {}\n\n    for i in range(1, n + 1):\n        line = stdin.splitlines()[i].split()\n        liked_foods = set(map(int, line[1:]))\n        for food in liked_foods:\n            foods[food] = foods.get(food, set()) | {i}\n\n    return str(len([food for food in foods.keys() if len(foods[food]) == n]))"
    },
    {
        "number": 4217,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N, M = map(int, lines[0].split())\n    K = [int(x) for x in lines[1:N+1]]\n    A = [list(map(int, lines[i+1].split())) for i in range(N)]\n    \n    foods_liked_by_all = set(range(1, M+1))\n    for i in range(N):\n        for a in A[i]:\n            foods_liked_by_all.intersection_update(range(a, M+1))\n    \n    return str(len(foods_liked_by_all))\n\ndef"
    },
    {
        "number": 4217,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, m = map(int, lines[0].split())\n    all_liked_foods = set(range(1, m+1))\n\n    for i in range(1, n+1):\n        num_liked_foods, *liked_foods = map(int, lines[i].split())\n        for j in range(num_liked_foods):\n            all_liked_foods.intersection_update(set(liked_foods[j:j+num_liked_foods]))\n\n    return str(len(all_liked_foods))\n\ndef"
    },
    {
        "number": 4217,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.readline().split())\n    foods_liked = [set() for _ in range(N)]\n    \n    for i in range(N):\n        K_i, *A_i = map(int, stdin.readline().split())\n        for j in range(K_i):\n            foods_liked[i].add(A_i[j])\n            \n    return str(len(set.intersection(*foods_liked)))\n    \n"
    },
    {
        "number": 4217,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, next(stdin).split())\n    liked_by_all = set(range(1, M+1))\n    for _ in range(N):\n        K, *likes = map(int, next(stdin).split())\n        liked_by_all = liked_by_all.intersection(set(likes))\n    return str(len(liked_by_all))\n\ndef"
    },
    {
        "number": 4217,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M, foods = stdin.split(\"\\n\")\n    N, M = int(N), int(M)\n    foods = [line.split() for line in foods]\n    \n    liked_foods = set(range(1, M+1))\n    for f in foods:\n        liked_foods.intersection_update(set(map(int, f[1:])))\n    \n    return str(len(liked_foods))"
    },
    {
        "number": 4218,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    odd_count = sum(1 for i in range(1, n+1) if i % 2 != 0)\n    total_count = n\n    probability = odd_count / total_count\n    return '{:.10f}'.format(probability)"
    },
    {
        "number": 4218,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    odd_count = 0\n    for i in range(1, n+1):\n        if i % 2 != 0:\n            odd_count += 1\n    probability = odd_count / n\n    return \"{:.10f}\".format(probability)"
    },
    {
        "number": 4218,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    odd_count = 0\n    for i in range(1, N+1):\n        if i % 2 != 0:\n            odd_count += 1\n    probability = odd_count / N\n    return \"{:.10f}\".format(probability)"
    },
    {
        "number": 4218,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    odd_count = 0\n    for i in range(1, N+1):\n        if i % 2 != 0:\n            odd_count += 1\n    return str(odd_count / N)\n\ndef"
    },
    {
        "number": 4218,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count_odd = 0\n    for i in range(1, n + 1):\n        if i % 2 != 0:\n            count_odd += 1\n    return f\"{count_odd / n:.10f}\""
    },
    {
        "number": 4218,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    total_numbers = N * (N + 1) // 2\n    odd_numbers = (N + 1) * N // 2\n    probability = odd_numbers / total_numbers\n    return f\"{probability:.10f}\""
    },
    {
        "number": 4218,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    odd_count = 0\n    for i in range(1, N + 1):\n        if i % 2 == 1:\n            odd_count += 1\n    probability = odd_count / N\n    return f\"{probability:.10f}\"\n\ninput_N = int(input())\nprint(solution(input_N)) "
    },
    {
        "number": 4218,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N % 2 == 0:\n        probability = 0.5\n    else:\n        probability = 1 / (2 * (N // 2 + 1))\n        probability += 1 / (2 * (N // 2))\n    return f\"{probability:.10f}\""
    },
    {
        "number": 4218,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    odd_count = 0\n    for i in range(1, N+1):\n        if i % 2 != 0:\n            odd_count += 1\n    probability = odd_count / N\n    return str(probability)"
    },
    {
        "number": 4218,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    odd_count = N // 2\n    even_count = N - odd_count\n    total_count = N\n\n    odd_probability = odd_count / total_count\n    even_probability = even_count / total_count\n\n    return f\"{odd_probability:.6f}\"\n\ndef"
    },
    {
        "number": 4219,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    honest_persons = 0\n    seen = set()\n\n    for i in range(1, N + 1):\n        A_i = int(lines[i])\n        for j in range(A_i):\n            x_ij, y_ij = map(int, lines[i + j + 1].split())\n            if y_ij == 1 and x_ij not in seen:\n                seen.add(x_ij)\n                honest_persons += 1\n\n    return str(honest_persons)"
    },
    {
        "number": 4219,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    testimonies = []\n    max_honest = 0\n    \n    for i in range(N):\n        A_i = int(stdin.split()[1])\n        testimony = []\n        for j in range(A_i):\n            x_ij, y_ij = map(int, stdin.split()[1:3])\n            testimony.append((x_ij, y_ij))\n            stdin = stdin.split(':', 1)[1]\n        testimonies.append(testimony)\n    \n    for i in range(N):\n        honest_count = 0\n        for testimony in testimonies:\n            if all(x_ij != i for x_ij, y_ij in testimony):\n                if all(y_ij == 1 for x_ij, y_ij in testimony):\n                    honest_count += 1\n        max_honest = max(max_honest, honest_count)\n    \n    return str(max_honest)"
    },
    {
        "number": 4219,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    people = [[] for _ in range(N+1)]\n\n    for i in range(1, N+1):\n        A = int(lines[i])\n        for j in range(A):\n            x, y = map(int, lines[i+j+1].split())\n            people[i].append((x, y))\n            people[x].append((i, y))\n\n    count = 0\n    visited = [False] * (N+1)\n\n    def dfs(person: int) -> None:\n        nonlocal count\n        visited[person] = True\n        for x, y in people[person]:\n            if not visited[x]:\n                if y == 1:\n                    count += 1\n                dfs(x)\n\n    for i in range(1, N+1):\n        if not visited[i]:\n            dfs(i)\n\n    return str(count)\n\ndef"
    },
    {
        "number": 4219,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    people = [[] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        a = int(stdin.readline())\n        for _ in range(a):\n            x, y = map(int, stdin.readline().split())\n            people[x].append((i, x, y))\n\n    def dfs(person: int, seen: set, honest: int) -> int:\n        if person in seen:\n            return honest\n        seen.add(person)\n        for i, x, y in people[person]:\n            if y == 0:\n                continue\n            honest = dfs(x, seen, honest + 1)\n        return honest\n\n    return str(max(dfs(i, set(), 0) for i in range(1, n + 1)))"
    },
    {
        "number": 4219,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    stdin = stdin.split('\\n')[1:]\n    testimonies = []\n    for i in range(N):\n        A_i = int(stdin[i * 2])\n        for j in range(A_i):\n            testimony = stdin[i * 2 + 1 + j].split()\n            x = int(testimony[0])\n            y = int(testimony[1])\n            testimonies.append((i + 1, x, y))\n    \n    honest_persons = set()\n    for testimony in testimonies:\n        i, x, y = testimony\n        if y == 1:\n            honest_persons.add(x)\n    \n    return str(len(honest_persons))"
    },
    {
        "number": 4219,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_honest(person: int, x: int, y: int) -> bool:\n        return (y == 1 and people[person - 1] == \"H\") or (y == 0 and people[person - 1] == \"K\")\n\n    input_lines = stdin.split(\"\\n\")\n    N = int(input_lines[0])\n    people = [\"H\"] * N\n\n    for i in range(1, N + 1):\n        A_i = int(input_lines[i])\n        for j in range(A_i):\n            x_ij, y_ij = map(int, input_lines[i + j].split())\n            if not is_honest(x_ij, x_ij, y_ij):\n                people[i - 1] = \"K\"\n                break\n\n    return str(people.count(\"H\"))"
    },
    {
        "number": 4219,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    people = []\n    for i in range(1, N+1):\n        testimony_count = int(lines[i])\n        testimony = lines[i+1:i+1+testimony_count]\n        testimony = [tuple(map(int, x.split())) for x in testimony]\n        people.append(testimony)\n\n    # Count the honest persons\n    honest_count = 0\n    for i in range(N):\n        for testimony in people[i]:\n            if testimony[1] == 0:\n                continue\n            if all(person[0] in people[i+1] for person in people[i]):\n                honest_count += 1\n                break\n\n    return str(honest_count)"
    },
    {
        "number": 4219,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def process_input(stdin: str) -> list:\n        input_lines = stdin.split(\"\\n\")\n        N = int(input_lines[0])\n        input_data = []\n        for i in range(1, len(input_lines), 2):\n            A_i = int(input_lines[i])\n            testimony_list = input_lines[i+1].split()\n            testimony_list = [int(x) for x in testimony_list]\n            testimony_list = list(zip(testimony_list[::2], testimony_list[1::2]))\n            input_data.append((A_i, testimony_list))\n        return input_data\n\n    def check_honest(input_data: list) -> int:\n        honest_count = 0\n        for A_i, testimony_list in input_data:\n            honest_list = set()\n            unkind_list = set()\n            for x_ij, y_ij in testimony_list:\n                if y_ij == 1:\n                    honest_list.add(x_ij)\n                else:\n                    unkind_list.add(x_ij)\n            if not unkind_list.intersection(honest_list):\n                honest_count += 1\n        return honest_count\n\n    input_data = process_input(stdin)\n    max_honest_count = check_honest(input_data)\n    return str(max_honest_count)"
    },
    {
        "number": 4219,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    max_honest = 0\n    \n    for i in range(1, N+1):\n        A_i = int(lines[i])\n        for j in range(1, A_i+1):\n            x, y = map(int, lines[i+j].split())\n            if y == 1:\n                max_honest += 1\n            else:\n                max_honest -= 1\n                \n            if max_honest < 0:\n                max_honest = 0\n                \n    return str(max_honest)"
    },
    {
        "number": 4219,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    people = []\n    for i in range(1, N+1):\n        A_i = int(lines[i])\n        testimony = []\n        for j in range(A_i):\n            testimony.append(tuple(map(int, lines[i+j+1].split())))\n        people.append(testimony)\n\n    honest_count = 0\n    for i in range(N):\n        if len(set([t[0] for t in people[i] if t[1] == 1])) == i+1:\n            honest_count += 1\n\n    return str(honest_count)\n\ndef"
    },
    {
        "number": 4220,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K, S = stdin.split()\n    K = int(K)\n\n    if len(S) <= K:\n        return S\n    else:\n        return S[:K] + \"...\""
    },
    {
        "number": 4220,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    K, S = stdin.split()\n    K = int(K)\n\n    if len(S) <= K:\n        return S\n    else:\n        return S[:K] + \"...\"\n\ninput_string = input()\nprint(solution(input_string)) "
    },
    {
        "number": 4220,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    K, S = stdin.split()\n    K = int(K)\n    \n    if len(S) <= K:\n        return S\n    else:\n        return S[:K] + \"...\"\n    \n"
    },
    {
        "number": 4220,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    K, S = stdin.split()\n    K = int(K)\n    if len(S) <= K:\n        return S\n    else:\n        return S[:K] + \"...\""
    },
    {
        "number": 4220,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    K, S = stdin.split()\n    K = int(K)\n    if len(S) > K:\n        return S[:K] + \"...\"\n    else:\n        return S"
    },
    {
        "number": 4220,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    K, S = stdin.split()\n    K = int(K)\n\n    if len(S) <= K:\n        return S\n    else:\n        return S[:K] + \"...\""
    },
    {
        "number": 4220,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    K, S = stdin.split('\\n')\n    K = int(K)\n    S = S.strip()\n    if len(S) <= K:\n        return S\n    else:\n        return S[:K] + '...'"
    },
    {
        "number": 4220,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    K, S = stdin.split()\n    K = int(K)\n    if len(S) <= K:\n        return S\n    else:\n        return S[:K] + '...'"
    },
    {
        "number": 4220,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k, s = stdin.split()\n    k = int(k)\n    \n    if len(s) <= k:\n        return s\n    else:\n        return s[:k] + \"...\"\n    \n"
    },
    {
        "number": 4220,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    K, S = stdin.split()\n    K = int(K)\n    \n    if len(S) <= K:\n        return S\n    else:\n        return S[:K] + \"...\""
    },
    {
        "number": 4221,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    word = stdin.strip()\n    if word[-1] == 's':\n        return word + 'es'\n    else:\n        return word + 's'"
    },
    {
        "number": 4221,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    word = stdin.strip()\n    if word[-1] == 's':\n        return word + 'es'\n    else:\n        return word + 's'"
    },
    {
        "number": 4221,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    noun = stdin.strip()\n    if noun[-1] == 's':\n        return noun + 'es'\n    else:\n        return noun + 's'"
    },
    {
        "number": 4221,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    singular = stdin.strip()\n    if singular.endswith(\"s\"):\n        plural = singular + \"es\"\n    else:\n        plural = singular + \"s\"\n    return plural"
    },
    {
        "number": 4221,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if S[-1] == 's':\n        return S + 'es'\n    else:\n        return S + 's'"
    },
    {
        "number": 4221,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if S[-1] == 's':\n        return S + 'es'\n    else:\n        return S + 's'"
    },
    {
        "number": 4221,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the plural form of a Taknese noun\n\n    Args:\n    stdin: the input Taknese noun\n\n    Returns:\n    The plural form of the Taknese noun\n    \"\"\"\n    if stdin[-1] == \"s\":\n        return stdin + \"es\"\n    else:\n        return stdin + \"s\""
    },
    {
        "number": 4221,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    noun = stdin.strip()\n    if noun[-1] == 's':\n        return noun + 'es'\n    else:\n        return noun + 's'"
    },
    {
        "number": 4221,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    word = stdin.strip()\n    if word[-1] == \"s\":\n        return word + \"es\"\n    else:\n        return word + \"s\""
    },
    {
        "number": 4221,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    word = stdin.strip()\n    if word[-1] == 's':\n        return word + 'es'\n    else:\n        return word + 's'"
    },
    {
        "number": 4222,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split('\\n')\n    N, K = map(int, input_lines[0].split())\n    snukes = [[] for _ in range(N)]\n    \n    for i in range(K):\n        d = int(input_lines[i+1])\n        for j in range(d):\n            snukes[int(input_lines[i+2+j])-1].append(i+1)\n    \n    count = 0\n    for i in range(N):\n        if len(snukes[i]) == 0:\n            count += 1\n            \n    return str(count)"
    },
    {
        "number": 4222,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N, K = map(int, lines[0].split())\n    Snukes = [False] * (N+1)\n    for i in range(1, K+1):\n        d_i = int(lines[i])\n        A_i = list(map(int, lines[i+1].split()))\n        for j in range(d_i):\n            Snukes[A_i[j]] = True\n    count = sum(not Snukes[i] for i in range(1, N+1))\n    return str(count)"
    },
    {
        "number": 4222,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split('\\n')[0].split())\n    snukes = [[] for _ in range(N+1)]\n    \n    for i in range(1, K+1):\n        d = int(stdin.split('\\n')[i])\n        snacks = list(map(int, stdin.split('\\n')[i+1].split()))\n        for j in range(d):\n            snukes[snacks[j]].append(i)\n    \n    count = 0\n    for i in range(1, N+1):\n        if len(set(snukes[i])) == 1:\n            count += 1\n    \n    return str(count)"
    },
    {
        "number": 4222,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.readline().split())\n    snukes = set(range(1, N+1))\n\n    for i in range(K):\n        di, *A = map(int, stdin.readline().split())\n        snukes -= set(A)\n\n    return str(len(snukes))"
    },
    {
        "number": 4222,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split('\\n')[0].split())\n    snakes = {i+1: [] for i in range(n)}\n    for i in range(1, k+1):\n        d, *snack_snakes = stdin.split('\\n')[i].split()\n        d = int(d)\n        for snake in snack_snakes:\n            snakes[int(snake)].append(i)\n    return str(len([snake for snake, snacks in snakes.items() if len(snacks) == 0]))\n"
    },
    {
        "number": 4222,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N, K = map(int, lines[0].split())\n    Snukes = set(range(1, N+1))\n    Snacks = [[] for _ in range(K)]\n    \n    for i in range(1, K+1):\n        snack_count = int(lines[i])\n        Snacks[i-1] = set(map(int, lines[i+1].split()))\n        Snukes = Snukes - Snacks[i-1]\n    \n    return str(len(Snukes))"
    },
    {
        "number": 4222,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split('\\n')[0].split())\n    snukes = [[] for _ in range(N + 1)]\n    \n    for i in range(1, K + 1):\n        d = int(stdin.split('\\n')[i])\n        snack_list = list(map(int, stdin.split('\\n')[i+1].split()))\n        for j in range(len(snack_list)):\n            snukes[snack_list[j]].append(i)\n    \n    total_victims = 0\n    for i in range(1, N + 1):\n        if len(snukes[i]) == 0:\n            total_victims += 1\n    \n    return str(total_victims)"
    },
    {
        "number": 4222,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N, K = map(int, lines[0].split())\n    snukes = [False] * N\n\n    for i in range(1, K + 1):\n        d, *A_i = map(int, lines[i].split())\n        for j in A_i:\n            snukes[j - 1] = True\n\n    return str(len(snukes) - sum(snukes))"
    },
    {
        "number": 4222,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N, K = map(int, lines[0].split())\n    d = [0] * K\n    A = [[] for _ in range(K)]\n    \n    for i in range(1, K+1):\n        d[i-1] = int(lines[i])\n        A[i-1] = list(map(int, lines[i+1].split()))\n    \n    total_snakes = 0\n    for i in range(K):\n        total_snakes += d[i]\n    \n    total_victims = 0\n    for i in range(K):\n        for j in range(d[i]):\n            if A[i][j] not in A[i][j+1:]:\n                total_victims += 1\n    \n    return str(total_victims)\n\ndef"
    },
    {
        "number": 4222,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    N, K = map(int, input_list[0].split())\n    victim_count = 0\n\n    for i in range(1, K + 1):\n        d_i, *A_i = map(int, input_list[i].split())\n        A_i = set(A_i)\n        for j in range(1, N + 1):\n            if j not in A_i:\n                victim_count += 1\n                break\n\n    return str(victim_count)\n\nstdin = \"3 2\\n2\\n1 3\\n1\\n3\"\nprint(solution(stdin)) # Output: 1 "
    },
    {
        "number": 4223,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split()\n    n = int(n)\n    slimes = []\n    \n    for i in range(n):\n        if i == 0 or s[i] != s[i - 1]:\n            slimes.append(1)\n        else:\n            slimes[-1] += 1\n    \n    return len(slimes)"
    },
    {
        "number": 4223,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split()\n    n = int(n)\n    stack = []\n    \n    for char in s:\n        if stack and stack[-1] == char:\n            stack.pop()\n        else:\n            stack.append(char)\n    \n    return len(stack)"
    },
    {
        "number": 4223,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split()\n    N = int(N)\n    stack = []\n\n    for i in range(N):\n        if stack and stack[-1] == S[i]:\n            stack.pop()\n        else:\n            stack.append(S[i])\n\n    return len(stack)\n\ndef"
    },
    {
        "number": 4223,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split('\\n')\n    N = int(N)\n    stack = []\n    for i in range(N):\n        if stack and stack[-1] == S[i]:\n            stack.pop()\n        else:\n            stack.append(S[i])\n    return len(stack)"
    },
    {
        "number": 4223,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # split input into N and S\n    N, S = stdin.split()\n    N = int(N)\n\n    # initialize result and current color\n    result = \"\"\n    current_color = None\n\n    # iterate through the slimes\n    for i in range(N):\n        # if color is different than current color, add it to result\n        if S[i] != current_color:\n            result += S[i]\n            current_color = S[i]\n\n    return str(len(result))"
    },
    {
        "number": 4223,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split()\n    N = int(N)\n    stack = []\n    count = 0\n\n    for i in range(N):\n        if not stack or stack[-1] != S[i]:\n            stack.append(S[i])\n            count += 1\n        else:\n            stack.pop()\n            count -= 1\n\n    return count"
    },
    {
        "number": 4223,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split('\\n')\n    N = int(N)\n\n    count = 1\n    prev_char = S[0]\n    for char in S[1:]:\n        if char == prev_char:\n            count += 1\n        else:\n            prev_char = char\n            count += 1\n\n    return count"
    },
    {
        "number": 4223,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.strip().split()\n    N = int(N)\n    merged_slimes = []\n\n    for i in range(N):\n        if not merged_slimes or S[i] != merged_slimes[-1][0]:\n            merged_slimes.append((S[i], 1))\n        else:\n            merged_slimes[-1] = (S[i], merged_slimes[-1][1] + 1)\n\n    return sum(slime[1] for slime in merged_slimes)\n"
    },
    {
        "number": 4223,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split('\\n')\n    n = int(n)\n    \n    result = []\n    i = 0\n    while i < n:\n        char = s[i]\n        count = 1\n        while i+1 < n and s[i+1] == char:\n            count += 1\n            i += 1\n        result.append((char, count))\n        i += 1\n        \n    return result\n\ndef"
    },
    {
        "number": 4223,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split()\n    N = int(N)\n    slime_colors = list(S)\n    merged = True\n    \n    while merged:\n        merged = False\n        i = 0\n        while i < N - 1:\n            if slime_colors[i] == slime_colors[i+1]:\n                slime_colors[i] = '*'\n                del slime_colors[i+1]\n                merged = True\n            i += 1\n            \n    return len([color for color in slime_colors if color != '*'])"
    },
    {
        "number": 4224,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *sequence = stdin.split()\n    N = int(N)\n    sequence = [int(a) for a in sequence]\n\n    operations = 0\n    for i in range(N):\n        if sequence[i] % 2 == 0:\n            operations += 1\n            sequence[i] //= 2\n        else:\n            operations += 2\n            sequence[i] *= 3\n\n    return str(operations)"
    },
    {
        "number": 4224,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, sequence = map(int, stdin.split())\n    operations = 0\n\n    for i in range(N):\n        if sequence[i] % 2 == 0:\n            operations += 1\n            sequence[i] //= 2\n        else:\n            if sequence[i] * 3 <= 1000000:\n                operations += 1\n                sequence[i] *= 3\n\n    return str(operations)\n\ninput_data = input()\nprint(solution(input_data)) "
    },
    {
        "number": 4224,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, seq = map(int, stdin.split())\n    seq = list(map(int, seq))\n\n    operations = 0\n    i = 0\n    while i < n:\n        if seq[i] % 2 == 1:\n            seq[i] *= 3\n            operations += 1\n            i += 1\n        else:\n            seq[i] //= 2\n            operations += 1\n            i += 1\n\n        if i >= n:\n            break\n\n        if seq[i] % 3 == 0:\n            seq[i] *= 2\n            operations += 1\n            i += 1\n        else:\n            seq[i] *= 3\n            operations += 1\n            i += 1\n\n    return str(operations)\n"
    },
    {
        "number": 4224,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, seq = stdin.split()\n    N = int(N)\n    seq = list(map(int, seq.split()))\n\n    def can_perform_operation(seq: List[int]) -> bool:\n        for i in range(len(seq)):\n            if seq[i] % 2 == 0:\n                seq[i] //= 2\n            elif seq[i] % 3 == 0:\n                seq[i] *= 3\n            else:\n                return False\n        return True\n\n    count = 0\n    while can_perform_operation(seq):\n        count += 1\n\n    return str(count)"
    },
    {
        "number": 4224,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, sequence = stdin.split()\n    N = int(N)\n    sequence = [int(x) for x in sequence.split()]\n\n    operations = 0\n    for i in range(N):\n        if sequence[i] % 3 == 0:\n            operations += 1\n        elif sequence[i] % 2 == 0:\n            operations += 2\n\n    return str(operations)\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4224,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, seq = stdin.split()\n    N = int(N)\n    seq = list(map(int, seq.split()))\n\n    def valid_operation(seq: list, i: int, operation: str) -> bool:\n        if operation == \"divide\":\n            return seq[i] % 2 == 0\n        elif operation == \"multiply\":\n            return seq[i] * 3 <= 1000000000\n        else:\n            return False\n\n    def perform_operation(seq: list, i: int, operation: str) -> None:\n        if operation == \"divide\":\n            seq[i] //= 2\n        elif operation == \"multiply\":\n            seq[i] *= 3\n\n    max_operations = 0\n    for i in range(N):\n        operations = 0\n        for operation in [\"divide\", \"multiply\"]:\n            if valid_operation(seq, i, operation):\n                operations += 1\n                perform_operation(seq, i, operation)\n        max_operations = max(max_operations, operations)\n\n    return str(max_operations)"
    },
    {
        "number": 4224,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a = stdin.split()\n    n = int(n)\n    a = list(map(int, a.split()))\n    \n    count = 0\n    for i in range(n):\n        if a[i] % 2 == 0:\n            count += 1\n            a[i] //= 2\n        else:\n            count += 1\n            a[i] *= 3\n    \n    return str(count)"
    },
    {
        "number": 4224,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, seq = stdin.split()\n    n = int(n)\n    seq = list(map(int, seq.split()))\n\n    operations = 0\n    while seq != [1] * n:\n        for i in range(n):\n            if seq[i] % 2 == 1:\n                seq[i] *= 2\n            elif seq[i] % 3 == 2:\n                seq[i] *= 3\n            else:\n                seq[i] = seq[i] // 2\n        operations += 1\n\n    return str(operations)"
    },
    {
        "number": 4224,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, sequence = stdin.split()\n    n = int(n)\n    sequence = [int(x) for x in sequence.split()]\n\n    max_operations = 0\n    for i in range(n):\n        if sequence[i] % 2 == 1:\n            max_operations += 1\n        if sequence[i] % 3 == 2:\n            max_operations += 1\n        if sequence[i] % 3 == 1:\n            max_operations += 1\n        if sequence[i] % 2 == 0 and sequence[i] % 3 == 0:\n            max_operations += 1\n\n    return str(max_operations)\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4224,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, sequence = stdin.split()\n    N = int(N)\n    sequence = list(map(int, sequence.split()))\n\n    count = 0\n    for i in range(N):\n        if sequence[i] % 2 == 1:\n            count += 1\n            sequence[i] *= 2\n        if sequence[i] % 3 == 2:\n            count += 1\n            sequence[i] += 1\n\n    return str(count)"
    },
    {
        "number": 4225,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    cards = [1] * A + [0] * B + [-1] * C\n    cards.sort(reverse=True)\n    \n    max_sum = 0\n    for i in range(K):\n        max_sum += cards[i]\n    \n    return str(max_sum)\n\ndef"
    },
    {
        "number": 4225,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    if K == 0:\n        return \"0\"\n    elif K > A + B + C:\n        return \"Impossible\"\n    elif K == A + B + C:\n        return str(A - B + C)\n    elif A >= B + C:\n        return str(K)\n    elif B >= A + C:\n        return str(K - (A - B))\n    else:\n        return str(K - (A - C))"
    },
    {
        "number": 4225,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    max_sum = max(0, K * 1 - min(K * -1, B, C))\n    return str(max_sum)"
    },
    {
        "number": 4225,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = list(map(int, stdin.split()))\n    nums = [1] * A + [0] * B + [-1] * C\n    nums.sort(reverse=True)\n    result = 0\n    for i in range(K):\n        if nums[i] == 0:\n            break\n        result += nums[i]\n    return str(result)\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4225,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    cards = [1] * A + [0] * B + [-1] * C\n    cards.sort(reverse=True)\n\n    if K == 0:\n        return \"0\"\n    elif K >= len(cards):\n        return \"\".join(map(str, cards))\n    else:\n        return \"\".join(map(str, cards[:K]))"
    },
    {
        "number": 4225,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    cards = [1] * A + [0] * B + [-1] * C\n    cards.sort(reverse=True)\n    \n    max_sum = 0\n    for card in cards:\n        if K == 0:\n            break\n        if card > 0:\n            max_sum += card\n            K -= 1\n    \n    return str(max_sum)"
    },
    {
        "number": 4225,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    cards = [1] * A + [0] * B + [-1] * C\n    cards.sort(reverse=True)\n    \n    result = 0\n    for card in cards:\n        if K == 0:\n            break\n        result += card\n        K -= 1\n    \n    return str(result)"
    },
    {
        "number": 4225,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    cards = list(map(int, stdin.split()))\n    A, B, C, K = cards\n\n    if K > A + B + C:\n        return \"0\"\n\n    max_sum = -1\n    if K <= A:\n        max_sum = K * 1\n    elif K <= A + B:\n        max_sum = A * 1 + (K - A) * 0\n    else:\n        max_sum = A * 1 + B * 0 + (K - A - B) * -1\n\n    return str(max_sum)\n\ndef"
    },
    {
        "number": 4225,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    cards = [1] * A + [0] * B + [-1] * C\n    cards.sort(reverse=True)\n    total = 0\n    for card in cards[:K]:\n        total += card\n    return str(total)"
    },
    {
        "number": 4225,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n\n    cards = [1] * A + [0] * B + [-1] * C\n    cards.sort(reverse=True)\n\n    max_sum = sum(cards[:K])\n\n    return str(max_sum)"
    },
    {
        "number": 4226,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    crane_legs = 2\n    turtle_legs = 4\n    for cranes in range(X + 1):\n        turtles = X - cranes\n        total_legs = cranes * crane_legs + turtles * turtle_legs\n        if total_legs == Y:\n            return \"Yes\"\n    return \"No\"\n\ndef"
    },
    {
        "number": 4226,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    if Y % 4 == 0:\n        if X >= Y // 4:\n            return \"Yes\"\n    if Y % 2 == 0:\n        if X >= Y // 2:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4226,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x * 2 == y or x * 4 == y:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4226,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    cranes = Y // 2\n    turtles = Y // 4\n\n    if X == cranes + turtles:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4226,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    total_animals = X\n    total_legs = Y\n\n    for cranes in range(total_animals + 1):\n        turtles = total_animals - cranes\n        if cranes * 2 + turtles * 4 == total_legs:\n            return \"Yes\"\n\n    return \"No\""
    },
    {
        "number": 4226,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n\n    for x in range(1, X + 1):\n        y = Y - 4 * x\n        if y % 2 == 0:\n            return \"Yes\"\n\n    return \"No\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    cranes = y // 2\n    turtles = y - cranes\n    if x == cranes + turtles:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4226,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n\n    for cranes in range(X + 1):\n        turtles = X - cranes\n        total_legs = 4 * turtles + 2 * cranes\n        if total_legs == Y:\n            return \"Yes\"\n\n    return \"No\""
    },
    {
        "number": 4226,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n\n    for x in range(1, X + 1):\n        for y in range(1, Y + 1):\n            if x * 2 + y * 4 == X + Y:\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4226,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    for cranes in range(1, X+1):\n        turtles = X - cranes\n        if cranes * 2 + turtles * 4 == Y:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4227,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(graph, start, visited, current_path, count):\n        if len(current_path) == len(graph):\n            count[0] += 1\n            return\n        visited.add(start)\n        for neighbor in graph[start]:\n            if neighbor not in visited:\n                dfs(graph, neighbor, visited, current_path + [neighbor], count)\n        visited.remove(start)\n\n    N, M = map(int, stdin.split()[0:2])\n    graph = [[] for _ in range(N)]\n\n    for _ in range(M):\n        a, b = map(int, stdin.split()[0:2])\n        graph[a - 1].append(b - 1)\n        graph[b - 1].append(a - 1)\n\n    visited = set()\n    current_path = [0]\n    count = [0]\n\n    dfs(graph, 0, visited, current_path, count)\n\n    return str(count[0])"
    },
    {
        "number": 4227,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def parse_input(input_str: str) -> Tuple[int, List[Tuple[int, int]]]:\n        lines = input_str.split(\"\\n\")\n        n, m = map(int, lines[0].split())\n        edges = [tuple(map(int, line.split())) for line in lines[1:-1]]\n        return n, edges\n\n    def get_adjacency_list(n: int, edges: List[Tuple[int, int]]) -> List[List[int]]:\n        adjacency_list = [[] for _ in range(n)]\n        for a, b in edges:\n            adjacency_list[a - 1].append(b - 1)\n            adjacency_list[b - 1].append(a - 1)\n        return adjacency_list\n\n    def count_paths(n: int, adjacency_list: List[List[int]]) -> int:\n        def dfs(current_node: int, visited: List[bool], path: List[int]) -> int:\n            if len(path) == n - 1 and visited[current_node]:\n                return 1\n            visited[current_node] = True\n            count = 0\n            for neighbor in adjacency_list[current_node]:\n                if not visited[neighbor]:\n                    count += dfs(neighbor, visited.copy(), path + [current_node])\n            return count\n\n        visited = [False] * n\n        return dfs(0, visited, [])\n\n    stdin = stdin.strip()\n    n, edges = parse_input(stdin)\n    adjacency_list = get_adjacency_list(n, edges)\n    return str(count_paths(n, adjacency_list))"
    },
    {
        "number": 4227,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, input().split())\n    graph = [[] for _ in range(N)]\n    for _ in range(M):\n        a, b = map(int, input().split())\n        graph[a-1].append(b-1)\n        graph[b-1].append(a-1)\n    \n    def dfs(vertex, visited, path, count):\n        visited[vertex] = True\n        path.append(vertex)\n        if len(path) == N:\n            count[0] += 1\n        else:\n            for neighbor in graph[vertex]:\n                if not visited[neighbor]:\n                    dfs(neighbor, visited, path, count)\n        path.pop()\n        visited[vertex] = False\n        \n    count = [0]\n    visited = [False] * N\n    dfs(0, visited, [], count)\n    return str(count[0])"
    },
    {
        "number": 4227,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function solves the problem by reading the input and finding the number of different paths that start from vertex 1 and visit all the vertices exactly once.\n\n    :param stdin: input in the given format\n    :return: the number of different paths that start from vertex 1 and visit all the vertices exactly once\n    \"\"\"\n    # Read the input\n    n, m = map(int, input().split())\n    graph = {}\n    for i in range(m):\n        a, b = map(int, input().split())\n        if a not in graph:\n            graph[a] = [b]\n        else:\n            graph[a].append(b)\n\n        if b not in graph:\n            graph[b] = [a]\n        else:\n            graph[b].append(a)\n\n    # Initialize the number of different paths to 0\n    num_paths = 0\n\n    # Initialize a list to store the visited vertices\n    visited = [False] * (n + 1)\n\n    # Recursively find the number of different paths that start from vertex 1 and visit all the vertices exactly once\n    def dfs(start, current_path):\n        nonlocal num_paths\n        visited[start] = True\n        current_path.append(start)\n\n        if len(current_path) == n:\n            num_paths += 1\n        else:\n            for neighbor in graph[start]:\n                if not visited[neighbor]:\n                    dfs(neighbor, current_path)\n\n        current_path.pop()\n        visited[start] = False\n\n    # Start the recursion from vertex 1\n    dfs(1, [])\n\n    return str(num_paths)\n"
    },
    {
        "number": 4227,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    N, M = map(int, lines[0].split())\n    edges = [tuple(map(int, line.split())) for line in lines[1:]]\n    \n    def dfs(u: int, visited: set) -> int:\n        if u == 1:\n            visited.add(1)\n        for v in range(2, N + 1):\n            if (u, v) not in edges and (v, u) not in edges and v not in visited:\n                visited.add(v)\n                dfs(v, visited)\n        if len(visited) == N:\n            return 1\n        return 0\n    \n    count = 0\n    for i in range(1, N + 1):\n        count += dfs(i, set())\n    \n    return str(count)"
    },
    {
        "number": 4227,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def count_paths(graph: List[List[int]], start: int, end: int, visited: List[int], path: List[int]) -> int:\n        if start == end:\n            return 1\n\n        count = 0\n        for neighbor in graph[start]:\n            if not visited[neighbor]:\n                visited[neighbor] = True\n                path.append(neighbor)\n                count += count_paths(graph, neighbor, end, visited, path)\n                path.pop()\n                visited[neighbor] = False\n\n        return count\n\n    def check_graph(graph: List[List[int]]) -> bool:\n        for i in range(len(graph)):\n            for j in range(i + 1, len(graph[i])):\n                if graph[i][j] in graph[j]:\n                    return False\n        return True\n\n    def parse_input(stdin: str) -> Tuple[int, int, List[List[int]]]:\n        lines = stdin.split(\"\\n\")\n        n, m = map(int, lines[0].split())\n        graph = [[] for _ in range(n + 1)]\n\n        for i in range(1, m + 1):\n            a, b = map(int, lines[i].split())\n            graph[a].append(b)\n            graph[b].append(a)\n\n        return n, m, graph\n\n    n, m, graph = parse_input(stdin)\n    start = 1\n    end = n\n    visited = [False] * (end + 1)\n    path = [start]\n\n    if not check_graph(graph):\n        return \"Invalid graph\"\n\n    count = count_paths(graph, start, end, visited, path)\n    return str(count)"
    },
    {
        "number": 4227,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.splitlines()[0].split())\n    edges = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n\n    def has_cycle(visited, start):\n        visited[start] = True\n        for neighbor in range(1, n + 1):\n            if not visited[neighbor]:\n                if has_cycle(visited, neighbor):\n                    return True\n            elif neighbor != start:\n                return True\n        return False\n\n    paths = 0\n    for i in range(1, 2**(n - 1)):\n        visited = [False] * (n + 1)\n        if not has_cycle(visited, 1):\n            for j in range(1, n + 1):\n                visited[j] = False\n            count = 0\n            for j in range(1, n + 1):\n                if not visited[j]:\n                    count += 1\n                    visited[j] = True\n                    if count == n:\n                        break\n            if count == n:\n                paths += 1\n\n    return str(paths)\n\ndef"
    },
    {
        "number": 4227,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n, m = map(int, lines[0].split())\n    graph = [[False for _ in range(n+1)] for _ in range(n+1)]\n\n    for i in range(1, m+1):\n        a, b = map(int, lines[i].split())\n        graph[a][b] = True\n        graph[b][a] = True\n\n    def dfs(node: int, visited: set, path: List[int]) -> int:\n        if len(path) == n:\n            return 1\n\n        count = 0\n        for i in range(1, n+1):\n            if i not in visited and graph[node][i]:\n                visited.add(i)\n                path.append(i)\n                count += dfs(i, visited, path)\n                path.pop()\n                visited.remove(i)\n\n        return count\n\n    count = dfs(1, {1}, [1])\n    return str(count)\n"
    },
    {
        "number": 4227,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    graph = [[] for _ in range(N)]\n    \n    for _ in range(M):\n        a, b = map(int, stdin.split()[2:])\n        graph[a-1].append(b-1)\n        graph[b-1].append(a-1)\n    \n    def dfs(node: int, visited: set, path: list) -> int:\n        if node == 0:\n            return 1\n        \n        count = 0\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                visited.add(neighbor)\n                path.append(neighbor)\n                count += dfs(neighbor, visited, path)\n                visited.remove(neighbor)\n                path.pop()\n                \n        return count\n    \n    return str(dfs(0, {0}, [0]))"
    },
    {
        "number": 4227,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def find_path(graph, start, visited, path):\n        visited[start] = True\n        path.append(start)\n\n        if len(path) == n:\n            if all(visited):\n                nonlocal count\n                count += 1\n            visited[start] = False\n            path.pop()\n            return\n\n        for i in range(1, n + 1):\n            if not visited[i] and graph[start][i] == 1:\n                find_path(graph, i, visited.copy(), path.copy())\n\n        visited[start] = False\n        path.pop()\n\n    n, m = list(map(int, stdin.split()[0:2]))\n    graph = [[0] * (n + 1) for _ in range(n + 1)]\n\n    for i in range(m):\n        a, b = list(map(int, stdin.split()[2 * i + 2:2 * i + 4]))\n        graph[a][b] = 1\n        graph[b][a] = 1\n\n    count = 0\n    visited = [False] * (n + 1)\n    path = []\n    find_path(graph, 1, visited, path)\n\n    return str(count)"
    },
    {
        "number": 4228,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split())\n    total = (N*(N+1)) // 2\n    max_flavor = total - L\n    min_flavor = total - max_flavor - N\n\n    return abs(min_flavor)\n\ndef"
    },
    {
        "number": 4228,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split())\n    apples = [L + i - 1 for i in range(1, N + 1)]\n\n    min_diff = float(\"inf\")\n    min_flavor = 0\n    for i in range(N):\n        pie_flavor = sum(apples[:i] + apples[i + 1 :])\n        diff = abs(pie_flavor - N * L)\n        if diff < min_diff:\n            min_diff = diff\n            min_flavor = pie_flavor\n\n    return str(min_flavor)"
    },
    {
        "number": 4228,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split())\n    apples = [L + i - 1 for i in range(1, N + 1)]\n    \n    if N <= 2:\n        return sum(apples)\n    \n    min_diff = float('inf')\n    result = 0\n    \n    for i in range(N):\n        sum_flavors = sum(apples[:i] + apples[i+1:])\n        diff = abs(sum_flavors - (sum(apples) - apples[i]))\n        \n        if diff < min_diff:\n            min_diff = diff\n            result = sum_flavors\n    \n    return result"
    },
    {
        "number": 4228,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split())\n    apples = [L+i-1 for i in range(1, N+1)]\n    min_diff = float('inf')\n    min_pie = 0\n    \n    for i in range(N):\n        remaining_apples = apples[:i] + apples[i+1:]\n        pie_flavor = sum(remaining_apples)\n        diff = abs(pie_flavor - (sum(apples) - apples[i]))\n        if diff < min_diff:\n            min_diff = diff\n            min_pie = pie_flavor\n            \n    return str(min_pie)"
    },
    {
        "number": 4228,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split())\n    apples = [(i * L) + i for i in range(1, N+1)]\n    target_sum = sum(apples)\n    min_diff = float(\"inf\")\n    for i in range(N):\n        pie_sum = sum(apples[:i] + apples[i+1:])\n        diff = abs(target_sum - pie_sum)\n        if diff < min_diff:\n            min_diff = diff\n            result = pie_sum\n    return str(result)"
    },
    {
        "number": 4228,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input into two integers, N and L\n    N, L = map(int, stdin.split())\n\n    # Calculate the flavor of each apple\n    apples = [(L + i - 1) for i in range(1, N + 1)]\n\n    # Calculate the flavor of the pie made with all N apples\n    pie_flavor_all = sum(apples)\n\n    # Calculate the flavor of the pie made with N-1 apples\n    pie_flavor_N_minus_1 = sum(apples[1:])\n\n    # Calculate the flavor of the pie made with N-2 apples\n    pie_flavor_N_minus_2 = sum(apples[2:])\n\n    # Calculate the absolute difference between the flavors of the pie made with N-1 and N-2 apples\n    abs_diff = abs(pie_flavor_N_minus_1 - pie_flavor_N_minus_2)\n\n    # Calculate the flavor of the apple pie made with N-1 apples\n    pie_flavor_N_minus_1_optimal = pie_flavor_all - abs_diff\n\n    return str(pie_flavor_N_minus_1_optimal)"
    },
    {
        "number": 4228,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split())\n    apples = [i + L - 1 for i in range(1, N + 1)]\n    sum_all = sum(apples)\n    sum_remaining = sum(apples[1:])\n    apple_to_eat = apples[0]\n    diff = abs(sum_all - 2 * sum_remaining)\n    return str(diff)\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4228,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, L = list(map(int, stdin.split()))\n\n    apples = [L + i - 1 for i in range(1, N + 1)]\n\n    def min_difference(index: int) -> int:\n        if index == N:\n            return 0\n\n        include = min_difference(index + 1) + apples[index]\n        exclude = min_difference(index + 1)\n\n        return min(include, exclude)\n\n    result = min_difference(1)\n\n    return str(result)"
    },
    {
        "number": 4228,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split())\n    total_flavor = (N * (N + L - 1)) // 2\n    apple_to_eat = 1\n    pie_flavor = total_flavor - (apple_to_eat + apple_to_eat - 1)\n    return str(pie_flavor)"
    },
    {
        "number": 4228,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.strip().split())\n    apples = [L + i - 1 for i in range(1, N + 1)]\n    min_diff = float('inf')\n    min_diff_pie = 0\n\n    for i in range(N):\n        remaining_apples = apples[:i] + apples[i+1:]\n        pie_flavor = sum(remaining_apples)\n        diff = abs(pie_flavor - N * L)\n        if diff < min_diff:\n            min_diff = diff\n            min_diff_pie = pie_flavor\n\n    return min_diff_pie"
    },
    {
        "number": 4229,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    total = 0\n    for i in range(1, N+1):\n        if i % 3 == 0 and i % 5 == 0:\n            total += i\n        elif i % 3 == 0:\n            total += i\n        elif i % 5 == 0:\n            total += i\n        else:\n            total += i\n    return str(total)"
    },
    {
        "number": 4229,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    total = 0\n    for i in range(1, N+1):\n        if i % 3 == 0 and i % 5 == 0:\n            total += 1\n        elif i % 3 == 0:\n            total += 1\n        elif i % 5 == 0:\n            total += 1\n        else:\n            total += i\n    return str(total)"
    },
    {
        "number": 4229,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n\n    # Calculate the sum of all numbers among the first N terms of the FizzBuzz sequence\n    sum = 0\n    for i in range(1, N+1):\n        if i % 3 == 0 and i % 5 == 0:\n            continue\n        elif i % 3 == 0:\n            continue\n        elif i % 5 == 0:\n            continue\n        else:\n            sum += i\n\n    return str(sum)"
    },
    {
        "number": 4229,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def fizzbuzz(n: int) -> str:\n        if n % 3 == 0 and n % 5 == 0:\n            return \"FizzBuzz\"\n        elif n % 3 == 0:\n            return \"Fizz\"\n        elif n % 5 == 0:\n            return \"Buzz\"\n        else:\n            return str(n)\n\n    n = int(stdin)\n    fizzbuzz_sequence = [fizzbuzz(i) for i in range(1, n + 1)]\n    sum_of_numbers = sum([int(i) for i in fizzbuzz_sequence if i.isdigit()])\n\n    return str(sum_of_numbers)"
    },
    {
        "number": 4229,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    total_sum = 0\n    for i in range(1, N + 1):\n        if i % 3 == 0 and i % 5 == 0:\n            total_sum += 0\n        elif i % 3 == 0:\n            total_sum += 0\n        elif i % 5 == 0:\n            total_sum += 0\n        else:\n            total_sum += i\n    return str(total_sum)"
    },
    {
        "number": 4229,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    result = 0\n    \n    for i in range(1, n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            result += i\n        elif i % 3 == 0:\n            result += i\n        elif i % 5 == 0:\n            result += i\n        else:\n            result += i\n            \n    return str(result)"
    },
    {
        "number": 4229,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    fizz_buzz_list = [\n        \"FizzBuzz\" if i % 3 == 0 and i % 5 == 0 else \"Fizz\" if i % 3 == 0 else \"Buzz\" if i % 5 == 0 else i for i in range(1, N + 1)\n    ]\n    sum_of_numbers = sum([i if type(i) == int else 0 for i in fizz_buzz_list])\n    return str(sum_of_numbers)"
    },
    {
        "number": 4229,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    sum = 0\n    for i in range(1, N+1):\n        if i % 3 == 0 and i % 5 == 0:\n            a_i = \"FizzBuzz\"\n        elif i % 3 == 0:\n            a_i = \"Fizz\"\n        elif i % 5 == 0:\n            a_i = \"Buzz\"\n        else:\n            a_i = i\n        if isinstance(a_i, int):\n            sum += a_i\n    return sum\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4229,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def fizz_buzz(n: int) -> str:\n        if n % 3 == 0 and n % 5 == 0:\n            return \"FizzBuzz\"\n        elif n % 3 == 0:\n            return \"Fizz\"\n        elif n % 5 == 0:\n            return \"Buzz\"\n        else:\n            return str(n)\n\n    N = int(stdin.strip())\n    fizzbuzz_sequence = (fizz_buzz(i) for i in range(1, N + 1))\n    numbers = (int(term) for term in fizzbuzz_sequence if term.isdigit())\n    result = sum(numbers)\n    return str(result)"
    },
    {
        "number": 4229,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    total = 0\n    for i in range(1, n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            total += 15\n        elif i % 3 == 0:\n            total += 3\n        elif i % 5 == 0:\n            total += 5\n        else:\n            total += i\n    return str(total)"
    },
    {
        "number": 4230,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    X, N = map(int, stdin.split()[0:2])\n    sequence = list(map(int, stdin.split()[2:]))\n\n    # Find the numbers not in the sequence\n    numbers = set(range(1, 101)) - set(sequence)\n\n    # Find the number closest to X\n    closest_number = min(numbers, key=lambda x: abs(x - X))\n\n    return str(closest_number)"
    },
    {
        "number": 4230,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.split()[0:2])\n    p = list(map(int, stdin.split()[2:]))\n    p_set = set(p)\n    nearest = None\n    min_diff = float('inf')\n    for i in range(1, 101):\n        if i not in p_set:\n            diff = abs(i - x)\n            if diff < min_diff:\n                min_diff = diff\n                nearest = i\n    return str(nearest)"
    },
    {
        "number": 4230,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.split()[:2])\n    ps = list(map(int, stdin.split()[2:]))\n    not_in_ps = set(range(1, 101)) - set(ps)\n    min_diff = 101\n    nearest_to_x = 0\n    for p in not_in_ps:\n        diff = abs(x - p)\n        if diff < min_diff:\n            min_diff = diff\n            nearest_to_x = p\n    return str(nearest_to_x)"
    },
    {
        "number": 4230,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    X = int(lines[0])\n    N = int(lines[1])\n    p = [int(x) for x in lines[2].split(\" \")]\n\n    # Find the integers not contained in the sequence p_1, ..., p_N\n    valid_numbers = set(range(1, 101)) - set(p)\n\n    # Calculate the absolute difference between each number and X\n    differences = [abs(X - i) for i in valid_numbers]\n\n    # Find the smallest absolute difference\n    smallest_difference = min(differences)\n\n    # Find the integers with the smallest absolute difference\n    integers_with_smallest_difference = [i for i in valid_numbers if abs(X - i) == smallest_difference]\n\n    # Return the smallest of these integers\n    return str(min(integers_with_smallest_difference))"
    },
    {
        "number": 4230,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.split()[:2])\n    p = list(map(int, stdin.split()[2:]))\n\n    min_diff = float('inf')\n    result = 0\n\n    for i in range(1, 101):\n        if i not in p:\n            diff = abs(x - i)\n            if diff < min_diff:\n                min_diff = diff\n                result = i\n\n    return str(result)"
    },
    {
        "number": 4230,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    X, N = map(int, input().split())\n    p = list(map(int, input().split()))\n\n    missing_integers = [i for i in range(1, 101) if i not in p]\n    min_diff = float(\"inf\")\n    min_integer = 0\n\n    for integer in missing_integers:\n        diff = abs(integer - X)\n        if diff < min_diff:\n            min_diff = diff\n            min_integer = integer\n\n    return str(min_integer)\n\ndef"
    },
    {
        "number": 4230,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X, N = map(int, stdin.split()[0:2])\n    sequence = list(map(int, stdin.split()[2:]))\n    candidates = [i for i in range(1, 101) if i not in sequence]\n    closest = min(candidates, key=lambda x: abs(x-X))\n    return str(closest)"
    },
    {
        "number": 4230,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.split()[:2])\n    ps = list(map(int, stdin.split()[2:]))\n    diff = 101\n    for i in range(1, 101):\n        if i not in ps:\n            if abs(i - x) < diff:\n                ans = i\n                diff = abs(i - x)\n    return str(ans)"
    },
    {
        "number": 4230,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.split()[:2])\n    p = list(map(int, stdin.split()[2:]))\n\n    candidates = set(range(1, 101)) - set(p)\n    min_diff = float('inf')\n    result = None\n\n    for candidate in candidates:\n        diff = abs(x - candidate)\n        if diff < min_diff:\n            min_diff = diff\n            result = candidate\n\n    return str(result)"
    },
    {
        "number": 4230,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.split()[:2])\n    ps = list(map(int, stdin.split()[2:]))\n    answer = min(range(1, 101), key=lambda p: (p == x or p in ps, abs(p - x)))\n    return str(answer)"
    },
    {
        "number": 4231,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split()[0].split())\n    h, w = map(int, stdin.split()[1].split())\n\n    # Calculate the number of white cells in the chosen rows and columns\n    num_white_cells = H * W - h * W - H * w + h * w\n\n    return str(num_white_cells)\n\ndef"
    },
    {
        "number": 4231,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split()[0].split())\n    h, w = map(int, stdin.split()[1].split())\n\n    # Calculate the number of white cells that will remain\n    white_cells = H * W\n    black_cells = h * W + H * w\n    remaining_cells = white_cells - black_cells\n\n    return str(remaining_cells)"
    },
    {
        "number": 4231,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    H, W = [int(x) for x in stdin.split()]\n    h, w = [int(x) for x in stdin.split()]\n    return str((H - h) * W - w)"
    },
    {
        "number": 4231,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def paint(H: int, W: int, h: int, w: int) -> int:\n        black_cells = h * W + w * H - h * w\n        white_cells = H * W - black_cells\n        return white_cells\n\n    def read_input(stdin: str) -> tuple:\n        lines = stdin.split(\"\\n\")\n        H, W = map(int, lines[0].split())\n        h, w = map(int, lines[1].split())\n        return H, W, h, w\n\n    H, W, h, w = read_input(stdin)\n    result = paint(H, W, h, w)\n    return str(result) "
    },
    {
        "number": 4231,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split()[0].split())\n    h, w = map(int, stdin.split()[1].split())\n    return str((H - h) * (W - w))\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4231,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split()[0].split())\n    h, w = map(int, stdin.split()[1].split())\n    return str(H * W - h * W - w * H + h * w)"
    },
    {
        "number": 4231,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    h, w = map(int, stdin.split())\n\n    white_cells = H * W - h * W - w * H + h * w\n\n    return str(white_cells)"
    },
    {
        "number": 4231,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split()[0].split())\n    h, w = map(int, stdin.split()[1].split())\n    return str(H * W - h * W - w * H + h * w)"
    },
    {
        "number": 4231,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_values = stdin.split()\n    H, W = map(int, input_values[0:2])\n    h, w = map(int, input_values[2:])\n\n    # Calculate the number of white cells that will remain\n    total_cells = H * W\n    painted_cells = h * W + w * H - h * w\n\n    remaining_cells = total_cells - painted_cells\n\n    return str(remaining_cells)"
    },
    {
        "number": 4231,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    H, W = int(input_list[0]), int(input_list[1])\n    h, w = int(input_list[2]), int(input_list[3])\n    \n    if h == H:\n        return str(H * W - (W * w))\n    elif w == W:\n        return str(H * W - (H * h))\n    else:\n        return str(H * W - (H * h + W * w - h * w)) "
    },
    {
        "number": 4232,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    sequence = list(map(int, stdin.split()[2:]))\n\n    if k == 0:\n        return \"-1\"\n\n    sequence.sort()\n    left, right = 0, sequence[-1]\n    result = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n        count = sum(1 for x in sequence if x <= mid)\n\n        if count == k:\n            result = mid\n            right = mid - 1\n        elif count < k:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    return str(result)\n\n\ninput_data = input()\nprint(solution(input_data)) "
    },
    {
        "number": 4232,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    sequence = list(map(int, stdin.split()[2:]))\n\n    count = 0\n    for num in sequence:\n        if num <= 10**9:\n            count += 1\n            if count == k:\n                return str(num - 1)\n\n    return \"-1\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    sequence = list(map(int, stdin.split()[2:]))\n\n    count = 0\n    for num in sequence:\n        if num <= 10**9:\n            count += 1\n\n    if count < k:\n        return \"-1\"\n\n    sequence.sort()\n    for i in range(1, n):\n        if sequence[i] != sequence[i-1]:\n            if sequence[i] - sequence[i-1] == 1:\n                continue\n            else:\n                return str(sequence[i] - 1)\n    return str(sequence[-1])\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4232,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    sequence = list(map(int, stdin.split()[2:]))\n    sequence.sort()\n    \n    # Check if there is an x such that k elements of sequence are less than or equal to x\n    if k > 0 and k <= len(sequence):\n        x = sequence[len(sequence) - k]\n        # Check if x is in range [1, 10^9]\n        if x >= 1 and x <= 10**9:\n            return str(x)\n    \n    return \"-1\""
    },
    {
        "number": 4232,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def find_x(sequence: List[int], k: int) -> int:\n        sequence.sort()\n        n = len(sequence)\n        for x in range(1, 10**9+1):\n            count = 0\n            left, right = 0, n-1\n            while left <= right:\n                mid = (left+right)//2\n                if sequence[mid] <= x:\n                    count += right-mid\n                    left = mid+1\n                else:\n                    right = mid-1\n            if count == k:\n                return x\n        return -1\n\n    n, k = map(int, stdin.split()[:2])\n    sequence = list(map(int, stdin.split()[2:]))\n\n    x = find_x(sequence, k)\n    return str(x)\n\ninput_string = input()\nresult = solution(input_string)\nprint(result) "
    },
    {
        "number": 4232,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    sequence = list(map(int, input().split()))\n\n    sequence.sort()\n    left, right = 0, 10**9\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        count = 0\n        for x in sequence:\n            if x <= mid:\n                count += 1\n            else:\n                break\n\n        if count == k:\n            return str(mid)\n        elif count < k:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    return \"-1\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    seq = list(map(int, stdin.split()[2:]))\n\n    seq.sort()\n    count = 0\n    left = 0\n    right = len(seq) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        count = sum(1 for i in range(len(seq)) if seq[i] <= mid)\n\n        if count == k:\n            return str(mid)\n        elif count < k:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return \"-1\"\n\ninput_str = input()\nresult = solution(input_str)\nprint(result) "
    },
    {
        "number": 4232,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    sequence = list(map(int, stdin.split()[2:]))\n    \n    count = {}\n    for num in sequence:\n        if num not in count:\n            count[num] = 1\n        else:\n            count[num] += 1\n    \n    for i in range(1, 10**9+1):\n        below = sum(1 for num in count if num <= i)\n        if below == k:\n            return str(i)\n    \n    return \"-1\""
    },
    {
        "number": 4232,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    sequence = list(map(int, stdin.split()))[n+1:]\n\n    if k > n:\n        return \"-1\"\n\n    sequence.sort()\n    for i in range(len(sequence)):\n        if sequence[i] > 10**9:\n            return \"-1\"\n        if i >= k:\n            if sequence[i-k] != sequence[i]:\n                return str(sequence[i-k]-1)\n            else:\n                j = i-k\n                while sequence[j] == sequence[i-k]:\n                    j -= 1\n                return str(sequence[j+1])\n\n    return str(sequence[-1])\n"
    },
    {
        "number": 4232,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    seq = list(map(int, stdin.split()[2:]))\n    \n    # Sort the sequence in ascending order\n    seq.sort()\n    \n    # Initialize two pointers - one at the beginning and one at the end of the sequence\n    left, right = 0, n - 1\n    \n    # Iterate through the sequence using the two pointers\n    while left <= right:\n        # Calculate the middle element of the current subarray\n        mid = (left + right) // 2\n        \n        # Calculate the number of elements in the sequence less than or equal to the middle element\n        count = sum(1 for elem in seq[:mid + 1] if elem <= seq[mid])\n        \n        # If the count is equal to k, we have found a valid answer\n        if count == k:\n            return str(seq[mid])\n        \n        # If the count is less than k, we need to increase the left pointer\n        elif count < k:\n            left = mid + 1\n        \n        # If the count is greater than k, we need to decrease the right pointer\n        else:\n            right = mid - 1\n    \n    # If no valid answer is found, return -1\n    return \"-1\""
    },
    {
        "number": 4233,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    grid = stdin.split('\\n')[1:]\n\n    def is_star_inside(x, y, size):\n        for i in range(size):\n            for j in range(size):\n                if not (0 <= x + i < n and 0 <= y + j < m) or grid[x + i][y + j] == '*':\n                    return False\n        return True\n\n    def stars_needed(size):\n        count = 0\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == '*':\n                    if is_star_inside(i, j, size):\n                        count += 1\n                    else:\n                        return -1\n        return count\n\n    for size in range(1, n * m + 1):\n        stars_count = stars_needed(size)\n        if stars_count != -1:\n            print(stars_count)\n            for i in range(n):\n                for j in range(m):\n                    if grid[i][j] == '*':\n                        print(i, j, size)\n            break\n    else:\n        print(-1)"
    },
    {
        "number": 4233,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [list(line) for line in stdin.split()[1:]]\n    stars = []\n\n    def draw_star(x, y, size):\n        for i in range(size):\n            for j in range(size):\n                if 0 <= x + i < n and 0 <= y + j < m:\n                    grid[x + i][y + j] = '*'\n                else:\n                    return False\n        return True\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                for size in range(1, n * m):\n                    if draw_star(i, j, size):\n                        stars.append((i, j, size))\n                        break\n\n    if not stars:\n        return \"-1\"\n\n    return \"\\n\".join([\"1\"] + [\" \".join(map(str, star)) for star in stars])"
    },
    {
        "number": 4233,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def is_star(grid, x, y):\n        return grid[x][y] == '*'\n\n    def is_valid_star(grid, x, y, s):\n        for dx in range(-s, s + 1):\n            for dy in range(-s, s + 1):\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < n and 0 <= ny < m and (dx != 0 or dy != 0):\n                    if not is_star(grid, nx, ny):\n                        return False\n        return True\n\n    def add_star(grid, x, y, s):\n        for dx in range(-s, s + 1):\n            for dy in range(-s, s + 1):\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < n and 0 <= ny < m:\n                    grid[nx][ny] = '*'\n\n    lines = stdin.split('\\n')\n    n, m = map(int, lines[0].split())\n    grid = [list(line) for line in lines[1:]]\n\n    stars = []\n    for x in range(n):\n        for y in range(m):\n            for s in range(1, min(n - x, m - y) + 1):\n                if is_valid_star(grid, x, y, s):\n                    stars.append((x, y, s))\n                    add_star(grid, x, y, s)\n\n    if len(stars) == n * m:\n        print(len(stars))\n        for x, y, s in stars:\n            print(x, y, s)\n    else:\n        print(-1)\n\ninput_str = \"\"\"6 8\n....*...\n...**...\n..*****.\n...**...\n....*...\n........\"\"\"\nsolution(input_str) "
    },
    {
        "number": 4233,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = stdin.split('\\n')[1:]\n    grid_rows = len(grid)\n    grid_cols = len(grid[0])\n\n    def is_star(x: int, y: int) -> bool:\n        return grid[x][y] == '*'\n\n    def is_valid_star(x: int, y: int, size: int) -> bool:\n        for i in range(x - size, x + size + 1):\n            for j in range(y - size, y + size + 1):\n                if i >= 0 and i < grid_rows and j >= 0 and j < grid_cols and not (i == x and j == y):\n                    if is_star(i, j):\n                        return False\n        return True\n\n    def count_stars(x: int, y: int, size: int) -> int:\n        count = 1\n        for i in range(x - size, x + size + 1):\n            for j in range(y - size, y + size + 1):\n                if i >= 0 and i < grid_rows and j >= 0 and j < grid_cols and not (i == x and j == y):\n                    if is_star(i, j):\n                        count += 1\n        return count\n\n    k = 0\n    for x in range(grid_rows):\n        for y in range(grid_cols):\n            if is_star(x, y):\n                size = 1\n                while is_valid_star(x, y, size):\n                    k += count_stars(x, y, size)\n                    size += 1\n                if k > n * m:\n                    return \"-1\"\n\n    if k > n * m:\n        return \"-1\"\n\n    result = [str(k)]\n    for x in range(grid_rows):\n        for y in range(grid_cols):\n            if is_star(x, y):\n                size = 1\n                while is_valid_star(x, y, size):\n                    if count_stars(x, y, size) == 1:\n                        result.append(f\"{x + 1} {y + 1} {size}\")\n                    size += 1\n\n    return '\\n'.join(result)"
    },
    {
        "number": 4233,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def is_star_inside(x, y, s, n, m):\n        return 1 <= x <= n and 1 <= y <= m and x + s <= n + 1 and y + s <= m + 1\n\n    def draw_star(x, y, s):\n        stars.append((x, y, s))\n        directions = [(0, -1), (1, -1), (1, 0), (1, 1), (0, 1), (-1, 1), (-1, 0), (-1, -1)]\n        for direction in directions:\n            new_x, new_y = x, y\n            while is_star_inside(new_x, new_y, s, n, m):\n                new_x += direction[0]\n                new_y += direction[1]\n            draw_star(new_x - direction[0], new_y - direction[1], s)\n\n    def find_stars(grid: List[str]) -> int:\n        stars = []\n        n = len(grid)\n        m = len(grid[0])\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == '*':\n                    draw_star(i + 1, j + 1, 1)\n        return len(stars)\n\n    def print_stars(stars: List[Tuple[int, int, int]]) -> None:\n        print(len(stars))\n        for star in stars:\n            print(star[0], star[1], star[2])\n\n    lines = stdin.split('\\n')\n    n, m = map(int, lines[0].split())\n    grid = [line for line in lines[1:n + 1]]\n    stars_count = find_stars(grid)\n    if stars_count == n * m:\n        print_stars(stars)\n    else:\n        print(-1)\n\ninput_str = \"\"\"6 8\n....*...\n...**...\n..*****.\n...**...\n....*...\n........\"\"\"\n\nsolution(input_str) "
    },
    {
        "number": 4233,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(grid: List[str], x: int, y: int, size: int) -> bool:\n        if size <= 0:\n            return False\n        for i in range(x - size, x + size + 1):\n            for j in range(y - size, y + size + 1):\n                if not (0 <= i < len(grid) and 0 <= j < len(grid[0])):\n                    return False\n                if grid[i][j] == '*':\n                    return False\n        return True\n\n    n, m = map(int, stdin.split()[0].split())\n    grid = [list(row) for row in stdin.split()[1:]]\n    stars_count = 0\n    stars = []\n\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            for size in range(1, min(n - i, m - j) + 1):\n                if is_valid(grid, i, j, size):\n                    stars.append((i, j, size))\n                    stars_count += 1\n                    if stars_count > n * m:\n                        return \"-1\"\n                    break\n            else:\n                continue\n            break\n\n    if stars_count == 0:\n        return \"-1\"\n\n    result = [str(stars_count)] + [f\"{x} {y} {s}\" for x, y, s in stars]\n    return \"\\n\".join(result)\n\ndef"
    },
    {
        "number": 4233,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    grid = stdin.split('\\n')[1:]\n    stars = []\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                stars.append((i, j))\n\n    if len(stars) > n * m:\n        return \"-1\"\n\n    output = str(len(stars)) + '\\n'\n\n    for i, (row, col) in enumerate(stars):\n        for size in range(1, n * m - i):\n            if size > row or size > m - col - 1 or size > n - row - 1 or size > col:\n                continue\n            if all(grid[x][y] != '*' for x in range(row - size, row + size + 1) for y in range(col - size, col + size + 1)) and (row, col, size) not in stars:\n                stars.append((row, col, size))\n                output += ' '.join(map(str, (row, col, size))) + '\\n'\n\n    return output if len(stars) == n * m else \"-1\"\n\n\ndef"
    },
    {
        "number": 4233,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [list(line.strip()) for line in stdin.splitlines()[1:]]\n    stars = []\n    total_stars = 0\n    \n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                if i > 0 and grid[i-1][j] == '*':\n                    if j > 0 and grid[i][j-1] == '*':\n                        size = 3\n                    else:\n                        size = 2\n                elif j > 0 and grid[i][j-1] == '*':\n                    size = 2\n                else:\n                    size = 1\n                    \n                if size == 1:\n                    total_stars += 1\n                else:\n                    stars.append((i, j, size))\n                    total_stars += size\n                    \n    if total_stars > n * m:\n        return \"-1\"\n    else:\n        result = str(total_stars) + \"\\n\"\n        for star in stars:\n            result += \" \".join(map(str, star)) + \"\\n\"\n        return result[:-1]"
    },
    {
        "number": 4233,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def draw_stars(grid: List[List[str]], stars: List[Tuple[int, int, int]]) -> str:\n        n, m = len(grid), len(grid[0])\n        output = \"\"\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == '*':\n                    for x, y, size in stars:\n                        if x == i and y == j and size > 0:\n                            output += \"*\" * size + \" \" * (m - size)\n                            break\n                    else:\n                        output += \".\"\n                else:\n                    output += \".\"\n            output += \"\\n\"\n        return output\n\n    def can_draw(grid: List[List[str]]) -> bool:\n        n, m = len(grid), len(grid[0])\n        stars = []\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == '*':\n                    size = 1\n                    while all(grid[x][y] == '.' for x in range(max(0, i - size), min(n, i + size + 1))\n                               for y in range(max(0, j - size), min(m, j + size + 1))):\n                        size += 1\n                    if size > 1:\n                        stars.append((i, j, size - 1))\n        if len(stars) <= n * m:\n            output = draw_stars(grid, stars)\n            for i in range(n):\n                if grid[i] != list(output.split()[i]):\n                    return False\n            return True\n        return False\n\n    n, m = list(map(int, stdin.split()))\n    grid = [list(input()) for _ in range(n)]\n    if not (3 <= n <= 100 and 3 <= m <= 100):\n        return \"-1\"\n    if can_draw(grid):\n        stars = [(x, y, size) for x, y, size in solution(stdin).split()[1:]]\n        output = f\"{len(stars)}\\n\" + \"\\n\".join(f\"{x} {y} {size}\" for x, y, size in stars)\n        return output\n    else:\n        return \"-1\"\n\ninput_stdin = \"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\"\nprint(solution(input_stdin)) "
    },
    {
        "number": 4233,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_star(grid: List[List[str]], x: int, y: int, size: int) -> bool:\n        for i in range(x - size, x + size + 1):\n            for j in range(y - size, y + size + 1):\n                if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or (i, j) == (x, y):\n                    continue\n                if grid[i][j] == '*':\n                    return False\n        return True\n\n    def count_stars(grid: List[List[str]]) -> int:\n        n, m = len(grid), len(grid[0])\n        stars_count = 0\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == '*':\n                    stars_count += 1\n        return stars_count\n\n    def draw_stars(grid: List[List[str]]) -> str:\n        n, m = len(grid), len(grid[0])\n        stars_count = 0\n        result = []\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == '*':\n                    size = 1\n                    while is_star(grid, i, j, size):\n                        size += 1\n                    if size >= 2:\n                        stars_count += 1\n                        result.append(f\"{i+1} {j+1} {size-1}\")\n                        if stars_count > n * m:\n                            return \"-1\"\n        return \"\\n\".join(result) if result else \"-1\"\n\n    grid = [list(row) for row in stdin.splitlines()]\n    output = draw_stars(grid)\n    return output"
    },
    {
        "number": 4234,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split()\n    n = int(n)\n    k = 0\n    i = 0\n    while i < n:\n        if i % 2 == 0 and s[i] == s[i+1]:\n            k += 1\n        i += 1\n    return str(k)\n\nstdin = input()\nresult = solution(stdin)\nprint(result) "
    },
    {
        "number": 4234,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    min_delete = n\n    result = \"\"\n\n    for i in range(n):\n        delete = False\n        for j in range(i+1, n):\n            if s[i] == s[j] and (j-i) % 2 == 1:\n                delete = True\n                break\n        if not delete:\n            result += s[i]\n\n    return str(min_delete - len(result)) + \"\\n\" + result\n\ndef"
    },
    {
        "number": 4234,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n\n    k = 0\n    result = ''\n    for i in range(n):\n        if i % 2 == 0 and i < n - 1:\n            if s[i] == s[i + 1]:\n                k += 1\n        else:\n            result += s[i]\n\n    return k, result if result else ''\n\n\ninput_str = input()\nk, result = solution(input_str)\nprint(k)\n"
    },
    {
        "number": 4234,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    k = 0\n    result = []\n    \n    for i in range(n):\n        if i % 2 == 0:\n            if s[i] != s[i+1]:\n                k += 1\n        else:\n            if s[i] == s[i+1]:\n                k += 1\n            result.append(s[i])\n                \n    return f\"{k}\\n{''.join(result)}\"\n\ndef"
    },
    {
        "number": 4234,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split(\"\\n\")\n    n = int(n)\n    good = True\n    i = 1\n    while i < n:\n        if s[i] == s[i - 1]:\n            s = s[:i] + s[i + 1:]\n            n -= 1\n            i -= 1\n        i += 2\n    return n - 1\n"
    },
    {
        "number": 4234,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    k = 0\n    result = \"\"\n\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] == s[i+1]:\n            k += 1\n        else:\n            result += s[i]\n\n    return f\"{k}\\n{result}\""
    },
    {
        "number": 4234,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    min_deletions = 0\n    result = \"\"\n\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if i == len(s) - 1 or s[i] != s[i + 1]:\n                result += s[i]\n            else:\n                min_deletions += 1\n\n    return str(min_deletions) + \"\\n\" + result"
    },
    {
        "number": 4234,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    k = 0\n    result = ''\n    \n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] == s[i+1]:\n            k += 1\n        else:\n            result += s[i]\n    \n    print(k)\n    print(result)\n"
    },
    {
        "number": 4234,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    \n    k = 0\n    result = \"\"\n    \n    if n % 2 == 0:\n        k = n // 2\n        result = s[:k]\n    else:\n        for i in range(n):\n            if i % 2 == 0 and s[i] == s[i+1]:\n                k += 1\n            else:\n                result += s[i]\n                \n    return k, result if result else \"\"\n\ninput_string = \"\"\"\n4\ngood\n\"\"\"\nprint(solution(input_string))\n\ninput_string = \"\"\"\n4\naabc\n\"\"\"\nprint(solution(input_string))\n\ninput_string = \"\"\"\n3\naaa\n\"\"\"\nprint(solution(input_string)) "
    },
    {
        "number": 4234,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n\n    min_delete_count = 0\n    result_string = \"\"\n\n    for i in range(1, n, 2):\n        if s[i] == s[i - 1]:\n            min_delete_count += 1\n            if i > 1 and s[i - 2] == s[i]:\n                min_delete_count -= 1\n            if i < n - 1 and s[i + 1] == s[i]:\n                min_delete_count -= 1\n\n    result_string = s[:n - min_delete_count]\n\n    return str(min_delete_count) + \"\\n\" + result_string"
    },
    {
        "number": 4235,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(graph, start, visited, path_length, current_path):\n        if path_length >= 2:\n            return True\n        visited[start] = True\n        current_path.add(start)\n        for neighbor in graph[start]:\n            if not visited[neighbor]:\n                if dfs(graph, neighbor, visited, path_length + 1, current_path.copy()):\n                    return True\n            elif neighbor in current_path:\n                return True\n        current_path.remove(start)\n        visited[start] = False\n        return False\n\n    n, m = map(int, stdin.split()[:2])\n    graph = [[] for _ in range(n)]\n    for i in range(m):\n        u, v = map(int, stdin.split()[2 * i:2 * i + 2])\n        graph[u].append(v)\n        graph[v].append(u)\n\n    for i in range(n):\n        if not dfs(graph, i, [False] * n, 0, set()):\n            return \"NO\"\n\n    visited = [False] * n\n    result = \"\"\n    for i in range(m):\n        u, v = map(int, stdin.split()[2 * i:2 * i + 2])\n        if not visited[u]:\n            visited[u] = True\n            visited[v] = True\n            result += \"0\"\n        else:\n            result += \"1\"\n    return \"YES\\n\" + result\n"
    },
    {
        "number": 4235,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    edges = []\n    for line in stdin.split(\"\\n\")[2:]:\n        u, v = map(int, line.split())\n        edges.append((u, v))\n\n    directed_graph = []\n    for edge in edges:\n        directed_graph.append((edge[0], edge[1], 0))\n        directed_graph.append((edge[1], edge[0], 0))\n\n    for i, edge in enumerate(directed_graph):\n        for j, another_edge in enumerate(directed_graph[i+1:], i+1):\n            if edge[1] == another_edge[1] and edge[0] == another_edge[0]:\n                directed_graph[i] = (edge[0], edge[1], 1)\n                directed_graph.pop(j)\n\n    return directed_graph\n\n\ndef"
    },
    {
        "number": 4235,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    edges = [(int(x) - 1, int(y) - 1) for x, y in map(str.split, stdin.split('\\n')[2:])]\n    \n    def dfs(u, visited):\n        visited[u] = True\n        for v, w in edges:\n            if v == u and not visited[w]:\n                if dfs(w, visited):\n                    return True\n            elif w == u and not visited[v]:\n                if dfs(v, visited):\n                    return True\n        return False\n    \n    for u in range(n):\n        visited = [False] * n\n        if dfs(u, visited):\n            return \"NO\"\n    \n    result = \"1\" * m\n    return \"YES\\n\" + result\n\ninput_data = \"\"\"6 5\n1 5\n2 1\n1 4\n3 1\n6 1\"\"\"\n\nprint(solution(input_data)) "
    },
    {
        "number": 4235,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(G, parent):\n        for child in G[parent]:\n            if child not in visited:\n                visited.add(child)\n                if not is_valid(G, child):\n                    return False\n        return True\n\n    n, m = map(int, stdin.readline().split())\n    G = {i: set() for i in range(1, n+1)}\n    for _ in range(m):\n        u, v = map(int, stdin.readline().split())\n        G[u].add(v)\n        G[v].add(u)\n\n    for u in range(1, n+1):\n        visited = set()\n        if is_valid(G, u):\n            break\n    else:\n        return \"NO\\n\"\n\n    def dfs(node, depth):\n        if depth > 0:\n            yield depth, node\n        for child in G[node]:\n            if child not in visited:\n                visited.add(child)\n                yield from dfs(child, depth+1)\n\n    visited = set([u])\n    max_depth = 0\n    for depth, node in dfs(u, 0):\n        visited.add(node)\n        max_depth = max(max_depth, depth)\n\n    if max_depth >= 2:\n        return \"NO\\n\"\n\n    result = [\"1\"] * m\n    for depth, node in dfs(u, 0):\n        if depth == 0:\n            result[node-1] = \"0\"\n\n    return \"YES\\n\" + \"\".join(result) + \"\\n\""
    },
    {
        "number": 4235,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    edges = [list(map(int, line.split())) for line in stdin.split('\\n')[2:]]\n    \n    def dfs(u: int, v: int, visited: set) -> bool:\n        visited.add(u)\n        for i, (x, y) in enumerate(edges):\n            if x == u or y == u:\n                if i not in visited:\n                    if y == v:\n                        return True\n                    if dfs(y, v, visited):\n                        return True\n        visited.remove(u)\n        return False\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if dfs(i+1, j+1, set()):\n                return \"NO\"\n    \n    result = [0] * m\n    for i, (u, v) in enumerate(edges):\n        if u > v:\n            result[i] = 1\n    \n    return \"YES\\n\" + \"\".join(map(str, result)) "
    },
    {
        "number": 4235,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    graph = [[] for _ in range(n)]\n    for line in stdin.split('\\n')[2:]:\n        if line:\n            u, v = map(int, line.split())\n            graph[u-1].append(v-1)\n            graph[v-1].append(u-1)\n\n    def dfs(v: int, parent: int, path: List[int], visited: Set[int]) -> bool:\n        if v in visited:\n            return False\n        visited.add(v)\n        for u in graph[v]:\n            if u != parent:\n                if u in path:\n                    return True\n                elif dfs(u, v, path + [u], visited):\n                    return True\n        return False\n\n    for i in range(n):\n        if dfs(i, -1, [], set()):\n            return \"NO\"\n\n    result = \"\"\n    for i in range(m):\n        if i % 2 == 0:\n            result += \"0\"\n        else:\n            result += \"1\"\n    return \"YES\\n\" + result "
    },
    {
        "number": 4235,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    edges = [tuple(map(int, line.split())) for line in stdin.split()[2:]]\n\n    def dfs(v, visited, parent, graph):\n        visited[v] = True\n        for u in graph[v]:\n            if not visited[u]:\n                dfs(u, visited, v, graph)\n        return visited\n\n    def is_connected(graph):\n        visited = [False] * n\n        dfs(0, visited, -1, graph)\n        return all(visited)\n\n    def add_edge(graph, i, j):\n        graph[i].add(j)\n        graph[j].add(i)\n\n    def remove_edge(graph, i, j):\n        graph[i].remove(j)\n        graph[j].remove(i)\n\n    def has_cycle(graph, i, visited, parent):\n        visited[i] = True\n        for j in graph[i]:\n            if not visited[j]:\n                if has_cycle(graph, j, visited, i):\n                    return True\n            elif j != parent:\n                return True\n        return False\n\n    def is_directable(graph):\n        visited = [False] * n\n        for i in range(n):\n            if not visited[i]:\n                if has_cycle(graph, i, visited, -1):\n                    return False\n        return True\n\n    graph = [set() for _ in range(n)]\n    for i, j in edges:\n        add_edge(graph, i - 1, j - 1)\n\n    if not is_connected(graph):\n        return \"NO\"\n\n    if is_directable(graph):\n        return \"YES\\n\" + \"\".join(\"1\" if (j, i) in edges else \"0\" for i in range(n) for j in range(n) if i != j)\n    else:\n        return \"NO\""
    },
    {
        "number": 4235,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    edges = [tuple(map(int, line.split())) for line in stdin.split(\"\\n\")[1:]]\n\n    if not is_acyclic(edges):\n        return \"NO\"\n\n    directed_edges = set()\n    for u, v in edges:\n        if (u, v) not in directed_edges:\n            directed_edges.add((u, v))\n        else:\n            directed_edges.add((v, u))\n\n    return \"YES\" + \"\\n\" + \"\".join(\"1\" if (u, v) in directed_edges else \"0\" for u, v in edges)\n\ndef"
    },
    {
        "number": 4235,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, m = map(int, stdin.split()[:2])\n    graph = []\n    for line in stdin.split('\\n')[1:]:\n        u, v = map(int, line.split())\n        graph.append((u, v))\n\n    # Check if there is a path of length at least two\n    def dfs(node, visited):\n        visited.add(node)\n        for neighbor in range(1, n + 1):\n            if neighbor not in visited and (node, neighbor) in graph:\n                if dfs(neighbor, visited):\n                    return True\n        visited.remove(node)\n        return False\n\n    for node in range(1, n + 1):\n        visited = set()\n        if dfs(node, visited):\n            return \"NO\"\n\n    # Find a suitable orientation of edges\n    def find_orientation(graph):\n        m = len(graph)\n        edges = [False] * m\n        parent = [-1] * n\n\n        def dfs(node, parent_edge):\n            for i in range(m):\n                if not edges[i] and (node, graph[i][0]) in graph:\n                    edges[i] = True\n                    if dfs(graph[i][1], i):\n                        return True\n                elif not edges[i] and (node, graph[i][1]) in graph:\n                    edges[i] = True\n                    if dfs(graph[i][0], i):\n                        return True\n            parent[node] = parent_edge\n            return False\n\n        for i in range(m):\n            if not edges[i]:\n                if dfs(graph[i][0], i):\n                    return \"NO\"\n\n        return edges\n\n    return \"YES\\n\" + ''.join(map(str, find_orientation(graph)))"
    },
    {
        "number": 4235,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n\n    # Create a graph\n    graph = {i: [] for i in range(1, n + 1)}\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n\n    # Depth-first search\n    def dfs(node, visited, path):\n        if len(path) >= 2:\n            return False\n        if node in visited:\n            return True\n        visited.add(node)\n        for neighbor in graph[node]:\n            if neighbor in visited:\n                continue\n            new_path = path + [(node, neighbor)]\n            if dfs(neighbor, visited, new_path):\n                return True\n        return False\n\n    # Check if there is a path of length 2 or greater\n    for i in range(1, n + 1):\n        if dfs(i, set(), []):\n            return \"NO\"\n\n    # Generate the answer\n    answer = \"\"\n    for u, v in edges:\n        if u < v:\n            answer += \"0\"\n        else:\n            answer += \"1\"\n\n    return \"YES\\n\" + answer\n"
    },
    {
        "number": 4236,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    segments = []\n    for _ in range(n):\n        l, r = map(int, stdin.split()[2:])\n        segments.append((l, r))\n\n    points = set(range(1, m + 1))\n    for segment in segments:\n        points.difference_update(range(segment[0], segment[1] + 1))\n\n    if not points:\n        return \"0\\n\"\n    else:\n        return str(len(points)) + \"\\n\" + \" \".join(map(str, sorted(points))) + \"\\n\"\n\n\ninput_str = \"\"\"3 5\n2 2\n1 2\n5 5\"\"\"\noutput_str = solution(input_str)\nprint(output_str)\n\ninput_str = \"\"\"1 7\n1 7\"\"\"\noutput_str = solution(input_str)\nprint(output_str) "
    },
    {
        "number": 4236,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    segments = []\n    for line in stdin.split()[2:]:\n        l, r = map(int, line.split())\n        segments.append((l, r))\n    \n    points = set(range(1, m+1))\n    for l, r in segments:\n        points -= set(range(l, r+1))\n    \n    return f\"{len(points)}\\n{' '.join(map(str, points))}\"\n\ninput_data = \"3 5\\n2 2\\n1 2\\n5 5\"\nprint(solution(input_data)) "
    },
    {
        "number": 4236,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.split()[2:])\n        segments.append((l, r))\n\n    points = set()\n    for i in range(1, m+1):\n        points.add(i)\n\n    for segment in segments:\n        if segment[0] == segment[1]:\n            points.discard(segment[0])\n        else:\n            for i in range(segment[0], segment[1]+1):\n                points.discard(i)\n\n    points = list(points)\n    points.sort()\n\n    if len(points) == 0:\n        return \"0\"\n    else:\n        return str(len(points)) + \"\\n\" + \" \".join(map(str, points))"
    },
    {
        "number": 4236,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    segments = [list(map(int, line.split())) for line in stdin.split()[2:2+n]]\n    points = set(range(1, m+1))\n\n    for segment in segments:\n        points -= set(range(segment[0], segment[1]+1))\n\n    if len(points) == 0:\n        return \"0\\n\"\n\n    return f\"{len(points)}\\n{' '.join(map(str, points))}\\n\"\n\n\ndef"
    },
    {
        "number": 4236,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    segments = []\n\n    for _ in range(n):\n        l, r = map(int, stdin.split()[-2:])\n        segments.append((l, r))\n\n    points = set(range(1, m + 1))\n    for segment in segments:\n        points -= set(range(segment[0], segment[1] + 1))\n\n    if not points:\n        return f\"0\\n\"\n    else:\n        return f\"{len(points)}\\n{' '.join(map(str, sorted(points)))}\"\n\ndef"
    },
    {
        "number": 4236,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    segments = []\n    for _ in range(n):\n        l, r = map(int, input().split())\n        segments.append((l, r))\n\n    points = set(range(1, m + 1))\n    for segment in segments:\n        points.difference_update(range(segment[0], segment[1] + 1))\n\n    if not points:\n        return \"0\"\n\n    points = sorted(list(points))\n    return str(len(points)) + \"\\n\" + \" \".join(map(str, points))\n\n\nn, m = map(int, input().split())\nsegments = []\nfor _ in range(n):\n    l, r = map(int, input().split())\n    segments.append((l, r))\n\nresult = solution(\"\\n\".join(map(str, [n, m] + segments)))\nprint(result) "
    },
    {
        "number": 4236,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n, m = map(int, lines[0].split())\n    segments = []\n    \n    for i in range(1, n + 1):\n        l, r = map(int, lines[i].split())\n        segments.append((l, r))\n    \n    points = set(range(1, m + 1))\n    for segment in segments:\n        points -= set(range(segment[0], segment[1] + 1))\n    \n    if len(points) == 0:\n        return \"0\\n\"\n    else:\n        return f\"{len(points)}\\n{' '.join(map(str, sorted(points)))}\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    segments = []\n    for _ in range(n):\n        l, r = map(int, input().split())\n        segments.append((l, r))\n    \n    points = set(range(1, m+1))\n    for segment in segments:\n        points -= set(range(segment[0], segment[1]+1))\n    \n    points = sorted(points)\n    \n    if not points:\n        return \"0\"\n    else:\n        k = len(points)\n        return f\"{k}\\n{' '.join(map(str, points))}\"\n\ninput_data = \"\"\"3 5\n2 2\n1 2\n5 5\"\"\"\nprint(solution(input_data))\n\ninput_data = \"\"\"1 7\n1 7\"\"\"\nprint(solution(input_data)) "
    },
    {
        "number": 4236,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    segments = []\n    points = set()\n\n    for _ in range(n):\n        l, r = list(map(int, input().split()))\n        segments.append((l, r))\n        for i in range(l, r + 1):\n            points.add(i)\n\n    points_outside = set()\n    for point in points:\n        is_inside = False\n        for l, r in segments:\n            if l <= point <= r:\n                is_inside = True\n                break\n        if not is_inside:\n            points_outside.add(point)\n\n    print(len(points_outside))\n    if points_outside:\n        print(\" \".join(map(str, sorted(points_outside))))"
    },
    {
        "number": 4236,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    segments = []\n    \n    for i in range(n):\n        l, r = map(int, input().split())\n        segments.append((l, r))\n    \n    points = set(range(1, m+1))\n    for segment in segments:\n        points.difference_update(range(segment[0], segment[1]+1))\n    \n    output = f\"{len(points)}\\n{' '.join(str(p) for p in sorted(points))}\"\n    \n    return output"
    },
    {
        "number": 4237,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    count = 0\n\n    for i in range(A, B + 1):\n        if i % C != 0 and i % D != 0:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4237,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    lcm_cd = lcm(C, D)\n    result = 0\n\n    for i in range(A, B + 1):\n        if i % lcm_cd != 0 and i % C != 0 and i % D != 0:\n            result += 1\n\n    return str(result)\n"
    },
    {
        "number": 4237,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = list(map(int, stdin.split()))\n    count = 0\n\n    for i in range(A, B+1):\n        if i % C != 0 and i % D != 0:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4237,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    count = 0\n    for i in range(A, B + 1):\n        if i % C != 0 and i % D != 0:\n            count += 1\n    return str(count)\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4237,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    count = 0\n    for num in range(A, B+1):\n        if num % C != 0 and num % D != 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4237,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    count = 0\n    for num in range(A, B+1):\n        if num % C != 0 and num % D != 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4237,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    count = 0\n\n    for i in range(A, B + 1):\n        if i % C != 0 and i % D != 0:\n            count += 1\n\n    return str(count)\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4237,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    count = 0\n    \n    for i in range(A, B+1):\n        if i % C != 0 and i % D != 0:\n            count += 1\n    \n    return str(count)"
    },
    {
        "number": 4237,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    count = 0\n    for num in range(A, B+1):\n        if num % C != 0 and num % D != 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4237,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    count = 0\n    for i in range(A, B+1):\n        if i % C != 0 and i % D != 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4238,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    digits_sum = sum(int(digit) for digit in str(N))\n    return \"Yes\" if digits_sum % 9 == 0 else \"No\"\n\ndef"
    },
    {
        "number": 4238,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    digits_sum = sum(int(digit) for digit in str(n))\n    if digits_sum % 9 == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4238,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    digits_sum = sum(int(digit) for digit in str(N))\n    return \"Yes\" if digits_sum % 9 == 0 else \"No\""
    },
    {
        "number": 4238,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    digits_sum = sum(map(int, str(N)))\n    if digits_sum % 9 == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4238,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    digits_sum = sum(int(digit) for digit in str(n))\n    return \"Yes\" if digits_sum % 9 == 0 else \"No\""
    },
    {
        "number": 4238,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    digits_sum = sum(int(digit) for digit in str(n))\n    return \"Yes\" if digits_sum % 9 == 0 else \"No\""
    },
    {
        "number": 4238,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    digits_sum = sum(int(digit) for digit in str(N))\n    if digits_sum % 9 == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4238,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    digits_sum = sum(map(int, str(n)))\n    if digits_sum % 9 == 0:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4238,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    total_sum = sum(int(digit) for digit in str(n))\n    if total_sum % 9 == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4238,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    digits_sum = sum(int(digit) for digit in str(N))\n    return \"Yes\" if digits_sum % 9 == 0 else \"No\""
    },
    {
        "number": 4239,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    \n    # Calculate the number of operations required to withdraw exactly N yen\n    operations = 0\n    while N > 0:\n        # Check if the current amount is divisible by 1, 6, 9, 36, 81, etc.\n        for factor in [1, 6, 9, 36, 81]:\n            if N % factor == 0:\n                operations += 1\n                N -= factor\n                break\n        else:\n            # If we can't find a valid factor, then we need to withdraw at least one more operation\n            operations += 1\n            N -= 1\n            \n    return str(operations)"
    },
    {
        "number": 4239,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    operations = 0\n    current_sum = 0\n\n    while current_sum < N:\n        operations += 1\n        if operations % 2 == 0:\n            current_sum += 6 ** operations\n        else:\n            current_sum += 9 ** operations\n\n    return str(operations)"
    },
    {
        "number": 4239,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    operations = 0\n\n    # Withdraw 1 yen at a time until N is 0\n    while N > 0:\n        if N >= 6**operations:\n            N -= 6**operations\n            operations += 1\n        else:\n            break\n\n    # Withdraw 9 yen at a time until N is 0\n    while N > 0:\n        if N >= 9**operations:\n            N -= 9**operations\n            operations += 1\n        else:\n            break\n\n    return str(operations)"
    },
    {
        "number": 4239,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    operations = 0\n\n    while N > 0:\n        if N % 9 == 0:\n            withdraw_amount = 9\n        elif N % 6 == 0:\n            withdraw_amount = 6\n        else:\n            withdraw_amount = 1\n\n        N -= withdraw_amount\n        operations += 1\n\n    return str(operations)"
    },
    {
        "number": 4239,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    operations = 0\n    withdrawn = 0\n    while withdrawn != N:\n        if withdrawn + 1 <= N:\n            withdrawn += 1\n        elif withdrawn + 9 <= N:\n            withdrawn += 9\n        elif withdrawn + 36 <= N:\n            withdrawn += 36\n        else:\n            withdrawn += 81\n        operations += 1\n    return str(operations)"
    },
    {
        "number": 4239,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    amount = 0\n    \n    while amount < N:\n        if amount % 6 == 0 and N % 6 == 0:\n            count += N // 6\n            amount += N\n        elif amount % 9 == 0 and N % 9 == 0:\n            count += N // 9\n            amount += N\n        else:\n            count += 1\n            amount += 1\n    \n    return str(count)"
    },
    {
        "number": 4239,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    \n    # determine the maximum value of 6^n and 9^m that is less than or equal to N\n    max_6n = int(math.sqrt(6 * N))\n    max_9m = int(math.sqrt(9 * N))\n    \n    # calculate the number of operations required\n    count = 0\n    for i in range(1, max_6n + 1):\n        if 6 ** i <= N:\n            count += 1\n            N -= 6 ** i\n    for j in range(1, max_9m + 1):\n        if 9 ** j <= N:\n            count += 1\n            N -= 9 ** j\n            \n    if N != 0:\n        count += 1\n        \n    return str(count)"
    },
    {
        "number": 4239,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N <= 1:\n        return str(1)\n    elif N == 2:\n        return str(2)\n    elif N == 3 or N == 4:\n        return str(3)\n    elif N == 5 or N == 6:\n        return str(4)\n    elif N == 7 or N == 8:\n        return str(5)\n    else:\n        count = 1\n        while N > 9:\n            if N % 9 == 0:\n                N //= 9\n            elif N % 6 == 0:\n                N //= 6\n            else:\n                N -= 1\n            count += 1\n        return str(count + 1)"
    },
    {
        "number": 4239,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 0\n    i = 1\n    j = 1\n    k = 1\n\n    while i * i <= n:\n        if n % i == 0:\n            count += 1\n            n //= i\n        else:\n            i += 1\n\n    while j * j * j <= n:\n        if n % (j * j * j) == 0:\n            count += 1\n            n //= j * j * j\n        else:\n            j += 1\n\n    while k * k * k * k * k <= n:\n        if n % (k * k * k * k * k) == 0:\n            count += 1\n            n //= k * k * k * k * k\n        else:\n            k += 1\n\n    return str(count)\n"
    },
    {
        "number": 4239,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    operations = 0\n    total = 0\n\n    while total < N:\n        if total + 1 <= N:\n            total += 1\n        elif total + 6 <= N and (total + 6) % 36 == 0:\n            total += 6\n        elif total + 9 <= N and (total + 9) % 81 == 0:\n            total += 9\n        operations += 1\n\n    return str(operations)"
    },
    {
        "number": 4240,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(\"\\n\")\n    if s == t or s == t[1:] + t[0] or s == t[-1:] + t[:-1]:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4240,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    if len(S) != len(T):\n        return \"No\"\n\n    for i in range(len(S)):\n        if S == T:\n            return \"Yes\"\n        S = S[-1] + S[:-1]\n\n    return \"No\""
    },
    {
        "number": 4240,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    if S == T:\n        return \"Yes\"\n    \n    for i in range(len(S)):\n        if S == T:\n            return \"Yes\"\n        S = S[-1] + S[:-1]\n    \n    return \"No\""
    },
    {
        "number": 4240,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split()\n    if s == t or s == t[1:] + t[0]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4240,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    if s == t or s == t[len(t) - len(s):] + t[:len(t) - len(s)]:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4240,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    if len(S) != len(T):\n        return \"No\"\n\n    for i in range(len(S)):\n        if S[i:] + S[:i] == T:\n            return \"Yes\"\n    return \"No\"\n\ndef"
    },
    {
        "number": 4240,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    if len(s) != len(t):\n        return \"No\"\n    \n    for i in range(len(s)):\n        if s == t:\n            return \"Yes\"\n        s = s[-1] + s[:-1]\n    \n    return \"No\""
    },
    {
        "number": 4240,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    return 'Yes' if s == t or s == t[len(t) - len(s):] else 'No'\n\ninput_string = input()\nprint(solution(input_string)) "
    },
    {
        "number": 4240,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    n = len(S)\n    if S == T:\n        return \"Yes\"\n    for i in range(n):\n        if S == T:\n            return \"Yes\"\n        S = S[-1] + S[:-1]\n    return \"No\""
    },
    {
        "number": 4240,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split()\n    n = len(s)\n\n    for i in range(n):\n        if s == t:\n            return \"Yes\"\n        s = s[n-1] + s[:n-1]\n\n    return \"No\""
    },
    {
        "number": 4241,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(\"\\n\")\n    min_changes = len(s)\n    \n    for i in range(len(s) - len(t) + 1):\n        if s[i:i+len(t)] == t:\n            min_changes = min(min_changes, len(s) - i - len(t) + 1)\n    \n    return str(min_changes)\n\ndef"
    },
    {
        "number": 4241,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    min_changes = len(s)\n    for i in range(len(s) - len(t) + 1):\n        current_changes = 0\n        for j in range(len(t)):\n            if s[i + j] != t[j]:\n                current_changes += 1\n        min_changes = min(min_changes, current_changes)\n    return str(min_changes)"
    },
    {
        "number": 4241,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    min_changes = len(s)\n    for i in range(len(s) - len(t) + 1):\n        if s[i:i+len(t)] == t:\n            min_changes = min(min_changes, i)\n    return str(min_changes)"
    },
    {
        "number": 4241,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n\n    if T not in S:\n        return len(S) - len(T)\n\n    count = 0\n    i = 0\n\n    while i < len(S):\n        if S[i:i + len(T)] == T:\n            count += 1\n            i += len(T) - 1\n        i += 1\n\n    return len(S) - len(T) * count"
    },
    {
        "number": 4241,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    if T in S:\n        return 0\n\n    for i in range(len(S)):\n        if S[i:i + len(T)] == T:\n            return i\n\n    return \"Not Found\""
    },
    {
        "number": 4241,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    changes = len(T)\n\n    for i in range(len(S) - len(T) + 1):\n        if S[i:i + len(T)] == T:\n            changes = min(changes, len(S) - i - len(T) + 1)\n\n    return str(changes)"
    },
    {
        "number": 4241,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    s_len, t_len = len(s), len(t)\n    dp = [0] * (t_len + 1)\n\n    for i in range(s_len):\n        for j in range(t_len, 0, -1):\n            if s[i] == t[j - 1]:\n                dp[j] = max(dp[j], dp[j - 1] + 1)\n\n    return t_len - max(dp)"
    },
    {
        "number": 4241,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    min_changes = len(s) + 1\n    \n    for i in range(len(s) - len(t) + 1):\n        if s[i:i + len(t)] == t:\n            min_changes = min(min_changes, i + len(t))\n            \n    return str(min_changes)"
    },
    {
        "number": 4241,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    min_changes = float('inf')\n    for i in range(len(s) - len(t) + 1):\n        changes = 0\n        for j in range(len(t)):\n            if s[i + j] != t[j]:\n                changes += 1\n        min_changes = min(min_changes, changes)\n    return str(min_changes)"
    },
    {
        "number": 4241,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    count = 0\n    for i in range(len(s)):\n        if s[i:i + len(t)] == t:\n            return str(count)\n        count += 1\n    return str(count)"
    },
    {
        "number": 4242,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    \n    # Find all divisors of A and B\n    divisors_A = []\n    divisors_B = []\n    for i in range(1, A+1):\n        if A % i == 0:\n            divisors_A.append(i)\n    for i in range(1, B+1):\n        if B % i == 0:\n            divisors_B.append(i)\n    \n    # Find the intersection of the two lists\n    divisors = list(set(divisors_A) & set(divisors_B))\n    \n    # Sort the list in descending order\n    divisors.sort(reverse=True)\n    \n    # Return the K-th largest number\n    return str(divisors[K-1])"
    },
    {
        "number": 4242,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n\n    divisors = []\n    for i in range(1, min(A, B) + 1):\n        if A % i == 0 and B % i == 0:\n            divisors.append(i)\n\n    return str(sorted(divisors, reverse=True)[K-1])\n\ndef"
    },
    {
        "number": 4242,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    divisors = set()\n    for i in range(1, min(A, B) + 1):\n        if A % i == 0 and B % i == 0:\n            divisors.add(i)\n    sorted_divisors = sorted(list(divisors), reverse=True)\n    return str(sorted_divisors[K - 1])"
    },
    {
        "number": 4242,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.strip().split())\n    divisors = set()\n\n    for i in range(1, min(A, B) + 1):\n        if A % i == 0 and B % i == 0:\n            divisors.add(i)\n\n    divisors = sorted(list(divisors), reverse=True)\n    return str(divisors[K - 1])"
    },
    {
        "number": 4242,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    divisors = [x for x in range(1, max(a, b) + 1) if a % x == 0 and b % x == 0]\n    divisors.sort(reverse=True)\n    return str(divisors[k-1])\n\ndef"
    },
    {
        "number": 4242,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    \n    # Find all common divisors of A and B\n    common_divisors = [d for d in range(1, min(A, B) + 1) if A % d == 0 and B % d == 0]\n    \n    # Sort the common divisors in descending order\n    common_divisors.sort(reverse=True)\n    \n    # Return the K-th largest common divisor\n    return str(common_divisors[K-1])"
    },
    {
        "number": 4242,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    divisors = []\n    for i in range(1, min(A, B) + 1):\n        if A % i == 0 and B % i == 0:\n            divisors.append(i)\n    return str(divisors[-K])"
    },
    {
        "number": 4242,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n\n    divisors = set()\n\n    for i in range(1, min(A, B) + 1):\n        if A % i == 0 and B % i == 0:\n            divisors.add(i)\n\n    divisors = sorted(list(divisors), reverse=True)\n\n    return str(divisors[K - 1])\n"
    },
    {
        "number": 4242,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.strip().split())\n    divisors = sorted(set(divisor for divisor in range(1, A+1) if A % divisor == 0 and B % divisor == 0), reverse=True)\n    return str(divisors[K-1])"
    },
    {
        "number": 4242,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    divisors = set()\n    \n    for i in range(1, A+1):\n        if A % i == 0:\n            divisors.add(i)\n    \n    for i in range(1, B+1):\n        if B % i == 0:\n            if i in divisors:\n                divisors.remove(i)\n    \n    divisors = sorted(list(divisors), reverse=True)\n    \n    return str(divisors[K-1])"
    },
    {
        "number": 4243,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    X = int(stdin)\n    \n    # Calculate happiness points for each coin type\n    coins = [(500, 1000), (100, 500), (50, 500), (10, 500), (5, 5), (1, 1)]\n    happiness = 0\n    \n    for coin, points in coins:\n        count = X // coin\n        happiness += count * points\n        X %= coin\n        \n    return str(happiness)"
    },
    {
        "number": 4243,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip())\n    happiness = 0\n    \n    # calculate the number of 500-yen coins\n    num_500_yen = X // 500\n    happiness += num_500_yen * 1000\n    \n    # calculate the remaining amount\n    remaining_yen = X % 500\n    \n    # calculate the number of 5-yen coins\n    num_5_yen = remaining_yen // 5\n    happiness += num_5_yen * 5\n    \n    # calculate the remaining amount\n    remaining_yen = remaining_yen % 5\n    \n    # calculate the number of 1-yen coins\n    num_1_yen = remaining_yen\n    happiness += num_1_yen\n    \n    return str(happiness) "
    },
    {
        "number": 4243,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    happiness = 0\n    coins = {500: 0, 100: 0, 50: 0, 10: 0, 5: 0, 1: 0}\n\n    for coin in coins:\n        coins[coin] = x // coin\n        x %= coin\n\n    happiness += coins[500] * 1000 + coins[5] * 5\n\n    return str(happiness)\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4243,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    total_yen = int(stdin)\n    coins = [500, 100, 50, 10, 5, 1]\n    happiness_points = [1000, 500, 100, 50, 10, 5]\n    num_coins = [0] * len(coins)\n\n    for coin in coins:\n        num_coins[coins.index(coin)] = total_yen // coin\n        total_yen %= coin\n\n    return str(sum([num_coins[i] * happiness_points[i] for i in range(len(coins))]))"
    },
    {
        "number": 4243,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    happiness = 0\n    if x >= 500:\n        happiness += (x // 500) * 1000\n        x %= 500\n    happiness += x // 5 * 5\n    return str(happiness)"
    },
    {
        "number": 4243,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.strip())\n    happiness_500yen = x // 500\n    x %= 500\n    happiness_100yen = x // 100\n    x %= 100\n    happiness_50yen = x // 50\n    x %= 50\n    happiness_10yen = x // 10\n    x %= 10\n    happiness_5yen = x // 5\n    x %= 5\n    happiness_1yen = x\n    happiness = (\n        happiness_500yen * 1000\n        + happiness_100yen * 100\n        + happiness_50yen * 50\n        + happiness_10yen * 10\n        + happiness_5yen * 5\n        + happiness_1yen\n    )\n    return str(happiness)\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4243,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    coins = [500, 100, 50, 10, 5, 1]\n    max_happiness = 0\n\n    for i in range(len(coins)):\n        for j in range(i, len(coins)):\n            coin_sum = coins[i] + coins[j]\n            if coin_sum <= X:\n                happiness = (X // coin_sum) * (500 * coins[i] // 500 + coins[j])\n                if happiness > max_happiness:\n                    max_happiness = happiness\n            else:\n                break\n\n    return str(max_happiness)"
    },
    {
        "number": 4243,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    happiness_points = 0\n    \n    # Calculate the maximum number of 500-yen coins\n    num_500_yen = X // 500\n    happiness_points += num_500_yen * 1000\n    \n    # Calculate the remaining yen\n    remaining_yen = X % 500\n    \n    # Calculate the maximum number of 5-yen coins\n    num_5_yen = remaining_yen // 5\n    happiness_points += num_5_yen * 5\n    \n    return str(happiness_points)"
    },
    {
        "number": 4243,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.strip())\n    happiness = 0\n    \n    # Count the number of coins of each value\n    coins = [0] * 6\n    coins[0] = x // 500\n    x %= 500\n    coins[1] = x // 100\n    x %= 100\n    coins[2] = x // 50\n    x %= 50\n    coins[3] = x // 10\n    x %= 10\n    coins[4] = x // 5\n    x %= 5\n    coins[5] = x // 1\n    \n    # Calculate the happiness points\n    for i in range(6):\n        if i == 0:\n            happiness += coins[i] * 1000\n        elif i == 5:\n            happiness += coins[i] * 5\n        else:\n            happiness += coins[i] * (i + 1)\n    \n    return str(happiness)"
    },
    {
        "number": 4243,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    happiness = 0\n    # Calculate the happiness points for each coin\n    happiness += (x // 500) * 1000\n    x %= 500\n    happiness += (x // 100) * 500\n    x %= 100\n    happiness += (x // 50) * 100\n    x %= 50\n    happiness += (x // 10) * 50\n    x %= 10\n    happiness += x * 5\n    return str(happiness)"
    },
    {
        "number": 4244,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x_coordinates = stdin.split()\n    n = int(n)\n    x_coordinates = list(map(int, x_coordinates.split()))\n\n    def stamina_cost(coordinate: int) -> int:\n        return sum((x_i - coordinate) ** 2 for x_i in x_coordinates)\n\n    def binary_search(left: int, right: int) -> int:\n        if left == right:\n            return left\n        mid = (left + right) // 2\n        if stamina_cost(mid) <= stamina_cost(mid + 1):\n            return binary_search(left, mid)\n        else:\n            return binary_search(mid + 1, right)\n\n    return str(stamina_cost(binary_search(1, max(x_coordinates))))"
    },
    {
        "number": 4244,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    coordinates = [int(x) for x in lines[1].split()]\n\n    def stamina_cost(coordinate):\n        return sum((x - coordinate) ** 2 for x in coordinates)\n\n    min_cost = float('inf')\n    for i in range(min(coordinates), max(coordinates) + 1):\n        cost = stamina_cost(i)\n        min_cost = min(min_cost, cost)\n\n    return str(min_cost)"
    },
    {
        "number": 4244,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split(\"\\n\")\n    N = int(input_lines[0])\n    X = list(map(int, input_lines[1].split()))\n\n    min_stamina = float(\"inf\")\n    for i in range(1, 101):\n        total_stamina = 0\n        for x in X:\n            total_stamina += (x - i) ** 2\n        if total_stamina < min_stamina:\n            min_stamina = total_stamina\n\n    return str(min_stamina)"
    },
    {
        "number": 4244,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, *coordinates = stdin.split()\n    N = int(N)\n    coordinates = [int(x) for x in coordinates]\n    coordinates.sort()\n\n    if N == 1:\n        return \"0\"\n\n    min_stamina = float(\"inf\")\n    for i in range(coordinates[0], coordinates[-1] + 1):\n        stamina = sum([(x - i) ** 2 for x in coordinates])\n        if stamina < min_stamina:\n            min_stamina = stamina\n\n    return str(min_stamina)\n"
    },
    {
        "number": 4244,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, *coordinates = [int(x) for x in stdin.split()]\n\n    # find the minimum stamina\n    stamina = sum((x - P) ** 2 for x in coordinates)\n    P = min(range(N + 1), key=lambda P: sum((x - P) ** 2 for x in coordinates))\n\n    # return the result\n    return str(stamina)"
    },
    {
        "number": 4244,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, *coordinates = map(int, stdin.split())\n    coordinates = sorted(coordinates)\n    minimum_stamina = float('inf')\n    for i in range(len(coordinates)):\n        stamina = 0\n        for j in range(len(coordinates)):\n            stamina += (coordinates[j] - coordinates[i]) ** 2\n        minimum_stamina = min(minimum_stamina, stamina)\n    return str(minimum_stamina)\n\ndef"
    },
    {
        "number": 4244,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, *X = stdin.split()\n    N = int(N)\n    X = [int(x) for x in X]\n    \n    def stamina_cost(P: int) -> int:\n        return sum((x - P)**2 for x in X)\n    \n    min_stamina = float('inf')\n    for P in range(1, 101):\n        stamina = stamina_cost(P)\n        if stamina < min_stamina:\n            min_stamina = stamina\n    \n    return str(min_stamina)"
    },
    {
        "number": 4244,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, *coordinates = stdin.split()\n    N = int(N)\n    coordinates = [int(x) for x in coordinates]\n\n    # Sort the coordinates\n    coordinates.sort()\n\n    # Initialize the minimum stamina to the maximum stamina possible\n    min_stamina = sum((coordinates[-1] - coordinates[0]) ** 2)\n\n    # Loop through all possible meeting coordinates\n    for i in range(coordinates[0], coordinates[-1] + 1):\n        stamina = 0\n\n        # Calculate the stamina for each person\n        for x in coordinates:\n            stamina += (x - i) ** 2\n\n        # Update the minimum stamina if needed\n        if stamina < min_stamina:\n            min_stamina = stamina\n\n    return str(min_stamina)\n"
    },
    {
        "number": 4244,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, *X = map(int, stdin.split())\n    X.sort()\n    min_stamina = 0\n    for i in range(N):\n        min_stamina += (X[i] - i) ** 2\n    return str(min_stamina)"
    },
    {
        "number": 4244,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, *coordinates = map(int, stdin.split())\n    coordinates.sort()\n    mid = len(coordinates) // 2\n    left = sum((x - coordinates[mid - 1]) ** 2 for x in coordinates[:mid])\n    right = sum((x - coordinates[mid]) ** 2 for x in coordinates[mid:])\n    return min(left, right)"
    },
    {
        "number": 4245,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    count = 0\n    while B > 0:\n        count += 1\n        B -= A\n    return str(count)"
    },
    {
        "number": 4245,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    power_strips = 0\n    empty_sockets = B\n\n    while empty_sockets > 0:\n        power_strips += 1\n        empty_sockets -= A\n\n    return str(power_strips)"
    },
    {
        "number": 4245,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A >= B:\n        return str(0)\n    else:\n        count = 0\n        while B > 0:\n            B -= A\n            count += 1\n        return str(count)"
    },
    {
        "number": 4245,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    count = 0\n    while B > 0:\n        count += 1\n        B -= A\n        if B < A:\n            A = B\n            B = 0\n    return str(count)\n\ndef"
    },
    {
        "number": 4245,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n\n    strips_required = 0\n    while B > 0:\n        strips_required += 1\n        B -= A\n\n    return str(strips_required)"
    },
    {
        "number": 4245,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    strips = 0\n    while B > 0:\n        strips += 1\n        B -= A\n    return str(strips)"
    },
    {
        "number": 4245,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    strips = 0\n    while B > 0:\n        strips += 1\n        empty_sockets = A\n        while empty_sockets >= 2:\n            B -= empty_sockets\n            if B <= 0:\n                break\n            empty_sockets -= 2\n            empty_sockets += A\n    return str(strips)"
    },
    {
        "number": 4245,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split())\n\n    if B <= A:\n        return \"0\"\n\n    min_strips = (B - 1) // A + 1\n    return str(min_strips)"
    },
    {
        "number": 4245,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    power_strips = 0\n    while B > 0:\n        power_strips += 1\n        B -= A\n    return str(power_strips)"
    },
    {
        "number": 4245,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if B == 1:\n        return \"1\"\n\n    strips = 1\n    sockets_left = B - 1\n\n    while sockets_left > 0:\n        strips += 1\n        sockets_left -= A\n\n    return str(strips)"
    },
    {
        "number": 4246,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    count = 0\n    for i in range(3):\n        if S[i] == T[i]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4246,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    count = 0\n    for i in range(3):\n        if S[i] == T[i]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4246,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    count = 0\n    for i in range(3):\n        if S[i] == T[i]:\n            count += 1\n    return str(count)\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4246,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    correct_forecast_count = 0\n\n    for i in range(3):\n        if S[i] == T[i]:\n            correct_forecast_count += 1\n\n    return str(correct_forecast_count)"
    },
    {
        "number": 4246,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    correct_forecasts = 0\n\n    for i in range(3):\n        if S[i] == T[i]:\n            correct_forecasts += 1\n\n    return str(correct_forecasts)"
    },
    {
        "number": 4246,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    forecast, actual = lines\n    correct = 0\n    \n    for i in range(3):\n        if forecast[i] == actual[i]:\n            correct += 1\n    \n    return str(correct)"
    },
    {
        "number": 4246,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    correct_days = 0\n    for i in range(3):\n        if S[i] == T[i]:\n            correct_days += 1\n    return str(correct_days)"
    },
    {
        "number": 4246,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    correct_days = 0\n    \n    for i in range(len(S)):\n        if S[i] == T[i]:\n            correct_days += 1\n            \n    return str(correct_days)"
    },
    {
        "number": 4246,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    count = 0\n    for i in range(3):\n        if S[i] == T[i]:\n            count += 1\n    return str(count)\n\ndef"
    },
    {
        "number": 4246,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    forecast, actual = stdin.split()\n    correct_count = 0\n\n    for i in range(3):\n        if forecast[i] == actual[i]:\n            correct_count += 1\n\n    return str(correct_count)\n"
    },
    {
        "number": 4247,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = stdin.split()\n    n = int(n)\n    p = list(map(int, p.split()))\n    \n    count = 0\n    for i in range(1, n-1):\n        if p[i] == sorted(p[i-1], p[i], p[i+1])[1]:\n            count += 1\n    \n    return str(count)"
    },
    {
        "number": 4247,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, p = stdin.split()\n    n = int(n)\n    p = list(map(int, p.split()))\n\n    count = 0\n    for i in range(1, n - 1):\n        if p[i] == sorted(p[i - 1:i + 2])[1]:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4247,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, p = stdin.split()\n    n = int(n)\n    p = list(map(int, p.split()))\n    \n    count = 0\n    for i in range(1, n-1):\n        if p[i] == sorted(p[i-1:i+2])[1]:\n            count += 1\n            \n    return str(count)"
    },
    {
        "number": 4247,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, p = stdin.split()\n    n = int(n)\n    p = [int(x) for x in p.split()]\n    count = 0\n    for i in range(1, n-1):\n        if p[i] == sorted(p[i-1:i+2])[1]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4247,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    p = stdin.split()[1:]\n    count = 0\n\n    for i in range(1, n - 1):\n        if p[i - 1] > p[i] < p[i + 1]:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4247,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, p = stdin.split()\n    n = int(n)\n    p = [int(x) for x in p.split()]\n\n    count = 0\n    for i in range(1, n - 1):\n        if sorted([p[i - 1], p[i], p[i + 1]])[1] == p[i]:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4247,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    p = list(map(int, stdin.split()[1:]))\n    \n    count = 0\n    for i in range(1, n - 1):\n        if sorted(p[i - 1:i + 2])[1] == p[i]:\n            count += 1\n            \n    return str(count)"
    },
    {
        "number": 4247,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, perm = stdin.split()\n    n = int(n)\n    perm = list(map(int, perm.split()))\n    \n    count = 0\n    for i in range(1, n-1):\n        if min(perm[i-1], perm[i+1], perm[i]) == perm[i]:\n            count += 1\n    \n    return str(count)"
    },
    {
        "number": 4247,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    p = list(map(int, stdin.split()[1:]))\n    \n    count = 0\n    for i in range(1, n-1):\n        if p[i-1] > p[i] < p[i+1]:\n            count += 1\n    \n    return str(count)\n\ninput_str = input()\noutput_str = solution(input_str)\nprint(output_str) "
    },
    {
        "number": 4247,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, p = stdin.split()\n    n = int(n)\n    p = list(map(int, p.split()))\n    count = 0\n\n    for i in range(1, n - 1):\n        if p[i] == sorted(p[i - 1:i + 2])[1]:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4248,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Split input by line\n    lines = stdin.split('\\n')\n    # Read number of points\n    n = int(lines[0])\n    # Read points\n    points = [(float(x), float(y)) for x, y in (line.split() for line in lines[1:n+1])]\n    # Calculate angle\n    angles = [math.atan2(y, x) for x, y in points]\n    angle = sum(angles) / n\n    # Calculate result\n    result = angle * n / (2 * math.pi)\n    # Return result\n    return \"{:.3f}\".format(result)"
    },
    {
        "number": 4248,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    points = [list(map(float, line.split())) for line in stdin.strip().split(\"\\n\")[1:]]\n    theta = sum((points[i][0] - points[j][0]) * (points[i][1] + points[j][1]) for i in range(len(points)) for j in range(i + 1, len(points))) / 2\n    return f\"{theta:.3f}\"\n\ninput_str = \"\"\"8\n-2.14 2.06\n-1.14 2.04\n-2.16 1.46\n-2.14 0.70\n-1.42 0.40\n-0.94 -0.48\n-1.42 -1.28\n-2.16 -1.62\"\"\"\nprint(solution(input_str)) "
    },
    {
        "number": 4248,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    from math import atan2, sqrt, pi\n\n    def distance(a: tuple, b: tuple) -> float:\n        return sqrt((a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2)\n\n    def angle(a: tuple, b: tuple, c: tuple) -> float:\n        return atan2(c[1] - b[1], c[0] - b[0]) - atan2(a[1] - b[1], a[0] - b[0])\n\n    points = [tuple(map(float, line.split())) for line in stdin.split('\\n')[1:]]\n    theta = 0\n\n    for i in range(len(points)):\n        for j in range(i + 1, len(points)):\n            theta += abs(angle(points[i], (0, 0), points[j]))\n\n    theta /= len(points) * (len(points) - 1)\n    return f\"{theta / pi * 180:.3f}\"\n\ninputs = [\n    \"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\",\n    \"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\",\n    \"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\",\n    \"5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\",\n    \"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\",\n    \"7\\n20.62 3.00\\n21.06 2.28\\n21.56 1.36\\n21.66 0.56\\n21.64 -0.52\\n22.14 2.32\\n22.62 3.04\",\n]\n\nfor input_str in inputs:\n    print(solution(input_str)) "
    },
    {
        "number": 4248,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    points = stdin.split('\\n')\n    n = int(points.pop(0))\n    x_sum = 0\n    y_sum = 0\n    for i in range(n):\n        x, y = map(float, points[i].split())\n        x_sum += x\n        y_sum += y\n    x_bar = x_sum / n\n    y_bar = y_sum / n\n    theta = 0\n    for i in range(n):\n        x, y = map(float, points[i].split())\n        theta += (x - x_bar) * (y - y_bar)\n    theta /= n\n    return str(theta)\n\ndef"
    },
    {
        "number": 4248,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    points = []\n    for i in range(1, n+1):\n        x, y = map(float, stdin.split('\\n')[i].split())\n        points.append((x, y))\n    \n    def find_angle(a: tuple, b: tuple, c: tuple) -> float:\n        ab = (b[0] - a[0], b[1] - a[1])\n        cb = (b[0] - c[0], b[1] - c[1])\n        dot_product = ab[0] * cb[0] + ab[1] * cb[1]\n        return math.degrees(math.acos(dot_product / (math.sqrt(ab[0]**2 + ab[1]**2) * math.sqrt(cb[0]**2 + cb[1]**2))))\n    \n    def angle_sum(points: list) -> float:\n        total_angle = 0\n        n = len(points)\n        for i in range(n):\n            total_angle += find_angle(points[i], points[(i+1)%n], points[(i+2)%n])\n        return total_angle\n    \n    return str(angle_sum(points) / (n-2))[:6]"
    },
    {
        "number": 4248,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    points = stdin.split(\"\\n\")[1:]\n    x = [float(p.split()[0]) for p in points]\n    y = [float(p.split()[1]) for p in points]\n\n    def distance(point1, point2):\n        return ((point1[0] - point2[0]) ** 2 + (point1[1] - point2[1]) ** 2) ** 0.5\n\n    def min_distance(point, points):\n        return min(distance(point, p) for p in points)\n\n    min_distances = [min_distance(p, zip(x, y)) for p in zip(x, y)]\n    sum_min_distances = sum(min_distances)\n    theta = sum_min_distances / n\n\n    return f\"{theta:.3f}\""
    },
    {
        "number": 4248,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    import math\n\n    n = int(stdin.split('\\n')[0])\n    points = [tuple(map(float, line.split())) for line in stdin.split('\\n')[1:]]\n\n    def angle(a, b, c):\n        l1 = math.sqrt((b[0] - a[0]) ** 2 + (b[1] - a[1]) ** 2)\n        l2 = math.sqrt((b[0] - c[0]) ** 2 + (b[1] - c[1]) ** 2)\n        l3 = math.sqrt((c[0] - a[0]) ** 2 + (c[1] - a[1]) ** 2)\n        return math.degrees(math.acos((l1 ** 2 + l2 ** 2 - l3 ** 2) / (2 * l1 * l2)))\n\n    def centroid(points):\n        x = sum(p[0] for p in points) / len(points)\n        y = sum(p[1] for p in points) / len(points)\n        return (x, y)\n\n    a, b, c = points[:3]\n    theta = angle(a, b, c)\n\n    for i in range(n - 3):\n        a, b, c = points[i:i+3]\n        theta = min(theta, angle(a, b, c))\n\n    return f\"{theta:.3f}\"\n\ninput_data = \"\"\"\n8\n-2.14 2.06\n-1.14 2.04\n-2.16 1.46\n-2.14 0.70\n-1.42 0.40\n-0.94 -0.48\n-1.42 -1.28\n\"\"\"\n\nprint(solution(input_data)) "
    },
    {
        "number": 4248,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    x_coords = [float(line.split()[0]) for line in lines[1:]]\n    y_coords = [float(line.split()[1]) for line in lines[1:]]\n\n    # Calculate the angle\n    x_center = sum(x_coords) / n\n    y_center = sum(y_coords) / n\n    numerator = sum([(x_coord - x_center) * (y_coord - y_center) for x_coord, y_coord in zip(x_coords, y_coords)])\n    denominator = (sum([(x_coord - x_center) ** 2 for x_coord in x_coords]) * sum([(y_coord - y_center) ** 2 for y_coord in y_coords])) ** 0.5\n    theta = abs(math.degrees(math.atan2(numerator, denominator)))\n\n    return f\"{theta:.3f}\""
    },
    {
        "number": 4248,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    import math\n\n    n = int(stdin.split('\\n')[0])\n    points = [tuple(map(float, line.split())) for line in stdin.split('\\n')[1:]]\n\n    def angle(a: tuple, b: tuple, c: tuple) -> float:\n        x = b[0] - a[0]\n        y = b[1] - a[1]\n        u = a[0] - c[0]\n        v = a[1] - c[1]\n        dot_product = (x * u + y * v)\n        length_product = math.hypot(x, y) * math.hypot(u, v)\n        return math.degrees(math.acos(dot_product / length_product))\n\n    max_angle = 0\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                if i != j and i != k and j != k:\n                    a = angle(points[i], points[j], points[k])\n                    if a > max_angle:\n                        max_angle = a\n\n    return f\"{max_angle:.3f}\""
    },
    {
        "number": 4248,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    points = [list(map(float, line.strip().split())) for line in stdin.strip().split('\\n')[1:]]\n    n = len(points)\n    theta = 0\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                x1, y1 = points[i]\n                x2, y2 = points[j]\n                theta += (y2 - y1) / (x2 - x1)\n    theta /= n * (n - 1)\n    return f\"{theta:.3f}\"\n\nstdin = \"\"\"8\n-2.14 2.06\n-1.14 2.04\n-2.16 1.46\n-2.14 0.70\n-1.42 0.40\n-0.94 -0.48\n-1.42 -1.28\n-2.16 -1.62\"\"\"\n\nprint(solution(stdin))\n\nstdin = \"\"\"5\n2.26 1.44\n2.28 0.64\n2.30 -0.30\n1.58 0.66\n3.24 0.66\"\"\"\n\nprint(solution(stdin))\n\nstdin = \"\"\"8\n6.98 2.06\n6.40 1.12\n5.98 0.24\n5.54 -0.60\n7.16 0.30\n7.82 1.24\n8.34 0.24\n8.74 -0.76\"\"\"\n\nprint(solution(stdin))\n\nstdin = \"\"\"5\n10.44 2.06\n10.90 0.80\n11.48 -0.48\n12.06 0.76\n12.54 2.06\"\"\"\n\nprint(solution(stdin))\n\nstdin = \"\"\"8\n16.94 2.42\n15.72 2.38\n14.82 1.58\n14.88 0.50\n15.76 -0.16\n16.86 -0.20\n17.00 0.88\n16.40 0.92\"\"\"\n\nprint(solution(stdin))\n\nstdin = \"\"\"7\n20.62 3.00\n21.06 2.28\n21.56 1.36\n21.66 0.56\n21.64 -0.52\n22.14 2.32\n22.62 3.04\"\"\"\n\nprint(solution(stdin)) "
    },
    {
        "number": 4249,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def write_coursework(days: int, cups: List[int]) -> int:\n        page_count = 0\n        cup_count = 0\n        for day in range(days):\n            if cup_count < len(cups):\n                page_count += cups[cup_count] - cup_count\n                cup_count += 1\n            else:\n                break\n        return page_count\n\n    def find_min_days(m: int, n: int, cups: List[int]) -> int:\n        days = 1\n        while True:\n            if write_coursework(days, cups) >= m:\n                return days\n            days += 1\n\n    n, m = list(map(int, stdin.split()))\n    cups = list(map(int, stdin.split()))\n    min_days = find_min_days(m, n, cups)\n    return str(min_days)\n\ninput_data = \"5 8\\n2 3 1 1 2\"\nprint(solution(input_data))\n\ninput_data = \"7 10\\n1 3 4 2 1 4 2\"\nprint(solution(input_data))\n\ninput_data = \"5 15\\n5 5 5 5 5\"\nprint(solution(input_data))\n\ninput_data = \"5 16\\n5 5 5 5 5\"\nprint(solution(input_data))\n\ninput_data = \"5 26\\n5 5 5 5 5\"\nprint(solution(input_data)) "
    },
    {
        "number": 4249,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    coffee_doses = list(map(int, stdin.split()[2:]))\n\n    def drink_coffee(cups_to_drink, days):\n        if len(cups_to_drink) == 0:\n            return days\n\n        max_energy = 0\n        for day in range(days, -1, -1):\n            for cup_to_drink in cups_to_drink:\n                if day >= coffee_doses[cup_to_drink] - 1:\n                    energy = max(0, m - (coffee_doses[cup_to_drink] - day - 1))\n                    max_energy = max(max_energy, energy)\n\n            if max_energy >= m:\n                return days + 1\n\n        return -1\n\n    max_cups_to_drink = [i for i in range(n) if coffee_doses[i] > 0]\n    for i in range(len(max_cups_to_drink)):\n        for j in range(i + 1, len(max_cups_to_drink)):\n            max_cups_to_drink_combination = [max_cups_to_drink[i], max_cups_to_drink[j]]\n            result = drink_coffee(max_cups_to_drink_combination, 1)\n            if result != -1:\n                return result\n\n    return -1"
    },
    {
        "number": 4249,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    max_pages = sum(a)\n    if max_pages < m:\n        return -1\n\n    dp = [0] * (m + 1)\n    dp[0] = 0\n\n    for i in range(n):\n        for j in range(m, a[i] - 1, -1):\n            dp[j] = max(dp[j], dp[j - a[i]] + a[i])\n\n    return dp[m]\n\n\ndef"
    },
    {
        "number": 4249,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    cups = list(map(int, stdin.split()[2:]))\n    max_pages = sum(cups)\n\n    if max_pages < m:\n        return -1\n\n    if n == 1:\n        return m // max_pages if m % max_pages == 0 else -1\n\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        for j in range(m + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif cups[i - 1] <= j:\n                dp[i][j] = max(dp[i - 1][j - cups[i - 1]] + 1, dp[i - 1][j])\n            else:\n                dp[i][j] = dp[i - 1][j]\n\n    return dp[n][m]"
    },
    {
        "number": 4249,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    return str(min_days_to_finish(n, m, a))\n\ndef"
    },
    {
        "number": 4249,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    cups_of_coffee = list(map(int, stdin.split()[2:]))\n\n    def get_max_pages(days: int) -> int:\n        max_pages = 0\n        for i in range(days):\n            max_pages += cups_of_coffee[i] - i\n        return max_pages\n\n    def binary_search(left: int, right: int) -> int:\n        if left > right:\n            return right\n        mid = (left + right) // 2\n        max_pages = get_max_pages(mid)\n        if max_pages >= m:\n            return binary_search(mid + 1, right)\n        else:\n            return binary_search(left, mid - 1)\n\n    if get_max_pages(1) >= m:\n        return \"1\"\n    else:\n        return binary_search(1, m) if get_max_pages(m) >= m else \"-1\""
    },
    {
        "number": 4249,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    \n    # Check if it is possible to write the coursework\n    max_caffeine = max(a)\n    if max_caffeine * (m // max_caffeine) < m:\n        return -1\n    \n    # Calculate the minimum number of days\n    days = 0\n    while m > 0:\n        days += 1\n        for cup in a:\n            m -= min(cup, m)\n            if m <= 0:\n                break\n    \n    return days"
    },
    {
        "number": 4249,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    \n    # Check if there are enough cups for the required pages\n    if sum(a) < m:\n        return \"-1\"\n    \n    # Check if there is only one cup\n    if n == 1:\n        return \"1\" if a[0] >= m else \"-1\"\n    \n    # Calculate the optimal number of days\n    days = 1\n    pages_written = 0\n    coffee_consumed = 0\n    while pages_written < m:\n        days += 1\n        for i in range(n):\n            if a[i] - coffee_consumed > 0:\n                pages_written += min(a[i] - coffee_consumed, m - pages_written)\n                coffee_consumed += 1\n            if pages_written >= m:\n                break\n    \n    return str(days - 1) if pages_written == m else \"-1\"\n"
    },
    {
        "number": 4249,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    cups_of_coffee = list(map(int, input().split()))\n    \n    max_pages_per_day = sum(cups_of_coffee)\n    if max_pages_per_day < m:\n        return -1\n    \n    days = 0\n    pages_written = 0\n    while pages_written < m:\n        days += 1\n        pages_written += max_pages_per_day\n        max_pages_per_day -= 1\n    \n    return days\n\nstdin = \"5 8\\n2 3 1 1 2\"\nprint(solution(stdin)) "
    },
    {
        "number": 4249,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    assert len(a) == n\n    assert 1 <= n <= 2*10**5\n    assert 1 <= m <= 10**9\n\n    def can_write(days: int) -> bool:\n        total_pages = 0\n        caffeine = 0\n        for i in range(n):\n            if days == 0:\n                return False\n            total_pages += min(m, a[i]*days)\n            caffeine += a[i]\n            days -= 1\n        return total_pages >= m\n\n    left, right = 0, m\n    while left <= right:\n        mid = (left + right) // 2\n        if can_write(mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    if can_write(left):\n        return str(left)\n    else:\n        return \"-1\""
    },
    {
        "number": 4250,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n\n    def is_subarray(subarray: List[int], array: List[int]) -> bool:\n        if len(subarray) > len(array):\n            return False\n        for i in range(len(array) - len(subarray) + 1):\n            if array[i:i + len(subarray)] == subarray:\n                return True\n        return False\n\n    def count_copies(subarray: List[int], array: List[int]) -> int:\n        count = 0\n        while is_subarray(subarray, array):\n            count += 1\n            start_index = array.index(subarray[0])\n            array = array[:start_index] + array[start_index + len(subarray):]\n        return count\n\n    max_count = 0\n    result = []\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            for k in range(j + 1, len(s)):\n                subarray = [s[i], s[j], s[k]]\n                count = count_copies(subarray, s)\n                if count > max_count:\n                    max_count = count\n                    result = subarray\n\n    return \" \".join(map(str, result))\n\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4250,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    s = list(map(int, stdin.split()[2:]))\n    max_copies = 0\n    result = []\n    \n    for i in range(len(s) - k + 1):\n        copy_count = 0\n        t = s[i:i+k]\n        \n        for j in range(len(s) - k + 1):\n            if s[j:j+k] == t:\n                copy_count += 1\n                s[j:j+k] = []\n                \n        if copy_count > max_copies:\n            max_copies = copy_count\n            result = t\n            \n    return \" \".join(map(str, result))"
    },
    {
        "number": 4250,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    s = list(map(int, stdin.split()[2:]))\n\n    def find_copies(t: List[int], s: List[int]) -> int:\n        copies = 0\n        while any(x in s for x in t):\n            for x in t:\n                if x in s:\n                    s.remove(x)\n            copies += 1\n        return copies\n\n    t = [1] * k\n    max_copies = find_copies(t, s)\n    result = t\n\n    for i in range(k - 1):\n        for j in range(k - i - 1):\n            if j == 0:\n                t = [1] * (i + 1) + t[i + 1:]\n            else:\n                t[i + 1] = j + 1\n            copies = find_copies(t, s)\n            if copies > max_copies:\n                max_copies = copies\n                result = t\n\n    return \" \".join(str(x) for x in result)\n\n\ninput_data = input()\noutput = solution(input_data)\nprint(output) "
    },
    {
        "number": 4250,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    s = list(map(int, stdin.split()[2:]))\n    t = []\n    i = 0\n    while i < len(s) - k + 1:\n        if s[i:i+k] == t:\n            t = s[i:i+k]\n            i += k\n        else:\n            i += 1\n    return \" \".join(map(str, t))"
    },
    {
        "number": 4250,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    s_set = set(s)\n    t = []\n\n    for i in range(k):\n        for j in range(i, k):\n            if s_set:\n                max_value = max(s_set)\n                for value in range(max_value, 0, -1):\n                    if value in s_set:\n                        t.append(value)\n                        s_set.remove(value)\n                        break\n            else:\n                break\n        if not s_set:\n            break\n\n    return ' '.join(map(str, t))\n"
    },
    {
        "number": 4250,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n\n    def can_cut_out(t: List[int]) -> bool:\n        for i in range(len(s)):\n            if s[i] == t[0]:\n                for j in range(len(t)):\n                    if s[i + j] != t[j]:\n                        return False\n                return True\n        return False\n\n    max_copies = 0\n    result = []\n    for i in range(len(s) - k + 1):\n        t = s[i:i + k]\n        if can_cut_out(t):\n            copies = s.count(t[0]) // k\n            if copies > max_copies:\n                max_copies = copies\n                result = t\n\n    return \" \".join(map(str, result))"
    },
    {
        "number": 4250,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(map(int, input().split()))\n\n    t = []\n    i = 0\n    while i < n and len(t) < k:\n        count = s.count(s[i])\n        if count >= k:\n            t.append(s[i])\n            s = [x for x in s if x != s[i]]\n            i = 0\n        else:\n            i += 1\n\n    return ' '.join(map(str, t))\n\ndef"
    },
    {
        "number": 4250,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    s = list(map(int, stdin.split()[2:]))\n    s_copy = s.copy()\n    t = []\n\n    while len(t) < k:\n        max_count = 0\n        max_element = None\n        for element in s:\n            count = s_copy.count(element)\n            if count > max_count:\n                max_count = count\n                max_element = element\n        t.append(max_element)\n        for i in range(len(s_copy)):\n            if s_copy[i] == max_element:\n                s_copy.pop(i)\n                break\n\n    return ' '.join(map(str, t))\n\ninput_data = input()\nprint(solution(input_data)) "
    },
    {
        "number": 4250,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0].split())\n    s = list(map(int, stdin.split()[1].split()))\n    t = []\n    \n    for i in range(len(s) - k + 1):\n        if s[i:i+k] == t or s[i:i+k] == t[::-1]:\n            t = s[i:i+k]\n            break\n    \n    return \" \".join(map(str, t))"
    },
    {
        "number": 4250,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    s = list(map(int, stdin.split()[2:]))\n    \n    def is_subarray(arr1, arr2):\n        if len(arr1) > len(arr2):\n            return False\n        for i in range(len(arr2) - len(arr1) + 1):\n            if arr2[i:i+len(arr1)] == arr1:\n                return True\n        return False\n    \n    max_count = 0\n    result = []\n    for i in range(len(s) - k + 1):\n        t = s[i:i+k]\n        count = 0\n        for j in range(len(s)):\n            if is_subarray(t, s[j:]):\n                count += 1\n                s = s[:j] + s[j+len(t):]\n        if count > max_count:\n            max_count = count\n            result = t\n            \n    return \" \".join(map(str, result))"
    },
    {
        "number": 4251,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    matrix = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    \n    def is_acceptable(matrix, k, row_order):\n        sequence = []\n        for i in range(m):\n            for j in range(n):\n                sequence.append(matrix[row_order[j]][i])\n        for i in range(len(sequence) - 1):\n            if abs(sequence[i] - sequence[i + 1]) < k:\n                return False\n        return True\n    \n    max_k = 0\n    for row_order in itertools.permutations(range(n)):\n        k = max((max(matrix[row_order[i]][j] - matrix[row_order[i + 1]][j] for i in range(n - 1)) for j in range(m)) + 1)\n        if k > max_k and is_acceptable(matrix, k, row_order):\n            max_k = k\n    \n    return str(max_k)"
    },
    {
        "number": 4251,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, stdin.readline().split())))\n\n    def is_acceptable(order: List[int], k: int) -> bool:\n        traversal = []\n        for j in range(m):\n            for i in order:\n                traversal.append(a[i][j])\n        for i in range(len(traversal) - 1):\n            if abs(traversal[i] - traversal[i + 1]) < k:\n                return False\n        return True\n\n    max_k = 0\n    for k in range(m):\n        for order in itertools.permutations(range(n)):\n            if is_acceptable(order, k):\n                max_k = max(max_k, k)\n                break\n        else:\n            continue\n        break\n\n    return str(max_k)"
    },
    {
        "number": 4251,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.splitlines()[0].split()))\n    matrix = [list(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    \n    def is_acceptable(matrix: List[List[int]], k: int) -> bool:\n        traversal = []\n        for j in range(m):\n            for i in range(n):\n                traversal.append(matrix[i][j])\n        for i in range(len(traversal) - 1):\n            if abs(traversal[i] - traversal[i + 1]) < k:\n                return False\n        return True\n    \n    max_k = 0\n    for permutation in itertools.permutations(range(n)):\n        permuted_matrix = [matrix[i] for i in permutation]\n        for k in range(1, 10**9):\n            if is_acceptable(permuted_matrix, k):\n                max_k = max(max_k, k)\n            else:\n                break\n    return str(max_k)"
    },
    {
        "number": 4251,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, input().split())))\n    \n    max_k = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(m):\n                if a[i][k] > a[j][k]:\n                    break\n            else:\n                k += 1\n            max_k = max(max_k, k)\n    \n    return str(max_k)"
    },
    {
        "number": 4251,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = map(int, stdin.readline().split())\n    matrix = []\n    for _ in range(rows):\n        row = list(map(int, stdin.readline().split()))\n        matrix.append(row)\n\n    k_max = 0\n    for k in range(1, rows * cols):\n        accept = True\n        for i in range(rows):\n            row = [matrix[i][j] for j in range(cols)]\n            row.sort()\n            for j in range(cols - 1):\n                if abs(row[j] - row[j + 1]) < k:\n                    accept = False\n                    break\n            if not accept:\n                break\n        if accept:\n            k_max = k\n\n    return str(k_max)"
    },
    {
        "number": 4251,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    matrix = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    max_k = 0\n    for perm in itertools.permutations(range(n)):\n        s = []\n        for j in range(m):\n            for i in perm:\n                s.append(matrix[i][j])\n        k = 0\n        for i in range(len(s) - 1):\n            k = max(k, abs(s[i] - s[i + 1]))\n        max_k = max(max_k, k)\n    return str(max_k)\n\nimport sys\nimport itertools\n\ninput_data = sys.stdin.read()\nresult = solution(input_data)\nprint(result) "
    },
    {
        "number": 4251,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def is_acceptable(matrix, k):\n        n, m = len(matrix), len(matrix[0])\n        seq = [matrix[0][j] for j in range(m)]\n        for i in range(1, n):\n            for j in range(m):\n                seq.append(matrix[i][j])\n        for i in range(len(seq) - 1):\n            if abs(seq[i] - seq[i + 1]) < k:\n                return False\n        return True\n\n    def max_k(matrix):\n        n, m = len(matrix), len(matrix[0])\n        max_k = 0\n        for k in range(1, m * n + 1):\n            if is_acceptable(matrix, k):\n                max_k = k\n        return max_k\n\n    n, m = map(int, stdin.split()[0:2])\n    matrix = []\n    for i in range(n):\n        row = list(map(int, stdin.split()[2:]))\n        matrix.append(row)\n\n    return str(max_k(matrix))"
    },
    {
        "number": 4251,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = [list(map(int, input().split())) for _ in range(n)]\n    \n    def is_acceptable(order: List[int], k: int) -> bool:\n        visited = set()\n        current_column = 0\n        current_row = 0\n        traversal = []\n        \n        while len(visited) < n * m:\n            visited.add((current_row, current_column))\n            traversal.append(a[current_row][current_column])\n            \n            if current_column == m - 1:\n                current_column = 0\n                current_row += 1\n            else:\n                current_column += 1\n                \n            if len(traversal) >= 2 and abs(traversal[-1] - traversal[-2]) < k:\n                return False\n        \n        return True\n    \n    max_k = 0\n    for order in itertools.permutations(range(n)):\n        for k in range(1, n * m):\n            if is_acceptable(order, k):\n                max_k = max(max_k, k)\n                break\n    \n    return str(max_k)\n\nimport sys\nfrom itertools import permutations\n\nstdin = sys.stdin.read()\nresult = solution(stdin)\nprint(result) "
    },
    {
        "number": 4251,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, m = map(int, lines[0].split())\n    a = [list(map(int, line.split())) for line in lines[1:]]\n\n    def traverse(matrix: List[List[int]]) -> List[int]:\n        n, m = len(matrix), len(matrix[0])\n        result = []\n        for j in range(m):\n            for i in range(n):\n                result.append(matrix[i][j])\n        return result\n\n    def k_acceptable(sequence: List[int], k: int) -> bool:\n        for i in range(len(sequence) - 1):\n            if abs(sequence[i] - sequence[i + 1]) < k:\n                return False\n        return True\n\n    max_k = 0\n    for permutation in permutations(range(n)):\n        permuted_matrix = [[a[i][j] for j in range(m)] for i in permutation]\n        sequence = traverse(permuted_matrix)\n        for k in range(1, 10000):\n            if k_acceptable(sequence, k):\n                max_k = k\n            else:\n                break\n\n    return str(max_k)"
    },
    {
        "number": 4251,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    a = [list(map(int, line.split())) for line in stdin.split('\\n')[1:n+1]]\n    \n    k_max = 0\n    for permutation in itertools.permutations(range(n)):\n        s = []\n        for j in range(m):\n            for i in permutation:\n                s.append(a[i][j])\n        \n        k = max(s[i+1] - s[i] for i in range(len(s)-1))\n        k_max = max(k_max, k)\n    \n    return str(k_max)"
    },
    {
        "number": 4252,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, file_name = stdin.split()\n    n = int(n)\n    x_count = 0\n    min_chars = 0\n    \n    for char in file_name:\n        if char == 'x':\n            x_count += 1\n            if x_count >= 3:\n                min_chars += 1\n                x_count = 0\n        else:\n            x_count = 0\n    \n    return str(min_chars)\n\ndef"
    },
    {
        "number": 4252,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, filename = stdin.split()\n    n = int(n)\n\n    if 'xxx' not in filename:\n        return '0'\n\n    count = 0\n    i = 0\n    while i < n - 2:\n        if filename[i:i+3] == 'xxx':\n            count += 1\n            i += 3\n        else:\n            i += 1\n\n    return str(count)\n\ndef"
    },
    {
        "number": 4252,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, file_name = stdin.split()\n    n = int(n)\n    minimum_deletions = n\n\n    for i in range(n - 2):\n        if file_name[i:i + 3] == \"xxx\":\n            minimum_deletions = min(minimum_deletions, n - i - 2)\n\n    return str(minimum_deletions)\n"
    },
    {
        "number": 4252,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split()\n    n = int(n)\n    if \"xxx\" in s:\n        return str(s.count(\"xxx\"))\n    return \"0\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    file_name = stdin.strip()\n    min_chars_to_remove = 0\n    \n    while 'xxx' in file_name:\n        min_chars_to_remove += 1\n        file_name = file_name.replace('xxx', '', 1)\n    \n    return min_chars_to_remove\n\ndef"
    },
    {
        "number": 4252,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, filename = stdin.split()\n    n = int(n)\n    if 'xxx' in filename:\n        count = 0\n        while 'xxx' in filename:\n            index = filename.index('xxx')\n            filename = filename[:index] + filename[index+1:]\n            count += 1\n        return str(count)\n    else:\n        return '0'"
    },
    {
        "number": 4252,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    filename = stdin.split()[1]\n    \n    if \"xxx\" in filename:\n        return str(len(filename) - filename.count(\"xxx\"))\n    else:\n        return \"0\""
    },
    {
        "number": 4252,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, filename = stdin.split()\n    n = int(n)\n    min_deletions = n\n    \n    for i in range(n):\n        if filename[i:i+3] == \"xxx\":\n            min_deletions = min(min_deletions, i + 1)\n    \n    return str(min_deletions)"
    },
    {
        "number": 4252,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    file_name = stdin.split(\"\\n\")[1]\n\n    count = 0\n    for i in range(len(file_name) - 2):\n        if file_name[i:i+3] == \"xxx\":\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4252,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split()\n    n = int(n)\n\n    if \"xxx\" not in s:\n        return \"0\"\n\n    count = s.count(\"xxx\")\n    total_removed = 0\n    current_position = 0\n\n    while count > 0:\n        if \"xxx\" in s[current_position:]:\n            index = s.index(\"xxx\", current_position)\n            total_removed += 3\n            count -= 1\n        else:\n            break\n\n        current_position = index + 1\n\n    return str(total_removed)"
    },
    {
        "number": 4253,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area = 3 * r**2\n    return str(area)"
    },
    {
        "number": 4253,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area = 3 * r**2\n    return str(area)"
    },
    {
        "number": 4253,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area = 3 * r**2\n    return str(area)"
    },
    {
        "number": 4253,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area = 3 * r**2\n    return str(area)"
    },
    {
        "number": 4253,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area = 3 * r**2\n    return str(area)"
    },
    {
        "number": 4253,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area = 3 * r ** 2\n    return str(area) "
    },
    {
        "number": 4253,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin.strip())\n    area = 3 * r ** 2\n    return str(area)"
    },
    {
        "number": 4253,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area = 3 * r**2\n    return str(area)"
    },
    {
        "number": 4253,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area = 3 * r**2\n    return str(area)"
    },
    {
        "number": 4253,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin.strip())\n    area = 3 * (r ** 2)\n    return str(area)"
    },
    {
        "number": 4254,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    sheep, wolves = map(int, stdin.split())\n    if wolves >= sheep:\n        return \"unsafe\"\n    else:\n        return \"safe\""
    },
    {
        "number": 4254,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    sheep, wolves = list(map(int, stdin.split()))\n    if sheep < wolves:\n        return \"safe\"\n    else:\n        return \"unsafe\""
    },
    {
        "number": 4254,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    sheep, wolves = map(int, stdin.split())\n\n    if wolves >= sheep:\n        return \"unsafe\"\n    else:\n        return \"safe\"\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4254,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num_sheep, num_wolves = map(int, stdin.split())\n\n    if num_wolves >= num_sheep:\n        return \"unsafe\"\n    else:\n        return \"safe\""
    },
    {
        "number": 4254,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    sheep, wolves = map(int, stdin.split())\n\n    if sheep >= wolves:\n        return \"unsafe\"\n    else:\n        return \"safe\""
    },
    {
        "number": 4254,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    sheep, wolves = map(int, stdin.split())\n    if sheep <= wolves:\n        return \"unsafe\"\n    return \"safe\"\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4254,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S, W = map(int, stdin.split())\n    if W >= S:\n        return \"unsafe\"\n    else:\n        return \"safe\""
    },
    {
        "number": 4254,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    sheep, wolves = map(int, stdin.split())\n\n    if wolves >= sheep:\n        return \"unsafe\"\n    else:\n        return \"safe\""
    },
    {
        "number": 4254,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    sheep, wolves = map(int, stdin.split())\n    if sheep >= wolves:\n        return \"unsafe\"\n    else:\n        return \"safe\""
    },
    {
        "number": 4254,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S, W = map(int, stdin.split())\n    if W >= S:\n        return \"unsafe\"\n    else:\n        return \"safe\""
    },
    {
        "number": 4255,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    s = (a + b + c) / 2\n    area = int((s * (s - a) * (s - b) * (s - c)) ** 0.5)\n    return str(area)\n\ninput_data = input()\noutput_data = solution(input_data)\nprint(output_data) "
    },
    {
        "number": 4255,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    s = (a + b + c) / 2\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    return str(int(area))"
    },
    {
        "number": 4255,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_list = list(map(int, stdin.split()))\n    a, b, c = input_list\n    s = (a + b + c) / 2\n    area = int(s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return str(int(area)) "
    },
    {
        "number": 4255,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    AB, BC, CA = map(int, stdin.split())\n    area = 0.5 * AB * BC\n    return str(area)"
    },
    {
        "number": 4255,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given the lengths of the three sides of a right triangle, find the area of the triangle.\n\n    Args:\n    stdin (str): The input string containing the side lengths in the format \"|AB| |BC| |CA|\".\n\n    Returns:\n    str: The area of the triangle, rounded to the nearest integer.\n    \"\"\"\n    AB, BC, CA = list(map(int, stdin.split()))\n    area = (AB * BC) / 2\n    return str(round(area))"
    },
    {
        "number": 4255,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    AB, BC, CA = map(int, stdin.split())\n    area = 0.5 * AB * BC\n    return str(area)"
    },
    {
        "number": 4255,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    s = (a + b + c) / 2\n    area = round(math.sqrt(s * (s - a) * (s - b) * (s - c)))\n    return str(area)\n\ndef"
    },
    {
        "number": 4255,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    s = (a + b + c) / 2\n    area = int(s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return str(int(area))\n\ninput_str = input()\noutput = solution(input_str)\nprint(output) "
    },
    {
        "number": 4255,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return str(int(area))"
    },
    {
        "number": 4255,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    AB, BC, CA = map(int, stdin.split())\n    s = (AB + BC + CA) / 2\n    area = (s * (s - AB) * (s - BC) * (s - CA)) ** 0.5\n    return str(int(area))"
    },
    {
        "number": 4256,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A > B:\n        return \"0\"\n    return str(min(B // A, C)) "
    },
    {
        "number": 4256,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    times = min(B // A, C)\n    return str(times)"
    },
    {
        "number": 4256,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return str(min(c, b // a)) "
    },
    {
        "number": 4256,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A == 0 or B == 0 or C == 0:\n        return \"0\"\n    if A * C > B:\n        return str(C)\n    else:\n        return str(B // A)\n\nstdin = input()\noutput = solution(stdin)\nprint(output) "
    },
    {
        "number": 4256,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A > B:\n        return \"0\"\n    return str(min(B // A, C)) "
    },
    {
        "number": 4256,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    return str(min(B // A, C))"
    },
    {
        "number": 4256,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    return max(0, min(C, B // A))\n\ndef"
    },
    {
        "number": 4256,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    count = 0\n    while b >= a and count < c:\n        count += 1\n        b -= a\n    return str(count)"
    },
    {
        "number": 4256,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A <= 0 or B < A or C < A:\n        raise ValueError(\"Invalid input\")\n    times = min(B // A, C)\n    return str(times)\n\ndef"
    },
    {
        "number": 4256,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if B < A:\n        return \"0\"\n    return str(min(B // A, C))"
    },
    {
        "number": 4257,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    result = a * b\n    return str(result)"
    },
    {
        "number": 4257,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A * B)\n\ndef"
    },
    {
        "number": 4257,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A * B)\n\ninput_str = input()\nresult = solution(input_str)\nprint(result) "
    },
    {
        "number": 4257,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    result = A * B\n    return str(result) "
    },
    {
        "number": 4257,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a * b)  # converting the result to string before returning. "
    },
    {
        "number": 4257,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    result = A * B\n    return str(result)\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4257,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A * B)"
    },
    {
        "number": 4257,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a * b)"
    },
    {
        "number": 4257,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split())\n    result = A * B\n    return str(result) "
    },
    {
        "number": 4257,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A * B)"
    },
    {
        "number": 4258,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n    \n    # Calculate the number of biscuits produced within T + 0.5 seconds after activation\n    total_biscuits = 0\n    for i in range(1, T // A + 2):\n        total_biscuits += B * i\n    \n    return str(total_biscuits)"
    },
    {
        "number": 4258,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n    total_biscuits = 0\n    for i in range(1, T + 1):\n        if i % A == 0:\n            total_biscuits += B\n    return str(total_biscuits)"
    },
    {
        "number": 4258,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n    if T + 0.5 <= A:\n        return str(B)\n    elif T + 0.5 <= 2*A:\n        return str(2*B)\n    elif T + 0.5 <= 3*A:\n        return str(3*B)\n    else:\n        quotient, remainder = divmod(T + 0.5, A)\n        return str(int(B * (quotient + (remainder > 0) + 2*A*quotient)))"
    },
    {
        "number": 4258,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n    \n    t = 0\n    biscuits = 0\n    while t <= T + 0.5:\n        biscuits += B\n        t += A * ((t // A) + 1)\n    \n    return str(biscuits)"
    },
    {
        "number": 4258,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n    seconds = 0\n    biscuits_produced = 0\n    \n    while seconds <= T + 0.5:\n        if seconds % A == 0:\n            biscuits_produced += B\n        seconds += 1\n        \n    return str(biscuits_produced)"
    },
    {
        "number": 4258,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n    total_biscuits = 0\n    time = 0\n    \n    while time <= T + 0.5:\n        biscuits = B * (time // A)\n        total_biscuits += biscuits\n        time += biscuits / B\n        \n    return str(total_biscuits)"
    },
    {
        "number": 4258,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n    return str(B + (T + 0.5) // A * B)"
    },
    {
        "number": 4258,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n    return str(B * ((T + 0.5) // A))"
    },
    {
        "number": 4258,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n    total_biscuits = B\n    for i in range(2, T // A + 3):\n        total_biscuits += B * i\n    return str(total_biscuits)"
    },
    {
        "number": 4258,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n\n    # Find the number of biscuits produced within the first T seconds after activation\n    count = 0\n    for i in range(1, T + 1):\n        count += B * (i // A)\n\n    # Add biscuits produced within the remaining 0.5 seconds after activation\n    count += B\n\n    return str(count)"
    },
    {
        "number": 4259,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    inputs = list(map(int, stdin.split()))\n    k, a, b = inputs\n    \n    # Check if a multiple of k is within the range [a, b]\n    for i in range(a, b+1):\n        if i % k == 0:\n            return \"OK\"\n    \n    return \"NG\""
    },
    {
        "number": 4259,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    K, A, B = map(int, stdin.split())\n    if B % K == 0:\n        return \"OK\"\n    for i in range(A, B + 1, K):\n        if i % K == 0:\n            return \"OK\"\n    return \"NG\""
    },
    {
        "number": 4259,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    K, A, B = map(int, stdin.split())\n    for carry_distance in range(A, B+1, K):\n        if A <= carry_distance <= B:\n            return \"OK\"\n    return \"NG\""
    },
    {
        "number": 4259,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    K, A, B = map(int, stdin.split())\n    \n    if A % K == 0:\n        if A <= B:\n            return \"OK\"\n    for i in range(A, B+1, K):\n        if i % K == 0:\n            return \"OK\"\n    return \"NG\""
    },
    {
        "number": 4259,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    K, A, B = map(int, stdin.split())\n    for i in range(A, B+1):\n        if i % K == 0:\n            return \"OK\"\n    return \"NG\""
    },
    {
        "number": 4259,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = map(int, stdin.split())\n    carry_distance = k\n\n    while carry_distance <= b:\n        if carry_distance >= a:\n            return \"OK\"\n        carry_distance += k\n\n    return \"NG\""
    },
    {
        "number": 4259,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    K, A, B = map(int, stdin.split())\n    \n    # Check if the objective is possible\n    for multiple in range(A, B+1, K):\n        if multiple >= A and multiple <= B:\n            return \"OK\"\n    \n    return \"NG\""
    },
    {
        "number": 4259,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    K, A, B = map(int, stdin.split())\n    multiples = [i for i in range(A, B+1) if i % K == 0]\n    if multiples:\n        return \"OK\"\n    else:\n        return \"NG\""
    },
    {
        "number": 4259,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = map(int, stdin.split())\n    for i in range(a, b+1):\n        if i % k == 0:\n            return \"OK\"\n    return \"NG\""
    },
    {
        "number": 4259,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    K, A, B = stdin.split()\n    K, A, B = int(K), int(A), int(B)\n\n    for multiple in range(A, B+1, K):\n        if multiple >= A and multiple <= B:\n            return \"OK\"\n    return \"NG\""
    },
    {
        "number": 4260,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T, X = map(int, stdin.split())\n    t = T / X\n    return str(round(t, 3))"
    },
    {
        "number": 4260,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    T, X = map(int, stdin.split())\n    return f\"{T * (1/X):.3f}\""
    },
    {
        "number": 4260,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    T, X = map(int, stdin.split())\n    hours_in_A = T / X\n    return f\"{hours_in_A:.3f}\""
    },
    {
        "number": 4260,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    T, X = map(int, stdin.split())\n    total_hours_in_A = T / X\n    return f\"{total_hours_in_A:.3f}\""
    },
    {
        "number": 4260,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    T, X = map(int, stdin.split())\n    total_time_world_A = T * X\n    total_time_world_B = T\n    hours_passed_world_A = T + (total_time_world_A - total_time_world_B)\n    return f\"{hours_passed_world_A:.3f}\"\n\ndef"
    },
    {
        "number": 4260,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    T, X = map(int, stdin.split())\n    time_in_A = T / X\n    return f\"{time_in_A:.3f}\""
    },
    {
        "number": 4260,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    T, X = map(int, stdin.split())\n    hours_A = T * X\n    hours_B = T\n    return f\"{hours_A:.3f}\""
    },
    {
        "number": 4260,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    T, X = map(int, stdin.split())\n    hours_in_A = T / X\n    return f\"{hours_in_A:.3f}\""
    },
    {
        "number": 4260,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    T, X = map(int, stdin.split())\n    t_A = T / (X + 1)\n    return f\"{t_A:.3f}\""
    },
    {
        "number": 4260,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    T, X = map(int, stdin.split())\n    t = T / X\n    return f\"{t:.3f}\""
    },
    {
        "number": 4261,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A < B:\n        raise ValueError(\"Bottle 1 cannot hold more than Bottle 2.\")\n    amount_to_transfer = min(B - A, C)\n    water_in_bottle_2 = C - amount_to_transfer\n    return str(water_in_bottle_2) "
    },
    {
        "number": 4261,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    transferable_water = min(A - B, C)\n    new_B = B + transferable_water\n    new_C = C - transferable_water\n    return str(new_C)"
    },
    {
        "number": 4261,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if C > A:\n        return \"Error: Bottle 2 cannot hold more water than Bottle 1.\"\n    else:\n        return str(A - B + C)"
    },
    {
        "number": 4261,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    transfer_amount = min(B, A - B)\n    return str(C - transfer_amount)"
    },
    {
        "number": 4261,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    transferable_water = min(A - B, C)\n    return str(C - transferable_water)"
    },
    {
        "number": 4261,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    transfer_amount = min(B, A - B)  # Transfer as much as possible\n    Bottle2_water = C - transfer_amount\n    return str(Bottle2_water)"
    },
    {
        "number": 4261,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n\n    transfer_amount = min(B, A - B)\n    remaining_amount = C - transfer_amount\n\n    return str(remaining_amount)"
    },
    {
        "number": 4261,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    amount_transferred = min(B, A - B)\n    amount_remaining = C - amount_transferred\n    return str(amount_remaining)\n\ndef"
    },
    {
        "number": 4261,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.strip().split())\n    max_transfer = min(A - B, C)\n    return str(C - max_transfer)"
    },
    {
        "number": 4261,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    amount_to_transfer = min(B, A - C)\n    C -= amount_to_transfer\n    return str(C)\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4262,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    P = list(map(int, lines[1].split()))\n    Q = list(map(int, lines[2].split()))\n\n    # Find the lexicographically smallest permutations P and Q\n    def find_lexicographically_smallest(P: list[int], Q: list[int], N: int) -> tuple[list[int], list[int], int]:\n        min_P = list(P)\n        min_Q = list(Q)\n        min_P_index = 0\n        min_Q_index = 0\n\n        for i in range(N):\n            for j in range(i, N):\n                if P[i:j+1] < P[min_P_index:min_P_index+j+1]:\n                    min_P_index = i\n                    min_P = P[i:j+1]\n                if Q[i:j+1] < Q[min_Q_index:min_Q_index+j+1]:\n                    min_Q_index = i\n                    min_Q = Q[i:j+1]\n\n        return min_P, min_Q, min_P_index\n\n    min_P, min_Q, min_P_index = find_lexicographically_smallest(P, Q, N)\n\n    # Find the index of the lexicographically smallest permutation in the list of permutations of size N\n    def find_index(min_P: list[int], N: int) -> int:\n        index = 0\n        for i in range(N):\n            for j in range(i, N):\n                if min_P == list(range(1, N+1))[i:j+1]:\n                    index = i\n                    break\n            if index != 0:\n                break\n\n        return index\n\n    a = find_index(min_P, N)\n    b = find_index(min_Q, N)\n\n    return str(abs(a - b))"
    },
    {
        "number": 4262,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    P = list(map(int, stdin.split('\\n')[1].split()))\n    Q = list(map(int, stdin.split('\\n')[2].split()))\n    \n    def find_index(perm: list, n: int) -> int:\n        count = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if perm[i] > perm[j]:\n                    count += 1\n        return count + 1\n\n    a = find_index(P, N)\n    b = find_index(Q, N)\n    return str(abs(a - b))"
    },
    {
        "number": 4262,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    p = tuple(map(int, lines[1].split()))\n    q = tuple(map(int, lines[2].split()))\n\n    a = 1\n    b = 1\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if p[i] < p[j]:\n                a += 1\n            if q[i] < q[j]:\n                b += 1\n\n    return abs(a - b)\n\ndef"
    },
    {
        "number": 4262,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N = int(lines[0])\n    P = [int(x) for x in lines[1].split()]\n    Q = [int(x) for x in lines[2].split()]\n\n    def lexicographically_smallest(permutation: List[int]) -> int:\n        return permutation.index(min(permutation))\n\n    a = lexicographically_smallest(P)\n    b = lexicographically_smallest(Q)\n\n    return abs(a - b)"
    },
    {
        "number": 4262,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def get_permutations(n):\n        if n == 1:\n            return [list(range(1, n + 1))]\n        result = []\n        for i in range(n):\n            for perm in get_permutations(n - 1):\n                result.append(perm[:i] + [n] + perm[i:])\n        return result\n\n    def lexicographically_smallest(permutations, index):\n        return min(permutations, key=lambda x: (x[index], x[:index], x[index + 1:]))\n\n    def lexicographically_largest(permutations, index):\n        return max(permutations, key=lambda x: (x[index], x[:index], x[index + 1:]))\n\n    n, p, q = stdin.splitlines()\n    n = int(n)\n    p = list(map(int, p.split()))\n    q = list(map(int, q.split()))\n\n    permutations = get_permutations(n)\n\n    a = permutations.index(p)\n    b = permutations.index(q)\n\n    if n % 2 == 0:\n        if a > b:\n            a, b = b, a\n        return str(b - a)\n    else:\n        if a > b:\n            return str(n - a + b)\n        else:\n            return str(b - a)"
    },
    {
        "number": 4262,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = stdin.split()\n    n = int(n)\n    p = list(map(int, p))\n    q = list(map(int, q))\n\n    def lexicographically_smallest(perm: list[int]) -> int:\n        count = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if perm[i] < perm[j]:\n                    count += 1\n        return count + 1\n\n    a = lexicographically_smallest(p)\n    b = lexicographically_smallest(q)\n\n    return str(abs(a - b))"
    },
    {
        "number": 4262,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    P = tuple(map(int, lines[1].split()))\n    Q = tuple(map(int, lines[2].split()))\n\n    P_index = 0\n    Q_index = 0\n\n    for i in range(1, N+1):\n        for j in range(i+1, N+1):\n            P_perm = P[i-1] < P[j-1]\n            Q_perm = Q[i-1] < Q[j-1]\n\n            if P_perm and not Q_perm:\n                P_index += 1\n            elif Q_perm and not P_perm:\n                Q_index += 1\n\n    return abs(P_index - Q_index)"
    },
    {
        "number": 4262,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, P, Q = stdin.split('\\n')\n    N = int(N)\n    P = [int(x) for x in P.split()]\n    Q = [int(x) for x in Q.split()]\n\n    def is_lexicographically_smaller(A, B):\n        for i in range(N):\n            if A[i] < B[i]:\n                return True\n            elif A[i] > B[i]:\n                return False\n        return False\n\n    a = 1\n    b = 1\n    for i in range(1, N):\n        if is_lexicographically_smaller(P, Q):\n            b += 1\n        else:\n            break\n        P.append(P.pop(0))\n\n    for i in range(1, N):\n        if is_lexicographically_smaller(Q, P):\n            a += 1\n        else:\n            break\n        Q.append(Q.pop(0))\n\n    return str(abs(a - b))"
    },
    {
        "number": 4262,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    import itertools\n    \n    def is_lexicographically_smaller(a: str, b: str) -> bool:\n        i = 0\n        while i < len(a) and i < len(b):\n            if a[i] != b[i]:\n                return a[i] < b[i]\n            i += 1\n        return len(a) < len(b)\n\n    def find_lexicographically_smallest_permutation(n: int) -> str:\n        return ''.join(str(i) for i in range(1, n+1))\n\n    def find_kth_lexicographically_smallest_permutation(n: int, k: int) -> str:\n        k -= 1\n        permutation = list(range(1, n+1))\n        for _ in range(k):\n            next_digit = 0\n            for i in range(n-1, 0, -1):\n                if permutation[i] > permutation[i-1]:\n                    next_digit = permutation[i-1]\n                    break\n            for j in range(i, n):\n                if permutation[j] > next_digit:\n                    permutation[j], permutation[i-1] = permutation[i-1], permutation[j]\n                    break\n        return ''.join(str(i) for i in permutation)\n\n    n, P, Q = stdin.split()\n    n = int(n)\n\n    P_lexicographically_smallest = find_lexicographically_smallest_permutation(n)\n    P_k = 1\n    while is_lexicographically_smaller(P, P_lexicographically_smallest):\n        P_k += 1\n        P_lexicographically_smallest = find_kth_lexicographically_smallest_permutation(n, P_k)\n\n    Q_lexicographically_smallest = find_lexicographically_smallest_permutation(n)\n    Q_k = 1\n    while is_lexicographically_smaller(Q, Q_lexicographically_smallest):\n        Q_k += 1\n        Q_lexicographically_smallest = find_kth_lexicographically_smallest_permutation(n, Q_k)\n\n    return abs(P_k - Q_k)\n"
    },
    {
        "number": 4262,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, P, Q = stdin.split()\n    N = int(N)\n    P = [int(x) for x in P.split()]\n    Q = [int(x) for x in Q.split()]\n\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr\n        mid = len(arr) // 2\n        left = merge_sort(arr[:mid])\n        right = merge_sort(arr[mid:])\n        return merge(left, right)\n\n    def merge(left, right):\n        result = []\n        i = 0\n        j = 0\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n        result += left[i:]\n        result += right[j:]\n        return result\n\n    a = merge_sort(P)\n    b = merge_sort(Q)\n\n    return str(abs(a.index(P) - b.index(Q)))"
    },
    {
        "number": 4263,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    max_length = 0\n\n    for i in range(len(S)):\n        for j in range(i + 1, len(S) + 1):\n            substring = S[i:j]\n            if all(c in 'ACGT' for c in substring):\n                max_length = max(max_length, len(substring))\n\n    return max_length"
    },
    {
        "number": 4263,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    max_substring = \"\"\n    for i in range(len(stdin)):\n        for j in range(i, len(stdin)):\n            substring = stdin[i:j+1]\n            if all(char in \"ACGT\" for char in substring) and len(substring) > len(max_substring):\n                max_substring = substring\n    return len(max_substring)"
    },
    {
        "number": 4263,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    max_length = 0\n    for i in range(len(S)):\n        for j in range(i+1, len(S)+1):\n            substring = S[i:j]\n            if set(substring).issubset(\"ACGT\") and len(substring) > max_length:\n                max_length = len(substring)\n    return str(max_length)"
    },
    {
        "number": 4263,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    max_len = 0\n    current_len = 0\n\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substring = s[i:j]\n            if set(substring) <= {\"A\", \"C\", \"G\", \"T\"}:\n                current_len = len(substring)\n            else:\n                current_len = 0\n\n            if current_len > max_len:\n                max_len = current_len\n\n    return str(max_len)"
    },
    {
        "number": 4263,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    import re\n\n    max_length = 0\n    for match in re.finditer(r'(?=([ACGT]+))', stdin):\n        substring = match.group(1)\n        if set(substring) == {'A', 'C', 'G', 'T'} and len(substring) > max_length:\n            max_length = len(substring)\n\n    return max_length\n"
    },
    {
        "number": 4263,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    max_len = 0\n\n    for i in range(len(S)):\n        for j in range(i + 1, len(S) + 1):\n            substring = S[i:j]\n            if set(substring).issubset(\"ACGT\"):\n                max_len = max(max_len, len(substring))\n\n    return max_len"
    },
    {
        "number": 4263,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    max_length = 0\n    s = stdin.strip()\n\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substring = s[i:j]\n            if set(substring).issubset({'A', 'C', 'G', 'T'}):\n                max_length = max(max_length, len(substring))\n\n    return max_length"
    },
    {
        "number": 4263,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    max_len = 0\n    for i in range(len(stdin)):\n        for j in range(i, len(stdin)):\n            substring = stdin[i:j+1]\n            if set(substring).issubset(\"ACGT\"):\n                max_len = max(max_len, len(substring))\n    return max_len"
    },
    {
        "number": 4263,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    max_length = 0\n    for i in range(len(stdin)):\n        for j in range(i+1, len(stdin)+1):\n            substring = stdin[i:j]\n            if all(c in \"ACGT\" for c in substring) and len(substring) > max_length:\n                max_length = len(substring)\n    return max_length"
    },
    {
        "number": 4263,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    max_length = 0\n    for i in range(len(S)):\n        for j in range(i, len(S)):\n            substring = S[i:j+1]\n            if set(substring).issubset({'A', 'C', 'G', 'T'}):\n                max_length = max(max_length, len(substring))\n    return str(max_length)"
    },
    {
        "number": 4264,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for i in range(1, N + 1):\n        if len(str(i)) % 2 != 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4264,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n+1):\n        if len(str(i)) % 2 == 1:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4264,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for i in range(1, N+1):\n        if len(str(i)) % 2 == 1:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4264,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n\n    for i in range(1, n + 1):\n        if len(str(i)) % 2 != 0:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4264,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for i in range(1, N + 1):\n        if len(str(i)) % 2 != 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4264,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n\n    for i in range(1, n + 1):\n        if len(str(i)) % 2 != 0:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4264,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n\n    count = 0\n    for i in range(1, N+1):\n        if len(str(i)) % 2 != 0:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4264,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    count = 0\n    for i in range(1, N+1):\n        if len(str(i)) % 2 != 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4264,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    count = 0\n\n    for i in range(1, N + 1):\n        if len(str(i)) % 2 == 1:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4264,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 0\n    \n    for i in range(1, n+1):\n        if len(str(i)) % 2 != 0:\n            count += 1\n    \n    return str(count)"
    },
    {
        "number": 4265,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    min_ops = 0\n\n    for i in range(len(S)):\n        if S[i] != T[i]:\n            min_ops += 1\n\n    return min_ops\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4265,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    s_list = list(s)\n    t_list = list(t)\n    count = 0\n\n    for i in range(len(s)):\n        if s_list[i] != t_list[i]:\n            s_list[i] = t_list[i]\n            count += 1\n\n    return count"
    },
    {
        "number": 4265,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split('\\n')\n    min_ops = len(S)\n    for i in range(len(S)):\n        if S[i] != T[i]:\n            min_ops = min(min_ops, len(S) - i)\n            break\n    return min_ops"
    },
    {
        "number": 4265,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    min_ops = 0\n    \n    for i in range(len(s)):\n        if s[i] != t[i]:\n            min_ops += 1\n            if s[i] != t[i+1]:\n                min_ops += 1\n    \n    return min_ops"
    },
    {
        "number": 4265,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    min_operations = 0\n    for i in range(len(S)):\n        if S[i] != T[i]:\n            min_operations += 1\n    return min_operations"
    },
    {
        "number": 4265,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    operations = 0\n    for i in range(len(s)):\n        if s[i] != t[i]:\n            operations += 1\n    return operations"
    },
    {
        "number": 4265,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(\"\\n\")\n    n = len(s)\n    dp = [[0] * 26 for _ in range(n+1)]\n    for i in range(n-1, -1, -1):\n        for j in range(26):\n            dp[i][j] = dp[i+1][j]\n            if s[i] == chr(ord('a') + j):\n                dp[i][j] = min(dp[i][j], dp[i+1][j]+1)\n    min_ops = float('inf')\n    for j in range(26):\n        if t[0] == chr(ord('a') + j):\n            min_ops = min(min_ops, dp[0][j])\n    return min_ops"
    },
    {
        "number": 4265,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    n = len(s)\n    dp = [[0] * 26 for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(26):\n            dp[i][j] = dp[i - 1][j] + 1\n            if s[i - 1] != chr(ord('a') + j):\n                dp[i][j] = min(dp[i][j], dp[i - 1][s.find(chr(ord('a') + j))])\n\n    ans = min(dp[n])\n    return ans\n"
    },
    {
        "number": 4265,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    operations = 0\n\n    for i in range(len(S)):\n        if S[i] != T[i]:\n            operations += 1\n\n    return operations"
    },
    {
        "number": 4265,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split(\"\\n\")\n\n    operations = 0\n    for i in range(len(S)):\n        if S[i] != T[i]:\n            operations += 1\n\n    return operations"
    },
    {
        "number": 4266,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n\n    if K == 1:\n        return str(X)\n\n    left = max(1, X - K // 2)\n    right = min(1000000, X + K // 2)\n\n    return \" \".join(map(str, range(left, right + 1)))"
    },
    {
        "number": 4266,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n    min_coord = X - K + 1\n    max_coord = X\n    return ' '.join(map(str, range(min_coord, max_coord + 1)))"
    },
    {
        "number": 4266,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n    if X - K < -1000000 or X + K > 1000000:\n        return \"\"\n    start = max(X - K, -1000000)\n    end = min(X + K, 1000000)\n    return \" \".join(map(str, range(start, end + 1)))"
    },
    {
        "number": 4266,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n    min_coord = max(1, X - K + 1)\n    max_coord = min(X, 1000000 - K + 1)\n    return ' '.join(map(str, range(min_coord, max_coord + 1)))"
    },
    {
        "number": 4266,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n    \n    lower_bound = max(1, X - K + 1)\n    upper_bound = min(1000000, X + K - 1)\n    \n    return \" \".join(map(str, range(lower_bound, upper_bound + 1)))"
    },
    {
        "number": 4266,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n    min_coord = max(X - K + 1, 0)\n    max_coord = min(X, 1000000)\n    return \" \".join(map(str, range(min_coord, max_coord + 1)))"
    },
    {
        "number": 4266,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n\n    left_border = max(-1000000, X - K + 1)\n    right_border = min(1000000, X)\n\n    result = []\n    for i in range(left_border, right_border + 1):\n        result.append(str(i))\n\n    return \" \".join(result)"
    },
    {
        "number": 4266,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n    left, right = max(X - K // 2, -1000000), min(X + K // 2, 1000000)\n    return ' '.join(map(str, range(left, right + 1)))"
    },
    {
        "number": 4266,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n\n    if X < 0 or X > 1000000:\n        return \"\"\n\n    if K == 1:\n        return str(X)\n\n    start = X - (K - 1) // 2\n    end = X + (K - 1) // 2\n\n    if start < 0:\n        start = 0\n\n    if end > 1000000:\n        end = 1000000\n\n    return \" \".join(map(str, range(start, end + 1)))"
    },
    {
        "number": 4266,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n    result = []\n    for i in range(max(0, X - K), min(X + K, 100) + 1):\n        if i != X:\n            result.append(i)\n    return ' '.join(map(str, result))"
    },
    {
        "number": 4267,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    temperature = int(stdin)\n    if temperature >= 30:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4267,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    temperature = int(stdin.strip())\n    if temperature >= 30:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4267,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    temperature = int(stdin)\n    if temperature >= 30:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4267,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    temperature = int(stdin)\n    if temperature >= 30:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4267,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    temp = int(stdin)\n    if temp >= 30:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ndef"
    },
    {
        "number": 4267,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip())\n    if X <= 29:\n        return \"No\"\n    else:\n        return \"Yes\"\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4267,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x >= 30:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4267,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    if X >= 30:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4267,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    temperature = int(stdin)\n    if temperature >= 30:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4267,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    temperature = int(stdin)\n    if temperature > 30:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4268,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N, D = map(int, lines[0].split())\n    points = [tuple(map(int, line.split())) for line in lines[1:]]\n\n    def distance(p1: tuple, p2: tuple) -> float:\n        return ((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2) ** 0.5\n\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if int(distance(points[i], points[j])) == distance(points[i], points[j]):\n                count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4268,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N, D = map(int, lines[0].split())\n    points = []\n    for i in range(1, N+1):\n        x = list(map(int, lines[i].split()))\n        points.append(x)\n\n    def distance(a, b):\n        return sum((a[i] - b[i]) ** 2 for i in range(D)) ** 0.5\n\n    count = 0\n    for i in range(N-1):\n        for j in range(i+1, N):\n            if int(distance(points[i], points[j])) == distance(points[i], points[j]):\n                count += 1\n\n    return str(count)"
    },
    {
        "number": 4268,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def distance(point1, point2) -> int:\n        return int(sum((x1 - x2) ** 2 for x1, x2 in zip(point1, point2))) ** 0.5)\n\n    def is_integer_distance(point1, point2) -> bool:\n        return distance(point1, point2) % 1 == 0\n\n    N, D = map(int, stdin.split()[0:2])\n    points = [tuple(map(int, line.split())) for line in stdin.split()[2:]]\n\n    count = 0\n    for i in range(N - 1):\n        for j in range(i + 1, N):\n            if is_integer_distance(points[i], points[j]):\n                count += 1\n\n    return str(count)\n\ninput_str = \"3 2\\n1 2\\n5 5\\n-2 8\"\nprint(solution(input_str)) "
    },
    {
        "number": 4268,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n, d = map(int, lines[0].split())\n    points = [tuple(map(int, line.split())) for line in lines[1:]]\n    \n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            distance = sum((points[i][k] - points[j][k])**2 for k in range(d)) ** 0.5\n            if distance.is_integer():\n                count += 1\n    \n    return str(count)"
    },
    {
        "number": 4268,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split()[0:2])\n    points = []\n    for i in range(N):\n        points.append(list(map(int, stdin.split()[2+i*D:2+(i+1)*D])))\n    \n    count = 0\n    for i in range(N-1):\n        for j in range(i+1, N):\n            distances = [(points[i][k] - points[j][k]) ** 2 for k in range(D)]\n            distance = sum(distances)\n            if distance.is_integer():\n                count += 1\n    \n    return str(count)"
    },
    {
        "number": 4268,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def distance(point1, point2):\n        return int(math.sqrt(sum([(point1[i] - point2[i]) ** 2 for i in range(len(point1))])))\n\n    def has_integer_distance(point1, point2):\n        return distance(point1, point2) == abs(distance(point1, point2))\n\n    points = []\n    lines = stdin.split('\\n')\n    N, D = list(map(int, lines[0].split()))\n\n    for i in range(1, N + 1):\n        point = list(map(int, lines[i].split()))\n        points.append(point)\n\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if has_integer_distance(points[i], points[j]):\n                count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4268,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def distance(point1, point2):\n        return int(math.sqrt(sum((p1 - p2) ** 2 for p1, p2 in zip(point1, point2))))\n\n    def is_integer_distance(points, i, j):\n        return distance(*points[i - 1:i + 1]) % 1 == 0 and distance(*points[j - 1:j + 1]) % 1 == 0\n\n    lines = stdin.splitlines()\n    N, D = map(int, lines[0].split())\n    points = [tuple(map(int, line.split())) for line in lines[1:]]\n\n    integer_distance_count = 0\n    for i in range(1, N):\n        for j in range(i + 1, N + 1):\n            if is_integer_distance(points, i, j):\n                integer_distance_count += 1\n\n    return str(integer_distance_count)\n"
    },
    {
        "number": 4268,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def distance(point1, point2):\n        return int(math.sqrt(sum([(point1[i] - point2[i])**2 for i in range(D)])))\n\n    input_list = stdin.split(\"\\n\")\n    N, D = map(int, input_list[0].split())\n    points = [tuple(map(int, input_list[i+1].split())) for i in range(N)]\n\n    count = 0\n    for i in range(N-1):\n        for j in range(i+1, N):\n            if distance(points[i], points[j]) % 1 == 0:\n                count += 1\n\n    return str(count)"
    },
    {
        "number": 4268,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n, d = map(int, lines[0].split())\n    points = []\n    for i in range(1, n + 1):\n        points.append(list(map(int, lines[i].split())))\n\n    def distance(p1, p2):\n        return ((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2) ** 0.5\n\n    def is_integer_distance(p1, p2):\n        return int(distance(p1, p2)) == distance(p1, p2)\n\n    count = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if is_integer_distance(points[i], points[j]):\n                count += 1\n\n    return str(count)\n\nstdin = \"3 2\\n1 2\\n5 5\\n-2 8\"\nprint(solution(stdin)) "
    },
    {
        "number": 4268,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def distance(x, y):\n        return int((x[0] - y[0])**2 + (x[1] - y[1])**2)**0.5\n\n    def is_int_distance(x, y):\n        return distance(x, y) == int(distance(x, y))\n\n    N, D = map(int, stdin.split()[0:2])\n    points = [tuple(map(int, line.split())) for line in stdin.split()[2:]]\n\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if is_int_distance(points[i], points[j]):\n                count += 1\n\n    return str(count)"
    },
    {
        "number": 4269,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n        return \"Bad\"\n    else:\n        return \"Good\""
    },
    {
        "number": 4269,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    security_code = stdin.strip()\n    for i in range(len(security_code) - 1):\n        if security_code[i] == security_code[i + 1]:\n            return \"Bad\"\n    return \"Good\""
    },
    {
        "number": 4269,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    security_code = stdin.strip()\n    if len(security_code) != 4:\n        raise ValueError(\"Security code should be a 4-digit number.\")\n\n    for i in range(len(security_code) - 1):\n        if security_code[i] == security_code[i + 1]:\n            return \"Bad\"\n\n    return \"Good\""
    },
    {
        "number": 4269,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            return \"Bad\"\n    return \"Good\""
    },
    {
        "number": 4269,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return \"Bad\"\n    return \"Good\""
    },
    {
        "number": 4269,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    if S[0] == S[1] or S[1] == S[2] or S[2] == S[3]:\n        return \"Bad\"\n    else:\n        return \"Good\""
    },
    {
        "number": 4269,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    security_code = stdin\n    for i in range(2):\n        if security_code[i] == security_code[i+1]:\n            return \"Bad\"\n    return \"Good\""
    },
    {
        "number": 4269,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    S = list(stdin)\n    for i in range(len(S) - 1):\n        if S[i] == S[i+1]:\n            return \"Bad\"\n    return \"Good\""
    },
    {
        "number": 4269,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s) != 4:\n        return \"Bad\"\n    for i in range(2):\n        if s[i] == s[i + 1]:\n            return \"Bad\"\n    return \"Good\"\n\ninput_string = input()\nprint(solution(input_string)) "
    },
    {
        "number": 4269,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n        return \"Bad\"\n    return \"Good\"\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4270,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    ingredients = list(map(int, stdin.split(\"\\n\")[1].split()))\n    \n    for i in range(N-1):\n        new_ingredient = (ingredients[i] + ingredients[i+1]) / 2\n        ingredients.pop(i)\n        ingredients.pop(i)\n        ingredients.insert(i, new_ingredient)\n    \n    return str(ingredients[0])\n\ndef"
    },
    {
        "number": 4270,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, *values = map(int, stdin.split())\n    assert 2 <= N <= 50\n    assert all(1 <= v <= 1000 for v in values)\n\n    def f(x, y):\n        return (x + y) / 2\n\n    value = max(values)\n    while len(values) > 1:\n        new_values = []\n        for i in range(0, len(values), 2):\n            if i == len(values) - 1:\n                new_values.append(f(values[i], value))\n            else:\n                new_values.extend([f(values[i], values[i + 1]), f(values[i + 1], values[i])])\n        value = max(new_values)\n        values = new_values\n\n    return f\"{value:.5f}\""
    },
    {
        "number": 4270,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, *ingredients = map(int, stdin.split())\n    \n    def mix(x, y):\n        return (x + y) / 2\n    \n    while len(ingredients) > 1:\n        new_ingredients = [mix(ingredients[i], ingredients[i+1]) for i in range(0, len(ingredients)-1, 2)]\n        if len(new_ingredients) % 2 != 0:\n            new_ingredients.append(mix(new_ingredients[-1], ingredients[-1]))\n        ingredients = new_ingredients\n    \n    return f\"{ingredients[0]:.5f}\"\n\ndef"
    },
    {
        "number": 4270,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, values = stdin.split('\\n')\n    N = int(N)\n    values = list(map(int, values.split()))\n\n    while len(values) > 1:\n        new_values = []\n        for i in range(0, len(values), 2):\n            if i + 1 < len(values):\n                new_values.append((values[i] + values[i + 1]) / 2)\n            else:\n                new_values.append(values[i])\n        values = new_values\n\n    return str(values[0])"
    },
    {
        "number": 4270,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, ingredients = stdin.split(\"\\n\")\n    N = int(N)\n    ingredients = [int(x) for x in ingredients.split()]\n    \n    for _ in range(N-1):\n        new_ingredients = []\n        while len(ingredients) > 1:\n            x, y = ingredients.pop(0), ingredients.pop(0)\n            new_ingredient = (x + y) / 2\n            new_ingredients.append(new_ingredient)\n        ingredients = new_ingredients\n    \n    return str(ingredients[0])\n\ndef"
    },
    {
        "number": 4270,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, *ingredients = map(int, stdin.split())\n    \n    if N < 2 or N > 50:\n        raise ValueError(\"N must be between 2 and 50\")\n    \n    if len(ingredients) != N:\n        raise ValueError(\"Number of ingredients does not match N\")\n    \n    for ingredient in ingredients:\n        if ingredient < 1 or ingredient > 1000:\n            raise ValueError(\"Ingredient value must be between 1 and 1000\")\n    \n    for i in range(N-1):\n        new_ingredient = (ingredients[i] + ingredients[i+1]) / 2\n        ingredients[i] = new_ingredient\n        ingredients.pop(i+1)\n    \n    return f\"{ingredients[0]:.5f}\""
    },
    {
        "number": 4270,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    ingredients = [float(x) for x in stdin.split()[1:]]\n\n    while len(ingredients) > 1:\n        new_ingredients = []\n        for i in range(0, len(ingredients) - 1, 2):\n            new_ingredient = (ingredients[i] + ingredients[i + 1]) / 2\n            new_ingredients.append(new_ingredient)\n        if len(ingredients) % 2 == 1:\n            new_ingredients.append(ingredients[-1])\n        ingredients = new_ingredients\n\n    return str(ingredients[0])"
    },
    {
        "number": 4270,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    N, *values = map(int, stdin.split())\n    \n    # Sort the values in decreasing order\n    values.sort(reverse=True)\n    \n    # Calculate the maximum value\n    max_value = 0\n    for i in range(len(values)):\n        max_value += values[i]\n        if i != len(values) - 1:\n            max_value /= 2\n    \n    # Return the result\n    return f\"{max_value:.5f}\""
    },
    {
        "number": 4270,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, *ingredients = map(int, stdin.split())\n    for i in range(N-1):\n        ingredients.append((ingredients.pop(0) + ingredients.pop(0)) / 2)\n    return str(ingredients[0])"
    },
    {
        "number": 4270,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *ingredients = map(float, stdin.split())\n    values = ingredients[:n]\n\n    for _ in range(n - 1):\n        new_values = []\n        for i in range(0, len(values), 2):\n            if i + 1 == len(values):\n                new_values.append((values[i] + values[-1]) / 2)\n            else:\n                new_values.append((values[i] + values[i + 1]) / 2)\n        values = new_values\n\n    return f\"{values[0]:.5f}\""
    },
    {
        "number": 4271,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    A = list(map(int, lines[1].split()))\n    B = list(map(int, lines[2].split()))\n    C = list(map(int, lines[3].split()))\n\n    satisfaction = 0\n    for i in range(n):\n        satisfaction += B[i]\n        if i < n - 1:\n            satisfaction += C[i]\n\n    return str(satisfaction)\n\nstdin = \"3\\n3 1 2\\n2 5 4\\n3 6\"\nprint(solution(stdin)) "
    },
    {
        "number": 4271,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    A = [int(x) for x in lines[1].split()]\n    B = [int(x) for x in lines[2].split()]\n    C = [int(x) for x in lines[3].split()]\n\n    satisfaction_points = 0\n    for i in range(N):\n        satisfaction_points += B[i]\n        if i < N - 1:\n            satisfaction_points += C[i]\n\n    return str(satisfaction_points)"
    },
    {
        "number": 4271,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    A = list(map(int, lines[1].split()))\n    B = list(map(int, lines[2].split()))\n    C = list(map(int, lines[3].split()))\n    \n    satisfaction = 0\n    for i in range(N):\n        satisfaction += B[i]\n        if i < N - 1:\n            satisfaction += C[i]\n    \n    return str(satisfaction)"
    },
    {
        "number": 4271,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    A = list(map(int, lines[1].split()))\n    B = list(map(int, lines[2].split()))\n    C = list(map(int, lines[3].split()))\n    \n    satisfaction = 0\n    for i in range(N):\n        satisfaction += B[i]\n        if i < N - 1:\n            satisfaction += C[i]\n    \n    return str(satisfaction)"
    },
    {
        "number": 4271,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    A = list(map(int, stdin.split('\\n')[1].split()))\n    B = list(map(int, stdin.split('\\n')[2].split()))\n    C = list(map(int, stdin.split('\\n')[3].split()))\n\n    satisfaction_points = 0\n    for i in range(N):\n        satisfaction_points += B[i]\n        if i < N - 1:\n            satisfaction_points += C[i]\n\n    return str(satisfaction_points)\n\nstdin = \"\"\"3\n3 1 2\n2 5 4\n3 6\"\"\"\nprint(solution(stdin)) "
    },
    {
        "number": 4271,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, dish_sequence, B_sequence, C_sequence = stdin.split('\\n')\n    N = int(N)\n    dish_sequence = [int(x) for x in dish_sequence.split()]\n    B_sequence = [int(x) for x in B_sequence.split()]\n    C_sequence = [int(x) for x in C_sequence.split()]\n\n    satisfaction_points = 0\n    for i in range(N):\n        satisfaction_points += B_sequence[dish_sequence[i] - 1]\n        if i < N - 1:\n            satisfaction_points += C_sequence[i]\n\n    return str(satisfaction_points)"
    },
    {
        "number": 4271,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    num_dishes = int(lines[0])\n    dish_satisfaction = []\n    dish_order = []\n\n    for i in range(num_dishes):\n        dish_order.append(int(lines[1].split()[i]))\n        dish_satisfaction.append(int(lines[2].split()[i]))\n\n    if num_dishes > 1:\n        dish_satisfaction[num_dishes - 2] += dish_satisfaction[num_dishes - 1]\n        dish_order[num_dishes - 2] = dish_order[num_dishes - 1]\n\n    satisfaction_total = 0\n    for i in range(num_dishes):\n        satisfaction_total += dish_satisfaction[i]\n\n    return str(satisfaction_total)"
    },
    {
        "number": 4271,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, dish_list, satisfaction_list = stdin.split('\\n')\n    dish_list = [int(x) for x in dish_list.split()]\n    satisfaction_list = [int(x) for x in satisfaction_list.split()]\n    total_satisfaction = 0\n\n    for i in range(len(dish_list)):\n        dish = dish_list[i]\n        if i == len(dish_list) - 1:\n            total_satisfaction += satisfaction_list[i]\n        else:\n            total_satisfaction += satisfaction_list[i] + satisfaction_list[i + 1]\n\n    return str(total_satisfaction)"
    },
    {
        "number": 4271,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    A = list(map(int, lines[1].split()))\n    B = list(map(int, lines[2].split()))\n    C = list(map(int, lines[3].split()))\n    \n    satisfaction_points = 0\n    for i in range(N):\n        satisfaction_points += B[i]\n        if i < N-1 and A[i+1] == A[i]+1:\n            satisfaction_points += C[i]\n    \n    return str(satisfaction_points)"
    },
    {
        "number": 4271,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, dishes, B, C = stdin.split('\\n')\n    N = int(N)\n    A = [int(a) for a in dishes.split()]\n    B = [int(b) for b in B.split()]\n    C = [int(c) for c in C.split()]\n    \n    satisfaction_points = 0\n    for i in range(N):\n        satisfaction_points += B[A[i] - 1]\n        if i < N - 1 and A[i + 1] == A[i] + 1:\n            satisfaction_points += C[A[i] - 1]\n    \n    return str(satisfaction_points)"
    },
    {
        "number": 4272,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.strip().split()\n    n = int(n)\n    s = str(s)\n\n    count = 0\n    for i in range(n-2):\n        if s[i:i+3] == \"ABC\":\n            count += 1\n\n    return str(count)\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4272,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split()\n    N = int(N)\n\n    count = 0\n    for i in range(N - 2):\n        if S[i:i+3] == \"ABC\":\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4272,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.strip().split('\\n')\n    N = int(N)\n\n    count = 0\n    for i in range(N - 2):\n        if S[i:i+3] == 'ABC':\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4272,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split('\\n')\n    N = int(N)\n    count = 0\n    for i in range(N - 2):\n        if S[i:i+3] == 'ABC':\n            count += 1\n    return str(count)"
    },
    {
        "number": 4272,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split(\"\\n\")\n    N = int(N)\n    \n    count = 0\n    for i in range(N - 2):\n        if S[i:i+3] == \"ABC\":\n            count += 1\n    \n    return str(count)"
    },
    {
        "number": 4272,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split(\"\\n\")\n    n = int(n)\n\n    count = 0\n    for i in range(n - 2):\n        if s[i:i + 3] == \"ABC\":\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4272,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split(\"\\n\")\n    n = int(n)\n    count = 0\n\n    for i in range(n - 2):\n        if s[i:i + 3] == \"ABC\":\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4272,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    N, S = stdin.split()\n    N = int(N)\n\n    # Calculate number of occurrences of ABC\n    count = 0\n    for i in range(N - 2):\n        if S[i:i + 3] == \"ABC\":\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4272,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split(\"\\n\")\n    n = int(n)\n    count = 0\n    for i in range(n - 2):\n        if s[i:i+3] == \"ABC\":\n            count += 1\n    return str(count)"
    },
    {
        "number": 4272,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split()\n    N = int(N)\n    count = 0\n    for i in range(N - 2):\n        if S[i:i+3] == \"ABC\":\n            count += 1\n    return str(count)"
    },
    {
        "number": 4273,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    names = lines[1:]\n    \n    # Count the number of people with each first letter\n    first_letters = {}\n    for name in names:\n        first_letter = name[0]\n        if first_letter in first_letters:\n            first_letters[first_letter] += 1\n        else:\n            first_letters[first_letter] = 1\n    \n    # Calculate the number of ways to choose three people\n    result = 1\n    for letter, count in first_letters.items():\n        result *= factorial(count) // (factorial(3) * factorial(count - 3))\n    \n    return str(result)"
    },
    {
        "number": 4273,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid_choice(choice: List[str]) -> bool:\n        return len(set(choice)) == 3\n\n    def find_valid_choices(names: List[str]) -> List[List[str]]:\n        valid_choices = []\n        for name1 in names:\n            for name2 in names:\n                for name3 in names:\n                    if is_valid_choice([name1, name2, name3]):\n                        valid_choices.append([name1, name2, name3])\n        return valid_choices\n\n    n, *names = stdin.split()\n    valid_choices = find_valid_choices(names)\n    return str(len(valid_choices))"
    },
    {
        "number": 4273,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    names = lines[1:]\n\n    # Initialize count\n    count = 0\n\n    # Iterate over all possible combinations\n    for i in range(N):\n        for j in range(i + 1, N):\n            for k in range(j + 1, N):\n                # Check if all three names start with different letters\n                name1 = names[i]\n                name2 = names[j]\n                name3 = names[k]\n                if name1[0] != name2[0] and name1[0] != name3[0] and name2[0] != name3[0]:\n                    # Check if all three names start with M, A, R, C, or H\n                    if name1[0] in ['M', 'A', 'R', 'C', 'H'] and name2[0] in ['M', 'A', 'R', 'C', 'H'] and name3[0] in ['M', 'A', 'R', 'C', 'H']:\n                        count += 1\n\n    return str(count)"
    },
    {
        "number": 4273,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.strip().split('\\n')\n    N = int(lines[0])\n    people = lines[1:]\n    \n    # Count the number of people with each first letter\n    counts = [0] * 5\n    for person in people:\n        first_letter = person[0].upper()\n        if first_letter in \"MARCH\":\n            counts[0] += 1\n        elif first_letter == 'H':\n            counts[1] += 1\n        elif first_letter == 'O':\n            counts[2] += 1\n        elif first_letter == 'B':\n            counts[3] += 1\n        elif first_letter == 'U':\n            counts[4] += 1\n    \n    # Calculate the number of ways to choose three people\n    total = 0\n    for i in range(5):\n        for j in range(5):\n            if i != j:\n                for k in range(5):\n                    if k != i and k != j:\n                        if counts[i] > 0 and counts[j] > 0 and counts[k] > 0:\n                            total += counts[i] * counts[j] * counts[k]\n                            counts[i] -= 1\n                            counts[j] -= 1\n                            counts[k] -= 1\n                        elif counts[i] == 0 and counts[j] == 0 and counts[k] == 0:\n                            break\n    \n    return str(total)"
    },
    {
        "number": 4273,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    names = lines[1:]\n\n    # count ways to choose three people with distinct first letters\n    count = 0\n    first_letters = set()\n    for name in names:\n        first_letter = name[0]\n        if first_letter not in first_letters:\n            count += 1\n            first_letters.add(first_letter)\n\n    return str(count)"
    },
    {
        "number": 4273,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    people = lines[1:]\n\n    def is_valid(person1, person2, person3):\n        return person1[0] in \"MARCH\" and person2[0] in \"MARCH\" and person3[0] in \"MARCH\" and person1[0] != person2[0] and person1[0] != person3[0] and person2[0] != person3[0]\n\n    valid_ways = 0\n\n    for i in range(N):\n        for j in range(i + 1, N):\n            for k in range(j + 1, N):\n                if is_valid(people[i], people[j], people[k]):\n                    valid_ways += 1\n\n    return str(valid_ways)"
    },
    {
        "number": 4273,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    names = stdin.split('\\n')[1:]\n\n    count = 0\n    for i in range(N):\n        for j in range(N):\n            for k in range(N):\n                if i != j and i != k and j != k:\n                    name1, name2, name3 = names[i], names[j], names[k]\n                    if name1[0] in \"MARCH\" and name2[0] in \"MARCH\" and name3[0] in \"MARCH\" and name1[0] != name2[0] and name1[0] != name3[0] and name2[0] != name3[0]:\n                        count += 1\n\n    return str(count)"
    },
    {
        "number": 4273,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split(\"\\n\")\n    n = int(stdin_list[0])\n    people_names = stdin_list[1:]\n    \n    # create a set of the first letters of the names\n    first_letters = set()\n    for name in people_names:\n        first_letters.add(name[0])\n    \n    # calculate the number of ways to choose 3 people\n    num_ways = 0\n    for first_letter in first_letters:\n        num_ways += len([name for name in people_names if name[0] == first_letter]) * (len([name for name in people_names if name[0] == first_letter]) - 1) * (len([name for name in people_names if name[0] == first_letter]) - 2)\n    \n    return str(num_ways)"
    },
    {
        "number": 4273,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    people = stdin.split('\\n')[1:]\n\n    def count_ways(people, m, a, r, c, h):\n        if len(people) == 0:\n            return 1 if m + a + r + c + h == 3 else 0\n        \n        ways = 0\n        for i, person in enumerate(people):\n            if person[0] == 'M' and m < 1:\n                ways += count_ways(people[:i] + people[i+1:], m+1, a, r, c, h)\n            elif person[0] == 'A' and a < 1:\n                ways += count_ways(people[:i] + people[i+1:], m, a+1, r, c, h)\n            elif person[0] == 'R' and r < 1:\n                ways += count_ways(people[:i] + people[i+1:], m, a, r+1, c, h)\n            elif person[0] == 'C' and c < 1:\n                ways += count_ways(people[:i] + people[i+1:], m, a, r, c+1, h)\n            elif person[0] == 'H' and h < 1:\n                ways += count_ways(people[:i] + people[i+1:], m, a, r, c, h+1)\n        return ways\n\n    return str(count_ways(people, 0, 0, 0, 0, 0))\n\nstdin = \"\"\"5\nMASHIKE\nRUMOI\nOBIRA\nHABORO\nHOROKANAI\"\"\"\nprint(solution(stdin)) # Output: 2 "
    },
    {
        "number": 4273,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(name: str) -> bool:\n        return name[0] in \"MARCH\"\n\n    def has_duplicates(names: list) -> bool:\n        return len(set(names)) != len(names)\n\n    def count_combinations(names: list, target_count: int) -> int:\n        if target_count == 0:\n            return 1\n        if not names:\n            return 0\n        if not is_valid(names[0]):\n            return 0\n        if has_duplicates(names[:3]):\n            return 0\n\n        return count_combinations(names[1:], target_count - 1) + count_combinations(names[1:], target_count)\n\n    N = int(stdin.split(\"\\n\")[0])\n    names = stdin.split(\"\\n\")[1:]\n    valid_names = [name for name in names if is_valid(name)]\n    valid_names.sort()\n    return str(count_combinations(valid_names, 3))"
    },
    {
        "number": 4274,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    nums = stdin.split()\n    n, m = int(nums[0]), int(nums[1])\n    \n    if m == n:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ndef"
    },
    {
        "number": 4274,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    if N == M:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4274,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n\n    if m == n:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4274,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    if M == N:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4274,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if m == n:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4274,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    if M == N:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4274,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n\n    if m == n:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4274,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4274,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_values = stdin.split()\n    n, m = int(input_values[0]), int(input_values[1])\n\n    if m == n:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split()\n    N = int(input_data[0])\n    M = int(input_data[1])\n\n    if M == N:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4275,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if s[2] == s[3] and s[4] == s[5]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4275,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    if S[2] == S[3] and S[4] == S[5]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4275,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if s[2] == s[3] and s[4] == s[5]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4275,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    if s[2] == s[3] and s[4] == s[5]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4275,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s) != 6:\n        return \"No\"\n\n    if s[2] != s[3] or s[4] != s[5]:\n        return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4275,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) != 6:\n        return \"No\"\n    \n    third_char = stdin[2]\n    fourth_char = stdin[3]\n    fifth_char = stdin[4]\n    sixth_char = stdin[5]\n    \n    if third_char == fourth_char and fifth_char == sixth_char:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4275,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input string into a list of characters\n    s_list = list(stdin)\n\n    # Check if the 3rd and 4th characters are equal\n    if s_list[2] != s_list[3]:\n        return \"No\"\n\n    # Check if the 5th and 6th characters are equal\n    if s_list[4] != s_list[5]:\n        return \"No\"\n\n    # If both conditions are satisfied, return Yes\n    return \"Yes\""
    },
    {
        "number": 4275,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s[2] == s[3] and s[4] == s[5]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4275,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if s[2] == s[3] and s[4] == s[5]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4275,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if s[2] == s[3] and s[4] == s[5]:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4276,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N, T = map(int, lines[0].split())\n    routes = []\n    for line in lines[1:]:\n        if not line:\n            continue\n        c, t = map(int, line.split())\n        routes.append((c, t))\n\n    min_cost = T\n    for route in routes:\n        c, t = route\n        if t <= T:\n            min_cost = min(min_cost, c)\n\n    if min_cost == T:\n        return \"TLE\"\n    return str(min_cost)"
    },
    {
        "number": 4276,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    num_routes, time_limit = map(int, lines[0].split())\n    routes = []\n    for i in range(1, num_routes+1):\n        cost, time = map(int, lines[i].split())\n        routes.append((cost, time))\n    \n    def min_cost(time_limit: int, routes: list) -> int:\n        routes.sort(key=lambda x: x[1])\n        total_cost = 0\n        for cost, time in routes:\n            if time <= time_limit:\n                total_cost += cost\n                time_limit -= time\n            else:\n                break\n        return total_cost\n    \n    result = min_cost(time_limit, routes)\n    if result == time_limit:\n        return \"TLE\"\n    else:\n        return str(result)"
    },
    {
        "number": 4276,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    num_routes, time_limit = map(int, lines[0].split())\n    routes = [tuple(map(int, line.split())) for line in lines[1:]]\n\n    routes.sort(key=lambda x: x[0])\n\n    min_cost = float(\"inf\")\n    for cost, time in routes:\n        if time <= time_limit:\n            min_cost = min(min_cost, cost)\n        elif cost > min_cost:\n            break\n\n    return str(min_cost) if min_cost != float(\"inf\") else \"TLE\" "
    },
    {
        "number": 4276,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function takes the input as a string and returns the minimum cost of a route that takes not longer than time T.\n    \"\"\"\n    # Get the input as a list of strings\n    input_list = stdin.split('\\n')\n    \n    # Parse the input list to get the values of N, T, c_i, and t_i\n    N = int(input_list[0])\n    T = int(input_list[1])\n    routes = []\n    for i in range(2, len(input_list)):\n        c, t = input_list[i].split()\n        routes.append((int(c), int(t)))\n    \n    # Sort the routes by increasing cost\n    routes.sort(key=lambda x: x[0])\n    \n    # Initialize the minimum cost to be infinite\n    min_cost = float('inf')\n    \n    # Iterate through the routes and calculate the total cost\n    for i, route in enumerate(routes):\n        total_cost = 0\n        total_time = 0\n        for j in range(i, len(routes)):\n            total_cost += routes[j][0]\n            total_time += routes[j][1]\n            if total_time > T:\n                break\n        min_cost = min(min_cost, total_cost)\n    \n    # If there is no route that takes not longer than time T, print TLE instead.\n    if min_cost == float('inf'):\n        return \"TLE\"\n    else:\n        return str(min_cost)"
    },
    {
        "number": 4276,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N, T = map(int, lines[0].split())\n    routes = [tuple(map(int, line.split())) for line in lines[1:-1]]\n    routes.sort(key=lambda x: x[1])\n\n    min_cost = T\n    for cost, time in routes:\n        if time <= T:\n            min_cost = min(min_cost, cost)\n        else:\n            break\n\n    return str(min_cost)\n"
    },
    {
        "number": 4276,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, t = map(int, lines[0].split())\n    routes = []\n    for i in range(1, n+1):\n        c, t_i = map(int, lines[i].split())\n        routes.append((c, t_i))\n    \n    routes.sort(key=lambda x: x[1])\n    \n    min_cost = t\n    for c, t_i in routes:\n        if t_i <= t:\n            min_cost = min(min_cost, c)\n        else:\n            break\n    \n    if min_cost == t:\n        return \"TLE\"\n    else:\n        return str(min_cost)"
    },
    {
        "number": 4276,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split()[0:2])\n    routes = []\n    for line in stdin.split()[2:]:\n        c, t = map(int, line.split())\n        routes.append((c, t))\n    \n    routes.sort(key=lambda x: x[1])\n    \n    min_cost = float('inf')\n    for c, t in routes:\n        if t <= t:\n            min_cost = min(min_cost, c)\n        else:\n            break\n    \n    return min_cost if min_cost != float('inf') else \"TLE\"\n\ninput_data = \"\"\"3 70\n7 60\n1 80\n4 50\"\"\"\n\nprint(solution(input_data)) # Output: 4 "
    },
    {
        "number": 4276,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N, T = map(int, lines[0].split())\n    routes = []\n    for i in range(1, N+1):\n        c, t = map(int, lines[i].split())\n        routes.append((c, t))\n    \n    routes.sort(key=lambda x: x[1])\n    \n    total_time = 0\n    total_cost = 0\n    \n    for c, t in routes:\n        if total_time + t <= T:\n            total_time += t\n            total_cost += c\n        else:\n            break\n    \n    if total_time < T:\n        return TLE\n    else:\n        return total_cost"
    },
    {
        "number": 4276,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n, t = map(int, lines[0].split())\n    routes = []\n\n    for i in range(1, n + 1):\n        c, t = map(int, lines[i].split())\n        routes.append((c, t))\n\n    routes.sort(key=lambda x: x[1])\n    min_cost = float(\"inf\")\n\n    for i in range(len(routes)):\n        if routes[i][1] > t:\n            break\n        min_cost = min(min_cost, routes[i][0])\n\n    return str(min_cost) if min_cost != float(\"inf\") else \"TLE\"\n\nstdin = \"\"\"3 70\n7 60\n1 80\n4 50\"\"\"\nprint(solution(stdin)) "
    },
    {
        "number": 4276,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, t = map(int, lines[0].split())\n    routes = []\n    for i in range(1, n+1):\n        c, t_i = map(int, lines[i].split())\n        routes.append((c, t_i))\n\n    routes.sort(key=lambda x: x[1])\n\n    min_cost = t\n    for c, t_i in routes:\n        if t_i <= t:\n            min_cost = min(min_cost, c)\n        else:\n            break\n\n    if min_cost == t:\n        return \"TLE\"\n    else:\n        return str(min_cost)"
    },
    {
        "number": 4277,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.strip().split())\n    return str(N * A + B)"
    },
    {
        "number": 4277,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    total_expense = n * a + b\n    return str(total_expense)"
    },
    {
        "number": 4277,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    train_cost = N * A\n    total_cost = max(train_cost, B)\n    return str(total_cost)"
    },
    {
        "number": 4277,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    total_expense = N * A + B\n    return str(total_expense) "
    },
    {
        "number": 4277,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    return str(min(n * a, b))"
    },
    {
        "number": 4277,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    total_cost = min(N * A, B)\n    return str(total_cost)"
    },
    {
        "number": 4277,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    min_expense = N * A + B\n    return str(min_expense)"
    },
    {
        "number": 4277,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    total_cost = min(N * A, B)\n    return str(total_cost)"
    },
    {
        "number": 4277,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    min_travel_cost = min(n * a, b)\n    return str(min_travel_cost)"
    },
    {
        "number": 4277,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.strip().split())\n    return str(max(N * A, B))"
    },
    {
        "number": 4278,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    import itertools\n\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    strings = lines[1:]\n\n    def is_anagram(s1: str, s2: str) -> bool:\n        if len(s1) != len(s2):\n            return False\n        count = {}\n        for c in s1:\n            count[c] = count.get(c, 0) + 1\n        for c in s2:\n            if c not in count:\n                return False\n            count[c] -= 1\n            if count[c] < 0:\n                return False\n        return True\n\n    anagram_pairs = [(i, j) for i, j in itertools.combinations(range(n), 2) if is_anagram(strings[i], strings[j])]\n\n    return str(len(anagram_pairs))"
    },
    {
        "number": 4278,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    s_list = lines[1:N+1]\n    count = 0\n    \n    for i in range(N):\n        for j in range(i+1, N):\n            if sorted(s_list[i]) == sorted(s_list[j]):\n                count += 1\n                \n    return str(count)"
    },
    {
        "number": 4278,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    anagram_count = 0\n    s_list = lines[1:N+1]\n    \n    for i in range(N):\n        for j in range(i+1, N):\n            if sorted(s_list[i]) == sorted(s_list[j]):\n                anagram_count += 1\n    \n    return str(anagram_count)"
    },
    {
        "number": 4278,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    s = lines[1:N+1]\n    \n    def is_anagram(s1, s2):\n        return sorted(s1) == sorted(s2)\n    \n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if is_anagram(s[i], s[j]):\n                count += 1\n    \n    return str(count)"
    },
    {
        "number": 4278,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    s_list = lines[1:N+1]\n\n    def is_anagram(s1, s2):\n        if sorted(s1) == sorted(s2):\n            return True\n        return False\n\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if is_anagram(s_list[i], s_list[j]):\n                count += 1\n\n    return str(count)"
    },
    {
        "number": 4278,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    anagrams = [0] * N\n\n    for i in range(N):\n        s = lines[i+1]\n        s = sorted(s)\n        for j in range(i+1, N):\n            if sorted(lines[j+1]) == s:\n                anagrams[i] += 1\n                anagrams[j] += 1\n\n    return str(sum(anagrams))\n\ninput_data = '''3\nacornistnt\npeanutbomb\nconstraint'''\nprint(solution(input_data)) "
    },
    {
        "number": 4278,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    anagram_count = 0\n\n    for i in range(N):\n        for j in range(i+1, N):\n            if sorted(lines[i+1]) == sorted(lines[j+1]):\n                anagram_count += 1\n\n    return str(anagram_count)"
    },
    {
        "number": 4278,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    strings = lines[1:N+1]\n    \n    def is_anagram(s1: str, s2: str) -> bool:\n        return sorted(s1) == sorted(s2)\n    \n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if is_anagram(strings[i], strings[j]):\n                count += 1\n    \n    return str(count)"
    },
    {
        "number": 4278,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    strings = lines[1:]\n\n    def is_anagram(s1: str, s2: str) -> bool:\n        return sorted(s1) == sorted(s2)\n\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if is_anagram(strings[i], strings[j]):\n                count += 1\n\n    return str(count)\n\ndef"
    },
    {
        "number": 4278,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    strings = lines[1:N+1]\n\n    def is_anagram(s1: str, s2: str) -> bool:\n        return sorted(s1) == sorted(s2)\n\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if is_anagram(strings[i], strings[j]):\n                count += 1\n\n    return str(count)\n\ninput_str = \"\"\"3\nacornistnt\npeanutbomb\nconstraint\"\"\"\nprint(solution(input_str)) "
    },
    {
        "number": 4279,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.splitlines()[0])\n    sequence = \"11212312341234512345612345671234567812345678912345678910\"\n    \n    result = []\n    \n    for _ in range(queries):\n        k = int(stdin.splitlines()[1])\n        result.append(sequence[k-1])\n    \n    return \"\\n\".join(result)\n"
    },
    {
        "number": 4279,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    q = int(stdin.splitlines()[0])\n    queries = [int(line) for line in stdin.splitlines()[1:]]\n    \n    # define the sequence\n    sequence = \"11212312341234512345612345671234567812345678912345678910\"\n    sequence += \"\".join([str(i+1) for i in range(10, 10000)])\n    \n    # answer queries\n    results = []\n    for k in queries:\n        results.append(sequence[k-1])\n    \n    # print output\n    return \"\\n\".join(results)"
    },
    {
        "number": 4279,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.readline().strip())\n    sequence = \"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990\"\n    results = []\n    \n    for _ in range(queries):\n        k = int(stdin.readline().strip())\n        if k <= 56:\n            results.append(sequence[k-1])\n        else:\n            n = k // 9 + 2\n            position = (k - 1) % 9 + 1\n            results.append(str((n * (n + 1)) // 2 + n + 1 - position))\n    \n    return \"\\n\".join(results)"
    },
    {
        "number": 4279,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split('\\n')[0])\n    k = list(map(int, stdin.split('\\n')[1:]))\n\n    for i in range(len(k)):\n        k[i] -= 1\n\n    sequence = [1]\n    current_number = 1\n    current_sequence_length = 1\n\n    for i in range(1, 1000000001):\n        current_sequence_length += 1\n        sequence.append(current_number + current_sequence_length)\n        current_number += current_sequence_length\n\n    result = []\n\n    for i in range(q):\n        result.append(str(sequence[k[i]]))\n\n    return '\\n'.join(result)\n\n\ndef"
    },
    {
        "number": 4279,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.splitlines()[0])\n    sequence = [1, 1, 2, 1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 0]\n\n    def get_digit(k: int) -> int:\n        block_size = 1\n        while k > block_size:\n            k -= block_size\n            block_size += 1\n        return sequence[k - 1]\n\n    result = \"\"\n    for i in range(1, queries + 1):\n        k = int(stdin.splitlines()[i])\n        result += str(get_digit(k)) + \"\\n\"\n\n    return result"
    },
    {
        "number": 4279,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    queries = [int(x) for x in stdin.split(\"\\n\")[1:]]\n    sequence = \"11212312341234512345612345671234567812345678912345678910\"\n    \n    for query in queries:\n        if query <= 56:\n            result = sequence[query-1]\n        else:\n            result = (query // 9) * (query // 9 + 1) // 2 + 1 + query % 9\n            result = str(result)[-1]\n        print(result)"
    },
    {
        "number": 4279,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split()[0])\n    stdin = stdin.split('\\n')[1:]\n    seq = \"123456789\"\n    k = []\n    for i in range(q):\n        k.append(int(stdin[i])-1)\n    output = []\n    for i in range(q):\n        if k[i] > len(seq)*9:\n            output.append(\"0\")\n        else:\n            output.append(seq[k[i]//10])\n    return \"\\n\".join(output)\n\ninput_data = \"\"\"5\n1\n3\n20\n38\n56\"\"\"\noutput = solution(input_data)\nprint(output) "
    },
    {
        "number": 4279,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    sequence = \"11212312341234512345612345671234567812345678912345678910\"\n    answer = []\n    \n    for _ in range(q):\n        k = int(stdin.readline().strip())\n        if k <= len(sequence):\n            answer.append(sequence[k - 1])\n        else:\n            answer.append(sequence[len(sequence) - 1])\n            \n    return \"\\n\".join(map(str, answer))"
    },
    {
        "number": 4279,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split('\\n')[0])\n    queries = stdin.split('\\n')[1:]\n    sequence = [1]\n    current_block = 1\n    answer = []\n    \n    for i in range(q):\n        k = int(queries[i])\n        while k > len(sequence) * current_block:\n            for j in range(1, current_block + 1):\n                sequence.append(sequence[-1] + 1)\n        answer.append(sequence[k % current_block])\n        current_block += 1\n        \n    return '\\n'.join(map(str, answer))"
    },
    {
        "number": 4279,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split(\"\\n\")[0])\n    queries = [int(x) for x in stdin.split(\"\\n\")[1:]]\n\n    sequence = \"11212312341234512345612345671234567812345678912345678910\"\n\n    result = []\n    for i in range(q):\n        k = queries[i]\n        result.append(sequence[k % len(sequence)])\n\n    return \"\\n\".join(result)\n"
    },
    {
        "number": 4280,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    roads = []\n    for _ in range(n-1):\n        x, y = map(int, stdin.split())\n        roads.append((x, y))\n        roads.append((y, x))\n    \n    def dfs(start, visited):\n        visited[start] = True\n        for i in range(n):\n            if not visited[i] and (i, start) in roads:\n                dfs(i, visited)\n                \n    count = [0] * n\n    for i in range(1, n+1):\n        visited = [False] * (n+1)\n        dfs(i, visited)\n        for j in range(1, n+1):\n            if visited[j]:\n                count[j-1] += 1\n                \n    r = 1\n    while r <= n:\n        good_cities = 0\n        for c in count:\n            if c <= k:\n                good_cities += 1\n            else:\n                break\n        if good_cities == n:\n            break\n        r += 1\n        \n    return str(r) + \"\\n\" + \" \".join(str(i+1) for i, c in enumerate(count) if c <= k)"
    },
    {
        "number": 4280,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    roads = [tuple(map(int, input().split())) for _ in range(n - 1)]\n\n    # Create a graph\n    graph = [[] for _ in range(n)]\n    for u, v in roads:\n        graph[u - 1].append(v - 1)\n        graph[v - 1].append(u - 1)\n\n    # Find the number of companies\n    r = n - 1\n    for i in range(n - 1, 0, -1):\n        if len(graph) < k + 2:\n            r = i\n            break\n        graph, _ = remove_vertices(graph, i)\n\n    # Assign roads to companies\n    result = [0] * (n - 1)\n    for i in range(n - 1):\n        result[i] = (i % r) + 1\n\n    return str(r) + \"\\n\" + \" \".join(map(str, result))\n\n\ndef"
    },
    {
        "number": 4280,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    roads = [tuple(map(int, line.split())) for line in stdin.split()[2:]]\n    \n    def dfs(start, visited, current_company):\n        visited.add(start)\n        for end in range(1, n+1):\n            if (start, end) in roads or (end, start) in roads:\n                if end not in visited:\n                    yield from dfs(end, visited, current_company)\n                else:\n                    yield current_company\n    \n    max_company = 0\n    for start in range(1, n+1):\n        companies = set(dfs(start, set(), max_company + 1))\n        max_company = max(max_company, max(companies) if companies else 0)\n    \n    company_assignments = []\n    for road in roads:\n        found_company = False\n        for company in range(1, max_company+1):\n            if all(roads.index((road[0], other)) % 2 == 0 or roads.index((other, road[0])) % 2 == 0 for other in range(1, n+1) if other != road[1]):\n                company_assignments.append(company)\n                found_company = True\n                break\n        if not found_company:\n            return \"Not possible\"\n    \n    return str(max_company) + \"\\n\" + \" \".join(map(str, company_assignments))\n\ninput_string = input()\nprint(solution(input_string)) "
    },
    {
        "number": 4280,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def get_not_good_cities(graph: List[List[int]], companies: List[int]) -> List[int]:\n        not_good_cities = []\n        for city in range(1, n + 1):\n            roads_company = defaultdict(int)\n            for road in range(1, n):\n                if graph[road][0] == city or graph[road][1] == city:\n                    roads_company[companies[road]] += 1\n            if any(count >= 2 for count in roads_company.values()):\n                not_good_cities.append(city)\n        return not_good_cities\n\n    def dfs(graph: List[List[int]], visited: List[bool], start: int, company: int) -> None:\n        visited[start - 1] = True\n        for i in range(1, n):\n            if not visited[i - 1] and graph[i][0] == start or graph[i][1] == start:\n                companies[i] = company\n                dfs(graph, visited, graph[i][0 if graph[i][1] == start else 1], company)\n\n    n, k = map(int, stdin.split()[0].split())\n    graph = [[0, 0] for _ in range(n - 1)]\n    for i, line in enumerate(stdin.split()[1:]):\n        x, y = map(int, line.split())\n        graph[i][0] = min(x, y)\n        graph[i][1] = max(x, y)\n\n    companies = [0] * (n - 1)\n    dfs(graph, [False] * n, 1, 1)\n    unassigned_roads = [i for i in range(1, n - 1) if companies[i] == 0]\n\n    not_good_cities = get_not_good_cities(graph, companies)\n    if not_good_cities:\n        r = 1\n        assignment = [1] * (n - 1)\n    else:\n        r = n - len(not_good_cities)\n        assignment = [0] * (n - 1)\n        for i in range(1, n - 1):\n            if companies[i] == 0:\n                assignment[i] = r\n                r += 1\n\n    return str(r) + \"\\n\" + \" \".join(map(str, assignment))\n"
    },
    {
        "number": 4280,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    adj_list = []\n    for i in range(n):\n        adj_list.append([])\n\n    for i in range(1, n):\n        x, y = map(int, stdin.split()[i].split())\n        adj_list[x-1].append(y-1)\n        adj_list[y-1].append(x-1)\n\n    def dfs(node, visited, parent):\n        visited[node] = True\n        company = 1\n        for child in adj_list[node]:\n            if not visited[child]:\n                company = dfs(child, visited, node)\n                if company == -1:\n                    return -1\n            elif child != parent:\n                return -1\n        return company\n\n    r = 1\n    while True:\n        visited = [False] * n\n        for i in range(n):\n            if not visited[i]:\n                company = dfs(i, visited, -1)\n                if company == -1:\n                    break\n        else:\n            return r\n        r += 1"
    },
    {
        "number": 4280,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    graph = [[0] * n for _ in range(n)]\n    \n    for i in range(n-1):\n        x, y = map(int, input().split())\n        graph[x-1][y-1] = graph[y-1][x-1] = 1\n    \n    def dfs(node, visited, company, companies):\n        visited[node] = 1\n        for i in range(n):\n            if graph[node][i] == 1 and visited[i] == 0:\n                dfs(i, visited, company, companies)\n        companies.append(company)\n\n    companies = []\n    for i in range(n):\n        visited = [0] * n\n        dfs(i, visited, len(companies) + 1, companies)\n\n    not_good_cities = 0\n    for city in companies:\n        if len(set(city)) == 1:\n            not_good_cities += 1\n\n    if not_good_cities > k:\n        return str(len(companies) + 1) + '\\n' + ' '.join(map(str, [i for i in range(1, len(companies) + 2)] * len(companies)) + [1])\n\n    return str(len(companies)) + '\\n' + ' '.join(map(str, companies))"
    },
    {
        "number": 4280,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k > n // 2:\n        return \"0\\n\"\n\n    adj_list = [[] for _ in range(n)]\n    for i in range(n - 1):\n        x, y = map(int, input().split())\n        adj_list[x - 1].append(y - 1)\n        adj_list[y - 1].append(x - 1)\n\n    def dfs(node: int, visited: set, parent: int) -> set:\n        visited.add(node)\n        for neighbor in adj_list[node]:\n            if neighbor not in visited:\n                dfs(neighbor, visited, node)\n        return visited\n\n    def get_companies(visited: set) -> dict:\n        companies = {}\n        for node in visited:\n            company = 1\n            for neighbor in adj_list[node]:\n                if neighbor in visited:\n                    company += 1\n            companies[node] = company\n        return companies\n\n    visited = set()\n    for i in range(n):\n        if i not in visited:\n            subtree = dfs(i, set(), -1)\n            companies = get_companies(subtree)\n            if sum(1 for c in companies.values() if c > 1) <= k:\n                return str(len(companies) - 1) + \"\\n\" + \" \".join(str(node + 1) * c for node, c in companies.items())\n\n    return \"0\\n\" "
    },
    {
        "number": 4280,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    graph = [[] for _ in range(n)]\n    for i, line in enumerate(stdin.split()[2:]):\n        x, y = map(int, line.split())\n        graph[x-1].append((i+1, y-1))\n        graph[y-1].append((i+1, x-1))\n    \n    companies = set()\n    for i in range(n):\n        for j in range(i+1, n):\n            if not any(graph[i]):\n                continue\n            if any(len(set(e for _, e in graph[i])) == 1):\n                continue\n            if any(len(set(e for _, e in graph[j])) == 1):\n                continue\n            for e in range(1, n):\n                if e not in companies:\n                    for _, edge in graph[i] + graph[j]:\n                        if edge == e:\n                            graph[i].append((edge, j))\n                            graph[j].append((edge, i))\n                            companies.add(e)\n                            break\n                    else:\n                        continue\n                    break\n            if len(companies) == k:\n                break\n        else:\n            continue\n        break\n    \n    return str(len(companies)) + \"\\n\" + \" \".join(str(e) for e in range(1, len(companies)+1))"
    },
    {
        "number": 4280,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    adj_list = [[] for _ in range(n)]\n\n    for i in range(n - 1):\n        x, y = map(int, stdin.split())\n        adj_list[x - 1].append(y - 1)\n        adj_list[y - 1].append(x - 1)\n\n    def dfs(node: int, visited: set, company: int, companies: list):\n        visited.add(node)\n        for neighbor in adj_list[node]:\n            if neighbor not in visited:\n                dfs(neighbor, visited, company, companies)\n            elif neighbor in companies[company]:\n                companies[company].remove(neighbor)\n\n    bad_cities = 0\n    companies = [set() for _ in range(n)]\n\n    for i in range(n):\n        visited = set()\n        dfs(i, visited, 0, companies)\n\n    for company in companies:\n        if len(company) == 0:\n            bad_cities += 1\n\n    if bad_cities > k:\n        return \"impossible\"\n\n    max_r = n - bad_cities\n    min_r = 0\n\n    while min_r < max_r:\n        mid_r = (min_r + max_r) // 2\n        current_bad_cities = 0\n\n        for i in range(n):\n            visited = set()\n            companies = [set() for _ in range(mid_r + 1)]\n            for j in range(n - 1):\n                dfs(i, visited, j % (mid_r + 1), companies)\n            current_bad_cities += len([1 for company in companies if len(company) == 0])\n\n        if current_bad_cities <= k:\n            min_r = mid_r + 1\n        else:\n            max_r = mid_r\n\n    result = [0] * (n - 1)\n    for i in range(n - 1):\n        result[i] = (i + 1) % min_r + 1\n\n    return str(min_r) + \"\\n\" + \" \".join(map(str, result))\n\nstdin = \"\"\"6 2\n1 4\n4 3\n3 5\n3 6\n5 2\"\"\"\nprint(solution(stdin)) "
    },
    {
        "number": 4280,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    roads = []\n    for i in range(n-1):\n        x, y = map(int, stdin.split())\n        roads.append((x, y))\n\n    def find_min_r(roads: list, k: int) -> int:\n        n = len(roads)\n        companies = [[0] * n for _ in range(n)]\n        for i, road in enumerate(roads):\n            x, y = road\n            companies[x-1][i] += 1\n            companies[y-1][i] += 1\n\n        r = 1\n        while True:\n            good_cities = 0\n            for city in companies:\n                if max(city) <= r:\n                    good_cities += 1\n\n            if good_cities <= k:\n                return r\n            else:\n                r += 1\n\n    return find_min_r(roads, k)"
    },
    {
        "number": 4281,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    x = list(map(int, stdin.split(\"\\n\")[1].split()))\n    min_occupied = 0\n    max_occupied = 0\n    for i in range(n):\n        if x[i] == 1:\n            min_occupied += 1\n        elif x[i] == n:\n            max_occupied += 1\n        else:\n            min_occupied += 1\n            max_occupied += 1\n    return f\"{min_occupied} {max_occupied}\""
    },
    {
        "number": 4281,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.strip().split())\n    houses = [0] * (n + 2)\n\n    for i in range(n):\n        houses[x[i] - 1] += 1\n        houses[x[i]] += 1\n        houses[x[i] + 1] += 1\n\n    max_occupied = max(houses)\n    min_occupied = 0\n\n    return str(min_occupied) + \" \" + str(max_occupied)"
    },
    {
        "number": 4281,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    x = list(map(int, stdin.split()[1:]))\n\n    min_occupied = max_occupied = 0\n    for i in range(1, n + 1):\n        if i - 1 in x or i + 1 in x:\n            min_occupied += 1\n            max_occupied += 1\n        else:\n            min_occupied += 1\n            max_occupied += 2\n\n    return str(min_occupied) + \" \" + str(max_occupied)"
    },
    {
        "number": 4281,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    x = list(map(int, stdin.readline().strip().split()))\n    \n    min_occupied = 1\n    max_occupied = 1\n    \n    for i in range(n):\n        min_occupied = max(min_occupied, x[i] - 1, x[i] + 1)\n        max_occupied = min(max_occupied, x[i] - 1, x[i] + 1)\n    \n    if min_occupied == 0:\n        min_occupied = 1\n    \n    if max_occupied == -1:\n        max_occupied = 1\n    \n    return f\"{min_occupied} {max_occupied}\""
    },
    {
        "number": 4281,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    x = list(map(int, stdin.split()[1:]))\n    occupied = set()\n    \n    for i in range(n):\n        occupied.add(x[i] - 1)\n        occupied.add(x[i] + 1)\n        occupied.add(x[i])\n    \n    return str(min(occupied)) + \" \" + str(max(occupied))"
    },
    {
        "number": 4281,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, x_str = stdin.split()\n    x = list(map(int, x_str.split()))\n\n    occupied_houses = set(x)\n    max_occupied_houses = len(occupied_houses)\n    min_occupied_houses = len(occupied_houses)\n\n    for friend in x:\n        if friend > 1 and x[friend - 2] not in occupied_houses:\n            max_occupied_houses += 1\n        if friend < n and x[friend] not in occupied_houses:\n            max_occupied_houses += 1\n        if friend > 1 and x[friend - 2] == friend - 1:\n            min_occupied_houses -= 1\n        if friend < n and x[friend] == friend + 1:\n            min_occupied_houses -= 1\n\n    return str(min_occupied_houses) + \" \" + str(max_occupied_houses)"
    },
    {
        "number": 4281,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    x = list(map(int, stdin.split()[1:]))\n    occupied_houses = set(x)\n    max_occupied_houses = len(occupied_houses)\n    min_occupied_houses = max(1, len(occupied_houses) - n + 1)\n    \n    return f\"{min_occupied_houses} {max_occupied_houses}\""
    },
    {
        "number": 4281,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, friends = stdin.split(\"\\n\")\n    n = int(n)\n    friends = [int(x) for x in friends.split()]\n\n    min_occupied = max_occupied = len(set(friends))\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(friends[i] - friends[j]) == 1:\n                min_occupied = max(min_occupied, 2)\n            else:\n                min_occupied = max(min_occupied, 1)\n\n    for i in range(n):\n        for j in range(n):\n            if abs(friends[i] - friends[j]) in [0, 1, 2]:\n                max_occupied = min(max_occupied, 3)\n\n    return f\"{min_occupied} {max_occupied}\""
    },
    {
        "number": 4281,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    x = list(map(int, stdin.split()[1:]))\n    \n    # Minimum occupied houses\n    min_houses = 1\n    # Maximum occupied houses\n    max_houses = 1\n    \n    # Iterate through all the houses\n    for i in range(n):\n        min_houses = max(min_houses, x[i] - 1, x[i] + 1)\n        max_houses = min(max_houses, x[i] - 1, x[i] + 1)\n    \n    # Add the houses at the end\n    min_houses = max(min_houses, n + 1)\n    max_houses = min(max_houses, n + 1)\n    \n    # Check if the minimum number of houses is greater than 0\n    min_houses = max(min_houses, 1)\n    \n    return f\"{min_houses} {max_houses}\""
    },
    {
        "number": 4281,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    x = list(map(int, stdin.split()[1:]))\n    min_houses = max_houses = x[0]\n    \n    for i in range(1, n):\n        min_houses = min(min_houses, x[i] - 1)\n        max_houses = max(max_houses, x[i] + 1)\n    \n    min_houses = max(min_houses, 0)\n    max_houses = min(max_houses, n + 1)\n    \n    return f\"{min_houses} {max_houses}\""
    },
    {
        "number": 4282,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin.readline())\n    kids_info = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n\n    # Initialize permutation as an array with all kids\n    permutation = list(range(1, n + 1))\n\n    # Loop through all kids\n    for i in range(n):\n        # Get the kids that the i-th kid remembered\n        remembered_kids = kids_info[i]\n\n        # Find the index of the next kid in the permutation\n        j = permutation.index(remembered_kids[0])\n\n        # Find the index of the next kid for the next kid in the permutation\n        k = permutation.index(remembered_kids[1])\n\n        # If the next kid is the last kid in the permutation, wrap around to the first kid\n        if k == n - 1:\n            k = 0\n\n        # If the next kid is the current kid, then the next kid for the current kid is the next kid for the next kid\n        elif permutation[k + 1] == i + 1:\n            k += 1\n\n        # Swap the kids at indices j and k in the permutation\n        permutation[j], permutation[k] = permutation[k], permutation[j]\n\n    return \" \".join(map(str, permutation))"
    },
    {
        "number": 4282,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    kids = {}\n    for i in range(n):\n        a, b = map(int, stdin.splitlines()[1+i].split())\n        kids.setdefault(a, set()).add(i+1)\n        kids.setdefault(b, set()).add(i+1)\n\n    result = []\n    for i in range(1, n+1):\n        result.append(i)\n        while len(kids[result[-1]]) == 1:\n            next_kid = kids[result[-1]].pop()\n            kids[result[-1]].add(next_kid)\n            result.append(next_kid)\n\n    return \" \".join(map(str, result))\n\ninput_data = \"\"\"5\n3 5\n1 4\n2 4\n1 5\n2 3\"\"\"\nprint(solution(input_data)) "
    },
    {
        "number": 4282,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def get_next_kid(kid, n):\n        return (kid % n) + 1\n\n    def restore_order(info, n):\n        order = [0] * n\n        for i, (a, b) in enumerate(info):\n            order[i] = a\n            order[b] = b\n            info[i] = (b, get_next_kid(b, n))\n        return order\n\n    n = int(stdin.readline())\n    info = []\n    for _ in range(n):\n        a, b = map(int, stdin.readline().split())\n        info.append((a, b))\n\n    return ' '.join(map(str, restore_order(info, n)))"
    },
    {
        "number": 4282,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    kids = []\n    for _ in range(n):\n        kids.append(list(map(int, stdin.readline().strip().split())))\n    \n    permutation = []\n    for i in range(n):\n        for j in range(n):\n            if kids[j][0] in kids[i] and kids[j][1] in kids[i]:\n                permutation.append(j+1)\n                break\n    \n    return ' '.join(map(str, permutation))\n"
    },
    {
        "number": 4282,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def get_next(p: int, n: int) -> int:\n        return (p % n) + 1\n\n    def get_neighbors(p1: int, p2: int) -> tuple:\n        return (p1, p2) if p1 < p2 else (p2, p1)\n\n    def find_cycle(n: int, neighbors: list) -> list:\n        p = 1\n        cycle = [p]\n        while len(cycle) < n:\n            p = neighbors[p - 1][0]\n            cycle.append(p)\n        return cycle\n\n    def reconstruct_order(n: int, neighbors: list) -> list:\n        p = 1\n        order = [p]\n        while len(order) < n:\n            p = neighbors[p - 1][1]\n            order.append(p)\n        return order\n\n    n = int(stdin.readline())\n    neighbors = []\n\n    for _ in range(n):\n        a, b = map(int, stdin.readline().split())\n        neighbors.append(get_neighbors(a, b))\n\n    neighbors.sort(key=lambda x: x[0])\n    cycle = find_cycle(n, neighbors)\n    order = reconstruct_order(n, neighbors)\n\n    return \" \".join(map(str, order))"
    },
    {
        "number": 4282,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(perm):\n        for i in range(len(perm)):\n            for j in range(i + 2, len(perm)):\n                if perm[i] == perm[j] or perm[i] == perm[j - 1]:\n                    return False\n        return True\n\n    n = int(stdin.readline())\n    kids = {1, 2, 3, 4, 5}\n    info = {}\n    for i in range(n):\n        a, b = map(int, stdin.readline().split())\n        info[(i + 1, a)] = b\n        info[(i + 1, b)] = a\n\n    perm = list(kids)\n    for i in range(n):\n        a1, a2 = info[(i + 1, perm[i])], info[(i + 1, perm[(i + 1) % n])]\n        if a1 == perm[(i + 1) % n]:\n            perm = perm[i:] + perm[:i]\n        else:\n            perm = perm[:i] + perm[i + 1:] + perm[i:i + 1]\n\n    if is_valid(perm):\n        return \" \".join(map(str, perm))\n    else:\n        raise ValueError(\"No solution found\") "
    },
    {
        "number": 4282,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    kids = [[] for _ in range(n)]\n    for i in range(n):\n        a, b = map(int, stdin.readline().strip().split())\n        kids[a - 1].append(b - 1)\n        kids[b - 1].append(a - 1)\n    \n    p = [i for i in range(n)]\n    result = []\n    while kids:\n        i = 0\n        while i < n:\n            if kids[i]:\n                break\n            i += 1\n        else:\n            break\n        \n        j = kids[i][0]\n        result.append(j + 1)\n        kids[j].remove(i)\n        if not kids[j]:\n            kids.pop(j)\n    \n    return \" \".join(map(str, result)) "
    },
    {
        "number": 4282,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    kids = list(range(1, n + 1))\n\n    for line in stdin.splitlines()[1:]:\n        a, b = map(int, line.split())\n        kids[kids.index(a)], kids[kids.index(b)] = kids[kids.index(b)], kids[kids.index(a)]\n\n    return \" \".join(map(str, kids))"
    },
    {
        "number": 4282,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    kids = [[] for _ in range(n)]\n    \n    for i in range(n):\n        line = stdin.split('\\n')[i+1]\n        kid_1, kid_2 = map(int, line.split())\n        kids[kid_1-1].append(kid_2-1)\n        kids[kid_2-1].append(kid_1-1)\n    \n    permutation = []\n    visited = [False] * n\n    current_kid = 0\n    while not all(visited):\n        if not visited[current_kid]:\n            visited[current_kid] = True\n            permutation.append(current_kid)\n        current_kid = kids[current_kid][0] if kids[current_kid] else 0\n        \n    return \" \".join(map(str, permutation))"
    },
    {
        "number": 4282,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    kids = {}\n    for i in range(1, n + 1):\n        kids[i] = []\n\n    for i in range(1, n + 1):\n        line = stdin.splitlines()[i].split()\n        a, b = int(line[0]), int(line[1])\n        kids[a].append(b)\n        kids[b].append(a)\n\n    for key, value in kids.items():\n        kids[key] = set(value)\n\n    # find the first kid\n    for key, value in kids.items():\n        if len(value) == n - 1:\n            first_kid = key\n            break\n\n    # find the rest of the kids\n    kids_order = [first_kid]\n    next_kid = first_kid\n    while len(kids_order) < n:\n        for kid in kids[next_kid]:\n            if kid not in kids_order:\n                kids_order.append(kid)\n                next_kid = kid\n                break\n\n    return \" \".join(map(str, kids_order))\n\ninput_str = \"\"\"5\n3 5\n1 4\n2 4\n1 5\n2 3\n\"\"\"\nprint(solution(input_str)) # Output: 3 2 4 1 5 \n\ninput_str = \"\"\"3\n2 3\n3 1\n1 2\n\"\"\"\nprint(solution(input_str)) # Output: 3 1 2 "
    },
    {
        "number": 4283,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    a.sort()\n    max_balanced_team = 0\n    \n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if abs(a[i] - a[j]) <= 5:\n                max_balanced_team += 1\n            else:\n                break\n    \n    return str(max_balanced_team)"
    },
    {
        "number": 4283,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    skills = [int(x) for x in stdin.split('\\n')[1].split()]\n    max_team_size = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(skills[i] - skills[j]) <= 5:\n                max_team_size = max(max_team_size, 2)\n                \n    return str(max_team_size)"
    },
    {
        "number": 4283,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    skills = list(map(int, stdin.split('\\n')[1].split()))\n    skills.sort()\n    \n    max_balanced_team = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            if skills[j] - skills[i] > 5:\n                break\n            for k in range(j+1, n):\n                if skills[k] - skills[j] > 5:\n                    break\n                max_balanced_team = max(max_balanced_team, k - i + 1)\n    \n    return str(max_balanced_team)"
    },
    {
        "number": 4283,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    skills = list(map(int, stdin.split()[1:]))\n    skills.sort()\n    max_balanced_teams = 0\n    current_balanced_teams = 1\n    for i in range(1, n):\n        if skills[i] - skills[i-1] > 5:\n            max_balanced_teams = max(max_balanced_teams, current_balanced_teams)\n            current_balanced_teams = 1\n        else:\n            current_balanced_teams += 1\n    max_balanced_teams = max(max_balanced_teams, current_balanced_teams)\n    return str(max_balanced_teams)\n\ndef"
    },
    {
        "number": 4283,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, skills = map(int, stdin.split())\n    skills = sorted(list(set(skills)))\n    max_team_size = 0\n\n    for i in range(len(skills) - 1):\n        for j in range(i + 1, len(skills)):\n            if skills[j] - skills[i] <= 5:\n                team_size = 2\n                while (j + 1 < len(skills) and skills[j + 1] - skills[j] <= 5):\n                    team_size += 1\n                    j += 1\n                max_team_size = max(max_team_size, team_size)\n\n    return str(max_team_size)"
    },
    {
        "number": 4283,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    students = list(map(int, stdin.split()[1:]))\n    students.sort()\n\n    def is_balanced(team: list) -> bool:\n        for i in range(len(team)):\n            for j in range(i + 1, len(team)):\n                if abs(team[i] - team[j]) > 5:\n                    return False\n        return True\n\n    def max_balanced_team(students: list, target_team_size: int) -> int:\n        max_balanced_team_size = 0\n        for team_size in range(1, target_team_size + 1):\n            for team in itertools.combinations(students, team_size):\n                if is_balanced(team):\n                    max_balanced_team_size = team_size\n        return max_balanced_team_size\n\n    max_team_size = min(n, 5)\n    max_balanced_team_size = 0\n\n    while max_team_size >= 1:\n        max_balanced_team_size = max_balanced_team(students, max_team_size)\n        if max_balanced_team_size > 0:\n            break\n        max_team_size -= 1\n\n    return str(max_balanced_team_size)"
    },
    {
        "number": 4283,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = [int(x) for x in stdin.split()[1:]]\n    max_count = 0\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(a[i] - a[j]) <= 5:\n                count += 1\n            else:\n                max_count = max(max_count, count)\n                count = 0\n    max_count = max(max_count, count)\n    return str(max_count)"
    },
    {
        "number": 4283,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    a.sort()\n\n    max_team = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if a[j] - a[i] <= 5:\n                max_team += 1\n\n    return str(max_team)"
    },
    {
        "number": 4283,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    skills = list(map(int, stdin.readline().strip().split()))\n\n    # Sort the students by their skills\n    skills.sort()\n\n    # Initialize the maximum number of students in a balanced team\n    max_balanced_team = 0\n\n    # Iterate through the sorted skills\n    for i in range(n):\n        # Iterate through the remaining skills\n        for j in range(i + 1, n):\n            # Check if the difference between the skills is less than or equal to 5\n            if skills[j] - skills[i] <= 5:\n                # Update the maximum balanced team size\n                max_balanced_team = max(max_balanced_team, j - i)\n            else:\n                # If the difference is greater than 5, we cannot create a balanced team with more students\n                break\n\n    return str(max_balanced_team)"
    },
    {
        "number": 4283,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    skills = list(map(int, stdin.split('\\n')[1].split()))\n    \n    # Sort the skills in ascending order\n    skills.sort()\n    \n    # Initialize a variable to store the maximum possible number of students in a balanced team\n    max_team_size = 1\n    \n    # Iterate over the sorted skills\n    for i in range(n):\n        # Calculate the difference between the current skill and the minimum skill of the remaining students\n        diff = skills[i] - skills[0]\n        \n        # Check if the difference is less than or equal to 5\n        if diff <= 5:\n            # Calculate the maximum possible number of students in a balanced team\n            team_size = i + 1\n            \n            # Update the maximum possible number of students in a balanced team\n            if team_size > max_team_size:\n                max_team_size = team_size\n    \n    return str(max_team_size)"
    },
    {
        "number": 4284,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def can_complete_game(n, k, a, b):\n        if k > a and k > b:\n            return True\n        for i in range(n):\n            if k - a <= 0:\n                return False\n            k -= a\n        return True\n\n    def max_turns(n, k, a, b):\n        max_turns = 0\n        for i in range(n):\n            if k - a > 0:\n                max_turns += 1\n                k -= a\n            elif k - b > 0:\n                k -= b\n            else:\n                return -1\n        return max_turns\n\n    lines = stdin.split(\"\\n\")\n    result = []\n    for line in lines[1:]:\n        k, n, a, b = list(map(int, line.split()))\n        if can_complete_game(n, k, a, b):\n            result.append(max_turns(n, k, a, b))\n        else:\n            result.append(-1)\n    return \"\\n\".join(map(str, result))\n\ninput_data = \"6\\n15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\"\nprint(solution(input_data)) "
    },
    {
        "number": 4284,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    q = int(stdin.strip().split()[0])\n    results = []\n    \n    for i in range(q):\n        # read query\n        k, n, a, b = map(int, stdin.strip().split())\n        \n        # check if Vova can complete the game\n        if k < a + b:\n            results.append(-1)\n            continue\n        \n        # calculate the maximum possible number of just-play turns\n        max_turns = (k - a) // b\n        \n        # add result to list\n        results.append(max_turns)\n    \n    # print output\n    return '\\n'.join(map(str, results))"
    },
    {
        "number": 4284,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split()[0])\n    result = []\n    for _ in range(q):\n        k, n, a, b = map(int, input().split())\n        turns = 0\n        while k > 0 and n > 0:\n            if k > a and k > b:\n                k -= a\n                turns += 1\n            elif k > a:\n                k -= b\n                turns += 1\n            else:\n                break\n            n -= 1\n        if n == 0:\n            result.append(turns)\n        else:\n            result.append(-1)\n    return \"\\n\".join(map(str, result))"
    },
    {
        "number": 4284,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split()[0])\n    results = []\n\n    for _ in range(q):\n        k, n, a, b = map(int, input().split())\n\n        if b > a:\n            results.append(n * (a - b))\n        else:\n            results.append(-1)\n\n    return \"\\n\".join(map(str, results))"
    },
    {
        "number": 4284,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    queries = stdin.split(\"\\n\")\n    # Initialize the output string\n    output = \"\"\n    # Process each query\n    for i in range(1, len(queries)):\n        # Read the query\n        k, n, a, b = map(int, queries[i].split())\n        # Calculate the maximum number of turns Vova can just play\n        max_turns = max(0, n - ((k - b) // (a - b)) - (k - a) // a)\n        # Check if Vova can complete the game\n        if k - a * max_turns - b * (n - max_turns) < 0:\n            output += \"-1\\n\"\n        else:\n            output += str(max_turns) + \"\\n\"\n    # Return the output\n    return output "
    },
    {
        "number": 4284,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def play_turns(n: int, a: int, b: int, k: int) -> int:\n        turns = 0\n        charge = k\n        while n > 0:\n            if charge > b:\n                charge -= b\n                turns += 1\n                n -= 1\n            elif charge > a:\n                charge -= a\n                turns += 1\n                n -= 1\n            else:\n                break\n        return turns\n\n    lines = stdin.split('\\n')\n    output = []\n    for line in lines[1:]:\n        k, n, a, b = map(int, line.split())\n        if b >= a:\n            output.append(-1)\n        else:\n            output.append(play_turns(n, a, b, k))\n\n    return \"\\n\".join(map(str, output))\n\ninput_str = \"\"\"6\n15 5 3 2\n15 5 4 3\n15 5 2 1\n15 5 5 1\n16 7 5 2\n20 5 7 3\"\"\"\n\nprint(solution(input_str)) "
    },
    {
        "number": 4284,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    result = []\n    \n    for _ in range(q):\n        k, n, a, b = map(int, stdin.readline().strip().split())\n        turns = 0\n        charge = k\n        \n        while n > 0:\n            if charge > a:\n                charge -= a\n                turns += 1\n            elif charge > b:\n                charge -= b\n                turns += 1\n            else:\n                break\n            n -= 1\n        \n        if n == 0:\n            result.append(turns)\n        else:\n            result.append(-1)\n    \n    return '\\n'.join(map(str, result))\n\ndef"
    },
    {
        "number": 4284,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    result = []\n\n    for _ in range(q):\n        k, n, a, b = map(int, stdin.readline().strip().split())\n\n        if a >= b:\n            result.append(-1)\n        else:\n            max_plays = min(k // a, n)\n            result.append(max_plays)\n\n    return \"\\n\".join(map(str, result))\n"
    },
    {
        "number": 4284,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    res = []\n\n    for _ in range(q):\n        k, n, a, b = map(int, stdin.readline().strip().split())\n\n        if k < b:\n            res.append(-1)\n        else:\n            res.append(min(n, (k - b * n) // a))\n\n    return \"\\n\".join(map(str, res))\n"
    },
    {
        "number": 4284,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    for q in range(int(stdin.readline())):\n        k, n, a, b = map(int, stdin.readline().split())\n        if n == 0:\n            result.append(0)\n        else:\n            turns = 0\n            while k >= a:\n                turns += 1\n                k -= a\n            if k >= b:\n                result.append(turns)\n            else:\n                result.append(-1)\n    return \"\\n\".join(map(str, result))\n\nstdin = open(\"input.txt\", \"r\")\nstdout = open(\"output.txt\", \"w\")\nstdout.write(solution(stdin))\nstdout.close() "
    },
    {
        "number": 4285,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    \n    # Count the number of question marks in the string\n    k = 0\n    for char in s:\n        if char == '?':\n            k += 1\n    \n    # Calculate the number of subsequences \"abc\" in all possible strings\n    count = 0\n    for i in range(3**k):\n        binary = format(i, '0{}b'.format(k))\n        for j in range(n - k):\n            if binary[j:j+k] == '0' * k:\n                count += s.count('a')\n            else:\n                count += 1\n    \n    # Calculate the result modulo 10^9 + 7\n    return str((count * (3**k) * 3) % (10**9 + 7))"
    },
    {
        "number": 4285,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    s = stdin.split(\"\\n\")[1]\n    \n    s_list = list(s)\n    q_count = s_list.count(\"?\")\n    total_strings = 3 ** q_count\n    \n    for index, char in enumerate(s_list):\n        if char == \"?\":\n            s_list[index] = \"a\"\n            s_list[index] += \"b\"\n            s_list[index] += \"c\"\n        else:\n            s_list[index] = char\n    \n    total_subsequences = 0\n    for i in range(len(s_list) - 2):\n        if s_list[i:i+3] == [\"a\", \"b\", \"c\"]:\n            total_subsequences += 1\n    \n    return str(total_subsequences * total_strings % (10**9 + 7))\n"
    },
    {
        "number": 4285,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n\n    def count_subsequences(s: str) -> int:\n        s = s.replace('?', 'a')\n        s = s.replace('?', 'b')\n        s = s.replace('?', 'c')\n        count = 0\n        for i in range(len(s) - 2):\n            if s[i:i+3] == 'abc':\n                count += 1\n        return count\n\n    total_count = 0\n    for i in range(len(s) - 2):\n        if s[i:i+3] == '???':\n            total_count += count_subsequences(s[:i] + 'a' + s[i+1:])\n            total_count += count_subsequences(s[:i] + 'b' + s[i+1:])\n            total_count += count_subsequences(s[:i] + 'c' + s[i+1:])\n        elif s[i] == '?':\n            total_count += count_subsequences(s[:i] + 'a' + s[i+1:])\n            total_count += count_subsequences(s[:i] + 'b' + s[i+1:])\n            total_count += count_subsequences(s[:i] + 'c' + s[i+1:])\n\n    return str(total_count % (10**9 + 7))"
    },
    {
        "number": 4285,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    count = 0\n    for i in range(1, n):\n        for j in range(i+1, n+1):\n            if s[i:j] == \"abc\":\n                count += 1\n    return str(count % (10**9 + 7))"
    },
    {
        "number": 4285,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split()\n    n = int(n)\n\n    def count_abc_subsequences(s: str) -> int:\n        count = 0\n        for i in range(len(s) - 2):\n            if s[i:i + 3] == \"abc\":\n                count += 1\n        return count\n\n    all_strings = [s]\n    for i in range(n):\n        if s[i] == \"?\":\n            new_strings = []\n            for string in all_strings:\n                for letter in \"abc\":\n                    new_string = string[:i] + letter + string[i + 1:]\n                    new_strings.append(new_string)\n            all_strings = new_strings\n\n    total_count = 0\n    for string in all_strings:\n        total_count += count_abc_subsequences(string)\n\n    return str(total_count % (10**9 + 7))"
    },
    {
        "number": 4285,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n\n    def count_subsequences(s: str) -> int:\n        count = 0\n        n = len(s)\n        for i in range(n - 2):\n            if s[i:i+3] == \"abc\":\n                count += 1\n        return count\n\n    result = 0\n    for i in range(3**n):\n        binary = format(i, f'0{n}b')\n        new_s = \"\"\n        for j in range(n):\n            if s[j] == \"?\":\n                new_s += \"abc\"[int(binary[j])]\n            else:\n                new_s += s[j]\n        result += count_subsequences(new_s)\n\n    return str(result % (10**9 + 7))"
    },
    {
        "number": 4285,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    k = s.count('?')\n\n    def count_subsequences(s: str, target: str) -> int:\n        count = 0\n        for i in range(len(s) - len(target) + 1):\n            if s[i:i + len(target)] == target:\n                count += 1\n        return count\n\n    total_count = 0\n    for i in range(3**k):\n        binary = bin(i)[2:].zfill(k)\n        replacement = ''.join(s[j] if s[j] != '?' else 'abc'[binary[j]] for j in range(n))\n        total_count += count_subsequences(replacement, 'abc')\n\n    return str(total_count % (10**9 + 7))"
    },
    {
        "number": 4285,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n\n    def replace_question_marks(string):\n        return string.replace(\"?\", \"a\").replace(\"?\", \"b\").replace(\"?\", \"c\")\n\n    def count_subsequences(string):\n        return string.count(\"abc\")\n\n    count = 0\n    for i in range(3 ** (s.count(\"?\"))):\n        modified_string = replace_question_marks(s)\n        count += count_subsequences(modified_string)\n        s = s.replace(\"?\", \"a\", 1)\n\n    return str(count % (10**9 + 7))"
    },
    {
        "number": 4285,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    s = stdin.strip().split()[1]\n    mod = 10**9 + 7\n    count = 0\n    for i in range(1, 3**n):\n        binary = bin(i)[2:]\n        binary = '0'*(n-len(binary)) + binary\n        temp = ''\n        for j in range(len(binary)):\n            if s[j] == '?':\n                if binary[j] == '0':\n                    temp += 'a'\n                elif binary[j] == '1':\n                    temp += 'b'\n                else:\n                    temp += 'c'\n            else:\n                temp += s[j]\n        if 'abc' in temp:\n            count += 1\n    return str(count % mod)"
    },
    {
        "number": 4285,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n\n    def count_abc_subsequences(s: str) -> int:\n        count = 0\n        for i in range(len(s) - 2):\n            if s[i:i+3] == \"abc\":\n                count += 1\n        return count\n\n    if '?' not in s:\n        return str(count_abc_subsequences(s))\n\n    total_count = 0\n    for i in range(3):\n        for j in range(3):\n            for k in range(3):\n                new_s = s.replace('?', str(i) + str(j) + str(k))\n                total_count += count_abc_subsequences(new_s)\n\n    return str(total_count % (10**9 + 7))\n"
    },
    {
        "number": 4286,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    numbers = list(map(int, stdin.split()[2:n+2]))\n    offers = []\n    for i in range(m):\n        x, y, w = map(int, stdin.split()[2+n+i*3:2+n+i*3+3])\n        offers.append((x, y, w))\n    \n    def find(parent, x):\n        if parent[x] != x:\n            parent[x] = find(parent, parent[x])\n        return parent[x]\n    \n    def union(parent, rank, x, y):\n        rootX = find(parent, x)\n        rootY = find(parent, y)\n        if rootX == rootY:\n            return False\n        if rank[rootX] < rank[rootY]:\n            parent[rootX] = rootY\n        elif rank[rootX] > rank[rootY]:\n            parent[rootY] = rootX\n        else:\n            parent[rootY] = rootX\n            rank[rootX] += 1\n        return True\n    \n    parent = [i for i in range(n)]\n    rank = [0] * n\n    min_cost = 0\n    \n    for x, y, w in offers:\n        if find(parent, x) != find(parent, y):\n            min_cost += w\n            union(parent, rank, x, y)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if find(parent, i) != find(parent, j):\n                min_cost += numbers[i] + numbers[j]\n                union(parent, rank, i, j)\n    \n    return str(min_cost)"
    },
    {
        "number": 4286,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    numbers = list(map(int, stdin.split()[2:]))\n    graph = {i: set() for i in range(1, n+1)}\n    special_offers = []\n    for i in range(m):\n        x, y, w = map(int, stdin.split()[2:])\n        special_offers.append((x, y, w))\n        graph[x].add(y)\n        graph[y].add(x)\n    \n    def dfs(start):\n        visited = set()\n        stack = [start]\n        while stack:\n            vertex = stack.pop()\n            if vertex not in visited:\n                visited.add(vertex)\n                for neighbor in graph[vertex]:\n                    stack.append(neighbor)\n        return visited\n    \n    connected_components = []\n    for i in range(1, n+1):\n        if i not in connected_components:\n            connected_components.append(i)\n            for neighbor in graph[i]:\n                if neighbor not in connected_components:\n                    connected_components.extend(dfs(neighbor))\n    \n    min_cost = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            if i in graph[j+1]:\n                min_cost = min(min_cost, numbers[i] + numbers[j])\n            else:\n                for x, y, w in special_offers:\n                    if x == i+1 and y == j+1:\n                        min_cost = min(min_cost, w)\n    \n    return str(min_cost)\n\ninput_stdin = \"\"\"3 2\n1 3 3\n2 3 5\n2 1 1\"\"\"\nprint(solution(input_stdin)) # Output: 5 "
    },
    {
        "number": 4286,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    costs = []\n    \n    for _ in range(m):\n        x, y, w = list(map(int, stdin.split()))\n        costs.append((x, y, w))\n    \n    # Calculate initial graph cost\n    graph_cost = sum(a)\n    \n    # Calculate cost for each special offer\n    for x, y, w in costs:\n        graph_cost = min(graph_cost, graph_cost + w)\n    \n    return str(graph_cost)"
    },
    {
        "number": 4286,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def read_input() -> tuple:\n        n, m = map(int, stdin.readline().strip().split())\n        a = list(map(int, stdin.readline().strip().split()))\n        special_offers = []\n        for _ in range(m):\n            x, y, w = map(int, stdin.readline().strip().split())\n            special_offers.append((x - 1, y - 1, w))\n        return n, a, special_offers\n\n    def min_cost_to_make_connected(n: int, a: list, special_offers: list) -> int:\n        def find_parent(parent, i):\n            while parent[i] != i:\n                parent[i] = parent[parent[i]]\n                i = parent[i]\n            return i\n\n        parent = [i for i in range(n)]\n        min_cost = 0\n\n        for x, y, w in special_offers:\n            parent_x = find_parent(parent, x)\n            parent_y = find_parent(parent, y)\n            if parent_x != parent_y:\n                min_cost += w\n                parent[parent_y] = parent_x\n\n        for i in range(n):\n            for j in range(i + 1, n):\n                if a[i] + a[j] < min_cost:\n                    parent[find_parent(parent, i)] = find_parent(parent, j)\n                    min_cost = a[i] + a[j]\n\n        return min_cost\n\n    n, a, special_offers = read_input()\n    return str(min_cost_to_make_connected(n, a, special_offers))"
    },
    {
        "number": 4286,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    edges = []\n    for _ in range(m):\n        x, y, w = map(int, input().split())\n        edges.append((x, y, w))\n\n    def dfs(vertex, visited):\n        visited.add(vertex)\n        for neighbor in graph[vertex]:\n            if neighbor not in visited:\n                dfs(neighbor, visited)\n\n    graph = [[] for _ in range(n)]\n    for x, y, w in edges:\n        graph[x - 1].append((y - 1, w))\n        graph[y - 1].append((x - 1, w))\n\n    result = float('inf')\n    for i in range(n):\n        visited = set()\n        dfs(i, visited)\n        if len(visited) == n:\n            min_cost = 0\n            for x, y, w in edges:\n                min_cost += a[x - 1] + a[y - 1] - 2 * w\n            result = min(result, min_cost)\n\n    return str(result)\n\ninput_data = \"\"\"3 2\n1 3 3\n2 3 5\n2 1 1\"\"\"\nprint(solution(input_data)) "
    },
    {
        "number": 4286,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def add_edge(x, y):\n        nonlocal graph, used, edge_cost\n        if x not in graph:\n            graph[x] = set()\n        if y not in graph:\n            graph[y] = set()\n        if y not in graph[x]:\n            used[x].add(y)\n            used[y].add(x)\n            edge_cost[x][y] = edge_cost[y][x] = a[x] + a[y]\n\n    n, m = list(map(int, stdin.split()))\n    a = list(map(int, input().split()))\n    graph = {}\n    used = [set() for _ in range(n)]\n    edge_cost = [[0] * n for _ in range(n)]\n\n    for _ in range(m):\n        x, y, w = list(map(int, input().split()))\n        add_edge(x, y)\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            add_edge(i, j)\n\n    queue = [0]\n    visited = set(queue)\n    total_cost = 0\n    while queue:\n        new_queue = []\n        for node in queue:\n            for neighbor in graph[node]:\n                if neighbor not in visited:\n                    total_cost += edge_cost[node][neighbor]\n                    visited.add(neighbor)\n                    new_queue.append(neighbor)\n        queue = new_queue\n\n    return str(total_cost)"
    },
    {
        "number": 4286,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, m = map(int, lines[0].split())\n    a = list(map(int, lines[1].split()))\n    special_offers = []\n    for i in range(m):\n        x, y, w = map(int, lines[i + 2].split())\n        special_offers.append((x, y, w))\n\n    # Sort special offers by cost\n    special_offers.sort(key=lambda x: x[2])\n\n    # Find the minimum cost to connect all vertices\n    visited = [False] * n\n    min_cost = 0\n    for i in range(n):\n        if not visited[i]:\n            current_cost = 0\n            queue = [i]\n            while queue:\n                current = queue.pop(0)\n                visited[current] = True\n                for j in range(n):\n                    if not visited[j] and (current, j) in special_offers:\n                        special_offer = special_offers.index((current, j))\n                        current_cost += special_offers[special_offer][2]\n                        queue.append(j)\n                    elif not visited[j] and current != j:\n                        current_cost += a[current] + a[j]\n                        queue.append(j)\n            min_cost += current_cost\n\n    return str(min_cost)"
    },
    {
        "number": 4286,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a_list = list(map(int, stdin.split()[2:]))\n    vertices = [i for i in range(n)]\n    graph = {i: [] for i in range(n)}\n    special_offers = []\n    for i in range(m):\n        x, y, w = map(int, stdin.split()[2:])\n        special_offers.append((x-1, y-1, w))\n\n    min_cost = float('inf')\n    for combination in itertools.combinations(special_offers, len(special_offers)):\n        total_cost = 0\n        new_graph = {i: [] for i in range(n)}\n        for offer in combination:\n            x, y, w = offer\n            new_graph[x].append(y)\n            new_graph[y].append(x)\n            total_cost += w\n\n        visited = [False] * n\n        queue = [0]\n        while queue:\n            current = queue.pop(0)\n            visited[current] = True\n            for neighbor in new_graph[current]:\n                if not visited[neighbor]:\n                    queue.append(neighbor)\n\n        if all(visited):\n            min_cost = min(min_cost, total_cost)\n\n    return str(min_cost)\n\nimport sys\ninput_string = sys.stdin.read()\nprint(solution(input_string)) "
    },
    {
        "number": 4286,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    numbers = list(map(int, stdin.split()[2:]))\n    special_offers = []\n\n    for i in range(m):\n        x, y, w = map(int, stdin.split()[2:])\n        special_offers.append((x - 1, y - 1, w))\n\n    # Calculate the shortest path using Floyd-Warshall algorithm\n    dist = [[float('inf')] * n for _ in range(n)]\n    for i in range(n):\n        dist[i][i] = 0\n\n    for offer in special_offers:\n        x, y, w = offer\n        dist[x][y] = w\n        dist[y][x] = w\n\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n\n    # Calculate the minimum number of coins\n    min_coins = 0\n    for i in range(n):\n        min_coins += min(sum(numbers[j] for j in range(n) if dist[i][j] != float('inf')) - numbers[i], numbers[i])\n\n    return str(min_coins)"
    },
    {
        "number": 4286,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    numbers = list(map(int, stdin.split()[2:]))\n    graph = {i: set() for i in range(1, n+1)}\n\n    for i in range(m):\n        x, y, w = map(int, stdin.split()[2+i*3:5+i*3])\n        graph[x].add(y)\n        graph[y].add(x)\n\n    def dfs(node, visited):\n        visited.add(node)\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                dfs(neighbor, visited)\n\n    min_cost = 0\n    for i in range(1, n+1):\n        if i not in graph:\n            start = i\n            break\n    else:\n        return \"0\"\n\n    visited = set()\n    dfs(start, visited)\n\n    if len(visited) != n:\n        for i in range(1, n+1):\n            if i not in visited:\n                min_cost += numbers[i-1]\n\n    return str(min_cost)\n"
    },
    {
        "number": 4287,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, stdin.split()[:3])\n    rain_segments = []\n    umbrellas = []\n\n    for _ in range(n):\n        l, r = map(int, stdin.split()[3:])\n        rain_segments.append((l, r))\n\n    for _ in range(m):\n        x, p = map(int, stdin.split()[3:])\n        umbrellas.append((x, p))\n\n    umbrellas.sort(key=lambda x: x[0])\n\n    def is_in_rain(position: int, segment: tuple) -> bool:\n        return position >= segment[0] and position < segment[1]\n\n    def get_fatigue(umbrella: tuple) -> int:\n        return umbrella[1]\n\n    def get_weight(umbrella: tuple) -> int:\n        return umbrella[1]\n\n    def get_position(umbrella: tuple) -> int:\n        return umbrella[0]\n\n    def get_distance(position1: int, position2: int) -> int:\n        return abs(position2 - position1)\n\n    def can_move(current_position: int, next_position: int) -> bool:\n        for segment in rain_segments:\n            if is_in_rain(current_position, segment) and is_in_rain(next_position, segment):\n                return False\n        return True\n\n    def get_minimum_fatigue(current_position: int, umbrellas_to_consider: list) -> int:\n        minimum_fatigue = float('inf')\n        for i, umbrella in enumerate(umbrellas_to_consider):\n            if umbrella[0] <= current_position:\n                umbrellas_to_consider = umbrellas_to_consider[i:]\n                break\n\n        for umbrella in umbrellas_to_consider:\n            fatigue = get_fatigue(umbrella)\n            position = get_position(umbrella)\n            distance = get_distance(current_position, position)\n            minimum_fatigue = min(minimum_fatigue, fatigue * distance)\n\n        return minimum_fatigue\n\n    def get_next_position(current_position: int) -> int:\n        for i, segment in enumerate(rain_segments):\n            if is_in_rain(current_position, segment):\n                return segment[1]\n        return current_position + 1\n\n    current_position = 0\n    total_fatigue = 0\n\n    while current_position < a:\n        next_position = get_next_position(current_position)\n\n        if not can_move(current_position, next_position):\n            return \"-1\"\n\n        umbrellas_to_consider = [umbrella for umbrella in umbrellas if umbrella[0] <= next_position]\n        fatigue = get_minimum_fatigue(current_position, umbrellas_to_consider)\n        total_fatigue += fatigue\n        current_position = next_position\n\n    return total_fatigue\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4287,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, stdin.readline().split())\n    segments = []\n    for _ in range(n):\n        l, r = map(int, stdin.readline().split())\n        segments.append((l, r))\n    umbrellas = []\n    for _ in range(m):\n        x, p = map(int, stdin.readline().split())\n        umbrellas.append((x, p))\n\n    umbrellas.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[0])\n\n    fatigue = 0\n    i = 0\n    j = 0\n\n    while i < n and j < m:\n        if segments[i][0] < umbrellas[j][0]:\n            fatigue += umbrellas[j][1] * (segments[i][0] - umbrellas[j][0])\n            umbrellas[j] = (segments[i][0], umbrellas[j][1])\n            i += 1\n        elif segments[i][1] <= umbrellas[j][0]:\n            i += 1\n        else:\n            fatigue += umbrellas[j][1] * (segments[i][1] - umbrellas[j][0])\n            j += 1\n\n    while i < n:\n        fatigue += umbrellas[-1][1] * (segments[i][1] - umbrellas[-1][0])\n        i += 1\n\n    if segments[-1][1] < umbrellas[-1][0]:\n        return \"-1\"\n    else:\n        return str(fatigue)"
    },
    {
        "number": 4287,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, stdin.readline().split())\n    rain_segments = []\n    for _ in range(n):\n        l, r = map(int, stdin.readline().split())\n        rain_segments.append((l, r))\n    \n    umbrellas = []\n    for _ in range(m):\n        x, p = map(int, stdin.readline().split())\n        umbrellas.append((x, p))\n    \n    umbrellas.sort(key=lambda x: x[0])\n    rain_segments.sort(key=lambda x: x[0])\n    \n    def find_umbrella(x: int) -> int:\n        left, right = 0, len(umbrellas) - 1\n        while left < right:\n            mid = (left + right) // 2\n            if umbrellas[mid][0] <= x:\n                left = mid + 1\n            else:\n                right = mid\n        return left\n    \n    def calculate_fatigue(umbrella_weights: List[int], x: int) -> int:\n        fatigue = 0\n        umbrella_index = find_umbrella(x)\n        for i in range(umbrella_index, len(umbrella_weights)):\n            fatigue += umbrella_weights[i]\n        return fatigue\n    \n    min_fatigue = float('inf')\n    for i in range(n):\n        l, r = rain_segments[i]\n        for j in range(m):\n            x, p = umbrellas[j]\n            if l <= x and x + 1 <= r:\n                fatigue = calculate_fatigue([pw for _, pw in umbrellas[:j]], x)\n                min_fatigue = min(min_fatigue, fatigue)\n                fatigue = calculate_fatigue([pw for _, pw in umbrellas[j+1:]], x)\n                min_fatigue = min(min_fatigue, fatigue)\n    \n    return str(min_fatigue) if min_fatigue != float('inf') else \"-1\" "
    },
    {
        "number": 4287,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def can_make_way(rain_segments: List[List[int]], umbrella_locations: List[List[int]]) -> bool:\n        rain_points = [0] * a\n        for start, end in rain_segments:\n            rain_points[start:end] = [1] * (end - start)\n        umbrella_points = [0] * a\n        for location, weight in umbrella_locations:\n            umbrella_points[location] = weight\n\n        fatigue = 0\n        umbrellas = []\n        for i in range(a + 1):\n            rain_in_range = any(rain_points[max(0, i - 1):i + 1])\n            umbrella_in_range = umbrella_points[i] > 0\n            if umbrella_in_range and not rain_in_range:\n                fatigue += umbrella_points[i]\n            else:\n                fatigue += sum([u[1] for u in umbrellas])\n                if rain_in_range:\n                    umbrellas.append((i, umbrella_points[i]))\n                else:\n                    umbrellas = [(i, umbrella_points[i])]\n        return fatigue\n\n    a, n, m = map(int, stdin.readline().strip().split())\n    rain_segments = []\n    for _ in range(n):\n        start, end = map(int, stdin.readline().strip().split())\n        rain_segments.append((start, end))\n\n    umbrella_locations = []\n    for _ in range(m):\n        location, weight = map(int, stdin.readline().strip().split())\n        umbrella_locations.append((location, weight))\n\n    if can_make_way(rain_segments, umbrella_locations):\n        fatigue = can_make_way(rain_segments, umbrella_locations)\n        return str(fatigue)\n    else:\n        return \"-1\""
    },
    {
        "number": 4287,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, input().split())\n    rain = []\n    for _ in range(n):\n        l, r = map(int, input().split())\n        rain.append((l, r))\n    umbrellas = []\n    for _ in range(m):\n        x, p = map(int, input().split())\n        umbrellas.append((x, p))\n\n    # Sort rain segments and umbrellas\n    rain.sort(key=lambda x: x[0])\n    umbrellas.sort(key=lambda x: x[0])\n\n    fatigue = 0\n    picked_umbrellas = []\n\n    # Move from left to right\n    for x in range(a + 1):\n        # Check if there is a rain segment at the current position\n        current_rain = next((r for l, r in rain if l <= x < r), None)\n\n        # Check if Polycarp should pick up an umbrella\n        current_umbrella = next((u for u in umbrellas if u[0] == x), None)\n        if current_umbrella:\n            picked_umbrellas.append(current_umbrella)\n\n        # Throw away umbrellas if there is no rain\n        if not current_rain and picked_umbrellas:\n            picked_umbrellas.pop()\n\n        # Update fatigue\n        fatigue += sum(p for _, p in picked_umbrellas)\n\n    # Check if Polycarp can make his way from point x = 0 to point x = a\n    if fatigue == 0 and any(current_umbrella for current_umbrella in umbrellas if current_umbrella[0] == 0):\n        return str(fatigue)\n    else:\n        return \"-1\""
    },
    {
        "number": 4287,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def find_umbrellas(x, umbrellas):\n        for i, umbrella in enumerate(umbrellas):\n            if umbrella[0] <= x <= umbrella[1]:\n                return i\n        return None\n\n    def fatigue(x, umbrellas):\n        i = find_umbrellas(x, umbrellas)\n        return 0 if i is None else umbrellas[i][2]\n\n    a, n, m = map(int, stdin.readline().split())\n    umbrellas = []\n    for i in range(m):\n        x, p = map(int, stdin.readline().split())\n        umbrellas.append((x, x, p))\n\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.readline().split())\n        segments.append((l, r))\n\n    fatigue_sum = 0\n    for x in range(a + 1):\n        umbrella_i = find_umbrellas(x, umbrellas)\n        has_umbrella = umbrella_i is not None\n        for segment in segments:\n            if segment[0] <= x < segment[1]:\n                if not has_umbrella:\n                    return \"-1\"\n                fatigue_sum += fatigue(x, umbrellas)\n                umbrellas.pop(umbrella_i)\n        if has_umbrella:\n            umbrellas.append((x, x, umbrellas[umbrella_i][2]))\n\n    return str(fatigue_sum)\n\ninput_data = \"\"\"10 2 4\n3 7\n8 10\n0 10\n3 4\n8 1\n1 2\"\"\"\nprint(solution(input_data)) "
    },
    {
        "number": 4287,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, stdin.readline().split())\n    rain = []\n    for _ in range(n):\n        l, r = map(int, stdin.readline().split())\n        rain.append((l, r))\n    \n    umbrellas = []\n    for _ in range(m):\n        x, p = map(int, stdin.readline().split())\n        umbrellas.append((x, p))\n    \n    umbrellas.sort(key=lambda x: x[0])\n    \n    def binary_search(rain: List[Tuple[int, int]], umbrella: Tuple[int, int]) -> bool:\n        l, r = umbrella\n        left, right = 0, len(rain) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if rain[mid][1] <= l:\n                left = mid + 1\n            elif rain[mid][0] >= r:\n                right = mid - 1\n            else:\n                return True\n        return False\n    \n    fatigue = 0\n    prev_x = 0\n    for x, p in umbrellas:\n        if x > prev_x:\n            for l, r in rain:\n                if binary_search(rain, (prev_x, x)):\n                    fatigue += p * (x - prev_x)\n                    break\n            else:\n                return \"-1\"\n            prev_x = x\n    return str(fatigue)\n\ninput_str = \"\"\nwith open(\"input.txt\", \"r\") as file:\n    input_str = file.read()\n\noutput_str = solution(input_str)\n\nwith open(\"output.txt\", \"w\") as file:\n    file.write(output_str) "
    },
    {
        "number": 4287,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, stdin.readline().split())\n    rain_segments = []\n    umbrellas = []\n\n    for _ in range(n):\n        l, r = map(int, stdin.readline().split())\n        rain_segments.append((l, r))\n\n    for _ in range(m):\n        x, p = map(int, stdin.readline().split())\n        umbrellas.append((x, p))\n\n    rain_segments.sort(key=lambda x: x[0])\n    umbrellas.sort(key=lambda x: x[0])\n\n    fatigue = 0\n    umbrella_positions = [0] * m\n    current_position = 0\n\n    for i in range(n):\n        l, r = rain_segments[i]\n\n        if l <= current_position < r:\n            continue\n\n        while current_position < l:\n            for j in range(m):\n                if umbrella_positions[j] < current_position:\n                    fatigue += umbrellas[j][1]\n                    umbrella_positions[j] = current_position\n                elif umbrella_positions[j] == current_position:\n                    fatigue -= umbrellas[j][1]\n                    umbrella_positions[j] = -1\n\n            current_position += 1\n\n    return str(fatigue)\n"
    },
    {
        "number": 4287,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, stdin.readline().split())\n    rain = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    umbrellas = [tuple(map(int, stdin.readline().split())) for _ in range(m)]\n\n    rain_segments = []\n    for l, r in rain:\n        rain_segments.append((l, r))\n\n    umbrellas.sort(key=lambda x: x[0])\n\n    def is_overlapping(a, b):\n        return a[1] >= b[0] and b[1] >= a[0]\n\n    def is_umbrella_needed(current_position, rain_segment):\n        if current_position >= rain_segment[1]:\n            return False\n        if current_position >= rain_segment[0]:\n            return True\n        return False\n\n    def fatigue(current_position, umbrella_weight, umbrellas_taken):\n        return umbrella_weight * (current_position - 0) + umbrellas_taken * a\n\n    current_position = 0\n    current_fatigue = 0\n    umbrellas_taken = 0\n\n    while current_position < a:\n        umbrella_needed = False\n        for rain_segment in rain_segments:\n            if is_overlapping(rain_segment, (current_position, current_position + 1)):\n                umbrella_needed = is_umbrella_needed(current_position, rain_segment)\n                if umbrella_needed:\n                    break\n\n        if umbrella_needed:\n            if umbrellas_taken == 0:\n                return \"-1\"\n            current_fatigue += fatigue(current_position, umbrellas[-1][1], umbrellas_taken)\n            current_position = umbrellas[-1][0]\n            umbrellas_taken -= 1\n        else:\n            current_position += 1\n\n    current_fatigue += fatigue(current_position, 0, umbrellas_taken)\n\n    return str(current_fatigue)\n\n\ninput_str = \"\"\"10 2 4\n3 7\n8 10\n0 10\n3 4\n8 1\n1 2\"\"\"\nprint(solution(input_str)) # Output: 14\n\ninput_str = \"\"\"10 1 1\n0 9\n0 5\n1 2\"\"\"\nprint(solution(input_str)) # Output: 45\n\ninput_str = \"\"\"10 1 1\n0 9\n1 5\"\"\"\nprint(solution(input_str)) # Output: -1 "
    },
    {
        "number": 4287,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, stdin.readline().strip().split())\n    rain_segments = [tuple(map(int, stdin.readline().strip().split())) for _ in range(n)]\n    umbrellas = [tuple(map(int, stdin.readline().strip().split())) for _ in range(m)]\n    \n    umbrella_locations = [x for x, p in umbrellas]\n    umbrella_weights = [p for x, p in umbrellas]\n    \n    # Sort umbrella locations and weights\n    umbrella_locations.sort()\n    umbrella_weights.sort(reverse=True)\n    \n    # Calculate minimum fatigue\n    fatigue = 0\n    current_location = 0\n    \n    for segment_start, segment_end in rain_segments:\n        while current_location < segment_start:\n            # Check if we need to pick up an umbrella\n            for i, umbrella_location in enumerate(umbrella_locations):\n                if umbrella_location <= current_location:\n                    break\n            else:\n                continue\n            \n            fatigue += umbrella_weights[i]\n            umbrella_locations.pop(i)\n            umbrella_weights.pop(i)\n        \n        if not umbrella_locations:\n            # We can't make it to the segment\n            return \"-1\"\n        \n        current_location = segment_end\n    \n    fatigue += sum(umbrella_weights)\n    \n    return str(fatigue)"
    },
    {
        "number": 4288,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    \n    if (A == B and C != A) or (B == C and A != B):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4288,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = list(map(int, stdin.split()))\n    if (a == b and c != a) or (a == c and b != a) or (b == c and a != b):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4288,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a == b or a == c or b == c:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4288,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a == b != c or a == c != b or b == c != a:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4288,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A == B or A == C or B == C:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4288,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A == B or A == C or B == C:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4288,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a == b or a == c or b == c:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4288,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n\n    if a == b == c:\n        return \"Yes\"\n    elif a == b or b == c or a == c:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4288,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A == B or A == C or B == C:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ndef"
    },
    {
        "number": 4288,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n\n    if a == b and b == c:\n        return \"No\"\n    elif (a == b and c != a) or (a == c and b != a) or (b == c and a != b):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4289,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N, T, A = map(int, lines[0].split())\n    H = list(map(int, lines[1].split()))\n\n    closest_place = -1\n    min_diff = float(\"inf\")\n\n    for i in range(N):\n        temp = T - H[i] * 0.006\n        diff = abs(temp - A)\n        if diff < min_diff:\n            min_diff = diff\n            closest_place = i + 1\n\n    return str(closest_place)"
    },
    {
        "number": 4289,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, T, A = map(int, stdin.split()[0:3])\n    H = list(map(int, stdin.split()[3:]))\n\n    index = -1\n    min_diff = float('inf')\n\n    for i in range(N):\n        temp = T - H[i] * 0.006\n        diff = abs(temp - A)\n\n        if diff < min_diff:\n            min_diff = diff\n            index = i\n\n    return str(index)\n\ninput_data = input()\nresult = solution(input_data)\nprint(result) "
    },
    {
        "number": 4289,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, T, A = map(int, stdin.split()[0:3])\n    H = list(map(int, stdin.split()[3:]))\n\n    min_diff = float('inf')\n    min_index = 0\n\n    for i in range(n):\n        temp = T - H[i] * 0.006\n        diff = abs(temp - A)\n\n        if diff < min_diff:\n            min_diff = diff\n            min_index = i\n\n    return str(min_index + 1)\n\n\ndef"
    },
    {
        "number": 4289,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def average_temperature(H, T, A):\n        return abs(T - (H * 0.006) - A)\n\n    N, T, A = map(int, stdin.split())\n    H_list = list(map(int, stdin.split()))[2:]\n\n    min_diff = float('inf')\n    index = -1\n\n    for i, H in enumerate(H_list):\n        curr_diff = average_temperature(H, T, A)\n        if curr_diff < min_diff:\n            min_diff = curr_diff\n            index = i\n\n    return str(index)\n"
    },
    {
        "number": 4289,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, T, A = map(int, stdin.split(\"\\n\")[0].split())\n    H = list(map(int, stdin.split(\"\\n\")[1].split()))\n    index = 0\n    min_diff = float('inf')\n    for i in range(N):\n        temp = T - H[i] * 0.006\n        diff = abs(temp - A)\n        if diff < min_diff:\n            min_diff = diff\n            index = i\n    return str(index + 1)"
    },
    {
        "number": 4289,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    T, A = map(int, lines[1].split())\n    H = list(map(int, lines[2].split()))\n\n    closest_place_index = 0\n    closest_temperature = float('inf')\n\n    for i in range(N):\n        temperature = T - H[i] * 0.006\n        if abs(temperature - A) < abs(closest_temperature - A):\n            closest_place_index = i\n            closest_temperature = temperature\n\n    return str(closest_place_index)"
    },
    {
        "number": 4289,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, T, A = map(int, stdin.split())\n    H = list(map(int, stdin.split()[3:]))\n\n    best_place = 0\n    min_diff = float('inf')\n\n    for i in range(N):\n        avg_temp = T - H[i] * 0.006\n        diff = abs(avg_temp - A)\n\n        if diff < min_diff:\n            best_place = i\n            min_diff = diff\n\n    return str(best_place + 1)\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4289,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    T, A = map(int, lines[1].split())\n    Hs = list(map(int, lines[2].split()))\n    closest_index = -1\n    closest_diff = float('inf')\n\n    for i in range(N):\n        temp = T - Hs[i] * 0.006\n        diff = abs(temp - A)\n        if diff < closest_diff:\n            closest_diff = diff\n            closest_index = i\n\n    return str(closest_index)"
    },
    {
        "number": 4289,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    N = int(input_list[0])\n    T, A = map(int, input_list[1].split())\n    H_list = list(map(int, input_list[2].split()))\n\n    closest_index = 0\n    closest_diff = float('inf')\n\n    for i in range(N):\n        avg_temp = T - H_list[i] * 0.006\n        diff = abs(avg_temp - A)\n        if diff < closest_diff:\n            closest_diff = diff\n            closest_index = i\n\n    return str(closest_index)\n\ninput_str = \"2\\n12 5\\n1000 2000\"\nprint(solution(input_str)) "
    },
    {
        "number": 4289,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N, T, A = map(int, lines[0].split())\n    elevations = list(map(int, lines[1].split()))\n\n    closest_place = None\n    min_distance = float('inf')\n\n    for i in range(N):\n        avg_temp = T - elevations[i] * 0.006\n        distance = abs(avg_temp - A)\n\n        if distance < min_distance:\n            min_distance = distance\n            closest_place = i\n\n    return str(closest_place + 1)"
    },
    {
        "number": 4290,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    if N == 0:\n        return str(M)\n    if M == 0:\n        return str(N)\n    if N % 2 == 0 and M % 2 == 0:\n        return str(2 * min(N, M))\n    if N % 2 == 0:\n        return str(2 * M)\n    if M % 2 == 0:\n        return str(2 * N)\n    return \"0\""
    },
    {
        "number": 4290,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n + m < 2:\n        return \"0\"\n    if n % 2 == 0:\n        return str((n + 1) * n // 2)\n    else:\n        return str((n // 2 + 1) * (n // 2))"
    },
    {
        "number": 4290,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    N_EVEN = N // 2\n    M_ODD = M // 2\n    return str(N_EVEN * M_ODD)"
    },
    {
        "number": 4290,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n\n    # Calculate the number of ways to choose 2 even balls\n    num_even_pairs = N * (N - 1) // 2\n\n    # Calculate the number of ways to choose 1 even ball and 1 odd ball\n    num_mixed_pairs = N * M\n\n    # Total number of pairs\n    total_pairs = num_even_pairs + num_mixed_pairs\n\n    return str(total_pairs // 2)"
    },
    {
        "number": 4290,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    return str(2 * min(N, M))"
    },
    {
        "number": 4290,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    \n    # Calculate the number of even and odd balls\n    even_count = N\n    odd_count = M\n    \n    # Calculate the number of pairs with an even sum\n    even_sum_count = (even_count * (even_count - 1)) // 2\n    odd_sum_count = (odd_count * (odd_count - 1)) // 2\n    \n    # Calculate the total number of pairs\n    total_pairs = (N * M) // 2\n    \n    # Calculate the final result\n    result = total_pairs - even_sum_count - odd_sum_count\n    \n    return str(result)"
    },
    {
        "number": 4290,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    count = 0\n    if N % 2 == 0:\n        count += M\n    if M % 2 == 0:\n        count += N\n    return str(count // 2)"
    },
    {
        "number": 4290,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    return (N * M) // 2 + N * (N - 1) // 2 + M * (M - 1) // 2"
    },
    {
        "number": 4290,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    even_count = n * (n-1) // 2\n    odd_count = m * (m-1) // 2\n    total_count = even_count + odd_count\n    return str(total_count)\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4290,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    if N > M:\n        N, M = M, N\n\n    if N == 0 or M == 0:\n        return str(0)\n    elif N == 1 and M == 1:\n        return str(1)\n    elif N == 2 and M == 2:\n        return str(6)\n    elif N == 1 and M == 2:\n        return str(3)\n    elif N == 2 and M == 1:\n        return str(3)\n    else:\n        return str(1)"
    },
    {
        "number": 4291,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, Q = map(int, stdin.split(\"\\n\")[0].split())\n    S = stdin.split(\"\\n\")[1]\n    queries = [list(map(int, line.split())) for line in stdin.split(\"\\n\")[2:-1]]\n\n    # answer queries\n    result = []\n    for l, r in queries:\n        substring = S[l-1:r]\n        count = substring.count(\"AC\")\n        result.append(count)\n\n    # format output\n    output = \"\\n\".join(map(str, result))\n    return output"
    },
    {
        "number": 4291,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.split()[0:2])\n    S = stdin.split()[2]\n    queries = [list(map(int, stdin.split()[i:i+2])) for i in range(2, 2+Q*2, 2)]\n\n    def count_substring(substring: str, string: str) -> int:\n        count = 0\n        for i in range(len(string) - len(substring) + 1):\n            if string[i:i+len(substring)] == substring:\n                count += 1\n        return count\n\n    results = []\n    for l, r in queries:\n        substring = \"AC\"\n        results.append(count_substring(substring, S[l-1:r]))\n\n    return \"\\n\".join(map(str, results))"
    },
    {
        "number": 4291,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N, Q = map(int, lines[0].split())\n    S = lines[1]\n    queries = [list(map(int, lines[i].split())) for i in range(2, 2 + Q)]\n\n    def count_ac(l: int, r: int) -> int:\n        count = 0\n        for i in range(l, r - 1):\n            if S[i:i + 2] == 'AC':\n                count += 1\n        return count\n\n    result = []\n    for query in queries:\n        l, r = query\n        result.append(str(count_ac(l - 1, r)))\n\n    return '\\n'.join(result)\n"
    },
    {
        "number": 4291,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N, Q = map(int, lines[0].split())\n    S = lines[1]\n    queries = [list(map(int, line.split())) for line in lines[2:-1]]\n\n    def count_substrings(substring: str, s: str) -> int:\n        count = 0\n        start = 0\n        while True:\n            start = s.find(substring, start)\n            if start == -1:\n                break\n            count += 1\n            start += 1\n        return count\n\n    results = []\n    for query in queries:\n        l, r = query\n        substring = S[l - 1: r]\n        results.append(count_substrings(\"AC\", substring))\n\n    return \"\\n\".join(map(str, results))"
    },
    {
        "number": 4291,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split('\\n')\n    N, Q = map(int, input_lines[0].split())\n    S = input_lines[1]\n    queries = [list(map(int, input_lines[i].split())) for i in range(2, N+Q+1)]\n    \n    result = []\n    for query in queries:\n        count = 0\n        l, r = query\n        for i in range(l, r-1):\n            if S[i:i+2] == \"AC\":\n                count += 1\n        result.append(str(count))\n    \n    return '\\n'.join(result)\n\ndef"
    },
    {
        "number": 4291,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, Q = map(int, stdin.split()[0:2])\n    S = stdin.split()[2]\n    queries = []\n    for i in range(Q):\n        l_i, r_i = map(int, stdin.split()[2+i:2+i+2])\n        queries.append((l_i, r_i))\n    \n    # Solve the problem\n    result = []\n    for l_i, r_i in queries:\n        substring = S[l_i-1:r_i]\n        count = substring.count('AC')\n        result.append(count)\n    \n    # Print the result\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 4291,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.split()[:2])\n    S = stdin.split()[2]\n    queries = []\n\n    for _ in range(Q):\n        l, r = map(int, stdin.split()[2:])\n        queries.append((l, r))\n\n    def count_AC(s: str, l: int, r: int) -> int:\n        count = 0\n        for i in range(l, r - 1):\n            if s[i:i + 2] == \"AC\":\n                count += 1\n        return count\n\n    results = []\n    for l, r in queries:\n        results.append(count_AC(S, l, r))\n\n    return \"\\n\".join(map(str, results))\n\n\nstdin = \"8 3\\nACACTACG\\n3 7\\n2 3\\n1 8\"\nprint(solution(stdin)) "
    },
    {
        "number": 4291,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.splitlines()\n    N, Q = map(int, input_lines[0].split())\n    S = input_lines[1]\n    queries = [list(map(int, line.split())) for line in input_lines[2:]]\n\n    def count_ac_substrings(s: str) -> int:\n        count = 0\n        for i in range(len(s) - 1):\n            if s[i:i+2] == 'AC':\n                count += 1\n        return count\n\n    results = []\n    for l, r in queries:\n        substring = S[l-1:r]\n        results.append(count_ac_substrings(substring))\n\n    return '\\n'.join(map(str, results))"
    },
    {
        "number": 4291,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.split()[0:2])\n    S = stdin.split()[2]\n    queries = []\n    for i in range(Q):\n        l_i, r_i = map(int, stdin.split()[2 + i].split())\n        queries.append((l_i, r_i))\n    \n    def count_substrings(substring):\n        count = 0\n        i = 0\n        while i < len(substring):\n            if substring[i:i+2] == \"AC\":\n                count += 1\n                i += 2\n            else:\n                i += 1\n        return count\n    \n    result = []\n    for query in queries:\n        l_i, r_i = query\n        substring = S[l_i-1:r_i]\n        result.append(count_substrings(substring))\n    \n    return \"\\n\".join(map(str, result))"
    },
    {
        "number": 4291,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    N = int(input_list[0])\n    Q = int(input_list[1])\n    S = input_list[2]\n    queries = input_list[3:]\n    \n    def count_substring(S: str, substring: str) -> int:\n        count = 0\n        for i in range(len(S) - len(substring) + 1):\n            if S[i:i+len(substring)] == substring:\n                count += 1\n        return count\n    \n    result = []\n    for i in range(Q):\n        l_i = int(queries[i*2])\n        r_i = int(queries[i*2+1])\n        substring = S[l_i-1:r_i]\n        count = count_substring(substring, \"AC\")\n        result.append(str(count))\n        \n    return \"\\n\".join(result)"
    },
    {
        "number": 4292,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split()]\n    prices = [int(x) for x in stdin.split()[2:]]\n\n    # Sort prices in ascending order\n    prices.sort()\n\n    # Find the minimum total price by choosing K fruits from the first N - K fruits\n    min_price = sum(prices[:N - K])\n\n    # Find the maximum total price by choosing K fruits from the last K fruits\n    max_price = sum(prices[N - K:])\n\n    return str(min_price)"
    },
    {
        "number": 4292,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[0:2])\n    prices = list(map(int, stdin.split()[2:]))\n    \n    prices.sort()\n    \n    total = 0\n    for i in range(K):\n        total += prices[i]\n        \n    return str(total)"
    },
    {
        "number": 4292,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[:2])\n    prices = list(map(int, stdin.split()[2:]))\n\n    # Sort the prices in ascending order\n    prices.sort()\n\n    # Find the minimum total price\n    total_price = sum(prices[:K])\n\n    return str(total_price)"
    },
    {
        "number": 4292,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    num_fruits, num_chosen = map(int, lines[0].split())\n    prices = list(map(int, lines[1].split()))\n\n    prices.sort()\n    min_price = sum(prices[-num_chosen:])\n\n    return str(min_price)"
    },
    {
        "number": 4292,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N, K = map(int, lines[0].split())\n    prices = list(map(int, lines[1].split()))\n    \n    min_price = float('inf')\n    for i in range(N-K+1):\n        total_price = sum(prices[i:i+K])\n        if total_price < min_price:\n            min_price = total_price\n    \n    return str(min_price)"
    },
    {
        "number": 4292,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    N, K = map(int, stdin.readline().split())\n    prices = list(map(int, stdin.readline().split()))\n\n    # Sort prices in ascending order\n    prices.sort()\n\n    # Initialize minimum total price to 0\n    total_price = 0\n\n    # Choose K fruits with the minimum total price\n    for i in range(K):\n        total_price += prices[i]\n\n    # Return the minimum total price\n    return str(total_price)\n"
    },
    {
        "number": 4292,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[:2])\n    prices = list(map(int, stdin.split()[2:]))\n\n    prices.sort()\n\n    total = 0\n    for i in range(K):\n        total += prices[-1 - i]\n\n    return str(total)"
    },
    {
        "number": 4292,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N, K = map(int, lines[0].split())\n    prices = list(map(int, lines[1].split()))\n\n    prices.sort()\n    min_total_price = sum(prices[:K])\n\n    return str(min_total_price)"
    },
    {
        "number": 4292,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[:2])\n    prices = list(map(int, stdin.split()[2:]))\n    prices.sort()\n    total = 0\n    for i in range(K):\n        total += prices[i]\n    return str(total)\n\ndef"
    },
    {
        "number": 4292,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[0:2])\n    prices = list(map(int, stdin.split()[2:]))\n    min_price = min(prices[:K]) * K\n    \n    return str(min_price)"
    },
    {
        "number": 4293,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    P, Q, R = map(int, stdin.split())\n    return min(P + Q, P + R, Q + R)"
    },
    {
        "number": 4293,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    P, Q, R = map(int, stdin.split())\n    routes = [\n        P + Q,\n        P + R,\n        Q + R,\n        P + Q + R,\n        Q + P + R,\n        R + P + Q,\n    ]\n    return str(min(routes))"
    },
    {
        "number": 4293,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    P, Q, R = map(int, stdin.split())\n    min_sum = min(P + Q, P + R, Q + R)\n    return str(min_sum)"
    },
    {
        "number": 4293,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    P, Q, R = map(int, stdin.split())\n    return str(min(P+Q, Q+R, R+P))\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4293,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    P, Q, R = map(int, stdin.split())\n    return min(P + Q, P + R, Q + R, R + P, R + Q, Q + P)"
    },
    {
        "number": 4293,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    P, Q, R = map(int, stdin.split())\n    min_sum = min(P + Q, P + R, Q + R, Q + P, R + P, R + Q)\n    return str(min_sum)"
    },
    {
        "number": 4293,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    P, Q, R = map(int, stdin.split())\n    min_sum = min(P + Q, P + R, Q + R)\n    return str(min_sum)\n\ndef"
    },
    {
        "number": 4293,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    P, Q, R = map(int, stdin.split())\n    \n    # Calculate minimum sum of flight times\n    min_time = min(P + Q, P + R, Q + R, P + Q + R)\n    \n    # Return the result\n    return str(min_time)"
    },
    {
        "number": 4293,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    P, Q, R = map(int, stdin.split())\n    return str(min(P + Q, Q + R, P + R, P + Q + R, Q + R + P, R + P + Q))\n\nprint(solution(input())) "
    },
    {
        "number": 4293,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    P, Q, R = map(int, stdin.split())\n    min_flight_time = min(P + Q, Q + R, R + P)\n    return str(min_flight_time)"
    },
    {
        "number": 4294,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, A = map(int, stdin.split())\n    if X < A:\n        return \"0\"\n    else:\n        return \"10\""
    },
    {
        "number": 4294,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, a = map(int, stdin.split())\n    return \"0\" if x < a else \"10\""
    },
    {
        "number": 4294,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    X, A = map(int, stdin.split())\n    return \"0\" if X < A else \"10\""
    },
    {
        "number": 4294,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    X, A = map(int, stdin.split())\n    if X < A:\n        return \"0\"\n    else:\n        return \"10\"\n\ninput_str = input()\noutput = solution(input_str)\nprint(output) "
    },
    {
        "number": 4294,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X, A = map(int, stdin.split())\n    if X < A:\n        return \"0\"\n    else:\n        return \"10\""
    },
    {
        "number": 4294,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    X, A = map(int, stdin.split())\n    return str(0 if X < A else 10)\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4294,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X, A = map(int, stdin.split())\n    return \"0\" if X < A else \"10\""
    },
    {
        "number": 4294,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, a = map(int, stdin.split())\n    return \"0\" if x < a else \"10\""
    },
    {
        "number": 4294,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, a = map(int, stdin.split())\n    return \"0\" if x < a else \"10\""
    },
    {
        "number": 4294,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X, A = map(int, stdin.split())\n    if X < A:\n        return \"0\"\n    else:\n        return \"10\"\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4295,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    count = 0\n    while n != 0:\n        if n % k == 0:\n            n //= k\n        else:\n            n = abs(n - k)\n        count += 1\n    return str(n)"
    },
    {
        "number": 4295,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    while abs(N - K) > 1:\n        N = abs(N - K)\n    return str(N)"
    },
    {
        "number": 4295,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    while n != k:\n        n = abs(n - k)\n    return str(n)"
    },
    {
        "number": 4295,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # split the input into two integers\n    N, K = map(int, stdin.split())\n\n    # loop until the absolute difference of N and K is 0\n    while abs(N - K) != 0:\n        # update the value of N to the absolute difference of N and K\n        N = abs(N - K)\n\n    # return the minimum possible value taken by N\n    return str(N)"
    },
    {
        "number": 4295,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # read input from stdin\n    N, K = map(int, stdin.strip().split())\n\n    # initialize variables\n    min_value = N\n    prev_value = N\n\n    # iterate until N is less than or equal to K\n    while N > K:\n        # calculate the new value of N\n        new_value = abs(N - K)\n\n        # update the minimum value\n        if new_value < min_value:\n            min_value = new_value\n\n        # update the previous value\n        prev_value = N\n\n        # update the value of N\n        N = new_value\n\n    return str(min_value)"
    },
    {
        "number": 4295,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    return str(abs(N - K))"
    },
    {
        "number": 4295,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    min_N = abs(N - K)\n    while True:\n        N = abs(N - K)\n        if N <= min_N:\n            break\n        min_N = N\n    return str(min_N)"
    },
    {
        "number": 4295,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    n_copy = n\n    \n    while n_copy != k:\n        if n_copy > k:\n            n_copy -= k\n        else:\n            n_copy += k\n            \n    return str(n_copy)"
    },
    {
        "number": 4295,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    min_val = abs(n - k)\n    while min_val != k:\n        n = abs(n - k)\n        min_val = abs(n - k)\n    return str(min_val)"
    },
    {
        "number": 4295,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    while N != K:\n        N = abs(N - K)\n    return str(N)"
    },
    {
        "number": 4296,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2, a3 = map(int, stdin.split())\n    total = a1 + a2 + a3\n    return \"bust\" if total >= 22 else \"win\""
    },
    {
        "number": 4296,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A1, A2, A3 = list(map(int, stdin.split()))\n    total = A1 + A2 + A3\n    if total >= 22:\n        return \"bust\"\n    else:\n        return \"win\""
    },
    {
        "number": 4296,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2, a3 = map(int, stdin.split())\n    if a1 + a2 + a3 >= 22:\n        return \"bust\"\n    else:\n        return \"win\""
    },
    {
        "number": 4296,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = map(int, stdin.split())\n    total = A_1 + A_2 + A_3\n    if total >= 22:\n        return \"bust\"\n    else:\n        return \"win\""
    },
    {
        "number": 4296,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2, a3 = map(int, stdin.split())\n    total = a1 + a2 + a3\n    return \"bust\" if total >= 22 else \"win\""
    },
    {
        "number": 4296,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = map(int, stdin.split())\n    total = A_1 + A_2 + A_3\n    \n    if total >= 22:\n        return \"bust\"\n    else:\n        return \"win\""
    },
    {
        "number": 4296,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = map(int, stdin.split())\n    total = A_1 + A_2 + A_3\n    return \"bust\" if total >= 22 else \"win\""
    },
    {
        "number": 4296,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = map(int, stdin.split())\n    total_sum = A_1 + A_2 + A_3\n    if total_sum >= 22:\n        return \"bust\"\n    else:\n        return \"win\""
    },
    {
        "number": 4296,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = map(int, stdin.split())\n    total = A_1 + A_2 + A_3\n    \n    if total >= 22:\n        return \"bust\"\n    else:\n        return \"win\""
    },
    {
        "number": 4296,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input string into three integers\n    numbers = list(map(int, stdin.split()))\n\n    # Check if the sum of the three integers is greater than or equal to 22\n    if sum(numbers) >= 22:\n        return \"bust\"\n    else:\n        return \"win\""
    },
    {
        "number": 4297,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    result = 1\n    while True:\n        if result % 2 == 0 and result % N == 0:\n            break\n        result += 1\n    return str(result)"
    },
    {
        "number": 4297,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    i = 1\n    while True:\n        if i % N == 0:\n            return str(i)\n        i += 1"
    },
    {
        "number": 4297,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n\n    divisible_by_2 = 2 * N\n    divisible_by_N = float('inf')\n\n    for i in range(3, divisible_by_2, 2):\n        if divisible_by_2 % i == 0 and divisible_by_2 % N == 0:\n            divisible_by_N = min(divisible_by_N, divisible_by_2)\n\n    return str(divisible_by_N)\n\ndef"
    },
    {
        "number": 4297,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    i = 1\n    while True:\n        if i % N == 0:\n            return str(i * 2)\n        i += 1"
    },
    {
        "number": 4297,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n\n    def gcd(a: int, b: int) -> int:\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n\n    def lcm(a: int, b: int) -> int:\n        return abs(a * b) // gcd(a, b)\n\n    result = lcm(2, N)\n    return str(result)"
    },
    {
        "number": 4297,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    divisible_by_2 = N * 2\n    divisible_by_N = N * (N // 2)\n    min_divisible = min(divisible_by_2, divisible_by_N)\n    return str(min_divisible)"
    },
    {
        "number": 4297,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n\n    i = 1\n    while True:\n        if i % 2 == 0 and i % N == 0:\n            return str(i)\n        i += 1"
    },
    {
        "number": 4297,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    divisible_by_2 = 2 * N\n    divisible_by_N = float('inf')\n    i = 3\n    while i <= N:\n        if N % i == 0:\n            divisible_by_N = min(divisible_by_N, i)\n        i += 1\n    return str(min(divisible_by_2, divisible_by_N * N))"
    },
    {
        "number": 4297,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    i = 2\n    while True:\n        if i % n == 0:\n            return str(i)\n        i += 1"
    },
    {
        "number": 4297,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    while True:\n        if n % 2 == 0:\n            return str(n)\n        n += 1"
    },
    {
        "number": 4298,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculate the minimum number of inspectors needed to inspect all apple trees.\n\n    Args:\n        stdin: input string in the format 'N D'\n\n    Returns:\n        String representing the minimum number of inspectors needed.\n    \"\"\"\n    N, D = map(int, stdin.split())\n\n    # Calculate the minimum and maximum index of trees that can be inspected by each inspector\n    min_index = max(1, D - (N - 1))\n    max_index = min(N, 2 * D - min_index + 1)\n\n    # Calculate the minimum number of inspectors needed\n    min_inspectors = max_index - min_index + 1\n\n    return str(min_inspectors)"
    },
    {
        "number": 4298,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function takes a string in the specified format and returns the minimum number of inspectors required.\n    \"\"\"\n    N, D = map(int, stdin.split())\n\n    # Determine the minimum and maximum index of trees that can be inspected\n    min_index = max(1, D - (N // 2))\n    max_index = min(N, N - D + (N // 2) + 1)\n\n    # Calculate the number of inspectors required\n    inspectors_required = max_index - min_index + 1\n\n    return str(inspectors_required)"
    },
    {
        "number": 4298,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    inspectors = []\n    for i in range(1, N + 1):\n        start = max(i - D, 1)\n        end = min(i + D, N)\n        inspectors.append((start, end))\n\n    count = 0\n    for i in range(len(inspectors)):\n        for j in range(i + 1, len(inspectors)):\n            overlap = set(range(inspectors[i][0], inspectors[i][1] + 1)) & set(range(inspectors[j][0], inspectors[j][1] + 1))\n            if len(overlap) > 0:\n                count += 1\n                break\n\n    return count + 1"
    },
    {
        "number": 4298,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    count = 0\n    covered = set()\n    i = 1\n    while i <= n:\n        start = max(1, i - d)\n        end = min(n, i + d)\n        for j in range(start, end + 1):\n            covered.add(j)\n        i = end + 1\n        count += 1\n    return str(count)"
    },
    {
        "number": 4298,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    inspectors = [0] * (N + 1)\n\n    for i in range(1, N + 1):\n        start = max(1, i - D)\n        end = min(N, i + D)\n        inspectors[start] += 1\n        inspectors[end + 1] -= 1\n\n    for i in range(1, N + 1):\n        inspectors[i] += inspectors[i - 1]\n\n    return str(max(inspectors))\n\ndef"
    },
    {
        "number": 4298,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    count = 0\n    inspectors = set()\n    \n    for i in range(1, N+1):\n        left = max(i-D, 1)\n        right = min(i+D, N)\n        inspectors.add(left)\n        inspectors.add(right)\n    \n    return str(len(inspectors))"
    },
    {
        "number": 4298,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    min_inspectors = int((2 * N - D) / (2 * D))\n    return str(min_inspectors)"
    },
    {
        "number": 4298,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, D = list(map(int, stdin.split()))\n    min_inspectors = (N + D - 1) // D\n    return str(min_inspectors)"
    },
    {
        "number": 4298,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.strip().split())\n    inspectors = [0] * (n + 1)\n    \n    for i in range(1, n + 1):\n        start = max(1, i - d)\n        end = min(n, i + d)\n        inspectors[start] += 1\n        inspectors[end + 1] -= 1\n    \n    count = 0\n    max_count = 0\n    \n    for c in inspectors:\n        count += c\n        max_count = max(max_count, count)\n    \n    return str(max_count)"
    },
    {
        "number": 4298,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    inspectors_needed = max(1, (N - 1) // D)\n    return str(inspectors_needed)"
    },
    {
        "number": 4299,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    pronunciation = \"\"\n    if N % 10 == 2 or N % 10 == 4 or N % 10 == 5 or N % 10 == 7 or N % 10 == 9:\n        pronunciation = \"hon\"\n    elif N % 10 == 0 or N % 10 == 1 or N % 10 == 6 or N % 10 == 8:\n        pronunciation = \"pon\"\n    else:\n        pronunciation = \"bon\"\n    return f\"{N} \u672c\" + \"\u306f \" + pronunciation + \"\u3067\u3059\u3002\" "
    },
    {
        "number": 4299,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N == 0:\n        return \"hon\"\n    if N % 10 == 2 or N % 10 == 4 or N % 10 == 5 or N % 10 == 7 or N % 10 == 9:\n        return \"hon\"\n    elif N % 10 == 1 or N % 10 == 6 or N % 10 == 8:\n        return \"pon\"\n    elif N % 10 == 3:\n        return \"bon\""
    },
    {
        "number": 4299,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    digit_in_ones_place = N % 10\n    if digit_in_ones_place in [2, 4, 5, 7, 9]:\n        return \"hon\"\n    elif digit_in_ones_place in [0, 1, 6, 8]:\n        return \"pon\"\n    else:\n        return \"bon\""
    },
    {
        "number": 4299,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    last_digit = num % 10\n    \n    if last_digit == 2 or last_digit == 4 or last_digit == 5 or last_digit == 7 or last_digit == 9:\n        return \"hon\"\n    elif last_digit == 0 or last_digit == 1 or last_digit == 6 or last_digit == 8:\n        return \"pon\"\n    else:\n        return \"bon\"\n    \n"
    },
    {
        "number": 4299,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    last_digit = n % 10\n\n    if last_digit == 2 or last_digit == 4 or last_digit == 5 or last_digit == 7 or last_digit == 9:\n        return \"hon\"\n    elif last_digit == 0 or last_digit == 1 or last_digit == 6 or last_digit == 8:\n        return \"pon\"\n    else:\n        return \"bon\""
    },
    {
        "number": 4299,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    if N % 10 == 2 or N % 10 == 4 or N % 10 == 5 or N % 10 == 7 or N % 10 == 9:\n        return \"hon\"\n    elif N % 10 == 0 or N % 10 == 1 or N % 10 == 6 or N % 10 == 8:\n        return \"pon\"\n    else:\n        return \"bon\""
    },
    {
        "number": 4299,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 0:\n        return \"hon\"\n    elif N % 10 == 1 or N % 10 == 6 or N % 10 == 8:\n        return \"pon\"\n    elif N % 10 == 2 or N % 10 == 4 or N % 10 == 5 or N % 10 == 7 or N % 10 == 9:\n        return \"hon\"\n    else:\n        return \"bon\""
    },
    {
        "number": 4299,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    last_digit = N % 10\n\n    if last_digit == 2 or last_digit == 4 or last_digit == 5 or last_digit == 7 or last_digit == 9:\n        return \"hon\"\n    elif last_digit == 0 or last_digit == 1 or last_digit == 6 or last_digit == 8:\n        return \"pon\"\n    else:\n        return \"bon\""
    },
    {
        "number": 4299,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    pronunciation = \"\"\n    \n    ones_digit = N % 10\n    \n    if ones_digit == 2 or ones_digit == 4 or ones_digit == 5 or ones_digit == 7 or ones_digit == 9:\n        pronunciation = \"hon\"\n    elif ones_digit == 0 or ones_digit == 1 or ones_digit == 6 or ones_digit == 8:\n        pronunciation = \"pon\"\n    else:\n        pronunciation = \"bon\"\n    \n    return f\"{N} {pronunciation}\" "
    },
    {
        "number": 4299,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    digit = N % 10\n    \n    if digit == 2 or digit == 4 or digit == 5 or digit == 7 or digit == 9:\n        return \"hon\"\n    elif digit == 0 or digit == 1 or digit == 6 or digit == 8:\n        return \"pon\"\n    else:\n        return \"bon\"\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4300,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, d = map(int, stdin.split())\n    d.sort(reverse=True)\n    total_health = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            total_health += d[i] * d[j]\n    return str(total_health)"
    },
    {
        "number": 4300,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    d = list(map(int, lines[1].split()))\n\n    total_health = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            total_health += d[i] * d[j]\n\n    return str(total_health)"
    },
    {
        "number": 4300,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, takoyaki_deliciousness = stdin.split()\n    N = int(N)\n    takoyaki_deliciousness = [int(i) for i in takoyaki_deliciousness.split()]\n\n    total_health_restored = 0\n\n    for i in range(N):\n        for j in range(i + 1, N):\n            total_health_restored += takoyaki_deliciousness[i] * takoyaki_deliciousness[j]\n\n    return str(total_health_restored)"
    },
    {
        "number": 4300,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, takoyaki = stdin.split(\"\\n\")\n    N = int(N)\n    d = list(map(int, takoyaki.split()))\n    combinations = [(i, j) for i in range(N) for j in range(i+1, N)]\n    total_health = sum([d[i] * d[j] for i, j in combinations])\n    return str(total_health)\n\nstdin = \"3\\n3 1 2\"\nprint(solution(stdin)) "
    },
    {
        "number": 4300,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, *d = stdin.split()\n    N = int(N)\n    d = [int(x) for x in d]\n    total_health = 0\n    \n    for i in range(N):\n        for j in range(i+1, N):\n            total_health += d[i] * d[j]\n    \n    return str(total_health)\n\ninput_data = \"3\\n3 1 2\"\nprint(solution(input_data)) "
    },
    {
        "number": 4300,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, takoyaki_deliciousness = map(int, stdin.split())\n    takoyaki_deliciousness = list(map(int, takoyaki_deliciousness.split()))\n\n    health_points_restored = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            health_points_restored += takoyaki_deliciousness[i] * takoyaki_deliciousness[j]\n\n    return str(health_points_restored)\n\ndef"
    },
    {
        "number": 4300,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, *deliciousness = stdin.split()\n    N = int(N)\n    deliciousness = [int(d) for d in deliciousness]\n    \n    total_health_points = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            total_health_points += deliciousness[i] * deliciousness[j]\n    \n    return str(total_health_points)"
    },
    {
        "number": 4300,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, takoyaki_deliciousness = list(map(int, stdin.split()))\n    N = (N * (N - 1)) // 2\n\n    health_points = 0\n    for i in range(N):\n        takoyaki_i = takoyaki_deliciousness[i]\n        for takoyaki_j in takoyaki_deliciousness[i+1:]:\n            health_points += takoyaki_i * takoyaki_j\n\n    return str(health_points)"
    },
    {
        "number": 4300,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    takoyaki_deliciousness = [int(x) for x in lines[1].split()]\n    \n    sum_health_points = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            sum_health_points += takoyaki_deliciousness[i] * takoyaki_deliciousness[j]\n            \n    return str(sum_health_points)\n\ninput_str = \"\"\"3\n3 1 2\"\"\"\nprint(solution(input_str)) "
    },
    {
        "number": 4300,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    deliciousness = list(map(int, lines[1].split()))\n    \n    total_health = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            total_health += deliciousness[i] * deliciousness[j]\n            \n    return str(total_health)\n\nstdin = \"\"\"3\n3 1 2\"\"\"\nprint(solution(stdin)) # Output: 11 "
    },
    {
        "number": 4301,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    A = [int(x) for x in lines[1:]]\n    result = []\n    \n    for i in range(N):\n        A_i = A[i]\n        max_value = max(A[:i] + A[i+1:])\n        result.append(max_value)\n        \n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 4301,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    sequence = [int(x) for x in stdin.split(\"\\n\")[1:]]\n\n    result = []\n\n    for i in range(N):\n        sequence_without_i = sequence[:i] + sequence[i+1:]\n        max_value = max(sequence_without_i)\n        result.append(max_value)\n\n    return \"\\n\".join(str(x) for x in result)\n\ndef"
    },
    {
        "number": 4301,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    n = int(input_list[0])\n    input_list.pop(0)\n    result = []\n\n    for i in range(1, n + 1):\n        max_val = 0\n        for j in range(1, n + 1):\n            if i != j:\n                if input_list[j - 1] > max_val:\n                    max_val = input_list[j - 1]\n        result.append(str(max_val))\n\n    return \"\\n\".join(result)\n\ninput_str = \"3\\n1\\n4\\n3\"\nprint(solution(input_str)) "
    },
    {
        "number": 4301,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    sequence = [int(x) for x in lines[1:]]\n    result = []\n    \n    for i in range(n):\n        other_elements = sequence[:i] + sequence[i+1:]\n        max_value = max(other_elements)\n        result.append(max_value)\n    \n    return \"\\n\".join(str(x) for x in result)"
    },
    {
        "number": 4301,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split(\"\\n\")\n    n = int(inputs[0])\n    seq = [int(x) for x in inputs[1:]]\n\n    result = \"\"\n    for i in range(n):\n        max_val = max(seq[:i] + seq[i+1:])\n        result += str(max_val) + \"\\n\"\n\n    return result\n\ndef"
    },
    {
        "number": 4301,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    sequence = list(map(int, stdin.split(\"\\n\")[1:]))\n    \n    result = []\n    for i in range(N):\n        temp = sequence.copy()\n        temp.pop(i)\n        max_value = max(temp)\n        result.append(max_value)\n    \n    return \"\\n\".join(map(str, result))\n\ndef"
    },
    {
        "number": 4301,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    sequence = stdin.split('\\n')[1:]\n    \n    result = []\n    for i in range(N):\n        max_value = max([int(sequence[j]) for j in range(N) if j != i])\n        result.append(str(max_value))\n    \n    return '\\n'.join(result)"
    },
    {
        "number": 4301,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    A = list(map(int, stdin.split(\"\\n\")[1:]))\n    result = []\n\n    for i in range(N):\n        A_i = A[i]\n        A_rest = A[:i] + A[i+1:]\n        max_value = max(A_rest)\n        result.append(max_value)\n\n    return \"\\n\".join(map(str, result))\n\ndef"
    },
    {
        "number": 4301,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    A = [int(x.strip()) for x in stdin.readlines()]\n    output = []\n\n    for i in range(N):\n        max_val = max([A[j] for j in range(N) if j != i])\n        output.append(str(max_val))\n\n    return \"\\n\".join(output)"
    },
    {
        "number": 4301,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n = int(input_list[0])\n    sequence = [int(x) for x in input_list[1:]]\n\n    result = []\n    for i in range(n):\n        max_value = max(sequence[:i] + sequence[i+1:])\n        result.append(str(max_value))\n\n    return '\\n'.join(result)"
    },
    {
        "number": 4302,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    coins = max(A+B-1, A+B-2)\n    return str(coins)"
    },
    {
        "number": 4302,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    coins = max(A * A, B * B)\n    return str(coins)"
    },
    {
        "number": 4302,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    coins = 0\n    if A <= B:\n        coins += A * (A+1) // 2\n        coins += B * (B-A) // 2\n    else:\n        coins += B * (B+1) // 2\n        coins += A * (A-B) // 2\n    return str(coins)"
    },
    {
        "number": 4302,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    A, B = min(A, B), max(A, B)\n    if A == B:\n        return str(A + A)\n    elif A == 1 or B == 1:\n        return str(A + B)\n    else:\n        return str(A + A - 1 + B - 1)"
    },
    {
        "number": 4302,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    coins = 0\n    if A > B:\n        coins += A\n        A -= 1\n        coins += A\n        A -= 1\n    else:\n        coins += B\n        B -= 1\n        coins += B\n        B -= 1\n    return str(coins)"
    },
    {
        "number": 4302,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    coins = max(A, B) + min(A, B)\n    return str(coins)"
    },
    {
        "number": 4302,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    A_coins = A * A\n    B_coins = B * B\n\n    if A == B:\n        return str(A_coins + B_coins)\n    elif A > B:\n        return str(A_coins + B)\n    else:\n        return str(A + B_coins)"
    },
    {
        "number": 4302,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    coins = max(A, B)\n    if A == B:\n        return str(coins + A - 1)\n    return str(coins * 2)"
    },
    {
        "number": 4302,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    max_coins = max(A, B) + min(A, B)\n    return str(max_coins)"
    },
    {
        "number": 4302,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input from the stdin string\n    A, B = map(int, stdin.split())\n\n    # Calculate the maximum number of coins for each possible button press combination\n    coins_A = A * (A - 1) // 2\n    coins_B = B * (B - 1) // 2\n\n    # Return the maximum number of coins among the two possible button press combinations\n    return max(coins_A, coins_B)"
    },
    {
        "number": 4303,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[0:2])\n    candles = list(map(int, stdin.split()[2:]))\n\n    lighted_candles = []\n    current_position = 0\n\n    for candle in candles:\n        if candle <= current_position:\n            lighted_candles.append(candle)\n        else:\n            current_position = candle\n\n    if len(lighted_candles) >= K:\n        return \"0\"\n\n    lighted_candles.sort()\n    time_required = 0\n\n    for i in range(K - len(lighted_candles)):\n        time_required += candles[i] - current_position\n        current_position = candles[i]\n\n    return str(time_required)"
    },
    {
        "number": 4303,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function takes a string of input in the specified format and returns the minimum time required to light K candles.\n    \"\"\"\n    # Split the input into two parts: N and K\n    N, K = map(int, stdin.split()[0:2])\n    \n    # Split the input into an array of x_i values\n    x_values = list(map(int, stdin.split()[2:]))\n    \n    # Calculate the minimum time required to light K candles\n    time = 0\n    for i in range(K):\n        # Find the next candle to light\n        next_candle = x_values[i]\n        \n        # Calculate the time required to move to the next candle\n        time += abs(next_candle)\n        \n    return str(time)"
    },
    {
        "number": 4303,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[0:2])\n    x_coords = list(map(int, stdin.split()[2:]))\n\n    # Sort the candles by their x coordinates\n    candles = sorted(zip(x_coords, range(N)))\n\n    # Initialize variables\n    current_position = 0\n    current_candle_index = 0\n    time = 0\n\n    # Iterate through the candles\n    while current_candle_index < K:\n        # Move to the next candle's position\n        next_candle_position = candles[current_candle_index][0]\n        time += abs(next_candle_position - current_position)\n        current_position = next_candle_position\n\n        # Light the next candle\n        current_candle_index += 1\n\n    return time"
    },
    {
        "number": 4303,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # split input by lines\n    lines = stdin.split(\"\\n\")\n    \n    # parse N and K\n    N, K = map(int, lines[0].split())\n    \n    # parse x_i's\n    x_i = list(map(int, lines[1].split()))\n    \n    # create a list of tuples representing the candles\n    candles = list(zip(x_i, range(1, N+1)))\n    \n    # sort the candles by their position on the number line\n    candles.sort(key=lambda x: x[0])\n    \n    # initialize the time to zero\n    time = 0\n    \n    # loop through the candles and light the ones that are left\n    for candle in candles:\n        # if the current candle is the Kth candle or if we have already lit K candles, break\n        if candle[1] == K or K == 0:\n            break\n        # otherwise, move to the next candle and light it\n        time += abs(candle[0])\n        K -= 1\n    \n    # return the minimum time required\n    return str(time)"
    },
    {
        "number": 4303,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, K = [int(x) for x in stdin.split()]\n    candles = [int(x) for x in stdin.split()[2:]]\n    \n    # Sort candles and calculate time to light K candles\n    candles.sort()\n    time = 0\n    for i in range(K):\n        time += abs(candles[i])\n    \n    return str(time)"
    },
    {
        "number": 4303,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[0:2])\n    candles = list(map(int, stdin.split()[2:]))\n\n    # Sort candles based on their positions\n    candles.sort()\n\n    # Calculate the minimum time required to light K candles\n    time = 0\n    for i in range(K):\n        # Calculate the distance to the next candle\n        distance = candles[i] - time\n        # Update the time by adding the distance\n        time += distance\n\n    return str(time)"
    },
    {
        "number": 4303,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[0:2])\n    x_coords = list(map(int, stdin.split()[2:]))\n\n    time = 0\n    candles_lit = 0\n    for x in x_coords:\n        time += abs(x)\n        candles_lit += 1\n        if candles_lit == K:\n            break\n\n    if candles_lit < K:\n        time += abs(x_coords[-1])\n\n    return str(time)\n"
    },
    {
        "number": 4303,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # split input into list of strings\n    input_list = stdin.strip().split(\"\\n\")\n    # parse input\n    N, K = map(int, input_list[0].split(\" \"))\n    candle_positions = list(map(int, input_list[1].split(\" \")))\n\n    # sort candle positions in ascending order\n    candle_positions.sort()\n\n    # initialize variables for minimum time and current position\n    time = 0\n    position = 0\n\n    # loop through candle positions and light candles\n    for i in range(K):\n        # calculate time required to move to next candle position\n        time_to_move = abs(candle_positions[i] - position)\n        # update time and position\n        time += time_to_move\n        position = candle_positions[i]\n        # light candle at current position\n        time += 1\n\n    return str(time)"
    },
    {
        "number": 4303,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, K = map(int, stdin.split()[0:2])\n    x = list(map(int, stdin.split()[2:]))\n    \n    # Sort candles by position\n    x.sort()\n    \n    # Calculate time required to light K candles\n    time = 0\n    for i in range(K):\n        time += abs(x[i] - x[i-1])\n    \n    # Return the result\n    return str(time)"
    },
    {
        "number": 4303,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    x = list(map(int, stdin.split()[2:]))\n\n    time = 0\n    for i in range(k):\n        while time < x[i]:\n            time += 1\n        if time == x[i]:\n            time += 1\n\n    return str(time)"
    },
    {
        "number": 4304,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    diff = b - a\n    if diff <= 1:\n        return \"1\"\n    total_height = (a + b) * (a + b + 1) // 2\n    total_height += b - (a + 1)\n    total_height -= 2 * (a + 1)\n    return str(int(total_height))\n\ndef"
    },
    {
        "number": 4304,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    x = (a + b) // 2\n    return str(x)"
    },
    {
        "number": 4304,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    x = sum(range(1, b - a + 1))\n    return str(x)"
    },
    {
        "number": 4304,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    diff = b - a\n    snow_depth = (diff * (diff + 1)) // 2 + 1  # formula for sum of numbers from 1 to n\n    return str(snow_depth)"
    },
    {
        "number": 4304,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    snow_depth = min(abs(b - a), 999 - abs(b - a))\n    return str(snow_depth)\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4304,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        a, b = b, a\n\n    total_height = (a + b) * (a + b + 1) // 2\n    depth = total_height - a * (a - 1) // 2 - b * (b - 1) // 2\n    return str(depth)"
    },
    {
        "number": 4304,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    height_sum = sum(range(1, b+1))\n    snow_cover = height_sum - a - b\n    if snow_cover < 1:\n        return \"0\"\n    return str(snow_cover)\n\ninput_str = input()\nresult = solution(input_str)\nprint(result) "
    },
    {
        "number": 4304,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == 0 or b == 0:\n        return \"0\"\n    else:\n        return str(b - a)"
    },
    {
        "number": 4304,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    snow_cover = (a * (a + 1)) // 2 - (b * (b - 1)) // 2\n    return str(snow_cover)\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4304,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    snow_cover = 1\n\n    # Find the index of the first tower that has less than a meters of snow cover\n    index = 0\n    for i in range(1, 1000):\n        if 1 + 2 + 3 + ... + i < a:\n            index = i\n        else:\n            break\n\n    # Find the index of the last tower that has less than b meters of snow cover\n    index_b = 0\n    for j in range(index + 1, 1000):\n        if 1 + 2 + 3 + ... + j < b:\n            index_b = j\n        else:\n            break\n\n    # Calculate the total depth of snow cover\n    snow_cover = sum(range(index + 1, index_b + 1))\n\n    return str(snow_cover)"
    },
    {
        "number": 4305,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input string into two integer values\n    health, attack = map(int, stdin.split())\n\n    # Calculate the number of attacks needed to win\n    attacks_needed = (health - 1) // attack\n\n    # Return the result\n    return str(attacks_needed)"
    },
    {
        "number": 4305,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    H, A = map(int, stdin.split())\n    attacks = 0\n    \n    while H > 0:\n        H -= A\n        attacks += 1\n    \n    return str(attacks)"
    },
    {
        "number": 4305,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    H, A = map(int, stdin.split())\n    count = 0\n    while H > 0:\n        H -= A\n        count += 1\n    return str(count)"
    },
    {
        "number": 4305,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    H, A = map(int, stdin.split())\n    count = 0\n    while H > 0:\n        H -= A\n        count += 1\n    return str(count)"
    },
    {
        "number": 4305,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    h, a = map(int, stdin.split())\n    count = 0\n    while h > 0:\n        count += 1\n        h -= a\n    return str(count)\n\ninput_str = input()\noutput = solution(input_str)\nprint(output) "
    },
    {
        "number": 4305,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    h, a = map(int, stdin.split())\n    count = 0\n\n    while h > 0:\n        h -= a\n        count += 1\n\n    return str(count)"
    },
    {
        "number": 4305,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    H, A = map(int, stdin.split())\n    count = 0\n    while H > 0:\n        H -= A\n        count += 1\n    return str(count)"
    },
    {
        "number": 4305,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    H, A = map(int, stdin.split())\n    count = 0\n    while H > 0:\n        H -= A\n        count += 1\n    return str(count)"
    },
    {
        "number": 4305,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    H, A = map(int, stdin.split())\n    attack_count = 0\n    while H > 0:\n        attack_count += 1\n        H -= A\n    return str(attack_count)"
    },
    {
        "number": 4305,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    H, A = map(int, stdin.split())\n    count = 0\n    while H > 0:\n        H -= A\n        count += 1\n    return str(count)"
    },
    {
        "number": 4306,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split()]\n    time_alice = (b-a) if a < b else 0\n    time_bob = (d-c) if c < d else 0\n    duration = min(time_alice, time_bob)\n    return str(duration)"
    },
    {
        "number": 4306,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # split input into A, B, C, and D\n    A, B, C, D = map(int, stdin.split())\n    \n    # calculate the time when both Alice and Bob were holding down their buttons\n    duration = min(B, D) - max(A, C)\n    \n    # return the duration if it's positive, otherwise return 0\n    return str(max(duration, 0))"
    },
    {
        "number": 4306,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    \n    # Sort the start and end times of Alice and Bob\n    start_A, end_A = sorted([A, B])\n    start_B, end_B = sorted([C, D])\n    \n    # Find the overlap of the two intervals\n    overlap = max(0, min(end_A, end_B) - max(start_A, start_B))\n    \n    # Calculate the duration\n    duration = end_A - start_A + end_B - start_B - overlap\n    \n    return str(duration)"
    },
    {
        "number": 4306,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n\n    A = A + 1\n    B = B + 1\n    C = C + 1\n    D = D + 1\n\n    if A > B or C > D:\n        return \"Invalid input\"\n\n    if A > C:\n        return str(B - A)\n    else:\n        return str(D - C)\n\ninput_str = input(\"Enter A B C D: \")\nprint(solution(input_str)) "
    },
    {
        "number": 4306,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    start_A = 0\n    end_A = B\n    start_B = 25\n    end_B = 100\n    return str(min(end_A, end_B) - max(start_A, start_B))"
    },
    {
        "number": 4306,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    start = min(A, C)\n    end = max(B, D)\n    duration = end - start\n    return str(duration)"
    },
    {
        "number": 4306,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    alice_start, alice_end, bob_start, bob_end = map(int, stdin.split())\n    \n    if bob_start < alice_start < alice_end < bob_end:\n        return str(alice_end - alice_start)\n    elif bob_start < alice_start < bob_end < alice_end:\n        return str(bob_end - bob_start)\n    elif alice_start < bob_start < alice_end < bob_end:\n        return str(alice_end - bob_start)\n    elif bob_start < alice_start < bob_end < alice_end:\n        return str(bob_end - alice_start)\n    else:\n        return \"0\""
    },
    {
        "number": 4306,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    duration = min(B, D) - max(A, C)\n    if duration > 0:\n        return str(duration)\n    else:\n        return str(0)"
    },
    {
        "number": 4306,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    duration = max(min(b, d) - c, 0)\n    return str(duration)\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4306,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    \n    start = min(A, C)\n    end = max(B, D)\n    \n    duration = end - start\n    \n    return str(duration)"
    },
    {
        "number": 4307,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    n = int(stdin)\n    count = 0\n    for i in range(1, n + 1):\n        if i % 2 != 0 and len(list(filter(lambda x: i % x == 0, range(1, int(math.sqrt(i)) + 1)))) == 8:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4307,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # convert input string to integer\n    N = int(stdin)\n\n    count = 0\n    for i in range(1, N+1):\n        if i % 2 != 0:\n            divisors = 0\n            for j in range(1, i+1):\n                if i % j == 0:\n                    divisors += 1\n            if divisors == 8:\n                count += 1\n\n    return str(count)"
    },
    {
        "number": 4307,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n\n    for i in range(1, N + 1):\n        if i % 2 == 1 and len([x for x in range(1, i + 1) if i % x == 0]) == 8:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4307,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n+1, 2):\n        divisors_count = 0\n        for j in range(1, int(i**0.5)+1):\n            if i % j == 0:\n                divisors_count += 1\n                if j != i//j:\n                    divisors_count += 1\n        if divisors_count == 8:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4307,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for i in range(2, N, 2):  # iterate through odd numbers\n        divisor_count = 0\n        for j in range(1, i + 1):  # count divisors\n            if i % j == 0:\n                divisor_count += 1\n        if divisor_count == 8:  # check if divisor count is 8\n            count += 1\n    return str(count)"
    },
    {
        "number": 4307,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input as integer\n    n = int(stdin)\n\n    count = 0\n    for i in range(1, n + 1):\n        divisors_count = 0\n        for j in range(1, i + 1):\n            if i % j == 0:\n                divisors_count += 1\n        if divisors_count == 8 and i % 2 == 1:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4307,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n+1):\n        if i % 2 == 1 and len([x for x in range(1, i+1) if i % x == 0]) == 8:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4307,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n\n    for num in range(2, n + 1, 2):\n        divisors_count = 0\n        for i in range(1, num + 1):\n            if num % i == 0:\n                divisors_count += 1\n\n        if divisors_count == 8:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4307,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    \n    count = 0\n    for num in range(1, N + 1, 2):  # iterate only odd numbers\n        divisors = 0\n        for i in range(1, num + 1):\n            if num % i == 0:\n                divisors += 1\n                if divisors == 8:\n                    count += 1\n                    break\n        else:\n            continue\n        break\n        \n    return str(count)"
    },
    {
        "number": 4307,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    count = 0\n    \n    for num in range(1, N + 1):\n        if num % 2 == 1:\n            divisors = 0\n            for i in range(1, num + 1):\n                if num % i == 0:\n                    divisors += 1\n            if divisors == 8:\n                count += 1\n                \n    return str(count)"
    },
    {
        "number": 4308,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    crackers = N % K\n    users = N // K\n    return abs(crackers - users)"
    },
    {
        "number": 4308,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    crackers = n // k\n    remainder = n % k\n    if remainder != 0:\n        max_crackers = crackers + 1\n        min_crackers = crackers\n    else:\n        max_crackers = crackers\n        min_crackers = crackers\n    return abs(max_crackers - min_crackers)\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4308,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    if K == 1:\n        return 0\n    if K == 2:\n        return 1\n    diff = N % (K - 1)\n    if diff == 0:\n        return 1\n    return diff"
    },
    {
        "number": 4308,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    if N < K:\n        return \"Impossible\"\n    crackers = [1] * K\n    i = 0\n    j = 0\n    while N > 0:\n        crackers[i] += 1\n        N -= 1\n        i += 1\n        if i == K:\n            i = 0\n            j += 1\n    min_diff = float('inf')\n    for i in range(K):\n        min_diff = min(min_diff, crackers[i])\n        if min_diff == 1:\n            break\n    return min_diff"
    },
    {
        "number": 4308,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    crackers = N // K\n    remainder = N % K\n    diff = 0\n    if remainder > 0:\n        diff = crackers + 1\n    else:\n        diff = crackers\n    return str(diff)"
    },
    {
        "number": 4308,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    return abs(N - (N % K)) // K"
    },
    {
        "number": 4308,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    if N < K:\n        raise ValueError(\"Number of crackers cannot be less than the number of users\")\n    return abs(N - (N % K)) // K"
    },
    {
        "number": 4308,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    if N < K:\n        raise ValueError(\"Invalid input: N should be greater than or equal to K.\")\n\n    crackers = N // K\n    remaining_crackers = N % K\n\n    if remaining_crackers == 0:\n        max_crackers = crackers\n        min_crackers = crackers\n    else:\n        max_crackers = crackers + 1\n        min_crackers = crackers\n\n    return abs(max_crackers - min_crackers)"
    },
    {
        "number": 4308,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    crackers = N // K\n    remainder = N % K\n\n    if remainder != 0:\n        crackers += 1\n\n    min_diff = crackers - 1\n    max_diff = crackers - remainder\n\n    return max(abs(min_diff), abs(max_diff))\n"
    },
    {
        "number": 4308,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    min_diff = N\n    \n    for i in range(1, N + 1):\n        min_diff = min(min_diff, abs(N * K // i - N * (K % i)))\n    \n    return str(min_diff)"
    },
    {
        "number": 4309,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    abc_n = int(stdin)\n    for i in range(100, abc_n+1):\n        if len(set(str(i))) == 1:\n            return str(i)\n    return \"No solution found\""
    },
    {
        "number": 4309,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    for i in range(1, 10):\n        abc_num = i * (10 ** (len(str(N)) - 1) + 1)\n        if abc_num >= N:\n            return str(abc_num)\n    return \"Error\"\n\ndef"
    },
    {
        "number": 4309,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = n\n    while True:\n        if all(str(i)[j] == str(i)[0] for j in range(len(str(i)))):\n            return str(i)\n        i += 1\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4309,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(100, n+1):\n        if all(str(i).count(str(digit)) == len(str(i)) for digit in str(i)):\n            return str(i)\n    return \"No suitable ABC found\""
    },
    {
        "number": 4309,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n, 1000):\n        if len(set(str(i))) == 1:\n            return str(i)\n    return \"Not possible\"\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4309,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n, 0, -1):\n        if i == int(\"1\" * len(str(n))):\n            return str(i)\n    return \"No such ABC exists.\" "
    },
    {
        "number": 4309,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    base = int(str(n)[0])\n    min_abc = n\n    \n    for i in range(base, 10):\n        abc = i * (10 ** (len(str(n)) - 1))\n        if abc <= n:\n            min_abc = min(min_abc, abc)\n    \n    return str(min_abc)"
    },
    {
        "number": 4309,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    n = 1\n    while True:\n        if all(str(N) == str(N)[0] for N in range(n, n+10)):\n            return str(n)\n        n += 1"
    },
    {
        "number": 4309,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    digits = set(str(n))\n    if len(digits) == 1:\n        return str(n)\n    else:\n        return str(int(digits.pop()) * len(digits) + 1)"
    },
    {
        "number": 4309,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    min_abc = None\n    while True:\n        same_digits = True\n        n_str = str(n)\n        digit = n_str[0]\n        for d in n_str:\n            if d != digit:\n                same_digits = False\n                break\n        if same_digits:\n            min_abc = n\n            break\n        n += 1\n    return str(min_abc)"
    },
    {
        "number": 4310,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n\n    min_cost = 0\n    for i in range(3):\n        for j in range(3):\n            if i != j:\n                min_cost += abs(A[i] - A[j])\n\n    return str(min_cost)"
    },
    {
        "number": 4310,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    total_cost = 0\n    for i in range(1, len(A)):\n        cost = abs(A[i] - A[i-1])\n        total_cost += cost\n    return str(total_cost)"
    },
    {
        "number": 4310,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    A.sort()\n    return sum(abs(A[i] - A[i-1]) for i in range(1, 4))\n\ndef"
    },
    {
        "number": 4310,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = map(int, stdin.split())\n    \n    # Sort the tasks based on their values\n    tasks = [(A_1, 0), (A_2, 1), (A_3, 2)]\n    tasks.sort(key=lambda x: x[0])\n    \n    # Calculate the minimum cost to complete all tasks\n    total_cost = 0\n    for i in range(1, len(tasks)):\n        total_cost += abs(tasks[i][0] - tasks[i-1][0])\n    \n    return str(total_cost)"
    },
    {
        "number": 4310,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    A.sort()\n    cost = 0\n    for i in range(1, len(A)):\n        cost += abs(A[i] - A[i-1])\n    return str(cost)"
    },
    {
        "number": 4310,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    dp = [0] * 3\n    dp[0] = 0\n\n    for i in range(1, 3):\n        for j in range(i):\n            dp[i] = min(dp[i], dp[j] + abs(A[i] - A[j]))\n\n    return dp[2]"
    },
    {
        "number": 4310,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    min_cost = float('inf')\n    \n    for i in range(3):\n        for j in range(i+1, 3):\n            cost = abs(A[j] - A[i])\n            min_cost = min(min_cost, cost)\n    \n    return str(min_cost)"
    },
    {
        "number": 4310,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    A.sort()\n    min_cost = 0\n    \n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            min_cost += abs(A[j] - A[i])\n    \n    return str(min_cost)"
    },
    {
        "number": 4310,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    A.sort()\n    total_cost = 0\n\n    for i in range(len(A)):\n        for j in range(i + 1, len(A)):\n            total_cost += abs(A[j] - A[i])\n\n    return str(total_cost)"
    },
    {
        "number": 4310,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    A.sort()\n    cost = 0\n    for i in range(len(A) - 1):\n        cost += abs(A[i + 1] - A[i])\n    return str(cost)"
    },
    {
        "number": 4311,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    a = [s]\n    i = 1\n    while True:\n        if i == 1:\n            a.append(s)\n        elif a[i-1] % 2 == 0:\n            a.append(a[i-1] // 2)\n        else:\n            a.append(3 * a[i-1] + 1)\n        if a[-1] in a[:-1]:\n            return str(len(a)-1)\n        i += 1"
    },
    {
        "number": 4311,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin.strip())\n    a = [s]\n    i = 1\n    while True:\n        if i == 1:\n            a.append(s)\n        else:\n            if a[-1] % 2 == 0:\n                a.append(a[-1] // 2)\n            else:\n                a.append(3 * a[-1] + 1)\n        if a[-1] in a[:-1]:\n            return str(len(a) - 1)\n        i += 1"
    },
    {
        "number": 4311,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    a = [s]\n    n = 1\n    while True:\n        if n == 1:\n            a.append(a[0])\n        else:\n            if n % 2 == 0:\n                a.append(n // 2)\n            else:\n                a.append(3 * n + 1)\n        if len(a) >= 1000000:\n            break\n        if a[-1] == a[n]:\n            return str(n)\n        n += 1"
    },
    {
        "number": 4311,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    a = [s]\n    i = 1\n    while True:\n        if a[-1] == 1:\n            j = len(a)\n            break\n        if a[-1] % 2 == 0:\n            a.append(a[-1] // 2)\n        else:\n            a.append(a[-1] * 3 + 1)\n        i += 1\n    return str(j)"
    },
    {
        "number": 4311,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    a = [s]\n    i = 1\n    while True:\n        if i == 1:\n            next_value = s\n        elif i % 2 == 0:\n            next_value = a[-1] // 2\n        else:\n            next_value = 3 * a[-1] + 1\n        a.append(next_value)\n        i += 1\n        if a[-1] in a[:-1]:\n            return str(len(a) - 1)"
    },
    {
        "number": 4311,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(stdin)]\n    while True:\n        if len(a) >= 1000000:\n            return \"Error: sequence is too large\"\n        if len(a) > 1 and a[-1] == 1:\n            return str(len(a) - 1)\n        if a[-1] % 2 == 0:\n            a.append(a[-1] // 2)\n        else:\n            a.append(3 * a[-1] + 1)\n        \nprint(solution(input())) "
    },
    {
        "number": 4311,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    a = [s]\n    i = 1\n    while True:\n        if a[-1] % 2 == 0:\n            a.append(a[-1] // 2)\n        else:\n            a.append((3 * a[-1]) + 1)\n        i += 1\n        if a[-1] in a[:-1]:\n            return str(i)\n        if len(a) > 1000000:\n            return \"The sequence is too long to find the minimum m that satisfies the condition\""
    },
    {
        "number": 4311,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    a = [s]\n    i = 1\n    while len(a) < 1000000:\n        if a[-1] % 2 == 0:\n            a.append(a[-1] // 2)\n        else:\n            a.append((3 * a[-1]) + 1)\n        if a[-1] == s:\n            return str(i)\n        i += 1\n    return \"No solution found\""
    },
    {
        "number": 4311,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    a = [s]\n    i = 1\n    while True:\n        if i % 2 == 0:\n            a.append(a[-1] // 2)\n        else:\n            a.append((3 * a[-1]) + 1)\n        if a[-1] in a[:-1]:\n            return str(len(a) - 1)\n        i += 1"
    },
    {
        "number": 4311,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Get the input s from stdin\n    s = int(stdin)\n    \n    # Initialize a dictionary to store the values of a\n    a_dict = {1: s}\n    \n    # Initialize a variable to store the minimum m that satisfies the condition\n    m = 1\n    \n    # Iterate through the sequence a\n    while True:\n        # Check if the current value of a_{m+1} is already in the dictionary\n        if a_dict.get(m+1) is None:\n            # Calculate the value of a_{m+1} using the f(n) function\n            if m % 2 == 0:\n                a_dict[m+1] = m // 2\n            else:\n                a_dict[m+1] = 3 * m + 1\n                \n        # Check if a_m = a_n (m > n)\n        if a_dict.get(m) == a_dict.get(m-1):\n            # If it is, return m\n            return str(m)\n        \n        # Update m to m+1\n        m += 1"
    },
    {
        "number": 4312,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    takahashi_health = a\n    takahashi_strength = b\n    aoki_health = c\n    aoki_strength = d\n\n    while takahashi_health > 0 and aoki_health > 0:\n        takahashi_health -= aoki_strength\n        aoki_health -= takahashi_strength\n\n    if takahashi_health > 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ninput_data = input()\nprint(solution(input_data)) "
    },
    {
        "number": 4312,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n\n    while A > 0 and C > 0:\n        A -= D\n        C -= B\n\n    return \"Yes\" if A <= 0 else \"No\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n\n    takahashi_health = A\n    aoki_health = C\n\n    while takahashi_health > 0 and aoki_health > 0:\n        takahashi_health -= D\n        aoki_health -= B\n\n    if takahashi_health <= 0:\n        return \"No\"\n    else:\n        return \"Yes\""
    },
    {
        "number": 4312,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    health_A = A\n    health_B = B\n    health_C = C\n    health_D = D\n    \n    while health_A > 0 and health_C > 0:\n        health_A -= health_B\n        health_C -= health_D\n    \n    if health_A <= 0:\n        return \"No\"\n    else:\n        return \"Yes\""
    },
    {
        "number": 4312,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    \n    while A > 0 and C > 0:\n        C -= B\n        if C <= 0:\n            return \"Yes\"\n        A -= D\n        if A <= 0:\n            return \"No\"\n    \n    return \"Yes\" if A > 0 else \"No\"\n\ndef"
    },
    {
        "number": 4312,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    health_A = A\n    health_B = B\n    health_C = C\n    health_D = D\n\n    while health_A > 0 and health_B > 0:\n        health_A -= health_C\n        health_B -= health_D\n        health_C -= health_A\n        health_D -= health_B\n\n    if health_A <= 0:\n        return \"No\"\n    else:\n        return \"Yes\""
    },
    {
        "number": 4312,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    takahashi_health, takahashi_strength = A, B\n    aoki_health, aoki_strength = C, D\n\n    while takahashi_health > 0 and aoki_health > 0:\n        takahashi_health -= aoki_strength\n        if takahashi_health <= 0:\n            return \"No\"\n        aoki_health -= takahashi_strength\n        if aoki_health <= 0:\n            return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4312,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    \n    while A > 0 and C > 0:\n        C -= B\n        if C <= 0:\n            return \"Yes\"\n        A -= D\n        if A <= 0:\n            return \"No\"\n    \n    if A <= 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4312,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    turn = 1  # Takahashi's turn\n    while A > 0 and B > 0 and C > 0 and D > 0:\n        if turn == 1:  # Takahashi's turn\n            C -= B\n        else:  # Aoki's turn\n            A -= D\n        turn = 1 if turn == 2 else 2\n    \n    if A <= 0 or B <= 0:  # Takahashi lost\n        return \"Yes\"\n    else:  # Aoki lost\n        return \"No\"\n\ndef"
    },
    {
        "number": 4312,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n\n    while A > 0 and C > 0:\n        C -= B\n        if C <= 0:\n            break\n        A -= D\n\n    return \"Yes\" if A > 0 else \"No\""
    },
    {
        "number": 4313,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    num_gems = int(lines[0])\n    values = [int(x) for x in lines[1].split()]\n    costs = [int(x) for x in lines[2].split()]\n\n    max_profit = 0\n    for i in range(num_gems):\n        for j in range(i + 1, num_gems):\n            profit = values[i] + values[j] - costs[i] - costs[j]\n            if profit > max_profit:\n                max_profit = profit\n\n    return str(max_profit)"
    },
    {
        "number": 4313,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline())\n    V = list(map(int, stdin.readline().split()))\n    C = list(map(int, stdin.readline().split()))\n\n    # Calculate X and Y\n    X = sum(V)\n    Y = sum(C)\n\n    # Calculate the maximum possible value of X-Y\n    max_value = X - Y\n\n    # Print the result\n    return str(max_value)"
    },
    {
        "number": 4313,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    N = int(lines[0])\n    values = list(map(int, lines[1].split()))\n    costs = list(map(int, lines[2].split()))\n    \n    # Find the gems to get maximum value\n    max_value = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                current_value = values[i] + values[j] + values[k]\n                current_cost = costs[i] + costs[j] + costs[k]\n                if current_value - current_cost > max_value:\n                    max_value = current_value - current_cost\n    \n    # Return the result\n    return str(max_value)"
    },
    {
        "number": 4313,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N = int(lines[0])\n    values = list(map(int, lines[1].split()))\n    costs = list(map(int, lines[2].split()))\n\n    max_value = 0\n    for i in range(2 ** N):\n        current_cost = 0\n        current_value = 0\n        for j in range(N):\n            if (i >> j) & 1:\n                current_cost += costs[j]\n                current_value += values[j]\n        max_value = max(max_value, current_value - current_cost)\n\n    return str(max_value)\n"
    },
    {
        "number": 4313,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, values, costs = stdin.split('\\n')\n    N = int(N)\n    values = [int(x) for x in values.split()]\n    costs = [int(x) for x in costs.split()]\n\n    max_profit = -float('inf')\n    for i in range(2**N):\n        selected = []\n        for j in range(N):\n            if i & (1 << j):\n                selected.append(j)\n        if len(selected) == 0:\n            continue\n        total_value = sum([values[i] for i in selected])\n        total_cost = sum([costs[i] for i in selected])\n        max_profit = max(max_profit, total_value - total_cost)\n\n    return str(max_profit)\n"
    },
    {
        "number": 4313,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, *gems = stdin.split()\n    values = gems[:int(N)]\n    costs = gems[int(N):]\n\n    max_value = 0\n\n    for i in range(int(N)):\n        for j in range(int(N)):\n            if i != j:\n                value = int(values[i]) - int(costs[i]) - int(costs[j])\n                max_value = max(max_value, value)\n\n    return str(max_value)\n"
    },
    {
        "number": 4313,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    N = int(input_list[0])\n    values = list(map(int, input_list[1].split()))\n    costs = list(map(int, input_list[2].split()))\n\n    max_value = 0\n    for i in range(N):\n        max_value = max(max_value, values[i] - costs[i])\n\n    return str(max_value)\n\ndef"
    },
    {
        "number": 4313,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    gems = stdin.strip().split('\\n')\n    values = list(map(int, gems[0].split()))\n    costs = list(map(int, gems[1].split()))\n    \n    max_profit = float('-inf')\n    for i in range(2**len(values)):\n        selected = []\n        total_value = 0\n        total_cost = 0\n        for j in range(len(values)):\n            if i & (1 << j):\n                selected.append(j)\n                total_value += values[j]\n                total_cost += costs[j]\n        if len(selected) > 0:\n            max_profit = max(max_profit, total_value - total_cost)\n    \n    return str(max_profit)"
    },
    {
        "number": 4313,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, gems, costs = stdin.split('\\n')\n    N = int(N)\n    gems = list(map(int, gems.split()))\n    costs = list(map(int, costs.split()))\n\n    max_value = -1\n    for i in range(2 ** N):\n        selected_gems = [j for j in range(N) if (i & (1 << j))]\n        selected_cost = sum(costs[j] for j in selected_gems)\n        selected_value = sum(gems[j] for j in selected_gems)\n        if selected_value - selected_cost > max_value:\n            max_value = selected_value - selected_cost\n\n    return str(max_value)"
    },
    {
        "number": 4313,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, V, C = [int(x) for x in stdin.strip().split(\"\\n\")[1].split()], [int(x) for x in stdin.strip().split(\"\\n\")[2].split()]\n    X, Y, ans = 0, 0, 0\n\n    for i in range(N[0]):\n        if V[i] > C[i]:\n            X += V[i]\n            Y += C[i]\n        elif V[i] < C[i]:\n            ans += C[i] - V[i]\n        else:\n            pass\n\n    return str(X - Y + ans)"
    },
    {
        "number": 4314,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def compress_grid(grid: List[List[str]]) -> List[List[str]]:\n        result = []\n        row_idx = 0\n        col_idx = 0\n        while row_idx < len(grid) and col_idx < len(grid[0]):\n            if grid[row_idx][col_idx] == \"#\":\n                row_idx += 1\n                continue\n            new_row = []\n            for j in range(col_idx, len(grid[0])):\n                if grid[row_idx][j] == \".\":\n                    break\n                new_row.append(grid[row_idx][j])\n            else:\n                col_idx = len(grid[0])\n            if new_row:\n                result.append(new_row)\n            row_idx += 1\n        return result\n\n    input_lines = stdin.split(\"\\n\")\n    num_rows, num_cols = map(int, input_lines[0].split())\n    grid = [list(row) for row in input_lines[1:]]\n\n    while True:\n        new_grid = compress_grid(grid)\n        if new_grid == grid:\n            break\n        grid = new_grid\n\n    return \"\\n\".join(\"\".join(row) for row in grid)"
    },
    {
        "number": 4314,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = map(int, stdin.splitlines()[0].split())\n    grid = [list(row) for row in stdin.splitlines()[1:]]\n    while True:\n        # Check if there is a row or column that consists only of white squares\n        row_found = False\n        col_found = False\n        for i in range(rows):\n            if all(cell == '.' for cell in grid[i]):\n                grid.pop(i)\n                rows -= 1\n                row_found = True\n                break\n        for j in range(cols):\n            if all(cell[j] == '.' for cell in grid):\n                for row in grid:\n                    del row[j]\n                cols -= 1\n                col_found = True\n                break\n        if not (row_found or col_found):\n            break\n    return '\\n'.join([''.join(row) for row in grid])"
    },
    {
        "number": 4314,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def remove_rows_or_cols(matrix, rows_or_cols):\n        return [row for row in matrix if any(row)] if rows_or_cols == \"rows\" else [column for column in zip(*matrix) if any(column)]\n\n    def is_white(char):\n        return char == \".\"\n\n    def is_black(char):\n        return char == \"#\"\n\n    def get_matrix(stdin: str) -> List[List[str]]:\n        rows = stdin.split(\"\\n\")\n        return [[char for char in row] for row in rows[:-1]]\n\n    def get_final_state(matrix: List[List[str]]) -> List[List[str]]:\n        while any(row.count(\".\") == len(row) for row in matrix) or any(column.count(\".\") == len(column) for column in zip(*matrix)):\n            rows_or_cols = \"rows\" if any(row.count(\".\") == len(row) for row in matrix) else \"columns\"\n            matrix = remove_rows_or_cols(matrix, rows_or_cols)\n        return matrix\n\n    stdin = stdin.strip()\n    h, w = map(int, stdin.split()[:2])\n    matrix = get_matrix(stdin)\n    final_state = get_final_state(matrix)\n\n    output = \"\"\n    for row in final_state:\n        output += \"\".join(row) + \"\\n\"\n    return output\n\ninput_string = \"4 4\\n##.\\n....\\n##.\\n.#.\\n\"\nprint(solution(input_string)) "
    },
    {
        "number": 4314,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = map(int, input().split())\n    grid = [list(input()) for _ in range(rows)]\n\n    while any(all(cell == '.' for cell in row) for row in grid) or any(all(grid[i][j] == '.' for i in range(rows)) for j in range(cols)):\n        for i in range(rows):\n            if all(cell == '.' for cell in grid[i]):\n                del grid[i]\n                rows -= 1\n                break\n\n        for j in range(cols):\n            if all(grid[i][j] == '.' for i in range(rows)):\n                for i in range(rows):\n                    del grid[i][j]\n                cols -= 1\n                break\n\n    return '\\n'.join([''.join(row) for row in grid])"
    },
    {
        "number": 4314,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = map(int, stdin.splitlines()[0].split())\n    grid = [list(row.strip()) for row in stdin.splitlines()[1:]]\n\n    while any(all(cell == '.' for cell in row) for row in grid) or any(all(grid[i][j] == '.' for i in range(rows)) for j in range(cols)):\n        # Remove rows\n        grid = [row for row in grid if not all(cell == '.' for cell in row)]\n        # Remove columns\n        cols = len(grid[0])\n        grid = [[grid[i][j] for i in range(len(grid))] for j in range(cols) if not all(grid[i][j] == '.' for i in range(len(grid)))]\n        rows = len(grid)\n\n    return '\\n'.join([''.join(row) for row in grid])"
    },
    {
        "number": 4314,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    H, W = map(int, lines[0].split(' '))\n    a = [list(line) for line in lines[1:-1]]\n\n    while any(all(cell == '.' for cell in row) for row in a) or any(all(a[i][j] == '.' for i in range(H)) for j in range(W)):\n        a = [row for row in a if not all(cell == '.' for cell in row)]\n        a = [[a[i][j] for j in range(W) if a[0][j] != '.'] for i in range(len(a))]\n        a = [row for row in a if not all(cell == '.' for cell in row)]\n        H = len(a)\n        W = len(a[0])\n\n    return '\\n'.join([''.join(row) for row in a])"
    },
    {
        "number": 4314,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    h, w = map(int, lines[0].split())\n    grid = [list(line) for line in lines[1:]]\n\n    def is_white_row(row_index: int) -> bool:\n        return all(cell == '.' for cell in grid[row_index])\n\n    def is_white_column(column_index: int) -> bool:\n        return all(row[column_index] == '.' for row in grid)\n\n    def remove_white_row(row_index: int) -> None:\n        grid.pop(row_index)\n\n    def remove_white_column(column_index: int) -> None:\n        for row in grid:\n            row.pop(column_index)\n\n    while any(is_white_row(i) for i in range(h)) or any(is_white_column(j) for j in range(w)):\n        for i in range(h):\n            if is_white_row(i):\n                remove_white_row(i)\n                h -= 1\n        for j in range(w):\n            if is_white_column(j):\n                remove_white_column(j)\n                w -= 1\n\n    return '\\n'.join(''.join(row) for row in grid)"
    },
    {
        "number": 4314,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    rows, cols = map(int, lines[0].split())\n    grid = lines[1:-1]\n    while any(row.count('.') == cols for row in grid) or any(grid[i][j] == '.' for j in range(cols) for i in range(rows)):\n        row_to_remove = next((i for i, row in enumerate(grid) if row.count('.') == cols), None)\n        col_to_remove = next((j for j in range(cols) if all(grid[i][j] == '.' for i in range(rows))), None)\n        if row_to_remove is not None:\n            grid.pop(row_to_remove)\n        elif col_to_remove is not None:\n            for i in range(rows):\n                grid[i] = grid[i][:col_to_remove] + grid[i][col_to_remove + 1:]\n    return '\\n'.join([''.join(row) for row in grid])"
    },
    {
        "number": 4314,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    H, W = map(int, lines[0].split())\n    grid = [list(line) for line in lines[1:-1]]\n    \n    def compress_row(row):\n        return [square for square in row if square != '.']\n    \n    def compress_column(column):\n        return [square for square in column if square != '.']\n    \n    def find_empty_row():\n        for i in range(H):\n            if all(square == '.' for square in grid[i]):\n                return i\n        return -1\n    \n    def find_empty_column():\n        for j in range(W):\n            if all(square == '.' for square in [grid[i][j] for i in range(H)]):\n                return j\n        return -1\n    \n    while True:\n        empty_row = find_empty_row()\n        empty_column = find_empty_column()\n        if empty_row == -1 and empty_column == -1:\n            break\n        elif empty_row != -1:\n            grid.pop(empty_row)\n        else:\n            for i in range(H):\n                grid[i] = compress_row(grid[i][:empty_column] + grid[i][empty_column+1:])\n            W -= 1\n    \n    return '\\n'.join([''.join(row) for row in grid])"
    },
    {
        "number": 4314,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def remove_row(matrix, row) -> list:\n        return [row[i] for i in range(len(row)) if i != row]\n\n    def remove_column(matrix, col) -> list:\n        return [row[col] for row in matrix if col in range(len(row))]\n\n    def find_white_rows_and_columns(matrix) -> tuple:\n        white_rows = []\n        white_columns = []\n\n        for i in range(len(matrix)):\n            if matrix[i] == '':\n                white_rows.append(i)\n\n        for j in range(len(matrix[0])):\n            if all(matrix[i][j] == '.' for i in range(len(matrix))):\n                white_columns.append(j)\n\n        return white_rows, white_columns\n\n    input_list = stdin.split('\\n')\n    rows = int(input_list[0].split(' ')[0])\n    columns = int(input_list[0].split(' ')[1])\n    matrix = [row for row in input_list[1:]]\n\n    while True:\n        white_rows, white_columns = find_white_rows_and_columns(matrix)\n\n        if len(white_rows) == 0 and len(white_columns) == 0:\n            break\n\n        if len(white_rows) > 0:\n            matrix = remove_row(matrix, white_rows[0])\n        elif len(white_columns) > 0:\n            matrix = remove_column(matrix, white_columns[0])\n\n    return '\\n'.join([''.join(row) for row in matrix])\n\ndef"
    },
    {
        "number": 4315,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    circumference = 2 * 3.14159265359 * R\n    return f\"{circumference:.6f}\""
    },
    {
        "number": 4315,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin.strip())\n    pi = 3.14159265359\n    circumference = 2 * pi * R\n    return f\"{circumference:.2f}\"\n\ninput_string = input()\nprint(solution(input_string)) "
    },
    {
        "number": 4315,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    PI = 3.14159265358979323846\n    circumference = 2 * PI * R\n    return str(circumference)\n\ninput_data = input()\nresult = solution(input_data)\nprint(result) "
    },
    {
        "number": 4315,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    pi = 3.141592653589793\n    circumference = 2 * pi * R\n    return f\"{circumference:.10f}\" "
    },
    {
        "number": 4315,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    if 1 <= R <= 100:\n        circumference = 2 * 3.14159 * R\n        return f\"{circumference:.10f}\"\n    else:\n        return \"Invalid Input\""
    },
    {
        "number": 4315,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    PI = 3.141592653589793\n    circumference = 2 * PI * R\n    return '{:.6f}'.format(circumference)"
    },
    {
        "number": 4315,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    pi = 3.14159\n    circumference = 2 * pi * R\n    return f\"{circumference:.6f}\" "
    },
    {
        "number": 4315,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin.strip())\n    circumference = 2 * 3.14 * R\n    return f\"{circumference:.10f}\"\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4315,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    pi = 3.141592653589793\n    circumference = 2 * pi * R\n    return str(circumference)\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4315,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin.strip())\n    if 1 <= R <= 100:\n        pi = 3.141592653589793\n        circumference = 2 * pi * R\n        return f\"{circumference:.6f}\"\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 4316,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if len(s) != 4:\n        return \"No\"\n\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    if len(char_count) != 2:\n        return \"No\"\n\n    if max(char_count.values()) != 2:\n        return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4316,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) != 4:\n        return \"No\"\n\n    frequency_map = {}\n    for char in stdin:\n        if char in frequency_map:\n            frequency_map[char] += 1\n        else:\n            frequency_map[char] = 1\n\n    if len(frequency_map) != 2:\n        return \"No\"\n\n    for value in frequency_map.values():\n        if value != 2:\n            return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4316,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    char_count = {}\n    for char in stdin:\n        char_count[char] = char_count.get(char, 0) + 1\n\n    distinct_chars = len([char for char in char_count.values() if char == 2])\n\n    if distinct_chars == 2:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4316,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    counts = {}\n    for char in stdin:\n        if char in counts:\n            counts[char] += 1\n        else:\n            counts[char] = 1\n\n    if len(counts) == 2:\n        for count in counts.values():\n            if count != 2:\n                return \"No\"\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4316,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s) != 4:\n        return \"No\"\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    if len(char_count) != 2:\n        return \"No\"\n    for count in char_count.values():\n        if count != 2:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4316,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # create a dictionary to store the frequency of each character in the input string\n    char_freq = {}\n    for char in stdin:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n\n    # check if there are exactly two characters that appear twice\n    if len(char_freq) == 2:\n        for freq in char_freq.values():\n            if freq != 2:\n                return \"No\"\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4316,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    char_count = {}\n    for char in stdin:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    double_chars = [char for char, count in char_count.items() if count == 2]\n    \n    if len(double_chars) == 2:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4316,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) != 4:\n        return \"No\"\n\n    char_count = {}\n    for char in stdin:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    unique_chars = set(char_count.values())\n    if len(unique_chars) == 2 and 2 in unique_chars:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4316,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s) != 4:\n        return \"No\"\n\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    if len(char_count) != 2:\n        return \"No\"\n\n    for count in char_count.values():\n        if count != 2:\n            return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4316,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    char_count = {}\n    for char in stdin:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    count_dict = {}\n    for value in char_count.values():\n        if value in count_dict:\n            count_dict[value] += 1\n        else:\n            count_dict[value] = 1\n\n    if len(count_dict) == 2 and 2 in count_dict.values():\n        return \"Yes\"\n    else:\n        return \"No\"\n\ndef"
    },
    {
        "number": 4317,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    options = [A + B, A - B, A * B]\n    return str(max(options))"
    },
    {
        "number": 4317,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    max_num = max(A + B, A - B, A * B)\n    return str(max_num)"
    },
    {
        "number": 4317,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    max_num = max(A + B, A - B, A * B)\n    return str(max_num)"
    },
    {
        "number": 4317,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    options = [A + B, A - B, A * B]\n    return str(max(options))"
    },
    {
        "number": 4317,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    operations = [A + B, A - B, A * B]\n    return max(operations)"
    },
    {
        "number": 4317,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n\n    max_num = max(A + B, A - B, A * B)\n\n    return str(max_num)"
    },
    {
        "number": 4317,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split())\n    A_plus_B = A + B\n    A_minus_B = A - B\n    A_times_B = A * B\n    return max(A_plus_B, A_minus_B, A_times_B)"
    },
    {
        "number": 4317,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    A_plus_B = A + B\n    A_minus_B = A - B\n    A_times_B = A * B\n\n    largest = max(A_plus_B, A_minus_B, A_times_B)\n    return str(largest)"
    },
    {
        "number": 4317,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    operations = [a+b, a-b, a*b]\n    return str(max(operations))"
    },
    {
        "number": 4317,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split())\n    operations = [A + B, A - B, A * B]\n    return str(max(operations))"
    },
    {
        "number": 4318,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *heights = map(int, stdin.split())\n\n    count = 0\n    for i in range(1, N + 1):\n        if all(heights[j] <= heights[i] for j in range(1, i)):\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4318,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def can_see_ocean(mountain_heights: List[int]) -> int:\n        for i in range(1, len(mountain_heights)):\n            if mountain_heights[i] <= mountain_heights[i-1]:\n                return False\n        return True\n\n    def process_input(stdin: str) -> Tuple[int, List[int]]:\n        N, *mountain_heights = map(int, stdin.split())\n        return N, mountain_heights\n\n    N, mountain_heights = process_input(stdin)\n    inns_can_see_ocean = sum(can_see_ocean(mountain_heights[:i]) for i in range(1, N+1))\n    return str(inns_can_see_ocean)"
    },
    {
        "number": 4318,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    H = [int(h) for h in lines[1].split()]\n    can_see_ocean = [False] * N\n    can_see_ocean[0] = True\n    \n    for i in range(1, N):\n        if H[i] > H[i-1]:\n            can_see_ocean[i] = True\n    \n    count = sum(can_see_ocean)\n    return str(count)\n\ndef"
    },
    {
        "number": 4318,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    H = list(map(int, lines[1].split()))\n\n    count = 0\n    for i in range(1, N):\n        if all(H[j] <= H[i] for j in range(i)):\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4318,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, *heights = map(int, stdin.split())\n    can_see_ocean = 0\n\n    for i in range(1, N+1):\n        if all(heights[j] <= heights[i] for j in range(i)):\n            can_see_ocean += 1\n\n    return str(can_see_ocean)"
    },
    {
        "number": 4318,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, *heights = map(int, stdin.split())\n    count = 0\n    for i in range(1, N + 1):\n        if all(heights[j] <= heights[i] for j in range(i)):\n            count += 1\n    return str(count)\n\ndef"
    },
    {
        "number": 4318,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num_mountains, *heights = map(int, stdin.split())\n    count = 0\n    for i in range(1, num_mountains):\n        if all(heights[j] <= heights[i] for j in range(i)):\n            count += 1\n    return str(count)\n\ndef"
    },
    {
        "number": 4318,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num_mountains, *heights = map(int, stdin.split())\n    num_inns_with_ocean = 0\n    \n    for i in range(2, num_mountains+1):\n        if all(heights[j] <= heights[i] for j in range(1, i)):\n            num_inns_with_ocean += 1\n    \n    return str(num_inns_with_ocean)"
    },
    {
        "number": 4318,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Get input values\n    n, *heights = map(int, stdin.split())\n\n    # Initialize variables\n    count = 0\n\n    # Iterate over heights from west to east\n    for i in range(1, n):\n        if all(heights[j] <= heights[i] for j in range(i)):\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4318,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split('\\n')\n    N = int(input_lines[0])\n    H_i = list(map(int, input_lines[1].split()))\n    count = 0\n    \n    for i in range(1, N):\n        if all(H_i[j] <= H_i[i] for j in range(i)):\n            count += 1\n    \n    return str(count)"
    },
    {
        "number": 4319,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_list = list(map(int, stdin.strip().split()))\n    n = input_list[0]\n    input_list = input_list[1:]\n    \n    stairs_list = []\n    stair_count = 1\n    steps = 1\n    for i in range(1, n):\n        if input_list[i] == steps:\n            steps += 1\n        else:\n            stairs_list.append(steps)\n            steps = 1\n            stair_count += 1\n    stairs_list.append(steps)\n    \n    return str(stair_count) + '\\n' + ' '.join(str(x) for x in stairs_list) "
    },
    {
        "number": 4319,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_list = list(map(int, stdin.split()))\n    n = input_list[0]\n    steps_list = input_list[1:]\n    \n    stairways_count = 1\n    stairways_steps = []\n    \n    current_step = 1\n    for step in steps_list:\n        if step == current_step:\n            stairways_count += 1\n        else:\n            current_step = step\n            stairways_steps.append(current_step)\n    \n    return f\"{stairways_count}\\n{' '.join(map(str, stairways_steps))}\" "
    },
    {
        "number": 4319,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    numbers = list(map(int, stdin.strip().split()))\n    stairways = []\n    current_stairway = []\n    for num in numbers:\n        if num == 1:\n            current_stairway.append(num)\n        else:\n            current_stairway.append(num)\n            stairways.append(current_stairway)\n            current_stairway = []\n    if current_stairway:\n        stairways.append(current_stairway)\n    stairway_lengths = [len(stairway) for stairway in stairways]\n    return str(len(stairways)) + \"\\n\" + \" \".join(map(str, stairway_lengths))"
    },
    {
        "number": 4319,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    numbers = list(map(int, stdin.split()))\n    stairways = []\n    stairway = []\n    for i in range(len(numbers)):\n        if numbers[i] == 1:\n            stairway.append(numbers[i])\n        else:\n            if len(stairway) > 0:\n                stairways.append(stairway)\n            stairway = [numbers[i]]\n    if len(stairway) > 0:\n        stairways.append(stairway)\n    return str(len(stairways)) + '\\n' + ' '.join(str(len(s)) for s in stairways)\n\ninput_str = input()\nn = int(input_str.split()[0])\nnumbers = list(map(int, input_str.split()[1:]))\nprint(solution(' '.join(map(str, numbers)))) "
    },
    {
        "number": 4319,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    numbers = list(map(int, stdin.split()))\n    result = []\n    count = 1\n    current_steps = 0\n\n    for number in numbers:\n        if number == count:\n            current_steps += 1\n        else:\n            result.append(current_steps)\n            current_steps = 1\n            count += 1\n\n    result.append(current_steps)\n\n    return str(len(result)) + \"\\n\" + \" \".join(map(str, result))"
    },
    {
        "number": 4319,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_list = list(map(int, stdin.split()))\n    n = input_list[0]\n    t = 1\n    steps_count = 0\n    output = \"\"\n\n    for i in range(1, n):\n        if input_list[i] == input_list[i - 1] + 1:\n            steps_count += 1\n        else:\n            output += str(steps_count + 1) + \" \"\n            t += 1\n            steps_count = 0\n\n    output += str(steps_count + 1) + \" \"\n    output += str(t) + \"\\n\"\n    output += str(steps_count + 1)\n    return output"
    },
    {
        "number": 4319,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_numbers = [int(x) for x in stdin.split()]\n    steps = []\n    current_step = 1\n    stairways = 1\n    \n    for i in range(1, len(input_numbers)):\n        if input_numbers[i] == current_step:\n            current_step += 1\n        else:\n            steps.append(current_step - 1)\n            current_step = input_numbers[i]\n            stairways += 1\n            \n    steps.append(current_step - 1)\n    \n    return str(stairways) + '\\n' + ' '.join(map(str, steps))\n\ndef"
    },
    {
        "number": 4319,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    n, numbers = stdin.split('\\n')\n    n = int(n)\n    numbers = list(map(int, numbers.split()))\n\n    # Initialize variables\n    stairways = []\n    current_stairway = []\n\n    # Iterate through the given numbers\n    for i in range(n):\n        current_number = numbers[i]\n\n        # If the current number is equal to the last number in the current stairway,\n        # it means that Tanya has started a new stairway\n        if i > 0 and current_number == numbers[i - 1]:\n            current_stairway.append(current_number)\n            stairways.append(current_stairway)\n            current_stairway = []\n        else:\n            current_stairway.append(current_number)\n\n    # If Tanya has ended with a stairway, append it to stairways\n    if current_stairway:\n        stairways.append(current_stairway)\n\n    # Calculate the number of stairways and the number of steps in each stairway\n    t = len(stairways)\n    stairway_steps = [len(stairway) for stairway in stairways]\n\n    return str(t) + '\\n' + ' '.join(map(str, stairway_steps))"
    },
    {
        "number": 4319,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_list = list(map(int, stdin.split()))\n    n = input_list[0]\n    sequence = input_list[1:]\n\n    step_count = 1\n    stairway_count = 1\n    stairway_length = []\n\n    for i in range(1, n):\n        if sequence[i] == step_count:\n            step_count += 1\n        else:\n            stairway_length.append(step_count)\n            stairway_count += 1\n            step_count = 1\n\n    stairway_length.append(step_count)\n\n    return str(stairway_count) + \"\\n\" + \" \".join(str(length) for length in stairway_length)\n"
    },
    {
        "number": 4319,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    numbers = [int(x) for x in stdin.split()]\n    stairways = []\n    current_stairway = []\n    current_step = 1\n    for number in numbers:\n        if number == current_step:\n            current_step += 1\n            current_stairway.append(number)\n        else:\n            stairways.append(current_stairway)\n            current_stairway = [number]\n            current_step = 1\n    stairways.append(current_stairway)\n    \n    return f\"{len(stairways)}\\n{' '.join(str(len(stairway)) for stairway in stairways)}\""
    },
    {
        "number": 4320,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.strip().split(\"\\n\")[0])\n    res = []\n    for i in range(t):\n        n = int(stdin.strip().split(\"\\n\")[i+1])\n        x = 1\n        k = 1\n        while x + (2**(k-1) * x) <= n:\n            k += 1\n        res.append(x)\n    return \"\\n\".join(map(str, res))"
    },
    {
        "number": 4320,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for i in range(t):\n        n = int(stdin.split()[1])\n        x = 1\n        k = 2\n        while True:\n            if x + 2 * x + 4 * x + 8 * x + 16 * x + 32 * x + 64 * x + 128 * x == n:\n                break\n            x += 1\n            k += 1\n        print(x)"
    },
    {
        "number": 4320,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.strip().split(\"\\n\")[0])\n    for i in range(t):\n        n = int(stdin.strip().split(\"\\n\")[i+1])\n        x = 1\n        k = 2\n        while True:\n            if x + 2 * x + 4 * x + 8 * x + 16 * x + 32 * x == n:\n                break\n            elif x + 2 * x + 4 * x + 8 * x + 16 * x + 32 * x < n:\n                x += 2**(k-1)\n                k += 1\n            else:\n                k -= 1\n                x -= 2**(k-1)\n        print(x)"
    },
    {
        "number": 4320,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def find_x_k(n: int) -> Tuple[int, int]:\n        x = 1\n        k = 2\n        while x * 2**(k - 1) < n:\n            k += 1\n        return x, k\n\n    t = int(stdin.strip())\n    output = []\n    for _ in range(t):\n        n = int(input())\n        x, k = find_x_k(n)\n        output.append(x)\n    return \"\\n\".join(map(str, output))"
    },
    {
        "number": 4320,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.strip().split('\\n')[0])\n    result = []\n\n    for i in range(1, t + 1):\n        n = int(stdin.strip().split('\\n')[i])\n        x = 1\n        k = 2\n\n        while x * 2 ** (k - 1) < n:\n            x *= 2\n            k += 1\n\n        result.append(x)\n\n    return \"\\n\".join(map(str, result))"
    },
    {
        "number": 4320,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.strip().split('\\n')[0])\n    result = []\n\n    for i in range(1, t + 1):\n        n = int(stdin.strip().split('\\n')[i])\n        x = 1\n        k = 1\n\n        while True:\n            if x + 2 * x + 4 * x + 8 * x + 16 * x + 32 * x >= n:\n                if x + 2 * x + 4 * x + 8 * x + 16 * x + 32 * x == n:\n                    result.append(x)\n                break\n            x += 1\n            k += 1\n\n    return '\\n'.join(map(str, result))\n\n\ndef"
    },
    {
        "number": 4320,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for i in range(t):\n        n = int(stdin.split()[i+1])\n        x = 1\n        while True:\n            k = 1\n            result = 0\n            while k <= 30:\n                result += x * (2 ** (k-1))\n                if result > n:\n                    break\n                k += 1\n            if result == n:\n                break\n            x += 1\n        print(x)"
    },
    {
        "number": 4320,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for i in range(t):\n        n = int(input())\n        x = 1\n        k = 1\n        while True:\n            if x + 2*x + 4*x + 8*x + 16*x + 32*x + 64*x == n:\n                break\n            if x + 2*x + 4*x + 8*x + 16*x + 32*x + 64*x > n:\n                x -= 1\n            else:\n                x += 1\n            k += 1\n        print(x)\n        \nstdin = \"7\\n3\\n6\\n7\\n21\\n28\\n999999999\\n999999984\"\nsolution(stdin) "
    },
    {
        "number": 4320,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def find_x_and_k(n: int) -> str:\n        x = 1\n        k = 1\n        while x + 2 * x <= n:\n            k += 1\n            x = 2 ** k - 1\n        return str(x)\n\n    input_list = stdin.split(\"\\n\")\n    t = int(input_list[0])\n    result = []\n\n    for i in range(1, t + 1):\n        n = int(input_list[i])\n        x = find_x_and_k(n)\n        result.append(x)\n\n    return \"\\n\".join(result)\n\n\ndef"
    },
    {
        "number": 4320,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.splitlines()[0])\n    for i in range(1, t+1):\n        n = int(stdin.splitlines()[i])\n        x = 1\n        k = 2\n        while (1 << (k-1))*x <= n:\n            x = 1 << (k-1)\n            k += 1\n        print(x)"
    },
    {
        "number": 4321,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    while k > 0:\n        if n % 10 != 0:\n            n -= 1\n        else:\n            n //= 10\n        k -= 1\n    return str(n)"
    },
    {
        "number": 4321,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    result = n\n    for _ in range(k):\n        if result % 10 != 0:\n            result -= 1\n        else:\n            result //= 10\n    return str(result)"
    },
    {
        "number": 4321,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    result = n\n\n    for _ in range(k):\n        if result % 10 == 0:\n            result //= 10\n        else:\n            result -= 1\n\n    return str(result)"
    },
    {
        "number": 4321,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    for _ in range(k):\n        if n % 10 == 0:\n            n //= 10\n        else:\n            n -= 1\n    return str(n)\n\ndef"
    },
    {
        "number": 4321,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    while k > 0:\n        if n % 10 != 0:\n            n -= 1\n        else:\n            n //= 10\n        k -= 1\n    return str(n)"
    },
    {
        "number": 4321,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    while k > 0:\n        if n % 10 == 0:\n            n //= 10\n        else:\n            n -= 1\n        k -= 1\n    return str(n)"
    },
    {
        "number": 4321,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    for _ in range(k):\n        if n % 10 == 0:\n            n //= 10\n        else:\n            n -= 1\n    return str(n)\n\ndef"
    },
    {
        "number": 4321,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    result = n\n    for _ in range(k):\n        if result % 10 == 0:\n            result //= 10\n        else:\n            result -= 1\n    return str(result)"
    },
    {
        "number": 4321,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    result = n\n    for _ in range(k):\n        if result % 10 == 0:\n            result //= 10\n        else:\n            result -= 1\n    return str(result)"
    },
    {
        "number": 4321,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    result = n\n\n    for _ in range(k):\n        if result % 10 == 0:\n            result //= 10\n        else:\n            result -= 1\n\n    return str(result)"
    },
    {
        "number": 4322,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    heights = list(map(int, stdin.split(\"\\n\")[1].split()))\n    max_people = 0\n    max_circle = []\n\n    def is_valid_circle(circle):\n        for i in range(len(circle) - 1):\n            if abs(circle[i] - circle[i + 1]) > 1:\n                return False\n        return True\n\n    def find_max_circle(people):\n        nonlocal max_people, max_circle\n        if len(people) == 1:\n            max_people = 1\n            max_circle = [people[0]]\n            return\n\n        for i in range(len(people)):\n            left_circle = find_max_circle(people[:i] + people[i + 1:])\n            right_circle = find_max_circle(people[:i] + people[i:])\n\n            if len(left_circle) + len(right_circle) > max_people:\n                left_circle.extend(right_circle)\n                if is_valid_circle(left_circle):\n                    max_people = len(left_circle)\n                    max_circle = left_circle\n\n    find_max_circle(heights)\n    return f\"{max_people}\\n{' '.join(map(str, max_circle))}\"\n\ninputs = [\n    \"7\\n4 3 5 1 2 2 1\",\n    \"5\\n3 7 5 1 5\",\n    \"3\\n5 1 4\",\n    \"7\\n2 2 3 2 1 2 2\"\n]\n\nfor input_str in inputs:\n    print(solution(input_str)) "
    },
    {
        "number": 4322,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, heights = stdin.split()\n    n = int(n)\n    heights = list(map(int, heights.split()))\n    \n    max_people = 0\n    max_heights = []\n    for i in range(1, n):\n        for j in range(i, n):\n            people = heights[i:j+1]\n            if len(people) == 1 or abs(people[0] - people[-1]) <= 1:\n                balanced = True\n                for k in range(len(people) - 1):\n                    if abs(people[k] - people[k+1]) > 1:\n                        balanced = False\n                        break\n                if balanced:\n                    if len(people) > max_people:\n                        max_people = len(people)\n                        max_heights = people\n                    elif len(people) == max_people and sum(people) > sum(max_heights):\n                        max_heights = people\n    \n    return str(max_people) + \"\\n\" + \" \".join(str(x) for x in max_heights)"
    },
    {
        "number": 4322,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, people = map(int, stdin.split())\n    people = list(map(int, people.split()))\n    people.sort()\n\n    def is_valid(subset: List[int]) -> bool:\n        for i in range(len(subset) - 1):\n            if abs(subset[i] - subset[i + 1]) > 1:\n                return False\n        return True\n\n    def find_max_balanced_circle(left: int, right: int) -> List[int]:\n        if left == right:\n            return [people[left]]\n        mid = (left + right) // 2\n        left_circle = find_max_balanced_circle(left, mid)\n        right_circle = find_max_balanced_circle(mid + 1, right)\n\n        if not is_valid(left_circle + right_circle):\n            return max(left_circle, right_circle, key=len)\n        else:\n            return left_circle + right_circle\n\n    max_balanced_circle = find_max_balanced_circle(0, n - 1)\n    return str(len(max_balanced_circle)) + \"\\n\" + \" \".join(map(str, max_balanced_circle))"
    },
    {
        "number": 4322,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    heights = list(map(int, stdin.readline().strip().split()))\n\n    max_balanced = [0] * n\n    max_count = 1\n\n    # Check each person as the center\n    for i in range(n):\n        count = 1\n        left, right = 0, 0\n\n        # Move left and right pointers to find the maximum balanced circle\n        while left <= i and right < n:\n            if abs(heights[i] - heights[left]) <= 1 and abs(heights[i] - heights[right]) <= 1:\n                count += 2\n                left += 1\n                right += 1\n            else:\n                break\n\n        max_balanced[i] = count\n        max_count = max(max_count, count)\n\n    # Find the chosen people for the maximum count\n    chosen = []\n    for i in range(n):\n        if max_balanced[i] == max_count:\n            chosen.append(i)\n\n    # Construct the maximum balanced circle\n    result = []\n    if len(chosen) == 1:\n        result.append(heights[chosen[0]])\n    else:\n        left, right = 0, len(chosen) - 1\n        while left < right:\n            result.append(heights[chosen[left]])\n            result.append(heights[chosen[right]])\n            left += 1\n            right -= 1\n        if left == right:\n            result.append(heights[chosen[left]])\n\n    # Print the result\n    return f\"{len(result)}\\n{' '.join(str(x) for x in result)}\""
    },
    {
        "number": 4322,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def check_balanced_circle(heights: List[int]) -> bool:\n        for i in range(len(heights) - 1):\n            if abs(heights[i] - heights[i + 1]) > 1:\n                return False\n        return True\n\n    def max_balanced_circle(heights: List[int]) -> List[int]:\n        heights.sort()\n        max_circle = []\n        for i in range(len(heights)):\n            for j in range(i + 1, len(heights) + 1):\n                circle = heights[i:j]\n                if check_balanced_circle(circle):\n                    if len(circle) > len(max_circle):\n                        max_circle = circle\n        return max_circle\n\n    n = int(stdin.readline().strip())\n    heights = list(map(int, stdin.readline().strip().split()))\n    max_circle = max_balanced_circle(heights)\n    return str(len(max_circle)) + \"\\n\" + \" \".join(map(str, max_circle)) + \"\\n\""
    },
    {
        "number": 4322,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    heights = list(map(int, stdin.split()[1:]))\n    heights.sort()\n\n    def max_balanced_circle(heights: List[int]) -> List[int]:\n        max_circle = []\n        i = 0\n        while heights:\n            max_height = max(heights)\n            max_circle.append(max_height)\n            heights.remove(max_height)\n            if i % 2 == 0:\n                max_circle.insert(0, max_height - 1)\n            else:\n                max_circle.append(max_height - 1)\n            i += 1\n        return max_circle\n\n    balanced_circle = max_balanced_circle(heights)\n    return str(len(balanced_circle)) + \"\\n\" + \" \".join(map(str, balanced_circle))"
    },
    {
        "number": 4322,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, people = stdin.split(\"\\n\")\n    n = int(n)\n    people = list(map(int, people.split()))\n\n    def dfs(start, visited, heights, max_heights):\n        if len(heights) > max_heights[0]:\n            max_heights[0] = len(heights)\n            max_heights[1] = heights\n        if len(heights) == n:\n            return\n\n        for i in range(start, n):\n            if i in visited:\n                continue\n            if len(heights) > 0 and abs(heights[-1] - people[i]) > 1:\n                continue\n            visited.add(i)\n            dfs(i + 1, visited, heights + [people[i]], max_heights)\n            visited.remove(i)\n\n    max_heights = [0, []]\n    dfs(0, set(), [], max_heights)\n    max_heights = max_heights[1]\n\n    return f\"{len(max_heights)}\\n{' '.join(map(str, max_heights))}\""
    },
    {
        "number": 4322,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    heights = list(map(int, stdin.split('\\n')[1].split()))\n\n    # Sort the heights in non-decreasing order\n    heights.sort()\n\n    # Initialize the maximum balanced circle with only one person\n    max_balanced_circle = [heights[0]]\n    max_k = 1\n\n    # Check all possible subsets of size 2 to n\n    for k in range(2, n + 1):\n        # Initialize the current balanced circle\n        current_balanced_circle = []\n\n        # Add the first person to the balanced circle\n        current_balanced_circle.append(heights[0])\n\n        # Add the remaining people to the balanced circle\n        for i in range(1, k):\n            if abs(heights[i] - heights[0]) <= 1:\n                current_balanced_circle.append(heights[i])\n\n        # Check if the current balanced circle has more people than the previous maximum\n        if len(current_balanced_circle) > max_k:\n            max_balanced_circle = current_balanced_circle\n            max_k = len(max_balanced_circle)\n\n    # Return the result\n    return str(max_k) + '\\n' + ' '.join(map(str, max_balanced_circle))"
    },
    {
        "number": 4322,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def find_balanced_circle(stdin: str) -> str:\n        n, heights = stdin.splitlines()\n        n = int(n)\n        heights = list(map(int, heights.split()))\n\n        heights.sort()\n        left, right = 0, n - 1\n        max_people = 0\n        result = []\n\n        while left < right:\n            if heights[right] - heights[left] > 1:\n                break\n            elif heights[right] - heights[left] == 1:\n                result.extend([heights[left], heights[right]])\n                max_people = max(max_people, len(result))\n                left += 1\n                right -= 1\n            else:\n                result.extend([heights[left], heights[left], heights[right]])\n                max_people = max(max_people, len(result))\n                left += 1\n                right -= 1\n\n        return str(max_people), \" \".join(map(str, result))\n\n    return find_balanced_circle(stdin)\n"
    },
    {
        "number": 4322,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, heights = stdin.split('\\n')\n    n = int(n)\n    heights = list(map(int, heights.split()))\n    max_circle = [1]\n    for i in range(1, n):\n        if abs(heights[i] - heights[0]) <= 1:\n            max_circle.append(i+1)\n    return str(len(max_circle)) + \"\\n\" + \" \".join(map(str, [heights[i-1] for i in max_circle]))"
    },
    {
        "number": 4323,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    songs = []\n    for i in range(n):\n        a, b = map(int, stdin.split()[2:4])\n        songs.append((a, b))\n\n    total_size = sum([a for a, b in songs])\n    if total_size > m:\n        return \"-1\"\n\n    min_compress = min([a - b for a, b in songs])\n    songs = sorted(songs, key=lambda x: x[1])\n\n    count = 0\n    for i in range(n):\n        if songs[i][1] - min_compress >= 0:\n            songs[i] = (songs[i][0], songs[i][1] - min_compress)\n            count += 1\n\n    return str(count)\n\ndef"
    },
    {
        "number": 4323,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    songs = []\n    for i in range(n):\n        a, b = map(int, stdin.split()[2*i+2:2*i+4])\n        songs.append((a, b))\n\n    def get_min_compress(songs, m):\n        songs.sort(key=lambda x: x[1])\n        total_size = sum([s[0] for s in songs])\n        compress_size = sum([s[1] for s in songs])\n        if compress_size > m:\n            return -1\n\n        count = 0\n        for i in range(len(songs)):\n            if compress_size + songs[i][1] <= m:\n                compress_size += songs[i][1]\n                count += 1\n            else:\n                break\n\n        return count\n\n    return str(get_min_compress(songs, m))"
    },
    {
        "number": 4323,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    songs = []\n    compressible = []\n    for line in stdin.split()[2:]:\n        a, b = map(int, line.split())\n        songs.append(a)\n        compressible.append(b)\n\n    if sum(songs) > m:\n        return \"-1\"\n\n    songs = sorted(songs, reverse=True)\n    compressible = sorted(compressible, reverse=True)\n\n    i = 0\n    j = 0\n    while i < n and j < n:\n        if songs[i] + compressible[j] <= m:\n            i += 1\n            j += 1\n        else:\n            i += 1\n\n    return i\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4323,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    songs = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:n+1]]\n    \n    min_compress = float('inf')\n    for i in range(1, 2**n):\n        compress_songs = [j for j in range(n) if (i >> j) & 1]\n        compress_size = sum([songs[j][1] for j in compress_songs])\n        \n        if compress_size > m:\n            continue\n        \n        uncompress_size = sum([songs[j][0] for j in range(n) if j not in compress_songs])\n        compress_count = len(compress_songs)\n        \n        if uncompress_size + compress_size <= m:\n            min_compress = min(min_compress, compress_count)\n    \n    return str(min_compress) if min_compress != float('inf') else \"-1\"\n\ninput_data = input()\nprint(solution(input_data)) "
    },
    {
        "number": 4323,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    songs = []\n    for _ in range(n):\n        a, b = map(int, stdin.split()[2:4])\n        songs.append((a, b))\n    \n    songs.sort(key=lambda x: x[0] - x[1])\n    \n    total_size = sum([a for a, _ in songs])\n    if total_size > m:\n        return \"-1\"\n    \n    total_compressed_size = sum([b for _, b in songs])\n    if total_compressed_size <= m:\n        return \"0\"\n    \n    total_saved_size = total_size - total_compressed_size\n    min_compressed = float('inf')\n    for i in range(n):\n        saved_size = sum([s[0] - s[1] for s in songs[:i]])\n        compressed_size = sum([s[1] for s in songs[:i+1]])\n        if compressed_size <= m:\n            min_compressed = min(min_compressed, i + 1)\n        else:\n            break\n    \n    return str(min_compressed)"
    },
    {
        "number": 4323,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = []\n    b = []\n\n    for i in range(n):\n        a_i, b_i = map(int, input().split())\n        a.append(a_i)\n        b.append(b_i)\n\n    total_size = sum(a)\n    if total_size > m:\n        return \"-1\"\n\n    total_compressed_size = sum(b)\n    if total_compressed_size >= m:\n        return str(n)\n\n    if total_compressed_size < m:\n        return str(n - 1)\n\n    return \"-1\"\n\ndef"
    },
    {
        "number": 4323,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[0].split())\n    songs = [list(map(int, line.split())) for line in stdin.split('\\n')[1:n+1]]\n\n    if m < songs[0][1]:\n        return \"-1\"\n\n    min_compress = min(songs, key=lambda x: x[1])\n\n    if m < sum(song[1] for song in songs):\n        return \"-1\"\n    elif m == sum(song[1] for song in songs):\n        return \"0\"\n    else:\n        return str(len([song for song in songs if song[1] == min_compress[1]]))\n"
    },
    {
        "number": 4323,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.splitlines()[0].split())\n    songs = []\n    \n    for line in stdin.splitlines()[1:]:\n        a, b = map(int, line.split())\n        songs.append((a, b))\n\n    songs.sort(key=lambda x: x[0])\n    min_compressed = n\n    current_sum = 0\n\n    for i in range(n):\n        if current_sum + songs[i][1] <= m:\n            current_sum += songs[i][1]\n            min_compressed = min(min_compressed, i + 1)\n        else:\n            break\n\n    if current_sum == m:\n        return str(min_compressed)\n    else:\n        return \"-1\"\n"
    },
    {
        "number": 4323,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n, m = map(int, lines[0].split())\n    songs = [tuple(map(int, line.split())) for line in lines[1:]]\n\n    songs.sort(key=lambda x: x[1])\n\n    total_size = sum(a for a, b in songs)\n\n    if total_size > m:\n        return \"-1\"\n\n    compressed_size = sum(b for a, b in songs)\n    compress_count = 0\n\n    for i, (a, b) in enumerate(songs):\n        if compressed_size + (m - total_size) >= m:\n            break\n\n        total_size += m - compressed_size\n        compressed_size = sum(b if i != j else a for j, (a, b) in enumerate(songs))\n        compress_count += 1\n\n    return str(compress_count)"
    },
    {
        "number": 4323,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n, m = map(int, lines[0].split())\n    songs = []\n\n    for i in range(1, n + 1):\n        a, b = map(int, lines[i].split())\n        songs.append((a, b))\n\n    # Check if there is a subset of songs that can be compressed to fit on the drive\n    def can_fit_subset(subset_sum: int) -> bool:\n        for song in subset_sum:\n            if song[0] > song[1] and song[1] > 0:\n                subset_sum -= song[1]\n            else:\n                subset_sum -= song[0]\n        return subset_sum <= m\n\n    # Find the minimum number of songs to compress\n    def find_min_songs(songs: list, remaining_size: int) -> int:\n        min_songs = float('inf')\n\n        for i in range(1, len(songs) + 1):\n            for subset in itertools.combinations(songs, i):\n                subset_sum = sum(song[0] for song in subset)\n                if subset_sum <= remaining_size and can_fit_subset(subset):\n                    min_songs = min(min_songs, i)\n        return min_songs if min_songs != float('inf') else -1\n\n    # Try all possible subset sizes\n    for i in range(1, len(songs) + 1):\n        subset = songs[:i]\n        remaining_size = m - sum(song[0] for song in subset)\n        min_songs = find_min_songs(subset, remaining_size)\n        if min_songs != -1:\n            return str(min_songs)\n    return \"-1\""
    },
    {
        "number": 4324,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.strip().split('\\n')\n    results = []\n    for test_case in test_cases:\n        n, a, b = map(int, test_case.split())\n        result = ''\n        letters = [chr(i) for i in range(97, 123)]\n        for i in range(n):\n            if i % a == 0:\n                result += random.choice(letters)\n            else:\n                result += random.choice(result[-a:])\n        results.append(result)\n    return '\\n'.join(results)"
    },
    {
        "number": 4324,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(s: str, a: int, b: int) -> bool:\n        for i in range(len(s) - a + 1):\n            substring = s[i:i+a]\n            if len(set(substring)) != b:\n                return False\n        return True\n\n    t = int(stdin.split()[0])\n    result = []\n\n    for _ in range(t):\n        n, a, b = map(int, stdin.split())\n        for i in range(n):\n            for j in range(i, n):\n                s = ''.join([chr(97 + x % 26) for x in range(i, j+1)])\n                if len(s) == n and is_valid(s, a, b):\n                    result.append(s)\n                    break\n            else:\n                continue\n            break\n\n    return '\\n'.join(result)\n"
    },
    {
        "number": 4324,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n, a, b = map(int, stdin.readline().split())\n        letters = [chr(i) for i in range(ord('a'), ord('a') + 26)]\n        for letter in letters:\n            s = letter * n\n            count = 0\n            for i in range(len(s) - a + 1):\n                if len(set(s[i:i+a])) == b:\n                    count += 1\n            if count == n - a + 1:\n                print(s)\n                break"
    },
    {
        "number": 4324,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def count_distinct_letters(s: str) -> int:\n        return len(set(s))\n\n    def is_valid(s: str, a: int, b: int) -> bool:\n        for i in range(len(s) - a + 1):\n            substring = s[i:i+a]\n            if count_distinct_letters(substring) != b:\n                return False\n        return True\n\n    t = int(stdin.strip().split()[0])\n    result = []\n    for _ in range(t):\n        n, a, b = map(int, input().strip().split())\n        found = False\n        for i in range(1, 27):\n            for j in range(1, 27):\n                s = \"abcdefghijklmnopqrstuvwxyz\"\n                s = s[:i] + s[i+1:j] + s[j+1:]\n                if is_valid(s, a, b):\n                    result.append(s[:n])\n                    found = True\n                    break\n            if found:\n                break\n\n        if not found:\n            result.append(\"No solution found\")\n\n    return result\n\ndef"
    },
    {
        "number": 4324,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(s: str) -> bool:\n        for i in range(len(s) - a + 1):\n            substring = s[i:i + a]\n            if len(set(substring)) != b:\n                return False\n        return True\n\n    t = int(stdin.readline())\n    for _ in range(t):\n        n, a, b = map(int, stdin.readline().split())\n        s = \"\"\n        while not is_valid(s):\n            for i in range(n):\n                s += chr(ord('a') + random.randint(0, 25))\n        print(s)"
    },
    {
        "number": 4324,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    result = []\n\n    for _ in range(t):\n        n, a, b = map(int, stdin.readline().split())\n        letters = \"abcdefghijklmnopqrstuvwxyz\"\n        unique_letters = set()\n\n        while len(unique_letters) < a:\n            unique_letters.add(letters[len(unique_letters)])\n\n        if b > len(unique_letters):\n            return \"IMPOSSIBLE\"\n\n        result.append(\"\".join(unique_letters))\n\n    return \"\\n\".join(result)"
    },
    {
        "number": 4324,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.split(\"\\n\")\n    result = []\n\n    for test_case in test_cases[1:]:\n        n, a, b = map(int, test_case.split())\n        s = \"\"\n        for i in range(n):\n            if i % a == 0:\n                s += chr(i % 26 + 97)\n            else:\n                s += chr(i % 26 + 97)\n        result.append(s)\n\n    return \"\\n\".join(result)\n"
    },
    {
        "number": 4324,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def check_substring(s: str) -> bool:\n        return len(set(s)) == b\n\n    def generate_string(n: int, a: int, b: int) -> str:\n        if a == 1 and b == 1:\n            return \"\".join([chr(i) for i in range(97, 97 + n)])\n        elif a == 1:\n            from itertools import product\n            chars = \"abcdefghijklmnopqrstuvwxyz\"\n            return \"\".join([chars[i[0] % 26] for i in product(range(26), repeat=n)])\n        else:\n            s = generate_string(n - a + 1, a, b)\n            if not check_substring(s[:a]):\n                return None\n            s += generate_string(a, a, b)\n            return s\n\n    test_cases = stdin.strip().split(\"\\n\")\n    t = int(test_cases[0])\n    test_cases = test_cases[1:]\n\n    for i in range(t):\n        n, a, b = map(int, test_cases[i].split())\n        s = generate_string(n, a, b)\n        while s is None:\n            n, a, b = n - 1, a, b\n            s = generate_string(n, a, b)\n        print(s)"
    },
    {
        "number": 4324,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    output = []\n\n    for _ in range(t):\n        n, a, b = map(int, stdin.readline().split())\n\n        # Generate all possible combinations of length a with b distinct letters\n        all_combinations = []\n        for i in range(26):\n            for j in range(26):\n                if i != j:\n                    for k in range(26):\n                        if (i != k) and (j != k):\n                            for l in range(26):\n                                if (i != l) and (j != l) and (k != l):\n                                    all_combinations.append([chr(i + 97), chr(j + 97), chr(k + 97), chr(l + 97)])\n\n        # Filter combinations to only keep those with length a and b distinct letters\n        valid_combinations = []\n        for combination in all_combinations:\n            if len(set(combination)) == b:\n                valid_combinations.append(combination)\n\n        # Generate all possible substrings of length n with a valid combination\n        substrings = []\n        for combination in valid_combinations:\n            for i in range(n - a + 1):\n                substring = \"\".join(combination) * (a // len(combination)) + combination[:a - a // len(combination)]\n                substrings.append(substring)\n\n        # Find a valid substring with the longest length\n        longest_substring = \"\"\n        for substring in substrings:\n            if longest_substring == \"\":\n                longest_substring = substring\n            elif len(substring) > len(longest_substring):\n                longest_substring = substring\n\n        output.append(longest_substring)\n\n    return \"\\n\".join(output)"
    },
    {
        "number": 4324,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    t = int(lines[0])\n    result = []\n\n    for i in range(1, t + 1):\n        n, a, b = map(int, lines[i].split())\n        letters = \"abcdefghijklmnopqrstuvwxyz\"\n        s = \"\"\n        count = 0\n        for j in range(n):\n            if count % a == 0:\n                s += letters[j % 26]\n            else:\n                s += letters[(j + 1) % 26]\n            count += 1\n        result.append(s)\n\n    return \"\\n\".join(result)\n\ninput_str = \"\"\"4\n7 5 3\n6 1 1\n6 6 1\n5 2 2\"\"\"\n\nprint(solution(input_str)) # Output: tleelte\\nqwerty\\nvvvvvv\\nabcde "
    },
    {
        "number": 4325,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, X, T = map(int, stdin.split())\n\n    if N <= X:\n        return str(T)\n\n    total_time = 0\n    pieces_made = 0\n\n    while pieces_made < N:\n        total_time += T\n        pieces_made += X\n\n    return str(total_time)\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4325,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, x, t = map(int, stdin.split())\n    return str(min(n // x * t, (n // x + 1) * t))"
    },
    {
        "number": 4325,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, X, T = map(int, stdin.split())\n    \n    # Divide N by X to get the number of times he needs to make X pieces.\n    # Multiply T by the number of times to get the total time needed.\n    return str(max(N // X * T, N % X * T))"
    },
    {
        "number": 4325,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, X, T = map(int, stdin.split())\n    takoyaki_per_minute = X * T\n    total_takoyaki = N\n    total_minutes = total_takoyaki // takoyaki_per_minute\n    if total_takoyaki % takoyaki_per_minute != 0:\n        total_minutes += 1\n    return str(total_minutes)"
    },
    {
        "number": 4325,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, X, T = list(map(int, stdin.split()))\n    if N <= X * T:\n        return str(N // X * T + N % X * T)\n    else:\n        return str(N // X * T + (N // X + 1) * T)"
    },
    {
        "number": 4325,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # split the input string into three parts\n    n, x, t = map(int, stdin.split())\n\n    # calculate the number of full batches and remaining pieces\n    full_batches = n // x\n    remaining_pieces = n % x\n\n    # calculate the total time required\n    total_time = full_batches * t + (remaining_pieces != 0) * t\n\n    return str(total_time)"
    },
    {
        "number": 4325,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, X, T = map(int, stdin.split())\n    if N <= X * T:\n        return str(N // X * T)\n    else:\n        return str(X * T + (N - X) * T)"
    },
    {
        "number": 4325,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, X, T = map(int, stdin.split())\n    \n    if N % X == 0:\n        return str(N // X * T)\n    else:\n        return str((N // X + 1) * T)"
    },
    {
        "number": 4325,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, X, T = map(int, stdin.split())\n    if N < X:\n        return str(T * N)\n    else:\n        return str(T * (N // X) + T * (N % X))"
    },
    {
        "number": 4325,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, X, T = map(int, stdin.split())\n    total_pieces = 0\n    while total_pieces < N:\n        total_pieces += X\n    return str(total_pieces // X * T)"
    },
    {
        "number": 4326,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    groups = [1] * N\n    count = 0\n\n    for i in range(N):\n        for j in range(i + 1, N):\n            for k in range(j + 1, N):\n                groups[i] += 1\n                groups[j] += 1\n                groups[k] += 1\n                count += 1\n\n    max_count = 0\n    for i in range(N):\n        if groups[i] >= 3:\n            max_count += 1\n\n    return str(max_count)"
    },
    {
        "number": 4326,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    max_groups = 0\n    \n    # Count the number of groups with 3 or more students\n    for i in range(3, n+1):\n        max_groups += n // i\n    \n    return str(max_groups)"
    },
    {
        "number": 4326,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    max_groups = 0\n\n    for i in range(1, N + 1):\n        if N % i == 0:\n            if i >= 3:\n                max_groups = max(max_groups, N // i)\n\n    return str(max_groups)\n\ndef"
    },
    {
        "number": 4326,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N <= 2:\n        return \"0\"\n    elif N % 3 == 0:\n        return str(N // 3)\n    elif N % 3 == 1:\n        return str(N // 3 + 1)\n    else:\n        return str(N // 3 + 2)\n\ninput_str = \"8\"\nprint(solution(input_str)) "
    },
    {
        "number": 4326,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    groups_3_or_more = n // 3\n    groups_2_or_less = n % 3\n\n    if groups_2_or_less >= 2:\n        groups_3_or_more += 1\n        groups_2_or_less -= 2\n\n    return str(groups_3_or_more)"
    },
    {
        "number": 4326,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    students = int(stdin)\n    result = 0\n    for i in range(3, students+1):\n        if students % i == 0:\n            result += 1\n    return str(result)"
    },
    {
        "number": 4326,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read the number of students from stdin\n    N = int(stdin.strip())\n\n    # Initialize the count of groups with 3 or more students\n    groups_count = 0\n\n    # Count the number of groups with 3 or more students\n    for i in range(3, N + 1):\n        groups_count += N // i\n\n    return str(groups_count)"
    },
    {
        "number": 4326,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    max_groups = n // 3\n    return str(max_groups)"
    },
    {
        "number": 4326,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N <= 2:\n        return \"0\"\n    max_groups = N // 3\n    return str(max_groups)\n\ndef"
    },
    {
        "number": 4326,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    num_groups = 0\n    i = 3\n\n    while i <= n:\n        num_groups += n // i\n        i += 1\n\n    return str(num_groups)"
    },
    {
        "number": 4327,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, P = map(int, stdin.split())\n    apple_pies = 0\n    if A == 0 or P == 0:\n        return str(apple_pies)\n    \n    if P >= A * 3:\n        apple_pies = A\n    else:\n        apple_pies = P // 3\n    \n    return str(apple_pies)\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4327,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, P = map(int, stdin.split())\n\n    pies = min(P, A) // 2\n\n    return str(pies)"
    },
    {
        "number": 4327,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, P = map(int, stdin.split())\n    pies = 0\n    while A > 0 and P >= 2:\n        A -= 2\n        P -= 2\n        pies += 1\n    return str(pies)"
    },
    {
        "number": 4327,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, P = map(int, stdin.split())\n    apple_pie = 0\n    if P >= 2:\n        apple_pie += P // 2\n    if A >= 2:\n        apple_pie += A // 2\n    return str(apple_pie)"
    },
    {
        "number": 4327,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    apples, pieces = map(int, stdin.split())\n    \n    apple_pies = 0\n    \n    # If we have more apples than pieces, we can make apple pies by cutting an apple into three pieces and simmering two of them\n    if apples > pieces:\n        apple_pies += apples // 2\n        \n    # If we have more pieces than apples, we can make apple pies by simmering the remaining pieces\n    if pieces > apples:\n        apple_pies += pieces\n    \n    return str(apple_pies)"
    },
    {
        "number": 4327,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, P = map(int, stdin.split())\n    apples_needed = 2\n    pies_made = P // apples_needed\n    if P % apples_needed > 0:\n        pies_made += 1\n    return str(pies_made)"
    },
    {
        "number": 4327,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, P = map(int, stdin.split())\n    pies = 0\n    cuts = P // 3\n    if cuts > A:\n        pies += A\n    else:\n        pies += cuts\n        A -= cuts\n        if A > 1:\n            pies += A // 2\n            A -= A // 2\n        pies += A\n    return str(pies) "
    },
    {
        "number": 4327,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    A, P = map(int, stdin.split())\n\n    # Calculate the maximum number of apple pies we can make\n    apple_pies = min(A, P // 2) + max(A // 3 - P // 2, 0)\n\n    # Return the result\n    return str(apple_pies)"
    },
    {
        "number": 4327,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, P = map(int, stdin.split())\n    return str(min(P, A*2))"
    },
    {
        "number": 4327,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, P = map(int, stdin.split())\n    apple_pies = min(A, P // 2)\n    return str(apple_pies)\n\ndef"
    },
    {
        "number": 4328,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if b % a == 0:\n        return str(a + b)\n    else:\n        return str(b - a)"
    },
    {
        "number": 4328,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if b % a == 0:\n        return str(a + b)\n    else:\n        return str(b - a)\n\ndef"
    },
    {
        "number": 4328,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if B % A == 0:\n        return str(A + B)\n    else:\n        return str(B - A)"
    },
    {
        "number": 4328,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if B % A == 0:\n        return str(A + B)\n    else:\n        return str(B - A)"
    },
    {
        "number": 4328,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if B % A == 0:\n        return str(A + B)\n    else:\n        return str(B - A)"
    },
    {
        "number": 4328,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    \n    if B % A == 0:\n        return str(A + B)\n    else:\n        return str(B - A)"
    },
    {
        "number": 4328,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    \n    if B % A == 0:\n        return str(A + B)\n    else:\n        return str(B - A)"
    },
    {
        "number": 4328,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if B % A == 0:\n        return str(A + B)\n    else:\n        return str(B - A)"
    },
    {
        "number": 4328,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if B % A == 0:\n        return str(A + B)\n    else:\n        return str(B - A)"
    },
    {
        "number": 4328,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if B % A == 0:\n        return str(A + B)\n    else:\n        return str(B - A)"
    },
    {
        "number": 4329,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    if len(t) != len(s) + 1:\n        return \"No\"\n    if t[:len(s)] == s:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4329,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    return \"Yes\" if T.startswith(S) else \"No\"\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4329,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    if T == S + T[-1]:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4329,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    \n    if T.startswith(S):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4329,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    if len(t) == len(s) + 1:\n        if t.startswith(s):\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4329,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    S = input_list[0]\n    T = input_list[1]\n\n    if len(S) == len(T) - 1 and T.startswith(S):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4329,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    if len(t) != len(s) + 1:\n        return \"No\"\n    \n    for i in range(len(s)):\n        if s[i] != t[i]:\n            return \"No\"\n    \n    return \"Yes\""
    },
    {
        "number": 4329,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    if len(t) == len(s) + 1:\n        for i in range(len(s)):\n            if s[i] != t[i]:\n                return \"No\"\n        return \"Yes\"\n    else:\n        return \"No\"\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4329,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    if len(T) != len(S) + 1:\n        return \"No\"\n    for i in range(len(S)):\n        if S[i] != T[i]:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4329,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    if len(T) != len(S) + 1:\n        return \"No\"\n    for i in range(len(S)):\n        if S[i] == T[i]:\n            continue\n        elif S[i] == T[i+1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4330,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if abs(A - B) % 2 == 1:\n        return \"IMPOSSIBLE\"\n    else:\n        return str((A + B) // 2)\n\ndef"
    },
    {
        "number": 4330,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    \n    if a > b:\n        a, b = b, a\n    \n    k = (a + b) // 2\n    \n    if a == b:\n        return \"IMPOSSIBLE\"\n    \n    if k == a or k == b:\n        return k\n    else:\n        return \"IMPOSSIBLE\""
    },
    {
        "number": 4330,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    k = (A + B) // 2\n    if abs(A - k) == abs(B - k):\n        return str(k)\n    else:\n        return \"IMPOSSIBLE\""
    },
    {
        "number": 4330,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    K = (A + B) // 2\n    if abs(A - K) == abs(B - K):\n        return str(K)\n    else:\n        return \"IMPOSSIBLE\""
    },
    {
        "number": 4330,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split())\n    if abs(A - B) % 2 != 0:\n        return \"IMPOSSIBLE\"\n    else:\n        return str(int((A + B) / 2))"
    },
    {
        "number": 4330,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n\n    if abs(A - B) % 2 == 1:\n        return \"IMPOSSIBLE\"\n    else:\n        return str(int((A + B) / 2))"
    },
    {
        "number": 4330,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    for i in range(min(A, B) + 1, max(A, B)):\n        if abs(A - i) == abs(B - i):\n            return str(i)\n    return \"IMPOSSIBLE\""
    },
    {
        "number": 4330,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if abs(A - B) % 2 != 0:\n        return \"IMPOSSIBLE\"\n    else:\n        return str((A + B) // 2)"
    },
    {
        "number": 4330,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if abs(A - B) % 2 == 0:\n        return \"IMPOSSIBLE\"\n    else:\n        return str((A + B) // 2)"
    },
    {
        "number": 4330,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    diff = abs(A - B)\n    \n    if diff % 2 == 0:\n        return str(max(A, B))\n    else:\n        return \"IMPOSSIBLE\""
    },
    {
        "number": 4331,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if \"7\" in str(n):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4331,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if \"7\" in str(n):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4331,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if \"7\" in str(n):\n        return \"Yes\"\n    return \"No\"\n\ndef"
    },
    {
        "number": 4331,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if '7' in str(n):\n        return \"Yes\"\n    else:\n        return \"No\"\n\ndef"
    },
    {
        "number": 4331,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if '7' in str(n):\n        return 'Yes'\n    else:\n        return 'No'\n\ninput_str = input()\noutput_str = solution(input_str)\nprint(output_str) "
    },
    {
        "number": 4331,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if str(7) in str(n):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4331,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    if str(num) in '7':\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4331,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if '7' in str(n):\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4331,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if '7' in str(N):\n        return \"Yes\"\n    else:\n        return \"No\"\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4331,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin.strip())\n    if '7' in str(num):\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4332,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    digits = [int(d) for d in str(N)]\n    sum_digits = sum(digits)\n    if N % sum_digits == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ninput_str = input()\noutput_str = solution(input_str)\nprint(output_str) "
    },
    {
        "number": 4332,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = sum(map(int, str(N)))\n\n    if N % S == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4332,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    digits_sum = sum(int(digit) for digit in str(N))\n    if N % digits_sum == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4332,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S_N = sum(int(digit) for digit in str(N))\n    \n    if N % S_N == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4332,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    digit_sum = sum(int(digit) for digit in str(N))\n    if N % digit_sum == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4332,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    digits_sum = sum(int(digit) for digit in str(n))\n    if n % digits_sum == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4332,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    digit_sum = sum(int(digit) for digit in str(n))\n    if n % digit_sum == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4332,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s_n = sum(map(int, str(n)))\n    if n % s_n == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4332,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S_N = sum(int(digit) for digit in str(N))\n    if N % S_N == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4332,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    n_sum = sum(int(digit) for digit in str(n))\n    if n % n_sum == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4333,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    x_3 = x_1 + y_2 - y_1\n    y_3 = y_1 + x_2 - x_1\n    x_4 = -x_1 + y_2 + y_1\n    y_4 = -y_1 + x_2 + x_1\n    return f\"{x_3} {y_3} {x_4} {y_4}\""
    },
    {
        "number": 4333,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n\n    x_3 = x_1 - x_2 + y_1 - y_2\n    y_3 = x_2 + y_2 - x_1 - y_1\n\n    x_4 = -x_1 + x_2 + y_1 - y_2\n    y_4 = -x_2 + y_2 + x_1 - y_1\n\n    return f\"{x_3} {y_3} {x_4} {y_4}\""
    },
    {
        "number": 4333,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n\n    x_3 = x_1 + y_2 - y_1\n    y_3 = y_1 + y_2 - x_1\n\n    x_4 = x_2 - y_1 + y_2\n    y_4 = y_2 - x_1 + x_2\n\n    return f\"{x_3} {y_3} {x_4} {y_4}\"\n\ndef"
    },
    {
        "number": 4333,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n\n    def add_points(x1, y1, x2, y2, x3, y3):\n        return x1 + x2 + x3, y1 + y2 + y3\n\n    def is_on_axis(x, y):\n        return x == 0 or y == 0\n\n    if x_1 == x_2 and y_1 == y_2:\n        raise ValueError(\"x_1 and x_2, or y_1 and y_2, cannot be equal\")\n\n    if x_1 == 0:\n        x_3 = -1\n        if y_1 == y_2:\n            y_3 = 0\n        elif y_2 < y_1:\n            y_3 = 1\n        else:\n            y_3 = -1\n    elif x_2 == 0:\n        x_3 = -1\n        if y_2 == y_1:\n            y_3 = 0\n        elif y_1 < y_2:\n            y_3 = 1\n        else:\n            y_3 = -1\n    else:\n        x_3 = 1\n        if y_1 + y_2 == 0:\n            y_3 = 0\n        elif y_1 + y_2 > 0:\n            y_3 = 1\n        else:\n            y_3 = -1\n\n    x_4, y_4 = add_points(x_1, y_1, x_2, y_2, x_3, y_3)\n\n    if not is_on_axis(x_3, y_3) or not is_on_axis(x_4, y_4):\n        raise ValueError(\"x_3 and x_4, or y_3 and y_4, cannot be non-zero\")\n\n    return f\"{x_3} {y_3} {x_4} {y_4}\" "
    },
    {
        "number": 4333,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n\n    x_3, y_3 = x_1 + y_2 - y_1, x_1 - x_2 + y_1\n    x_4, y_4 = x_2 + y_2 - y_1, x_2 - x_1 + y_2\n\n    return f\"{x_3} {y_3} {x_4} {y_4}\""
    },
    {
        "number": 4333,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    x_3 = x_1 + x_2 - 2 * x_1 * x_2 / (x_1 + x_2)\n    y_3 = y_1 + y_2 - 2 * y_1 * y_2 / (x_1 + x_2)\n    x_4 = x_1 - x_2 + 2 * x_1 * x_2 / (x_1 + x_2)\n    y_4 = y_1 - y_2 + 2 * y_1 * y_2 / (x_1 + x_2)\n    return f\"{int(x_3)} {int(y_3)} {int(x_4)} {int(y_4)}\" "
    },
    {
        "number": 4333,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x3, y3, x4, y4 = 0, 0, 0, 0\n\n    # calculate the values of x3, y3, x4, y4\n    if x1 == x2 and y1 == y2:\n        x3 = x1 + 1\n        y3 = y1 + 1\n        x4 = x2 - 1\n        y4 = y2 - 1\n    else:\n        x3 = x1 + y2 - y1\n        y3 = y1 + x2 - x1\n        x4 = x1 - y2 + y1\n        y4 = y1 - x2 + x1\n\n    return f\"{x3} {y3} {x4} {y4}\""
    },
    {
        "number": 4333,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n\n    # Calculate the missing vertices\n    x_3 = x_1 - (x_2 - x_1)\n    y_3 = y_1 + (y_2 - y_1)\n    x_4 = x_2 - (x_2 - x_1)\n    y_4 = y_2 + (y_2 - y_1)\n\n    # Check if the square exists\n    if x_1 == x_2 and y_1 == y_2:\n        return \"No square exists\"\n\n    return f\"{x_3} {y_3} {x_4} {y_4}\""
    },
    {
        "number": 4333,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    x_3 = -y_1 - x_1\n    y_3 = x_1 + y_1\n    x_4 = -y_2 - x_2\n    y_4 = x_2 + y_2\n    return f\"{x_3} {y_3} {x_4} {y_4}\""
    },
    {
        "number": 4333,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    x_3 = x_1 + (x_2 - x_1) // 2\n    y_3 = y_1 + (y_2 - y_1) // 2\n    x_4 = x_3 + (x_2 - x_1)\n    y_4 = y_3 + (y_2 - y_1)\n    return f\"{x_3} {y_3} {x_4} {y_4}\"\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4334,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, T, A, B, U = stdin.split()\n    A, B = int(A), int(B)\n\n    if S == U:\n        A -= 1\n    elif T == U:\n        B -= 1\n\n    return f\"{A} {B}\"\n\ndef"
    },
    {
        "number": 4334,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    a, b = map(int, input().split())\n    u = input()\n\n    if u == s:\n        return str(a - 1) + \" \" + str(b)\n    elif u == t:\n        return str(a) + \" \" + str(b - 1)"
    },
    {
        "number": 4334,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split(\"\\n\")\n    strings = input_lines[0].split(\" \")\n    A, B = map(int, input_lines[1].split(\" \"))\n    U = input_lines[2]\n\n    if U == strings[0]:\n        S_count = A - 1\n        T_count = B\n    else:\n        S_count = A\n        T_count = B - 1\n\n    return f\"{S_count} {T_count}\""
    },
    {
        "number": 4334,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    A, B = list(map(int, input().split()))\n    U = input()\n\n    new_A = A - 1 if U == S else A\n    new_B = B - 1 if U == T else B\n\n    return str(new_A) + \" \" + str(new_B)"
    },
    {
        "number": 4334,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()[0], stdin.split()[1]\n    A, B = map(int, stdin.split()[2:])\n    U = input()\n    \n    if S == U:\n        return str(A-1) + \" \" + str(B)\n    else:\n        return str(A) + \" \" + str(B-1) "
    },
    {
        "number": 4334,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S, T, A, B, U = stdin.split()\n    A, B, U = int(A), int(B), S if S == U else T\n    return str(A - (1 if U == S else 0)) + \" \" + str(B - (1 if U == T else 0)) "
    },
    {
        "number": 4334,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S, T, A, B, U = stdin.split()\n    A, B, U = int(A), int(B), str(U)\n\n    if U == S:\n        return str(A - 1) + \" \" + str(B)\n    else:\n        return str(A) + \" \" + str(B - 1)"
    },
    {
        "number": 4334,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    S, T, A, B, U = stdin.split()\n    A, B, U = int(A), int(B), S if S == U else T\n\n    if S == U:\n        A -= 1\n    if T == U:\n        B -= 1\n\n    return str(A) + \" \" + str(B)"
    },
    {
        "number": 4334,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split()\n    S, T = input_data[0], input_data[1]\n    A, B = int(input_data[2]), int(input_data[3])\n    U = input_data[4]\n\n    if U == S:\n        return f\"{A-1} {B}\"\n    else:\n        return f\"{A} {B-1}\""
    },
    {
        "number": 4334,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S, T = input().split()\n    A, B = map(int, input().split())\n    U = input()\n\n    if U == S:\n        return str(A - 1) + \" \" + str(B)\n    else:\n        return str(A) + \" \" + str(B - 1)"
    },
    {
        "number": 4335,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split()\n    if len(S) == 2 * int(N):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4335,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split()\n    N = int(N)\n    half_len = len(S) // 2\n\n    for i in range(1, half_len + 1):\n        if S[:i] * 2 == S:\n            return \"Yes\"\n    return \"No\"\n\ndef"
    },
    {
        "number": 4335,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split()\n    N = int(N)\n    if N % 2 == 1:\n        return \"No\"\n    else:\n        half_length = N // 2\n        first_half = S[:half_length]\n        second_half = S[half_length:]\n        if first_half == second_half:\n            return \"Yes\"\n        else:\n            return \"No\""
    },
    {
        "number": 4335,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.strip().split()\n    n = int(n)\n\n    for i in range(1, n // 2 + 1):\n        prefix = s[:i]\n        suffix = s[i:]\n        if prefix * 2 == s or suffix * 2 == s:\n            return \"Yes\"\n\n    return \"No\""
    },
    {
        "number": 4335,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split()\n    n = int(n)\n    if s[:n//2] * 2 == s:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4335,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.strip().split(\"\\n\")\n    N = int(N)\n\n    for i in range(1, N):\n        if S[:i] * 2 == S:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4335,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.strip().split('\\n')\n    n = int(n)\n\n    for i in range(1, n):\n        if s[:i] * 2 == s:\n            return 'Yes'\n\n    return 'No'"
    },
    {
        "number": 4335,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # read input from stdin\n    N, S = stdin.split()\n\n    # convert N and S to integers and strings\n    N = int(N)\n    S = str(S)\n\n    # check if S is a concatenation of two copies of some string\n    for i in range(1, N // 2 + 1):\n        if S[:i] * 2 == S:\n            return \"Yes\"\n\n    return \"No\""
    },
    {
        "number": 4335,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split()\n    n = int(N)\n\n    if n % 2 != 0:\n        return \"No\"\n\n    half_length = n // 2\n    first_half = S[:half_length]\n    second_half = S[half_length:]\n\n    if first_half == second_half:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4335,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split('\\n')\n    n = int(n)\n    if n % 2 != 0:\n        return \"No\"\n\n    half_n = n // 2\n    first_half = s[:half_n]\n    second_half = s[half_n:]\n\n    if first_half == second_half:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4336,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    W, H, x, y = map(int, stdin.split())\n\n    # Calculate the areas of the two parts\n    area1 = (W - x) * y\n    area2 = x * (H - y)\n\n    # Calculate the maximum area\n    max_area = max(area1, area2)\n\n    # Check if there are multiple ways to cut the rectangle\n    multiple_ways = False\n    if max_area == area1:\n        multiple_ways = (W - x) * (H - y) == area2\n    else:\n        multiple_ways = (W - x) * y == area2\n\n    # Format and return the output\n    return f\"{max_area:.6f} {int(multiple_ways)}\""
    },
    {
        "number": 4336,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    W, H, x, y = map(int, stdin.split())\n    area_left = max(x * (H - y), (W - x) * y)\n    area_right = max((W - x) * (H - y), x * y)\n    max_area = max(area_left, area_right)\n    if area_left == area_right:\n        multiple_ways = 1\n    else:\n        multiple_ways = 0\n\n    return f\"{max_area:.6f} {multiple_ways}\""
    },
    {
        "number": 4336,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    W, H, x, y = map(int, stdin.split())\n    if x == 0 or y == 0 or x == W or y == H:\n        # if the point is on the border, the area of the part is maximum\n        return f\"{H*W} 1\"\n    area1 = x * H\n    area2 = (W - x) * H\n    area3 = x * (H - y)\n    area4 = (W - x) * (H - y)\n    max_area = max(area1, area2, area3, area4)\n    if max_area == area1 or max_area == area2 or max_area == area3 or max_area == area4:\n        # there is only one optimal cut\n        return f\"{max_area} 0\"\n    else:\n        # there are multiple optimal cuts\n        return f\"{max_area} 1\""
    },
    {
        "number": 4336,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    W, H, x, y = map(int, stdin.split())\n\n    area_1 = W * min(H, y)\n    area_2 = H * min(W, x)\n\n    if area_1 > area_2:\n        max_area = area_1\n        multiple_ways = 1 if W == x else 0\n    else:\n        max_area = area_2\n        multiple_ways = 1 if H == y else 0\n\n    return f\"{max_area:.6f} {multiple_ways}\"\n"
    },
    {
        "number": 4336,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    W, H, x, y = map(int, stdin.split())\n\n    if y == 0:\n        area = x * H\n    elif y == H:\n        area = (W - x) * H\n    elif x == 0:\n        area = y * W\n    elif x == W:\n        area = y * W\n    else:\n        area1 = y * W\n        area2 = (W - x) * H\n        area = max(area1, area2)\n\n    if area == area1:\n        if area1 == area2:\n            multiple_ways = 1\n        else:\n            multiple_ways = 0\n    else:\n        if area1 == area2:\n            multiple_ways = 1\n        else:\n            multiple_ways = 0\n\n    return f\"{area:.6f} {multiple_ways}\""
    },
    {
        "number": 4336,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    W, H, x, y = map(int, stdin.split())\n    area1 = abs(W*y)\n    area2 = abs(H*x)\n\n    if area1 > area2:\n        max_area = area2\n    else:\n        max_area = area1\n\n    multiple_ways = False\n    if max_area == area1:\n        multiple_ways = True\n\n    return f\"{max_area:.6f} {'1' if multiple_ways else '0'}\""
    },
    {
        "number": 4336,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    w, h, x, y = map(int, stdin.split())\n    \n    area_rect = w * h\n    area_left = (h - y) * x\n    area_right = (h - y) * (w - x)\n    area_up = (w - x) * y\n    area_down = (w - x) * (h - y)\n    \n    max_area = max(area_left, area_right, area_up, area_down)\n    \n    is_multiple = (max_area == area_left and area_right < area_rect / 2) or (max_area == area_right and area_left < area_rect / 2) or (max_area == area_up and area_down < area_rect / 2) or (max_area == area_down and area_up < area_rect / 2)\n    \n    return f\"{max_area:.6f} {'1' if is_multiple else '0'}\"\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4336,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    W, H, x, y = map(int, stdin.split())\n    area1 = abs(W * y - x * H)\n    area2 = abs(W * H - area1)\n\n    if area1 > area2:\n        return str(area2) + \" 0\"\n    else:\n        return str(area1) + \" 0\"\n\ndef"
    },
    {
        "number": 4336,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    W, H, x, y = map(int, stdin.split())\n    \n    # Calculate the areas of the two parts of the rectangle\n    area1 = (W - x) * y\n    area2 = (W - x) * (H - y) + x * H\n    \n    # Determine if there are multiple ways to cut the rectangle and achieve the maximum\n    multiple_ways = False\n    if area1 > area2:\n        max_area = area2\n    else:\n        max_area = area1\n        if area2 == max_area:\n            multiple_ways = True\n    \n    return f\"{max_area:.6f} {int(multiple_ways)}\""
    },
    {
        "number": 4336,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    W, H, x, y = map(int, stdin.split())\n    \n    # Calculate the area of the rectangle\n    area = W * H\n    \n    # Calculate the area of the part that is not larger than the other\n    other_area = max(W * y, H * x)\n    \n    # Calculate the maximum area of the part whose area is not larger than that of the other\n    max_area = area - other_area\n    \n    # Check if there are multiple ways to cut the rectangle and achieve the maximum area\n    multiple_ways = (area - max_area) * 2 == area\n    \n    # Return the result\n    return f\"{max_area:.6f} {1 if multiple_ways else 0}\""
    },
    {
        "number": 4337,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, colors = stdin.split('\\n')\n    n = int(n)\n    colors = colors.split()\n\n    # check if there is a yellow color\n    has_yellow = 'Y' in colors\n\n    # check if there is a pink color\n    has_pink = 'P' in colors\n\n    # check if there is a white color\n    has_white = 'W' in colors\n\n    # check if there is a green color\n    has_green = 'G' in colors\n\n    # check if there are exactly three colors\n    if has_pink and has_white and has_green:\n        return \"Three\"\n    # check if there are exactly four colors\n    elif has_pink and has_white and has_green and has_yellow:\n        return \"Four\"\n    # if there are less than three colors or more than four colors, return an error message\n    else:\n        return \"Error: Invalid number of colors in the bag\""
    },
    {
        "number": 4337,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    colors = {\n        \"P\": \"pink\",\n        \"W\": \"white\",\n        \"G\": \"green\",\n        \"Y\": \"yellow\"\n    }\n\n    num_colors = len(set(stdin.split()))\n\n    if num_colors == 3:\n        return \"Three\"\n    elif num_colors == 4:\n        return \"Four\"\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 4337,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    colors = set()\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    \n    for i in range(1, n+1):\n        colors.add(lines[i])\n        \n    if len(colors) == 3:\n        return \"Three\"\n    else:\n        return \"Four\""
    },
    {
        "number": 4337,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    colors = set()\n    arare_count = 0\n    for color in stdin.split()[1:]:\n        colors.add(color)\n        arare_count += 1\n    \n    if len(colors) == 3:\n        return \"Three\"\n    elif len(colors) == 4:\n        return \"Four\"\n    else:\n        raise ValueError(\"Invalid color count\")"
    },
    {
        "number": 4337,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Get the number of arare\n    N = int(stdin.split('\\n')[0])\n\n    # Get the list of colors\n    colors = stdin.split('\\n')[1].split(' ')\n\n    # Check if there are three colors\n    three_colors = True\n    for color in colors:\n        if color not in ['P', 'W', 'G']:\n            three_colors = False\n            break\n\n    # Check if there are four colors\n    four_colors = True\n    for color in colors:\n        if color not in ['P', 'W', 'G', 'Y']:\n            four_colors = False\n            break\n\n    # Determine if there are three or four colors\n    if three_colors:\n        return 'Three'\n    elif four_colors:\n        return 'Four'\n    else:\n        return 'Error'"
    },
    {
        "number": 4337,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    N = int(stdin.split('\\n')[0])\n    arare_colors = stdin.split('\\n')[1].split(' ')\n\n    # Count the number of colors in the bag\n    color_count = len(set(arare_colors))\n\n    # Determine the number of colors in the bag\n    if color_count == 3:\n        return \"Three\"\n    elif color_count == 4:\n        return \"Four\"\n    else:\n        return \"Error\""
    },
    {
        "number": 4337,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, colors = stdin.split()\n    n = int(n)\n\n    # initialize colors\n    pink = 0\n    white = 0\n    green = 0\n    yellow = 0\n\n    # count colors\n    for c in colors:\n        if c == 'P':\n            pink += 1\n        elif c == 'W':\n            white += 1\n        elif c == 'G':\n            green += 1\n        else:\n            yellow += 1\n\n    # determine number of colors\n    if pink == 0 or white == 0 or green == 0 or yellow == 0:\n        return \"Three\"\n    else:\n        return \"Four\""
    },
    {
        "number": 4337,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    arare = stdin.split('\\n')[1]\n    colors = set(arare.strip().split())\n    \n    if len(colors) == 3:\n        return 'Three'\n    elif len(colors) == 4:\n        return 'Four'\n    else:\n        raise ValueError('Invalid input: bag must contain arare in either 3 or 4 colors.')"
    },
    {
        "number": 4337,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    arare_colors = set()\n    for color in stdin.split()[1:]:\n        arare_colors.add(color)\n    \n    if len(arare_colors) == 3:\n        return \"Three\"\n    elif len(arare_colors) == 4:\n        return \"Four\"\n    else:\n        return \"Unknown\""
    },
    {
        "number": 4337,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num_of_arare, colors = stdin.split('\\n')\n    num_of_arare = int(num_of_arare)\n    color_count = {'P': 0, 'W': 0, 'G': 0, 'Y': 0}\n\n    for color in colors.split():\n        color_count[color] += 1\n\n    if color_count['P'] > 0 and color_count['W'] > 0 and color_count['G'] > 0:\n        return \"Three\"\n    else:\n        return \"Four\""
    },
    {
        "number": 4338,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split()[:3])\n    a = list(map(int, stdin.split()[3:]))\n\n    doors = [0] * n\n    for i in range(10**100):\n        for j in range(n):\n            if doors[j] > 0 and a[j] > 0:\n                doors[j] = max(0, doors[j] - x)\n            elif doors[j] == 0 and a[j] > 0:\n                doors[j] = min(a[j], a[j] + y)\n\n    return str(sum(door == 0 for door in doors))"
    },
    {
        "number": 4338,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split()[:3])\n    doors = list(map(int, stdin.split()[3:]))\n    \n    # find the number of doors with initial durability equal to 0\n    num_doors_with_durability_0 = doors.count(0)\n    \n    # sort the doors by their initial durability\n    doors.sort()\n    \n    # Slavik's strategy is to repair the doors with initial durability equal to 0\n    # so we need to find the indices of these doors\n    repair_indices = [i for i, door in enumerate(doors) if door == 0]\n    \n    # we also need to find the indices of the doors that Slavik cannot repair\n    slavik_cannot_repair_indices = [i for i, door in enumerate(doors) if door > 0 and i not in repair_indices]\n    \n    # Slavik cannot repair the doors that have initial durability equal to 0\n    # so we need to find the number of doors that Slavik cannot repair\n    num_slavik_cannot_repair_doors = len(slavik_cannot_repair_indices)\n    \n    # if there are no such doors, we don't need to do anything\n    if num_slavik_cannot_repair_doors == 0:\n        return str(num_doors_with_durability_0)\n    \n    # otherwise, we need to consider the case when Slavik can repair the doors\n    # we will calculate the number of doors that have durability equal to 0\n    # after the Slavik's move\n    \n    # let's define a function to calculate the number of doors with durability equal to 0 after Slavik's move\n    def num_doors_with_durability_0_after_slaviks_move(doors):\n        num_doors_with_durability_0 = doors.count(0)\n        repair_indices = [i for i, door in enumerate(doors) if door == 0]\n        slavik_cannot_repair_indices = [i for i, door in enumerate(doors) if door > 0 and i not in repair_indices]\n        return num_doors_with_durability_0 + len(slavik_cannot_repair_indices)\n    \n    # let's now calculate the number of doors with durability equal to 0 after Slavik's move\n    # for each repair index\n    num_doors_with_durability_0_after_slaviks_move_for_each_repair_index = []\n    for i in repair_indices:\n        new_doors = doors.copy()\n        new_doors[i] = 0\n        num_doors_with_durability_0_after_slaviks_move_for_each_repair_index.append(num_doors_with_durability_0_after_slaviks_move(new_doors))\n    \n    # the number of doors with durability equal to 0 after Slavik's move\n    # is the maximum of the above array\n    num_doors_with_durability_0_after_slaviks_move = max(num_doors_with_durability_0_after_slaviks_move_for_each_repair_index)\n    \n    # now, we need to calculate the number of doors that Slavik cannot repair\n    # for each repair index\n    num_slavik_cannot_repair_doors_for_each_repair_index = []\n    for i in repair_indices:\n        new_doors = doors.copy()\n        new_doors[i] = 0\n        num_slavik_cannot_repair_doors_for_each_repair_index.append(len([j for j, door in enumerate(new_doors) if door > 0 and j not in repair_indices]))\n    \n    # the number of doors that Slavik cannot repair\n    # is the maximum of the above array\n    num_slavik_cannot_repair_doors_after_slaviks_move = max(num"
    },
    {
        "number": 4338,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split()[0:3])\n    a_list = list(map(int, stdin.split()[3:]))\n    \n    doors = [a for a in a_list]\n    doors_slavik = [0 for _ in doors]\n    \n    for _ in range(10**100):\n        doors_broken = []\n        doors_repair = []\n        \n        for i in range(n):\n            if doors[i] > 0:\n                doors_broken.append(i)\n            else:\n                doors_repair.append(i)\n                \n        if len(doors_broken) == 0 or len(doors_repair) == 0:\n            break\n        \n        doors_broken_player = min(len(doors_broken), len(doors_repair))\n        doors_broken_slavik = len(doors_broken) - doors_broken_player\n        \n        for i in doors_broken[:doors_broken_player]:\n            doors[i] = max(0, doors[i] - x)\n        \n        for i in doors_repair[:doors_broken_slavik]:\n            doors_slavik[i] = min(doors[i], doors_slavik[i] + y)\n    \n    count = 0\n    for durability in doors_slavik:\n        if durability == 0:\n            count += 1\n    \n    return str(count)"
    },
    {
        "number": 4338,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split()[:3])\n    a = list(map(int, stdin.split()[3:]))\n    doors = [0] * n\n    \n    for i in range(10**100):\n        doors_0 = doors.count(0)\n        for j in range(n):\n            if doors[j] > 0:\n                doors[j] = max(0, doors[j] - x)\n                if doors[j] == 0:\n                    doors_0 += 1\n            else:\n                doors[j] += y\n                if doors[j] == 0:\n                    doors_0 += 1\n        if doors_0 == n:\n            return str(doors.count(0))\n    return str(doors.count(0))"
    },
    {
        "number": 4338,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split()[:3])\n    a = list(map(int, stdin.split()[3:]))\n\n    doors_opened = 0\n    for i in range(10**100):\n        # your turn\n        for j in range(n):\n            if a[j] > 0:\n                a[j] = max(0, a[j] - x)\n\n        # slavik's turn\n        for j in range(n):\n            if a[j] > 0:\n                a[j] += y\n\n        # check if all doors are closed\n        if all(door == 0 for door in a):\n            doors_opened += 1\n            break\n\n    return str(doors_opened)"
    },
    {
        "number": 4338,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split()[:3])\n    a = list(map(int, stdin.split()[3:]))\n    n = len(a)\n\n    doors = [0] * n\n    for i in range(10**100):\n        moves = []\n        for j in range(n):\n            if i % 2 == 0:\n                doors[j] = max(0, doors[j] - x)\n            else:\n                if doors[j] > 0:\n                    doors[j] += y\n                else:\n                    doors[j] = 0\n\n            if doors[j] == 0:\n                moves.append(j)\n\n        if len(moves) == 0:\n            break\n\n        if i % 2 == 0:\n            doors[moves[0]] = max(0, doors[moves[0]] - x)\n        else:\n            doors[moves[0]] += y\n\n    return str(sum(door == 0 for door in doors))"
    },
    {
        "number": 4338,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split()[:3])\n    a = list(map(int, stdin.split()[3:]))\n\n    doors = [0] * n\n    for i in range(10**100):\n        if i % 2 == 0:\n            # Your move\n            for j in range(n):\n                doors[j] = max(0, doors[j] - x)\n        else:\n            # Slavik's move\n            for j in range(n):\n                if doors[j] > 0:\n                    doors[j] += y\n\n    return str(sum(door == 0 for door in doors))"
    },
    {
        "number": 4338,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split()[0:3])\n    a = list(map(int, stdin.split()[3:]))\n    doors = [0] * n\n\n    for i in range(10**100):\n        doors_to_repair = [j for j in range(n) if a[j] == 0]\n        if len(doors_to_repair) > 0:\n            for j in doors_to_repair:\n                a[j] += y\n        else:\n            break\n\n        doors_to_break = [j for j in range(n) if a[j] > 0]\n        for j in doors_to_break:\n            a[j] = max(0, a[j] - x)\n\n    return str(sum([1 for i in a if i == 0]))"
    },
    {
        "number": 4338,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split()[:3])\n    a_str = stdin.split()[3:]\n    a = list(map(int, a_str))\n\n    # Calculate the number of doors with durability equal to 0\n    doors_with_zero_durability = sum([1 for durability in a if durability == 0])\n\n    # Slavik will not repair any doors with durability equal to 0\n    doors_with_zero_durability = doors_with_zero_durability + sum([1 for durability in a if durability > 0 and durability <= y])\n\n    # Slavik will repair all doors with durability greater than y\n    doors_with_zero_durability = doors_with_zero_durability + sum([1 for durability in a if durability > y])\n\n    return str(doors_with_zero_durability)"
    },
    {
        "number": 4338,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split()[:3])\n    a = list(map(int, stdin.split()[3:]))\n\n    doors_with_durability_zero = 0\n\n    for _ in range(10**100):\n        # Your move\n        doors_with_durability_zero += sum(1 for i in range(n) if a[i] <= x)\n        for i in range(n):\n            if a[i] <= x:\n                a[i] = 0\n\n        # Slavik's move\n        doors_with_durability_zero -= sum(1 for i in range(n) if a[i] == 0)\n        for i in range(n):\n            if a[i] > 0:\n                a[i] += y\n\n    return str(doors_with_durability_zero)"
    },
    {
        "number": 4339,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n    b = list(map(int, stdin.split(\"\\n\")[2].split()))\n    \n    count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] + a[j] > b[i] + b[j]:\n                count += 1\n                \n    return str(count)"
    },
    {
        "number": 4339,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    count = 0\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] + a[j] > b[i] + b[j]:\n                count += 1\n\n    return str(count)\n\n\ninput_str = \"\"\"5\n4 8 2 6 2\n4 5 4 1 3\n\"\"\"\nprint(solution(input_str))  # Output: 7\n\ninput_str = \"\"\"4\n1 3 2 4\n1 3 2 4\n\"\"\"\nprint(solution(input_str))  # Output: 0 "
    },
    {
        "number": 4339,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    b = list(map(int, stdin.split('\\n')[2].split()))\n    \n    pairs = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if a[i] + a[j] > b[i] + b[j]:\n                pairs += 1\n    \n    return str(pairs)"
    },
    {
        "number": 4339,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = stdin.splitlines()\n    n = int(n)\n    a = list(map(int, a.split()))\n    b = list(map(int, b.split()))\n\n    good_pairs = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if a[i] + a[j] > b[i] + b[j]:\n                good_pairs += 1\n\n    return str(good_pairs)\n"
    },
    {
        "number": 4339,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    \n    good_pairs = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] + a[j] > b[i] + b[j]:\n                good_pairs += 1\n                \n    return str(good_pairs)\n\n\ninput_data = '''5\n4 8 2 6 2\n4 5 4 1 3\n\n4\n1 3 2 4\n1 3 2 4'''\n\nprint(solution(input_data)) "
    },
    {
        "number": 4339,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    pairs = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] + a[j] > b[i] + b[j]:\n                pairs += 1\n\n    return str(pairs)"
    },
    {
        "number": 4339,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    b = list(map(int, stdin.splitlines()[2].split()))\n\n    # Calculate good pairs\n    good_pairs = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] + a[j] > b[i] + b[j]:\n                good_pairs += 1\n\n    # Return result\n    return str(good_pairs)"
    },
    {
        "number": 4339,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n\n    good_pairs = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] + a[j] > b[i] + b[j]:\n                good_pairs += 1\n\n    return str(good_pairs)\n\ninput_data = \"\"\"5\n4 8 2 6 2\n4 5 4 1 3\n\"\"\"\nprint(solution(input_data))\n\ninput_data = \"\"\"4\n1 3 2 4\n1 3 2 4\n\"\"\"\nprint(solution(input_data)) "
    },
    {
        "number": 4339,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def good_pairs(a, b) -> int:\n        return sum(a[i] + a[j] > b[i] + b[j] for i in range(n) for j in range(i+1, n))\n\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n\n    return str(good_pairs(a, b))"
    },
    {
        "number": 4339,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    \n    good_pairs = 0\n    \n    for i in range(n-1):\n        for j in range(i+1, n):\n            if a[i] + a[j] > b[i] + b[j]:\n                good_pairs += 1\n                \n    return str(good_pairs)"
    },
    {
        "number": 4340,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = a.copy()\n\n    for i in range(n):\n        for j in range(max(i - 50000000, 0), min(i + 50000000, n)):\n            if b[j] == 1:\n                b[j] = 2\n            elif b[j] == 2:\n                b[j] = 1\n            elif b[j] == 3:\n                b[j] = 4\n            elif b[j] == 4:\n                b[j] = 3\n            elif b[j] == 5:\n                b[j] = 6\n            elif b[j] == 6:\n                b[j] = 5\n            elif b[j] == 9:\n                b[j] = 10\n            elif b[j] == 10:\n                b[j] = 9\n\n    return \" \".join(map(str, b))"
    },
    {
        "number": 4340,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    for i in range(n):\n        a[i] = 2 if a[i] == 1 else 1 if a[i] == 2 else 4 if a[i] == 3 else 3 if a[i] == 4 else 6 if a[i] == 5 else 5 if a[i] == 6 else 8 if a[i] == 7 else 7 if a[i] == 8 else 9 if a[i] == 9 else 10 if a[i] == 10 else 99999999 if a[i] == 100000000 else a[i]\n\n    return ' '.join(map(str, a))\n\ndef"
    },
    {
        "number": 4340,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = [int(x) for x in stdin.split('\\n')[1].split()]\n    for i in range(n):\n        if a[i] == 1:\n            a[i] = 2\n        elif a[i] == 2:\n            a[i] = 1\n        elif a[i] == 3:\n            a[i] = 4\n        elif a[i] == 4:\n            a[i] = 3\n        elif a[i] == 5:\n            a[i] = 6\n        elif a[i] == 6:\n            a[i] = 5\n        elif a[i] == 7:\n            a[i] = 8\n        elif a[i] == 8:\n            a[i] = 7\n        elif a[i] == 9:\n            a[i] = 10\n        elif a[i] == 10:\n            a[i] = 9\n    return ' '.join(map(str, a))"
    },
    {
        "number": 4340,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input().strip())\n    a = list(map(int, input().split()))\n\n    for i in range(n):\n        if a[i] == 1:\n            a[i] = 2\n        elif a[i] == 2:\n            a[i] = 1\n        elif a[i] == 3:\n            a[i] = 4\n        elif a[i] == 4:\n            a[i] = 3\n        elif a[i] == 5:\n            a[i] = 6\n        elif a[i] == 6:\n            a[i] = 5\n        elif a[i] == 7:\n            a[i] = 8\n        elif a[i] == 8:\n            a[i] = 7\n        elif a[i] == 9:\n            a[i] = 10\n        elif a[i] == 10:\n            a[i] = 9\n\n    return \" \".join(map(str, a))"
    },
    {
        "number": 4340,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_data = list(map(int, stdin.split()))\n    n = input_data[0]\n    a = input_data[1:]\n    b = a.copy()\n\n    for i in range(1, 5 * 10**8 + 1, 2):\n        if i in b:\n            b[b.index(i)] = 2 * i - 1\n\n    for i in range(2, 5 * 10**8 + 1, 2):\n        if 2 * i - 1 in b:\n            b[b.index(2 * i - 1)] = i\n\n    for i in range(1, 5 * 10**8 + 1, 2):\n        if i in b:\n            b[b.index(i)] = 2 * i - 1\n\n    for i in range(2, 5 * 10**8 + 1, 2):\n        if 2 * i - 1 in b:\n            b[b.index(2 * i - 1)] = i\n\n    for i in range(1, 5 * 10**8 + 1, 2):\n        if i in b:\n            b[b.index(i)] = 2 * i - 1\n\n    for i in range(2, 5 * 10**8 + 1, 2):\n        if 2 * i - 1 in b:\n            b[b.index(2 * i - 1)] = i\n\n    for i in range(1, 5 * 10**8 + 1, 2):\n        if i in b:\n            b[b.index(i)] = 2 * i - 1\n\n    for i in range(2, 5 * 10**8 + 1, 2):\n        if 2 * i - 1 in b:\n            b[b.index(2 * i - 1)] = i\n\n    for i in range(1, 5 * 10**8 + 1, 2):\n        if i in b:\n            b[b.index(i)] = 2 * i - 1\n\n    for i in range(2, 5 * 10**8 + 1, 2):\n        if 2 * i - 1 in b:\n            b[b.index(2 * i - 1)] = i\n\n    for i in range(1, 5 * 10**8 + 1, 2):\n        if i in b:\n            b[b.index(i)] = 2 * i - 1\n\n    for i in range(2, 5 * 10**8 + 1, 2):\n        if 2 * i - 1 in b:\n            b[b.index(2 * i - 1)] = i\n\n    for i in range(1, 5 * 10**8 + 1, 2):\n        if i in b:\n            b[b.index(i)] = 2 * i - 1\n\n    for i in range(2, 5 * 10**8 + 1, 2):\n        if 2 * i - 1 in b:\n            b[b.index(2 * i - 1)] = i\n\n    for i in range(1, 5 * 10**8 + 1, 2):\n        if i in b:\n            b[b.index(i)] = 2 * i - 1\n\n    for i in range(2, 5 * 10**8 + 1, 2):\n        if 2 * i - 1 in b:\n            b[b.index(2 * i - 1)] = i\n\n    for i in range(1, 5 * 10**8 + 1, 2):\n        if i in b:\n            b[b.index(i)] = 2 * i - 1\n\n    for i in range(2, 5 * 10**8 + 1, 2):\n        if 2 * i - 1 in b:\n            b[b.index(2 * i - 1)] = i\n\n    for i in range(1, 5 * 10**8 + 1, 2):\n        if i in b:\n           "
    },
    {
        "number": 4340,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    b = a.copy()\n    \n    for i in range(n):\n        if b[i] == 1:\n            b[i] = 2\n        elif b[i] == 2:\n            b[i] = 1\n        elif b[i] == 3:\n            b[i] = 4\n        elif b[i] == 4:\n            b[i] = 3\n        elif b[i] == 5:\n            b[i] = 6\n        elif b[i] == 6:\n            b[i] = 5\n        elif b[i] == 7:\n            b[i] = 8\n        elif b[i] == 8:\n            b[i] = 7\n        elif b[i] == 9:\n            b[i] = 10\n        elif b[i] == 10:\n            b[i] = 9\n    \n    return \" \".join(map(str, b))"
    },
    {
        "number": 4340,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    b = a.copy()\n    \n    for i in range(1, 6 * 10**8 + 1, 2):\n        for j in range(len(b)):\n            if b[j] == i:\n                b[j] = i + 1\n            elif b[j] == i + 1:\n                b[j] = i\n            elif b[j] == i + 2:\n                b[j] = i + 3\n            elif b[j] == i + 3:\n                b[j] = i + 2\n            elif b[j] == i + 4:\n                b[j] = i + 5\n            elif b[j] == i + 5:\n                b[j] = i + 4\n            elif b[j] == i + 6:\n                b[j] = i + 5\n            elif b[j] == i + 7:\n                b[j] = i + 6\n            elif b[j] == i + 8:\n                b[j] = i + 7\n            elif b[j] == i + 9:\n                b[j] = i + 8\n        \n        if i == 10:\n            for j in range(len(b)):\n                if b[j] == 9:\n                    b[j] = 10\n                elif b[j] == 10:\n                    b[j] = 9\n    return \" \".join(map(str, b))"
    },
    {
        "number": 4340,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    \n    for i in range(5):\n        for j in range(n-1):\n            if a[j] == 2*i+1 and a[j+1] == 2*i+2:\n                a[j] = 2*i+2\n                a[j+1] = 2*i+1\n    for i in range(n):\n        if a[i] == 9:\n            a[i] = 10**9-1\n        elif a[i] == 10**9:\n            a[i] = 10**9-1\n    \n    return ' '.join(map(str, a))\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4340,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    for i in range(1, 10):\n        a = [2 * x - 1 if x == i else x for x in a]\n        a = [2 * x - 1 if x == 2 * i - 1 else x for x in a]\n\n    a = [x if x < 10 ** 9 else 10 ** 9 - 1 for x in a]\n\n    return \" \".join(map(str, a))"
    },
    {
        "number": 4340,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    for i in range(1, 10**9):\n        j = 2 * i - 1\n        while j < 2 * i + 1:\n            if j < n:\n                if a[j] == 1:\n                    a[j] = 2\n                elif a[j] == 2:\n                    a[j] = 1\n                elif a[j] == 3:\n                    a[j] = 4\n                elif a[j] == 4:\n                    a[j] = 3\n                elif a[j] == 5:\n                    a[j] = 6\n                elif a[j] == 6:\n                    a[j] = 5\n                elif a[j] == 7:\n                    a[j] = 8\n                elif a[j] == 8:\n                    a[j] = 7\n                elif a[j] == 9:\n                    a[j] = 10\n                elif a[j] == 10:\n                    a[j] = 9\n            j += 2\n\n    return ' '.join(map(str, a))\n"
    },
    {
        "number": 4341,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n\n    for i in range(m):\n        u, v = map(int, input().split())\n        edges.append((u, v))\n\n    def dfs(u: int, visited: set) -> set:\n        visited.add(u)\n        for v in range(1, n + 1):\n            if v in edges and v != u and v not in visited:\n                visited = dfs(v, visited)\n        return visited\n\n    cycles = 0\n    for i in range(1, n + 1):\n        visited = set()\n        if i not in visited:\n            cycle = dfs(i, visited)\n            if len(cycle) > 2:\n                cycles += 1\n\n    return str(cycles)"
    },
    {
        "number": 4341,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    adj_list = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        v, u = map(int, input().split())\n        adj_list[v].append(u)\n        adj_list[u].append(v)\n\n    def dfs(start: int, visited: set, component: list) -> None:\n        visited.add(start)\n        component.append(start)\n        for neighbor in adj_list[start]:\n            if neighbor not in visited:\n                dfs(neighbor, visited, component)\n\n    cycles = 0\n    for i in range(1, n + 1):\n        visited = set()\n        component = []\n        if i not in visited:\n            dfs(i, visited, component)\n            if len(component) > 2:\n                is_cycle = True\n                for j in range(len(component)):\n                    if component[j] not in adj_list[component[(j + 1) % len(component)]]:\n                        is_cycle = False\n                        break\n                if is_cycle:\n                    cycles += 1\n\n    return str(cycles)\n\ninput_str = \"\"\nwith open(\"input.txt\", \"r\") as file:\n    input_str = file.read()\n\noutput_str = solution(input_str)\nwith open(\"output.txt\", \"w\") as file:\n    file.write(output_str) "
    },
    {
        "number": 4341,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(graph, start):\n        visited, stack = set(), [start]\n        while stack:\n            node = stack.pop()\n            if node not in visited:\n                visited.add(node)\n                stack.extend(graph[node] - visited)\n        return visited\n\n    def find_cycle_components(graph, visited, cycles):\n        for node in graph:\n            if node not in visited:\n                cycle = dfs(graph, node)\n                cycles.add(tuple(sorted(cycle)))\n                visited.update(cycle)\n        return cycles\n\n    n, m = map(int, stdin.split())\n    graph = {i: set() for i in range(1, n + 1)}\n\n    for _ in range(m):\n        v, u = map(int, input().split())\n        graph[v].add(u)\n        graph[u].add(v)\n\n    cycles = set()\n    find_cycle_components(graph, set(), cycles)\n    return str(len(cycles)) "
    },
    {
        "number": 4341,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    edges = []\n    for line in stdin.split()[2:]:\n        v, u = map(int, line.split())\n        edges.append((v, u))\n    \n    def dfs(node, visited):\n        visited.add(node)\n        for neighbor in [u for u, v in edges if v == node or u == node]:\n            if neighbor not in visited:\n                dfs(neighbor, visited)\n    \n    def find_connected_components(edges):\n        visited = set()\n        components = []\n        for node in range(1, n+1):\n            if node not in visited:\n                component = set()\n                dfs(node, component)\n                components.append(component)\n                visited.update(component)\n        return components\n    \n    def is_cycle(component):\n        if len(component) < 3:\n            return False\n        for node in component:\n            if node in [u for u, v in edges if v == node or u == node]:\n                return True\n        return False\n    \n    components = find_connected_components(edges)\n    cycles = [component for component in components if is_cycle(component)]\n    return str(len(cycles))"
    },
    {
        "number": 4341,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n + 1)]\n    cycles = 0\n\n    for i in range(m):\n        v, u = map(int, input().split())\n        graph[v].append(u)\n        graph[u].append(v)\n\n    def dfs(node: int, visited: set, component: set):\n        nonlocal cycles\n        visited.add(node)\n        component.add(node)\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                dfs(neighbor, visited, component)\n        if len(component) >= 3:\n            cycles += 1\n\n    for node in range(1, n + 1):\n        visited = set()\n        component = set()\n        if node not in visited:\n            dfs(node, visited, component)\n\n    return str(cycles)"
    },
    {
        "number": 4341,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    graph = [[] for _ in range(n + 1)]\n\n    for _ in range(m):\n        v, u = map(int, stdin.split()[2:])\n        graph[v].append(u)\n        graph[u].append(v)\n\n    def find_connected_components(graph: List[List[int]], visited: List[bool], current_node: int, component: List[int]) -> None:\n        visited[current_node] = True\n        component.append(current_node)\n\n        for neighbor in graph[current_node]:\n            if not visited[neighbor]:\n                find_connected_components(graph, visited, neighbor, component)\n\n    connected_components = []\n    visited = [False] * (n + 1)\n\n    for i in range(1, n + 1):\n        if not visited[i]:\n            component = []\n            find_connected_components(graph, visited, i, component)\n            connected_components.append(component)\n\n    def is_cycle(component: List[int]) -> bool:\n        if len(component) < 3:\n            return False\n\n        for i in range(len(component)):\n            for j in range(i + 1, len(component)):\n                for k in range(j + 1, len(component)):\n                    if component[i] in graph[component[j]] and component[j] in graph[component[k]] and component[k] in graph[component[i]]:\n                        return True\n        return False\n\n    cycles = 0\n    for component in connected_components:\n        if is_cycle(component):\n            cycles += 1\n\n    return str(cycles)"
    },
    {
        "number": 4341,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    graph = [[] for _ in range(n+1)]\n    for i in range(m):\n        a, b = map(int, stdin.split()[2*i+2:2*i+4])\n        graph[a].append(b)\n        graph[b].append(a)\n    \n    def dfs(node: int, visited: set) -> list:\n        visited.add(node)\n        cycle = [node]\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                cycle.extend(dfs(neighbor, visited))\n        return cycle\n    \n    def is_cycle(cycle: list) -> bool:\n        return len(cycle) >= 3 and len(set(cycle)) == len(cycle)\n    \n    cycles = set()\n    for i in range(1, n+1):\n        if i not in graph[i]:\n            cycle = dfs(i, set())\n            if is_cycle(cycle):\n                cycles.add(tuple(sorted(cycle)))\n    \n    return str(len(cycles))"
    },
    {
        "number": 4341,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    n, m = map(int, stdin.split()[0:2])\n    edges = []\n    for i in range(m):\n        v, u = map(int, stdin.split()[2*i+2:2*i+4])\n        edges.append((v, u))\n\n    # Initialize the connected components\n    connected_components = []\n    for i in range(n):\n        connected_components.append({i})\n\n    # Merge connected components\n    def find_group(x: int) -> int:\n        for i, group in enumerate(connected_components):\n            if x in group:\n                return i\n\n    def merge_groups(x: int, y: int) -> None:\n        x_group = find_group(x)\n        y_group = find_group(y)\n        if x_group != y_group:\n            connected_components[x_group] |= connected_components[y_group]\n            del connected_components[y_group]\n\n    for v, u in edges:\n        merge_groups(v-1, u-1)\n\n    # Find cycles\n    cycles = 0\n    for group in connected_components:\n        if len(group) >= 3:\n            vertices = list(group)\n            for i in range(len(vertices)):\n                for j in range(i+1, len(vertices)):\n                    for k in range(j+1, len(vertices)):\n                        v = vertices[i]\n                        u = vertices[j]\n                        w = vertices[k]\n                        if (v, u) in edges and (u, w) in edges and (w, v) in edges:\n                            cycles += 1\n                            break\n\n    return str(cycles) "
    },
    {
        "number": 4341,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        edges.append((u, v))\n\n    def dfs(node, visited):\n        visited.add(node)\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                dfs(neighbor, visited)\n\n    def is_cycle(node, visited):\n        visited.add(node)\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                if dfs(neighbor, visited.copy()):\n                    return True\n            elif neighbor not in cycle_set:\n                return True\n        cycle_set.add(node)\n        return False\n\n    graph = {i: set() for i in range(1, n + 1)}\n    for u, v in edges:\n        graph[u].add(v)\n        graph[v].add(u)\n\n    count = 0\n    cycle_set = set()\n    for node in range(1, n + 1):\n        if node not in cycle_set:\n            count += 1\n            if is_cycle(node, set()):\n                count -= 1\n\n    return str(count)\n"
    },
    {
        "number": 4341,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def read_input():\n        n, m = map(int, stdin.readline().strip().split())\n        edges = []\n        for _ in range(m):\n            v, u = map(int, stdin.readline().strip().split())\n            edges.append((v, u))\n        return n, m, edges\n\n    def find_connected_components(n: int, edges: List[Tuple[int, int]]) -> List[List[int]]:\n        visited = [False] * (n + 1)\n        components = []\n        for i in range(1, n + 1):\n            if not visited[i]:\n                current_component = []\n                queue = deque([i])\n                visited[i] = True\n                while queue:\n                    node = queue.popleft()\n                    current_component.append(node)\n                    for neighbor in [u for u, v in edges if v == node] + [v for v, u in edges if u == node]:\n                        if not visited[neighbor]:\n                            visited[neighbor] = True\n                            queue.append(neighbor)\n                components.append(current_component)\n        return components\n\n    def is_cycle(component: List[int], edges: List[Tuple[int, int]]) -> bool:\n        if len(component) < 3:\n            return False\n        for i in range(len(component)):\n            for j in range(i + 2, len(component)):\n                if (component[i], component[j]) not in edges and (component[j], component[i]) not in edges:\n                    return False\n        return True\n\n    def count_cycles(components: List[List[int]]) -> int:\n        return sum(1 for component in components if is_cycle(component, edges))\n\n    n, m, edges = read_input()\n    components = find_connected_components(n, edges)\n    return str(count_cycles(components))\n\ninput1 = \"5 4\\n1 2\\n3 4\\n5 4\\n3 5\\n\"\nprint(solution(input1))\n\ninput2 = \"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6\\n\"\nprint(solution(input2)) "
    },
    {
        "number": 4342,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(graph, visited, color, start, parent):\n        visited.add(start)\n        color[start] = parent[start]\n        for node in graph[start]:\n            if node not in visited:\n                dfs(graph, visited, color, node, parent)\n\n    def count_nice_edges(stdin: str) -> int:\n        n = int(stdin.splitlines()[0])\n        colors = stdin.splitlines()[1]\n        graph = [[] for _ in range(n)]\n        for line in stdin.splitlines()[2:]:\n            v, u = map(int, line.split())\n            graph[v].append(u)\n            graph[u].append(v)\n\n        visited = set()\n        parent = [-1] * n\n        color = [0] * n\n\n        dfs(graph, visited, color, 0, parent)\n\n        count = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if (color[i] != color[j]) and (color[i] != -1) and (color[j] != -1):\n                    count += 1\n        return count\n\n    return str(count_nice_edges(stdin))"
    },
    {
        "number": 4342,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    colors = list(map(int, stdin.readline().strip().split()))\n    edges = []\n\n    for i in range(n - 1):\n        v, u = map(int, stdin.readline().strip().split())\n        edges.append((v, u))\n\n    def dfs(u, parent):\n        visited[u] = True\n        for v in edges:\n            if v[0] == u:\n                if not visited[v[1]]:\n                    dfs(v[1], u)\n            elif v[1] == u:\n                if not visited[v[0]]:\n                    dfs(v[0], u)\n\n    def is_nice_edge(u, v):\n        visited = [False] * (n + 1)\n        dfs(u, -1)\n        red_found = False\n        blue_found = False\n        for i, color in enumerate(colors):\n            if color == 1 and visited[i]:\n                red_found = True\n            elif color == 2 and visited[i]:\n                blue_found = True\n        return not (red_found and blue_found)\n\n    nice_edges_count = 0\n    for u, v in edges:\n        if colors[u - 1] != colors[v - 1] and is_nice_edge(u, v):\n            nice_edges_count += 1\n\n    return str(nice_edges_count)"
    },
    {
        "number": 4342,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    colors = list(map(int, stdin.readline().split()))\n    edges = []\n    nice_edges = 0\n\n    for _ in range(n - 1):\n        v, u = map(int, stdin.readline().split())\n        edges.append((v, u))\n\n    # Check if the given tree has at least one red and one blue vertex\n    has_red = False\n    has_blue = False\n    for color in colors:\n        if color == 1:\n            has_red = True\n        elif color == 2:\n            has_blue = True\n\n    if not has_red or not has_blue:\n        return \"0\"\n\n    for edge in edges:\n        v, u = edge\n        color_set = set()\n        color_set.add(colors[v - 1])\n        color_set.add(colors[u - 1])\n\n        if 0 not in color_set:\n            nice_edges += 1\n\n    return str(nice_edges)\n\ninput_file = open(\"input.txt\", \"r\")\noutput_file = open(\"output.txt\", \"w\")\noutput_file.write(solution(input_file))\noutput_file.close() "
    },
    {
        "number": 4342,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, colors, edges = stdin.split(\"\\n\")\n    n = int(n)\n    colors = list(map(int, colors.split()))\n    edges = [list(map(int, edge.split())) for edge in edges.split(\"\\n\")[:n-1]]\n\n    # initialize the graph\n    graph = [[] for _ in range(n+1)]\n    for edge in edges:\n        graph[edge[0]].append(edge[1])\n        graph[edge[1]].append(edge[0])\n\n    # find the red and blue vertices\n    red_vertices = [i for i in range(1, n+1) if colors[i-1] == 1]\n    blue_vertices = [i for i in range(1, n+1) if colors[i-1] == 2]\n\n    # initialize the count of nice edges\n    count = 0\n\n    # iterate through all edges\n    for edge in edges:\n        # get the components of the graph without the current edge\n        components = get_components(graph, edge[0], edge[1])\n\n        # check if the components contain both red and blue vertices\n        red_in_component = any(component.intersection(set(red_vertices)) for component in components)\n        blue_in_component = any(component.intersection(set(blue_vertices)) for component in components)\n\n        # increment the count if the edge is nice\n        if not (red_in_component and blue_in_component):\n            count += 1\n\n    return str(count)\n\n\ndef"
    },
    {
        "number": 4342,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, colors, edges = stdin.split(\"\\n\")\n    n = int(n)\n    colors = [int(c) for c in colors.split()]\n    edges = [list(map(int, edge.split())) for edge in edges.split(\"\\n\")]\n\n    def is_nice_edge(edge):\n        # Check if the resulting components contain vertices of both red and blue colors\n        component1, component2 = set(), set()\n        for u, v in edges:\n            if u == edge[0] and v == edge[1]:\n                continue\n            if u in component1 and v in component2:\n                continue\n            if u in component1:\n                component2.add(v)\n            elif v in component2:\n                component1.add(u)\n            else:\n                return False\n        return True\n\n    # Count nice edges\n    count = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if is_nice_edge([i + 1, j + 1]):\n                count += 1\n    return str(count)"
    },
    {
        "number": 4342,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n, colors, edges = stdin.split('\\n')\n    n = int(n)\n    colors = list(map(int, colors.split()))\n    edges = [list(map(int, line.split())) for line in edges.split('\\n')]\n\n    # Initialize adjacency matrix\n    adj = [[0] * n for _ in range(n)]\n    for edge in edges:\n        adj[edge[0] - 1][edge[1] - 1] = 1\n        adj[edge[1] - 1][edge[0] - 1] = 1\n\n    # Initialize colors\n    reds = [i for i, color in enumerate(colors) if color == 1]\n    blues = [i for i, color in enumerate(colors) if color == 2]\n\n    # Calculate nice edges\n    nice_edges = 0\n    for edge in edges:\n        if not any(adj[edge[0] - 1][i] == 1 for i in blues) and not any(adj[edge[1] - 1][i] == 1 for i in reds):\n            nice_edges += 1\n\n    return str(nice_edges)"
    },
    {
        "number": 4342,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    colors = list(map(int, stdin.split(\"\\n\")[1].split()))\n    edges = list(map(lambda x: tuple(map(int, x.split())), stdin.split(\"\\n\")[2:]))\n\n    def dfs(u: int, color: int) -> int:\n        visited[u] = True\n        component_color = color\n        for v in edges:\n            if u in v:\n                if not visited[v[0] if v[1] == u else v[1]]:\n                    component_color |= dfs(v[0] if v[1] == u else v[1], color)\n        return component_color\n\n    nice_edges_count = 0\n    for edge in edges:\n        visited = [False] * (n + 1)\n        if dfs(edge[0], colors[edge[0]]) & dfs(edge[1], colors[edge[1]]):\n            nice_edges_count += 1\n\n    return str(nice_edges_count)"
    },
    {
        "number": 4342,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    colors = [int(x) for x in stdin.readline().split()]\n    edges = []\n    for _ in range(n-1):\n        v, u = map(int, stdin.readline().split())\n        edges.append((v, u))\n\n    nice_edges = 0\n    for edge in edges:\n        red_vertex = False\n        blue_vertex = False\n        for vertex in edge:\n            if colors[vertex - 1] == 1:\n                red_vertex = True\n            elif colors[vertex - 1] == 2:\n                blue_vertex = True\n        if not red_vertex or not blue_vertex:\n            nice_edges += 1\n\n    return str(nice_edges)"
    },
    {
        "number": 4342,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, colors, edges = stdin.split('\\n')\n    n = int(n)\n    colors = list(map(int, colors.split()))\n    edges = [tuple(map(int, line.split())) for line in edges.split('\\n') if line]\n\n    # Find all nice edges\n    nice_edges = []\n    for edge in edges:\n        v, u = edge\n        red_count = 0\n        blue_count = 0\n        for vertex in range(1, n + 1):\n            if vertex not in edge:\n                if colors[vertex - 1] == 1:\n                    red_count += 1\n                elif colors[vertex - 1] == 2:\n                    blue_count += 1\n        if red_count == 0 or blue_count == 0:\n            nice_edges.append(edge)\n\n    # Return result\n    return str(len(nice_edges))"
    },
    {
        "number": 4342,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    colors = list(map(int, input().split()))\n    edges = []\n    for _ in range(n - 1):\n        v, u = map(int, input().split())\n        edges.append((v, u))\n\n    def is_nice_edge(edge):\n        v, u = edge\n        colors_v = set(colors[v - 1:])\n        colors_u = set(colors[u - 1:])\n        if colors_v & colors_u:\n            return False\n        else:\n            return True\n\n    count = 0\n    for edge in edges:\n        if is_nice_edge(edge):\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4343,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, s, t = stdin.split()\n    k = int(k)\n\n    s_list = []\n    t_list = []\n\n    # Generate all possible strings lexicographically not less than s\n    for i in range(26):\n        for j in range(26):\n            if i < ord(s[0]):\n                s_list.append(chr(i) + chr(j))\n            elif i == ord(s[0]):\n                if j < ord(s[1]):\n                    s_list.append(chr(i) + chr(j))\n            else:\n                break\n\n    # Generate all possible strings lexicographically not greater than t\n    for i in range(26):\n        for j in range(26):\n            if i < ord(t[0]):\n                t_list.append(chr(i) + chr(j))\n            elif i == ord(t[0]):\n                if j < ord(t[1]):\n                    t_list.append(chr(i) + chr(j))\n            else:\n                break\n\n    # Find the middle element of the intersection of s_list and t_list\n    s_set = set(s_list)\n    t_set = set(t_list)\n    intersection = s_set.intersection(t_set)\n    intersection_list = sorted(list(intersection))\n    median_index = len(intersection_list) // 2\n    median = intersection_list[median_index]\n\n    return median"
    },
    {
        "number": 4343,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k, s, t = stdin.split()\n    k = int(k)\n    s = sorted(set(string.ascii_lowercase) - set(s)) + [s]\n    t = sorted(set(string.ascii_lowercase) - set(t)) + [t]\n    s_index = string.ascii_lowercase.index(s[-1])\n    t_index = string.ascii_lowercase.index(t[-1])\n    if s_index > t_index:\n        s = s[:-1]\n    elif s_index < t_index:\n        t = t[:-1]\n    s = sorted(s)\n    t = sorted(t)\n    median_index = len(s) + len(t) // 2\n    return s[median_index - len(s)]\n"
    },
    {
        "number": 4343,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k, s, t = stdin.split()\n    k = int(k)\n    \n    def next_string(s: str) -> str:\n        s = list(s)\n        i = len(s) - 1\n        while i >= 0:\n            if s[i] == 'z':\n                s[i] = 'a'\n                i -= 1\n            else:\n                s[i] = chr(ord(s[i]) + 1)\n                break\n        return ''.join(s)\n    \n    current_string = s\n    while current_string < t:\n        current_string = next_string(current_string)\n    \n    def generate_strings(s: str, t: str) -> list:\n        result = [s]\n        while result[-1] < t:\n            result.append(next_string(result[-1]))\n        return result\n    \n    strings = generate_strings(s, t)\n    median_index = len(strings) // 2\n    return strings[median_index]"
    },
    {
        "number": 4343,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k, s, t = stdin.split()\n    k = int(k)\n    \n    # create the list of all strings lexicographically not less than s and not greater than t (including s and t)\n    result = []\n    for i in range(ord('a'), ord('a') + k):\n        for j in range(ord('a'), ord('a') + k):\n            if s <= chr(i) + chr(j) <= t:\n                result.append(chr(i) + chr(j))\n    \n    # find the median\n    result.sort()\n    middle = len(result) // 2\n    median = result[middle]\n    \n    return median"
    },
    {
        "number": 4343,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    k, s, t = stdin.split()\n    k = int(k)\n    s = sorted(list(s))\n    t = sorted(list(t))\n    \n    result = []\n    for i in range(k):\n        result.append(s[i])\n        result.append(t[i])\n    \n    result.append('z')\n    \n    result.sort()\n    \n    return result[len(result) // 2]"
    },
    {
        "number": 4343,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    t = stdin.split('\\n')[2]\n\n    # Generate all possible strings of length k\n    strings = []\n    for i in range(ord('a'), ord('z') + 1):\n        for j in range(k):\n            strings.append(chr(i) * k)\n\n    # Remove strings that are lexicographically less than s or greater than t\n    strings = [string for string in strings if string >= s and string <= t]\n\n    # Sort the remaining strings\n    strings.sort()\n\n    # Find the median index\n    median_index = len(strings) // 2\n\n    # Return the median string\n    return strings[median_index]\n"
    },
    {
        "number": 4343,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.split()[0])\n    s, t = stdin.split()[1:3]\n\n    start = ''.join(['a' for _ in range(k)])\n    end = ''.join(['z' for _ in range(k)])\n\n    def is_valid(s: str) -> bool:\n        if s < s:\n            return True\n        if s > t:\n            return False\n        return True\n\n    valid_strings = [start]\n    while valid_strings[-1] != t:\n        new_strings = []\n        for valid_string in valid_strings:\n            for i in range(k):\n                if valid_string[i] != end:\n                    new_string = valid_string[:i] + chr(ord(valid_string[i]) + 1) + valid_string[i + 1:]\n                    if is_valid(new_string):\n                        new_strings.append(new_string)\n        valid_strings.extend(new_strings)\n        valid_strings.sort()\n\n    valid_strings.sort()\n    median_index = len(valid_strings) // 2\n    return valid_strings[median_index]"
    },
    {
        "number": 4343,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.split()[0])\n    s = stdin.split()[1]\n    t = stdin.split()[2]\n    start = s\n    end = t\n    strings = []\n    string = \"\"\n    for i in range(k):\n        for j in range(ord('a'), ord('z') + 1):\n            string += chr(j)\n            if string >= start and string <= end:\n                strings.append(string)\n            string = \"\"\n        string = \"\"\n        start = start.replace(s[i], chr(ord(s[i]) + 1))\n        end = end.replace(t[i], chr(ord(t[i]) - 1))\n    return sorted(strings)[len(strings) // 2]"
    },
    {
        "number": 4343,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k, s, t = stdin.split('\\n')\n    k = int(k)\n    s = sorted(set(t) - set(s))\n    if len(s) % 2 == 0:\n        median = s[len(s) // 2 - 1 : len(s) // 2 + 1]\n    else:\n        median = [s[len(s) // 2]]\n    return ''.join(median)\n\nstdin = '''\n2\naz\nbf\n'''\nprint(solution(stdin)) "
    },
    {
        "number": 4343,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k, s, t = stdin.split()\n    k = int(k)\n    s = ord(s[0])\n    t = ord(t[-1])\n    result = []\n\n    for first_letter in range(s, t + 1):\n        for word in itertools.product(range(ord('a'), ord('z') + 1), repeat=k - 1):\n            if ord(chr(first_letter)) < s:\n                continue\n            if ord(chr(first_letter)) > t:\n                continue\n            word = [first_letter] + list(word)\n            if ''.join(chr(i) for i in word) >= s and ''.join(chr(i) for i in word) <= t:\n                result.append(''.join(chr(i) for i in word))\n\n    return result[len(result) // 2]\n\ninput_stdin = sys.stdin.read()\ninput_lines = input_stdin.splitlines()\nk, s, t = input_lines[0], input_lines[1], input_lines[2]\noutput = solution(f\"{k}\\n{s}\\n{t}\")\nprint(output) "
    },
    {
        "number": 4344,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n, k = map(int, stdin.split())\n    ratings = list(map(int, input().split()))\n\n    # Check if it is possible to form a suitable team\n    unique_ratings = set(ratings)\n    if len(unique_ratings) < k:\n        return \"NO\"\n\n    # Form a team\n    team = []\n    for i in range(n):\n        if ratings[i] not in team:\n            team.append(i + 1)\n        if len(team) == k:\n            break\n\n    # Print the result\n    if len(team) < k:\n        return \"NO\"\n    else:\n        return \"YES\" + \"\\n\" + \" \".join(map(str, team))"
    },
    {
        "number": 4344,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    ratings = list(map(int, stdin.split()[2:]))\n\n    if k > n or k < 1:\n        return \"NO\"\n\n    for i in range(n):\n        if ratings.count(ratings[i]) > 1:\n            return \"NO\"\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if ratings[i] == ratings[j]:\n                return \"NO\"\n\n    indices = set()\n    while len(indices) < k:\n        index = ratings.index(max(ratings))\n        indices.add(index + 1)\n        ratings[index] = -1\n\n    return \"YES\" + \" \" + \" \".join(map(str, indices))"
    },
    {
        "number": 4344,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    ratings = list(map(int, stdin.split()[2:]))\n    \n    students = [i for i in range(1, n+1)]\n    \n    for p in itertools.permutations(students, k):\n        p_ratings = [ratings[i-1] for i in p]\n        if len(set(p_ratings)) == k:\n            return \"YES\\n\" + \" \".join(map(str, p))\n    return \"NO\"\n\ndef"
    },
    {
        "number": 4344,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    ratings = list(map(int, stdin.split()[2:]))\n\n    students = [i for i in range(1, n+1)]\n\n    # Check if there are enough unique ratings\n    if len(set(ratings)) < k:\n        return \"NO\"\n\n    # Find all possible combinations of k students\n    possible_teams = itertools.combinations(students, k)\n\n    # Check if any combination has distinct ratings\n    for team in possible_teams:\n        if len(set(ratings[i-1] for i in team)) == k:\n            return \"YES\\n\" + \" \".join(map(str, team))\n\n    return \"NO\"\n"
    },
    {
        "number": 4344,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(students, k) -> bool:\n        return len(students) >= k\n\n    def find_team(students, k) -> str:\n        if not is_valid(students, k):\n            return \"NO\"\n\n        team = []\n        while len(team) < k:\n            index = students.index(max(students))\n            team.append(index + 1)\n            students[index] = -1\n\n        return \"YES\" + \" \" + \" \".join(map(str, team))\n\n    n, k = map(int, stdin.split()[0:2])\n    students = list(map(int, stdin.split()[2:]))\n\n    return find_team(students, k)\n\n\ninput_data = \"5 3\\n15 13 15 15 12\\n\"\noutput_data = solution(input_data)\nprint(output_data) "
    },
    {
        "number": 4344,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    ratings = list(map(int, stdin.split()[2:]))\n\n    if len(set(ratings)) < k:\n        return \"NO\"\n\n    students = [(i, ratings[i-1]) for i in range(1, n+1)]\n    students.sort(key=lambda x: x[1], reverse=True)\n\n    for i in range(n-k+1):\n        team = students[i:i+k]\n        if len(set([x[1] for x in team])) == k:\n            return \"YES\\n\" + \" \".join(map(str, [x[0] for x in team]))\n\n    return \"NO\""
    },
    {
        "number": 4344,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    ratings = list(map(int, stdin.split()[2:]))\n\n    if len(ratings) != n:\n        return \"NO\"\n\n    for i in range(len(ratings)):\n        ratings[i] = (i, ratings[i])\n\n    ratings.sort(key=lambda x: x[1])\n\n    def find_team(start: int, target_size: int) -> list:\n        if target_size == 0:\n            return []\n        if start >= len(ratings):\n            return None\n\n        for i in range(start, len(ratings)):\n            if i > start and ratings[i][1] == ratings[i - 1][1]:\n                continue\n            team = find_team(i + 1, target_size - 1)\n            if team is not None:\n                return [ratings[i][0]] + team\n        return None\n\n    team = find_team(0, k)\n    if team is None:\n        return \"NO\"\n    else:\n        return \"YES\\n\" + \" \".join(map(str, team))\n"
    },
    {
        "number": 4344,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    students_ratings = list(map(int, stdin.split()[2:]))\n\n    if len(students_ratings) != n:\n        return \"NO\"\n\n    for rating in students_ratings:\n        if rating < 1 or rating > 100:\n            return \"NO\"\n\n    unique_ratings = set(students_ratings)\n    if len(unique_ratings) < k:\n        return \"NO\"\n\n    if k == n:\n        return \"YES\\n\" + \" \".join([str(i + 1) for i in range(n)])\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            for l in range(j + 1, n):\n                if students_ratings[i] != students_ratings[j] and students_ratings[j] != students_ratings[l] and students_ratings[i] != students_ratings[l]:\n                    return \"YES\\n\" + \" \".join([str(i + 1), str(j + 1), str(l + 1)])\n\n    return \"NO\""
    },
    {
        "number": 4344,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    ratings = list(map(int, stdin.split()))[n:]\n    \n    for i in range(n):\n        ratings[i] = (i+1, ratings[i])\n    \n    ratings.sort(key=lambda x: x[1])\n    ratings = [rating[0] for rating in ratings]\n    \n    if len(ratings) < k:\n        return \"NO\"\n    \n    team = []\n    for i in range(k):\n        if ratings[i] not in team:\n            team.append(ratings[i])\n    \n    if len(team) < k:\n        return \"NO\"\n    \n    return \"YES\" + \" \" + \" \".join(map(str, team))\n\n\ndef"
    },
    {
        "number": 4344,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    ratings = list(map(int, stdin.split()[2:]))\n    if k > n:\n        return \"NO\"\n    for rating in ratings:\n        if rating not in range(1, 101):\n            return \"NO\"\n    if len(set(ratings)) < k:\n        return \"NO\"\n    for i in range(1, n+1):\n        if i not in ratings:\n            continue\n        for j in range(i+1, n+1):\n            if j not in ratings:\n                continue\n            for l in range(j+1, n+1):\n                if l not in ratings:\n                    continue\n                return \"YES\\n\" + \" \".join(map(str, sorted([i, j, l])))\n    return \"NO\"\n\n\ninput_string = \"5 3\\n15 13 15 15 12\"\nstdin = input_string.strip()\nprint(solution(stdin)) "
    },
    {
        "number": 4345,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n    increasing = []\n    decreasing = []\n\n    for num in a:\n        if len(increasing) == 0 or num >= increasing[-1]:\n            increasing.append(num)\n        else:\n            break\n    else:\n        for num in a:\n            if len(decreasing) == 0 or num <= decreasing[-1]:\n                decreasing.append(num)\n            else:\n                break\n        else:\n            result = []\n            for num in a:\n                if num in increasing:\n                    result.append(0)\n                else:\n                    result.append(1)\n            return \"YES\\n\" + \" \".join(map(str, result))\n\n    return \"NO\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    \n    increasing = [x for x in range(1, n+1)]\n    decreasing = [x for x in range(n, 0, -1)]\n    res = [0] * n\n    \n    for i in range(n):\n        if a[i] in increasing:\n            res[i] = 0\n            increasing.remove(a[i])\n        elif a[i] in decreasing:\n            res[i] = 1\n            decreasing.remove(a[i])\n        else:\n            return \"NO\"\n    \n    return \"YES\\n\" + \" \".join(map(str, res))\n\n\ninput_data = input().strip()\nresult = solution(input_data)\nprint(result) "
    },
    {
        "number": 4345,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    increasing = []\n    decreasing = []\n\n    for i in range(n):\n        if a[i] == 0:\n            increasing.append(0)\n            decreasing.append(0)\n        elif a[i] > 0:\n            increasing.append(a[i])\n        else:\n            decreasing.append(a[i])\n\n    if len(increasing) == 0 or len(decreasing) == 0:\n        return \"NO\"\n\n    increasing.sort()\n    decreasing.sort(reverse=True)\n\n    for i in range(n):\n        if a[i] not in increasing and a[i] not in decreasing:\n            return \"NO\"\n\n    result = []\n    for i in range(n):\n        if a[i] in increasing:\n            result.append(0)\n        else:\n            result.append(1)\n\n    return \"YES\\n\" + \" \".join(map(str, result))\n\nstdin = \"5\\n1 2 4 0 2\"\nprint(solution(stdin)) # Output: NO\n\nstdin = \"9\\n5 1 3 6 8 2 9 0 10\"\nprint(solution(stdin)) # Output: YES\n1 0 0 0 0 1 0 1 0 \n\nstdin = \"5\\n1 2 4 0 2\"\nprint(solution(stdin)) # Output: NO "
    },
    {
        "number": 4345,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    \n    if n == 0:\n        return \"NO\"\n    elif n == 1:\n        return \"YES\\n0\"\n    \n    increasing = []\n    decreasing = []\n    \n    if a[0] > a[1]:\n        increasing.append(a[0])\n    else:\n        decreasing.append(a[0])\n    \n    for i in range(1, n-1):\n        if a[i] > a[i+1]:\n            increasing.append(a[i])\n        else:\n            decreasing.append(a[i])\n            \n    if a[-1] > a[-2]:\n        increasing.append(a[-1])\n    else:\n        decreasing.append(a[-1])\n    \n    if len(increasing) == 0 or len(decreasing) == 0:\n        return \"NO\"\n    \n    result = [0] * n\n    for i in range(n):\n        if a[i] in increasing:\n            result[i] = 0\n        else:\n            result[i] = 1\n    \n    return \"YES\" + \"\\n\" + \" \".join(map(str, result)) "
    },
    {
        "number": 4345,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    increasing = []\n    decreasing = []\n\n    for i in range(n):\n        if i == 0 or a[i] > a[i - 1]:\n            increasing.append(a[i])\n        else:\n            decreasing.append(a[i])\n\n    if not increasing or not decreasing:\n        return \"NO\"\n\n    increasing.sort()\n    decreasing.sort(reverse=True)\n\n    result = []\n\n    for i in range(n):\n        if a[i] in increasing:\n            result.append(0)\n        else:\n            result.append(1)\n\n    return \"YES\\n\" + \" \".join(map(str, result))\n"
    },
    {
        "number": 4345,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    # Check if a is a strictly increasing and strictly decreasing sequence\n    increasing = True\n    decreasing = True\n    for i in range(1, n):\n        if a[i] <= a[i - 1]:\n            increasing = False\n        if a[i] >= a[i - 1]:\n            decreasing = False\n\n    if not (increasing or decreasing):\n        return \"NO\"\n\n    # Split a into two sequences\n    seq1 = []\n    seq2 = []\n    for i in range(n):\n        if increasing:\n            if i == 0 or a[i] < a[i - 1]:\n                seq1.append(a[i])\n            else:\n                seq2.append(a[i])\n        else:\n            if i == n - 1 or a[i] > a[i + 1]:\n                seq1.append(a[i])\n            else:\n                seq2.append(a[i])\n\n    if len(seq1) == 0 or len(seq2) == 0:\n        return \"NO\"\n\n    # Check if the order of elements in seq1 is changed\n    for i in range(1, len(seq1)):\n        if seq1[i] < seq1[i - 1]:\n            return \"NO\"\n\n    # Check if the order of elements in seq2 is changed\n    for i in range(1, len(seq2)):\n        if seq2[i] > seq2[i - 1]:\n            return \"NO\"\n\n    # Combine seq1 and seq2\n    result = []\n    for i in range(n):\n        if a[i] in seq1:\n            result.append(0)\n        else:\n            result.append(1)\n\n    return \"YES\\n\" + \" \".join(map(str, result))"
    },
    {
        "number": 4345,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    increasing = []\n    decreasing = []\n    \n    for i in range(n):\n        if i == 0 or i == n - 1:\n            increasing.append(a[i])\n            decreasing.append(a[i])\n        elif a[i] > a[i-1] and a[i] < a[i+1]:\n            increasing.append(a[i])\n        elif a[i] < a[i-1] and a[i] > a[i+1]:\n            decreasing.append(a[i])\n        else:\n            return \"NO\"\n    \n    if len(increasing) == 0 or len(decreasing) == 0:\n        return \"NO\"\n    \n    result = []\n    for i in range(n):\n        if a[i] in increasing:\n            result.append(0)\n        else:\n            result.append(1)\n    \n    return \"YES\\n\" + \" \".join(map(str, result)) "
    },
    {
        "number": 4345,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    increasing = []\n    decreasing = []\n\n    # separate increasing and decreasing sequences\n    for num in a:\n        if len(increasing) == 0 or num >= increasing[-1]:\n            increasing.append(num)\n        elif len(decreasing) == 0 or num <= decreasing[-1]:\n            decreasing.append(num)\n        else:\n            return \"NO\"\n\n    result = [0] * n\n\n    # check if each element of a belongs to increasing or decreasing sequence\n    for i in range(n):\n        if a[i] in increasing:\n            result[i] = 0\n        elif a[i] in decreasing:\n            result[i] = 1\n        else:\n            return \"NO\"\n\n    return \"YES\\n\" + \" \".join(map(str, result))"
    },
    {
        "number": 4345,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_increasing(nums):\n        return all(nums[i] < nums[i + 1] for i in range(len(nums) - 1))\n\n    def is_decreasing(nums):\n        return all(nums[i] > nums[i + 1] for i in range(len(nums) - 1))\n\n    def merge_sequences(a, b):\n        result = []\n        i, j = 0, 0\n        while i < len(a) and j < len(b):\n            if a[i] < b[j]:\n                result.append(a[i])\n                i += 1\n            else:\n                result.append(b[j])\n                j += 1\n\n        if i < len(a):\n            result.extend(a[i:])\n        if j < len(b):\n            result.extend(b[j:])\n\n        return result\n\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    if n <= 2:\n        print(\"NO\")\n        return\n\n    for i in range(n):\n        if a[i] > a[i + 1]:\n            increasing_seq = a[:i + 1]\n            decreasing_seq = a[i:]\n            break\n\n    if not increasing_seq or not decreasing_seq:\n        print(\"NO\")\n        return\n\n    if not is_increasing(increasing_seq) or not is_decreasing(decreasing_seq):\n        print(\"NO\")\n        return\n\n    merged_seq = merge_sequences(increasing_seq, decreasing_seq)\n\n    if merged_seq != a:\n        print(\"NO\")\n        return\n\n    result = []\n    for i in range(n):\n        if a[i] in increasing_seq:\n            result.append(0)\n        else:\n            result.append(1)\n\n    print(\"YES\")\n    print(\" \".join(map(str, result)))"
    },
    {
        "number": 4345,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    sequence = [int(x) for x in stdin.split(\"\\n\")[1].split(\" \")]\n\n    increasing = []\n    decreasing = []\n\n    for i in range(n):\n        if i == 0 or i == n-1:\n            increasing.append(sequence[i])\n            decreasing.append(sequence[i])\n        elif sequence[i] > sequence[i-1] and sequence[i] < sequence[i+1]:\n            increasing.append(sequence[i])\n            decreasing.append(sequence[i])\n        elif sequence[i] < sequence[i-1] and sequence[i] > sequence[i+1]:\n            increasing.append(sequence[i])\n            decreasing.append(sequence[i])\n        else:\n            increasing.append(0)\n            decreasing.append(1)\n\n    if increasing == sorted(increasing) and decreasing == sorted(decreasing, reverse=True):\n        result = [str(x) for x in increasing + decreasing]\n        return \"YES\\n\" + \" \".join(result)\n    else:\n        return \"NO\""
    },
    {
        "number": 4346,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    t = int(stdin.readline())\n    for _ in range(t):\n        L, v, l, r = map(int, stdin.readline().split())\n        lanterns = [x for x in range(v, L + 1, v) if x < l or x > r]\n        result.append(len(lanterns))\n    return \"\\n\".join(map(str, result))\n\ndef"
    },
    {
        "number": 4346,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    result = []\n    \n    for _ in range(t):\n        L, v, l, r = map(int, stdin.split())\n        \n        if l <= r:\n            result.append(sum(1 for i in range(v, L+1, v) if i not in range(l, r+1)))\n        else:\n            result.append(sum(1 for i in range(v, L+1, v)))\n    \n    return '\\n'.join(map(str, result))\n\nstdin = input()\noutput = solution(stdin)\nprint(output) "
    },
    {
        "number": 4346,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a: int, b: int) -> int:\n        while b:\n            a, b = b, a % b\n        return a\n\n    def count_lanterns(L: int, v: int, l: int, r: int) -> int:\n        divisible_points = set()\n        for i in range(l, r + 1):\n            if i % v == 0:\n                divisible_points.add(i)\n\n        return len(divisible_points)\n\n    t = int(stdin.readline())\n    queries = []\n    for _ in range(t):\n        L, v, l, r = map(int, stdin.readline().split())\n        queries.append((L, v, l, r))\n\n    result = []\n    for L, v, l, r in queries:\n        v_gcd = gcd(v, L)\n        if l % v_gcd != 0:\n            l = l // v_gcd * v_gcd\n        if r % v_gcd != v_gcd - 1:\n            r = r // v_gcd * v_gcd + v_gcd - 1\n\n        result.append(count_lanterns(L, v, l, r))\n\n    return \"\\n\".join(map(str, result))"
    },
    {
        "number": 4346,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_data = [list(map(int, line.split())) for line in stdin.strip().split('\\n')]\n    output = []\n\n    for query in input_data:\n        lanterns_seen = 0\n        for i in range(1, query[0] + 1):\n            if i % query[1] == 0 and i not in range(query[2], query[3] + 1):\n                lanterns_seen += 1\n        output.append(lanterns_seen)\n\n    return '\\n'.join(map(str, output))"
    },
    {
        "number": 4346,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    queries = []\n    t = int(stdin.split('\\n')[0])\n\n    for i in range(1, t + 1):\n        L, v, l, r = map(int, stdin.split('\\n')[i].split())\n        queries.append((L, v, l, r))\n\n    answers = []\n    for L, v, l, r in queries:\n        count = 0\n        for i in range(1, L + 1):\n            if i % v == 0 and not l <= i <= r:\n                count += 1\n        answers.append(count)\n\n    return '\\n'.join(map(str, answers))\n\n\ninput_data = \"\"\"10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000\"\"\"\n\nprint(solution(input_data)) "
    },
    {
        "number": 4346,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    result = []\n\n    for i in range(t):\n        L, v, l, r = map(int, stdin.readline().strip().split())\n        lanterns_count = (L - 1) // v\n        covered_lanterns = 0\n\n        for j in range(l, r + 1):\n            if (j - l) % v == 0 and (j - l) // v < lanterns_count:\n                covered_lanterns += 1\n\n        result.append(lanterns_count - covered_lanterns)\n\n    return '\\n'.join(map(str, result))\n\ninput_data = '''4\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000'''\n\nprint(solution(input_data)) "
    },
    {
        "number": 4346,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(input())\n    output = []\n    for _ in range(t):\n        L, v, l, r = map(int, input().split())\n        lanterns = [i for i in range(v, L+1, v) if i not in range(l, r+1)]\n        output.append(len(lanterns))\n    return \"\\n\".join(map(str, output))\n"
    },
    {
        "number": 4346,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.splitlines()[0])\n    result = []\n    for i in range(t):\n        L, v, l, r = map(int, stdin.splitlines()[i+1].split())\n        lanterns = [x for x in range(v, L+1, v) if x not in range(l, r+1)]\n        result.append(len(lanterns))\n    return '\\n'.join(map(str, result))\n\ninput_data = '''10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000'''\n\nprint(solution(input_data)) "
    },
    {
        "number": 4346,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.readline())\n    results = []\n    \n    for _ in range(queries):\n        L, v, l, r = map(int, stdin.readline().split())\n        lanterns = [p for p in range(v, L+1, v) if p not in range(l, r+1)]\n        results.append(len(lanterns))\n    \n    return \"\\n\".join(map(str, results))\n"
    },
    {
        "number": 4346,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    result = []\n    \n    for _ in range(t):\n        L, v, l, r = map(int, stdin.readline().strip().split())\n        lanterns = [x for x in range(v, L+1, v) if x not in range(l, r+1)]\n        result.append(len(lanterns))\n    \n    return \"\\n\".join(map(str, result))"
    },
    {
        "number": 4347,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 != 0 or n < 2:\n        return \"Invalid input\"\n    \n    dances = 0\n    if n == 2:\n        return \"1\"\n    elif n == 4:\n        dances = 3\n    elif n == 6:\n        dances = 10\n    elif n == 8:\n        dances = 1260\n    elif n == 10:\n        dances = 7560\n    elif n == 12:\n        dances = 523776\n    elif n == 14:\n        dances = 4325696\n    elif n == 16:\n        dances = 403494526\n    elif n == 18:\n        dances = 401495001600\n    elif n == 20:\n        dances = 12164510040883200\n    \n    return str(dances)"
    },
    {
        "number": 4347,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 != 0:\n        return \"Error: n must be an even number\"\n    \n    def count_permutations(n: int, m: int) -> int:\n        if m == 0:\n            return 1\n        if n == 0:\n            return 0\n        return count_permutations(n - 1, m) + count_permutations(n - 1, m - 1)\n    \n    result = count_permutations(n // 2, n // 2)\n    return str(result)"
    },
    {
        "number": 4347,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 != 0 or n < 2 or n > 20:\n        return \"Invalid input. Please enter an even number between 2 and 20.\"\n    \n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            count += 1\n    \n    return str(count)"
    },
    {
        "number": 4347,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 != 0 or n < 2 or n > 20:\n        raise ValueError(\"Invalid input: n must be an even integer between 2 and 20\")\n\n    def round_dances(n: int) -> int:\n        if n == 2:\n            return 1\n        else:\n            count = 0\n            for i in range(1, n + 1):\n                for j in range(i + 1, n + 1):\n                    count += 2 if i != j else 1\n            return count\n\n    result = round_dances(n)\n    return str(result)"
    },
    {
        "number": 4347,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 != 0:\n        raise ValueError(\"n must be an even number\")\n    \n    if n < 2 or n > 20:\n        raise ValueError(\"n must be between 2 and 20 (inclusive)\")\n    \n    # Number of ways to choose half the people for the first dance\n    count = 1\n    \n    # Iterate over the remaining people\n    for i in range(2, n // 2 + 1):\n        count *= i\n    \n    # Divide the count by the number of permutations of the remaining people\n    count //= math.factorial(n - n // 2)\n    \n    return str(count)"
    },
    {
        "number": 4347,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    \n    for i in range(n):\n        count += (n // 2) ** i\n    \n    return str(count)"
    },
    {
        "number": 4347,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 != 0:\n        return \"Invalid input. n should be an even number.\"\n    \n    from itertools import permutations\n    \n    def is_indistinguishable(round_dance1, round_dance2):\n        for i in range(len(round_dance1)):\n            if round_dance1[i] != round_dance2[-(i+1)]:\n                return False\n        return True\n    \n    count = 0\n    for perm in permutations(range(1, n+1)):\n        for i in range(n // 2):\n            round_dance1 = list(perm[i*2:i*2+2])\n            round_dance2 = list(perm[i*2+2:n])\n            if is_indistinguishable(round_dance1, round_dance2):\n                count += 1\n                break\n    \n    return str(count)"
    },
    {
        "number": 4347,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # Calculate the number of ways to make two round dances\n    result = 0\n    for i in range(1, n // 2 + 1):\n        result += factorial(n // 2) // (factorial(i) * factorial(n // 2 - i))\n    \n    # Return the number of ways as a string\n    return str(result)\n\ndef"
    },
    {
        "number": 4347,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 != 0:\n        raise ValueError(\"Input must be an even number\")\n    \n    def count_ways(n: int) -> int:\n        if n == 2:\n            return 1\n        count = 0\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    count += 1\n        return count // 2\n    \n    result = count_ways(n)\n    return str(result)"
    },
    {
        "number": 4347,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 1 or n < 2 or n > 20:\n        raise ValueError(\"Invalid input\")\n\n    def count_combinations(n: int, k: int) -> int:\n        result = 1\n        for i in range(k):\n            result *= n - i\n            result //= k - i\n        return result\n\n    return str(count_combinations(n // 2, n // 2) ** 2)"
    },
    {
        "number": 4348,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    s = list(stdin.split()[1])\n\n    for _ in range(k):\n        for letter in 'abcdefghijklmnopqrstuvwxyz':\n            if letter in s:\n                s.remove(letter)\n                break\n\n    return ''.join(s) if s else ''"
    },
    {
        "number": 4348,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(stdin.split()[1])\n    for _ in range(k):\n        for char in 'abcdefghijklmnopqrstuvwxyz':\n            if char in s:\n                s.remove(char)\n                break\n    return ''.join(s) if s else ''\n\ndef"
    },
    {
        "number": 4348,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    s = stdin.readline().strip()\n    for _ in range(k):\n        for letter in 'abcdefghijklmnopqrstuvwxyz':\n            if letter in s:\n                s = s.replace(letter, '', 1)\n                break\n    return s if s else ''"
    },
    {
        "number": 4348,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()[1]\n    for _ in range(k):\n        if 'a' in s:\n            s = s.replace('a', '', 1)\n        elif 'b' in s:\n            s = s.replace('b', '', 1)\n        elif 'c' in s:\n            s = s.replace('c', '', 1)\n        elif 'd' in s:\n            s = s.replace('d', '', 1)\n        elif 'e' in s:\n            s = s.replace('e', '', 1)\n        elif 'f' in s:\n            s = s.replace('f', '', 1)\n        elif 'g' in s:\n            s = s.replace('g', '', 1)\n        elif 'h' in s:\n            s = s.replace('h', '', 1)\n        elif 'i' in s:\n            s = s.replace('i', '', 1)\n        elif 'j' in s:\n            s = s.replace('j', '', 1)\n        elif 'k' in s:\n            s = s.replace('k', '', 1)\n        elif 'l' in s:\n            s = s.replace('l', '', 1)\n        elif 'm' in s:\n            s = s.replace('m', '', 1)\n        elif 'n' in s:\n            s = s.replace('n', '', 1)\n        elif 'o' in s:\n            s = s.replace('o', '', 1)\n        elif 'p' in s:\n            s = s.replace('p', '', 1)\n        elif 'q' in s:\n            s = s.replace('q', '', 1)\n        elif 'r' in s:\n            s = s.replace('r', '', 1)\n        elif 's' in s:\n            s = s.replace('s', '', 1)\n        elif 't' in s:\n            s = s.replace('t', '', 1)\n        elif 'u' in s:\n            s = s.replace('u', '', 1)\n        elif 'v' in s:\n            s = s.replace('v', '', 1)\n        elif 'w' in s:\n            s = s.replace('w', '', 1)\n        elif 'x' in s:\n            s = s.replace('x', '', 1)\n        elif 'y' in s:\n            s = s.replace('y', '', 1)\n        elif 'z' in s:\n            s = s.replace('z', '', 1)\n    return s if s else \"\"\n\ndef"
    },
    {
        "number": 4348,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    s = list(stdin.split()[1])\n    for _ in range(k):\n        for letter in ascii_lowercase:\n            if letter in s:\n                s.remove(letter)\n                break\n    return ''.join(s) if s else \"\""
    },
    {
        "number": 4348,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()[1]\n    \n    if n < k:\n        return \"\"\n    \n    for _ in range(k):\n        for letter in string.ascii_lowercase:\n            if letter in s:\n                s = s.replace(letter, '', 1)\n                break\n    \n    return s if s else \"\""
    },
    {
        "number": 4348,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(stdin.split()[1])\n\n    for _ in range(k):\n        for letter in 'abcdefghijklmnopqrstuvwxyz':\n            if letter in s:\n                s.remove(letter)\n                break\n\n    return ''.join(s)\n"
    },
    {
        "number": 4348,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(stdin.split()[1])\n    removed = 0\n    for char in 'abcdefghijklmnopqrstuvwxyz':\n        while char in s and removed < k:\n            s.remove(char)\n            removed += 1\n        if removed == k:\n            break\n    return ''.join(s)\n\ndef"
    },
    {
        "number": 4348,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    s = input()\n\n    for _ in range(k):\n        if 'a' in s:\n            s = s.replace('a', '', 1)\n        elif 'b' in s:\n            s = s.replace('b', '', 1)\n        elif 'c' in s:\n            s = s.replace('c', '', 1)\n        elif 'd' in s:\n            s = s.replace('d', '', 1)\n        elif 'e' in s:\n            s = s.replace('e', '', 1)\n        elif 'f' in s:\n            s = s.replace('f', '', 1)\n        elif 'g' in s:\n            s = s.replace('g', '', 1)\n        elif 'h' in s:\n            s = s.replace('h', '', 1)\n        elif 'i' in s:\n            s = s.replace('i', '', 1)\n        elif 'j' in s:\n            s = s.replace('j', '', 1)\n        elif 'k' in s:\n            s = s.replace('k', '', 1)\n        elif 'l' in s:\n            s = s.replace('l', '', 1)\n        elif 'm' in s:\n            s = s.replace('m', '', 1)\n        elif 'n' in s:\n            s = s.replace('n', '', 1)\n        elif 'o' in s:\n            s = s.replace('o', '', 1)\n        elif 'p' in s:\n            s = s.replace('p', '', 1)\n        elif 'q' in s:\n            s = s.replace('q', '', 1)\n        elif 'r' in s:\n            s = s.replace('r', '', 1)\n        elif 's' in s:\n            s = s.replace('s', '', 1)\n        elif 't' in s:\n            s = s.replace('t', '', 1)\n        elif 'u' in s:\n            s = s.replace('u', '', 1)\n        elif 'v' in s:\n            s = s.replace('v', '', 1)\n        elif 'w' in s:\n            s = s.replace('w', '', 1)\n        elif 'x' in s:\n            s = s.replace('x', '', 1)\n        elif 'y' in s:\n            s = s.replace('y', '', 1)\n        elif 'z' in s:\n            s = s.replace('z', '', 1)\n\n    return s if s else \"\"\n\ninput_str = \"15 3\\ncccaabababaccbc\"\nprint(solution(input_str))\n\ninput_str = \"15 9\\ncccaabababaccbc\"\nprint(solution(input_str))\n\ninput_str = \"1 1\\nu\"\nprint(solution(input_str)) "
    },
    {
        "number": 4348,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    s = list(stdin.split()[1])\n\n    for _ in range(k):\n        for letter in ascii_lowercase:\n            if letter in s:\n                s.remove(letter)\n                break\n\n    return ''.join(s) if s else ''"
    },
    {
        "number": 4349,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    k = list(map(int, stdin.readline().split()))\n    offers = []\n    for _ in range(m):\n        d, t = map(int, stdin.readline().split())\n        offers.append((d, t - 1))\n\n    def can_buy(offer: tuple, day: int) -> bool:\n        d, t = offer\n        return d > day\n\n    def burles_needed(k: list) -> int:\n        total = 0\n        for i, num in enumerate(k):\n            total += num * (2 if i in sales else 1)\n        return total\n\n    days = 0\n    sales = set()\n    for offer in offers:\n        if can_buy(offer, days):\n            days = offer[0]\n            sales.add(offer[1])\n\n    while burles_needed(k) > days * 1:\n        days += 1\n\n    return str(days)\n"
    },
    {
        "number": 4349,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().strip().split())\n    k = list(map(int, stdin.readline().strip().split()))\n    special_offers = []\n    for _ in range(m):\n        d, t = map(int, stdin.readline().strip().split())\n        special_offers.append((d, t))\n    \n    # Sort special offers by their deadline\n    special_offers.sort(key=lambda x: x[0])\n    \n    # Calculate the minimum day when Ivan can order all microtransactions he wants and actually start playing\n    min_day = 0\n    for i in range(n):\n        min_day += (k[i] - 1) // 2 + 1\n    \n    for deadline, type_index in special_offers:\n        min_day += min(k[type_index], deadline - min_day)\n    \n    return str(min_day)"
    },
    {
        "number": 4349,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def read_line() -> str:\n        return stdin.readline().strip()\n\n    n, m = map(int, read_line().split())\n    k = list(map(int, read_line().split()))\n\n    offers = []\n    for _ in range(m):\n        d, t = map(int, read_line().split())\n        offers.append((d, t))\n\n    # sort offers by day\n    offers.sort(key=lambda x: x[0])\n\n    # calculate min_day\n    min_day = 1\n    burles = 0\n    for day, offer in enumerate(offers, start=1):\n        if offer[1] <= k[offer[1]-1]:\n            k[offer[1]-1] -= 1\n            burles += 1\n        else:\n            min_day = offer[0]\n            break\n\n    return str(min_day)"
    },
    {
        "number": 4349,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n, m = map(int, stdin.split()[0:2])\n    k = list(map(int, stdin.split()[2:2 + n]))\n    offers = [tuple(map(int, stdin.split()[2 + n + i * 2:2 + n + i * 2 + 2])) for i in range(m)]\n    \n    # Initialize variables\n    min_day = 1\n    microtransactions_total = sum(k)\n    microtransactions_bought = [0] * n\n    \n    # Iterate through days\n    while microtransactions_total > 0:\n        # Check if there are microtransactions to buy on the current day\n        microtransactions_to_buy = microtransactions_total\n        for offer in offers:\n            if offer[0] == min_day:\n                microtransactions_to_buy -= microtransactions_bought[offer[1] - 1]\n        \n        # Buy microtransactions\n        for i in range(n):\n            if k[i] > 0 and microtransactions_bought[i] < k[i]:\n                microtransactions_bought[i] += min(microtransactions_to_buy, k[i] - microtransactions_bought[i])\n                microtransactions_to_buy -= min(microtransactions_to_buy, k[i] - microtransactions_bought[i])\n                microtransactions_total -= min(microtransactions_to_buy, k[i] - microtransactions_bought[i])\n        \n        # Increase day counter\n        min_day += 1\n        \n    return str(min_day)"
    },
    {
        "number": 4349,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    k = list(map(int, stdin.readline().split()))\n    special_offers = []\n    for _ in range(m):\n        d, t = map(int, stdin.readline().split())\n        special_offers.append((d, t))\n\n    # Sort special offers by their end dates\n    special_offers.sort(key=lambda x: x[0], reverse=True)\n\n    # Initialize variables\n    min_day = 1\n    max_day = 2 * 10**5\n    total_sale = 0\n    total_price = 0\n\n    # Iterate through special offers\n    for d, t in special_offers:\n        # Calculate the price of microtransactions for the special offer\n        sale_price = k[t - 1] // 2\n        regular_price = k[t - 1] - sale_price\n        total_sale += sale_price\n        total_price += regular_price\n\n        # Calculate the minimum day to order microtransactions\n        if total_sale >= total_price:\n            min_day = d\n        else:\n            max_day = d - 1\n\n        # If the minimum day is greater than the maximum day, return -1\n        if min_day > max_day:\n            return -1\n\n    return min_day"
    },
    {
        "number": 4349,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def parse_input(stdin: str) -> tuple:\n        lines = stdin.splitlines()\n        n, m = map(int, lines[0].split())\n        k = list(map(int, lines[1].split()))\n        offers = []\n        for i in range(m):\n            d, t = map(int, lines[2 + i].split())\n            offers.append((d, t))\n        return n, m, k, offers\n\n    def sort_offers(offers):\n        return sorted(offers, key=lambda x: x[0])\n\n    def buy_microtransactions(n: int, k: list, offers: list, target_day: int) -> int:\n        def cost(i: int, j: int) -> int:\n            return 1 if i < j else 2\n\n        total_cost = 0\n        for i in range(n):\n            if k[i] == 0:\n                continue\n            bought = 0\n            for j in range(len(offers)):\n                if offers[j][1] == i + 1:\n                    bought += k[i]\n                    break\n            if bought == 0:\n                bought = k[i]\n                total_cost += cost(target_day, offers[0][0]) * bought\n            else:\n                total_cost += cost(target_day, offers[0][0]) * (k[i] - bought)\n                target_day = min(target_day, offers[0][0])\n        return total_cost\n\n    n, m, k, offers = parse_input(stdin)\n    offers = sort_offers(offers)\n    target_day = 1\n    while target_day <= 2 * 10**5:\n        if buy_microtransactions(n, k, offers, target_day) <= 2 * 10**5:\n            break\n        target_day += 1\n\n    return str(target_day)"
    },
    {
        "number": 4349,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def read_input():\n        n, m = map(int, input().split())\n        k = list(map(int, input().split()))\n        special_offers = []\n        for _ in range(m):\n            special_offers.append(tuple(map(int, input().split())))\n        return n, k, special_offers\n\n    def can_buy(remaining_k, on_sale):\n        for i in range(len(remaining_k)):\n            if on_sale[i]:\n                if remaining_k[i] > 0:\n                    remaining_k[i] -= 1\n                    return True\n            else:\n                if remaining_k[i] > 1:\n                    remaining_k[i] -= 2\n                    return True\n        return False\n\n    def find_min_day(n, k, special_offers):\n        on_sale = [False] * n\n        remaining_k = k.copy()\n        for day, offer in enumerate(special_offers, start=1):\n            on_sale[offer - 1] = True\n            if can_buy(remaining_k, on_sale):\n                return day\n        return -1\n\n    n, k, special_offers = read_input()\n    return str(find_min_day(n, k, special_offers))"
    },
    {
        "number": 4349,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.splitlines()[0].split())\n    k = list(map(int, stdin.splitlines()[1].split()))\n    special_offers = [tuple(map(int, line.split())) for line in stdin.splitlines()[2:]]\n    \n    def count_burles(type_index, days_left):\n        total_burles = 0\n        for d, t in special_offers:\n            if type_index == t and days_left >= d:\n                total_burles += 1\n        return k[type_index] * (2 - total_burles)\n    \n    def min_days_to_order(burles_left):\n        days = 0\n        while burles_left > 0:\n            days += 1\n            burles_left -= count_burles(0, days)\n        return days\n    \n    total_burles = sum(count_burles(i, 0) for i in range(n))\n    return str(min_days_to_order(total_burles))"
    },
    {
        "number": 4349,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    k = list(map(int, input().split()))\n    offers = []\n    \n    for _ in range(m):\n        d, t = map(int, input().split())\n        offers.append((d, t))\n    \n    # Sort offers by day\n    offers.sort(key=lambda x: x[0])\n    \n    # Helper function to check if offer is active\n    def is_offer_active(day, offer):\n        return offer[0] <= day and offer[1] == t\n    \n    # Calculate price for each microtransaction\n    prices = [2] * n\n    for offer in offers:\n        prices[offer[1]-1] = 1\n    \n    # Calculate cost of each microtransaction\n    costs = [k[i] * prices[i] for i in range(n)]\n    \n    # Calculate total cost of all microtransactions\n    total_cost = sum(costs)\n    \n    # Calculate maximum number of days Ivan can use to order all microtransactions\n    max_days = total_cost // 1  # 1 burle can buy 1 microtransaction\n    \n    # Helper function to calculate cost of microtransactions purchased during day\n    def get_cost_for_day(day, offers):\n        cost = 0\n        for offer in offers:\n            if is_offer_active(day, offer):\n                cost += offer[1]\n        return cost\n    \n    # Binary search for minimum day\n    left = 1\n    right = max_days\n    \n    while left <= right:\n        mid = (left + right) // 2\n        cost_for_day = get_cost_for_day(mid, offers)\n        \n        if cost_for_day == total_cost:\n            return str(mid)\n        elif cost_for_day < total_cost:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return \"IMPOSSIBLE\""
    },
    {
        "number": 4349,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, m = map(int, lines[0].split())\n    k = list(map(int, lines[1].split()))\n    offers = []\n    for i in range(m):\n        d, t = map(int, lines[2 + i].split())\n        offers.append((d, t))\n    \n    def min_day(k, offers):\n        day = 0\n        total_k = sum(k)\n        total_offers = sum(map(lambda x: x[0], offers))\n        \n        while total_k > 0 and total_offers > 0:\n            day += 1\n            total_k -= k.pop(0)\n            for i in range(len(offers)):\n                if offers[i][0] <= day:\n                    if offers[i][1] == 1:\n                        total_offers -= 1\n                    else:\n                        k[offers[i][1] - 1] -= 1\n                        total_offers -= 1\n                    offers.pop(i)\n        return day\n    \n    return str(min_day(k, offers))"
    },
    {
        "number": 4350,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, m = map(int, lines[0].split())\n    grid = [list(line) for line in lines[1:]]\n    \n    def is_star_inside_grid(x: int, y: int, size: int) -> bool:\n        for i in range(x - size, x + size + 1):\n            for j in range(y - size, y + size + 1):\n                if not (0 <= i < n and 0 <= j < m):\n                    return False\n                if grid[i][j] == '*':\n                    return False\n        return True\n\n    def draw_stars(x: int, y: int, size: int) -> None:\n        grid[x][y] = '*'\n        for i in range(x - size, x + size + 1):\n            for j in range(y - size, y + size + 1):\n                if 0 <= i < n and 0 <= j < m:\n                    if grid[i][j] == '.':\n                        grid[i][j] = '*'\n\n    stars = []\n    k = 0\n    for x in range(n):\n        for y in range(m):\n            for size in range(1, min(n - x, m - y) + 1):\n                if grid[x][y] == '*' and is_star_inside_grid(x, y, size):\n                    draw_stars(x, y, size)\n                    stars.append((x, y, size))\n                    k += 1\n                    if k == n * m:\n                        break\n            if k == n * m:\n                break\n        if k == n * m:\n            break\n    \n    if k == n * m:\n        return str(k) + '\\n' + '\\n'.join(f'{x} {y} {size}' for x, y, size in stars)\n    else:\n        return '-1'"
    },
    {
        "number": 4350,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0].split())\n    grid = [list(row) for row in stdin.split()[1:]]\n\n    def is_star_valid(i, j, size):\n        if size == 0:\n            return False\n        for y in range(j - size, j + size + 1):\n            if y < 0 or y >= m:\n                return False\n            for x in range(i - size, i + size + 1):\n                if x < 0 or x >= n:\n                    return False\n                if x != i or y != j:\n                    if grid[x][y] == '*':\n                        return False\n        return True\n\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            for size in range(1, n * m - len(stars) + 1):\n                if is_star_valid(i, j, size):\n                    stars.append((i, j, size))\n                    if len(stars) == n * m:\n                        return f\"{len(stars)}\\n\" + '\\n'.join(f\"{x} {y} {s}\" for x, y, s in stars)\n\n    return \"-1\""
    },
    {
        "number": 4350,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0].split())\n    grid = [list(stdin.split()[i]) for i in range(1, n+1)]\n    \n    def is_star_possible(size, row, col):\n        if size == 0:\n            return False\n        if row < 0 or row >= n or col < 0 or col >= m:\n            return False\n        for i in range(row-size, row+size+1):\n            for j in range(col-size, col+size+1):\n                if i >= 0 and i < n and j >= 0 and j < m:\n                    if grid[i][j] == '*':\n                        return False\n        return True\n    \n    def find_stars(row, col, stars):\n        if row < 0 or row >= n or col < 0 or col >= m:\n            return\n        if grid[row][col] == '*':\n            size = 1\n            while is_star_possible(size+1, row, col):\n                size += 1\n            if size == 1:\n                return\n            for i in range(row-size, row+size+1):\n                for j in range(col-size, col+size+1):\n                    if i >= 0 and i < n and j >= 0 and j < m:\n                        grid[i][j] = '.'\n            stars.append((row, col, size))\n            find_stars(row-1, col, stars)\n            find_stars(row, col-1, stars)\n            find_stars(row+1, col, stars)\n            find_stars(row, col+1, stars)\n    \n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                find_stars(i, j, stars)\n    if len(stars) > n*m:\n        return \"-1\"\n    else:\n        result = str(len(stars)) + \"\\n\"\n        for s in stars:\n            result += \" \".join(map(str, s)) + \"\\n\"\n        return result.rstrip()"
    },
    {
        "number": 4350,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def can_draw(x, y, size, grid):\n        for i in range(size):\n            for j in range(size):\n                if i == 0 or i == size - 1 or j == 0 or j == size - 1:\n                    if grid[x + i][y + j] == '*':\n                        return False\n                else:\n                    if grid[x + i][y + j] != '.':\n                        return False\n        return True\n\n    def draw_star(x, y, size, grid, stars):\n        for i in range(size):\n            for j in range(size):\n                if i == 0 or i == size - 1 or j == 0 or j == size - 1:\n                    grid[x + i][y + j] = '*'\n        stars.append((x, y, size))\n\n    n, m = map(int, stdin.split()[0].split())\n    grid = [list(stdin.split()[i]) for i in range(1, n + 1)]\n    stars = []\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                for size in range(1, min(n - i, m - j, i, j) + 1):\n                    if can_draw(i, j, size, grid):\n                        draw_star(i, j, size, grid, stars)\n                        break\n\n    return str(len(stars)) + '\\n' + '\\n'.join([' '.join(map(str, star)) for star in stars])\n\ndef"
    },
    {
        "number": 4350,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def check_star(grid: List[str], x: int, y: int, size: int) -> bool:\n        for i in range(size):\n            for j in range(size):\n                if i == 0 or i == size - 1 or j == 0 or j == size - 1:\n                    if grid[x + i][y + j] != '*':\n                        return False\n        return True\n\n    def draw_grid(grid: List[str]) -> str:\n        n, m = len(grid), len(grid[0])\n        stars = []\n        max_stars = n * m\n\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == '*':\n                    for size in range(1, min(n, m) + 1):\n                        if check_star(grid, i, j, size):\n                            stars.append((i, j, size))\n                            if len(stars) == max_stars:\n                                break\n                    if len(stars) == max_stars:\n                        break\n                if len(stars) == max_stars:\n                    break\n            if len(stars) == max_stars:\n                break\n\n        if len(stars) > max_stars:\n            return \"-1\"\n        else:\n            result = [str(len(stars))]\n            for star in stars:\n                result.append(\" \".join(map(str, star)))\n            return \"\\n\".join(result)\n\n    grid = stdin.strip().split(\"\\n\")\n    if any(len(row) != len(grid[0]) for row in grid):\n        return \"-1\"\n\n    return draw_grid(grid)"
    },
    {
        "number": 4350,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_inside(x, y):\n        return 0 <= x < n and 0 <= y < m\n\n    def can_place_star(x, y, s):\n        return all(is_inside(x + dx, y + dy) and grid[x + dx][y + dy] != '*' for dx, dy in [(-s // 2, -s // 2), (s // 2, -s // 2), (s // 2, s // 2), (-s // 2, s // 2)] if is_inside(x + dx, y + dy))\n\n    def place_stars(x, y, s):\n        nonlocal stars_used\n        stars_used += 1\n        star_centers.append((x, y))\n        grid[x][y] = '*'\n        for dx, dy in [(-s // 2, -s // 2), (s // 2, -s // 2), (s // 2, s // 2), (-s // 2, s // 2)]:\n            x1, y1 = x + dx, y + dy\n            if is_inside(x1, y1):\n                grid[x1][y1] = '*'\n\n    n, m = map(int, stdin.split())\n    grid = [list(line) for line in stdin.split()[-n:]]\n    stars_used = 0\n    star_centers = []\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                for s in range(1, max(n, m) + 1):\n                    if can_place_star(i, j, s):\n                        place_stars(i, j, s)\n                        break\n\n    if stars_used > n * m:\n        print(\"-1\")\n    else:\n        print(stars_used)\n        for x, y in star_centers:\n            print(x, y, 1)"
    },
    {
        "number": 4350,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0].split())\n    grid = stdin.split('\\n')[1:n+1]\n\n    def can_draw(x, y, size):\n        return all(grid[i][j] == '.' for i in range(x-size+1, x+size) for j in range(y-size+1, y+size))\n\n    def draw(x, y, size):\n        for i in range(x-size+1, x+size):\n            for j in range(y-size+1, y+size):\n                if i >= 0 and i < n and j >= 0 and j < m:\n                    if grid[i][j] == '*':\n                        return False\n                    else:\n                        grid[i][j] = '*'\n        return True\n\n    def backtrack(x, y, size, count):\n        if count == n * m:\n            return True\n        for i in range(x+1, n):\n            for j in range(m):\n                if grid[i][j] == '.' and can_draw(i, j, size):\n                    if draw(i, j, size):\n                        if backtrack(i, j, size+1, count+1):\n                            return True\n                        grid[i][j] = '.'\n                    else:\n                        return False\n        return False\n\n    stars = []\n    if backtrack(0, 0, 1, 0):\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == '*':\n                    stars.append((i, j, 1))\n        print(len(stars))\n        for i, j, size in stars:\n            print(i+1, j+1, size)\n    else:\n        print(-1)"
    },
    {
        "number": 4350,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def check_star(x, y, size, grid):\n        for i in range(x - size, x + size + 1):\n            for j in range(y - size, y + size + 1):\n                if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or (i, j) == (x, y):\n                    continue\n                if grid[i][j] == '*':\n                    return False\n        return True\n\n    def place_star(x, y, size, grid):\n        grid[x][y] = '*'\n        for i in range(x - size, x + size + 1):\n            for j in range(y - size, y + size + 1):\n                if 0 <= i < len(grid) and 0 <= j < len(grid[0]) and (i, j) != (x, y):\n                    grid[i][j] = '.'\n\n    n, m = map(int, stdin.splitlines()[0].split())\n    grid = [list(line) for line in stdin.splitlines()[1:]]\n    k = 0\n    stars = []\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                k += 1\n                for size in range(1, n):\n                    if check_star(i, j, size, grid):\n                        stars.append((i, j, size))\n                        place_star(i, j, size, grid)\n                        break\n\n    if k > n * m:\n        return \"-1\"\n\n    return \"\\n\".join([str(k)] + [f\"{x} {y} {s}\" for x, y, s in stars])\n\ninput_data = \"\"\"6 8\n....*...\n...**...\n..*****.\n...**...\n....*...\n........\"\"\"\nprint(solution(input_data)) "
    },
    {
        "number": 4350,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    grid = [list(line.strip()) for line in stdin.split('\\n')[1:n+1]]\n\n    def can_place_star(grid, x, y, size):\n        for i in range(x-size, x+size+1):\n            for j in range(y-size, y+size+1):\n                if 0 <= i < n and 0 <= j < m and grid[i][j] == '*':\n                    return False\n        return True\n\n    stars = []\n    for x in range(n):\n        for y in range(m):\n            if grid[x][y] == '*':\n                for size in range(1, min(x, y, n-x-1, m-y-1)+1):\n                    if can_place_star(grid, x, y, size):\n                        stars.append((x, y, size))\n                        break\n                else:\n                    return \"-1\"\n\n    if len(stars) > n*m:\n        return \"-1\"\n\n    result = str(len(stars)) + '\\n'\n    for x, y, size in stars:\n        result += f\"{x+1} {y+1} {size}\\n\"\n\n    return result"
    },
    {
        "number": 4350,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    grid = [list(row) for row in stdin.split()[2:]]\n    \n    def is_star_possible(x, y, size):\n        for i in range(x - size, x + size + 1):\n            for j in range(y - size, y + size + 1):\n                if i < 0 or j < 0 or i >= n or j >= m:\n                    continue\n                if grid[i][j] == '*':\n                    return False\n        return True\n\n    def count_stars_required(x, y, size):\n        count = 1\n        for i in range(x - size + 1, x + size):\n            for j in range(y - size + 1, y + size):\n                if i < 0 or j < 0 or i >= n or j >= m:\n                    continue\n                if grid[i][j] == '*':\n                    count += 1\n        return count\n\n    def print_stars(x, y, size):\n        for i in range(x - size, x + size + 1):\n            for j in range(y - size, y + size + 1):\n                if i < 0 or j < 0 or i >= n or j >= m:\n                    continue\n                if grid[i][j] == '*':\n                    print(i + 1, j + 1, size)\n\n    max_stars = n * m\n    min_size = 1\n    max_size = min(n, m)\n\n    while min_size <= max_size:\n        size = (min_size + max_size) // 2\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == '*':\n                    count = count_stars_required(i, j, size)\n                    if count > max_stars:\n                        min_size = size + 1\n                        break\n                    elif count <= max_stars:\n                        if is_star_possible(i, j, size):\n                            print(count)\n                            print_stars(i, j, size)\n                            return\n                        else:\n                            max_stars = count - 1\n                            break\n            else:\n                continue\n            break\n        else:\n            max_size = size - 1\n\n    print(-1)"
    },
    {
        "number": 4351,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if str(N) == str(N)[::-1]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4351,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    str_num = str(num)\n    if str_num == str_num[::-1]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4351,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    if str(num) == str(num)[::-1]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4351,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    n_str = str(n)\n    if n_str == n_str[::-1]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4351,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    str_n = str(n)\n    if str_n == str_n[::-1]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4351,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if str(n) == str(n)[::-1]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4351,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = str(n)\n    return \"Yes\" if s == s[::-1] else \"No\""
    },
    {
        "number": 4351,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    return \"Yes\" if str(N) == str(N)[::-1] else \"No\""
    },
    {
        "number": 4351,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    num_str = str(num)\n    if num_str == num_str[::-1]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4351,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if str(N) == str(N)[::-1]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4352,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    \n    if A > B:\n        return \"Alice\"\n    elif A < B:\n        return \"Bob\"\n    else:\n        return \"Draw\""
    },
    {
        "number": 4352,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    \n    if A > B:\n        return \"Alice\"\n    elif B > A:\n        return \"Bob\"\n    else:\n        return \"Draw\""
    },
    {
        "number": 4352,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n\n    if A > B:\n        return \"Alice\"\n    elif B > A:\n        return \"Bob\"\n    else:\n        return \"Draw\""
    },
    {
        "number": 4352,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n\n    if A > B:\n        return \"Alice\"\n    elif B > A:\n        return \"Bob\"\n    else:\n        return \"Draw\""
    },
    {
        "number": 4352,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        return \"Alice\"\n    elif b > a:\n        return \"Bob\"\n    else:\n        return \"Draw\""
    },
    {
        "number": 4352,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        return \"Alice\"\n    elif b > a:\n        return \"Bob\"\n    else:\n        return \"Draw\""
    },
    {
        "number": 4352,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A > B:\n        return \"Alice\"\n    elif B > A:\n        return \"Bob\"\n    else:\n        return \"Draw\""
    },
    {
        "number": 4352,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n\n    if A > B:\n        return \"Alice\"\n    elif A < B:\n        return \"Bob\"\n    else:\n        return \"Draw\""
    },
    {
        "number": 4352,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A > B:\n        return \"Alice\"\n    elif B > A:\n        return \"Bob\"\n    else:\n        return \"Draw\""
    },
    {
        "number": 4352,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    \n    if A > B:\n        return \"Alice\"\n    elif B > A:\n        return \"Bob\"\n    else:\n        return \"Draw\""
    },
    {
        "number": 4353,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.replace(\",\", \" \")\n    return s"
    },
    {
        "number": 4353,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    new_s = s.replace(',', ' ')\n    return new_s"
    },
    {
        "number": 4353,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.replace(',', ' ')\n    return s\n\ns = input()\nprint(solution(s)) "
    },
    {
        "number": 4353,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.replace(',', ' ')\n    return s"
    },
    {
        "number": 4353,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.replace(',', ' ')\n    return s"
    },
    {
        "number": 4353,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip().replace(\",\", \" \")\n    return s"
    },
    {
        "number": 4353,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.replace(',', ' ')\n    return s"
    },
    {
        "number": 4353,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.replace(\",\", \" \")\n    return s"
    },
    {
        "number": 4353,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.replace(\",\", \" \")\n    return s"
    },
    {
        "number": 4353,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.replace(\",\", \" \")\n    return s\n\ninput_str = input()\noutput_str = solution(input_str)\nprint(output_str) "
    },
    {
        "number": 4354,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N, M = map(int, lines[0].split())\n    students = [tuple(map(int, line.split())) for line in lines[1:N+1]]\n    checkpoints = [tuple(map(int, line.split())) for line in lines[N+1:]]\n\n    result = []\n    for student in students:\n        min_distance = float(\"inf\")\n        min_checkpoint = 0\n        for j, checkpoint in enumerate(checkpoints):\n            distance = abs(student[0] - checkpoint[0]) + abs(student[1] - checkpoint[1])\n            if distance < min_distance:\n                min_distance = distance\n                min_checkpoint = j + 1\n        result.append(min_checkpoint)\n\n    return \"\\n\".join(map(str, result))"
    },
    {
        "number": 4354,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    students, checkpoints = list(map(int, stdin.split()[0:2]))\n    students_coords = [list(map(int, line.split())) for line in stdin.split(\"\\n\")[2:-1]]\n    checkpoints_coords = [list(map(int, line.split())) for line in stdin.split(\"\\n\")[2 + checkpoints:]]\n\n    result = []\n\n    for student in students_coords:\n        nearest_checkpoint = checkpoints_coords[0]\n        min_distance = abs(student[0] - nearest_checkpoint[0]) + abs(student[1] - nearest_checkpoint[1])\n\n        for checkpoint in checkpoints_coords[1:]:\n            distance = abs(student[0] - checkpoint[0]) + abs(student[1] - checkpoint[1])\n            if distance < min_distance:\n                nearest_checkpoint = checkpoint\n                min_distance = distance\n\n        result.append(checkpoints_coords.index(nearest_checkpoint) + 1)\n\n    return \"\\n\".join(map(str, result))\n"
    },
    {
        "number": 4354,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, input().split())\n    students = []\n    checkpoints = []\n\n    for i in range(N):\n        x, y = map(int, input().split())\n        students.append((x, y))\n\n    for j in range(M):\n        x, y = map(int, input().split())\n        checkpoints.append((x, y))\n\n    result = []\n    for i in range(N):\n        student = students[i]\n        nearest_checkpoint = None\n        min_distance = float('inf')\n\n        for j in range(M):\n            checkpoint = checkpoints[j]\n            distance = abs(student[0] - checkpoint[0]) + abs(student[1] - checkpoint[1])\n\n            if distance < min_distance:\n                min_distance = distance\n                nearest_checkpoint = j + 1\n\n        result.append(nearest_checkpoint)\n\n    return \"\\n\".join(map(str, result))"
    },
    {
        "number": 4354,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    N, M = map(int, stdin.split(\"\\n\")[0].split())\n    students = [list(map(int, line.split())) for line in stdin.split(\"\\n\")[1:N+1]]\n    checkpoints = [list(map(int, line.split())) for line in stdin.split(\"\\n\")[N+1:]]\n\n    # Calculate Manhattan distance for each student to each checkpoint\n    distances = []\n    for i in range(N):\n        student = students[i]\n        distance_row = []\n        for j in range(M):\n            checkpoint = checkpoints[j]\n            distance = abs(student[0] - checkpoint[0]) + abs(student[1] - checkpoint[1])\n            distance_row.append((distance, j))\n        distances.append(distance_row)\n\n    # Find the nearest checkpoint for each student\n    checkpoint_indices = []\n    for distance_row in distances:\n        checkpoint_indices.append(sorted(distance_row)[0][1])\n\n    # Print the result\n    for index in checkpoint_indices:\n        print(index + 1)"
    },
    {
        "number": 4354,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    students = [tuple(map(int, line.split())) for line in stdin.split(\"\\n\")[2:-1][:N]]\n    checkpoints = [tuple(map(int, line.split())) for line in stdin.split(\"\\n\")[2:-1][N:]]\n\n    result = []\n    for student in students:\n        distances = [(checkpoint, abs(student[0] - checkpoint[0]) + abs(student[1] - checkpoint[1])) for checkpoint in checkpoints]\n        result.append(min(distances, key=lambda x: x[1])[0])\n\n    return \"\\n\".join(map(lambda x: str(checkpoints.index(x) + 1), result))"
    },
    {
        "number": 4354,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, M = map(int, next(stdin).split())\n    students = [tuple(map(int, next(stdin).split())) for _ in range(N)]\n    checkpoints = [tuple(map(int, next(stdin).split())) for _ in range(M)]\n\n    # Calculate Manhattan distances for each student\n    manhattan_distances = [[abs(s_x - c_x) + abs(s_y - c_y) for c_x, c_y in checkpoints] for s_x, s_y in students]\n\n    # Choose the nearest checkpoint for each student\n    checkpoint_indices = [min(range(M), key=lambda j: manhattan_distances[i][j]) + 1 for i in range(N)]\n\n    return \"\\n\".join(map(str, checkpoint_indices))\n"
    },
    {
        "number": 4354,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split('\\n')[0].split())\n    students = [list(map(int, line.split())) for line in stdin.split('\\n')[1:N+1]]\n    checkpoints = [list(map(int, line.split())) for line in stdin.split('\\n')[N+1:N+M+1]]\n\n    def manhattan_distance(a, b):\n        return abs(a[0] - b[0]) + abs(a[1] - b[1])\n\n    result = []\n    for i in range(N):\n        student = students[i]\n        checkpoint_distances = [(j, manhattan_distance(student, checkpoint)) for j, checkpoint in enumerate(checkpoints, start=1)]\n        checkpoint_distances.sort(key=lambda x: (x[1], x[0]))\n        result.append(checkpoint_distances[0][0])\n\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 4354,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.readline().split())\n    students = [tuple(map(int, stdin.readline().split())) for _ in range(N)]\n    checkpoints = [tuple(map(int, stdin.readline().split())) for _ in range(M)]\n\n    result = []\n    for student in students:\n        manhattan_distances = [abs(student[0] - checkpoint[0]) + abs(student[1] - checkpoint[1]) for checkpoint in checkpoints]\n        min_distance = min(manhattan_distances)\n        result.append(manhattan_distances.index(min_distance) + 1)\n\n    return \"\\n\".join(map(str, result))\n\n\ninput_str = \"\"\"2 2\n2 0\n0 0\n-1 0\n1 0\"\"\"\nprint(solution(input_str)) "
    },
    {
        "number": 4354,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[0:2])\n    students = []\n    checkpoints = []\n    for i in range(N):\n        x, y = map(int, stdin.split()[2*(i+1):2*(i+2)])\n        students.append((x, y))\n    for j in range(M):\n        x, y = map(int, stdin.split()[2*(N+j+1):2*(N+j+2)])\n        checkpoints.append((x, y))\n\n    def manhattan_distance(point1, point2):\n        return abs(point1[0] - point2[0]) + abs(point1[1] - point2[1])\n\n    output = []\n    for student in students:\n        min_distance = float('inf')\n        min_checkpoint = 0\n        for j, checkpoint in enumerate(checkpoints):\n            distance = manhattan_distance(student, checkpoint)\n            if distance < min_distance:\n                min_distance = distance\n                min_checkpoint = j + 1\n        output.append(min_checkpoint)\n\n    return '\\n'.join(map(str, output))\n"
    },
    {
        "number": 4354,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def distance(point1: tuple, point2: tuple) -> int:\n        return abs(point1[0] - point2[0]) + abs(point1[1] - point2[1])\n\n    input_lines = stdin.split('\\n')\n    N, M = map(int, input_lines[0].split())\n\n    students = []\n    for i in range(1, N + 1):\n        x, y = map(int, input_lines[i].split())\n        students.append((x, y))\n\n    checkpoints = []\n    for i in range(N + 1, N + M + 1):\n        x, y = map(int, input_lines[i].split())\n        checkpoints.append((x, y))\n\n    output = []\n    for student in students:\n        nearest_checkpoint = None\n        nearest_distance = float('inf')\n        for index, checkpoint in enumerate(checkpoints, 1):\n            current_distance = distance(student, checkpoint)\n            if current_distance < nearest_distance:\n                nearest_checkpoint = index\n                nearest_distance = current_distance\n        output.append(str(nearest_checkpoint))\n\n    return '\\n'.join(output)"
    },
    {
        "number": 4355,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    result = a + a**2 + a**3\n    return str(result)\n\ninput_str = input()\nresult = solution(input_str)\nprint(result) "
    },
    {
        "number": 4355,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    result = a + a**2 + a**3\n    return str(result)"
    },
    {
        "number": 4355,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    result = a + a**2 + a**3\n    return str(result)\n\ninput_string = input()\noutput_string = solution(input_string)\nprint(output_string) "
    },
    {
        "number": 4355,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    result = a + a**2 + a**3\n    return str(result)"
    },
    {
        "number": 4355,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    result = a + a**2 + a**3\n    return str(result)"
    },
    {
        "number": 4355,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    result = a + a ** 2 + a ** 3\n    return str(result)"
    },
    {
        "number": 4355,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    result = a + a**2 + a**3\n    return str(result)"
    },
    {
        "number": 4355,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    result = a + a**2 + a**3\n    return str(result)"
    },
    {
        "number": 4355,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    result = a + a**2 + a**3\n    return str(result)"
    },
    {
        "number": 4355,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    result = a + a**2 + a**3\n    return str(result)"
    },
    {
        "number": 4356,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def check_containment(image, template):\n        for i in range(len(image) - len(template) + 1):\n            for j in range(len(image[0]) - len(template[0]) + 1):\n                if all(image[x][y] == template[x - i][y - j] for x in range(i, i + len(template)) for y in range(j, j + len(template[0]))):\n                    return \"Yes\"\n        return \"No\"\n\n    lines = stdin.strip().split('\\n')\n    image = [line.strip() for line in lines[2:2 + int(lines[0])]]\n    template = [line.strip() for line in lines[-int(lines[1]):]]\n\n    return check_containment(image, template)\n\ndef"
    },
    {
        "number": 4356,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.readline().split()))\n    A = stdin.readlines()[:N]\n    B = stdin.readlines()[N+1:]\n    found = False\n    \n    for i in range(N-M+1):\n        for j in range(N-M+1):\n            if all(A[i+k][j:j+M] == B[k] for k in range(M)):\n                found = True\n                break\n        if found:\n            break\n    \n    return \"Yes\" if found else \"No\""
    },
    {
        "number": 4356,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, M, A, B = parse_input(stdin)\n\n    # Check if template B is in image A\n    is_contained = False\n    for i in range(N - M + 1):\n        for j in range(N - M + 1):\n            if check_subimage(A, B, i, j, N, M):\n                is_contained = True\n                break\n        if is_contained:\n            break\n\n    # Return output\n    return \"Yes\" if is_contained else \"No\"\n\ndef"
    },
    {
        "number": 4356,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def rotate(image: List[str], k: int) -> List[str]:\n        return image[-k:] + image[:-k]\n\n    def contains(image: List[str], pattern: List[str]) -> bool:\n        for i in range(len(image) - len(pattern) + 1):\n            for j in range(len(image[0]) - len(pattern[0]) + 1):\n                if all(pattern[k][j] == image[i + k][j] for k in range(len(pattern))):\n                    return True\n        return False\n\n    lines = stdin.split(\"\\n\")\n    n, m = map(int, lines[0].split())\n    image = lines[1:n+1]\n    pattern = lines[n+1:n+m+1]\n\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if contains(image, pattern):\n                return \"Yes\"\n            image = rotate(image, 1)\n\n    return \"No\""
    },
    {
        "number": 4356,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.readline().split())\n    A = [list(stdin.readline().strip()) for _ in range(N)]\n    B = [list(stdin.readline().strip()) for _ in range(M)]\n    \n    for i in range(N - M + 1):\n        for j in range(N - M + 1):\n            if all(A[x][y] == B[k][l] for k, x in enumerate(range(i, i + M)) for l, y in enumerate(range(j, j + M))):\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4356,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    A = stdin.split('\\n')[1:N+1]\n    B = stdin.split('\\n')[N+2:N+M+2]\n\n    for i in range(N-M+1):\n        for j in range(N-M+1):\n            for k in range(M):\n                if A[i+k][j:j+M] != B[k]:\n                    break\n            else:\n                return \"Yes\"\n    return \"No\"\n\ndef"
    },
    {
        "number": 4356,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, M = map(int, stdin.readline().split())\n    A = [stdin.readline().strip() for _ in range(N)]\n    B = [stdin.readline().strip() for _ in range(M)]\n\n    # Check if B is contained in A\n    for i in range(N - M + 1):\n        for j in range(N - M + 1):\n            if all(A[x][y] == B[x - i][y - j] for x in range(i, i + M) for y in range(j, j + M)):\n                return \"Yes\"\n\n    return \"No\""
    },
    {
        "number": 4356,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[0:2])\n    A = stdin.split(\"\\n\")[2:N+2]\n    B = stdin.split(\"\\n\")[2+N+1:2+N+1+M]\n\n    for i in range(N-M+1):\n        for j in range(N-M+1):\n            found = True\n            for k in range(M):\n                if B[k][0] == \"#\" and A[i+k][j+k] == \"#\":\n                    continue\n                elif B[k][0] == \".\" and A[i+k][j+k] == \".\":\n                    continue\n                else:\n                    found = False\n                    break\n            if found:\n                return \"Yes\"\n\n    return \"No\"\n\n\ninput_str = \"\"\"3 2\n"
    },
    {
        "number": 4356,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def get_image(input_str: str) -> List[List[str]]:\n        rows = input_str.strip().split(\"\\n\")\n        return [[pixel for pixel in row.strip()] for row in rows]\n    \n    def shift_image(image: List[List[str]], row_shift: int, col_shift: int) -> List[List[str]]:\n        shifted_image = [[None] * len(image[0]) for _ in range(len(image))]\n        for i in range(len(image)):\n            for j in range(len(image[0])):\n                new_i = (i + row_shift) % len(image)\n                new_j = (j + col_shift) % len(image[0])\n                shifted_image[new_i][new_j] = image[i][j]\n        return shifted_image\n    \n    def is_subimage(template: List[List[str]], image: List[List[str]]) -> bool:\n        for i in range(len(image) - len(template) + 1):\n            for j in range(len(image[0]) - len(template[0]) + 1):\n                for ti in range(len(template)):\n                    for tj in range(len(template[0])):\n                        if template[ti][tj] == \"#\" and image[i + ti][j + tj] == \".\":\n                            break\n                    else:\n                        continue\n                    break\n                else:\n                    return True\n        return False\n    \n    N, M = map(int, stdin.splitlines()[0].split())\n    A = get_image(stdin.split(\"\\n\", 2)[1])\n    B = get_image(stdin.split(\"\\n\", 2)[2])\n    \n    for i in range(-M + 1, N - M + 1):\n        for j in range(-M + 1, N - M + 1):\n            shifted_A = shift_image(A, i, j)\n            if is_subimage(B, shifted_A):\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4356,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N, M = map(int, lines[0].split())\n    A = [lines[i+1] for i in range(N)]\n    B = [lines[N+i+2] for i in range(M)]\n    \n    for i in range(N - M + 1):\n        for j in range(N - M + 1):\n            found = True\n            for k in range(M):\n                if B[k] != A[i+k][j:j+M]:\n                    found = False\n                    break\n            if found:\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4357,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    max_allowance = -1\n\n    for i in range(1, 9):\n        for j in range(1, 9):\n            for k in range(1, 9):\n                for l in range(1, 9):\n                    if i != A and j != B and k != C and l != A and l != B and l != C:\n                        formula = f\"{i}+{j}+{k}+{l}\"\n                        allowance = eval(formula)\n                        max_allowance = max(max_allowance, allowance)\n\n    return str(max_allowance)"
    },
    {
        "number": 4357,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    max_allowance = -1\n\n    for i in range(1, 10):\n        for j in range(1, 10):\n            for k in range(1, 10):\n                for l in range(1, 10):\n                    for m in range(1, 10):\n                        for n in range(1, 10):\n                            if i != A and i != B and i != C and j != A and j != B and j != C and k != A and k != B and k != C and l != A and l != B and l != C:\n                                allowance = i + j\n                                if allowance > max_allowance:\n                                    max_allowance = allowance\n\n    return str(max_allowance)\n\ndef"
    },
    {
        "number": 4357,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    max_allowance = 0\n\n    for a in range(1, 10):\n        for b in range(1, 10):\n            for c in range(1, 10):\n                for o in ['+', '-', '*']:\n                    formula = f\"{a}{o}{b}{o}{c}\"\n                    if o == '+':\n                        allowance = eval(formula)\n                    else:\n                        allowance = -1\n                    if allowance > max_allowance and all(str(i) in formula for i in [A, B, C]):\n                        max_allowance = allowance\n\n    return str(max_allowance)"
    },
    {
        "number": 4357,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    max_value = max(A + B, B + C, C + A)\n    return str(max_value)"
    },
    {
        "number": 4357,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    max_allowance = 0\n\n    for i in range(1, 10):\n        for j in range(1, 10):\n            for k in range(1, 10):\n                for l in range(1, 10):\n                    for m in range(1, 10):\n                        if i != A and j != B and k != C and l != A and m != B:\n                            allowance = (i + j) * k + l + m\n                            if allowance > max_allowance:\n                                max_allowance = allowance\n\n    return str(max_allowance)\n\ndef"
    },
    {
        "number": 4357,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    \n    # Since the operator panel can't be placed at either end of the formula, we can only place it between two integer panels.\n    # We can then calculate the two possible formulas by adding the values from both sides of the operator panel.\n    formula1 = A + B + C\n    formula2 = A + B * C\n    \n    # We return the maximum of the two formulas as the maximum allowance.\n    return str(max(formula1, formula2))"
    },
    {
        "number": 4357,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    max_amount = 0\n\n    for i in range(1, 10):\n        for j in range(1, 10):\n            for k in range(1, 10):\n                if i == A or i == B or i == C or j == A or j == B or j == C or k == A or k == B or k == C:\n                    continue\n                if i == j or i == k or j == k:\n                    continue\n                amount = i + j + k\n                max_amount = max(max_amount, amount)\n\n    return str(max_amount)"
    },
    {
        "number": 4357,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    max_allowance = 0\n    \n    for i in range(1, 10):\n        for j in range(1, 10):\n            for k in range(1, 10):\n                if i != A and i != B and i != C and j != A and j != B and j != C and k != A and k != B and k != C:\n                    allowance = i + j\n                    if allowance > max_allowance:\n                        max_allowance = allowance\n                        \n    return str(max_allowance)"
    },
    {
        "number": 4357,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    max_allowance = 0\n\n    for i in range(1, 9):\n        for j in range(1, 9):\n            for k in range(1, 9):\n                if i != A and i != B and i != C and j != A and j != B and j != C and k != A and k != B and k != C:\n                    allowance = i + j\n                    if allowance > max_allowance:\n                        max_allowance = allowance\n\n    return str(max_allowance)"
    },
    {
        "number": 4357,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    max_allowance = 0\n\n    for i in range(1, 10):\n        for j in range(1, 10):\n            for k in range(1, 10):\n                for l in range(1, 10):\n                    for m in range(1, 10):\n                        for n in range(1, 10):\n                            if i != a and j != a and k != a and l != a and \\\n                               j != b and k != b and l != b and m != b and \\\n                               i != c and k != c and l != c and m != c and n != c:\n                                formula = f\"({j}{k}{l})+{i}{m}{n}\"\n                                allowance = eval(formula)\n                                max_allowance = max(max_allowance, allowance)\n\n    return str(max_allowance)\n\ndef"
    },
    {
        "number": 4358,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.splitlines()[0])\n    prices = [int(p) for p in stdin.splitlines()[1:]]\n    \n    highest_price = max(prices)\n    total_amount = 0\n    \n    for price in prices:\n        if price == highest_price:\n            total_amount += highest_price / 2\n        else:\n            total_amount += price\n            \n    return str(int(total_amount))\n\ndef"
    },
    {
        "number": 4358,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    items = [int(x) for x in stdin.split()]\n    N = items[0]\n    p = items[1:]\n\n    p.sort(reverse=True)\n    total = 0\n    for i in range(N):\n        if i == N - 1:\n            total += p[i]\n        else:\n            total += p[i] * 2\n\n    return str(int(total))\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4358,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    prices = list(map(int, stdin.split()[1:]))\n    max_price = max(prices)\n    prices.remove(max_price)\n    total = max_price / 2 + sum(prices)\n    return str(int(total))"
    },
    {
        "number": 4358,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    items = list(map(int, stdin.split()[1:]))\n    \n    max_price = max(items)\n    items.remove(max_price)\n    \n    total_price = sum(items) + max_price / 2\n    \n    return str(int(total_price))"
    },
    {
        "number": 4358,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, *prices = map(int, stdin.split())\n    max_price = max(prices)\n    total = sum(prices) - max_price + max_price / 2\n    return str(int(total))  # Truncate the decimal part if any"
    },
    {
        "number": 4358,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, *prices = map(int, stdin.split())\n    highest_price_item = max(prices)\n    total_amount = sum(prices)\n    total_amount -= highest_price_item\n    total_amount += highest_price_item // 2\n    return str(total_amount)"
    },
    {
        "number": 4358,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    prices = [int(x) for x in lines[1:N+1]]\n    \n    prices.sort(reverse=True)\n    total = 0\n    for i in range(N):\n        if i == 0:\n            total += prices[i] / 2\n        else:\n            total += prices[i]\n    \n    return str(int(total))"
    },
    {
        "number": 4358,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    items = list(map(int, stdin.split()))\n    max_price = max(items)\n    total = sum(items) - max_price + max_price / 2\n    return str(int(total))\n\ndef"
    },
    {
        "number": 4358,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    prices = [int(p) for p in lines[1:]]\n\n    highest_price_item = max(prices)\n    regular_price_items = [p for p in prices if p != highest_price_item]\n\n    total_amount = sum(regular_price_items) + highest_price_item / 2\n\n    return str(int(total_amount))\n"
    },
    {
        "number": 4358,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *prices = map(int, stdin.split())\n    highest_price = max(prices)\n    total = sum(prices) - highest_price + highest_price / 2\n    return str(int(total))"
    },
    {
        "number": 4359,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E = map(int, stdin.split())\n    ABC_Don_time = 0\n    ARC_Curry_time = A * 60\n    AGC_Pasta_time = ARC_Curry_time + B * 60\n    ATC_Hanbagu_time = AGC_Pasta_time + C * 60\n    APC_Ramen_time = ATC_Hanbagu_time + D * 60\n    last_dish_time = APC_Ramen_time + E * 60\n    return last_dish_time\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4359,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E = map(int, stdin.split())\n    times = sorted([0, A, B, C, D, E, 120])\n    for i in range(len(times) - 1):\n        if times[i] % 10 == 0:\n            if times[i + 1] - times[i] > 10:\n                return str(times[i] + 10)\n    return str(times[-1] + 10)"
    },
    {
        "number": 4359,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E = map(int, stdin.split())\n    A += B\n    A += C\n    A += D\n    A += E\n    return A % 10 if A % 10 == 0 else 10 - (A % 10)\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4359,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E = map(int, stdin.split())\n    orders = [(0, 'ABC Don'), (A, 'ARC Curry'), (A+B, 'AGC Pasta'), (A+B+C, 'ATC Hanbagu'), (A+B+C+D, 'APC Ramen')]\n    last_order = max(orders, key=lambda x: x[0])\n    return last_order[0]\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4359,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E = map(int, stdin.split())\n    return max(A + B + C, D + E, A + B + C + D, A + B + C + E)"
    },
    {
        "number": 4359,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E = map(int, stdin.split())\n    order_time = 0\n    order_times = [0] * 5\n    for i in range(5):\n        if i == 4:\n            break\n        order_times[i] = order_time + [A, B, C, D][i]\n        order_time = order_times[i] + [A, B, C, D][i]\n    return str(max(order_times))"
    },
    {
        "number": 4359,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E = map(int, stdin.split())\n\n    # Calculate the time each dish takes to be delivered\n    delivery_times = [A, B, C, D, E]\n    for i in range(1, len(delivery_times)):\n        delivery_times[i] += delivery_times[i - 1]\n\n    # Find the time at which the last dish can be delivered\n    last_dish_time = delivery_times[-1]\n\n    # Find the closest multiple of 10\n    closest_multiple = 10\n    while closest_multiple < last_dish_time:\n        closest_multiple += 10\n\n    return closest_multiple"
    },
    {
        "number": 4359,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E = map(int, stdin.split())\n\n    max_time = 0\n    for dish_time in [A, B, C, D, E]:\n        max_time = (max_time // 10 + 1) * 10 + dish_time\n\n    return str(max_time)\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4359,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E = map(int, stdin.split())\n    return max(0, A + B + C + D + E - 5)\n\ninput_str = \"29\\n20\\n7\\n35\\n120\"\nprint(solution(input_str))  # Output: 215 "
    },
    {
        "number": 4359,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E = map(int, stdin.split())\n    time = 0\n    while time % 10 != 0:\n        time += 1\n    total_time = time + A + max(B, C) + max(D, E) + max(C, D, E)\n    return total_time"
    },
    {
        "number": 4360,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    A = list(map(int, stdin.split()[1:]))\n    A_inverses = [1/a for a in A]\n    sum_inverses = sum(A_inverses)\n    result = 1/sum_inverses\n    return f\"{result:.5f}\""
    },
    {
        "number": 4360,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = map(int, stdin.split())\n    if not (1 <= N <= 100 and all(1 <= A_i <= 1000 for A_i in A)):\n        return \"Invalid input\"\n    \n    A_inverses = [1/A_i for A_i in A]\n    sum_of_inverses = sum(A_inverses)\n    result = 1/sum_of_inverses\n    return f\"{result:.5f}\"\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4360,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = list(map(int, stdin.split()))\n    inverses = [1 / x for x in A]\n    total_inverse = sum(inverses)\n    return str(1 / total_inverse)"
    },
    {
        "number": 4360,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    A = list(map(int, stdin.split('\\n')[1].split()))\n\n    inverse_sum = 0\n    for a in A:\n        inverse_sum += 1 / a\n\n    result = 1 / inverse_sum\n    return f\"{result:.5f}\"\n\nstdin = \"2\\n10 30\"\nprint(solution(stdin)) "
    },
    {
        "number": 4360,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = map(int, stdin.split())\n    inverse_sum = sum(1/a for a in A)\n    result = 1/inverse_sum\n    return f\"{result:.5f}\""
    },
    {
        "number": 4360,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    A = [int(x) for x in stdin.split('\\n')[1].split()]\n    \n    inverses = [1/x for x in A]\n    total_inverse = sum(inverses)\n    \n    result = 1/total_inverse\n    \n    return str(round(result, 5))"
    },
    {
        "number": 4360,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, *A = map(int, stdin.split())\n\n    # Calculate the sum of inverses\n    sum_inverses = sum(1/a for a in A)\n\n    # Calculate the inverse of the sum of inverses\n    result = 1/sum_inverses\n\n    # Return the result as a string\n    return f\"{result:.5f}\""
    },
    {
        "number": 4360,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *nums = map(int, stdin.split())\n\n    # Calculate the sum of inverses\n    inverse_sum = sum(1 / num for num in nums)\n\n    # Calculate the result\n    result = 1 / inverse_sum\n\n    # Round the result to the specified precision\n    result = round(result, 5)\n\n    return str(result)"
    },
    {
        "number": 4360,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    A = [int(x) for x in stdin.split('\\n')[1].split()]\n    sum_inverses = sum(1/a for a in A)\n    result = 1/sum_inverses\n    return '{:.5f}'.format(result)\n\nstdin = \"2\\n10 30\"\nprint(solution(stdin)) "
    },
    {
        "number": 4360,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = list(map(int, stdin.split()))\n    A_inverse_sum = sum(1/a for a in A)\n    result = 1/A_inverse_sum\n    return f\"{result:.5f}\""
    },
    {
        "number": 4361,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[0:2])\n    heights = list(map(int, stdin.split()[2:]))\n\n    heights.sort()\n    min_height = heights[K - 1]\n    max_height = heights[-1]\n\n    return str(max_height - min_height)\n\nstdin = \"5 3\\n10\\n15\\n11\\n14\\n12\"\nprint(solution(stdin))  # Output: 2 "
    },
    {
        "number": 4361,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[:2])\n    heights = list(map(int, stdin.split()[2:]))\n\n    heights.sort()\n    height_differences = [heights[i] - heights[i - 1] for i in range(1, len(heights))]\n    height_differences.sort()\n\n    if len(height_differences) < K - 1:\n        return \"Impossible\"\n\n    return height_differences[K - 2]"
    },
    {
        "number": 4361,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[0:2])\n    heights = list(map(int, stdin.split()[2:]))\n\n    # sort the heights in ascending order\n    heights.sort()\n\n    # calculate the minimum possible difference\n    min_diff = heights[K-1] - heights[0]\n\n    return str(min_diff)"
    },
    {
        "number": 4361,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[:2])\n    heights = list(map(int, stdin.split()[2:]))\n\n    heights.sort()\n    h_min = heights[0]\n    h_max = heights[-1]\n\n    for i in range(N - K + 1):\n        h_min = min(h_min, heights[i])\n        h_max = max(h_max, heights[i + K - 1])\n\n    return h_max - h_min"
    },
    {
        "number": 4361,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    N, K = map(int, stdin.split()[:2])\n    heights = list(map(int, stdin.split()[2:]))\n\n    # Sort the heights in ascending order\n    heights.sort()\n\n    # Choose K trees with the smallest height difference\n    min_diff = heights[-1] - heights[0]\n    for i in range(N - K + 1):\n        diff = heights[i + K - 1] - heights[i]\n        if diff < min_diff:\n            min_diff = diff\n\n    return str(min_diff)"
    },
    {
        "number": 4361,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[0:2])\n    heights = list(map(int, stdin.split()[2:]))\n    heights.sort()\n    min_diff = heights[-1] - heights[0]\n    for i in range(N-K+1):\n        diff = heights[i+K-1] - heights[i]\n        if diff < min_diff:\n            min_diff = diff\n    return str(min_diff)"
    },
    {
        "number": 4361,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[0:2])\n    h = list(map(int, stdin.split()[2:]))\n    h.sort()\n    return str(h[-K] - h[-N])"
    },
    {
        "number": 4361,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[:2])\n    heights = sorted(list(map(int, stdin.split()[2:])))\n\n    if K == N:\n        return 0\n\n    if K == 1:\n        return heights[0]\n\n    min_height = heights[0]\n    max_height = heights[-1]\n\n    while K > 1:\n        mid_index = len(heights) // 2\n        mid_height = heights[mid_index]\n        left_heights = heights[:mid_index]\n        right_heights = heights[mid_index + 1:]\n\n        if len(left_heights) >= K - 1 and len(right_heights) >= K - 1:\n            min_height = min(mid_height, min(left_heights[-(K - 1):] + right_heights[:K - 1]))\n            max_height = max(mid_height, max(left_heights[-(K - 1):] + right_heights[:K - 1]))\n            break\n        elif len(left_heights) >= K - 1:\n            heights = left_heights\n        else:\n            heights = right_heights\n\n    return max_height - min_height\n\ndef"
    },
    {
        "number": 4361,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[0:2])\n    heights = list(map(int, stdin.split()[2:]))\n    heights.sort()\n\n    if K >= N:\n        return \"0\"\n\n    min_diff = heights[-1] - heights[0]\n    for i in range(N - K + 1):\n        diff = heights[i + K - 1] - heights[i]\n        if diff < min_diff:\n            min_diff = diff\n\n    return str(min_diff)\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4361,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from standard input\n    lines = stdin.split('\\n')\n    N, K = map(int, lines[0].split())\n    heights = list(map(int, lines[1:]))\n\n    # Sort the heights in ascending order\n    heights.sort()\n\n    # Initialize variables for min and max heights\n    min_height = float('inf')\n    max_height = float('-inf')\n\n    # Iterate through the heights and update the min and max heights\n    for height in heights[:K]:\n        min_height = min(min_height, height)\n        max_height = max(max_height, height)\n\n    # Calculate the result and return it\n    return str(max_height - min_height)"
    },
    {
        "number": 4362,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.isupper():\n        return \"A\"\n    else:\n        return \"a\""
    },
    {
        "number": 4362,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.isupper():\n        return 'A'\n    elif stdin.islower():\n        return 'a'\n    else:\n        raise ValueError(\"Input must be an uppercase or lowercase English letter.\")"
    },
    {
        "number": 4362,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.islower():\n        return \"a\"\n    elif stdin.isupper():\n        return \"A\"\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 4362,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function takes a single character as input and returns 'a' if it is lowercase and 'A' if it is uppercase.\n    \"\"\"\n    if stdin.isupper():\n        return 'A'\n    else:\n        return 'a'"
    },
    {
        "number": 4362,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.isupper():\n        return \"A\"\n    else:\n        return \"a\""
    },
    {
        "number": 4362,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.isupper():\n        return \"A\"\n    else:\n        return \"a\"\n\ninput_str = input(\"Enter a letter: \")\noutput_str = solution(input_str)\nprint(output_str) "
    },
    {
        "number": 4362,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.isupper():\n        return 'A'\n    else:\n        return 'a'"
    },
    {
        "number": 4362,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.isupper():\n        return 'A'\n    else:\n        return 'a'"
    },
    {
        "number": 4362,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.isupper():\n        return 'A'\n    else:\n        return 'a'"
    },
    {
        "number": 4362,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.isupper():\n        return 'A'\n    else:\n        return 'a'"
    },
    {
        "number": 4363,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K, S = map(int, stdin.split())\n    count = 0\n\n    for i in range(K + 1):\n        for j in range(K + 1):\n            k = S - i - j\n            if 0 <= k <= K:\n                count += 1\n\n    return str(count)"
    },
    {
        "number": 4363,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    K, S = map(int, stdin.split())\n    count = 0\n\n    for x in range(K + 1):\n        for y in range(K + 1 - x):\n            z = K - x - y\n            if x + y + z == S:\n                count += 1\n\n    return str(count)"
    },
    {
        "number": 4363,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    K, S = [int(x) for x in stdin.split()]\n    count = 0\n    \n    for X in range(K+1):\n        for Y in range(K+1):\n            Z = S - X - Y\n            if 0 <= Z <= K:\n                count += 1\n                \n    return str(count)"
    },
    {
        "number": 4363,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    K, S = map(int, stdin.split())\n    count = 0\n    \n    for X in range(K+1):\n        for Y in range(K+1):\n            Z = S - X - Y\n            if Z >= 0 and Z <= K:\n                count += 1\n    \n    return str(count)"
    },
    {
        "number": 4363,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    K, S = map(int, stdin.split())\n    count = 0\n    for X in range(K + 1):\n        for Y in range(K + 1):\n            Z = S - X - Y\n            if 0 <= Z <= K:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4363,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    K, S = map(int, stdin.split())\n    count = 0\n\n    for X in range(K+1):\n        for Y in range(K+1):\n            if X + Y > S:\n                break\n            Z = S - X - Y\n            if 0 <= Z <= K:\n                count += 1\n\n    return str(count)"
    },
    {
        "number": 4363,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    K, S = map(int, stdin.strip().split())\n    count = 0\n    \n    # Iterate through all possible values of X\n    for X in range(K+1):\n        # Calculate the remaining sum (S - X) and the remaining allowed range (K - X)\n        remaining_sum = S - X\n        remaining_range = K - X\n        \n        # Iterate through all possible values of Y that are within the allowed range\n        for Y in range(remaining_range+1):\n            # Calculate the value of Z that would satisfy the condition\n            Z = remaining_sum - Y\n            \n            # Check if the values of X, Y, and Z satisfy the condition\n            if 0 <= X <= K and 0 <= Y <= K and 0 <= Z <= K:\n                count += 1\n    \n    return str(count)"
    },
    {
        "number": 4363,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    K, S = map(int, stdin.split())\n    count = 0\n    for X in range(S + 1):\n        for Y in range(S + 1):\n            Z = S - X - Y\n            if 0 <= X <= K and 0 <= Y <= K and 0 <= Z <= K:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4363,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    K, S = map(int, stdin.split())\n    count = 0\n\n    for X in range(K + 1):\n        for Y in range(K + 1):\n            Z = S - X - Y\n            if 0 <= Z <= K:\n                count += 1\n\n    return str(count)\n\ndef"
    },
    {
        "number": 4363,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    K, S = map(int, stdin.split())\n\n    count = 0\n    for X in range(K + 1):\n        for Y in range(K + 1):\n            for Z in range(K + 1):\n                if X + Y + Z == S:\n                    count += 1\n\n    return str(count)"
    },
    {
        "number": 4364,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    if not stdin.isdigit() or len(stdin) != 4:\n        return \"NA\"\n\n    year = int(stdin[:2])\n    month = int(stdin[2:])\n\n    if year < 10:\n        year += 2000\n    elif year < 30:\n        year += 1900\n\n    if 1 <= month <= 12:\n        return \"YYMM\"\n    elif 1 <= month <= 12:\n        return \"MMYY\"\n    else:\n        return \"NA\""
    },
    {
        "number": 4364,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s) != 4:\n        return \"NA\"\n    \n    year = int(s[:2])\n    month = int(s[2:])\n    \n    if 0 < month <= 12:\n        if year % 100 == 0:\n            if year >= 0 and year <= 99:\n                return \"YYMM\"\n            else:\n                return \"NA\"\n        else:\n            if year >= 1000:\n                return \"NA\"\n            else:\n                return \"MMYY\"\n    else:\n        return \"NA\"\n\ninput_str = input(\"Enter a 4 digit sequence S: \")\nresult = solution(input_str)\nprint(result) "
    },
    {
        "number": 4364,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    if len(S) != 4:\n        return \"NA\"\n\n    year = int(S[:2])\n    month = int(S[2:])\n\n    if (year >= 0 and year <= 99) and (month >= 1 and month <= 12):\n        if (year > 49 and year <= 99) and (month >= 1 and month <= 9):\n            return \"AMBIGUOUS\"\n        elif (year <= 49) and (month >= 10):\n            return \"AMBIGUOUS\"\n        elif (year > 49) and (month < 10):\n            return \"MMYY\"\n        else:\n            return \"YYMM\"\n    else:\n        return \"NA\"\n\ninput_str = input()\noutput_str = solution(input_str)\nprint(output_str) "
    },
    {
        "number": 4364,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    if not stdin.isdigit() or len(stdin) != 4:\n        return \"NA\"\n\n    year = int(stdin[:2])\n    month = int(stdin[2:])\n\n    if 1 <= month <= 12 and 0 <= year <= 99:\n        if month <= 12 - month:\n            return f\"YY{stdin}\"\n        else:\n            return f\"MM{stdin}\"\n    else:\n        return \"NA\"\n\ndef"
    },
    {
        "number": 4364,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if len(s) != 4:\n        return \"NA\"\n\n    year = int(s[:2])\n    month = int(s[2:])\n\n    if 0 < month <= 12:\n        if year < 100:\n            if year >= 69 and year <= 99:\n                year += 1900\n            else:\n                year += 2000\n        if year < 1000:\n            year += 1000\n        if 1 <= year <= 9999:\n            return \"YYMM\"\n\n    if 0 < year <= 12:\n        if month < 10:\n            s = \"0\" + str(month) + str(year)\n        else:\n            s = str(month) + str(year)\n        if int(s) <= 1299:\n            return \"MMYY\"\n\n    return \"NA\""
    },
    {
        "number": 4364,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    year = int(s[0:2])\n    month = int(s[2:4])\n\n    if year > 99:\n        # Valid in YYMM format\n        if month <= 12:\n            return \"YYMM\"\n    elif month > 99:\n        # Valid in MMYY format\n        if month <= 12:\n            return \"MMYY\"\n    else:\n        return \"NA\""
    },
    {
        "number": 4364,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) != 4:\n        return \"NA\"\n\n    year = int(stdin[:2])\n    month = int(stdin[2:])\n\n    if 1 <= month <= 12:\n        if 0 <= year <= 99:\n            return \"YYMM\"\n    else:\n        if 0 <= year <= 99:\n            return \"MMYY\"\n\n    return \"AMBIGUOUS\""
    },
    {
        "number": 4364,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    \n    if len(s) != 4:\n        return \"NA\"\n    \n    year = int(s[:2])\n    month = int(s[2:])\n    \n    if year < 10:\n        year += 2000\n    elif year < 30:\n        year += 1900\n    else:\n        year += 2000\n    \n    if not 1 <= year <= 9999 or not 1 <= month <= 12:\n        return \"NA\"\n    \n    if 100 * year + month < 10100:\n        return \"AMBIGUOUS\"\n    \n    if 100 * year + month > 1200:\n        return \"MMYY\"\n    \n    return \"YYMM\" "
    },
    {
        "number": 4364,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n\n    if 1900 <= int(S[:2]) <= 2099 and 1 <= int(S[2:]) <= 12:\n        return \"YYMM\"\n    elif 1 <= int(S[:2]) <= 12 and 1900 <= int(S[2:]) <= 2099:\n        return \"MMYY\"\n    elif 1 <= int(S[:2]) <= 12 and 1 <= int(S[2:]) <= 12:\n        return \"AMBIGUOUS\"\n    else:\n        return \"NA\"\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4364,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n\n    if len(S) != 4:\n        return \"NA\"\n\n    if int(S[:2]) > 12:\n        year = int(S[2:])\n        month = int(S[:2])\n    elif int(S[2:]) > 12:\n        year = int(S[:2])\n        month = int(S[2:])\n    else:\n        return \"NA\"\n\n    if year < 1000:\n        year += 2000\n\n    if 1 <= month <= 12 and 1900 <= year <= 2099:\n        if year % 100 == int(S[:2]):\n            if month == int(S[2:]):\n                return \"YYMM\"\n            elif month == int(S[2:]):\n                return \"MMYY\"\n        else:\n            return \"AMBIGUOUS\"\n    else:\n        return \"NA\""
    },
    {
        "number": 4365,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.strip())\n    count = 0\n    for i in range(1, K+1, 2):\n        for j in range(2, K+1, 2):\n            count += 1\n    return str(count)\n\ninput_str = input()\nresult = solution(input_str)\nprint(result) "
    },
    {
        "number": 4365,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    count = 0\n    for i in range(1, k+1):\n        for j in range(i+1, k+1):\n            if (i % 2 == 0) != (j % 2 == 0):\n                count += 1\n    return str(count)"
    },
    {
        "number": 4365,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    count = 0\n\n    for i in range(1, K+1):\n        if i % 2 == 0:\n            for j in range(i+1, K+1):\n                if j % 2 != 0:\n                    count += 1\n\n    return str(count)\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4365,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    count = 0\n    for i in range(2, K+1, 2):\n        for j in range(1, K+1, 2):\n            if i != j:\n                count += 1\n    return str(count)\n\ndef"
    },
    {
        "number": 4365,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    count = 0\n\n    for even in range(2, K+1, 2):\n        for odd in range(1, K+1, 2):\n            if even != odd:\n                count += 1\n\n    return str(count)"
    },
    {
        "number": 4365,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    even_numbers = list(filter(lambda x: x % 2 == 0, range(1, K+1)))\n    odd_numbers = list(filter(lambda x: x % 2 != 0, range(1, K+1)))\n    return str(len(even_numbers) * len(odd_numbers))"
    },
    {
        "number": 4365,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    count = 0\n\n    for i in range(2, k, 2):\n        count += k // 2\n\n    return str(count)\n\ndef"
    },
    {
        "number": 4365,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    even_count = k // 2\n    odd_count = (k + 1) // 2\n    result = (even_count * odd_count)\n    return str(result)"
    },
    {
        "number": 4365,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    if K % 2 == 0 or K < 2:\n        return \"0\"\n\n    result = 0\n    for i in range(1, K + 1, 2):\n        result += K - i\n\n    return str(result // 2)\n"
    },
    {
        "number": 4365,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    count = 0\n\n    for i in range(2, k + 1, 2):\n        count += k // 2 - i // 2\n\n    return str(count)"
    },
    {
        "number": 4366,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    A = int(input_list[0])\n    B = int(input_list[1])\n    \n    # calculate the time in 24-hour format\n    start_time = (A + B) % 24\n    \n    return str(start_time)"
    },
    {
        "number": 4366,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    start_hour = (a + b) % 24\n    return str(start_hour)"
    },
    {
        "number": 4366,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    start_time = A + B\n    if start_time > 23:\n        start_time -= 24\n    return str(start_time)"
    },
    {
        "number": 4366,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return f\"{(A + B) % 24}\""
    },
    {
        "number": 4366,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    start_hour = A + B\n    if start_hour >= 24:\n        start_hour -= 24\n    return str(start_hour)\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4366,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    A, B = map(int, stdin.split())\n\n    # Calculate the starting time in 24-hour time\n    start_time = (A + B) % 24\n\n    # Return the starting time in 24-hour time\n    return str(start_time)"
    },
    {
        "number": 4366,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    start_hour = A + B\n    if start_hour > 23:\n        start_hour -= 24\n    return str(start_hour)\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4366,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    current_time = A\n    contest_starts = current_time + B\n    contest_starts = contest_starts if contest_starts <= 23 else contest_starts - 24\n    return str(contest_starts) + \" o'clock\""
    },
    {
        "number": 4366,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    current_time = A\n    hours_to_add = B\n    new_time = (current_time + hours_to_add) % 24\n    return str(new_time)"
    },
    {
        "number": 4366,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    start_hour = (a + b) % 24\n    return str(start_hour)"
    },
    {
        "number": 4367,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    \n    inner_rating = 0\n    \n    if n >= 10:\n        inner_rating = r\n    else:\n        inner_rating = r + (100 * (10 - n))\n        \n    return str(inner_rating)\n\ndef"
    },
    {
        "number": 4367,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, R = map(int, stdin.split())\n    \n    if N >= 10:\n        return str(R)\n    else:\n        return str(R + 100 * (10 - N))\n    \n"
    },
    {
        "number": 4367,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    inner_rating = r + 100 * (10 - n) if n <= 10 else r\n    return str(inner_rating)"
    },
    {
        "number": 4367,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N, R = map(int, stdin.split())\n\n    # calculate inner rating\n    inner_rating = R\n    if N < 10:\n        inner_rating += 100 * (10 - N)\n\n    # return inner rating as string\n    return str(inner_rating)"
    },
    {
        "number": 4367,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, R = map(int, stdin.split())\n    \n    if N >= 10:\n        return str(R)\n    else:\n        inner_rating = R + 100 * (10 - N)\n        return str(inner_rating)"
    },
    {
        "number": 4367,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input string into two integers\n    N, R = map(int, stdin.split())\n    \n    # Calculate the Inner Rating\n    if N >= 10:\n        inner_rating = R\n    else:\n        inner_rating = R + (10 - N) * 100\n    \n    return str(inner_rating)"
    },
    {
        "number": 4367,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, R = map(int, stdin.split())\n\n    if N >= 10:\n        return str(R)\n\n    inner_rating = R + 100 * (10 - N)\n    return str(inner_rating)"
    },
    {
        "number": 4367,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, R = map(int, stdin.split())\n    inner_rating = R + max(0, (N - 10) * -100)\n    return str(inner_rating)"
    },
    {
        "number": 4367,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, R = map(int, stdin.split())\n    if N >= 10:\n        return str(R)\n    else:\n        return str(R + 100 * (10 - N))"
    },
    {
        "number": 4367,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, R = map(int, stdin.split())\n    if N >= 10:\n        return str(R)\n    else:\n        return str(R + 100 * (10 - N))"
    },
    {
        "number": 4368,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    count = 0\n    while N > 0:\n        N //= K\n        count += 1\n    return str(count)"
    },
    {
        "number": 4368,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    count = 0\n    while N > 0:\n        N //= K\n        count += 1\n    return str(count)"
    },
    {
        "number": 4368,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    num_digits = len(str(N))\n    base_K_digits = len(str(N)) // (K - 1)\n    if N == 0:\n        base_K_digits -= 1\n    return str(base_K_digits)\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4368,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.strip().split())\n    count = 0\n    while N > 0:\n        N //= K\n        count += 1\n    return str(count)"
    },
    {
        "number": 4368,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    digits = 0\n    while N > 0:\n        N //= K\n        digits += 1\n    return str(digits)\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4368,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    count = 0\n    while N > 0:\n        N //= K\n        count += 1\n    return str(count)\n\ndef"
    },
    {
        "number": 4368,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.strip().split())\n    num_digits = len(str(N))\n    return str(num_digits)"
    },
    {
        "number": 4368,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    digits = 0\n    while n > 0:\n        n //= k\n        digits += 1\n    return str(digits)"
    },
    {
        "number": 4368,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    count = 0\n    while N > 0:\n        N //= K\n        count += 1\n    return str(count)"
    },
    {
        "number": 4368,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    count = 0\n    while n > 0:\n        n //= k\n        count += 1\n    return str(count)"
    },
    {
        "number": 4369,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pages = int(stdin.strip())\n    if pages < 1 or pages > 100:\n        return \"Invalid input\"\n\n    sheets_required = pages // 4\n    if pages % 4 != 0:\n        sheets_required += 1\n\n    return str(sheets_required)"
    },
    {
        "number": 4369,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    pages = 0\n    while N > 0:\n        if N % 4 == 0:\n            pages += N // 4\n            break\n        elif N % 4 <= 2:\n            pages += 1\n            N -= 2\n        else:\n            pages += 2\n            N -= 4\n    return str(pages)"
    },
    {
        "number": 4369,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    sheets = (n + 1) // 4\n    return str(sheets)"
    },
    {
        "number": 4369,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    return str(n // 2 + 1)"
    },
    {
        "number": 4369,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 4 == 0:\n        return str(N // 4)\n    else:\n        return str(N // 4 + 1)"
    },
    {
        "number": 4369,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    num_sheets = n // 4\n    if n % 4 != 0:\n        num_sheets += 1\n    return str(num_sheets)"
    },
    {
        "number": 4369,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N % 2 == 0:\n        return str(N // 2)\n    else:\n        return str((N + 1) // 2)"
    },
    {
        "number": 4369,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    double_sided = 2\n    return str(n // double_sided + 1)"
    },
    {
        "number": 4369,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    num_sheets = (N + 1) // 2\n    return str(num_sheets)"
    },
    {
        "number": 4369,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 4 == 0:\n        return N // 4\n    else:\n        return (N // 4) + 1"
    },
    {
        "number": 4370,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == 1 or B == 1 or A + B == 16:\n        return \"Yay!\"\n    else:\n        return \":(\""
    },
    {
        "number": 4370,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if abs(a - b) > 1:\n        return \"Yay!\"\n    else:\n        return \":(\""
    },
    {
        "number": 4370,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.strip().split()))\n    if max(A, B) == 1:\n        return \"Yay!\"\n    elif A + B == 16:\n        return \"Yay!\"\n    elif A == 1 and B == 1:\n        return \"Yay!\"\n    else:\n        return \":(\""
    },
    {
        "number": 4370,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if max(A, B) + min(A, B) <= 16:\n        return \"Yay!\"\n    else:\n        return \":(\""
    },
    {
        "number": 4370,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == 1 and B == 16:\n        return \"Yay!\"\n    elif A == 1:\n        return \":(\"\n    elif B == 1:\n        return \":(\"\n    else:\n        return \"Yay!\""
    },
    {
        "number": 4370,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == 1:\n        return \":(\"\n    if A == B:\n        return \":(\"\n    if A > B:\n        A, B = B, A\n    if A + B == 16:\n        return \":(\"\n    return \"Yay!\"\n"
    },
    {
        "number": 4370,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    \n    if abs(A - B) <= 1:\n        return \"Yay!\"\n    else:\n        return \":(\""
    },
    {
        "number": 4370,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if (A == 1 and B == 15) or (A == 15 and B == 1):\n        return \"Yay!\"\n    else:\n        return \":(\""
    },
    {
        "number": 4370,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == 1 and b == 1:\n        return \":(\"\n    elif (a == 1 and b == 15) or (a == 15 and b == 1):\n        return \":(\"\n    else:\n        return \"Yay!\"\n\ninput_string = input()\nprint(solution(input_string)) "
    },
    {
        "number": 4370,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == 1 or B == 1:\n        return \":(\"\n    elif A == 15 or B == 15:\n        return \":(\"\n    elif A == 16 or B == 16:\n        return \":(\"\n    else:\n        return \"Yay!\""
    },
    {
        "number": 4371,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    min_diff = float('inf')\n    \n    for i in range(len(s) - 2):\n        num = int(s[i:i+3])\n        diff = abs(num - 753)\n        min_diff = min(min_diff, diff)\n    \n    return str(min_diff)"
    },
    {
        "number": 4371,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    min_diff = 10**10\n    for i in range(len(s) - 2):\n        num = int(s[i:i+3])\n        diff = abs(num - 753)\n        if diff < min_diff:\n            min_diff = diff\n    return str(min_diff)"
    },
    {
        "number": 4371,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    min_diff = float('inf')\n\n    for i in range(len(S) - 2):\n        num = int(S[i:i+3])\n        diff = abs(num - 753)\n        min_diff = min(min_diff, diff)\n\n    return str(min_diff)"
    },
    {
        "number": 4371,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    min_diff = float('inf')\n    for i in range(len(s) - 2):\n        x = int(s[i:i+3])\n        diff = abs(x - 753)\n        min_diff = min(min_diff, diff)\n    return str(min_diff)"
    },
    {
        "number": 4371,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    min_diff = float('inf')\n    \n    for i in range(len(s) - 2):\n        x = int(s[i:i+3])\n        diff = abs(x - 753)\n        if diff < min_diff:\n            min_diff = diff\n            \n    return str(min_diff)"
    },
    {
        "number": 4371,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    min_diff = float('inf')\n    \n    for i in range(len(S) - 2):\n        X = int(S[i:i+3])\n        diff = abs(753 - X)\n        min_diff = min(min_diff, diff)\n    \n    return str(min_diff)"
    },
    {
        "number": 4371,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    import itertools\n\n    S = stdin.strip()\n    target = 753\n    min_diff = float('inf')\n\n    for triplet in itertools.permutations(S, 3):\n        num = int(''.join(triplet))\n        diff = abs(num - target)\n        min_diff = min(min_diff, diff)\n\n    return str(min_diff)\n"
    },
    {
        "number": 4371,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    minimum_difference = float('inf')\n    \n    for i in range(len(S) - 2):\n        x = int(S[i:i+3])\n        difference = abs(x - 753)\n        minimum_difference = min(minimum_difference, difference)\n    \n    return str(minimum_difference)"
    },
    {
        "number": 4371,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    min_diff = float('inf')\n    for i in range(len(S) - 2):\n        X = int(S[i:i+3])\n        diff = abs(X - 753)\n        min_diff = min(min_diff, diff)\n    return str(min_diff)"
    },
    {
        "number": 4371,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    min_diff = float('inf')\n    for i in range(len(S) - 2):\n        curr_diff = abs(int(S[i:i+3]) - 753)\n        min_diff = min(min_diff, curr_diff)\n    return str(min_diff)"
    },
    {
        "number": 4372,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = stdin.split()\n    n = int(n)\n    a = [int(x) for x in a.split()]\n    z = 1\n    y = 1\n    while True:\n        total_swords = 0\n        for i in range(n):\n            total_swords += a[i] * z\n        if total_swords >= sum(a):\n            break\n        y += 1\n    return f\"{y} {z}\"\n\ndef"
    },
    {
        "number": 4372,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    min_people = None\n    min_swords = None\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] != a[j]:\n                min_people = min(a[i], a[j])\n                min_swords = min_people\n                break\n        if min_people is not None:\n            break\n\n    return f\"{min_people} {min_swords}\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, swords = stdin.split()\n    n = int(n)\n    a = list(map(int, swords.split()))\n\n    def is_valid(y, z):\n        total_swords = sum(a)\n        if total_swords % y != 0:\n            return False\n        swords_per_person = total_swords // y\n        if z * y != total_swords:\n            return False\n        for i in range(n):\n            if a[i] > z:\n                return False\n        return True\n\n    min_y = 1\n    min_z = a[0]\n    for z in range(1, a[0] + 1):\n        for y in range(2, n * z + 1):\n            if is_valid(y, z):\n                min_y = min(min_y, y)\n                min_z = max(min_z, z)\n\n    return f\"{min_y} {min_z}\"\n\ndef"
    },
    {
        "number": 4372,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a_str = stdin.split()\n    n = int(n)\n    a = list(map(int, a_str.split()))\n\n    max_swords = max(a)\n    y = max_swords\n    z = a.index(max_swords)\n\n    while True:\n        y -= 1\n        z = 0\n        for i in range(1, n):\n            if a[i] < a[i - 1]:\n                z = i\n                break\n\n        if a[z] > a[z - 1]:\n            break\n\n    return f\"{y} {z}\"\n\ndef"
    },
    {
        "number": 4372,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    min_people = 1\n    min_swords = max(a)\n\n    for people in range(1, len(a) + 1):\n        for swords in range(1, len(a) + 1):\n            if sum([x // swords for x in a]) >= people:\n                min_people = min(min_people, people)\n                min_swords = min(min_swords, swords)\n\n    return f\"{min_people} {min_swords}\""
    },
    {
        "number": 4372,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, swords = [int(x) for x in stdin.split()]\n    a = [int(x) for x in swords.split()]\n    \n    y = 0\n    z = 0\n    \n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if a[i-1] != a[j-1]:\n                x = a[i-1] // (a[j-1] - a[i-1])\n                z = a[j-1] - a[i-1]\n                y = x + 1\n                \n                break\n        else:\n            continue\n        break\n    \n    return f\"{y} {z}\""
    },
    {
        "number": 4372,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a = stdin.split()\n    n = int(n)\n    a = list(map(int, a.split()))\n    \n    # Count the number of swords for each type\n    swords_count = {}\n    for i in range(n):\n        if a[i] != 0:\n            swords_count[a[i]] = swords_count.get(a[i], 0) + 1\n    \n    # Find the minimum number of people who could have broken into the basement\n    y = min(swords_count.values())\n    \n    # Find the number of swords each of them has taken\n    min_swords = min(a)\n    z = min_swords // y\n    \n    return f\"{y} {z}\""
    },
    {
        "number": 4372,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    min_y = 10**9\n    min_z = 10**9\n    \n    for i in range(n):\n        for j in range(n):\n            if i != j and a[i] != 0 and a[j] != 0:\n                y = min(a[i], a[j])\n                z = max(a[i], a[j])\n                if y < min_y or (y == min_y and z < min_z):\n                    min_y = y\n                    min_z = z\n    \n    return str(min_y) + \" \" + str(min_z)"
    },
    {
        "number": 4372,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a = [int(x) for x in stdin.split()]\n    min_y = 10 ** 9\n    min_z = 10 ** 9\n    \n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            y = a[i] + a[j]\n            z = y // 2\n            if y > 0 and z < min_z:\n                min_y = y\n                min_z = z\n                \n    return f\"{min_y} {min_z}\"\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4372,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def find_min_people(n: int, a: list) -> int:\n        gcd_value = gcd(a[0], a[1])\n        for i in range(2, n):\n            gcd_value = gcd(gcd_value, a[i])\n\n        return int(sum(a) / gcd_value)\n\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    y = find_min_people(n, a)\n    z = sum(a) // y\n\n    return f\"{y} {z}\""
    },
    {
        "number": 4373,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, contests = stdin.split('\\n')\n    n = int(n)\n    contests = list(map(int, contests.split()))\n\n    days = 0\n    for i, contest_problems in enumerate(contests):\n        if contest_problems > days:\n            days = contest_problems\n            if days > n:\n                break\n\n    return str(days)"
    },
    {
        "number": 4373,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a.sort(reverse=True)\n    days = 0\n    i = 0\n    while i < n:\n        days += 1\n        for j in range(i, n):\n            if a[j] >= days:\n                i = j + 1\n                break\n        else:\n            break\n    return str(days - 1)"
    },
    {
        "number": 4373,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *a_i = map(int, stdin.split())\n    max_days = max(a_i)\n    \n    for i in range(1, max_days + 1):\n        if sum(1 for x in a_i if x >= i) >= i:\n            max_days = i\n        else:\n            break\n            \n    return str(max_days)"
    },
    {
        "number": 4373,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    max_days = 0\n    i = 0\n    while i < n:\n        k = 1\n        while i < n and a[i] < k:\n            i += 1\n            k += 1\n        if i >= n:\n            break\n        max_days = max(max_days, k)\n    return str(max_days)"
    },
    {
        "number": 4373,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, contests = stdin.split('\\n')\n    n = int(n)\n    contests = list(map(int, contests.split()))\n\n    max_days = 1\n    current_day = 1\n    solved_contests = set()\n    solved_problems = 0\n\n    while solved_problems < n:\n        for i in range(n):\n            if i not in solved_contests and contests[i] >= current_day:\n                solved_problems += current_day\n                solved_contests.add(i)\n                break\n        else:\n            break\n        max_days += 1\n        current_day += 1\n\n    return str(max_days)"
    },
    {
        "number": 4373,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    max_days = 0\n    for i in range(1, len(a) + 1):\n        max_days += i * (a.count(i) + 1)\n    return str(max_days)"
    },
    {
        "number": 4373,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *problems = map(int, stdin.split())\n    contests = []\n    for i in range(0, len(problems), n):\n        contests.append(problems[i:i + n])\n\n    def days_to_solve_problems(contest_size, days):\n        return sum(min(contest_size, days) for contest_size in contest_size)\n\n    def optimal_contest_choices(contests, days):\n        if not contests:\n            return 0\n        current_contest = max(contests, key=lambda x: x[1] / x[0])\n        contest_size, contest_problems = current_contest\n        days_to_solve = days_to_solve_problems(contest_size, days)\n        if days_to_solve == 0:\n            return 0\n        new_contests = [contest for contest in contests if contest[1] >= contest_problems]\n        return days + optimal_contest_choices(new_contests, days_to_solve)\n\n    result = optimal_contest_choices(contests, 1)\n    return str(result)"
    },
    {
        "number": 4373,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, contests = stdin.split(\"\\n\")\n    contests = list(map(int, contests.split()))\n    total_problems = sum(contests)\n    days = 1\n    while total_problems >= days:\n        days += 1\n    return str(days - 1)\n\ndef"
    },
    {
        "number": 4373,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    total_problems = sum(a)\n    max_days = 0\n    for i in range(1, n+1):\n        if sum(a[:i]) >= i:\n            max_days = i\n        else:\n            break\n    return str(max_days)"
    },
    {
        "number": 4373,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n    max_days = 0\n    current_day = 0\n    contests_solved = [False] * n\n\n    while True:\n        current_day += 1\n        problems_solved = 0\n        for i in range(n):\n            if not contests_solved[i]:\n                if a[i] >= current_day:\n                    problems_solved += current_day\n                    contests_solved[i] = True\n                    if problems_solved == current_day:\n                        max_days = current_day\n                        break\n        else:\n            break\n\n    return str(max_days)\n\nstdin = '''\n4\n3 1 4 1\n'''\nprint(solution(stdin)) # Output: 3 "
    },
    {
        "number": 4374,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    edges = [tuple(map(int, line.split())) for line in stdin.strip().split('\\n')[2:]]\n\n    def add_edge(v, u):\n        nonlocal n, m, edges\n        edges.append((v, u))\n        m += 1\n\n    def dfs(v, visited, parent):\n        visited[v] = True\n        for u in range(1, n + 1):\n            if u == v or u == parent:\n                continue\n            if not visited[u]:\n                dfs(u, visited, v)\n\n    # Find connected components\n    visited = [False] * (n + 1)\n    components = 0\n    for v in range(1, n + 1):\n        if not visited[v]:\n            components += 1\n            dfs(v, visited, 0)\n\n    if components > 1:\n        # The graph is not a tree\n        if m < components - 1:\n            return \"The graph cannot be a tree with less than {} edges\".format(components - 1)\n        # Add edges to make the graph a tree\n        for i in range(components - 1):\n            add_edge(*edges[i])\n    else:\n        # The graph is already a tree\n        pass\n\n    # Calculate the diameter\n    diameter = -1\n    for i in range(n - 1):\n        visited = [False] * (n + 1)\n        dfs(i + 1, visited, 0)\n        max_distance = -1\n        for j in range(1, n + 1):\n            if j == i + 1:\n                continue\n            if not visited[j]:\n                max_distance = max(max_distance, len(list(dfs(j, [False] * (n + 1), i + 1))) - 1)\n        diameter = max(diameter, max_distance)\n\n    output = [str(diameter)]\n    for edge in edges[components - 1:]:\n        output.append(\"{} {}\".format(*edge))\n\n    return \"\\n\".join(output)\n"
    },
    {
        "number": 4374,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def add_edge(v, u, n):\n        adj_matrix[v - 1][u - 1] = 1\n        adj_matrix[u - 1][v - 1] = 1\n        tree_diameter = max(tree_diameter, (n - 2) - count_indegree(u, n))\n        return tree_diameter\n\n    def count_indegree(u, n):\n        return sum([1 for i in range(n) if adj_matrix[i][u - 1] == 1])\n\n    n, m = map(int, stdin.readline().split())\n    adj_matrix = [[0] * n for _ in range(n)]\n    edges = []\n    tree_diameter = 0\n\n    for _ in range(m):\n        v, u = map(int, stdin.readline().split())\n        edges.append((v, u))\n        tree_diameter = max(tree_diameter, count_indegree(v, n))\n\n    for edge in edges:\n        if count_indegree(edge[0], n) == (n - 2):\n            tree_diameter = add_edge(edge[0], edge[1], n)\n\n    if tree_diameter == 0:\n        print(1)\n    else:\n        print(tree_diameter)\n        for edge in edges:\n            if count_indegree(edge[0], n) == (n - 2):\n                print(edge[0], edge[1])\n                add_edge(edge[0], edge[1], n)\n                break\n"
    },
    {
        "number": 4374,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    edges = [list(map(int, line.split())) for line in stdin.split(\"\\n\")[1:]]\n\n    # Check if the graph is already a tree\n    if len(edges) == n - 1:\n        diameter = 1\n        print(diameter)\n        return \"\"\n\n    # Find the connected component with the most vertices\n    max_cc_size = 0\n    for i in range(1, n + 1):\n        visited = set()\n        dfs(i, visited)\n        if len(visited) > max_cc_size:\n            max_cc_size = len(visited)\n\n    # Calculate the diameter\n    diameter = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            if not is_edge(i, j, edges):\n                diameter += 1\n\n    # Add edges to the tree\n    result = []\n    added_edges = 0\n    while added_edges < n - max_cc_size:\n        max_diameter = diameter\n        for i in range(1, n + 1):\n            for j in range(i + 1, n + 1):\n                if not is_edge(i, j, edges):\n                    new_edges = edges + [(i, j)]\n                    new_diameter = calculate_diameter(new_edges)\n                    if new_diameter < max_diameter:\n                        max_diameter = new_diameter\n                        result = new_edges\n        added_edges += 1\n\n    # Print the result\n    print(max_diameter)\n    for edge in result:\n        print(*edge)\n\ndef"
    },
    {
        "number": 4374,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    edges = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    \n    def add_edge(v, u):\n        nonlocal edges\n        edges.append([v, u])\n    \n    def dfs(v):\n        visited[v] = True\n        for u in range(1, n + 1):\n            if not visited[u] and [v, u] in edges:\n                dfs(u)\n    \n    visited = [False] * (n + 1)\n    max_diameter = 0\n    \n    if m == n - 1:\n        return str(1)\n    \n    for v in range(1, n + 1):\n        if not visited[v]:\n            dfs(v)\n            max_diameter = max(max_diameter, sum(visited) - 1)\n    \n    if max_diameter == 1:\n        add_edge(1, 2)\n    elif max_diameter == 2:\n        add_edge(2, 3)\n    \n    return str(max_diameter) + '\\n' + '\\n'.join([' '.join(map(str, edge)) for edge in edges])\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4374,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    edges = [tuple(map(int, line.split())) for line in stdin.strip().split('\\n')[1:]]\n    \n    # Check if the graph is already a tree\n    visited = [False] * n\n    def dfs(node):\n        visited[node - 1] = True\n        for neighbor in range(n):\n            if not visited[neighbor] and (node, neighbor + 1) in edges:\n                dfs(neighbor + 1)\n    dfs(1)\n    if all(visited):\n        diameter = -1\n        for i in range(n):\n            for j in range(i + 1, n):\n                if (i + 1, j + 1) not in edges:\n                    diameter = max(diameter, 1 + shortest_path(i + 1, j + 1, edges))\n        return str(diameter)\n    \n    # Add edges to make the graph a tree\n    visited = [False] * n\n    def dfs(node, parent):\n        visited[node - 1] = True\n        for neighbor in range(n):\n            if not visited[neighbor] and (node, neighbor + 1) not in edges and (parent, neighbor + 1) not in edges:\n                edges.append((node, neighbor + 1))\n                dfs(neighbor + 1, node)\n    dfs(1, None)\n    \n    # Calculate the diameter\n    diameter = -1\n    for i in range(n):\n        for j in range(i + 1, n):\n            diameter = max(diameter, 1 + shortest_path(i + 1, j + 1, edges))\n    \n    # Print the result\n    res = str(diameter) + '\\n'\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if (i + 1, j + 1) not in edges:\n                res += ' '.join(map(str, [i + 1, j + 1])) + '\\n'\n    return res\n\ndef"
    },
    {
        "number": 4374,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    graph = [[] for _ in range(n+1)]\n    for line in stdin.split('\\n')[1:]:\n        if line:\n            v, u = map(int, line.split())\n            graph[v].append(u)\n            graph[u].append(v)\n    \n    def dfs(node, visited, parent, depth):\n        visited[node] = True\n        max_depth = depth\n        for neighbor in graph[node]:\n            if not visited[neighbor]:\n                max_depth = max(max_depth, dfs(neighbor, visited, node, depth+1))\n        return max_depth\n    \n    def add_edge(node1, node2, edges_added):\n        graph[node1].append(node2)\n        graph[node2].append(node1)\n        edges_added.add((min(node1, node2), max(node1, node2)))\n    \n    def find_min_diameter(edges_added, diameter):\n        visited = [False] * (n+1)\n        max_depth = 0\n        for i in range(1, n+1):\n            if not visited[i]:\n                max_depth = max(max_depth, dfs(i, visited, None, 0))\n        if max_depth == diameter:\n            return edges_added\n        else:\n            return find_min_diameter(edges_added, max_depth)\n    \n    diameter = 0\n    edges_added = set()\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if not graph[i] or not graph[j]:\n                add_edge(i, j, edges_added)\n            else:\n                for v in graph[i]:\n                    for u in graph[j]:\n                        if v == u:\n                            add_edge(i, j, edges_added)\n                            break\n    diameter = find_min_diameter(edges_added, diameter)\n    \n    output = str(diameter) + '\\n'\n    for edge in edges_added:\n        output += ' '.join(map(str, edge)) + '\\n'\n    return output[:-1]\n\ninput_1 = \"4 2\\n1 2\\n2 3\\n\"\nprint(solution(input_1)) # Output: 2\\n4 2\\n\n\ninput_2 = \"2 0\\n\"\nprint(solution(input_2)) # Output: 1\\n1 2\\n\n\ninput_3 = \"3 2\\n1 3\\n2 3\\n\"\nprint(solution(input_3)) # Output: 2\\n "
    },
    {
        "number": 4374,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    edges = [list(map(int, line.split())) for line in stdin.split('\\n')[1:m+1]]\n    \n    # Create a set of connected components (trees)\n    trees = set()\n    for edge in edges:\n        for tree in trees:\n            if edge[0] in tree or edge[1] in tree:\n                tree.update(edge)\n                break\n        else:\n            trees.add(frozenset(edge))\n    \n    # Create a graph with edges between trees\n    graph = {i: set() for i in range(1, n+1)}\n    for edge in edges:\n        for tree1, tree2 in combinations(trees, 2):\n            if edge[0] in tree1 and edge[1] in tree2:\n                graph[edge[0]].add(edge[1])\n                graph[edge[1]].add(edge[0])\n                break\n    \n    # Dijkstra's algorithm to find the shortest path between any two vertices\n    def dijkstra(graph, start):\n        visited = {start}\n        dist = {start: 0}\n        while visited != set(graph):\n            min_vertex = None\n            min_distance = float('inf')\n            for vertex in graph:\n                if vertex not in visited and dist[vertex] < min_distance:\n                    min_vertex = vertex\n                    min_distance = dist[vertex]\n            visited.add(min_vertex)\n            for neighbor in graph[min_vertex]:\n                dist[neighbor] = min(dist[neighbor], dist[min_vertex] + 1)\n        return dist\n    \n    # Find the diameter of the resulting tree\n    diameter = 0\n    for vertex in graph:\n        dist = dijkstra(graph, vertex)\n        diameter = max(diameter, max(dist.values()))\n    \n    # If there is only one tree, no edges need to be added\n    if len(trees) == 1:\n        return str(diameter)\n    \n    # Find the minimum possible diameter by adding edges between trees\n    min_diameter = diameter\n    result = []\n    for tree1, tree2 in combinations(trees, 2):\n        for vertex1 in tree1:\n            for vertex2 in tree2:\n                graph[vertex1].add(vertex2)\n                graph[vertex2].add(vertex1)\n                dist = dijkstra(graph, vertex1)\n                graph[vertex1].remove(vertex2)\n                graph[vertex2].remove(vertex1)\n                diameter = max(dist.values())\n                if diameter < min_diameter:\n                    min_diameter = diameter\n                    result = [(vertex1, vertex2)]\n                elif diameter == min_diameter:\n                    result.append((vertex1, vertex2))\n    \n    # Print the result\n    print(min_diameter)\n    for edge in result:\n        print(edge[0], edge[1])"
    },
    {
        "number": 4374,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:m+1]]\n    \n    def dfs(graph, start, visited):\n        visited.add(start)\n        for neighbor in graph[start]:\n            if neighbor not in visited:\n                dfs(graph, neighbor, visited)\n\n    graph = [[] for _ in range(n)]\n    for v, u in edges:\n        graph[v-1].append(u-1)\n        graph[u-1].append(v-1)\n\n    diameter = 0\n    visited = set()\n    for i in range(n):\n        if i not in visited:\n            count = 0\n            dfs(graph, i, visited)\n            count = len(visited)\n            if count > diameter:\n                diameter = count\n\n    if diameter == n:\n        return str(diameter)\n\n    min_diameter = diameter\n    added_edges = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if (i, j) not in edges and (j, i) not in edges:\n                new_edges = edges + [(i+1, j+1)]\n                new_graph = [[] for _ in range(n)]\n                for v, u in new_edges:\n                    new_graph[v-1].append(u-1)\n                    new_graph[u-1].append(v-1)\n                    \n                new_visited = set()\n                new_diameter = 0\n                for k in range(n):\n                    if k not in new_visited:\n                        new_count = 0\n                        dfs(new_graph, k, new_visited)\n                        new_count = len(new_visited)\n                        if new_count > new_diameter:\n                            new_diameter = new_count\n                            \n                if new_diameter < min_diameter:\n                    min_diameter = new_diameter\n                    added_edges = [(i+1, j+1)]\n                elif new_diameter == min_diameter:\n                    added_edges.append((i+1, j+1))\n\n    added_edges = sorted(added_edges)\n    output = str(min_diameter) + '\\n'\n    for v, u in added_edges:\n        output += f\"{v} {u}\\n\"\n\n    return output[:-1]"
    },
    {
        "number": 4374,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    edges = [tuple(map(int, input().split())) for _ in range(m)]\n    tree = set()\n    for edge in edges:\n        tree.add(edge)\n        tree.add((edge[1], edge[0]))\n    \n    def dfs(start):\n        visited = [False] * (n + 1)\n        visited[start] = True\n        distances = [0] * (n + 1)\n        max_distance = 0\n        \n        stack = [(start, 0)]\n        while stack:\n            vertex, distance = stack.pop()\n            max_distance = max(max_distance, distance)\n            for neighbor in range(1, n + 1):\n                if not visited[neighbor] and (vertex, neighbor) in tree:\n                    visited[neighbor] = True\n                    distances[neighbor] = distance + 1\n                    stack.append((neighbor, distance + 1))\n        \n        return max_distance\n    \n    diameter = 0\n    for vertex in range(1, n + 1):\n        diameter = max(diameter, dfs(vertex))\n    \n    if diameter == 1:\n        return str(diameter) + \"\\n\"\n    \n    tree_edges = []\n    for edge in edges:\n        if dfs(edge[0]) != dfs(edge[1]):\n            tree_edges.append(edge)\n    \n    if len(tree_edges) < n - 1:\n        return \"Invalid input\"\n    \n    result = str(diameter) + \"\\n\"\n    for edge in tree_edges:\n        result += \" \".join(map(str, edge)) + \"\\n\"\n    \n    return result\n"
    },
    {
        "number": 4374,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    edges = []\n    for line in stdin.split('\\n')[2:]:\n        if line:\n            v, u = map(int, line.split())\n            edges.append((v, u))\n\n    def dfs(start: int, graph: dict) -> set:\n        visited = set()\n        stack = [start]\n        while stack:\n            vertex = stack.pop()\n            if vertex not in visited:\n                visited.add(vertex)\n                stack.extend(graph[vertex] - visited)\n        return visited\n\n    def find_diameter(graph: dict) -> int:\n        diameter = 0\n        for i in range(1, n + 1):\n            if i not in graph:\n                continue\n            visited = dfs(i, graph)\n            for j in range(1, n + 1):\n                if j not in graph or j in visited:\n                    continue\n                visited = dfs(j, graph)\n                diameter = max(diameter, len(visited) + 1)\n        return diameter\n\n    graph = {i: set() for i in range(1, n + 1)}\n    for v, u in edges:\n        graph[v].add(u)\n        graph[u].add(v)\n\n    if m == n - 1:\n        diameter = find_diameter(graph)\n        return f\"{diameter}\\n\"\n\n    min_diameter = float('inf')\n    min_edges = []\n    for v, u in itertools.combinations(range(1, n + 1), 2):\n        if v in graph[u] or u in graph[v]:\n            continue\n        graph[v].add(u)\n        graph[u].add(v)\n        diameter = find_diameter(graph)\n        if diameter < min_diameter:\n            min_diameter = diameter\n            min_edges = [(v, u)]\n        else:\n            min_edges.append((v, u))\n        graph[v].remove(u)\n        graph[u].remove(v)\n\n    result = f\"{min_diameter}\\n\"\n    for v, u in min_edges:\n        result += f\"{v} {u}\\n\"\n    return result\n\nimport sys\nfrom itertools import combinations\n\nstdin = sys.stdin.read()\nprint(solution(stdin)) "
    },
    {
        "number": 4375,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    weights = list(map(int, stdin.split()[2:]))\n    tree = {}\n    \n    for i in range(n-1):\n        u, v = map(int, stdin.split()[2+i].split())\n        if u not in tree:\n            tree[u] = [v]\n        else:\n            tree[u].append(v)\n            \n        if v not in tree:\n            tree[v] = [u]\n        else:\n            tree[v].append(u)\n            \n    def dfs(node, visited, weight):\n        visited[node] = True\n        weight_sum = weight[node]\n        \n        for child in tree[node]:\n            if not visited[child]:\n                weight_sum += dfs(child, visited, weight)\n                \n        return weight_sum\n    \n    max_weight = float('-inf')\n    for i in range(1, n+1):\n        if i not in tree:\n            visited = [False] * (n+1)\n            weight = [0] * (n+1)\n            weight[i] = weights[i-1]\n            max_weight = max(max_weight, dfs(i, visited, weight))\n            \n    return max_weight\n\ninput1 = \"5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\"\ninput2 = \"7 2\\n2 1 2 1 2 1 1\\n6 4\\n1 5\\n3 1\\n2 3\\n7 5\\n7 4\"\nprint(solution(input1))\nprint(solution(input2)) "
    },
    {
        "number": 4375,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def read_input():\n        n, k = map(int, stdin.readline().split())\n        a = list(map(int, stdin.readline().split()))\n        edges = []\n        for i in range(n - 1):\n            u, v = map(int, stdin.readline().split())\n            edges.append((u, v))\n        return n, k, a, edges\n\n    def is_valid_subset(subset: set, k: int, edges: list) -> bool:\n        for u, v in edges:\n            if u in subset and v in subset:\n                if len(subset) - 1 - k >= 0:\n                    return False\n        return True\n\n    def dfs(node: int, visited: set, a: list, edges: list, k: int, max_weight: int, valid_subsets: list) -> None:\n        visited.add(node)\n        if len(visited) == len(a):\n            if max_weight < sum(a):\n                max_weight = sum(a)\n            valid_subsets.append(visited)\n        else:\n            for neighbor in [x[1] for x in edges if x[0] == node]:\n                if neighbor not in visited:\n                    new_a = [x for i, x in enumerate(a) if i != node and i != neighbor]\n                    new_edges = [x for x in edges if x[0] != node and x[1] != node and x[0] != neighbor and x[1] != neighbor]\n                    if is_valid_subset(visited, k, new_edges):\n                        dfs(neighbor, visited.copy(), new_a, new_edges, k, max_weight, valid_subsets)\n        visited.remove(node)\n\n    n, k, a, edges = read_input()\n    max_weight = 0\n    valid_subsets = []\n    dfs(1, set(), a, edges, k, max_weight, valid_subsets)\n    return str(max(valid_subsets, key=lambda x: sum(a[i - 1] for i in x)))"
    },
    {
        "number": 4375,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    weights = list(map(int, stdin.split()[2:]))\n    graph = [[] for _ in range(n)]\n    for _ in range(n-1):\n        u, v = map(int, stdin.split()[:2])\n        graph[u-1].append(v-1)\n        graph[v-1].append(u-1)\n    \n    def dfs(node: int, visited: set, depth: int) -> int:\n        if depth == k:\n            return 0\n        max_weight = 0\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                visited.add(neighbor)\n                max_weight = max(max_weight, dfs(neighbor, visited, depth + 1))\n                visited.remove(neighbor)\n        return weights[node] + max_weight\n    \n    max_weight = 0\n    for node in range(n):\n        max_weight = max(max_weight, dfs(node, {node}, 0))\n    \n    return str(max_weight)"
    },
    {
        "number": 4375,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.splitlines()[0].split()))\n    weights = list(map(int, stdin.splitlines()[1].split()))\n    graph = [[] for _ in range(n)]\n    \n    for i in range(2, n+1):\n        u, v = list(map(int, stdin.splitlines()[i].split()))\n        graph[u-1].append(v-1)\n        graph[v-1].append(u-1)\n    \n    def dfs(node, visited, weights):\n        visited[node] = True\n        for neighbor in graph[node]:\n            if not visited[neighbor]:\n                dfs(neighbor, visited, weights)\n                weights.append(weight[neighbor])\n        \n    def is_valid(subset, k):\n        for i in range(len(subset)):\n            for j in range(i+1, len(subset)):\n                if len(find_path(subset[i], subset[j], k)) <= k:\n                    return False\n        return True\n    \n    def find_path(u, v, k):\n        path = []\n        queue = [(u, set([u]), 0)]\n        \n        while queue:\n            current, visited, dist = queue.pop(0)\n            if dist > k:\n                continue\n            if current == v:\n                path.append(current)\n                return path\n            visited.add(current)\n            for neighbor in graph[current]:\n                if neighbor not in visited:\n                    queue.append((neighbor, visited.copy(), dist+1))\n        return []\n    \n    max_weight = 0\n    for i in range(n):\n        weight = [0] * n\n        dfs(i, [False] * n, weight)\n        weight = sorted(weight, reverse=True)\n        subset = [j for j in range(n) if weight[j] > 0]\n        for subset_size in range(1, len(subset)+1):\n            for combination in itertools.combinations(subset, subset_size):\n                if is_valid(combination, k):\n                    max_weight = max(max_weight, sum(weight[j] for j in combination))\n    return str(max_weight)\n\nimport sys\nimport itertools\n\ninput_data = sys.stdin.read()\nresult = solution(input_data)\nprint(result) "
    },
    {
        "number": 4375,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, k = map(int, stdin.splitlines()[0].split())\n    weights = list(map(int, stdin.splitlines()[1].split()))\n    graph = [[] for _ in range(n)]\n    for i in range(n-1):\n        u, v = map(int, stdin.splitlines()[i+2].split())\n        graph[u-1].append(v-1)\n        graph[v-1].append(u-1)\n    \n    # Helper function to check if distance between two vertices is more than k\n    def distance_more_than_k(u: int, v: int) -> bool:\n        visited = [False] * n\n        queue = [(u, 0)]\n        while queue:\n            node, d = queue.pop(0)\n            if node == v:\n                return True\n            if not visited[node]:\n                visited[node] = True\n                for nei in graph[node]:\n                    if visited[nei]:\n                        continue\n                    queue.append((nei, d+1))\n        return False\n    \n    # Find maximum total weight\n    max_weight = 0\n    for subset in itertools.combinations(range(n), n-k):\n        subset_weight = sum(weights[i] for i in subset)\n        for u, v in itertools.combinations(subset, 2):\n            if distance_more_than_k(u, v):\n                max_weight = max(max_weight, subset_weight)\n                break\n        else:\n            continue\n        break\n    \n    return str(max_weight)"
    },
    {
        "number": 4375,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()[:2]))\n    weights = list(map(int, stdin.split('\\n')[1].split()))\n    graph = [[] for _ in range(n)]\n\n    for i in range(n - 1):\n        u, v = list(map(int, stdin.split('\\n')[2 + i].split()))\n        graph[u - 1].append(v - 1)\n        graph[v - 1].append(u - 1)\n\n    def dfs(node: int, visited: set, current_weight: int, current_path: set) -> int:\n        visited.add(node)\n        current_path.add(node)\n        max_weight = current_weight\n\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                max_weight = max(max_weight, dfs(neighbor, visited, current_weight + weights[node], current_path))\n            elif neighbor in current_path and len(current_path) - 1 <= k:\n                max_weight = max(max_weight, current_weight + weights[node])\n\n        current_path.remove(node)\n        return max_weight\n\n    return str(dfs(0, set(), 0, set()))"
    },
    {
        "number": 4375,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    weights = list(map(int, stdin.split()[2:]))\n    edges = []\n    for i in range(n-1):\n        u, v = map(int, stdin.split()[2+i].split())\n        edges.append((u, v))\n\n    def dfs(vertex, visited, parent, distance):\n        visited[vertex] = True\n        for neighbor, weight in edges:\n            if not visited[neighbor]:\n                distance[neighbor] = min(distance[neighbor], distance[vertex] + weight)\n                dfs(neighbor, visited, vertex, distance)\n\n    def max_subset_weight(k):\n        max_weight = 0\n        for subset_size in range(1, n + 1):\n            visited = [False] * n\n            distance = [float('inf')] * n\n            distance[0] = 0\n            dfs(0, visited, -1, distance)\n\n            valid_subsets = [vertex for vertex, dist in enumerate(distance) if dist > k]\n            if not valid_subsets:\n                return max_weight\n\n            weight = sum(weights[vertex] for vertex in valid_subsets)\n            max_weight = max(max_weight, weight)\n\n        return max_weight\n\n    return str(max_subset_weight(k))"
    },
    {
        "number": 4375,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def find_subset(k: int) -> int:\n        def dfs(node: int, visited: set) -> int:\n            visited.add(node)\n            weight = a[node]\n            for neighbor in graph[node]:\n                if neighbor not in visited:\n                    weight += dfs(neighbor, visited)\n            return weight\n\n        n = len(a)\n        max_weight = 0\n        for i in range(1, n + 1):\n            graph = [[] for _ in range(n + 1)]\n            for u, v in edges:\n                graph[u].append(v)\n                graph[v].append(u)\n            visited = set()\n            weight = dfs(i, visited)\n            if all(abs(a[i] - a[j]) > k for j in visited if i != j):\n                max_weight = max(max_weight, weight)\n        return max_weight\n\n    n, k = map(int, stdin.split()[0].split())\n    a = list(map(int, stdin.split()[1].split()))\n    edges = []\n    for i in range(2, n + 1):\n        u, v = map(int, stdin.split()[i].split())\n        edges.append((u, v))\n    return str(find_subset(k))"
    },
    {
        "number": 4375,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    weights = list(map(int, stdin.split()[2:]))\n    graph = [[] for _ in range(n)]\n    for i in range(n - 1):\n        u, v = map(int, stdin.split()[2:])\n        graph[u - 1].append(v - 1)\n        graph[v - 1].append(u - 1)\n\n    def dfs(node: int, parent: int, visited: set) -> int:\n        visited.add(node)\n        total_weight = weights[node]\n        for child in graph[node]:\n            if child != parent and child not in visited:\n                total_weight += dfs(child, node, visited)\n        return total_weight\n\n    max_weight = 0\n    for i in range(n):\n        total_weight = dfs(i, -1, set())\n        if total_weight > max_weight:\n            max_weight = total_weight\n\n    return str(max_weight)\n\ninput_data = \"\"\"\n5 1\n1 2 3 4 5\n1 2\n2 3\n3 4\n3 5\n\"\"\"\nprint(solution(input_data)) "
    },
    {
        "number": 4375,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def find_subset(n, k, weights, graph) -> int:\n        visited = [False] * n\n        max_weight = 0\n\n        def dfs(node, current_weight, distance):\n            nonlocal max_weight\n\n            visited[node - 1] = True\n            current_weight += weights[node - 1]\n\n            if distance > k:\n                max_weight = max(max_weight, current_weight)\n\n            for neighbor in graph[node]:\n                if not visited[neighbor - 1]:\n                    dfs(neighbor, current_weight, distance + 1)\n\n            visited[node - 1] = False\n\n        dfs(1, 0, 0)\n        return max_weight\n\n    n, k = map(int, stdin.split()[0:2])\n    weights = list(map(int, stdin.split('\\n')[1].split()))\n\n    graph = [[] for _ in range(n)]\n    for i in range(2, n + 1):\n        u, v = map(int, stdin.split('\\n')[i - 1].split())\n        graph[u - 1].append(v)\n        graph[v - 1].append(u)\n\n    return str(find_subset(n, k, weights, graph))"
    },
    {
        "number": 4376,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:2+n]))\n    b = list(map(int, stdin.split()[2+n:]))\n\n    room_number = 0\n    for i in range(n):\n        room_number += a[i]\n        if b[0] <= room_number:\n            f, k = i+1, b[0] - sum(a[:i]) + 1\n            break\n\n    result = f\"{f} {k}\\n\"\n\n    for j in range(1, m):\n        while b[j] > room_number:\n            room_number += a[i]\n            i += 1\n        f, k = i+1, b[j] - sum(a[:i]) + 1\n        result += f\"{f} {k}\\n\"\n\n    return result\n\n\ninput_data = \"3 6\\n10 15 12\\n1 9 12 23 26 37\"\noutput_data = solution(input_data)\nprint(output_data) "
    },
    {
        "number": 4376,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    dormitories = list(map(int, stdin.split()[2:2+n]))\n    letters = list(map(int, stdin.split()[2+n:]))\n    \n    total_rooms = sum(dormitories)\n    current_sum = 0\n    result = []\n    \n    for i, a_i in enumerate(dormitories, start=1):\n        for j in range(a_i):\n            if current_sum + j == letters[0]:\n                result.append((i, j+1))\n                letters.pop(0)\n                break\n            current_sum += j + 1\n    \n    for i, r_i in result:\n        print(i, r_i)\n\ndef"
    },
    {
        "number": 4376,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()[0:2]))\n    rooms = list(map(int, stdin.split()[2:]))\n    dormitories = []\n    start = 1\n    for a in rooms:\n        dormitories.append(list(range(start, start + a)))\n        start += a\n\n    for b in range(m):\n        room_num = rooms.index(b) + 1\n        if room_num <= n:\n            print(f\"{room_num} {dormitories[room_num - 1].index(b) + 1}\")\n        else:\n            for i in range(n):\n                if b in dormitories[i]:\n                    print(f\"{i + 1} {dormitories[i].index(b) + 1}\")\n                    break\n    return \"\"\n\ninput_str = input()\nsolution(input_str) "
    },
    {
        "number": 4376,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def process_letter(letter, dormitories):\n        room_number = 0\n        for i, dormitory in enumerate(dormitories):\n            room_number += dormitory\n            if letter <= room_number:\n                return i + 1, room_number - dormitories[i] + letter\n\n    n, m = map(int, stdin.split()[0:2])\n    dormitories = list(map(int, stdin.split()[2:2+n]))\n    letters = list(map(int, stdin.split()[2+n:]))\n\n    for letter in letters:\n        dormitory, room = process_letter(letter, dormitories)\n        print(dormitory, room)\n"
    },
    {
        "number": 4376,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, m = map(int, stdin.split()[:2])\n    dorm_sizes = list(map(int, stdin.split()[2:n+2]))\n    room_numbers = list(map(int, stdin.split()[n+2:]))\n\n    # Compute total number of rooms\n    total_rooms = sum(dorm_sizes)\n\n    # Compute room numbers for each dormitory\n    dorm_room_numbers = [sum(dorm_sizes[:i]) for i in range(n)]\n\n    # Compute room number in each dormitory\n    room_numbers_per_dorm = []\n    for i in range(n):\n        room_numbers_per_dorm.extend([room_number for room_number in room_numbers if dorm_room_numbers[i] <= room_number < dorm_room_numbers[i] + dorm_sizes[i]])\n\n    # Compute the delivery information\n    deliveries = []\n    for i in range(m):\n        delivery = []\n        for j in range(n):\n            if dorm_room_numbers[j] <= room_numbers[i] < dorm_room_numbers[j] + dorm_sizes[j]:\n                delivery = [j+1, room_numbers[i] - dorm_room_numbers[j] + 1]\n                break\n        deliveries.append(delivery)\n\n    # Format the output\n    output = \"\"\n    for delivery in deliveries:\n        if delivery:\n            output += \" \".join(map(str, delivery)) + \"\\n\"\n        else:\n            output += \"0 0\\n\"\n\n    return output"
    },
    {
        "number": 4376,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:n+2]))\n    b = list(map(int, stdin.split()[n+2:]))\n    \n    rooms = sum(a)\n    f = 0\n    k = 0\n    for room_num in b:\n        while room_num > 0:\n            room_num -= a[f]\n            if room_num <= 0:\n                break\n            f += 1\n            k = 0\n        k += 1\n        print(f+1, k)"
    },
    {
        "number": 4376,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:2 + n]))\n    b = list(map(int, stdin.split()[2 + n:]))\n\n    a_sum = [sum(a[:i]) for i in range(1, n + 1)]\n    room_map = {room_num: (dorm, room) for dorm in range(n) for room in range(a[dorm])}\n\n    output = []\n    for room_num in b:\n        dorm, room = room_map[room_num]\n        output.append(f\"{dorm + 1} {room + 1}\")\n\n    return \"\\n\".join(output)"
    },
    {
        "number": 4376,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    b = list(map(int, stdin.split()[n+2:]))\n\n    dorm_start = 0\n    for i in range(n):\n        dorm_end = dorm_start + a[i] - 1\n        if b[0] <= dorm_end:\n            break\n        dorm_start += a[i]\n\n    f = i + 1\n    k = b[0] - dorm_start + 1\n    return f\"{f} {k}\""
    },
    {
        "number": 4376,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    rooms = list(map(int, stdin.split()[2:]))\n    a = rooms[:n]\n    b = rooms[n:]\n\n    total_rooms = sum(a)\n    room_index = 0\n    letter_index = 0\n\n    result = []\n    while letter_index < len(b):\n        if b[letter_index] <= total_rooms:\n            for i in range(n):\n                if room_index + a[i] >= b[letter_index]:\n                    result.append(f\"{i+1} {b[letter_index] - room_index}\")\n                    letter_index += 1\n                    break\n                room_index += a[i]\n        else:\n            total_rooms += a[-1]\n            a.append(a[-1])\n            n += 1\n\n    return \"\\n\".join(result)\n\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4376,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    rooms = list(map(int, stdin.split()[2:]))\n    \n    dormitories = []\n    for i in range(n):\n        dormitories.extend([i+1]*rooms[i])\n        \n    dormitories_map = {}\n    for i in range(n):\n        dormitories_map[i+1] = [j+1 for j in range(rooms[i])]\n        \n    for i in range(m):\n        b = int(stdin.split()[2+i])\n        f = dormitories[b-1]\n        k = dormitories_map[f].index(b) + 1\n        print(f, k)\n        \n"
    },
    {
        "number": 4377,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n\n    if a + b == d:\n        if a + c == d:\n            if b + c == d:\n                return f\"{a} {b} {c}\"\n            else:\n                return f\"{a} {c} {b}\"\n        else:\n            return f\"{a} {b} {c}\"\n    elif a + c == d:\n        if b + c == d:\n            return f\"{c} {a} {b}\"\n        else:\n            return f\"{c} {b} {a}\"\n    elif b + c == d:\n        return f\"{b} {a} {c}\""
    },
    {
        "number": 4377,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x1, x2, x3, x4 = map(int, stdin.split())\n    a = b = c = 0\n    sums = set([x1, x2, x3, x4])\n    for i in range(1, 10000):\n        for j in range(1, 10000):\n            for k in range(1, 10000):\n                if (i + j + k) in sums:\n                    if (i + j) in sums and (i + k) in sums and (j + k) in sums:\n                        a = i\n                        b = j\n                        c = k\n                        break\n            if (a != 0) and (b != 0) and (c != 0):\n                break\n    return f\"{a} {b} {c}\""
    },
    {
        "number": 4377,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x1, x2, x3, x4 = map(int, stdin.split())\n    guesses = []\n    for a in range(1, x1+1):\n        for b in range(1, x2+1):\n            for c in range(1, x3+1):\n                if a+b == x4 and a+c == x3 and b+c == x2:\n                    guesses.append([a, b, c])\n    return str(guesses[0])\n\ninput_stdin = \"3 6 5 4\"\nprint(solution(input_stdin)) "
    },
    {
        "number": 4377,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = list(map(int, stdin.split()))\n    x.sort()\n\n    a = x[0] + x[1]\n    b = x[0] + x[2]\n    c = x[1] + x[2]\n\n    return f\"{a} {b} {c}\""
    },
    {
        "number": 4377,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x1, x2, x3, x4 = map(int, stdin.split())\n    \n    # create all possible combinations of three integers\n    combinations = [(a, b, c) for a in range(1, x1+1) for b in range(1, x2+1) for c in range(1, x3+1)]\n    \n    # find the combination that satisfies the conditions\n    for a, b, c in combinations:\n        if a+b == x1 and a+c == x2 and b+c == x3 and a+b+c == x4:\n            return f\"{a} {b} {c}\""
    },
    {
        "number": 4377,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x1, x2, x3, x4 = map(int, stdin.split())\n    possibilities = [[x1, x2, x3, x4], [x1, x3, x2, x4], [x2, x1, x3, x4], [x2, x3, x1, x4], [x3, x1, x2, x4], [x3, x2, x1, x4]]\n    for possibility in possibilities:\n        a = possibility[0] - possibility[1]\n        b = possibility[0] - possibility[2]\n        c = possibility[0] - possibility[3]\n        if a > 0 and b > 0 and c > 0 and a + b + c == possibility[0]:\n            return f\"{min(a, b, c)} {max(a, b, c)} {a + b + c - min(a, b, c) - max(a, b, c)}\"\n    return \"Impossible\" "
    },
    {
        "number": 4377,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x1, x2, x3, x4 = map(int, stdin.split())\n    a, b, c = sorted(set([x1, x2, x3, x4]))\n    \n    return f\"{a} {b} {c}\""
    },
    {
        "number": 4377,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x1, x2, x3, x4 = map(int, stdin.split())\n    \n    # Calculate the minimum value of each pairwise sum\n    min_pairwise_sum = min(x1, x2, x3, x4)\n    \n    # Calculate the maximum value of each pairwise sum\n    max_pairwise_sum = max(x1, x2, x3, x4)\n    \n    # Calculate the sum of the three numbers\n    total_sum = x1 + x2 + x3 + x4 - max_pairwise_sum - min_pairwise_sum\n    \n    # Calculate the two remaining numbers\n    a = total_sum - (max_pairwise_sum + min_pairwise_sum)\n    b = max_pairwise_sum - min_pairwise_sum\n    \n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    \n    # Print the three numbers in any order\n    print(sorted_numbers[0], sorted_numbers[1], sorted_numbers[2])"
    },
    {
        "number": 4377,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = list(map(int, stdin.split()))\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            for k in range(j+1, len(x)):\n                s1 = x[i] + x[j]\n                s2 = x[i] + x[k]\n                s3 = x[j] + x[k]\n                s4 = x[i] + x[j] + x[k]\n                if s1 == x[0] and s2 == x[1] and s3 == x[2] and s4 == x[3]:\n                    return f\"{x[i]} {x[j]} {x[k]}\""
    },
    {
        "number": 4377,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x1, x2, x3, x4 = map(int, stdin.split())\n    for a in range(1, 1000000001):\n        for b in range(1, 1000000001):\n            for c in range(1, 1000000001):\n                if (a + b == x1 and a + c == x2 and b + c == x3 and a + b + c == x4) or \\\n                   (a + b == x1 and a + c == x3 and b + c == x2 and a + b + c == x4) or \\\n                   (a + b == x2 and a + c == x1 and b + c == x3 and a + b + c == x4) or \\\n                   (a + b == x2 and a + c == x3 and b + c == x1 and a + b + c == x4) or \\\n                   (a + b == x3 and a + c == x1 and b + c == x2 and a + b + c == x4) or \\\n                   (a + b == x3 and a + c == x2 and b + c == x1 and a + b + c == x4):\n                    return f\"{a} {b} {c}\""
    },
    {
        "number": 4378,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n    garland = [s[i] for i in range(n)]\n    \n    # Check if the garland is already diverse\n    for i in range(n - 1):\n        if garland[i] == garland[i + 1]:\n            garland[i] = 'X'\n    \n    # If the garland is diverse, return 0 and the garland\n    if 'X' not in garland:\n        return '0\\n' + ''.join(garland)\n    \n    # Find the first pair of consecutive lamps with the same color\n    first_pair = -1\n    for i in range(n - 1):\n        if garland[i] == garland[i + 1]:\n            first_pair = i\n            break\n    \n    # Recolor the first lamp to the next color\n    recolors = 1\n    next_color = {'R': 'G', 'G': 'B', 'B': 'R'}[garland[first_pair]]\n    garland[first_pair] = next_color\n    \n    # Check if the new garland is diverse\n    for i in range(n - 1):\n        if garland[i] == garland[i + 1]:\n            garland[i] = 'X'\n    \n    # If the new garland is diverse, return the recolor count and the garland\n    if 'X' not in garland:\n        return str(recolors) + '\\n' + ''.join(garland)\n    \n    # If the new garland is not diverse, repeat the process for the next pair of consecutive lamps\n    while first_pair != -1:\n        recolors += 1\n        next_pair = -1\n        \n        # Find the next pair of consecutive lamps with the same color\n        for i in range(first_pair + 1, n - 1):\n            if garland[i] == garland[i + 1]:\n                next_pair = i\n                break\n        \n        # Recolor the second lamp of the pair to the next color\n        next_color = {'R': 'G', 'G': 'B', 'B': 'R'}[garland[next_pair]]\n        garland[next_pair + 1] = next_color\n        \n        # Check if the new garland is diverse\n        for i in range(n - 1):\n            if garland[i] == garland[i + 1]:\n                garland[i] = 'X'\n        \n        # If the new garland is diverse, return the recolor count and the garland\n        if 'X' not in garland:\n            return str(recolors) + '\\n' + ''.join(garland)\n        \n        # If the new garland is not diverse, repeat the process for the next pair of consecutive lamps\n        first_pair = next_pair\n    \n    # If there is no pair of consecutive lamps with the same color, the garland is not diverse and return -1\n    return '-1\\n' + ''.join(garland)"
    },
    {
        "number": 4378,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.splitlines()\n    n = int(n)\n    \n    count = 0\n    garland = \"\"\n    \n    for i in range(n-1):\n        if s[i] != s[i+1]:\n            garland += s[i]\n        else:\n            count += 1\n            garland += \"G\" if s[i] == \"B\" else \"B\"\n    \n    garland += s[-1]\n    \n    return f\"{count}\\n{garland}\""
    },
    {
        "number": 4378,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, garland = stdin.split(\"\\n\")\n    n = int(n)\n\n    recolor_count = 0\n    diverse_garland = \"\"\n\n    for i in range(n - 1):\n        if garland[i] == garland[i + 1]:\n            diverse_garland += garland[i]\n            recolor_count += 1\n        else:\n            diverse_garland += garland[i]\n\n    diverse_garland += garland[-1]\n\n    output = f\"{recolor_count}\\n{diverse_garland}\"\n\n    return output\n"
    },
    {
        "number": 4378,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    garland = stdin.readline().strip()\n\n    min_changes = 0\n    for i in range(n - 1):\n        if garland[i] == garland[i + 1]:\n            min_changes += 1\n\n    diverse_garland = garland\n\n    for i in range(n - 1):\n        if garland[i] == garland[i + 1]:\n            if garland[i] == 'R' and garland[i + 1] == 'G':\n                diverse_garland = diverse_garland[:i + 1] + 'B' + diverse_garland[i + 2:]\n            elif garland[i] == 'R' and garland[i + 1] == 'B':\n                diverse_garland = diverse_garland[:i + 1] + 'G' + diverse_garland[i + 2:]\n            elif garland[i] == 'G' and garland[i + 1] == 'B':\n                diverse_garland = diverse_garland[:i + 1] + 'R' + diverse_garland[i + 2:]\n            elif garland[i] == 'G' and garland[i + 1] == 'R':\n                diverse_garland = diverse_garland[:i + 1] + 'B' + diverse_garland[i + 2:]\n            elif garland[i] == 'B' and garland[i + 1] == 'R':\n                diverse_garland = diverse_garland[:i + 1] + 'G' + diverse_garland[i + 2:]\n            elif garland[i] == 'B' and garland[i + 1] == 'G':\n                diverse_garland = diverse_garland[:i + 1] + 'R' + diverse_garland[i + 2:]\n\n    return str(min_changes) + '\\n' + diverse_garland\n\ninput_data = '''9\nRBGRRBRGG\n'''\nprint(solution(input_data)) "
    },
    {
        "number": 4378,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    garland = stdin.readline().strip()\n    recolor_count = 0\n    diverse_garland = \"\"\n\n    for i in range(n):\n        if i > 0 and garland[i] == garland[i - 1]:\n            diverse_garland += \"G\" if garland[i] == \"R\" else \"R\"\n            recolor_count += 1\n        else:\n            diverse_garland += garland[i]\n\n    return str(recolor_count) + \"\\n\" + diverse_garland"
    },
    {
        "number": 4378,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    garland = stdin.splitlines()[1]\n    min_recolors = n\n    diverse_garland = garland\n    for i in range(n):\n        for j in range(i+1, n):\n            if garland[i] == garland[j]:\n                new_garland = list(garland)\n                if new_garland[i] == 'R':\n                    new_garland[i] = 'B'\n                elif new_garland[i] == 'G':\n                    new_garland[i] = 'R'\n                else:\n                    new_garland[i] = 'G'\n                if new_garland[j] == 'R':\n                    new_garland[j] = 'B'\n                elif new_garland[j] == 'G':\n                    new_garland[j] = 'R'\n                else:\n                    new_garland[j] = 'G'\n                if ''.join(new_garland) != garland:\n                    recolors = sum(1 for k in range(n) if garland[k] != new_garland[k])\n                    if recolors < min_recolors:\n                        min_recolors = recolors\n                        diverse_garland = ''.join(new_garland)\n    return str(min_recolors) + '\\n' + diverse_garland\n\ninput_data = \"9\\nRBGRRBRGG\"\noutput_data = solution(input_data)\nprint(output_data) "
    },
    {
        "number": 4378,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    initial_garland = stdin.splitlines()[1]\n\n    garland = initial_garland\n    num_recolors = 0\n\n    while True:\n        diverse = True\n        for i in range(n - 1):\n            if garland[i] == garland[i + 1]:\n                diverse = False\n                break\n        if diverse:\n            break\n\n        # Find the index of the first two consecutive same color lamps\n        same_color = garland[0]\n        same_color_start = 0\n        for i in range(1, n):\n            if garland[i] == same_color:\n                same_color_start = i\n                break\n\n        # Change the color of the lamps between the first two consecutive same color lamps\n        for i in range(same_color_start - 1, -1, -1):\n            if garland[i] == same_color:\n                garland = garland[:i] + 'B' + garland[i+1:]\n                num_recolors += 1\n            else:\n                break\n\n    return f\"{num_recolors}\\n{garland}\""
    },
    {
        "number": 4378,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    garland = stdin.split('\\n')[1]\n    count = 0\n    output = []\n\n    for i in range(n):\n        if i > 0 and garland[i] == garland[i-1]:\n            count += 1\n            garland = list(garland)\n            garland[i-1] = 'G' if garland[i-1] == 'R' else 'R'\n            garland[i] = 'G' if garland[i] == 'B' else 'B'\n            garland = ''.join(garland)\n\n        if i == n-1 and garland[i] == garland[i-1]:\n            count += 1\n            garland = list(garland)\n            garland[i-1] = 'G' if garland[i-1] == 'R' else 'R'\n            garland = ''.join(garland)\n\n        if i == 0 and garland[i] == garland[i+1]:\n            count += 1\n            garland = list(garland)\n            garland[i] = 'G' if garland[i] == 'R' else 'R'\n            garland = ''.join(garland)\n\n        if i == n-2 and garland[i] == garland[i+1]:\n            count += 1\n            garland = list(garland)\n            garland[i+1] = 'G' if garland[i+1] == 'R' else 'R'\n            garland = ''.join(garland)\n\n        output.append(garland[i])\n\n    return str(count) + '\\n' + ''.join(output)\n\ninput_data = \"9\\nRBGRRBRGG\\n\"\nprint(solution(input_data))\n\ninput_data = \"8\\nBBBGBRRR\\n\"\nprint(solution(input_data))\n\ninput_data = \"13\\nBBRRRRGGGGGRR\\n\"\nprint(solution(input_data)) "
    },
    {
        "number": 4378,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    s = list(s)\n    count = 0\n\n    for i in range(n - 1):\n        if s[i] == s[i + 1]:\n            s[i] = 'G' if s[i] == 'R' else 'R'\n            count += 1\n\n    return str(count) + '\\n' + ''.join(s)\n\ninput_data = '''\n9\nRBGRRBRGG\n'''\nprint(solution(input_data)) "
    },
    {
        "number": 4378,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split()\n    n = int(n)\n\n    if n == 1:\n        return \"0\\n\" + s\n\n    recolors = 0\n    result = \"\"\n    for i in range(n - 1):\n        if s[i] != s[i + 1]:\n            continue\n        recolors += 1\n        if s[i] == \"R\":\n            result += \"G\"\n        elif s[i] == \"G\":\n            result += \"B\"\n        else:\n            result += \"R\"\n    result += s[-1]\n\n    return str(recolors) + \"\\n\" + result\n"
    },
    {
        "number": 4379,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    array = list(map(int, stdin.split()[1:]))\n\n    max_length = 1\n    max_subsequence = [array[0]]\n\n    for i in range(1, n):\n        if array[i] == array[i-1] + 1:\n            max_subsequence.append(array[i])\n            if len(max_subsequence) > max_length:\n                max_length = len(max_subsequence)\n        else:\n            max_subsequence = [array[i]]\n\n    return str(max_length) + '\\n' + ' '.join(str(array.index(x)+1) for x in max_subsequence)\n"
    },
    {
        "number": 4379,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    nums = list(map(int, stdin.split(\"\\n\")[1].split()))\n    max_length = 0\n    max_indices = []\n    \n    for i in range(n):\n        for j in range(i, n):\n            subseq = nums[i:j+1]\n            if sorted(subseq) == list(range(min(subseq), max(subseq)+1)):\n                if len(subseq) > max_length:\n                    max_length = len(subseq)\n                    max_indices = list(range(i, j+1))\n    return str(max_length) + \"\\n\" + \" \".join(map(str, max_indices))"
    },
    {
        "number": 4379,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    arr = list(map(int, stdin.splitlines()[1].split()))\n\n    def is_increasing(seq):\n        return all(seq[i] + 1 == seq[i + 1] for i in range(len(seq) - 1))\n\n    def find_subsequences(arr):\n        subsequences = []\n        for i in range(len(arr)):\n            for j in range(i + 1, len(arr) + 1):\n                subsequences.append(arr[i:j])\n        return subsequences\n\n    max_length = 1\n    max_subseq = []\n    for subseq in find_subsequences(arr):\n        if is_increasing(subseq) and len(subseq) > max_length:\n            max_length = len(subseq)\n            max_subseq = subseq\n\n    return str(max_length) + \"\\n\" + \" \".join(str(arr.index(x) + 1) for x in max_subseq)"
    },
    {
        "number": 4379,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    \n    max_length = 0\n    for i in range(n):\n        for j in range(i, n):\n            if arr[j] - arr[i] == j - i:\n                max_length = max(max_length, j - i + 1)\n                indices = [str(k + 1) for k in range(i, j + 1)]\n                indices_str = \" \".join(indices)\n                \n    return f\"{max_length}\\n{indices_str}\""
    },
    {
        "number": 4379,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1:]))\n    max_len = 1\n    max_seq = []\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if is_increasing(arr[i:j]):\n                if j-i > max_len:\n                    max_len = j-i\n                    max_seq = [k for k in range(i, j)]\n    return str(max_len) + \"\\n\" + \" \".join(map(str, max_seq))\n\ndef"
    },
    {
        "number": 4379,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    arr = list(map(int, stdin.split('\\n')[1].split()))\n    max_length = 0\n    max_indices = []\n\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            subseq = arr[i:j]\n            if len(set(subseq)) == len(subseq) and len(subseq) > max_length:\n                max_length = len(subseq)\n                max_indices = [i + 1, j]\n\n    return f\"{max_length}\\n{' '.join(str(i) for i in max_indices)}\"\n\n\ndef"
    },
    {
        "number": 4379,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1:]))\n    \n    max_len = 0\n    result = []\n    \n    for i in range(n):\n        for j in range(i, n):\n            if all(arr[k] == arr[k+1]-1 for k in range(j-i)):\n                if max_len < j-i+1:\n                    max_len = j-i+1\n                    result = [i+1, j+1]\n                    \n    return str(max_len) + \"\\n\" + \" \".join(map(str, result))"
    },
    {
        "number": 4379,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    array = list(map(int, stdin.split('\\n')[1].split()))\n\n    max_length = 1\n    max_subsequence = [0]\n\n    for i in range(n):\n        current_length = 1\n        current_subsequence = [i]\n\n        for j in range(i + 1, n):\n            if array[j] == array[j - 1] + 1:\n                current_length += 1\n                current_subsequence.append(j)\n\n            if current_length > max_length:\n                max_length = current_length\n                max_subsequence = current_subsequence\n\n    return str(max_length) + '\\n' + ' '.join(map(str, [i + 1 for i in max_subsequence]))\n\n\ninput_string = \"\"\"\n7\n3 3 4 7 5 6 8\n\"\"\"\noutput = solution(input_string)\nprint(output) "
    },
    {
        "number": 4379,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    array = list(map(int, stdin.split('\\n')[1].split()))\n    max_length = 1\n    result = [array[0]]\n\n    for i in range(1, n):\n        if array[i] - array[i - 1] == 1:\n            max_length += 1\n            if max_length > 1:\n                result.append(array[i])\n        else:\n            max_length = 1\n            result = [array[i]]\n\n    return str(len(result)) + '\\n' + ' '.join(map(str, result))"
    },
    {
        "number": 4379,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    arr = list(map(int, stdin.split('\\n')[1].split()))\n    k = 1\n    indices = []\n    for i in range(n):\n        for j in range(i+1, n+1):\n            subseq = arr[i:j]\n            if subseq == list(range(subseq[0], subseq[-1]+1)):\n                if len(subseq) > k:\n                    k = len(subseq)\n                    indices = list(range(i+1, i+k+1))\n    return str(k) + '\\n' + ' '.join(map(str, indices))\n\ninput_str = input(\"Enter the input:\\n\")\nprint(solution(input_str))"
    },
    {
        "number": 4380,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    for C in range(1, 4):\n        if (A * B * C) % 2 != 0:\n            return \"Yes\"\n    return \"No\"\n\ndef"
    },
    {
        "number": 4380,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n\n    if (A * B) % 2 == 1:\n        return \"Yes\"\n\n    return \"No\""
    },
    {
        "number": 4380,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n\n    for C in range(1, 4):\n        if (A * B * C) % 2 == 1:\n            return \"Yes\"\n\n    return \"No\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    for C in range(1, 4):\n        if (A * B * C) % 2 != 0:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4380,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    \n    for C in range(1, 4):\n        if (A * B * C) % 2 != 0:\n            return \"Yes\"\n    \n    return \"No\""
    },
    {
        "number": 4380,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    for c in range(1, 4):\n        if (a * b * c) % 2 != 0:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4380,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    for C in range(1, 4):\n        if (A * B * C) % 2 != 0:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4380,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    for C in range(1, 4):\n        if (A * B * C) % 2 != 0:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4380,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    for C in range(1, 4):\n        if (A * B * C) % 2 != 0:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4380,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    for C in range(1, 4):\n        if (A * B * C) % 2 != 0:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4381,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    if Y % 2 == 0:\n        half_fare = Y // 2\n        total_cost = X + half_fare\n        return str(total_cost)\n    else:\n        return \"Invalid input. Y must be an even number.\""
    },
    {
        "number": 4381,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    cost_train = x\n    cost_bus = y // 2\n    total_cost = cost_train + cost_bus\n    return str(total_cost) "
    },
    {
        "number": 4381,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    half_fare = Y // 2\n    total_cost = X + half_fare\n    return str(total_cost)"
    },
    {
        "number": 4381,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    return str(x + y // 2)"
    },
    {
        "number": 4381,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    if Y % 2 != 0:\n        return \"Y should be an even number.\"\n    return str(X + Y // 2)"
    },
    {
        "number": 4381,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.strip().split())\n    bus_fare = y // 2\n    total_fare = x + bus_fare\n    return str(total_fare) "
    },
    {
        "number": 4381,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.strip().split())\n    if y % 2 == 0:\n        return str(x + y // 2)\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 4381,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    cost = X + Y // 2\n    return str(cost)"
    },
    {
        "number": 4381,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    return str(x + y // 2)\n\ndef"
    },
    {
        "number": 4381,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    train_fare = x\n    bus_fare = y // 2\n    total_fare = train_fare + bus_fare\n    return str(total_fare)"
    },
    {
        "number": 4382,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                if i != j and j != k and i != k:\n                    count += 1\n    return str(count)"
    },
    {
        "number": 4382,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    return str(n ** 3)"
    },
    {
        "number": 4382,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    num_digits = 3\n    total_passwords = n ** num_digits\n    return str(total_passwords)"
    },
    {
        "number": 4382,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    num_passwords = (N**3)\n    return str(num_passwords)"
    },
    {
        "number": 4382,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    total_passwords = pow(n, 3)\n    return str(total_passwords)"
    },
    {
        "number": 4382,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    total_passwords = N**3\n    return str(total_passwords)"
    },
    {
        "number": 4382,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = (n + 1) * (n + 1)\n    return str(count)"
    },
    {
        "number": 4382,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return (n * (n + 1)) // 2  # formula for sum of first n natural numbers, divided by 2"
    },
    {
        "number": 4382,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    return (N * (N+1)) // 2"
    },
    {
        "number": 4382,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return (n+1) ** 3 - 1"
    },
    {
        "number": 4383,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    if X % 3 == 2:\n        return \"YES\"\n    else:\n        return \"NO\"\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4383,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x == 5 or x == 7 or x == 3:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4383,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    age = int(stdin.strip())\n    if age % 3 == 0 or age % 5 == 0 or age % 7 == 0:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4383,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x == 3 or x == 5 or x == 7:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4383,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    age = int(stdin)\n    if age % 3 == 0 or age % 5 == 0 or age % 7 == 0:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4383,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    age = int(stdin)\n    if age in {3, 5, 7}:\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef"
    },
    {
        "number": 4383,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip())\n    if X in [7, 5, 3]:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4383,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x % 3 == 0 or x % 5 == 0 or x % 7 == 0:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4383,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x % 3 == 0 or x % 5 == 0 or x % 7 == 0:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4383,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    age = int(stdin)\n    if age % 3 == 0 or age % 5 == 0 or age % 7 == 0:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4384,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    \n    if n <= 998:\n        if n <= 99:\n            return \"ABC\" + str(n).zfill(3)\n        elif n <= 199:\n            return \"ABD\" + str(n - 100).zfill(3)\n        else:\n            return \"ABE\" + str(n - 200).zfill(3)\n    else:\n        return \"ABF\" + str(n - 998).zfill(3)\n\ndef"
    },
    {
        "number": 4384,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N <= 998:\n        label = \"ABC\" + str(N).zfill(3)\n    else:\n        label = \"ABD\" + str(N-998).zfill(3)\n    return label[:3]"
    },
    {
        "number": 4384,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N < 1000:\n        return \"ABC\"\n    elif N < 2000:\n        return \"ABD\"\n    else:\n        return \"ABE\""
    },
    {
        "number": 4384,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1000:\n        return \"ABC\"\n    else:\n        return \"ABD\"\n\ndef"
    },
    {
        "number": 4384,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N <= 999:\n        if N // 100 == 0:\n            return \"ABC\"\n        elif N // 100 == 1:\n            return \"ABD\"\n    else:\n        return \"ABE\""
    },
    {
        "number": 4384,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 998:\n        return \"ABC\"\n    elif n <= 1997:\n        return \"ABD\"\n    else:\n        return \"AZE\"\n\n    # if n < 1000:\n    #     return \"ABC\"\n    # elif n < 2000:\n    #     return \"ABD\"\n    # else:\n    #     return \"AZE\"\n\n    # if n % 1000 == 0:\n    #     return \"ABC\"\n    # elif n % 1000 == 1:\n    #     return \"ABD\"\n    # else:\n    #     return \"AZE\"\n\n    # if n >= 1000:\n    #     n -= 1000\n    # if n % 1000 == 0:\n    #     return \"ABC\"\n    # elif n % 1000 == 1:\n    #     return \"ABD\"\n    # else:\n    #     return \"AZE\""
    },
    {
        "number": 4384,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 1 or N > 1998:\n        return \"Invalid input\"\n    elif N < 1000:\n        prefix = \"ABC\"\n    else:\n        prefix = \"ABD\"\n    return prefix + f\"{N % 1000:03d}\""
    },
    {
        "number": 4384,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 1000:\n        prefix = \"ABC\"\n    elif 1000 <= N <= 1998:\n        prefix = \"ABD\"\n        N -= 999\n    else:\n        raise ValueError(\"Invalid input\")\n\n    return prefix + f\"{N:03d}\""
    },
    {
        "number": 4384,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    \n    if N <= 999:\n        if N < 10:\n            return \"AB\" + str(N)\n        elif N < 100:\n            return \"ABC\" + str(N)\n        else:\n            return \"ABD\" + str(N)\n    else:\n        return \"ABE\" + str(N - 1998)"
    },
    {
        "number": 4384,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n >= 1000 and n <= 1998:\n        return \"ABD\"\n    elif n == 1:\n        return \"ABC\"\n    else:\n        return \"ABC\" + str(n - 1).zfill(2)"
    },
    {
        "number": 4385,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = map(int, stdin.split())\n    \n    distances = [\n        b - a,\n        c - b,\n        d - c,\n        e - d,\n        e - b,\n        e - a,\n        d - b,\n        d - a,\n        c - b,\n        c - a,\n        b - a\n    ]\n    \n    for distance in distances:\n        if distance > k:\n            return \":( Cannot communicate directly\"\n    \n    return \"Yay!\""
    },
    {
        "number": 4385,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = map(int, stdin.split())\n    \n    if b - a > k or c - b > k or d - c > k or e - d > k:\n        return \":( There exists a pair of antennas that cannot communicate directly.\"\n    \n    return \"Yay! There is no pair of antennas that cannot communicate directly.\""
    },
    {
        "number": 4385,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = map(int, stdin.split())\n    \n    distances = [b - a, c - b, d - c, e - d]\n    \n    for i in range(len(distances) - 1):\n        if distances[i] > k and distances[i + 1] > k:\n            return \"Yay!\"\n    \n    return \":( The input violates the constraints.\""
    },
    {
        "number": 4385,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = map(int, stdin.split())\n\n    distances = [(b - a), (c - b), (d - c), (e - d)]\n    max_distance = max(distances)\n\n    if max_distance > k:\n        return \":( Yay!\"\n    else:\n        return \"Yay!\""
    },
    {
        "number": 4385,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = map(int, stdin.split())\n\n    def distance(x: int, y: int) -> int:\n        return abs(y - x)\n\n    for i in range(4):\n        if distance(a, b) > k or distance(a, c) > k or distance(a, d) > k or distance(a, e) > k:\n            return \":( No pair can communicate directly.\"\n        a, b, c, d, e = b, c, d, e, b + k\n\n    return \"Yay! All pair can communicate directly.\""
    },
    {
        "number": 4385,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = map(int, stdin.split())\n    distances = [b - a, c - b, d - c, e - d]\n    return \"Yay!\" if all(distance <= k for distance in distances) else \":(\", distances\n"
    },
    {
        "number": 4385,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = map(int, stdin.split())\n\n    distances = [\n        b - a,\n        c - b,\n        d - c,\n        e - d\n    ]\n\n    for distance in distances:\n        if distance > k:\n            return \":( Cannot communicate directly.\"\n\n    return \"Yay!\"\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4385,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = map(int, stdin.split())\n\n    distances = [\n        b - a,\n        c - b,\n        d - c,\n        e - d,\n        e - a\n    ]\n\n    for distance in distances:\n        if distance > k:\n            return \":( Sorry, no pair can communicate directly.\"\n\n    return \"Yay! All pairs can communicate directly.\"\n\ndef"
    },
    {
        "number": 4385,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = map(int, stdin.split())\n    \n    distances = [b - a, c - b, d - c, e - d]\n    \n    for distance in distances:\n        if distance > k:\n            return \":( SORRY\"\n    \n    return \"Yay!\""
    },
    {
        "number": 4385,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = map(int, stdin.split())\n\n    if max(abs(b - a), abs(c - b), abs(d - c), abs(e - d)) <= k:\n        return \"Yay!\"\n    else:\n        return \":( Sorry, there exists a pair of antennas that cannot communicate directly.\"\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4386,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, s = stdin.strip().split('\\n')\n    a = int(a)\n    if a < 3200:\n        return \"red\"\n    else:\n        return s"
    },
    {
        "number": 4386,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, s = stdin.split(\"\\n\")\n    a = int(a)\n    if a < 3200:\n        return \"red\"\n    return s"
    },
    {
        "number": 4386,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, s = stdin.split()\n    a = int(a)\n    \n    if a >= 3200:\n        return s\n    else:\n        return \"red\"\n    \n"
    },
    {
        "number": 4386,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, s = stdin.split(\"\\n\")\n    if int(a) >= 3200:\n        return s\n    else:\n        return \"red\""
    },
    {
        "number": 4386,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, s = stdin.split('\\n')\n    a = int(a)\n    if a >= 3200:\n        return s\n    else:\n        return 'red'"
    },
    {
        "number": 4386,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, s = stdin.strip().split()\n    a = int(a)\n    if a < 3200:\n        return \"red\"\n    else:\n        return s"
    },
    {
        "number": 4386,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, s = stdin.split('\\n')\n    a = int(a)\n    if a >= 3200:\n        return s\n    else:\n        return \"red\"\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4386,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, s = stdin.split()\n    a = int(a)\n    if a < 3200:\n        return \"red\"\n    else:\n        return s"
    },
    {
        "number": 4386,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, s = stdin.split('\\n')\n    a = int(a)\n    if a >= 3200:\n        return s\n    else:\n        return 'red'"
    },
    {
        "number": 4386,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, s = stdin.split()\n    a = int(a)\n    if a < 3200:\n        return \"red\"\n    else:\n        return s"
    },
    {
        "number": 4387,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    rating = int(stdin)\n    \n    if rating < 1200:\n        return \"ABC\"\n    elif rating < 2800:\n        return \"ARC\"\n    else:\n        return \"AGC\""
    },
    {
        "number": 4387,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    if R < 1200:\n        return \"ABC\"\n    elif R < 2800:\n        return \"ARC\"\n    else:\n        return \"AGC\"\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4387,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    rating = int(stdin)\n    if rating < 1200:\n        return \"ABC\"\n    elif rating < 2800:\n        return \"ARC\"\n    else:\n        return \"AGC\""
    },
    {
        "number": 4387,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    rating = int(stdin)\n    \n    if rating < 1200:\n        return \"ABC\"\n    elif rating < 2800:\n        return \"ARC\"\n    else:\n        return \"AGC\""
    },
    {
        "number": 4387,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    if R < 1200:\n        return \"ABC\"\n    elif R < 2800:\n        return \"ARC\"\n    else:\n        return \"AGC\""
    },
    {
        "number": 4387,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    rating = int(stdin)\n    if rating < 1200:\n        return \"ABC\"\n    elif rating < 2800:\n        return \"ARC\"\n    else:\n        return \"AGC\"\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4387,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    if R < 1200:\n        return \"ABC\"\n    elif R < 2800:\n        return \"ARC\"\n    else:\n        return \"AGC\""
    },
    {
        "number": 4387,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    rating = int(stdin)\n    if rating < 1200:\n        return \"ABC\"\n    elif rating < 2800:\n        return \"ARC\"\n    else:\n        return \"AGC\""
    },
    {
        "number": 4387,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    if R < 1200:\n        return \"ABC\"\n    elif R < 2800:\n        return \"ARC\"\n    else:\n        return \"AGC\"\n\ninput_stdin = input()\noutput_stdout = solution(input_stdin)\nprint(output_stdout) "
    },
    {
        "number": 4387,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    if R < 1200:\n        return \"ABC\"\n    elif R < 2800:\n        return \"ARC\"\n    else:\n        return \"AGC\""
    },
    {
        "number": 4388,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n_str = str(n)\n    result = \"\"\n    for digit in n_str:\n        if digit == \"1\":\n            result += \"9\"\n        else:\n            result += \"1\"\n    return result "
    },
    {
        "number": 4388,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    new_n = \"\"\n    for digit in str(n):\n        if digit == \"1\":\n            new_n += \"9\"\n        elif digit == \"9\":\n            new_n += \"1\"\n        else:\n            new_n += digit\n    return new_n"
    },
    {
        "number": 4388,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n_str = str(n)\n    result = \"\"\n\n    for digit in n_str:\n        if digit == \"1\":\n            result += \"9\"\n        else:\n            result += \"1\"\n\n    return result"
    },
    {
        "number": 4388,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n = str(n)\n    new_n = \"\"\n    for digit in n:\n        if digit == \"1\":\n            new_n += \"9\"\n        elif digit == \"9\":\n            new_n += \"1\"\n        else:\n            new_n += digit\n    return new_n"
    },
    {
        "number": 4388,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n_str = str(n)\n    new_n_str = \"\"\n\n    for digit in n_str:\n        if digit == \"1\":\n            new_n_str += \"9\"\n        elif digit == \"9\":\n            new_n_str += \"1\"\n        else:\n            new_n_str += digit\n\n    return int(new_n_str)"
    },
    {
        "number": 4388,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n_str = str(n)\n    result = \"\"\n\n    for digit in n_str:\n        if digit == \"1\":\n            result += \"9\"\n        elif digit == \"9\":\n            result += \"1\"\n        else:\n            result += digit\n\n    return result\n\ndef"
    },
    {
        "number": 4388,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n = str(n)\n    n = n.replace(\"1\", \"9\")\n    n = n.replace(\"9\", \"1\")\n    return n\n\nn = input()\nprint(solution(n)) "
    },
    {
        "number": 4388,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    new_n = \"\"\n    for digit in str(n):\n        if digit == \"1\":\n            new_n += \"9\"\n        elif digit == \"9\":\n            new_n += \"1\"\n        else:\n            new_n += digit\n    return new_n"
    },
    {
        "number": 4388,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    replaced = \"\"\n    for digit in str(n):\n        if digit == \"1\":\n            replaced += \"9\"\n        else:\n            replaced += \"1\"\n    return replaced"
    },
    {
        "number": 4388,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n_str = str(n)\n    result = ''\n    for digit in n_str:\n        if digit == '1':\n            result += '9'\n        elif digit == '9':\n            result += '1'\n        else:\n            result += digit\n    return result"
    },
    {
        "number": 4389,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    lines = stdin.split(\"\\n\")\n    for b in lines[1:]:\n        if len(b) % 2 != 0:\n            return \"Invalid input\"\n        a = \"\"\n        for i in range(0, len(b), 2):\n            a += b[i:i+2]\n        result.append(a)\n    return \"\\n\".join(result)\n\ndef"
    },
    {
        "number": 4389,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    t = int(input_list[0])\n    result = []\n    for i in range(1, t+1):\n        b = input_list[i]\n        substrings_list = []\n        for j in range(len(b)-1):\n            substrings_list.append(b[j:j+2])\n        a = \"\".join(substrings_list)\n        result.append(a)\n    return \"\\n\".join(result)\n\ndef"
    },
    {
        "number": 4389,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    t = int(lines[0])\n    outputs = []\n    \n    for i in range(1, t+1):\n        b = lines[i]\n        a = \"\"\n        for j in range(len(b)-1):\n            substring = b[j:j+2]\n            if substring not in a:\n                a += substring\n        outputs.append(a)\n        \n    return \"\\n\".join(outputs)\n\ndef"
    },
    {
        "number": 4389,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.split('\\n')\n    test_cases = test_cases[1:]\n    \n    result = []\n    for test in test_cases:\n        substrings = []\n        for i in range(len(test) - 1):\n            substrings.append(test[i:i+2])\n        \n        result.append(''.join(substrings))\n    \n    return '\\n'.join(result)\n\nstdin = '''4\nabbaac\nac\nbccddaaf\nzzzzzzzzzz'''\n\nprint(solution(stdin)) # abac\\nac\\nbcdaf\\nzzzzzz "
    },
    {
        "number": 4389,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.split(\"\\n\")\n    result = []\n    for test_case in test_cases[1:]:\n        b = test_case\n        a = \"\"\n        i = 0\n        while i < len(b):\n            a += b[i] + b[i+1]\n            i += 2\n        result.append(a)\n    return \"\\n\".join(result)\n\ninput_string = \"\"\"4\nabbaac\nac\nbccddaaf\nzzzzzzzzzz\"\"\"\nprint(solution(input_string))"
    },
    {
        "number": 4389,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def generate_string(s: str) -> str:\n        pairs = [s[i:i+2] for i in range(len(s)-1)]\n        return ''.join(pairs)\n\n    def find_string(b: str) -> str:\n        for i in range(2, len(b)-1):\n            for j in range(len(b)-i):\n                if generate_string(b[j:j+i]) == b[j+i:j+i+i]:\n                    return b[j:j+i]\n\n    return [find_string(test) for test in stdin.strip().split('\\n')]\n\ndef"
    },
    {
        "number": 4389,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    for i in range(1, t+1):\n        b = lines[i]\n        substrings = []\n        for j in range(2, len(b)+1):\n            for k in range(len(b)-j+1):\n                substrings.append(b[k:k+j])\n        a = \"\".join(substrings)\n        print(a)\n        "
    },
    {
        "number": 4389,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    t = int(stdin[0])\n    result = []\n    for i in range(1, t + 1):\n        b = stdin[i]\n        a = \"\"\n        for j in range(len(b) - 1):\n            if j % 2 == 0:\n                a += b[j]\n        if len(a) == 1:\n            a += b[1]\n        result.append(a)\n    return \"\\n\".join(result)\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4389,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    b = stdin\n    substrings = [\"\".join(b[i:j]) for i in range(len(b)) for j in range(i+2, len(b)+1) if j-i == 2]\n    return \"\".join(substrings)"
    },
    {
        "number": 4389,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.split(\"\\n\")\n    test_cases = test_cases[1:]\n    for test in test_cases:\n        b = test\n        a = \"\"\n        for i in range(len(b)):\n            for j in range(i+1, len(b)+1):\n                if len(b[i:j]) == 2:\n                    a += b[i:j]\n        print(a)"
    },
    {
        "number": 4390,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    results = []\n\n    for i in range(1, t + 1):\n        a, b = map(int, stdin.split('\\n')[i].split())\n\n        if a % b == 0:\n            results.append(0)\n        else:\n            results.append(b - a % b)\n\n    return \"\\n\".join(map(str, results))"
    },
    {
        "number": 4390,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a: int, b: int) -> int:\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n\n    t = int(stdin.readline())\n    result = []\n    for _ in range(t):\n        a, b = map(int, stdin.readline().split())\n        if a % b == 0:\n            result.append(0)\n        else:\n            result.append(b - a % b)\n    return \"\\n\".join(map(str, result))\n\nstdin = open(\"input.txt\", \"r\")\nstdout = open(\"output.txt\", \"w\")\nstdout.write(solution(stdin)) "
    },
    {
        "number": 4390,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.splitlines()[0])\n    results = []\n\n    for i in range(1, cases + 1):\n        a, b = map(int, stdin.splitlines()[i].split())\n        moves = 0\n\n        while a % b != 0:\n            a += 1\n            moves += 1\n\n        results.append(moves)\n\n    return '\\n'.join(map(str, results))\n"
    },
    {
        "number": 4390,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    result = []\n\n    for _ in range(t):\n        a, b = map(int, stdin.split()[1:])\n        moves = 0\n\n        while a % b != 0:\n            a += 1\n            moves += 1\n\n        result.append(str(moves))\n\n    return \"\\n\".join(result)"
    },
    {
        "number": 4390,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def find_lcm(a: int, b: int) -> int:\n        \"\"\"Returns the Least Common Multiple of a and b\"\"\"\n        return (a * b) // math.gcd(a, b)\n\n    def find_min_moves(a: int, b: int) -> int:\n        \"\"\"Returns the minimum number of moves to make a divisible by b\"\"\"\n        lcm = find_lcm(a, b)\n        return lcm // a\n\n    def read_input(stdin: str) -> List[Tuple[int, int]]:\n        \"\"\"Reads input and returns a list of tuples (a, b)\"\"\"\n        test_cases = int(stdin.strip().split(\"\\n\")[0])\n        inputs = stdin.strip().split(\"\\n\")[1:]\n        return [(int(inputs[i]), int(inputs[i+1])) for i in range(0, len(inputs), 2)]\n\n    inputs = read_input(stdin)\n    outputs = [find_min_moves(a, b) for a, b in inputs]\n    return \"\\n\".join(map(str, outputs))"
    },
    {
        "number": 4390,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.splitlines()[0])\n    result = []\n    for i in range(1, t+1):\n        a, b = map(int, stdin.splitlines()[i].split())\n        if a % b == 0:\n            result.append(\"0\")\n        else:\n            result.append(str(b - a % b))\n    return \"\\n\".join(result)"
    },
    {
        "number": 4390,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    outputs = []\n\n    for _ in range(t):\n        a, b = map(int, stdin.split()[1:])\n        moves = a % b\n        if moves == 0:\n            outputs.append(0)\n        else:\n            outputs.append(b - moves)\n\n    return '\\n'.join(map(str, outputs))"
    },
    {
        "number": 4390,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    t = int(lines[0])\n    outputs = []\n\n    for i in range(1, t+1):\n        a, b = map(int, lines[i].split())\n        moves = 0\n\n        while a % b != 0:\n            a += 1\n            moves += 1\n\n        outputs.append(moves)\n\n    return \"\\n\".join(map(str, outputs))"
    },
    {
        "number": 4390,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solves the problem of finding the minimum number of moves required to make a divisible by b\n    :param stdin: input string containing the number of test cases and the a and b values\n    :return: minimum number of moves required to make a divisible by b for each test case\n    \"\"\"\n    def gcd(a, b):\n        \"\"\"\n        Helper function to find the greatest common divisor of two numbers\n        :param a: first number\n        :param b: second number\n        :return: greatest common divisor of a and b\n        \"\"\"\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n\n    def lcm(a, b):\n        \"\"\"\n        Helper function to find the least common multiple of two numbers\n        :param a: first number\n        :param b: second number\n        :return: least common multiple of a and b\n        \"\"\"\n        return (a * b) // gcd(a, b)\n\n    test_cases = int(stdin.splitlines()[0])\n    results = []\n\n    for i in range(1, test_cases + 1):\n        a, b = map(int, stdin.splitlines()[i].split())\n        moves = (b - (a % b)) % b\n        results.append(moves)\n\n    return \"\\n\".join(map(str, results))\n"
    },
    {
        "number": 4390,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.split('\\n')[0])\n    results = []\n\n    for i in range(1, test_cases + 1):\n        a, b = map(int, stdin.split('\\n')[i].split())\n        if a % b == 0:\n            results.append(0)\n        else:\n            results.append(b - a % b)\n\n    return '\\n'.join(map(str, results))"
    },
    {
        "number": 4391,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    def avg(start: int, end: int) -> float:\n        return sum(a[start:end+1]) / (end - start + 1)\n\n    def max_avg_temp(n: int, k: int) -> float:\n        result = 0\n        for i in range(n - k + 1):\n            avg_temp = avg(i, i+k-1)\n            result = max(result, avg_temp)\n        return result\n\n    return str(max_avg_temp(n, k))"
    },
    {
        "number": 4391,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    temperatures = list(map(int, stdin.split()[2:]))\n\n    def average_temperature(start: int, end: int) -> float:\n        return sum(temperatures[start:end + 1]) / (end - start + 1)\n\n    def max_average_temperature(days: int) -> float:\n        return max(average_temperature(i, i + days - 1) for i in range(n - days + 1))\n\n    heat_intensity = max_average_temperature(k)\n\n    return str(heat_intensity)"
    },
    {
        "number": 4391,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.splitlines()[0].split())\n    temperatures = list(map(int, stdin.splitlines()[1].split()))\n\n    def average_temperature(start: int, end: int) -> float:\n        return sum(temperatures[start:end+1]) / (end - start + 1)\n\n    max_heat_intensity = 0\n    for i in range(n - k + 1):\n        max_heat_intensity = max(max_heat_intensity, average_temperature(i, i+k-1))\n\n    return str(max_heat_intensity)"
    },
    {
        "number": 4391,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    temperatures = list(map(int, input().split()))\n\n    heat_intensity = 0\n    for i in range(n - k + 1):\n        segment = temperatures[i:i+k]\n        average_temperature = sum(segment) / k\n        if average_temperature > heat_intensity:\n            heat_intensity = average_temperature\n\n    return str(heat_intensity)\n\ninput_data = \"4 3\\n3 4 1 2\"\noutput_data = solution(input_data)\nprint(output_data) "
    },
    {
        "number": 4391,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    temperatures = list(map(int, input().split()))\n\n    def avg_temperature(start, end):\n        return sum(temperatures[start:end+1]) / (end - start + 1)\n\n    def heat_intensity(n):\n        return max(avg_temperature(i, i+n-1) for i in range(len(temperatures)-n+1))\n\n    return str(heat_intensity(k))\n\ndef"
    },
    {
        "number": 4391,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    temperatures = list(map(int, stdin.split()[2:]))\n    \n    def average_temperature(start: int, end: int) -> float:\n        return sum(temperatures[start:end+1]) / (end - start + 1)\n    \n    def heat_intensity() -> float:\n        max_heat_intensity = float('-inf')\n        for i in range(n - k + 1):\n            heat_intensity = average_temperature(i, i + k - 1)\n            max_heat_intensity = max(max_heat_intensity, heat_intensity)\n        return max_heat_intensity\n    \n    return str(heat_intensity())\n\ninput_data = \"4 3\\n3 4 1 2\"\noutput = solution(input_data)\nprint(output) "
    },
    {
        "number": 4391,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    temperatures = list(map(int, stdin.split()[2:]))\n    \n    def average_temperature(start: int, end: int) -> float:\n        return sum(temperatures[start:end+1]) / (end - start + 1)\n    \n    heat_intensity = 0\n    for i in range(n - k + 1):\n        current_average = average_temperature(i, i + k - 1)\n        if current_average > heat_intensity:\n            heat_intensity = current_average\n    \n    return heat_intensity\n"
    },
    {
        "number": 4391,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    temps = list(map(int, stdin.split()))\n\n    def average_temperature(start: int, end: int) -> float:\n        return sum(temps[start:end + 1]) / (end - start + 1)\n\n    max_heat_intensity = float('-inf')\n    for i in range(n - k + 1):\n        current_heat_intensity = average_temperature(i, i + k - 1)\n        max_heat_intensity = max(max_heat_intensity, current_heat_intensity)\n\n    return f\"{max_heat_intensity:.6f}\""
    },
    {
        "number": 4391,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    temperatures = list(map(int, stdin.split()[2:]))\n    \n    max_intensity = 0\n    for i in range(n - k + 1):\n        average_temperature = sum(temperatures[i:i+k]) / k\n        max_intensity = max(max_intensity, average_temperature)\n    \n    return max_intensity"
    },
    {
        "number": 4391,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    temperatures = list(map(int, input().split()))\n\n    heat_intensity_value = 0\n    for i in range(n - k + 1):\n        average_temperature = sum(temperatures[i:i + k]) / k\n        heat_intensity_value = max(heat_intensity_value, average_temperature)\n\n    return round(heat_intensity_value, 6)\n\nstdin = \"4 3\\n3 4 1 2\"\nprint(solution(stdin)) "
    },
    {
        "number": 4392,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_test_cases = int(stdin.readline().strip())\n    for i in range(num_test_cases):\n        n, m = map(int, stdin.readline().strip().split())\n        a = list(map(int, stdin.readline().strip().split()))\n        p = list(map(int, stdin.readline().strip().split()))\n\n        sorted_a = sorted(a)\n        for position in p:\n            if a[position] > a[position + 1]:\n                a[position], a[position + 1] = a[position + 1], a[position]\n\n        if a == sorted_a:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n"
    },
    {
        "number": 4392,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.split(\"\\n\")\n    result = []\n    \n    for i in range(0, len(test_cases), 3):\n        n, m = map(int, test_cases[i].split())\n        a = list(map(int, test_cases[i+1].split()))\n        p = list(map(int, test_cases[i+2].split()))\n        \n        for j in range(len(p)):\n            a[p[j]], a[p[j]+1] = a[p[j]+1], a[p[j]]\n        \n        if a == sorted(a):\n            result.append(\"YES\")\n        else:\n            result.append(\"NO\")\n            \n    return \"\\n\".join(result)"
    },
    {
        "number": 4392,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def is_sorted(a: List[int]) -> bool:\n        return all(a[i] <= a[i + 1] for i in range(len(a) - 1))\n\n    def swap(a: List[int], i: int, j: int) -> None:\n        a[i], a[j] = a[j], a[i]\n\n    def swap_adjacent(a: List[int], p: Set[int]) -> List[int]:\n        for i in p:\n            swap(a, i, i + 1)\n        return a\n\n    def can_sort(a: List[int], p: List[int]) -> bool:\n        m = len(p)\n        n = len(a)\n        p = set(p)\n        sorted_a = sorted(a)\n\n        for i in range(n - m):\n            if a[i] != sorted_a[i]:\n                return False\n\n        return is_sorted(a) and is_sorted(swap_adjacent(a.copy(), p))\n\n    t = int(stdin.readline())\n    result = []\n\n    for _ in range(t):\n        n, m = map(int, stdin.readline().split())\n        a = list(map(int, stdin.readline().split()))\n        p = list(map(int, stdin.readline().split()))\n\n        if can_sort(a, p):\n            result.append(\"YES\")\n        else:\n            result.append(\"NO\")\n\n    return \"\\n\".join(result)\n\ninput_string = \"\"\"6\n3 2\n3 2 1\n1 2\n4 2\n4 1 2 3\n3 2\n5 1\n1 2 3 4 5\n1\n4 2\n2 1 4 3\n1 3\n4 2\n4 3 2 1\n1 3\n5 2\n2 1 2 3 3\n1 4\n\"\"\"\n\nprint(solution(input_string)) "
    },
    {
        "number": 4392,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    results = []\n\n    for _ in range(t):\n        n, m = map(int, stdin.readline().strip().split())\n        a = list(map(int, stdin.readline().strip().split()))\n        p = list(map(int, stdin.readline().strip().split()))\n\n        for i in range(m):\n            if a[p[i]] > a[p[i] + 1]:\n                a[p[i]], a[p[i] + 1] = a[p[i] + 1], a[p[i]]\n\n        if a == sorted(a):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n\n    return \"\\n\".join(results)\n"
    },
    {
        "number": 4392,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    num_cases = int(lines[0])\n    results = []\n\n    for i in range(1, num_cases + 1):\n        n, m = map(int, lines[3 * i - 2].split())\n        a = list(map(int, lines[3 * i - 1].split()))\n        p = list(map(int, lines[3 * i].split()))\n\n        for pos in p:\n            if a[pos] > a[pos + 1]:\n                a[pos], a[pos + 1] = a[pos + 1], a[pos]\n\n        if a == sorted(a):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n\n    return \"\\n\".join(results)"
    },
    {
        "number": 4392,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_test_cases = int(stdin.readline())\n    results = []\n\n    for _ in range(num_test_cases):\n        n, m = map(int, stdin.readline().split())\n        a = list(map(int, stdin.readline().split()))\n        p = list(map(int, stdin.readline().split()))\n\n        p_set = set(p)\n        for i in range(len(p_set)):\n            if p_set & {p[i] + 1} and a[p[i]] > a[p[i] + 1]:\n                a[p[i]], a[p[i] + 1] = a[p[i] + 1], a[p[i]]\n\n        if a == sorted(a):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n\n    return \"\\n\".join(results)"
    },
    {
        "number": 4392,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.split(\"\\n\")[0])\n    result = []\n\n    for i in range(test_cases):\n        n, m = list(map(int, stdin.split(\"\\n\")[2 + i * 3].split()))\n        a = list(map(int, stdin.split(\"\\n\")[3 + i * 3].split()))\n        p = list(map(int, stdin.split(\"\\n\")[4 + i * 3].split()))\n\n        for j in range(m):\n            a[p[j]], a[p[j] + 1] = a[p[j] + 1], a[p[j]]\n\n        if a == sorted(a):\n            result.append(\"YES\")\n        else:\n            result.append(\"NO\")\n\n    return \"\\n\".join(result)"
    },
    {
        "number": 4392,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    output = []\n    test_cases = int(stdin.splitlines()[0])\n    for i in range(1, test_cases + 1):\n        n, m = map(int, stdin.splitlines()[i * 3 - 2].split())\n        a = list(map(int, stdin.splitlines()[i * 3 - 1].split()))\n        p = list(map(int, stdin.splitlines()[i * 3].split()))\n        swap_count = 0\n\n        for position in p:\n            while a[position] > a[position + 1]:\n                a[position], a[position + 1] = a[position + 1], a[position]\n                swap_count += 1\n\n        if a == sorted(a) and swap_count % 2 == 0:\n            output.append(\"YES\")\n        else:\n            output.append(\"NO\")\n\n    return \"\\n\".join(output)"
    },
    {
        "number": 4392,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split(\"\\n\")\n    t = int(stdin[0])\n    result = []\n\n    for i in range(1, t * 3, 3):\n        n, m = map(int, stdin[i].split())\n        a = list(map(int, stdin[i + 1].split()))\n        p = list(map(int, stdin[i + 2].split()))\n\n        for j in range(m):\n            if a[p[j]] > a[p[j] - 1]:\n                a[p[j]], a[p[j] - 1] = a[p[j] - 1], a[p[j]]\n\n        if a == sorted(a):\n            result.append(\"YES\")\n        else:\n            result.append(\"NO\")\n\n    return \"\\n\".join(result)"
    },
    {
        "number": 4392,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.strip().split('\\n')\n    result = []\n\n    for i in range(0, len(test_cases), 3):\n        n, m = map(int, test_cases[i].split())\n        a = list(map(int, test_cases[i + 1].split()))\n        p = list(map(int, test_cases[i + 2].split()))\n\n        can_sort = True\n        for pos in p:\n            if a[pos] > a[pos + 1]:\n                can_sort = False\n                break\n\n        result.append(\"YES\" if can_sort else \"NO\")\n\n    return \"\\n\".join(result)"
    },
    {
        "number": 4393,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    t = stdin.split('\\n')[1]\n    s = \"\"\n    for i in range(n):\n        s += t[i] * (i + 1)\n    return s\n\nstdin = \"6\\nbaabbb\"\nprint(solution(stdin)) # Output: \"bab\"\n\nstdin = \"10\\noopppssss\"\nprint(solution(stdin)) # Output: \"oops\"\n\nstdin = \"1\\nz\"\nprint(solution(stdin)) # Output: \"z\" "
    },
    {
        "number": 4393,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, t = stdin.split()\n    n = int(n)\n\n    result = \"\"\n    prev = \"\"\n    count = 1\n\n    for i in range(n):\n        if t[i] == prev:\n            count += 1\n        else:\n            result += prev * count\n            prev = t[i]\n            count = 1\n\n    result += prev * count\n\n    return result"
    },
    {
        "number": 4393,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    t = stdin.split()[1]\n    s = \"\"\n    for char in t:\n        if char not in s:\n            s += char * n\n            n -= 1\n    return s\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4393,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    t = stdin.split('\\n')[1]\n    \n    decrypted = \"\"\n    i = 0\n    while i < n:\n        count = 1\n        while count <= len(t) and i < n:\n            decrypted += t[count-1]\n            i += 1\n            count += 1\n    \n    return decrypted"
    },
    {
        "number": 4393,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, encrypted_text = stdin.split()\n    n = int(n)\n\n    decrypted_text = \"\"\n    prev_char = \"\"\n    count = 1\n\n    for char in encrypted_text:\n        if char == prev_char:\n            count += 1\n        else:\n            decrypted_text += prev_char * count\n            prev_char = char\n            count = 1\n\n    decrypted_text += prev_char * count\n\n    return decrypted_text"
    },
    {
        "number": 4393,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    encrypted = [char for char in stdin]\n    decrypted = []\n\n    while encrypted:\n        char, count = encrypted.pop(0), 1\n        while encrypted and encrypted[0] == char:\n            count += 1\n            encrypted.pop(0)\n        decrypted.extend([char] * count)\n\n    return \"\".join(decrypted)"
    },
    {
        "number": 4393,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, encrypted = map(int, stdin.split())\n    decrypted = \"\"\n    for char in encrypted:\n        if char not in decrypted:\n            decrypted += char * (n - len(decrypted))\n    return decrypted"
    },
    {
        "number": 4393,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, encrypted_str = stdin.split()\n    decrypted_str = \"\"\n\n    for char in encrypted_str:\n        decrypted_str += char * encrypted_str.count(char)\n\n    return decrypted_str"
    },
    {
        "number": 4393,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    t = stdin.readline().strip()\n\n    # initialize a dictionary to store the count of each character\n    char_count = {}\n\n    # iterate through the encrypted string and count the frequency of each character\n    for char in t:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # initialize an empty string to store the decrypted string\n    decrypted = \"\"\n\n    # iterate through the dictionary to reconstruct the decrypted string\n    for char, count in char_count.items():\n        decrypted += char * count\n\n    return decrypted\n"
    },
    {
        "number": 4393,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split()\n    n = int(input_data[0])\n    encrypted_string = input_data[1]\n\n    decrypted_string = \"\"\n    for char in encrypted_string:\n        decrypted_string += char * n\n\n    return decrypted_string"
    },
    {
        "number": 4394,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    edges = []\n    for _ in range(m):\n        u, v, w = map(int, stdin.split()[3:])\n        edges.append((u, v, w))\n    \n    def kruskal(edges: List[Tuple[int, int, int]]) -> int:\n        parent = [i for i in range(n+1)]\n        rank = [0] * (n+1)\n        cost = 0\n        mst = []\n        \n        def find(u: int) -> int:\n            if parent[u] != u:\n                parent[u] = find(parent[u])\n            return parent[u]\n        \n        def union(u: int, v: int) -> None:\n            pu, pv = find(u), find(v)\n            if rank[pu] < rank[pv]:\n                parent[pu] = pv\n            elif rank[pu] > rank[pv]:\n                parent[pv] = pu\n            else:\n                parent[pu] = pv\n                rank[pv] += 1\n                \n        edges.sort(key=lambda x: x[2])\n        \n        for u, v, w in edges:\n            if find(u) != find(v):\n                union(u, v)\n                mst.append((u, v, w))\n                cost += w\n        \n        return cost, mst\n    \n    cost, mst = kruskal(edges)\n    \n    operations = 0\n    for u, v, w in edges:\n        if mst.count((u, v)) == 0 and mst.count((v, u)) == 0:\n            operations += 1\n    \n    return str(operations)"
    },
    {
        "number": 4394,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    edges = []\n    for i in range(m):\n        u, v, w = map(int, stdin.split()[3*i+2:3*i+5])\n        edges.append((u, v, w))\n\n    def find_min_weight(cost: int) -> int:\n        min_weight = float('inf')\n        for edge in edges:\n            if edge[2] > cost:\n                min_weight = min(min_weight, edge[2] - cost)\n        return min_weight\n\n    min_cost = find_min_weight(0)\n    min_ops = 0\n    while find_min_weight(min_cost) > 0:\n        min_ops += 1\n        min_cost += 1\n\n    return str(min_ops)"
    },
    {
        "number": 4394,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    edges = []\n    for i in range(m):\n        u, v, w = map(int, input().split())\n        edges.append((u, v, w))\n\n    def mst(edges):\n        n_vertices = len(set(sum(edges, ())))\n        adj_matrix = [[float('inf')] * n_vertices for _ in range(n_vertices)]\n\n        for i in range(len(edges)):\n            adj_matrix[edges[i][0] - 1][edges[i][1] - 1] = edges[i][2]\n            adj_matrix[edges[i][1] - 1][edges[i][0] - 1] = edges[i][2]\n\n        visited = [False] * n_vertices\n        visited[0] = True\n        min_cost = 0\n        mst = []\n\n        for i in range(n_vertices - 1):\n            min_cost_edge = (float('inf'), -1, -1)\n            for j in range(n_vertices):\n                if not visited[j]:\n                    min_cost_edge = min(min_cost_edge, (adj_matrix[0][j], 0, j + 1))\n\n            min_cost += min_cost_edge[0]\n            mst.append(min_cost_edge)\n            visited[min_cost_edge[2] - 1] = True\n\n        return mst\n\n    def find_unified_mst(edges, mst):\n        edge_index = {edge: i for i, edge in enumerate(edges)}\n        unified_mst = []\n\n        for edge in mst:\n            unified_mst.append(edge)\n            while True:\n                neighbors = [(u, v, w) for u, v, w in edges if u == edge[1] or v == edge[1]]\n                if not neighbors:\n                    break\n                neighbor = min(neighbors, key=lambda x: x[2])\n                if edge_index[neighbor] < edge_index[edge]:\n                    edge = neighbor\n                unified_mst.append(edge)\n\n        return unified_mst\n\n    initial_mst = mst(edges)\n    unified_mst = find_unified_mst(edges, initial_mst)\n    min_operations = 0\n\n    for edge in edges:\n        if edge not in unified_mst:\n            min_operations += 1\n\n    return str(min_operations)\n\ninput_data = '''8 10\n1 2 1\n2 3 2\n2 4 5\n1 4 2\n6 3 3\n6 1 3\n3 5 2\n3 7 1\n4 8 1\n6 2 4'''\n\nprint(solution(input_data)) "
    },
    {
        "number": 4394,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    edges = []\n\n    for i in range(m):\n        u, v, w = map(int, stdin.split()[2:])\n        edges.append((u, v, w))\n\n    def find(parent, u):\n        if parent[u] != u:\n            parent[u] = find(parent, parent[u])\n        return parent[u]\n\n    def union(parent, rank, u, v):\n        u_root = find(parent, u)\n        v_root = find(parent, v)\n        if rank[u_root] < rank[v_root]:\n            parent[u_root] = v_root\n        elif rank[u_root] > rank[v_root]:\n            parent[v_root] = u_root\n        else:\n            parent[v_root] = u_root\n            rank[u_root] += 1\n\n    def kruskal(edges):\n        edges.sort(key=lambda x: x[2])\n        parent = [i for i in range(n + 1)]\n        rank = [0] * (n + 1)\n        mst = []\n        for u, v, w in edges:\n            if find(parent, u) != find(parent, v):\n                union(parent, rank, u, v)\n                mst.append((u, v, w))\n        return mst\n\n    mst = kruskal(edges)\n    mst_cost = sum(e[2] for e in mst)\n\n    def modify_edges(edges, k):\n        modified_edges = []\n        for u, v, w in edges:\n            if w - 1 < k:\n                modified_edges.append((u, v, w - 1))\n            else:\n                modified_edges.append((u, v, w))\n        return modified_edges\n\n    min_operations = 0\n    while mst_cost == k:\n        min_operations += 1\n        edges = modify_edges(edges, k)\n        mst = kruskal(edges)\n        mst_cost = sum(e[2] for e in mst)\n\n    return min_operations"
    },
    {
        "number": 4394,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    edges = []\n    for i in range(m):\n        u, v, w = map(int, stdin.split()[3*i+2:3*i+5])\n        edges.append((u, v, w))\n    \n    min_operations = 0\n    for edge in edges:\n        u, v, w = edge\n        min_operations += max(0, w - 1)\n    \n    return str(min_operations)\n\n\ninput_string = \"\"\nwith open('input.txt', 'r') as file:\n    input_string = file.read()\n\noutput_string = solution(input_string)\n\nwith open('output.txt', 'w') as file:\n    file.write(output_string) "
    },
    {
        "number": 4394,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def read_input() -> tuple:\n        n, m = map(int, input().split())\n        edges = []\n        for _ in range(m):\n            u, v, w = map(int, input().split())\n            edges.append((u, v, w))\n        return n, edges\n\n    def find_mst(n: int, edges: list) -> int:\n        edges.sort(key=lambda x: x[2])\n        mst = []\n        visited = [False] * (n + 1)\n        visited[1] = True\n        total_cost = 0\n        for edge in edges:\n            u, v, w = edge\n            if not visited[u]:\n                visited[u] = True\n                mst.append(edge)\n                total_cost += w\n            if not visited[v]:\n                visited[v] = True\n                mst.append(edge)\n                total_cost += w\n            if all(visited):\n                break\n        return total_cost\n\n    def increase_weights(n: int, edges: list, target_cost: int) -> int:\n        edges.sort(key=lambda x: x[2])\n        current_cost = find_mst(n, edges)\n        increase_count = 0\n        i = 0\n        while current_cost != target_cost and i < len(edges):\n            u, v, w = edges[i]\n            edges[i] = (u, v, w + 1)\n            current_cost = find_mst(n, edges)\n            if current_cost == target_cost:\n                return increase_count\n            edges[i] = (u, v, w)\n            i += 1\n            increase_count += 1\n        return -1  # No solution found\n\n    n, edges = read_input()\n    target_cost = find_mst(n, edges)\n    result = increase_weights(n, edges, target_cost)\n    return str(result) if result != -1 else \"Impossible\""
    },
    {
        "number": 4394,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def find(parent, i):\n        if parent[i] == i:\n            return i\n        return find(parent, parent[i])\n\n    def union(parent, rank, x, y):\n        xroot = find(parent, x)\n        yroot = find(parent, y)\n        if xroot == yroot:\n            return False\n        elif rank[xroot] < rank[yroot]:\n            parent[xroot] = yroot\n        elif rank[xroot] > rank[yroot]:\n            parent[yroot] = xroot\n        else:\n            parent[yroot] = xroot\n            rank[xroot] += 1\n        return True\n\n    n, m = map(int, input().split())\n    edges = []\n    for _ in range(m):\n        u, v, w = map(int, input().split())\n        edges.append((u, v, w))\n\n    edges.sort(key=lambda x: x[2])\n    mst_cost = 0\n    mst = []\n    parent = list(range(n + 1))\n    rank = [0] * (n + 1)\n\n    for u, v, w in edges:\n        if find(parent, u) != find(parent, v):\n            union(parent, rank, u, v)\n            mst.append((u, v, w))\n            mst_cost += w\n\n    if mst_cost == k:\n        return 0\n\n    for i, (u, v, w) in enumerate(edges):\n        if find(parent, u) != find(parent, v):\n            new_parent = list(parent)\n            new_rank = list(rank)\n            union(new_parent, new_rank, u, v)\n            if find(new_parent, 1) == find(new_parent, n):\n                return i + 1\n\n    return \"Not possible\" "
    },
    {
        "number": 4394,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    edges = []\n    for _ in range(m):\n        u, v, w = map(int, input().split())\n        edges.append((u, v, w))\n\n    def mst_cost(edges):\n        parent = [-1] * (n + 1)\n        rank = [0] * (n + 1)\n        cost = 0\n\n        def find(u):\n            if parent[u] < 0:\n                return u\n            parent[u] = find(parent[u])\n            return parent[u]\n\n        def union(u, v):\n            u, v = find(u), find(v)\n            if u == v:\n                return False\n            if rank[u] > rank[v]:\n                parent[v] = u\n            else:\n                parent[u] = v\n                if rank[u] == rank[v]:\n                    rank[v] += 1\n            return True\n\n        edges.sort(key=lambda x: x[2])\n        for u, v, w in edges:\n            if union(u, v):\n                cost += w\n\n        return cost\n\n    mst_cost_initial = mst_cost(edges)\n    mst_cost_min = float(\"inf\")\n    for i in range(m):\n        edges_new = edges.copy()\n        edges_new[i] = (edges_new[i][0], edges_new[i][1], edges_new[i][2] + 1)\n        mst_cost_new = mst_cost(edges_new)\n        if mst_cost_new == mst_cost_initial:\n            mst_cost_min = min(mst_cost_min, i)\n\n    return mst_cost_min"
    },
    {
        "number": 4394,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n, m = map(int, input().split())\n    edges = []\n    for i in range(m):\n        u, v, w = map(int, input().split())\n        edges.append((u, v, w))\n\n    # Sort edges by increasing weights\n    sorted_edges = sorted(edges, key=lambda x: x[2])\n\n    # Calculate MST cost\n    mst_cost = 0\n    for u, v, w in sorted_edges:\n        mst_cost += w\n        if not graph_connected(n, sorted_edges):\n            break\n\n    # Find the minimum number of operations to unify MST\n    min_operations = 0\n    for i, (u, v, w) in enumerate(sorted_edges):\n        if mst_cost - w == mst_cost:\n            min_operations = i\n            break\n\n    return str(min_operations)\n\ndef"
    },
    {
        "number": 4394,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    edges = []\n    for i in range(m):\n        u, v, w = map(int, stdin.split()[2:])\n        edges.append((u-1, v-1, w))\n    \n    def find(parent, i):\n        if parent[i] == i:\n            return i\n        return find(parent, parent[i])\n    \n    def union(parent, rank, x, y):\n        xroot = find(parent, x)\n        yroot = find(parent, y)\n        if xroot == yroot:\n            return False\n        if rank[xroot] < rank[yroot]:\n            parent[xroot] = yroot\n        elif rank[xroot] > rank[yroot]:\n            parent[yroot] = xroot\n        else:\n            parent[yroot] = xroot\n            rank[xroot] += 1\n        return True\n    \n    def kruskal(edges, n):\n        parent = [i for i in range(n)]\n        rank = [0] * n\n        mst = []\n        edges.sort(key=lambda x: x[2])\n        for edge in edges:\n            if union(parent, rank, edge[0], edge[1]):\n                mst.append(edge)\n            if len(mst) == n-1:\n                break\n        return mst\n    \n    def increase_weight(edges, x, y, k):\n        for i in range(len(edges)):\n            if edges[i][0] == x and edges[i][1] == y:\n                edges[i] = (edges[i][0], edges[i][1], edges[i][2]+k)\n                break\n        return edges\n    \n    mst = kruskal(edges, n)\n    cost = sum([edge[2] for edge in mst])\n    \n    min_ops = 0\n    for edge in mst:\n        if edge[2] > 1:\n            min_ops += 1\n    \n    for i in range(len(edges)):\n        for j in range(i+1, len(edges)):\n            if edges[i][0] == edges[j][1] and edges[i][1] == edges[j][0]:\n                new_edges = increase_weight(edges[:i]+edges[i+1:j]+edges[j+1:], edges[i][0], edges[i][1], 1)\n                new_mst = kruskal(new_edges, n)\n                new_cost = sum([edge[2] for edge in new_mst])\n                if new_cost == cost and len(new_mst) == len(mst):\n                    min_ops += 1\n    \n    return str(min_ops)"
    },
    {
        "number": 4395,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    garland = stdin.readline().strip()\n    recolors = 0\n    new_garland = \"\"\n\n    for i in range(n):\n        if i % 3 == 0 or garland[i] == garland[i-1]:\n            new_garland += garland[i]\n        else:\n            recolors += 1\n            new_garland += 'R' if garland[i] == 'B' else 'B'\n\n    return f\"{recolors}\\n{new_garland}\""
    },
    {
        "number": 4395,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split()\n    n = int(n)\n    # create a list to store the recolored lamps\n    t = [''] * n\n    # initialize the count of recolored lamps\n    recolor_count = 0\n    # iterate through the garland\n    for i in range(n):\n        # check if the current lamp is red or blue\n        if s[i] == 'R' or s[i] == 'B':\n            # recolor the lamp to green\n            t[i] = 'G'\n            # increment the count of recolored lamps\n            recolor_count += 1\n        else:\n            # keep the original color\n            t[i] = s[i]\n    # check if the recolored garland is nice\n    for i in range(n):\n        for j in range(i + 1, n):\n            if t[i] == t[j] and (j - i) % 3 != 0:\n                # if not nice, recolor the lamps with the same color\n                for k in range(i, j + 1, 3):\n                    if t[k] == 'G':\n                        t[k] = 'R'\n                        recolor_count += 1\n                    elif t[k] == 'R':\n                        t[k] = 'B'\n                        recolor_count += 1\n                    elif t[k] == 'B':\n                        t[k] = 'G'\n                        recolor_count += 1\n                # check again if the recolored garland is nice\n                for k in range(i, j + 1):\n                    for l in range(k + 1, j + 1):\n                        if t[k] == t[l] and (l - k) % 3 != 0:\n                            return \"The garland cannot be made nice\"\n                break\n    # return the minimum number of recolors and the recolored garland\n    return str(recolor_count) + '\\n' + ''.join(t)"
    },
    {
        "number": 4395,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    garland = stdin.split(\"\\n\")[1]\n\n    def is_nice(garland: str) -> bool:\n        colors = {'R': 0, 'G': 0, 'B': 0}\n        for lamp in garland:\n            colors[lamp] += 1\n        for color in colors.values():\n            if color > 1 and color % 3 != 0:\n                return False\n        return True\n\n    def recolor(garland: str) -> str:\n        new_garland = []\n        for i, lamp in enumerate(garland):\n            if lamp == 'R':\n                new_garland.append('G')\n            elif lamp == 'G':\n                new_garland.append('B')\n            elif lamp == 'B':\n                new_garland.append('R')\n        return ''.join(new_garland)\n\n    def min_recolors(garland: str) -> int:\n        if is_nice(garland):\n            return 0\n        for i in range(n):\n            new_garland = garland[:i] + recolor(garland[i]) + garland[i+1:]\n            if is_nice(new_garland):\n                return 1 + min_recolors(new_garland)\n        return 1 + min_recolors(recolor(garland))\n\n    return str(min_recolors(garland)) + \"\\n\" + recolor(garland)\n\ninput_str = \"7\\nRGBGRBB\"\nprint(solution(input_str)) "
    },
    {
        "number": 4395,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n = int(stdin.split(\"\\n\")[0])\n    garland = stdin.split(\"\\n\")[1]\n    \n    # Count colors and create color map\n    color_map = {\"R\": 0, \"G\": 0, \"B\": 0}\n    for color in garland:\n        color_map[color] += 1\n    \n    # Determine recoloring\n    recolor_count = 0\n    for color, count in color_map.items():\n        if count > 0:\n            recolor_count += count\n            color_map[color] = 0\n    \n    # Create recolored garland\n    new_garland = \"\"\n    for color in garland:\n        if color == \"R\":\n            new_garland += \"G\"\n        elif color == \"G\":\n            new_garland += \"R\"\n        else:\n            new_garland += \"B\"\n    \n    # Check if recolored garland is nice\n    is_nice = True\n    for i in range(1, n):\n        if new_garland[i] == new_garland[i-1]:\n            is_nice = False\n            break\n        if abs(i - i-1) % 3 != 0:\n            is_nice = False\n            break\n    \n    # Print output\n    if is_nice:\n        return f\"{recolor_count}\\n{new_garland}\"\n    else:\n        return \"Impossible\" "
    },
    {
        "number": 4395,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    garland = stdin.split('\\n')[1]\n\n    def is_nice(t: str) -> bool:\n        for i in range(n - 1):\n            if t[i] == t[i + 1] and (i - j) % 3 != 0:\n                return False\n        return True\n\n    min_recolors = n\n    min_garland = garland\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            t = list(garland)\n            if garland[i] == garland[j]:\n                continue\n            t[i] = garland[j]\n            t[j] = garland[i]\n            t = ''.join(t)\n\n            if is_nice(t):\n                recolors = sum([1 for k in range(n) if garland[k] != t[k]])\n                if recolors < min_recolors:\n                    min_recolors = recolors\n                    min_garland = ''.join(t)\n\n    return str(min_recolors) + '\\n' + min_garland"
    },
    {
        "number": 4395,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    garland = stdin.split('\\n')[1]\n    \n    # Recolor the lamps until the garland is nice\n    recolored = 0\n    while not is_nice(garland):\n        garland = recolor(garland)\n        recolored += 1\n    \n    # Print the result\n    result = f\"{recolored}\\n{garland}\"\n    return result\n\ndef"
    },
    {
        "number": 4395,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, garland = stdin.split('\\n')\n    n = int(n)\n    colors = {'R': [], 'G': [], 'B': []}\n    for i in range(n):\n        colors[garland[i]].append(i)\n\n    def min_recolors(colors: dict) -> int:\n        min_count = float('inf')\n        for color, lamp_indexes in colors.items():\n            for i in range(1, len(lamp_indexes), 2):\n                if lamp_indexes[i] - lamp_indexes[i - 1] > 0:\n                    if (lamp_indexes[i] - lamp_indexes[i - 1]) % 3 != 0:\n                        min_count = min(min_count, 1)\n                    else:\n                        min_count = min(min_count, 0)\n                else:\n                    if (lamp_indexes[i - 1] - lamp_indexes[i]) % 3 != 0:\n                        min_count = min(min_count, 1)\n                    else:\n                        min_count = min(min_count, 0)\n        return min_count\n\n    def recolor(garland: str, colors: dict) -> str:\n        garland_list = list(garland)\n        for color, lamp_indexes in colors.items():\n            for i in lamp_indexes:\n                if garland_list[i] != color:\n                    garland_list[i] = color\n        return ''.join(garland_list)\n\n    min_count = min_recolors(colors)\n    new_garland = recolor(garland, colors)\n\n    return str(min_count) + '\\n' + new_garland"
    },
    {
        "number": 4395,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    \n    # Create a list to store the original and recolored garland\n    garland = [None] * n\n    recolored = [None] * n\n    \n    # Initialize the original garland\n    for i in range(n):\n        garland[i] = s[i]\n    \n    # Initialize the recolored garland with the original one\n    for i in range(n):\n        recolored[i] = garland[i]\n        \n    # Set the number of recolored lamps to zero\n    recolored_lamps = 0\n    \n    # Iterate through the garland to find the minimum number of recolored lamps\n    for i in range(n):\n        if i > 0 and (garland[i] == garland[i-1] or recolored[i] == recolored[i-1]):\n            continue\n        if garland[i] == 'R' and recolored[i] == 'G':\n            recolored[i] = 'B'\n            recolored_lamps += 1\n        elif garland[i] == 'G' and recolored[i] == 'B':\n            recolored[i] = 'R'\n            recolored_lamps += 1\n        elif garland[i] == 'B' and recolored[i] == 'R':\n            recolored[i] = 'G'\n            recolored_lamps += 1\n            \n    # Check if the garland is already nice\n    if all(recolored[i] != recolored[i-1] for i in range(1, n) if recolored[i] == recolored[i-1]) and all(recolored[i] != recolored[i+1] for i in range(n-1) if recolored[i] == recolored[i+1]):\n        return f\"0\\n{''.join(recolored)}\"\n    \n    # Iterate through the garland again to find the minimum number of recolored lamps\n    for i in range(n):\n        if i > 0 and (recolored[i] == recolored[i-1] or recolored[i] == garland[i]):\n            continue\n        if recolored[i] == 'R' and garland[i] == 'G':\n            recolored[i] = 'B'\n            recolored_lamps += 1\n        elif recolored[i] == 'G' and garland[i] == 'B':\n            recolored[i] = 'R'\n            recolored_lamps += 1\n        elif recolored[i] == 'B' and garland[i] == 'R':\n            recolored[i] = 'G'\n            recolored_lamps += 1\n            \n    # Return the minimum number of recolored lamps and the resulting garland\n    return f\"{recolored_lamps}\\n{''.join(recolored)}\""
    },
    {
        "number": 4395,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin.readline().strip())\n    garland = stdin.readline().strip()\n    \n    # Initialize variables\n    recolor_count = 0\n    nice_garland = garland\n    \n    # Iterate through the garland\n    for i in range(n):\n        # Check if the lamp is not already nice\n        if garland[i] != 'R' and garland[i] != 'G' and garland[i] != 'B':\n            # Choose a color that is not the same as the current lamp\n            if garland[i] == 'R':\n                new_color = 'B'\n            elif garland[i] == 'G':\n                new_color = 'R'\n            else:\n                new_color = 'G'\n            \n            # Re-color the lamp\n            nice_garland = nice_garland[:i] + new_color + nice_garland[i+1:]\n            recolor_count += 1\n            \n    return str(recolor_count) + '\\n' + nice_garland"
    },
    {
        "number": 4395,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, garland = stdin.split(\"\\n\")\n    n = int(n)\n    \n    def can_be_nice(index: int) -> bool:\n        if index == 0 or index == n - 1:\n            return True\n        if garland[index] == garland[index - 1] or garland[index] == garland[index + 1]:\n            return False\n        return True\n\n    def is_nice(garland: str) -> bool:\n        for i in range(n):\n            if not can_be_nice(i):\n                return False\n        return True\n\n    for i in range(n):\n        if can_be_nice(i):\n            for color in ['R', 'G', 'B']:\n                new_garland = garland[:i] + color + garland[i + 1:]\n                if is_nice(new_garland):\n                    return str(n - i - 1) + \"\\n\" + new_garland\n    return str(0) + \"\\n\" + garland"
    },
    {
        "number": 4396,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    total = 0\n\n    for i in range(1, N + 1):\n        x, u = lines[i].split()\n        if u == 'JPY':\n            total += int(x)\n        else:\n            total += float(x) * 380000.0\n\n    return str(total)"
    },
    {
        "number": 4396,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    n = int(lines[0])\n    total = 0\n    \n    for i in range(1, n+1):\n        x, u = lines[i].split()\n        if u == \"JPY\":\n            total += int(x)\n        else:\n            total += float(x) * 380000\n    \n    return f\"{total:.1f}\"\n\ninput_data = \"\"\"2\n10000 JPY\n0.10000000 BTC\"\"\"\nprint(solution(input_data)) # Output: 48000.0 "
    },
    {
        "number": 4396,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    total = 0\n    jpy_rate = 380000.0\n\n    for i in range(1, n+1):\n        x, u = stdin.split('\\n')[i].split()\n        if u == \"JPY\":\n            total += float(x)\n        else:\n            total += float(x) * jpy_rate\n\n    return f\"{total:.1f}\""
    },
    {
        "number": 4396,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N = int(lines[0])\n    total = 0\n    \n    for i in range(1, N+1):\n        x, u = lines[i].split()\n        if u == \"JPY\":\n            total += int(x)\n        elif u == \"BTC\":\n            total += float(x) * 380000.0\n    \n    return str(round(total, 5))"
    },
    {
        "number": 4396,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    total = 0\n\n    for i in range(1, N + 1):\n        x, u = lines[i].split()\n\n        if u == \"JPY\":\n            total += int(x)\n        else:\n            total += float(x) * 380000.0\n\n    return \"{:.5f}\".format(total)\n\n\ndef"
    },
    {
        "number": 4396,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    total_yen = 0\n    \n    for i in range(1, N+1):\n        x, u = lines[i].split()\n        if u == \"JPY\":\n            total_yen += int(x)\n        elif u == \"BTC\":\n            total_yen += float(x) * 380000.0\n    \n    return f\"{total_yen:.1f}\""
    },
    {
        "number": 4396,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def convert_btc_to_jpy(btc_amount: float) -> float:\n        return btc_amount * 380000.0\n\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    total_jpy = 0\n\n    for i in range(1, n + 1):\n        x, u = lines[i].split()\n        if u == \"JPY\":\n            total_jpy += float(x)\n        else:\n            total_jpy += convert_btc_to_jpy(float(x))\n\n    return f\"{total_jpy:.5f}\""
    },
    {
        "number": 4396,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    total_yen = 0\n    \n    for i in range(1, n+1):\n        tokens = lines[i].split()\n        amount = float(tokens[0])\n        currency = tokens[1]\n        \n        if currency == 'JPY':\n            total_yen += amount\n        elif currency == 'BTC':\n            total_yen += amount * 380000.0\n    \n    return f\"{total_yen:.1f}\""
    },
    {
        "number": 4396,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    gifts = []\n    for i in range(1, n+1):\n        amount, unit = lines[i].split()\n        if unit == 'JPY':\n            gifts.append(float(amount))\n        elif unit == 'BTC':\n            gifts.append(float(amount) * 380000.0)\n    \n    # Calculate the total worth\n    total_worth = sum(gifts)\n    \n    # Return the output\n    return str(total_worth)"
    },
    {
        "number": 4396,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    total_yen = 0\n\n    for i in range(1, n + 1):\n        x, u = lines[i].split(' ')\n        if u == 'JPY':\n            total_yen += int(x)\n        elif u == 'BTC':\n            btc_value = float(x) * 380000.0\n            total_yen += btc_value\n\n    return '{:.1f}'.format(total_yen)"
    },
    {
        "number": 4397,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, i = map(int, stdin.split())\n    j = N - (i - 1)\n    return str(j)"
    },
    {
        "number": 4397,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, i = map(int, stdin.split())\n    j = 2 * (N - i + 1) - 1\n    return str(j)"
    },
    {
        "number": 4397,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, i = map(int, stdin.split())\n    j = N - i + 1\n    return j"
    },
    {
        "number": 4397,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, i = map(int, stdin.split())\n    \n    j = N - i + 1\n    \n    return j"
    },
    {
        "number": 4397,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, i = map(int, stdin.split())\n    j = N - i + 1\n    return str(j)"
    },
    {
        "number": 4397,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, i = map(int, stdin.split())\n    j = 2 * i - 1\n    if j > N:\n        return -1\n    return j"
    },
    {
        "number": 4397,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, i = map(int, stdin.split())\n    j = i + (N - i)\n    return str(j)"
    },
    {
        "number": 4397,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, i = map(int, stdin.split())\n    j = n - i + 1\n    return j"
    },
    {
        "number": 4397,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, i = map(int, stdin.split())\n    j = N - (i - 1)\n    return j"
    },
    {
        "number": 4397,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, i = map(int, stdin.split())\n    j = N - i + 1\n    return j"
    },
    {
        "number": 4398,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, s_t = stdin.split()\n    N = int(N)\n    s, t = s_t.split()\n    new_string = \"\"\n\n    for i in range(N):\n        new_string += s[i]\n        new_string += t[i]\n\n    return new_string"
    },
    {
        "number": 4398,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, S, T = stdin.split()\n    N = int(N)\n    new_string = \"\"\n    for i in range(N):\n        new_string += S[i]\n        new_string += T[i]\n    return new_string"
    },
    {
        "number": 4398,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    s, t = stdin.split('\\n')[1].split(' ')\n    new_str = ''\n\n    for i in range(N):\n        new_str += s[i]\n        new_str += t[i]\n\n    return new_str"
    },
    {
        "number": 4398,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    S, T = stdin.split('\\n')[1].split(' ')\n    result = ''\n\n    for i in range(N):\n        result += S[i] + T[i]\n\n    return result"
    },
    {
        "number": 4398,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, s, t = stdin.split()\n    N = int(N)\n    new_string = \"\"\n    for i in range(N):\n        new_string += s[i]\n        new_string += t[i]\n    return new_string\n\ndef"
    },
    {
        "number": 4398,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    s, t = stdin.split(\"\\n\")[1].split()\n    result = \"\"\n\n    for i in range(N):\n        result += s[i]\n        result += t[i]\n\n    return result\n\nstdin = \"2\\nip cc\"\nprint(solution(stdin))  # Output: \"icpc\" "
    },
    {
        "number": 4398,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split(\"\\n\")\n    N = int(input_lines[0])\n    s, t = input_lines[1].split()\n    \n    new_string = \"\"\n    for i in range(N):\n        new_string += s[i]\n        new_string += t[i]\n    \n    return new_string"
    },
    {
        "number": 4398,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    s = stdin.split()[1]\n    t = stdin.split()[2]\n    \n    new_string = \"\"\n    for i in range(N):\n        new_string += s[i] + t[i]\n        \n    return new_string\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4398,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s, t = stdin.split('\\n')[1].split(' ')\n    result = ''\n    for i in range(n):\n        result += s[i] + t[i]\n    return result"
    },
    {
        "number": 4398,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    s, t = stdin.split()[1], stdin.split()[2]\n    new_string = \"\"\n    for i in range(N):\n        new_string += s[i]\n        new_string += t[i]\n    return new_string"
    },
    {
        "number": 4399,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    operators = {'A': 'Company A', 'B': 'Company B'}\n    stations = {1: None, 2: None, 3: None}\n\n    for index, operator in enumerate(stdin):\n        station_number = index + 1\n        stations[station_number] = operators[operator]\n\n    if stations[1] == stations[2] != stations[3] and stations[2] == stations[3] != stations[1]:\n        return 'Yes'\n    elif stations[1] == stations[3] != stations[2] and stations[3] == stations[2] != stations[1]:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4399,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    if stdin[0] == stdin[2]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4399,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S = list(stdin)\n    if S.count('A') == 1 and S.count('B') == 1:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4399,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Convert the input string to a list of characters\n    stations = list(stdin)\n    \n    # Check if there is a pair of stations that will be connected by a bus service\n    if (stations[0] == 'A' and stations[1] == 'B') or (stations[1] == 'A' and stations[2] == 'B') or (stations[0] == 'B' and stations[2] == 'A'):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4399,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    for i in range(1, len(s), 2):\n        if s[i-1] == \"A\" and s[i] == \"B\":\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4399,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.count(\"A\") >= 2 and stdin.count(\"B\") >= 2:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4399,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S = list(stdin)\n    A = 0\n    B = 0\n    \n    for s in S:\n        if s == 'A':\n            A += 1\n        else:\n            B += 1\n    \n    if A == 1 or B == 1:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4399,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    S = list(stdin)\n    if S[0] == S[2] and S[1] == \"A\":\n        return \"Yes\"\n    if S[0] == S[2] and S[1] == \"B\":\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4399,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    for i in range(len(s)):\n        if s[i] == \"A\" and (i == 0 or s[i-1] == \"B\") and (i == 2 or s[i+1] == \"B\"):\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4399,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S = list(stdin)\n    if S[0] == \"A\" and S[1] == \"B\" or S[1] == \"A\" and S[2] == \"B\":\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4400,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    rainy_days = 0\n    max_rainy_days = 0\n    for day in stdin:\n        if day == 'R':\n            rainy_days += 1\n            if rainy_days > max_rainy_days:\n                max_rainy_days = rainy_days\n        else:\n            rainy_days = 0\n    return str(max_rainy_days)\n\ninput_string = input()\noutput = solution(input_string)\nprint(output) "
    },
    {
        "number": 4400,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    S = list(stdin)\n    rainy_count = 0\n    max_rainy_count = 0\n\n    for day in S:\n        if day == \"R\":\n            rainy_count += 1\n        else:\n            max_rainy_count = max(max_rainy_count, rainy_count)\n            rainy_count = 0\n\n    return max(max_rainy_count, rainy_count)"
    },
    {
        "number": 4400,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    rainy_days = 0\n    max_rainy_days = 0\n\n    for day in stdin:\n        if day == \"R\":\n            rainy_days += 1\n            max_rainy_days = max(max_rainy_days, rainy_days)\n        else:\n            rainy_days = 0\n\n    return max_rainy_days "
    },
    {
        "number": 4400,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    max_count = 0\n    current_count = 0\n\n    for day in stdin:\n        if day == 'R':\n            current_count += 1\n            max_count = max(max_count, current_count)\n        else:\n            current_count = 0\n\n    return max_count"
    },
    {
        "number": 4400,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    rainy_days = 0\n    max_rainy_days = 0\n\n    for day in stdin:\n        if day == \"R\":\n            rainy_days += 1\n            if rainy_days > max_rainy_days:\n                max_rainy_days = rainy_days\n        else:\n            rainy_days = 0\n\n    return max_rainy_days"
    },
    {
        "number": 4400,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    rainy_days = 0\n    max_rainy_days = 0\n    for day in stdin:\n        if day == 'R':\n            rainy_days += 1\n            max_rainy_days = max(max_rainy_days, rainy_days)\n        else:\n            rainy_days = 0\n    return max_rainy_days "
    },
    {
        "number": 4400,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    max_rainy = 0\n    current_rainy = 0\n    for char in stdin:\n        if char == 'R':\n            current_rainy += 1\n        else:\n            max_rainy = max(max_rainy, current_rainy)\n            current_rainy = 0\n    return max(max_rainy, current_rainy)\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4400,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    rainy_days = 0\n    max_consecutive_rainy_days = 0\n\n    for day in stdin:\n        if day == \"R\":\n            rainy_days += 1\n            max_consecutive_rainy_days = max(max_consecutive_rainy_days, rainy_days)\n        else:\n            rainy_days = 0\n\n    return max_consecutive_rainy_days"
    },
    {
        "number": 4400,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S = list(stdin)\n    count = 0\n    max_count = 0\n\n    for day in S:\n        if day == \"R\":\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 0\n\n    return max(max_count, count)"
    },
    {
        "number": 4400,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    rainy_days = 0\n    max_rainy_days = 0\n    for day in stdin:\n        if day == \"R\":\n            rainy_days += 1\n        else:\n            max_rainy_days = max(max_rainy_days, rainy_days)\n            rainy_days = 0\n    return max(max_rainy_days, rainy_days)\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4401,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = list(map(int, stdin.split()))\n    a, b, c = x, y, z\n    a, b = b, a  # Swap A and B\n    a, c = c, a  # Swap A and C\n    return \"{} {} {}\".format(a, b, c)  # Print the final result\n\ndef"
    },
    {
        "number": 4401,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    \n    # swap A and B\n    a, b = x, y\n    x, y = b, a\n    \n    # swap A and C\n    a, c = x, z\n    x, z = c, a\n    \n    return f\"{x} {y} {z}\""
    },
    {
        "number": 4401,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    a, b, c = x, y, z\n    # swap A and B\n    a, b = b, a\n    # swap A and C\n    a, c = c, a\n    return f\"{a} {b} {c}\"\n\ndef"
    },
    {
        "number": 4401,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    X, Y, Z = map(int, stdin.strip().split())\n\n    # Swap the contents of boxes A and B\n    A, B = Y, X\n\n    # Swap the contents of boxes A and C\n    A, C = Z, A\n\n    return f\"{A} {B} {C}\""
    },
    {
        "number": 4401,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    x, y, z = map(int, stdin.split())\n    \n    # Swap contents of boxes A and B\n    x, y = y, x\n    \n    # Swap contents of boxes A and C\n    x, z = z, x\n    \n    # Return the final contents of the boxes\n    return \" \".join(map(str, [x, y, z]))"
    },
    {
        "number": 4401,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    X, Y, Z = map(int, stdin.split())\n    A, B, C = X, Y, Z\n\n    # swap A and B\n    A, B = B, A\n\n    # swap A and C\n    A, C = C, A\n\n    return f\"{A} {B} {C}\"\n\ndef"
    },
    {
        "number": 4401,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    x, y, z = map(int, stdin.split())\n    \n    # Perform operations\n    a, b, c = x, y, z\n    a, b = b, a\n    a, c = c, a\n    \n    # Return result\n    return f\"{a} {b} {c}\""
    },
    {
        "number": 4401,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    a, b, c = x, y, z\n    a, b = b, a\n    a, c = c, a\n    return f\"{a} {b} {c}\"\n\ninput_data = input()\nresult = solution(input_data)\nprint(result) "
    },
    {
        "number": 4401,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    \n    # Swap the contents of the boxes A and B\n    a = y\n    b = x\n    \n    # Swap the contents of the boxes A and C\n    a = z\n    c = b\n    b = y\n    \n    return f\"{a} {b} {c}\"\n\ninput_data = input()\nprint(solution(input_data)) "
    },
    {
        "number": 4401,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X, Y, Z = map(int, stdin.strip().split())\n    A, B, C = X, Y, Z\n    A, B = B, A  # swap A and B\n    A, C = C, A  # swap A and C\n    return \" \".join(map(str, [A, B, C]))"
    },
    {
        "number": 4402,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    age, price = map(int, stdin.split())\n    \n    if age < 6:\n        return \"0\"\n    elif age <= 12:\n        return str(price // 2)\n    elif age >= 13:\n        return str(price)\n    else:\n        return \"Invalid Age\"\n    \n"
    },
    {
        "number": 4402,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if 0 <= A <= 100 and 2 <= B <= 1000 and B % 2 == 0:\n        if A >= 13:\n            return str(B) + \" (full price)\"\n        elif 6 <= A <= 12:\n            return str(B // 2) + \" (half price)\"\n        else:\n            return \"Free\"\n    else:\n        return \"Invalid Input\"\n\ndef"
    },
    {
        "number": 4402,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A <= 5:\n        return \"0\"\n    elif 6 <= A <= 12:\n        return str(B // 2)\n    elif A >= 13:\n        return str(B)"
    },
    {
        "number": 4402,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    \n    if A <= 5:\n        return 0\n    elif A <= 12:\n        return B // 2\n    else:\n        return B\n    \n    \nstdin = input(\"Input (A B): \")\ncost = solution(stdin)\nprint(cost)"
    },
    {
        "number": 4402,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    age, cost = map(int, stdin.split())\n    \n    if age <= 5:\n        return \"0\"\n    elif 6 <= age <= 12:\n        return str(cost // 2)\n    else:\n        return str(cost)\n    \n"
    },
    {
        "number": 4402,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A <= 5:\n        return \"0\"\n    elif A <= 12:\n        return str(B // 2)\n    else:\n        return str(B)"
    },
    {
        "number": 4402,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A <= 5:\n        return \"0\"\n    elif A <= 12:\n        return str(B // 2)\n    else:\n        return str(B)"
    },
    {
        "number": 4402,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n\n    if A < 6:\n        return \"0\"\n    elif A < 13:\n        return str(B // 2)\n    else:\n        return str(B)"
    },
    {
        "number": 4402,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A <= 5:\n        cost = 0\n    elif A <= 12:\n        cost = B / 2\n    else:\n        cost = B\n    return str(cost)"
    },
    {
        "number": 4402,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A < 6:\n        return \"0\"\n    elif A <= 12:\n        return str(B // 2)\n    elif A >= 13:\n        return str(B)"
    },
    {
        "number": 4403,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    initial_value = 0\n    for symbol in stdin:\n        if symbol == \"+\":\n            initial_value += 1\n        else:\n            initial_value -= 1\n    return str(initial_value)"
    },
    {
        "number": 4403,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    takahashi_mind = 0\n    for symbol in stdin:\n        if symbol == \"+\":\n            takahashi_mind += 1\n        else:\n            takahashi_mind -= 1\n    return str(takahashi_mind)"
    },
    {
        "number": 4403,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    takahashi_mind = 0\n\n    for symbol in s:\n        if symbol == \"+\":\n            takahashi_mind += 1\n        else:\n            takahashi_mind -= 1\n\n    return str(takahashi_mind)"
    },
    {
        "number": 4403,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    takahashi_mind = 0\n    for symbol in stdin:\n        if symbol == \"+\":\n            takahashi_mind += 1\n        elif symbol == \"-\":\n            takahashi_mind -= 1\n    return str(takahashi_mind)\n\ndef"
    },
    {
        "number": 4403,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    num = 0\n    for i in s:\n        if i == '+':\n            num += 1\n        else:\n            num -= 1\n    return str(num)\n\ninput_string = input()\nprint(solution(input_string)) "
    },
    {
        "number": 4403,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    takahashi_mind = 0\n    for symbol in stdin:\n        if symbol == '+':\n            takahashi_mind += 1\n        else:\n            takahashi_mind -= 1\n    return str(takahashi_mind)"
    },
    {
        "number": 4403,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Convert the input string into a list of symbols\n    symbols = list(stdin)\n\n    # Initialize the integer in Takahashi's mind to 0\n    mind = 0\n\n    # Loop through each symbol and update the integer in Takahashi's mind\n    for symbol in symbols:\n        if symbol == \"+\":\n            mind += 1\n        else:\n            mind -= 1\n\n    # Return the final value of the integer in Takahashi's mind\n    return mind"
    },
    {
        "number": 4403,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    for char in stdin:\n        if char == '+':\n            result += 1\n        else:\n            result -= 1\n    return str(result)"
    },
    {
        "number": 4403,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    Takahashi_mind = 0\n    for symbol in stdin:\n        if symbol == '+':\n            Takahashi_mind += 1\n        else:\n            Takahashi_mind -= 1\n    return str(Takahashi_mind)"
    },
    {
        "number": 4403,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    takahashi_mind = 0\n    for symbol in stdin:\n        if symbol == '+':\n            takahashi_mind += 1\n        else:\n            takahashi_mind -= 1\n    return str(takahashi_mind)"
    },
    {
        "number": 4404,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    year, month, day = map(int, stdin.split(\"/\"))\n    if year == 2019 and month < 4 or year < 2019:\n        return \"TBD\"\n    else:\n        return \"Heisei\"\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4404,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    year, month, day = stdin.split(\"/\")\n    year, month, day = int(year), int(month), int(day)\n    \n    if year == 2019 and month == 4 and day <= 30:\n        return \"Heisei\"\n    else:\n        return \"TBD\""
    },
    {
        "number": 4404,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    year, month, day = map(int, stdin.split(\"/\"))\n\n    if year <= 2019 and month <= 4 and day <= 30:\n        return \"Heisei\"\n    else:\n        return \"TBD\""
    },
    {
        "number": 4404,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    date_str = stdin.strip()\n    year, month, day = map(int, date_str.split('/'))\n\n    if year == 2019 and month < 4 or (month == 4 and day <= 30):\n        return \"Heisei\"\n    else:\n        return \"TBD\"\n\ndef"
    },
    {
        "number": 4404,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    year, month, day = (int(x) for x in stdin.split('/'))\n    \n    if year == 2019 and month <= 4 and day <= 30:\n        return \"Heisei\"\n    else:\n        return \"TBD\""
    },
    {
        "number": 4404,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    date_str = stdin.strip()\n    year, month, day = map(int, date_str.split('/'))\n\n    if year == 2019 and month == 4 and day <= 30:\n        return \"Heisei\"\n    else:\n        return \"TBD\""
    },
    {
        "number": 4404,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    target_date = \"2019/04/30\"\n    if stdin <= target_date:\n        return \"Heisei\"\n    else:\n        return \"TBD\""
    },
    {
        "number": 4404,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    year, month, day = stdin.split('/')\n    year, month, day = int(year), int(month), int(day)\n    if year == 2019 and month == 4 and day <= 30:\n        return \"Heisei\"\n    else:\n        return \"TBD\""
    },
    {
        "number": 4404,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    target_date = \"2019/04/30\"\n    if stdin <= target_date:\n        return \"Heisei\"\n    else:\n        return \"TBD\""
    },
    {
        "number": 4404,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    import datetime\n\n    year, month, day = (int(i) for i in stdin.split(\"/\"))\n\n    date = datetime.date(year, month, day)\n    april_30_2019 = datetime.date(2019, 4, 30)\n\n    if date <= april_30_2019:\n        return \"Heisei\"\n    else:\n        return \"TBD\""
    },
    {
        "number": 4405,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    problems = stdin.split()\n    n = int(problems[0])\n    topics = problems[1:]\n    max_topics = len(set(topics))\n\n    def count_problems(contest_topics):\n        return sum([topics.count(topic) for topic in contest_topics])\n\n    def is_valid(contest_topics):\n        return len(set(contest_topics)) == len(contest_topics)\n\n    def backtracking(topics_remaining, contest_topics, current_count, best_count):\n        if not topics_remaining and current_count > best_count:\n            best_count = current_count\n        else:\n            for i, topic in enumerate(topics_remaining):\n                if i == 0 or topic != topics_remaining[i - 1]:\n                    new_topics = [topic]\n                    new_topics.extend(contest_topics)\n                    new_topics = sorted(list(set(new_topics)))\n                    if is_valid(new_topics):\n                        new_count = count_problems(new_topics)\n                        if new_count > best_count:\n                            new_topics_remaining = [topic for topic in topics_remaining if topic != topic]\n                            best_count = backtracking(new_topics_remaining, new_topics, new_count, best_count)\n        return best_count\n\n    return str(backtracking(topics, [], 0, 0))\n"
    },
    {
        "number": 4405,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    topics = list(map(int, stdin.readline().strip().split()))\n    \n    topics_dict = {}\n    for i in range(n):\n        if topics[i] not in topics_dict:\n            topics_dict[topics[i]] = [i]\n        else:\n            topics_dict[topics[i]].append(i)\n    \n    max_problems = 0\n    for topic in topics_dict:\n        problems = topics_dict[topic]\n        n_problems = len(problems)\n        if n_problems % 2 == 0:\n            max_problems += n_problems // 2\n        else:\n            max_problems += n_problems // 2 + 1\n    \n    return str(max_problems) "
    },
    {
        "number": 4405,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    topics = list(map(int, stdin.readline().strip().split()))\n\n    topic_count = {}\n    for topic in topics:\n        if topic in topic_count:\n            topic_count[topic] += 1\n        else:\n            topic_count[topic] = 1\n\n    contests = []\n    prev_count = 0\n    for count in sorted(topic_count.values(), reverse=True):\n        if count > 0:\n            if count == prev_count:\n                count += 1\n            contests.append(count)\n            prev_count = count\n\n    return str(sum(contests))\n\ninput_data = \"18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\"\nprint(solution(io.StringIO(input_data))) "
    },
    {
        "number": 4405,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    topics = list(map(int, input().split()))\n    topics_dict = {}\n    \n    for topic in topics:\n        if topic in topics_dict:\n            topics_dict[topic] += 1\n        else:\n            topics_dict[topic] = 1\n    \n    max_problems = 0\n    for topic, count in topics_dict.items():\n        if count > max_problems:\n            max_problems = count\n    \n    return str(max_problems) "
    },
    {
        "number": 4405,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    topics = list(map(int, stdin.split()[1:]))\n\n    topics_count = {}\n    for topic in topics:\n        if topic not in topics_count:\n            topics_count[topic] = 1\n        else:\n            topics_count[topic] += 1\n\n    max_problems = 0\n    for topic, count in topics_count.items():\n        max_problems += count\n\n    return str(max_problems)"
    },
    {
        "number": 4405,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, topics = stdin.split()\n    n = int(n)\n    topics = list(map(int, topics.split()))\n\n    topic_count = {}\n    for topic in topics:\n        if topic in topic_count:\n            topic_count[topic] += 1\n        else:\n            topic_count[topic] = 1\n\n    total_problems = sum(topic_count.values())\n\n    # Calculate the maximum number of problems in the set of thematic contests\n    max_problems = 0\n    for topic in topic_count:\n        max_problems += topic_count[topic]\n        total_problems -= topic_count[topic]\n        if max_problems > total_problems:\n            break\n\n    return str(max_problems)"
    },
    {
        "number": 4405,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    topics = list(map(int, input().split()))\n\n    # Sort the topics in ascending order\n    topics.sort()\n\n    # Initialize variables for the first and second contests\n    first_contest_topics = set()\n    second_contest_topics = set()\n\n    # Fill the first contest with the first half of the topics\n    for i in range(n // 2):\n        first_contest_topics.add(topics[i])\n\n    # Fill the second contest with the second half of the topics\n    for i in range(n // 2, n):\n        second_contest_topics.add(topics[i])\n\n    # Calculate the number of problems in the first contest\n    first_contest_problems = 0\n    for topic in first_contest_topics:\n        first_contest_problems += topics.count(topic)\n\n    # Calculate the number of problems in the second contest\n    second_contest_problems = 0\n    for topic in second_contest_topics:\n        second_contest_problems += topics.count(topic)\n\n    # Calculate the number of problems in the set of thematic contests\n    total_problems = first_contest_problems + second_contest_problems\n\n    return str(total_problems)"
    },
    {
        "number": 4405,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    topics = list(map(int, stdin.readline().strip().split()))\n    \n    topics_count = {}\n    for topic in topics:\n        if topic in topics_count:\n            topics_count[topic] += 1\n        else:\n            topics_count[topic] = 1\n    \n    max_problems = 0\n    for topic, count in topics_count.items():\n        current_problems = count\n        while current_problems > 0:\n            max_problems = max(max_problems, current_problems)\n            current_problems -= current_problems // 2\n    \n    return str(max_problems) "
    },
    {
        "number": 4405,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def find_next_contest(contest, topics):\n        next_contest = {}\n        for topic in topics:\n            if topic not in contest:\n                next_contest[topic] = 0\n            next_contest[topic] += 1\n        return next_contest\n\n    def max_problems(n, topics):\n        if n == 1:\n            return max(topics.values())\n        contest = {}\n        for topic in topics:\n            contest[topic] = topics[topic]\n        max_problems = sum(topics.values())\n        while contest:\n            contest_problems = sum(contest.values())\n            if max_problems < contest_problems:\n                max_problems = contest_problems\n            next_contest = find_next_contest(contest, topics)\n            if not next_contest:\n                break\n            for topic in next_contest:\n                if next_contest[topic] > contest[topic]:\n                    del contest[topic]\n        return max_problems\n\n    n = int(stdin.readline().strip())\n    topics = {}\n    for i in range(n):\n        topic = int(stdin.readline().strip())\n        if topic in topics:\n            topics[topic] += 1\n        else:\n            topics[topic] = 1\n\n    return str(max_problems(n, topics))\n\n\ninput_string = \"\"\"18\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\"\"\"\nprint(solution(input_string)) "
    },
    {
        "number": 4405,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    topics = list(map(int, stdin.split('\\n')[1].split()))\n    topics_set = set(topics)\n    max_problems = 0\n\n    for topic in topics_set:\n        current_problems = topics.count(topic)\n        while current_problems > max_problems:\n            max_problems = current_problems\n            current_problems = current_problems // 2\n\n    return str(max_problems)"
    },
    {
        "number": 4406,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    messages = list(map(int, input().split()))\n\n    conversations = []\n    for i in range(n):\n        message = messages[i]\n        if not conversations or conversations[-1] != message:\n            conversations.append(message)\n        else:\n            conversations.pop()\n\n        if len(conversations) > k:\n            conversations.pop(0)\n\n    return str(len(conversations)) + \"\\n\" + \" \".join(map(str, conversations))"
    },
    {
        "number": 4406,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    friends = list(map(int, input().split()))\n\n    conversations = []\n    for i in range(n):\n        id = friends[i]\n        if not conversations or id not in conversations[-1]:\n            conversations.insert(0, [id])\n        else:\n            conversations.remove([id])\n            conversations.insert(0, [id])\n        if len(conversations) > k:\n            conversations.pop()\n\n    return f\"{len(conversations)}\\n{' '.join(map(str, sum(conversations, [])))}\"\n\ndef"
    },
    {
        "number": 4406,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0].split())\n    ids = list(map(int, stdin.split()[1].split()))\n\n    conversations = []\n    for i in range(n):\n        if ids[i] not in conversations:\n            conversations.insert(0, ids[i])\n            if len(conversations) > k:\n                conversations.pop()\n\n    return str(len(conversations)) + \"\\n\" + \" \".join(map(str, conversations))\n\ninput_string = input()\nprint(solution(input_string)) "
    },
    {
        "number": 4406,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    messages = list(map(int, stdin.split()[2:]))\n    \n    conversations = []\n    for message in messages:\n        if conversations and conversations[-1][0] == message:\n            continue\n        \n        if len(conversations) == k:\n            conversations.pop()\n        \n        conversations.append((message, 0))\n        conversations.sort(key=lambda x: x[1])\n    \n    return str(len(conversations)) + \"\\n\" + \" \".join(map(str, [x[0] for x in conversations]))"
    },
    {
        "number": 4406,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    messages = list(map(int, input().split()))\n    \n    conversations = []\n    seen_messages = set()\n    \n    for message in messages:\n        if message not in seen_messages:\n            if len(conversations) >= k:\n                conversations.pop()\n            \n            conversations.insert(0, message)\n            seen_messages.add(message)\n    \n    return str(len(conversations)) + \"\\n\" + \" \".join(map(str, conversations))"
    },
    {
        "number": 4406,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    id_list = list(map(int, stdin.split()[2:]))\n    last_conversation = []\n    conversations = []\n    for id in id_list:\n        if id not in last_conversation:\n            conversations.insert(0, id)\n            if len(conversations) > k:\n                conversations.pop()\n            last_conversation = conversations.copy()\n    return str(len(conversations)) + \"\\n\" + \" \".join(map(str, conversations))\n\ninput_data = input()\nprint(solution(input_data)) "
    },
    {
        "number": 4406,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    ids = list(map(int, input().split()))\n    friends = [set() for _ in range(1000000000)]\n    \n    for i in range(n):\n        friend_id = ids[i]\n        friends[friend_id].add(i)\n    \n    conversations = []\n    for friend_id in range(1000000000):\n        if len(friends[friend_id]) > 1:\n            conversations.append(sorted(friends[friend_id]))\n    \n    while len(conversations) > k:\n        conversations.pop()\n    \n    ids = [0] * k\n    for i in range(len(conversations)):\n        for j in conversations[i]:\n            ids[i] = ids[i] * 10 + ids[j]\n    \n    return str(len(conversations)) + \"\\n\" + \" \".join(map(str, ids))\n\ninput_data = input()\nprint(solution(input_data)) "
    },
    {
        "number": 4406,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    ids = list(map(int, stdin.split()[2:]))\n\n    conversations = []\n    seen = set()\n    for id in ids:\n        if id not in seen:\n            conversations.append(id)\n            seen.add(id)\n        else:\n            conversations.remove(id)\n            conversations.insert(0, id)\n\n        if len(conversations) > k:\n            conversations.pop()\n\n    m = len(conversations)\n    return f\"{m}\\n{' '.join(map(str, conversations))}\"\n\ninput_data = int(input())\nstdin = \"\"\nfor _ in range(input_data):\n    stdin += input() + \"\\n\"\n\nresult = solution(stdin)\nprint(result) "
    },
    {
        "number": 4406,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.splitlines()[0].split())\n    id_list = list(map(int, stdin.splitlines()[1].split()))\n\n    conversations = []\n    for id_ in id_list:\n        if len(conversations) == k and id_ not in conversations:\n            conversations.pop()\n            conversations.insert(0, id_)\n        elif id_ not in conversations:\n            conversations.insert(0, id_)\n\n    return f\"{len(conversations)}\\n{' '.join(map(str, conversations))}\""
    },
    {
        "number": 4406,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    messages = list(map(int, stdin.split()[2:]))\n\n    conversations = []\n    for message in messages:\n        if not conversations or conversations[-1][-1] != message:\n            if len(conversations) == k:\n                conversations.pop()\n            conversations.append([message])\n        else:\n            conversations[-1].append(message)\n\n    result = []\n    for conversation in conversations:\n        result.extend(conversation)\n\n    return str(len(conversations)) + \"\\n\" + \" \".join(map(str, result))\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4407,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split()[:2])\n    coins = [int(x) for x in stdin.split()[2:]]\n    queries = [int(x) for x in stdin.split()[n+2:]]\n\n    def min_coins(target: int) -> int:\n        dp = [float('inf')] * (target + 1)\n        dp[0] = 0\n        for i in range(1, target + 1):\n            for coin in coins:\n                if i - coin >= 0:\n                    dp[i] = min(dp[i], dp[i - coin] + 1)\n        return dp[target] if dp[target] != float('inf') else -1\n\n    result = [min_coins(query) for query in queries]\n\n    return \" \".join(map(str, result))"
    },
    {
        "number": 4407,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def binary_search(arr, target):\n        left, right = 0, len(arr) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if arr[mid] == target:\n                return mid\n            elif arr[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1\n\n    def answer(coins, queries):\n        sorted_coins = sorted(coins, reverse=True)\n        return [binary_search(sorted_coins, query) for query in queries]\n\n    n, q = map(int, stdin.split()[0:2])\n    coins = list(map(int, stdin.split()[2:2+n]))\n    queries = list(map(int, stdin.split()[2+n:]))\n\n    return '\\n'.join(map(str, answer(coins, queries)))"
    },
    {
        "number": 4407,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split()[0:2])\n    coins = list(map(int, stdin.split()[2:2+n]))\n    queries = list(map(int, stdin.split()[2+n:]))\n\n    def find_coins(target: int, coins: list) -> int:\n        coins.sort(reverse=True)\n        count = 0\n        for coin in coins:\n            count += target // coin\n            target %= coin\n        return count\n\n    answers = []\n    for query in queries:\n        answers.append(find_coins(query, coins) if query <= max(coins) else -1)\n\n    return \" \".join(map(str, answers))"
    },
    {
        "number": 4407,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split()[:2])\n    coins = [int(x) for x in stdin.split()[2:]]\n    queries = [int(x) for x in stdin.split()[2+n:]]\n\n    def binary_search(arr: List[int], x: int) -> int:\n        left, right = 0, len(arr) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if arr[mid] == x:\n                return mid\n            elif arr[mid] < x:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1\n\n    result = []\n    for b in queries:\n        if b == 0:\n            result.append(0)\n            continue\n        index = binary_search(coins, b)\n        if index != -1:\n            result.append(1)\n        else:\n            result.append(-1)\n\n    return \" \".join(map(str, result))\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4407,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, input().split())\n    coins = list(map(int, input().split()))\n    queries = [int(input()) for _ in range(q)]\n\n    def find_coins_to_sum(coins: list, target: int) -> int:\n        min_coins = float('inf')\n        for i in range(1, len(coins) + 1):\n            if i == 1:\n                if coins[i - 1] == target:\n                    return 1\n                elif coins[i - 1] > target:\n                    return -1\n            else:\n                for j in range(i):\n                    if coins[i - 1] + coins[j] == target:\n                        min_coins = min(min_coins, i - j)\n                    elif coins[i - 1] + coins[j] > target:\n                        break\n        return min_coins if min_coins != float('inf') else -1\n\n    answers = []\n    for query in queries:\n        answers.append(find_coins_to_sum(coins, query))\n\n    return '\\n'.join(map(str, answers))\n\nstdin = '''5 4\n2 4 8 2 4 \n8\n5\n14\n10'''\nprint(solution(stdin)) "
    },
    {
        "number": 4407,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split()[0:2])\n    coins = list(map(int, stdin.split('\\n')[1].split()))\n    queries = list(map(int, stdin.split('\\n', 2)[2].split()))\n    \n    def count_coins(value):\n        count = 0\n        for coin in coins:\n            count += value // coin\n        return count\n    \n    answers = []\n    for query in queries:\n        if any(coin > query for coin in coins):\n            answers.append(-1)\n        else:\n            answers.append(count_coins(query))\n    \n    return ' '.join(map(str, answers))"
    },
    {
        "number": 4407,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split()[0:2])\n    coins = list(map(int, stdin.split('\\n')[1].split()))\n    queries = list(map(int, stdin.split('\\n')[2:]))\n    answers = []\n    dp = [0] * (1 << n)\n    for i in range(n):\n        dp[1 << i] = coins[i]\n    for i in range(1, 1 << n):\n        for j in range(n):\n            if (i & (1 << j)):\n                for k in range(n):\n                    if not (i & (1 << k)):\n                        dp[i | (1 << k)] = min(dp[i | (1 << k)], dp[i] + coins[k])\n    for query in queries:\n        ans = -1\n        for i in range(1 << n):\n            if dp[i] == query:\n                ans = bin(i).count('1')\n                break\n        answers.append(ans)\n    return '\\n'.join(map(str, answers))"
    },
    {
        "number": 4407,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split()[0:2])\n    coins = list(map(int, stdin.split()[2:]))\n    queries = list(map(int, stdin.split(\"\\n\", q+1)[q+1:]))\n\n    def binary_search_lower_bound(array, target):\n        left, right = 0, len(array)\n        while left < right:\n            mid = (left + right) // 2\n            if array[mid] >= target:\n                right = mid\n            else:\n                left = mid + 1\n        return left\n\n    def binary_search_upper_bound(array, target):\n        left, right = 0, len(array)\n        while left < right:\n            mid = (left + right) // 2\n            if array[mid] > target:\n                right = mid\n            else:\n                left = mid + 1\n        return left\n\n    result = []\n    for query in queries:\n        count = 0\n        for coin in coins:\n            lower_bound = binary_search_lower_bound(coins, query - coin)\n            upper_bound = binary_search_upper_bound(coins, query)\n            count += upper_bound - lower_bound\n        result.append(count)\n\n    return \"\\n\".join(map(str, result))\n\ninput = \"5 4\\n2 4 8 2 4\\n8\\n5\\n14\\n10\"\nprint(solution(input)) "
    },
    {
        "number": 4407,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split()[:2])\n    coins = list(map(int, stdin.split()[2:]))\n    queries = [int(x) for x in stdin.split()[-q:]]\n\n    def binary_search(value: int, coins: list) -> int:\n        left, right = 0, len(coins) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if coins[mid] == value:\n                return 1\n            elif coins[mid] < value:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1\n\n    result = []\n    for query in queries:\n        result.append(binary_search(query, coins))\n\n    return \" \".join(map(str, result))"
    },
    {
        "number": 4407,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split()[:2])\n    coins = list(map(int, stdin.split()[2:]))\n    queries = list(map(int, stdin.split()[2 + n:]))\n    \n    def coin_change(coins: List[int], amount: int) -> int:\n        dp = [0] * (amount + 1)\n        dp[0] = 1\n        \n        for coin in coins:\n            for i in range(coin, amount + 1):\n                dp[i] += dp[i - coin]\n                \n        return dp[amount]\n    \n    answers = []\n    for b in queries:\n        answers.append(coin_change(coins, b) - 1)\n        \n    return \" \".join(map(str, answers))\n\ndef"
    },
    {
        "number": 4408,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n, k = map(int, input().split())\n    cards = list(map(int, input().split()))\n    favorites = list(map(int, input().split()))\n    joy_levels = list(map(int, input().split()))\n\n    # Initialize the maximum joy level and the number of players with the same favorite number\n    max_joy_level = 0\n    same_favorite_count = 0\n\n    # Iterate through all possible card distributions\n    for i in range(len(cards)):\n        card_distribution = [cards[i:i+k] for i in range(0, len(cards), k)]\n        player_joy_levels = []\n\n        # Calculate the joy levels of each player\n        for j in range(n):\n            player_joy_level = 0\n            for card in card_distribution[j]:\n                if card == favorites[j]:\n                    player_joy_level += 1\n            player_joy_levels.append(player_joy_level)\n\n        # Check if any player got cards with their favorite number\n        has_favorite_cards = any(player_joy_level > 0 for player_joy_level in player_joy_levels)\n\n        # Calculate the total joy level\n        total_joy_level = sum(player_joy_levels)\n\n        # Check if this card distribution is better than the previous one\n        if has_favorite_cards and total_joy_level > max_joy_level:\n            max_joy_level = total_joy_level\n            same_favorite_count = sum(player_joy_level == 0 for player_joy_level in player_joy_levels)\n\n    # Calculate the final answer\n    final_answer = max_joy_level + joy_levels[0] * same_favorite_count\n\n    return str(final_answer)"
    },
    {
        "number": 4408,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n, k = map(int, lines[0].split())\n    cards = list(map(int, lines[1].split()))\n    favorites = list(map(int, lines[2].split()))\n    joy_levels = list(map(int, lines[3].split()))\n\n    card_dict = {}\n    for card in cards:\n        card_dict[card] = card_dict.get(card, 0) + 1\n\n    total_joy = 0\n    for favorite in favorites:\n        if favorite not in card_dict:\n            continue\n        joy = 0\n        count = card_dict[favorite]\n        for i, level in enumerate(joy_levels):\n            if count >= i:\n                joy += level\n        total_joy += joy\n\n    return str(total_joy)"
    },
    {
        "number": 4408,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    cards = list(map(int, stdin.split()[2:2 * n + 2]))\n    favs = list(map(int, stdin.split()[2 * n + 2:]))\n    joy = list(map(int, stdin.split()[2 * n + 6:]))\n\n    player_joy = [0] * n\n    for card in cards:\n        for i in range(n):\n            if card == favs[i]:\n                player_joy[i] += 1\n\n    for i in range(1, k):\n        for j in range(n):\n            if player_joy[j] >= i:\n                player_joy[j] = joy[i - 1]\n\n    return str(sum(player_joy))"
    },
    {
        "number": 4408,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    cards = list(map(int, input().split()))\n    fav_nums = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    \n    max_joy = 0\n    for i in range(len(cards)):\n        player_cards = [cards[i] for i in range(i * k, (i + 1) * k)]\n        player_joy = sum(h[min(t, len(h) - 1)] for t in [player_cards.count(fav_nums[j]) for j in range(n)])\n        max_joy = max(max_joy, player_joy)\n    \n    return str(max_joy)"
    },
    {
        "number": 4408,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    cards = list(map(int, stdin.readline().split()))\n    favorites = list(map(int, stdin.readline().split()))\n    joy_levels = list(map(int, stdin.readline().split()))\n\n    def card_distribution(cards, favorites, n, k):\n        if len(cards) < n * k:\n            return 0\n        counts = [0] * n\n        for card in cards:\n            counts[cards.index(card) % n] += 1\n        return max(joy_levels[counts[i] - favorites[i]] for i in range(n))\n\n    total_joy = 0\n    for i in range(len(cards) - n * k + 1):\n        total_joy = max(total_joy, card_distribution(cards[i:i + n * k], favorites, n, k))\n\n    return str(total_joy)\n\ninput_file = open(\"input.txt\", \"r\")\noutput_file = open(\"output.txt\", \"w\")\n\noutput_file.write(solution(input_file))\n\ninput_file.close()\noutput_file.close() "
    },
    {
        "number": 4408,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    cards = list(map(int, stdin.readline().split()))\n    favorites = list(map(int, stdin.readline().split()))\n    h = list(map(int, stdin.readline().split()))\n\n    max_joy = 0\n\n    for i in range(len(cards)):\n        for j in range(i + 1, len(cards)):\n            for l in range(j + 1, len(cards)):\n                player_counts = [0] * n\n                player_sums = [0] * n\n\n                for player in range(n):\n                    if cards[i] == favorites[player]:\n                        player_counts[player] += 1\n                        player_sums[player] += h[player_counts[player]]\n                    if cards[j] == favorites[player]:\n                        player_counts[player] += 1\n                        player_sums[player] += h[player_counts[player]]\n                    if cards[l] == favorites[player]:\n                        player_counts[player] += 1\n                        player_sums[player] += h[player_counts[player]]\n\n                max_joy = max(max_joy, sum(player_sums))\n\n    return str(max_joy)\n\nstdin = open(\"input.txt\", \"r\")\noutput = solution(stdin)\nprint(output) "
    },
    {
        "number": 4408,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    cards = list(map(int, stdin.readline().split()))\n    favorite_numbers = list(map(int, stdin.readline().split()))\n    joy_levels = list(map(int, stdin.readline().split()))\n\n    def max_joy_level(card_count: int) -> int:\n        return joy_levels[card_count - 1] if card_count <= k else 0\n\n    max_joy = 0\n    for i in range(len(cards)):\n        card_count = 0\n        for j in range(n):\n            card_count += cards[i:i + n].count(favorite_numbers[j])\n        max_joy += max_joy_level(card_count)\n\n    return str(max_joy)"
    },
    {
        "number": 4408,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    cards = list(map(int, stdin.readline().split()))\n    fav_nums = list(map(int, stdin.readline().split()))\n    joy_levels = list(map(int, stdin.readline().split()))\n\n    player_cards = [cards[i:i + k] for i in range(0, len(cards), k)]\n    max_joy = 0\n\n    for i in range(k + 1):\n        current_joy = sum(joy_levels[cards.count(fav_nums[j]) - i] for j in range(n))\n        max_joy = max(max_joy, current_joy)\n\n    return str(max_joy)\n\n\ndef"
    },
    {
        "number": 4408,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    cards = list(map(int, stdin.split()[2:2 * n + 2]))\n    favorite_numbers = list(map(int, stdin.split()[2 * n + 2:]))\n    h = list(map(int, stdin.split()[2 * n + 2:]))\n\n    def is_favorite_number(card: int) -> bool:\n        return card in favorite_numbers\n\n    def find_h(cards_with_favorite_number: int) -> int:\n        for i in range(len(h)):\n            if cards_with_favorite_number == i:\n                return h[i]\n        return 0\n\n    max_joy_level = 0\n    for i in range(len(cards)):\n        for j in range(i + 1, len(cards)):\n            for k in range(j + 1, len(cards)):\n                cards_with_favorite_number = sum(map(is_favorite_number, [cards[i], cards[j], cards[k]]))\n                if cards_with_favorite_number == 0:\n                    continue\n                joy_level = find_h(cards_with_favorite_number)\n                max_joy_level = max(max_joy_level, joy_level)\n\n    return str(max_joy_level)"
    },
    {
        "number": 4408,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    cards = list(map(int, stdin.split()[2:2 * k + 2]))\n    favorites = list(map(int, stdin.split()[2 * k + 2:2 * k + 2 + n]))\n    happiness = list(map(int, stdin.split()[2 * k + 2 + n:]))\n\n    max_happiness = 0\n\n    for card_combination in itertools.combinations(cards, k):\n        happiness_sum = 0\n        for i in range(n):\n            card_sum = sum(1 for card in card_combination if card == favorites[i])\n            happiness_sum += happiness[card_sum]\n        max_happiness = max(max_happiness, happiness_sum)\n\n    return str(max_happiness)"
    },
    {
        "number": 4409,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = [int(x) for x in stdin.split()[1:]]\n    a.sort()\n    min_ops = 0\n    ops = []\n    for i in range(n):\n        if a[i] != a[0]:\n            min_ops += 1\n            if a[i] > a[0]:\n                ops.append((1, i, i+1))\n            else:\n                ops.append((2, i, i+1))\n    return f\"{min_ops}\\n{' '.join(str(op) for op in ops)}\""
    },
    {
        "number": 4409,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def min_operations(a: List[int]) -> int:\n        n = len(a)\n        a.sort()\n        result = 0\n        for i in range(n - 1, 0, -1):\n            if a[i] != a[i - 1]:\n                result += i\n                for j in range(i - 1, -1, -1):\n                    a[j] = a[j + 1] - (a[j + 1] - a[j])\n        return result\n\n    def print_operations(a: List[int], ops: List[Tuple[int, int, int]]) -> None:\n        n = len(a)\n        for op in ops:\n            t, i, j = op\n            if t == 1:\n                a[i] = a[i] + abs(a[i] - a[j])\n            else:\n                a[i] = a[i] - abs(a[i] - a[j])\n            print(t, i, j)\n\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    ops = [(1, 1, 2)]\n    min_ops_count = min_operations(a)\n    print(min_ops_count)\n    print_operations(a, ops)"
    },
    {
        "number": 4409,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    # Calculate the target value\n    target_value = sum(a) // n\n\n    # Initialize the operation list\n    operations = []\n\n    # Initialize the current array\n    current_array = a.copy()\n\n    # Loop until all elements are equal to the target value\n    while any(current_array[i] != target_value for i in range(n)):\n        # Find the pair of indices with the maximum difference\n        max_diff = 0\n        max_indices = []\n        for i in range(n):\n            for j in range(n):\n                if i != j and abs(current_array[i] - current_array[j]) > max_diff:\n                    max_diff = abs(current_array[i] - current_array[j])\n                    max_indices = [i, j]\n\n        # Perform the operation\n        if current_array[max_indices[0]] > current_array[max_indices[1]]:\n            operations.append(('1', max_indices[0]+1, max_indices[1]+1))\n            current_array[max_indices[0]] = target_value\n        else:\n            operations.append(('2', max_indices[0]+1, max_indices[1]+1))\n            current_array[max_indices[0]] = target_value - abs(current_array[max_indices[0]] - current_array[max_indices[1]])\n\n    # Print the result\n    result = [str(len(operations))]\n    result.extend([' '.join(operation) for operation in operations])\n    return '\\n'.join(result)"
    },
    {
        "number": 4409,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    \n    min_ops = 0\n    operations = []\n    equal_elements = True\n    for i in range(n - 1):\n        if a[i] != a[i + 1]:\n            equal_elements = False\n            break\n    \n    if equal_elements:\n        return f\"{min_ops}\"\n    \n    for i in range(n - 1):\n        if a[i] > a[i + 1]:\n            min_ops += a[i] - a[i + 1]\n            operations.append((1, i + 1, i + 2))\n        else:\n            min_ops += a[i + 1] - a[i]\n            operations.append((2, i + 1, i + 2))\n    \n    min_ops = min_ops // 2\n    return f\"{min_ops}\\n{' '.join(f'{t} {i} {j}' for t, i, j in operations)}\""
    },
    {
        "number": 4409,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a.sort()\n    operations = []\n    i = 0\n    j = 1\n    while i < n and j < n:\n        if a[i] == a[j]:\n            i += 1\n            j += 1\n        elif a[i] < a[j]:\n            operations.append((\"1\", i, j))\n            a[i] += abs(a[i] - a[j])\n            i += 1\n            j += 1\n        else:\n            operations.append((\"2\", i, j))\n            a[i] -= abs(a[i] - a[j])\n            i += 1\n            j += 1\n    return str(len(operations)) + \"\\n\" + \"\\n\".join([\" \".join(map(str, op)) for op in operations])\n\ndef"
    },
    {
        "number": 4409,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    operations = []\n    equal_elements = True\n    for i in range(n):\n        if a[i] != a[0]:\n            equal_elements = False\n            break\n    \n    if equal_elements:\n        return \"0\\n\"\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(a[i] - a[j]) != 0:\n                operations.append((1, i, j))\n            else:\n                operations.append((2, i, j))\n    \n    min_operations = len(operations)\n    for i in range(len(operations)):\n        for j in range(i+1, len(operations)):\n            ops = operations.copy()\n            ops.pop(i)\n            ops.pop(j-1)\n            min_ops = len(ops)\n            for op in ops:\n                if op[0] == 1:\n                    a[op[1]] = a[op[1]] + abs(a[op[1]] - a[op[2]])\n                else:\n                    a[op[1]] = a[op[1]] - abs(a[op[1]] - a[op[2]])\n                if a[op[1]] > 10**18 or a[op[1]] < -10**18:\n                    min_ops = float('inf')\n                    break\n            if min_ops < min_operations:\n                min_operations = min_ops\n    \n    result = str(min_operations) + \"\\n\"\n    for i in range(min_operations):\n        result += f\"{operations[i][0]} {operations[i][1]} {operations[i][2]}\\n\"\n    \n    return result "
    },
    {
        "number": 4409,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a = list(map(int, stdin.split()))\n    \n    # Check if all elements are equal\n    if all(x == a[0] for x in a):\n        return \"0\\n\"\n    \n    # Initialize variables\n    k = 0\n    operations = []\n    while not all(x == a[0] for x in a):\n        # Find adjacent elements with different values\n        for i in range(n):\n            for j in range(i+1, n):\n                if abs(a[i] - a[j]) == 1:\n                    # Perform first operation (increase smaller value)\n                    if abs(a[i] - a[j]) == 1:\n                        k += 1\n                        operations.append((1, i+1, j+1))\n                        a[min(i, j)] += abs(a[i] - a[j])\n                    # Perform second operation (decrease larger value)\n                    elif abs(a[i] - a[j]) == 2:\n                        k += 1\n                        operations.append((2, i+1, j+1))\n                        a[max(i, j)] -= abs(a[i] - a[j])\n                    \n                    # Check if all elements are equal\n                    if all(x == a[0] for x in a):\n                        return str(k) + \"\\n\" + \"\\n\".join(map(lambda x: f\"{x[0]} {x[1]} {x[2]}\", operations))\n                    \n    return \"0\\n\"\n"
    },
    {
        "number": 4409,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    \n    result = []\n    equal_elements = True\n    \n    for i in range(len(a)):\n        for j in range(len(a)):\n            if i != j and abs(a[i] - a[j]) > 1:\n                equal_elements = False\n                break\n        if not equal_elements:\n            break\n    \n    if equal_elements:\n        return \"0\\n\"\n    \n    min_operations = float('inf')\n    operations = []\n    \n    for i in range(len(a)):\n        for j in range(len(a)):\n            if i != j and abs(a[i] - a[j]) == 1:\n                temp_a = a.copy()\n                if temp_a[i] - temp_a[j] > 0:\n                    temp_a[i] = temp_a[i] - (temp_a[i] - temp_a[j])\n                else:\n                    temp_a[i] = temp_a[i] + (temp_a[j] - temp_a[i])\n                \n                new_operations = len(operations) + 1\n                \n                if all(abs(temp_a[i] - temp_a[j]) <= 10**18 for i in range(len(temp_a))) and new_operations < min_operations:\n                    min_operations = new_operations\n                    operations = [(1, i+1, j+1)]\n                elif all(abs(temp_a[i] - temp_a[j]) <= 10**18 for i in range(len(temp_a))) and new_operations == min_operations:\n                    operations.append((1, i+1, j+1))\n                    \n                temp_a = a.copy()\n                if temp_a[i] - temp_a[j] < 0:\n                    temp_a[i] = temp_a[i] - (temp_a[i] - temp_a[j])\n                else:\n                    temp_a[i] = temp_a[i] + (temp_a[j] - temp_a[i])\n                \n                new_operations = len(operations) + 1\n                \n                if all(abs(temp_a[i] - temp_a[j]) <= 10**18 for i in range(len(temp_a))) and new_operations < min_operations:\n                    min_operations = new_operations\n                    operations = [(2, i+1, j+1)]\n                elif all(abs(temp_a[i] - temp_a[j]) <= 10**18 for i in range(len(temp_a))) and new_operations == min_operations:\n                    operations.append((2, i+1, j+1))\n                    \n    \n    result.append(str(min_operations))\n    \n    for operation in operations:\n        result.append(\" \".join(map(str, operation)))\n    \n    return \"\\n\".join(result)"
    },
    {
        "number": 4409,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = [int(x) for x in stdin.split()[1:]]\n    a.sort()\n    min_operations = 0\n    operations = []\n    result = []\n    for i in range(n):\n        if i == 0 or i == n - 1:\n            if a[i] != a[i + 1]:\n                min_operations += 1\n                operations.append(1)\n                operations.append(i + 1)\n                operations.append(i + 2)\n                result.append([1, i + 1, i + 2])\n            if a[i] != a[i - 1]:\n                min_operations += 1\n                operations.append(2)\n                operations.append(i)\n                operations.append(i + 1)\n                result.append([2, i, i + 1])\n        else:\n            if a[i] != a[i + 1]:\n                min_operations += 1\n                operations.append(1)\n                operations.append(i + 1)\n                operations.append(i + 2)\n                result.append([1, i + 1, i + 2])\n            if a[i] != a[i - 1]:\n                min_operations += 1\n                operations.append(2)\n                operations.append(i)\n                operations.append(i + 1)\n                result.append([2, i, i + 1])\n            if a[i] != a[i - 2]:\n                min_operations += 1\n                operations.append(1)\n                operations.append(i)\n                operations.append(i + 1)\n                result.append([1, i, i + 1])\n            if a[i] != a[i + 2]:\n                min_operations += 1\n                operations.append(2)\n                operations.append(i + 1)\n                operations.append(i + 2)\n                result.append([2, i + 1, i + 2])\n    return f\"{min_operations}\\n{' '.join(map(str, operations))}\"\n\ninput_data = input()\noutput_data = solution(input_data)\nprint(output_data) "
    },
    {
        "number": 4409,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    if all(x == a[0] for x in a):\n        return \"0\\n\"\n\n    result = []\n    for i in range(n):\n        for j in range(n):\n            if i != j and abs(i - j) == 1:\n                if a[i] > a[j]:\n                    result.append((1, i, j))\n                elif a[i] < a[j]:\n                    result.append((2, i, j))\n\n    if not result:\n        return \"0\\n\"\n\n    min_ops = len(result)\n    for perm in itertools.permutations(result):\n        a_copy = a.copy()\n        for op in perm:\n            if op[0] == 1:\n                a_copy[op[1]] = a_copy[op[1]] + abs(a_copy[op[1]] - a_copy[op[2]])\n            else:\n                a_copy[op[1]] = a_copy[op[1]] - abs(a_copy[op[1]] - a_copy[op[2]])\n        if all(x == a_copy[0] for x in a_copy):\n            min_ops = len(perm)\n            break\n\n    return str(min_ops) + \"\\n\" + \"\\n\".join(map(lambda x: f\"{x[0]} {x[1]} {x[2]}\", perm)) + \"\\n\""
    },
    {
        "number": 4410,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    import re\n\n    def count_free_tables(s: str, k: int) -> int:\n        free_tables = s.count('0')\n        occupied_tables = [match.start() for match in re.finditer('1', s)]\n\n        for i, table in enumerate(occupied_tables):\n            for j in range(i + 1, len(occupied_tables)):\n                distance = occupied_tables[j] - table\n                if distance <= k:\n                    free_tables -= distance - k\n                    break\n\n        return free_tables\n\n    test_cases = stdin.split('\\n')\n    results = []\n\n    for i in range(1, len(test_cases), 2):\n        n, k = map(int, test_cases[i - 1].split())\n        s = test_cases[i]\n\n        results.append(count_free_tables(s, k))\n\n    return '\\n'.join(map(str, results))"
    },
    {
        "number": 4410,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.split('\\n')[0])\n    results = []\n\n    for i in range(1, test_cases + 1):\n        n, k = map(int, stdin.split('\\n')[i].split()[:2])\n        s = stdin.split('\\n')[i].split()[-1]\n\n        max_tables = 0\n        for j in range(len(s)):\n            if s[j] == '0':\n                left = j - k - 1\n                right = j + k + 1\n\n                while left >= 0 and right < len(s) and s[left] == '1' and s[right] == '1':\n                    left -= 1\n                    right += 1\n\n                max_tables += right - left - 1\n\n        results.append(max_tables)\n\n    return '\\n'.join(map(str, results))"
    },
    {
        "number": 4410,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.split(\"\\n\")\n    result = []\n    \n    for i in range(0, len(test_cases), 2):\n        n, k = map(int, test_cases[i].split())\n        s = test_cases[i+1]\n        \n        free_tables = s.count('0')\n        occupied_tables = s.count('1')\n        \n        if occupied_tables == 0 or occupied_tables == n:\n            result.append(free_tables)\n        else:\n            max_tables = 0\n            for i in range(occupied_tables):\n                index = s.find('1', i+1)\n                distance = index - i - 1\n                max_tables = max(max_tables, free_tables - (distance // k + 1))\n                \n            result.append(max_tables)\n            \n    return \"\\n\".join(map(str, result))\n\ninput_data = \"\"\"6 1\n100010\n6 2\n000000\n5 1\n10101\n3 1\n001\n2 2\n00\n1 1\n0\"\"\"\n\nprint(solution(input_data)) "
    },
    {
        "number": 4410,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    results = []\n    for i in range(1, t*2, 2):\n        n, k = map(int, lines[i].split())\n        s = lines[i+1]\n        free_tables = s.count('0')\n        occupied_tables = s.count('1')\n        if occupied_tables == 0:\n            results.append(free_tables)\n        elif occupied_tables == 1:\n            results.append(free_tables)\n        else:\n            min_distance = k + 1\n            for j in range(occupied_tables - 1):\n                first_index = s.index('1')\n                s = s[first_index+1:]\n                second_index = s.index('1')\n                if second_index < min_distance:\n                    min_distance = second_index\n            results.append(free_tables - min_distance)\n    return '\\n'.join(map(str, results))"
    },
    {
        "number": 4410,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    result = []\n    for i in range(1, t * 2, 2):\n        n, k = map(int, lines[i].split())\n        s = lines[i + 1]\n        max_free_tables = 0\n        for j in range(n):\n            if s[j] == '0':\n                left = j - k - 1\n                right = j + k + 1\n                if left < 0:\n                    left = 0\n                if right > n:\n                    right = n\n                if '1' not in s[left:right]:\n                    max_free_tables += 1\n        result.append(str(max_free_tables))\n    return '\\n'.join(result)\n\ninput_data = \"\"\"6\n6 1\n100010\n6 2\n000000\n5 1\n10101\n3 1\n001\n2 2\n00\n1 1\n0\"\"\"\n\nprint(solution(input_data)) "
    },
    {
        "number": 4410,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    cases = stdin.split(\"\\n\")\n    result = []\n    for i in range(1, len(cases), 2):\n        n, k = map(int, cases[i-1].split())\n        s = cases[i]\n        max_tables = 0\n        for j in range(n):\n            if s[j] == \"0\":\n                valid = True\n                for l in range(max(0, j-k), min(j+k+1, n)):\n                    if s[l] == \"1\":\n                        valid = False\n                        break\n                if valid:\n                    max_tables += 1\n        result.append(str(max_tables))\n    return \"\\n\".join(result)"
    },
    {
        "number": 4410,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def find_max_free_tables(s: str, k: int) -> int:\n        max_free = 0\n        occupied = []\n        for i, c in enumerate(s):\n            if c == '1':\n                occupied.append(i)\n        occupied.sort()\n\n        for i in range(len(occupied)):\n            for j in range(i + 1, len(occupied)):\n                if occupied[j] - occupied[i] > k:\n                    max_free += occupied[i] - (occupied[j] - k - 1)\n                    break\n\n        return max_free\n\n    test_cases = int(stdin.strip())\n    results = []\n\n    for _ in range(test_cases):\n        n, k = map(int, input().strip().split())\n        s = input().strip()\n        results.append(find_max_free_tables(s, k))\n\n    return '\\n'.join(map(str, results))"
    },
    {
        "number": 4410,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.split('\\n')\n    result = []\n    \n    for i in range(1, len(test_cases), 2):\n        n, k = map(int, test_cases[i].split())\n        s = test_cases[i+1]\n        count = 0\n        for j in range(len(s)):\n            if s[j] == '0':\n                if j - k - 1 < 0 or s[j-k-1] == '0':\n                    if j + k + 1 >= n or s[j+k+1] == '0':\n                        count += 1\n        result.append(str(count))\n    \n    return '\\n'.join(result)"
    },
    {
        "number": 4410,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num_test_cases = int(stdin.readline())\n    result = []\n\n    for _ in range(num_test_cases):\n        n, k = map(int, stdin.readline().split())\n        s = stdin.readline().strip()\n\n        # Count the number of occupied tables\n        occupied_tables = s.count('1')\n\n        # If there are no occupied tables or only one, we can occupy all free tables\n        if occupied_tables == 0 or occupied_tables == 1:\n            result.append(s.count('0'))\n        else:\n            # Find the indices of the first and last occupied tables\n            first_occupied_index = s.index('1')\n            last_occupied_index = s[::-1].index('1')\n\n            # Calculate the maximum number of free tables we can occupy\n            free_tables_to_occupy = (last_occupied_index - k - first_occupied_index) // (k + 1)\n\n            # Calculate the number of free tables we can occupy without violating the rules\n            free_tables_to_occupy = min(free_tables_to_occupy, s.count('0'))\n\n            result.append(free_tables_to_occupy)\n\n    return \"\\n\".join(map(str, result))"
    },
    {
        "number": 4410,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def find_max_free_tables(n: int, k: int, s: str) -> int:\n        free_tables = [i for i, char in enumerate(s) if char == '0']\n        max_free_tables = 0\n\n        for i in range(len(free_tables)):\n            for j in range(i + 1, len(free_tables)):\n                if abs(free_tables[i] - free_tables[j]) > k:\n                    max_free_tables += 1\n\n        return max_free_tables\n\n    test_cases = int(stdin.readline())\n    results = []\n\n    for _ in range(test_cases):\n        n, k = map(int, stdin.readline().split())\n        s = stdin.readline().strip()\n        results.append(find_max_free_tables(n, k, s))\n\n    return '\\n'.join(map(str, results))"
    },
    {
        "number": 4411,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    segments = []\n\n    for _ in range(n):\n        l, r = list(map(int, input().split()))\n        segments.append((l, r))\n\n    def is_bad_point(point: int, segments: List[Tuple[int, int]]) -> bool:\n        count = 0\n        for l, r in segments:\n            if l <= point <= r:\n                count += 1\n                if count > k:\n                    return True\n        return False\n\n    def remove_segments(segments: List[Tuple[int, int]], bad_points: Set[int]) -> List[Tuple[int, int]]:\n        removed_segments = set()\n        for i, (l, r) in enumerate(segments):\n            if not any(is_bad_point(point, segments) for point in range(l, r + 1)):\n                removed_segments.add(i)\n        return removed_segments\n\n    bad_points = set(i for i in range(1, 100001) if is_bad_point(i, segments))\n    removed_segments = remove_segments(segments, bad_points)\n\n    m = len(removed_segments)\n    print(m)\n    print(\" \".join(str(i) for i in sorted(removed_segments)))\n\n    return \"\""
    },
    {
        "number": 4411,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    segments = []\n    for i in range(n):\n        l, r = map(int, input().split())\n        segments.append((l, r))\n    \n    segments.sort(key=lambda x: x[0])\n    i, j = 0, 0\n    covered = {}\n    result = []\n    bad_points = 0\n    \n    while i < n and j < len(segments):\n        if segments[j][0] <= segments[i][1]:\n            covered[segments[i][1]] = covered.get(segments[i][1], 0) + 1\n            i += 1\n        else:\n            bad_points += covered.get(segments[j][0] - 1, 0)\n            if bad_points <= k:\n                bad_points -= covered.get(segments[j][0] - 1, 0)\n                result.append(j)\n            j += 1\n    \n    return str(len(result)) + \"\\n\" + \" \".join(map(str, result))"
    },
    {
        "number": 4411,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    segments = []\n    for i in range(n):\n        l, r = map(int, input().split())\n        segments.append((l, r))\n    \n    segments.sort(key=lambda x: x[1])\n    left = 0\n    count = 0\n    result = []\n    \n    for i in range(len(segments)):\n        if segments[i][0] > left:\n            count = 1\n            left = segments[i][1]\n            continue\n        \n        if segments[i][1] < left:\n            count = 1\n            left = segments[i][1]\n            continue\n        \n        count += 1\n        if count > k:\n            result.append(i)\n    \n    return str(len(result)) + \"\\n\" + \" \".join(map(str, result))\n\n\nstdin = \"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\"\nprint(solution(stdin))\n\nstdin = \"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\"\nprint(solution(stdin))\n\nstdin = \"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\"\nprint(solution(stdin)) "
    },
    {
        "number": 4411,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Get the input\n    n, k = map(int, stdin.splitlines()[0].split())\n    segments = [list(map(int, line.split())) for line in stdin.splitlines()[1:]]\n\n    # Sort the segments by their start points\n    segments.sort(key=lambda x: x[0])\n\n    # Initialize variables\n    bad_points = set()\n    current_count = 0\n    current_segment = 0\n    result = []\n\n    # Iterate through the sorted segments\n    for i in range(n):\n        # If the current segment is within the range of the current segment\n        while current_segment < n and segments[current_segment][0] <= i:\n            current_count += 1\n            current_segment += 1\n\n        # If the current segment has more than k segments, add it to the set of bad points\n        if current_count > k:\n            bad_points.add(i)\n\n    # Remove the minimum number of segments to remove\n    removed_count = 0\n    for i in range(n):\n        # If the current segment is within the range of the current segment\n        while current_segment < n and segments[current_segment][0] <= i:\n            current_count -= 1\n            current_segment += 1\n\n        # If the current segment has at most k segments and it's not a bad point, add it to the result\n        if current_count <= k and i not in bad_points:\n            result.append(i + 1)\n            removed_count += 1\n\n    return str(removed_count) + \"\\n\" + \" \".join(map(str, result))"
    },
    {
        "number": 4411,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def is_bad(i, k, segments):\n        count = 0\n        for segment in segments:\n            if segment[0] <= i <= segment[1]:\n                count += 1\n        return count > k\n\n    n, k = map(int, stdin.split()[0:2])\n    segments = [(int(line.split()[0]), int(line.split()[1])) for line in stdin.split('\\n')[1:]]\n    segments.sort(key=lambda x: x[1])\n\n    bad_points = set()\n    for i in range(1, segments[-1][1] + 1):\n        if is_bad(i, k, segments):\n            bad_points.add(i)\n\n    if not bad_points:\n        return \"0\\n\"\n\n    min_segments = n\n    min_indices = set(range(1, n + 1))\n    for i in range(n):\n        for j in range(i + 1, n):\n            if segments[i][0] <= segments[j][0] <= segments[i][1] <= segments[j][1]:\n                new_segments = segments[:i] + segments[j:]\n                new_bad_points = set()\n                for point in bad_points:\n                    if not is_bad(point, k, new_segments):\n                        new_bad_points.add(point)\n                if not new_bad_points:\n                    if len(new_segments) < min_segments:\n                        min_segments = len(new_segments)\n                        min_indices = set([i + 1, j + 1])\n                    elif len(new_segments) == min_segments:\n                        min_indices.add(i + 1)\n                        min_indices.add(j + 1)\n    return str(min_segments) + \"\\n\" + \" \".join(map(str, sorted(min_indices))) + \"\\n\""
    },
    {
        "number": 4411,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.splitlines()\n    n, k = map(int, lines[0].split())\n    segments = [(int(line.split()[0]), int(line.split()[1])) for line in lines[1:]]\n    \n    # initialize bad points\n    bad_points = [0] * (2 * 10**5 + 1)\n    \n    # count covered points\n    for i in range(n):\n        for j in range(segments[i][0], segments[i][1] + 1):\n            bad_points[j] += 1\n    \n    # find bad points\n    bad_points_set = set()\n    for i in range(1, len(bad_points)):\n        if bad_points[i] > k:\n            bad_points_set.add(i)\n    \n    # remove segments\n    removed_segments = set()\n    for i in range(n):\n        for j in range(segments[i][0], segments[i][1] + 1):\n            if j in bad_points_set:\n                removed_segments.add(i)\n                for k in range(segments[i][0], segments[i][1] + 1):\n                    bad_points[k] -= 1\n    \n    # format output\n    output = f\"{len(removed_segments)}\\n\" + \" \".join(map(str, sorted(removed_segments)))\n    \n    return output "
    },
    {
        "number": 4411,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    segments = []\n    for _ in range(n):\n        l, r = map(int, stdin.readline().split())\n        segments.append((l, r))\n\n    def merge_overlapping_segments(segments: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n        segments.sort()\n        merged_segments = []\n        for segment in segments:\n            if not merged_segments or merged_segments[-1][1] < segment[0]:\n                merged_segments.append(segment)\n            else:\n                merged_segments[-1] = (merged_segments[-1][0], max(merged_segments[-1][1], segment[1]))\n        return merged_segments\n\n    def count_bad_points(segments: List[Tuple[int, int]]) -> int:\n        bad_points = 0\n        points_covered = set()\n        for l, r in segments:\n            for j in range(l, r + 1):\n                if j in points_covered:\n                    bad_points += 1\n                points_covered.add(j)\n        return bad_points\n\n    merged_segments = merge_overlapping_segments(segments)\n    bad_points = count_bad_points(merged_segments)\n    if bad_points == 0:\n        return f\"0\\n\"\n\n    min_removed = n\n    removed_indices = set()\n    for i, (l, r) in enumerate(merged_segments):\n        if r - l + 1 > k:\n            removed_indices.add(i)\n            bad_points -= r - l + 1 - k\n            if bad_points == 0:\n                min_removed = len(removed_indices)\n                break\n\n    return f\"{min_removed}\\n{' '.join(map(str, sorted(removed_indices)))}\""
    },
    {
        "number": 4411,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    segments = []\n    for line in stdin.split('\\n')[1:n+1]:\n        l, r = map(int, line.split())\n        segments.append((l, r))\n    \n    segments.sort(key=lambda x: (x[0], x[1]))\n    bad_points = 0\n    to_remove = []\n    i = 0\n    j = 0\n    \n    while j < n:\n        if i < n and segments[i][0] <= segments[j][0] and segments[i][1] >= segments[j][1]:\n            bad_points += 1\n            to_remove.append(i)\n            i += 1\n        else:\n            bad_points -= 1\n            if bad_points > k:\n                return \"0\"\n            j += 1\n    \n    to_remove = list(set(to_remove))\n    return f\"{len(to_remove)}\\n{' '.join(map(str, to_remove))}\" "
    },
    {
        "number": 4411,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Split input by line\n    lines = stdin.splitlines()\n\n    # Parse n and k\n    n, k = map(int, lines[0].split())\n\n    # Parse segments\n    segments = []\n    for i in range(1, n + 1):\n        l, r = map(int, lines[i].split())\n        segments.append((l, r))\n\n    # Sort segments by their right endpoint\n    segments.sort(key=lambda x: x[1])\n\n    # Initialize left and right pointers\n    left, right = 0, 0\n    count = 0\n    result = []\n\n    while right < n:\n        # If the count of segments covering the current left endpoint is greater than k,\n        # remove the leftmost segment and update the left pointer\n        if count > k:\n            count -= segments[left][1] - segments[left][0] + 1\n            left += 1\n        # Otherwise, add the current segment to the result and update the right pointer\n        else:\n            result.append(right + 1)\n            count += segments[right][1] - segments[right][0] + 1\n            right += 1\n\n    return str(len(result)) + \"\\n\" + \" \".join(map(str, result))"
    },
    {
        "number": 4411,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.split()[2:4])\n        segments.append((l, r))\n\n    def is_bad_point(point: int) -> bool:\n        count = 0\n        for segment in segments:\n            if segment[0] <= point <= segment[1]:\n                count += 1\n        return count > k\n\n    def remove_minimum_segments() -> int:\n        points = []\n        for i in range(1, 2 * 10**5 + 1):\n            if is_bad_point(i):\n                points.append(i)\n        return len(points)\n\n    return str(remove_minimum_segments()) + \"\\n\" + \" \".join(map(str, remove_minimum_segments()))"
    },
    {
        "number": 4412,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    def prettiness(a, b, c):\n        return lcm(lcm(a, b), c)\n\n    def max_prettiness(a, b, c):\n        if not a or not b or not c:\n            return 0\n        if len(a) == 1 or len(b) == 1 or len(c) == 1:\n            return max(a[0], b[0], c[0])\n\n        max_sum = 0\n        for i in range(len(a)):\n            for j in range(i + 1, len(b)):\n                for k in range(j + 1, len(c)):\n                    p = prettiness(a[i], b[j], c[k])\n                    if gcd(a[i], b[j]) == gcd(b[j], c[k]) == gcd(c[k], a[i]):\n                        max_sum = max(max_sum, p)\n        return max_sum\n\n    stdin = [int(x) for x in stdin.split('\\n')]\n    queries = stdin[0]\n    result = []\n\n    for i in range(1, queries + 1):\n        n = stdin[i * 2 - 1]\n        a = stdin[i * 2:i * 2 + n]\n        a.sort(reverse=True)\n        result.append(max_prettiness(a[:1], a[1:2], a[2:]))\n\n    return '\\n'.join(map(str, result))\n\ninput_data = \"\"\"3\n4\n5 6 15 30\n4\n10 6 30 15\n3\n3 4 6\"\"\"\nprint(solution(input_data)) "
    },
    {
        "number": 4412,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def find_max_prettiness(a: list, n: int, k: int) -> int:\n        a.sort(reverse=True)\n        result = 0\n        for i in range(min(k, n)):\n            if i == 0 or a[i] % result == 0:\n                result += a[i]\n            else:\n                break\n        return result\n\n    q = int(stdin.readline())\n    result = []\n    for _ in range(q):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        k = 3\n        result.append(find_max_prettiness(a, n, k))\n    return \"\\n\".join(map(str, result))"
    },
    {
        "number": 4412,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    def is_pretty(a, b):\n        return gcd(a, b) == 1\n\n    def is_pretty_set(s):\n        return all(is_pretty(s[i], s[j]) for i in range(len(s)) for j in range(i + 1, len(s)))\n\n    def max_prettiness(a, b, c):\n        return max(a + b, a + c, b + c)\n\n    def max_prettiness_in_set(s):\n        if len(s) == 1:\n            return s[0]\n        if len(s) == 2:\n            return max(s)\n        return max(max_prettiness(s[i], s[j], s[k]) for i in range(len(s)) for j in range(i + 1, len(s)) for k in range(j + 1, len(s)))\n\n    output = []\n    for _ in range(int(stdin.readline())):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        s = set(a)\n        while len(s) < 3:\n            s.add(max(s) + 1)\n        s = sorted(list(s), reverse=True)\n        if is_pretty_set(s):\n            output.append(max_prettiness_in_set(s))\n        else:\n            output.append(\"-1\")\n    return \"\\n\".join(map(str, output))\n"
    },
    {
        "number": 4412,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    def max_prettiness(prettiness: List[int]) -> int:\n        if len(prettiness) == 1:\n            return prettiness[0]\n\n        max_pretty = 0\n        for i in range(len(prettiness)):\n            for j in range(i + 1, len(prettiness)):\n                for k in range(j + 1, len(prettiness)):\n                    if gcd(prettiness[i], prettiness[j]) == 1 and gcd(prettiness[i], prettiness[k]) == 1 and gcd(prettiness[j], prettiness[k]) == 1:\n                        pretty = prettiness[i] + prettiness[j] + prettiness[k]\n                        max_pretty = max(max_pretty, pretty)\n\n        return max_pretty\n\n    def process_queries(q: int, queries: List[str]) -> List[int]:\n        results = []\n        for query in queries:\n            n, prettinesses = int(query[0]), [int(x) for x in query[1:].split()]\n            prettinesses.sort(reverse=True)\n            results.append(max_prettiness(prettinesses[:3]))\n        return results\n\n    stdin_lines = stdin.strip().split(\"\\n\")\n    q = int(stdin_lines[0])\n    queries = stdin_lines[1:]\n\n    results = process_queries(q, queries)\n\n    return \"\\n\".join(map(str, results))"
    },
    {
        "number": 4412,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(n, a, b, c):\n        return (a % b == 0 and a % c == 0) or (b % a == 0 and b % c == 0) or (c % a == 0 and c % b == 0)\n\n    def max_cumulative_prettiness(n, a):\n        a.sort(reverse=True)\n        max_prettiness = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                for k in range(j + 1, n):\n                    if is_valid(n, a[i], a[j], a[k]):\n                        max_prettiness = max(max_prettiness, a[i] + a[j] + a[k])\n        return max_prettiness\n\n    q = int(stdin.readline().strip())\n    result = []\n    for _ in range(q):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        max_prettiness = max_cumulative_prettiness(n, a)\n        result.append(max_prettiness)\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 4412,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    def is_valid(a, b, c):\n        return gcd(a, b) == 1 and gcd(b, c) == 1 and gcd(c, a) == 1\n\n    def max_prettiness(a):\n        a.sort(reverse=True)\n        max_prettiness = 0\n        for i in range(len(a)):\n            for j in range(i + 1, len(a)):\n                for k in range(j + 1, len(a)):\n                    if is_valid(a[i], a[j], a[k]):\n                        max_prettiness = max(max_prettiness, a[i] + a[j] + a[k])\n        return max_prettiness\n\n    q = int(stdin.readline().strip())\n    result = []\n\n    for _ in range(q):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        result.append(max_prettiness(a))\n\n    return \"\\n\".join(map(str, result))"
    },
    {
        "number": 4412,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    queries = [line.split() for line in stdin.split(\"\\n\")[1:]]\n\n    def is_valid_combination(a: int, b: int, c: int) -> bool:\n        return (a % b != 0) and (b % c != 0) and (c % a != 0)\n\n    def max_prettiness(problems: List[int], n: int) -> int:\n        if n == 1:\n            return problems[0]\n        if n == 2:\n            return max(problems[0] + problems[1], problems[1])\n        if n == 3:\n            return max(problems[0] + problems[1] + problems[2], max(problems[0] + problems[1], problems[1] + problems[2]))\n\n    result = []\n    for n, problems in queries:\n        problems = [int(x) for x in problems]\n        max_prettiness_value = 0\n        for i in range(len(problems) - 2):\n            for j in range(i + 1, len(problems) - 1):\n                for k in range(j + 1, len(problems)):\n                    if is_valid_combination(problems[i], problems[j], problems[k]):\n                        max_prettiness_value = max(max_prettiness_value, max_prettiness([problems[i], problems[j], problems[k]], 3))\n        result.append(max_prettiness_value)\n\n    return \"\\n\".join(map(str, result))"
    },
    {
        "number": 4412,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    q = int(stdin.split('\\n', 1)[0])\n    for i in range(q):\n        n = int(stdin.split('\\n', 1)[1].split('\\n', 1)[0])\n        a_list = list(map(int, stdin.split('\\n', 1)[1].split('\\n', 1)[1].split()))\n        a_list.sort(reverse=True)\n        max_sum = 0\n        for j in range(len(a_list)):\n            for k in range(j + 1, len(a_list)):\n                for l in range(k + 1, len(a_list)):\n                    if a_list[j] % a_list[k] == 0 or a_list[j] % a_list[l] == 0 or a_list[k] % a_list[l] == 0:\n                        continue\n                    max_sum = max(max_sum, a_list[j] + a_list[k] + a_list[l])\n        result.append(str(max_sum))\n    return '\\n'.join(result)"
    },
    {
        "number": 4412,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(a, b, c):\n        return (a % b != 0) and (a % c != 0) and (b % c != 0)\n\n    def find_max_prettiness(prettinesses, k):\n        if k == 1:\n            return max(prettinesses)\n        if k == 2:\n            return max(prettinesses[i] + prettinesses[j] for i in range(len(prettinesses)) for j in range(i+1, len(prettinesses)) if is_valid(prettinesses[i], prettinesses[j], 0))\n        return max(prettinesses[i] + prettinesses[j] + prettinesses[k] for i in range(len(prettinesses)) for j in range(i+1, len(prettinesses)) for k in range(j+1, len(prettinesses)) if is_valid(prettinesses[i], prettinesses[j], prettinesses[k]))\n\n    q = int(stdin.readline())\n    result = []\n    for _ in range(q):\n        n = int(stdin.readline())\n        prettinesses = list(map(int, stdin.readline().split()))\n        result.append(find_max_prettiness(prettinesses, 3))\n    return \"\\n\".join(map(str, result))"
    },
    {
        "number": 4412,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def divisible(a, b, c):\n        return a % b == 0 or a % c == 0 or b % c == 0\n\n    def max_prettiness(prettinesses):\n        n = len(prettinesses)\n        if n == 1:\n            return prettinesses[0]\n        elif n == 2:\n            return max(prettinesses[0] + prettinesses[1], prettinesses[1])\n        else:\n            max_p = 0\n            for i in range(n):\n                for j in range(i + 1, n):\n                    if not divisible(prettinesses[i], prettinesses[j], prettinesses[k]):\n                        max_p = max(max_p, prettinesses[i] + prettinesses[j] + prettinesses[k])\n            return max_p\n\n    lines = stdin.splitlines()\n    q = int(lines[0])\n    results = []\n    for i in range(1, q + 1):\n        n = int(lines[i * 2 - 1])\n        prettinesses = list(map(int, lines[i * 2].split()))\n        results.append(max_prettiness(prettinesses))\n    return '\\n'.join(map(str, results))"
    },
    {
        "number": 4413,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    queries = stdin.split(\"\\n\")\n    results = []\n\n    for i in range(0, len(queries), 2):\n        n = int(queries[i])\n        skills = list(map(int, queries[i + 1].split()))\n\n        min_teams = 1\n        for i in range(len(skills)):\n            for j in range(i + 1, len(skills)):\n                if abs(skills[i] - skills[j]) == 1:\n                    min_teams += 1\n\n        results.append(str(min_teams))\n\n    return \"\\n\".join(results)\n\n\ndef"
    },
    {
        "number": 4413,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    queries = stdin.split(\"\\n\")\n    result = []\n\n    for q in range(int(queries[0])):\n        n = int(queries[q * 2 + 1])\n        students = list(map(int, queries[q * 2 + 2].split()))\n        students.sort()\n\n        teams = []\n        for i in range(n):\n            if not teams or abs(students[i] - teams[-1][-1]) > 1:\n                teams.append([students[i]])\n            else:\n                teams[-1].append(students[i])\n\n        result.append(len(teams))\n\n    return \"\\n\".join(map(str, result))\n\ninput_data = \"\"\"4\n4\n2 10 1 20\n2\n3 6\n5\n2 3 4 99 100\n1\n42\"\"\"\n\nprint(solution(input_data)) "
    },
    {
        "number": 4413,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split()[0])\n    result = []\n    for i in range(q):\n        n = int(stdin.split()[1])\n        skills = list(map(int, stdin.split()[1:n+1]))\n        min_teams = float('inf')\n        for i in range(1, n+1):\n            for j in range(i+1, n+1):\n                if skills[j-1] - skills[i-1] > 1:\n                    min_teams = min(min_teams, i + j - 2)\n        result.append(min_teams)\n    return '\\n'.join(map(str, result))\n\ndef"
    },
    {
        "number": 4413,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    queries = [q for q in stdin.split('\\n') if q.strip()]\n    q = int(queries[0])\n    results = []\n    for i in range(1, q+1):\n        n = int(queries[i*2-1])\n        a = [int(x) for x in queries[i*2].split()]\n        team_count = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                if abs(a[i] - a[j]) > 1:\n                    team_count += 1\n        results.append(team_count)\n    return '\\n'.join([str(result) for result in results])\n"
    },
    {
        "number": 4413,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split(\"\\n\")[0])\n    results = []\n\n    for i in range(q):\n        n = int(stdin.split(\"\\n\")[i * 2 + 1])\n        skills = list(map(int, stdin.split(\"\\n\")[i * 2 + 2].split()))\n\n        min_teams = n\n        for i in range(n):\n            for j in range(i + 1, n):\n                if abs(skills[i] - skills[j]) == 1:\n                    min_teams -= 1\n\n        results.append(min_teams)\n\n    return \"\\n\".join(map(str, results))"
    },
    {
        "number": 4413,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    queries = stdin.strip().split('\\n')\n    result = []\n\n    for query in queries:\n        n = int(query.split()[0])\n        skills = list(map(int, query.split()[1:]))\n\n        min_teams = float('inf')\n        for i in range(1, n):\n            max_diff = max(skills) - min(skills)\n            diffs = [abs(skills[i] - skills[j]) for j in range(n) if j != i]\n            num_teams = sum(diff > 1 for diff in diffs) + 1\n            min_teams = min(min_teams, num_teams)\n\n        result.append(str(min_teams))\n\n    return '\\n'.join(result)\n"
    },
    {
        "number": 4413,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.splitlines()[0])\n    result = []\n    for i in range(q):\n        n = int(stdin.splitlines()[1 + i * 2])\n        skills = list(map(int, stdin.splitlines()[2 + i * 2].split()))\n        min_teams = float('inf')\n        for i in range(1, n+1):\n            for j in range(i+1, n+1):\n                if skills[j-1] - skills[i-1] == 1:\n                    min_teams = 1\n                    break\n            if min_teams == 1:\n                break\n        result.append(min_teams)\n    return \"\\n\".join(map(str, result))"
    },
    {
        "number": 4413,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    result = []\n    for _ in range(q):\n        n = int(stdin.readline().strip())\n        skills = list(map(int, stdin.readline().strip().split()))\n        count = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                if abs(skills[i] - skills[j]) == 1:\n                    count += 1\n        result.append(count)\n    return \"\\n\".join(map(str, result))"
    },
    {
        "number": 4413,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.splitlines()[0])\n    results = []\n\n    for i in range(q):\n        n = int(stdin.splitlines()[i * 2 + 1])\n        skills = list(map(int, stdin.splitlines()[i * 2 + 2].split()))\n\n        teams = 0\n        team = set()\n\n        for skill in skills:\n            if len(team) == 0:\n                team.add(skill)\n            else:\n                min_diff = min([abs(skill - s) for s in team])\n                if min_diff > 1:\n                    team.add(skill)\n                else:\n                    teams += 1\n                    team = set()\n                    team.add(skill)\n\n        if len(team) > 0:\n            teams += 1\n\n        results.append(str(teams))\n\n    return \"\\n\".join(results)\n\n\ninput_str = \"\"\"4\n4\n2 10 1 20\n2\n3 6\n5\n2 3 4 99 100\n1\n42\"\"\"\n\nprint(solution(input_str)) "
    },
    {
        "number": 4413,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split('\\n')[0])\n    output = []\n\n    for i in range(1, q+1):\n        n = int(stdin.split('\\n')[i].split()[0])\n        skills = [int(x) for x in stdin.split('\\n')[i].split()[1:]]\n        min_teams = n\n\n        for skill in skills:\n            team_size = 1\n            for other_skill in skills:\n                if other_skill != skill and abs(skill - other_skill) == 1:\n                    team_size += 1\n            min_teams = min(min_teams, team_size)\n\n        output.append(str(min_teams))\n\n    return '\\n'.join(output)\n\ninput_data = \"\"\"4\n4\n2 10 1 20\n2\n3 6\n5\n2 3 4 99 100\n1\n42\"\"\"\nprint(solution(input_data)) "
    },
    {
        "number": 4414,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split()[0])\n    for _ in range(q):\n        a, b, n, S = map(int, stdin.split())\n        if n == S:\n            x = a\n            y = 0\n        elif n * a + b >= S:\n            x = min(a, (S - n * b) // n)\n            y = b - (S - n * x) // n\n        else:\n            x = 0\n            y = 0\n        if x >= 0 and y >= 0:\n            print(\"YES\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 4414,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def coin_change(a, b, n, S):\n        dp = [0] * (S + 1)\n        dp[0] = 1\n        for i in range(1, a + 1):\n            for j in range(S, 0, -1):\n                if i <= j // n:\n                    dp[j] += dp[j - i * n]\n        for i in range(S, 0, -1):\n            if dp[i] > b:\n                return i\n        return -1\n\n    q = int(stdin.split(\"\\n\")[0])\n    results = []\n\n    for i in range(1, q + 1):\n        a, b, n, S = map(int, stdin.split(\"\\n\")[i].split())\n        x = coin_change(a, b, n, S)\n        if x == -1:\n            results.append(\"NO\")\n        else:\n            results.append(\"YES\")\n\n    return \"\\n\".join(results)\n"
    },
    {
        "number": 4414,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.splitlines()\n    q = int(test_cases[0])\n    for i in range(1, q+1):\n        a, b, n, S = map(int, test_cases[i].split())\n        if n*a + b >= S:\n            print(\"YES\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 4414,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    lines = stdin.strip().split('\\n')\n    q = int(lines[0])\n\n    # Define a function to check if there exist x and y\n    def check_coins(a, b, n, S):\n        for x in range(a+1):\n            y = (S - x*n) // n\n            if 0 <= y <= b:\n                return True\n        return False\n\n    # Solve each test case\n    for i in range(1, q+1):\n        a, b, n, S = map(int, lines[i].split())\n        if check_coins(a, b, n, S):\n            print(\"YES\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 4414,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.splitlines()[0])\n    for i in range(1, q+1):\n        a, b, n, S = map(int, stdin.splitlines()[i].split())\n        total_coins = a*n + b\n        if total_coins < S:\n            print(\"NO\")\n        else:\n            x = S // n\n            y = total_coins - x*n\n            if y >= 0 and y <= b:\n                print(\"YES\")\n            else:\n                print(\"NO\")"
    },
    {
        "number": 4414,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.split(\"\\n\")\n    for i in range(1, len(test_cases), 2):\n        a, b, n, S = map(int, test_cases[i].split())\n        total_coins = (a * n) + (b * 1)\n        if total_coins >= S:\n            print(\"YES\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 4414,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    for _ in range(q):\n        a, b, n, S = map(int, stdin.readline().strip().split())\n        if a * n + b * 1 >= S:\n            print(\"YES\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 4414,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    cases = stdin.splitlines()\n    q = int(cases[0])\n    for i in range(1, q+1):\n        a, b, n, S = map(int, cases[i].split())\n        # Check if there is a solution\n        if S > a*n + b:\n            print(\"NO\")\n        else:\n            # Iterate through all possible combinations of x and y\n            for x in range(a+1):\n                y = (S - x*n) // n\n                if x*n + y*n == S:\n                    if y <= b:\n                        print(\"YES\")\n                        break\n            else:\n                print(\"NO\")\n\ninput_str = \"\"\"4\n1 2 3 4\n1 2 3 6\n5 2 6 27\n3 3 5 18\"\"\"\nsolution(input_str) "
    },
    {
        "number": 4414,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    for _ in range(q):\n        a, b, n, S = map(int, stdin.readline().strip().split())\n        if n * a + b >= S:\n            print(\"YES\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 4414,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.splitlines()[0])\n    for i in range(1, q + 1):\n        a, b, n, S = map(int, stdin.splitlines()[i].split())\n        if a * n + b * 1 == S:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\ninput_data = \"\"\"4\n1 2 3 4\n1 2 3 6\n5 2 6 27\n3 3 5 18\"\"\"\n\nsolution(input_data) "
    },
    {
        "number": 4415,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    increasing = []\n    decreasing = []\n    increasing_count = 0\n    decreasing_count = 0\n\n    for i in range(n):\n        if i == 0 or a[i] > a[i-1]:\n            increasing.append(a[i])\n            increasing_count += 1\n        else:\n            decreasing.append(a[i])\n            decreasing_count += 1\n\n    if increasing_count + decreasing_count != n:\n        return \"NO\"\n\n    increasing.sort()\n    decreasing.sort(reverse=True)\n\n    if increasing_count > 0:\n        print(increasing_count)\n        print(*increasing)\n    else:\n        print(increasing_count)\n        print()\n\n    if decreasing_count > 0:\n        print(decreasing_count)\n        print(*decreasing)\n    else:\n        print(decreasing_count)\n        print()\n\n    return \"YES\"\n\ninput_string = input(\"Enter the input sequence: \")\nresult = solution(input_string)\nprint(result) "
    },
    {
        "number": 4415,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    a = list(map(int, lines[1].split()))\n    \n    if len(a) != n:\n        return \"NO\"\n    \n    for i in range(1, n):\n        if a[i] < a[i-1]:\n            return \"NO\"\n    \n    for i in range(n-1, 0, -1):\n        if a[i] > a[i-1]:\n            return \"NO\"\n    \n    for i in range(1, n-1):\n        if a[i] == a[i-1] and a[i] == a[i+1]:\n            return \"NO\"\n    \n    increasing = []\n    decreasing = []\n    for i in range(n):\n        if i == 0 or a[i-1] < a[i]:\n            increasing.append(a[i])\n        if i == n-1 or a[i] > a[i+1]:\n            decreasing.append(a[i])\n    \n    if len(increasing) + len(decreasing) != n:\n        return \"NO\"\n    \n    return \"YES\\n{}\\n{}\\n{}\\n{}\".format(len(increasing), \" \".join(map(str, increasing)), len(decreasing), \" \".join(map(str, decreasing))) "
    },
    {
        "number": 4415,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n, sequence = stdin.split()\n    n = int(n)\n    a = [int(x) for x in sequence.split()]\n\n    # Create empty arrays for increasing and decreasing sequences\n    increasing = []\n    decreasing = []\n\n    # Initialize variables for finding increasing and decreasing sequences\n    increasing_start = 0\n    decreasing_end = n - 1\n    increasing_index = 0\n    decreasing_index = 0\n\n    # Check if the sequence is strictly increasing or decreasing\n    increasing_flag = True\n    decreasing_flag = True\n\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            increasing_flag = False\n        if a[i] < a[i - 1]:\n            decreasing_flag = False\n\n    # If the sequence is strictly increasing or decreasing, find the increasing and decreasing sequences\n    if increasing_flag:\n        increasing = a\n        decreasing = []\n    elif decreasing_flag:\n        increasing = []\n        decreasing = a\n    else:\n        # Find the increasing and decreasing sequences\n        for i in range(n):\n            if increasing_start < i < decreasing_end:\n                if a[i] < a[i + 1]:\n                    increasing.append(a[i])\n                    increasing_index += 1\n                elif a[i] > a[i - 1]:\n                    decreasing.append(a[i])\n                    decreasing_index += 1\n            elif increasing_start == i:\n                if a[i] < a[i + 1]:\n                    increasing.append(a[i])\n                    increasing_index += 1\n            elif decreasing_end == i:\n                if a[i] > a[i - 1]:\n                    decreasing.append(a[i])\n                    decreasing_index += 1\n\n    # Check if the union of increasing and decreasing sequences is a permutation of the given sequence\n    if increasing_index + decreasing_index != n:\n        return \"NO\"\n    else:\n        return \"YES\\n\" + str(increasing_index) + \"\\n\" + \" \".join([str(x) for x in increasing]) + \"\\n\" + str(decreasing_index) + \"\\n\" + \" \".join([str(x) for x in decreasing])"
    },
    {
        "number": 4415,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    increasing = []\n    decreasing = []\n    for i in range(n):\n        if len(increasing) == 0:\n            increasing.append(a[i])\n        elif increasing[-1] < a[i]:\n            increasing.append(a[i])\n        else:\n            break\n\n    for i in range(n-1, -1, -1):\n        if len(decreasing) == 0:\n            decreasing.append(a[i])\n        elif decreasing[-1] > a[i]:\n            decreasing.append(a[i])\n        else:\n            break\n\n    if len(increasing) + len(decreasing) != n:\n        return \"NO\"\n\n    increasing.reverse()\n    return \"YES\\n{}\\n{}\\n{}\\n{}\".format(len(increasing), \" \".join(map(str, increasing)), len(decreasing), \" \".join(map(str, decreasing)))"
    },
    {
        "number": 4415,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    \n    def merge_sequences(increasing, decreasing):\n        return increasing + decreasing\n    \n    def is_valid_sequence(seq, increasing):\n        if not increasing:\n            return all(seq[i] <= seq[i+1] for i in range(len(seq)-1))\n        else:\n            return all(seq[i] >= seq[i+1] for i in range(len(seq)-1))\n    \n    def find_increasing_decreasing_sequences(a):\n        increasing = []\n        decreasing = []\n        for i in range(len(a)-1):\n            if a[i] < a[i+1]:\n                increasing.append(a[i])\n            elif a[i] > a[i+1]:\n                decreasing.append(a[i])\n        return increasing, decreasing\n    \n    def print_sequences(increasing, decreasing):\n        if not is_valid_sequence(increasing, False) or not is_valid_sequence(decreasing, True):\n            return \"NO\"\n        \n        increasing_str = \" \".join(map(str, increasing))\n        decreasing_str = \" \".join(map(str, decreasing))\n        return f\"YES\\n{len(increasing)}\\n{increasing_str}\\n{len(decreasing)}\\n{decreasing_str}\"\n    \n    increasing, decreasing = find_increasing_decreasing_sequences(a)\n    return print_sequences(increasing, decreasing)"
    },
    {
        "number": 4415,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    a = list(map(int, lines[1].split()))\n    \n    inc = []\n    dec = []\n    \n    for i in range(n):\n        if i == 0 or i == n - 1:\n            continue\n        if a[i] > a[i - 1] and a[i] > a[i + 1]:\n            inc.append(a[i])\n        elif a[i] < a[i - 1] and a[i] < a[i + 1]:\n            dec.append(a[i])\n    \n    if len(inc) == 0 and len(dec) == 0:\n        return \"NO\"\n    \n    return \"YES\\n{}\\n{}\\n{}\\n{}\".format(len(inc), \" \".join(map(str, inc)), len(dec), \" \".join(map(str, dec)))\n\ninput_data = \"7\\n7 2 7 3 3 1 4\\n5\\n4 3 1 5 3\\n5\\n1 1 2 1 2\\n5\\n0 1 2 3 4\\n5\\n4 3 2 1 0\"\noutput = [solution(data) for data in input_data.split(\"\\n\\n\")]\nfor result in output:\n    print(result) "
    },
    {
        "number": 4415,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.splitlines()\n    n = int(input_lines[0])\n    a = [int(x) for x in input_lines[1].split()]\n    \n    if len(a) != n:\n        return \"NO\"\n    \n    increasing = []\n    decreasing = []\n    for i in range(n):\n        if i == 0 or a[i] > a[i-1]:\n            increasing.append(a[i])\n        else:\n            break\n    else:\n        decreasing = sorted(a[len(increasing):], reverse=True)\n    \n    if len(increasing) + len(decreasing) != n:\n        return \"NO\"\n    \n    if increasing == sorted(a[:len(increasing)]) and decreasing == sorted(a[len(increasing):], reverse=True):\n        return \"YES\\n{}\\n{}\\n{}\\n{}\".format(len(increasing), \" \".join(map(str, increasing)), len(decreasing), \" \".join(map(str, decreasing)))\n    else:\n        return \"NO\""
    },
    {
        "number": 4415,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    def is_increasing(seq):\n        return all(seq[i] < seq[i + 1] for i in range(len(seq) - 1))\n\n    def is_decreasing(seq):\n        return all(seq[i] > seq[i + 1] for i in range(len(seq) - 1))\n\n    for i in range(1, n):\n        if a[i] <= a[i - 1]:\n            if is_increasing(a[:i]):\n                increasing = sorted(a[:i])\n                decreasing = sorted(a[i:], reverse=True)\n            elif is_decreasing(a[i:]):\n                increasing = sorted(a[:i])\n                decreasing = sorted(a[i:])\n            else:\n                return \"NO\"\n            break\n    else:\n        return \"NO\"\n\n    return \"YES\\n{}\\n{}\\n{}\\n{}\".format(\n        len(increasing),\n        \" \".join(map(str, increasing)),\n        len(decreasing),\n        \" \".join(map(str, decreasing))\n    )\n\ninput_str = \"\"\"7\n7 2 7 3 3 1 4\"\"\"\noutput_str = solution(input_str)\nprint(output_str)\n\ninput_str = \"\"\"5\n4 3 1 5 3\"\"\"\noutput_str = solution(input_str)\nprint(output_str)\n\ninput_str = \"\"\"5\n1 1 2 1 2\"\"\"\noutput_str = solution(input_str)\nprint(output_str)\n\ninput_str = \"\"\"5\n0 1 2 3 4\"\"\"\noutput_str = solution(input_str)\nprint(output_str)\n\ninput_str = \"\"\"5\n4 3 2 1 0\"\"\"\noutput_str = solution(input_str)\nprint(output_str) "
    },
    {
        "number": 4415,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n    \n    increasing = []\n    decreasing = []\n    \n    for i in range(n):\n        if len(increasing) == 0 and len(decreasing) == 0:\n            increasing.append(a[i])\n        elif len(increasing) > 0 and len(decreasing) == 0:\n            if a[i] > increasing[-1]:\n                increasing.append(a[i])\n            else:\n                decreasing.append(a[i])\n        elif len(increasing) == 0 and len(decreasing) > 0:\n            if a[i] < decreasing[-1]:\n                decreasing.append(a[i])\n            else:\n                increasing.append(a[i])\n        else:\n            break\n    \n    if len(increasing) + len(decreasing) != n:\n        return \"NO\"\n    \n    output = \"YES\\n\"\n    output += str(len(increasing)) + \"\\n\"\n    output += \" \".join(map(str, increasing)) + \"\\n\"\n    output += str(len(decreasing)) + \"\\n\"\n    output += \" \".join(map(str, decreasing)) + \"\\n\"\n    \n    return output "
    },
    {
        "number": 4415,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n\n    def is_increasing(seq):\n        return all(seq[i] < seq[i+1] for i in range(len(seq)-1))\n\n    def is_decreasing(seq):\n        return all(seq[i] > seq[i+1] for i in range(len(seq)-1))\n\n    def find_increasing_seq(seq):\n        inc = []\n        for x in seq:\n            if x not in inc:\n                inc.append(x)\n        return sorted(inc)\n\n    def find_decreasing_seq(seq):\n        dec = []\n        for x in seq:\n            if x not in dec:\n                dec.append(x)\n        return sorted(dec, reverse=True)\n\n    if is_increasing(a):\n        increasing = a\n        decreasing = find_decreasing_seq(a)\n    elif is_decreasing(a):\n        increasing = find_increasing_seq(a)\n        decreasing = a\n    else:\n        return \"NO\"\n\n    if len(increasing) + len(decreasing) != n:\n        return \"NO\"\n\n    shuffled = increasing + decreasing\n    if sorted(a) != sorted(shuffled):\n        return \"NO\"\n\n    increasing_str = \" \".join(map(str, increasing))\n    decreasing_str = \" \".join(map(str, decreasing))\n\n    return f\"YES\\n{len(increasing)}\\n{increasing_str}\\n{len(decreasing)}\\n{decreasing_str}\""
    },
    {
        "number": 4416,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    books = []\n    \n    for _ in range(n):\n        t, a, b = map(int, input().split())\n        books.append((t, a, b))\n    \n    def total_reading_time(books_chosen):\n        return sum(t for t, _, _ in books_chosen)\n    \n    def number_of_liked_books(books_chosen, a_or_b):\n        return sum(a_or_b for _, a_or_b, _ in books_chosen)\n    \n    min_total_reading_time = float('inf')\n    min_books_chosen = []\n    \n    for i in range(1, 2**n):\n        bits = bin(i)[2:].zfill(n)\n        books_chosen = [books[j] for j, bit in enumerate(bits) if bit == '1']\n        a_books_chosen = number_of_liked_books(books_chosen, a)\n        b_books_chosen = number_of_liked_books(books_chosen, b)\n        \n        if a_books_chosen >= k and b_books_chosen >= k:\n            total_time = total_reading_time(books_chosen)\n            if total_time < min_total_reading_time:\n                min_total_reading_time = total_time\n                min_books_chosen = books_chosen\n    \n    if min_books_chosen:\n        return str(min_total_reading_time)\n    else:\n        return '-1'\n\nstdin = \"\"\"8 4\n7 1 1\n2 1 1\n4 0 1\n8 1 1\n1 0 1\n1 1 1\n1 0 1\n3 0 0\"\"\"\nprint(solution(stdin)) "
    },
    {
        "number": 4416,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, input().split())\n    books = []\n\n    for _ in range(n):\n        t, a, b = map(int, input().split())\n        books.append((t, a, b))\n\n    min_time = float('inf')\n    for i in range(1 << n):\n        count_a, count_b = 0, 0\n        time = 0\n\n        for j in range(n):\n            if i & (1 << j):\n                time += books[j][0]\n                count_a += books[j][1]\n                count_b += books[j][2]\n\n        if count_a >= k and count_b >= k and time < min_time:\n            min_time = time\n\n    if min_time == float('inf'):\n        return '-1'\n    else:\n        return str(min_time)"
    },
    {
        "number": 4416,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def check(k, books):\n        alice = [t for t, a, b in books if a == 1]\n        bob = [t for t, a, b in books if b == 1]\n        if len(alice) >= k and len(bob) >= k:\n            return True\n        return False\n\n    n, k = map(int, stdin.split()[0:2])\n    books = []\n    for i in range(1, n+1):\n        line = stdin.split('\\n')[i].split()\n        t, a, b = map(int, line)\n        books.append((t, a, b))\n\n    books.sort(key=lambda x: x[0])\n    total_time = 0\n\n    for i in range(len(books)):\n        if check(k, books[:i+1]):\n            total_time += books[i][0]\n            if check(k, books[:i+1]):\n                return str(total_time)\n\n    return \"-1\""
    },
    {
        "number": 4416,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.splitlines()[0].split())\n    books = []\n\n    for line in stdin.splitlines()[1:]:\n        t, a, b = map(int, line.split())\n        books.append((t, a, b))\n\n    books.sort(key=lambda x: x[0])\n    total_time = 0\n    alice_books = 0\n    bob_books = 0\n\n    for book in books:\n        total_time += book[0]\n        alice_books += book[1]\n        bob_books += book[2]\n\n        if alice_books >= k and bob_books >= k:\n            return str(total_time)\n\n    return \"-1\""
    },
    {
        "number": 4416,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    books = []\n    for line in stdin.split()[2:]:\n        books.append(tuple(map(int, line.split())))\n\n    def is_valid_set(chosen_books):\n        alice_books = sum(1 for _, a, _ in chosen_books if a == 1)\n        bob_books = sum(1 for _, _, b in chosen_books if b == 1)\n        return alice_books >= k and bob_books >= k\n\n    def total_reading_time(chosen_books):\n        return sum(t for t, _, _ in chosen_books)\n\n    min_reading_time = float('inf')\n    for i in range(1, len(books) - k + 2):\n        for chosen_books in itertools.combinations(books, i):\n            if is_valid_set(chosen_books):\n                reading_time = total_reading_time(chosen_books)\n                min_reading_time = min(min_reading_time, reading_time)\n\n    if min_reading_time == float('inf'):\n        return '-1'\n    else:\n        return str(min_reading_time)\n\nimport itertools\n\ninput_data = \"\"\"\n8 4\n7 1 1\n2 1 1\n4 0 1\n8 1 1\n1 0 1\n1 1 1\n1 0 1\n3 0 0\n\"\"\"\n\nprint(solution(input_data))\n\ninput_data = \"\"\"\n5 2\n6 0 0\n9 0 0\n1 0 1\n2 1 1\n5 1 0\n\"\"\"\n\nprint(solution(input_data))\n\ninput_data = \"\"\"\n5 3\n3 0 0\n2 1 0\n3 1 0\n5 0 1\n3 0 1\n\"\"\"\n\nprint(solution(input_data)) "
    },
    {
        "number": 4416,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    books = []\n    \n    for _ in range(n):\n        t, a, b = map(int, stdin.readline().split())\n        books.append((t, a, b))\n    \n    books.sort(key=lambda x: x[0])\n    alice_liked = [False] * n\n    bob_liked = [False] * n\n    \n    for i, (_, a, b) in enumerate(books):\n        alice_liked[i] = bool(a)\n        bob_liked[i] = bool(b)\n    \n    def is_valid(selected):\n        alice_count = sum(1 for i in selected if alice_liked[i])\n        bob_count = sum(1 for i in selected if bob_liked[i])\n        return alice_count >= k and bob_count >= k\n    \n    min_reading_time = float('inf')\n    for i in range(2**n):\n        selected = [j for j in range(n) if i & (1 << j)]\n        if is_valid(selected):\n            reading_time = sum(books[i][0] for i in selected)\n            min_reading_time = min(min_reading_time, reading_time)\n    \n    return str(min_reading_time) if min_reading_time != float('inf') else '-1'"
    },
    {
        "number": 4416,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    books = [list(map(int, line.split())) for line in stdin.split()[2:]]\n    \n    # Find the set of books that both Alice and Bob like\n    alice_books = set(i for i, (_, a, _) in enumerate(books) if a == 1)\n    bob_books = set(i for i, (_, _, b) in enumerate(books) if b == 1)\n    common_books = alice_books.intersection(bob_books)\n    \n    if len(common_books) < k:\n        return \"-1\"\n    \n    # Find the set of books that both Alice and Bob like and have at least k books in total\n    total_books = set(i for i, (_, a, b) in enumerate(books) if a == 1 or b == 1)\n    for i in range(k, len(books) + 1):\n        for subset in itertools.combinations(total_books, i):\n            if len(set(subset).intersection(common_books)) >= k:\n                return str(sum(books[i][0] for i in subset))\n    \n    return \"-1\""
    },
    {
        "number": 4416,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    books = []\n\n    for i in range(n):\n        t, a, b = list(map(int, input().split()))\n        books.append((t, a, b))\n\n    # Sort books by likes and time\n    sorted_books = sorted(books, key=lambda x: (x[1], x[0]))\n\n    total_time = 0\n    selected_books = []\n\n    for book in sorted_books:\n        if len(selected_books) < k:\n            selected_books.append(book)\n            total_time += book[0]\n\n        elif len(selected_books) == k:\n            selected_books.append(book)\n            total_time += book[0]\n            break\n\n    if len(selected_books) < k:\n        return \"-1\"\n    else:\n        return str(total_time)\n"
    },
    {
        "number": 4416,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    books = []\n    for line in stdin.split('\\n')[2:]:\n        if not line:\n            break\n        t, a, b = map(int, line.split())\n        books.append((t, a, b))\n\n    def check_books(books, k):\n        alice_books = []\n        bob_books = []\n        total_time = 0\n\n        for i, book in enumerate(books, 1):\n            t, a, b = book\n            if a == 1:\n                alice_books.append(i)\n            if b == 1:\n                bob_books.append(i)\n            total_time += t\n\n            if len(alice_books) >= k and len(bob_books) >= k:\n                return total_time\n        return -1\n\n    return str(check_books(books, k))"
    },
    {
        "number": 4416,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    books = [list(map(int, line.strip().split())) for line in stdin.splitlines()[1:]]\n    \n    def is_valid(selected_books):\n        alice_likes = sum(books[i][1] for i in selected_books)\n        bob_likes = sum(books[i][2] for i in selected_books)\n        total_time = sum(books[i][0] for i in selected_books)\n        return alice_likes >= k and bob_likes >= k and total_time < min_time\n    \n    min_time = float('inf')\n    for i in range(1, 2**n):\n        selected_books = [j for j in range(n) if i & (1 << j)]\n        if is_valid(selected_books):\n            min_time = min(min_time, sum(books[i][0] for i in selected_books))\n    \n    return str(min_time) if min_time != float('inf') else '-1'"
    },
    {
        "number": 4417,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split('\\n', 1)[0])\n    result = []\n    for _ in range(q):\n        n, k = map(int, stdin.split('\\n', 1)[1].split('\\n', 1)[0].split())\n        a = list(map(int, stdin.split('\\n', 1)[1].split('\\n', 1)[1].split()))\n        if len(set(a)) == 1:\n            result.append(a[0])\n        else:\n            min_a = min(a)\n            max_a = max(a)\n            if min_a == max_a:\n                result.append(min_a)\n            else:\n                b = (max_a - min_a) // (k + 1)\n                if b > 0:\n                    result.append(b * (k + 1) + min_a)\n                else:\n                    result.append(-1)\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 4417,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    queries = stdin.split(\"\\n\")\n    result = []\n    \n    for i in range(0, len(queries), 2):\n        n, k = map(int, queries[i].split())\n        a = list(map(int, queries[i+1].split()))\n        \n        if n == 1:\n            result.append(a[0])\n        else:\n            b = []\n            for j in range(n):\n                b.append(min(a[j] + k, a[j] - k) + 1)\n            if all(b[j] > 0 for j in range(n)):\n                result.append(max(b))\n            else:\n                result.append(-1)\n    \n    return \"\\n\".join(map(str, result))"
    },
    {
        "number": 4417,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    result = []\n\n    for _ in range(q):\n        n, k = map(int, stdin.readline().split())\n        a = list(map(int, stdin.readline().split()))\n\n        min_price = max(a)\n        max_price = sum(a) // n\n\n        if k >= max_price - min_price:\n            result.append(-1)\n            continue\n\n        B = min_price + k\n        result.append(B)\n\n    return \"\\n\".join(map(str, result))"
    },
    {
        "number": 4417,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split(\"\\n\")[0])\n    output = []\n\n    for _ in range(q):\n        n, k = map(int, stdin.split(\"\\n\")[1].split())\n        a = list(map(int, stdin.split(\"\\n\")[2].split()))\n\n        min_a = min(a)\n        max_a = max(a)\n        possible_b = [b for b in range(min_a, max_a + 1) if all(abs(a_i - b) <= k for a_i in a)]\n\n        if not possible_b:\n            output.append(-1)\n        else:\n            output.append(max(possible_b))\n\n    return \"\\n\".join(map(str, output))\n\n\ninput_data = \"\"\"5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\"\"\"\n\nprint(solution(input_data)) "
    },
    {
        "number": 4417,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def check_condition(a_list, B, k):\n        return all(abs(a_i - B) <= k for a_i in a_list)\n\n    q = int(stdin.readline().strip())\n    results = []\n    for _ in range(q):\n        n, k = map(int, stdin.readline().strip().split())\n        a_list = list(map(int, stdin.readline().strip().split()))\n\n        # Check if it is possible to equalize prices of all given products\n        if not all(a_i > 0 for a_i in a_list):\n            results.append(-1)\n            continue\n\n        # Find the maximum possible equal price B\n        left = max(a_list)\n        right = sum(a_list) // n\n        while left <= right:\n            mid = (left + right) // 2\n            if check_condition(a_list, mid, k):\n                left = mid + 1\n            else:\n                right = mid - 1\n        B = left - 1\n\n        results.append(B)\n\n    return \" \".join(map(str, results))"
    },
    {
        "number": 4417,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    q = int(input())\n    res = []\n    for _ in range(q):\n        n, k = map(int, input().split())\n        a = list(map(int, input().split()))\n        \n        # Calculate the minimum and maximum possible prices\n        min_price = max(a)\n        max_price = sum(a) // n\n        \n        # Check if it's possible to equalize prices\n        if max_price - min_price > k:\n            res.append(-1)\n        else:\n            # Find the maximum possible equal price\n            B = max_price\n            for a_i in a:\n                if a_i > B:\n                    B = (a_i + B) // 2\n                elif a_i < B:\n                    B = (a_i + B - 1) // 2\n            res.append(B)\n    \n    return \"\\n\".join(map(str, res))"
    },
    {
        "number": 4417,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split()[0])\n    result = []\n\n    for i in range(q):\n        n, k = map(int, stdin.split()[1:])\n        stdin = stdin.split('\\n', 1)[1]\n        a = list(map(int, stdin.split()))\n\n        min_a = min(a)\n        max_a = max(a)\n\n        if max_a - min_a <= 2 * k:\n            result.append(max_a)\n        else:\n            result.append(-1)\n\n    return \" \".join(map(str, result))\n\n\nwith open(\"input.txt\", \"r\") as file:\n    stdin = file.read()\n\nwith open(\"output.txt\", \"w\") as file:\n    file.write(solution(stdin)) "
    },
    {
        "number": 4417,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    result = []\n    for _ in range(q):\n        n, k = map(int, stdin.readline().strip().split())\n        prices = list(map(int, stdin.readline().strip().split()))\n        \n        if k >= n:\n            result.append(max(prices))\n        else:\n            max_price = max(prices)\n            min_price = min(prices)\n            if max_price - min_price > k:\n                result.append(-1)\n            else:\n                result.append(min_price + k // n)\n                \n    return \" \".join(map(str, result))\n\nwith open(\"input.txt\", \"r\") as stdin, open(\"output.txt\", \"w\") as stdout:\n    stdout.write(solution(stdin)) "
    },
    {
        "number": 4417,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    queries = stdin.split(\"\\n\")\n    results = []\n\n    for i in range(0, len(queries), 2):\n        n, k = map(int, queries[i].split())\n        a = list(map(int, queries[i+1].split()))\n\n        if n == 1:\n            results.append(max(1, min(10**8, a[0])))\n        else:\n            max_price = max(a)\n            min_price = min(a)\n            max_difference = max_price - min_price\n\n            if max_difference <= k:\n                results.append(max_price)\n            else:\n                results.append(-1)\n\n    return \"\\n\".join(map(str, results))"
    },
    {
        "number": 4417,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    results = []\n    for _ in range(q):\n        n, k = map(int, stdin.readline().split())\n        a = list(map(int, stdin.readline().split()))\n        max_price = max(a)\n        min_price = min(a)\n        if max_price - min_price <= k:\n            results.append(min_price)\n        else:\n            results.append(-1)\n    return \" \".join(map(str, results))\n\ninput_data = \"\"\"4\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\"\"\"\n\nprint(solution(input_data)) "
    },
    {
        "number": 4418,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    \n    def is_good(length: int) -> bool:\n        if length % 6 != 0:\n            return False\n        subsequence = [[] for _ in range(6)]\n        for i in range(length):\n            j = a[i] - 4\n            subsequence[j].append(i)\n        return all(len(s) >= length // 6 for s in subsequence)\n    \n    for i in range(n, 0, -1):\n        if is_good(i):\n            return str(n - i)\n    return str(n)"
    },
    {
        "number": 4418,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    elements = [4, 8, 15, 16, 23, 42]\n    count = 0\n    for i in range(len(a)):\n        if a[i] not in elements:\n            count += 1\n        else:\n            elements.remove(a[i])\n            if len(elements) == 0:\n                break\n    return count\n\ndef"
    },
    {
        "number": 4418,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    min_elements_to_remove = 0\n    for num in a:\n        if num not in [4, 8, 15, 16, 23, 42]:\n            min_elements_to_remove += 1\n\n    if len(a) % 6 != 0:\n        min_elements_to_remove += len(a) % 6\n\n    return str(min_elements_to_remove)\n\ndef"
    },
    {
        "number": 4418,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    good_arrays = {4: 0, 8: 0, 15: 0, 16: 0, 23: 0, 42: 0}\n    good_arrays_count = 0\n    \n    for element in a:\n        if element in good_arrays:\n            good_arrays[element] += 1\n    \n    for value in good_arrays.values():\n        if value > 0:\n            good_arrays_count += 1\n    \n    if good_arrays_count == 0:\n        return str(n)\n    \n    if good_arrays_count % 6 == 0:\n        return str(n - (good_arrays_count // 6) * 6)\n    \n    return str(n)"
    },
    {
        "number": 4418,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    min_removal = n\n    \n    for i in range(n):\n        temp = a[i:]\n        if len(temp) % 6 == 0:\n            count = 0\n            while temp:\n                if temp[:6] == [4, 8, 15, 16, 23, 42]:\n                    temp = temp[6:]\n                    count += 1\n                else:\n                    break\n            if count == len(temp) // 6:\n                min_removal = min(min_removal, n - i)\n    \n    return str(min_removal)"
    },
    {
        "number": 4418,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    def good_array(arr: List[int]) -> bool:\n        if len(arr) % 6 != 0:\n            return False\n        for i in range(0, len(arr), 6):\n            if arr[i:i+6] != [4, 8, 15, 16, 23, 42]:\n                return False\n        return True\n\n    while not good_array(a):\n        a.pop(a.index(min(a)))\n\n    return str(len(a))\n\ninput_data = \"\"\"5\n4 8 15 16 23\n12\n4 8 4 15 16 8 23 15 16 42 23 42\n15\n4 8 4 8 15 16 8 16 23 15 16 4 42 23 42\n\"\"\"\n\noutput = \"\"\nfor data in input_data.strip().split(\"\\n\"):\n    if data.strip() == \"\":\n        continue\n    n = int(data.split(\"\\n\")[0])\n    a = list(map(int, data.split(\"\\n\")[1].split()))\n    output += solution(StringIO(str(n) + \"\\n\" + \" \".join(map(str, a)) + \"\\n\")) + \"\\n\"\n\nprint(output.strip()) "
    },
    {
        "number": 4418,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Check if the array is already good\n    if n % 6 == 0 and all(x in a for x in [4, 8, 15, 16, 23, 42]):\n        return \"0\"\n\n    # Try to remove elements one by one\n    for i in range(len(a)):\n        if a[i] not in [4, 8, 15, 16, 23, 42]:\n            continue\n\n        # Check if the remaining array is good\n        if n % 6 == 0 and all(x in a[i+1:] for x in [4, 8, 15, 16, 23, 42]):\n            return str(i)\n\n    # If none of the elements can be removed, the array is not good\n    return str(len(a))\n"
    },
    {
        "number": 4418,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().split()))\n\n    required_sequences = {4, 8, 15, 16, 23, 42}\n    good_sequences = []\n    bad_sequences = []\n\n    for i in range(n):\n        if a[i] in required_sequences:\n            required_sequences.remove(a[i])\n            good_sequences.append(a[i])\n        else:\n            bad_sequences.append(a[i])\n\n    if len(good_sequences) != 6:\n        return str(n)\n\n    good_sequences.sort()\n    bad_sequences.sort(reverse=True)\n\n    for i in range(len(bad_sequences)):\n        if good_sequences[-1] < bad_sequences[i]:\n            good_sequences.pop()\n        else:\n            break\n\n    return str(len(bad_sequences) - len(good_sequences))\n"
    },
    {
        "number": 4418,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n\n    def is_good(arr: List[int]) -> bool:\n        for i in range(0, len(arr), 6):\n            if arr[i:i+6] not in [[4, 8, 15, 16, 23, 42], [4, 8, 4, 15, 16, 8, 23, 15, 16, 42, 23, 42], [4, 8, 15, 16, 23, 42, 4, 8, 15, 16, 23, 42]]:\n                return False\n        return True\n\n    if is_good(a):\n        return '0'\n\n    i = 0\n    while i < len(a):\n        if a[i] == 4 or a[i] == 8 or a[i] == 15 or a[i] == 16 or a[i] == 23 or a[i] == 42:\n            i += 1\n        else:\n            a.pop(i)\n\n    if is_good(a):\n        return str(n - len(a))\n    else:\n        return 'Not possible'"
    },
    {
        "number": 4418,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    good_sequences = [[4], [8], [15], [16], [23], [42]]\n    good_sequences = [seq for seq in good_sequences if len(seq) <= n]\n\n    min_count = n\n    for seq_length in range(1, len(good_sequences) + 1):\n        for combination in itertools.combinations(good_sequences, seq_length):\n            current_sequence = []\n            for seq in combination:\n                current_sequence.extend(seq)\n            if current_sequence == a[:len(current_sequence)]:\n                min_count = min(min_count, n - len(current_sequence))\n\n    return str(min_count)\n\ndef"
    },
    {
        "number": 4419,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    output = []\n    test_cases = int(stdin.split(\"\\n\")[0])\n    for i in range(1, test_cases + 1):\n        a, b = map(int, stdin.split(\"\\n\")[i].split())\n        if a == b:\n            output.append(0)\n        else:\n            output.append(min(abs(a - b), abs(a - 2 * b - a)))\n    return \"\\n\".join(map(str, output))"
    },
    {
        "number": 4419,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    output = []\n\n    for i in range(1, len(input_list), 2):\n        a, b = map(int, input_list[i].split())\n        moves = 0\n\n        while a != b:\n            if b > a:\n                k = min(10, b - a)\n                a += k\n                moves += k\n            else:\n                k = min(10, a - b)\n                a -= k\n                moves += k\n\n        output.append(str(moves))\n\n    return \"\\n\".join(output)"
    },
    {
        "number": 4419,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.split('\\n')\n    t = int(test_cases[0])\n    del test_cases[0]\n\n    result = []\n\n    for i in range(t):\n        a, b = map(int, test_cases[i].split())\n        moves = 0\n        while a != b:\n            if a < b:\n                k = min(10, b - a)\n                a += k\n                moves += k\n            else:\n                k = min(10, a - b)\n                a -= k\n                moves += k\n        result.append(str(moves))\n\n    return '\\n'.join(result)\n"
    },
    {
        "number": 4419,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        a, b = map(int, stdin.readline().strip().split())\n        min_moves = 0\n        while a != b:\n            if a > b:\n                a -= 1\n            else:\n                a += 1\n            min_moves += 1\n        print(min_moves)\n"
    },
    {
        "number": 4419,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split(\"\\n\")[0])\n    output = []\n    \n    for i in range(1, t+1):\n        a, b = map(int, stdin.split(\"\\n\")[i].split())\n        moves = 0\n        if a == b:\n            output.append(\"0\")\n        elif a > b:\n            while a > b:\n                if a % 2 == 0:\n                    a = a // 2\n                else:\n                    a -= 1\n                moves += 1\n            output.append(str(moves))\n        else:\n            while a < b:\n                if a % 2 == 0:\n                    a *= 2\n                else:\n                    a += 1\n                moves += 1\n            output.append(str(moves))\n    \n    return \"\\n\".join(output)"
    },
    {
        "number": 4419,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_test_cases = int(stdin.readline().strip())\n    output = []\n\n    for _ in range(num_test_cases):\n        a, b = map(int, stdin.readline().strip().split())\n\n        if a == b:\n            output.append(0)\n        else:\n            moves = 0\n            while a != b:\n                if a > b:\n                    a -= 10\n                else:\n                    a += 10\n                moves += 1\n            output.append(moves)\n\n    return '\\n'.join(map(str, output))"
    },
    {
        "number": 4419,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    t = int(lines[0])\n    result = []\n\n    for i in range(1, t * 2, 2):\n        a, b = map(int, lines[i].split())\n        count = 0\n\n        while a != b:\n            if a > b:\n                k = min(a - b, 10)\n                a -= k\n            else:\n                k = min(b - a, 10)\n                a += k\n            count += 1\n\n        result.append(str(count))\n\n    return \"\\n\".join(result)\n\ndef"
    },
    {
        "number": 4419,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def min_moves(a: int, b: int) -> int:\n        if a == b:\n            return 0\n        elif a > b:\n            return min_moves(a - 1, b) + 1\n        else:\n            return min_moves(a + 1, b) + 1\n\n    t = int(stdin.readline())\n    output = []\n\n    for i in range(t):\n        a, b = map(int, stdin.readline().split())\n        output.append(min_moves(a, b))\n\n    return '\\n'.join(map(str, output))\n"
    },
    {
        "number": 4419,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    output = []\n    t = int(stdin.split('\\n')[0])\n    for i in range(1, t+1):\n        a, b = map(int, stdin.split('\\n')[i].split())\n        moves = []\n        while a != b:\n            if a > b:\n                moves.append(10)\n                a -= 10\n            else:\n                moves.append(abs(a-b))\n                a += abs(a-b)\n        output.append(str(len(moves)))\n    return '\\n'.join(output)\n\nt = int(input())\ninput_data = \"\"\nfor i in range(t):\n    input_data += input()\n\nprint(solution(input_data)) "
    },
    {
        "number": 4419,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    result = []\n\n    for _ in range(t):\n        a, b = map(int, stdin.readline().strip().split())\n        if a == b:\n            result.append(0)\n        elif a > b:\n            result.append(abs(a - b))\n        else:\n            k = 10\n            moves = 0\n            while k >= 1:\n                if a + k <= b:\n                    a += k\n                    moves += 1\n                else:\n                    k -= 1\n            result.append(moves)\n\n    return '\\n'.join(map(str, result))\n\nstdin = open(\"input.txt\", \"r\")\nstdout = open(\"output.txt\", \"w\")\nstdout.write(solution(stdin))\nstdout.close() "
    },
    {
        "number": 4420,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    result = []\n    for _ in range(t):\n        x, y, n = map(int, stdin.readline().strip().split())\n        # Find the maximum non-negative integer k such that k mod x = y\n        k = y + ((n - y) // x + 1) * x\n        result.append(str(k))\n    return \"\\n\".join(result)\n"
    },
    {
        "number": 4420,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    output = []\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        x, y, n = map(int, stdin.readline().strip().split())\n        k = (y + n - x + 1) // x * x + y\n        output.append(str(k))\n    return '\\n'.join(output)"
    },
    {
        "number": 4420,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.splitlines()[0])\n    results = []\n    for i in range(1, cases + 1):\n        x, y, n = map(int, stdin.splitlines()[i].split())\n        k = x * (n // x) + y\n        if k > n:\n            k -= x\n        results.append(str(k))\n    return \"\\n\".join(results)\n\n\ndef"
    },
    {
        "number": 4420,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    result = []\n\n    for _ in range(t):\n        x, y, n = map(int, stdin.readline().strip().split())\n        k = (n // x) * x + y\n        result.append(str(k))\n\n    return '\\n'.join(result)\n"
    },
    {
        "number": 4420,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    output = []\n    test_cases = int(stdin.readline())\n    for _ in range(test_cases):\n        x, y, n = map(int, stdin.readline().split())\n        k = (n // x) * x + y\n        output.append(str(k))\n    return \"\\n\".join(output)"
    },
    {
        "number": 4420,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    output = []\n    for i in range(1, t+1):\n        x, y, n = map(int, lines[i].split())\n        k = (n//x)*x + y\n        if k > n:\n            k -= x\n        output.append(str(k))\n    return '\\n'.join(output)\n\ndef"
    },
    {
        "number": 4420,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    result = []\n    \n    for _ in range(t):\n        x, y, n = map(int, stdin.readline().strip().split())\n        k = (n // x) * x + y\n        if k > n:\n            k -= x\n        result.append(str(k))\n        \n    return \"\\n\".join(result)"
    },
    {
        "number": 4420,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    output = []\n\n    for _ in range(t):\n        x, y, n = map(int, stdin.readline().split())\n        k = (n // x) * x + y\n        output.append(str(k))\n\n    return \"\\n\".join(output)\n\n\ndef"
    },
    {
        "number": 4420,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    result = []\n    for i in range(t):\n        x, y, n = map(int, stdin.readline().split())\n        k = n\n        while k >= 0:\n            if k % x == y:\n                result.append(str(k))\n                break\n            k -= 1\n    return \"\\n\".join(result)"
    },
    {
        "number": 4420,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.readline().strip())\n    result = []\n\n    for _ in range(test_cases):\n        x, y, n = map(int, stdin.readline().strip().split())\n        k = (n // x) * x + y\n        result.append(str(k))\n\n    return \"\\n\".join(result)"
    },
    {
        "number": 4421,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    d = list(map(int, stdin.split()[2:]))\n\n    # Calculate the total number of candies in each box\n    total_candies = sum(d)\n\n    # Calculate the maximum number of gifts that can be prepared\n    max_gifts = (total_candies // k) // 2\n\n    # Initialize a list to store the number of gifts that can be prepared using each box\n    gifts_per_box = [0] * n\n\n    # Calculate the number of gifts that can be prepared using each box\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (d[i] + d[j]) % k == 0:\n                gifts_per_box[i] += 1\n                gifts_per_box[j] += 1\n\n    # Calculate the maximum number of boxes that can be given as gifts\n    max_boxes = sum(gifts_per_box)\n\n    # Return the maximum number of boxes that can be given as gifts\n    return str(max_boxes)"
    },
    {
        "number": 4421,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    boxes = list(map(int, input().split()))\n\n    total_candies = sum(boxes)\n    if total_candies % k != 0:\n        return 0\n\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (boxes[i] + boxes[j]) % k == 0:\n                count += 1\n\n    return count * 2"
    },
    {
        "number": 4421,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    d_list = list(map(int, stdin.split()[2:]))\n\n    total_candies = sum(d_list)\n    if total_candies % k != 0:\n        return \"0\"\n\n    pairs = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (d_list[i] + d_list[j]) % k == 0:\n                pairs += 1\n\n    return str(pairs)"
    },
    {
        "number": 4421,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    boxes = list(map(int, stdin.split()[2:]))\n\n    pairs = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (boxes[i] + boxes[j]) % k == 0:\n                pairs += 1\n\n    return str(pairs)"
    },
    {
        "number": 4421,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    candies = list(map(int, stdin.split()[2:]))\n    \n    max_gifts = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            total_candies = candies[i] + candies[j]\n            if total_candies % k == 0:\n                max_gifts += 1\n    \n    return str(max_gifts)"
    },
    {
        "number": 4421,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    d = list(map(int, stdin.split()[2:]))\n\n    def is_divisible_by_k(a, b):\n        return (a + b) % k == 0\n\n    boxes_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if is_divisible_by_k(d[i], d[j]):\n                boxes_count += 1\n\n    return str(boxes_count)\n"
    },
    {
        "number": 4421,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0].split())\n    boxes = list(map(int, stdin.split()[1].split()))\n    max_pairs = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if (boxes[i] + boxes[j]) % k == 0:\n                max_pairs += 1\n                \n    return str(max_pairs)"
    },
    {
        "number": 4421,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    d = list(map(int, stdin.split()[2:]))\n    \n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (d[i] + d[j]) % k == 0:\n                count += 1\n    \n    return str(count)"
    },
    {
        "number": 4421,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0].split())\n    candies = list(map(int, stdin.split()[1].split()))\n\n    def is_valid_pair(i, j):\n        return (candies[i] + candies[j]) % k == 0\n\n    valid_pairs = [(i, j) for i in range(n) for j in range(i+1, n) if is_valid_pair(i, j)]\n\n    return str(len(valid_pairs))\n\ndef"
    },
    {
        "number": 4421,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0].split())\n    d = list(map(int, stdin.split()[1].split()))\n    \n    max_gifts = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if (d[i] + d[j]) % k == 0:\n                max_gifts += 1\n    \n    return str(max_gifts)\n\ninput_data = \"7 2\\n1 2 2 3 2 4 10\"\nprint(solution(input_data)) "
    },
    {
        "number": 4422,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    S = list(stdin.split()[1])\n\n    S[K-1] = S[K-1].lower()\n\n    return ''.join(S)"
    },
    {
        "number": 4422,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    N = int(input_list[0])\n    K = int(input_list[1])\n    S = input_list[2]\n\n    if 1 <= N <= 50 and 1 <= K <= N and len(S) == N and S.isalpha():\n        S_list = list(S)\n        S_list[K-1] = S_list[K-1].lower()\n        return \"\".join(S_list)\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 4422,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split('\\n')[0].split())\n    S = stdin.split('\\n')[1]\n\n    if 1 <= K <= N and 1 <= N <= 50:\n        S = list(S)\n        S[K - 1] = S[K - 1].lower()\n        return ''.join(S)\n    else:\n        return \"Invalid input\" "
    },
    {
        "number": 4422,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, input().split())\n    S = input()\n\n    # Convert the K-th character to lowercase\n    S = S[:K-1] + S[K-1].lower() + S[K:]\n\n    return S"
    },
    {
        "number": 4422,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K = stdin.split()\n    N, K = int(N), int(K)\n    S = stdin.split()[1]\n\n    result = S[:K-1] + S[K-1].lower() + S[K:]\n\n    return result"
    },
    {
        "number": 4422,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    S = input()\n    new_S = S[:K-1] + S[K-1].lower() + S[K:]\n    return new_S"
    },
    {
        "number": 4422,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    S = input()\n\n    if N < 1 or N > 50 or K < 1 or K > N:\n        raise ValueError(\"Invalid input\")\n\n    if len(S) != N or not set(S).issubset({'A', 'B', 'C'}):\n        raise ValueError(\"Invalid input\")\n\n    S_list = list(S)\n    S_list[K-1] = S_list[K-1].lower()\n    return ''.join(S_list)\n"
    },
    {
        "number": 4422,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = stdin.split()\n    K = int(K) - 1  # since indexing starts from 0\n    S = stdin.split()[1]\n    S = list(S)\n    S[K] = S[K].lower()\n    return ''.join(S)"
    },
    {
        "number": 4422,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[0].split())\n    S = stdin.split()[1]\n    \n    if K < N:\n        new_S = S[:K-1] + S[K-1].lower() + S[K:]\n    else:\n        new_S = S\n    \n    return new_S"
    },
    {
        "number": 4422,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[0:2])\n    S = stdin.split()[2]\n    S = list(S)\n    S[K-1] = S[K-1].lower()\n    return ''.join(S)"
    },
    {
        "number": 4423,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Convert the input string to a list of strings\n    lines = stdin.split(\"\\n\")\n    # Parse the first line as an integer\n    n = int(lines[0])\n    # Create an empty list to store the restaurants\n    restaurants = []\n    # Iterate through the remaining lines and parse them as (city, score) tuples\n    for i in range(1, n+1):\n        city, score = lines[i].split()\n        # Create a tuple with the restaurant's identification number and its city and score\n        restaurant = (i, city, int(score))\n        restaurants.append(restaurant)\n    # Sort the restaurants lexicographically by city\n    restaurants.sort(key=lambda x: x[1])\n    # Sort the restaurants within each city by descending score\n    for city in set(restaurant[1] for restaurant in restaurants):\n        city_restaurants = [restaurant for restaurant in restaurants if restaurant[1] == city]\n        city_restaurants.sort(key=lambda x: x[2], reverse=True)\n        for j in range(len(city_restaurants)):\n            city_restaurants[j] = (city_restaurants[j][0], city_restaurants[j][2])\n        restaurants = [restaurant for restaurant in restaurants if restaurant[1] != city] + city_restaurants\n    # Print the identification numbers of the restaurants in the order they are introduced in the book\n    for restaurant in restaurants:\n        print(restaurant[0])\n    return \"\" "
    },
    {
        "number": 4423,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def custom_sort(restaurant: Tuple[str, int]) -> Tuple[str, int]:\n        return (restaurant[0], -restaurant[1])\n\n    restaurants = [line.strip().split() for line in stdin.split(\"\\n\")[1:-1]]\n    restaurants = sorted(restaurants, key=lambda x: (x[0], int(x[1])))\n    return \"\\n\".join([f\"{index + 1}\" for index, restaurant in enumerate(restaurants)])"
    },
    {
        "number": 4423,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    restaurants = {}\n    for i in range(1, n+1):\n        city, score = lines[i].split()\n        score = int(score)\n        restaurants[city] = restaurants.get(city, []) + [(i, score)]\n\n    sorted_cities = sorted(restaurants.keys())\n    for city in sorted_cities:\n        sorted_restaurants = sorted(restaurants[city], key=lambda x: x[1], reverse=True)\n        for restaurant in sorted_restaurants:\n            print(restaurant[0])"
    },
    {
        "number": 4423,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    restaurants = []\n    for i in range(1, n+1):\n        city, score = lines[i].split()\n        restaurants.append((city, int(score), i))\n\n    restaurants.sort(key=lambda x: (x[0], -x[1]))\n\n    result = [r[2] for r in restaurants]\n    return '\\n'.join(map(str, result))\n\nn = int(input())\nstdin = ''\nfor i in range(n):\n    city, score = input().split()\n    stdin += f'{city} {score}\\n'\n\nprint(solution(stdin)) "
    },
    {
        "number": 4423,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def sort_key(restaurant: List[str]) -> str:\n        return restaurant[0]\n\n    def sort_key_descending(restaurant: List[str]) -> int:\n        return -int(restaurant[1])\n\n    lines = stdin.split('\\n')\n    restaurants = [line.split() for line in lines[1:-1]]\n    restaurants.sort(key=sort_key)\n\n    for city in set([restaurant[0] for restaurant in restaurants]):\n        restaurants_in_city = [restaurant for restaurant in restaurants if restaurant[0] == city]\n        restaurants_in_city.sort(key=sort_key_descending)\n        for restaurant in restaurants_in_city:\n            print(restaurants.index(restaurant) + 1)\n\nstdin = \"\"\"6\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\n\"\"\"\nsolution(stdin) "
    },
    {
        "number": 4423,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    restaurants = []\n    for i in range(1, n+1):\n        city, score = lines[i].split()\n        restaurants.append((city, int(score), i))\n    \n    restaurants.sort(key=lambda x: (x[0], -x[1]))\n    \n    result = []\n    for restaurant in restaurants:\n        result.append(str(restaurant[2]))\n    \n    return '\\n'.join(result)"
    },
    {
        "number": 4423,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    restaurants = []\n\n    for i in range(1, n + 1):\n        city, score = lines[i].split()\n        restaurants.append((city, int(score), i))\n\n    restaurants.sort(key=lambda x: (x[0], -x[1]))\n\n    for i in range(n):\n        print(restaurants[i][2])"
    },
    {
        "number": 4423,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    num_restaurants = int(lines[0])\n    restaurants = []\n\n    for i in range(1, num_restaurants + 1):\n        city, score = lines[i].split()\n        restaurants.append((city, int(score), i))\n\n    restaurants.sort(key=lambda x: (x[0], -x[1]))\n\n    for restaurant in restaurants:\n        print(restaurant[2])"
    },
    {
        "number": 4423,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    restaurants = []\n    for i in range(1, n + 1):\n        city, score = lines[i].split()\n        restaurants.append((city, int(score), i))\n\n    restaurants.sort(key=lambda x: (x[0], -x[1]))\n\n    for restaurant in restaurants:\n        print(restaurant[2])"
    },
    {
        "number": 4423,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    data = []\n    for _ in range(n):\n        city, score = stdin.readline().strip().split()\n        data.append((city, int(score)))\n    \n    data.sort(key=lambda x: (x[0], -x[1]))\n    \n    for index, (_, score) in enumerate(data, start=1):\n        print(index)\n    \n    return \"\""
    },
    {
        "number": 4424,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n    return \"Yes\" if K * 500 >= X else \"No\""
    },
    {
        "number": 4424,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n    coins = [500] * K\n    total = sum(coins)\n    if total >= X:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4424,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n    coins = K * 500\n    return \"Yes\" if coins >= X else \"No\""
    },
    {
        "number": 4424,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n    return \"Yes\" if K * 500 >= X else \"No\""
    },
    {
        "number": 4424,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    k, x = map(int, stdin.split())\n    if k * 500 >= x:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4424,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n    total_value = K * 500\n    if total_value >= X:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4424,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n    if K * 500 >= X:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4424,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n    if K * 500 >= X:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4424,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n    total_yen = K * 500\n    if total_yen >= X:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4424,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n    total_value = K * 500\n    if total_value >= X:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4425,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    probabilities = [0.0] * (K + 1)\n    probabilities[0] = 1.0\n\n    for i in range(1, N + 1):\n        probabilities = [0.0] * (K + 1)\n        for j in range(K + 1):\n            if j == 0:\n                probabilities[j] = probabilities[j] + probabilities[j + 1] * 0.5\n            elif j == K:\n                probabilities[j] = probabilities[j] + probabilities[j - 1] * 0.5\n            elif j == 1:\n                probabilities[j] = probabilities[j] + probabilities[j - 1] * 0.5 + probabilities[j + 1] * 0.5\n            else:\n                probabilities[j] = probabilities[j] + probabilities[j - 1] * 0.5 + probabilities[j + 1] * 0.5\n\n    return str(probabilities[K])\n\ndef"
    },
    {
        "number": 4425,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n\n    prob_win = 0\n    for i in range(1, N + 1):\n        if i == 1:\n            prob_win += 1 / 48\n        elif i == 2:\n            prob_win += 1 / 24\n        elif i == 3:\n            prob_win += 1 / 12\n        elif i == 4:\n            prob_win += 1 / 9\n        elif i == 5:\n            prob_win += 1 / 7.2\n        elif i == 6:\n            prob_win += 1 / 6\n        elif i == 7:\n            prob_win += 1 / 5.4\n        elif i == 8:\n            prob_win += 1 / 4.8\n        elif i == 9:\n            prob_win += 1 / 4.2\n        elif i == 10:\n            prob_win += 1 / 3.6\n        else:\n            prob_win += 1 / (N - i + 1)\n\n    return str(prob_win)"
    },
    {
        "number": 4425,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    prob = 0\n\n    for i in range(1, N + 1):\n        if i == 1:\n            prob += 1 / 48\n        elif i == 2:\n            prob += 1 / 24\n        elif i == 3:\n            prob += 1 / 12\n        elif i == 4:\n            prob += 1 / 8\n        elif i == 5:\n            prob += 1 / 6\n        elif i == 6:\n            prob += 1 / 4\n        elif i == 7:\n            prob += 1 / 3\n        elif i == 8:\n            prob += 1 / 2\n        else:\n            prob += 1\n\n    return str(prob)"
    },
    {
        "number": 4425,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, K = list(map(int, stdin.split()))\n\n    # Calculate the probability of each possible outcome\n    probabilities = []\n    for i in range(1, N + 1):\n        if i < K:\n            probabilities.append(pow(0.5, i) * (1 / 3))\n        else:\n            probabilities.append(1)\n\n    # Calculate the probability of Snuke winning\n    winning_probability = sum(probabilities)\n\n    # Return the probability as a string\n    return \"{:.9f}\".format(winning_probability)"
    },
    {
        "number": 4425,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K = list(map(int, stdin.split()))\n\n    # Calculate the probability of getting a score of K or above for each possible die roll\n    probabilities = [0] * N\n    for i in range(1, N+1):\n        if i == 1:\n            probabilities[i-1] = 1/48\n        elif i == 2:\n            probabilities[i-1] = 1/24\n        elif i == 3:\n            probabilities[i-1] = 1/12\n        else:\n            probabilities[i-1] = 1/N\n\n    # Calculate the probability of winning the game\n    winning_probability = sum(probabilities[K-1:])\n\n    # Calculate the probability of losing the game\n    losing_probability = 1 - winning_probability\n\n    return str(winning_probability)"
    },
    {
        "number": 4425,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    win_prob = 0\n    \n    for i in range(1, N+1):\n        if i < K:\n            win_prob += (1/3) * (1/2)**(i-1)\n        else:\n            win_prob += (1/2)**(i-1)\n    \n    return str(win_prob)"
    },
    {
        "number": 4425,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    \n    prob = 0\n    for i in range(1, N+1):\n        if i < K:\n            prob += (1 / (3 * pow(2, i-1)))\n    \n    return \"{:.9f}\".format(prob)\n\ndef"
    },
    {
        "number": 4425,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n\n    # Calculate the probability of each possible score\n    probabilities = [0] * (K + 1)\n    for i in range(1, N + 1):\n        probabilities[i] = (1 / 3) * (1 / 2) ** (i - 1)\n\n    # Calculate the probability of winning for each possible score\n    winning_probabilities = [0] * (K + 1)\n    for i in range(1, K + 1):\n        winning_probabilities[i] = probabilities[i]\n        if i > 1:\n            winning_probabilities[i] += winning_probabilities[i - 1]\n\n    # Calculate the probability of winning\n    winning_probability = sum(winning_probabilities[K:])\n\n    return '{:.9f}'.format(winning_probability)\n\ndef"
    },
    {
        "number": 4425,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    result = 0\n    \n    for i in range(1, N+1):\n        if i < K:\n            result += (1/3) * (1/2)**(i-1)\n        else:\n            result += (1/3) * (1/2)**(i-1) + (1/3) * (1/2)**(i-2)\n    \n    return f\"{result:.10f}\"\n\ndef"
    },
    {
        "number": 4425,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n\n    probabilities = []\n    for i in range(1, N + 1):\n        if i < K:\n            continue\n        probability = 1\n        for j in range(K, i):\n            probability *= 0.5\n        probabilities.append(probability)\n\n    return str(sum(probabilities))"
    },
    {
        "number": 4426,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    days = {\n        'SUN': 0,\n        'MON': 1,\n        'TUE': 2,\n        'WED': 3,\n        'THU': 4,\n        'FRI': 5,\n        'SAT': 6\n    }\n\n    today = days[stdin.upper()]\n    next_sunday = (7 - today) % 7\n\n    return str(next_sunday)"
    },
    {
        "number": 4426,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    days = {\n        'SUN': 0,\n        'MON': 1,\n        'TUE': 2,\n        'WED': 3,\n        'THU': 4,\n        'FRI': 5,\n        'SAT': 6\n    }\n\n    today = days[stdin.strip().upper()]\n    next_sunday = (7 - today) % 7\n\n    return str(next_sunday)"
    },
    {
        "number": 4426,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    days = {\"SUN\": 0, \"MON\": 1, \"TUE\": 2, \"WED\": 3, \"THU\": 4, \"FRI\": 5, \"SAT\": 6}\n    today = days[stdin]\n    next_sunday = (7 - today) % 7\n    return str(next_sunday)"
    },
    {
        "number": 4426,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    days = {\n        \"SUN\": 0,\n        \"MON\": 1,\n        \"TUE\": 2,\n        \"WED\": 3,\n        \"THU\": 4,\n        \"FRI\": 5,\n        \"SAT\": 6\n    }\n\n    today = days[stdin]\n    next_sunday = (7 - today) % 7\n\n    return str(next_sunday)"
    },
    {
        "number": 4426,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    days = [\"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\"]\n    today = days.index(stdin)\n    next_sunday = days.index(\"SUN\")\n    days_to_next_sunday = (next_sunday - today) % 7\n    return str(days_to_next_sunday)"
    },
    {
        "number": 4426,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    days = [\"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\"]\n    today = days.index(stdin)\n    next_sunday = days.index(\"SUN\")\n    days_till_sunday = next_sunday - today\n    if days_till_sunday < 0:\n        days_till_sunday += 7\n    return days_till_sunday"
    },
    {
        "number": 4426,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    days = {\n        \"SUN\": 0,\n        \"MON\": 1,\n        \"TUE\": 2,\n        \"WED\": 3,\n        \"THU\": 4,\n        \"FRI\": 5,\n        \"SAT\": 6\n    }\n\n    today = days[stdin]\n    next_sunday = (6 - today) % 7\n\n    return str(next_sunday)\n\ndef"
    },
    {
        "number": 4426,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    days = {\n        \"SUN\": 0,\n        \"MON\": 1,\n        \"TUE\": 2,\n        \"WED\": 3,\n        \"THU\": 4,\n        \"FRI\": 5,\n        \"SAT\": 6\n    }\n\n    today = days[stdin]\n    next_sunday = (6 - today) % 7\n\n    if next_sunday == 0:\n        return \"Today is Sunday.\"\n    else:\n        return str(next_sunday)\n\nstdin = input()\nresult = solution(stdin)\nprint(result) "
    },
    {
        "number": 4426,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    days = {\"SUN\": 0, \"MON\": 1, \"TUE\": 2, \"WED\": 3, \"THU\": 4, \"FRI\": 5, \"SAT\": 6}\n    today = days[stdin]\n    next_sunday = (6 - today) % 7\n    return str(next_sunday)"
    },
    {
        "number": 4426,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    days = [\"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\"]\n    today = days.index(stdin)\n    next_sunday = days.index(\"SUN\")\n    days_to_next_sunday = (7 - today) % 7\n    return days_to_next_sunday"
    },
    {
        "number": 4427,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, D, x2000 = map(int, stdin.split())\n    if not 2 <= r <= 5 or not 1 <= D <= 100 or not 1 <= x2000 <= 200:\n        raise ValueError(\"Invalid input values\")\n\n    x = [x2000]\n    for _ in range(10):\n        x.append(r * x[-1] - D)\n\n    return \"\\n\".join(map(str, x[1:]))"
    },
    {
        "number": 4427,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    r, D, x_2000 = map(int, stdin.split())\n    x = x_2000\n\n    for i in range(10):\n        x = r * x - D\n        print(int(x))"
    },
    {
        "number": 4427,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    r, D, x_2000 = map(int, stdin.split())\n    x = x_2000\n    \n    for i in range(2001, 2011):\n        x = r * x - D\n        print(x)"
    },
    {
        "number": 4427,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    r, D, x_2000 = map(int, stdin.split())\n    x = x_2000\n    for i in range(2000, 2011):\n        x = r * x - D\n        print(x)\n\nstdin = input()\nsolution(stdin) "
    },
    {
        "number": 4427,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    r, D, x = list(map(int, stdin.split()))\n    for i in range(1, 11):\n        x = r * x - D\n        print(int(x))"
    },
    {
        "number": 4427,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    r, D, x_2000 = [int(x) for x in stdin.split()]\n    for i in range(2001, 2011):\n        x_i = r * x_2000 - D\n        x_2000 = x_i\n    return \"\\n\".join([str(x_i) for x_i in range(2001, 2011)])"
    },
    {
        "number": 4427,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    r, D, x_2000 = map(int, stdin.split())\n    x_2000_next = r * x_2000 - D\n    result = [x_2000_next]\n\n    for _ in range(10):\n        x_2000_next = r * x_2000_next - D\n        result.append(x_2000_next)\n\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 4427,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    r, D, x_2000 = map(int, stdin.split())\n    \n    x_2001 = r * x_2000 - D\n    for i in range(2, 12):\n        x_2000 = r * x_2000 - D\n        print(x_2000)"
    },
    {
        "number": 4427,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    r, D, x_2000 = map(int, stdin.split())\n    x_2000_to_2010 = [x_2000]\n\n    for i in range(1, 11):\n        x_2000_to_2010.append(r * x_2000_to_2010[-1] - D)\n\n    return \"\\n\".join(map(str, x_2000_to_2010))"
    },
    {
        "number": 4427,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    r, D, x2000 = map(int, stdin.split())\n    for i in range(2000, 2011):\n        x = r * x2000 - D\n        x2000 = x\n    return '\\n'.join(map(str, x2000))"
    },
    {
        "number": 4428,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    d = list(map(int, stdin.split()[1:]))\n    max_sum = 0\n    max_a = 0\n    max_b = 0\n    max_c = 0\n\n    for a in range(n + 1):\n        for b in range(n + 1 - a):\n            c = n - a - b\n            if a <= c:\n                if sum(d[:a]) == sum(d[a + b:a + b + c]):\n                    if sum(d[:a]) > max_sum:\n                        max_sum = sum(d[:a])\n                        max_a = a\n                        max_b = b\n                        max_c = c\n            else:\n                break\n\n    return str(max_sum)"
    },
    {
        "number": 4428,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    d = list(map(int, stdin.readline().split()))\n\n    if n == 1:\n        return \"0\"\n\n    def split_array(a, b, c):\n        return d[0:a], d[a:a+b], d[a+b:a+b+c]\n\n    def sum_of_parts(a, b, c):\n        part1, part2, part3 = split_array(a, b, c)\n        return sum(part1), sum(part2), sum(part3)\n\n    max_sum = 0\n\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                if i + j + k == n:\n                    sum1, sum2, sum3 = sum_of_parts(i, j, k)\n                    if sum1 == sum3 and sum1 > max_sum:\n                        max_sum = sum1\n\n    return str(max_sum)"
    },
    {
        "number": 4428,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    d = list(map(int, stdin.readline().strip().split()))\n\n    def find_split(d: List[int]) -> int:\n        n = len(d)\n        d.sort(reverse=True)\n        for i in range(n):\n            for j in range(i+1, n):\n                if d[i] + d[j] == sum(d):\n                    return True\n        return False\n\n    max_sum1 = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i + j <= n:\n                if find_split(d[:i]) and find_split(d[i:i+j]):\n                    max_sum1 = max(max_sum1, sum(d[:i]) + sum(d[i:i+j]))\n\n    return str(max_sum1)"
    },
    {
        "number": 4428,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    d = list(map(int, stdin.split()[1:]))\n    \n    max_sum = 0\n    \n    for i in range(n + 1):\n        for j in range(n - i + 1):\n            k = n - i - j\n            if i + j + k == n and sum(d[:i]) == sum(d[i:i+j]):\n                max_sum = max(max_sum, sum(d[:i]))\n    \n    return str(max_sum)"
    },
    {
        "number": 4428,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin.split()[0])\n    d = list(map(int, stdin.split()[1:]))\n\n    # Initialize variables\n    max_sum1 = 0\n\n    # Iterate through all possible combinations of a, b, and c\n    for a in range(n + 1):\n        for b in range(n - a + 1):\n            c = n - a - b\n            sum1 = sum(d[:a])\n            sum3 = sum(d[-c:])\n            if sum1 == sum3 and sum1 > max_sum1:\n                max_sum1 = sum1\n\n    # Return the result\n    return str(max_sum1)"
    },
    {
        "number": 4428,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    d = list(map(int, stdin.split()[1:]))\n    max_sum = 0\n    \n    for i in range(n + 1):\n        for j in range(i + 1, n + 1):\n            for k in range(j + 1, n + 1):\n                a_sum = sum(d[:i])\n                b_sum = sum(d[i:j])\n                c_sum = sum(d[j:k])\n                if a_sum == c_sum and a_sum > max_sum:\n                    max_sum = a_sum\n    \n    return str(max_sum)\n"
    },
    {
        "number": 4428,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    d = list(map(int, stdin.split('\\n')[1].split()))\n    \n    max_sum = 0\n    for a in range(n+1):\n        for b in range(n+1):\n            for c in range(n+1):\n                if a + b + c != n:\n                    continue\n                if sum(d[:a]) != sum(d[-c:]):\n                    continue\n                max_sum = max(max_sum, sum(d[:a]))\n                \n    return str(max_sum)"
    },
    {
        "number": 4428,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, d = stdin.split()\n    n = int(n)\n    d = list(map(int, d.split()))\n\n    # Sort the array and calculate the sum of elements\n    d.sort(reverse=True)\n    total_sum = sum(d)\n\n    # Find the maximum possible value of sum_1\n    max_sum_1 = 0\n    for i in range(n):\n        max_sum_1 += d[i]\n        if max_sum_1 == total_sum - max_sum_1:\n            break\n\n    return str(max_sum_1)"
    },
    {
        "number": 4428,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def split_array(arr: List[int]) -> Tuple[int, int, int]:\n        n = len(arr)\n        for i in range(n):\n            for j in range(i + 1, n + 1):\n                for k in range(j, n + 1):\n                    if sum(arr[:i]) == sum(arr[i:j]) == sum(arr[j:k]):\n                        return i, j, k\n        return 0, n, n\n\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    a, b, c = split_array(arr)\n    return str(max(sum(arr[:a]), sum(arr[c:])))\n"
    },
    {
        "number": 4428,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    d = list(map(int, stdin.split()[1:]))\n    max_sum = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if d[i:j] == d[j:k] and d[k:] == d[k:]:\n                    sum1 = sum(d[0:j])\n                    sum2 = sum(d[j:k])\n                    sum3 = sum(d[k:])\n                    if sum1 == sum3 and sum1 > max_sum:\n                        max_sum = sum1\n    return str(max_sum)"
    },
    {
        "number": 4429,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_solution_possible(x, y, z):\n        if x <= y and y <= z:\n            return True\n        if y <= x and x <= z:\n            return True\n        if z <= x and x <= y:\n            return True\n        if z <= y and y <= x:\n            return True\n        return False\n\n    def find_solution(x, y, z):\n        if x <= y and y <= z:\n            return x, y, z\n        if y <= x and x <= z:\n            return y, x, z\n        if z <= x and x <= y:\n            return z, x, y\n        if z <= y and y <= x:\n            return z, y, x\n\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        x, y, z = map(int, stdin.readline().strip().split())\n        if is_solution_possible(x, y, z):\n            a, b, c = find_solution(x, y, z)\n            print(\"YES\")\n            print(f\"{a} {b} {c}\")\n        else:\n            print(\"NO\")\n"
    },
    {
        "number": 4429,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def find_solution(x, y, z):\n        if x == y == z:\n            return \"NO\"\n        if x >= y + z or y >= x + z or z >= x + y:\n            return \"NO\"\n        if x == max(x, y, z):\n            a, b, c = x, y, z\n        elif y == max(x, y, z):\n            a, b, c = y, x, z\n        else:\n            a, b, c = z, x, y\n        return f\"YES\\n{a} {b} {c}\"\n\n    output = []\n    for i in range(int(stdin.split(\"\\n\")[0])):\n        x, y, z = map(int, stdin.split(\"\\n\")[i + 1].split())\n        result = find_solution(x, y, z)\n        output.append(result)\n\n    return \"\\n\".join(output)\n"
    },
    {
        "number": 4429,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def max_three(a, b, c):\n        if a >= b and a >= c:\n            return a\n        elif b >= a and b >= c:\n            return b\n        else:\n            return c\n\n    test_cases = stdin.split(\"\\n\")\n    result = []\n\n    for i in range(1, len(test_cases), 2):\n        x, y, z = map(int, test_cases[i].split())\n\n        if x == y and x == z:\n            a = b = c = x\n            result.append(\"YES\")\n            result.append(f\"{a} {b} {c}\")\n        elif x == y:\n            a = x\n            b = c = max_three(x, z, y)\n            result.append(\"YES\")\n            result.append(f\"{a} {b} {c}\")\n        elif x == z:\n            a = x\n            b = c = max_three(x, y, z)\n            result.append(\"YES\")\n            result.append(f\"{a} {b} {c}\")\n        elif y == z:\n            a = y\n            b = c = max_three(y, x, z)\n            result.append(\"YES\")\n            result.append(f\"{a} {b} {c}\")\n        else:\n            result.append(\"NO\")\n\n    return \"\\n\".join(result)"
    },
    {
        "number": 4429,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    result = []\n    \n    for _ in range(t):\n        x, y, z = map(int, stdin.split()[1:])\n        \n        if x == min(x, y, z) or y == min(x, y, z) or z == min(x, y, z):\n            result.append(\"NO\")\n        else:\n            result.append(\"YES\")\n            a, b, c = sorted([x, y, z])\n            result.append(f\"{a} {b} {c}\")\n    \n    return \"\\n\".join(result)"
    },
    {
        "number": 4429,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    t = int(lines[0])\n    results = []\n    for i in range(1, t + 1):\n        x, y, z = map(int, lines[i].split())\n        if x == y == z:\n            results.append(\"YES\\n1 1 1\")\n        elif x == y:\n            results.append(\"YES\\n\" + str(x) + \" \" + str(z) + \" 1\")\n        elif y == z:\n            results.append(\"YES\\n\" + str(y) + \" 1 \" + str(x))\n        elif x == z:\n            results.append(\"YES\\n\" + str(z) + \" 1 \" + str(y))\n        else:\n            results.append(\"NO\")\n    return \"\\n\".join(results)"
    },
    {
        "number": 4429,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.split('\\n')[0])\n    result = []\n    for i in range(1, cases+1):\n        x, y, z = map(int, stdin.split('\\n')[i].split())\n        if x >= y and x >= z:\n            a = x\n            if y >= z:\n                b = y\n                c = z\n            else:\n                b = z\n                c = y\n        elif y >= x and y >= z:\n            a = y\n            if x >= z:\n                b = x\n                c = z\n            else:\n                b = z\n                c = x\n        else:\n            a = z\n            if x >= y:\n                b = x\n                c = y\n            else:\n                b = y\n                c = x\n        result.append(\"YES\\n{0} {1} {2}\\n\".format(a, b, c))\n    return \"\".join(result)"
    },
    {
        "number": 4429,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    cases = [list(map(int, line.split())) for line in stdin.split(\"\\n\")[1:]]\n    for x, y, z in cases:\n        if x > y and x > z and y > z:\n            print(\"YES\")\n            print(f\"{x} {y} {z}\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 4429,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def find_abc(x, y, z):\n        for a in range(1, x + 1):\n            for b in range(1, y + 1):\n                for c in range(1, z + 1):\n                    if a == x and b == y and c == z:\n                        return a, b, c\n                    if a == b and b == c and a == x and b == y:\n                        return a, b, c\n                    if a == b and a == x and b == y and c == z:\n                        return a, b, c\n                    if a == x and b == y and c == z:\n                        return a, b, c\n        return None\n\n    def print_result(result, x, y, z):\n        if result is None:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n            print(\" \".join(map(str, sorted(result))))\n\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        x, y, z = map(int, stdin.readline().strip().split())\n        result = find_abc(x, y, z)\n        print_result(result, x, y, z)\n"
    },
    {
        "number": 4429,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.strip().split('\\n')[0])\n    output = []\n    \n    for i in range(1, t+1):\n        x, y, z = [int(x) for x in stdin.strip().split('\\n')[i].split()]\n        \n        if x <= y and x <= z:\n            if y <= z:\n                output.append(\"YES\\n{0} {1} {2}\\n\".format(z, x, y))\n            else:\n                output.append(\"YES\\n{0} {1} {2}\\n\".format(y, x, z))\n        elif y <= x and y <= z:\n            if x <= z:\n                output.append(\"YES\\n{0} {1} {2}\\n\".format(z, y, x))\n            else:\n                output.append(\"YES\\n{0} {1} {2}\\n\".format(x, y, z))\n        elif z <= x and z <= y:\n            if x <= y:\n                output.append(\"YES\\n{0} {1} {2}\\n\".format(y, z, x))\n            else:\n                output.append(\"YES\\n{0} {1} {2}\\n\".format(x, z, y))\n        else:\n            output.append(\"NO\\n\")\n    \n    return \"\".join(output)"
    },
    {
        "number": 4429,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline())\n    output = []\n    \n    for _ in range(cases):\n        x, y, z = map(int, stdin.readline().split())\n        \n        if x <= y and x <= z:\n            a, b = x, y\n            c = max(z, min(y, z))\n        elif y <= x and y <= z:\n            a, b = y, z\n            c = max(x, min(x, z))\n        else:\n            a, b = z, x\n            c = max(y, min(y, x))\n        \n        if a == b or a == c or b == c:\n            output.append(\"NO\")\n        else:\n            output.append(\"YES\")\n            output.append(f\"{a} {b} {c}\")\n    \n    return \"\\n\".join(output)"
    },
    {
        "number": 4430,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[:3])\n    objects = list(map(int, stdin.split()[3:]))\n\n    max_objects = 0\n    for i in range(n):\n        max_objects = max(max_objects, sum(objects[:i + 1]))\n\n    return str(max_objects)"
    },
    {
        "number": 4430,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[:3])\n    objects = list(map(int, stdin.split()[3:]))\n\n    max_packed = 0\n    i = 0\n    while i < n:\n        current_boxes = [0] * m\n        current_packed = 0\n        for j in range(i, n):\n            current_packed += 1\n            for box in range(m):\n                if current_boxes[box] + objects[j] <= k:\n                    current_boxes[box] += objects[j]\n                    break\n            else:\n                break\n        else:\n            max_packed = max(max_packed, current_packed)\n        i = j + 1\n\n    return str(max_packed)\n\ninput_stdin = input()\nprint(solution(input_stdin)) "
    },
    {
        "number": 4430,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, sizes = stdin.split()\n    n, m, k = int(n), int(m), int(k)\n    sizes = list(map(int, sizes.split()))\n    \n    # find the maximum number of objects that can be packed\n    max_packed = 0\n    for i in range(n + 1):\n        if sum(sizes[:i]) <= k:\n            max_packed = i\n        else:\n            break\n    \n    # calculate the number of objects that can be packed into the boxes\n    objects_packed = 0\n    box_index = 0\n    while objects_packed < max_packed:\n        box_size = k\n        while box_size >= sizes[objects_packed]:\n            box_size -= sizes[objects_packed]\n            objects_packed += 1\n            if objects_packed >= max_packed:\n                break\n        box_index += 1\n    \n    return str(objects_packed)"
    },
    {
        "number": 4430,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[:3])\n    objects = list(map(int, stdin.split()[3:]))\n\n    max_objects = 0\n    while len(objects) > 0:\n        current_objects = []\n        current_boxes = [k] * m\n\n        for object_size in objects:\n            can_pack = False\n            for box in current_boxes:\n                if box >= object_size:\n                    can_pack = True\n                    current_boxes[current_boxes.index(box)] -= object_size\n                    break\n            if can_pack:\n                current_objects.append(object_size)\n\n        max_objects = max(max_objects, len(current_objects))\n        objects = objects[len(current_objects):]\n\n    return str(max_objects)\n\n\ndef"
    },
    {
        "number": 4430,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    max_packed = 0\n    for i in range(1, n + 1):\n        # Empty all boxes\n        boxes = [k] * m\n        packed = 0\n\n        for j in range(i, n + 1):\n            # Find the first box that can fit the object\n            box_index = next((index for index, box_size in enumerate(boxes) if box_size >= a[j - 1]), None)\n\n            if box_index is None:\n                # No box can fit the object\n                break\n\n            # Pack the object in the chosen box\n            boxes[box_index] -= a[j - 1]\n            packed += 1\n\n        max_packed = max(max_packed, packed)\n\n    return str(max_packed)"
    },
    {
        "number": 4430,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[:3])\n    a = list(map(int, stdin.split()[3:]))\n    max_packed_objects = 0\n\n    for i in range(1, n + 1):\n        boxes = [k] * m\n        objects_to_pack = a[:i]\n\n        for obj in objects_to_pack:\n            for j in range(m):\n                if boxes[j] >= obj:\n                    boxes[j] -= obj\n                    break\n            else:\n                break\n        else:\n            max_packed_objects = max(max_packed_objects, len(objects_to_pack))\n\n    return str(max_packed_objects)\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4430,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[:3])\n    sizes = list(map(int, stdin.split()[3:]))\n\n    def pack_objects(objects: list) -> int:\n        boxes = [k] * m\n        boxes_used = 0\n        for size in objects:\n            found = False\n            for i in range(m):\n                if boxes[i] >= size:\n                    boxes[i] -= size\n                    found = True\n                    break\n            if not found:\n                boxes_used += 1\n                boxes.append(k)\n        return sum(objects[:-boxes_used])\n\n    max_objects = 0\n    for i in range(n):\n        max_objects = max(max_objects, pack_objects(sizes[:i + 1]))\n\n    return str(max_objects)\n"
    },
    {
        "number": 4430,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[0:3])\n    objects = list(map(int, stdin.split()[3:]))\n\n    max_objects = 0\n    for i in range(len(objects)):\n        box_count = 1\n        box_size = k\n        objects_packed = 0\n\n        while box_count <= m and objects_packed < n:\n            if box_size >= objects[objects_packed]:\n                box_size -= objects[objects_packed]\n                objects_packed += 1\n            else:\n                box_count += 1\n                box_size = k\n\n        max_objects = max(max_objects, objects_packed)\n\n        # Throw away the leftmost object\n        objects.pop(0)\n        n -= 1\n\n    return str(max_objects)\n\ndef"
    },
    {
        "number": 4430,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[:3])\n    a = list(map(int, stdin.split()[3:]))\n    max_count = 0\n    \n    for i in range(n):\n        boxes = m\n        count = 0\n        for j in range(n-i):\n            if boxes == 0:\n                break\n            if a[j] <= k and count + a[j] <= k:\n                count += a[j]\n                boxes -= 1\n            elif a[j] <= k and count + a[j] > k:\n                boxes -= 1\n                break\n        if count > max_count:\n            max_count = count\n            \n    return str(max_count)"
    },
    {
        "number": 4430,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[:3])\n    objects = list(map(int, stdin.split()[3:]))\n\n    max_objects = 0\n    for i in range(len(objects)):\n        current_objects = 0\n        boxes = m\n        available_space = k\n\n        for j in range(i, len(objects)):\n            if available_space >= objects[j]:\n                current_objects += 1\n                available_space -= objects[j]\n            else:\n                boxes -= 1\n                if boxes == 0:\n                    break\n                available_space = k\n\n        max_objects = max(max_objects, current_objects)\n\n    return str(max_objects)\n\n\ndef"
    },
    {
        "number": 4431,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0].split())\n    s = stdin.split()[1]\n    available_letters = stdin.split()[2].split()\n    \n    count = 0\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            substring = s[i-1:j]\n            if all(letter in available_letters for letter in substring):\n                count += 1\n                \n    return str(count)"
    },
    {
        "number": 4431,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, s, letters = stdin.split()\n    n, k = int(n), int(k)\n    available_letters = set(letters.split())\n\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            if set(substring).issubset(available_letters):\n                count += 1\n\n    return str(count)"
    },
    {
        "number": 4431,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().strip().split())\n    s = stdin.readline().strip()\n    available_letters = stdin.readline().strip().split()\n\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            if all(char in available_letters for char in substring):\n                count += 1\n\n    return str(count)"
    },
    {
        "number": 4431,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0].split())\n    s = stdin.split()[1]\n    available_letters = set(stdin.split()[2].split())\n\n    def is_valid(substring: str) -> bool:\n        for char in substring:\n            if char not in available_letters:\n                return False\n        return True\n\n    valid_substrings = 0\n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            if is_valid(substring):\n                valid_substrings += 1\n\n    return str(valid_substrings)"
    },
    {
        "number": 4431,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    s = stdin.split()[2]\n    available_letters = stdin.split()[3:]\n\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            if all(letter in available_letters for letter in substring):\n                count += 1\n\n    return str(count)"
    },
    {
        "number": 4431,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0].split())\n    s = stdin.split()[1]\n    available_letters = stdin.split()[2].split()\n\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if all(letter in available_letters for letter in s[i:j+1]):\n                count += 1\n\n    return str(count)\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4431,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    s = stdin.split()[1]\n    available_letters = stdin.split()[2]\n\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            if all(letter in available_letters.split() for letter in substring):\n                count += 1\n\n    return str(count)\n\ndef"
    },
    {
        "number": 4431,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(stdin.split()[1])\n    available_letters = set(stdin.split()[2].split())\n\n    substring_count = 0\n\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            substring = ''.join(s[i:j])\n            if set(substring).issubset(available_letters):\n                substring_count += 1\n\n    return str(substring_count)\n\ninput_string = \"7 2\\nabacaba\\na b\"\noutput = solution(input_string)\nprint(output) "
    },
    {
        "number": 4431,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = input()\n    available_letters = set(input().split())\n\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            if set(substring).issubset(available_letters):\n                count += 1\n\n    return str(count)\n\ninput_string = \"\"\ninput_string += input()\ninput_string += input()\ninput_string += input()\noutput_string = solution(input_string)\nprint(output_string) "
    },
    {
        "number": 4431,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0].split())\n    s = stdin.split()[1]\n    available_letters = list(stdin.split()[2].split())\n\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            if all(letter in available_letters for letter in substring):\n                count += 1\n\n    return str(count)"
    },
    {
        "number": 4432,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def read_input() -> int:\n        return int(stdin.readline().strip())\n\n    def read_array(size: int) -> List[int]:\n        return list(map(int, stdin.readline().strip().split()))\n\n    def get_alternating_subsequences(a: List[int]) -> List[List[int]]:\n        result = []\n        n = len(a)\n        for i in range(n):\n            for j in range(i + 1, n):\n                if (a[i] > 0 and a[j] < 0) or (a[i] < 0 and a[j] > 0):\n                    subsequence = a[i:j + 1]\n                    result.append(subsequence)\n        return result\n\n    def get_max_sum_subsequence(sequences: List[List[int]]) -> int:\n        max_sum = 0\n        for sequence in sequences:\n            current_sum = sum(sequence)\n            if current_sum > max_sum:\n                max_sum = current_sum\n        return max_sum\n\n    t = read_input()\n    result = []\n    for _ in range(t):\n        n = read_input()\n        a = read_array(n)\n        alternating_sequences = get_alternating_subsequences(a)\n        max_sum = get_max_sum_subsequence(alternating_sequences)\n        result.append(max_sum)\n\n    return \"\\n\".join(map(str, result))\n"
    },
    {
        "number": 4432,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def find_alternating_subsequence(a):\n        n = len(a)\n        dp = [0] * n\n        dp[0] = a[0]\n        prev = 0\n        ans = 0\n        for i in range(1, n):\n            if a[i] * prev < 0:\n                dp[i] = max(dp[i - 1], abs(a[i]) + dp[prev])\n                ans = max(ans, dp[i])\n            prev = i\n        return ans\n\n    def read_input():\n        cases = int(stdin.readline())\n        for _ in range(cases):\n            n = int(stdin.readline())\n            a = list(map(int, stdin.readline().split()))\n            yield a\n\n    output = []\n    for a in read_input():\n        output.append(str(find_alternating_subsequence(a)))\n\n    return \"\\n\".join(output)"
    },
    {
        "number": 4432,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.readline())\n    result = []\n\n    for _ in range(test_cases):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n\n        max_length = n // 2\n        max_sum = float('-inf')\n\n        for length in range(1, max_length + 1):\n            sums = [0] * length\n            for i in range(n):\n                if i % 2 == 0:\n                    sums[i // 2] += a[i]\n                else:\n                    sums[i // 2] -= a[i]\n\n            current_sum = max(sums)\n            if current_sum > max_sum:\n                max_sum = current_sum\n\n        result.append(max_sum)\n\n    return '\\n'.join(map(str, result))\n"
    },
    {
        "number": 4432,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.split('\\n')\n    t = int(test_cases.pop(0))\n    output = []\n    \n    for _ in range(t):\n        n = int(test_cases.pop(0))\n        a = list(map(int, test_cases.pop(0).split()))\n        max_length = n // 2 + 1\n        max_sum = float('-inf')\n        \n        for length in range(1, max_length + 1):\n            for i in range(n - length + 1):\n                subsequence = a[i:i + length]\n                if all(subsequence[i] * subsequence[i + 1] < 0 for i in range(length - 1)):\n                    current_sum = sum(subsequence)\n                    if current_sum > max_sum:\n                        max_sum = current_sum\n        \n        output.append(max_sum)\n    \n    return '\\n'.join(map(str, output))\n\ndef"
    },
    {
        "number": 4432,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def find_alternating_subsequence(a: list) -> int:\n        n = len(a)\n        dp = [0] * n\n        for i in range(n):\n            dp[i] = [0] * 2\n        dp[0][0] = a[0]\n        dp[0][1] = -a[0]\n        for i in range(1, n):\n            if a[i] > 0:\n                dp[i][0] = max(dp[i - 1][1] + a[i], dp[i - 1][0])\n                dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] - a[i])\n            else:\n                dp[i][0] = max(dp[i - 1][0] - a[i], dp[i - 1][1])\n                dp[i][1] = max(dp[i - 1][0], dp[i - 1][1] + a[i])\n        return max(dp[-1][0], dp[-1][1])\n\n    t = int(stdin.readline())\n    result = []\n    for _ in range(t):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        result.append(find_alternating_subsequence(a))\n    return '\\n'.join(map(str, result))\n\nimport sys"
    },
    {
        "number": 4432,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def find_max_sum(a: List[int]) -> int:\n        n = len(a)\n        max_sum = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                if a[j] * a[i] < 0:\n                    max_sum = max(max_sum, a[i] + a[j])\n        return max_sum\n\n    t = int(stdin.readline())\n    output = []\n\n    for _ in range(t):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        max_sum = find_max_sum(a)\n        output.append(max_sum)\n\n    return \"\\n\".join(map(str, output))\n"
    },
    {
        "number": 4432,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def read_input(input_string: str) -> list:\n        input_list = input_string.split(\"\\n\")\n        n = int(input_list[0])\n        a = list(map(int, input_list[1].split()))\n        return n, a\n\n    def is_alternating(sequence: list) -> bool:\n        if len(sequence) <= 2:\n            return True\n        return (sequence[1] > sequence[0]) != (sequence[2] > sequence[1])\n\n    def max_alternating_subsequence(sequence: list) -> list:\n        max_subsequence = []\n        current_subsequence = []\n        for i, x in enumerate(sequence):\n            if not current_subsequence or (x > 0) == (current_subsequence[-1] > 0):\n                current_subsequence.append(x)\n            else:\n                if sum(current_subsequence) > sum(max_subsequence):\n                    max_subsequence = current_subsequence\n                current_subsequence = [x]\n        if sum(current_subsequence) > sum(max_subsequence):\n            max_subsequence = current_subsequence\n        return max_subsequence\n\n    def max_alternating_subsequence_sum(sequence: list) -> int:\n        max_sum = 0\n        current_sum = 0\n        for x in sequence:\n            if x > 0:\n                current_sum += x\n            else:\n                if current_sum > max_sum:\n                    max_sum = current_sum\n                current_sum = 0\n        return max_sum\n\n    output = []\n    for test in stdin.split(\"\\n\"):\n        if test:\n            n, a = read_input(test)\n            if is_alternating(a):\n                max_subsequence = max_alternating_subsequence(a)\n                output.append(sum(max_subsequence))\n            else:\n                output.append(-1)\n    return \"\\n\".join(map(str, output))\n\nt = int(input())\ninput_data = \"\".join([input() + \"\\n\" for _ in range(t)])\nprint(solution(input_data)) "
    },
    {
        "number": 4432,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        max_length = n\n        max_sum = float('-inf')\n        for k in range(1, max_length + 1, 2):\n            for i in range(n - k + 1):\n                subseq = a[i:i + k]\n                if (subseq[0] < 0 and all(x > 0 for x in subseq[1:])) or (subseq[0] > 0 and all(x < 0 for x in subseq[1:])):\n                    current_sum = sum(subseq)\n                    if current_sum > max_sum:\n                        max_sum = current_sum\n        print(max_sum)\n\ndef"
    },
    {
        "number": 4432,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    tests = [t for t in stdin.split('\\n') if t.strip()]\n    t = int(tests[0])\n    result = []\n    for i in range(1, t * 2 + 1, 2):\n        n = int(tests[i])\n        a = list(map(int, tests[i + 1].split()))\n        max_sum = float('-inf')\n        for j in range(1, len(a) + 1):\n            for k in range(j + 1, len(a) + 1):\n                subseq = a[j - 1:k]\n                if len(subseq) % 2 == 0:\n                    sign = 1\n                else:\n                    sign = -1\n                is_valid = True\n                for elem in subseq:\n                    if elem * sign <= 0:\n                        is_valid = False\n                        break\n                    sign *= -1\n                if is_valid:\n                    max_sum = max(max_sum, sum(subseq))\n        result.append(max_sum)\n    return '\\n'.join(map(str, result))\n\ndef"
    },
    {
        "number": 4432,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    results = []\n\n    for _ in range(t):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n\n        max_sum = float('-inf')\n        max_subsequence = []\n\n        for i in range(n):\n            for j in range(i, n):\n                subsequence = a[i:j + 1]\n                subsequence_sum = sum(subsequence)\n\n                if len(subsequence) % 2 == 0:\n                    subsequence_sum *= -1\n\n                if subsequence_sum > max_sum:\n                    max_sum = subsequence_sum\n                    max_subsequence = subsequence\n\n        results.append(max_sum)\n\n    return '\\n'.join(map(str, results))\n"
    },
    {
        "number": 4433,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def read_input():\n        n, m = map(int, stdin.readline().split())\n        graph = [[] for _ in range(n)]\n        for _ in range(m):\n            u, v = map(int, stdin.readline().split())\n            graph[u-1].append(v-1)\n            graph[v-1].append(u-1)\n        return n, graph\n\n    def find_spanning_tree(n, graph):\n        used = [False] * n\n        result = []\n        used[0] = True\n        stack = [0]\n        while stack:\n            v = stack.pop()\n            for u in graph[v]:\n                if not used[u]:\n                    used[u] = True\n                    stack.append(u)\n                    result.append((v, u))\n        return result\n\n    n, graph = read_input()\n    spanning_tree = find_spanning_tree(n, graph)\n    max_degree = 0\n    for edge in spanning_tree:\n        v, u = edge\n        max_degree = max(max_degree, len(graph[v]) + len(graph[u]))\n    print(max_degree)\n    return \"\\n\".join(f\"{v+1} {u+1}\" for v, u in spanning_tree)"
    },
    {
        "number": 4433,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    edges = []\n    for line in stdin.split('\\n')[2:]:\n        if line:\n            v, u = map(int, line.split())\n            edges.append((v, u))\n    \n    # Convert the edges to a graph\n    graph = {i: set() for i in range(1, n + 1)}\n    for v, u in edges:\n        graph[v].add(u)\n        graph[u].add(v)\n    \n    # Calculate the maximum degree of any vertex\n    max_degree = max(len(graph[v]) for v in graph)\n    \n    # Find the spanning tree with the maximum degree\n    spanning_tree = []\n    seen = set()\n    stack = [1]\n    while stack:\n        v = stack.pop()\n        if v not in seen:\n            seen.add(v)\n            for u in graph[v]:\n                if u not in seen:\n                    stack.append(u)\n                    spanning_tree.append((v, u))\n    \n    # Print the spanning tree\n    return '\\n'.join(f'{v} {u}' for v, u in spanning_tree)"
    },
    {
        "number": 4433,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, edges = int(stdin.split()[0]), int(stdin.split()[1]), []\n    for i in range(m):\n        v, u = int(stdin.split()[2*i+2]), int(stdin.split()[2*i+3])\n        edges.append((v-1, u-1))\n    \n    # Find a spanning tree with maximum degree over all vertices\n    # We can use DFS to find the spanning tree\n    visited = [False] * n\n    degree = [0] * n\n    adj_list = [[] for _ in range(n)]\n    for edge in edges:\n        adj_list[edge[0]].append(edge[1])\n        adj_list[edge[1]].append(edge[0])\n    \n    def dfs(v):\n        visited[v] = True\n        for u in adj_list[v]:\n            if not visited[u]:\n                dfs(u)\n    \n    max_degree = 0\n    for i in range(n):\n        degree[i] = len(adj_list[i])\n        max_degree = max(max_degree, degree[i])\n    \n    for i in range(n):\n        if degree[i] == max_degree and not visited[i]:\n            dfs(i)\n            break\n    \n    # Output the spanning tree\n    result = []\n    for i in range(n):\n        for u in adj_list[i]:\n            if visited[u]:\n                result.append((i+1, u+1))\n                break\n    \n    return \"\\n\".join(map(lambda x: str(x[0]) + \" \" + str(x[1]), result))"
    },
    {
        "number": 4433,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    adj_list = {}\n    for i in range(1, n+1):\n        adj_list[i] = set()\n\n    for edge in stdin.strip().split('\\n')[1:]:\n        v, u = map(int, edge.split())\n        adj_list[v].add(u)\n        adj_list[u].add(v)\n\n    def dfs(node, visited, current_tree):\n        visited.add(node)\n        current_tree.add(node)\n        for neighbor in adj_list[node]:\n            if neighbor not in visited:\n                dfs(neighbor, visited, current_tree)\n\n    max_degree = 0\n    max_degree_nodes = set()\n    for i in range(1, n+1):\n        visited = set()\n        current_tree = set()\n        dfs(i, visited, current_tree)\n        if len(current_tree) - 1 > max_degree:\n            max_degree = len(current_tree) - 1\n            max_degree_nodes = current_tree\n\n    result = []\n    for node in max_degree_nodes:\n        for neighbor in adj_list[node]:\n            if neighbor in max_degree_nodes:\n                result.append(str(node) + \" \" + str(neighbor))\n\n    return \"\\n\".join(result)\n\n\ninput_string = \"\"\"5 5\n1 2\n2 3\n3 5\n4 3\n1 5\"\"\"\nprint(solution(input_string)) "
    },
    {
        "number": 4433,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def read_input() -> tuple:\n        n, m = map(int, stdin.readline().strip().split())\n        edges = [tuple(map(int, stdin.readline().strip().split())) for _ in range(m)]\n        return n, edges\n\n    def create_spanning_tree(n: int, edges: list) -> list:\n        graph = [[] for _ in range(n)]\n        for v, u in edges:\n            graph[v - 1].append(u - 1)\n            graph[u - 1].append(v - 1)\n\n        visited = [False] * n\n        spanning_tree = []\n        stack = [0]\n        while stack:\n            node = stack.pop()\n            if not visited[node]:\n                visited[node] = True\n                for neighbor in graph[node]:\n                    if not visited[neighbor]:\n                        stack.append(neighbor)\n                        spanning_tree.append((node + 1, neighbor + 1))\n\n        return spanning_tree\n\n    def find_max_degree_spanning_tree(n: int, edges: list) -> list:\n        spanning_tree = create_spanning_tree(n, edges)\n        max_degree = max(len(neighbors) for neighbors in create_spanning_tree(n, edges))\n        return [edge for edge in spanning_tree if len(create_spanning_tree(n, edges + [edge])) == max_degree]\n\n    n, edges = read_input()\n    return \"\\n\".join(str(v) + \" \" + str(u) for v, u in find_max_degree_spanning_tree(n, edges))"
    },
    {
        "number": 4433,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def read_input():\n        n, m = map(int, input().split())\n        edges = []\n        for _ in range(m):\n            v, u = map(int, input().split())\n            edges.append((v, u))\n        return n, edges\n\n    def find_spanning_tree(n, edges):\n        parent = [-1] * n\n        queue = []\n        queue.append(1)\n\n        while queue:\n            vertex = queue.pop(0)\n            for neighbor in range(1, n + 1):\n                if neighbor not in parent and (neighbor, vertex) in edges:\n                    parent[neighbor - 1] = vertex\n                    queue.append(neighbor)\n        return parent\n\n    def get_output(n, parent):\n        output = []\n        for i in range(1, n):\n            output.append(str(parent[i]) + \" \" + str(i + 1))\n        return output\n\n    n, edges = read_input()\n    parent = find_spanning_tree(n, edges)\n    output = get_output(n, parent)\n    return \"\\n\".join(output)\n"
    },
    {
        "number": 4433,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, m = map(int, lines[0].split())\n    edges = []\n    for line in lines[1:]:\n        v, u = map(int, line.split())\n        edges.append((v, u))\n\n    # find spanning tree with maximum degree\n    max_degree = -1\n    best_tree = []\n    for i in range(1, n):\n        tree = []\n        visited = [False] * n\n        dfs(tree, visited, i, edges)\n        degree = max(tree, key=lambda x: len(x[1]))[1]\n        if degree > max_degree:\n            max_degree = degree\n            best_tree = tree\n\n    # print spanning tree edges\n    result = []\n    for edge in best_tree:\n        v, u = edge\n        if (u, v) not in result:\n            result.append((v, u))\n    return \"\\n\".join(f\"{v} {u}\" for v, u in result)\n\ndef"
    },
    {
        "number": 4433,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def read_input(input_str: str) -> Tuple[int, int, List[List[int]]]:\n        lines = input_str.split(\"\\n\")\n        n, m = map(int, lines[0].split())\n        edges = [list(map(int, line.split())) for line in lines[1:]]\n        return n, m, edges\n\n    def find_spanning_tree(n: int, m: int, edges: List[List[int]]) -> str:\n        adjacency_matrix = [[0] * n for _ in range(n)]\n        for v, u in edges:\n            adjacency_matrix[v - 1][u - 1] = 1\n            adjacency_matrix[u - 1][v - 1] = 1\n\n        def dfs(v: int) -> None:\n            nonlocal visited, spanning_tree\n            visited[v] = True\n            for u in range(n):\n                if not visited[u] and adjacency_matrix[v][u] == 1:\n                    spanning_tree.add(tuple(sorted((v + 1, u + 1))))\n                    dfs(u)\n\n        visited = [False] * n\n        spanning_tree = set()\n        dfs(0)\n        return spanning_tree\n\n    n, m, edges = read_input(stdin)\n    spanning_tree = find_spanning_tree(n, m, edges)\n    max_degree = 0\n    result = \"\"\n\n    for edge in spanning_tree:\n        v, u = edge\n        degree = sum([1 for e in spanning_tree if e[0] == v or e[1] == v])\n        if degree > max_degree:\n            max_degree = degree\n            result = edge\n\n    for edge in spanning_tree:\n        v, u = edge\n        if v == result[0]:\n            print(f\"{v} {u}\")\n        elif u == result[0]:\n            print(f\"{u} {v}\")\n\n    return \"\"\n"
    },
    {
        "number": 4433,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, edges = [int(x) for x in stdin.split()]\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        v, u = [int(x) for x in input().split()]\n        graph[v-1].append(u-1)\n        graph[u-1].append(v-1)\n    \n    def dfs(start, visited, degrees):\n        for v in graph[start]:\n            if not visited[v]:\n                visited[v] = True\n                degrees[v] = degrees[start] + 1\n                dfs(v, visited, degrees)\n    \n    max_degree = 0\n    result = []\n    for start in range(n):\n        visited = [False] * n\n        degrees = [0] * n\n        dfs(start, visited, degrees)\n        max_degree_vertex = max(range(n), key=lambda x: degrees[x])\n        if degrees[max_degree_vertex] > max_degree:\n            max_degree = degrees[max_degree_vertex]\n            result = [(max_degree_vertex + 1, x + 1) for x in graph[max_degree_vertex]]\n    \n    return \"\\n\".join(f\"{x} {y}\" for x, y in result)\n\ninput_string = input()\nwhile input_string.strip() != \"\":\n    print(solution(input_string))\n    input_string = input() "
    },
    {
        "number": 4433,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    graph = [[] for _ in range(n)]\n\n    for i in range(m):\n        v, u = map(int, stdin.split()[2*i:2*(i+1)])\n        graph[v-1].append(u-1)\n        graph[u-1].append(v-1)\n\n    def dfs(start: int) -> set:\n        visited = set()\n        stack = [start]\n\n        while stack:\n            node = stack.pop()\n            if node not in visited:\n                visited.add(node)\n                for neighbor in graph[node]:\n                    stack.append(neighbor)\n\n        return visited\n\n    def max_degree(tree: set) -> int:\n        degrees = [0] * n\n\n        for vertex in tree:\n            degrees[vertex] = len(graph[vertex])\n\n        return max(degrees)\n\n    result = []\n    for start in range(n):\n        tree = dfs(start)\n        if len(tree) == n and max_degree(tree) == max_degree(result):\n            result.append(tree)\n\n    output = []\n    for tree in result:\n        for vertex in range(n):\n            for neighbor in graph[vertex]:\n                if neighbor in tree:\n                    output.append(f\"{vertex+1} {neighbor+1}\")\n\n    return \"\\n\".join(output)\n"
    },
    {
        "number": 4434,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    answers = []\n    \n    for i in range(t):\n        n = int(input())\n        count_moves = 0\n        \n        for j in range(n**2):\n            count_moves += (n**2-1-j) // n\n        \n        answers.append(count_moves)\n    \n    return \"\\n\".join(map(str, answers))\n"
    },
    {
        "number": 4434,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def min_moves(n: int, board: List[List[int]]) -> int:\n        def count_figures(board: List[List[int]]) -> int:\n            return sum(board[i][j] for i in range(n) for j in range(n))\n\n        def find_empty_cell(board: List[List[int]]) -> Tuple[int, int]:\n            for i in range(n):\n                for j in range(n):\n                    if board[i][j] == 0:\n                        return i, j\n            return -1, -1\n\n        def move_figure(board: List[List[int]], i: int, j: int) -> bool:\n            if i < 0 or i >= n or j < 0 or j >= n or board[i][j] != 0:\n                return False\n            for di in range(-1, 2):\n                for dj in range(-1, 2):\n                    ni, nj = i + di, j + dj\n                    if ni >= 0 and ni < n and nj >= 0 and nj < n and board[ni][nj] == 0:\n                        board[ni][nj] = board[i][j]\n                        board[i][j] = 0\n                        return True\n            return False\n\n        empty_cell = find_empty_cell(board)\n        while empty_cell != (-1, -1):\n            i, j = empty_cell\n            for di in range(-1, 2):\n                for dj in range(-1, 2):\n                    ni, nj = i + di, j + dj\n                    if ni >= 0 and ni < n and nj >= 0 and nj < n and board[ni][nj] == 1:\n                        board[ni][nj] = 0\n                        board[i][j] = 1\n                        empty_cell = (i, j)\n                        break\n                else:\n                    continue\n                break\n            else:\n                empty_cell = find_empty_cell(board)\n\n        return count_figures(board) - n - 1\n\n    stdin = stdin.split('\\n')\n    t = int(stdin[0])\n    results = []\n    for i in range(t):\n        n = int(stdin[i+1])\n        board = [[1] * n for _ in range(n)]\n        result = min_moves(n, board)\n        results.append(result)\n    return '\\n'.join(map(str, results))"
    },
    {
        "number": 4434,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split(\"\\n\")\n    t = int(stdin_list[0])\n    output = []\n    for i in range(1, t + 1):\n        n = int(stdin_list[i])\n        moves = 0\n        if n == 1:\n            moves = 0\n        elif n == 3:\n            moves = 2\n        else:\n            moves = 2 * (n - 1)\n        output.append(moves)\n    return \"\\n\".join(map(str, output))\n\n\ndef"
    },
    {
        "number": 4434,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def get_moves(n, board):\n        if n == 1:\n            return 0\n        if n == 3:\n            return 1\n        if n % 2 == 0:\n            return n - 1\n        else:\n            return n + 1\n\n    def get_board(n, moves):\n        board = [[1 for _ in range(n)] for _ in range(n)]\n        for move in moves:\n            x, y = move\n            board[y][x] = 0\n        return board\n\n    t = int(stdin.strip().split()[0])\n    output = []\n    for _ in range(t):\n        n = int(stdin.strip().split()[1])\n        moves = []\n        for i in range(n):\n            for j in range(n):\n                if board[i][j] == 0:\n                    continue\n                moves.append((i, j))\n        output.append(get_moves(n, get_board(n, moves)))\n    return \"\\n\".join(map(str, output))\n"
    },
    {
        "number": 4434,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def get_neighbors(i, j, n):\n        return [(x, y) for x in range(max(0, i - 1), min(i + 2, n)) for y in range(max(0, j - 1), min(j + 2, n)) if (x, y) != (i, j)]\n\n    def bfs(start, end, n):\n        queue = [(start, 0)]\n        visited = set()\n        while queue:\n            cell, depth = queue.pop(0)\n            if cell == end:\n                return depth\n            if cell in visited:\n                continue\n            visited.add(cell)\n            for neighbor in get_neighbors(*cell, n):\n                queue.append((neighbor, depth + 1))\n        return -1\n\n    def is_valid(line: str) -> bool:\n        try:\n            n = int(line)\n            return 1 <= n < 500000 and n % 2 == 1\n        except ValueError:\n            return False\n\n    def main(stdin: str) -> str:\n        output = []\n        test_cases = stdin.split('\\n')\n        for t, test in enumerate(test_cases):\n            if t == 0:\n                continue\n            if not is_valid(test):\n                raise ValueError(f\"Invalid test case {t}: {test}\")\n            n = int(test)\n            start = (n // 2, n // 2)\n            end = (n // 2, n // 2 - 1)\n            answer = bfs(start, end, n)\n            output.append(str(answer))\n        return '\\n'.join(output)\n\n    return main(stdin)\n\ninput_text = \"\"\"3\n1\n5\n499993\"\"\"\noutput_text = solution(input_text)\nprint(output_text) "
    },
    {
        "number": 4434,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    test_cases = stdin.split(\"\\n\")\n    for i in range(1, len(test_cases), 2):\n        n = int(test_cases[i])\n        if n == 1:\n            result.append(0)\n        else:\n            result.append((n * (n - 1)) // 2)\n    return \"\\n\".join(map(str, result))"
    },
    {
        "number": 4434,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def is_odd(n: int) -> bool:\n        return n % 2 != 0\n\n    def move_count(size: int) -> int:\n        return (size - 1) * (size - 1)\n\n    def is_inside_board(i: int, j: int, size: int) -> bool:\n        return 0 <= i < size and 0 <= j < size\n\n    def count_moves(board: List[List[int]]) -> int:\n        size = len(board)\n        total_moves = move_count(size)\n        empty_cells = size * size - sum(sum(row) for row in board)\n\n        if empty_cells == 0:\n            return 0\n\n        for i in range(size):\n            for j in range(size):\n                if board[i][j] == 0:\n                    for x in range(i - 1, i + 2):\n                        for y in range(j - 1, j + 2):\n                            if is_inside_board(x, y, size) and board[x][y] == 1:\n                                board[x][y] = 0\n                                board[i][j] = 1\n                                return 1 + count_moves(board)\n\n        return total_moves\n\n    test_cases = int(stdin.readline().strip())\n    results = []\n\n    for _ in range(test_cases):\n        size = int(stdin.readline().strip())\n        board = [[1 if is_odd(i + j) else 0 for j in range(size)] for i in range(size)]\n        result = count_moves(board)\n        results.append(result)\n\n    return \"\\n\".join(map(str, results))\n"
    },
    {
        "number": 4434,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def find_min_moves(board_size: int) -> int:\n        board = [[1] * board_size for _ in range(board_size)]\n        queue = [(0, 0, 0)]\n        total_moves = 0\n        visited = set()\n\n        def is_valid(row, col):\n            return 0 <= row < board_size and 0 <= col < board_size and (row, col) not in visited\n\n        def move_figure(row, col, direction):\n            nonlocal total_moves\n            row_direction, col_direction = directions[direction]\n            while is_valid(row + row_direction, col + col_direction):\n                row += row_direction\n                col += col_direction\n                if board[row][col] == 0:\n                    total_moves += 1\n                else:\n                    board[row][col] += 1\n                visited.add((row, col))\n\n        while queue:\n            row, col, direction = queue.pop(0)\n            if (row, col) == (board_size - 1, board_size - 1):\n                return total_moves\n            for new_direction in range(8):\n                if new_direction != direction:\n                    move_figure(row, col, new_direction)\n                    queue.append((row, col, new_direction))\n\n    t = int(stdin.readline().strip())\n    outputs = []\n    for _ in range(t):\n        board_size = int(stdin.readline().strip())\n        outputs.append(find_min_moves(board_size))\n    return \"\\n\".join(map(str, outputs))\n\ninput_string = \"\"\"3\n1\n5\n499993\"\"\"\nprint(solution(input_string)) "
    },
    {
        "number": 4434,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(board, i, j):\n        return 0 <= i < n and 0 <= j < n\n\n    def move_count(board, i, j, visited):\n        if not is_valid(board, i, j) or visited[i][j] or not board[i][j]:\n            return 0\n        visited[i][j] = True\n        return 1 + move_count(board, i - 1, j - 1, visited) + move_count(board, i - 1, j, visited) + move_count(board, i - 1, j + 1, visited) + move_count(board, i, j - 1, visited) + move_count(board, i, j + 1, visited) + move_count(board, i + 1, j - 1, visited) + move_count(board, i + 1, j, visited) + move_count(board, i + 1, j + 1, visited)\n\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        board = [[1] * n for _ in range(n)]\n        visited = [[False] * n for _ in range(n)]\n        result = move_count(board, n - 1, n - 1, visited)\n        print(result)\n\ninput = \"\"\nsolution(input) "
    },
    {
        "number": 4434,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    result = []\n\n    for _ in range(t):\n        n = int(input())\n        result.append(n * n - 1)\n\n    return \"\\n\".join(map(str, result))"
    },
    {
        "number": 4435,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = [int(x) for x in stdin.splitlines()[1].split()]\n\n    def get_min_moves(i: int, parity: int) -> int:\n        if i < 1 or i > n:\n            return -1\n\n        if (a[i - 1] % 2 != parity) and (i - a[i - 1] >= 1 or i + a[i - 1] <= n):\n            return 1\n\n        return min(get_min_moves(i - a[i - 1], 1 - parity), get_min_moves(i + a[i - 1], 1 - parity))\n\n    result = []\n    for i in range(1, n + 1):\n        result.append(get_min_moves(i, a[i - 1] % 2))\n\n    return \" \".join(map(str, result))"
    },
    {
        "number": 4435,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    # Initialize dp array\n    dp = [-1] * n\n\n    # Base cases\n    for i in range(n):\n        if a[i] % 2 == 0:\n            dp[i] = 0\n\n    # Fill dp array using dynamic programming\n    for i in range(n):\n        if dp[i] == -1:\n            for j in range(i - a[i], i + a[i] + 1):\n                if 0 <= j < n and (a[i] % 2 != a[j] % 2) and dp[j] != -1:\n                    dp[i] = dp[j] + 1\n                    break\n\n    # Return output\n    return \" \".join(map(str, dp))"
    },
    {
        "number": 4435,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = -1\n\n    for i in range(n):\n        parity = a[i] % 2\n        for j in range(i - a[i], i + a[i] + 1):\n            if 0 <= j < n and (a[j] % 2 != parity):\n                dp[i] = min(dp[i], dp[j] + 1) if dp[i] != -1 else 1\n\n    return ' '.join(map(str, dp))"
    },
    {
        "number": 4435,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    result = []\n\n    def get_min_moves(i: int) -> int:\n        if a[i] % 2 == 0:\n            # even parity\n            return min(get_min_moves(i - a[i]) + 1 if i - a[i] >= 1 else float('inf'), get_min_moves(i + a[i]) + 1 if i + a[i] <= n else float('inf'))\n        else:\n            # odd parity\n            return min(get_min_moves(i - a[i]) + 1 if i - a[i] >= 1 else float('inf'), get_min_moves(i + a[i]) + 1 if i + a[i] <= n else float('inf'))\n\n    for i in range(1, n + 1):\n        result.append(get_min_moves(i))\n\n    return \" \".join(map(str, result))"
    },
    {
        "number": 4435,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    \n    # Check if parity of a_i and a_j is the same\n    def check_parity(i, j):\n        return (a[i] % 2) != (a[j] % 2)\n    \n    # Calculate distance to next position\n    def distance(i, j):\n        return abs(i - j)\n    \n    # Calculate minimum number of moves to reach position j\n    def min_moves(i, j):\n        if not check_parity(i, j):\n            return -1\n        return min(distance(i, j), distance(i, i - a[i]), distance(i, i + a[i]))\n    \n    # Calculate minimum number of moves for each position i\n    min_moves_list = []\n    for i in range(1, n + 1):\n        min_moves_list.append(min(min_moves(i, j) for j in range(1, n + 1) if check_parity(i, j)))\n    \n    return \" \".join(str(m) for m in min_moves_list) "
    },
    {
        "number": 4435,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    result = [-1] * n\n\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            if a[i] % 2 == a[j] % 2:\n                continue\n\n            if i < j:\n                distance = j - i\n            else:\n                distance = i - j\n\n            if result[i] == -1 or result[i] > distance:\n                result[i] = distance\n\n    return \" \".join(map(str, result))\n\ninput_data = \"\"\"10\n4 5 7 6 7 5 4 4 6 4\"\"\"\nprint(solution(input_data)) "
    },
    {
        "number": 4435,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    \n    dp = [-1] * n\n    \n    for i in range(n):\n        for j in range(i - a[i], i + a[i] + 1):\n            if 0 <= j < n and (a[j] % 2 != a[i] % 2):\n                dp[i] = 1 if dp[i] == -1 else min(dp[i], dp[j] + 1)\n                \n    return ' '.join(map(str, dp))"
    },
    {
        "number": 4435,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    d = [0] * n\n    parity = [a[i] % 2 for i in range(n)]\n    even_indices = [i for i in range(n) if parity[i] == 0]\n    odd_indices = [i for i in range(n) if parity[i] == 1]\n\n    def bfs(start: int) -> int:\n        queue = [(start, 0)]\n        visited = set()\n        visited.add(start)\n        while queue:\n            current, depth = queue.pop(0)\n            for move in [a[current] - a[i] for i in range(n)] + [a[current] + a[i] for i in range(n)]:\n                if move < 0 or move >= n:\n                    continue\n                if parity[current] == parity[move]:\n                    continue\n                if move not in visited:\n                    visited.add(move)\n                    queue.append((move, depth + 1))\n        return depth\n\n    for i in range(n):\n        if parity[i] == 0 and even_indices:\n            d[i] = bfs(even_indices.pop(0))\n        elif parity[i] == 1 and odd_indices:\n            d[i] = bfs(odd_indices.pop(0))\n        else:\n            d[i] = -1\n\n    return \" \".join(map(str, d))"
    },
    {
        "number": 4435,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    \n    def is_valid(i):\n        if i < 0 or i >= n:\n            return False\n        return True\n    \n    def opposite_parity(x, y):\n        return (x % 2 == 0 and y % 2 == 1) or (x % 2 == 1 and y % 2 == 0)\n    \n    def bfs(start_pos):\n        visited = [False] * n\n        visited[start_pos] = True\n        queue = [(start_pos, 0)]\n        while queue:\n            current_pos, current_dist = queue.pop(0)\n            if not is_valid(current_pos - a[current_pos]) and not is_valid(current_pos + a[current_pos]):\n                return -1\n            \n            for next_pos in [(current_pos - a[current_pos]), (current_pos + a[current_pos])]:\n                if is_valid(next_pos) and not visited[next_pos] and opposite_parity(a[current_pos], a[next_pos]):\n                    visited[next_pos] = True\n                    queue.append((next_pos, current_dist + 1))\n        return current_dist + 1\n    \n    d = [bfs(i) for i in range(n)]\n    \n    return ' '.join(map(str, d))"
    },
    {
        "number": 4435,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    parity = [0] * n\n    for i in range(n):\n        parity[i] = a[i] % 2\n\n    dp = [-1] * n\n\n    for i in range(n):\n        if parity[i] == 0:\n            dp[i] = 0\n            for j in range(1, a[i] + 1):\n                if i - j >= 0 and dp[i - j] == -1:\n                    dp[i - j] = j\n            for j in range(1, a[i] + 1):\n                if i + j < n and dp[i + j] == -1:\n                    dp[i + j] = j\n        else:\n            for j in range(i + 1, n):\n                if parity[j] == 1:\n                    dp[i] = 0\n                    if i - a[i] >= 0 and dp[i - a[i]] == -1:\n                        dp[i - a[i]] = 1\n                    if i + a[i] < n and dp[i + a[i]] == -1:\n                        dp[i + a[i]] = 1\n                    break\n\n    return ' '.join(map(str, dp))"
    },
    {
        "number": 4436,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for a in range(2, n):\n        for b in range(2, n):\n            if n % a == 0 and n % b == 0:\n                c = n // a // b\n                if 2 <= c <= n:\n                    return f\"YES\\n{a} {b} {c}\"\n    return \"NO\"\n\ndef"
    },
    {
        "number": 4436,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def find_factors(n: int) -> List[int]:\n        factors = []\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                factors.append(i)\n                if i != n // i:\n                    factors.append(n//i)\n        return factors\n\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    for i in range(1, t+1):\n        n = int(lines[i])\n        factors = find_factors(n)\n        if len(factors) == 0:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n            for a in factors:\n                for b in factors:\n                    if b > a:\n                        for c in factors:\n                            if c > b:\n                                if a*b*c == n:\n                                    print(a, b, c)\n                                    break\n                    if a*b*c == n:\n                        break\n\nstdin = \"5\\n64\\n32\\n97\\n2\\n12345\"\nsolution(stdin) "
    },
    {
        "number": 4436,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split(\"\\n\")\n    t = int(input_data[0])\n    results = []\n\n    for i in range(1, t+1):\n        n = int(input_data[i])\n        a, b, c = 0, 0, 0\n        if n == 2:\n            results.append(\"YES 2 2\")\n        elif n == 3:\n            results.append(\"YES 2 3\")\n        elif n == 4:\n            results.append(\"YES 2 2 2\")\n        else:\n            for i in range(2, int(n ** (1/3))+1):\n                if n % i == 0:\n                    a = i\n                    b = n // i\n                    if a * b != n:\n                        c = int(n/i)\n                        if a * b * c == n:\n                            results.append(\"YES \" + str(a) + \" \" + str(b) + \" \" + str(c))\n                            break\n            else:\n                results.append(\"NO\")\n\n    return \"\\n\".join(results)\n"
    },
    {
        "number": 4436,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    for i in range(1, t+1):\n        n = int(stdin.split('\\n')[i])\n        a, b, c = 0, 0, 0\n        flag = 0\n        for j in range(2, n+1):\n            if (n % j == 0):\n                flag = 1\n                c = j\n                b = n // c\n                a = n // b // c\n                break\n        if flag == 1:\n            print(\"YES\", a, b, c)\n        else:\n            print(\"NO\")\n    return \"\" "
    },
    {
        "number": 4436,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def factors(n: int) -> List[int]:\n        factors_list = []\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                factors_list.append(i)\n                if i != n // i:\n                    factors_list.append(n//i)\n        return factors_list\n\n    def prime_factors(n: int) -> List[int]:\n        factors_list = []\n        while n % 2 == 0:\n            factors_list.append(2)\n            n //= 2\n        for i in range(3, int(n**0.5)+1, 2):\n            while n % i == 0:\n                factors_list.append(i)\n                n //= i\n        if n > 2:\n            factors_list.append(n)\n        return factors_list\n\n    input_list = stdin.split('\\n')\n    t = int(input_list[0])\n    input_list = input_list[1:]\n\n    result = []\n    for n in input_list:\n        n = int(n)\n        if n < 2:\n            result.append(\"NO\")\n            continue\n\n        prime_factors_list = prime_factors(n)\n        if len(prime_factors_list) < 3:\n            result.append(\"NO\")\n            continue\n\n        result.append(\"YES\")\n        factors_list = factors(n)\n        for i in range(len(factors_list)):\n            for j in range(i+1, len(factors_list)):\n                for k in range(j+1, len(factors_list)):\n                    if factors_list[i] * factors_list[j] * factors_list[k] == n:\n                        result.append(f\"{factors_list[i]} {factors_list[j]} {factors_list[k]}\")\n                        break\n                else:\n                    continue\n                break\n            else:\n                continue\n            break\n\n    return \"\\n\".join(result)"
    },
    {
        "number": 4436,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    result = []\n\n    for i in range(1, t + 1):\n        n = int(stdin.split('\\n')[i])\n        for a in range(2, n):\n            for b in range(2, n):\n                if n % a == 0 and n % b == 0:\n                    c = n // (a * b)\n                    if 2 <= a and 2 <= b and 2 <= c:\n                        result.append(\"YES\")\n                        result.append(f\"{a} {b} {c}\")\n                        break\n            else:\n                continue\n            break\n        else:\n            result.append(\"NO\")\n\n    return \"\\n\".join(result)\n\n\ntest_input = \"5\\n64\\n32\\n97\\n2\\n12345\"\nprint(solution(test_input)) "
    },
    {
        "number": 4436,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    t = int(stdin[0])\n    output = []\n\n    for i in range(1, t + 1):\n        n = int(stdin[i])\n\n        if n == 2 or n == 3:\n            output.append(\"NO\")\n            continue\n\n        for a in range(2, int(n ** 0.5) + 1):\n            if n % a == 0:\n                b, c = n // a, a\n                if b >= 2 and c >= 2:\n                    output.append(\"YES\")\n                    output.append(\"{} {} {}\".format(min(a, b, c), max(a, b, c), min(a, b) * max(a, b)))\n                    break\n        else:\n            output.append(\"NO\")\n\n    return '\\n'.join(output)"
    },
    {
        "number": 4436,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def find_abc(n: int) -> str:\n        for a in range(2, int(n**(1/3))+1):\n            for b in range(a, int(n**(1/2))+1):\n                if n % b == 0 and n // b >= b:\n                    c = n // b\n                    return f\"{a} {b} {c}\"\n        return \"NO\"\n\n    t = int(stdin.splitlines()[0])\n    output = []\n\n    for i in range(1, t+1):\n        n = int(stdin.splitlines()[i])\n        output.append(find_abc(n))\n\n    return \"\\n\".join(output)"
    },
    {
        "number": 4436,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    cases = stdin.split('\\n')\n    t = int(cases[0])\n    result = []\n    \n    for i in range(1, t+1):\n        n = int(cases[i])\n        found = False\n        for a in range(2, n):\n            for b in range(a+1, n):\n                c = n / (a*b)\n                if c > 1 and c.is_integer() and c >= 2:\n                    found = True\n                    result.append(\"YES\")\n                    result.append(f\"{int(a)} {int(b)} {int(c)}\")\n                    break\n            if found:\n                break\n        if not found:\n            result.append(\"NO\")\n    \n    return \"\\n\".join(result)\n\ninput_str = \"\"\"5\n64\n32\n97\n2\n12345\"\"\"\n\nprint(solution(input_str)) "
    },
    {
        "number": 4436,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.split('\\n')[0])\n    test_results = []\n\n    for i in range(1, test_cases + 1):\n        n = int(stdin.split('\\n')[i])\n        result = \"YES\"\n        factors = []\n\n        for j in range(2, int(n ** 0.5) + 1):\n            if n % j == 0:\n                factors.append(j)\n                factors.append(n // j)\n\n        factors = list(set(factors))\n        factors.sort(reverse=True)\n\n        if len(factors) < 3:\n            result = \"NO\"\n        else:\n            result = f\"YES\\n{factors[0]} {factors[1]} {factors[2]}\"\n\n        test_results.append(result)\n\n    return '\\n'.join(test_results)\n"
    },
    {
        "number": 4437,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    s_list = list(s)\n    min_ops = 0\n\n    for i in range(1, n + 1, 2):\n        prefix = s[:i]\n        if prefix.count('a') == prefix.count('b'):\n            min_ops += i % 2\n        else:\n            min_ops += i % 2 + 1\n\n    for i in range(min_ops):\n        s_list[i] = 'b' if s_list[i] == 'a' else 'a'\n\n    return str(min_ops) + '\\n' + ''.join(s_list)\n\ninput_str = \"\"\"4\nbbbb\n6\nababab\n2\naa\"\"\"\n\noutput = solution(input_str)\nprint(output) "
    },
    {
        "number": 4437,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    count_a = count_b = 0\n    min_ops = 0\n    \n    for i in range(n):\n        if s[i] == 'a':\n            count_a += 1\n        else:\n            count_b += 1\n        \n        if i % 2 == 0 and count_a != count_b:\n            min_ops += 1\n            if count_a > count_b:\n                s = s[:i] + 'a' + s[i+1:]\n                count_b += 1\n            else:\n                s = s[:i] + 'b' + s[i+1:]\n                count_a += 1\n                \n    return f\"{min_ops}\\n{s}\""
    },
    {
        "number": 4437,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n\n    min_ops = 0\n    max_diff = 0\n    current_diff = 0\n\n    for i in range(n):\n        if s[i] == 'a':\n            current_diff += 1\n        else:\n            current_diff -= 1\n\n        if i % 2 == 0:\n            max_diff = max(max_diff, abs(current_diff))\n\n    min_ops = max_diff\n    result = s\n\n    if max_diff > 0:\n        result = \"\"\n        current_diff = 0\n\n        for i in range(n):\n            if s[i] == 'a' and current_diff < max_diff:\n                result += 'b'\n                current_diff += 1\n            elif s[i] == 'b' and current_diff > 0:\n                result += 'a'\n                current_diff -= 1\n            else:\n                result += s[i]\n\n    return str(min_ops) + \"\\n\" + result"
    },
    {
        "number": 4437,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    \n    min_operations = 0\n    current_letter = 'a'\n    for i in range(n):\n        if s[i] != current_letter:\n            min_operations += 1\n            current_letter = 'a' if current_letter == 'b' else 'b'\n    \n    return str(min_operations) + '\\n' + s"
    },
    {
        "number": 4437,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    count_a = 0\n    count_b = 0\n    min_operations = 0\n\n    for i in range(n):\n        if s[i] == 'a':\n            count_a += 1\n        else:\n            count_b += 1\n\n        if i % 2 == 0 and (count_a - count_b) % 2 == 1:\n            min_operations += 1\n            if s[i] == 'a':\n                s = s[:i] + 'b' + s[i+1:]\n                count_a -= 1\n                count_b += 1\n            else:\n                s = s[:i] + 'a' + s[i+1:]\n                count_a += 1\n                count_b -= 1\n\n    return str(min_operations) + '\\n' + s"
    },
    {
        "number": 4437,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    s = stdin.split(\"\\n\")[1]\n    operations = 0\n    for i in range(1, n + 1, 2):\n        prefix = s[:i]\n        if prefix.count(\"a\") > prefix.count(\"b\"):\n            operations += prefix.count(\"a\") - prefix.count(\"b\")\n        else:\n            operations += prefix.count(\"b\") - prefix.count(\"a\")\n\n    return str(operations) + \"\\n\" + s\n\ninput_string = \"\"\"4\nbbbb\"\"\"\noutput = solution(input_string)\nprint(output)\n\ninput_string = \"\"\"6\nababab\"\"\"\noutput = solution(input_string)\nprint(output)\n\ninput_string = \"\"\"2\naa\"\"\"\noutput = solution(input_string)\nprint(output) "
    },
    {
        "number": 4437,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n\n    operations = 0\n    for i in range(1, n + 1, 2):\n        if s[:i].count('a') > s[:i].count('b'):\n            operations += s[:i].count('a') - s[:i].count('b')\n        elif s[:i].count('a') < s[:i].count('b'):\n            operations += s[:i].count('b') - s[:i].count('a')\n\n    return str(operations)\n\ninput_str = \"\"\"4\nbbbb\n\"\"\"\noutput = solution(input_str)\nprint(output) "
    },
    {
        "number": 4437,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    \n    if n % 2 != 0:\n        return \"Error: n must be an even number\"\n    \n    operations = 0\n    for i in range(1, n, 2):\n        prefix = s[:i]\n        if prefix.count('a') == prefix.count('b'):\n            continue\n        else:\n            operations += 1\n            if s[i-1] == 'a':\n                s = s[:i-1] + 'b' + s[i:]\n            else:\n                s = s[:i-1] + 'a' + s[i:]\n                \n    return str(operations) + '\\n' + s"
    },
    {
        "number": 4437,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n\n    min_operations = 0\n    for i in range(2, n + 1, 2):\n        a_count = s[:i].count('a')\n        b_count = s[:i].count('b')\n\n        if a_count < b_count:\n            min_operations += b_count - a_count\n        elif b_count < a_count:\n            min_operations += a_count - b_count\n\n    return str(min_operations) + '\\n' + s\n\ninput_data = '''\n4\nbbbb\n'''\n\noutput = solution(input_data)\nprint(output) "
    },
    {
        "number": 4437,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    if n % 2 != 0:\n        raise ValueError(\"String length should be even.\")\n\n    count_a = s.count('a')\n    count_b = s.count('b')\n\n    if count_a == count_b:\n        return f\"{0}\\n{s}\"\n\n    operations = abs(count_a - count_b)\n    prefix = \"\"\n\n    for i in range(operations):\n        if count_a > count_b:\n            prefix += 'b'\n            count_b += 1\n        else:\n            prefix += 'a'\n            count_a += 1\n\n    return f\"{operations}\\n{prefix + s}\"\n"
    },
    {
        "number": 4438,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    points = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n\n    points.sort(key=lambda p: max(p[0], p[1]))\n\n    def distance(p1, p2):\n        return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])\n\n    total_distance = 0\n    current_point = (0, 0)\n\n    for i in range(n):\n        p = points[i]\n        p_distance = distance(current_point, p)\n        current_point = p\n        total_distance += p_distance\n\n    return str(total_distance)\n\ninput_str = \"\"\"8\n2 2\n1 4\n2 3\n3 1\n3 4\n1 1\n4 3\n1 2\n\"\"\"\nprint(solution(input_str))\n\ninput_str = \"\"\"5\n2 1\n1 0\n2 0\n3 2\n0 3\n\"\"\"\nprint(solution(input_str)) "
    },
    {
        "number": 4438,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def find_distance(point1, point2):\n        x1, y1 = point1\n        x2, y2 = point2\n        return abs(x1 - x2) + abs(y1 - y2)\n\n    def find_level(point):\n        x, y = point\n        return max(x, y)\n\n    def find_nearest_key_points(key_points, current_point, level):\n        nearest_points = []\n        for key_point in key_points:\n            if find_level(key_point) == level:\n                distance = find_distance(current_point, key_point)\n                nearest_points.append((key_point, distance))\n        return nearest_points\n\n    def visit_points(key_points, current_point, visited_points, visited_levels):\n        if not key_points:\n            return 0\n\n        visited_points.add(current_point)\n        visited_levels.add(find_level(current_point))\n\n        nearest_points = find_nearest_key_points(key_points, current_point, min(visited_levels))\n        nearest_points = sorted(nearest_points, key=lambda x: x[1])\n\n        min_distance = float('inf')\n        for nearest_point, distance in nearest_points:\n            if nearest_point not in visited_points:\n                min_distance = min(min_distance, distance + visit_points(key_points, nearest_point, visited_points, visited_levels))\n\n        return min_distance\n\n    n = int(stdin.readline())\n    key_points = []\n    for _ in range(n):\n        x, y = map(int, stdin.readline().split())\n        key_points.append((x, y))\n\n    start_point = (0, 0)\n    key_points = [key_point for key_point in key_points if key_point != start_point]\n\n    return visit_points(key_points, start_point, set(), set())"
    },
    {
        "number": 4438,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    key_points = [(int(line.split(' ')[0]), int(line.split(' ')[1])) for line in stdin.split('\\n')[1:n+1]]\n    \n    def distance(p1, p2):\n        return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])\n    \n    def level(point):\n        return max(point)\n    \n    def adjacent_points(point):\n        return [(point[0]+1, point[1]), (point[0]-1, point[1]), (point[0], point[1]+1), (point[0], point[1]-1)]\n    \n    key_points = sorted(key_points, key=lambda x: level(x))\n    \n    min_distance = 0\n    visited_points = set()\n    current_point = key_points[0]\n    visited_points.add(current_point)\n    \n    for i in range(1, len(key_points)):\n        next_level = level(key_points[i])\n        if next_level == level(current_point):\n            continue\n        \n        min_distance += distance(current_point, key_points[i])\n        current_point = key_points[i]\n        visited_points.add(current_point)\n        \n        next_points = [p for p in adjacent_points(current_point) if p not in visited_points]\n        min_distance += min([distance(current_point, p) for p in next_points])\n        current_point = next_points[next_points.index(min(next_points, key=lambda x: distance(current_point, x)))]\n        visited_points.add(current_point)\n    \n    return str(min_distance)\n"
    },
    {
        "number": 4438,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    key_points = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().strip().split())\n        key_points.append((x, y))\n\n    key_points.sort(key=lambda p: max(p[0], p[1]))\n\n    def distance(p1, p2):\n        return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])\n\n    def dfs(current_point, visited_points, total_distance, min_distance):\n        if total_distance >= min_distance:\n            return total_distance\n        visited_points.add(current_point)\n        next_level_points = [p for p in key_points if max(p[0], p[1]) == max(current_point[0], current_point[1]) + 1]\n        min_next_distance = float('inf')\n        for next_point in next_level_points:\n            if next_point not in visited_points:\n                next_distance = total_distance + distance(current_point, next_point)\n                min_next_distance = min(min_next_distance, dfs(next_point, visited_points, next_distance, min_distance))\n        visited_points.remove(current_point)\n        return min_next_distance\n\n    min_distance = float('inf')\n    for start_point in key_points:\n        visited_points = set()\n        min_distance = min(min_distance, dfs(start_point, visited_points, 0, min_distance))\n\n    return str(min_distance)"
    },
    {
        "number": 4438,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    key_points = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n\n    def adjacent_points(point):\n        return [(point[0] + 1, point[1]), (point[0] - 1, point[1]), (point[0], point[1] + 1), (point[0], point[1] - 1)]\n\n    def key_points_by_level(key_points):\n        levels = {}\n        for point in key_points:\n            level = max(point)\n            if level not in levels:\n                levels[level] = []\n            levels[level].append(point)\n        return levels\n\n    def distance(point1, point2):\n        return abs(point1[0] - point2[0]) + abs(point1[1] - point2[1])\n\n    def visit_key_points(key_points, start_point):\n        visited = set()\n        queue = [start_point]\n        total_distance = 0\n\n        while queue:\n            current_point = queue.pop(0)\n            if current_point not in visited:\n                visited.add(current_point)\n                for adjacent_point in adjacent_points(current_point):\n                    if adjacent_point in key_points:\n                        if adjacent_point not in visited:\n                            queue.append(adjacent_point)\n                            total_distance += distance(current_point, adjacent_point)\n                    else:\n                        total_distance += distance(current_point, adjacent_point)\n\n        return total_distance\n\n    key_points.remove((0, 0))\n    levels = key_points_by_level(key_points)\n    min_distance = float('inf')\n\n    for level in sorted(levels.keys()):\n        for start_point in levels[level]:\n            total_distance = visit_key_points(key_points, start_point)\n            min_distance = min(min_distance, total_distance)\n\n    return str(min_distance)"
    },
    {
        "number": 4438,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    key_points = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    \n    # Sort key points by level\n    level_key_points = {}\n    for i, key_point in enumerate(key_points):\n        level = max(key_point)\n        if level not in level_key_points:\n            level_key_points[level] = [i]\n        else:\n            level_key_points[level].append(i)\n    \n    # Calculate the minimum distance\n    min_distance = 0\n    for level in sorted(level_key_points.keys()):\n        key_points_level = [key_points[i] for i in level_key_points[level]]\n        min_distance += calculate_min_distance(key_points_level)\n    \n    return str(min_distance)\n\ndef"
    },
    {
        "number": 4438,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin.readline())\n    key_points = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().split())\n        key_points.append((x, y))\n\n    # Sort key points by level\n    key_points.sort(key=lambda p: max(p[0], p[1]))\n\n    # Initialize variables\n    total_distance = 0\n    visited = {key_points[0]: True}\n\n    # Calculate total distance\n    for i in range(1, len(key_points)):\n        point = key_points[i]\n\n        # Find closest visited point\n        closest_distance = float('inf')\n        closest_point = None\n        for visited_point in visited:\n            distance = abs(point[0] - visited_point[0]) + abs(point[1] - visited_point[1])\n            if distance < closest_distance:\n                closest_distance = distance\n                closest_point = visited_point\n\n        # Update total distance and visited points\n        total_distance += closest_distance\n        visited[point] = True\n\n    return str(total_distance)"
    },
    {
        "number": 4438,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def distance(point1, point2):\n        return abs(point1[0] - point2[0]) + abs(point1[1] - point2[1])\n\n    def level(point):\n        return max(point[0], point[1])\n\n    def find_answers(points, level_points, current_level, current_point, answer):\n        if current_level == len(level_points):\n            answer.append(current_point)\n            return True\n\n        max_dist = -1\n        next_point = None\n        for next_point_candidate in level_points[current_level]:\n            dist = distance(current_point, next_point_candidate)\n            if dist > max_dist:\n                max_dist = dist\n                next_point = next_point_candidate\n\n        if find_answers(points, level_points, current_level + 1, next_point, answer):\n            answer.append(current_point)\n            return True\n        return False\n\n    def init_level_points(points):\n        level_points = [[] for _ in range(max(map(level, points)) + 1)]\n        for point in points:\n            level_points[level(point)].append(point)\n        return level_points\n\n    points = []\n    for line in stdin.splitlines():\n        x, y = map(int, line.split())\n        points.append((x, y))\n\n    level_points = init_level_points(points)\n    answer = []\n    find_answers(points, level_points, 0, level_points[0][0], answer)\n    return str(sum(distance(answer[i], answer[i + 1]) for i in range(len(answer) - 1)))\n\n\ninput_data = \"\"\"8\n2 2\n1 4\n2 3\n3 1\n3 4\n1 1\n4 3\n1 2\n\"\"\"\nprint(solution(input_data)) "
    },
    {
        "number": 4438,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    points = []\n    for i in range(1, n+1):\n        x, y = map(int, lines[i].split())\n        points.append((x, y))\n    \n    max_x = max(points, key=lambda x: x[0])[0]\n    max_y = max(points, key=lambda x: x[1])[1]\n    levels = []\n    for i in range(1, max_x+1):\n        levels.append([])\n        for j in range(1, max_y+1):\n            levels[-1].append([])\n    \n    for point in points:\n        levels[point[0]-1][point[1]-1].append(point)\n    \n    total_distance = 0\n    current_level = 0\n    current_point = (0, 0)\n    visited = set()\n    \n    while current_level <= max_x:\n        for i in range(current_level+1, max_x+1):\n            for j in range(1, max_y+1):\n                for point in levels[i][j]:\n                    total_distance += abs(point[0]-current_point[0]) + abs(point[1]-current_point[1])\n                    current_point = point\n                    visited.add(point)\n        \n        current_level += 1\n    \n    return str(total_distance)"
    },
    {
        "number": 4438,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    key_points = []\n    for _ in range(n):\n        x, y = map(int, stdin.split()[1:])\n        key_points.append((x, y))\n\n    level_points = {1: [(0, 0)]}\n    for i in range(2, max(max(x) for x, y in key_points) + 1):\n        level_points[i] = [p for p in key_points if max(p) == i]\n\n    total_distance = 0\n    current_level = 1\n    while level_points[current_level]:\n        min_distance = float('inf')\n        next_point = None\n        for point in level_points[current_level]:\n            distance = abs(point[0] - 0) + abs(point[1] - 0)\n            if distance < min_distance:\n                min_distance = distance\n                next_point = point\n        total_distance += min_distance\n        current_level += 1\n        level_points[current_level].remove(next_point)\n\n    return str(total_distance)"
    },
    {
        "number": 4439,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split()]\n    if A == 1 and B == 2:\n        return \"3\"\n    elif A == 2 and B == 3:\n        return \"1\"\n    elif A == 3 and B == 1:\n        return \"2\"\n    else:\n        return \"Error: Invalid input\""
    },
    {
        "number": 4439,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    wrong_choices = set(stdin.split())\n    correct_choice = list(set(range(1, 4)) - wrong_choices)[0]\n    return str(correct_choice)"
    },
    {
        "number": 4439,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function takes the input from the standard input as a string and returns the correct choice for the given problem.\n\n    Args:\n    stdin (str): Input from the standard input in the format \"A\\nB\".\n\n    Returns:\n    str: The correct choice for the given problem.\n    \"\"\"\n    # Split the input into two lines, A and B\n    lines = stdin.split('\\n')\n    A = int(lines[0])\n    B = int(lines[1])\n\n    # Find the correct choice\n    correct_choice = 6 - A - B\n\n    return str(correct_choice)"
    },
    {
        "number": 4439,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str((set([1, 2, 3]) - set([A, B])).pop())"
    },
    {
        "number": 4439,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    for i in range(1, 4):\n        if i != int(a) and i != int(b):\n            return str(i)"
    },
    {
        "number": 4439,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    choices = [1, 2, 3]\n    a, b = map(int, stdin.split())\n    \n    correct_choice = [choice for choice in choices if choice not in [a, b]]\n    return str(correct_choice[0])"
    },
    {
        "number": 4439,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    choices = {1, 2, 3} - {A, B}\n    return str(choices.pop())"
    },
    {
        "number": 4439,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str((set(range(1, 4)) - set([A, B])).pop())"
    },
    {
        "number": 4439,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == 1:\n        if B == 2:\n            return \"3\"\n        else:\n            return \"2\"\n    else:\n        if B == 2:\n            return \"1\"\n        else:\n            return \"2\""
    },
    {
        "number": 4439,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    options = set(range(1, 4)) - {a, b}\n    return str(options.pop())"
    },
    {
        "number": 4440,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L = int(stdin)\n    max_volume = 0\n    for a in range(1, L//2 + 1):\n        b = (L**2 - 2*L*a) / (2 * (L - a))\n        if b <= a:\n            break\n        volume = a * b * (L - a - b)\n        if volume > max_volume:\n            max_volume = volume\n    return format(max_volume, '.12f')"
    },
    {
        "number": 4440,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    L = int(stdin)\n    max_volume = 0\n    for a in range(1, L):\n        for b in range(1, L):\n            c = L - a - b\n            volume = a * b * c\n            if volume > max_volume:\n                max_volume = volume\n    return format(max_volume, \".10f\")\n\ndef"
    },
    {
        "number": 4440,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    L = int(stdin)\n    max_volume = 0\n\n    for a in range(1, L // 2 + 1):\n        for b in range(1, L // 2 + 1):\n            c = L - a - b\n            if c > 0 and a + b + c == L:\n                volume = a * b * c\n                max_volume = max(max_volume, volume)\n\n    return \"{:.6f}\".format(max_volume)\n\ndef"
    },
    {
        "number": 4440,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    L = int(stdin.strip())\n    max_volume = 0\n    for a in range(1, L):\n        for b in range(1, L - a):\n            c = L - a - b\n            volume = a * b * c\n            if volume > max_volume:\n                max_volume = volume\n    return f\"{max_volume:.6f}\""
    },
    {
        "number": 4440,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    L = int(stdin)\n\n    # Calculate the maximum possible volume\n    max_volume = (L**3) / (24 * (L - 2) * (L - 3))\n\n    # Return the result\n    return f\"{max_volume:.6f}\""
    },
    {
        "number": 4440,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    L = int(stdin)\n    if L == 1:\n        return \"{:.6f}\".format(1)\n    elif L == 2:\n        return \"{:.6f}\".format(1)\n    else:\n        max_volume = 0\n        for a in range(1, L // 2 + 1):\n            for b in range(1, L // 2 + 1):\n                c = L - a - b\n                volume = a * b * c\n                if volume > max_volume:\n                    max_volume = volume\n        return \"{:.6f}\".format(max_volume)"
    },
    {
        "number": 4440,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    L = int(stdin)\n    if L <= 0:\n        return \"Invalid input\"\n    elif L == 1:\n        return \"1.00000000000\"\n    else:\n        max_vol = 0\n        for i in range(1, L//2 + 1):\n            for j in range(i, L//2 + 1):\n                if i + j <= L:\n                    k = L - i - j\n                    vol = i * j * k\n                    if vol > max_vol:\n                        max_vol = vol\n        return f\"{max_vol:.10f}\""
    },
    {
        "number": 4440,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    L = int(stdin.strip())\n    max_volume = 0\n    for a in range(1, L//2 + 1):\n        for b in range(a, L//2 + 1):\n            c = L - a - b\n            if a * b * c <= L and a + b + c == L:\n                volume = a * b * c\n                if volume > max_volume:\n                    max_volume = volume\n    return f\"{max_volume:.6f}\""
    },
    {
        "number": 4440,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    L = int(stdin)\n    \n    max_volume = 0\n    for a in range(1, L):\n        for b in range(1, L):\n            c = L - a - b\n            if c > 0:\n                volume = a * b * c\n                if volume > max_volume:\n                    max_volume = volume\n                    \n    return f\"{max_volume:.6f}\""
    },
    {
        "number": 4440,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    L = int(stdin)\n    volume = 0\n    for a in range(1, L//2 + 1):\n        for b in range(a, (L-a)//2 + 1):\n            c = L - a - b\n            if c < b:\n                break\n            current_volume = a * b * c\n            if current_volume > volume:\n                volume = current_volume\n    return f\"{volume:.6f}\""
    },
    {
        "number": 4441,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    if len(input_list) == 1:\n        return \"Hello World\"\n    else:\n        return str(int(input_list[1]) + int(input_list[2]))"
    },
    {
        "number": 4441,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    if len(lines) == 1:\n        N = int(lines[0])\n        if N == 1:\n            return \"Hello World\"\n        elif N == 2:\n            A, B = map(int, input().split())\n            return str(A + B)\n    else:\n        N, A, B = map(int, lines)\n        return str(A + B)\n\ndef"
    },
    {
        "number": 4441,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = stdin.split()\n    n = int(n)\n    a = int(a)\n    b = int(b)\n\n    if n == 1:\n        return \"Hello World\"\n    elif n == 2:\n        return str(a + b)\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 4441,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    if len(lines) == 1:\n        return \"Hello World\"\n    else:\n        A = int(lines[1])\n        B = int(lines[2])\n        return str(A + B)"
    },
    {
        "number": 4441,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    \n    if n == 1:\n        return \"Hello World\"\n    elif n == 2:\n        a, b = map(int, input().split())\n        return str(a + b)\n    else:\n        return \"Invalid input\"\n    \n"
    },
    {
        "number": 4441,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    \n    if n == 1:\n        return \"Hello World\"\n    else:\n        a = int(lines[1])\n        b = int(lines[2])\n        return str(a + b)\n    \n"
    },
    {
        "number": 4441,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    \n    if N == 1:\n        return \"Hello World\"\n    elif N == 2:\n        A = int(lines[1])\n        B = int(lines[2])\n        return str(A + B)"
    },
    {
        "number": 4441,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split()\n    N = int(lines[0])\n\n    if N == 1:\n        return \"Hello World\"\n    else:\n        A = int(lines[1])\n        B = int(lines[2])\n        return str(A + B)"
    },
    {
        "number": 4441,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    n = int(input_list[0])\n    if n == 1:\n        return \"Hello World\"\n    else:\n        a = int(input_list[1])\n        b = int(input_list[2])\n        return str(a + b)"
    },
    {
        "number": 4441,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    age, *inputs = stdin.split()\n    age = int(age)\n\n    if age == 1:\n        return \"Hello World\"\n    elif age == 2:\n        a, b = map(int, inputs)\n        return f\"{a + b}\"\n    else:\n        raise ValueError(\"Invalid age\")"
    },
    {
        "number": 4442,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a < b:\n        return a * b\n    else:\n        return b * a"
    },
    {
        "number": 4442,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n\n    a_string = a * str(a)\n    b_string = b * str(b)\n\n    if a_string < b_string:\n        return a_string\n    else:\n        return b_string\n\ndef"
    },
    {
        "number": 4442,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a * 10 + b < b * 10 + a:\n        return a * b\n    else:\n        return b * a"
    },
    {
        "number": 4442,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a < b:\n        return a * b\n    else:\n        return b * a"
    },
    {
        "number": 4442,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    s1 = a * b\n    s2 = b * a\n    \n    if s1 < s2:\n        return s1\n    else:\n        return s2"
    },
    {
        "number": 4442,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    a_str = str(a) * b\n    b_str = str(b) * a\n    \n    if a_str < b_str:\n        return a_str\n    elif b_str < a_str:\n        return b_str\n    else:\n        return a_str\n    \n"
    },
    {
        "number": 4442,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    s1 = a * b\n    s2 = b * a\n\n    if s1 < s2:\n        return s1\n    else:\n        return s2"
    },
    {
        "number": 4442,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    string_a = str(a) * b\n    string_b = str(b) * a\n    return min(string_a, string_b)"
    },
    {
        "number": 4442,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if \"\".join(a * b for _ in range(b)) < \"\".join(b * a for _ in range(a)):\n        return \"\".join(a * b for _ in range(b))\n    else:\n        return \"\".join(b * a for _ in range(a))"
    },
    {
        "number": 4442,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    string1 = str(a) * b\n    string2 = str(b) * a\n    \n    if string1 < string2:\n        return string1\n    else:\n        return string2\n    \n"
    },
    {
        "number": 4443,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == 'c':\n        return 'd'\n    elif stdin == 'z':\n        return None\n    else:\n        return chr(ord(stdin) + 1)"
    },
    {
        "number": 4443,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == 'c':\n        return 'd'\n    elif stdin == 'z':\n        raise ValueError(\"Invalid input. C must be a lowercase English letter that is not z.\")\n    else:\n        return chr(ord(stdin)+1)"
    },
    {
        "number": 4443,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    index = alphabet.index(stdin.lower())\n    next_letter = alphabet[index+1]\n    return next_letter.upper() if stdin.isupper() else next_letter"
    },
    {
        "number": 4443,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == 'z':\n        return \"Invalid input\"\n\n    if ord(stdin) < ord('a') or ord(stdin) > ord('y'):\n        return \"Invalid input\"\n\n    return chr(ord(stdin) + 1)"
    },
    {
        "number": 4443,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == \"c\":\n        return \"d\"\n    elif stdin == \"z\":\n        return \"a\"\n    else:\n        return chr(ord(stdin)+1)"
    },
    {
        "number": 4443,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    c = stdin.strip()\n    return chr(ord(c) + 1)"
    },
    {
        "number": 4443,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == 'c':\n        return 'd'\n    elif stdin == 'z':\n        return 'a'\n    else:\n        return chr(ord(stdin) + 1)"
    },
    {
        "number": 4443,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    if stdin != \"z\":\n        return chr(ord(stdin) + 1)\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 4443,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == 'z':\n        return \"Invalid input\"\n    else:\n        return chr(ord(stdin) + 1)"
    },
    {
        "number": 4443,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == 'z':\n        return 'a'\n    else:\n        return chr(ord(stdin) + 1)"
    },
    {
        "number": 4444,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    return s + t"
    },
    {
        "number": 4444,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    return T + S"
    },
    {
        "number": 4444,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    result = T + S\n    return result"
    },
    {
        "number": 4444,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    return T + S"
    },
    {
        "number": 4444,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    result = t + s\n    return result"
    },
    {
        "number": 4444,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    return T + S"
    },
    {
        "number": 4444,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    return T + S"
    },
    {
        "number": 4444,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    return T + S"
    },
    {
        "number": 4444,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    return T + S"
    },
    {
        "number": 4444,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    return T + S"
    },
    {
        "number": 4445,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input().strip())\n    a = list(map(int, input().split()))\n    a.sort()\n    \n    even_sum = 0\n    odd_sum = 0\n    \n    for i in range(n):\n        if i % 2 == 0:\n            even_sum += a[i]\n        else:\n            odd_sum += a[i]\n    \n    return str(min(even_sum, odd_sum))\n\nprint(solution(stdin)) "
    },
    {
        "number": 4445,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    # Initialize variables\n    sum_of_non_deleted_elements = sum(a)\n    last_deleted_element_parity = None\n\n    # Iterate through the array\n    for i in range(n):\n        # Check if the current element should be deleted\n        if last_deleted_element_parity is None or last_deleted_element_parity != a[i] % 2:\n            # Delete the current element\n            sum_of_non_deleted_elements -= a[i]\n            last_deleted_element_parity = a[i] % 2\n        else:\n            # The current element should not be deleted\n            pass\n\n    # Return the result\n    return str(sum_of_non_deleted_elements)"
    },
    {
        "number": 4445,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid_move(a, i, prev_parity):\n        parity = i % 2\n        return (a[i] % 2 != prev_parity) if prev_parity is not None else True\n\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    prev_parity = None\n    min_sum = sum(a)\n\n    for i in range(n):\n        if is_valid_move(a, i, prev_parity):\n            prev_parity = a[i] % 2\n            min_sum -= a[i]\n            a.pop(i)\n            n -= 1\n        else:\n            break\n\n    return str(min_sum)"
    },
    {
        "number": 4445,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    # Initialize the sum of non-deleted elements as the sum of all elements\n    non_deleted_sum = sum(a)\n    \n    # Loop through the array, removing elements based on the given rules\n    for i in range(len(a)):\n        # If it is the first move, choose any element and delete it\n        if i == 0:\n            non_deleted_sum -= a.pop(0)\n        # Otherwise, alternate between even and odd parity\n        else:\n            # If the last deleted element was odd, choose any even element and delete it\n            if a[i - 1] % 2 != 0:\n                for j in range(len(a)):\n                    if a[j] % 2 == 0:\n                        non_deleted_sum -= a.pop(j)\n                        break\n            # If the last deleted element was even, choose any odd element and delete it\n            else:\n                for j in range(len(a)):\n                    if a[j] % 2 != 0:\n                        non_deleted_sum -= a.pop(j)\n                        break\n    \n    # Return the minimum possible sum of non-deleted elements\n    return str(non_deleted_sum)"
    },
    {
        "number": 4445,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split('\\n')\n    n = int(input_lines[0])\n    a = list(map(int, input_lines[1].split()))\n\n    if n == 1:\n        return '0'\n\n    parity = 1\n    removed = set()\n    for i in range(n):\n        if a[i] % 2 == parity:\n            removed.add(a[i])\n            parity = 1 - parity\n        elif i == n - 1:\n            return str(sum(removed))"
    },
    {
        "number": 4445,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a = stdin.split('\\n')\n    n = int(n)\n    a = [int(x) for x in a.split()]\n\n    parity = [0] * n\n    parity[0] = 1 if a[0] % 2 == 0 else 0\n    for i in range(1, n):\n        parity[i] = (parity[i - 1] + 1) % 2\n\n    min_sum = sum(a)\n    for i in range(n):\n        if parity[i] == (a[0] % 2):\n            min_sum = min_sum - a[i]\n\n    return str(min_sum)"
    },
    {
        "number": 4445,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    parity = -1  # starting with odd parity\n    for i in range(n):\n        if a[i] % 2 == parity:\n            parity = 1 - parity\n        else:\n            return \"0\"\n    return str(sum(a))"
    },
    {
        "number": 4445,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    if n % 2 == 0:\n        parity = \"even\"\n    else:\n        parity = \"odd\"\n    \n    non_deleted = 0\n    \n    for i in range(n):\n        if parity == \"even\" and a[i] % 2 == 0:\n            parity = \"odd\"\n        elif parity == \"odd\" and a[i] % 2 != 0:\n            parity = \"even\"\n        else:\n            non_deleted += a[i]\n    \n    return str(non_deleted)"
    },
    {
        "number": 4445,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    sum_non_deleted = sum(a)\n    parity = 0\n\n    for i in range(n):\n        if a[i] % 2 != parity:\n            sum_non_deleted -= a[i]\n            parity = a[i] % 2\n\n    return str(sum_non_deleted)"
    },
    {
        "number": 4445,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    n = int(stdin.splitlines()[0])\n    a = [int(x) for x in stdin.splitlines()[1].split()]\n\n    # If the array is empty, return 0\n    if n == 0:\n        return \"0\"\n\n    # Initialize the minimum sum and the parity of the first move\n    min_sum = sum(a)\n    parity = a[0] % 2\n\n    # Loop through the array and make moves\n    for i in range(1, n):\n        # If the parity of the current element is the same as the previous move, continue\n        if a[i] % 2 == parity:\n            continue\n        # Otherwise, make a move and update the parity and the minimum sum\n        parity = a[i] % 2\n        min_sum -= min(a)\n\n    return str(min_sum)"
    },
    {
        "number": 4446,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = map(int, stdin.split()[:4])\n    h = list(map(int, stdin.split()[4:]))\n    \n    points = 0\n    for i in range(n):\n        if h[i] <= a:\n            points += 1\n            continue\n        \n        if h[i] <= b:\n            points += 1\n            continue\n        \n        if k > 0:\n            if h[i] - a > b:\n                h[i] -= a\n                k -= 1\n            else:\n                h[i] -= b\n        else:\n            h[i] -= max(a, b)\n    \n    return str(points)"
    },
    {
        "number": 4446,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = map(int, stdin.split()[:4])\n    h = list(map(int, stdin.split()[4:]))\n    points = 0\n    \n    for i in range(n):\n        if h[i] > a:\n            points += 1\n            if k > 0:\n                k -= 1\n            else:\n                break\n        elif h[i] > b:\n            k += 1\n        else:\n            break\n    \n    return str(points)\n"
    },
    {
        "number": 4446,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = map(int, input().split())\n    hp = list(map(int, input().split()))\n    \n    max_points = 0\n    skips = 0\n    \n    for i in range(n):\n        if skips < k:\n            max_points += min(a, hp[i])\n            hp[i] -= min(a, hp[i])\n            skips += 1\n        else:\n            max_points += min(b, hp[i])\n            hp[i] -= min(b, hp[i])\n    \n    return str(max_points)"
    },
    {
        "number": 4446,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = map(int, stdin.readline().strip().split())\n    hp = list(map(int, stdin.readline().strip().split()))\n    result = 0\n    \n    i = 0\n    while i < n:\n        hp[i] -= a\n        if hp[i] > 0:\n            i += 1\n        result += 1\n        if i >= n:\n            break\n        \n        if k > 0:\n            hp[i] -= b\n            if hp[i] > 0:\n                i += 1\n            k -= 1\n            result += 1\n        else:\n            i += 1\n    \n    return str(result)"
    },
    {
        "number": 4446,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = map(int, stdin.split()[0:4])\n    health_points = list(map(int, stdin.split()[4:]))\n    \n    max_points = 0\n    current_points = 0\n    current_monster = 0\n    \n    while current_monster < n:\n        health = health_points[current_monster]\n        \n        if health > 0:\n            if k > 0:\n                health -= b\n                k -= 1\n            else:\n                health -= a\n            if health > 0:\n                current_points += 1\n            current_monster += 1\n        \n        else:\n            current_monster += 1\n        \n        max_points = max(max_points, current_points)\n    \n    return str(max_points)\n"
    },
    {
        "number": 4446,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = map(int, stdin.split()[:4])\n    h = list(map(int, stdin.split()[4:]))\n\n    # Sort the monsters by their health points\n    h.sort(reverse=True)\n\n    points = 0\n    for i in range(n):\n        if h[i] > a + b:\n            points += 1\n        else:\n            break\n\n    return str(points)"
    },
    {
        "number": 4446,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = map(int, stdin.split()[:4])\n    h = list(map(int, stdin.split()[4:]))\n\n    points = 0\n    for i in range(n):\n        if h[i] <= a:\n            points += 1\n        elif h[i] <= a + b:\n            points += 1\n            h[i] -= a + b\n        else:\n            h[i] -= a\n        if h[i] <= 0:\n            points += 1\n            if i == n - 1:\n                break\n            continue\n\n        # Use the secret technique\n        if k > 0:\n            k -= 1\n            points += 1\n            h[i] -= a\n\n    return str(points)"
    },
    {
        "number": 4446,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = map(int, stdin.split()[:4])\n    h = list(map(int, stdin.split()[4:]))\n\n    points = 0\n    for i in range(n):\n        h[i] -= a\n        if h[i] <= 0:\n            points += 1\n            if k > 0:\n                k -= 1\n            elif i < n - 1:\n                return str(points)\n        else:\n            h[i+1] -= b\n            if h[i+1] <= 0:\n                pass\n            else:\n                points += 1\n\n    return str(points)\n"
    },
    {
        "number": 4446,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = map(int, input().split())\n    h = list(map(int, input().split()))\n    max_points = 0\n\n    for i in range(n):\n        h[i] -= a\n        if h[i] <= 0:\n            max_points += 1\n            if i + 1 < n:\n                h[i + 1] -= b\n                if h[i + 1] <= 0:\n                    max_points += 1\n                else:\n                    k -= 1\n                    if k >= 0:\n                        max_points += 1\n                        h[i + 1] -= a\n                        if h[i + 1] <= 0:\n                            max_points += 1\n                    else:\n                        break\n            else:\n                break\n        else:\n            k -= 1\n            if k >= 0:\n                max_points += 1\n                h[i] -= a\n                if h[i] <= 0:\n                    max_points += 1\n                else:\n                    h[i] -= b\n                    if h[i] <= 0:\n                        max_points += 1\n            else:\n                break\n\n    return str(max_points)"
    },
    {
        "number": 4446,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = map(int, stdin.readline().split())\n    h = list(map(int, stdin.readline().split()))\n\n    hp = sum(h)\n    attack_power = min(a, b)\n    opponent_attack_power = max(a, b)\n\n    points = 0\n    for i in range(k):\n        for j in range(i, n, k):\n            h[j] -= attack_power\n            if h[j] <= 0:\n                points += 1\n                h[j] = 0\n            hp -= attack_power\n\n    for j in range(n):\n        if h[j] > 0:\n            h[j] -= opponent_attack_power\n            if h[j] <= 0:\n                points += 1\n                h[j] = 0\n            hp -= opponent_attack_power\n\n    return str(points)"
    },
    {
        "number": 4447,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    array = list(map(int, input().split()))\n\n    def count_remainders(array: list) -> list:\n        counts = [0] * m\n        for num in array:\n            counts[num % m] += 1\n        return counts\n\n    def check_requirement(counts: list) -> bool:\n        for count in counts:\n            if count != n // m:\n                return False\n        return True\n\n    def find_moves(counts: list) -> int:\n        moves = 0\n        for i in range(m):\n            if counts[i] > n // m:\n                moves += counts[i] - n // m\n        return moves\n\n    def min_moves_to_satisfy(counts: list) -> int:\n        min_moves = float('inf')\n        for i in range(m):\n            if counts[i] < n // m:\n                min_moves = min(min_moves, n // m - counts[i])\n        return min_moves\n\n    def find_result_array(array: list, moves: int) -> list:\n        result = [0] * n\n        for i, num in enumerate(array):\n            if num % m == 0:\n                result[i] = num + moves\n            else:\n                result[i] = num + (m - num % m) % m + moves\n        return result\n\n    counts = count_remainders(array)\n    if check_requirement(counts):\n        print(0)\n        print(\" \".join(map(str, array)))\n        return\n\n    moves = find_moves(counts)\n    min_moves = min_moves_to_satisfy(counts)\n    print(moves + min_moves)\n    result_array = find_result_array(array, moves + min_moves)\n    print(\" \".join(map(str, result_array))) "
    },
    {
        "number": 4447,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, input().split()))\n\n    # Calculate the count of elements for each remainder\n    counts = [0] * m\n    for num in a:\n        counts[num % m] += 1\n\n    # Calculate the minimum number of moves required\n    min_moves = sum([abs(counts[i] - n // m) for i in range(m)])\n\n    # Make the array satisfy the condition\n    for i in range(min_moves):\n        for j in range(n):\n            if a[j] % m == i % m:\n                a[j] += i // m\n                break\n\n    return str(min_moves) + \"\\n\" + \" \".join(map(str, a))\n\nstdin = \"6 3\"\nprint(solution(stdin))\n\nstdin = \"4 2\"\nprint(solution(stdin)) "
    },
    {
        "number": 4447,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    count = [0] * m\n    for num in a:\n        count[num % m] += 1\n\n    max_count = n // m\n    min_moves = max_count * m - sum(count)\n\n    if min_moves > 0:\n        for i in range(min_moves):\n            index = count.index(min(count))\n            count[index] += 1\n\n    new_a = []\n    for i in range(m):\n        new_a += [i] * count[i]\n\n    return str(min_moves) + \"\\n\" + \" \".join(map(str, new_a))"
    },
    {
        "number": 4447,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, input().split()))\n\n    def count_remainders(arr: List[int]) -> List[int]:\n        remainder_counts = [0] * m\n        for num in arr:\n            remainder_counts[num % m] += 1\n        return remainder_counts\n\n    def find_min_moves(a: List[int], m: int) -> int:\n        remainder_counts = count_remainders(a)\n        min_moves = 0\n        target_count = n // m\n\n        for i in range(m):\n            min_moves += abs(remainder_counts[i] - target_count)\n\n        return min_moves\n\n    def build_result_array(a: List[int], m: int) -> List[int]:\n        remainder_counts = count_remainders(a)\n        result = []\n\n        for i in range(m):\n            target_count = n // m\n            num_to_add = target_count - remainder_counts[i]\n\n            for j in range(num_to_add):\n                result.append(a[i] + (j + 1) * m)\n\n        return result\n\n    min_moves = find_min_moves(a, m)\n    result_array = build_result_array(a, m)\n\n    return str(min_moves) + \"\\n\" + \" \".join(map(str, result_array))"
    },
    {
        "number": 4447,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    remainder_count = [0] * m\n    for num in a:\n        remainder_count[num % m] += 1\n\n    target_count = n // m\n    difference = [target_count - count for count in remainder_count]\n    min_moves = sum(abs(d) for d in difference) // 2\n\n    if min_moves == 0:\n        return f\"{min_moves}\\n{' '.join(map(str, a))}\"\n\n    result = [num + (min_moves if num % m >= target_count else 0) for num in a]\n    return f\"{min_moves}\\n{' '.join(map(str, result))}\"\n"
    },
    {
        "number": 4447,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))[n:]\n\n    def count_remainders(arr: List[int]) -> List[int]:\n        remainders_count = [0] * m\n        for num in arr:\n            remainders_count[num % m] += 1\n        return remainders_count\n\n    def is_solution(remainders_count: List[int]) -> bool:\n        for count in remainders_count:\n            if count != n // m:\n                return False\n        return True\n\n    def find_moves(arr: List[int], remainders_count: List[int], index: int) -> int:\n        if index == n:\n            if is_solution(remainders_count):\n                return 0\n            return float('inf')\n\n        moves = float('inf')\n        for i in range(m):\n            if remainders_count[i] < n // m:\n                remainders_count[i] += 1\n                moves = min(moves, 1 + find_moves(arr, remainders_count, index + 1))\n                remainders_count[i] -= 1\n\n        return moves\n\n    remainders_count = count_remainders(a)\n    moves = find_moves(a, remainders_count, 0)\n    if moves == float('inf'):\n        return \"Impossible\"\n\n    a = [num + (i % m) for i, num in enumerate(a)]\n    result = \" \".join(map(str, a))\n    return str(moves) + \"\\n\" + result"
    },
    {
        "number": 4447,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, input().split()))\n    \n    c = [0] * m\n    for x in a:\n        c[x % m] += 1\n    target_count = n // m\n    \n    def count_changes(a):\n        c = [0] * m\n        for x in a:\n            c[x % m] += 1\n        return c\n    \n    def min_changes(c, target_c):\n        total_changes = sum(abs(c[i] - target_c[i]) for i in range(m))\n        return total_changes\n    \n    def find_min_changes(a, target_c):\n        c = count_changes(a)\n        if c == target_c:\n            return 0\n        min_changes_count = min_changes(c, target_c)\n        min_changes_list = []\n        for i in range(m):\n            if c[i] > target_c[i]:\n                min_changes_list.append(i)\n        if not min_changes_list:\n            return min_changes_count\n        min_change = min_changes_list.pop()\n        min_move_count = float('inf')\n        for j in range(c[min_change] - target_c[min_change]):\n            new_a = a.copy()\n            index = 0\n            while index < len(new_a):\n                if new_a[index] % m == min_change:\n                    new_a[index] += 1\n                    break\n                index += 1\n            new_c = count_changes(new_a)\n            move_count = min_changes(new_c, target_c)\n            min_move_count = min(min_move_count, move_count)\n        return min_changes_count + min_move_count\n    \n    min_changes_count = find_min_changes(a, [target_count] * m)\n    print(min_changes_count)\n    \n    target_a = [i % m for i in range(n)]\n    min_changes_count = find_min_changes(target_a, [target_count] * m)\n    print(' '.join(map(str, target_a)))\n    \n"
    },
    {
        "number": 4447,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = list(map(int, input().split()))\n    count = [0] * m\n    max_element = max(a)\n\n    # Calculate the counts of remainders\n    for i in a:\n        count[i % m] += 1\n\n    # Calculate the minimum number of moves\n    min_moves = min(m - count[0], count[0] - m // 2)\n    for i in range(1, m):\n        min_moves = min(min_moves, min(m - count[i], count[i] - m // 2))\n\n    # Calculate the resulting array\n    result = [0] * n\n    for i in range(n):\n        if a[i] % m < m // 2:\n            result[i] = a[i] + min_moves\n        else:\n            result[i] = a[i] - min_moves\n\n    # Convert the array to string\n    result_str = ' '.join(map(str, result))\n    return f\"{min_moves}\\n{result_str}\""
    },
    {
        "number": 4447,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    def count_remainders(remainders: List[int]) -> int:\n        count = 0\n        for i in range(n):\n            if a[i] % m == remainders[i]:\n                count += 1\n        return count\n\n    def min_moves(target: int, remainders: List[int]) -> int:\n        current_count = count_remainders(remainders)\n        if current_count == target:\n            return 0\n        if current_count > target:\n            return math.inf\n\n        min_moves = math.inf\n        for i in range(n):\n            if a[i] % m != remainders[i]:\n                remainders[i] = (a[i] % m + m) % m\n                moves = min_moves(target, remainders)\n                if moves != math.inf and moves < min_moves:\n                    min_moves = moves\n                remainders[i] = (a[i] % m - 1 + m) % m\n                moves = min_moves(target, remainders)\n                if moves != math.inf and moves < min_moves:\n                    min_moves = moves\n                remainders[i] = remainders[i] - 1\n\n        return min_moves\n\n    remainders = [a[i] % m for i in range(n)]\n    target = n // m\n    min_moves_count = min_moves(target, remainders)\n\n    if min_moves_count == math.inf:\n        return \"IMPOSSIBLE\"\n\n    for i in range(n):\n        if a[i] % m != remainders[i]:\n            moves = (a[i] % m - remainders[i]) % m\n            for _ in range(moves):\n                a[i] = (a[i] + m) % (m * 2)\n            a[i] = a[i] - (a[i] // (m * 2)) * (m * 2)\n\n    return str(min_moves_count) + \"\\n\" + \" \".join(map(str, a))\n\nimport sys\n\ninput_data = sys.stdin.read()\nresult = solution(input_data)\nprint(result) "
    },
    {
        "number": 4447,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def count_remainders(a, m):\n        remainders = [0] * m\n        for x in a:\n            remainders[x % m] += 1\n        return remainders\n\n    def min_moves(remainders, m):\n        target = n // m\n        current = remainders\n        result = 0\n        for i in range(m):\n            diff = target - current[i]\n            if diff > 0:\n                result += diff\n            current[i] += diff\n        return result\n\n    n, m = map(int, stdin.split())\n    a = list(map(int, input().split()))\n    remainders = count_remainders(a, m)\n    moves = min_moves(remainders, m)\n\n    a_new = [x + remainders[x % m] for x in a]\n\n    return str(moves) + \"\\n\" + \" \".join(map(str, a_new))"
    },
    {
        "number": 4448,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().strip().split())\n    k = list(map(int, stdin.readline().strip().split()))\n    special_offers = []\n    for i in range(m):\n        d, t = map(int, stdin.readline().strip().split())\n        special_offers.append((d, t))\n\n    def cost_function(day):\n        total_cost = 0\n        for offer in special_offers:\n            if offer[0] <= day:\n                total_cost += offer[1] * 1\n            else:\n                total_cost += offer[1] * 2\n        return total_cost\n\n    total_cost = sum(cost_function(day) for day in range(1, max(k) + 1))\n    return str(total_cost) "
    },
    {
        "number": 4448,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, m = map(int, lines[0].split())\n    k = list(map(int, lines[1].split()))\n    special_offers = [tuple(map(int, lines[i+2].split())) for i in range(m)]\n    \n    days = [0] * n\n    for d, t in special_offers:\n        days[t-1] = d\n    \n    total_cost = sum(2 * k[i] if days[i] == 0 else 1 * k[i] for i in range(n))\n    max_days = max(days)\n    \n    if total_cost <= max_days:\n        return str(max_days)\n    else:\n        return str(total_cost)\n\ninput_str = \"\"\"5 6\n1 2 0 2 0\n2 4\n3 3\n1 5\n1 2\n1 5\n2 3\"\"\"\nprint(solution(input_str)) "
    },
    {
        "number": 4448,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    k = list(map(int, stdin.split()[2:2 + n]))\n    special_offers = [list(map(int, stdin.split()[2 + n + i * 2: 2 + n + i * 2 + 2])) for i in range(m)]\n\n    def min_day(remaining_k: List[int], special_offers: List[List[int]]) -> int:\n        min_day = 0\n        current_day = 0\n        remaining_special_offers = special_offers.copy()\n        while remaining_k != [0] * n:\n            current_day += 1\n            for i, k_i in enumerate(remaining_k):\n                if k_i == 0:\n                    continue\n                on_sale = False\n                for d, t in remaining_special_offers:\n                    if d == current_day and t == i:\n                        on_sale = True\n                        break\n                price = 2 - int(on_sale)\n                if k_i >= price:\n                    remaining_k[i] -= price\n                    remaining_k[i] = max(0, remaining_k[i])\n            remaining_special_offers = [offer for offer in remaining_special_offers if offer[0] > current_day]\n        return current_day\n\n    return str(min_day(k, special_offers))"
    },
    {
        "number": 4448,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    n, m = map(int, lines[0].split())\n    k = list(map(int, lines[1].split()))\n    special_offers = []\n    for i in range(2, 2 + m):\n        d, t = map(int, lines[i].split())\n        special_offers.append((d, t))\n\n    def min_days(k: List[int], special_offers: List[Tuple[int, int]]) -> int:\n        special_offers.sort(key=lambda x: x[0])\n        max_days = 1001\n        for day in range(1, max_days):\n            if day in [offer[0] for offer in special_offers]:\n                i = [offer[0] for offer in special_offers].index(day)\n                for j in range(n):\n                    if j != special_offers[i][1]:\n                        k[j] -= 1\n\n            if all(item == 0 for item in k):\n                return day\n        return -1\n\n    return str(min_days(k, special_offers))"
    },
    {
        "number": 4448,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    k = list(map(int, stdin.readline().split()))\n    offers = []\n    for _ in range(m):\n        d, t = map(int, stdin.readline().split())\n        offers.append((d, t))\n    \n    # Sort offers by day\n    offers.sort(key=lambda x: x[0])\n    \n    # Initialize the total number of microtransactions to purchase\n    total_to_purchase = sum(k)\n    \n    # Initialize the current day and number of microtransactions purchased so far\n    current_day = 1\n    current_purchased = 0\n    \n    # Iterate through the offers and purchase the microtransactions on sale\n    for offer in offers:\n        # Check if the current day is within the offer date range\n        if current_day <= offer[0]:\n            # Calculate the number of microtransactions to purchase within the offer date range\n            to_purchase = min(k[offer[1]-1], total_to_purchase - current_purchased)\n            # Update the total number of microtransactions to purchase\n            total_to_purchase -= to_purchase\n            # Update the current day and number of microtransactions purchased so far\n            current_day = offer[0] + 1\n            current_purchased += to_purchase\n            \n            # Check if all microtransactions have been purchased\n            if total_to_purchase == 0:\n                return str(current_day)\n        else:\n            # If the current day is outside the offer date range, purchase the microtransactions normally\n            to_purchase = min(k[offer[1]-1], total_to_purchase - current_purchased)\n            total_to_purchase -= to_purchase\n            current_day += 1\n            current_purchased += to_purchase\n            \n            # Check if all microtransactions have been purchased\n            if total_to_purchase == 0:\n                return str(current_day)\n    \n    # If all microtransactions have not been purchased, return -1\n    return \"Not possible\" "
    },
    {
        "number": 4448,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, input().split()))\n    k = list(map(int, input().split()))\n    offers = []\n    for _ in range(m):\n        d, t = list(map(int, input().split()))\n        offers.append((d, t))\n    \n    # Sort offers by the date\n    offers.sort(key=lambda x: x[0])\n    \n    # Calculate the total cost for each type of microtransactions\n    total_cost = [2] * n\n    for offer in offers:\n        total_cost[offer[1]-1] = 1\n    \n    # Calculate the total burles required for each type of microtransactions\n    total_burles = [k_i * total_cost[i] for i, k_i in enumerate(k)]\n    \n    # Calculate the minimum day required to buy all microtransactions\n    min_day = sum(total_burles)\n    \n    return str(min_day)"
    },
    {
        "number": 4448,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()[:2]))\n    k = list(map(int, stdin.split()[2:2 + n]))\n    offers = []\n    for _ in range(m):\n        d, t = list(map(int, stdin.split()[2 + n + _ * 2:2 + n + _ * 2 + 2]))\n        offers.append((d, t))\n    \n    # Sort offers by day and type\n    offers.sort(key=lambda x: (x[0], x[1]))\n    \n    # Calculate the minimum day when Ivan can order all microtransactions\n    min_day = 0\n    total_k = sum(k)\n    total_cost = 0\n    for offer in offers:\n        d, t = offer\n        total_k[t] -= k[t]\n        if total_k[t] >= 0:\n            total_cost += total_k[t]\n        else:\n            min_day = max(min_day, d)\n            total_k[t] = 0\n    \n    return str(min_day)"
    },
    {
        "number": 4448,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    k = list(map(int, stdin.readline().split()))\n    offers = []\n    for _ in range(m):\n        day, type = map(int, stdin.readline().split())\n        offers.append((day, type))\n\n    offers.sort(key=lambda x: x[0])\n    offers.append((n+1, 0))\n\n    burles = 0\n    i = 0\n    j = 0\n    total = sum(k)\n    min_day = n+1\n\n    while i < n:\n        if k[i] == 0:\n            i += 1\n            continue\n\n        while j < m and offers[j][0] <= i:\n            if offers[j][1] == i+1:\n                k[i] -= 1\n                burles += 1\n                if k[i] == 0:\n                    break\n            j += 1\n\n        if k[i] == 0:\n            i += 1\n            continue\n\n        if burles + k[i] * offers[j][0] >= total:\n            min_day = min(min_day, offers[j-1][0])\n            break\n        else:\n            burles += k[i] * offers[j][0]\n            i += 1\n\n    return str(min_day)\n"
    },
    {
        "number": 4448,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input into lines and convert them to integers\n    n, m = map(int, stdin.split()[0].split())\n    k = list(map(int, stdin.split()[1].split()))\n    offers = []\n    for i in range(m):\n        d, t = map(int, stdin.split()[i + 2].split())\n        offers.append((d, t))\n\n    # Calculate the minimum day when Ivan can order all microtransactions\n    min_day = 1\n    microtransactions_left = k.copy()\n    on_sale = {t: False for t in range(1, n + 1)}\n\n    for day in range(1, 1001):\n        for d, t in offers:\n            if day == d:\n                on_sale[t] = True\n\n        for i in range(1, n + 1):\n            if microtransactions_left[i - 1] > 0:\n                if on_sale[i]:\n                    microtransactions_left[i - 1] -= 1\n                else:\n                    microtransactions_left[i - 1] -= 2\n\n            if sum(microtransactions_left) == 0:\n                return str(day)"
    },
    {
        "number": 4448,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    k = list(map(int, stdin.readline().split()))\n    specials = []\n    for _ in range(m):\n        d, t = map(int, stdin.readline().split())\n        specials.append((d, t))\n    \n    specials.sort(key=lambda x: x[0])\n    \n    day = 1\n    total_k = sum(k)\n    while total_k > 0:\n        for d, t in specials:\n            if d <= day:\n                k[t-1] -= 1\n                total_k -= 1\n        day += 1\n    \n    return str(day)"
    },
    {
        "number": 4449,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    output = []\n    queries = stdin.split(\"\\n\")\n    for i in range(1, int(queries[0]) + 1):\n        n = int(queries[i * 2 - 1])\n        sticks = [int(x) for x in queries[i * 2].split()]\n\n        if len(sticks) != 4 * n:\n            output.append(\"NO\")\n            continue\n\n        sticks.sort()\n        if sticks[0] != 1 or sticks[-1] != 10 ** 4:\n            output.append(\"NO\")\n            continue\n\n        rectangle_area = sticks[-1] * sticks[-2]\n        if rectangle_area == 0:\n            output.append(\"NO\")\n            continue\n\n        rectangle_count = 0\n        for j in range(1, len(sticks) - 1):\n            for k in range(j + 1, len(sticks)):\n                if sticks[k] * sticks[j - 1] == rectangle_area:\n                    rectangle_count += 1\n                    if rectangle_count == n:\n                        output.append(\"YES\")\n                        break\n            if rectangle_count == n:\n                break\n        if rectangle_count != n:\n            output.append(\"NO\")\n\n    return \"\\n\".join(output)\n\n\ndef"
    },
    {
        "number": 4449,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    queries = stdin.split(\"\\n\")\n    result = []\n    \n    for i in range(1, len(queries), 2):\n        n = int(queries[i])\n        sticks = list(map(int, queries[i+1].split()))\n        \n        if len(sticks) != 4 * n:\n            result.append(\"NO\")\n            continue\n        \n        area = sum(sticks) / 4\n        sticks.sort(reverse=True)\n        \n        for _ in range(n):\n            if sticks[0] != sticks[1]:\n                break\n            sticks.pop(0)\n            sticks.pop(0)\n            sticks.append(sticks.pop(0))\n            sticks.append(sticks.pop(0))\n        \n        if sticks[0] != sticks[1]:\n            result.append(\"NO\")\n        else:\n            sticks.pop(0)\n            sticks.pop(0)\n            result.append(\"YES\" if sticks[0] == sticks[1] == area else \"NO\")\n    \n    return \"\\n\".join(result)"
    },
    {
        "number": 4449,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    queries = stdin.split(\"\\n\")\n    results = []\n\n    for query in queries[1:]:\n        if not query:\n            continue\n\n        n = int(query.split()[0])\n        sticks = list(map(int, query.split()[1:]))\n\n        if len(sticks) != 4 * n:\n            results.append(\"NO\")\n            continue\n\n        sticks.sort()\n        areas = []\n\n        for i in range(n):\n            area = (sticks[4 * i] * sticks[4 * i + 3])\n            areas.append(area)\n\n        if len(set(areas)) == 1:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n\n    return \"\\n\".join(results)\n\n\ndef"
    },
    {
        "number": 4449,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split('\\n')[0])\n    result = []\n\n    for _ in range(q):\n        n = int(stdin.split('\\n')[1])\n        sticks = list(map(int, stdin.split('\\n')[2].split()))\n\n        if len(sticks) != 4 * n:\n            result.append(\"NO\")\n            continue\n\n        sticks.sort(reverse=True)\n        rectangle_sides = [sticks.pop() for _ in range(4 * n)]\n        rectangle_sides.sort()\n\n        if sum(rectangle_sides[:4]) != sum(rectangle_sides[4:]):\n            result.append(\"NO\")\n            continue\n\n        area = rectangle_sides[0] * rectangle_sides[1]\n        if all(area == side1 * side2 for side1, side2 in zip(rectangle_sides, rectangle_sides[4:])):\n            result.append(\"YES\")\n        else:\n            result.append(\"NO\")\n\n    return \"\\n\".join(result)"
    },
    {
        "number": 4449,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    queries = stdin.split('\\n')\n    result = []\n\n    for q in range(int(queries[0])):\n        n = int(queries[q * 2 + 1])\n        sticks = list(map(int, queries[q * 2 + 2].split()))\n\n        if len(sticks) != 4 * n:\n            result.append(\"NO\")\n            continue\n\n        sticks.sort()\n        areas = []\n        for i in range(n):\n            area = sticks[i * 4 + 0] * sticks[i * 4 + 1]\n            if area in areas:\n                result.append(\"NO\")\n                break\n            areas.append(area)\n        else:\n            result.append(\"YES\")\n\n    return \"\\n\".join(result)"
    },
    {
        "number": 4449,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Initialize variables\n    result = \"\"\n    queries = stdin.split(\"\\n\")\n    q = int(queries[0])\n\n    # Iterate through each query\n    for i in range(1, q+1):\n        n = int(queries[i*2-1])\n        sticks = [int(x) for x in queries[i*2].split()]\n\n        # Sort the sticks in ascending order\n        sticks.sort()\n\n        # Check if it is possible to create n rectangles with equal area\n        equal_area = True\n        for j in range(n-1):\n            if (sticks[j] * sticks[j+n-1]) != (sticks[j+n] * sticks[j+2*n-1]):\n                equal_area = False\n                break\n\n        # Print the answer to the query\n        if equal_area:\n            result += \"YES\\n\"\n        else:\n            result += \"NO\\n\"\n\n    return result"
    },
    {
        "number": 4449,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    output = \"\"\n    queries = stdin.strip().split(\"\\n\")\n    for query in queries:\n        n = int(query.split()[0])\n        sticks = list(map(int, query.split()[1:]))\n        if len(sticks) != 4 * n:\n            raise ValueError(\"Invalid input\")\n\n        sticks.sort()\n        if n > 1:\n            for i in range(1, n):\n                if sticks[i] * sticks[i - 1] != sticks[i + 3] * sticks[i + 2]:\n                    output += \"NO\\n\"\n                    break\n            else:\n                output += \"YES\\n\"\n        else:\n            output += \"YES\\n\"\n    return output.strip()"
    },
    {
        "number": 4449,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    for _ in range(q):\n        n = int(stdin.readline().strip())\n        sticks = list(map(int, stdin.readline().strip().split()))\n        if len(sticks) != 4*n:\n            return \"NO\"\n        \n        sticks.sort(reverse=True)\n        areas = set()\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    for l in range(k+1, n):\n                        area = sticks[i] * sticks[j]\n                        if area == sticks[k] * sticks[l]:\n                            areas.add(area)\n        \n        if len(areas) == n:\n            print(\"YES\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 4449,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    queries = stdin.split(\"\\n\")\n    result = []\n\n    for query in queries[1:]:\n        if not query:\n            continue\n\n        n = int(query.split()[0])\n        sticks = [int(x) for x in query.split()[1:]]\n\n        if len(sticks) != 4 * n:\n            result.append(\"NO\")\n            continue\n\n        sticks.sort()\n        possible_sides = set()\n\n        for i in range(len(sticks) - 1):\n            for j in range(i + 1, len(sticks)):\n                if sticks[j] - sticks[i] in possible_sides:\n                    result.append(\"YES\")\n                    break\n            else:\n                continue\n            break\n        else:\n            result.append(\"NO\")\n\n    return \"\\n\".join(result)\n\n\nq = int(input())\ninput_data = \"\\n\".join([input() for _ in range(q)])\nprint(solution(input_data)) "
    },
    {
        "number": 4449,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split('\\n')[0])\n    result = []\n    for i in range(q):\n        n = int(stdin.split('\\n')[i*2 + 1])\n        sticks = [int(x) for x in stdin.split('\\n')[i*2 + 2].split()]\n        if len(sticks) != 4*n:\n            result.append(\"NO\")\n        else:\n            sticks.sort()\n            for j in range(len(sticks)-3):\n                for k in range(j+1, len(sticks)-2):\n                    for l in range(k+1, len(sticks)-1):\n                        for m in range(l+1, len(sticks)):\n                            if sticks[l] * sticks[m] == sticks[j] * sticks[k]:\n                                if sum([sticks[j], sticks[k], sticks[l], sticks[m]]) % 4 == 0:\n                                    area = sticks[j] * sticks[k]\n                                    if area == sticks[l] * sticks[m]:\n                                        result.append(\"YES\")\n                                        break\n            else:\n                result.append(\"NO\")\n    return '\\n'.join(result)"
    },
    {
        "number": 4450,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def read_input():\n        n, m, k = map(int, stdin.readline().split())\n        edges = []\n        for _ in range(m):\n            x, y, w = map(int, stdin.readline().split())\n            edges.append((x, y, w))\n        return n, edges, k\n\n    def find_shortest_paths(n: int, edges: list) -> tuple:\n        dist = [[float('inf')] * n for _ in range(n)]\n        for i in range(n):\n            dist[i][i] = 0\n\n        for i in range(n):\n            queue = [(0, i)]\n            visited = set()\n            while queue:\n                d, u = heappop(queue)\n                if u in visited:\n                    continue\n                visited.add(u)\n                for v, w in edges:\n                    if v == u:\n                        if d + w < dist[i][v]:\n                            dist[i][v] = d + w\n                            heappush(queue, (d + w, v))\n\n        return dist\n\n    def find_kth_smallest_shortest_path(dist: list, k: int) -> int:\n        shortest_paths = [dist[i][j] for i in range(len(dist)) for j in range(len(dist)) if i < j]\n        shortest_paths.sort()\n        return shortest_paths[k - 1]\n\n    n, edges, k = read_input()\n    dist = find_shortest_paths(n, edges)\n    result = find_kth_smallest_shortest_path(dist, k)\n    return str(result)"
    },
    {
        "number": 4450,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.readline().split())\n    edges = []\n    for _ in range(m):\n        x, y, w = map(int, stdin.readline().split())\n        edges.append((x, y, w))\n\n    def find_shortest_paths(edges):\n        dist = [[float('inf')] * n for _ in range(n)]\n        for i in range(n):\n            dist[i][i] = 0\n        for x, y, w in edges:\n            dist[x - 1][y - 1] = min(dist[x - 1][y - 1], w)\n        for k in range(n):\n            for i in range(n):\n                for j in range(n):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n        return dist\n\n    shortest_paths = find_shortest_paths(edges)\n    shortest_paths = [shortest_paths[i][j] for i in range(n) for j in range(i + 1, n)]\n    shortest_paths.sort()\n\n    return str(shortest_paths[k - 1])\n\ninput_data = \"\"\"6 10 5\n2 5 1\n5 3 9\n6 2 2\n1 3 1\n5 1 8\n6 5 10\n1 6 5\n6 4 6\n3 6 2\n3 4 5\"\"\"\n\noutput = solution(input_data)\nprint(output) "
    },
    {
        "number": 4450,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[:3])\n    edges = [list(map(int, line.split())) for line in stdin.split(\"\\n\")[1:]]\n    \n    # Initialize a matrix of shortest paths\n    shortest_paths = [[0] * n for _ in range(n)]\n    for i in range(n):\n        shortest_paths[i][i] = 0\n\n    # Floyd-Warshall algorithm to find all shortest paths\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                shortest_paths[i][j] = min(shortest_paths[i][j], shortest_paths[i][k] + shortest_paths[k][j])\n\n    # Find the k-th smallest shortest path\n    shortest_paths_sorted = sorted([shortest_paths[i][j] for i in range(n) for j in range(n) if i < j])\n    k_smallest_path = shortest_paths_sorted[k-1]\n    \n    return str(k_smallest_path)\n"
    },
    {
        "number": 4450,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def read_input(input_data: str) -> tuple:\n        lines = input_data.split(\"\\n\")\n        n, m, k = map(int, lines[0].split())\n        edges = []\n        for i in range(1, m + 1):\n            x, y, w = map(int, lines[i].split())\n            edges.append((x, y, w))\n        return n, m, k, edges\n\n    def build_graph(n: int, edges: list) -> dict:\n        graph = {i: [] for i in range(1, n + 1)}\n        for x, y, w in edges:\n            graph[x].append((y, w))\n            graph[y].append((x, w))\n        return graph\n\n    def dijkstra(graph: dict, start: int) -> list:\n        queue = [(0, start, {})]\n        shortest_paths = [float('inf')] * (len(graph) + 1)\n        shortest_paths[start] = 0\n        while queue:\n            (cost, current, visited) = heapq.heappop(queue)\n            if shortest_paths[current] < cost:\n                continue\n            visited = visited.copy()\n            visited[current] = True\n            for neighbor, weight in graph[current]:\n                if neighbor not in visited:\n                    new_cost = cost + weight\n                    if shortest_paths[neighbor] > new_cost:\n                        shortest_paths[neighbor] = new_cost\n                        heapq.heappush(queue, (new_cost, neighbor, visited))\n        return shortest_paths\n\n    n, m, k, edges = read_input(stdin)\n    graph = build_graph(n, edges)\n    shortest_paths = dijkstra(graph, 1)\n    shortest_paths = [(shortest_paths[i], i) for i in range(1, n + 1)]\n    shortest_paths.sort()\n    kth_smallest = shortest_paths[k - 1][0]\n    return str(kth_smallest)"
    },
    {
        "number": 4450,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def read_input() -> tuple:\n        n, m, k = map(int, input().split())\n        edges = []\n        for _ in range(m):\n            x, y, w = map(int, input().split())\n            edges.append((x, y, w))\n        return n, edges, k\n\n    def create_graph(n: int, edges: list) -> dict:\n        graph = {i: [] for i in range(1, n + 1)}\n        for x, y, w in edges:\n            graph[x].append((y, w))\n            graph[y].append((x, w))\n        return graph\n\n    def dijkstra(graph: dict, start: int) -> list:\n        dist = [float('inf')] * len(graph)\n        dist[start - 1] = 0\n        queue = [(0, start)]\n\n        while queue:\n            d, node = heapq.heappop(queue)\n            if d > dist[node - 1]:\n                continue\n            for neighbor, weight in graph[node]:\n                new_dist = dist[node - 1] + weight\n                if new_dist < dist[neighbor - 1]:\n                    dist[neighbor - 1] = new_dist\n                    heapq.heappush(queue, (new_dist, neighbor))\n\n        return dist\n\n    def kth_smallest(dist: list, k: int) -> int:\n        sorted_dist = sorted(dist[1:])\n        return sorted_dist[k - 1]\n\n    n, edges, k = read_input()\n    graph = create_graph(n, edges)\n    dist = dijkstra(graph, 1)\n    return str(kth_smallest(dist, k))\n\ninput_data = \"\"\"6 10 5\n2 5 1\n5 3 9\n6 2 2\n1 3 1\n5 1 8\n6 5 10\n1 6 5\n6 4 6\n3 6 2\n3 4 5\n\"\"\"\n\nprint(solution(input_data)) # Output: 3\n\ninput_data = \"\"\"7 15 18\n2 6 3\n5 7 4\n6 5 4\n3 6 9\n6 7 7\n1 6 4\n7 1 6\n7 2 1\n4 3 2\n3 2 8\n5 3 6\n2 5 5\n3 7 9\n4 1 8\n2 1 1\n\"\"\"\n\nprint(solution(input_data)) # Output: 9 "
    },
    {
        "number": 4450,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def read_input() -> Tuple[int, int, int, List[Tuple[int, int, int]]]:\n        n, m, k = map(int, stdin.split()[:3])\n        edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:m+1]]\n        return n, m, k, edges\n\n    def build_adj_matrix(n: int, edges: List[Tuple[int, int, int]]) -> List[List[int]]:\n        adj_matrix = [[0] * n for _ in range(n)]\n        for x, y, w in edges:\n            adj_matrix[x-1][y-1] = w\n            adj_matrix[y-1][x-1] = w\n        return adj_matrix\n\n    def floyd_warshall(adj_matrix: List[List[int]]) -> List[List[int]]:\n        n = len(adj_matrix)\n        dist = [[float('inf')] * n for _ in range(n)]\n        for i in range(n):\n            dist[i][i] = 0\n        for x, y, w in adj_matrix:\n            dist[x-1][y-1] = w\n        for k in range(n):\n            for i in range(n):\n                for j in range(n):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n        return dist\n\n    def kth_shortest_path(dist: List[List[int]], k: int) -> int:\n        n = len(dist)\n        shortest_paths = sorted([dist[i][j] for i in range(n) for j in range(n) if i != j])\n        return shortest_paths[k-1]\n\n    n, m, k, edges = read_input()\n    adj_matrix = build_adj_matrix(n, edges)\n    dist = floyd_warshall(adj_matrix)\n    return str(kth_shortest_path(dist, k))\n"
    },
    {
        "number": 4450,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def sort_edges(edges: List[Tuple[int, int, int]]) -> List[Tuple[int, int, int]]:\n        def f(edge: Tuple[int, int, int]) -> Tuple[int, int, int]:\n            return (edge[0], edge[1]) if edge[0] < edge[1] else (edge[1], edge[0])\n        return sorted(edges, key=f)\n\n    def dijkstra(edges: List[Tuple[int, int, int]], start: int) -> List[int]:\n        graph = defaultdict(list)\n        for u, v, w in edges:\n            graph[u].append((v, w))\n            graph[v].append((u, w))\n\n        dist = [inf] * n\n        dist[start] = 0\n        visited = [False] * n\n\n        while len(visited) != n:\n            min_dist = inf\n            min_vertex = -1\n            for i in range(n):\n                if not visited[i]:\n                    if dist[i] < min_dist:\n                        min_dist = dist[i]\n                        min_vertex = i\n            visited[min_vertex] = True\n\n            for neighbor, w in graph[min_vertex]:\n                if not visited[neighbor]:\n                    dist[neighbor] = min(dist[neighbor], dist[min_vertex] + w)\n\n        return dist\n\n    def kth_smallest_shortest_path(edges: List[Tuple[int, int, int]], k: int) -> int:\n        sorted_edges = sort_edges(edges)\n        dp = [[0] * n for _ in range(n)]\n\n        for u, v, w in sorted_edges:\n            dp[u][v] = w\n            dp[v][u] = w\n\n        for i in range(n):\n            dp[i][i] = 0\n\n        for k_prime in range(1, n * (n - 1) // 2 + 1):\n            new_dp = [[inf] * n for _ in range(n)]\n\n            for i in range(n):\n                for j in range(n):\n                    for l in range(n):\n                        new_dp[i][j] = min(new_dp[i][j], dp[i][l] + dp[l][j])\n\n            dp = new_dp\n\n        return sorted(dp[i][j] for i in range(n) for j in range(n) if i != j and dp[i][j] != inf)[k - 1]\n\n    n, m, k = map(int, stdin.split())\n    edges = [tuple(map(int, stdin.split())) for _ in range(m)]\n    inf = float('inf')\n\n    return str(kth_smallest_shortest_path(edges, k))\n\ninput1 = \"6 10 5\\n2 5 1\\n5 3 9\\n6 2 2\\n1 3 1\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\"\nprint(solution(input1)) "
    },
    {
        "number": 4450,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[:3])\n    edges = []\n    for line in stdin.split(\"\\n\")[1:]:\n        if line:\n            x, y, w = map(int, line.split())\n            edges.append((x, y, w))\n\n    def dijkstra(start):\n        dist = [float(\"inf\")] * (n + 1)\n        dist[start] = 0\n        q = [(0, start)]\n        while q:\n            d, u = heapq.heappop(q)\n            if d > dist[u]:\n                continue\n            for v, w in adj[u]:\n                if dist[u] + w < dist[v]:\n                    dist[v] = dist[u] + w\n                    heapq.heappush(q, (dist[v], v))\n        return dist\n\n    adj = [[] for _ in range(n + 1)]\n    for x, y, w in edges:\n        adj[x].append((y, w))\n        adj[y].append((x, w))\n\n    dist = dijkstra(1)\n    shortest_paths = []\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            shortest_paths.append(dist[i] + dist[j])\n    shortest_paths.sort()\n\n    return str(shortest_paths[k - 1])"
    },
    {
        "number": 4450,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()[0:3]))\n    edges = [list(map(int, line.split())) for line in stdin.split(\"\\n\")[1:-1]]\n    d = [[float('inf') for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        d[i][i] = 0\n\n    for _ in range(n):\n        for i in range(n):\n            for j in range(n):\n                if i == j:\n                    continue\n                for edge in edges:\n                    if i == edge[0] - 1 and j == edge[1] - 1:\n                        d[i][j] = min(d[i][j], edge[2])\n                        d[j][i] = min(d[j][i], edge[2])\n                        break\n\n    distances = []\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            distances.append(d[i][j])\n\n    distances.sort()\n    return str(distances[k-1])\n\nstdin = \"\"\nwith open(\"input.txt\", \"r\") as file:\n    stdin = file.read()\n\noutput = solution(stdin)\nwith open(\"output.txt\", \"w\") as file:\n    file.write(output) "
    },
    {
        "number": 4450,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[:3])\n    edges = [list(map(int, line.split())) for line in stdin.split('\\n')[1:1+m]]\n\n    def floyd_warshall(graph):\n        n = len(graph)\n        dist = [[float('inf')] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(n):\n                if i == j:\n                    dist[i][j] = 0\n                elif graph[i][j] != float('inf'):\n                    dist[i][j] = graph[i][j]\n        for k in range(n):\n            for i in range(n):\n                for j in range(n):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n        return dist\n\n    graph = [[float('inf')] * n for _ in range(n)]\n    for x, y, w in edges:\n        graph[x-1][y-1] = w\n        graph[y-1][x-1] = w\n\n    dist = floyd_warshall(graph)\n    paths = []\n    for i in range(n):\n        for j in range(i+1, n):\n            paths.append(dist[i][j])\n    paths.sort()\n\n    return str(paths[k-1])\n"
    },
    {
        "number": 4451,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    skills = list(map(int, stdin.split('\\n')[1].split()))\n    students_per_team = 3\n    \n    def calculate_diversity(team: list) -> int:\n        return max(team) - min(team)\n    \n    def find_best_division(students: list, teams_count: int) -> tuple:\n        best_division = []\n        best_diversity = float('inf')\n        for i in range(1, teams_count + 1):\n            division = [students[j:j + students_per_team] for j in range(0, len(students), students_per_team)]\n            diversity = sum([calculate_diversity(team) for team in division])\n            if diversity < best_diversity:\n                best_division = division\n                best_diversity = diversity\n        return best_division, best_diversity\n    \n    min_diversity = float('inf')\n    best_teams_count = 1\n    for i in range(2, len(skills) // students_per_team + 1):\n        division, diversity = find_best_division(skills, i)\n        if diversity < min_diversity:\n            min_diversity = diversity\n            best_teams_count = i\n    \n    _, diversity = find_best_division(skills, best_teams_count)\n    \n    result = []\n    for team in best_division:\n        result.extend([str(best_teams_count)] * len(team))\n    \n    return f\"{diversity} {best_teams_count}\\n{' '.join(result)}\" "
    },
    {
        "number": 4451,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    a.sort()\n    teams = []\n    result = 0\n\n    for i in range(n):\n        if i < 2 or a[i] != a[i-1]:\n            teams.append([a[i]])\n        else:\n            teams[-1].append(a[i])\n\n    for team in teams:\n        if len(team) < 3:\n            team.append(team[0] - 1)\n        result += team[-1] - team[0]\n\n    return str(result) + '\\n' + ' '.join(map(str, teams))\n"
    },
    {
        "number": 4451,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def diversity(a, k):\n        return max(a[i:i+k]) - min(a[i:i+k])\n\n    def find_division(a):\n        n = len(a)\n        k = 1\n        res = diversity(a, k)\n        while k < n:\n            if diversity(a, k) < res:\n                k += 1\n            else:\n                res = diversity(a, k)\n        return k\n\n    def find_teams(a, k):\n        n = len(a)\n        teams = [[] for _ in range(k)]\n        for i in range(n):\n            teams[i%k].append(i+1)\n        return teams\n\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    k = find_division(a)\n    teams = find_teams(a, k)\n    res = sum([diversity(a, len(team)) for team in teams])\n\n    return f\"{res} {k}\" + \"\\n\" + \" \".join(map(str, sum(teams, []))) "
    },
    {
        "number": 4451,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    students = list(map(int, stdin.split('\\n')[1].split(' ')))\n    \n    def calculate_diversity(team: list) -> int:\n        return max(team) - min(team)\n    \n    def find_minimum_total_diversity(students: list) -> tuple:\n        min_total_diversity = float('inf')\n        best_division = None\n        n_teams = 1\n        \n        while n_teams <= len(students) // 3:\n            current_division = []\n            current_total_diversity = 0\n            remaining_students = students.copy()\n            \n            for _ in range(n_teams):\n                team = []\n                for _ in range(3):\n                    random_student = random.choice(remaining_students)\n                    team.append(random_student)\n                    remaining_students.remove(random_student)\n                current_division.append(team)\n                current_total_diversity += calculate_diversity(team)\n            \n            if current_total_diversity < min_total_diversity:\n                min_total_diversity = current_total_diversity\n                best_division = current_division\n                \n            n_teams += 1\n        \n        return min_total_diversity, best_division\n    \n    min_total_diversity, best_division = find_minimum_total_diversity(students)\n    team_members = [0] * n\n    for team_index, team in enumerate(best_division):\n        for student in team:\n            team_members[student - 1] = team_index + 1\n    \n    return f\"{min_total_diversity} {len(best_division)}\\n{' '.join(map(str, team_members))}\""
    },
    {
        "number": 4451,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    students = list(map(int, stdin.split()[1:]))\n    \n    def diversity(team):\n        return max(team) - min(team)\n    \n    def min_total_diversity(students):\n        students.sort()\n        teams = []\n        for i in range(n):\n            team = [students[i]]\n            for j in range(i+1, n):\n                team.append(students[j])\n                if diversity(team) > 0:\n                    teams.append(team)\n                else:\n                    break\n        return sum(map(diversity, teams))\n    \n    res = float('inf')\n    for i in range(3, n-1):\n        for j in range(i+2, n):\n            a = min_total_diversity(students[:i])\n            b = min_total_diversity(students[i:j])\n            c = min_total_diversity(students[j:])\n            total = a + b + c\n            res = min(res, total)\n    \n    k = 0\n    for i in range(n):\n        if students[i] == res:\n            k += 1\n    \n    teams = []\n    for i in range(n):\n        if students[i] == res:\n            teams.append(k)\n        else:\n            teams.append(1)\n    \n    return str(res) + '\\n' + ' '.join(map(str, teams))"
    },
    {
        "number": 4451,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    def diversity(team):\n        return max(team) - min(team)\n\n    def diversity_sum(divisions):\n        return sum(diversity(team) for team in divisions)\n\n    # find all possible divisions\n    divisions = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                divisions.append([a[i], a[j], a[k]])\n\n    # find the division with the minimum diversity sum\n    min_diversity_sum = float('inf')\n    min_divisions = []\n    for division in divisions:\n        current_diversity_sum = diversity_sum([division])\n        if current_diversity_sum < min_diversity_sum:\n            min_diversity_sum = current_diversity_sum\n            min_divisions = [division]\n        elif current_diversity_sum == min_diversity_sum:\n            min_divisions.append(division)\n\n    # assign students to teams\n    teams = [[] for _ in range(len(min_divisions))]\n    for i in range(n):\n        min_team_index = 0\n        min_diversity = float('inf')\n        for j, division in enumerate(min_divisions):\n            current_diversity = diversity(division)\n            if current_diversity < min_diversity:\n                min_team_index = j\n                min_diversity = current_diversity\n        teams[min_team_index].append(i)\n\n    # print the result\n    result = [len(min_divisions), n]\n    result.extend([i + 1 for team in teams for i in team])\n    return ' '.join(map(str, result))"
    },
    {
        "number": 4451,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    skills = list(map(int, stdin.split('\\n')[1].split()))\n    teams = {}\n    total_diversity = float('inf')\n\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                team = sorted([skills[i], skills[j], skills[k]])\n                diversity = max(team) - min(team)\n                if diversity not in teams:\n                    teams[diversity] = []\n                teams[diversity].append(team)\n                total_diversity = min(total_diversity, diversity)\n\n    teams_count = 0\n    result = []\n    for diversity, teams_list in teams.items():\n        if diversity == total_diversity:\n            for team in teams_list:\n                for i in range(n):\n                    if skills[i] in team:\n                        result.append(teams_count + 1)\n                        break\n                teams_count += 1\n            break\n\n    return f\"{total_diversity} {teams_count}\\n{' '.join(str(i) for i in result)}\""
    },
    {
        "number": 4451,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    skills = list(map(int, stdin.split('\\n')[1].split()))\n    skills.sort()\n    \n    min_diversity = float('inf')\n    min_teams = []\n    \n    for i in range(n - 2):\n        for j in range(i + 2, n):\n            for k in range(j + 2, n + 1):\n                team_skills = skills[i:k]\n                team_diversity = max(team_skills) - min(team_skills)\n                \n                if team_diversity < min_diversity:\n                    min_diversity = team_diversity\n                    min_teams = [i + 1, j + 1, k]\n                    \n    min_teams_count = len(min_teams)\n    \n    result = [min_diversity, min_teams_count] + min_teams\n    \n    return ' '.join(map(str, result))"
    },
    {
        "number": 4451,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    students = list(map(int, stdin.splitlines()[1].split()))\n\n    def diversity(team):\n        return max(team) - min(team)\n\n    def total_diversity(division):\n        return sum(diversity(team) for team in division)\n\n    students.sort()\n\n    for i in range(n - 2, 0, -1):\n        for j in range(i - 1, 0, -1):\n            team1 = students[i] + students[j]\n            team2 = students[i] + students[j + 1]\n            team3 = students[i - 1] + students[j]\n\n            if team1 in students and team2 in students and team3 in students:\n                division = [[team1], [team2], [team3]]\n                diversities = [diversity(team) for team in division]\n                if total_diversity(division) == sum(diversities):\n                    return str(sum(diversities)) + \" \" + str(len(division)) + \"\\n\" + \" \".join(str(students.index(team) + 1) for team in division)\n\n    return \"0 0\\n0 0 0\" "
    },
    {
        "number": 4451,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    import heapq\n\n    n = int(stdin.readline())\n    skills = list(map(int, stdin.readline().split()))\n    students_by_skill = [[] for _ in range(n)]\n\n    for i, skill in enumerate(skills):\n        students_by_skill[skill - 1].append(i)\n\n    min_heap = []\n    team_count = 0\n    team_to_students = {}\n\n    for i in range(n):\n        if len(students_by_skill[i]) < 3:\n            continue\n\n        for j in range(i, n):\n            if len(students_by_skill[j]) < 3:\n                continue\n\n            min_diversity = float('inf')\n            for k in range(j, n):\n                if len(students_by_skill[k]) < 3:\n                    continue\n\n                diversity = max(skills[x] for x in students_by_skill[i]) - min(skills[x] for x in students_by_skill[k])\n                min_diversity = min(min_diversity, diversity)\n\n            heapq.heappush(min_heap, (-min_diversity, i, j, k))\n\n    total_diversity = 0\n    while min_heap:\n        diversity, i, j, k = heapq.heappop(min_heap)\n        diversity = -diversity\n        if (i, j, k) in team_to_students:\n            continue\n\n        team_to_students[(i, j, k)] = True\n        team_count += 1\n        total_diversity += diversity\n\n        if team_count == 2:\n            break\n\n    result = [0] * n\n    for (i, j, k), _ in team_to_students.items():\n        result[i] = 1\n        result[j] = 1\n        result[k] = 1\n\n    return f\"{total_diversity} {team_count}\\n{' '.join(map(str, result))}\" "
    },
    {
        "number": 4452,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    for line in stdin.split(\"\\n\"):\n        if line == \"\":\n            continue\n        n = int(line)\n        summands = []\n        current_sum = 0\n        while n > 0:\n            if n % 10 == 0:\n                current_sum += n % 10\n                n //= 10\n            else:\n                current_sum += n % 10\n                summands.append(current_sum)\n                current_sum = 0\n                n //= 10\n        result.append(f\"{len(summands)}\")\n        for summand in summands:\n            result.append(f\"{summand}\")\n    return \"\\n\".join(result)\n\nt = int(input())\nstdin = \"\"\nfor i in range(t):\n    n = int(input())\n    stdin += f\"{n}\\n\"\nprint(solution(stdin)) "
    },
    {
        "number": 4452,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.split()\n    result = []\n\n    for t in range(int(test_cases[0])):\n        n = int(test_cases[t+1])\n        k = 0\n        terms = []\n\n        # Find the minimum number of summands (addends) and the corresponding terms\n        while n > 0:\n            k += 1\n            d = n % 10\n            n //= 10\n            term = d * (10 ** (k-1))\n            terms.append(str(term))\n\n        result.append(str(k) + \" \" + \" \".join(terms[::-1]))\n\n    return \"\\n\".join(result)\n"
    },
    {
        "number": 4452,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split()\n    t = int(input_data[0])\n    input_data = input_data[1:]\n    results = []\n\n    for n in input_data:\n        n = int(n)\n        k = 1\n        current_sum = 0\n        terms = []\n\n        while current_sum < n:\n            current_term = str(k) * (k - 1) + '1'\n            current_term = int(current_term)\n            terms.append(current_term)\n            current_sum += current_term\n            k += 1\n\n        if current_sum == n:\n            results.append(str(k - 1) + ' ' + ' '.join(map(str, terms)))\n\n    return '\\n'.join(results)"
    },
    {
        "number": 4452,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def is_round(num: int) -> bool:\n        if num < 1 or num > 9:\n            return False\n        return len(str(num)) == len(str(num).lstrip('0'))\n\n    def round_numbers(num: int) -> List[int]:\n        result = []\n        for i in range(1, num + 1):\n            if is_round(i):\n                result.append(i)\n        return result\n\n    def find_summands(num: int, round_numbers: List[int]) -> List[int]:\n        result = []\n        while num > 0:\n            for round_num in round_numbers:\n                if round_num <= num:\n                    result.append(round_num)\n                    num -= round_num\n                    break\n        return result\n\n    def print_answer(num: int, summands: List[int]) -> None:\n        print(len(summands), end=' ')\n        for summand in summands:\n            print(summand, end=' ')\n        print()\n\n    test_cases = int(stdin.readline().strip())\n    for _ in range(test_cases):\n        n = int(stdin.readline().strip())\n        round_nums = round_numbers(n)\n        summands = find_summands(n, round_nums)\n        print_answer(n, summands)"
    },
    {
        "number": 4452,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def is_round(num: int) -> bool:\n        return len(str(num)) > 1 and all(digit == '0' for digit in str(num)[1:])\n\n    def generate_summands(target: int) -> list:\n        summands = []\n        for i in range(1, 10):\n            if target >= i:\n                summands.append(i)\n                target -= i\n        if target > 0:\n            summands.append(target)\n        return summands\n\n    output = \"\"\n    cases = stdin.strip().split(\"\\n\")\n    for case in cases[1:]:\n        n = int(case)\n        if n <= 9:\n            output += f\"1\\n{n}\\n\"\n        else:\n            summands = generate_summands(n)\n            for i in range(len(summands) - 1, 0, -1):\n                if is_round(sum(summands[:i])):\n                    output += f\"{i}\\n\" + \" \".join(map(str, summands[:i])) + \"\\n\"\n                    break\n    return output"
    },
    {
        "number": 4452,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split(\"\\n\")\n    t = int(stdin_list[0])\n    results = []\n    for i in range(1, t+1):\n        n = int(stdin_list[i])\n        round_numbers = [str(x) for x in range(1, 10)]\n        current_sum = 0\n        current_result = []\n        for j in range(len(round_numbers)):\n            current_sum += int(round_numbers[j])\n            current_result.append(round_numbers[j])\n            if current_sum >= n:\n                if current_sum == n:\n                    results.append(str(len(current_result)) + \" \" + \" \".join(current_result))\n                break\n        else:\n            continue\n        break\n    return \"\\n\".join(results)"
    },
    {
        "number": 4452,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    result = []\n    \n    for i in range(1, t+1):\n        n = int(lines[i])\n        k = 1\n        curr_sum = 0\n        ans = []\n        while curr_sum != n:\n            next_num = str(9) * k\n            curr_sum += int(next_num)\n            if curr_sum > n:\n                curr_sum -= int(next_num)\n                break\n            ans.append(next_num)\n            k += 1\n        result.append(str(len(ans)) + ' ' + ' '.join(ans))\n    \n    return '\\n'.join(result)\n\ndef"
    },
    {
        "number": 4452,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def is_round(num: int) -> bool:\n        digits = [int(digit) for digit in str(num)]\n        return all(digit == 0 for digit in digits[1:])\n\n    def find_min_summands(n: int) -> str:\n        result = []\n        for i in range(1, 10):\n            if n < i:\n                break\n            if is_round(i):\n                result.append(str(i))\n                n -= i\n        if n > 0:\n            result.append(str(n))\n        return \" \".join(result)\n\n    t = int(stdin.strip().split()[0])\n    test_cases = stdin.strip().split(\"\\n\")[1:]\n\n    result = []\n    for test_case in test_cases:\n        n = int(test_case.strip())\n        summands = find_min_summands(n)\n        result.append(f\"{len(summands.split())} {summands}\")\n\n    return \"\\n\".join(result)"
    },
    {
        "number": 4452,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_round(n: int) -> bool:\n        while n > 9:\n            if n % 10 != 0:\n                return False\n            n //= 10\n        return n > 0\n\n    def min_summands(n: int, k: int = 0) -> list[int]:\n        if n == 0:\n            return [0] * k if k > 0 else []\n        if n == 1:\n            return [1] + ([0] * (k - 1) if k > 1 else [])\n        if n == 9:\n            return [9] + ([0] * (k - 1) if k > 1 else [])\n        if is_round(n):\n            return [n]\n        for i in range(2, n):\n            if n % i == 0 and is_round(i):\n                return [i] + min_summands(n // i, k - 1)\n        return min_summands(n - 1, k + 1)\n\n    output = []\n    t = int(stdin.strip().split()[0])\n    for n in map(int, stdin.strip().split()[1:]):\n        k, summands = 0, []\n        while n > 0:\n            round_summand = min_summands(n, k)\n            k += len(round_summand)\n            summands.extend(round_summand)\n            n -= sum(round_summand)\n        output.append(f\"{k} {' '.join(map(str, sorted(summands)))}\\n\")\n    return ''.join(output)\n\ninput_string = '''5\n5009\n7\n9876\n10000\n10'''\nprint(solution(input_string)) "
    },
    {
        "number": 4452,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_round(n: int) -> bool:\n        return n % 10 == 0\n\n    def get_rounds(n: int) -> List[int]:\n        rounds = []\n        while n > 0:\n            digit = n % 10\n            if is_round(digit):\n                rounds.append(digit)\n            else:\n                break\n            n //= 10\n        return rounds[::-1]\n\n    def represent_as_sum_of_rounds(n: int) -> Tuple[int, List[int]]:\n        rounds = get_rounds(n)\n        if not rounds:\n            return (1, [n])\n        min_summands = len(rounds)\n        min_terms = [0] * min_summands\n        for i in range(min_summands):\n            min_terms[i] = 10 ** i\n        return (min_summands, min_terms)\n\n    test_cases = stdin.split()\n    output = []\n    for n in test_cases:\n        n = int(n)\n        k, terms = represent_as_sum_of_rounds(n)\n        output.append(f\"{k} {' '.join(map(str, terms))}\")\n    return '\\n'.join(output)"
    },
    {
        "number": 4453,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    import bisect\n    def get_day(p, n, i):\n        for day, pi in enumerate(p):\n            if pi == i:\n                return day + 1\n\n    def get_book_return_day(p, n):\n        p_inv = [0] * (n + 1)\n        for i in range(1, n + 1):\n            p_inv[p[i - 1]] = i\n        book_return_day = [n + 1] * n\n        for i in range(1, n + 1):\n            book_return_day[p_inv[i] - 1] = get_day(p, n, i)\n        return book_return_day\n\n    q = int(stdin.splitlines()[0])\n    result = []\n    for i in range(q):\n        n = int(stdin.splitlines()[1 + i * 2])\n        p = list(map(int, stdin.splitlines()[2 + i * 2].split()))\n        book_return_day = get_book_return_day(p, n)\n        result.append(' '.join(map(str, book_return_day)))\n    return '\\n'.join(result)"
    },
    {
        "number": 4453,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    queries = []\n    for query in stdin.split(\"\\n\")[1:]:\n        n = int(query.split()[0])\n        p = list(map(int, query.split()[1:]))\n        queries.append((n, p))\n\n    result = []\n    for n, p in queries:\n        a = [0] * n\n        for i in range(n):\n            for j in range(i, n):\n                if p[j] == i + 1:\n                    a[i] += j - i\n                    break\n        result.append(\" \".join(map(str, a)))\n\n    return \"\\n\".join(result)\n\n\ninput_data = \"\"\"\n6\n5\n1 2 3 4 5\n3\n2 3 1\n6\n4 6 2 1 5 3\n1\n1\n4\n3 4 1 2\n5\n5 1 2 4 3\n\"\"\"\n\nprint(solution(input_data)) "
    },
    {
        "number": 4453,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    queries = stdin.split('\\n')\n    i = 0\n    output = []\n    while i < len(queries):\n        n = int(queries[i])\n        p = list(map(int, queries[i+1].split()))\n        days = [0] * n\n        for i in range(n):\n            if p[i] == i+1:\n                days[i] = 1\n            else:\n                days[i] = days[p[i]-1]+1\n        output.append(' '.join(map(str, days)))\n        i += 2\n    return '\\n'.join(output)\n\ninput_data = '''6\n5\n1 2 3 4 5\n3\n2 3 1\n6\n4 6 2 1 5 3\n1\n1\n4\n3 4 1 2\n5\n5 1 2 4 3'''\n\nprint(solution(input_data)) "
    },
    {
        "number": 4453,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def find_cycle(p: List[int]) -> List[int]:\n        visited = [False] * len(p)\n        cycle = []\n        for i in range(len(p)):\n            if not visited[i]:\n                node = i\n                while not visited[node]:\n                    visited[node] = True\n                    cycle.append(node)\n                    node = p[node] - 1\n                break\n        return cycle\n\n    def find_return_days(p: List[int]) -> List[int]:\n        return_days = [0] * len(p)\n        for i in range(len(p)):\n            node = i\n            while p[node] - 1 != i:\n                return_days[node] += 1\n                node = p[node] - 1\n        return return_days\n\n    def process_query(n: int, p: List[int]) -> List[int]:\n        cycle = find_cycle(p)\n        if len(cycle) == n:\n            return [1] * n\n        p_cycle = [0] * len(cycle)\n        for i in range(len(cycle)):\n            p_cycle[i] = p[cycle[i]] - 1\n        return_days = find_return_days(p_cycle)\n        result = []\n        for i in range(len(cycle)):\n            result.append(return_days[i] + 1)\n        for i in range(len(cycle)):\n            for j in range(i + 1, len(cycle)):\n                if cycle[j] < cycle[i]:\n                    result[cycle[i]] = min(result[cycle[i]], result[cycle[j]])\n        return result\n\n    result = []\n    q = int(stdin.readline())\n    for _ in range(q):\n        n = int(stdin.readline())\n        p = list(map(int, stdin.readline().split()))\n        result.append(\" \".join(map(str, process_query(n, p))))\n\n    return \"\\n\".join(result)\n"
    },
    {
        "number": 4453,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split()[0])\n    result = []\n\n    for i in range(q):\n        n = int(stdin.split(\"\\n\")[1 + i * 2].split()[0])\n        p = list(map(int, stdin.split(\"\\n\")[2 + i * 2].split()))\n        answer = [0] * n\n\n        for j in range(n):\n            answer[j] = p.index(j + 1)\n\n        result.append(\" \".join(map(str, answer)))\n\n    return \"\\n\".join(result)"
    },
    {
        "number": 4453,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    queries = stdin.split(\"\\n\")\n    results = []\n    \n    for i, query in enumerate(queries):\n        n, *p = map(int, query.split())\n        \n        if n == 1:\n            results.append(\"1\")\n        else:\n            p_dict = {i: p[i-1]-1 for i in range(1, n+1)}\n            days = [0] * n\n            for i in range(1, n+1):\n                days[i-1] = 1\n                while p_dict[i] != i:\n                    days[i-1] += 1\n                    i = p_dict[i]\n            \n            results.append(\" \".join(map(str, days)))\n    \n    return \"\\n\".join(results)\n\ndef"
    },
    {
        "number": 4453,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def solve(p: List[int]) -> List[int]:\n        n = len(p)\n        d = [0] * n\n        for i in range(n):\n            d[p[i] - 1] = i + 1\n        return d\n\n    queries = []\n    for query in stdin.split(\"\\n\")[1:]:\n        n = int(query.split()[0])\n        p = [int(x) for x in query.split()[1:]]\n        queries.append((n, p))\n\n    result = []\n    for n, p in queries:\n        d = solve(p)\n        result.append(\" \".join(map(str, d)))\n\n    return \"\\n\".join(result)\n\ndef"
    },
    {
        "number": 4453,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    queries = stdin.split(\"\\n\")\n    output = []\n    for i in range(0, len(queries), 2):\n        n = int(queries[i])\n        p = list(map(int, queries[i+1].split()))\n        a = [0] * n\n        for i in range(n):\n            if p[i] == i+1:\n                a[i] = 1\n            else:\n                a[p[i]-1] += 1\n        output.append(\" \".join(map(str, a)))\n    return \"\\n\".join(output)\n\ndef"
    },
    {
        "number": 4453,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Initialize variables\n    result = []\n    \n    # Read input\n    lines = stdin.strip().split('\\n')\n    q = int(lines[0])\n    queries = []\n    for i in range(1, len(lines), 2):\n        n = int(lines[i])\n        p = [int(x) for x in lines[i+1].split()]\n        queries.append((n, p))\n    \n    # Process queries\n    for n, p in queries:\n        p_inv = [p.index(i) for i in range(1, n+1)]\n        a = [0] * n\n        for i in range(n):\n            a[i] = p_inv.index(i)\n        result.append(' '.join(map(str, a)))\n    \n    # Return result\n    return '\\n'.join(result)\n"
    },
    {
        "number": 4453,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    queries = stdin.split('\\n')\n    result = []\n    \n    for i in range(0, len(queries), 2):\n        n = int(queries[i])\n        p = list(map(int, queries[i+1].split()))\n        a = [0] * n\n        \n        for j in range(n):\n            a[j] = p.index(j+1) + 1\n        \n        result.append(' '.join(map(str, a)))\n    \n    return '\\n'.join(result)\n\ninput_data = '''6\n5\n1 2 3 4 5\n3\n2 3 1\n6\n4 6 2 1 5 3\n1\n1\n4\n3 4 1 2\n5\n5 1 2 4 3'''\n\nprint(solution(input_data)) "
    },
    {
        "number": 4454,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split('\\n')[0])\n    result = []\n\n    for i in range(q):\n        n = int(stdin.split('\\n')[1 + i * 2])\n        prices = list(map(int, stdin.split('\\n')[2 + i * 2].split()))\n\n        min_price = min(prices)\n        total_price = sum(prices)\n\n        result.append(max(min_price, total_price // n))\n\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 4454,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.splitlines()[0])\n    result = []\n    \n    for i in range(q):\n        n = int(stdin.splitlines()[i * 2 + 1])\n        a = [int(x) for x in stdin.splitlines()[i * 2 + 2].split()]\n        \n        price = sum(a)\n        min_price = min(a)\n        \n        while price - min_price < price:\n            min_price -= 1\n        \n        result.append(min_price)\n    \n    return \"\\n\".join(map(str, result))"
    },
    {
        "number": 4454,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    queries = stdin.split(\"\\n\")\n    output = []\n\n    for i in range(1, len(queries), 2):\n        n = int(queries[i])\n        a = list(map(int, queries[i+1].split()))\n\n        if len(a) != n:\n            raise ValueError(\"Number of prices does not match the number of goods.\")\n\n        price = sum(a) // n\n        new_price = max(price, min(a))\n        output.append(str(new_price))\n\n    return \"\\n\".join(output)"
    },
    {
        "number": 4454,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def find_min_price(prices: List[int]) -> int:\n        total_sum = sum(prices)\n        min_price = min(prices)\n        return min_price\n\n    def find_min_equal_price(prices: List[int]) -> int:\n        total_sum = sum(prices)\n        min_price = find_min_price(prices)\n        return min_price * len(prices)\n\n    def find_min_price_sum(prices: List[int], min_price: int) -> int:\n        return sum(min_price for _ in range(len(prices)))\n\n    def find_min_price_to_sell_all(prices: List[int], min_price: int) -> int:\n        return find_min_price_sum(prices, min_price)\n\n    def find_min_price_to_sell_all_equal(prices: List[int], min_price: int) -> int:\n        return find_min_price_sum(prices, min_price) + (len(prices) - 1) * (min_price - 1)\n\n    def check_if_min_price_is_valid(prices: List[int], min_price: int) -> bool:\n        initial_sum = sum(prices)\n        new_sum = sum(min_price for _ in range(len(prices)))\n        return new_sum >= initial_sum\n\n    def process_query(query: str) -> int:\n        lines = query.splitlines()\n        n = int(lines[0])\n        prices = [int(price) for price in lines[1].split()]\n\n        min_price = find_min_price(prices)\n        min_price_equal = find_min_equal_price(prices)\n        min_price_to_sell_all = find_min_price_to_sell_all(prices, min_price)\n        min_price_to_sell_all_equal = find_min_price_to_sell_all_equal(prices, min_price_equal)\n\n        min_price = max(min_price, min_price_equal)\n        if not check_if_min_price_is_valid(prices, min_price):\n            return min_price_to_sell_all_equal\n        else:\n            return min_price\n\n    q = int(stdin.readline())\n    result = []\n    for _ in range(q):\n        query = stdin.read()\n        result.append(process_query(query))\n    return '\\n'.join(map(str, result))\n"
    },
    {
        "number": 4454,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def check_price(a: List[int], price: int) -> bool:\n        return sum(a) <= n * price\n\n    q = int(stdin.splitlines()[0])\n    result = []\n\n    for i in range(q):\n        n = int(stdin.splitlines()[i * 2 + 1])\n        a = list(map(int, stdin.splitlines()[i * 2 + 2].split()))\n        low, high = min(a), max(a)\n        while low < high:\n            mid = (low + high + 1) // 2\n            if check_price(a, mid):\n                low = mid\n            else:\n                high = mid - 1\n        result.append(low)\n\n    return \"\\n\".join(map(str, result))\n"
    },
    {
        "number": 4454,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split('\\n')[0])\n    result = []\n\n    for _ in range(q):\n        n = int(stdin.split('\\n')[1])\n        prices = list(map(int, stdin.split('\\n')[2].split()))\n        min_price = min(prices)\n        new_prices = [min_price] * n\n        total_income = sum(prices)\n        total_new_income = n * min_price\n\n        if total_income <= total_new_income:\n            result.append(min_price)\n        else:\n            result.append(total_income // n)\n\n        stdin = stdin.split('\\n')[3:]\n\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 4454,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split('\\n')[0])\n    result = []\n    for i in range(q):\n        n = int(stdin.split('\\n')[i * 2 + 1])\n        prices = list(map(int, stdin.split('\\n')[i * 2 + 2].split()))\n        min_price = 0\n        for j in range(n):\n            min_price += min(prices)\n            prices.remove(min(prices))\n        result.append(min_price)\n    return '\\n'.join(map(str, result))\n\n\nq = int(input())\ninput_data = '\\n'.join([input() for _ in range(q * 2)])\nprint(solution(input_data)) "
    },
    {
        "number": 4454,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def min_price(prices):\n        total_price = sum(prices)\n        min_price = min(prices)\n        return min_price * len(prices) if min_price * len(prices) >= total_price else total_price\n\n    output = []\n    queries = stdin.splitlines()\n    for i in range(0, len(queries), 2):\n        n = int(queries[i])\n        prices = list(map(int, queries[i + 1].split()))\n        output.append(min_price(prices))\n    return \"\\n\".join(map(str, output))"
    },
    {
        "number": 4454,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    for i in range(int(stdin.pop(0))):\n        n = int(stdin.pop(0))\n        a = list(map(int, stdin[:n]))\n        stdin = stdin[n:]\n\n        min_price = min(a)\n        new_price = sum(a) // n\n        if new_price < min_price:\n            result.append(min_price)\n        else:\n            result.append(new_price)\n\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 4454,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    output = []\n    queries = stdin.split('\\n')\n    for i in range(0, len(queries), 2):\n        n = int(queries[i])\n        prices = list(map(int, queries[i+1].split()))\n        min_price = min(prices)\n        sum_prices = sum(prices)\n        new_price = sum_prices // n\n        if new_price * n < sum_prices:\n            new_price += 1\n        output.append(new_price)\n    return \"\\n\".join(map(str, output))\n\ninput_str = \"3\\n5\\n1 2 3 4 5\\n3\\n1 2 2\\n4\\n1 1 1 1\"\nprint(solution(input_str)) "
    },
    {
        "number": 4455,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def can_be_mentor(r1, r2):\n        return r1 > r2\n\n    def get_mentor_count(programmers, quarrels):\n        mentor_count = [0] * len(programmers)\n        for i in range(len(programmers)):\n            for j in range(len(programmers)):\n                if i != j and can_be_mentor(programmers[i], programmers[j]) and (i, j) not in quarrels:\n                    mentor_count[i] += 1\n        return mentor_count\n\n    lines = stdin.split('\\n')\n    n, k = map(int, lines[0].split())\n    programmers = list(map(int, lines[1].split()))\n    quarrels = set()\n    for i in range(k):\n        x, y = map(int, lines[2 + i].split())\n        quarrels.add((min(x, y), max(x, y)))\n\n    mentor_count = get_mentor_count(programmers, quarrels)\n    return ' '.join(map(str, mentor_count))\n\ninput_data = \"\"\"4 2\n10 4 10 15\n1 2\n4 3\"\"\"\nprint(solution(input_data)) "
    },
    {
        "number": 4455,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().strip().split())\n    skills = list(map(int, stdin.readline().strip().split()))\n    quarrels = []\n    \n    for _ in range(k):\n        x, y = map(int, stdin.readline().strip().split())\n        quarrels.append((x, y))\n        quarrels.append((y, x))\n    \n    mentors = [0] * n\n    \n    for i in range(n):\n        for j in range(n):\n            if skills[i] > skills[j] and (i, j) not in quarrels:\n                mentors[i] += 1\n    \n    return \" \".join(map(str, mentors))\n"
    },
    {
        "number": 4455,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    skills = list(map(int, stdin.split()[2:]))\n    pairs = []\n    for i in range(k):\n        x, y = map(int, stdin.split()[(2 + i) * 2 - 2: (2 + i) * 2])\n        pairs.append((x - 1, y - 1))\n\n    def can_be_mentor(skills: list, pairs: list, i: int, j: int) -> bool:\n        if i == j:\n            return False\n        if (i, j) in pairs or (j, i) in pairs:\n            return False\n        return skills[i] > skills[j]\n\n    result = [0] * n\n    for i in range(n):\n        for j in range(n):\n            if can_be_mentor(skills, pairs, i, j):\n                result[i] += 1\n\n    return \" \".join(map(str, result))\n"
    },
    {
        "number": 4455,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    skills = list(map(int, stdin.readline().split()))\n    quarrels = []\n\n    for _ in range(k):\n        x, y = map(int, stdin.readline().split())\n        quarrels.append((x - 1, y - 1))\n\n    mentors = [0] * n\n\n    for i in range(n):\n        for j in range(n):\n            if (i, j) not in quarrels and skills[i] > skills[j]:\n                mentors[i] += 1\n\n    return \" \".join(map(str, mentors))\n"
    },
    {
        "number": 4455,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def find_mentors(skills, quarrels):\n        mentors = [0] * len(skills)\n        for i in range(len(skills)):\n            for j in range(len(skills)):\n                if i != j and (i, j) not in quarrels and skills[i] > skills[j]:\n                    mentors[i] += 1\n        return mentors\n\n    def parse_input(input_data: str) -> Tuple[List[int], List[Tuple[int, int]]]:\n        n, k = map(int, input_data.split()[:2])\n        skills = list(map(int, input_data.split()[2:2 + n]))\n        quarrels = []\n        for _ in range(k):\n            x, y = map(int, input_data.split()[2 + n + _ * 2:2 + n + (_ * 2) + 2])\n            quarrels.append((x - 1, y - 1))\n        return skills, quarrels\n\n    skills, quarrels = parse_input(stdin)\n    mentors = find_mentors(skills, quarrels)\n    return \" \".join(map(str, mentors))\n"
    },
    {
        "number": 4455,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    skills = list(map(int, stdin.split()[2:]))\n    quarrels = [tuple(map(int, stdin.split()[2+i*2:4+i*2])) for i in range(k)]\n\n    mentors = [0] * n\n\n    for i in range(n):\n        for j in range(n):\n            if (i, j) not in quarrels and skills[i] > skills[j]:\n                mentors[i] += 1\n\n    return ' '.join(map(str, mentors))"
    },
    {
        "number": 4455,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def can_mentor(a, b) -> bool:\n        return r_a > r_b and (a, b) not in quarrels and (b, a) not in quarrels\n\n    n, k = map(int, stdin.readline().split())\n    r_str = stdin.readline().split()\n    r = list(map(int, r_str))\n    r_max = max(r)\n    r_min = min(r)\n    r_diff = r_max - r_min\n\n    quarrels = set()\n    for _ in range(k):\n        x, y = map(int, stdin.readline().split())\n        quarrels.add((x, y))\n\n    result = [0] * n\n    for i in range(n):\n        r_i = r[i]\n        count = 0\n        for j in range(n):\n            if i == j:\n                continue\n            r_j = r[j]\n            if can_mentor(i, j):\n                count += 1\n        result[i] = count\n\n    return \" \".join(map(str, result))\n\ninput_data = \"4 2\\n10 4 10 15\\n1 2\\n4 3\"\noutput = solution(input_data)\nprint(output) "
    },
    {
        "number": 4455,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    skills = list(map(int, stdin.split()[2:]))\n    quarrels = []\n\n    for i in range(k):\n        x, y = map(int, stdin.split()[2 + i * 2: 4 + i * 2])\n        quarrels.append((x, y))\n\n    mentors = [0] * n\n\n    for i in range(n):\n        for j in range(n):\n            if i != j and (i, j) not in quarrels and skills[i] > skills[j]:\n                mentors[i] += 1\n\n    return ' '.join(map(str, mentors))\n"
    },
    {
        "number": 4455,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def find_mentors(n, k, skills, quarrels):\n        mentors_count = [0] * n\n        for i in range(n):\n            for j in range(n):\n                if skills[i] > skills[j] and (i, j) not in quarrels and (j, i) not in quarrels:\n                    mentors_count[i] += 1\n        return mentors_count\n\n    n, k = map(int, stdin.readline().split())\n    skills = list(map(int, stdin.readline().split()))\n    quarrels = set()\n    for _ in range(k):\n        x, y = map(int, stdin.readline().split())\n        quarrels.add((x, y))\n\n    mentors_count = find_mentors(n, k, skills, quarrels)\n    return \" \".join(map(str, mentors_count))"
    },
    {
        "number": 4455,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    skills = list(map(int, stdin.split()[2:]))\n    pairs = [list(map(int, line.strip().split())) for line in stdin.split('\\n')[2:]]\n\n    quarrels = set()\n    for pair in pairs:\n        quarrels.add((min(pair), max(pair)))\n\n    result = [0] * n\n    for i in range(n):\n        for j in range(n):\n            if (i, j) not in quarrels and i != j and skills[i] > skills[j]:\n                result[i] += 1\n\n    return \" \".join(map(str, result))\n"
    },
    {
        "number": 4456,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    p = list(map(int, stdin.split()[2:2+n]))\n    q = list(map(int, stdin.split()[2+n:2+2*n]))\n\n    if n < k:\n        return \"NO\"\n\n    s = [chr(97 + i) for i in range(k)]\n    p_sorted = sorted(p)\n    q_sorted = sorted(q)\n\n    if p_sorted != list(range(1, n+1)):\n        return \"NO\"\n\n    if q_sorted != list(range(1, n+1)):\n        return \"NO\"\n\n    for i in range(n-1):\n        if s[p[i]-1] > s[p[i+1]-1]:\n            return \"NO\"\n\n        if s[q[i]-1] > s[q[i+1]-1]:\n            return \"NO\"\n\n    return \"YES\\n\" + \"\".join(s)"
    },
    {
        "number": 4456,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    p = list(map(int, stdin.split()[2:2+n]))\n    q = list(map(int, stdin.split()[2+n:2+2*n]))\n\n    if k > n:\n        return \"NO\"\n\n    letters = [chr(ord('a') + i) for i in range(k)]\n    s = ''.join(letters[p[i]-1] for i in range(n))\n\n    if s == s[::-1]:\n        return \"YES\\n\" + s\n\n    for i in range(n):\n        if s[q[i]-1] < s[p[i]-1]:\n            return \"YES\\n\" + s\n\n    return \"NO\"\n\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4456,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    p = list(map(int, stdin.split()[2:2*n+2]))\n    q = list(map(int, stdin.split()[2*n+4:]))\n\n    if not (len(p) == len(q) == len(set(p)) == len(set(q)) == n):\n        return \"NO\"\n\n    s = \"\"\n    for i in range(k):\n        s += chr(ord('a') + i)\n    for i in range(k, n):\n        s += \"z\"\n\n    if sorted(s[p_i - 1] for p_i in p) != sorted(s[q_i - 1] for q_i in q):\n        return \"NO\"\n\n    return \"YES\\n\" + s"
    },
    {
        "number": 4456,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    p = list(map(int, input().split()))\n    q = list(map(int, input().split()))\n\n    if n < k:\n        return \"NO\"\n\n    def check_permutation(p: list) -> bool:\n        for i in range(len(p) - 1):\n            if p[i] >= p[i + 1]:\n                return False\n        return True\n\n    def find_suitable_string(p: list, q: list) -> str:\n        for i in range(len(p)):\n            p[i] = chr(96 + p[i])\n            q[i] = chr(96 + q[i])\n\n        p_sorted = sorted(p)\n        q_sorted = sorted(q)\n\n        p_dict = {}\n        q_dict = {}\n\n        for i in range(n):\n            if p_sorted[i] not in p_dict:\n                p_dict[p_sorted[i]] = 1\n            else:\n                p_dict[p_sorted[i]] += 1\n\n            if q_sorted[i] not in q_dict:\n                q_dict[q_sorted[i]] = 1\n            else:\n                q_dict[q_sorted[i]] += 1\n\n        suitable_chars = [chr(96 + i + 1) for i in range(n) if chr(96 + i + 1) in p_dict and chr(96 + i + 1) in q_dict]\n\n        if len(suitable_chars) < k:\n            return \"NO\"\n\n        suitable_string = \"\"\n        for i in range(k):\n            suitable_string += suitable_chars.pop(0)\n\n        return suitable_string\n\n    if check_permutation(p) and check_permutation(q):\n        result = find_suitable_string(p, q)\n        return result if result != \"NO\" else \"NO\"\n    else:\n        return \"NO\"\n\ninput_str = \"\"\ninput_str += input()\ninput_str += '\\n'\ninput_str += input()\ninput_str += '\\n'\ninput_str += input()\n\nprint(solution(input_str)) "
    },
    {
        "number": 4456,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(s: str, p: list, q: list) -> bool:\n        for i in range(len(p) - 1):\n            if s[p[i] - 1] > s[p[i + 1] - 1]:\n                return False\n            if s[q[i] - 1] > s[q[i + 1] - 1]:\n                return False\n        return True\n\n    def restore(n: int, k: int, p: list, q: list) -> str:\n        s = []\n        for i in range(n):\n            for j in range(k):\n                s.append(chr(97 + j))\n        s = sorted(s)\n        for i in range(n):\n            s[p[i] - 1], s[i] = s[i], s[p[i] - 1]\n            s[q[i] - 1], s[i] = s[i], s[q[i] - 1]\n        return \"\".join(s)\n\n    n, k = map(int, stdin.split()[0].split())\n    p = list(map(int, stdin.split()[1].split()))\n    q = list(map(int, stdin.split()[2].split()))\n\n    if is_valid(\"abcdefghijklmnopqrstuvwxyz\", p, q):\n        return \"YES\\n\" + restore(n, k, p, q)\n    else:\n        return \"NO\""
    },
    {
        "number": 4456,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    p = list(map(int, stdin.split()[2:2*n+2:2]))\n    q = list(map(int, stdin.split()[3:2*n+3:2]))\n    p_sorted = sorted(p)\n    q_sorted = sorted(q)\n    \n    if len(set(p)) != n or len(set(q)) != n or n < k:\n        return \"NO\"\n    \n    s = list(set(p) | set(q))\n    s.sort(key=lambda x: p_sorted.index(x))\n    \n    if len(s) < k:\n        return \"NO\"\n    \n    return \"YES\\n\" + \"\".join(s[:k]) + \"\".join(s[k:])"
    },
    {
        "number": 4456,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    p = list(map(int, stdin.split()[2:2+n]))\n    q = list(map(int, stdin.split()[2+n:]))\n    \n    for i in range(n-1):\n        if p[i] > p[i+1] or q[i] > q[i+1]:\n            return \"NO\"\n    \n    s = \"\"\n    used = set()\n    i = 0\n    while len(used) < k:\n        char = chr(ord('a') + i)\n        s += char\n        used.add(char)\n        i = (i + 1) % 26\n    \n    for i in range(n):\n        s = s[:p[i]-1] + s[p[i]-1] + s[p[i]:]\n    \n    for i in range(n):\n        s = s[:q[i]-1] + s[q[i]-1] + s[q[i]:]\n    \n    return \"YES\\n\" + s\n\ndef"
    },
    {
        "number": 4456,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    p = list(map(int, stdin.readline().split()))\n    q = list(map(int, stdin.readline().split()))\n\n    def is_valid(s: str) -> bool:\n        if len(set(s)) < k:\n            return False\n        s_sorted = sorted(s)\n        for i in range(len(p) - 1):\n            if s[p[i] - 1] > s[p[i + 1] - 1]:\n                return False\n        for i in range(len(q) - 1):\n            if s[q[i] - 1] > s[q[i + 1] - 1]:\n                return False\n        return True\n\n    for i in range(26):\n        for j in range(26):\n            for l in range(26):\n                s = chr(i + ord('a')) + chr(j + ord('a')) + chr(l + ord('a'))\n                if is_valid(s):\n                    return \"YES\\n\" + s\n    return \"NO\""
    },
    {
        "number": 4456,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    p = list(map(int, stdin.split()[2:2*n+2:2]))\n    q = list(map(int, stdin.split()[3:2*n+3:2]))\n\n    p_sorted = sorted(p)\n    q_sorted = sorted(q)\n\n    if p_sorted != list(range(1, n+1)) or q_sorted != list(range(1, n+1)):\n        return \"NO\"\n\n    if n < k:\n        return \"NO\"\n\n    letters = [chr(i) for i in range(ord('a'), ord('z')+1)]\n    for i in range(26-k):\n        letters.pop()\n\n    s = \"\".join(letters)\n    s = s[0:n]\n\n    for i in range(n-1):\n        if s[p[i]] > s[p[i+1]]:\n            return \"NO\"\n        if s[q[i]] > s[q[i+1]]:\n            return \"NO\"\n\n    return \"YES\\n\" + s"
    },
    {
        "number": 4456,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    p = list(map(int, stdin.split()[2:n+2]))\n    q = list(map(int, stdin.split()[n+2:]))\n    \n    # Check if it's possible to find the suitable string\n    for i in range(n-1):\n        if s[p[i]] > s[p[i+1]] or s[q[i]] > s[q[i+1]]:\n            return \"NO\"\n    \n    # Find the suitable string\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    for i in range(n):\n        if s[p[i]-1] in s and s[q[i]-1] in s:\n            s = s.replace(s[p[i]-1], '').replace(s[q[i]-1], '')\n    if len(set(s)) < k:\n        return \"NO\"\n    \n    # Sort the string according to the given permutations\n    s = ''.join([s[p.index(i+1)] for i in range(n)])\n    s = ''.join([s[q.index(i+1)] for i in range(n)])\n    \n    return \"YES\\n\" + s"
    },
    {
        "number": 4457,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    can_durability = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    def min_shots(can_durability, n):\n        if n == 1:\n            return 1\n\n        min_shots_list = [0] * n\n        min_shots_list[0] = 1\n\n        for i in range(1, n):\n            min_shots_list[i] = float('inf')\n            for j in range(i):\n                min_shots_list[i] = min(min_shots_list[i], min_shots_list[j] + can_durability[j] + 1)\n\n        return min_shots_list\n\n    min_shots_list = min_shots(can_durability, n)\n    total_min_shots = sum(min_shots_list)\n\n    result = f\"{total_min_shots}\\n\"\n    result += \" \".join(map(str, [i + 1 for i, x in enumerate(min_shots_list) if x == 1]))\n\n    return result\n"
    },
    {
        "number": 4457,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    cans = list(map(int, input().split()))\n\n    total_shots = [0] * n\n    for i in range(n):\n        for j in range(i):\n            total_shots[i] = max(total_shots[i], cans[j] * i + 1)\n\n    min_shots = min(total_shots)\n    result = [i + 1 for i in range(n) if total_shots[i] == min_shots]\n\n    return str(min_shots) + \"\\n\" + \" \".join(map(str, result))\n"
    },
    {
        "number": 4457,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    can_durabilities = list(map(int, stdin.readline().strip().split()))\n\n    min_shots = float('inf')\n    best_order = []\n\n    def shoot_cans(can_durabilities):\n        nonlocal min_shots, best_order\n        shots = 0\n        for can_index in range(len(can_durabilities)):\n            shots += (can_durabilities[can_index] * (can_index + 1) + 1)\n        if shots < min_shots:\n            min_shots = shots\n            best_order = list(range(1, n + 1))\n\n    for permutation in itertools.permutations(range(n)):\n        shoot_cans([can_durabilities[i] for i in permutation])\n\n    return f\"{min_shots}\\n{' '.join(map(str, best_order))}\""
    },
    {
        "number": 4457,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    min_shots = float('inf')\n    min_order = []\n    \n    def knock_down_can(i, x, shots):\n        return (a[i - 1] * x + 1) + shots\n    \n    def shoot_cans(order, index, shots):\n        nonlocal min_shots, min_order\n        if index == len(order):\n            if shots < min_shots:\n                min_shots = shots\n                min_order = order.copy()\n        else:\n            if index == 0:\n                shoot_cans(order, index + 1, knock_down_can(order[index], 0, shots))\n            else:\n                shoot_cans(order, index + 1, shots)\n                shoot_cans(order + [i for i in range(1, n + 1) if i not in order][:index] + [order[index - 1]], index, knock_down_can(order[index], index, shots))\n    \n    for i in range(1, n + 1):\n        shoot_cans([i], 0, 0)\n    \n    return str(min_shots) + '\\n' + ' '.join(map(str, min_order))\n\ninput_str = '''3\n20 10 20'''\nprint(solution(input_str)) "
    },
    {
        "number": 4457,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a_list = list(map(int, stdin.split('\\n')[1].split()))\n    \n    # Calculate the number of shots needed for each can\n    num_shots = [sum(a_list[:i]) + 1 for i in range(n)]\n    \n    # Find the order of cans with the minimum number of shots\n    min_shots = min(num_shots)\n    min_can_order = [i + 1 for i, shots in enumerate(num_shots) if shots == min_shots]\n    \n    return str(min_shots) + '\\n' + ' '.join(map(str, min_can_order))"
    },
    {
        "number": 4457,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    durabilities = [int(x) for x in stdin.split(\"\\n\")[1].split(\" \")]\n\n    def min_shots(n, durabilities):\n        if n == 1:\n            return durabilities[0]\n        dp = [float(\"inf\")] * (n + 1)\n        dp[1] = durabilities[0]\n        for i in range(2, n + 1):\n            for j in range(1, i):\n                dp[i] = min(dp[i], dp[j] + durabilities[i - 1] * (i - j - 1) + 1)\n        return dp[n]\n\n    def find_order(n, durabilities, dp):\n        order = []\n        j = n\n        for i in range(n, 0, -1):\n            for k in range(1, i + 1):\n                if dp[i] == dp[k] + durabilities[i - 1] * (i - k - 1) + 1:\n                    j = k\n                    break\n            order.append(i)\n            if j != n:\n                break\n        return order\n\n    min_shots_count = min_shots(n, durabilities)\n    order = find_order(n, durabilities, [min_shots(i + 1, durabilities) for i in range(n)])\n\n    return f\"{min_shots_count}\\n{' '.join(map(str, order))}\\n\""
    },
    {
        "number": 4457,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    durabilities = [int(dur) for dur in stdin.splitlines()[1].split()]\n    \n    def shots_needed(order: List[int]) -> int:\n        total_shots = 0\n        for i in range(1, n):\n            total_shots += durabilities[order[i - 1]] * i + 1\n        return total_shots\n    \n    min_shots = float('inf')\n    min_order = []\n    \n    for order in permutations(range(1, n + 1)):\n        current_shots = shots_needed(list(order))\n        if current_shots < min_shots:\n            min_shots = current_shots\n            min_order = list(order)\n    \n    return str(min_shots) + '\\n' + ' '.join(map(str, min_order))"
    },
    {
        "number": 4457,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    cans = [(a_i, i) for i, a_i in enumerate(a, 1)]\n    cans.sort(key=lambda x: x[0])\n\n    shots = 0\n    order = []\n\n    for can in cans:\n        shots += can[0] * len(order) + 1\n        order.append(can[1])\n\n    return f\"{shots}\\n{' '.join(map(str, order))}\\n\"\n"
    },
    {
        "number": 4457,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    durabilities = list(map(int, lines[1].split()))\n    min_shots = 0\n    order = []\n\n    for i in range(n):\n        if i == 0:\n            min_shots += 1\n            order.append(i + 1)\n        else:\n            shots = 0\n            for j in range(i):\n                shots += durabilities[j]\n            min_shots += shots + i + 1\n            order.append(i + 1)\n\n    return str(min_shots) + \"\\n\" + \" \".join(map(str, order))"
    },
    {
        "number": 4457,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    durabilities = list(map(int, stdin.splitlines()[1].split()))\n    \n    total_shots = 0\n    min_shots = float('inf')\n    min_shots_order = []\n    \n    for order in itertools.permutations(range(1, n+1)):\n        current_shots = 0\n        cans_knocked = 0\n        for can in order:\n            current_shots += durabilities[can-1] * cans_knocked + 1\n            cans_knocked += 1\n        \n        if current_shots < min_shots:\n            min_shots = current_shots\n            min_shots_order = order\n    \n    result = []\n    result.append(min_shots)\n    result.append(\" \".join(map(str, min_shots_order)))\n    return \"\\n\".join(map(str, result))\n\ninput_data = '''\n3\n20 10 20\n'''\noutput = solution(input_data)\nprint(output) "
    },
    {
        "number": 4458,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    P = [int(x) for x in lines[1].split()]\n    count = 0\n    for i in range(1, N+1):\n        if all(P[i] <= P[j] for j in range(i)):\n            count += 1\n    return str(count)"
    },
    {
        "number": 4458,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, permutation = stdin.split('\\n')\n    n = int(n)\n    permutation = [int(x) for x in permutation.split()]\n\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(1, i):\n            if permutation.index(i) >= permutation.index(j):\n                break\n        else:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4458,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, perm = stdin.split()\n    N = int(N)\n    perm = list(map(int, perm.split()))\n    \n    count = 0\n    for i in range(1, N+1):\n        if all(perm[i] <= perm[j] for j in range(1, i)):\n            count += 1\n    \n    return str(count)"
    },
    {
        "number": 4458,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    P = [int(x) for x in lines[1].split()]\n\n    # Initialize the result counter\n    count = 0\n\n    # Loop through all possible i (1 <= i <= N)\n    for i in range(1, N+1):\n        # Check if P_i is greater than or equal to all P_j (1 <= j < i)\n        if all(P[i-1] >= P[j-1] for j in range(1, i)):\n            count += 1\n\n    # Return the result as a string\n    return str(count)"
    },
    {
        "number": 4458,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.split(\"\\n\")[0])\n    permutation = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n\n    # Count the number of integers that satisfy the condition\n    count = 0\n    for i in range(1, N+1):\n        if all(permutation[i] <= permutation[j] for j in range(1, i)):\n            count += 1\n\n    # Return the result\n    return str(count)"
    },
    {
        "number": 4458,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    permutation = [int(x) for x in lines[1].split()]\n    \n    # Count number of integers i that satisfy the condition\n    count = 0\n    for i in range(1, n+1):\n        satisfy = True\n        for j in range(1, i):\n            if permutation[i-1] > permutation[j-1]:\n                satisfy = False\n                break\n        if satisfy:\n            count += 1\n    \n    return str(count)"
    },
    {
        "number": 4458,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, perms = stdin.split()\n    n = int(n)\n    perms = list(map(int, perms.split()))\n\n    count = 0\n    for i in range(1, n+1):\n        if all(perms[i] <= perms[j] for j in range(1, i)):\n            count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4458,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, perm = stdin.split()\n    N = int(N)\n    perm = list(map(int, perm.split()))\n\n    count = 0\n    for i in range(1, N+1):\n        condition_met = True\n        for j in range(1, i):\n            if perm[i-1] <= perm[j-1]:\n                condition_met = False\n                break\n        if condition_met:\n            count += 1\n\n    return str(count)\n\ninput_str = \"5\\n4 2 5 1 3\"\nprint(solution(input_str)) "
    },
    {
        "number": 4458,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    P = list(map(int, lines[1].split()))\n    count = 0\n    \n    for i in range(1, N+1):\n        is_valid = True\n        for j in range(1, i):\n            if P[i-1] <= P[j-1]:\n                is_valid = False\n                break\n        if is_valid:\n            count += 1\n    \n    return str(count)"
    },
    {
        "number": 4458,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, permutation = stdin.split()\n    N = int(N)\n    permutation = list(map(int, permutation.split()))\n\n    count = 0\n    for i in range(1, N+1):\n        valid = True\n        for j in range(1, i):\n            if permutation[i-1] <= permutation[j-1]:\n                valid = False\n                break\n        if valid:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4459,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    line_list = stdin.split()\n    n = int(line_list[0])\n    seq = line_list[1:]\n\n    # Check if the sequence is already a good sequence\n    if all(seq.count(str(i)) == int(i) for i in seq):\n        return \"0\"\n\n    # Create a dictionary to store the count of each element in the sequence\n    element_count = {}\n    for element in seq:\n        element_count[element] = element_count.get(element, 0) + 1\n\n    # Find the minimum number of elements to remove\n    min_count = n\n    for count in element_count.values():\n        if count > 1:\n            min_count = min(min_count, count - 1)\n\n    return str(min_count)"
    },
    {
        "number": 4459,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, seq = stdin.split()\n    N = int(N)\n    seq = list(map(int, seq.split()))\n    counts = {}\n    for num in seq:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    \n    good_seq = [num for num, count in counts.items() if count == num]\n    min_elements_to_remove = N - len(good_seq)\n    \n    return str(min_elements_to_remove)"
    },
    {
        "number": 4459,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, seq = map(int, stdin.split())\n    count = Counter(seq)\n    min_count = min(count.values())\n    good_seq = [k for k, v in count.items() if v == min_count]\n    bad_count = sum(count.values()) - N\n    \n    if bad_count == 0:\n        return \"0\"\n    else:\n        return str(N - len(good_seq) - bad_count)\n\ndef"
    },
    {
        "number": 4459,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, a = stdin.split()\n    N = int(N)\n    a = [int(i) for i in a.split()]\n\n    # Initialize a dictionary to count occurrences of each element in a\n    count_dict = {}\n    for num in a:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Initialize a counter for the number of elements to remove\n    remove_count = 0\n\n    # Iterate through the dictionary, counting the number of occurrences\n    for count in count_dict.values():\n        # If the count is less than the number, increment the counter by the difference\n        if count < count_dict[count]:\n            remove_count += count_dict[count] - count\n\n    return str(remove_count)"
    },
    {
        "number": 4459,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    count = Counter(a)\n    return str(len(a) - sum(count.values()))"
    },
    {
        "number": 4459,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_good_sequence(sequence: List[int]) -> bool:\n        freq = {}\n        for num in sequence:\n            freq[num] = freq.get(num, 0) + 1\n        return all(num == freq.get(num, 0) for num in sequence)\n\n    N, *a = list(map(int, stdin.split()))\n    good_sequence = [num for num in a if is_good_sequence(a[:a.index(num)])]\n    return str(len(a) - len(good_sequence))"
    },
    {
        "number": 4459,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a = stdin.split()\n    n = int(n)\n    a = list(map(int, a.split()))\n    a_dict = {}\n\n    for i in a:\n        if i in a_dict:\n            a_dict[i] += 1\n        else:\n            a_dict[i] = 1\n\n    min_elements = n\n\n    for key, value in a_dict.items():\n        if key != value:\n            min_elements = min(min_elements, value)\n\n    return str(min_elements)\n\nn = int(input())\na = input()\nprint(solution(f\"{n} {a}\")) "
    },
    {
        "number": 4459,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num_elements, sequence = stdin.split('\\n')\n    num_elements = int(num_elements)\n    sequence = list(map(int, sequence.split()))\n\n    # Sort the sequence in ascending order\n    sequence.sort()\n\n    # Initialize the count of each element in the sequence\n    element_count = {}\n    for element in sequence:\n        if element not in element_count:\n            element_count[element] = 0\n        element_count[element] += 1\n\n    # Initialize the count of elements to be removed\n    elements_to_remove = 0\n\n    # Check each element in the sequence\n    for element in sequence:\n        # If the count of the element is greater than 1, remove the extra occurrences\n        if element_count[element] > 1:\n            elements_to_remove += element_count[element] - 1\n            element_count[element] = 1\n\n    return str(elements_to_remove)"
    },
    {
        "number": 4459,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    \n    count_dict = {}\n    for x in a:\n        if x in count_dict:\n            count_dict[x] += 1\n        else:\n            count_dict[x] = 1\n    \n    good_sequence = True\n    for x in count_dict:\n        if count_dict[x] != x:\n            good_sequence = False\n            break\n    \n    if good_sequence:\n        return \"0\"\n    \n    count_list = list(count_dict.values())\n    count_list.sort(reverse=True)\n    removed_count = 0\n    for x in count_list:\n        if x != 0:\n            removed_count += x\n            break\n    \n    return str(removed_count)"
    },
    {
        "number": 4459,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split()))\n    N = nums[0]\n    nums = nums[1:]\n\n    def is_good_sequence(sequence):\n        for num in sequence:\n            if sequence.count(num) != num:\n                return False\n        return True\n\n    min_count = float('inf')\n    for i in range(2 ** N):\n        sequence = []\n        for j in range(N):\n            if (i >> j) & 1:\n                sequence.append(nums[j])\n        if is_good_sequence(sequence):\n            min_count = min(min_count, N - len(sequence))\n\n    return str(min_count)"
    },
    {
        "number": 4460,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_1, x_2, x_3, x_4, x_5 = map(int, stdin.split())\n    for i in range(1, 6):\n        if eval(f\"x_{i}\") == 0:\n            return str(i)\n    return \"\""
    },
    {
        "number": 4460,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x_1, x_2, x_3, x_4, x_5 = map(int, stdin.split())\n    if x_1 == 0:\n        return \"1\"\n    elif x_2 == 0:\n        return \"2\"\n    elif x_3 == 0:\n        return \"3\"\n    elif x_4 == 0:\n        return \"4\"\n    else:\n        return \"5\""
    },
    {
        "number": 4460,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x_1, x_2, x_3, x_4, x_5 = map(int, stdin.split())\n    variables = [x_1, x_2, x_3, x_4, x_5]\n    index = variables.index(0)\n    return str(index + 1)"
    },
    {
        "number": 4460,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x1, x2, x3, x4, x5 = map(int, stdin.split())\n    if x1 == 0:\n        return \"1\"\n    elif x2 == 0:\n        return \"2\"\n    elif x3 == 0:\n        return \"3\"\n    elif x4 == 0:\n        return \"4\"\n    elif x5 == 0:\n        return \"5\"\n    else:\n        return \"None\""
    },
    {
        "number": 4460,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x1, x2, x3, x4, x5 = map(int, stdin.split())\n    for i, x in enumerate([x1, x2, x3, x4, x5], 1):\n        if x == 0:\n            return str(i)\n    \n    return \"No variable was assigned 0\""
    },
    {
        "number": 4460,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x_1, x_2, x_3, x_4, x_5 = map(int, stdin.split())\n    for i in range(1, 6):\n        if eval(f\"x_{i}\") == 0:\n            return str(i)\n    return \"No variable was assigned 0\""
    },
    {
        "number": 4460,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x_1, x_2, x_3, x_4, x_5 = map(int, stdin.split())\n    \n    if x_1 == 0:\n        return \"1\"\n    elif x_2 == 0:\n        return \"2\"\n    elif x_3 == 0:\n        return \"3\"\n    elif x_4 == 0:\n        return \"4\"\n    else:\n        return \"5\""
    },
    {
        "number": 4460,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x_1, x_2, x_3, x_4, x_5 = map(int, stdin.split())\n\n    if x_1 == 0:\n        return \"1\"\n    elif x_2 == 0:\n        return \"2\"\n    elif x_3 == 0:\n        return \"3\"\n    elif x_4 == 0:\n        return \"4\"\n    else:\n        return \"5\""
    },
    {
        "number": 4460,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x1, x2, x3, x4, x5 = map(int, stdin.split())\n    if x1 == 0:\n        return \"1\"\n    elif x2 == 0:\n        return \"2\"\n    elif x3 == 0:\n        return \"3\"\n    elif x4 == 0:\n        return \"4\"\n    elif x5 == 0:\n        return \"5\"\n    else:\n        return \"No variable assigned 0\" "
    },
    {
        "number": 4460,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x_1, x_2, x_3, x_4, x_5 = map(int, stdin.split())\n    for i, x in enumerate([x_1, x_2, x_3, x_4, x_5], 1):\n        if x == 0:\n            return str(i)\n    return \"Variable not found\" "
    },
    {
        "number": 4461,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n\n    if H == 2 or W == 2:\n        return \"0\"\n\n    max_area = H * W\n    min_area = 0\n\n    for i in range(1, H // 2 + 1):\n        max_area = min(max_area, i * W + (H - i) * W)\n        min_area = max(min_area, i * W + (H - i) * W)\n\n    return str(max_area - min_area)\n\nH, W = input().split()\nH, W = int(H), int(W)\nprint(solution(f\"{H} {W}\")) "
    },
    {
        "number": 4461,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.strip().split())\n\n    # Check if the bar can be divided into exactly three pieces\n    if H < 3 or W < 3:\n        return \"Impossible\"\n\n    # Calculate the minimum possible value of S_{max} - S_{min}\n    max_area = (H // 3) * (W // 3)\n    min_area = (H // 3) * (W - 2)\n    return str(max_area - min_area)"
    },
    {
        "number": 4461,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    # Since the bar can only be divided into three pieces, the height of each piece must be H // 3.\n    piece_height = H // 3\n    # The width of each piece can be any number between 1 and W.\n    min_width = 1\n    max_width = W\n    min_difference = float('inf')\n\n    while min_width <= max_width:\n        width = (min_width + max_width) // 2\n        # Calculate the areas of the three pieces.\n        areas = [piece_height * width] * 3\n        # If the area of the largest piece is greater than the area of the smallest piece,\n        # we need to make the width of the pieces smaller.\n        if areas[0] > areas[2]:\n            min_width = width + 1\n        # If the area of the largest piece is less than or equal to the area of the smallest piece,\n        # we need to make the width of the pieces larger.\n        else:\n            max_width = width - 1\n            # Update the minimum difference if we find a better solution.\n            min_difference = min(min_difference, areas[1] - areas[0])\n\n    return min_difference "
    },
    {
        "number": 4461,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n\n    max_diff = 10**5 * 10**5  # Maximum possible value of S_max - S_min\n\n    # Find the minimum difference between the area of any two adjacent pieces\n    for i in range(1, W - 1):\n        for j in range(1, H - 1):\n            diff = abs(i * (H - j) - (W - i) * j)\n            max_diff = min(max_diff, diff)\n\n    return max_diff"
    },
    {
        "number": 4461,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    min_val = min(H * W // 3, H * (W // 2), (H // 2) * W)\n    max_val = max(H * W // 3, H * (W // 2), (H // 2) * W)\n    return str(max_val - min_val)"
    },
    {
        "number": 4461,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    result = 0\n\n    if H % 3 == 0:\n        result = H * W // 3\n    elif W % 3 == 0:\n        result = H * W // 3\n    else:\n        result = min(H * W // 3, H * (W - 1) // 3, (H - 1) * W // 3)\n\n    return str(result)"
    },
    {
        "number": 4461,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    S_max = H * (W // 3)\n    S_min = H * ((W + 1) // 3)\n    return str(S_max - S_min)"
    },
    {
        "number": 4461,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    H, W = list(map(int, stdin.split()))\n    if H == 1 or W == 1:\n        return \"0\"\n    else:\n        return str(max(H * W // 3, (H // 2) * (W // 2)))"
    },
    {
        "number": 4461,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    min_area = 10**5\n    min_division = None\n    \n    for i in range(1, W):\n        for j in range(1, H):\n            max_area = H * i + W * j\n            min_area = min(min_area, max_area)\n            if max_area - min_area == 0:\n                min_division = (i, j)\n                break\n            \n    if min_division:\n        return str(min_division[0] * min_division[1])\n    else:\n        return str(min_area)\n    \n"
    },
    {
        "number": 4461,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    max_area = H * W\n    min_area = (H // 3) * (W // 3)\n    return str(max_area - min_area)"
    },
    {
        "number": 4462,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    for i in range(N - 1):\n        if (a[i] * a[i + 1]) % 4 != 0:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4462,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, seq = stdin.split()\n    n = int(n)\n    seq = list(map(int, seq.split()))\n    \n    for i in range(n - 1):\n        if seq[i] * seq[i + 1] % 4 != 0:\n            return \"No\"\n    \n    return \"Yes\""
    },
    {
        "number": 4462,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def is_multiple_of_4(a: int, b: int) -> bool:\n        return a * b % 4 == 0\n\n    def permute_array(a: List[int]) -> bool:\n        n = len(a)\n        for i in range(n - 1):\n            if not is_multiple_of_4(a[i], a[i + 1]):\n                a[i], a[i + 1] = a[i + 1], a[i]\n        return is_multiple_of_4(a[0], a[-1])\n\n    n, *a = map(int, stdin.split())\n    return \"Yes\" if permute_array(a) else \"No\"\n"
    },
    {
        "number": 4462,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n\n    for i in range(n - 1):\n        if a[i] * a[i + 1] % 4 != 0:\n            return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4462,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, *numbers = list(map(int, stdin.split()))\n    for i in range(n - 1):\n        if numbers[i] * numbers[i + 1] % 4 != 0:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4462,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a = stdin.split(\"\\n\")\n    n = int(n)\n    a = list(map(int, a.split()))\n    \n    for i in range(n-1):\n        if a[i] * a[i+1] % 4 != 0:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4462,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    N = int(input_list[0])\n    a_list = list(map(int, input_list[1:]))\n\n    if N < 2 or N > 10**5:\n        return \"No\"\n\n    for i in range(N - 1):\n        if a_list[i] * a_list[i + 1] % 4 != 0:\n            return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4462,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, a = int(stdin.split()[0]), list(map(int, stdin.split()[1:]))\n    if N < 2 or N > 10**5:\n        return \"No\"\n    for i in range(N - 1):\n        if a[i] * a[i + 1] % 4 != 0:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4462,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, seq = stdin.split()\n    N = int(N)\n    seq = list(map(int, seq.split()))\n\n    for i in range(N - 1):\n        if seq[i] * seq[i + 1] % 4 != 0:\n            return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4462,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, sequence = stdin.split(\"\\n\")\n    N = int(N)\n    sequence = [int(x) for x in sequence.split()]\n\n    for i in range(N - 1):\n        if (sequence[i] * sequence[i + 1]) % 4 != 0:\n            return \"No\"\n\n    return \"Yes\"\n"
    },
    {
        "number": 4463,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    if s == t:\n        return \"No\"\n    if s < t:\n        return \"Yes\"\n    return \"No\"\n\ninput_str = input()\nresult = solution(input_str)\nprint(result) "
    },
    {
        "number": 4463,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    n = len(s)\n    m = len(t)\n\n    if n > m:\n        return \"No\"\n\n    for i in range(n):\n        if s[i] != t[i]:\n            if s[i] > t[i]:\n                return \"No\"\n            else:\n                break\n\n    return \"Yes\"\n\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4463,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    \n    def can_satisfy(s: str, t: str) -> bool:\n        if len(s) > len(t):\n            return False\n        \n        s_chars = list(s)\n        t_chars = list(t)\n        for i in range(len(s)):\n            if s_chars[i] != t_chars[i]:\n                s_chars[i], t_chars[i] = t_chars[i], s_chars[i]\n                break\n        \n        s_chars.sort()\n        t_chars.sort()\n        \n        return s_chars < t_chars\n    \n    if can_satisfy(s, t):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4463,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(\"\\n\")\n    \n    s_sorted = sorted(s)\n    t_sorted = sorted(t)\n    \n    if s_sorted == s and t_sorted == t:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ndef"
    },
    {
        "number": 4463,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.splitlines()\n    s_sorted = ''.join(sorted(s))\n    t_sorted = ''.join(sorted(t))\n\n    if s_sorted < t_sorted:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4463,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n\n    for i in range(len(s)):\n        s_new = s[:i] + s[i+1:]\n        t_new = t[:i] + t[i+1:]\n\n        if s_new < t_new:\n            return \"Yes\"\n\n    return \"No\"\n\ndef"
    },
    {
        "number": 4463,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n\n    for i in range(len(t)):\n        t = t[1:] + t[0]\n        if s < t:\n            return \"Yes\"\n\n    return \"No\""
    },
    {
        "number": 4463,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    s_sorted = ''.join(sorted(s))\n    t_sorted = ''.join(sorted(t))\n    \n    if s_sorted < t_sorted:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4463,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.splitlines()\n    s = sorted(s)\n    t = sorted(t)\n    for i in range(len(s)):\n        if s[i] < t[i]:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4463,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(\"\\n\")\n    s_prime = ''.join(sorted(s))\n    t_prime = ''.join(sorted(t))\n    \n    if s_prime < t_prime:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4464,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    \n    if C >= A:\n        return \"NO\"\n    \n    i = 1\n    while i <= A * (B // A):\n        if (i - C) % B == 0:\n            return \"YES\"\n        i += A\n    \n    return \"NO\""
    },
    {
        "number": 4464,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n\n    if C >= 0 and C < B:\n        multiple = A * (B - C)\n        if multiple % A == 0:\n            return \"YES\"\n\n    return \"NO\""
    },
    {
        "number": 4464,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if C % A == 0:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4464,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    \n    # Ensure that B is greater than or equal to A\n    if B < A:\n        return \"NO\"\n    \n    # Calculate the minimum multiple of A that is greater than or equal to B\n    min_multiple_of_A = A * ((B + A - 1) // A)\n    \n    # Check if the sum of the minimum multiple of A and C is congruent to C modulo B\n    if (min_multiple_of_A + C) % B == C:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4464,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    mod = C % B\n    if A <= B:\n        return \"NO\"\n    for i in range(A, B*10, A):\n        if i % A == 0:\n            if (i+mod) % B == 0:\n                return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4464,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if C % A == 0:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4464,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    multiples = [i for i in range(A, B*A, A)]\n    \n    if not multiples:\n        return \"NO\"\n    \n    for num in multiples:\n        if num % B == C:\n            return \"YES\"\n    \n    return \"NO\""
    },
    {
        "number": 4464,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.strip().split())\n    if C % A == 0 and B % A == 0:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4464,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if C % A == 0:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4464,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if C < 0 or C >= B:\n        return \"NO\"\n\n    # Check if it is possible to achieve the objective\n    for multiple in range(A, B, A):\n        if (multiple - C) % B == 0:\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4465,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    area = A * B - A - B\n    return str(area)"
    },
    {
        "number": 4465,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    area = A * B - (A + B - 2) * 2\n    return str(area)"
    },
    {
        "number": 4465,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split())\n    area = A * B - (A + B)\n    return str(area) "
    },
    {
        "number": 4465,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A * B - 4)\n\ndef"
    },
    {
        "number": 4465,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    area = (A - 2) * (B - 2)\n    return str(area)"
    },
    {
        "number": 4465,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    area = A * B\n    road_width = min(A, B) - 1\n    road_length = (A + B) // 2 - 1\n    roads_area = road_width * road_length\n    result = area - roads_area\n    return str(result)"
    },
    {
        "number": 4465,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A * B - (2 * (A + B) - 4))"
    },
    {
        "number": 4465,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A * B - 2)"
    },
    {
        "number": 4465,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input from stdin\n    A, B = map(int, stdin.split())\n\n    # Calculate the area of the yard excluding the roads\n    area = A * B - A - B\n\n    # Return the result as a string\n    return str(area)"
    },
    {
        "number": 4465,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    area = A * B\n    road_width = min(A, B)\n    road_area = road_width * road_width\n    return str(area - road_area)"
    },
    {
        "number": 4466,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, Y, Z = list(map(int, stdin.split()))\n    seats_count = (X - Y - 2 * Z) // (Y + Z)\n    return str(seats_count)"
    },
    {
        "number": 4466,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    X, Y, Z = map(int, stdin.split())\n    return str(max(0, (X - Y) // (Y + 2 * Z)))"
    },
    {
        "number": 4466,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    X, Y, Z = map(int, stdin.split())\n    max_people = (X - 2 * Z) // (Y + Z)\n    return str(max_people)"
    },
    {
        "number": 4466,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    X, Y, Z = map(int, stdin.split())\n    max_people = (X - Y) // (Y + 2 * Z)\n    return str(max_people)"
    },
    {
        "number": 4466,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X, Y, Z = map(int, stdin.split())\n    return str(min(X // (Y + 2 * Z), (X - Y - 2 * Z) // Z + 1))"
    },
    {
        "number": 4466,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    X, Y, Z = map(int, stdin.split())\n    if Y + 2*Z > X:\n        return \"0\"\n    return str(X // (Y + 2*Z))\n\ndef"
    },
    {
        "number": 4466,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X, Y, Z = map(int, stdin.split())\n    capacity = X - 2 * Z\n    if Y + 2 * Z > X:\n        return \"0\"\n    return str(capacity // Y)"
    },
    {
        "number": 4466,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X, Y, Z = map(int, stdin.split())\n    max_people = (X - Y) // (Y + Z)\n    return str(max_people)"
    },
    {
        "number": 4466,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    X, Y, Z = [int(x) for x in stdin.split()]\n    if Y + 2 * Z > X:\n        return \"0\"\n    \n    num_people = (X - Y) // (Y + 2 * Z)\n    if (X - Y) % (Y + 2 * Z) != 0:\n        num_people += 1\n    \n    return str(num_people)\n\ndef"
    },
    {
        "number": 4466,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X, Y, Z = map(int, stdin.split())\n    num_people = (X - 2 * Z) // Y\n    return str(num_people)"
    },
    {
        "number": 4467,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    input_lines = stdin.split(\"\\n\")\n    N = int(input_lines[0])\n    points = []\n    for i in range(1, 2*N+1):\n        x, y = map(int, input_lines[i].split())\n        points.append((x, y))\n\n    # Sort the points\n    points.sort(key=lambda x: (x[0], x[1]))\n\n    # Count the number of friendly pairs\n    count = 0\n    for i in range(N):\n        for j in range(N, 2*N):\n            if points[i][0] < points[j][0] and points[i][1] < points[j][1]:\n                count += 1\n                break\n\n    return str(count)\n"
    },
    {
        "number": 4467,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    points = stdin.split('\\n')[1:2*N+1]\n    red_points = [tuple(map(int, points[i].split())) for i in range(N)]\n    blue_points = [tuple(map(int, points[i+N].split())) for i in range(N)]\n\n    friendly_pairs = 0\n    for i in range(N):\n        for j in range(N):\n            if i == j:\n                continue\n            if red_points[i][0] < blue_points[j][0] and red_points[i][1] < blue_points[j][1]:\n                friendly_pairs += 1\n\n    return str(friendly_pairs)"
    },
    {
        "number": 4467,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input data\n    data = stdin.split(\"\\n\")\n    N = int(data[0])\n    red_points = [(int(data[i*2+1]), int(data[i*2+2])) for i in range(N)]\n    blue_points = [(int(data[N*2+i*2+1]), int(data[N*2+i*2+2])) for i in range(N)]\n\n    # Count the number of friendly pairs\n    friendly_pairs = 0\n    for i in range(N):\n        for j in range(N):\n            if red_points[i][0] < blue_points[j][0] and red_points[i][1] < blue_points[j][1]:\n                friendly_pairs += 1\n\n    return str(friendly_pairs)"
    },
    {
        "number": 4467,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def find_friendly_pairs(red_points, blue_points):\n        friendly_pairs = 0\n        for i in range(N):\n            for j in range(N):\n                if red_points[i] < blue_points[j] and red_points[i][1] < blue_points[j][1]:\n                    friendly_pairs += 1\n        return friendly_pairs\n\n    input_list = stdin.split('\\n')\n    N = int(input_list[0])\n    red_points = [(int(input_list[i + 1].split()[0]), int(input_list[i + 1].split()[1])) for i in range(N)]\n    blue_points = [(int(input_list[i + 1 + N].split()[0]), int(input_list[i + 1 + N].split()[1])) for i in range(N)]\n\n    return find_friendly_pairs(red_points, blue_points)"
    },
    {
        "number": 4467,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.splitlines()[0])\n    points = stdin.splitlines()[1:]\n    red_points = [tuple(map(int, points[i].split())) for i in range(N)]\n    blue_points = [tuple(map(int, points[i].split())) for i in range(N, 2*N)]\n\n    def is_friendly_pair(red_point: tuple, blue_point: tuple) -> bool:\n        return red_point[0] < blue_point[0] and red_point[1] < blue_point[1]\n\n    friendly_pairs = 0\n    for i in range(N):\n        for j in range(N, 2*N):\n            if is_friendly_pair(red_points[i], blue_points[j]):\n                friendly_pairs += 1\n\n    return str(friendly_pairs)"
    },
    {
        "number": 4467,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_friendly_pair(red_point, blue_point) -> bool:\n        return red_point[0] < blue_point[0] and red_point[1] < blue_point[1]\n\n    def find_friendly_pairs(red_points, blue_points) -> int:\n        pairs = 0\n        for red_point in red_points:\n            for blue_point in blue_points:\n                if is_friendly_pair(red_point, blue_point):\n                    pairs += 1\n                    red_points.remove(red_point)\n                    blue_points.remove(blue_point)\n                    break\n        return pairs\n\n    def parse_points(stdin: str) -> List[Tuple[int, int]]:\n        points = []\n        for line in stdin.split('\\n'):\n            if line:\n                x, y = map(int, line.split())\n                points.append((x, y))\n        return points\n\n    red_points = parse_points(stdin)[:N]\n    blue_points = parse_points(stdin)[N:]\n    return str(find_friendly_pairs(red_points, blue_points))"
    },
    {
        "number": 4467,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    red_points = [(int(line.split()[0]), int(line.split()[1])) for line in lines[1:n+1]]\n    blue_points = [(int(line.split()[0]), int(line.split()[1])) for line in lines[n+1:]]\n\n    # Initialize the count of friendly pairs\n    count = 0\n\n    # Iterate through all possible pairs\n    for i in range(len(red_points)):\n        for j in range(len(blue_points)):\n            # Check if the points can form a friendly pair\n            if red_points[i][0] < blue_points[j][0] and red_points[i][1] < blue_points[j][1]:\n                count += 1\n                break\n\n    return str(count)"
    },
    {
        "number": 4467,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    points = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n\n    red_points = sorted([(a, b) for a, b, _ in points])\n    blue_points = sorted([(c, d) for _, _, (c, d) in points])\n\n    count = 0\n    i = 0\n    j = 0\n\n    while i < N and j < N:\n        if red_points[i][0] < blue_points[j][0] and red_points[i][1] < blue_points[j][1]:\n            count += 1\n            i += 1\n            j += 1\n        elif red_points[i][0] < blue_points[j][0]:\n            i += 1\n        else:\n            j += 1\n\n    return str(count)\n"
    },
    {
        "number": 4467,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split(\"\\n\")\n    n = int(data[0])\n    red_points = [tuple(map(int, data[i+1].split())) for i in range(n)]\n    blue_points = [tuple(map(int, data[i+1+n].split())) for i in range(n)]\n    \n    red_points.sort()\n    blue_points.sort()\n    \n    pairs = 0\n    i = 0\n    j = 0\n    while i < n and j < n:\n        if red_points[i][0] < blue_points[j][0] and red_points[i][1] < blue_points[j][1]:\n            pairs += 1\n            i += 1\n            j += 1\n        elif red_points[i][0] < blue_points[j][0]:\n            i += 1\n        else:\n            j += 1\n    \n    return str(pairs)"
    },
    {
        "number": 4467,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    red_points = []\n    blue_points = []\n    for _ in range(N):\n        x, y = map(int, stdin.readline().strip().split())\n        red_points.append((x, y))\n    for _ in range(N):\n        x, y = map(int, stdin.readline().strip().split())\n        blue_points.append((x, y))\n\n    red_points.sort(key=lambda x: (x[0], x[1]))\n    blue_points.sort(key=lambda x: (x[0], x[1]))\n\n    red_idx = 0\n    blue_idx = 0\n    num_pairs = 0\n    while red_idx < N and blue_idx < N:\n        if red_points[red_idx][0] < blue_points[blue_idx][0] and red_points[red_idx][1] < blue_points[blue_idx][1]:\n            num_pairs += 1\n            red_idx += 1\n            blue_idx += 1\n        elif red_points[red_idx][0] < blue_points[blue_idx][0]:\n            red_idx += 1\n        else:\n            blue_idx += 1\n\n    return str(num_pairs)\n\ndef"
    },
    {
        "number": 4468,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    times = list(map(int, stdin.split()[2:]))\n    total_time = 0\n\n    for i in range(len(times)):\n        total_time += (times[i] - times[0]) // t * t + t\n\n    return str(total_time)\n\ndef"
    },
    {
        "number": 4468,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculates the total time the shower emits water.\n\n    Args:\n        stdin: a string with the input in the given format.\n\n    Returns:\n        A string with the total time the shower emits water.\n    \"\"\"\n    input_lines = stdin.splitlines()\n    n, t = map(int, input_lines[0].split())\n    timestamps = list(map(int, input_lines[1].split()))\n\n    # sort timestamps in ascending order\n    timestamps.sort()\n\n    total_time = 0\n    current_start_time = 0\n\n    for timestamp in timestamps:\n        if timestamp < current_start_time:\n            # the shower is already emitting water\n            continue\n        # calculate the time the shower will emit water from the current timestamp\n        current_emission_time = min(t, timestamp - current_start_time)\n        total_time += current_emission_time\n        current_start_time = timestamp + t\n\n    # add the time the shower will emit water after the last timestamp\n    total_time += t - (current_start_time - timestamps[-1])\n\n    return str(total_time)"
    },
    {
        "number": 4468,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split()[:2])\n    times = list(map(int, stdin.split()[2:]))\n    times.sort()\n    total_time = 0\n    start_time = 0\n\n    for time in times:\n        if time < start_time:\n            total_time += t\n        else:\n            start_time = time\n            total_time += t\n\n    return str(total_time)"
    },
    {
        "number": 4468,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, t, times = stdin.split()\n    n = int(n)\n    t = int(t)\n    times = [int(time) for time in times.split()]\n    \n    total_seconds = 0\n    current_time = 0\n    for time in times:\n        if time >= current_time:\n            total_seconds += t\n            current_time = time + t\n        else:\n            current_time = time + t\n            \n    return str(total_seconds)"
    },
    {
        "number": 4468,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    t = list(map(int, stdin.split()[2:]))\n\n    shower_seconds = [T]\n\n    for i in range(1, N):\n        shower_seconds.append(T + (t[i] - t[i-1]) * (shower_seconds[i-1] - T))\n\n    return str(sum(shower_seconds))"
    },
    {
        "number": 4468,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, T = list(map(int, stdin.split('\\n')[0].split()))\n    times = list(map(int, stdin.split('\\n')[1].split()))\n\n    max_time = max(times) + T\n    return str(max_time)\n\nstdin = \"2 4\\n0 3\"\nprint(solution(stdin)) "
    },
    {
        "number": 4468,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    num_people, duration = map(int, lines[0].split())\n    times = list(map(int, lines[1].split()))\n    \n    # Sort the times in ascending order\n    times.sort()\n    \n    # Initialize the start and end time of the shower\n    start_time = 0\n    end_time = 0\n    \n    # Iterate through the sorted times\n    for time in times:\n        # Check if the current time is within the current shower duration\n        if time >= start_time and time <= end_time:\n            # If the time is within the current shower duration, do nothing\n            pass\n        else:\n            # If the time is outside the current shower duration, update the start and end time\n            start_time = time\n            end_time = time + duration\n    \n    # Return the total duration of the shower\n    return str(end_time - start_time)"
    },
    {
        "number": 4468,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N, T = map(int, lines[0].split())\n    switches = [int(t) for t in lines[1].split()]\n\n    shower_total = 0\n    for i, t in enumerate(switches):\n        if i == 0:\n            shower_total += T\n        else:\n            shower_total += max(t, shower_total) - shower_total\n\n    return str(shower_total)"
    },
    {
        "number": 4468,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, t = map(int, lines[0].split())\n    times = list(map(int, lines[1].split()))\n\n    times.sort()\n\n    start_time = times[0]\n    end_time = times[-1]\n\n    if start_time != 0:\n        start_time += t\n\n    end_time += t\n\n    return str(end_time - start_time)\n\ninput_string = \"2 4\\n0 3\"\nprint(solution(input_string)) "
    },
    {
        "number": 4468,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split()[0:2])\n    t = list(map(int, stdin.split()[2:]))\n\n    start_time = t[0]\n    end_time = t[0] + T\n\n    for i in range(1, N):\n        if t[i] >= start_time and t[i] <= end_time:\n            end_time = t[i] + T\n        else:\n            start_time = t[i]\n            end_time = t[i] + T\n\n    return str(end_time - start_time)"
    },
    {
        "number": 4469,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    queries = stdin.split(\"\\n\")\n    q = int(queries.pop(0))\n    shelf = []\n    min_pop = 0\n    answers = []\n\n    for query in queries:\n        if query[0] == \"L\":\n            shelf.insert(0, int(query[2:]))\n        elif query[0] == \"R\":\n            shelf.append(int(query[2:]))\n        else:\n            target = int(query[2:])\n            if target in shelf:\n                min_pop = min(min_pop, shelf.index(target))\n            else:\n                shelf.append(target)\n                min_pop = min(min_pop, len(shelf) - 1)\n\n            if min_pop > 0:\n                shelf.pop(min_pop - 1)\n                min_pop -= 1\n            else:\n                answers.append(min_pop)\n\n    return \"\\n\".join(map(str, answers))"
    },
    {
        "number": 4469,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    queries = stdin.split(\"\\n\")\n    q = int(queries[0])\n    left = []\n    right = []\n\n    for query in queries[1:]:\n        if query[0] == \"L\":\n            id = int(query[2:])\n            left.append(id)\n        elif query[0] == \"R\":\n            id = int(query[2:])\n            right.append(id)\n        else:\n            id = int(query[2:])\n            left_pop_count = right_pop_count = 0\n            while left and left[-1] > id:\n                left_pop_count += 1\n                left.pop()\n            while right and right[0] < id:\n                right_pop_count += 1\n                right.pop(0)\n            print(left_pop_count + right_pop_count)\n\n    return \"\"\n\ndef"
    },
    {
        "number": 4469,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    queries = stdin.split('\\n')\n    q = int(queries.pop(0))\n    left_books = []\n    right_books = []\n\n    def put_left(id):\n        nonlocal left_books\n        left_books.append(id)\n\n    def put_right(id):\n        nonlocal right_books\n        right_books.append(id)\n\n    def min_pop_left():\n        nonlocal left_books\n        min_pop = float('inf')\n        for id in left_books:\n            min_pop = min(min_pop, id)\n        return min_pop\n\n    def min_pop_right():\n        nonlocal right_books\n        min_pop = float('inf')\n        for id in right_books:\n            min_pop = min(min_pop, id)\n        return min_pop\n\n    for query in queries:\n        command, id = query.split()\n        if command == 'L':\n            put_left(int(id))\n        elif command == 'R':\n            put_right(int(id))\n        else:\n            left_min_pop = min_pop_left()\n            right_min_pop = min_pop_right()\n            if int(id) < left_min_pop:\n                print(left_min_pop - int(id))\n            elif int(id) > right_min_pop:\n                print(int(id) - right_min_pop)\n            else:\n                print(0)"
    },
    {
        "number": 4469,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split()[0])\n    shelf = []\n    result = []\n    for line in stdin.split('\\n')[1:]:\n        query = line.split()\n        if query[0] == \"L\":\n            shelf.insert(0, int(query[1]))\n        elif query[0] == \"R\":\n            shelf.append(int(query[1]))\n        else:\n            id = int(query[1])\n            result.append(min(len(shelf) - shelf.index(id) - 1, shelf.index(id)))\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 4469,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    q = int(stdin.splitlines()[0])\n    queries = stdin.splitlines()[1:]\n\n    # Initialize variables\n    shelf = []\n    answers = []\n\n    for query in queries:\n        if query[0] == \"L\":\n            id = int(query[2:])\n            shelf.insert(0, id)\n        elif query[0] == \"R\":\n            id = int(query[2:])\n            shelf.append(id)\n        elif query[0] == \"?\":\n            id = int(query[2:])\n            index = shelf.index(id)\n            if index == 0:\n                answers.append(0)\n            else:\n                answers.append(len(shelf) - index - 1)\n\n    return \"\\n\".join(map(str, answers))"
    },
    {
        "number": 4469,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    shelf = []\n    queries = stdin.split(\"\\n\")[1:]\n    \n    for query in queries:\n        operation = query[0]\n        index = int(query[2:])\n        \n        if operation == \"L\":\n            shelf.insert(0, index)\n        elif operation == \"R\":\n            shelf.append(index)\n        else:\n            if index in shelf:\n                index_left = shelf.index(index)\n                index_right = len(shelf) - 1 - shelf[::-1].index(index)\n                print(min(index_left, index_right))\n            else:\n                print(-1) "
    },
    {
        "number": 4469,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    shelf = []\n    answers = []\n\n    for i in range(q):\n        line = stdin.readline().split()\n        query_type = line[0]\n        id = int(line[1])\n\n        if query_type == \"L\":\n            shelf.insert(0, id)\n        elif query_type == \"R\":\n            shelf.append(id)\n        else:\n            if id == shelf[0]:\n                answers.append(0)\n            elif id == shelf[-1]:\n                answers.append(len(shelf))\n            else:\n                index = shelf.index(id)\n                answers.append(min(index, len(shelf) - index - 1))\n\n    return \"\\n\".join(map(str, answers))"
    },
    {
        "number": 4469,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    queries = stdin.split(\"\\n\")\n    q = int(queries[0])\n    shelf = []\n    answers = []\n    for i in range(1, q+1):\n        query = queries[i].split()\n        if query[0] == \"L\":\n            id = int(query[1])\n            for j in range(len(shelf)-1, -1, -1):\n                if shelf[j] == id:\n                    shelf.insert(0, id)\n                    break\n            else:\n                shelf.insert(0, id)\n        elif query[0] == \"R\":\n            id = int(query[1])\n            for j in range(len(shelf)):\n                if shelf[j] == id:\n                    shelf.append(id)\n                    break\n            else:\n                shelf.append(id)\n        else:\n            id = int(query[1])\n            index = shelf.index(id)\n            answers.append(min(index, len(shelf)-1-index))\n    return \"\\n\".join(map(str, answers))"
    },
    {
        "number": 4469,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.splitlines()[0])\n    shelf = []\n    queries = stdin.splitlines()[1:]\n\n    for query in queries:\n        if query[0] == 'L':\n            shelf.insert(0, int(query[2:]))\n        elif query[0] == 'R':\n            shelf.append(int(query[2:]))\n        else:\n            id = int(query[2:])\n            if id == shelf[0]:\n                print(\"0\")\n            elif id == shelf[-1]:\n                print(len(shelf) - 1)\n            else:\n                print(\"-1\")  # not possible"
    },
    {
        "number": 4469,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    queries = stdin.splitlines()\n    left_shelf = []\n    right_shelf = []\n    output = []\n    for query in queries:\n        if query[0] == \"L\":\n            left_shelf.append(int(query[2:]))\n        elif query[0] == \"R\":\n            right_shelf.append(int(query[2:]))\n        else:\n            target_id = int(query[2:])\n            target_left_index = -1\n            target_right_index = -1\n            for i, book_id in enumerate(left_shelf):\n                if book_id == target_id:\n                    target_left_index = i\n                    break\n            for i, book_id in enumerate(right_shelf):\n                if book_id == target_id:\n                    target_right_index = i\n                    break\n            if target_left_index == -1 and target_right_index == -1:\n                raise ValueError(\"Target book not found in the shelf\")\n            output.append(min(target_left_index, target_right_index))\n    return \"\\n\".join(map(str, output))"
    },
    {
        "number": 4470,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.split('\\n', 1)[0])\n    queries_data = stdin.split('\\n', queries)[1:]\n\n    def is_divisible_by(number: int, divisor: int) -> bool:\n        return number % divisor == 0\n\n    def count_operations(number: int) -> int:\n        count = 0\n        while number > 1:\n            if is_divisible_by(number, 2) and number != 2:\n                number //= 2\n            elif is_divisible_by(number, 3) and number != 3:\n                number = 2 * number // 3\n            elif is_divisible_by(number, 5):\n                number //= 5\n            else:\n                return -1\n            count += 1\n        return count\n\n    result = []\n    for query_data in queries_data:\n        n = int(query_data)\n        count = count_operations(n)\n        result.append(str(count) if count != -1 else \"-1\")\n\n    return \"\\n\".join(result)"
    },
    {
        "number": 4470,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.splitlines()[0])\n    queries = [int(line) for line in stdin.splitlines()[1:]]\n    \n    result = []\n    \n    for n in queries:\n        moves = 0\n        while n != 1:\n            if n % 2 == 0:\n                n //= 2\n            elif n % 3 == 0:\n                n = 2 * n // 3\n            elif n % 5 == 0:\n                n //= 5\n            else:\n                break\n            moves += 1\n        \n        if n == 1:\n            result.append(moves)\n        else:\n            result.append(-1)\n    \n    return \"\\n\".join(map(str, result))\n"
    },
    {
        "number": 4470,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    for _ in range(q):\n        n = int(stdin.readline())\n        count = 0\n        while n != 1:\n            if n % 2 == 0:\n                n //= 2\n                count += 1\n            elif n % 3 == 0:\n                n = 2 * n // 3\n                count += 1\n            elif n % 5 == 0:\n                n = 4 * n // 5\n                count += 1\n            else:\n                print(-1)\n                break\n        else:\n            print(count)\n    return \"\"\n\nstdin = open(\"input.txt\", \"r\")\nstdout = open(\"output.txt\", \"w\")\nstdout.write(solution(stdin))\nstdout.close() "
    },
    {
        "number": 4470,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split('\\n')[0])\n    result = []\n    for _ in range(q):\n        n = int(stdin.split('\\n')[1])\n        moves = 0\n        while n != 1:\n            if n % 2 == 0:\n                n //= 2\n            elif n % 3 == 0:\n                n = n * 2 // 3\n            elif n % 5 == 0:\n                n = n * 4 // 5\n            else:\n                break\n            moves += 1\n        if n == 1:\n            result.append(moves)\n        else:\n            result.append(-1)\n    return '\\n'.join(map(str, result))\n\ninput_string = \"\"\"7\n1\n10\n25\n30\n14\n27\n1000000000000000000\"\"\"\nprint(solution(input_string)) "
    },
    {
        "number": 4470,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def min_moves(n):\n        if n == 1:\n            return 0\n        if n % 2 == 0 and n % 3 == 0 and n % 5 == 0:\n            return 1 + min_moves(n // 2) + min_moves(n // 3) + min_moves(n // 5)\n        if n % 2 == 0:\n            return 1 + min_moves(n // 2)\n        if n % 3 == 0:\n            return 1 + min_moves(2 * n)\n        if n % 5 == 0:\n            return 1 + min_moves(4 * n)\n        return -1\n\n    q = int(stdin.readline())\n    for _ in range(q):\n        n = int(stdin.readline())\n        result = min_moves(n)\n        print(result)"
    },
    {
        "number": 4470,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    result = []\n    \n    for _ in range(q):\n        n = int(stdin.readline().strip())\n        count = 0\n        \n        while n != 1:\n            if n % 2 == 0:\n                n //= 2\n                count += 1\n            elif n % 3 == 0:\n                n = 2 * n // 3\n                count += 1\n            elif n % 5 == 0:\n                n //= 5\n                count += 1\n            else:\n                result.append(-1)\n                break\n        else:\n            result.append(count)\n    \n    return \"\\n\".join(map(str, result))\n"
    },
    {
        "number": 4470,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split('\\n')[0])\n    result = []\n    \n    for i in range(1, q+1):\n        n = int(stdin.split('\\n')[i])\n        count = 0\n        while n != 1:\n            if n % 2 == 0:\n                n //= 2\n            elif n % 3 == 0:\n                n = 2*n//3\n            elif n % 5 == 0:\n                n //= 5\n            else:\n                count = -1\n                break\n            count += 1\n        result.append(count)\n    \n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 4470,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def is_divisible_by(number: int, divisor: int) -> bool:\n        return number % divisor == 0\n\n    def next_move(n: int) -> int:\n        if is_divisible_by(n, 2):\n            return 2\n        if is_divisible_by(n, 3):\n            return 3\n        if is_divisible_by(n, 5):\n            return 5\n        return -1\n\n    def min_moves(n: int) -> int:\n        if n == 1:\n            return 0\n\n        move = next_move(n)\n        if move == -1:\n            return -1\n\n        result = min_moves(n // move)\n        if result == -1:\n            return -1\n\n        return 1 + result\n\n    q = int(stdin.readline().strip())\n    result = []\n\n    for _ in range(q):\n        n = int(stdin.readline().strip())\n        result.append(min_moves(n))\n\n    return \"\\n\".join(map(str, result))\n"
    },
    {
        "number": 4470,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split(\"\\n\")[0])\n    queries = stdin.split(\"\\n\")[1:]\n    result = []\n    for query in queries:\n        n = int(query)\n        if n == 1:\n            result.append(\"0\")\n            continue\n        \n        count = 0\n        while n != 1:\n            if n % 2 == 0:\n                n //= 2\n            elif n % 3 == 0:\n                n = 2 * n // 3\n            elif n % 5 == 0:\n                n //= 5\n            else:\n                break\n            count += 1\n        \n        if n == 1:\n            result.append(str(count))\n        else:\n            result.append(\"-1\")\n    \n    return \"\\n\".join(result)"
    },
    {
        "number": 4470,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split()[0])\n    queries = stdin.split('\\n')[1:]\n    result = []\n\n    for query in queries:\n        n = int(query)\n        moves = 0\n\n        while n != 1:\n            if n % 2 == 0:\n                n //= 2\n                moves += 1\n            elif n % 3 == 0:\n                n *= 2\n                n //= 3\n                moves += 2\n            elif n % 5 == 0:\n                n *= 2\n                n //= 5\n                moves += 2\n            else:\n                result.append(-1)\n                break\n\n        result.append(moves)\n\n    return \"\\n\".join(map(str, result))"
    },
    {
        "number": 4471,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    results = []\n\n    for i in range(1, t * 2 + 1, 2):\n        n = int(stdin.split('\\n')[i])\n        a = list(map(int, stdin.split('\\n')[i + 1].split()))\n\n        # Place the first figure\n        for j in range(n):\n            if a[j] >= 2:\n                a[j] += 2\n                break\n\n        # Replace all a[i] with a[i] - 1\n        while all(a):\n            for j in range(n):\n                a[j] = max(0, a[j] - 1)\n\n        # Check if the field is cleared\n        if all(a) == True:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n\n    return '\\n'.join(results)\n\ninput_str = \"\"\"4\n3\n1 1 3\n4\n1 1 2 1\n2\n11 11\n1\n100\"\"\"\nprint(solution(input_str)) "
    },
    {
        "number": 4471,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split(\"\\n\")[0])\n    for i in range(1, 2 * t + 1, 2):\n        n = int(stdin.split(\"\\n\")[i])\n        a = list(map(int, stdin.split(\"\\n\")[i+1].split()))\n        for j in range(n):\n            a[j] += 2\n            for k in range(j+1, n):\n                if a[k] >= 1:\n                    a[k] -= 1\n        if all(i == 0 for i in a):\n            print(\"YES\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 4471,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.strip().split('\\n')[0])\n    results = []\n    for i in range(test_cases):\n        n = int(stdin.strip().split('\\n')[2 * i + 1])\n        initial_heights = list(map(int, stdin.strip().split('\\n')[2 * i + 2].split()))\n\n        initial_heights = [initial_heights[i] - 1 for i in range(n)]\n        while any(initial_heights):\n            for j in range(n):\n                if initial_heights[j] >= 1:\n                    initial_heights[j] += 2\n                    break\n            else:\n                continue\n            initial_heights = [initial_heights[i] - 1 if initial_heights[i] > 0 else 0 for i in range(n)]\n\n        if all(initial_heights) == 0:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n\n    return \"\\n\".join(results)"
    },
    {
        "number": 4471,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline().strip())\n    for _ in range(cases):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        while any(a):\n            for i in range(n):\n                a[i] = a[i] - 1 if a[i] > 0 else 0\n                if a[i] == 1:\n                    a[i] = 3\n            if not any(a):\n                break\n        if all(x == 0 for x in a):\n            print(\"YES\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 4471,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.splitlines()[0])\n    test_cases = stdin.splitlines()[1:]\n    result = []\n    \n    for i in range(0, t*2, 2):\n        n = int(test_cases[i])\n        heights = list(map(int, test_cases[i+1].split()))\n        max_height = max(heights)\n        can_clear = True\n        \n        while max_height > 0:\n            for j in range(n):\n                if heights[j] > 0 and heights[j] <= max_height:\n                    heights[j] += 2\n                elif heights[j] > 0 and heights[j] > max_height:\n                    can_clear = False\n                    break\n            if not can_clear:\n                break\n            max_height = max(heights)\n            for j in range(n):\n                heights[j] -= 1\n        \n        if can_clear:\n            result.append(\"YES\")\n        else:\n            result.append(\"NO\")\n    \n    return \"\\n\".join(result)\n\n\ndef"
    },
    {
        "number": 4471,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.splitlines()[0])\n    result = []\n\n    for i in range(1, t * 2 + 1, 2):\n        n = int(stdin.splitlines()[i])\n        a = list(map(int, stdin.splitlines()[i + 1].split()))\n\n        for j in range(n):\n            if a[j] >= 2:\n                a[j] += 2\n            else:\n                a[j] = 0\n            for k in range(j + 1, n):\n                if a[k] > 0:\n                    a[k] -= 1\n\n        if all(x == 0 for x in a):\n            result.append(\"YES\")\n        else:\n            result.append(\"NO\")\n\n    return \"\\n\".join(result)\n"
    },
    {
        "number": 4471,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def can_clear_field(a):\n        a.sort(reverse=True)\n        for i in range(len(a)):\n            if a[i] > 0:\n                a[i] -= 1\n                if can_clear_field(a):\n                    return True\n                a[i] += 1\n        return False\n\n    def parse_input(stdin: str) -> list[list[int]]:\n        test_cases = int(stdin.splitlines()[0])\n        test_input = stdin.splitlines()[1:]\n        result = []\n\n        for i in range(0, len(test_input), 2):\n            n = int(test_input[i])\n            a = list(map(int, test_input[i+1].split()))\n            result.append((n, a))\n\n        return result\n\n    test_cases = parse_input(stdin)\n    for n, a in test_cases:\n        if can_clear_field(a):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n"
    },
    {
        "number": 4471,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    result = []\n    \n    for i in range(1, t*2+1, 2):\n        n = int(stdin.split('\\n')[i])\n        a = list(map(int, stdin.split('\\n')[i+1].split()))\n        \n        if all(a[i] >= 2 for i in range(n)):\n            result.append(\"YES\")\n        else:\n            result.append(\"NO\")\n    \n    return '\\n'.join(result)\n\ninput_data = '''4\n3\n1 1 3\n4\n1 1 2 1\n2\n11 11\n1\n100'''\n\nprint(solution(input_data)) "
    },
    {
        "number": 4471,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    result = []\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        a.sort(reverse=True)\n        if n == 1:\n            result.append(\"YES\" if a[0] >= 2 else \"NO\")\n        else:\n            for j in range(len(a)):\n                if a[j] >= 2:\n                    a[j] -= 2\n                else:\n                    break\n            if all(x >= 0 for x in a):\n                result.append(\"YES\")\n            else:\n                result.append(\"NO\")\n    return \"\\n\".join(result)"
    },
    {
        "number": 4471,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.splitlines()[0])\n    result = []\n\n    for i in range(1, test_cases * 2 + 1, 2):\n        n = int(stdin.splitlines()[i])\n        a = list(map(int, stdin.splitlines()[i + 1].split()))\n\n        while any(a):\n            for j in range(n):\n                if a[j] > 0:\n                    a[j] -= 1\n            if all(a):\n                return \"YES\"\n            for j in range(n):\n                if a[j] > 1:\n                    a[j] += 2\n                    break\n        else:\n            return \"NO\"\n\n    return result\n\n\ndef"
    },
    {
        "number": 4472,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(input())\n    a = input()\n    b = input()\n\n    # Initialize variables\n    preprocess_moves = 0\n    swap_a2b2_count = 0\n\n    # Check if a and b are already equal\n    if a == b:\n        return preprocess_moves\n\n    # Check if a and b are equal after preprocess moves\n    for i in range(n):\n        if a[i] != b[i]:\n            preprocess_moves += 1\n            if i == 1 and a[1] != b[1]:\n                swap_a2b2_count += 1\n            elif i == 2 and a[2] != b[2]:\n                swap_a2b2_count += 1\n            elif i == 3 and a[3] != b[3]:\n                swap_a2b2_count += 1\n            elif i == 4 and a[4] != b[4]:\n                swap_a2b2_count += 1\n            elif i == 5 and a[5] != b[5]:\n                swap_a2b2_count += 1\n            elif i == 6 and a[6] != b[6]:\n                swap_a2b2_count += 1\n            elif i == 7 and a[7] != b[7]:\n                swap_a2b2_count += 1\n\n    # Check if there is a sequence of changes to make a and b equal\n    if swap_a2b2_count > 0:\n        swap_a2b2_count -= 1\n        preprocess_moves += swap_a2b2_count\n\n    return preprocess_moves"
    },
    {
        "number": 4472,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = stdin.splitlines()[1]\n    b = stdin.splitlines()[2]\n\n    preprocess_moves = 0\n\n    for i in range(n):\n        if a[i] != b[i]:\n            if a[i] == b[n - i - 1]:\n                preprocess_moves += 1\n            elif a[i] == b[n - i]:\n                preprocess_moves += 1\n            else:\n                preprocess_moves += 2\n\n    return preprocess_moves"
    },
    {
        "number": 4472,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = stdin.split('\\n')[1]\n    b = stdin.split('\\n')[2]\n\n    preprocess_moves = 0\n    for i in range(n):\n        if a[i] != b[i]:\n            preprocess_moves += 1\n\n    return str(preprocess_moves)"
    },
    {
        "number": 4472,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(stdin.splitlines()[1])\n    b = list(stdin.splitlines()[2])\n\n    preprocess_moves = 0\n    for i in range(n):\n        if a[i] != b[i]:\n            if a[i] == b[n - i - 1]:\n                preprocess_moves += 1\n            else:\n                j = n - i - 1\n                while j < n and a[i] != b[j]:\n                    j += 1\n                if j == n:\n                    preprocess_moves += 1\n                else:\n                    a[i], b[j] = b[j], a[i]\n\n    return str(preprocess_moves)"
    },
    {
        "number": 4472,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = stdin.readline().strip()\n    b = stdin.readline().strip()\n\n    def preprocess(s: str) -> str:\n        s = list(s)\n        for i in range(n):\n            if s[i] == s[n - i - 1]:\n                j = n - i - 1\n                while j < n - 1 and s[j] == s[n - i - 1]:\n                    j += 1\n                s[j] = chr(ord(s[j]) + 1)\n            if s[i] == 'a':\n                s[i] = 'b'\n        return ''.join(s)\n\n    a = preprocess(a)\n    b = preprocess(b)\n\n    if a == b:\n        return 0\n\n    def min_changes(a: str, b: str, n: int) -> int:\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][0] = 1\n            dp[0][i] = 1\n        for i in range(1, n):\n            for j in range(1, n):\n                if a[i] == b[j]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1])\n        return dp[n - 1][n - 1]\n\n    return min_changes(a, b, n)"
    },
    {
        "number": 4472,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(stdin.split()[1])\n    b = list(stdin.split()[2])\n\n    count = 0\n    for i in range(n):\n        if a[i] != b[i]:\n            count += 1\n\n    return count"
    },
    {
        "number": 4472,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = stdin.split('\\n')[1]\n    b = stdin.split('\\n')[2]\n\n    swap_count = 0\n    for i in range(n):\n        if a[i] != b[i]:\n            swap_count += 1\n\n    preprocess_count = min(swap_count, n - swap_count)\n\n    return preprocess_count"
    },
    {
        "number": 4472,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = stdin.split()[1]\n    b = stdin.split()[2]\n\n    min_preprocess = 0\n\n    for i in range(1, n + 1):\n        if a[i-1] != b[i-1]:\n            min_preprocess += 1\n            a = a[:i-1] + b[i-1] + a[i:]\n            b = b[:i-1] + a[i-1] + b[i:]\n\n    return str(min_preprocess)\n\ndef"
    },
    {
        "number": 4472,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = stdin.splitlines()[1]\n    b = stdin.splitlines()[2]\n\n    preprocess_moves = 0\n    for i in range(n):\n        if a[i] != b[i]:\n            preprocess_moves += 1\n\n    return preprocess_moves\n"
    },
    {
        "number": 4472,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin.readline())\n    a = stdin.readline().strip()\n    b = stdin.readline().strip()\n    \n    # Calculate the minimum number of preprocess moves\n    preprocess_moves = 0\n    for i in range(n):\n        if a[i] != b[i]:\n            preprocess_moves += 1\n    \n    # Return the result\n    return str(preprocess_moves)"
    },
    {
        "number": 4473,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    result = []\n\n    for _ in range(t):\n        a, b, k = map(int, stdin.split('\\n')[1].split())\n        position = 0\n\n        for i in range(k):\n            if i % 2 == 0:\n                position += a\n            else:\n                position -= b\n\n        result.append(position)\n\n    return '\\n'.join(map(str, result))\n\ninput_str = \"\"\"6\n5 2 3\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999\"\"\"\n\nprint(solution(input_str)) "
    },
    {
        "number": 4473,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def frog_jumps(a: int, b: int, k: int) -> int:\n        position = 0\n        jump_count = 0\n        while jump_count < k:\n            if jump_count % 2 == 0:\n                position += a\n            else:\n                position -= b\n            jump_count += 1\n        return position\n\n    queries = []\n    t = int(stdin.strip())\n    for i in range(t):\n        a, b, k = map(int, stdin.split())\n        queries.append(frog_jumps(a, b, k))\n\n    return \"\\n\".join(map(str, queries))"
    },
    {
        "number": 4473,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    answers = []\n\n    for i in range(t):\n        a, b, k = map(int, stdin.readline().split())\n\n        answer = 0\n        for j in range(k):\n            if j % 2 == 0:\n                answer += a\n            else:\n                answer -= b\n\n        answers.append(answer)\n\n    return \" \".join(map(str, answers))\n"
    },
    {
        "number": 4473,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def frog_jump(a, b, k):\n        if k % 2 == 0:\n            return a\n        else:\n            return -b\n\n    t = int(stdin.strip().split(\"\\n\")[0])\n    results = []\n\n    for i in range(t):\n        a, b, k = map(int, stdin.strip().split(\"\\n\")[i + 1].split())\n        position = 0\n\n        for j in range(k):\n            position += frog_jump(a, b, j + 1)\n\n        results.append(position)\n\n    return \"\\n\".join(map(str, results))"
    },
    {
        "number": 4473,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    queries = []\n\n    for i in range(t):\n        a, b, k = map(int, stdin.readline().strip().split())\n        queries.append((a, b, k))\n\n    results = []\n    for query in queries:\n        a, b, k = query\n        x = 0\n        for j in range(k):\n            if j % 2 == 0:\n                x += a\n            else:\n                x -= b\n        results.append(x)\n\n    return \" \".join(map(str, results))"
    },
    {
        "number": 4473,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    answers = []\n    \n    for _ in range(t):\n        a, b, k = map(int, stdin.readline().split())\n        x = 0\n        \n        for _ in range(k):\n            if _ % 2 == 0:\n                x += a\n            else:\n                x -= b\n                \n        answers.append(x)\n    \n    return ' '.join(map(str, answers))\n\ninput_data = '''6\n5 2 3\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999'''\n\nprint(solution(input_data)) # Output: 8 198 -17 2999999997 0 1 "
    },
    {
        "number": 4473,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    queries = stdin.split(\"\\n\")\n    t = int(queries[0])\n    results = []\n    for i in range(1, t+1):\n        a, b, k = map(int, queries[i].split())\n        position = 0\n        for j in range(k):\n            if j % 2 == 0:\n                position += a\n            else:\n                position -= b\n        results.append(position)\n    return \"\\n\".join(map(str, results))\n\ninput_str = \"\"\"6\n5 2 3\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999\n\"\"\"\n\noutput = solution(input_str)\nprint(output) "
    },
    {
        "number": 4473,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    answers = []\n    \n    for _ in range(t):\n        a, b, k = map(int, stdin.readline().strip().split())\n        current_position = 0\n        \n        for _ in range(k):\n            if (_ + 1) % 2 == 0:\n                current_position += a\n            else:\n                current_position -= b\n        \n        answers.append(current_position)\n    \n    return \"\\n\".join(map(str, answers))\n\ninput_data = \"\"\"6\n5 2 3\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999\n\"\"\"\noutput = solution(input_data)\nprint(output) "
    },
    {
        "number": 4473,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    queries = []\n    for i in range(1, t+1):\n        query = list(map(int, stdin.split('\\n')[i].split()))\n        queries.append(query)\n    answers = []\n    for query in queries:\n        a, b, k = query\n        position = 0\n        for i in range(1, k+1):\n            if i % 2 == 0:\n                position += a\n            else:\n                position -= b\n        answers.append(position)\n    return '\\n'.join(map(str, answers))"
    },
    {
        "number": 4473,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    answers = []\n    \n    for _ in range(t):\n        a, b, k = map(int, stdin.readline().strip().split())\n        \n        x = 0\n        for i in range(k):\n            if i % 2 == 0:\n                x += a\n            else:\n                x -= b\n        \n        answers.append(x)\n    \n    return \"\\n\".join(map(str, answers))\n"
    },
    {
        "number": 4474,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split()[0])\n    result = []\n    \n    for _ in range(q):\n        n = int(input())\n        m = n\n        while not is_good(m):\n            m += 1\n        result.append(str(m))\n    \n    return \"\\n\".join(result)\n\ndef"
    },
    {
        "number": 4474,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split()[0])\n    queries = []\n    for _ in range(q):\n        n = int(stdin.split()[1])\n        queries.append(n)\n\n    def is_good_number(number: int) -> bool:\n        while number > 0:\n            if number % 3 == 0:\n                number //= 3\n            else:\n                return False\n        return True\n\n    def next_good_number(number: int) -> int:\n        while not is_good_number(number):\n            number += 1\n        return number\n\n    results = []\n    for n in queries:\n        results.append(next_good_number(n))\n\n    return \" \".join(str(result) for result in results)"
    },
    {
        "number": 4474,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def is_good_number(n: int) -> bool:\n        while n > 0:\n            remainder = n % 3\n            if remainder == 0:\n                n //= 3\n            elif remainder == 1:\n                n -= 1\n            else:\n                return False\n        return True\n\n    def find_smallest_good_number(n: int) -> int:\n        while True:\n            if is_good_number(n):\n                return n\n            n += 1\n\n    q = int(stdin.readline())\n    result = []\n    for _ in range(q):\n        n = int(stdin.readline())\n        result.append(str(find_smallest_good_number(n)))\n    return \"\\n\".join(result)"
    },
    {
        "number": 4474,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split()[0])\n    queries = [int(x) for x in stdin.split()[1:]]\n    result = []\n    \n    for n in queries:\n        m = n\n        while True:\n            if is_good_number(m):\n                result.append(str(m))\n                break\n            else:\n                m += 1\n    \n    return \"\\n\".join(result)\n\ndef"
    },
    {
        "number": 4474,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    good_numbers = []\n    i = 1\n    while len(good_numbers) < n:\n        if is_good_number(i):\n            good_numbers.append(i)\n        i += 1\n    return str(good_numbers[n-1])\n\ndef"
    },
    {
        "number": 4474,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_good(n: int) -> bool:\n        while n > 1:\n            if n % 3 == 0:\n                n //= 3\n            else:\n                return False\n        return True\n\n    def find_good_number(n: int) -> int:\n        m = n\n        while not is_good(m):\n            m += 1\n        return m\n\n    q = int(input())\n    queries = []\n    for _ in range(q):\n        n = int(input())\n        queries.append(n)\n\n    results = [find_good_number(n) for n in queries]\n\n    return '\\n'.join(map(str, results))"
    },
    {
        "number": 4474,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.strip().split()[0])\n    result = []\n\n    for _ in range(q):\n        n = int(input())\n        m = n\n        found = False\n\n        while not found:\n            found = True\n            for i in range(21):\n                for j in range(i + 1, 21):\n                    if m == 3 ** i + 3 ** j:\n                        m += 1\n                        found = False\n                        break\n                if not found:\n                    break\n\n        result.append(m)\n\n    return \"\\n\".join(map(str, result))\n\ninput_data = \"8\\n1\\n2\\n6\\n13\\n14\\n3620\\n10000\\n1000000000000000000\"\nprint(solution(input_data)) "
    },
    {
        "number": 4474,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.splitlines()[0])\n    input_lines = stdin.splitlines()[1:]\n    \n    for i in range(queries):\n        n = int(input_lines[i])\n        m = n\n        while not is_good_number(m):\n            m += 1\n        print(m)\n\ndef"
    },
    {
        "number": 4474,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.strip().split()[0])\n    queries = stdin.strip().split('\\n')[1:]\n    result = []\n    \n    for n in queries:\n        m = n\n        while not is_good_number(m):\n            m += 1\n        result.append(str(m))\n    \n    return \"\\n\".join(result)\n\ndef"
    },
    {
        "number": 4474,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split()[0])\n    results = []\n    for i in range(q):\n        n = int(input())\n        count = 0\n        while not is_good(n):\n            n += 1\n            count += 1\n        results.append(str(n))\n    return \"\\n\".join(results)\n\ndef"
    },
    {
        "number": 4475,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    n = int(stdin.readline())\n    for _ in range(n):\n        a, b, x, y, n = map(int, stdin.readline().split())\n        min_a = max(x, a - n)\n        min_b = max(y, b - n)\n        result.append(str(min_a * min_b))\n    return '\\n'.join(result)"
    },
    {
        "number": 4475,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def min_product(a: int, b: int, x: int, y: int, n: int) -> int:\n        if a < x or b < y:\n            return -1\n\n        a = max(x, a)\n        b = max(y, b)\n\n        while n > 0:\n            if a - x > b - y:\n                a -= 1\n            else:\n                b -= 1\n            n -= 1\n\n        return a * b\n\n    t = int(stdin.readline())\n    result = []\n\n    for _ in range(t):\n        a, b, x, y, n = map(int, stdin.readline().split())\n        result.append(min_product(a, b, x, y, n))\n\n    return \"\\n\".join(map(str, result))\n\ninput_string = \"\"\"7\n10 10 8 5 3\n12 8 8 7 2\n12343 43 4543 39 123212\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10\"\"\"\n\nprint(solution(input_string)) "
    },
    {
        "number": 4475,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def min_product(a, x, b, y, n):\n        if n == 0 or a == x or b == y:\n            return a * b\n        if a - 1 >= x and b >= y:\n            return min_product(a - 1, x, b, y, n - 1)\n        if a >= x and b - 1 >= y:\n            return min_product(a, x, b - 1, y, n - 1)\n        if a - 1 >= x and b - 1 >= y:\n            return min(min_product(a - 1, x, b, y, n - 1), min_product(a, x, b - 1, y, n - 1))\n\n    lines = stdin.splitlines()\n    output = []\n    for line in lines:\n        a, b, x, y, n = map(int, line.split())\n        output.append(min_product(a, x, b, y, n))\n    return \"\\n\".join(map(str, output))"
    },
    {
        "number": 4475,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    results = []\n    for _ in range(t):\n        a, b, x, y, n = map(int, stdin.split())\n        min_a = max(a, x)\n        min_b = max(b, y)\n        while n > 0 and min_a < a and min_b < b:\n            if a - x > b - y:\n                min_a -= 1\n            else:\n                min_b -= 1\n            n -= 1\n        results.append(min_a * min_b)\n    return \"\\n\".join(map(str, results))\n"
    },
    {
        "number": 4475,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    result = []\n    for i in range(1, t+1):\n        a, b, x, y, n = map(int, lines[i].split())\n        current_result = a * b\n        if a > x:\n            current_result = min(current_result, (a-x) * b + x * b)\n        if b > y:\n            current_result = min(current_result, a * (b-y) + a * y)\n        result.append(current_result)\n    return '\\n'.join(map(str, result))\n\nstdin = \"\"\"7\n10 10 8 5 3\n12 8 8 7 2\n12343 43 4543 39 123212\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10\"\"\"\n\nprint(solution(stdin)) "
    },
    {
        "number": 4475,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    result = []\n\n    for i in range(t):\n        a, b, x, y, n = map(int, stdin.split()[1:])\n        if a < x:\n            a = x\n        if b < y:\n            b = y\n\n        while n > 0 and b > y and a > x:\n            if a > b:\n                a -= 1\n            else:\n                b -= 1\n            n -= 1\n\n        result.append(a * b)\n\n    return \"\\n\".join(map(str, result))"
    },
    {
        "number": 4475,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.split(\"\\n\")\n    for i in range(0, len(test_cases), 2):\n        a, b, x, y, n = list(map(int, test_cases[i+1].split()))\n        min_a = max(a, x)\n        min_b = max(b, y)\n        count_a = 0\n        count_b = 0\n        if n == 0:\n            product = a * b\n        else:\n            if a == min_a:\n                count_a = n\n            else:\n                count_b = n\n            for i in range(n):\n                if count_a > 0:\n                    count_a -= 1\n                elif count_b > 0:\n                    count_b -= 1\n                    min_a -= 1\n            product = min_a * min_b\n        print(product)"
    },
    {
        "number": 4475,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    cases = int(stdin.split()[0])\n    for case in range(cases):\n        a, b, x, y, n = map(int, stdin.split()[1:])\n        while a > x or b > y:\n            if a - x > b - y:\n                a -= 1\n            else:\n                b -= 1\n        result.append(str(a * b))\n    return '\\n'.join(result)\n"
    },
    {
        "number": 4475,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        a, b, x, y, n = map(int, stdin.readline().strip().split())\n        min_a = max(x, a - n)\n        min_b = max(y, b - n)\n        product = min_a * min_b\n        print(product)\n        \n"
    },
    {
        "number": 4475,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.strip().split(\"\\n\")[0])\n    results = []\n\n    for i in range(1, test_cases + 1):\n        a, b, x, y, n = map(int, stdin.strip().split(\"\\n\")[i].split())\n        min_product = float('inf')\n        max_value = max(a, b)\n\n        for j in range(n + 1):\n            if j % 2 == 0:\n                current_product = max(a, max_value) * max(b, y)\n            else:\n                current_product = max(a, x) * max(b, max_value)\n\n            min_product = min(min_product, current_product)\n\n            if max_value == a:\n                a -= 1\n            else:\n                b -= 1\n\n        results.append(str(min_product))\n\n    return \"\\n\".join(results)"
    },
    {
        "number": 4476,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.readline())\n    result = []\n\n    for _ in range(test_cases):\n        a, b = map(int, stdin.readline().split())\n        moves = 0\n\n        if a > b:\n            moves += a - b\n        elif a < b:\n            moves += b - a\n\n        result.append(str(moves))\n\n    return \"\\n\".join(result)\n\n\ndef"
    },
    {
        "number": 4476,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    cases = []\n    for line in stdin.split(\"\\n\"):\n        a, b = map(int, line.split())\n        moves = 0\n        if a % 2 == 1 and b % 2 == 1:\n            moves += abs(a - b)\n        elif a % 2 == 0 and b % 2 == 0:\n            moves += abs(a - b)\n        else:\n            while a != b:\n                if a % 2 == 1:\n                    a += 1\n                else:\n                    a -= 1\n                moves += 1\n        cases.append(moves)\n    return \"\\n\".join(map(str, cases))"
    },
    {
        "number": 4476,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    res = []\n    \n    for _ in range(t):\n        a, b = map(int, stdin.readline().split())\n        count = 0\n        \n        while a != b:\n            if a > b:\n                if a % 2 == 0:\n                    a -= 1\n                else:\n                    a += 1\n            else:\n                if b % 2 == 0:\n                    b -= 1\n                else:\n                    b += 1\n            count += 1\n        \n        res.append(str(count))\n    \n    return \"\\n\".join(res)\n\ninput_str = \"\"\"5\n2 3\n10 10\n2 4\n7 4\n9 3\"\"\"\nprint(solution(input_str)) "
    },
    {
        "number": 4476,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    for i in range(1, t+1):\n        a, b = map(int, lines[i].split())\n        moves = 0\n        while a != b:\n            if a > b:\n                if a % 2 == 0:\n                    a -= 2\n                else:\n                    a -= 1\n            else:\n                if b % 2 == 0:\n                    a += 2\n                else:\n                    a += 1\n            moves += 1\n        result.append(str(moves))\n    return '\\n'.join(result)"
    },
    {
        "number": 4476,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    result = []\n    for _ in range(t):\n        a, b = map(int, input().split())\n        moves = 0\n        while a != b:\n            if a > b:\n                if a % 2 == 0:\n                    a -= 1\n                else:\n                    a += 1\n            else:\n                if b % 2 == 0:\n                    b -= 1\n                else:\n                    b += 1\n            moves += 1\n        result.append(str(moves))\n    return '\\n'.join(result)"
    },
    {
        "number": 4476,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    output = []\n    for i in range(t):\n        a, b = map(int, input().split())\n        moves = 0\n        if a > b:\n            while a > b:\n                if a % 2 == 0:\n                    a -= 1\n                else:\n                    a += 1\n                moves += 1\n        output.append(str(moves))\n    return \"\\n\".join(output)\n\ndef"
    },
    {
        "number": 4476,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    t = int(lines[0])\n    result = []\n    for i in range(1, t+1):\n        a, b = map(int, lines[i].split())\n        moves = 0\n        while a != b:\n            if a > b:\n                moves += 1\n                if a % 2 == 0:\n                    a -= 2\n                else:\n                    a += 1\n            else:\n                moves += 1\n                if b % 2 == 0:\n                    b -= 2\n                else:\n                    b += 1\n        result.append(str(moves))\n    return \"\\n\".join(result)\n"
    },
    {
        "number": 4476,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.split()[0])\n    result = []\n\n    for _ in range(cases):\n        a, b = map(int, stdin.split()[1:])\n        moves = 0\n        while a != b:\n            if a % 2 == 0:\n                a -= 1\n            else:\n                a += 1\n            moves += 1\n        result.append(moves)\n\n    return '\\n'.join(map(str, result))\n"
    },
    {
        "number": 4476,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    result = []\n\n    for i in range(1, t + 1):\n        a, b = map(int, stdin.split('\\n')[i].split())\n\n        if a == b:\n            result.append(\"0\")\n        else:\n            moves = 0\n            while a != b:\n                if a > b:\n                    if a % 2 == 0:\n                        a -= 1\n                    else:\n                        a += 1\n                else:\n                    if a % 2 == 0:\n                        a += 1\n                    else:\n                        a -= 1\n                moves += 1\n            result.append(str(moves))\n\n    return '\\n'.join(result)"
    },
    {
        "number": 4476,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        a, b = map(int, stdin.readline().split())\n        count = 0\n        while a != b:\n            if a < b:\n                x = min(b - a, 2)\n                a += x\n                count += x\n            else:\n                y = min(a - b, 2)\n                a -= y\n                count += y\n        print(count)"
    },
    {
        "number": 4477,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    test_cases = stdin.split('\\n')[1:]\n    \n    for test_case in test_cases:\n        x = int(test_case)\n        count = 0\n        for i in range(1, 10):\n            count += len(str(i)) * (x // (10**len(str(i))))\n            count += 1 if x // (10**len(str(i))) % 10 == i else 0\n        \n        print(count)"
    },
    {
        "number": 4477,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The function takes the input string as a parameter, processes each test case and returns the output string.\n    \"\"\"\n    output = []\n    for test_case in stdin.split(\"\\n\"):\n        x = int(test_case)\n        digits = len(str(x))\n        keypresses = sum(range(digits)) + digits\n        output.append(keypresses)\n    return \"\\n\".join(map(str, output))"
    },
    {
        "number": 4477,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    for x in stdin.split(\"\\n\"):\n        if x == \"\":\n            continue\n        x = int(x)\n        key_presses = 0\n        for digit in range(1, 10):\n            digit_count = sum(1 for d in str(x) if d == str(digit))\n            if digit_count > 0:\n                key_presses += digit_count * (digit + 1)\n        result.append(str(key_presses))\n    return \"\\n\".join(result)\n\ndef"
    },
    {
        "number": 4477,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    output = []\n    for i in range(t):\n        x = int(stdin.split()[i+1])\n        digits = len(str(x))\n        calls = 0\n        for i in range(1, 10):\n            calls += digits\n            digits -= 1\n        output.append(str(calls))\n    return \"\\n\".join(output)"
    },
    {
        "number": 4477,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.strip().split()[0])\n    result = []\n    for x in stdin.strip().split()[1:]:\n        x = int(x)\n        digits = len(str(x))\n        result.append(digits + (digits * digits - digits) // 2)\n    return \"\\n\".join(map(str, result))\n\ninput_data = \"\"\"\n4\n22\n9999\n1\n777\n\"\"\"\n\noutput_data = solution(input_data)\nprint(output_data) "
    },
    {
        "number": 4477,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.split(\"\\n\")[0])\n    output = []\n\n    for i in range(1, test_cases + 1):\n        x = int(stdin.split(\"\\n\")[i])\n        digits = str(x)[0]\n        total_digits = 0\n\n        for j in range(1, 10):\n            total_digits += len(str(j * int(digits)))\n\n        output.append(total_digits)\n\n    return \"\\n\".join(map(str, output))\n\ninput_string = \"4\\n22\\n9999\\n1\\n777\"\nprint(solution(input_string)) "
    },
    {
        "number": 4477,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def get_digit(n: int) -> int:\n        return int(str(n)[0])\n\n    def get_boring_apartments(digit: int) -> List[int]:\n        return [digit * (10 ** i) for i in range(4)]\n\n    def count_pressed_keys(answer: int) -> int:\n        digit = get_digit(answer)\n        boring_apartments = get_boring_apartments(digit)\n        count = 0\n        for i in range(1, 5):\n            count += len(boring_apartments) ** i\n        return count\n\n    lines = stdin.splitlines()\n    test_cases = int(lines[0])\n    outputs = []\n\n    for i in range(1, test_cases + 1):\n        answer = int(lines[i])\n        output = count_pressed_keys(answer)\n        outputs.append(output)\n\n    return \"\\n\".join(map(str, outputs))"
    },
    {
        "number": 4477,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.strip())\n    output = []\n    for _ in range(test_cases):\n        x = int(input().strip())\n        digits = len(str(x))\n        boring = True\n        for digit in str(x):\n            if digit != str(x)[0]:\n                boring = False\n                break\n        total_keys = 0\n        if boring:\n            for i in range(1, 10):\n                for j in range(1, digits):\n                    total_keys += 1\n                for j in range(1, digits):\n                    total_keys += 1\n        output.append(str(total_keys))\n    return \"\\n\".join(output)"
    },
    {
        "number": 4477,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    tests = int(stdin.strip())\n    answers = []\n    for test in range(tests):\n        apartment = int(input())\n        count = 0\n        for i in range(1, 10):\n            count += len(str(i)) + 1\n            for j in range(1, 10):\n                if str(i) * j == str(apartment):\n                    answers.append(count)\n                    break\n            else:\n                continue\n            break\n    return \"\\n\".join(map(str, answers))\n\ninput_string = \"4\\n22\\n9999\\n1\\n777\"\nresult = solution(input_string)\nprint(result) "
    },
    {
        "number": 4477,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def press_key(number: int) -> int:\n        return sum(len(str(i)) for i in range(1, number + 1))\n\n    def number_of_digits(apartment: int) -> int:\n        digit = str(apartment)[0]\n        return (apartment // int(digit)) * len(digit)\n\n    result = []\n    for x in stdin.strip().split(\"\\n\"):\n        apartments = press_key(9)\n        for i in range(1, 10):\n            apartments += number_of_digits(i)\n        result.append(str(apartments))\n    return \"\\n\".join(result)"
    },
    {
        "number": 4478,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline())\n    sequences = []\n    for i in range(k):\n        n = int(stdin.readline())\n        sequence = list(map(int, stdin.readline().split()))\n        sequences.append((n, sequence))\n\n    for i in range(k):\n        for j in range(k):\n            if i == j:\n                continue\n            if sequences[i][0] != sequences[j][0] - 1:\n                continue\n            for x in range(sequences[i][0]):\n                for y in range(sequences[j][0]):\n                    if sequences[i][1][x] + sequences[j][1][y] == sequences[i][1][x] + sequences[i][1][y]:\n                        return \"YES\\n{}\\n{}\\n{}\\n{}\".format(i+1, x+1, j+1, y+1)\n\n    return \"NO\"\n\ndef"
    },
    {
        "number": 4478,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.split('\\n')[0])\n    sequences = {}\n\n    for i in range(1, k + 1):\n        n = int(stdin.split('\\n')[i * 2 - 1])\n        sequence = stdin.split('\\n')[i * 2].split()\n        sequences[i] = (n, sequence)\n\n    def sum_of_sequence_without_element(sequence, index):\n        return sum(sequence[:index] + sequence[index + 1:])\n\n    def can_choose_two_sequences(sequences, i, j):\n        n_i, sequence_i = sequences[i]\n        n_j, sequence_j = sequences[j]\n        return sum_of_sequence_without_element(sequence_i, 0) == sum_of_sequence_without_element(sequence_j, n_j - 1) or sum_of_sequence_without_element(sequence_i, n_i - 1) == sum_of_sequence_without_element(sequence_j, 0)\n\n    for i in range(1, k):\n        for j in range(i + 1, k + 1):\n            if can_choose_two_sequences(sequences, i, j):\n                return \"YES\\n{} {} {}\\n{} {}\".format(i, 1, j, j, n_j - 1)\n\n    return \"NO\" "
    },
    {
        "number": 4478,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k, sequences = int(stdin.splitlines()[0]), []\n    for i in range(k):\n        n, sequence = int(stdin.splitlines()[i * 2 + 1]), list(map(int, stdin.splitlines()[i * 2 + 2].split()))\n        sequences.append((n, sequence))\n\n    for i in range(k):\n        for j in range(i + 1, k):\n            if sequences[i][0] != sequences[j][0]:\n                for x in range(sequences[i][0]):\n                    for y in range(sequences[j][0]):\n                        if sequences[i][1][x] + sequences[j][1][y] == sequences[i][1][x] + sequences[j][1][y] + sequences[i][1][x + 1] - sequences[j][1][y]:\n                            return f\"YES\\n{i+1} {x+1}\\n{j+1} {y+1}\"\n    return \"NO\"\n\ndef"
    },
    {
        "number": 4478,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline())\n    sequences = []\n    for i in range(k):\n        n_i = int(stdin.readline())\n        seq = [int(x) for x in stdin.readline().split()]\n        sequences.append((n_i, seq))\n\n    for i in range(k):\n        for j in range(i+1, k):\n            if sequences[i][0] == sequences[j][0]:\n                continue\n\n            n_i, seq_i = sequences[i]\n            n_j, seq_j = sequences[j]\n\n            if n_i == 0 or n_j == 0:\n                continue\n\n            for x in range(n_i):\n                new_seq_i = seq_i[:x] + seq_i[x+1:]\n                sum_seq_i = sum(new_seq_i)\n                for y in range(n_j):\n                    new_seq_j = seq_j[:y] + seq_j[y+1:]\n                    sum_seq_j = sum(new_seq_j)\n                    if sum_seq_i == sum_seq_j:\n                        return \"YES\\n\" + str(i+1) + \" \" + str(x+1) + \"\\n\" + str(j+1) + \" \" + str(y+1)\n\n    return \"NO\" "
    },
    {
        "number": 4478,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.split()[0])\n    sequences = []\n\n    for i in range(k):\n        length = int(stdin.split('\\n')[2*i+1])\n        sequence = stdin.split('\\n')[2*i+2].split()\n        sequences.append((length, sequence))\n\n    for i in range(k):\n        for j in range(i+1, k):\n            if sequences[i][0] == sequences[j][0] + 1 and sum(sequences[i][1]) == sum(sequences[j][1]):\n                return \"YES\\n{}\\n{}\\n{}\\n{}\\n\".format(i+1, 1, j+1, sequences[i][0])\n\n    return \"NO\""
    },
    {
        "number": 4478,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    k = int(lines[0])\n    sequences = {}\n\n    for i in range(1, k + 1):\n        n = int(lines[i * 2 - 1])\n        sequence = list(map(int, lines[i * 2].split()))\n        sequences[i] = (n, sequence)\n\n    for i in range(1, k):\n        for j in range(i + 1, k + 1):\n            n1, seq1 = sequences[i]\n            n2, seq2 = sequences[j]\n\n            if n1 == 0 or n2 == 0:\n                continue\n\n            for x in range(1, n1 + 1):\n                for y in range(1, n2 + 1):\n                    if sum(seq1[:x - 1] + seq1[x:]) == sum(seq2[:y - 1] + seq2[y:]):\n                        return \"YES\\n{}\\n{}\\n{}\\n{}\\n\".format(i, x, j, y)\n\n    return \"NO\"\n\ninput_str = \"\"\"2\n5\n2 3 1 3 2\n6\n1 1 2 2 2 1\n\"\"\"\noutput = solution(input_str)\nprint(output) "
    },
    {
        "number": 4478,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline().strip())\n    sequences = []\n    for i in range(k):\n        n = int(stdin.readline().strip())\n        sequence = [int(x) for x in stdin.readline().strip().split()]\n        sequences.append((i, n, sequence))\n\n    for i in range(k):\n        for j in range(i + 1, k):\n            for x in range(sequences[i][1]):\n                for y in range(sequences[j][1]):\n                    if sum(sequences[i][2][:x] + sequences[i][2][x+1:]) == sum(sequences[j][2][:y] + sequences[j][2][y+1:]):\n                        return \"YES\\n{} {} {}\\n{} {} {}\\n\".format(i+1, x+1, j+1, y+1)\n    return \"NO\""
    },
    {
        "number": 4478,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def check_sequences(sequences: List[List[int]], i: int, j: int) -> bool:\n        sequence1 = sequences[i]\n        sequence2 = sequences[j]\n\n        if len(sequence1) != len(sequence2):\n            return False\n\n        total_sum = sum(sequence1) + sum(sequence2)\n\n        for x in range(len(sequence1)):\n            for y in range(len(sequence2)):\n                if x != y:\n                    new_sequence1 = sequence1[:x] + sequence1[x+1:]\n                    new_sequence2 = sequence2[:y] + sequence2[y+1:]\n                    if sum(new_sequence1) + sum(new_sequence2) == total_sum:\n                        return True\n        return False\n\n    lines = stdin.split('\\n')\n    k = int(lines[0])\n\n    sequences = []\n    for i in range(k):\n        n = int(lines[2*i+1])\n        sequence = list(map(int, lines[2*i+2].split()))\n        sequences.append(sequence)\n\n    for i in range(k):\n        for j in range(i+1, k):\n            if check_sequences(sequences, i, j):\n                return \"YES\\n{}\\n{}\\n{}\\n{}\".format(i+1, 1, j+1, 1)\n    return \"NO\"\n\ndef"
    },
    {
        "number": 4478,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline())\n    sequences = []\n    for _ in range(k):\n        n = int(stdin.readline())\n        sequence = list(map(int, stdin.readline().split()))\n        sequences.append((n, sequence))\n    \n    for i in range(k):\n        for j in range(i+1, k):\n            sum_i = sum(sequences[i][1])\n            sum_j = sum(sequences[j][1])\n            if sum_i == sum_j:\n                continue\n            \n            min_sum = min(sum_i, sum_j)\n            max_sum = max(sum_i, sum_j)\n            \n            if max_sum - min_sum > 1:\n                continue\n            \n            for x in range(sequences[i][0]):\n                new_sum_i = sum_i - sequences[i][1][x]\n                for y in range(sequences[j][0]):\n                    new_sum_j = sum_j - sequences[j][1][y]\n                    if new_sum_i == new_sum_j:\n                        return \"YES\\n{}\\n{}\\n{}\\n{}\".format(i+1, x+1, j+1, y+1)\n    \n    return \"NO\"\n\n\nwith open(\"input.txt\", \"r\") as stdin:\n    with open(\"output.txt\", \"w\") as stdout:\n        stdout.write(solution(stdin))"
    },
    {
        "number": 4478,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.splitlines()[0])\n    sequences = []\n    for i in range(k):\n        n = int(stdin.splitlines()[2 * i + 1])\n        sequence = list(map(int, stdin.splitlines()[2 * i + 2].split()))\n        sequences.append(sequence)\n\n    for i in range(k):\n        for j in range(i + 1, k):\n            if len(sequences[i]) == len(sequences[j]):\n                continue\n            if len(sequences[i]) < len(sequences[j]):\n                min_seq, max_seq = sequences[i], sequences[j]\n            else:\n                min_seq, max_seq = sequences[j], sequences[i]\n            min_seq_sum = sum(min_seq)\n            max_seq_sum = sum(max_seq)\n            for x in range(len(min_seq)):\n                new_min_seq_sum = min_seq_sum - min_seq[x]\n                new_max_seq_sum = max_seq_sum + min_seq[x]\n                if new_min_seq_sum == new_max_seq_sum:\n                    return \"YES\\n{}\\n{}\\n{}\\n{}\\n\".format(i + 1, x + 1, j + 1, x + 1)\n    return \"NO\"\n\ninput_data = \"\"\"2\n5\n2 3 1 3 2\n6\n1 1 2 2 2 1\"\"\"\noutput = solution(input_data)\nprint(output) "
    },
    {
        "number": 4479,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, K = [int(x) for x in stdin.split(',')]\n    A.sort(reverse=True)\n    result = 0\n    for _ in range(K):\n        for i in range(len(A)):\n            if A[i] > 0:\n                result += A[i]\n                A[i] = -A[i]\n                break\n    return str(result)\n"
    },
    {
        "number": 4479,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, K = stdin.split()\n    A = list(map(int, A))\n    K = int(K)\n    max_sum = sum(A)\n    \n    for i in range(K):\n        for j in range(len(A)):\n            A[j] = -A[j]\n            max_sum = max(max_sum, sum(A))\n            A[j] = -A[j]\n    \n    return str(max_sum)"
    },
    {
        "number": 4479,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, K = list(map(int, input().split()))\n    A = [abs(x) for x in A]\n    A.sort()\n    index = 0\n    while K > 0 and index < len(A):\n        A[index] = -A[index]\n        K -= 1\n        index += 1\n    return str(sum(A))"
    },
    {
        "number": 4479,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, K = [int(x) for x in stdin.split()]\n    n = len(A)\n    result = [0]*n\n    for i in range(n):\n        result[i] = -A[i] if i < K else A[i]\n    return str(sum(result))"
    },
    {
        "number": 4479,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_array, k = stdin.split()\n    A = list(map(int, input_array.split(',')))\n    K = int(k)\n    max_sum = 0\n    \n    for _ in range(K):\n        max_element_index = A.index(max(A))\n        A[max_element_index] = -A[max_element_index]\n        max_sum += abs(A[max_element_index])\n        \n    return str(max_sum)"
    },
    {
        "number": 4479,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, K = list(map(int, input().split()))\n    A = [i for i in range(len(A))]\n    A.sort(key=lambda x: abs(A[x]), reverse=True)\n    for i in range(K):\n        if A[i] < 0:\n            continue\n        A[A[i]] = -A[A[i]]\n    return str(max(A))\n\ninput_data = \"2 3\"\noutput = solution(input_data)\nprint(output) "
    },
    {
        "number": 4479,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, K = list(map(int, stdin.split()))\n    A.sort()\n    result = 0\n    for i in range(K):\n        result += A[i]\n        A[i] = -A[i]\n    return str(result)\n\ndef"
    },
    {
        "number": 4479,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    A = list(map(int, line[0].split(',')))\n    K = int(line[1])\n\n    for _ in range(K):\n        max_index = A.index(max(A))\n        A[max_index] = -A[max_index]\n\n    return str(sum(A))\n"
    },
    {
        "number": 4479,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    input_list = re.findall(r'\\d+', stdin)\n    A = list(map(int, input_list[0].split(',')))\n    K = int(input_list[1])\n\n    def max_sum(A, K):\n        A.sort()\n        max_sum = sum(A)\n        min_sum = sum(abs(x) for x in A)\n\n        for _ in range(K):\n            max_sum = max(max_sum, min_sum)\n            max_sum, min_sum = min_sum, max_sum\n\n        return max_sum\n\n    return str(max_sum(A, K))"
    },
    {
        "number": 4479,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, K = list(map(int, stdin.split()))\n    A = [-A[i] if i in range(K) else A[i] for i in range(len(A))]\n    return str(sum(A))"
    },
    {
        "number": 4480,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    total_sum = sum(A)\n    \n    if total_sum % 3 != 0:\n        return \"false\"\n    \n    target_sum = total_sum // 3\n    prefix_sum = 0\n    prefix_sum_dict = {0: True}\n    \n    for num in A:\n        prefix_sum += num\n        \n        if prefix_sum - target_sum in prefix_sum_dict:\n            return \"true\"\n        \n        if prefix_sum in prefix_sum_dict:\n            prefix_sum_dict[prefix_sum] = True\n            \n    return \"false\""
    },
    {
        "number": 4480,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    n = len(A)\n    prefix_sum = [0] * (n + 1)\n\n    for i in range(n):\n        prefix_sum[i + 1] = prefix_sum[i] + A[i]\n\n    for i in range(n - 2):\n        for j in range(i + 2, n - 1):\n            if prefix_sum[i + 1] == prefix_sum[j] and prefix_sum[j] == prefix_sum[n] - prefix_sum[i + 1]:\n                return \"true\"\n\n    return \"false\""
    },
    {
        "number": 4480,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    n = len(A)\n    prefix_sum = [0] * (n + 1)\n    \n    for i in range(n):\n        prefix_sum[i + 1] = prefix_sum[i] + A[i]\n    \n    for i in range(n - 2):\n        for j in range(i + 2, n):\n            if prefix_sum[i + 1] == prefix_sum[j] and prefix_sum[n] - prefix_sum[j + 1] == prefix_sum[i + 1]:\n                return \"true\"\n    \n    return \"false\""
    },
    {
        "number": 4480,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    total_sum = sum(A)\n    if total_sum % 3 != 0:\n        return \"false\"\n\n    target_sum = total_sum // 3\n    n = len(A)\n    dp = [False] * (target_sum + 1)\n    dp[0] = True\n\n    for i in range(n):\n        for j in range(target_sum, -1, -1):\n            if j >= A[i]:\n                dp[j] = dp[j] or dp[j - A[i]]\n\n    return \"true\" if dp[target_sum] else \"false\"\n"
    },
    {
        "number": 4480,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    import re\n\n    A = list(map(int, re.findall(r\"-?\\d+\", stdin)))\n\n    def find_partition(i, j):\n        if i + 1 == j:\n            return True\n        if i >= j:\n            return False\n        return (\n            A[i] + sum(A[i + 1 : j]) == sum(A[i + 1 : j]) + sum(A[j:])\n            and find_partition(i + 1, j)\n            and find_partition(i, j - 1)\n        )\n\n    return \"true\" if find_partition(0, len(A)) else \"false\""
    },
    {
        "number": 4480,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split(\",\")))\n    n = len(A)\n    total_sum = sum(A)\n    if total_sum % 3 != 0:\n        return \"false\"\n\n    target_sum = total_sum // 3\n    dp = [False] * (target_sum + 1)\n    dp[0] = True\n\n    for num in A:\n        for i in range(target_sum, num - 1, -1):\n            dp[i] |= dp[i - num]\n\n    return \"true\" if dp[-1] else \"false\""
    },
    {
        "number": 4480,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    n = len(A)\n    s = sum(A)\n    \n    # Check if total sum is divisible by 3\n    if s % 3 != 0:\n        return \"false\"\n    \n    # Calculate the target sum for each part\n    target = s // 3\n    \n    # Initialize two arrays to store the cumulative sum of A and its sorted form\n    cum_sum = [0] * (n + 1)\n    sorted_cum_sum = [0] * (n + 1)\n    \n    # Calculate the cumulative sum of A and its sorted form\n    for i in range(n):\n        cum_sum[i + 1] = cum_sum[i] + A[i]\n        sorted_cum_sum[i] = cum_sum[i]\n    sorted_cum_sum.sort()\n    \n    # Check if there exists i and j such that the two parts have the same sum\n    for i in range(n - 1):\n        if cum_sum[i] == target:\n            for j in range(i + 1, n):\n                if cum_sum[j] == cum_sum[i] + target:\n                    return \"true\"\n    \n    # Check if there exists i and j such that the two parts have the same sum (when A is sorted)\n    for i in range(n - 1):\n        if sorted_cum_sum[i] == target:\n            for j in range(i + 1, n):\n                if sorted_cum_sum[j] == sorted_cum_sum[i] + target:\n                    return \"true\"\n    \n    return \"false\""
    },
    {
        "number": 4480,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    n = len(A)\n    \n    # Calculate prefix sum\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + A[i - 1]\n    \n    # Check if we can split the array into three parts with equal sums\n    for i in range(1, n - 1):\n        for j in range(i + 1, n):\n            if prefix_sum[i] == prefix_sum[j] == prefix_sum[n] - prefix_sum[j]:\n                return \"true\"\n    return \"false\""
    },
    {
        "number": 4480,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    n = len(A)\n    total_sum = sum(A)\n    if total_sum % 3 != 0:\n        return \"false\"\n    target_sum = total_sum // 3\n    prefix_sum = [0] * (n + 1)\n    for i in range(n):\n        prefix_sum[i + 1] = prefix_sum[i] + A[i]\n\n    def binary_search(left, right, target) -> bool:\n        while left <= right:\n            mid = (left + right) // 2\n            if prefix_sum[mid] == target:\n                return True\n            elif prefix_sum[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False\n\n    for i in range(n - 2):\n        for j in range(i + 2, n):\n            if binary_search(i + 1, j, target_sum):\n                if binary_search(j + 1, n - 1, target_sum):\n                    return \"true\"\n    return \"false\""
    },
    {
        "number": 4480,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    n = len(A)\n    \n    # Calculate the sum of the array\n    total_sum = sum(A)\n    \n    # Check if the total sum is divisible by 3\n    if total_sum % 3 != 0:\n        return \"false\"\n    \n    # Calculate the target sum for each partition\n    target_sum = total_sum // 3\n    \n    # Calculate the prefix sum array\n    prefix_sum = [0] * (n + 1)\n    for i in range(n):\n        prefix_sum[i + 1] = prefix_sum[i] + A[i]\n    \n    # Check if there is a partition with the target sum\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            if prefix_sum[i + 1] == target_sum and prefix_sum[j + 1] - prefix_sum[i] == target_sum and prefix_sum[n] - prefix_sum[j + 1] == 0:\n                return \"true\"\n    \n    return \"false\""
    },
    {
        "number": 4481,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    votes = lines[1:N+1]\n    count = {}\n\n    for vote in votes:\n        if vote in count:\n            count[vote] += 1\n        else:\n            count[vote] = 1\n\n    max_count = max(count.values())\n    result = [key for key, value in count.items() if value == max_count]\n    result.sort()\n\n    return '\\n'.join(result)"
    },
    {
        "number": 4481,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *votes = stdin.split()\n    n = int(n)\n    count = {}\n\n    for vote in votes:\n        if vote in count:\n            count[vote] += 1\n        else:\n            count[vote] = 1\n\n    max_count = max(count.values())\n    result = sorted([word for word, freq in count.items() if freq == max_count])\n\n    return \"\\n\".join(result)"
    },
    {
        "number": 4481,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    votes = stdin.split(\"\\n\")[1:-1]\n    vote_count = {}\n\n    for vote in votes:\n        if vote in vote_count:\n            vote_count[vote] += 1\n        else:\n            vote_count[vote] = 1\n\n    max_count = max(vote_count.values())\n    result = [vote for vote, count in vote_count.items() if count == max_count]\n    result.sort()\n\n    return \"\\n\".join(result)"
    },
    {
        "number": 4481,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    num_votes = int(lines[0])\n    vote_strings = lines[1:]\n\n    # Count the occurrences of each string\n    vote_counts = {}\n    for string in vote_strings:\n        if string not in vote_counts:\n            vote_counts[string] = 1\n        else:\n            vote_counts[string] += 1\n\n    # Find the maximum count\n    max_count = max(vote_counts.values())\n\n    # Filter the strings with the maximum count\n    result = [string for string, count in vote_counts.items() if count == max_count]\n\n    # Sort the result in lexicographical order\n    result.sort()\n\n    # Return the result as a newline-separated string\n    return '\\n'.join(result)"
    },
    {
        "number": 4481,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    votes = lines[1:n+1]\n    # count votes\n    count = {}\n    for vote in votes:\n        if vote in count:\n            count[vote] += 1\n        else:\n            count[vote] = 1\n    # find the maximum number of votes\n    max_count = max(count.values())\n    # find the strings with the maximum number of votes\n    result = []\n    for vote, num in count.items():\n        if num == max_count:\n            result.append(vote)\n    # sort the result in lexicographical order\n    result.sort()\n    # print the result\n    return \"\\n\".join(result)"
    },
    {
        "number": 4481,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    votes = stdin.split(\"\\n\")\n    N = int(votes[0])\n    count = {}\n    for i in range(1, N + 1):\n        vote = votes[i]\n        if vote not in count:\n            count[vote] = 1\n        else:\n            count[vote] += 1\n\n    max_count = max(count.values())\n    result = []\n    for vote, count in count.items():\n        if count == max_count:\n            result.append(vote)\n\n    result.sort()\n    return \"\\n\".join(result)\n\ndef"
    },
    {
        "number": 4481,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input by newline character\n    input_list = stdin.split(\"\\n\")\n    n = int(input_list[0])\n    votes = input_list[1:]\n    # Create a dictionary to store the count of each string\n    string_count = {}\n    for vote in votes:\n        if vote in string_count:\n            string_count[vote] += 1\n        else:\n            string_count[vote] = 1\n    # Find the most common string(s)\n    max_count = max(string_count.values())\n    most_common_strings = [string for string, count in string_count.items() if count == max_count]\n    # Sort the most common strings in lexicographical order\n    most_common_strings.sort()\n    # Print the most common strings\n    for string in most_common_strings:\n        print(string)"
    },
    {
        "number": 4481,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N = int(lines[0])\n    votes = lines[1:]\n\n    vote_count = {}\n    for vote in votes:\n        if vote in vote_count:\n            vote_count[vote] += 1\n        else:\n            vote_count[vote] = 1\n\n    max_count = max(vote_count.values())\n    result = [key for key, value in vote_count.items() if value == max_count]\n    result.sort()\n\n    return '\\n'.join(result)\n\ninput_data = \"\"\"7\nbeat\nvet\nbeet\nbed\nvet\nbet\nbeet\"\"\"\n\nprint(solution(input_data)) "
    },
    {
        "number": 4481,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    votes = {}\n    \n    for i in range(1, n+1):\n        vote = lines[i]\n        if vote in votes:\n            votes[vote] += 1\n        else:\n            votes[vote] = 1\n    \n    max_count = max(votes.values())\n    result = []\n    \n    for vote, count in sorted(votes.items()):\n        if count == max_count:\n            result.append(vote)\n    \n    return '\\n'.join(result)\n\ndef"
    },
    {
        "number": 4481,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    votes = stdin.split('\\n')[1:]\n    vote_count = {}\n\n    for vote in votes:\n        if vote not in vote_count:\n            vote_count[vote] = 0\n        vote_count[vote] += 1\n\n    max_count = max(vote_count.values())\n    result = [key for key, value in vote_count.items() if value == max_count]\n    result.sort()\n\n    return '\\n'.join(result)"
    },
    {
        "number": 4482,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    a = list(map(int, lines[1].split(\" \")))\n\n    a.sort()\n    total_cost = 0\n    index = 0\n\n    for i in range(n):\n        if i == 0:\n            continue\n        if a[i] == a[i - 1]:\n            continue\n        total_cost += (a[i] - a[index]) ** 2\n        a[index] = a[i]\n        index += 1\n\n    total_cost += (a[-1] - a[index]) ** 2\n\n    return str(total_cost)\n\n\nn, *a = map(int, input().split())\nprint(solution(f\"{n}\\n{' '.join(map(str, a))}\")) "
    },
    {
        "number": 4482,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, *numbers = stdin.split()\n    N = int(N)\n    numbers = [int(num) for num in numbers]\n\n    numbers.sort()\n    mid = N // 2\n    left_sum = sum([(num - i) ** 2 for i, num in enumerate(numbers[:mid], 1)])\n    right_sum = sum([(num - i) ** 2 for i, num in enumerate(numbers[mid:], 1)])\n\n    return str(min(left_sum, right_sum))\n\ninput_data = input()\nprint(solution(input_data)) "
    },
    {
        "number": 4482,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    n, *a = map(int, stdin.split())\n\n    # Find the minimum cost\n    min_cost = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            cost = (a[i] - a[j]) ** 2\n            if cost < min_cost:\n                min_cost = cost\n\n    # Return the result\n    return str(min_cost)"
    },
    {
        "number": 4482,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    sys.setrecursionlimit(100000)\n    N, *a = list(map(int, stdin.split()))\n    a.sort()\n    dp = [0] * (N + 1)\n\n    def helper(i: int, j: int) -> int:\n        if i >= N or j >= N:\n            return 0\n        if dp[i] != 0 and dp[j] != 0:\n            return dp[i], dp[j]\n        cost = (a[i] - a[j]) ** 2\n        dp[i], dp[j] = cost, cost\n        min_cost, min_i = helper(i + 1, j)\n        if min_cost > dp[i]:\n            min_cost = dp[i]\n            min_i = i\n        min_cost, min_j = helper(i, j + 1)\n        if min_cost > dp[j]:\n            min_cost = dp[j]\n            min_j = j\n        return min_cost, min_i\n\n    min_cost, _ = helper(0, 0)\n    return str(min_cost)"
    },
    {
        "number": 4482,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, *arr = map(int, stdin.split())\n    arr.sort()\n    total_cost = 0\n    for i in range(N):\n        total_cost += (arr[i] - arr[i - i % 2]) ** 2\n    return str(total_cost)\n"
    },
    {
        "number": 4482,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *nums = map(int, stdin.split())\n    nums.sort()\n    target = nums[n // 2]\n    total_cost = sum([(num - target) ** 2 for num in nums])\n    return str(total_cost)\n\ndef"
    },
    {
        "number": 4482,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def transform_cost(x: int, y: int) -> int:\n        return (x - y) ** 2\n\n    def min_cost_to_make_equal(nums: List[int]) -> int:\n        nums.sort()\n        if len(nums) % 2 == 0:\n            mid = len(nums) // 2\n            return sum(transform_cost(nums[i], nums[mid]) for i in range(len(nums)))\n        else:\n            mid = len(nums) // 2\n            return sum(transform_cost(nums[i], nums[mid]) for i in range(mid)) + sum(\n                transform_cost(nums[i], nums[mid + 1]) for i in range(mid, len(nums)))\n\n    N = int(stdin.readline())\n    nums = list(map(int, stdin.readline().split()))\n\n    result = min_cost_to_make_equal(nums)\n    return str(result)\n\ninput_str = \"\"\"2\n4 8\"\"\"\nprint(solution(input_str)) "
    },
    {
        "number": 4482,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    integers = list(map(int, stdin.split()[1:]))\n    integers.sort()\n    result = 0\n    for i in range(1, N):\n        result += (integers[i] - integers[i-1]) ** 2\n    result += (integers[0] - integers[N-1]) ** 2\n    return str(result)"
    },
    {
        "number": 4482,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, a_list = map(int, stdin.split())\n    a_set = set(a_list)\n    min_cost = float('inf')\n    \n    for num in a_set:\n        cost = sum([(a - num) ** 2 for a in a_list])\n        min_cost = min(min_cost, cost)\n    \n    return str(min_cost)"
    },
    {
        "number": 4482,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N, *a_i = map(int, stdin.split())\n    \n    # sort the integers\n    a_i.sort()\n    \n    # calculate the minimum cost\n    total_cost = 0\n    for i in range(N - 1):\n        total_cost += (a_i[i] - a_i[i + 1]) ** 2\n        \n    return str(total_cost)"
    },
    {
        "number": 4483,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b = map(int, stdin.split())\n    cake_price = a\n    donut_price = b\n    donuts_bought = x // b\n    amount_left = x - cake_price - donuts_bought * donut_price\n    return str(amount_left)"
    },
    {
        "number": 4483,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = [int(x) for x in stdin.split()]\n    cake_cost = A\n    donuts_cost = B\n    total_cost = cake_cost + donuts_cost\n\n    cakes_bought = X // cake_cost\n    donuts_bought = (X % cake_cost) // donuts_cost\n\n    yen_left = X - (cakes_bought * cake_cost) - (donuts_bought * donuts_cost)\n\n    return str(yen_left)\n\ndef"
    },
    {
        "number": 4483,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.split())\n    cake_cost = A\n    donuts_cost = B\n    donuts_bought = X // donuts_cost\n    total_cost = cake_cost + donuts_bought * donuts_cost\n    amount_left = X - total_cost\n    return str(amount_left)"
    },
    {
        "number": 4483,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.split())\n    cake_price = A\n    donut_price = B\n    cake_count = 1\n    donut_count = X // B\n\n    while donut_count * B > X:\n        donut_count -= 1\n\n    total_donut_cost = donut_count * donut_price\n    cake_count += donut_count\n    total_cost = cake_count * cake_price + total_donut_cost\n    money_left = X - total_cost\n\n    return str(money_left)"
    },
    {
        "number": 4483,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.split())\n    cake_price = A\n    donut_price = B\n    donuts_bought = X // donut_price\n    amount_left = X - cake_price - donuts_bought * donut_price\n    return str(amount_left)"
    },
    {
        "number": 4483,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b = map(int, stdin.split())\n    cake_cost = a\n    donut_cost = b\n    cakes_bought = x // a\n    donuts_bought = x // b\n\n    total_cost = cake_cost * cakes_bought + donut_cost * donuts_bought\n    return str(x - total_cost)\n\ndef"
    },
    {
        "number": 4483,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.split())\n    cake_price = A\n    donut_price = B\n    total_price = cake_price + donut_price * donuts_bought\n    amount_left = X - total_price\n    return str(amount_left)"
    },
    {
        "number": 4483,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.split())\n    cake_price = A\n    donut_price = B\n    total_price = X\n\n    cake_count = 1\n    donut_count = total_price // donut_price\n\n    while total_price - (cake_count * cake_price + donut_count * donut_price) >= 0:\n        donut_count += 1\n\n    return str(total_price - (cake_count * cake_price + donut_count * donut_price))"
    },
    {
        "number": 4483,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.split())\n    cake_cost = A\n    donuts_cost = B\n    donuts_bought = X // donuts_cost\n    total_spent = cake_cost + donuts_bought * donuts_cost\n    amount_left = X - total_spent\n    return str(amount_left)"
    },
    {
        "number": 4483,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.split())\n    cake_price = A\n    donut_price = B\n    donuts_bought = X // donut_price\n    cake_price_left = X - donuts_bought * donut_price\n\n    return str(cake_price_left)\n\ndef"
    },
    {
        "number": 4484,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n\n    mod = 10**9 + 7\n\n    count = 0\n\n    for i in range(N):\n        for j in range(M):\n            for k in range(N):\n                for l in range(M):\n                    if i != k and j != l:\n                        count += 1\n\n    return str(count % mod)\n"
    },
    {
        "number": 4484,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def count_arrangements(n_dogs, n_monkeys):\n        MOD = 10**9 + 7\n        result = 1\n        for i in range(n_dogs):\n            result *= n_monkeys + 1 - i\n            result %= MOD\n        return result\n\n    n_dogs, n_monkeys = map(int, stdin.split())\n    return str(count_arrangements(n_dogs, n_monkeys))"
    },
    {
        "number": 4484,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    result = 0\n    for i in range(N+M):\n        result += binomial(N+M-1, i) * binomial(N+M-i-1, M)\n    return str(result % (10**9 + 7))\n\ndef"
    },
    {
        "number": 4484,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    mod = 10**9+7\n    total = (N + M)\n    result = 1\n    \n    for i in range(1, total):\n        result = (result * (total - i)) % mod\n    \n    for i in range(1, N + 1):\n        result = (result * i) % mod\n    \n    for i in range(1, M + 1):\n        result = (result * i) % mod\n    \n    return str(result)"
    },
    {
        "number": 4484,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    MOD = 10**9 + 7\n\n    if N == 0 and M == 0:\n        return \"0\"\n\n    if N == 1 and M == 1:\n        return \"1\"\n\n    if N == 1:\n        return str((M * (M - 1)) % MOD)\n\n    if M == 1:\n        return str((N * (N - 1)) % MOD)\n\n    return str(((N * M) * (N * M - 1)) % MOD)\n\ndef"
    },
    {
        "number": 4484,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def get_permutations(n, m):\n        def get_count(n, m, i, j):\n            if i == n and j == m:\n                return 1\n            if i == n:\n                return get_count(n, m - 1, i, j + 1)\n            if j == m:\n                return get_count(n - 1, m, i + 1, j)\n            return get_count(n - 1, m, i + 1, j) + get_count(n, m - 1, i, j + 1)\n\n        return get_count(n, m, 0, 0)\n\n    n, m = list(map(int, stdin.split()))\n    result = get_permutations(n, m)\n    return str(result)"
    },
    {
        "number": 4484,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    count = 0\n    for i in range(2**(n+m)):\n        binary = bin(i)[2:]\n        if binary.count('1') == n + m:\n            count += 1\n    return str(count % (10**9 + 7))"
    },
    {
        "number": 4484,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, m = map(int, stdin.split())\n\n    # calculate the number of arrangements\n    count = (n * m) * (n * m - 1) // 2\n\n    # apply modulo operation\n    count %= 10**9 + 7\n\n    return str(count)"
    },
    {
        "number": 4484,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    MOD = 10**9 + 7\n    \n    # Initialize a 2D array to store the number of possible arrangements for each pair of animals\n    dp = [[0] * (M+1) for _ in range(N+1)]\n    \n    # Base case: If there are no dogs or monkeys, there is only one possible arrangement\n    for i in range(N+1):\n        dp[i][0] = 1\n    for j in range(M+1):\n        dp[0][j] = 1\n    \n    # Fill in the rest of the table using the recurrence relation\n    for i in range(1, N+1):\n        for j in range(1, M+1):\n            dp[i][j] = (dp[i-1][j] + dp[i][j-1]) % MOD\n    \n    # Return the result\n    return str(dp[N][M])"
    },
    {
        "number": 4484,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    modulo = 10**9 + 7\n\n    count = 0\n\n    for i in range(N):\n        for j in range(M):\n            count += (N - i) * (M - j)\n            count %= modulo\n\n    return str(count)\n\nstdin = input(\"Enter the number of dogs and monkeys separated by space: \")\nprint(solution(stdin)) "
    },
    {
        "number": 4485,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, services = stdin.split(\"\\n\")\n    N = int(N)\n    M = int(M)\n    services = [tuple(map(int, line.split())) for line in services.split(\"\\n\") if line]\n\n    def find_path(start: int, end: int, visited: set, path: list) -> bool:\n        if start == end:\n            return True\n        visited.add(start)\n        for i in range(M):\n            if (services[i][0] == start and services[i][1] not in visited) or (services[i][1] == start and services[i][0] not in visited):\n                path.append(i)\n                if find_path(services[i][0] if start == services[i][1] else services[i][1], end, visited, path):\n                    return True\n                path.pop()\n        visited.remove(start)\n        return False\n\n    if find_path(1, N, set(), []):\n        return \"POSSIBLE\"\n    else:\n        return \"IMPOSSIBLE\""
    },
    {
        "number": 4485,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_islands, num_services = map(int, stdin.readline().split())\n    island_pairs = []\n    \n    for _ in range(num_services):\n        a, b = map(int, stdin.readline().split())\n        island_pairs.append((a, b))\n    \n    visited = [False] * (num_islands + 1)\n    stack = [(1, visited.copy(), [])]\n    \n    while stack:\n        current_island, visited, path = stack.pop()\n        \n        if current_island == num_islands:\n            return \"POSSIBLE\"\n        \n        for next_island in range(1, num_islands + 1):\n            if not visited[next_island]:\n                if (current_island, next_island) in island_pairs or (next_island, current_island) in island_pairs:\n                    new_visited = visited.copy()\n                    new_visited[next_island] = True\n                    new_path = path + [(current_island, next_island)]\n                    stack.append((next_island, new_visited, new_path))\n                    \n    return \"IMPOSSIBLE\"\n\n\ndef"
    },
    {
        "number": 4485,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[0:2])\n    boats = []\n    for line in stdin.split('\\n')[1:]:\n        a, b = map(int, line.split())\n        boats.append((a, b))\n    \n    def check_service(island_a, island_b, visited_islands, boats) -> bool:\n        visited_islands.add(island_a)\n        for boat in boats:\n            if island_a == boat[0]:\n                if boat[1] not in visited_islands and check_service(boat[1], island_b, visited_islands.copy(), boats):\n                    return True\n        return False\n\n    if check_service(1, N, set(), boats):\n        return \"POSSIBLE\"\n    else:\n        return \"IMPOSSIBLE\""
    },
    {
        "number": 4485,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M, services = stdin.split(\"\\n\")\n    N = int(N)\n    M = int(M)\n    services = [list(map(int, line.split())) for line in services.split(\"\\n\")[:M]]\n\n    def is_connected(i: int, j: int, visited: set) -> bool:\n        if i == j:\n            return True\n        if i in visited:\n            return False\n        visited.add(i)\n        for a, b in services:\n            if a == i:\n                if is_connected(b, j, visited):\n                    return True\n            if b == i:\n                if is_connected(a, j, visited):\n                    return True\n        return False\n\n    if is_connected(1, N, set()):\n        return \"POSSIBLE\"\n    return \"IMPOSSIBLE\""
    },
    {
        "number": 4485,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M, services = list(map(int, stdin.split()))\n    graph = [[0] * (N + 1) for _ in range(N + 1)]\n\n    for _ in range(M):\n        a, b = map(int, input().split())\n        graph[a][b] = 1\n        graph[b][a] = 1\n\n    def dfs(graph, start, end, visited, path):\n        if start == end:\n            return True\n        visited[start] = True\n        for i in range(1, len(graph)):\n            if graph[start][i] == 1 and not visited[i]:\n                path.append(i)\n                if dfs(graph, i, end, visited, path):\n                    return True\n                path.pop()\n        visited[start] = False\n        return False\n\n    path1 = []\n    path2 = []\n    dfs(graph, 1, N, [False] * (N + 1), path1)\n    dfs(graph, 1, N, [False] * (N + 1), path2)\n\n    if len(path1) == 2 or len(path2) == 2:\n        return \"POSSIBLE\"\n    else:\n        return \"IMPOSSIBLE\"\n"
    },
    {
        "number": 4485,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.splitlines()[:2])\n    islands = stdin.splitlines()[2:]\n    adj_list = {i: set() for i in range(1, N + 1)}\n    \n    for island in islands:\n        a, b = map(int, island.split())\n        adj_list[a].add(b)\n        adj_list[b].add(a)\n    \n    visited = [False] * (N + 1)\n    visited[1] = True\n    queue = [1]\n    \n    while queue:\n        current = queue.pop(0)\n        for neighbor in adj_list[current]:\n            if not visited[neighbor]:\n                visited[neighbor] = True\n                queue.append(neighbor)\n                if neighbor == N:\n                    return \"POSSIBLE\"\n    \n    return \"IMPOSSIBLE\""
    },
    {
        "number": 4485,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M, services = map(int, stdin.split())\n    islands = [0] * (N + 1)\n\n    for i in range(M):\n        a, b = map(int, stdin.split())\n        islands[a] += 1\n        islands[b] += 1\n\n    if islands[1] == 0 or islands[N] == 0:\n        return \"IMPOSSIBLE\"\n\n    for i in range(1, N):\n        if islands[i] == 0:\n            return \"POSSIBLE\"\n\n    return \"IMPOSSIBLE\""
    },
    {
        "number": 4485,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.splitlines()[0].split())\n    services = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    if (1, N) in services:\n        return \"POSSIBLE\"\n\n    for i in range(M):\n        for j in range(i + 1, M):\n            if (services[i] + services[j]) == (1, N):\n                return \"POSSIBLE\"\n\n    return \"IMPOSSIBLE\"\n"
    },
    {
        "number": 4485,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, input().split())\n    services = []\n    for _ in range(M):\n        a, b = map(int, input().split())\n        services.append((a, b))\n\n    if (1, N) in services:\n        return \"POSSIBLE\"\n\n    for i in range(M):\n        for j in range(i+1, M):\n            if (services[i][0], services[j][1]) == (1, N) or (services[i][1], services[j][0]) == (1, N):\n                return \"POSSIBLE\"\n\n    return \"IMPOSSIBLE\""
    },
    {
        "number": 4485,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, m = map(int, lines[0].split())\n    services = [tuple(map(int, line.split())) for line in lines[1:-1]]\n    if (1, n) in services:\n        return \"POSSIBLE\"\n    start, end = 1, n\n    for service in services:\n        if service[0] == start:\n            if end in service:\n                return \"POSSIBLE\"\n            start = service[1]\n        elif service[1] == end:\n            if start in service:\n                return \"POSSIBLE\"\n            end = service[0]\n    return \"IMPOSSIBLE\"\n\nstdin = \"3 2\\n1 2\\n2 3\"\nprint(solution(stdin)) "
    },
    {
        "number": 4486,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    result = ''\n    for i in range(1, len(s), 2):\n        result += s[i]\n    return result"
    },
    {
        "number": 4486,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    result = ''\n    for i in range(1, len(s), 2):\n        result += s[i]\n    return result"
    },
    {
        "number": 4486,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    result = \"\"\n    for i in range(1, len(s), 2):\n        result += s[i]\n    return result"
    },
    {
        "number": 4486,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    result = \"\"\n    for i in range(1, len(s), 2):\n        result += s[i]\n    return result"
    },
    {
        "number": 4486,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    result = \"\"\n    for i in range(1, len(s), 2):\n        result += s[i]\n    return result"
    },
    {
        "number": 4486,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    result = []\n    for i in range(1, len(s), 2):\n        result.append(s[i])\n    return \"\".join(result)"
    },
    {
        "number": 4486,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    return \"\".join([s[i] for i in range(1, len(s), 2)])"
    },
    {
        "number": 4486,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    return \"\".join([s[i] for i in range(1, len(s), 2)])\n\ninput_string = input()\nresult = solution(input_string)\nprint(result)"
    },
    {
        "number": 4486,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    result = \"\"\n    for i in range(1, len(s), 2):\n        result += s[i]\n    return result"
    },
    {
        "number": 4486,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    result = \"\"\n    for i in range(1, len(s), 2):\n        result += s[i]\n    return result"
    },
    {
        "number": 4487,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    if a[-1] == b[0] and b[-1] == c[0]:\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef"
    },
    {
        "number": 4487,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.split()\n    if A[-1] == B[0] and B[-1] == C[0]:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4487,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.split()\n    \n    if A[-1] == B[0] and B[-1] == C[0]:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4487,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.split()\n    if len(A) > 1 and len(B) > 1 and len(C) > 1:\n        if A[-1] == B[0] and B[-1] == C[0]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4487,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.split()\n    if A[-1] == B[0] and B[-1] == C[0]:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4487,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.split()\n    if A[-1] == B[0] and B[-1] == C[0]:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4487,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    if len(words) != 3:\n        return \"NO\"\n\n    A, B, C = words\n    if A[-1] == B[0] and B[-1] == C[0]:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4487,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.split()\n    if len(A) != len(B) or len(B) != len(C):\n        return \"NO\"\n\n    if A[-1] != B[0] or B[-1] != C[0]:\n        return \"NO\"\n\n    return \"YES\""
    },
    {
        "number": 4487,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.split()\n    if A[-1] == B[0] and B[-1] == C[0]:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4487,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.split()\n    if A[-1] == B[0] and B[-1] == C[0]:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4488,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A > B:\n        return \"GREATER\"\n    elif A < B:\n        return \"LESS\"\n    else:\n        return \"EQUAL\""
    },
    {
        "number": 4488,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    \n    if A > B:\n        return \"GREATER\"\n    elif A < B:\n        return \"LESS\"\n    else:\n        return \"EQUAL\""
    },
    {
        "number": 4488,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        return \"GREATER\"\n    elif a < b:\n        return \"LESS\"\n    else:\n        return \"EQUAL\""
    },
    {
        "number": 4488,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n\n    if A > B:\n        return \"GREATER\"\n    elif A < B:\n        return \"LESS\"\n    else:\n        return \"EQUAL\""
    },
    {
        "number": 4488,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    if a > b:\n        return \"GREATER\"\n    elif a < b:\n        return \"LESS\"\n    else:\n        return \"EQUAL\""
    },
    {
        "number": 4488,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    \n    if A > B:\n        return \"GREATER\"\n    elif A < B:\n        return \"LESS\"\n    else:\n        return \"EQUAL\""
    },
    {
        "number": 4488,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A > B:\n        return \"GREATER\"\n    elif A < B:\n        return \"LESS\"\n    else:\n        return \"EQUAL\"\n\ninput_str = input()\nresult = solution(input_str)\nprint(result) "
    },
    {
        "number": 4488,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    \n    if A > B:\n        return \"GREATER\"\n    elif A < B:\n        return \"LESS\"\n    else:\n        return \"EQUAL\"\n    \n"
    },
    {
        "number": 4488,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A > B:\n        return \"GREATER\"\n    elif A < B:\n        return \"LESS\"\n    else:\n        return \"EQUAL\"\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4488,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A > B:\n        return \"GREATER\"\n    elif A < B:\n        return \"LESS\"\n    else:\n        return \"EQUAL\""
    },
    {
        "number": 4489,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    blue_cards = lines[1:n+1]\n    m = int(lines[n+1])\n    red_cards = lines[n+2:]\n\n    max_earning = 0\n\n    for blue_card in blue_cards:\n        earnings = blue_cards.count(blue_card) - red_cards.count(blue_card)\n        max_earning = max(max_earning, earnings)\n\n    return str(max_earning)"
    },
    {
        "number": 4489,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    s_blue_cards = lines[1:n+1]\n    m = int(lines[n+1])\n    s_red_cards = lines[n+2:]\n\n    # Initialize variables\n    max_money_earned = 0\n\n    # Iterate through each blue card and check if it matches the announced string\n    for blue_card in s_blue_cards:\n        # Calculate the money earned by announcing the string on the blue card\n        money_earned = s_blue_cards.count(blue_card) - s_red_cards.count(blue_card)\n        # Update the maximum money earned\n        if money_earned > max_money_earned:\n            max_money_earned = money_earned\n\n    # Return the maximum money earned\n    return str(max_money_earned)"
    },
    {
        "number": 4489,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N = int(lines[0])\n    blue_cards = lines[1:N+1]\n    M = int(lines[N+1])\n    red_cards = lines[N+2:]\n\n    max_profit = 0\n    for blue_card in blue_cards:\n        profit = 0\n        for red_card in red_cards:\n            if blue_card == red_card:\n                profit -= 1\n        max_profit = max(max_profit, profit)\n\n    return str(max_profit)"
    },
    {
        "number": 4489,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    blue_cards, red_cards = stdin.strip().split('\\n')\n    blue_cards = blue_cards.split('\\n')\n    red_cards = red_cards.split('\\n')\n\n    blue_cards_set = set(blue_cards)\n    red_cards_set = set(red_cards)\n\n    max_profit = 0\n    for card in blue_cards_set:\n        max_profit += blue_cards.count(card) - red_cards.count(card)\n\n    return str(max_profit)\n\nstdin = \"\"\"3\napple\norange\napple\n1\ngrape\"\"\"\nprint(solution(stdin)) "
    },
    {
        "number": 4489,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    s = lines[1:N+1]\n    M = int(lines[N+1])\n    t = lines[N+2:]\n    \n    # Calculate maximum possible earnings\n    earnings = 0\n    for i in range(N):\n        if s[i] in t:\n            earnings += 1\n    \n    return str(earnings)"
    },
    {
        "number": 4489,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    blue_cards = lines[1:N+1]\n    M = int(lines[N+1])\n    red_cards = lines[N+2:]\n\n    # Determine possible earnings\n    possible_earnings = set()\n    for blue_card in blue_cards:\n        possible_earnings.add(blue_card)\n    for red_card in red_cards:\n        if red_card in possible_earnings:\n            possible_earnings.remove(red_card)\n\n    # Calculate maximum earning\n    max_earning = 0\n    for earning in possible_earnings:\n        max_earning += 1\n\n    return str(max_earning)"
    },
    {
        "number": 4489,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, s, m, t = stdin.split('\\n')\n    n = int(n)\n    m = int(m)\n    \n    blue_cards = s.split('\\n')\n    red_cards = t.split('\\n')\n    \n    max_money = 0\n    for blue in blue_cards:\n        money = 0\n        for red in red_cards:\n            if blue == red:\n                money += 1\n            else:\n                money -= 1\n        max_money = max(max_money, money)\n    \n    return str(max_money)"
    },
    {
        "number": 4489,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.strip().split('\\n')\n    N = int(lines[0])\n    blue_cards = lines[1:N+1]\n    M = int(lines[N+1])\n    red_cards = lines[N+2:]\n\n    # Count occurrences of each blue card\n    counts = {}\n    for card in blue_cards:\n        counts[card] = counts.get(card, 0) + 1\n\n    # Calculate the maximum possible earnings\n    max_earnings = 0\n    for card in red_cards:\n        if card in counts and counts[card] > 0:\n            max_earnings += 1\n            counts[card] -= 1\n\n    return str(max_earnings)"
    },
    {
        "number": 4489,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.split(\"\\n\")\n    blue_cards = lines[:-2]\n    red_cards = lines[-2:]\n    \n    # Initialize variables\n    total_earning = 0\n    \n    # Calculate earnings\n    for card in blue_cards:\n        total_earning += blue_cards.count(card) - red_cards.count(card)\n    \n    # Return result\n    return str(total_earning)"
    },
    {
        "number": 4489,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, blue_cards, m, red_cards = stdin.split('\\n')\n    blue_cards = blue_cards.split('\\n')\n    red_cards = red_cards.split('\\n')\n    \n    max_money = 0\n    for card in blue_cards:\n        money = 0\n        for i, red_card in enumerate(red_cards):\n            if card == red_card:\n                money -= 1\n            elif card == blue_cards[i]:\n                money += 1\n        if money > max_money:\n            max_money = money\n    \n    return str(max_money)"
    },
    {
        "number": 4490,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    b = stdin\n    bond_map = {\n        'A': 'T',\n        'C': 'G',\n        'G': 'C',\n        'T': 'A'\n    }\n    return bond_map[b]"
    },
    {
        "number": 4490,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    bond_map = {'A': 'T', 'C': 'G', 'G': 'C', 'T': 'A'}\n    return bond_map[stdin.upper()]"
    },
    {
        "number": 4490,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    bond_dict = {\"A\": \"T\", \"C\": \"G\", \"G\": \"C\", \"T\": \"A\"}\n    return bond_dict[stdin]"
    },
    {
        "number": 4490,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    bonds = {\n        \"A\": \"T\",\n        \"C\": \"G\",\n        \"G\": \"C\",\n        \"T\": \"A\"\n    }\n    return bonds[stdin]"
    },
    {
        "number": 4490,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    bond_dict = {'A': 'T', 'C': 'G', 'G': 'C', 'T': 'A'}\n    return bond_dict[stdin]"
    },
    {
        "number": 4490,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    bond_dict = {\n        'A': 'T',\n        'C': 'G',\n        'G': 'C',\n        'T': 'A',\n    }\n\n    return bond_dict[stdin]"
    },
    {
        "number": 4490,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    bond = {\n        'A': 'T',\n        'T': 'A',\n        'C': 'G',\n        'G': 'C'\n    }\n\n    if stdin in bond:\n        return bond[stdin]\n    else:\n        return \"Invalid input. Please enter A, C, G or T.\""
    },
    {
        "number": 4490,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    bond_dict = {'A': 'T', 'T': 'A', 'C': 'G', 'G': 'C'}\n    return bond_dict[stdin]\n\ndef"
    },
    {
        "number": 4490,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    bond_dict = {'A': 'T', 'T': 'A', 'C': 'G', 'G': 'C'}\n    return bond_dict[stdin]\n\ndef"
    },
    {
        "number": 4490,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    bonds = {\n        'A': 'T',\n        'C': 'G',\n        'G': 'C',\n        'T': 'A',\n    }\n    return bonds[stdin]\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4491,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    grid = [list(map(int, line.split())) for line in lines[1:]]\n    dp = [[0] * N for _ in range(2)]\n\n    # Fill the dp table\n    for i in range(1, N + 1):\n        dp[0][i - 1] = grid[0][i - 1]\n        dp[1][i - 1] = grid[1][i - 1]\n    for i in range(2, N + 1):\n        dp[0][i - 1] = dp[0][i - 2] + grid[0][i - 1]\n        dp[1][i - 1] = dp[1][i - 2] + grid[1][i - 1]\n\n    # Calculate the maximum number of collected candies\n    max_candies = dp[0][N - 1] + dp[1][N - 1] + grid[0][N - 1] + grid[1][N - 1]\n\n    return str(max_candies)"
    },
    {
        "number": 4491,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    grid = stdin.split('\\n')[1]\n    candies = [int(c) for c in grid.split()]\n    \n    # Calculate the maximum candies that can be collected by starting from top-left and going to bottom-right\n    max_candies = candies[0] + candies[N-1]\n    \n    # Calculate the maximum candies that can be collected by starting from bottom-right and going to top-left\n    max_candies_reverse = candies[N-1] + candies[0]\n    \n    # Calculate the maximum candies that can be collected by starting from top-left and going to bottom-right\n    # then reversing the path and going back to top-left\n    max_candies_reverse_path = candies[0] + candies[N-1] + candies[0]\n    \n    # Return the maximum number of candies that can be collected\n    return max(max_candies, max_candies_reverse, max_candies_reverse_path)"
    },
    {
        "number": 4491,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    grid = [list(map(int, row.split())) for row in stdin.split('\\n')[1:]]\n\n    def dfs(i, j, visited, candies):\n        if (i, j) in visited:\n            return\n        visited.add((i, j))\n        candies.append(grid[i][j])\n        if i == 1 and j == n:\n            return\n        if j + 1 < n and (i, j + 1) not in visited:\n            dfs(i, j + 1, visited, candies)\n        if i + 1 < 2 and (i + 1, j) not in visited:\n            dfs(i + 1, j, visited, candies)\n\n    max_candies = 0\n    for i in range(1, 3):\n        for j in range(n):\n            visited = set()\n            candies = []\n            dfs(i, j, visited, candies)\n            max_candies = max(max_candies, sum(candies))\n\n    return str(max_candies)\n\ninput_str = \"5\\n3 2 2 4 1\\n1 2 2 2 1\"\nprint(solution(input_str)) "
    },
    {
        "number": 4491,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, grid = stdin.split(\"\\n\")\n    N = int(N)\n    grid = [int(x) for x in grid.split()]\n\n    def dfs(i, j, visited):\n        if (i, j) in visited:\n            return 0\n        visited.add((i, j))\n        if i == 2 and j == N:\n            return grid[i - 1][j - 1]\n        if i == 1:\n            return max(dfs(i, j + 1, visited), dfs(i + 1, j, visited))\n        else:\n            return max(dfs(i, j + 1, visited), dfs(i - 1, j, visited))\n\n    return str(dfs(1, 1, set()))\n"
    },
    {
        "number": 4491,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    rows = stdin.split(\"\\n\")\n    N = int(rows[0])\n    grid = []\n    for row in rows[1:]:\n        grid.append(list(map(int, row.split())))\n    return str(solve(grid, N))\n\ndef"
    },
    {
        "number": 4491,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.splitlines()[0])\n    grid = [list(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    max_candies = 0\n\n    for i in range(2):\n        for j in range(N):\n            if grid[i][j] > 0:\n                max_candies += grid[i][j]\n\n    max_candies += max(grid[0][-1], grid[1][-1])\n\n    return str(max_candies)"
    },
    {
        "number": 4491,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    grid = [[int(x) for x in line.split()] for line in stdin.split('\\n')[1:]]\n    candies = 0\n\n    # Start at top left corner\n    i = 0\n    j = 0\n\n    while i < 2 and j < N:\n        # Move right until the end of the row\n        while j < N:\n            candies += grid[i][j]\n            j += 1\n        # Move down until the end of the column\n        while i < 2:\n            candies += grid[i][j - 1]\n            i += 1\n\n    return str(candies)"
    },
    {
        "number": 4491,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, grid = stdin.split(\"\\n\")\n    N = int(N)\n    grid = [int(x) for x in grid.split(\" \")]\n\n    dp = [[0 for _ in range(N + 1)] for _ in range(3)]\n\n    for i in range(1, 3):\n        for j in range(1, N + 1):\n            if i == 1:\n                dp[i][j] = max(dp[i][j - 1], dp[i][j]) + grid[j - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j]) + grid[j + (N - 1)]\n\n    return str(dp[2][N])"
    },
    {
        "number": 4491,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def travel_and_collect_candies(grid: List[List[int]]) -> int:\n        max_candies = 0\n        row, col = 0, 0\n        while row < 2 and col < N:\n            if row == 0:\n                max_candies += grid[row][col]\n                col += 1\n            else:\n                max_candies += grid[row][col]\n                row += 1\n        return max_candies\n\n    N = int(stdin.split('\\n')[0])\n    grid = [list(map(int, row.split())) for row in stdin.split('\\n')[1:]]\n    return str(travel_and_collect_candies(grid))"
    },
    {
        "number": 4491,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, candy_grid = stdin.split(\"\\n\")\n    N = int(N)\n\n    # Convert the candy grid into a 2D list\n    candy_grid = candy_grid.split()\n    candy_grid = [list(map(int, candy_grid[i:i+N])) for i in range(0, len(candy_grid), N)]\n\n    # Initialize the starting position and the total number of collected candies\n    current_position = (1, 1)\n    collected_candies = 0\n\n    # Traverse the grid by moving right or down\n    while current_position != (2, N):\n        if current_position[1] != N:\n            # Move right\n            collected_candies += candy_grid[current_position[0]][current_position[1]]\n            current_position = (current_position[0], current_position[1] + 1)\n        else:\n            # Move down\n            collected_candies += candy_grid[current_position[0]][current_position[1] - N + 1]\n            current_position = (current_position[0] + 1, current_position[1] - N + 1)\n\n    # Collect the candies from the last position\n    collected_candies += candy_grid[current_position[0]][current_position[1] - N + 1]\n\n    return str(collected_candies)"
    },
    {
        "number": 4492,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, x = map(int, stdin.split()[0].split())\n    a = list(map(int, stdin.split()[1].split()))\n    \n    operations = 0\n    for i in range(N-1):\n        if a[i] + a[i+1] > x:\n            if a[i] > a[i+1]:\n                operations += a[i] - x\n                a[i] = x\n            else:\n                operations += a[i+1] - x\n                a[i+1] = x\n    \n    return str(operations) "
    },
    {
        "number": 4492,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # split the input into two lines, one for N and x, and one for the array of candies\n    N, x = map(int, stdin.splitlines()[0].split())\n    candies = list(map(int, stdin.splitlines()[1].split()))\n\n    # initialize the number of operations to 0\n    operations = 0\n\n    # iterate over the candies array\n    for i in range(N - 1):\n        # calculate the difference in number of candies between this box and the next box\n        diff = candies[i] - candies[i + 1]\n\n        # if the difference is greater than x, we need to eat one candy in this box\n        if diff > x:\n            operations += 1\n            # reduce the number of candies in this box by 1\n            candies[i] -= 1\n        # if the difference is less than or equal to x, we don't need to do anything\n        elif diff <= x:\n            pass\n\n    return str(operations)"
    },
    {
        "number": 4492,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, x = stdin.split()\n    N, x = int(N), int(x)\n    a = list(map(int, input().split()))\n\n    count = 0\n    for i in range(1, N):\n        if a[i] > x - a[i-1]:\n            count += 1\n            a[i] -= x - a[i-1]\n        elif a[i] < x - a[i-1]:\n            count += 1\n            a[i-1] -= x - a[i]\n\n    return count"
    },
    {
        "number": 4492,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, x = map(int, stdin.split()[0].split())\n    candy_counts = list(map(int, stdin.split()[1].split()))\n\n    operations = 0\n    for i in range(N):\n        if i > 0 and candy_counts[i] + candy_counts[i - 1] > x:\n            if candy_counts[i] > 1:\n                operations += 1\n                candy_counts[i] -= 1\n            else:\n                operations += 1\n                candy_counts[i - 1] -= 1\n\n    return str(operations)\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4492,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()[2:]))\n\n    min_operations = 0\n    max_candies = x\n\n    for i in range(N):\n        if a[i] > max_candies:\n            min_operations += a[i] - max_candies\n            a[i] = max_candies\n\n        if i > 0 and a[i - 1] > 0:\n            min_operations += 1\n            a[i - 1] -= 1\n\n    return str(min_operations)"
    },
    {
        "number": 4492,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # read the input\n    n, x = map(int, stdin.split()[:2])\n    candy_count = list(map(int, stdin.split()[2:]))\n\n    # calculate the number of operations required\n    operations = 0\n    for i in range(1, n):\n        if candy_count[i] > x:\n            operations += candy_count[i] - x\n            candy_count[i] = x\n    return str(operations)"
    },
    {
        "number": 4492,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, x = map(int, input().split())\n    candies = list(map(int, input().split()))\n    \n    operations = 0\n    for i in range(1, N):\n        diff = candies[i] - candies[i-1]\n        if diff > x:\n            operations += diff - x\n            candies[i] = candies[i-1] + x\n            \n    return str(operations) "
    },
    {
        "number": 4492,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, x = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    # Initialize variables\n    min_operations = 0\n    max_neighbor_candies = 0\n\n    # Iterate through boxes\n    for i in range(N):\n        # Check if current box has at least one candy\n        if a[i] > 0:\n            # Update maximum number of neighboring candies\n            if i == 0:\n                max_neighbor_candies = x\n            elif i == N - 1:\n                max_neighbor_candies = x - a[i - 1]\n            else:\n                max_neighbor_candies = x - a[i - 1] - a[i]\n\n            # If maximum number of neighboring candies is greater than x, then eat one candy\n            if max_neighbor_candies < 0:\n                min_operations += 1\n                a[i] -= 1\n\n    return str(min_operations)\n"
    },
    {
        "number": 4492,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, x = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    operations = 0\n\n    # Find the maximum number of candies that can be placed in a single box\n    max_candies = (x + 1) // 2\n\n    # Iterate through the boxes and check if any violations are found\n    for i in range(n):\n        if a[i] > max_candies:\n            operations += a[i] - max_candies\n            a[i] = max_candies\n\n    return str(operations)"
    },
    {
        "number": 4492,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, x = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    operations = 0\n    for i in range(N):\n        if a[i] > x:\n            operations += a[i] // x\n            a[i] = a[i] % x\n\n    return str(operations)"
    },
    {
        "number": 4493,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    matrix = [list(map(int, input.split())) for input in stdin.split(\"\\n\")]\n    a_values = [0, 1, 2]\n    b_values = [0, 1, 2]\n\n    for i in range(3):\n        for j in range(3):\n            for a_1 in a_values:\n                for a_2 in a_values:\n                    for a_3 in a_values:\n                        for b_1 in b_values:\n                            for b_2 in b_values:\n                                for b_3 in b_values:\n                                    if matrix[i][j] == a_i + b_j:\n                                        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4493,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    matrix = [list(map(int, row.split())) for row in stdin.split()]\n    a_set = {matrix[i][j] - j for i in range(3) for j in range(3)}\n    b_set = {matrix[i][j] - i for i in range(3) for j in range(3)}\n    if len(a_set) == 6 and len(b_set) == 6:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4493,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    matrix = [list(map(int, row.split())) for row in stdin.split(\"\\n\")]\n    a = [0, 1, 0]\n    b = [1, 0, 1]\n\n    for i in range(3):\n        for j in range(3):\n            if matrix[i][j] != a[i] + b[j]:\n                return \"No\"\n\n    return \"Yes\"\n\ndef"
    },
    {
        "number": 4493,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    c = [list(map(int, line.split())) for line in stdin.splitlines()]\n    \n    # Check if Takahashi's statement is correct\n    a_1 = c[0][0] - c[0][1]\n    a_2 = c[0][1] - c[0][2]\n    a_3 = c[1][0] - c[1][1]\n    b_1 = c[0][0] - c[1][0]\n    b_2 = c[0][1] - c[1][1]\n    b_3 = c[0][2] - c[1][2]\n    \n    if (a_1 == c[0][0] and a_2 == c[0][1] and a_3 == c[0][2] and\n        b_1 == c[0][0] and b_2 == c[0][1] and b_3 == c[0][2] and\n        a_1 == c[1][0] and a_2 == c[1][1] and a_3 == c[1][2] and\n        b_1 == c[1][0] and b_2 == c[1][1] and b_3 == c[1][2] and\n        a_1 == c[2][0] and a_2 == c[2][1] and a_3 == c[2][2] and\n        b_1 == c[2][0] and b_2 == c[2][1] and b_3 == c[2][2]):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4493,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    grid = [list(map(int, row.split())) for row in stdin.split(\"\\n\")]\n    a = [grid[i][j] - grid[j][i] for i in range(3) for j in range(3)]\n    b = [grid[j][i] - grid[i][j] for i in range(3) for j in range(3)]\n    \n    if all(0 <= a[i] <= 100 and 0 <= b[i] <= 100 for i in range(6)):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4493,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_correct(c_11, c_12, c_13, c_21, c_22, c_23, c_31, c_32, c_33) -> bool:\n        a1 = c_11 - c_12 + c_13 - c_12 + c_13 - c_11 + c_12 - c_13\n        a2 = c_21 - c_22 + c_23 - c_22 + c_23 - c_21 + c_22 - c_23\n        a3 = c_31 - c_32 + c_33 - c_32 + c_33 - c_31 + c_32 - c_33\n\n        b1 = c_11 - c_12 + c_13 - c_12 + c_13 - c_11 + c_12 - c_13\n        b2 = c_21 - c_22 + c_23 - c_22 + c_23 - c_21 + c_22 - c_23\n        b3 = c_31 - c_32 + c_33 - c_32 + c_33 - c_31 + c_32 - c_33\n\n        return a1 * b1 + a2 * b2 + a3 * b3 == c_11 + c_12 + c_13 + c_21 + c_22 + c_23 + c_31 + c_32 + c_33\n\n    c_11, c_12, c_13, c_21, c_22, c_23, c_31, c_32, c_33 = map(int, stdin.split())\n\n    if is_correct(c_11, c_12, c_13, c_21, c_22, c_23, c_31, c_32, c_33):\n        return \"Yes\"\n    else:\n        return \"No\"\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4493,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    grid = [list(map(int, line.split())) for line in stdin.split(\"\\n\")]\n\n    a = [0, 0, 0]\n    b = [0, 0, 0]\n\n    for i in range(3):\n        for j in range(3):\n            a[i] += grid[i][j]\n            b[j] += grid[i][j]\n\n    if a[0] == a[1] == a[2] and b[0] == b[1] == b[2]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4493,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a_1, a_2, a_3 = 0, 0, 0\n    b_1, b_2, b_3 = 0, 0, 0\n\n    # Read input\n    for i, line in enumerate(stdin.split(\"\\n\")):\n        for j, value in enumerate(line.split()):\n            c_ij = int(value)\n            a_i = c_ij - b_j\n            b_i = c_ij - a_i\n            a_1 += (a_i == 1)\n            a_2 += (a_i == 2)\n            a_3 += (a_i == 3)\n            b_1 += (b_i == 1)\n            b_2 += (b_i == 2)\n            b_3 += (b_i == 3)\n\n    # Check if there exists a valid solution\n    if (a_1, a_2, a_3) in ((1, 0, 1), (0, 2, 1), (1, 2, 0)) and \\\n       (b_1, b_2, b_3) in ((0, 1, 2), (1, 0, 2), (1, 2, 0)):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4493,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # read the input\n    grid = [list(map(int, line.split())) for line in stdin.splitlines()]\n\n    # check if the statement is correct\n    a = [grid[0][0] - grid[2][0], grid[0][1] - grid[2][1], grid[0][2] - grid[2][2]]\n    b = [grid[1][0] - grid[1][0], grid[1][1] - grid[0][1], grid[1][2] - grid[0][2]]\n\n    # check if the values are within the constraints\n    if all(0 <= x <= 100 for x in a) and all(0 <= x <= 100 for x in b):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4493,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    matrix = [list(map(int, row.split())) for row in stdin.split('\\n')]\n    a = [1, 2, 3]\n    b = [1, 0, 1]\n    for i in range(3):\n        for j in range(3):\n            if matrix[i][j] != a[i] + b[j]:\n                return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4494,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == \"ABC\":\n        return \"ARC\"\n    else:\n        return \"ABC\"\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4494,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == \"ABC\":\n        return \"ARC\"\n    else:\n        return \"ABC\"\n\ninput_string = input()\noutput_string = solution(input_string)\nprint(output_string) "
    },
    {
        "number": 4494,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == \"ABC\":\n        return \"ARC\"\n    else:\n        return \"ABC\""
    },
    {
        "number": 4494,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    last_week = stdin\n    if last_week == \"ABC\":\n        this_week = \"ARC\"\n    else:\n        this_week = \"ABC\"\n    return this_week"
    },
    {
        "number": 4494,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == \"ABC\":\n        return \"ARC\"\n    elif stdin == \"ARC\":\n        return \"ABC\"\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4494,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == \"ABC\":\n        return \"ARC\"\n    else:\n        return \"ABC\""
    },
    {
        "number": 4494,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == \"ABC\":\n        return \"ARC\"\n    else:\n        return \"ABC\"\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4494,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    last_week = stdin.upper()\n    this_week = \"ARC\" if last_week == \"ABC\" else \"ABC\"\n    return this_week"
    },
    {
        "number": 4494,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == \"ABC\":\n        return \"ARC\"\n    else:\n        return \"ABC\"\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4494,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == \"ABC\":\n        return \"ARC\"\n    else:\n        return \"ABC\"\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4495,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    count = 0\n    for i in range(a, b+1):\n        if i % x == 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4495,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    count = 0\n    for i in range(a, b+1):\n        if i % x == 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4495,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    count = 0\n    for i in range(a, b + 1):\n        if i % x == 0:\n            count += 1\n    return str(count)\n\ndef"
    },
    {
        "number": 4495,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    count = 0\n    for i in range(a, b+1):\n        if i % x == 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4495,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    count = 0\n    for i in range(a, b+1):\n        if i % x == 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4495,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    count = 0\n    for i in range(a, b+1):\n        if i % x == 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4495,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    count = 0\n    \n    for i in range(a, b+1):\n        if i % x == 0:\n            count += 1\n    \n    return str(count)"
    },
    {
        "number": 4495,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    count = 0\n    for num in range(a, b+1):\n        if num % x == 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4495,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    count = 0\n    for i in range(a, b+1):\n        if i % x == 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4495,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    count = 0\n    for num in range(a, b + 1):\n        if num % x == 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4496,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    D = int(stdin)\n    if D == 25:\n        return \"Christmas\"\n    elif D == 24:\n        return \"Christmas Eve\"\n    elif D == 23:\n        return \"Christmas Eve Eve\"\n    elif D == 22:\n        return \"Christmas Eve Eve Eve\"\n    else:\n        return \"Invalid input\"\n\ndef"
    },
    {
        "number": 4496,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    day = int(stdin)\n    if day == 25:\n        return \"Christmas\"\n    elif day == 24:\n        return \"Christmas Eve\"\n    elif day == 23:\n        return \"Christmas Eve Eve\"\n    elif day == 22:\n        return \"Christmas Eve Eve Eve\"\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 4496,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    D = int(stdin.strip())\n    if D == 25:\n        return \"Christmas\"\n    elif D == 24:\n        return \"Christmas Eve\"\n    elif D == 23:\n        return \"Christmas Eve Eve\"\n    elif D == 22:\n        return \"Christmas Eve Eve Eve\"\n    else:\n        return \"Invalid input. D must be between 22 and 25.\""
    },
    {
        "number": 4496,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    day = int(stdin)\n    if day == 25:\n        return \"Christmas\"\n    elif day == 24:\n        return \"Christmas Eve\"\n    elif day == 23:\n        return \"Christmas Eve Eve\"\n    else:\n        return \"Christmas Eve Eve Eve\""
    },
    {
        "number": 4496,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    days_until_christmas = int(stdin)\n\n    if days_until_christmas == 25:\n        return \"Christmas\"\n    elif days_until_christmas == 24:\n        return \"Christmas Eve\"\n    elif days_until_christmas == 23:\n        return \"Christmas Eve Eve\"\n    elif days_until_christmas == 22:\n        return \"Christmas Eve Eve Eve\"\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 4496,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    D = int(stdin)\n    if D == 25:\n        return \"Christmas\"\n    elif D == 24:\n        return \"Christmas Eve\"\n    elif D == 23:\n        return \"Christmas Eve Eve\"\n    else:\n        return \"Christmas Eve Eve Eve\""
    },
    {
        "number": 4496,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    D = int(stdin)\n    if D == 25:\n        return \"Christmas\"\n    elif D == 24:\n        return \"Christmas Eve\"\n    elif D == 23:\n        return \"Christmas Eve Eve\"\n    elif D == 22:\n        return \"Christmas Eve Eve Eve\"\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 4496,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    days = [\n        \"Christmas\",\n        \"Christmas Eve\",\n        \"Christmas Eve Eve\",\n        \"Christmas Eve Eve Eve\"\n    ]\n    d = int(stdin)\n    index = d - 25\n    if index >= 0 and index <= 3:\n        return days[index]\n    return \"Invalid input\""
    },
    {
        "number": 4496,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    day = int(stdin)\n    if day == 25:\n        return \"Christmas\"\n    elif day == 24:\n        return \"Christmas Eve\"\n    elif day == 23:\n        return \"Christmas Eve Eve\"\n    else:\n        return \"Christmas Eve Eve Eve\""
    },
    {
        "number": 4496,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    days = {\"25\": \"Christmas\", \"24\": \"Christmas Eve\", \"23\": \"Christmas Eve Eve\", \"22\": \"Christmas Eve Eve Eve\"}\n    return days[stdin] if stdin in days else \"\""
    },
    {
        "number": 4497,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    max_count = 0\n    max_divisible_num = 0\n    for num in range(1, N+1):\n        count = 0\n        while num % 2 == 0:\n            count += 1\n            num //= 2\n        if count > max_count:\n            max_count = count\n            max_divisible_num = num\n    return str(max_divisible_num)"
    },
    {
        "number": 4497,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    max_count = 0\n    result = 0\n\n    for i in range(1, n + 1):\n        count = 0\n        while i % 2 == 0:\n            count += 1\n            i //= 2\n        if count > max_count:\n            max_count = count\n            result = i\n\n    return str(result * (2 ** max_count))\n\ndef"
    },
    {
        "number": 4497,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    max_count = 0\n    max_number = 0\n    for i in range(1, N+1):\n        count = 0\n        while i % 2 == 0:\n            count += 1\n            i //= 2\n        if count > max_count:\n            max_count = count\n            max_number = i\n    return str(max_number)"
    },
    {
        "number": 4497,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    max_divisible_count = 0\n    max_divisible_num = None\n    \n    for i in range(1, N + 1):\n        divisible_count = 0\n        while i % 2 == 0:\n            divisible_count += 1\n            i //= 2\n        \n        if divisible_count > max_divisible_count:\n            max_divisible_count = divisible_count\n            max_divisible_num = i\n    \n    return max_divisible_num"
    },
    {
        "number": 4497,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    max_count = 0\n    max_number = None\n\n    for i in range(1, n + 1):\n        count = 0\n        number = i\n\n        while number % 2 == 0:\n            count += 1\n            number //= 2\n\n        if count > max_count:\n            max_count = count\n            max_number = i\n\n    return str(max_number)"
    },
    {
        "number": 4497,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    max_count = 0\n    max_num = 0\n    for i in range(1, n+1):\n        count = 0\n        while i % 2 == 0:\n            count += 1\n            i //= 2\n        if count > max_count:\n            max_count = count\n            max_num = i\n    return str(max_num)"
    },
    {
        "number": 4497,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    max_count = 0\n    max_num = 0\n    for num in range(1, N+1):\n        count = 0\n        while num % 2 == 0:\n            count += 1\n            num //= 2\n        if count > max_count:\n            max_count = count\n            max_num = num\n    return str(max_num)"
    },
    {
        "number": 4497,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    max_count = 0\n    result = -1\n\n    for num in range(1, N + 1):\n        count = 0\n        while num % 2 == 0:\n            count += 1\n            num //= 2\n        if count > max_count:\n            max_count = count\n            result = num\n\n    return str(result * (2 ** max_count))\n"
    },
    {
        "number": 4497,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    max_count = 0\n    max_num = 0\n    for i in range(1, N+1):\n        count = 0\n        while i % 2 == 0:\n            i //= 2\n            count += 1\n        if count > max_count:\n            max_count = count\n            max_num = i\n    return str(max_num * 2 ** max_count)"
    },
    {
        "number": 4497,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 0\n    for i in range(1, n+1):\n        num_divisible_by_2 = 0\n        while i % 2 == 0:\n            num_divisible_by_2 += 1\n            i //= 2\n        if num_divisible_by_2 > count:\n            count = num_divisible_by_2\n            result = i\n    return str(result)"
    },
    {
        "number": 4498,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if abs(a - c) <= d:\n        return \"Yes\"\n    if abs(b - a) <= d and abs(b - c) <= d:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4498,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n\n    if abs(a - c) <= d:\n        return \"Yes\"\n\n    if abs(a - b) <= d and abs(b - c) <= d:\n        return \"Yes\"\n\n    return \"No\"\n\ndef"
    },
    {
        "number": 4498,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    \n    if abs(a - c) <= d:\n        return \"Yes\"\n    if abs(a - b) <= d and abs(b - c) <= d:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4498,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    \n    if abs(a - c) <= d:\n        return \"Yes\"\n    elif abs(a - b) <= d and abs(b - c) <= d:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ndef"
    },
    {
        "number": 4498,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    distance_AB = abs(b - a)\n    distance_AC = abs(c - a)\n    distance_BC = abs(c - b)\n\n    if distance_AB <= d and distance_AC <= d:\n        return \"Yes\"\n    elif distance_BC <= d and (distance_AB <= d or distance_AC <= d):\n        return \"Yes\"\n    else:\n        return \"No\"\n\ndef"
    },
    {
        "number": 4498,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n\n    if abs(a - c) <= d:\n        return \"Yes\"\n\n    if abs(a - b) <= d and abs(b - c) <= d:\n        return \"Yes\"\n\n    return \"No\""
    },
    {
        "number": 4498,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    distance_ab = abs(a - b)\n    distance_ac = abs(a - c)\n    distance_bc = abs(b - c)\n    if distance_ab <= d and distance_ac <= d:\n        return \"Yes\"\n    if distance_ab <= d and distance_bc <= d:\n        return \"Yes\"\n    if distance_ac <= d and distance_bc <= d:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4498,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if abs(a - c) <= d:\n        return \"Yes\"\n    elif abs(a - b) <= d and abs(b - c) <= d:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4498,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    \n    # Calculate the distances between A, B and C\n    ab = abs(a - b)\n    ac = abs(a - c)\n    bc = abs(b - c)\n    \n    # Check if A and C can communicate directly\n    if ac <= d:\n        return \"Yes\"\n    \n    # Check if A and C can communicate indirectly\n    if ab <= d and bc <= d:\n        return \"Yes\"\n    \n    # A and C cannot communicate\n    return \"No\""
    },
    {
        "number": 4498,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    \n    if abs(a-c) <= d:\n        return \"Yes\"\n    else:\n        if abs(a-b) <= d and abs(b-c) <= d:\n            return \"Yes\"\n        else:\n            return \"No\"\n\ndef"
    },
    {
        "number": 4499,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s_1, s_2, s_3 = stdin.split()\n    return ''.join([word[0].upper() for word in [s_1, s_2, s_3]])"
    },
    {
        "number": 4499,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    acronym = ''.join([word[0].upper() for word in words])\n    return acronym"
    },
    {
        "number": 4499,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    acronym = \"\"\n    for word in words:\n        acronym += word[0].upper()\n    return acronym"
    },
    {
        "number": 4499,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s1, s2, s3 = stdin.split()\n    acronym = \"\".join([s.upper()[0] for s in [s1, s2, s3]])\n    return acronym"
    },
    {
        "number": 4499,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    acronym = \"\".join([word[0].upper() for word in words])\n    return acronym"
    },
    {
        "number": 4499,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s_1, s_2, s_3 = stdin.split()\n    return \"\".join([word[0].upper() for word in [s_1, s_2, s_3]])"
    },
    {
        "number": 4499,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    acronym = \"\"\n    for word in words:\n        acronym += word[0].upper()\n    return acronym"
    },
    {
        "number": 4499,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    acronym = \"\".join(word[0].upper() for word in words)\n    return acronym"
    },
    {
        "number": 4499,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    acronym = ''.join([word[0].upper() for word in words])\n    return acronym"
    },
    {
        "number": 4499,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    acronym = \"\".join(word[0].upper() for word in words)\n    return acronym"
    },
    {
        "number": 4500,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    total_yen = A + B\n    if total_yen >= C:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4500,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a_yen, b_yen, c_yen = [int(x) for x in stdin.split()]\n    total_yen = a_yen + b_yen\n    if total_yen >= c_yen:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4500,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    coins = list(map(int, stdin.split()))\n    A, B, C = coins\n    total_yen = A + B\n    \n    if total_yen >= C:\n        return \"Yes\"\n    else:\n        return \"No\"\n    \n"
    },
    {
        "number": 4500,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n\n    if A + B >= C:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ndef"
    },
    {
        "number": 4500,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    total_yen = A + B\n    if total_yen >= C:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4500,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A + B >= C:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4500,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a + b >= c:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4500,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A + B >= C:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4500,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A + B >= C:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4500,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A + B >= C:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4501,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split()[:2])\n    x = list(map(int, stdin.split()[2:]))\n\n    def count_ways(start: int, target: int, sum_: int) -> int:\n        if start == N:\n            return int(sum_ == target * start)\n\n        return count_ways(start + 1, target, sum_) + count_ways(start + 1, target, sum_ + x[start])\n\n    return str(count_ways(0, A, 0))"
    },
    {
        "number": 4501,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def factorial(n: int) -> int:\n        return 1 if n == 0 else n * factorial(n - 1)\n\n    def combination(n: int, r: int) -> int:\n        return factorial(n) // (factorial(r) * factorial(n - r))\n\n    def average(arr: List[int], index: int) -> float:\n        return sum(arr[i] for i in range(index + 1)) / (index + 1)\n\n    def count_ways(arr: List[int], target: int, index: int) -> int:\n        if index == len(arr) - 1:\n            return 1 if abs(arr[index] - target) <= 1 else 0\n\n        count = 0\n        for i in range(index, len(arr)):\n            if abs(average(arr, i) - target) <= 1:\n                count += count_ways(arr, target, i + 1)\n\n        return count\n\n    n, a = stdin.split()\n    x = list(map(int, input().split()))\n\n    return str(count_ways(x, int(a), 0))"
    },
    {
        "number": 4501,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, A, cards = map(int, stdin.split())\n    cards = list(map(int, cards.split()))\n    \n    total_sum = sum(cards)\n    total_count = len(cards)\n    target_sum = A * total_count\n    min_sum = target_sum - (total_count - 1)\n    max_sum = target_sum + (total_count - 1)\n    valid_sums = [i for i in range(min_sum, max_sum+1) if i % total_count == 0]\n    count = 0\n    \n    for valid_sum in valid_sums:\n        cards_sum = sum(cards)\n        if cards_sum == valid_sum:\n            count += 1\n    \n    return str(count)"
    },
    {
        "number": 4501,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split()[0:2])\n    x_i = list(map(int, stdin.split()[2:]))\n\n    count = 0\n    for i in range(1, N+1):\n        if sum(x_i[:i]) / i == A:\n            count += 1\n\n    return str(count)\n\ndef"
    },
    {
        "number": 4501,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    x = list(map(int, input().split()))\n\n    def count_ways(k: int, i: int) -> int:\n        if k == 0 or k == A:\n            return 1\n        if i == N:\n            return 0\n\n        return count_ways(k + x[i], i + 1) + count_ways(k, i + 1)\n\n    return count_ways(0, 0)"
    },
    {
        "number": 4501,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, A, *cards = map(int, stdin.split())\n    MOD = 10**9+7\n    \n    # Create a prefix sum array\n    prefix_sum = [0] * (N+1)\n    for i in range(N):\n        prefix_sum[i+1] = prefix_sum[i] + cards[i]\n    \n    # Calculate the number of ways to select cards such that the average is A\n    count = 0\n    for i in range(N+1):\n        for j in range(i+1, N+1):\n            if prefix_sum[j] - prefix_sum[i] == j*(A*j - A*i + i*i)//2:\n                count += 1\n    return str(count % MOD)"
    },
    {
        "number": 4501,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split()[:2])\n    x = list(map(int, stdin.split()[2:]))\n\n    count = 0\n    for i in range(N):\n        for j in range(N):\n            if i != j:\n                if (x[i] + x[j]) / 2 == A:\n                    count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4501,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, A = list(map(int, stdin.split()[0:2]))\n    x = list(map(int, stdin.split()[2:]))\n    total = sum(x)\n    count = 0\n    for i in range(N):\n        if total - x[i] == A * (N-1):\n            count += 1\n    return str(count)"
    },
    {
        "number": 4501,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split()[:2])\n    cards = list(map(int, stdin.split()[2:]))\n    total_sum = sum(cards)\n    total_count = len(cards)\n    if total_sum % total_count != 0 or total_sum < A:\n        return \"0\"\n    \n    result = 0\n    for i in range(1, total_count + 1):\n        if (total_sum - cards[i - 1]) / (total_count - i) == A:\n            result += 1\n    return str(result)\n\ndef"
    },
    {
        "number": 4501,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, A = [int(x) for x in stdin.split()]\n    cards = [int(x) for x in stdin.split()[2:]]\n\n    count = 0\n    for i in range(1, len(cards) + 1):\n        for subset in itertools.combinations(cards, i):\n            if sum(subset) / len(subset) == A:\n                count += 1\n\n    return str(count)"
    },
    {
        "number": 4502,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, sequence = stdin.split(\"\\n\")\n    n = int(n)\n    sequence = [int(x) for x in sequence.split()]\n    b = []\n    for i in range(n):\n        b.append(sequence[i])\n        b.reverse()\n    return \" \".join(str(x) for x in b)\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4502,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, sequence = stdin.split('\\n')\n    n = int(n)\n    sequence = list(map(int, sequence.split()))\n\n    b = []\n    for i in range(n):\n        b.append(sequence[i])\n        b.reverse()\n\n    return ' '.join(map(str, b))"
    },
    {
        "number": 4502,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, sequence = stdin.split()\n    n = int(n)\n    a = [int(x) for x in sequence.split()]\n    b = []\n\n    for i in range(n):\n        b.append(a[i])\n        b.reverse()\n\n    return \" \".join(str(x) for x in b)"
    },
    {
        "number": 4502,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, sequence = stdin.split('\\n')\n    n = int(n)\n    sequence = [int(x) for x in sequence.split()]\n\n    b = []\n    for i in range(n):\n        b.append(sequence[i])\n        b.reverse()\n\n    return ' '.join(map(str, b))\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4502,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, sequence = stdin.split()\n    n = int(n)\n    a = list(map(int, sequence.split()))\n    b = []\n    for i in range(n):\n        b.append(a[i])\n        b.reverse()\n    return ' '.join(map(str, b))"
    },
    {
        "number": 4502,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, sequence = stdin.split()\n    n = int(n)\n    sequence = [int(x) for x in sequence.split()]\n\n    b = []\n    for i in range(n):\n        b.append(sequence[i])\n        b.reverse()\n\n    return ' '.join(str(x) for x in b)\n"
    },
    {
        "number": 4502,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, sequence = stdin.split('\\n')\n    n = int(n)\n    sequence = list(map(int, sequence.split()))\n\n    b = []\n\n    for i in range(n):\n        b.append(sequence[i])\n        b.reverse()\n\n    return ' '.join(map(str, b))\n"
    },
    {
        "number": 4502,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, sequence = stdin.split()\n    n = int(n)\n    sequence = list(map(int, sequence.split()))\n    b = []\n    for i in range(n):\n        b.append(sequence[i])\n        b.reverse()\n    return ' '.join(map(str, b))"
    },
    {
        "number": 4502,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    b = []\n\n    for i in range(n):\n        b.append(a[i])\n        b.reverse()\n\n    return ' '.join(str(x) for x in b)\n\ninput_string = input()\nn = int(input_string.split('\\n')[0])\na = list(map(int, input_string.split('\\n')[1].split()))"
    },
    {
        "number": 4502,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, seq = stdin.split('\\n')\n    n = int(n)\n    seq = list(map(int, seq.split()))\n    \n    b = []\n    for i in range(n):\n        b.append(seq[i])\n        b.reverse()\n    \n    return ' '.join(str(x) for x in b)\n\nn, seq = input(), input()\nprint(solution(f\"{n}\\n{seq}\")) "
    },
    {
        "number": 4503,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    health, num_moves = map(int, input_list[0].split())\n    moves = list(map(int, input_list[1].split()))\n\n    used_moves = set()\n\n    for move in moves:\n        if health <= 0:\n            return \"Yes\"\n        if move in used_moves:\n            continue\n        used_moves.add(move)\n        health -= move\n\n    return \"No\""
    },
    {
        "number": 4503,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    H, N, *A = list(map(int, stdin.split()))\n\n    moves = set()\n    total_health = sum(A)\n\n    if H < total_health:\n        return \"No\"\n\n    for move in A:\n        if H - total_health >= 0:\n            return \"Yes\"\n        moves.add(move)\n        total_health -= move\n\n    return \"Yes\" if len(moves) == N else \"No\""
    },
    {
        "number": 4503,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    H, N = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    \n    used_moves = set()\n    for i in range(N):\n        if H - A[i] <= 0 or i in used_moves:\n            continue\n        used_moves.add(i)\n        H -= A[i]\n        if H <= 0:\n            return \"Yes\"\n    \n    return \"No\""
    },
    {
        "number": 4503,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    health, num_moves = map(int, stdin.split('\\n')[0].split())\n    moves = list(map(int, stdin.split('\\n')[1].split()))\n    moves_used = set()\n    for move in moves:\n        if health - move <= 0:\n            return \"Yes\"\n        if move in moves_used:\n            return \"No\"\n        moves_used.add(move)\n    return \"No\"\n\ninput_str = \"10 3\\n4 5 6\"\nprint(solution(input_str)) # Output: \"Yes\" "
    },
    {
        "number": 4503,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    H, N = map(int, lines[0].split())\n    A = list(map(int, lines[1].split()))\n\n    # Check if Raccoon can win without using the same move twice or more\n    used_moves = set()\n    for a in A:\n        if H <= 0:\n            return \"Yes\"\n        if a in used_moves:\n            return \"No\"\n        used_moves.add(a)\n        H -= a\n\n    return \"Yes\" if H <= 0 else \"No\""
    },
    {
        "number": 4503,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    health, num_moves = map(int, stdin.split()[:2])\n    moves = list(map(int, stdin.split()[2:]))\n\n    used_moves = set()\n    for move in moves:\n        if health <= 0:\n            return \"Yes\"\n        if move in used_moves:\n            continue\n        used_moves.add(move)\n        health -= move\n\n    return \"No\"\n\ndef"
    },
    {
        "number": 4503,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    H, N = map(int, stdin.split()[:2])\n    moves = list(map(int, stdin.split()[2:]))\n\n    # Initialize a set to store used moves\n    used_moves = set()\n\n    # Iterate through the moves\n    for move in moves:\n        # Check if the move is not used before\n        if move not in used_moves:\n            used_moves.add(move)\n            H -= move\n            # If the monster's health becomes 0 or below, Raccoon wins\n            if H <= 0:\n                return \"Yes\"\n\n    # If Raccoon uses all the moves and still cannot win, return \"No\"\n    return \"No\""
    },
    {
        "number": 4503,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    health, num_moves = map(int, lines[0].split())\n    moves = list(map(int, lines[1].split()))\n\n    used_moves = set()\n    for move in moves:\n        if move > health:\n            continue\n        used_moves.add(move)\n        health -= move\n        if health <= 0:\n            return \"Yes\"\n\n    return \"No\"\n\ndef"
    },
    {
        "number": 4503,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    H, N = map(int, lines[0].split())\n    A = list(map(int, lines[1].split()))\n    \n    # Check if the same move can be used twice\n    if len(set(A)) != len(A):\n        return \"No\"\n    \n    # Check if there exists a combination of moves that can win\n    for i in range(1, 2**N):\n        total_damage = 0\n        for j in range(N):\n            if i & (1 << j):\n                total_damage += A[j]\n        if H - total_damage <= 0:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4503,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    H, N = map(int, stdin.split()[0:2])\n    A = list(map(int, stdin.split()[2:]))\n    \n    # Check if Raccoon can win\n    used_moves = set()\n    for i in range(N):\n        if H - A[i] <= 0:\n            return \"Yes\"\n        if H - A[i] in used_moves:\n            return \"No\"\n        used_moves.add(H - A[i])\n        H -= A[i]\n    \n    return \"Yes\""
    },
    {
        "number": 4504,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    max_length = 0\n    length = len(S)\n\n    while length > 0:\n        if S[:length] + S[:length] == S:\n            max_length = length\n            break\n        length -= 1\n\n    return str(max_length)"
    },
    {
        "number": 4504,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def is_even(s: str) -> bool:\n        return s == s[::-1]\n\n    def even_string_length(s: str) -> int:\n        for i in range(len(s) - 1, -1, -1):\n            if is_even(s[:i]):\n                return i\n        return 0\n\n    s = stdin\n    return str(even_string_length(s))"
    },
    {
        "number": 4504,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input string into two equal parts\n    even_string = stdin[:len(stdin)//2]\n    # Find the length of the longest even string that can be obtained by deleting one or more characters from the end of the given string\n    for i in range(len(even_string) - 1, 0, -1):\n        if len(even_string) % i == 0:\n            return i"
    },
    {
        "number": 4504,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    even_length = len(S) // 2\n    even_string = S[:even_length]\n\n    for i in range(even_length - 1, -1, -1):\n        if S[i:i + even_length] == even_string:\n            return even_length\n\n    return \"\""
    },
    {
        "number": 4504,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input string into two halves\n    half_len = len(stdin) // 2\n    left, right = stdin[:half_len], stdin[half_len:]\n    \n    # Find the longest even string that can be obtained by deleting one or more characters from the end of the right half\n    longest_even_len = 0\n    for i in range(len(right)):\n        if right[-i-1:] == left[-i-1:]:\n            longest_even_len = len(right) - i\n            break\n    \n    # Return the length of the longest even string\n    return longest_even_len"
    },
    {
        "number": 4504,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    max_len = 0\n    for i in range(1, len(s) + 1):\n        substr = s[:-i]\n        if len(substr) % 2 == 0 and len(substr) > max_len:\n            max_len = len(substr)\n    return str(max_len)"
    },
    {
        "number": 4504,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def is_even(s: str) -> bool:\n        return len(s) % 2 == 0\n\n    def longest_even_string(s: str) -> int:\n        for i in range(len(s), 0, -1):\n            if is_even(s[:i]):\n                return i\n        raise ValueError(\"No even string found\")\n\n    return str(longest_even_string(stdin))"
    },
    {
        "number": 4504,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    n = len(S)\n    if n == 0:\n        return \"0\"\n    if n == 1:\n        return \"0\"\n    if n % 2 == 0:\n        even_length = n\n    else:\n        even_length = n - 1\n\n    longest_even_length = 0\n    i = 0\n    while i < even_length:\n        if S[i] == S[even_length - 1]:\n            longest_even_length = even_length - i\n            break\n        i += 1\n\n    return str(longest_even_length)"
    },
    {
        "number": 4504,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Helper function to check if a string is even\n    def is_even(s: str) -> bool:\n        return s == s[::-1]\n\n    # Helper function to check if a string is even and has a length greater than 2\n    def is_valid(s: str) -> bool:\n        return len(s) > 2 and is_even(s)\n\n    # Remove characters from the end of the input string until we get a valid even string\n    while not is_valid(stdin):\n        stdin = stdin[:-1]\n\n    return len(stdin)"
    },
    {
        "number": 4504,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    even_str = \"\"\n    for i in range(len(stdin) - 1, -1, -1):\n        even_str = stdin[i] + even_str\n        if len(even_str) % 2 == 0:\n            return len(even_str)\n    return len(even_str)"
    },
    {
        "number": 4505,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # check if stdin has length 3 and contains only a, b, and c\n    if len(stdin) != 3 or not set(stdin).issubset({'a', 'b', 'c'}):\n        return \"No\"\n    \n    # check if stdin is a permutation of \"abc\"\n    if sorted(stdin) == sorted(\"abc\"):\n        return \"Yes\"\n    else:\n        return \"No\"\n    \n"
    },
    {
        "number": 4505,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Determines whether the given string can be obtained by permuting abc.\n    \"\"\"\n    S = list(stdin)\n    if len(S) != 3:\n        return \"No\"\n    for letter in \"abc\":\n        if letter not in S:\n            return \"No\"\n    return \"Yes\" if sorted(S) == sorted(\"abc\") else \"No\""
    },
    {
        "number": 4505,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S = list(stdin)\n    S.sort()\n    return \"Yes\" if \"\".join(S) == \"abc\" else \"No\""
    },
    {
        "number": 4505,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    if sorted(S) == ['a', 'b', 'c']:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4505,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S = list(stdin)\n    S.sort()\n    return \"Yes\" if S == sorted(\"abc\") else \"No\""
    },
    {
        "number": 4505,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S = list(stdin)\n    S.sort()\n    if \"\".join(S) == \"abc\":\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4505,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    if sorted(stdin) == ['a', 'b', 'c']:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4505,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    S = list(stdin)\n    if len(S) != 3:\n        return \"No\"\n\n    for i in range(len(S)):\n        if i % 2 == 0:\n            if S[i] != \"a\":\n                return \"No\"\n        else:\n            if S[i] != \"b\" and S[i] != \"c\":\n                return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4505,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Check if a given string can be obtained by permuting abc.\n\n    Args:\n    stdin: A string of length 3 consisting of a, b and c.\n\n    Returns:\n    Yes if the string can be obtained by permuting abc, otherwise No.\n    \"\"\"\n    if sorted(stdin) == sorted(\"abc\"):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4505,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    abc = \"abc\"\n    if sorted(stdin) == sorted(abc):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4506,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n    b = list(map(int, stdin.split(\"\\n\")[2].split()))\n    total_sum = 0\n    result = 0\n\n    for l in range(n):\n        for r in range(l, n):\n            total_sum += (a[l] * b[l] + a[r] * b[r])\n            result += total_sum\n            total_sum -= (a[l] * b[l] + a[r] * b[r])\n\n    return str(result % 998244353)"
    },
    {
        "number": 4506,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def f(l, r):\n        return sum(a[l - 1] * b[i - 1] for i in range(l, r + 1))\n\n    def min_f_sum(n):\n        f_sum = sum(f(i, i) for i in range(1, n + 1))\n        min_f_sum = f_sum\n        for l in range(1, n):\n            for r in range(l, n):\n                min_f_sum = min(min_f_sum, f_sum - f(l, r - 1) + f(l, r))\n        return min_f_sum\n\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    result = min_f_sum(n) % 998244353\n    return str(result)\n\ninput_str = \"\"\"5\n1 8 7 2 4\n9 7 2 9 3\"\"\"\nprint(solution(input_str))  # Output: 646\n\ninput_str = \"\"\"1\n1000000\n1000000\"\"\"\nprint(solution(input_str))  # Output: 757402647\n\ninput_str = \"\"\"2\n1 3\n4 2\"\"\"\nprint(solution(input_str))  # Output: 20 "
    },
    {
        "number": 4506,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n\n    def f(l, r):\n        return sum(a[l-1] * b[i] for i in range(l-1, r))\n\n    # Sort b and calculate the sum of f(l, r)\n    b.sort()\n    total_sum = sum(f(l, r) for l in range(1, n+1) for r in range(l, n+1))\n\n    # Calculate the modulo of the sum\n    result = total_sum % 998244353\n\n    return str(result)"
    },
    {
        "number": 4506,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def f(l, r):\n        return sum(a[l:r+1]) * sum(b[l:r+1])\n\n    def min_sum(a, b):\n        n = len(a)\n        a_sum = sum(a)\n        b_sum = sum(b)\n        total_sum = sum(f(l, r) for l in range(n) for r in range(l, n))\n        return total_sum\n\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n\n    return str(min_sum(a, b) % 998244353)\n"
    },
    {
        "number": 4506,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    a = list(map(int, lines[1].split()))\n    b = list(map(int, lines[2].split()))\n\n    # Modify b to minimize the sum\n    b_sum = sum(b)\n    b.sort(reverse=True)\n\n    # Compute the sum\n    result = 0\n    for l in range(n):\n        for r in range(l, n):\n            result += a[l] * b[l] * a[r] * b[r]\n\n    # Print the result modulo 998244353\n    return str(result % 998244353)"
    },
    {
        "number": 4506,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def f(l: int, r: int) -> int:\n        return sum([a[i] * b[i] for i in range(l, r + 1)])\n\n    def min_sum(b: List[int]) -> int:\n        n = len(b)\n        total = 0\n        for i in range(n):\n            total += f(i + 1, n)\n        return total\n\n    def min_sum_mod(b: List[int]) -> int:\n        n = len(b)\n        total = 0\n        for i in range(n):\n            total += (f(i + 1, n) % 998244353)\n        return total\n\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    b = list(map(int, stdin.split('\\n')[2].split()))\n\n    b_min_sum = min_sum(b)\n    b_min_sum_mod = min_sum_mod(b)\n\n    b_sorted = sorted(b)\n    b_sorted_min_sum = min_sum(b_sorted)\n    b_sorted_min_sum_mod = min_sum_mod(b_sorted)\n\n    result = min(b_min_sum, b_sorted_min_sum)\n    result_mod = min(b_min_sum_mod, b_sorted_min_sum_mod)\n\n    return str(result_mod)\n\nimport sys\ninput_stdin = sys.stdin.read()\nprint(solution(input_stdin)) "
    },
    {
        "number": 4506,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # split the input into lines\n    lines = stdin.split('\\n')\n    # read the first line and convert it to int\n    n = int(lines[0])\n    # read the second line and convert it to list of ints\n    a = list(map(int, lines[1].split()))\n    # read the third line and convert it to list of ints\n    b = list(map(int, lines[2].split()))\n\n    # calculate the sum of products of corresponding elements from a and b\n    sum_of_products = sum(a[i] * b[i] for i in range(n))\n\n    # calculate the sum of f(l, r) for 1 <= l <= r <= n\n    total_sum = 0\n    for l in range(1, n + 1):\n        for r in range(l, n + 1):\n            total_sum += sum_of_products\n\n    # calculate the minimum possible value of sum_of_products modulo 998244353\n    min_sum = total_sum % 998244353\n\n    return str(min_sum)"
    },
    {
        "number": 4506,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    a = list(map(int, lines[1].split()))\n    b = list(map(int, lines[2].split()))\n\n    # Calculate the sum of products\n    def sum_products(l: int, r: int) -> int:\n        return sum(a[l - 1] * b[i] for i in range(l - 1, r))\n\n    # Sort b in non-decreasing order and calculate the sum of products\n    b_sorted = sorted(b)\n    total_sum = sum(sum_products(i, j) for i in range(1, n + 1) for j in range(i, n + 1))\n\n    # Calculate the minimum sum of products for each l and r\n    min_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            min_sum[j] = min(min_sum[j], min_sum[i - 1] + sum_products(i, j))\n\n    # Calculate the total sum of products after rearranging elements of b\n    min_sum_total = sum(min_sum[i] for i in range(1, n + 1))\n    reordered_sum = total_sum - min_sum_total\n\n    # Return the reordered sum modulo 998244353\n    return str(reordered_sum % 998244353)"
    },
    {
        "number": 4506,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    a = list(map(int, lines[1].split()))\n    b = list(map(int, lines[2].split()))\n    MOD = 998244353\n    \n    def f(l, r):\n        return sum([a[i] * b[i] for i in range(l, r + 1)])\n    \n    def reorder(b):\n        return sum([f(l, r) for r in range(n) for l in range(r + 1)])\n    \n    min_reorder = reorder(b)\n    for perm in itertools.permutations(b):\n        new_reorder = reorder(list(perm))\n        min_reorder = min(min_reorder, new_reorder)\n    \n    return str(min_reorder % MOD)"
    },
    {
        "number": 4506,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    b = list(map(int, stdin.splitlines()[2].split()))\n\n    def f(l: int, r: int) -> int:\n        return sum([a[i] * b[i] for i in range(l, r + 1)])\n\n    ans = 998244353\n    for perm in itertools.permutations(b):\n        s = sum([f(l, r) for l in range(1, n + 1) for r in range(l, n + 1)])\n        ans = min(ans, s)\n\n    return str(ans)"
    },
    {
        "number": 4507,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[:3])\n    shovels = list(map(int, stdin.split()[3:3+n]))\n    special_offers = []\n    for _ in range(m):\n        x, y = map(int, stdin.split()[3+n+m:3+n+m+2])\n        special_offers.append((x, y))\n\n    special_offers.sort(key=lambda x: x[1])\n    shovels.sort()\n\n    def binary_search(arr, target):\n        left, right = 0, len(arr) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if arr[mid] == target:\n                return mid\n            elif arr[mid] < target:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return right + 1\n\n    def min_cost(k: int, shovels: List[int], special_offers: List[Tuple[int, int]]) -> int:\n        if k <= 0:\n            return 0\n\n        min_cost = float('inf')\n        for offer in special_offers:\n            if offer[0] <= k:\n                num_cheapest = min(offer[1], k)\n                if num_cheapest == 0:\n                    continue\n\n                remaining_shovels = shovels[:binary_search(shovels, shovels[k-num_cheapest])]\n                min_cost = min(min_cost, sum(remaining_shovels[num_cheapest:]) + num_cheapest * remaining_shovels[num_cheapest-1])\n\n        if min_cost == float('inf'):\n            remaining_shovels = shovels[:k]\n            min_cost = sum(remaining_shovels)\n\n        return min_cost\n\n    return str(min_cost(k, shovels, special_offers))\n"
    },
    {
        "number": 4507,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def cost(a, b, i, j, k):\n        return sum(a[i:j]) + b * min(k, j - i)\n\n    def min_cost(n, m, k, a, x, y):\n        b = [[0] * (n + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in range(1, n + 1):\n                b[i][j] = b[i - 1][j] + b[i][j - 1] - b[i - 1][j - 1] + (a[i - 1] <= j)\n\n        for i in range(1, n + 1):\n            for j in range(1, n + 1):\n                for l in range(m):\n                    if x[l] <= i and j - i >= y[l] and b[i][j] - b[i - x[l]][j - y[l]] > b[i][j - x[l]]:\n                        b[i][j] = b[i][j - x[l]] + (y[l] > 0)\n\n        return b[n][k]\n\n    def parse_input(stdin: str) -> Tuple[int, int, int, List[int], List[int], List[int]]:\n        lines = stdin.split('\\n')\n        n, m, k = map(int, lines[0].split())\n        a = list(map(int, lines[1].split()))\n        x, y = [], []\n        for i in range(m):\n            x_i, y_i = map(int, lines[2 + i].split())\n            x.append(x_i)\n            y.append(y_i)\n        return n, m, k, a, x, y\n\n    n, m, k, a, x, y = parse_input(stdin)\n    return str(min_cost(n, m, k, a, x, y))"
    },
    {
        "number": 4507,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[0:3])\n    shovel_costs = list(map(int, stdin.split()[3:n+3]))\n    special_offers = []\n    for i in range(m):\n        offer_input = list(map(int, stdin.split(\"\\n\")[i+n+3].split()))\n        special_offers.append((offer_input[0], offer_input[1]))\n    \n    def get_min_cost(remaining_shovels, remaining_special_offers):\n        if not remaining_shovels:\n            return 0\n        if not remaining_special_offers:\n            return sum(sorted(shovel_costs[:remaining_shovels])[:k])\n        min_cost = float('inf')\n        for i in range(remaining_shovels+1):\n            if i == 0:\n                offer_cost = 0\n            else:\n                offer_cost = shovel_costs[i-1] * (i-1)\n            remaining_offer = remaining_special_offers[0][1]\n            remaining_shovels -= i\n            remaining_special_offers.pop(0)\n            min_cost = min(min_cost, offer_cost + get_min_cost(remaining_shovels, remaining_special_offers))\n            remaining_shovels += i\n            remaining_special_offers.insert(0, (remaining_offer+1, remaining_special_offers[0][1]))\n        return min_cost\n    \n    return str(get_min_cost(n, special_offers))"
    },
    {
        "number": 4507,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n\n    def calculate_min_cost(a: list, k: int) -> int:\n        if len(a) < k:\n            return -1\n        return sum(a[:k])\n\n    def calculate_special_offer_cost(a: list, x: int, y: int) -> int:\n        if x <= len(a) and y <= x:\n            return sum(a[:x]) - y\n        return -1\n\n    special_offers = []\n    for _ in range(m):\n        x, y = map(int, input().split())\n        special_offers.append((x, y))\n\n    min_cost = float('inf')\n    for offer in special_offers:\n        x, y = offer\n        offer_cost = calculate_special_offer_cost(a, x, y)\n        if offer_cost != -1:\n            remaining_a = [cost for cost in a if cost not in a[:x]]\n            remaining_k = k - x\n            if remaining_k > 0:\n                remaining_cost = calculate_min_cost(remaining_a, remaining_k)\n                if remaining_cost != -1:\n                    min_cost = min(min_cost, offer_cost + remaining_cost)\n            else:\n                min_cost = min(min_cost, offer_cost)\n\n    if min_cost == float('inf'):\n        min_cost = calculate_min_cost(a, k)\n\n    return str(min_cost)\n\ninput_data = \"\"\"7 4 5\n2 5 4 2 6 3 1\n2 1\n6 5\n2 1\n3 1\"\"\"\nprint(solution(input_data)) "
    },
    {
        "number": 4507,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.readline().split())\n    shovels = list(map(int, stdin.readline().split()))\n    offers = []\n\n    for _ in range(m):\n        x, y = map(int, stdin.readline().split())\n        offers.append((x, y))\n\n    offers.sort(key=lambda x: x[0], reverse=True)\n\n    shovels.sort()\n    shovels = [0] + shovels\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n\n    for i in range(1, n + 1):\n        for offer in offers:\n            if i >= offer[0]:\n                dp[i] = min(dp[i], dp[i - offer[0]] + shovels[i] * offer[1])\n            else:\n                break\n\n        dp[i] = min(dp[i], dp[i - 1] + shovels[i])\n\n    return str(dp[k])\n\ndef"
    },
    {
        "number": 4507,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, m, k = map(int, lines[0].split())\n    shovels = list(map(int, lines[1].split()))\n    offers = []\n    for i in range(m):\n        offer_line = lines[2 + i]\n        x, y = map(int, offer_line.split())\n        offers.append((x, y))\n    \n    def min_cost(shovels_left, offers_left):\n        if not shovels_left:\n            return 0\n        min_cost = float('inf')\n        for offer in offers_left:\n            if shovels_left >= offer[0]:\n                min_cost = min(min_cost, offer[1] + min_cost(shovels_left - offer[0], offers_left))\n        min_cost = min(min_cost, min_cost(shovels_left - 1, offers_left))\n        return min_cost\n    \n    return str(min_cost(k, offers))"
    },
    {
        "number": 4507,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def read_input():\n        n, m, k = map(int, stdin.readline().strip().split())\n        shovels = list(map(int, stdin.readline().strip().split()))\n        special_offers = [tuple(map(int, stdin.readline().strip().split())) for _ in range(m)]\n        return n, m, k, shovels, special_offers\n\n    def get_min_cost(n, m, k, shovels, special_offers):\n        shovels.sort()\n        min_cost = float('inf')\n\n        def get_cost_with_offers(offers, shovels_left, budget):\n            if not offers:\n                return budget\n            offer = offers.pop()\n            shovels_to_buy = min(shovels_left, offer[0])\n            budget -= shovels_to_buy * shovels[0]\n            shovels_left -= shovels_to_buy\n            return get_cost_with_offers(offers, shovels_left, budget)\n\n        for i in range(n - k + 1):\n            shovels_left = k\n            budget = sum(shovels[i:i + k])\n            budget = get_cost_with_offers(special_offers[:], shovels_left, budget)\n            min_cost = min(min_cost, budget)\n\n        return min_cost\n\n    n, m, k, shovels, special_offers = read_input()\n    return str(get_min_cost(n, m, k, shovels, special_offers))"
    },
    {
        "number": 4507,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def find_min_cost(n, m, k, shovels, offers):\n        def apply_offer(offer, shovels, k):\n            shovels = shovels.copy()\n            for i in range(offer[1]):\n                shovels.pop(shovels.index(min(shovels)))\n            shovels.sort()\n            return shovels[:k]\n\n        shovels.sort()\n        min_cost = float('inf')\n        for offer in offers:\n            shovels_with_offer = apply_offer(offer, shovels, k)\n            if len(shovels_with_offer) == k:\n                cost = sum(shovels_with_offer)\n                min_cost = min(min_cost, cost)\n        return min_cost\n\n    n, m, k = map(int, stdin.readline().split())\n    shovels = list(map(int, stdin.readline().split()))\n    offers = []\n    for _ in range(m):\n        offer = list(map(int, stdin.readline().split()))\n        offers.append(offer)\n\n    return str(find_min_cost(n, m, k, shovels, offers))\n\n\ninput_str = '''7 4 5\n2 5 4 2 6 3 1\n2 1\n6 5\n2 1\n3 1'''\nprint(solution(input_str)) "
    },
    {
        "number": 4507,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def calculate_min_cost(shovels, k, offers):\n        shovels.sort(reverse=True)\n        min_cost = 0\n        for offer in offers:\n            min_cost += offer[1] * offer[0]\n            if offer[0] <= k:\n                k -= offer[0]\n                shovels = shovels[:-offer[0]]\n        shovels = shovels[:k]\n        min_cost += sum(shovels)\n        return min_cost\n\n    n, m, k = map(int, stdin.split()[:3])\n    shovels = list(map(int, stdin.split()[3:n+3]))\n    offers = []\n    for i in range(m):\n        x, y = map(int, stdin.split()[n+3+i*2:n+3+i*2+2])\n        offers.append((x, y))\n\n    return str(calculate_min_cost(shovels, k, offers))"
    },
    {
        "number": 4507,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[0].split())\n    shovel_costs = list(map(int, stdin.split()[1].split()))\n    special_offers = []\n\n    for offer in stdin.split()[2:]:\n        x, y = map(int, offer.split())\n        special_offers.append((x, y))\n\n    special_offers.sort(reverse=True)\n\n    def calculate_total_cost(shovel_costs: list, special_offers: list, k: int) -> int:\n        total_cost = 0\n        shovel_costs.sort()\n        remaining_shovels = k\n\n        for offer in special_offers:\n            x, y = offer\n\n            if remaining_shovels >= x:\n                free_shovels = min(y, remaining_shovels - x + 1)\n                remaining_shovels -= free_shovels\n                total_cost += sum(shovel_costs[:free_shovels])\n                shovel_costs = shovel_costs[free_shovels:]\n\n        total_cost += sum(shovel_costs[:remaining_shovels])\n\n        return total_cost\n\n    return str(calculate_total_cost(shovel_costs, special_offers, k))"
    },
    {
        "number": 4508,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    edges = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    \n    def dfs(u, v, visited, parent):\n        visited[u] = True\n        for w in range(1, n + 1):\n            if w != u and not visited[w] and (u, w) not in edges:\n                dfs(w, v, visited, parent)\n                if visited[v]:\n                    return True\n        return False\n    \n    for i in range(1, n):\n        for j in range(i + 1, n):\n            visited = [False] * (n + 1)\n            if dfs(i, j, visited, (i, j)):\n                return 1\n    \n    return 0"
    },
    {
        "number": 4508,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:-1]]\n\n    def dfs(start: int, end: int, visited: set) -> int:\n        if start == end:\n            return 0\n        visited.add(start)\n        min_dist = float('inf')\n        for neighbor in [u for u, v in edges if v == start or u == start]:\n            if neighbor not in visited:\n                min_dist = min(min_dist, 1 + dfs(neighbor, end, visited))\n        visited.remove(start)\n        return min_dist\n\n    min_edges = 0\n    for i in range(2, n + 1):\n        if dfs(1, i, set()) > 2:\n            min_edges += 1\n\n    return str(min_edges)"
    },
    {
        "number": 4508,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n = int(stdin.split(\"\\n\")[0])\n    edges = [tuple(map(int, line.split())) for line in stdin.split(\"\\n\")[1:-1]]\n\n    # Initialize graph and distance from vertex 1\n    graph = {i: set() for i in range(1, n + 1)}\n    distance = {i: float('inf') for i in range(1, n + 1)}\n    distance[1] = 0\n\n    # Dijkstra's algorithm to find shortest path from vertex 1 to any other vertex\n    for _ in range(n - 1):\n        u = min(distance, key=distance.get)\n        for v in graph[u]:\n            if distance[v] > distance[u] + 1:\n                distance[v] = distance[u] + 1\n        graph[u] = set()\n\n    # Count the number of edges to add\n    to_add = 0\n    for d in distance.values():\n        if d > 2:\n            to_add += 1\n\n    return str(to_add)"
    },
    {
        "number": 4508,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    edges = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n\n    def dfs(node: int, visited: set, parent: int) -> bool:\n        visited.add(node)\n        for neighbor in range(1, n + 1):\n            if neighbor != node and neighbor not in visited:\n                if dfs(neighbor, visited, node):\n                    return True\n            elif neighbor == parent:\n                continue\n            else:\n                return True\n        return False\n\n    count = 0\n    for i in range(1, n):\n        if dfs(i, set(), 0):\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4508,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    edges = []\n    for i in range(n - 1):\n        u, v = map(int, stdin.readline().split())\n        edges.append((u, v))\n\n    result = 0\n\n    def dfs(node, visited, path_length):\n        nonlocal result\n        if path_length == 2:\n            result += 1\n            return\n\n        for neighbor in edges:\n            if neighbor[0] == node:\n                if neighbor[1] not in visited:\n                    visited.add(neighbor[1])\n                    dfs(neighbor[1], visited, path_length + 1)\n                    visited.remove(neighbor[1])\n\n    dfs(1, {1}, 0)\n    return str(result)"
    },
    {
        "number": 4508,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    edges = [list(map(int, line.split())) for line in stdin.strip().split('\\n')[1:]]\n\n    # Build adjacency list\n    graph = [[] for _ in range(n)]\n    for u, v in edges:\n        graph[u - 1].append(v - 1)\n        graph[v - 1].append(u - 1)\n\n    def dfs(node: int, visited: set, parent: int) -> int:\n        visited.add(node)\n        min_distance = float('inf')\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                min_distance = min(min_distance, dfs(neighbor, visited, node))\n        if min_distance > 2:\n            return 1 + min_distance\n        else:\n            return 0\n\n    return str(dfs(0, set(), -1))"
    },
    {
        "number": 4508,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    max_distance = 0\n    max_distance_edge = None\n\n    for i in range(len(edges)):\n        for j in range(i + 1, len(edges)):\n            distance = max(edges[i][0], edges[i][1], edges[j][0], edges[j][1])\n            if distance > max_distance:\n                max_distance = distance\n                max_distance_edge = (i, j)\n\n    return str(max_distance - 1) if max_distance > 2 else str(0)\n\n\ninput_str = \"7\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\"\noutput_str = solution(input_str)\nprint(output_str)\n\ninput_str = \"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\"\noutput_str = solution(input_str)\nprint(output_str)\n\ninput_str = \"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\"\noutput_str = solution(input_str)\nprint(output_str) "
    },
    {
        "number": 4508,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    edges = []\n    for edge in stdin.split('\\n')[1:]:\n        u, v = edge.split(' ')\n        edges.append((int(u), int(v)))\n\n    def dfs(u: int, v: int, visited: set) -> int:\n        if u not in visited:\n            visited.add(u)\n            for neighbor in [edge[1] for edge in edges if edge[0] == u]:\n                if neighbor == v:\n                    return 1\n                else:\n                    if dfs(neighbor, v, visited):\n                        return 1\n        return 0\n\n    result = 0\n    for i in range(2, n + 1):\n        if dfs(1, i, set()):\n            result += 1\n\n    return str(result)"
    },
    {
        "number": 4508,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:-1]]\n\n    # DFS to find shortest path from vertex 1 to any other vertex\n    def dfs(u: int, visited: set) -> int:\n        visited.add(u)\n        min_path = float('inf')\n        for v in range(1, n + 1):\n            if v not in visited and (u, v) not in edges and (v, u) not in edges:\n                min_path = min(min_path, dfs(v, visited))\n        visited.remove(u)\n        return min_path + 1\n\n    min_path = dfs(1, set())\n\n    # Count the number of edges needed to be added\n    edge_count = 0\n    for u in range(1, n + 1):\n        if u != 1 and dfs(u, set()) > 2:\n            edge_count += 1\n\n    return str(edge_count)\n"
    },
    {
        "number": 4508,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n\n    # Dijkstra's algorithm to find shortest path from vertex 1\n    distances = [float('inf')] * n\n    distances[1] = 0\n    visited = [False] * n\n\n    for _ in range(n - 1):\n        min_distance = float('inf')\n        min_vertex = -1\n        for i in range(1, n):\n            if not visited[i] and distances[i] < min_distance:\n                min_distance = distances[i]\n                min_vertex = i\n        visited[min_vertex] = True\n\n        for u, v in edges:\n            if u == min_vertex or v == min_vertex:\n                new_distance = min_distance + 1\n                if new_distance < distances[v]:\n                    distances[v] = new_distance\n\n    # Check if shortest path from vertex 1 to any other vertex is at most 2\n    for distance in distances:\n        if distance > 2:\n            return str(0)\n\n    # If shortest path is at most 2, find minimum number of edges to add\n    added_edges = 0\n    for u, v in edges:\n        if distances[u] == 1 and distances[v] == 2:\n            added_edges += 1\n    return str(added_edges)"
    },
    {
        "number": 4509,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.split('\\n')[0])\n    result = []\n\n    for i in range(test_cases):\n        n, k = map(int, stdin.split('\\n')[i+1].split())\n        not_divisible = []\n        number = 1\n\n        while len(not_divisible) < k:\n            if number % n != 0:\n                not_divisible.append(number)\n            number += 1\n\n        result.append(not_divisible[-1])\n\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 4509,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.splitlines()[0])\n    result = []\n    for i in range(test_cases):\n        n, k = map(int, stdin.splitlines()[i+1].split())\n        count = 0\n        num = 0\n        while count < k:\n            num += 1\n            if num % n != 0:\n                count += 1\n        result.append(str(num))\n    return \"\\n\".join(result)"
    },
    {
        "number": 4509,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    t = int(lines[0])\n    output = \"\"\n\n    for i in range(1, t*2+1, 2):\n        n, k = map(int, lines[i].split())\n        count = 0\n        num = 1\n\n        while count < k:\n            if num % n != 0:\n                count += 1\n            if count == k:\n                output += str(num) + \"\\n\"\n                break\n            num += 1\n\n    return output\n\ndef"
    },
    {
        "number": 4509,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num_tests = int(stdin.strip().split(\"\\n\")[0])\n    output = []\n\n    for test in stdin.strip().split(\"\\n\")[1:]:\n        n, k = map(int, test.split())\n        count = 0\n        number = 1\n\n        while count < k:\n            if number % n != 0:\n                count += 1\n                if count == k:\n                    output.append(number)\n                    break\n            number += 1\n\n    return \"\\n\".join(map(str, output))\n\n\ndef"
    },
    {
        "number": 4509,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    t = int(stdin.readline().strip())\n    result = []\n    for _ in range(t):\n        n, k = map(int, stdin.readline().strip().split())\n        \n        # Calculate the k-th number that is not divisible by n\n        count = 0\n        number = 1\n        while count < k:\n            if number % n != 0:\n                count += 1\n            number += 1\n        \n        # Add the result to the list\n        result.append(str(number - 1))\n    \n    # Return the result as a single string\n    return '\\n'.join(result)"
    },
    {
        "number": 4509,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def generate_numbers(n: int, k: int) -> int:\n        num = 1\n        count = 0\n        while count < k:\n            if num % n != 0:\n                count += 1\n            num += 1\n        return num - 1\n\n    t = int(stdin.strip().split()[0])\n    result = []\n    for i in range(t):\n        n, k = map(int, stdin.strip().split()[1:])\n        result.append(generate_numbers(n, k))\n    return \"\\n\".join(map(str, result))"
    },
    {
        "number": 4509,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n, k = map(int, stdin.readline().strip().split())\n        not_divisible = []\n        for i in range(1, k*n+1):\n            if i % n != 0:\n                not_divisible.append(i)\n        result.append(str(not_divisible[k-1]))\n    return \"\\n\".join(result)\n\ninput_data = \"\"\"6\n3 7\n4 12\n2 1000000000\n7 97\n1000000000 1000000000\n2 1\"\"\"\n\nprint(solution(input_data)) "
    },
    {
        "number": 4509,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    for line in stdin.splitlines():\n        n, k = map(int, line.split())\n        i = 0\n        count = 0\n        while count < k:\n            i += 1\n            if i % n != 0:\n                count += 1\n        result.append(str(i))\n    return \"\\n\".join(result)\n\ninput_data = \"\"\"6\n3 7\n4 12\n2 1000000000\n7 97\n1000000000 1000000000\n2 1\n\"\"\"\n\nprint(solution(input_data))"
    },
    {
        "number": 4509,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    output = []\n    for line in lines[1:]:\n        n, k = map(int, line.split())\n        count = 0\n        num = 0\n        while count < k:\n            num += 1\n            if num % n != 0:\n                count += 1\n        output.append(str(num))\n    return \"\\n\".join(output)"
    },
    {
        "number": 4509,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    test_cases = int(stdin.split('\\n')[0])\n    for i in range(test_cases):\n        n, k = map(int, stdin.split('\\n')[i+1].split())\n        not_divisible_numbers = [x for x in range(1, n*k+1) if x % n != 0]\n        kth_not_divisible_number = not_divisible_numbers[k-1]\n        result.append(str(kth_not_divisible_number))\n    return '\\n'.join(result)"
    },
    {
        "number": 4510,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    messages = list(map(int, stdin.split()))\n\n    conversations = []\n    for message in messages:\n        if conversations and conversations[-1][0] == message:\n            continue\n        elif len(conversations) == k:\n            conversations.pop()\n        conversations.append([message])\n\n    result = [conversation[0] for conversation in conversations]\n\n    return str(len(result)) + \"\\n\" + \" \".join(map(str, result))\n"
    },
    {
        "number": 4510,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    messages = list(map(int, input().split()))\n    \n    conversations = []\n    for message in messages:\n        if not conversations or conversations[-1] != message:\n            conversations.append(message)\n        if len(conversations) > k:\n            conversations.pop(0)\n    \n    return str(len(conversations)) + \"\\n\" + \" \".join(map(str, conversations))"
    },
    {
        "number": 4510,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    ids = list(map(int, stdin.split()[2:]))\n\n    # Initialize an empty list to store the conversations\n    conversations = []\n\n    # Iterate through the messages\n    for message_id in ids:\n        # If the message_id is already in a conversation, then that conversation is updated\n        for i, conversation in enumerate(conversations):\n            if message_id in conversation:\n                # Update the conversation with the new message_id\n                conversations[i] = conversation + [message_id]\n                break\n        else:\n            # If the message_id is not in any conversation, then a new conversation is created\n            conversations.append([message_id])\n\n        # If the number of conversations is greater than k, then remove the last conversation\n        if len(conversations) > k:\n            conversations.pop()\n\n    # Sort the conversations by the length of the conversation in descending order\n    conversations.sort(key=lambda x: len(x), reverse=True)\n\n    # Return the number of conversations and the corresponding conversation IDs\n    return str(len(conversations)) + \"\\n\" + \" \".join(str(id) for conversation in conversations for id in conversation)"
    },
    {
        "number": 4510,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    messages = list(map(int, input().split()))\n    conversations = []\n\n    for message in messages:\n        if conversations and conversations[-1][-1] == message:\n            continue\n\n        if len(conversations) == k:\n            conversations.pop()\n\n        if not conversations or conversations[-1][-1] != message:\n            conversations.append([message])\n\n    result = [conversation[-1] for conversation in reversed(conversations)]\n    return str(len(result)) + \"\\n\" + \" \".join(map(str, result))\n\ninput_data = \"7 2\\n1 2 3 2 1 3 2\\n\"\noutput = solution(input_data)\nprint(output) "
    },
    {
        "number": 4510,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    messages = list(map(int, input().split()))\n    \n    conversations = [[] for _ in range(k)]\n    for message in messages:\n        found = False\n        for i in range(k):\n            if message in conversations[i]:\n                found = True\n                break\n        if not found:\n            if len(conversations[-1]) == k:\n                conversations.pop()\n            conversations.insert(0, [message])\n            for i in range(1, k):\n                conversations[i].insert(0, conversations[i-1][-1])\n                conversations[i-1].pop()\n    \n    result = [conversations[i][0] for i in range(len(conversations))]\n    \n    return str(len(result)) + \"\\n\" + \" \".join(map(str, result))\n\nstdin = \"7 2\\n1 2 3 2 1 3 2\"\nprint(solution(stdin)) "
    },
    {
        "number": 4510,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    ids = list(map(int, stdin.split()))\n    \n    seen = set()\n    conversations = []\n    \n    for i in range(n):\n        if ids[i] not in seen:\n            conversations.append(ids[i])\n            seen.add(ids[i])\n            \n            if len(conversations) > k:\n                conversations.pop(0)\n                \n    return f\"{len(conversations)}\\n{' '.join(map(str, conversations))}\""
    },
    {
        "number": 4510,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    messages = list(map(int, stdin.split()[2:]))\n    \n    conversations = []\n    seen = set()\n    \n    for message in messages:\n        if message not in seen:\n            if len(conversations) == k:\n                conversations.pop()\n            conversations.insert(0, message)\n            seen.add(message)\n    \n    return str(len(conversations)) + '\\n' + ' '.join(map(str, conversations))"
    },
    {
        "number": 4510,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0].split())\n    messages = list(map(int, stdin.split()[1].split()))\n\n    conversations = []\n    seen = set()\n\n    for message in messages:\n        if message not in seen:\n            if len(conversations) == k:\n                conversations.pop()\n            conversations.insert(0, message)\n            seen.add(message)\n\n    return str(len(conversations)) + \"\\n\" + \" \".join(map(str, conversations))"
    },
    {
        "number": 4510,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    friend_ids = list(map(int, stdin.split()[2:]))\n    \n    conversations = []\n    for i in range(n):\n        friend_id = friend_ids[i]\n        if not conversations or friend_id not in conversations[-1]:\n            conversations.append([friend_id])\n            if len(conversations) > k:\n                conversations.pop(0)\n        else:\n            conversations[-1].append(friend_id)\n    \n    result = [len(conversations)]\n    result.extend([conversations[i][0] for i in range(len(conversations))])\n    return \" \".join(map(str, result))\n\n\ndef"
    },
    {
        "number": 4510,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, k = map(int, stdin.split())\n    messages = list(map(int, stdin.split()))\n    \n    # Initialize conversation list\n    conversations = []\n    \n    # Process messages\n    for message in messages:\n        # If message from friend is already on the screen, do nothing\n        if message in conversations:\n            continue\n        \n        # If number of conversations on the screen is equal to k, remove the last conversation\n        if len(conversations) == k:\n            conversations.pop()\n        \n        # Add new conversation to the top of the list\n        conversations.insert(0, message)\n    \n    # Return solution\n    return str(len(conversations)) + \"\\n\" + \" \".join(map(str, conversations))"
    },
    {
        "number": 4511,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    max_damage = 0\n\n    for turn in range(n):\n        k = int(stdin.split('\\n')[2 * turn + 1])\n        cards = [list(map(int, stdin.split('\\n')[2 * turn + 2 + i].split(' '))) for i in range(k)]\n\n        total_cost = 0\n        turn_damage = 0\n        for card in cards:\n            if total_cost + card[0] <= 3:\n                total_cost += card[0]\n                turn_damage += card[1]\n                if (turn + 1) % 10 == 0 and card[1] > 0:\n                    turn_damage *= 2\n\n        max_damage = max(max_damage, turn_damage)\n\n    return str(max_damage)\n\ninput_str = \"\"\nwith open('input.txt', 'r') as file:\n    input_str = file.read()\n\nwith open('output.txt', 'w') as file:\n    file.write(solution(input_str))"
    },
    {
        "number": 4511,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    max_damage = 0\n\n    for i in range(n):\n        k = int(stdin.readline().strip())\n        cards = []\n        for j in range(k):\n            c, d = map(int, stdin.readline().strip().split())\n            cards.append((c, d))\n\n        cards.sort(key=lambda x: x[0])\n        total_cost = 0\n        turn_damage = 0\n\n        for card in cards:\n            if card[0] + total_cost <= 3:\n                total_cost += card[0]\n                turn_damage += card[1]\n                if i % 10 == 0:\n                    turn_damage *= 2\n\n        max_damage = max(max_damage, turn_damage)\n\n    return str(max_damage)\n"
    },
    {
        "number": 4511,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n = int(stdin.splitlines()[0])\n    turns = []\n    for i in range(1, n + 1):\n        k = int(stdin.splitlines()[i])\n        cards = []\n        for j in range(k):\n            c, d = map(int, stdin.splitlines()[i + j + 1].split())\n            cards.append((c, d))\n        turns.append(cards)\n    \n    # Calculate the maximum damage per turn\n    max_damage_per_turn = []\n    for cards in turns:\n        max_damage = 0\n        for i in range(len(cards)):\n            for j in range(i, len(cards)):\n                damage = 0\n                cost = 0\n                for k in range(i, j + 1):\n                    cost += cards[k][0]\n                if cost <= 3:\n                    for k in range(i, j + 1):\n                        damage += cards[k][1]\n                    if j - i % 10 == 9:\n                        damage *= 2\n                    max_damage = max(max_damage, damage)\n        max_damage_per_turn.append(max_damage)\n    \n    # Calculate the maximum total damage\n    max_total_damage = sum(max_damage_per_turn)\n    \n    return str(max_total_damage)"
    },
    {
        "number": 4511,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    cards = []\n    for _ in range(n):\n        k = int(stdin.readline())\n        turn_cards = []\n        for _ in range(k):\n            c, d = map(int, stdin.readline().split())\n            turn_cards.append((c, d))\n        cards.append(turn_cards)\n    \n    def total_damage(turn_cards):\n        total_cost = 0\n        total_damage = 0\n        for c, d in turn_cards:\n            total_cost += c\n            if total_cost > 3:\n                break\n            total_damage += d\n            if total_cost % 10 == 0:\n                total_damage *= 2\n        return total_damage\n    \n    max_damage = 0\n    for turn_cards in cards:\n        max_damage = max(max_damage, total_damage(turn_cards))\n    \n    return str(max_damage)\n\ninput_str = \"\"\nwith open(\"input.txt\", \"r\") as file:\n    input_str = file.read()\n\noutput = solution(input_str)\nprint(output) "
    },
    {
        "number": 4511,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    stdin = stdin.split('\\n')\n    del stdin[0]\n    max_damage = 0\n    \n    for i in range(n):\n        k = int(stdin[0])\n        del stdin[0]\n        \n        cards = []\n        for j in range(k):\n            cost, damage = map(int, stdin[0].split())\n            del stdin[0]\n            cards.append((cost, damage))\n        \n        cards.sort(key=lambda x: x[0])\n        total_cost = 0\n        current_damage = 0\n        \n        for card in cards:\n            if total_cost + card[0] <= 3:\n                total_cost += card[0]\n                current_damage += card[1]\n            else:\n                break\n            \n            if i % 10 == 0:\n                current_damage *= 2\n            \n        max_damage = max(max_damage, current_damage)\n    \n    return str(max_damage)"
    },
    {
        "number": 4511,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    max_damage = 0\n\n    for i in range(n):\n        k = int(stdin.readline().strip())\n        cards = []\n\n        for j in range(k):\n            c, d = map(int, stdin.readline().strip().split())\n            cards.append((c, d))\n\n        cards = sorted(cards, key=lambda x: x[0])\n\n        current_damage = 0\n        for c, d in cards:\n            current_damage += d\n            if c == 3:\n                current_damage *= 2\n\n            if current_damage > max_damage:\n                max_damage = current_damage\n\n    return str(max_damage)"
    },
    {
        "number": 4511,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    turns = int(stdin.readline().strip())\n    max_damage = 0\n\n    for turn in range(turns):\n        cards = int(stdin.readline().strip())\n        total_cost = 0\n        turn_damage = 0\n\n        for _ in range(cards):\n            cost, damage = map(int, stdin.readline().strip().split())\n            total_cost += cost\n\n            if total_cost > 3:\n                break\n\n            turn_damage += damage\n\n            if turn % 10 == 0 and total_cost == 3:\n                turn_damage *= 2\n\n        max_damage = max(max_damage, turn_damage)\n\n    return str(max_damage)\n\n\ndef"
    },
    {
        "number": 4511,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    turns = int(stdin.split('\\n', 1)[0])\n    stdin = stdin.strip()\n    max_damage = 0\n    double_turn = 0\n    \n    for turn in range(turns):\n        cards = []\n        while '\\n' in stdin:\n            line, stdin = stdin.split('\\n', 1)\n            cards.append(tuple(map(int, line.split())))\n        \n        damage = sum(card[1] for card in cards)\n        double_turn += len(cards) // 10\n        damage += (double_turn % 2) * (sum(card[1] for card in cards) // 2)\n        max_damage = max(max_damage, damage)\n    \n    return str(max_damage)"
    },
    {
        "number": 4511,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    max_damage = 0\n\n    for i in range(n):\n        k = int(stdin.readline())\n        cards = []\n        for j in range(k):\n            c, d = map(int, stdin.readline().split())\n            cards.append((c, d))\n\n        damage = 0\n        double_next_card = False\n        for card in cards:\n            if double_next_card:\n                damage += 2 * card[1]\n                double_next_card = False\n            else:\n                damage += card[1]\n                if card[0] == 3:\n                    double_next_card = True\n\n        max_damage = max(max_damage, damage)\n\n    return str(max_damage)"
    },
    {
        "number": 4511,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    max_damage = 0\n\n    for i in range(n):\n        k = int(stdin.readline().strip())\n        cards = []\n        for j in range(k):\n            c, d = map(int, stdin.readline().strip().split())\n            cards.append((c, d))\n\n        cards.sort(key=lambda x: x[0], reverse=True)\n        current_damage = 0\n        for c, d in cards:\n            if current_damage + c <= 3:\n                current_damage += c\n            else:\n                break\n\n            if (i + 1) % 10 == 0 and current_damage != 0:\n                current_damage *= 2\n\n        max_damage = max(max_damage, current_damage)\n\n    return str(max_damage)\n\ninput_data = '''5\n3\n1 6\n1 7\n1 5\n2\n1 4\n1 3\n3\n1 10\n3 5\n2 3\n3\n1 15\n2 4\n1 10\n1\n1 100'''\n\nprint(solution(input_data)) "
    },
    {
        "number": 4512,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, q = stdin.split()\n    q = int(q)\n    s = list(s)\n    distinct_chars = set(s)\n    for _ in range(q):\n        query = input().split()\n        if query[0] == \"1\":\n            pos, c = int(query[1]), query[2]\n            s[pos-1] = c\n            distinct_chars.add(c)\n        else:\n            l, r = int(query[1]), int(query[2])\n            print(len(distinct_chars.intersection(set(s[l-1:r])))))"
    },
    {
        "number": 4512,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\"\\n\")\n    s = s[0]\n    q = int(s[1])\n    queries = s[2:]\n    result = \"\"\n    for i in range(q):\n        if queries[i][0] == \"1\":\n            pos, c = queries[i].split(\" \")\n            s = s[:int(pos)-1] + c + s[int(pos):]\n        else:\n            l, r = queries[i].split(\" \")\n            sub = s[int(l)-1:int(r)]\n            result += str(len(set(sub))) + \"\\n\"\n    return result\n\ninput_data = \"\"\"abacaba\n5\n2 1 4\n1 4 b\n1 5 b\n2 4 6\n2 1 7\n\"\"\"\noutput_data = solution(input_data)\nprint(output_data) "
    },
    {
        "number": 4512,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, q = stdin.split('\\n')[0], int(stdin.split('\\n')[1])\n    queries = stdin.split('\\n')[2:]\n    distinct_chars = set(s)\n    result = \"\"\n    \n    for query in queries:\n        query_type, *args = query.split()\n        if query_type == '1':\n            pos, c = int(args[0]), args[1]\n            s = s[:pos-1] + c + s[pos:]\n            distinct_chars = set(s)\n        elif query_type == '2':\n            l, r = int(args[0]), int(args[1])\n            result += str(len(distinct_chars.intersection(set(s[l-1:r]))))) + '\\n'\n    \n    return result.strip()"
    },
    {
        "number": 4512,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s, queries = stdin.split('\\n')\n    queries = [query.split() for query in queries.split('\\n')]\n\n    for query in queries:\n        if query[0] == '1':\n            pos, c = int(query[1]), query[2]\n            s = s[:pos - 1] + c + s[pos:]\n        else:\n            l, r = int(query[1]), int(query[2])\n            distinct_chars = set(s[l - 1:r])\n            print(len(distinct_chars))"
    },
    {
        "number": 4512,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, q = stdin.split('\\n')\n    s = list(s)\n    queries = [list(map(int, query.split())) for query in stdin.split('\\n')[1:1+int(q)]]\n    \n    def replace_char(pos: int, char: str) -> None:\n        s[pos-1] = char\n    \n    def count_distinct_chars(l: int, r: int) -> int:\n        return len(set(s[l-1:r]))\n    \n    for query in queries:\n        if query[0] == 1:\n            replace_char(query[1], chr(query[2]))\n        else:\n            print(count_distinct_chars(query[1], query[2]))"
    },
    {
        "number": 4512,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s, q = stdin.split('\\n', 1)\n    q = int(q)\n    s = list(s)\n    queries = []\n    for _ in range(q):\n        query = input().split()\n        if query[0] == '1':\n            pos, c = map(int, query[1:])\n            s[pos - 1] = chr(c)\n        else:\n            l, r = map(int, query[1:])\n            queries.append((l, r))\n    \n    result = []\n    for query in queries:\n        l, r = query\n        result.append(len(set(s[l - 1:r])))\n    \n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 4512,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, q = stdin.split(\"\\n\")\n    q = int(q)\n    char_count = {}\n    result = []\n\n    for _ in range(q):\n        query = input().split()\n        if query[0] == \"1\":\n            pos, c = int(query[1]) - 1, query[2]\n            s = s[:pos] + c + s[pos + 1 :]\n        else:\n            l, r = int(query[1]) - 1, int(query[2])\n            for i in range(l, r):\n                if s[i] not in char_count:\n                    char_count[s[i]] = 0\n                char_count[s[i]] += 1\n            result.append(len(char_count))\n            char_count = {}\n\n    return \"\\n\".join(map(str, result))"
    },
    {
        "number": 4512,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, queries = stdin.split('\\n', 1)\n    queries = [list(map(int, query.split())) for query in queries.split('\\n')]\n    result = []\n    \n    for query in queries:\n        if query[0] == 1:\n            s = s[:query[1]] + chr(query[2]) + s[query[1]+1:]\n        elif query[0] == 2:\n            result.append(len(set(s[query[1]:query[2]+1])))\n    \n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 4512,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s, q = stdin.split('\\n')\n    s = list(s)\n    queries = [input().split() for _ in range(int(q))]\n    result = []\n\n    for query in queries:\n        if query[0] == '1':\n            pos, c = int(query[1]) - 1, query[2]\n            s[pos] = c\n        else:\n            l, r = int(query[1]) - 1, int(query[2])\n            result.append(len(set(s[l:r+1])))\n\n    return '\\n'.join(map(str, result))\n"
    },
    {
        "number": 4512,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[0]\n    q = int(stdin.split('\\n')[1])\n    queries = stdin.split('\\n')[2:]\n    results = []\n\n    for query in queries:\n        query_type, *args = query.split()\n        args = list(map(int, args))\n\n        if query_type == '1':\n            s = s[:args[0]] + args[2] + s[args[0] + 1:]\n        elif query_type == '2':\n            sub_s = s[args[0] - 1:args[1]]\n            result = len(set(sub_s))\n            results.append(result)\n\n    return '\\n'.join(map(str, results))"
    },
    {
        "number": 4513,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.splitlines()[0])\n    outputs = []\n    for _ in range(t):\n        sudoku = stdin.splitlines()[1:]\n        sudoku = [[int(num) for num in line] for line in sudoku]\n        for i in range(9):\n            for j in range(9):\n                if sudoku[i][j] != 0:\n                    continue\n                # check row\n                for num in range(1, 10):\n                    if num in sudoku[i] and num != 0 and num != sudoku[i][j]:\n                        sudoku[i][j] = num\n                        break\n                # check column\n                for num in range(1, 10):\n                    if num in [sudoku[k][j] for k in range(9)] and num != 0 and num != sudoku[i][j]:\n                        sudoku[i][j] = num\n                        break\n                # check block\n                block_i = i // 3 * 3\n                block_j = j // 3 * 3\n                for row in range(block_i, block_i + 3):\n                    for col in range(block_j, block_j + 3):\n                        if sudoku[row][col] == 0:\n                            continue\n                        if sudoku[row][col] != sudoku[i][j]:\n                            sudoku[i][j] = sudoku[row][col]\n                            break\n        outputs.append('\\n'.join([''.join([str(num) for num in line]) for line in sudoku]))\n    return '\\n'.join(outputs)"
    },
    {
        "number": 4513,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(board: List[List[int]]) -> bool:\n        for row in board:\n            if len(set(row)) != 9:\n                return False\n        for col in range(9):\n            if len(set([row[col] for row in board])) != 9:\n                return False\n        for i in range(0, 9, 3):\n            for j in range(0, 9, 3):\n                block = [board[x][y] for x in range(i, i + 3) for y in range(j, j + 3)]\n                if len(set(block)) != 9:\n                    return False\n        return True\n\n    def find_pair(board: List[List[int]]) -> Tuple[int, int, int, int]:\n        for i in range(9):\n            for j in range(9):\n                if board[i][j] != 0:\n                    for k in range(9):\n                        if k != j and board[i][k] == board[i][j]:\n                            return (i, j, i, k)\n                        if k != i and board[k][j] == board[i][j]:\n                            return (i, j, k, j)\n        return (-1, -1, -1, -1)\n\n    def anti_sudoku(board: List[List[int]]) -> str:\n        pair = find_pair(board)\n        if pair == (-1, -1, -1, -1):\n            for i in range(9):\n                for j in range(9):\n                    if board[i][j] == 0:\n                        board[i][j] = (board[i][j - 1] + 1) % 10\n                        return \"\".join(map(str, board[i])).replace(\"0\", \" \")\n        else:\n            board[pair[0]][pair[1]] = (board[pair[2]][pair[3]] + 1) % 10\n            return \"\".join(map(str, board[pair[0]])).replace(\"0\", \" \")\n\n    board = [list(map(int, stdin[i * 9: (i + 1) * 9])) for i in range(9)]\n    if not is_valid(board):\n        return \"Invalid input\"\n\n    return \"\".join(map(str, board[i])).replace(\"0\", \" \")\n"
    },
    {
        "number": 4513,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    board = [list(line) for line in lines]\n    changed_elements = 0\n    for i in range(9):\n        for j in range(9):\n            if changed_elements >= 9:\n                break\n            if board[i][j] == '1':\n                board[i][j] = '2'\n                changed_elements += 1\n                break\n            elif board[i][j] == '2':\n                board[i][j] = '1'\n                changed_elements += 1\n                break\n    return ''.join([''.join(row) for row in board])"
    },
    {
        "number": 4513,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    input_grid = [list(line) for line in lines]\n    output_grid = [[input_grid[i][j] for j in range(9)] for i in range(9)]\n\n    def check_row_column(i, j, x):\n        for k in range(9):\n            if k != j and output_grid[i][k] == x:\n                return True\n            if k != i and output_grid[k][j] == x:\n                return True\n        return False\n\n    def check_block(i, j, x):\n        i_start = (i // 3) * 3\n        j_start = (j // 3) * 3\n        for k in range(i_start, i_start + 3):\n            for l in range(j_start, j_start + 3):\n                if k != i and l != j and output_grid[k][l] == x:\n                    return True\n        return False\n\n    def change_element(i, j):\n        for x in range(1, 10):\n            if not check_row_column(i, j, x) and not check_block(i, j, x):\n                output_grid[i][j] = str(x)\n                return True\n        return False\n\n    for i in range(9):\n        for j in range(9):\n            if output_grid[i][j] == '.':\n                if not change_element(i, j):\n                    return \"No solution found\"\n\n    return \"\\n\".join(\"\".join(row) for row in output_grid)\n\ndef"
    },
    {
        "number": 4513,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(board, i, j, digit):\n        for row in range(9):\n            if board[row][j] == digit and row != i:\n                return False\n        for col in range(9):\n            if board[i][col] == digit and col != j:\n                return False\n        start_row, start_col = i - i % 3, j - j % 3\n        for row in range(3):\n            for col in range(3):\n                if board[row + start_row][col + start_col] == digit and (row, col) != (i % 3, j % 3):\n                    return False\n        return True\n\n    def find_empty(board):\n        for i in range(9):\n            for j in range(9):\n                if board[i][j] == 0:\n                    return i, j\n        return None\n\n    def solve(board):\n        empty = find_empty(board)\n        if not empty:\n            return True\n        i, j = empty\n        for digit in range(1, 10):\n            if is_valid(board, i, j, digit):\n                board[i][j] = digit\n                if solve(board):\n                    return True\n                board[i][j] = 0\n        return False\n\n    def change_field(board):\n        count = 0\n        while count < 9:\n            i, j = random.randint(0, 8), random.randint(0, 8)\n            if board[i][j] == 0:\n                board[i][j] = random.randint(1, 9)\n                count += 1\n\n    tests = int(stdin.readline().strip())\n    for test_num in range(tests):\n        board = [[int(x) for x in stdin.readline().strip()] for _ in range(9)]\n        solve(board)\n        change_field(board)\n        for i in range(9):\n            print(\"\".join(str(x) for x in board[i]))\n        if test_num < tests - 1:\n            print() "
    },
    {
        "number": 4513,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.splitlines()[0])\n    for i in range(t):\n        grid = stdin.splitlines()[1:10]\n        grid = [list(line) for line in grid]\n        rows = [set(row) for row in grid]\n        columns = [set(column) for column in zip(*grid)]\n        blocks = [set(grid[i:i+3]+grid[i+3:i+6]+grid[i+6:i+9]) for i in range(0,9,3)]\n        \n        for j in range(9):\n            for k in range(9):\n                if rows[j].issubset({str(x) for x in range(1,10)}) and columns[k].issubset({str(x) for x in range(1,10)}) and blocks[j//3*3+k//3].issubset({str(x) for x in range(1,10)}):\n                    continue\n                for num in range(1,10):\n                    if num not in rows[j] and num not in columns[k] and num not in blocks[j//3*3+k//3]:\n                        grid[j][k] = str(num)\n                        rows[j].add(str(num))\n                        columns[k].add(str(num))\n                        blocks[j//3*3+k//3].add(str(num))\n                        break\n        result = [\"\".join(row) for row in grid]\n        print(\"\\n\".join(result))\n        \n"
    },
    {
        "number": 4513,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    import itertools\n\n    t = int(stdin.split('\\n')[0])\n    for i in range(1, t+1):\n        sudoku = stdin.split('\\n')[i].split()\n        for j in range(1, 10):\n            for k in range(1, 10):\n                if sudoku[j][k] == '4':\n                    sudoku[j] = sudoku[j][:k] + '3' + sudoku[j][k+1:]\n                    break\n            else:\n                continue\n            break\n\n        for j in itertools.permutations(range(1, 10), 2):\n            if j[0] == 4:\n                continue\n            for k in range(1, 10):\n                if j[1] == 4:\n                    break\n                if sudoku[j[0]][k] == '4':\n                    sudoku[j[0]] = sudoku[j[0]][:k] + '3' + sudoku[j[0]][k+1:]\n                if sudoku[k][j[1]] == '4':\n                    sudoku[k] = sudoku[k][:j[1]] + '3' + sudoku[k][j[1]+1:]\n\n        for j in range(1, 10):\n            for k in range(1, 10):\n                for l in range(1, 10):\n                    if k == l:\n                        continue\n                    if sudoku[j][k] == sudoku[j][l]:\n                        sudoku[j] = sudoku[j][:k] + '1' + sudoku[j][k+1:]\n                        sudoku[j] = sudoku[j][:l] + '2' + sudoku[j][l+1:]\n        print(''.join([''.join(row) for row in sudoku]))"
    },
    {
        "number": 4513,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function takes a string representing the initial correct solution of a Sudoku puzzle and returns a string representing the\n    anti-Sudoku solution with at most 9 changes.\n    \"\"\"\n    def is_valid(board: list, i: int, j: int, num: int) -> bool:\n        \"\"\"\n        This function checks if placing a number on the given position in the given board\n        does not violate Sudoku rules.\n        \"\"\"\n        for k in range(9):\n            if board[k][j] == num or board[i][k] == num:\n                return False\n\n        i0 = (i // 3) * 3\n        j0 = (j // 3) * 3\n        for i1 in range(3):\n            for j1 in range(3):\n                if board[i0 + i1][j0 + j1] == num:\n                    return False\n\n        return True\n\n    def find_first_invalid_position(board: list) -> tuple:\n        \"\"\"\n        This function finds the first position on the board that does not\n        satisfy Sudoku rules.\n        \"\"\"\n        for i in range(9):\n            for j in range(9):\n                if board[i][j] != 0:\n                    continue\n                for num in range(1, 10):\n                    if is_valid(board, i, j, num):\n                        board[i][j] = num\n                        return (i, j)\n                board[i][j] = 0\n        return (-1, -1)\n\n    def anti_sudoku(stdin: str) -> str:\n        \"\"\"\n        This function converts a correct Sudoku puzzle into an anti-Sudoku puzzle\n        with at most 9 changes.\n        \"\"\"\n        board = [list(line) for line in stdin.split()]\n        invalid_position = find_first_invalid_position(board)\n        while invalid_position[0] != -1:\n            board[invalid_position[0]][invalid_position[1]] = 0\n            invalid_position = find_first_invalid_position(board)\n\n        # Change at most 9 elements to create the anti-Sudoku\n        i = 0\n        j = 0\n        count = 0\n        while count < 9:\n            if board[i][j] != 0:\n                board[i][j] = 0\n                count += 1\n            j += 1\n            if j == 9:\n                j = 0\n                i += 1\n                if i == 9:\n                    i = 0\n\n        return \"\\n\".join([\"\".join(row) for row in board])\n\n    t = int(stdin.split()[0])\n    result = []\n    for i in range(t):\n        input_str = \"\".join(stdin.split(\"\\n\")[1:10])\n        result.append(anti_sudoku(input_str))\n        stdin = \"\\n\".join(stdin.split(\"\\n\")[10:])\n\n    return \"\\n\".join(result)"
    },
    {
        "number": 4513,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    puzzle = []\n    for line in lines:\n        row = []\n        for char in line:\n            row.append(int(char))\n        puzzle.append(row)\n\n    def find_pair(puzzle: List[List[int]]) -> Tuple[int, int]:\n        for i in range(9):\n            for j in range(9):\n                if puzzle[i][j] != 0:\n                    count = {}\n                    for k in range(9):\n                        if k != j and puzzle[i][k] != 0 and puzzle[i][k] not in count:\n                            count[puzzle[i][k]] = True\n                    if len(count) < 8:\n                        return (i, j)\n        return (-1, -1)\n\n    pair = find_pair(puzzle)\n    if pair[0] == -1 and pair[1] == -1:\n        return \"No solution found\"\n    else:\n        i, j = pair\n        puzzle[i][j] += 1\n        if puzzle[i][j] == 10:\n            puzzle[i][j] = 0\n        return \"\\n\".join([\"\".join([str(x) for x in row]) for row in puzzle])\n\nt = int(input())\nfor i in range(t):\n    puzzle = input()\n    print(solution(puzzle)) "
    },
    {
        "number": 4513,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for case in range(t):\n        sudoku = stdin.split(\"\\n\")[1+case].split()\n        result = \"\"\n        for i in range(9):\n            for j in range(9):\n                result += sudoku[i*9+j]\n            result += \"\\n\"\n        print(result)\n\ninput_str = \"\"\"1\n154873296\n386592714\n729641835\n863725149\n975314628\n412968357\n631457982\n598236471\n247189563\"\"\"\nsolution(input_str) "
    },
    {
        "number": 4514,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(node, depth):\n        if node == 0:\n            return\n        if depth == k:\n            return 0\n        if depth == k - 1:\n            return node\n        for child in sorted(children[node]):\n            result = dfs(child, depth + 1)\n            if result:\n                return result\n        return -1\n\n    n, q = map(int, stdin.split()[:2])\n    children = {i: [] for i in range(1, n + 1)}\n    for i in range(2, n + 1):\n        children[int(stdin.split()[i - 2])].append(i)\n\n    result = []\n    for i in range(q):\n        u, k = map(int, stdin.split()[2 * i + n - 1:2 * i + n + 1])\n        result.append(dfs(u, 0))\n\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 4514,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split()[0:2])\n    edges = list(map(int, stdin.split()[2:]))\n    queries = [list(map(int, stdin.split()[2*i+2:2*i+4])) for i in range(q)]\n\n    graph = [[] for _ in range(n + 1)]\n    for i in range(1, n):\n        graph[edges[i-1]].append(i+1)\n\n    def dfs(node, k):\n        if not graph[node]:\n            return None\n        if k < len(graph[node]):\n            return graph[node][k]\n        for child in graph[node]:\n            result = dfs(child, k - len(graph[node]))\n            if result is not None:\n                return result\n        return None\n\n    answers = []\n    for query in queries:\n        answers.append(dfs(query[0], query[1] - 1))\n\n    return '\\n'.join(map(str, answers))"
    },
    {
        "number": 4514,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split()[:2])\n    queries = [list(map(int, line.split())) for line in stdin.split()[2:]]\n\n    def dfs(u: int, depth: int):\n        if depth == k:\n            return u\n        if not direct_subordinates[u]:\n            return -1\n        min_u = direct_subordinates[u][0]\n        for sub in direct_subordinates[u][1:]:\n            if sub < min_u:\n                min_u = sub\n        return dfs(min_u, depth + 1)\n\n    direct_subordinates = [[] for _ in range(n + 1)]\n    for i in range(2, n + 1):\n        direct_subordinates[p[i - 1]].append(i)\n\n    result = []\n    for u, k in queries:\n        result.append(dfs(u, 0))\n\n    return \"\\n\".join(map(str, result))\n"
    },
    {
        "number": 4514,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split()[0:2])\n    p = list(map(int, stdin.split()[2:]))\n    query_list = []\n    for _ in range(q):\n        query_list.append(list(map(int, stdin.split()[2+n+_*2:2+n+_*2+2])))\n\n    def dfs(officer, visited, result):\n        if officer not in visited:\n            visited.add(officer)\n            if officer != 1:\n                result.append(officer)\n            if officer in p:\n                dfs(p[officer-1], visited, result)\n\n    for query in query_list:\n        u, k = query[0], query[1]\n        visited = set()\n        result = []\n        dfs(u, visited, result)\n        if k <= len(result):\n            print(result[k-1])\n        else:\n            print(-1)\n\nstdin = \"9 6\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9\"\nsolution(stdin)"
    },
    {
        "number": 4514,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split()[:2])\n    tree = [[] for _ in range(n + 1)]\n    for i in range(2, n + 1):\n        tree[i].append(int(stdin.split()[i - 1]))\n\n    def dfs(node):\n        visited = set()\n        stack = [node]\n        result = []\n        while stack:\n            current = stack[-1]\n            if current in visited:\n                stack.pop()\n                continue\n            visited.add(current)\n            result.append(current)\n            for child in tree[current]:\n                if child not in visited:\n                    stack.append(child)\n        return result\n\n    queries = []\n    for _ in range(q):\n        u_i, k_i = map(int, stdin.split()[:2])\n        queries.append((u_i, k_i))\n\n    for u_i, k_i in queries:\n        sequence = dfs(u_i)\n        if len(sequence) < k_i:\n            print(\"-1\")\n        else:\n            print(sequence[k_i - 1])\n\ninput_str = \"9 6\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9\"\nsolution(input_str) "
    },
    {
        "number": 4514,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split()[:2])\n    parents = list(map(int, stdin.split()[2:]))\n    queries = [list(map(int, line.split())) for line in stdin.split('\\n')[n+1:n+q+1]]\n\n    def build_tree(parents):\n        tree = [[] for _ in range(n+1)]\n        for i in range(2, n+1):\n            tree[parents[i-1]].append(i)\n        return tree\n\n    tree = build_tree(parents)\n\n    def dfs(node, depth):\n        if not node:\n            return\n        depth += 1\n        if not node[0]:\n            return depth\n        for i in range(len(node)):\n            depth = dfs(node[i], depth)\n        return depth\n\n    for query in queries:\n        u, k = query\n        answer = dfs(tree[u], 0)\n        if answer >= k:\n            print(answer + 1)\n        else:\n            print(-1)\n\nstdin = \"\"\"9 6\n1 1 1 3 5 3 5 7\n3 1\n1 5\n3 4\n7 3\n1 8\n1 9\"\"\"\nsolution(stdin) "
    },
    {
        "number": 4514,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(u, cmd, depth):\n        if cmd == 1:\n            subordinates[depth].append(u)\n        for v in graph[u]:\n            dfs(v, cmd + 1, depth + 1)\n\n    n, q = map(int, stdin.split()[0:2])\n    graph = [[] for _ in range(n + 1)]\n    for i in range(2, n + 1):\n        graph[int(stdin.split()[i - 1])].append(i)\n\n    subordinates = [[] for _ in range(n + 1)]\n    dfs(1, 1, 0)\n\n    output = []\n    for _ in range(q):\n        u, k = map(int, stdin.split()[0:2])\n        if k > len(subordinates[u]):\n            output.append(\"-1\")\n        else:\n            output.append(str(subordinates[u][k - 1]))\n\n    return \"\\n\".join(output)\n\ninput_data = \"\"\"9 6\n1 1 1 3 5 3 5 7\n3 1\n1 5\n3 4\n7 3\n1 8\n1 9\"\"\"\nprint(solution(input_data)) "
    },
    {
        "number": 4514,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    tree = [[] for _ in range(n + 1)]\n    for i in range(2, n + 1):\n        tree[int(stdin.split()[i - 1])].append(i)\n\n    def dfs(node, commands):\n        if not tree[node]:\n            return\n        commands.append(tree[node])\n        for child in tree[node]:\n            dfs(child, commands)\n\n    def spread_command(start, commands):\n        commands.clear()\n        dfs(start, commands)\n        officers = [start]\n        for subtree in commands:\n            for officer in subtree:\n                officers.append(officer)\n        return officers\n\n    def find_kth_officer(officers, k):\n        if k > len(officers):\n            return -1\n        return officers[k - 1]\n\n    queries = []\n    for i in range(q):\n        queries.append(tuple(map(int, input().split())))\n\n    results = []\n    for u, k in queries:\n        officers = spread_command(u, [])\n        results.append(find_kth_officer(officers, k))\n\n    return \"\\n\".join(map(str, results))\n\nstdin = \"9 6\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9\"\nprint(solution(stdin)) "
    },
    {
        "number": 4514,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, input().split())\n    p = [0] + list(map(int, input().split()))\n    queries = []\n    for _ in range(q):\n        queries.append(tuple(map(int, input().split())))\n\n    def dfs(u: int) -> List[int]:\n        result = []\n        if u not in visited:\n            visited.add(u)\n            for v in graph[u]:\n                result.extend(dfs(v))\n            result.append(u)\n        return result\n\n    visited = set()\n    graph = [[] for _ in range(n + 1)]\n    for i in range(2, n + 1):\n        graph[p[i]].append(i)\n\n    results = []\n    for u, k in queries:\n        sequence = dfs(u)\n        if len(sequence) < k:\n            results.append(-1)\n        else:\n            results.append(sequence[k - 1])\n\n    return '\\n'.join(map(str, results))\n\ninput_str = \"\"\"9 6\n1 1 1 3 5 3 5 7\n3 1\n1 5\n3 4\n7 3\n1 8\n1 9\"\"\"\noutput_str = solution(input_str)\nprint(output_str) "
    },
    {
        "number": 4514,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    if q == 0 or n == 0:\n        return \"-1\"\n\n    # Create a tree from the input\n    tree = [[] for _ in range(n + 1)]\n    for i in range(2, n + 1):\n        tree[int(input())].append(i)\n\n    # Process queries\n    queries = []\n    for _ in range(q):\n        queries.append(list(map(int, input().split())))\n\n    result = []\n    for query in queries:\n        u, k = query\n        command = [u]\n        while len(command) < k:\n            next_command = []\n            for officer in command:\n                for subordinate in tree[officer]:\n                    next_command.append(subordinate)\n            command = next_command\n        if len(command) < k:\n            result.append(-1)\n        else:\n            result.append(command[k - 1])\n\n    return \"\\n\".join(map(str, result))"
    },
    {
        "number": 4515,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.strip().split()[0])\n    result = []\n    for i in range(t):\n        a, b, c, n = map(int, stdin.strip().split()[1:])\n        if a + b + c == n:\n            result.append(\"YES\")\n        else:\n            result.append(\"NO\")\n    return \"\\n\".join(result)"
    },
    {
        "number": 4515,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        a, b, c, n = map(int, stdin.readline().strip().split())\n        if a + b + c == n:\n            print(\"YES\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 4515,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.split('\\n')[0])\n    result = []\n\n    for i in range(1, test_cases + 1):\n        a, b, c, n = map(int, stdin.split('\\n')[i].split(' '))\n        if a + b + c <= n:\n            result.append(\"YES\")\n        else:\n            result.append(\"NO\")\n\n    return \"\\n\".join(result)\n"
    },
    {
        "number": 4515,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split(\"\\n\")[0])\n    output = []\n\n    for i in range(1, t + 1):\n        a, b, c, n = map(int, stdin.split(\"\\n\")[i].split())\n\n        if a + b + c == n:\n            output.append(\"YES\")\n        else:\n            output.append(\"NO\")\n\n    return \"\\n\".join(output)\n\ninput_str = \"\"\"5\n5 3 2 8\n100 101 102 105\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\"\"\"\n\nprint(solution(input_str)) "
    },
    {
        "number": 4515,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.strip().split('\\n')[0])\n    result = []\n    for i in range(1, t+1):\n        a, b, c, n = map(int, stdin.strip().split('\\n')[i].split())\n        if a + b + c == n and (a == b == c or a == b or a == c or b == c):\n            result.append(\"YES\")\n        else:\n            result.append(\"NO\")\n    return \"\\n\".join(result)\n\ninput_str = \"\"\"5\n5 3 2 8\n100 101 102 105\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\"\"\"\n\nprint(solution(input_str)) "
    },
    {
        "number": 4515,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.split(\"\\n\")\n    result = []\n\n    for test_case in test_cases[1:]:\n        a, b, c, n = map(int, test_case.split())\n\n        if a + b + c == n and a == b and b == c:\n            result.append(\"YES\")\n        else:\n            result.append(\"NO\")\n\n    return \"\\n\".join(result)\n\ndef"
    },
    {
        "number": 4515,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.splitlines()[0])\n    result = []\n\n    for i in range(1, test_cases + 1):\n        a, b, c, n = map(int, stdin.splitlines()[i].split())\n\n        if n == a + b + c:\n            result.append(\"YES\")\n        else:\n            result.append(\"NO\")\n\n    return \"\\n\".join(result)"
    },
    {
        "number": 4515,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    result = []\n    for _ in range(t):\n        a, b, c, n = map(int, stdin.split()[1:])\n        if a + b + c == n:\n            result.append(\"YES\")\n        else:\n            result.append(\"NO\")\n    return \"\\n\".join(result)"
    },
    {
        "number": 4515,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.splitlines()[0])\n    output = []\n\n    for i in range(1, test_cases + 1):\n        a, b, c, n = map(int, stdin.splitlines()[i].split())\n        total_coins = a + b + c\n\n        if total_coins == n:\n            if (a + n) % 3 == (b + n) % 3 == (c + n) % 3:\n                output.append(\"YES\")\n            else:\n                output.append(\"NO\")\n        else:\n            output.append(\"NO\")\n\n    return \"\\n\".join(output)"
    },
    {
        "number": 4515,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    lines = stdin.split('\\n')\n    test_cases = int(lines[0])\n    results = []\n\n    for i in range(1, len(lines)):\n        a, b, c, n = map(int, lines[i].split(' '))\n        # Calculate the number of coins that can be distributed to each sister\n        x = max(0, (a + b + c - n) // 3)\n        y = max(0, (a + b + c - n) // 3)\n        z = max(0, (a + b + c - n) // 3)\n        # Check if the number of coins can be distributed\n        if (a + x) == (b + y) == (c + z) == (a + b + c - n):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n\n    # Print the results\n    return \"\\n\".join(results)"
    },
    {
        "number": 4516,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    x = list(map(int, stdin.split()[2:]))\n    result = []\n    \n    for i in range(1, n + 1):\n        p = [0] * n\n        for j in range(1, n + 1):\n            p[(i - 1) % n + j] = j\n        f = sum(abs(x.index(p[i]) - x.index(p[i - 1])) for i in range(1, m))\n        result.append(f)\n    \n    return \" \".join(map(str, result))"
    },
    {
        "number": 4516,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def pos(p, val):\n        return p.index(val) + 1\n\n    def f(p):\n        return sum(abs(pos(p, x_i) - pos(p, x_j)) for x_i, x_j in zip(x, x[1:]))\n\n    n, m = map(int, stdin.readline().split())\n    x = list(map(int, stdin.readline().split()))\n\n    result = []\n    for i in range(1, n + 1):\n        p_i = [i] + [j for j in range(1, n + 1) if j != i]\n        result.append(f(p_i))\n\n    return \" \".join(map(str, result))\n"
    },
    {
        "number": 4516,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    x = list(map(int, stdin.split()[2:]))\n    result = []\n    \n    for i in range(1, n+1):\n        p_i = [i] + [j for j in range(1, n+1) if j != i]\n        x_positions = [p_i.index(x_val) for x_val in x]\n        distances = [abs(x_positions[i] - x_positions[i+1]) for i in range(m-1)]\n        result.append(sum(distances))\n    \n    return ' '.join(map(str, result))"
    },
    {
        "number": 4516,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x = list(map(int, stdin.split()))[m:]\n    result = []\n\n    for i in range(1, n + 1):\n        p_i = [i] + [x[j - 1] for j in range(1, m) if x[j - 1] != i]\n        f_i = sum([abs(p_i.index(x[j - 1]) - p_i.index(x[j])) for j in range(m)])\n        result.append(f_i)\n\n    return \" \".join(map(str, result))\n\n\ndef"
    },
    {
        "number": 4516,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    x = list(map(int, stdin.split()[2:]))\n\n    def pos(p, val):\n        return p.index(val) + 1\n\n    def f(p):\n        return sum(abs(pos(p, x[i]) - pos(p, x[i + 1])) for i in range(m - 1))\n\n    return \" \".join(str(f(p)) for p in [sorted(range(1, n + 1), key=lambda i: (i - j) % n) for j in range(1, n + 1)])\n\ninput_data = input(\"Enter the input data: \")\nprint(solution(input_data)) "
    },
    {
        "number": 4516,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    x = list(map(int, stdin.split()[2:]))\n\n    def f(p: list) -> int:\n        return sum(abs(p.index(x[i]) - p.index(x[i + 1])) for i in range(len(x) - 1))\n\n    results = []\n    for i in range(1, n + 1):\n        p = [i] + [x for x in range(1, n + 1) if x != i]\n        results.append(f(p))\n\n    return \" \".join(map(str, results))\n"
    },
    {
        "number": 4516,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def pos(p: list, val: int) -> int:\n        return p.index(val)\n\n    def f(p: list, x: list) -> int:\n        return sum(abs(pos(p, x[i]) - pos(p, x[i + 1])) for i in range(len(x) - 1))\n\n    def p(n: int, i: int) -> list:\n        return [i] + [j for j in range(1, n + 1) if j != i]\n\n    n, m = map(int, stdin.split()[0:2])\n    x = list(map(int, stdin.split()[2:]))\n\n    result = [f(p(n, i), x) for i in range(1, n + 1)]\n\n    return \" \".join(map(str, result))"
    },
    {
        "number": 4516,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, m = map(int, stdin.split()[:2])\n    x = list(map(int, stdin.split()[2:]))\n\n    # calculate f for each permutation\n    f = []\n    for i in range(1, n + 1):\n        p = [i] + [j for j in range(1, n + 1) if j != i]\n        pos = {val: idx for idx, val in enumerate(p)}\n        f.append(sum(abs(pos[x[i]] - pos[x[j]]) for i in range(m - 1) for j in range(i + 1, m)))\n\n    # print output\n    return \" \".join(map(str, f))"
    },
    {
        "number": 4516,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    x = list(map(int, stdin.split()[2:]))\n\n    def f(p: list) -> int:\n        return sum([abs(pos(p, x[i]) - pos(p, x[i + 1])) for i in range(m - 1)])\n\n    def pos(p: list, val: int) -> int:\n        return p.index(val)\n\n    result = []\n    for i in range(1, n + 1):\n        p = [i] + [x for x in range(1, i)] + [x for x in range(i + 1, n + 1)]\n        result.append(f(p))\n\n    return \" \".join(map(str, result))"
    },
    {
        "number": 4516,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    x = list(map(int, stdin.split()[2:]))\n    \n    def permute(n: int, m: int) -> list:\n        if m == 1:\n            return [[x] for x in range(1, n + 1)]\n        result = []\n        for i in range(1, n + 1):\n            for j in permute(n, m - 1):\n                if i == 1 or i in j:\n                    result.append([i] + j)\n        return result\n    \n    def position(p: list, val: int) -> int:\n        return p.index(val) + 1\n    \n    def f(p: list) -> int:\n        return sum(abs(position(p, x[i]) - position(p, x[i + 1])) for i in range(m - 1))\n    \n    result = [f(p) for p in permute(n, n)]\n    return \" \".join(map(str, result))"
    },
    {
        "number": 4517,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    edges = []\n    for _ in range(n - 1):\n        u, v = map(int, input().split())\n        edges.append((u, v))\n\n    def dfs(u: int, visited: set, neighbors: list) -> None:\n        visited.add(u)\n        for v in neighbors[u]:\n            if v not in visited:\n                dfs(v, visited, neighbors)\n\n    def build_graph(edges: list) -> dict:\n        graph = {i: [] for i in range(1, n + 1)}\n        for u, v in edges:\n            graph[u].append(v)\n            graph[v].append(u)\n        return graph\n\n    def has_path(u: int, vertices: set, neighbors: list) -> bool:\n        visited = set()\n        dfs(u, visited, neighbors)\n        return all(vertex in visited for vertex in vertices)\n\n    def process_query(query: list) -> str:\n        k, *vertices = map(int, query)\n        return \"YES\" if any(has_path(u, set(vertices), build_graph(edges)) for u in range(1, n + 1)) else \"NO\"\n\n    queries = [input().split() for _ in range(m)]\n    return \"\\n\".join(process_query(query) for query in queries)\n\ninput_data = \"\"\"10 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\"\"\"\n\nprint(solution(input_data)) "
    },
    {
        "number": 4517,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    graph = [[] for _ in range(n+1)]\n    for i in range(n-1):\n        u, v = map(int, stdin.split()[2:4])\n        graph[u].append(v)\n        graph[v].append(u)\n\n    def dfs(v, visited, k, vertices):\n        visited.add(v)\n        if v in vertices:\n            return True\n        for u in graph[v]:\n            if u not in visited:\n                if dfs(u, visited, k, vertices):\n                    return True\n        return False\n\n    for i in range(m):\n        k = int(stdin.split()[0])\n        vertices = set(map(int, stdin.split()[1:k+1]))\n        visited = set()\n        for v in graph[1]:\n            if v not in visited:\n                if dfs(v, visited, k, vertices):\n                    print(\"YES\")\n                    break\n        else:\n            print(\"NO\")\n\nstdin = input()\nsolution(stdin) "
    },
    {
        "number": 4517,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    edges = []\n    for i in range(n-1):\n        u, v = map(int, stdin.split()[:2])\n        edges.append((u, v))\n        edges.append((v, u))\n    queries = []\n    for i in range(m):\n        k = int(stdin.split()[0])\n        vertices = list(map(int, stdin.split()[:k]))\n        queries.append(vertices)\n    return \"\".join([solve(n, edges, query) for query in queries])\n\ndef"
    },
    {
        "number": 4517,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    graph = [[] for _ in range(n)]\n    for i in range(n-1):\n        u, v = map(int, stdin.split()[2:])\n        graph[u-1].append(v-1)\n        graph[v-1].append(u-1)\n\n    def dfs(u: int, k: set, visited: set) -> bool:\n        if u in k:\n            return True\n        visited.add(u)\n        for v in graph[u]:\n            if v not in visited:\n                if dfs(v, k, visited):\n                    return True\n        return False\n\n    def query(k: int, vertices: list) -> str:\n        k_set = set(vertices)\n        for i in range(1, n):\n            if dfs(i, k_set, set()):\n                return \"YES\"\n        return \"NO\"\n\n    result = []\n    for i in range(m):\n        k = int(stdin.split()[0])\n        vertices = list(map(int, stdin.split()[1:]))\n        result.append(query(k, vertices))\n\n    return \"\\n\".join(result)\n\n\ninput_str = \"\"\"10 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\"\"\"\n\nprint(solution(input_str)) "
    },
    {
        "number": 4517,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def find_path(graph, start, end, visited):\n        if start == end:\n            return True\n        visited.add(start)\n        for neighbor in graph[start]:\n            if neighbor not in visited:\n                if find_path(graph, neighbor, end, visited):\n                    return True\n        return False\n\n    def create_graph(edges):\n        graph = {i: [] for i in range(1, n + 1)}\n        for edge in edges:\n            u, v = edge\n            graph[u].append(v)\n            graph[v].append(u)\n        return graph\n\n    def process_query(graph, k_vertices):\n        start = 1\n        for vertex in k_vertices:\n            visited = set()\n            if find_path(graph, start, vertex, visited):\n                return \"YES\"\n        return \"NO\"\n\n    input_lines = stdin.splitlines()\n    n, m = map(int, input_lines[0].split())\n    edges = [tuple(map(int, line.split())) for line in input_lines[1:n]]\n    queries = [line.split() for line in input_lines[n:n + m]]\n\n    graph = create_graph(edges)\n    results = []\n    for i in range(m):\n        k_vertices = list(map(int, queries[i][1:]))\n        results.append(process_query(graph, k_vertices))\n\n    return \"\\n\".join(results)"
    },
    {
        "number": 4517,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(node, visited, query):\n        if node in visited:\n            return False\n        visited.add(node)\n        if node in query:\n            return True\n        for neighbor in graph[node]:\n            if dfs(neighbor, visited, query):\n                return True\n        return False\n\n    n, m = map(int, stdin.split()[0:2])\n    graph = {i: [] for i in range(1, n+1)}\n    edges = [list(map(int, line.split())) for line in stdin.splitlines()[2:n+1]]\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n\n    for i in range(m):\n        query = list(map(int, stdin.splitlines()[2+n+i].split()[1:]))\n        visited = set()\n        for node in graph[1]:\n            if dfs(node, visited, query):\n                print(\"YES\")\n                break\n        else:\n            print(\"NO\")"
    },
    {
        "number": 4517,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(v1, v2):\n        return v1 in tree[v2] or v2 in tree[v1]\n\n    def dfs(v, visited, k):\n        if k == 0:\n            return True\n        visited.add(v)\n        for neighbor in tree[v]:\n            if neighbor not in visited:\n                if is_valid(v, neighbor) and dfs(neighbor, visited.copy(), k - 1):\n                    return True\n        return False\n\n    n, m = map(int, stdin.readline().strip().split())\n    tree = {i: set() for i in range(1, n + 1)}\n\n    for _ in range(n - 1):\n        u, v = map(int, stdin.readline().strip().split())\n        tree[u].add(v)\n        tree[v].add(u)\n\n    for _ in range(m):\n        k = int(stdin.readline().strip())\n        vertices = list(map(int, stdin.readline().strip().split()))\n        valid_vertices = set(vertices)\n\n        for v in valid_vertices:\n            if not is_valid(1, v):\n                break\n        else:\n            visited = set()\n            if dfs(1, visited, len(valid_vertices)):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        continue\n\n    return \"\""
    },
    {
        "number": 4517,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(start, target, visited, vertices, distances):\n        if start in visited:\n            return False\n        visited.add(start)\n        if start == target:\n            return True\n        for i in range(len(distances)):\n            if distances[start - 1][i] == 1 and dfs(vertices[i], target, visited, vertices, distances):\n                return True\n        return False\n\n    n, m = map(int, stdin.readline().split())\n    vertices = [[] for _ in range(n)]\n    for _ in range(n - 1):\n        u, v = map(int, stdin.readline().split())\n        vertices[u - 1].append(v)\n        vertices[v - 1].append(u)\n\n    distances = [[-1] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if j in vertices[i]:\n                distances[i][j] = 1\n\n    for i in range(n):\n        for j in range(n):\n            if distances[i][j] == -1:\n                for k in range(n):\n                    if distances[i][k] == 1 and distances[k][j] == 1:\n                        distances[i][j] = 2\n                        break\n\n    for _ in range(m):\n        k, *vertices = map(int, input().split())\n        visited = set()\n        for i in range(k):\n            if dfs(1, vertices[i], visited, vertices, distances):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n<|im_sep|> "
    },
    {
        "number": 4517,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    tree = [[] for _ in range(n + 1)]\n    for i in range(n - 1):\n        u, v = map(int, stdin.split()[2:])\n        tree[u].append(v)\n        tree[v].append(u)\n\n    def bfs(start: int, end: int, visited: set) -> bool:\n        queue = [(start, 0)]\n        while queue:\n            current, distance = queue.pop(0)\n            if current == end:\n                return True\n            if current not in visited:\n                visited.add(current)\n                for neighbor in tree[current]:\n                    queue.append((neighbor, distance + 1))\n        return False\n\n    for i in range(m):\n        k, *vertices = map(int, stdin.split())\n        result = \"YES\"\n        for vertex in vertices:\n            visited = set()\n            if not bfs(1, vertex, visited):\n                result = \"NO\"\n                break\n            for neighbor in tree[vertex]:\n                if neighbor not in visited:\n                    if not bfs(1, neighbor, visited):\n                        result = \"NO\"\n                        break\n            if result == \"NO\":\n                break\n        print(result)\n\nstdin = \"\"\nwhile True:\n    try:\n        stdin += input() + \"\\n\"\n    except EOFError:\n        break\n\nsolution(stdin) "
    },
    {
        "number": 4517,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def check_path(node: int, query: set, visited: set) -> bool:\n        if node in query:\n            return True\n        visited.add(node)\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                if check_path(neighbor, query, visited):\n                    return True\n        return False\n\n    def process_query(query: list) -> str:\n        k, *vertices = query\n        query_set = set(vertices)\n        for node in range(1, n + 1):\n            if node not in visited and check_path(node, query_set, set()):\n                return \"YES\"\n        return \"NO\"\n\n    n, m = map(int, stdin.readline().split())\n    graph = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u, v = map(int, stdin.readline().split())\n        graph[u].append(v)\n        graph[v].append(u)\n\n    visited = set()\n    queries = []\n    for i in range(m):\n        query = list(map(int, stdin.readline().split()))\n        queries.append(query)\n\n    results = []\n    for query in queries:\n        results.append(process_query(query))\n\n    return \"\\n\".join(results)\n\ninput_data = \"\"\"10 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\"\"\"\n\nprint(solution(input_data)) "
    },
    {
        "number": 4518,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    result = []\n\n    for i in range(t):\n        n = int(input().split()[0])\n        a = list(map(int, input().split()))\n\n        if n == 1:\n            result.append(\"NO\")\n            continue\n\n        visited = [False] * n\n        edges = []\n\n        def dfs(v: int) -> None:\n            visited[v] = True\n            for u in range(n):\n                if not visited[u] and a[v] != a[u]:\n                    edges.append((v, u))\n                    dfs(u)\n\n        dfs(0)\n\n        if len(edges) == n - 1:\n            result.append(\"YES\")\n            for edge in edges:\n                result.append(\" \".join(map(str, edge)))\n        else:\n            result.append(\"NO\")\n\n    return \"\\n\".join(result)\n\nstdin = \"\"\nwith open(\"input.txt\", \"r\") as file:\n    stdin = file.read()\n\nwith open(\"output.txt\", \"w\") as file:\n    file.write(solution(stdin)) "
    },
    {
        "number": 4518,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def find_path(graph: List[List[int]], start: int, end: int, visited: set) -> bool:\n        if start == end:\n            return True\n        visited.add(start)\n        for next_node in graph[start]:\n            if next_node not in visited:\n                if find_path(graph, next_node, end, visited):\n                    return True\n        return False\n\n    def is_revolt(roads: List[Tuple[int, int]], gangs: List[int]) -> bool:\n        for road in roads:\n            if gangs[road[0] - 1] == gangs[road[1] - 1]:\n                return True\n        return False\n\n    def build_roads(n: int, gangs: List[int], start: int = 1) -> Optional[List[Tuple[int, int]]]:\n        roads = []\n        if start > n:\n            if is_revolt(roads, gangs):\n                return None\n            if find_path(graph, 1, n, set()):\n                return roads\n            return None\n\n        for i in range(start, n + 1):\n            if i != start:\n                roads.append((start, i))\n                result = build_roads(n, gangs, start + 1)\n                if result is not None:\n                    return result + roads\n                roads.pop()\n\n    t = int(stdin.readline().strip())\n    output = []\n\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        gangs = list(map(int, stdin.readline().strip().split()))\n        graph = [[] for _ in range(n + 1)]\n\n        for i in range(n):\n            for j in range(i + 1, n):\n                if gangs[i] != gangs[j]:\n                    graph[i + 1].append(j + 1)\n                    graph[j + 1].append(i + 1)\n\n        roads = build_roads(n, gangs)\n        if roads is None:\n            output.append(\"NO\\n\")\n        else:\n            output.append(\"YES\\n\")\n            output.extend(f\"{x} {y}\\n\" for x, y in roads)\n\n    return \"\".join(output)"
    },
    {
        "number": 4518,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    result = []\n    for i in range(t):\n        n = int(stdin.split('\\n')[1 + i * 2])\n        gangs = list(map(int, stdin.split('\\n')[2 + i * 2].split()))\n        if n == 2:\n            result.append(\"NO\")\n            continue\n        roads = []\n        for j in range(n):\n            for k in range(j + 1, n):\n                if gangs[j] != gangs[k]:\n                    roads.append((j + 1, k + 1))\n        if len(roads) == n - 1:\n            result.append(\"YES\")\n            for road in roads:\n                result.append(\" \".join(map(str, road)))\n        else:\n            result.append(\"NO\")\n    return \"\\n\".join(result)"
    },
    {
        "number": 4518,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def read_test_case():\n        n = int(input())\n        gangs = list(map(int, input().split()))\n        return n, gangs\n\n    def can_build_roads(n: int, gangs: list) -> bool:\n        visited = [False] * n\n        def dfs(start):\n            visited[start] = True\n            for i in range(n):\n                if not visited[i] and gangs[start] != gangs[i]:\n                    dfs(i)\n\n        dfs(0)\n        return all(visited)\n\n    def find_roads(n: int, gangs: list) -> list:\n        visited = [False] * n\n        roads = []\n        def dfs(start, target):\n            visited[start] = True\n            if start == target:\n                return True\n            for i in range(n):\n                if not visited[i] and gangs[start] != gangs[i]:\n                    if dfs(i, target):\n                        roads.append((start, i))\n                        return True\n            return False\n\n        for i in range(1, n):\n            if not dfs(0, i):\n                return []\n        return roads\n\n    test_cases = int(stdin.splitlines()[0])\n    for i in range(1, test_cases + 1):\n        n, gangs = read_test_case()\n        if can_build_roads(n, gangs):\n            roads = find_roads(n, gangs)\n            print(\"YES\")\n            for road in roads:\n                print(f\"{road[0]} {road[1]}\")\n        else:\n            print(\"NO\")\n\ninput_str = \"\"\"5\n1 2 2 1 3\n3\n1 1 1\n4\n1 1000 101 1000\n4\n1 2 3 4\"\"\"\nsolution(input_str) "
    },
    {
        "number": 4518,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(start: int, visited: set) -> bool:\n        if len(visited) == n:\n            return True\n        for i in range(1, n + 1):\n            if i not in visited and (start, i) in allowed_roads and (i, start) in allowed_roads:\n                visited.add(i)\n                if dfs(i, visited):\n                    return True\n                visited.remove(i)\n        return False\n\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        gangs = list(map(int, stdin.readline().split()))\n        allowed_roads = set()\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                if gangs[i] != gangs[j]:\n                    allowed_roads.add((i + 1, j + 1))\n                    allowed_roads.add((j + 1, i + 1))\n        if dfs(1, set()):\n            print(\"YES\")\n            for i, j in allowed_roads:\n                print(i, j)\n        else:\n            print(\"NO\")"
    },
    {
        "number": 4518,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    result = []\n\n    for i in range(1, t + 1):\n        stdin = stdin.split('\\n')\n        n = int(stdin[0])\n        a = list(map(int, stdin[1].split()))\n\n        if n == 2:\n            result.append(\"NO\")\n            continue\n\n        roads = []\n        for j in range(n - 1):\n            gang_count = [0] * 1000000\n\n            for k in range(n):\n                gang_count[a[k] - 1] += 1\n\n            gang_index = 0\n            for k in range(n):\n                if gang_count[a[k] - 1] > 1:\n                    break\n                gang_index = a[k]\n\n            if gang_index == 0:\n                result.append(\"NO\")\n                break\n\n            for l in range(n):\n                if a[l] != gang_index and (l + 1, k + 1) not in roads and (k + 1, l + 1) not in roads:\n                    roads.append((l + 1, k + 1))\n                    break\n\n            if len(roads) == n - 1:\n                break\n\n        if len(roads) == n - 1:\n            result.append(\"YES\")\n            for road in roads:\n                result.append(\" \".join(map(str, road)))\n        else:\n            result.append(\"NO\")\n\n    return \"\\n\".join(result)"
    },
    {
        "number": 4518,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def get_next(n, a):\n        next_ = [[] for _ in range(n)]\n        for i in range(n):\n            for j in range(n):\n                if a[i] != a[j]:\n                    next_[i].append(j)\n        return next_\n\n    def is_revolt(next_, path):\n        gang = -1\n        for p in path:\n            if gang == -1:\n                gang = a[p]\n            elif a[p] == gang:\n                return True\n        return False\n\n    def dfs(next_, path, visited, n):\n        if len(path) == n:\n            return True\n        for i in range(n):\n            if i not in visited and (i not in path or len(path) == 1 or a[path[-1]] != a[i]):\n                if not is_revolt(next_, path + [i]):\n                    visited.add(i)\n                    if dfs(next_, path + [i], visited, n):\n                        return True\n                    visited.remove(i)\n        return False\n\n    t = int(stdin.readline())\n    result = []\n    for _ in range(t):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        next_ = get_next(n, a)\n        visited = set()\n        if dfs(next_, [], visited, n):\n            path = []\n            visited = set()\n            dfs(next_, path, visited, n)\n            result.append(\"YES\")\n            for i in range(n - 1):\n                result.append(\"{} {}\".format(path[i], path[i + 1]))\n        else:\n            result.append(\"NO\")\n    return \"\\n\".join(result)\n"
    },
    {
        "number": 4518,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    cases = [line.split() for line in stdin.split('\\n')]\n    result = []\n    \n    def check_connection(graph: List[List[int]], start: int, end: int) -> bool:\n        visited = [False] * n\n        queue = [start]\n        visited[start] = True\n        while queue:\n            current = queue.pop(0)\n            if current == end:\n                return True\n            for neighbor in graph[current]:\n                if not visited[neighbor]:\n                    visited[neighbor] = True\n                    queue.append(neighbor)\n        return False\n\n    for case in cases:\n        if len(case) == 1:\n            result.append('NO')\n            continue\n        n = int(case[0])\n        gangs = list(map(int, case[1:]))\n        roads = []\n        graph = [[] for _ in range(n)]\n        \n        for i in range(n):\n            for j in range(i + 1, n):\n                if gangs[i] != gangs[j]:\n                    graph[i].append(j)\n                    graph[j].append(i)\n                    roads.append((i + 1, j + 1))\n        \n        if len(roads) == n - 1:\n            result.append('YES')\n            for road in roads:\n                result.append(f'{road[0]} {road[1]}')\n        else:\n            result.append('NO')\n    \n    return '\\n'.join(result)\n\n\ntest_input = '''5\n1 2 2 1 3\n3\n1 1 1\n4\n1 1000 101 1000\n4\n1 2 3 4'''\n\nprint(solution(test_input)) "
    },
    {
        "number": 4518,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    output = []\n\n    for _ in range(t):\n        n = int(stdin.readline())\n        gangs = list(map(int, stdin.readline().split()))\n        reachable = [-1] * n\n        connected = [-1] * n\n        adj_list = [[] for _ in range(n)]\n\n        for i in range(n):\n            for j in range(i + 1, n):\n                if gangs[i] != gangs[j]:\n                    adj_list[i].append(j)\n                    adj_list[j].append(i)\n\n        def dfs(v, depth):\n            reachable[v] = depth\n            if depth == n - 1:\n                return True\n            for neighbor in adj_list[v]:\n                if reachable[neighbor] == -1:\n                    if dfs(neighbor, depth + 1):\n                        connected[depth] = v\n                        connected[depth + 1] = neighbor\n                        return True\n            return False\n\n        if dfs(0, 0):\n            output.append(\"YES\")\n            for i in range(n - 1):\n                output.append(\"{} {}\".format(connected[i] + 1, connected[i + 1] + 1))\n        else:\n            output.append(\"NO\")\n\n    return \"\\n\".join(output)"
    },
    {
        "number": 4518,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    t = int(stdin[0])\n    result = []\n    for i in range(1, t+1):\n        n = int(stdin[i])\n        gangs = [int(x) for x in stdin[i+1].split()]\n        connections = []\n        for j in range(n):\n            for k in range(j+1, n):\n                if gangs[j] != gangs[k]:\n                    connections.append((j+1, k+1))\n        if len(connections) >= n-1:\n            result.append(\"YES\")\n            for road in connections[:n-1]:\n                result.append(\" \".join(map(str, road)))\n        else:\n            result.append(\"NO\")\n    return \"\\n\".join(result)\n\ninput_data = \"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\"\nprint(solution(input_data)) "
    },
    {
        "number": 4519,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split('\\n')\n    num_test_cases = int(input_lines[0])\n    results = []\n\n    for i in range(1, num_test_cases + 1):\n        n, k = map(int, input_lines[i * 2 - 1].split())\n        binary_string = input_lines[i * 2]\n        min_binary_string = ''\n\n        for j in range(n):\n            if j % 2 == 0:\n                min_binary_string += binary_string[j]\n            else:\n                min_binary_string += '1' if k > 0 and binary_string[j] == '0' else '0'\n                k -= 1 if k > 0 and binary_string[j] == '0' else 0\n\n        results.append(min_binary_string)\n\n    return '\\n'.join(results)\n\ndef"
    },
    {
        "number": 4519,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    \n    for _ in range(q):\n        n, k = map(int, stdin.readline().split())\n        s = stdin.readline().strip()\n        \n        # Count the number of 1s and 0s in the string\n        ones = s.count('1')\n        zeros = n - ones\n        \n        # If there are more 1s than 0s, swap the last 1 and the first 0\n        if ones > zeros:\n            s = s[:zeros] + '0' + s[zeros+1:]\n            s = s[:ones-1] + '1' + s[ones:]\n        \n        # If there are more 0s than 1s, swap the last 0 and the first 1\n        if zeros > ones:\n            s = s[:ones] + '1' + s[ones+1:]\n            s = s[:zeros-1] + '0' + s[zeros:]\n        \n        # If there are no more moves left, return the sorted string\n        if k == 0:\n            return s\n        \n        # If there are still moves left, swap the last 1 and the first 0 as many times as possible\n        while ones < zeros and k > 0:\n            s = s[:zeros] + '0' + s[zeros+1:]\n            s = s[:ones-1] + '1' + s[ones:]\n            ones += 1\n            zeros -= 1\n            k -= 1\n        \n        # Swap the last 0 and the first 1 as many times as possible\n        while zeros > ones and k > 0:\n            s = s[:ones] + '1' + s[ones+1:]\n            s = s[:zeros-1] + '0' + s[zeros:]\n            ones -= 1\n            zeros += 1\n            k -= 1\n        \n        return s\n    \n"
    },
    {
        "number": 4519,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.readline())\n\n    for _ in range(test_cases):\n        n, k = map(int, stdin.readline().split())\n        s = stdin.readline().strip()\n\n        s = list(s)\n        for i in range(n - 1):\n            for j in range(min(k, n - 1 - i)):\n                if s[i] > s[i + 1]:\n                    s[i], s[i + 1] = s[i + 1], s[i]\n                    k -= 1\n\n        print(\"\".join(s))"
    },
    {
        "number": 4519,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    for _ in range(q):\n        n, k = map(int, stdin.readline().strip().split())\n        s = stdin.readline().strip()\n        min_s = s\n        for _ in range(k):\n            min_s = min(min_s, min_s[1:] + min_s[0]))\n        print(min_s)"
    },
    {
        "number": 4519,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    result = []\n    for _ in range(q):\n        n, k = map(int, stdin.readline().split())\n        s = list(stdin.readline().strip())\n        for i in range(n - 1, 0, -1):\n            if s[i] > s[i - 1]:\n                s[i - 1], s[i] = s[i], s[i - 1]\n                k -= 1\n                if k == 0:\n                    break\n        result.append(\"\".join(s))\n    return \"\\n\".join(result)\n\nstdin = open(\"input.txt\", \"r\")\nstdout = open(\"output.txt\", \"w\")\nstdout.write(solution(stdin))\nstdout.close() "
    },
    {
        "number": 4519,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    for _ in range(q):\n        n, k = map(int, stdin.readline().split())\n        s = stdin.readline().strip()\n        stack = []\n        for i in range(n):\n            if s[i] == '1':\n                while stack and stack[-1] == '1' and k:\n                    stack.pop()\n                    k -= 1\n                stack.append('1')\n        while k > 0 and stack[-1] == '1':\n            stack.pop()\n            k -= 1\n        while k > 0 and stack[-1] == '0':\n            stack.pop()\n            k -= 1\n        while k > 0 and stack[-1] == '0' and stack[-2] == '1':\n            stack[-2], stack[-1] = stack[-1], stack[-2]\n            k -= 1\n        while stack:\n            print(stack.pop(), end='')\n        print()\n\nwith open(\"input.txt\") as f:\n    solution(f) "
    },
    {
        "number": 4519,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def min_string(s: str, k: int) -> str:\n        n = len(s)\n        if k >= n:\n            return \"\".join(sorted(s))\n        min_s = s[:]\n        for i in range(k):\n            for j in range(n - 1):\n                if s[j] > s[j + 1]:\n                    min_s[j], min_s[j + 1] = min_s[j + 1], min_s[j]\n        return \"\".join(min_s)\n\n    tests = stdin.split(\"\\n\")\n    q = int(tests[0])\n    result = []\n\n    for i in range(1, q * 2 + 1, 2):\n        n, k = map(int, tests[i].split())\n        s = tests[i + 1]\n        result.append(min_string(s, k))\n\n    return \"\\n\".join(result)"
    },
    {
        "number": 4519,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def swap(s, i):\n        return s[:i] + s[i+1] + s[i] + s[i+2:]\n\n    q = int(stdin.readline())\n\n    for _ in range(q):\n        n, k = map(int, stdin.readline().split())\n        s = stdin.readline().strip()\n\n        for i in range(min(k, n-1)):\n            if s[i] > s[i+1]:\n                s = swap(s, i)\n                k -= 1\n\n        print(s)"
    },
    {
        "number": 4519,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_sorted(s: str) -> bool:\n        return all(s[i] <= s[i + 1] for i in range(len(s) - 1))\n\n    def swap(s: str, i: int) -> str:\n        return s[:i] + s[i + 1] + s[i] + s[i + 2:]\n\n    def min_string(s: str, k: int) -> str:\n        if is_sorted(s):\n            return s\n        elif k == 0:\n            return min(s) + s[1:]\n\n        result = s\n        for i in range(len(s) - 1):\n            if s[i] > s[i + 1]:\n                new_result = swap(result, i)\n                if is_sorted(new_result) or (k > 0 and min_string(new_result, k - 1) < new_result):\n                    result = new_result\n                    k -= 1\n\n        return result\n\n    q = int(stdin.readline())\n    for _ in range(q):\n        n, k = map(int, stdin.readline().split())\n        s = stdin.readline().strip()\n        print(min_string(s, k))"
    },
    {
        "number": 4519,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    \n    for _ in range(q):\n        n, k = map(int, stdin.readline().split())\n        s = stdin.readline().strip()\n        \n        s = list(s)\n        for i in range(k):\n            for j in range(n - 1):\n                if s[j] > s[j + 1]:\n                    s[j], s[j + 1] = s[j + 1], s[j]\n                    break\n            else:\n                break\n        \n        print(''.join(s))\n        \n    return \"\"\n"
    },
    {
        "number": 4520,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    segments = [(int(line.split()[0]), int(line.split()[1])) for line in stdin.split('\\n')[1:n+1]]\n    \n    points_covered = {i:0 for i in range(1, 201)}\n    for segment in segments:\n        for point in range(segment[0], segment[1]+1):\n            points_covered[point] += 1\n    \n    bad_points = [point for point in points_covered if points_covered[point] > k]\n    bad_segments = []\n    for segment in segments:\n        covered_count = 0\n        for point in range(segment[0], segment[1]+1):\n            if points_covered[point] > k:\n                covered_count += 1\n        if covered_count > k:\n            bad_segments.append(segment)\n    \n    m = len(bad_segments)\n    print(m)\n    print(' '.join(map(str, bad_segments)))\n    \n    return stdin\n\nstdin = '''7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9'''\nprint(solution(stdin)) "
    },
    {
        "number": 4520,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def is_bad_point(point: int, segments: list) -> bool:\n        bad_count = 0\n        for segment in segments:\n            if segment[0] <= point <= segment[1]:\n                bad_count += 1\n                if bad_count > k:\n                    return True\n        return False\n\n    def remove_bad_points(segments: list) -> list:\n        bad_segments = []\n        for i, segment in enumerate(segments):\n            if is_bad_point(segment[0], segments):\n                bad_segments.append(i)\n            if is_bad_point(segment[1], segments):\n                bad_segments.append(i)\n        return bad_segments\n\n    n, k = map(int, stdin.split()[0:2])\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.split()[2:])\n        segments.append((l, r))\n\n    bad_segments = remove_bad_points(segments)\n    return str(len(bad_segments)) + \"\\n\" + \" \".join(map(str, bad_segments))"
    },
    {
        "number": 4520,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    segments = []\n    for i in range(n):\n        l, r = map(int, input().split())\n        segments.append((l, r))\n\n    def is_bad(point):\n        count = 0\n        for segment in segments:\n            if segment[0] <= point <= segment[1]:\n                count += 1\n                if count > k:\n                    return True\n        return False\n\n    bad_points = []\n    for i in range(1, 201):\n        if is_bad(i):\n            bad_points.append(i)\n\n    if not bad_points:\n        return \"0\\n\"\n\n    m = 0\n    remove = set()\n    for point in bad_points:\n        for i, segment in enumerate(segments):\n            if segment[0] <= point <= segment[1]:\n                remove.add(i)\n                m += 1\n                break\n\n    result = []\n    for i in range(n):\n        if i not in remove:\n            result.append(i)\n\n    return f\"{m}\\n{' '.join(map(str, result))}\\n\"\n\nstdin = \"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\"\nprint(solution(stdin))\n\nstdin = \"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\"\nprint(solution(stdin))\n\nstdin = \"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\"\nprint(solution(stdin)) "
    },
    {
        "number": 4520,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.split())\n        segments.append((l, r))\n\n    # Sort segments by their start points\n    segments.sort(key=lambda x: x[0])\n\n    i = 0\n    count = 0\n    result = []\n\n    while i < n:\n        current_bad_count = 0\n        start = segments[i][0]\n        end = segments[i][1]\n\n        # Count number of bad segments that contain start point\n        while i < n and segments[i][0] <= start:\n            current_bad_count += 1\n            i += 1\n\n        # Remove segments until there are no bad segments or end point is reached\n        while i < n and current_bad_count > k:\n            if segments[i][1] < end:\n                current_bad_count -= 1\n            i += 1\n\n        # If there are no bad segments or end point is reached, add segment to result\n        if current_bad_count <= k:\n            result.append(count)\n        count += 1\n\n    return str(len(result)) + \"\\n\" + \" \".join(map(str, result))"
    },
    {
        "number": 4520,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    segments = [(int(l), int(r)) for l, r in map(lambda x: x.split(), stdin.split()[2:])]\n    \n    # Sort the segments by their right ends\n    segments.sort(key=lambda x: x[1])\n    \n    # Initialize the count of segments covering each integer point\n    coverage = [0] * (n + 1)\n    \n    # Iterate through the segments and update the coverage count\n    for i, (l, r) in enumerate(segments, start=1):\n        coverage[l] += 1\n        coverage[r] -= 1\n        \n        if coverage[l] > k:\n            return str(i) + '\\n' + str(i)\n    \n    # Find the minimum number of segments to remove\n    m = 0\n    p = []\n    for i, c in enumerate(coverage[:-1], start=1):\n        if c <= k:\n            m += 1\n        else:\n            p.append(i)\n    \n    # Print the result\n    return str(m) + '\\n' + ' '.join(map(str, p)) "
    },
    {
        "number": 4520,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    segments = [tuple(map(int, line.split())) for line in stdin.split()[2:]]\n    bad_points = set()\n\n    # Find all bad points\n    for i in range(n):\n        for j in range(segments[i][0], segments[i][1] + 1):\n            count = 1\n            for p in range(n):\n                if p == i:\n                    continue\n                if segments[p][0] <= j <= segments[p][1]:\n                    count += 1\n                    if count > k:\n                        bad_points.add(j)\n                        break\n\n    # Remove segments with the minimum number of bad points\n    min_count = n\n    min_segments = set(range(n))\n    for i in range(n):\n        count = 0\n        segments_to_remove = set()\n        for p in range(n):\n            if p == i:\n                continue\n            if segments[p][0] <= segments[i][0] <= segments[p][1]:\n                count += 1\n                segments_to_remove.add(p)\n            if segments[p][0] <= segments[i][1] <= segments[p][1]:\n                count += 1\n                segments_to_remove.add(p)\n        if count < min_count:\n            min_count = count\n            min_segments = segments_to_remove\n\n    return str(len(min_segments)) + '\\n' + ' '.join(map(str, sorted(min_segments)))"
    },
    {
        "number": 4520,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    segments = [tuple(map(int, line.split())) for line in stdin.split()[2:]]\n    \n    covered_points = [0] * 201\n    for segment in segments:\n        l, r = segment\n        for i in range(l, r+1):\n            covered_points[i] += 1\n    \n    bad_points = [i+1 for i in range(201) if covered_points[i] > k]\n    bad_points = set(bad_points)\n    \n    removed_segments = set()\n    for i, segment in enumerate(segments):\n        if any(point in bad_points for point in range(segment[0], segment[1]+1)):\n            removed_segments.add(i+1)\n    \n    return str(len(removed_segments)) + \"\\n\" + \" \".join(map(str, sorted(removed_segments)))\n\ninputs = [\n    \"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\",\n    \"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\",\n    \"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\"\n]\n\nfor input in inputs:\n    print(solution(input))\n    "
    },
    {
        "number": 4520,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[:2])\n    segments = []\n    for line in stdin.split(\"\\n\")[2:]:\n        if line:\n            segments.append(list(map(int, line.split())))\n\n    # Calculate bad points\n    bad_points = set()\n    for i in range(1, 201):\n        count = 0\n        for segment in segments:\n            if segment[0] <= i <= segment[1]:\n                count += 1\n        if count > k:\n            bad_points.add(i)\n\n    # Remove segments\n    removed_segments = set()\n    for i in range(len(segments)):\n        if segments[i][0] in bad_points and segments[i][1] in bad_points:\n            removed_segments.add(i)\n\n    return len(removed_segments), \" \".join(map(str, sorted(removed_segments)))\n\ninputs = [\n    \"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\",\n    \"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\",\n    \"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\"\n]\n\nfor input in inputs:\n    result = solution(input)\n    print(result) "
    },
    {
        "number": 4520,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    segments = [tuple(map(int, line.split())) for line in stdin.split(\"\\n\")[1:n+1]]\n\n    def is_bad_point(point: int, segments: List[Tuple[int, int]]) -> bool:\n        count = 0\n        for segment in segments:\n            if segment[0] <= point <= segment[1]:\n                count += 1\n        return count > k\n\n    def find_good_points(segments: List[Tuple[int, int]]) -> List[int]:\n        good_points = []\n        for segment in segments:\n            for i in range(segment[0], segment[1]+1):\n                if not is_bad_point(i, segments):\n                    good_points.append(i)\n        return good_points\n\n    def find_min_remove(segments: List[Tuple[int, int]]) -> Tuple[int, List[int]]:\n        good_points = find_good_points(segments)\n        min_remove = len(segments) - len(good_points)\n        removed_segments = []\n\n        while min_remove > 0:\n            bad_points = []\n            for segment in segments:\n                count = 0\n                for i in range(segment[0], segment[1]+1):\n                    if is_bad_point(i, [s for s in segments if s != segment]):\n                        count += 1\n                if count <= k:\n                    bad_points.append(segment)\n            removed_segments += bad_points\n            segments = [s for s in segments if s not in bad_points]\n            min_remove = len(segments) - len(good_points)\n\n        return min_remove, removed_segments\n\n    min_remove, removed_segments = find_min_remove(segments)\n    return f\"{min_remove}\\n{' '.join(str(s+1) for s in removed_segments)}\" "
    },
    {
        "number": 4520,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().strip().split())\n    segments = [tuple(map(int, stdin.readline().strip().split())) for _ in range(n)]\n    is_bad = [False] * (201 + k)\n    bad_count = 0\n    answer = []\n    \n    for l, r in segments:\n        for i in range(l, r + 1):\n            if is_bad[i]:\n                bad_count += 1\n            is_bad[i] = True\n        if bad_count <= k:\n            answer.append((l, r))\n        else:\n            for i in range(l, r + 1):\n                if is_bad[i]:\n                    bad_count -= 1\n                is_bad[i] = False\n    \n    return str(len(answer)), \" \".join(map(str, [i + 1 for i, _ in enumerate(segments) if answer[i]]))\n\nwith open(\"input.txt\", \"r\") as stdin:\n    output = solution(stdin)\n\nwith open(\"output.txt\", \"w\") as stdout:\n    stdout.write(output) "
    },
    {
        "number": 4521,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x = list(map(int, stdin.readline().split()))\n    v = list(map(int, stdin.readline().split()))\n\n    def distance(i, j, t):\n        return abs(x[i] + t * v[i] - x[j] - t * v[j])\n\n    total_distance = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            t = (x[j] - x[i]) / (v[i] - v[j])\n            if v[i] == v[j]:\n                t = (x[j] - x[i]) / (v[i] + 0.00001)\n            total_distance += distance(i, j, t)\n\n    return str(total_distance)"
    },
    {
        "number": 4521,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    xs = list(map(int, stdin.readline().split()))\n    vs = list(map(int, stdin.readline().split()))\n\n    d = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            d += min(abs(xs[i] - xs[j]), abs(xs[i] + vs[i] * 1000 - xs[j] - vs[j] * 1000) / ((vs[i] - vs[j]) or 1))\n\n    return str(d)\n"
    },
    {
        "number": 4521,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    points = list(map(int, stdin.split('\\n')[1].split()))\n    speeds = list(map(int, stdin.split('\\n')[2].split()))\n    \n    def min_distance(i, j):\n        x_i, x_j = points[i - 1], points[j - 1]\n        v_i, v_j = speeds[i - 1], speeds[j - 1]\n        return min(abs(x_i - x_j), abs((x_i - x_j) / (v_i - v_j)))\n    \n    total_distance = sum(min_distance(i, j) for i in range(1, n + 1) for j in range(i + 1, n + 1))\n    return str(total_distance)\n\ndef"
    },
    {
        "number": 4521,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x = list(map(int, stdin.readline().split()))\n    v = list(map(int, stdin.readline().split()))\n    \n    d = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            d += min(abs(x[i] - x[j]), abs(x[i] + v[i]*t - x[j] - v[j]*t))\n    \n    return str(d)"
    },
    {
        "number": 4521,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    points = [(int(x), int(v)) for x, v in zip(stdin.split()[1:2*n:2], stdin.split()[2:2*n:2])]\n\n    def distance(i, j):\n        x1, v1 = points[i]\n        x2, v2 = points[j]\n        return abs(x1 - x2) / ((v1 - v2) or 1)\n\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            result += distance(i, j)\n\n    return str(result)"
    },
    {
        "number": 4521,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input().strip())\n    x = list(map(int, input().strip().split()))\n    v = list(map(int, input().strip().split()))\n\n    min_distances = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            min_distances.append(min_distance(x[i], v[i], x[j], v[j]))\n\n    return str(sum(min_distances))\n\ndef"
    },
    {
        "number": 4521,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    xs = list(map(int, stdin.readline().split()))\n    vs = list(map(int, stdin.readline().split()))\n\n    d = sum(min(abs(xs[i] - xs[j]) / abs(vs[i] - vs[j]), 1) for i in range(n) for j in range(i+1, n))\n\n    return str(d)\n\n\ninput_file = open('input.txt', 'r')\noutput_file = open('output.txt', 'w')\noutput_file.write(solution(input_file))\noutput_file.close()\ninput_file.close() "
    },
    {
        "number": 4521,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    xs = list(map(int, stdin.readline().split()))\n    vs = list(map(int, stdin.readline().split()))\n\n    min_distances = []\n\n    for i in range(n):\n        min_distance = float('inf')\n        for j in range(n):\n            if i == j:\n                continue\n            distance = abs(xs[i] - xs[j]) / abs(vs[i] - vs[j])\n            min_distance = min(min_distance, distance)\n        min_distances.append(min_distance)\n\n    return str(sum(min_distances))\n\ndef"
    },
    {
        "number": 4521,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    x = list(map(int, stdin.readline().strip().split()))\n    v = list(map(int, stdin.readline().strip().split()))\n\n    min_distances = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            min_distances += abs(x[i] - x[j]) / max(abs(v[i]), abs(v[j]))\n\n    return str(int(min_distances))"
    },
    {
        "number": 4521,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    xs = list(map(int, stdin.split()[1:n+1]))\n    vs = list(map(int, stdin.split()[n+1:]))\n    \n    def min_distance(i, j):\n        return abs(xs[i] - xs[j]) / max(abs(vs[i]), abs(vs[j]))\n    \n    result = sum(min_distance(i, j) for i in range(n) for j in range(i+1, n))\n    \n    return str(result)"
    },
    {
        "number": 4522,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(node, weight, visited):\n        visited[node] = True\n        for child in graph[node]:\n            if not visited[child]:\n                dfs(child, max(weight, graph[node][child]), visited)\n\n    def count_pairs(max_weight):\n        count = 0\n        for u in range(1, n + 1):\n            visited = [False] * (n + 1)\n            dfs(u, 0, visited)\n            for v in range(u + 1, n + 1):\n                if not visited[v]:\n                    count += 1\n        return count\n\n    n, m = map(int, stdin.readline().split())\n    graph = {i: {} for i in range(1, n + 1)}\n    for _ in range(n - 1):\n        u, v, w = map(int, stdin.split())\n        graph[u][v] = w\n        graph[v][u] = w\n\n    q = list(map(int, stdin.readline().split()))\n    result = [count_pairs(q_i) for q_i in q]\n    return \" \".join(map(str, result))"
    },
    {
        "number": 4522,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(graph, start, visited, parent, dist, edges):\n        visited[start] = True\n        for v, w in graph[start]:\n            if not visited[v]:\n                dist[v] = min(dist[start] + w, edges)\n                dfs(graph, v, visited, start, dist, edges)\n\n    def find_pairs(graph, edges):\n        n = len(graph)\n        pairs = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                dist = [float('inf')] * n\n                visited = [False] * n\n                parent = [-1] * n\n                dfs(graph, i, visited, parent, dist, edges)\n                pairs += int(dist[j] <= edges)\n        return pairs\n\n    stdin = stdin.split('\\n')\n    n, m = map(int, stdin[0].split())\n    graph = [[] for _ in range(n)]\n    for i in range(1, n):\n        u, v, w = map(int, stdin[i].split())\n        graph[u].append((v, w))\n        graph[v].append((u, w))\n\n    queries = list(map(int, stdin[-1].split()))\n    results = []\n    for q in queries:\n        results.append(find_pairs(graph, q))\n    return ' '.join(map(str, results))"
    },
    {
        "number": 4522,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    edges = []\n    for _ in range(n - 1):\n        u, v, w = list(map(int, stdin.split()))\n        edges.append((u, v, w))\n    \n    queries = list(map(int, stdin.split()))\n    \n    tree = [[] for _ in range(n + 1)]\n    for u, v, w in edges:\n        tree[u].append((v, w))\n        tree[v].append((u, w))\n    \n    def dfs(node, parent, max_weight, visited, result):\n        visited.add(node)\n        for neighbor, weight in tree[node]:\n            if neighbor != parent and neighbor not in visited:\n                new_weight = max(max_weight, weight)\n                if new_weight <= queries[result[0]]:\n                    result[1] += 1\n                dfs(neighbor, node, new_weight, visited, result)\n        visited.remove(node)\n    \n    result = []\n    for q in queries:\n        visited = set()\n        current_result = [0, 0]\n        dfs(1, 0, 0, visited, current_result)\n        result.append(current_result[1])\n    \n    return \" \".join(map(str, result))\n\ninputs = [\n    \"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\",\n    \"1 2\\n1 2\\n\",\n    \"3 3\\n1 2 1\\n2 3 2\\n1 3 2\"\n]\n\nfor input_str in inputs:\n    print(solution(input_str)) "
    },
    {
        "number": 4522,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    edges = []\n    for i in range(n-1):\n        u, v, w = map(int, stdin.split()[:3])\n        edges.append((u, v, w))\n\n    queries = list(map(int, stdin.split()[n-1:]))\n    ans = []\n\n    for query in queries:\n        count = 0\n        for i in range(n-1):\n            u, v, w = edges[i]\n            if w <= query:\n                count += 1\n        ans.append(count)\n\n    return \" \".join(map(str, ans))\n"
    },
    {
        "number": 4522,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    graph = [[] for _ in range(n)]\n    for u, v, w in (map(int, line.split()) for line in stdin.split('\\n')[2:-1]):\n        graph[u-1].append((v-1, w))\n        graph[v-1].append((u-1, w))\n    queries = list(map(int, stdin.split('\\n')[-1].split()))\n\n    def dfs(node, weight, visited):\n        visited[node] = True\n        for neighbor, w in graph[node]:\n            if not visited[neighbor]:\n                dfs(neighbor, max(weight, w), visited)\n\n    result = []\n    for q in queries:\n        count = 0\n        for i in range(n):\n            visited = [False] * n\n            dfs(i, 0, visited)\n            count += sum(w <= q for w in (max(graph[j][0][1], graph[j][1][1]) for j in range(n) if visited[j]))\n        result.append(count // 2)\n\n    return \" \".join(map(str, result))\n\ninputs = [\n    \"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\",\n    \"1 2\\n1 2\",\n    \"3 3\\n1 2 1\\n2 3 2\\n1 3 2\"\n]\n\nfor input in inputs:\n    print(solution(input)) "
    },
    {
        "number": 4522,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(u, parent, depth, max_weight, m, q):\n        if max_weight >= m:\n            return 0\n        for v, w in graph[u]:\n            if v != parent:\n                count = dfs(v, u, depth + 1, max(max_weight, w), m, q)\n                if count > 0 and max_weight + w <= q[max_weight]:\n                    count += 1\n                if count > 0:\n                    answer[max_weight] += count\n        return answer[max_weight]\n\n    n, m = map(int, stdin.split()[0:2])\n    graph = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u, v, w = map(int, stdin.split())\n        graph[u].append((v, w))\n        graph[v].append((u, w))\n\n    q = list(map(int, stdin.split()))\n    answer = [0] * m\n    dfs(1, -1, 0, 0, m, q)\n    return ' '.join(map(str, answer))\n\nstdin = \"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\"\nprint(solution(stdin)) "
    },
    {
        "number": 4522,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().strip().split())\n    edges = []\n    for _ in range(n - 1):\n        u, v, w = map(int, stdin.readline().strip().split())\n        edges.append((u - 1, v - 1, w))\n    \n    queries = list(map(int, stdin.readline().strip().split()))\n    result = []\n    \n    for query in queries:\n        count = 0\n        visited = [False] * n\n        \n        for u in range(n):\n            if not visited[u]:\n                count += dfs(u, query, visited, edges)\n                \n        result.append(count)\n    \n    return \" \".join(map(str, result))\n\ndef"
    },
    {
        "number": 4522,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    edges = []\n    for i in range(n-1):\n        u, v, w = map(int, stdin.split()[3*i:3*(i+1)])\n        edges.append((u, v, w))\n    q = list(map(int, stdin.split()[-m:]))\n    # 1. Sort the edges by the weight\n    edges.sort(key=lambda x: x[2], reverse=True)\n    \n    # 2. Build the graph\n    graph = [[] for _ in range(n+1)]\n    for u, v, w in edges:\n        graph[u].append((v, w))\n        graph[v].append((u, w))\n    \n    # 3. Calculate the answer for each query\n    def dfs(u, v, depth):\n        if depth == len(q):\n            return 1\n        count = 0\n        for vv, ww in graph[v]:\n            if ww <= q[depth]:\n                count += dfs(u, vv, depth+1)\n        return count\n    \n    result = []\n    for qi in q:\n        count = 0\n        for u in range(1, n+1):\n            for v in range(u+1, n+1):\n                count += dfs(u, v, 0)\n        result.append(count)\n    return \" \".join(map(str, result))"
    },
    {
        "number": 4522,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n, m = map(int, lines[0].split())\n    adj_list = [[] for _ in range(n + 1)]\n    for i in range(1, n):\n        u, v, w = map(int, lines[i].split())\n        adj_list[u].append((v, w))\n        adj_list[v].append((u, w))\n    queries = list(map(int, lines[-1].split()))\n    \n    def dfs(u: int, d: int, parent: int, max_weight: int) -> int:\n        result = 0\n        for v, w in adj_list[u]:\n            if v != parent and w <= max_weight:\n                result += dfs(v, d + 1, u, max_weight)\n        if d == 1:\n            result += n - 2\n        return result\n    \n    results = []\n    for max_weight in queries:\n        results.append(dfs(1, 0, -1, max_weight))\n    \n    return \" \".join(map(str, results))"
    },
    {
        "number": 4522,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, m = map(int, lines[0].split())\n    adj_list = [[] for _ in range(n)]\n    for i in range(1, n):\n        u, v, w = map(int, lines[i].split())\n        adj_list[u].append((v, w))\n        adj_list[v].append((u, w))\n    \n    def dfs(u: int, visited: set, max_weight: int) -> int:\n        visited.add(u)\n        count = 1 if u == 0 else 0\n        for v, w in adj_list[u]:\n            if v not in visited and w <= max_weight:\n                count += dfs(v, visited, max_weight)\n        visited.remove(u)\n        return count\n    \n    queries = list(map(int, lines[-1].split()))\n    answers = []\n    for q in queries:\n        count = dfs(0, set(), q)\n        answers.append(count)\n    \n    return \" \".join(map(str, answers))\n\ninputs = [\n    \"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\",\n    \"1 2\\n1 2\",\n    \"3 3\\n1 2 1\\n2 3 2\\n1 3 2\"\n]\n\nfor i, input_str in enumerate(inputs):\n    print(f\"Test {i+1}:\")\n    print(solution(input_str)) "
    },
    {
        "number": 4523,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    result = []\n\n    for i in range(t):\n        n = int(input().split()[0])\n        a = list(map(int, input().split()))\n        min_value = min(a)\n        max_value = max(a)\n\n        if max_value - min_value <= 1:\n            result.append(\"YES\")\n        else:\n            result.append(\"NO\")\n\n    return \"\\n\".join(result)\n\n\nt = int(input())\ninput_data = [input() for _ in range(t)]\noutput = solution(\"\\n\".join(input_data))\nprint(output) "
    },
    {
        "number": 4523,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.split('\\n')\n    for t in range(1, int(test_cases[0]) + 1):\n        n = int(test_cases[t * 2 - 1])\n        a = list(map(int, test_cases[t * 2].split()))\n        while len(a) > 1:\n            min_diff = float('inf')\n            min_i, min_j = -1, -1\n            for i in range(n):\n                for j in range(i + 1, n):\n                    if abs(a[i] - a[j]) <= 1:\n                        diff = abs(a[i] - a[j])\n                        if diff < min_diff:\n                            min_diff = diff\n                            min_i, min_j = i, j\n            if min_diff == float('inf'):\n                print(\"NO\")\n                break\n            if a[min_i] == a[min_j]:\n                a.pop(min_j)\n            else:\n                a.pop(min_i)\n        else:\n            print(\"YES\")\n\n\ninput_str = \"\"\"5\n3\n1 2 2\n4\n5 5 5 5\n3\n1 2 4\n4\n1 3 4 4\n1\n100\"\"\"\n\nsolution(input_str) "
    },
    {
        "number": 4523,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.split('\\n')\n    t = int(test_cases[0])\n\n    for i in range(1, t * 2, 2):\n        n = int(test_cases[i])\n        a = list(map(int, test_cases[i+1].split()))\n\n        unique_elements = set(a)\n        if len(unique_elements) == 1:\n            print(\"YES\")\n        else:\n            if len(unique_elements) == 2:\n                diff = abs(list(unique_elements)[0] - list(unique_elements)[1])\n                if diff == 1:\n                    print(\"YES\")\n                else:\n                    print(\"NO\")\n            else:\n                print(\"NO\")\n\nstdin = '''5\n3\n1 2 2\n4\n5 5 5 5\n3\n1 2 4\n4\n1 3 4 4\n1\n100'''\nsolution(stdin) "
    },
    {
        "number": 4523,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.split(\"\\n\")\n    output = []\n    \n    for i in range(0, len(test_cases), 2):\n        n = int(test_cases[i])\n        a = list(map(int, test_cases[i+1].split()))\n        \n        if len(set(a)) == 1:\n            output.append(\"YES\")\n        else:\n            output.append(\"NO\")\n    \n    return \"\\n\".join(output)\n\ndef"
    },
    {
        "number": 4523,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    result = []\n    \n    for i in range(1, t+1):\n        n = int(stdin.split('\\n')[i*2-1])\n        a = list(map(int, stdin.split('\\n')[i*2].split()))\n        \n        if n == 1:\n            result.append(\"YES\")\n        else:\n            a.sort()\n            count = 0\n            for j in range(n-1):\n                if abs(a[j] - a[j+1]) <= 1:\n                    count += 1\n                    if count == 1:\n                        a.remove(min(a[j], a[j+1]))\n                    else:\n                        a.remove(a[j])\n                        break\n            \n            if len(set(a)) == 1:\n                result.append(\"YES\")\n            else:\n                result.append(\"NO\")\n    \n    return '\\n'.join(result)\n\ninput_str = \"5\\n3\\n1 2 2\\n4\\n5 5 5 5\\n3\\n1 2 4\\n4\\n1 3 4 4\\n1\\n100\"\nprint(solution(input_str)) "
    },
    {
        "number": 4523,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.splitlines()[0])\n    result = []\n    for i in range(1, t+1):\n        n = int(stdin.splitlines()[i].split()[0])\n        a = list(map(int, stdin.splitlines()[i].split()[1:]))\n\n        if n == 1:\n            result.append(\"YES\")\n        elif n == 2:\n            if abs(a[0] - a[1]) <= 1:\n                result.append(\"YES\")\n            else:\n                result.append(\"NO\")\n        else:\n            a.sort()\n            min_diff = abs(a[0] - a[1])\n            count = 1\n            i = 2\n            while i < n:\n                diff = abs(a[i] - a[i-1])\n                if diff <= 1:\n                    count += 1\n                    min_diff = min(min_diff, diff)\n                else:\n                    break\n                i += 1\n            if count == n and min_diff == 0:\n                result.append(\"YES\")\n            else:\n                result.append(\"NO\")\n\n    return \"\\n\".join(result)"
    },
    {
        "number": 4523,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    num_test_cases = int(input_data[0])\n    test_cases = input_data[1:]\n\n    def is_possible_to_obtain_one_element_array(a):\n        if len(a) == 1:\n            return True\n        a.sort()\n        min_difference = a[-1] - a[0]\n        for i in range(len(a) - 1):\n            difference = a[i + 1] - a[i]\n            if difference <= 1:\n                min_difference = min(min_difference, difference)\n        return min_difference == 1\n\n    for i in range(0, len(test_cases), 2):\n        n = int(test_cases[i])\n        a = [int(x) for x in test_cases[i + 1].split()]\n        if is_possible_to_obtain_one_element_array(a):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n"
    },
    {
        "number": 4523,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.split(\"\\n\")\n    t = int(test_cases[0])\n    result = []\n\n    for i in range(1, t * 2, 2):\n        n = int(test_cases[i])\n        a = list(map(int, test_cases[i + 1].split()))\n\n        if n == 1:\n            result.append(\"YES\")\n        else:\n            a.sort()\n            if a[-1] - a[0] <= 2:\n                result.append(\"YES\")\n            else:\n                result.append(\"NO\")\n\n    return \"\\n\".join(result)\n\ninput_str = \"5\\n3\\n1 2 2\\n4\\n5 5 5 5\\n3\\n1 2 4\\n4\\n1 3 4 4\\n1\\n100\"\noutput = solution(input_str)\nprint(output) "
    },
    {
        "number": 4523,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split(\"\\n\")\n    t = int(input_lines[0])\n    answers = []\n    for i in range(1, t + 1):\n        n = int(input_lines[i * 2 - 1])\n        a = [int(x) for x in input_lines[i * 2].split()]\n\n        def can_move(a_list, i, j):\n            if abs(a_list[i] - a_list[j]) > 1:\n                return False\n            return True\n\n        def move(a_list, i, j):\n            a_list.sort()\n            return a_list[0]\n\n        for i in range(len(a)):\n            for j in range(i + 1, len(a)):\n                if can_move(a, i, j):\n                    a[i] = move(a, i, j)\n                    break\n\n        if len(a) == 1:\n            answers.append(\"YES\")\n        else:\n            answers.append(\"NO\")\n\n    return \"\\n\".join(answers)"
    },
    {
        "number": 4523,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        if len(set(a)) == 1:\n            print(\"YES\")\n        else:\n            for i in range(n):\n                for j in range(i+1, n):\n                    if abs(a[i] - a[j]) <= 1:\n                        print(\"YES\")\n                        break\n                else:\n                    continue\n                break\n            else:\n                print(\"NO\")"
    },
    {
        "number": 4524,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = int(stdin.split()[1], 2)\n    b = int(stdin.split()[2], 2)\n\n    result = 0\n    while b > 0:\n        result = (result + (a & b)) % 998244353\n        b //= 2\n\n    return str(result)"
    },
    {
        "number": 4524,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = int(stdin.split('\\n')[1], 2)\n    b = int(stdin.split('\\n')[2], 2)\n\n    def bitwise_and(x: int, y: int) -> int:\n        return x & y\n\n    def divide_by_2(x: int) -> int:\n        return x >> 1\n\n    answer = 0\n    while b > 0:\n        answer += bitwise_and(a, b)\n        b = divide_by_2(b)\n\n    return str(answer % 998244353)\n\ndef"
    },
    {
        "number": 4524,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a, b = stdin.split('\\n')[-2:]\n    \n    def bitwise_and(x: str, y: str) -> str:\n        result = ''\n        for i in range(len(x)):\n            result += str(int(x[i]) & int(y[i]))\n        return result\n    \n    def round_down(x: str) -> str:\n        return x[:-1]\n    \n    answer = 0\n    while int(b) > 0:\n        answer += int(bitwise_and(a, b), 2)\n        b = round_down(b)\n    \n    return str(answer % 998244353)"
    },
    {
        "number": 4524,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def bitwise_and(a: str, b: str) -> str:\n        result = []\n        carry = 0\n        for i in range(max(len(a), len(b)) - 1, -1, -1):\n            if i >= len(a) or i >= len(b):\n                continue\n            digit = int(a[i]) & int(b[i]) + carry\n            result.append(str(digit % 2))\n            carry = digit // 2\n        if carry:\n            result.append(str(carry))\n        return ''.join(reversed(result))\n\n    n, m = map(int, stdin.split()[0].split())\n    a, b = stdin.split()[1:3]\n\n    answer = 0\n    while b:\n        answer = (answer + int(bitwise_and(a, b), 2)) % 998244353\n        b = b[1:] if len(b) > 1 else '0'\n\n    return str(answer)"
    },
    {
        "number": 4524,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a, b = stdin.split('\\n', 2)[1:3]\n    \n    def to_int(binary: str) -> int:\n        return int(binary, 2)\n    \n    def to_binary(decimal: int) -> str:\n        return bin(decimal)[2:]\n    \n    def bitwise_and(binary1: str, binary2: str) -> str:\n        return to_binary(to_int(binary1) & to_int(binary2))\n    \n    def divide_round_down(binary: str) -> str:\n        return binary[:-1]\n    \n    answer = 0\n    while len(b) > 0:\n        answer += to_int(bitwise_and(a, b))\n        b = divide_round_down(b)\n    \n    return str(answer % 998244353)"
    },
    {
        "number": 4524,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = bin(int(stdin.split()[1], 2))[2:]\n    b = bin(int(stdin.split()[2], 2))[2:]\n    answer = 0\n\n    while b:\n        answer += int(a, 2) & int(b, 2)\n        a = bin(int(a, 2) >> 1)[2:]\n        b = bin(int(b, 2) >> 1)[2:]\n\n    return str(answer % 998244353)"
    },
    {
        "number": 4524,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    a = bin(int(stdin.split()[1], 2))[2:]\n    b = bin(int(stdin.split()[2], 2))[2:]\n    answer = 0\n    modulo = 998244353\n\n    while len(b) > 0:\n        answer += int(a[-1]) & int(b[-1])\n        a = a[:-1]\n        b = b[:-1]\n\n        if len(b) > 0:\n            answer = answer % modulo\n            b = bin(int(b, 2))[2:]\n\n    return str(answer % modulo)"
    },
    {
        "number": 4524,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a, b = stdin.split('\\n', 1)\n    a = int(a, 2)\n    b = int(b, 2)\n    MOD = 998244353\n    \n    answer = 0\n    while b > 0:\n        answer = (answer + (a & b)) % MOD\n        b >>= 1\n    \n    return str(answer)"
    },
    {
        "number": 4524,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a, b = stdin.split('\\n')[1:3]\n    a = int(a, 2)\n    b = int(b, 2)\n    answer = 0\n    while b > 0:\n        answer += (a & b) % 10\n        b //= 2\n    return str(answer % 998244353)\n\ninput_data = int(input())\nn, m = map(int, input().split())\na = input()\nb = input()\nprint(solution(f\"{n} {m}\\n{a}\\n{b}\")) "
    },
    {
        "number": 4524,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = int(stdin.split()[1], 2)\n    b = int(stdin.split()[2], 2)\n\n    answer = 0\n    while b > 0:\n        answer += (a & b)\n        b //= 2\n\n    return str(answer % 998244353)"
    },
    {
        "number": 4525,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    result = []\n\n    for _ in range(t):\n        n = int(stdin.split()[1])\n        if n % 2 != 0:\n            result.append(\"NO\")\n            continue\n\n        even_elements = [i for i in range(1, n + 1, 2)]\n        odd_elements = [i for i in range(2, n + 1, 2)]\n\n        sum_even = sum(even_elements)\n        sum_odd = sum(odd_elements)\n\n        if sum_even == sum_odd:\n            result.append(\"YES\")\n            result.append(\" \".join(map(str, even_elements + odd_elements)))\n        else:\n            result.append(\"NO\")\n\n    return \"\\n\".join(result)\n\nstdin = \"\"\"5\n2\n4\n6\n8\n10\"\"\"\nprint(solution(stdin)) "
    },
    {
        "number": 4525,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def check_sum(n: int) -> bool:\n        return sum(range(1, n // 2 + 1)) == sum(range(n // 2 + 1, n + 1))\n\n    def generate_array(n: int) -> list[int]:\n        if n % 2 != 0 or n <= 1:\n            return []\n        first_half = [i for i in range(1, n // 2 + 1) if i % 2 == 0]\n        second_half = [i for i in range(n // 2 + 1, n + 1) if i % 2 != 0]\n        return first_half + second_half\n\n    def print_result(n: int) -> None:\n        if n % 2 != 0:\n            print(\"NO\")\n            return\n        array = generate_array(n)\n        if not array or not check_sum(n):\n            print(\"NO\")\n        else:\n            print(\"YES\")\n            print(\" \".join(str(x) for x in array))\n\n    tests = int(stdin.readline())\n    for _ in range(tests):\n        n = int(stdin.readline())\n        print_result(n)\n"
    },
    {
        "number": 4525,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def find_array(n: int) -> str:\n        if n == 2:\n            return \"YES\\n2 1\"\n        if n % 2 != 0 or n < 2:\n            return \"NO\"\n        first_half_sum = 2\n        second_half_sum = 1\n        for i in range(2, n // 2 + 1):\n            if first_half_sum + i == second_half_sum:\n                a = [2] * (i - 1) + [1] + [2] * i\n                a[i - 1] = 1\n                a[n // 2 + i] = first_half_sum + i\n                if all(a[i] != a[j] for i in range(n) for j in range(i + 1, n)):\n                    return \"YES\\n\" + \" \".join(map(str, a))\n            else:\n                first_half_sum += 2\n                second_half_sum += 2\n        return \"NO\"\n\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        print(find_array(n))\n"
    },
    {
        "number": 4525,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(n: int) -> bool:\n        if n % 2 != 0:\n            return False\n        first_half_sum = 0\n        second_half_sum = 0\n        for i in range(1, n // 2 + 1):\n            first_half_sum += i * 2\n            second_half_sum += i * 2 + 1\n        return first_half_sum == second_half_sum\n\n    test_cases = stdin.split()\n    for t in range(int(test_cases[0])):\n        n = int(test_cases[t + 1])\n        if is_valid(n):\n            print(\"YES\")\n            for i in range(1, n // 2 + 1):\n                print(i * 2, end=\" \")\n                print(i * 2 + 1, end=\" \")\n            for i in range(n // 2 + 1, n + 1):\n                print(i * 2, end=\" \")\n            print()\n        else:\n            print(\"NO\")"
    },
    {
        "number": 4525,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.strip())\n    result = []\n\n    for _ in range(t):\n        n = int(input().strip())\n        if n % 2 != 0 or n < 2:\n            result.append(\"NO\")\n            continue\n\n        first_half_sum = n // 2\n        second_half_sum = n\n        for i in range(1, n // 2 + 1):\n            if first_half_sum >= i and second_half_sum >= n - i:\n                result.append(\"YES\")\n                result.append(\" \".join(map(str, [i, n - i] + list(range(1, i)) + list(range(i + 1, n)))))\n                break\n        else:\n            result.append(\"NO\")\n\n    return \"\\n\".join(result)\n"
    },
    {
        "number": 4525,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    import itertools\n\n    def check(a: list) -> bool:\n        return (a[:n//2] + a[n//2:]).count(a[0]) == n // 2\n\n    t = int(stdin.splitlines()[0])\n    result = []\n\n    for _ in range(t):\n        n = int(stdin.splitlines()[1])\n        if n % 2 != 0:\n            result.append(\"NO\")\n        else:\n            a = []\n            for i in range(1, n + 1):\n                if i % 2 == 0:\n                    a.append(i)\n                else:\n                    a.append(i * 2 - 1)\n            if check(a):\n                result.append(\"YES\\n\" + \" \".join(map(str, a)))\n            else:\n                result.append(\"NO\")\n\n    return \"\\n\".join(result)"
    },
    {
        "number": 4525,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.split('\\n')\n    result = []\n\n    for n in test_cases[1:]:\n        n = int(n)\n        if n < 2:\n            result.append(\"NO\")\n            continue\n\n        a = [2 * (i + 1) for i in range(n // 2)]\n        b = [2 * (i + 1) + 1 for i in range(n // 2, n)]\n\n        for i in range(n // 2):\n            if sum(a[:i + 1]) == sum(b[:i + 1]):\n                result.append(\"YES\\n\" + \" \".join(str(x) for x in a + b))\n                break\n        else:\n            result.append(\"NO\")\n\n    return \"\\n\".join(result)\n\ndef"
    },
    {
        "number": 4525,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def check_array(a, n):\n        if len(a) != n:\n            return False\n        if len(set(a)) != n:\n            return False\n        half = n // 2\n        if sum(a[:half]) != sum(a[half:]):\n            return False\n        return True\n\n    def construct_array(n):\n        a = [2] * n\n        a[n//2:] = [1] * (n//2)\n        for i in range(n):\n            if a[i] % 2 == 0:\n                a[i] += 1\n            else:\n                a[i] -= 1\n        return a\n\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        if n % 2 != 0:\n            print(\"NO\")\n        else:\n            a = construct_array(n)\n            if check_array(a, n):\n                print(\"YES\")\n                print(\" \".join(map(str, a)))\n            else:\n                print(\"NO\")"
    },
    {
        "number": 4525,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def find_array(n: int) -> list:\n        if n % 2 != 0 or n < 2:\n            return []\n\n        first_half = list(range(2, 2 * n, 2))\n        second_half = list(range(1, 2 * n, 2))\n        first_half_sum = sum(first_half)\n        second_half_sum = sum(second_half)\n\n        if first_half_sum != second_half_sum:\n            return []\n\n        return first_half + second_half\n\n    t = int(stdin.split()[0])\n    result = []\n\n    for _ in range(t):\n        n = int(input())\n        array = find_array(n)\n\n        if array:\n            result.append(\"YES\")\n            result.append(\" \".join(map(str, array)))\n        else:\n            result.append(\"NO\")\n\n    return \"\\n\".join(result)\n\n\ndef"
    },
    {
        "number": 4525,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.split(\"\\n\")\n    result = []\n    for n in test_cases[1:]:\n        n = int(n)\n        if n % 2 != 0:\n            result.append(\"NO\")\n            continue\n        a = [1] * n\n        for i in range(n//2):\n            if i == n//2 - 1:\n                a[i] = 2 * a[i]\n                break\n            a[i], a[n-i-1] = a[n-i-1], 2 * a[i]\n        if sum(a[:n//2]) != sum(a[n//2:]):\n            result.append(\"NO\")\n        else:\n            result.append(\"YES\")\n            result.append(\" \".join(str(x) for x in a))\n    return \"\\n\".join(result)\n\ninput_str = \"\"\"5\n2\n4\n6\n8\n10\"\"\"\nprint(solution(input_str)) "
    },
    {
        "number": 4526,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    output = \"\"\n\n    for i in range(1, t + 1):\n        n = int(stdin.split('\\n')[i * 2 - 1])\n        a = list(map(int, stdin.split('\\n')[i * 2].split()))\n\n        special_count = 0\n        for j in range(n):\n            for k in range(j + 1, n + 1):\n                if sum(a[j:k]) == a[j]:\n                    special_count += 1\n\n        output += str(special_count) + \"\\n\"\n\n    return output"
    },
    {
        "number": 4526,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def is_special(a: List[int]) -> int:\n        n = len(a)\n        special_count = 0\n        for i in range(n):\n            left = 0\n            right = 1\n            while left < right and right < n:\n                if a[i] == a[left] + a[left+1] + a[left+2] + a[right]:\n                    special_count += 1\n                right += 1\n                left += 1\n        return special_count\n\n    test_cases = int(stdin.readline().strip())\n    result = []\n    for _ in range(test_cases):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        result.append(is_special(a))\n\n    return \"\\n\".join(map(str, result))"
    },
    {
        "number": 4526,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    results = []\n\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n\n        special_count = 0\n        for j in range(n):\n            for k in range(j + 1, n):\n                if sum(a[j:k+1]) == a[j]:\n                    special_count += 1\n\n        results.append(special_count)\n\n    return '\\n'.join(map(str, results))\n\ninput_data = '''\n5\n9\n3 1 4 1 5 9 2 6 5\n3\n1 1 2\n5\n1 1 1 1 1\n8\n8 7 6 5 4 3 2 1\n1\n1\n'''\noutput_data = solution(input_data)\nprint(output_data) "
    },
    {
        "number": 4526,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.splitlines()[0])\n    result = []\n\n    for i in range(t):\n        n = int(input().splitlines()[0])\n        a = list(map(int, input().split()))\n\n        special_count = 0\n        for j in range(n):\n            for k in range(j + 1, n):\n                if a[j] + a[j + 1] == a[k]:\n                    special_count += 1\n                elif a[k] + a[k + 1] == a[j]:\n                    special_count += 1\n\n        result.append(special_count)\n\n    return \"\\n\".join(map(str, result))"
    },
    {
        "number": 4526,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.splitlines()[0])\n    results = []\n    \n    for i in range(1, t + 1):\n        n = int(stdin.splitlines()[i * 2 - 1])\n        a = list(map(int, stdin.splitlines()[i * 2].split()))\n        \n        special_count = 0\n        for j in range(n):\n            for k in range(j + 1, n):\n                if sum(a[j:k+1]) == a[j]:\n                    special_count += 1\n                    \n        results.append(special_count)\n        \n    return '\\n'.join(map(str, results))"
    },
    {
        "number": 4526,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(input())\n    result = []\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        special_count = 0\n        for j in range(n):\n            for k in range(j+2, n+1):\n                if sum(a[j:k]) == a[j]:\n                    special_count += 1\n        result.append(str(special_count))\n    return \"\\n\".join(result)"
    },
    {
        "number": 4526,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.split(\"\\n\")\n    results = []\n\n    for i in range(0, len(test_cases), 2):\n        n = int(test_cases[i])\n        a = list(map(int, test_cases[i + 1].split()))\n        special_count = 0\n\n        for j in range(n):\n            for k in range(j + 1, n):\n                if sum(a[j:k + 1]) == a[j]:\n                    special_count += 1\n\n        results.append(str(special_count))\n\n    return \"\\n\".join(results)\n"
    },
    {
        "number": 4526,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def is_special(a, l, r):\n        return sum(a[l:r+1]) == sum(a[l-1:r])\n\n    def count_special(a):\n        n = len(a)\n        count = 0\n        for i in range(1, n):\n            for j in range(i+1, n+1):\n                if is_special(a, i, j-1):\n                    count += 1\n        return count\n\n    def process_case(n, a):\n        return str(count_special([int(x) for x in a]))\n\n    t = int(stdin.strip().split()[0])\n    results = []\n    for _ in range(t):\n        n, a = stdin.strip().split('\\n')\n        n = int(n)\n        results.append(process_case(n, a.strip().split()))\n\n    return '\\n'.join(results)"
    },
    {
        "number": 4526,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    outputs = []\n\n    for _ in range(t):\n        n = int(stdin.split()[0])\n        a = list(map(int, stdin.split()[1:]))\n\n        special_count = 0\n        for i in range(1, n):\n            for j in range(i+1, n+1):\n                if sum(a[i:j]) == a[i-1]:\n                    special_count += 1\n\n        outputs.append(special_count)\n\n    return \"\\n\".join(map(str, outputs))\n\n\ndef"
    },
    {
        "number": 4526,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    t = int(lines[0])\n    result = []\n    for i in range(1, t * 2, 2):\n        n = int(lines[i])\n        a = list(map(int, lines[i + 1].split()))\n        special_count = 0\n        for j in range(n):\n            for k in range(j + 1, n):\n                if a[j] + a[k] in a[j + 1:k] + a[k + 1:]:\n                    special_count += 1\n        result.append(special_count)\n    return \"\\n\".join(map(str, result))\n\nstdin = \"\"\"5\n9\n3 1 4 1 5 9 2 6 5\n3\n1 1 2\n5\n1 1 1 1 1\n8\n8 7 6 5 4 3 2 1\n1\n1\"\"\"\n\nprint(solution(stdin)) "
    },
    {
        "number": 4527,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    lines = stdin.split('\\n')\n    num_test_cases = int(lines[0])\n\n    for i in range(1, num_test_cases + 1):\n        n = int(lines[i * 2 - 1])\n        segments = [tuple(map(int, line.split())) for line in lines[i * 2 - n:i * 2 - 1]]\n        max_size = 0\n        for i in range(2**n):\n            subset = [segments[j] for j in range(n) if (i & (1 << j))]\n            if len(subset) <= max_size:\n                continue\n            non_intersecting = True\n            for j in range(len(subset)):\n                for k in range(j + 1, len(subset)):\n                    if subset[j][1] < subset[k][0] or subset[j][0] > subset[k][1]:\n                        continue\n                    elif subset[j][0] >= subset[k][0] and subset[j][1] <= subset[k][1]:\n                        continue\n                    elif subset[k][0] >= subset[j][0] and subset[k][1] <= subset[j][1]:\n                        continue\n                    else:\n                        non_intersecting = False\n                        break\n                if not non_intersecting:\n                    break\n            if non_intersecting:\n                max_size = max(max_size, len(subset))\n        result.append(str(max_size))\n\n    return '\\n'.join(result)"
    },
    {
        "number": 4527,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def check_segments(segments):\n        n = len(segments)\n        for i in range(n):\n            for j in range(i + 1, n):\n                if segments[i][1] >= segments[j][0] and segments[i][0] <= segments[j][1]:\n                    return False\n        return True\n\n    def solve(segments):\n        n = len(segments)\n        max_size = 0\n        for i in range(1, n + 1):\n            for subset in itertools.combinations(segments, i):\n                if check_segments(subset):\n                    max_size = max(max_size, len(subset))\n        return max_size\n\n    test_cases = int(stdin.readline())\n    results = []\n    for _ in range(test_cases):\n        n = int(stdin.readline())\n        segments = []\n        for _ in range(n):\n            segments.append(tuple(map(int, stdin.readline().split())))\n        results.append(solve(segments))\n    return \"\\n\".join(map(str, results))\n\nimport sys\nfrom itertools import combinations\n\ninput_string = sys.stdin.read()\nresult = solution(input_string)\nprint(result) "
    },
    {
        "number": 4527,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def is_intersecting(seg1, seg2):\n        return seg1[0] <= seg2[1] and seg1[1] >= seg2[0]\n\n    def is_inside(seg1, seg2):\n        return seg2[0] <= seg1[0] and seg1[1] <= seg2[1]\n\n    def find_subset(segments):\n        n = len(segments)\n        dp = [0] * (1 << n)\n        for subset in range(1, 1 << n):\n            dp[subset] = 1\n            for i in range(n):\n                if (subset & (1 << i)) == 0:\n                    continue\n                for j in range(i + 1, n):\n                    if (subset & (1 << j)) == 0:\n                        continue\n                    if is_intersecting(segments[i], segments[j]):\n                        dp[subset] = max(dp[subset], dp[subset ^ (1 << i)] ^ (1 << j))\n                    elif is_inside(segments[i], segments[j]):\n                        dp[subset] = max(dp[subset], dp[subset ^ (1 << i)] | (1 << j))\n\n        return max(dp)\n\n    def process_test_case(n, segments):\n        return find_subset(segments)\n\n    output = []\n    test_cases = stdin.split(\"\\n\")\n    num_test_cases = int(test_cases[0])\n    for i in range(1, num_test_cases + 1):\n        test_case_input = test_cases[i * (n + 1) - 1].split()\n        n = int(test_case_input[0])\n        segments = [tuple(map(int, line.split())) for line in test_case_input[1:]]\n        output.append(str(process_test_case(n, segments)))\n\n    return \"\\n\".join(output)"
    },
    {
        "number": 4527,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def is_intersecting(a, b):\n        return not (a[1] < b[0] or a[0] > b[1])\n\n    def is_inside(a, b):\n        return a[0] >= b[0] and a[1] <= b[1]\n\n    def can_add(subset, segment):\n        for s in subset:\n            if is_intersecting(s, segment):\n                return False\n        return True\n\n    def max_size(segments):\n        subsets = []\n        for segment in segments:\n            new_subsets = []\n            for subset in subsets:\n                if can_add(subset, segment):\n                    new_subsets.append(subset + [segment])\n            subsets.extend(new_subsets)\n        return max(len(subset) for subset in subsets)\n\n    tests = int(stdin.readline())\n    result = []\n    for _ in range(tests):\n        n = int(stdin.readline())\n        segments = []\n        for i in range(n):\n            l, r = map(int, stdin.readline().split())\n            segments.append((l, r))\n        result.append(max_size(segments))\n    return \"\\n\".join(map(str, result))\n"
    },
    {
        "number": 4527,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    t = int(stdin.strip().split('\\n')[0])\n    stdin = stdin.strip().split('\\n')[1:]\n    \n    for i in range(t):\n        n = int(stdin[i*2])\n        segments = []\n        for j in range(n):\n            segments.append([int(x) for x in stdin[i*2+j+1].split()])\n        \n        max_size = 0\n        for subset in itertools.combinations(segments, n):\n            non_intersecting = True\n            for i in range(len(subset)):\n                for j in range(i+1, len(subset)):\n                    if not (subset[i][0] > subset[j][1] or subset[i][1] < subset[j][0]):\n                        non_intersecting = False\n                        break\n                if not non_intersecting:\n                    break\n            if non_intersecting:\n                max_size = max(max_size, len(subset))\n        result.append(max_size)\n    \n    return \"\\n\".join(str(x) for x in result)\n\nimport sys\nimport itertools\n\ninput_data = sys.stdin.read()\nprint(solution(input_data)) "
    },
    {
        "number": 4527,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_non_intersecting(seg1, seg2):\n        return seg1[0] > seg2[1] or seg1[1] < seg2[0]\n\n    def lies_inside(smaller, bigger):\n        return smaller[0] >= bigger[0] and smaller[1] <= bigger[1]\n\n    def find_max_subset_size(segments):\n        n = len(segments)\n        subset_size = 0\n        max_subset_size = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                if is_non_intersecting(segments[i], segments[j]) or lies_inside(segments[i], segments[j]) or lies_inside(segments[j], segments[i]):\n                    subset_size += 1\n            max_subset_size = max(max_subset_size, subset_size)\n            subset_size -= 1\n        return max_subset_size\n\n    def main():\n        tests = int(stdin.readline().strip())\n        result = []\n        for _ in range(tests):\n            n = int(stdin.readline().strip())\n            segments = []\n            for _ in range(n):\n                l, r = map(int, stdin.readline().strip().split())\n                segments.append((l, r))\n            result.append(str(find_max_subset_size(segments)))\n        return '\\n'.join(result)\n\n    return main()\n\ndef"
    },
    {
        "number": 4527,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split(\"\\n\")\n    t = int(input_lines[0])\n    result = []\n\n    for i in range(1, t + 1):\n        n = int(input_lines[i * (n + 1) - 1])\n        segments = []\n        for j in range(1, n + 1):\n            l, r = map(int, input_lines[i * (n + 1) + j - 1].split())\n            segments.append((l, r))\n\n        max_size = 0\n        for size in range(1, n + 1):\n            for subset in itertools.combinations(segments, size):\n                if is_valid_subset(subset):\n                    max_size = max(max_size, size)\n\n        result.append(str(max_size))\n\n    return \"\\n\".join(result)\n\ndef"
    },
    {
        "number": 4527,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Read the number of test cases\n    t = int(stdin.readline().strip())\n\n    # Process each test case\n    for _ in range(t):\n        # Read the number of segments\n        n = int(stdin.readline().strip())\n\n        # Read the segments\n        segments = []\n        for _ in range(n):\n            l, r = map(int, stdin.readline().strip().split())\n            segments.append((l, r))\n\n        # Sort the segments by their left borders\n        segments.sort()\n\n        # Initialize the result and the current set of segments\n        result = 0\n        current_set = []\n\n        # Iterate over the segments\n        for segment in segments:\n            # If the current set is empty or the current segment is non-intersecting with all segments in the current set, add it to the current set\n            if not current_set or all(segment[0] > other[1] or segment[1] < other[0] for other in current_set):\n                current_set.append(segment)\n            # Otherwise, update the result and start a new set with the current segment\n            else:\n                result = max(result, len(current_set))\n                current_set = [segment]\n\n        # Update the result with the last set of segments\n        result = max(result, len(current_set))\n\n        print(result)"
    },
    {
        "number": 4527,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    import itertools\n\n    def is_intersecting(segment1: tuple, segment2: tuple) -> bool:\n        return segment1[0] <= segment2[1] and segment2[0] <= segment1[1]\n\n    def is_inside(segment1: tuple, segment2: tuple) -> bool:\n        return segment2[0] <= segment1[0] and segment1[1] <= segment2[1]\n\n    def is_valid(subset: set) -> bool:\n        for segment1, segment2 in itertools.combinations(subset, 2):\n            if is_intersecting(segment1, segment2) and not (is_inside(segment1, segment2) or is_inside(segment2, segment1)):\n                return False\n        return True\n\n    def max_valid_subset_size(segments: list) -> int:\n        max_size = 0\n        for subset_size in range(1, len(segments) + 1):\n            for subset in itertools.combinations(segments, subset_size):\n                if is_valid(subset):\n                    max_size = max(max_size, len(subset))\n        return max_size\n\n    def main() -> None:\n        test_cases = int(stdin.readline())\n        for _ in range(test_cases):\n            n = int(stdin.readline())\n            segments = []\n            for _ in range(n):\n                segments.append(tuple(map(int, stdin.readline().split())))\n            print(max_valid_subset_size(segments))\n\n    if __name__ == \"__main__\":\n        main()"
    },
    {
        "number": 4527,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    t = int(lines[0])\n    result = []\n\n    for i in range(1, t * 2, 2):\n        n = int(lines[i])\n        segments = []\n        for j in range(1, n + 1):\n            l, r = map(int, lines[i + j].split())\n            segments.append((l, r))\n\n        segments.sort(key=lambda x: (x[1], x[0]))\n        max_subset_size = 0\n\n        for subset in itertools.combinations(segments, len(segments)):\n            is_valid = True\n            for i in range(len(subset)):\n                for j in range(i + 1, len(subset)):\n                    if (subset[i][0] <= subset[j][0] <= subset[i][1] <= subset[j][1]\n                            or subset[j][0] <= subset[i][0] <= subset[j][1] <= subset[i][1]):\n                        is_valid = False\n                        break\n                if not is_valid:\n                    break\n            if is_valid and len(subset) > max_subset_size:\n                max_subset_size = len(subset)\n\n        result.append(str(max_subset_size))\n\n    return \"\\n\".join(result)\n\nimport itertools\n\nstdin = \"\"\nprint(solution(stdin)) "
    },
    {
        "number": 4528,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_test_cases = int(stdin.split('\\n')[0])\n    output = []\n\n    for i in range(1, num_test_cases + 1):\n        h, m = map(int, stdin.split('\\n')[i].split())\n        if h == 0 and m == 0:\n            minutes_before_new_year = 0\n        else:\n            minutes_before_new_year = (24 - h) * 60 + (60 - m)\n        output.append(minutes_before_new_year)\n\n    return '\\n'.join(map(str, output))\n\ninput_str = '''5\n23 55\n23 0\n0 1\n4 20\n23 59'''\n\nprint(solution(input_str)) "
    },
    {
        "number": 4528,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.splitlines()[0])\n    answers = []\n    \n    for i in range(1, test_cases + 1):\n        h, m = map(int, stdin.splitlines()[i].split())\n        minutes_before_new_year = 60 * (23 - h) + (60 - m)\n        answers.append(minutes_before_new_year)\n    \n    return '\\n'.join(map(str, answers))"
    },
    {
        "number": 4528,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.strip().split(\"\\n\")[0])\n    output = []\n\n    for i in range(1, test_cases + 1):\n        h, m = list(map(int, stdin.strip().split(\"\\n\")[i].split()))\n        minutes_before_new_year = ((23 - h) * 60) + (60 - m)\n        output.append(minutes_before_new_year)\n\n    return \"\\n\".join(map(str, output))\n\ninput_string = \"\"\"5\n23 55\n23 0\n0 1\n4 20\n23 59\"\"\"\n\noutput = solution(input_string)\nprint(output) "
    },
    {
        "number": 4528,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    result = []\n\n    for i in range(1, t + 1):\n        h, m = map(int, lines[i].split())\n        minutes_to_new_year = 0\n\n        if h == 0:\n            minutes_to_new_year = m\n        else:\n            minutes_to_new_year = (24 - h) * 60 + m\n\n        if minutes_to_new_year <= 0:\n            minutes_to_new_year += 1440\n\n        result.append(str(minutes_to_new_year))\n\n    return '\\n'.join(result)\n\nstdin = '''5\n23 55\n23 0\n0 1\n4 20\n23 59'''\nprint(solution(stdin)) "
    },
    {
        "number": 4528,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    cases = [line.strip().split() for line in stdin.split('\\n')]\n    del cases[0]\n\n    results = []\n    for h, m in cases:\n        h, m = int(h), int(m)\n        if h == 0 and m == 0:\n            results.append('0')\n        elif h == 0:\n            results.append(f'{60 - m}')\n        else:\n            results.append(f'{60 - m + (23 - h) * 60}')\n\n    return '\\n'.join(results)"
    },
    {
        "number": 4528,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def minutes_to_new_year(hours, minutes):\n        return (24 - hours) * 60 + (60 - minutes)\n\n    test_cases = int(stdin.splitlines()[0])\n    for i in range(1, test_cases + 1):\n        h, m = map(int, stdin.splitlines()[i].split())\n        minutes = minutes_to_new_year(h, m)\n        print(minutes)"
    },
    {
        "number": 4528,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.splitlines()[0])\n    output = []\n    \n    for i in range(1, test_cases + 1):\n        h, m = map(int, stdin.splitlines()[i].split())\n        \n        if h == 0 and m == 0:\n            output.append(0)\n        else:\n            if h == 0:\n                minutes_left = 60 - m\n            else:\n                minutes_left = (60 - m) + (24 - h) * 60\n            \n            output.append(minutes_left)\n    \n    return '\\n'.join(map(str, output))"
    },
    {
        "number": 4528,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.readline())\n    result = []\n    \n    for _ in range(test_cases):\n        h, m = map(int, stdin.readline().split())\n        \n        # Calculate minutes remaining\n        minutes_remaining = 24 * 60 - (h * 60 + m)\n        \n        # Check if the current time is in the last minute of the year\n        if minutes_remaining == 1:\n            minutes_remaining = 0\n        \n        result.append(minutes_remaining)\n    \n    return \"\\n\".join(map(str, result))"
    },
    {
        "number": 4528,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    t = int(lines[0])\n    answers = []\n\n    for i in range(1, t+1):\n        h, m = map(int, lines[i].split())\n        minutes_remaining = 60 - m + (24 - h) * 60\n        answers.append(minutes_remaining)\n\n    return \"\\n\".join(map(str, answers))\n\ndef"
    },
    {
        "number": 4528,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    t = int(lines[0])\n    output = []\n    for i in range(1, t+1):\n        h, m = map(int, lines[i].split())\n        if h == 0 and m == 0:\n            output.append(\"0\")\n        elif h == 0:\n            output.append(f\"{60-m}\")\n        else:\n            output.append(f\"{60-m+(h-1)*60}\")\n    return \"\\n\".join(output)"
    },
    {
        "number": 4529,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        s = stdin.readline().strip()\n        result = optimize_path(s, n)\n        if result == -1:\n            print(result)\n        else:\n            print(*result)\n\ndef"
    },
    {
        "number": 4529,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    result = []\n    \n    for _ in range(t):\n        n = int(stdin.readline())\n        s = stdin.readline().strip()\n        min_substring = find_min_substring(s)\n        \n        if min_substring == -1:\n            result.append(\"-1\")\n        else:\n            result.append(\" \".join(map(str, min_substring)))\n    \n    return \"\\n\".join(result)\n\ndef"
    },
    {
        "number": 4529,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline())\n    result = []\n\n    for _ in range(cases):\n        n = int(stdin.readline())\n        s = stdin.readline().strip()\n\n        max_length = n\n        start = 0\n        end = 0\n        char_count = {'L': 0, 'R': 0, 'U': 0, 'D': 0}\n\n        while end < n:\n            char_count[s[end]] += 1\n            while char_count['L'] == char_count['R'] and char_count['U'] == char_count['D']:\n                char_count[s[start]] -= 1\n                start += 1\n            if end - start + 1 < max_length:\n                max_length = end - start + 1\n                result.append(f\"{start + 1} {end + 1}\")\n\n            end += 1\n\n        if max_length == n:\n            result.append(\"-1\")\n\n    return \"\\n\".join(result)\n"
    },
    {
        "number": 4529,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Get the number of test cases\n    t = int(stdin.readline())\n\n    for _ in range(t):\n        # Get the length of the path and the path itself\n        n = int(stdin.readline())\n        path = stdin.readline().strip()\n\n        # Initialize the starting point of the robot\n        x, y = 0, 0\n\n        # Iterate over the path and move the robot\n        for move in path:\n            if move == 'L':\n                x -= 1\n            elif move == 'R':\n                x += 1\n            elif move == 'U':\n                y += 1\n            elif move == 'D':\n                y -= 1\n\n        # Initialize the variables to store the minimum substring length and the endpoints\n        min_length = float('inf')\n        start = 0\n        end = 0\n\n        # Iterate over the path again and check for substrings that don't change the endpoint\n        for i in range(n):\n            # Initialize the variables to store the current substring and its length\n            current_substring = \"\"\n            current_length = 0\n\n            # Iterate over the current substring and move the robot\n            for j in range(i, n):\n                current_substring += path[j]\n                current_length += 1\n\n                # Move the robot according to the current substring\n                for move in current_substring:\n                    if move == 'L':\n                        x -= 1\n                    elif move == 'R':\n                        x += 1\n                    elif move == 'U':\n                        y += 1\n                    elif move == 'D':\n                        y -= 1\n\n                # Check if the endpoint of the robot is the same after the current substring\n                if x == 0 and y == 0:\n                    # Check if the current substring is shorter than the minimum length\n                    if current_length < min_length:\n                        min_length = current_length\n                        start = i\n                        end = i + current_length - 1\n\n        # Check if we found a substring that doesn't change the endpoint\n        if min_length == float('inf'):\n            print(-1)\n        else:\n            print(start, end)"
    },
    {
        "number": 4529,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split(\"\\n\")[0])\n    test_cases = stdin.split(\"\\n\")[1:-1]\n    result = []\n\n    for n, s in zip(test_cases[0::2], test_cases[1::2]):\n        n = int(n)\n        x, y = 0, 0\n        move_dict = {'L': (-1, 0), 'R': (1, 0), 'U': (0, 1), 'D': (0, -1)}\n\n        for i in range(n):\n            dx, dy = move_dict[s[i]]\n            x += dx\n            y += dy\n\n        for l in range(1, n):\n            for r in range(l, n + 1):\n                new_x, new_y = x, y\n                for i in range(l, r):\n                    dx, dy = move_dict[s[i - 1]]\n                    new_x += dx\n                    new_y += dy\n\n                if new_x == 0 and new_y == 0:\n                    result.append(f\"{l} {r}\")\n                    break\n            else:\n                continue\n            break\n        else:\n            result.append(\"-1\")\n\n    return \"\\n\".join(result)\n"
    },
    {
        "number": 4529,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def next_pos(pos, char):\n        return (pos[0] - 1, pos[1]) if char == 'L' else (pos[0] + 1, pos[1]) if char == 'R' else (pos[0], pos[1] + 1) if char == 'U' else (pos[0], pos[1] - 1)\n\n    def is_valid_substring(s, start, end):\n        start_pos = (0, 0)\n        for i in range(start, end + 1):\n            start_pos = next_pos(start_pos, s[i])\n        return start_pos == (0, 0)\n\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        s = stdin.readline().strip()\n        min_len = n + 1\n        min_substring = None\n        for start in range(n):\n            for end in range(start, n):\n                if is_valid_substring(s, start, end):\n                    substring_len = end - start + 1\n                    if substring_len < min_len:\n                        min_len = substring_len\n                        min_substring = (start + 1, end + 1)\n        if min_substring:\n            print(*min_substring)\n        else:\n            print(-1)\n"
    },
    {
        "number": 4529,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def can_remove_substring(s: str) -> bool:\n        x, y = 0, 0\n        for move in s:\n            if move == 'L':\n                x -= 1\n            elif move == 'R':\n                x += 1\n            elif move == 'U':\n                y += 1\n            else:\n                y -= 1\n        return x == 0 and y == 0\n\n    def find_min_substring(s: str) -> str:\n        for i in range(len(s) - 1):\n            for j in range(i + 1, len(s) + 1):\n                if can_remove_substring(s[i:j]):\n                    return i, j\n        return None\n\n    stdin = stdin.split('\\n')\n    t = int(stdin[0])\n    output = []\n\n    for i in range(1, t * 2 + 1, 2):\n        n = int(stdin[i])\n        s = stdin[i + 1]\n        substring = find_min_substring(s)\n        if substring is None:\n            output.append(-1)\n        else:\n            output.append(f\"{substring[0]} {substring[1]}\")\n\n    return \"\\n\".join(map(str, output))"
    },
    {
        "number": 4529,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    results = []\n\n    for _ in range(t):\n        n = int(stdin.readline())\n        path = stdin.readline().strip()\n\n        for i in range(n):\n            for j in range(i + 1, n + 1):\n                if path[i:j] not in path:\n                    results.append((i, j))\n\n        if not results:\n            results.append(-1)\n\n    return \"\\n\".join(str(result) for result in results)\n"
    },
    {
        "number": 4529,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num_test_cases = int(stdin.splitlines()[0])\n    result = []\n\n    for i in range(1, num_test_cases * 2 + 1, 2):\n        n = int(stdin.splitlines()[i])\n        s = stdin.splitlines()[i + 1]\n        if n == 1:\n            result.append(\"-1\")\n            continue\n\n        for l in range(1, n):\n            for r in range(l, n):\n                if s[l - 1 : r + 1] == s[l:r + 1]:\n                    result.append(f\"{l} {r}\")\n                    break\n            else:\n                continue\n            break\n        else:\n            result.append(\"-1\")\n\n    return \"\\n\".join(result)\n\n\ninput_str = \"\"\"4\n4\nLRUD\n4\nLURD\n5\nRRUDU\n5\nLLDDR\"\"\"\n\nprint(solution(input_str)) "
    },
    {
        "number": 4529,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.split(\"\\n\")\n    t = int(test_cases[0])\n    output = []\n\n    for i in range(1, t * 2 + 1, 2):\n        n = int(test_cases[i])\n        s = test_cases[i + 1]\n        result = remove_substring(s, n)\n        if result == -1:\n            output.append(\"-1\")\n        else:\n            output.append(f\"{result[0]} {result[1]}\")\n\n    return \"\\n\".join(output)\n\ndef"
    },
    {
        "number": 4530,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.split('\\n')\n    output = []\n    for i in range(int(test_cases[0])):\n        n = int(test_cases[2*i+1])\n        skills = list(map(int, test_cases[2*i+2].split()))\n        unique_skills = set(skills)\n        unique_skills_count = len(unique_skills)\n        min_team_size = min(unique_skills_count, n - unique_skills_count)\n        max_team_size = n // 2\n        for team_size in range(min_team_size, max_team_size + 1):\n            first_team_size = team_size\n            second_team_size = n - team_size\n            first_team_skills = set()\n            second_team_skills = set()\n            for skill in skills:\n                if len(first_team_skills) < first_team_size and skill not in first_team_skills:\n                    first_team_skills.add(skill)\n                elif len(second_team_skills) < second_team_size and skill in first_team_skills:\n                    second_team_skills.add(skill)\n            if len(first_team_skills) == first_team_size and len(second_team_skills) == second_team_size:\n                output.append(team_size)\n                break\n        if not output:\n            output.append(0)\n    return '\\n'.join(map(str, output))"
    },
    {
        "number": 4530,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.split()\n    result = []\n    for t in range(int(test_cases[0])):\n        n = int(test_cases[1])\n        skills = list(map(int, test_cases[2:2+n]))\n        teams = []\n        for i in range(1, n+1):\n            if len([s for s in skills if s == i]) >= i:\n                teams.append(i)\n        if len(teams) > 0:\n            result.append(str(max(teams)))\n        else:\n            result.append(\"0\")\n        test_cases = test_cases[2+n:]\n    return \"\\n\".join(result)\n\nstdin = \"\"\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4530,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    test_cases = stdin.split(\"\\n\")\n    for i in range(0, len(test_cases), 2):\n        n = int(test_cases[i])\n        skills = list(map(int, test_cases[i + 1].split()))\n\n        max_size = 0\n        for size in range(1, len(skills) // 2 + 1):\n            for team1 in itertools.combinations(skills, size):\n                team1_skills = set(team1)\n                team1_size = len(team1)\n                if len(team1_skills) == team1_size:\n                    for team2 in itertools.combinations(skills, team1_size):\n                        team2_skills = set(team2)\n                        if team1_skills == team2_skills:\n                            max_size = max(max_size, team1_size)\n\n        result.append(str(max_size))\n\n    return \"\\n\".join(result)\n\ndef"
    },
    {
        "number": 4530,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid_team(team1, team2):\n        if len(team1) != len(team2) or len(team1) == 0:\n            return False\n        for i in range(len(team1)):\n            if team1[i] != team2[i]:\n                return False\n        return True\n\n    def find_team(team_size, skills, unique_skills):\n        team1 = []\n        team2 = []\n        for i in range(team_size):\n            if len(unique_skills) > 0:\n                skill = unique_skills.pop()\n                team1.append(skill)\n            else:\n                skill = skills.pop(0)\n                team2.append(skill)\n        if is_valid_team(team1, team2):\n            return team_size\n        return find_team(team_size - 1, skills, unique_skills)\n\n    t = int(stdin.pop(0))\n    result = []\n\n    for i in range(t):\n        n = int(stdin.pop(0))\n        skills = list(map(int, stdin.pop(0).split()))\n        unique_skills = list(set(skills))\n\n        if len(unique_skills) < 2:\n            result.append(0)\n        else:\n            team_size = find_team(n // 2, skills, unique_skills)\n            result.append(team_size)\n\n    return \"\\n\".join(map(str, result))"
    },
    {
        "number": 4530,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid_pair(team1, team2):\n        return len(team1) == len(team2) and len(team1) == len(set(team1)) and len(team2) == len(set(team2))\n\n    def find_valid_pair(skills):\n        unique_skills = set(skills)\n        for size in range(1, len(skills) + 1):\n            for team1 in itertools.combinations(unique_skills, size):\n                team2 = tuple(sorted(skills))\n                if is_valid_pair(team1, team2):\n                    return size\n        return 0\n\n    t = int(stdin.readline())\n    result = []\n\n    for _ in range(t):\n        n = int(stdin.readline())\n        skills = list(map(int, stdin.readline().split()))\n        result.append(find_valid_pair(skills))\n\n    return \"\\n\".join(map(str, result))"
    },
    {
        "number": 4530,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid_pair(a, b):\n        return len(set(a)) == len(a) and len(set(b)) == 1\n\n    def max_x(stdin: str) -> int:\n        n, skills = list(map(int, input().split()))\n        skills = list(map(int, skills.split()))\n        skills_map = {}\n        for i, skill in enumerate(skills):\n            if skill not in skills_map:\n                skills_map[skill] = [i]\n            else:\n                skills_map[skill].append(i)\n\n        max_size = 0\n        for x in range(1, len(skills) + 1):\n            a, b = [], []\n            for i in range(x):\n                a.append(skills_map[i + 1][0])\n            for i in range(x, len(skills)):\n                b.append(skills_map[i + 1][0])\n            if is_valid_pair(a, b):\n                max_size = x\n        return max_size\n\n    t = int(input())\n    results = []\n    for _ in range(t):\n        results.append(max_x(stdin))\n    return \"\\n\".join(map(str, results))"
    },
    {
        "number": 4530,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def find_valid_teams(students: List[int]) -> List[List[int]]:\n        students.sort()\n        unique_students = set(students)\n        teams = []\n        for student in unique_students:\n            first_team = [student]\n            second_team = [student]\n            for other_student in unique_students - {student}:\n                if other_student != student:\n                    first_team.append(other_student)\n                else:\n                    second_team.append(other_student)\n            if len(first_team) == len(second_team):\n                teams.append([first_team, second_team])\n        return teams\n\n    t = int(stdin.readline())\n    output = []\n    for _ in range(t):\n        n = int(stdin.readline())\n        students = list(map(int, stdin.readline().split()))\n        max_team_size = 0\n        for team in find_valid_teams(students):\n            team_size = len(team[0])\n            if team_size > max_team_size:\n                max_team_size = team_size\n        output.append(str(max_team_size))\n    return \"\\n\".join(output)\n\n\ndef"
    },
    {
        "number": 4530,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    output = []\n    for i in range(t):\n        n = int(stdin.split('\\n')[2 * i + 1])\n        skills = list(map(int, stdin.split('\\n')[2 * i + 2].split()))\n        max_team_size = min(n // 2, max(skills))\n        for team_size in range(1, max_team_size + 1):\n            if len(set([skills[j] for j in range(n) if skills[j] % team_size == 0])) == team_size:\n                output.append(team_size)\n                break\n        else:\n            output.append(0)\n    return '\\n'.join(map(str, output))"
    },
    {
        "number": 4530,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(a, b):\n        return len(set(a)) == len(a) and len(set(b)) == 1 and len(a) == len(b)\n\n    def find_valid_size(stdin: str) -> int:\n        n, skills = stdin.split()\n        n = int(n)\n        skills = list(map(int, skills.split()))\n        skills.sort()\n\n        left, right = 1, n\n        while left <= right:\n            mid = (left + right) // 2\n            if is_valid(skills[:mid], skills[mid:]):\n                right = mid - 1\n            else:\n                left = mid + 1\n\n        return left if is_valid(skills[:left], skills[left:]) else 0\n\n    lines = stdin.strip().split('\\n')\n    result = []\n    for i in range(1, len(lines), 2):\n        result.append(find_valid_size(lines[i]))\n\n    return '\\n'.join(map(str, result))\n\n\ninput_string = \"4\\n7\\n4 2 4 1 4 3\\n5\\n2 1 5 4 3\\n1\\n1\\n4\\n1 1 1 3\"\noutput_string = solution(input_string)\nprint(output_string) "
    },
    {
        "number": 4530,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    results = []\n    for i in range(t):\n        n = int(stdin.split()[1])\n        skills = list(map(int, stdin.split()[2:]))\n\n        unique_skills = set(skills)\n        max_size = min(len(unique_skills), n // 2)\n\n        if max_size == 0:\n            results.append(\"0\")\n        elif max_size == n // 2:\n            results.append(\"2\")\n        else:\n            results.append(str(max_size))\n\n        stdin = stdin.split(\"\\n\", 2)[1]\n\n    return \"\\n\".join(results)"
    },
    {
        "number": 4531,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    values = list(map(int, stdin.splitlines()[1].split()))\n    edges = [list(map(int, line.split())) for line in stdin.splitlines()[2:]]\n    \n    def distance(u, v):\n        visited = [False] * n\n        queue = [u]\n        visited[u-1] = True\n        dist = 0\n        \n        while queue:\n            node = queue.pop(0)\n            for neighbor in edges:\n                if neighbor[0] == node:\n                    neighbor = neighbor[1]\n                elif neighbor[1] == node:\n                    neighbor = neighbor[0]\n                else:\n                    continue\n                \n                if not visited[neighbor-1]:\n                    visited[neighbor-1] = True\n                    queue.append(neighbor)\n                    if neighbor == v:\n                        return dist + 1\n            dist += 1\n            \n        return -1\n    \n    max_cost = 0\n    for i in range(1, n+1):\n        cost = sum([distance(j, i) * values[j-1] for j in range(1, n+1)])\n        max_cost = max(max_cost, cost)\n        \n    return str(max_cost) "
    },
    {
        "number": 4531,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, values, edges = stdin.split(\"\\n\")\n    n = int(n)\n    values = list(map(int, values.split()))\n    edges = [tuple(map(int, line.split())) for line in edges.split(\"\\n\")]\n\n    graph = [[] for _ in range(n)]\n    for u, v in edges:\n        graph[u - 1].append(v - 1)\n        graph[v - 1].append(u - 1)\n\n    def dfs(start: int, seen: set, depth: int) -> int:\n        if depth == 0:\n            return 0\n        result = 0\n        for v in graph[start]:\n            if v not in seen:\n                seen.add(v)\n                result = max(result, dfs(v, seen, depth - 1))\n                seen.remove(v)\n        return result + 1\n\n    result = 0\n    for i in range(n):\n        max_depth = dfs(i, {i}, n - 1)\n        result = max(result, max_depth * values[i])\n\n    return str(result)"
    },
    {
        "number": 4531,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def read_input() -> Tuple[int, List[int], List[Tuple[int, int]]]:\n        n = int(stdin.readline())\n        values = list(map(int, stdin.readline().split()))\n        edges = [tuple(map(int, stdin.readline().split())) for _ in range(n - 1)]\n        return n, values, edges\n\n    def calc_cost(n: int, values: List[int], edges: List[Tuple[int, int]]) -> int:\n        def dfs(v: int) -> int:\n            distances = [-1] * n\n            distances[v] = 0\n            stack = [v]\n            while stack:\n                u = stack.pop()\n                for e in edges:\n                    if e[0] == u and distances[e[1]] == -1:\n                        distances[e[1]] = distances[u] + 1\n                        stack.append(e[1])\n            return distances\n\n        def max_cost(v: int) -> int:\n            distances = dfs(v)\n            return sum(values[i] * distances[i] for i in range(n))\n\n        return max(max_cost(i) for i in range(n))\n\n    n, values, edges = read_input()\n    return str(calc_cost(n, values, edges))"
    },
    {
        "number": 4531,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *values = stdin.split()\n    n = int(n)\n    values = list(map(int, values))\n    edges = []\n    for i in range(n - 1):\n        u, v = stdin.split()\n        edges.append((int(u), int(v)))\n\n    def dfs(u, prev):\n        nonlocal values, edges\n        distances = [0] * n\n        visited = [False] * n\n        visited[u] = True\n        stack = [u]\n        while stack:\n            v = stack.pop()\n            for w in range(n):\n                if (w, v) in edges and not visited[w]:\n                    distances[w] = distances[v] + 1\n                    stack.append(w)\n                    visited[w] = True\n        return [distances[i] * values[i] for i in range(n)]\n\n    max_cost = 0\n    for i in range(n):\n        max_cost = max(max_cost, max(dfs(i, i)))\n\n    return str(max_cost)"
    },
    {
        "number": 4531,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def find_parent(parent: List[int], x: int) -> int:\n        if parent[x] == x:\n            return x\n        return find_parent(parent, parent[x])\n\n    def union(parent: List[int], rank: List[int], x: int, y: int) -> None:\n        parent_x = find_parent(parent, x)\n        parent_y = find_parent(parent, y)\n        if parent_x == parent_y:\n            return\n        if rank[parent_x] < rank[parent_y]:\n            parent[parent_x] = parent_y\n        elif rank[parent_x] > rank[parent_y]:\n            parent[parent_y] = parent_x\n        else:\n            parent[parent_y] = parent_x\n            rank[parent_x] += 1\n\n    n = int(stdin.readline().strip())\n    values = list(map(int, stdin.readline().strip().split()))\n    edges = []\n    parent = [i for i in range(n)]\n    rank = [0] * n\n\n    for _ in range(n - 1):\n        u, v = map(int, stdin.readline().strip().split())\n        edges.append((u - 1, v - 1))\n\n    for u, v in edges:\n        union(parent, rank, u, v)\n\n    max_cost = 0\n    for i in range(n):\n        root = find_parent(parent, i)\n        max_cost = max(max_cost, sum(dist * values[i] for dist, i in enumerate(parent) if i == root))\n\n    return str(max_cost)\n\ninput_data = \"\"\"8\n9 4 1 7 10 1 6 5\n1 2\n2 3\n1 4\n1 5\n5 6\n5 7\n5 8\"\"\"\nprint(solution(input_data)) # Output: 121 "
    },
    {
        "number": 4531,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    values = [int(x) for x in stdin.readline().split()]\n    adj_list = [[] for _ in range(n)]\n    for i in range(n - 1):\n        u, v = map(int, stdin.readline().split())\n        adj_list[u - 1].append(v - 1)\n        adj_list[v - 1].append(u - 1)\n\n    def dfs(node: int, parent: int) -> int:\n        result = 0\n        for neighbor in adj_list[node]:\n            if neighbor != parent:\n                result += dfs(neighbor, node)\n        return result + 1\n\n    max_cost = 0\n    for root in range(n):\n        max_cost = max(max_cost, dfs(root, -1) * sum(values))\n\n    return str(max_cost)"
    },
    {
        "number": 4531,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, a_values, edges = parse_input(stdin)\n\n    # Initialize distance and cost matrices\n    distance_matrix = [[float('inf')] * n for _ in range(n)]\n    cost_matrix = [[0] * n for _ in range(n)]\n\n    # Calculate distances and costs\n    for i in range(n):\n        distance_matrix[i][i] = 0\n        cost_matrix[i][i] = a_values[i]\n\n    for edge in edges:\n        u, v = edge\n        distance_matrix[u][v] = 1\n        cost_matrix[u][v] = a_values[u] * distance_matrix[u][v] + a_values[v] * distance_matrix[v][u]\n\n    # Find the maximum cost\n    max_cost = 0\n    for i in range(n):\n        for j in range(n):\n            max_cost = max(max_cost, cost_matrix[i][j])\n\n    return str(max_cost)\n\n\ndef"
    },
    {
        "number": 4531,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def get_dist(i, j, edges):\n        queue = [(i, 0)]\n        visited = set([i])\n        while queue:\n            node, distance = queue.pop(0)\n            if node == j:\n                return distance\n            for neighbor in edges[node]:\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    queue.append((neighbor, distance + 1))\n        return -1\n\n    n, *values = map(int, stdin.split())\n    edges = [[] for _ in range(n)]\n    for i in range(n - 1):\n        u, v = values[i], values[i + n - 1]\n        edges[u - 1].append(v - 1)\n        edges[v - 1].append(u - 1)\n\n    max_cost = 0\n    for i in range(n):\n        cost = sum([get_dist(j, i, edges) * values[j] for j in range(n)])\n        max_cost = max(max_cost, cost)\n\n    return str(max_cost)"
    },
    {
        "number": 4531,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def dist(u, v):\n        if u not in adj or v not in adj:\n            return float('inf')\n        return adj[u][v]\n\n    def max_cost(v):\n        return sum(dist(i, v) * a[i] for i in range(1, n + 1))\n\n    def find_max_cost():\n        return max(max_cost(i) for i in range(1, n + 1))\n\n    n, *a = stdin.split()\n    n = int(n)\n    a = [int(x) for x in a]\n\n    adj = [[] for _ in range(n + 1)]\n    for i in range(n - 1):\n        u, v = stdin.split()\n        u, v = int(u), int(v)\n        adj[u].append(v)\n        adj[v].append(u)\n\n    return str(find_max_cost())\n"
    },
    {
        "number": 4531,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def find_root(n, edges):\n        visited = [False] * (n + 1)\n        for u, v in edges:\n            if not visited[u]:\n                visited[u] = True\n                root = u\n        return root\n\n    def calc_cost(n, a, edges, root):\n        adjacency_list = [[] for _ in range(n + 1)]\n        for u, v in edges:\n            adjacency_list[u].append(v)\n            adjacency_list[v].append(u)\n\n        def dfs(u, parent, depth):\n            nonlocal max_distance, max_value\n            max_distance = max(max_distance, depth)\n            max_value = max(max_value, a[u])\n            for v in adjacency_list[u]:\n                if v != parent:\n                    dfs(v, u, depth + 1)\n\n        max_distance = 0\n        max_value = 0\n        dfs(root, -1, 0)\n        return max_distance * max_value\n\n    n, *a = map(int, stdin.split())\n    edges = [tuple(map(int, input().split())) for _ in range(n - 1)]\n    root = find_root(n, edges)\n    return str(calc_cost(n, a, edges, root))\n"
    },
    {
        "number": 4532,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def find_min_moves(n, k, a):\n        x = 0\n        min_moves = 0\n        for i in range(1, n + 1):\n            while a[i - 1] % k != 0:\n                a[i - 1] += x\n                x += 1\n                min_moves += 1\n        return min_moves\n\n    t = int(stdin.readline())\n    output = []\n    for _ in range(t):\n        n, k = map(int, stdin.readline().split())\n        a = list(map(int, stdin.readline().split()))\n        output.append(find_min_moves(n, k, a))\n    return \"\\n\".join(map(str, output))\n\nwith open(\"input.txt\", \"r\") as file:\n    stdin = file.read()\n    result = solution(stdin)\n\nwith open(\"output.txt\", \"w\") as file:\n    file.write(result) "
    },
    {
        "number": 4532,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    result = []\n    for _ in range(t):\n        n, k = map(int, stdin.readline().strip().split())\n        a = list(map(int, stdin.readline().strip().split()))\n        x = 0\n        moves = 0\n        for i in range(n):\n            if a[i] % k != 0:\n                a[i] += x\n                moves += 1\n                x += 1\n        if any(elem % k != 0 for elem in a):\n            moves = \"IMPOSSIBLE\"\n        result.append(moves)\n    return \"\\n\".join(map(str, result))\n\ninput_string = \"\"\"5\n4 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24\n8 8\n1 2 3 4 5 6 7 8\"\"\"\n\nprint(solution(input_string)) "
    },
    {
        "number": 4532,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.split(\"\\n\")\n    t = int(test_cases[0])\n    output = []\n\n    for i in range(1, t * 2, 2):\n        n, k = map(int, test_cases[i].split())\n        a = list(map(int, test_cases[i + 1].split()))\n\n        min_moves = float('inf')\n        for j in range(1, n + 1):\n            moves = 0\n            for ai in a:\n                if ai % k != 0:\n                    moves += (k - ai % k)\n            min_moves = min(min_moves, moves)\n            a[j - 1] += 1\n\n        output.append(str(min_moves))\n\n    return \"\\n\".join(output)"
    },
    {
        "number": 4532,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def min_moves(n: int, k: int, a: list) -> int:\n        x = 0\n        for i in range(n):\n            if x < k - a[i] % k:\n                a[i] += x\n                x += k - a[i] % k\n            else:\n                x += a[i] % k\n        return x\n\n    t = int(stdin.readline())\n    result = []\n\n    for _ in range(t):\n        n, k = map(int, stdin.readline().split())\n        a = list(map(int, stdin.readline().split()))\n        result.append(min_moves(n, k, a))\n\n    return '\\n'.join(map(str, result))\n\nstdin = open('input.txt', 'r')\nprint(solution(stdin)) "
    },
    {
        "number": 4532,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.splitlines()[0])\n    result = []\n    for i in range(1, t+1):\n        n, k = map(int, stdin.split('\\n')[i].split())\n        a = list(map(int, stdin.split('\\n')[i+1].split()))\n        x = 0\n        moves = 0\n        for j in range(n):\n            if a[j] % k != 0:\n                moves += k - a[j] % k\n                a[j] += k - a[j] % k\n        result.append(moves)\n    return '\\n'.join(map(str, result))\n\ntest_input = \"\"\"4 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24\n8 8\n1 2 3 4 5 6 7 8\n\"\"\"\n\nprint(solution(test_input)) "
    },
    {
        "number": 4532,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.splitlines()[0])\n    result = []\n    for i in range(1, test_cases + 1):\n        n, k = list(map(int, stdin.splitlines()[i].split()))\n        a = list(map(int, stdin.splitlines()[i + 1].split()))\n        moves = 0\n        used_indices = set()\n        for j in range(1, n + 1):\n            if j not in used_indices:\n                moves += 1\n                used_indices.add(j)\n                a[j - 1] += moves\n            if a[j - 1] % k == 0:\n                moves -= 1\n            else:\n                moves += 1\n        result.append(moves)\n    return \"\\n\".join(map(str, result))\n\ndef"
    },
    {
        "number": 4532,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    cases = []\n    for case in stdin.split('\\n'):\n        if case:\n            n, k = map(int, case.split())\n            a = list(map(int, input().split()))\n            cases.append((n, k, a))\n\n    for case in cases:\n        n, k, a = case\n        x = 0\n        moves = 0\n        for i in range(n):\n            if a[i] % k != 0:\n                moves += 1\n                a[i] += x\n                x += 1\n        moves += x\n        print(moves)\n\ninput_data = \"\"\"4 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24\n8 8\n1 2 3 4 5 6 7 8\"\"\"\n\nsolution(input_data) "
    },
    {
        "number": 4532,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n\n    def find_min_moves(a, k) -> int:\n        n = len(a)\n        x = 0\n        moves = 0\n\n        for i in range(n):\n            if a[i] % k != 0:\n                moves += (k - a[i] % k)\n                a[i] += (k - a[i] % k)\n                x += 1\n\n        return moves\n\n    t = int(input())\n    res = []\n\n    for _ in range(t):\n        n, k = map(int, input().split())\n        a = list(map(int, input().split()))\n\n        res.append(find_min_moves(a, k))\n\n    return \"\\n\".join(map(str, res))\n\nstdin = sys.stdin.read()\nprint(solution(stdin)) "
    },
    {
        "number": 4532,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    test_cases = int(stdin.split('\\n', 1)[0])\n    for i in range(test_cases):\n        line = stdin.split('\\n')[i * 2 + 1]\n        n, k = map(int, line.split())\n        a = list(map(int, stdin.split('\\n')[i * 2 + 2].split()))\n        x = 0\n        moves = 0\n        for j in range(n):\n            if a[j] % k != 0:\n                moves += (k - a[j] % k)\n                a[j] += (k - a[j] % k)\n                x += 1\n            else:\n                x += 1\n        result.append(moves)\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 4532,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    result = []\n\n    for i in range(t):\n        n, k = map(int, stdin.split()[1:])\n        a = list(map(int, stdin.split()[2:]))\n        x = 0\n        moves = 0\n\n        for j in range(n):\n            while a[j] % k != 0 and x < k:\n                a[j] += x\n                x += 1\n                moves += 1\n\n            if x >= k:\n                x = 0\n\n        result.append(moves)\n\n    return \"\\n\".join(map(str, result))\n"
    },
    {
        "number": 4533,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    child_greed_factors, cookie_sizes = [int(x) for x in stdin.split(\", \")]\n    max_children_content = 0\n\n    cookie_sizes.sort(reverse=True)\n\n    for greed_factor in child_greed_factors:\n        for cookie_size in cookie_sizes:\n            if cookie_size >= greed_factor:\n                max_children_content += 1\n                cookie_sizes.remove(cookie_size)\n                break\n\n    return str(max_children_content)\n"
    },
    {
        "number": 4533,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def find_content_children(children_greed_factors: list, cookies_sizes: list) -> int:\n        cookies_sizes.sort(reverse=True)\n        children_greed_factors.sort(reverse=True)\n        content_children = 0\n        for child_greed_factor in children_greed_factors:\n            for cookie_size in cookies_sizes:\n                if cookie_size >= child_greed_factor:\n                    content_children += 1\n                    cookies_sizes.remove(cookie_size)\n                    break\n        return content_children\n\n    def main(input_data: str) -> str:\n        input_data = input_data.split(\",\")\n        children_greed_factors = [int(child_greed_factor) for child_greed_factor in input_data[0].strip(\"[]\").split(\",\")]\n        cookies_sizes = [int(cookie_size) for cookie_size in input_data[1].strip(\"[]\").split(\",\")]\n        content_children = find_content_children(children_greed_factors, cookies_sizes)\n        return str(content_children)\n\n    input_data = stdin.strip()\n    result = main(input_data)\n    return result"
    },
    {
        "number": 4533,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    children, cookies = stdin.split()\n    children = list(map(int, children[1:-1].split(',')))\n    cookies = list(map(int, cookies[1:-1].split(',')))\n\n    max_children = 0\n    for child in children:\n        max_children += min(sum(filter(lambda x: x >= child, cookies)), 1)\n\n    return str(max_children)"
    },
    {
        "number": 4533,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    children_greed_factors, cookies_sizes = input_parser(stdin)\n    content_children_count = 0\n    \n    for child_greed_factor in children_greed_factors:\n        for cookie_size in cookies_sizes:\n            if cookie_size >= child_greed_factor:\n                content_children_count += 1\n                cookies_sizes.remove(cookie_size)\n                break\n    \n    return str(content_children_count)\n\ndef"
    },
    {
        "number": 4533,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # input handling\n    children, cookies = stdin.split('\\n')\n    children = [int(x) for x in children.strip().split(',')]\n    cookies = [int(x) for x in cookies.strip().split(',')]\n    \n    # sort the children and cookies in descending order\n    children.sort(reverse=True)\n    cookies.sort(reverse=True)\n    \n    # initialize the count of content children\n    count = 0\n    \n    # loop through the cookies and assign them to children\n    for cookie in cookies:\n        for child in children:\n            if cookie >= child:\n                count += 1\n                child = 0  # mark the child as content\n                break\n    \n    return str(count)\n"
    },
    {
        "number": 4533,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\",\")\n    children_greed_factors = list(map(int, input_list[0].strip(\"[]\").split()))\n    cookies_sizes = list(map(int, input_list[1].strip(\"[]\").split()))\n    content_children_count = 0\n    \n    for child_greed_factor in children_greed_factors:\n        for cookie_size in cookies_sizes:\n            if cookie_size >= child_greed_factor:\n                content_children_count += 1\n                cookies_sizes.remove(cookie_size)\n                break\n                \n    return str(content_children_count)"
    },
    {
        "number": 4533,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    children_greed_factors, cookies_sizes = [int(x) for x in stdin.split(',')]\n    cookies_sizes.sort(reverse=True)\n    count = 0\n    i = 0\n    for child in children_greed_factors:\n        if i < len(cookies_sizes) and cookies_sizes[i] >= child:\n            count += 1\n            i += 1\n    return str(count)\n"
    },
    {
        "number": 4533,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    children, cookies = [int(x) for x in stdin.split(',')]\n    children_greed_factors = sorted(children)\n    cookies_sizes = sorted([int(x) for x in cookies.split(',')], reverse=True)\n    \n    num_children = len(children_greed_factors)\n    num_cookies = len(cookies_sizes)\n    \n    count = 0\n    cookie_index = 0\n    for child_greed_factor in children_greed_factors:\n        while cookie_index < num_cookies and cookies_sizes[cookie_index] >= child_greed_factor:\n            count += 1\n            cookie_index += 1\n            if count == num_children:\n                break\n    \n    return str(count)\n\n\ninput1 = \"1,2,3\"\ninput2 = \"1,2\"\ninput3 = \"1,2,3\"\n\nprint(solution(input1))  # Output: 1\nprint(solution(input2))  # Output: 2\nprint(solution(input3))  # Output: 2 "
    },
    {
        "number": 4533,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    children, cookies = list(map(int, stdin.split()))\n    children.sort(reverse=True)\n    cookies.sort(reverse=True)\n    count = 0\n\n    for child in children:\n        for cookie in cookies:\n            if cookie >= child:\n                count += 1\n                cookies.remove(cookie)\n                break\n\n    return str(count)\n"
    },
    {
        "number": 4533,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    children, cookies = stdin.split('\\n')\n    children = [int(x) for x in children.split(',')]\n    cookies = [int(x) for x in cookies.split(',')]\n\n    max_children_count = 0\n    for child in children:\n        cookie_found = False\n        for cookie in cookies:\n            if cookie >= child:\n                cookie_found = True\n                break\n        if cookie_found:\n            max_children_count += 1\n\n    return str(max_children_count)"
    },
    {
        "number": 4534,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k < 0 or k > 33:\n        return \"Invalid input\"\n\n    row = [1]\n\n    for i in range(1, k + 1):\n        prev_row = row\n        row = [1]\n\n        for j in range(1, i):\n            row.append(prev_row[j - 1] + prev_row[j])\n\n        row.append(1)\n\n    return row"
    },
    {
        "number": 4534,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k < 0 or k > 33:\n        raise ValueError(\"Invalid input\")\n\n    row = [1] * (k + 1)\n    for i in range(1, k + 1):\n        for j in range(i - 1, 0, -1):\n            row[j] = row[j] + row[j - 1]\n\n    return row"
    },
    {
        "number": 4534,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k == 0:\n        return [1]\n    if k == 1:\n        return [1, 1]\n    result = [1, 1]\n    for i in range(2, k+1):\n        row = [1] * i\n        for j in range(1, i-1):\n            row[j] = result[j-1] + result[j]\n        result = row\n    return result"
    },
    {
        "number": 4534,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k < 0 or k > 33:\n        return \"Invalid input\"\n\n    row = [1]\n    for i in range(1, k + 1):\n        temp = [1] * (i + 1)\n        for j in range(1, i):\n            temp[j] = row[j - 1] + row[j]\n        row = temp\n\n    return row"
    },
    {
        "number": 4534,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k < 0 or k > 33:\n        raise ValueError(\"Invalid index for Pascal's triangle\")\n\n    row = [1] * (k + 1)\n    for i in range(1, k + 1):\n        for j in range(i - 1, 0, -1):\n            row[j] = row[j] + row[j - 1]\n        row[0] = 1\n\n    return row\n\ndef"
    },
    {
        "number": 4534,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k == 0:\n        return \"[]\"\n    row = [1]\n    for i in range(1, k+1):\n        prev = [1]\n        for j in range(1, i):\n            curr = row[j-1] + row[j]\n            prev.append(curr)\n        if i == k:\n            return str(prev)\n        row = prev\n    return \"[]\""
    },
    {
        "number": 4534,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    result = [1] * (k + 1)\n    \n    for i in range(1, k + 1):\n        for j in range(i - 1, 0, -1):\n            result[j] = result[j] + result[j - 1]\n    \n    return result[:-1]"
    },
    {
        "number": 4534,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k < 0 or k > 33:\n        return \"Invalid input\"\n    row = [1] * (k + 1)\n    for i in range(1, k + 1):\n        for j in range(1, i):\n            row[j] = row[j - 1] + row[j]\n    return row[:-1]\n\nprint(solution(\"3\"))  # Output: [1, 3, 3, 1] "
    },
    {
        "number": 4534,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    result = []\n    if k == 0:\n        return [1]\n    for i in range(k+1):\n        if i == 0:\n            result.append(1)\n        elif i == k:\n            result.append(1)\n        else:\n            result.append(result[i-1] + result[i])\n    return result\n\nprint(solution(\"3\")) "
    },
    {
        "number": 4534,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k > 33:\n        return \"Error: k must be less than or equal to 33.\"\n    elif k < 0:\n        return \"Error: k must be non-negative.\"\n    else:\n        row = [1] * (k + 1)\n        for i in range(2, k + 1):\n            for j in range(1, i):\n                row[i - j] += row[i - j - 1]\n        return row"
    },
    {
        "number": 4535,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Convert input binary string to integer\n    n = int(stdin, 2)\n\n    # Count number of '1' bits\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n\n    return str(count)"
    },
    {
        "number": 4535,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    for char in stdin:\n        if char == '1':\n            count += 1\n    return str(count)"
    },
    {
        "number": 4535,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    for char in stdin:\n        if char == '1':\n            count += 1\n    return count"
    },
    {
        "number": 4535,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    for char in stdin:\n        if char == '1':\n            count += 1\n    return str(count)"
    },
    {
        "number": 4535,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    for char in stdin:\n        if char == '1':\n            count += 1\n    return count"
    },
    {
        "number": 4535,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    for char in stdin:\n        if char == '1':\n            count += 1\n    return str(count)"
    },
    {
        "number": 4535,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    for char in stdin:\n        if char == '1':\n            count += 1\n    return count"
    },
    {
        "number": 4535,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    binary_string = stdin\n    count = 0\n    for bit in binary_string:\n        if bit == '1':\n            count += 1\n    return str(count)"
    },
    {
        "number": 4535,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    for char in stdin:\n        if char == '1':\n            count += 1\n    return str(count)"
    },
    {
        "number": 4535,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    for bit in stdin:\n        if bit == '1':\n            count += 1\n    return count"
    },
    {
        "number": 4536,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    digits = list(map(int, stdin.strip().split()))\n    index = len(digits) - 1\n    carry = 1\n\n    while index >= 0:\n        result = digits[index] + carry\n\n        if result == 10:\n            digits[index] = 0\n            carry = 1\n        else:\n            digits[index] = result\n            carry = 0\n\n        index -= 1\n\n    if carry == 1:\n        digits.insert(0, carry)\n\n    return \"\".join(map(str, digits))\n\ndef"
    },
    {
        "number": 4536,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_list = list(map(int, stdin))\n    num = 0\n    for digit in num_list:\n        num = num * 10 + digit\n    \n    num += 1\n    num_list = []\n    while num > 0:\n        digit = num % 10\n        num_list.append(digit)\n        num //= 10\n    \n    return ''.join(map(str, num_list[::-1]))"
    },
    {
        "number": 4536,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Convert the input string to a list of digits\n    digits = [int(c) for c in stdin]\n\n    # Find the index of the least significant digit (i.e. the rightmost digit)\n    i = len(digits) - 1\n\n    # Increment the digit at the least significant digit by 1\n    digits[i] += 1\n\n    # Check if we need to carry over to the next digit\n    while digits[i] == 10:\n        # If so, set the current digit to 0 and move to the next digit to the left\n        digits[i] = 0\n        i -= 1\n\n        # If we reach the leftmost digit and it's already 9, then we need to add a new least significant digit to the left\n        if i == -1:\n            digits.insert(0, 0)\n            i = 0\n\n    # Convert the resulting list of digits back to a string\n    result = ''.join([str(d) for d in digits])\n\n    return result"
    },
    {
        "number": 4536,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin))\n    carry = 1\n    for i in range(len(nums) - 1, -1, -1):\n        nums[i] += carry\n        carry = nums[i] // 10\n        nums[i] %= 10\n    if carry:\n        nums = [carry] + nums\n    return ''.join(map(str, nums))"
    },
    {
        "number": 4536,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    digits = list(map(int, stdin))\n    carry = 1\n    result = []\n\n    for i in range(len(digits)-1, -1, -1):\n        temp = digits[i] + carry\n        if temp > 9:\n            carry = 1\n            result.append(temp % 10)\n        else:\n            carry = 0\n            result.append(temp)\n\n    if carry == 1:\n        result.append(1)\n\n    result.reverse()\n    return \"\".join(map(str, result))\n"
    },
    {
        "number": 4536,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    digits = list(map(int, stdin))\n    carry = 1\n    result = []\n\n    for digit in reversed(digits):\n        total = digit + carry\n        carry = total // 10\n        result.append(total % 10)\n\n    if carry:\n        result.append(carry)\n\n    return ''.join(str(digit) for digit in reversed(result))"
    },
    {
        "number": 4536,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    digits = [int(x) for x in stdin]\n    n = len(digits)\n    carry = 0\n    for i in range(n-1, -1, -1):\n        digits[i] += carry\n        carry = digits[i] // 10\n        digits[i] %= 10\n    if carry:\n        digits.insert(0, carry)\n    return ''.join(str(x) for x in digits)\n\ndef"
    },
    {
        "number": 4536,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # split input string into list of digits\n    digits = [int(d) for d in stdin]\n    # find the index of the rightmost non-nine digit\n    carry = 1\n    i = len(digits) - 1\n    while i >= 0 and digits[i] == 9:\n        i -= 1\n        carry += 1\n    # add the carry to the rightmost non-nine digit\n    if i >= 0:\n        digits[i] += carry\n    # append a new digit if the result is 10 or more\n    if digits[-1] >= 10:\n        digits.append(0)\n        i += 1\n    # shift all digits to the right by 1\n    while i > 0:\n        digits[i] = digits[i-1]\n        i -= 1\n    # add the carry to the leftmost digit\n    digits[0] += carry\n    # convert the list of digits back to a string\n    result = \"\".join(str(d) for d in digits)\n    return result "
    },
    {
        "number": 4536,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    digits = list(map(int, stdin))\n    n = len(digits)\n    carry = 1\n\n    for i in range(n-1, -1, -1):\n        digits[i] += carry\n        carry = digits[i] // 10\n        digits[i] %= 10\n\n    if carry:\n        digits = [carry] + digits\n\n    return \"\".join(map(str, digits))"
    },
    {
        "number": 4536,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num = int(\"\".join(stdin))\n    num += 1\n    return str(num)"
    },
    {
        "number": 4537,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    add = A + B\n    sub = A - B\n    mul = A * B\n    largest = max(add, sub, mul)\n    return str(largest)\n\ndef"
    },
    {
        "number": 4537,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    max_value = max(a + b, a - b, a * b)\n    return str(max_value)\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4537,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    max_value = max(A + B, A - B, A * B)\n    return str(max_value)"
    },
    {
        "number": 4537,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    result = max(A+B, A-B, A*B)\n    return str(result)\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4537,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n\n    max_value = max(A+B, A-B, A*B)\n\n    return str(max_value)"
    },
    {
        "number": 4537,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    results = [A + B, A - B, A * B]\n    return str(max(results))\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4537,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    max_value = max(A + B, A - B, A * B)\n    return str(max_value)"
    },
    {
        "number": 4537,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    results = [A + B, A - B, A * B]\n    max_result = max(results)\n    return str(max_result)"
    },
    {
        "number": 4537,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    results = [A + B, A - B, A * B]\n    max_result = max(results)\n    return str(max_result)"
    },
    {
        "number": 4537,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    add = A + B\n    sub = A - B\n    mul = A * B\n\n    max_val = max(add, sub, mul)\n\n    return str(max_val)"
    },
    {
        "number": 4538,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, D = [int(x) for x in stdin.split()]\n    points = [tuple(int(x) for x in line.split()) for line in stdin.split('\\n')[2:]]\n    count = 0\n\n    for point in points:\n        if (point[0] ** 2 + point[1] ** 2) <= D ** 2:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4538,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    import math\n\n    points = stdin.split('\\n')[2:]\n    d = int(stdin.split('\\n')[1])\n    count = 0\n\n    for point in points:\n        x, y = map(int, point.split(' '))\n        distance = math.sqrt(x ** 2 + y ** 2)\n\n        if distance <= d:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4538,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, D = map(int, stdin.split(\"\\n\")[0].split())\n    points = [list(map(int, line.split())) for line in stdin.split(\"\\n\")[1:N+1]]\n\n    # calculate distances\n    distances = [((x**2 + y**2)**0.5) for x, y in points]\n\n    # count points within distance D\n    count = sum(1 for dist in distances if dist <= D)\n\n    return str(count)"
    },
    {
        "number": 4538,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split()[0:2])\n    points = stdin.split()[2:]\n    count = 0\n    \n    for point in points:\n        x, y = map(int, point.split())\n        if abs(x) + abs(y) <= d:\n            count += 1\n            \n    return str(count)"
    },
    {
        "number": 4538,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    points = []\n    num_points, max_distance = map(int, stdin.split()[:2])\n    for i in range(num_points):\n        x, y = map(int, stdin.split()[2*i:2*(i+1)])\n        distance = (x**2 + y**2) ** 0.5\n        if distance <= max_distance:\n            points.append((x, y))\n    return str(len(points))"
    },
    {
        "number": 4538,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input into lines\n    lines = stdin.split(\"\\n\")\n    # Get the number of points and the maximum distance\n    N, D = map(int, lines[0].split())\n    # Iterate through the points\n    count = 0\n    for i in range(1, N + 1):\n        # Get the coordinates of the i-th point\n        x, y = map(int, lines[i].split())\n        # Calculate the distance from the origin\n        distance = (x**2 + y**2)**0.5\n        # If the distance is at most D, increment the count\n        if distance <= D:\n            count += 1\n    # Return the count as a string\n    return str(count)"
    },
    {
        "number": 4538,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, D, *points = stdin.split()\n    N = int(N)\n    D = int(D)\n    count = 0\n\n    for point in points:\n        x, y = map(int, point.split(','))\n        distance = (x ** 2 + y ** 2) ** 0.5\n        if distance <= D:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4538,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, d = map(int, lines[0].split())\n    points = [tuple(map(int, line.split())) for line in lines[1:]]\n\n    count = 0\n    for point in points:\n        x, y = point\n        distance = (x**2 + y**2)**0.5\n        if distance <= d:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4538,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input into lines\n    lines = stdin.strip().split(\"\\n\")\n\n    # Parse the first line, which contains N and D\n    N, D = list(map(int, lines[0].strip().split(\" \")))\n\n    # Parse the remaining lines, which contain the coordinates of the N points\n    points = []\n    for line in lines[1:]:\n        x, y = list(map(int, line.strip().split(\" \")))\n        points.append((x, y))\n\n    # Count the number of points whose distance from the origin is at most D\n    count = 0\n    for point in points:\n        x, y = point\n        distance = (x ** 2 + y ** 2) ** 0.5\n        if distance <= D:\n            count += 1\n\n    # Return the result as a string\n    return str(count)"
    },
    {
        "number": 4538,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def distance(x, y):\n        return (x**2 + y**2) ** 0.5\n\n    input_lines = stdin.split(\"\\n\")\n    n, d = map(int, input_lines[0].split())\n    points = []\n    for i in range(1, n+1):\n        x, y = map(int, input_lines[i].split())\n        points.append((x, y))\n\n    count = 0\n    for point in points:\n        if distance(*point) <= d:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4539,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    digits_sum = sum(int(digit) for digit in str(n))\n    return \"Yes\" if n % digits_sum == 0 else \"No\""
    },
    {
        "number": 4539,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n\n    def f(x: int) -> int:\n        return sum(map(int, str(x)))\n\n    return \"Yes\" if N % f(N) == 0 else \"No\""
    },
    {
        "number": 4539,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def f(x: int) -> int:\n        return sum(int(digit) for digit in str(x))\n    \n    N = int(stdin)\n    return \"Yes\" if N % f(N) == 0 else \"No\""
    },
    {
        "number": 4539,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    def f(x: int) -> int:\n        return sum(map(int, str(x)))\n\n    return \"Yes\" if n % f(n) == 0 else \"No\""
    },
    {
        "number": 4539,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def f(x: int) -> int:\n        return sum(int(digit) for digit in str(x))\n\n    N = int(stdin)\n    return \"Yes\" if N % f(N) == 0 else \"No\""
    },
    {
        "number": 4539,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    digits_sum = sum(int(digit) for digit in str(N))\n    if N % digits_sum == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4539,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    f_x = sum(int(digit) for digit in str(n))\n    if n % f_x == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4539,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    f_n = sum(map(int, str(n)))\n    if n % f_n == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4539,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    digits_sum = sum(int(digit) for digit in str(N))\n    return \"Yes\" if N % digits_sum == 0 else \"No\"\n\ninput_stdin = input()\nprint(solution(input_stdin)) "
    },
    {
        "number": 4539,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    fx = sum(int(digit) for digit in str(N))\n    if N % fx == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4540,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *points = stdin.split()\n    N = int(N)\n    points = [int(x) for x in points]\n    \n    results = []\n    \n    for i in range(1, N+1):\n        cost = 0\n        for j in range(N):\n            if j == i-1:\n                continue\n            cost += abs(points[j] - points[i])\n        results.append(cost)\n    \n    return '\\n'.join(str(x) for x in results)"
    },
    {
        "number": 4540,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    import math\n\n    n, *coordinates = map(int, stdin.split())\n    coordinates = [0] + coordinates\n\n    total_cost = [0] * (n + 1)\n\n    for i in range(1, n + 1):\n        for j in range(i):\n            total_cost[i] += abs(coordinates[i] - coordinates[j])\n\n    total_cost.append(total_cost[1] + total_cost[n] + abs(coordinates[1] - coordinates[n]))\n\n    for i in range(1, n + 1):\n        print(total_cost[i] + total_cost[i - 1] + abs(coordinates[i - 1] - coordinates[i]))"
    },
    {
        "number": 4540,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    A = [int(x) for x in lines[1].split()]\n    \n    def cost(a: int, b: int) -> int:\n        return abs(a - b)\n    \n    def travel_cost(A: List[int]) -> int:\n        total_cost = 0\n        for i in range(len(A)):\n            if i == 0:\n                total_cost += cost(0, A[i])\n            else:\n                total_cost += cost(A[i-1], A[i])\n        return total_cost\n    \n    def cancel_i(A: List[int], i: int) -> int:\n        A = A[:i] + A[i+1:]\n        return travel_cost(A)\n    \n    output = [str(cancel_i(A, i)) for i in range(N)]\n    \n    return \"\\n\".join(output)"
    },
    {
        "number": 4540,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *coordinates = stdin.split()\n    n = int(n)\n    coordinates = [int(x) for x in coordinates]\n    \n    result = []\n    for i in range(1, n+1):\n        total_cost = 0\n        visited_spots = [x for j, x in enumerate(coordinates) if j != i-1]\n        for j in range(len(visited_spots)):\n            if j == len(visited_spots) - 1:\n                total_cost += abs(visited_spots[j] - 0)\n            else:\n                total_cost += abs(visited_spots[j] - visited_spots[j+1])\n        result.append(total_cost)\n    \n    return \"\\n\".join(str(x) for x in result)"
    },
    {
        "number": 4540,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, spots = stdin.strip().split('\\n')\n    N = int(N)\n    spots = list(map(int, spots.split()))\n\n    total_cost = 0\n    for i in range(N):\n        total_cost += abs(0 - spots[i])\n\n        for j in range(N):\n            if i != j:\n                total_cost += abs(spots[j] - spots[i])\n\n    for i in range(N):\n        print(total_cost)\n"
    },
    {
        "number": 4540,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, *coordinates = stdin.split()\n    N = int(N)\n    coordinates = [int(x) for x in coordinates]\n\n    def total_cost(i: int) -> int:\n        A = [0] + coordinates\n        A[i] = 0\n        return sum(abs(A[i] - A[i+1]) for i in range(N+1))\n\n    return '\\n'.join(str(total_cost(i)) for i in range(N))"
    },
    {
        "number": 4540,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, *coordinates = stdin.split()\n    N = int(N)\n    A = [int(x) for x in coordinates]\n    total_cost = 0\n    \n    for i in range(1, N):\n        for j in range(i):\n            total_cost += abs(A[i] - A[j])\n        \n        for j in range(i+1, N):\n            total_cost += abs(A[j] - A[i])\n        \n    return str(total_cost)\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4540,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, spots = stdin.split(\"\\n\")\n    N = int(N)\n    spots = [int(spot) for spot in spots.split()]\n    spots.sort()\n\n    def min_cost(i: int) -> int:\n        if i == 0:\n            return 0\n        if i == N:\n            return 0\n        return abs(spots[i] - spots[i - 1]) + min_cost(i - 1)\n\n    result = []\n    for i in range(N):\n        result.append(min_cost(i))\n\n    return \"\\n\".join(str(cost) for cost in result)\n"
    },
    {
        "number": 4540,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, *coordinates = map(int, stdin.split())\n    \n    # Calculate the total cost of travel for each spot\n    total_cost = [0] * N\n    for i in range(1, N):\n        total_cost[i] = total_cost[i-1] + abs(coordinates[i] - coordinates[i-1])\n    for i in range(N-2, 0, -1):\n        total_cost[i] = total_cost[i+1] + abs(coordinates[i] - coordinates[i+1])\n    total_cost[0] = total_cost[-1] + abs(coordinates[0] - coordinates[-1])\n    \n    # Print the total cost of travel for each spot\n    for i in range(N):\n        print(total_cost[i])"
    },
    {
        "number": 4540,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, *coordinates = map(int, stdin.split())\n\n    def travel_cost(a, b):\n        return abs(a - b)\n\n    def total_cost(cities):\n        cost = 0\n        current_position = 0\n        for city in cities:\n            cost += travel_cost(current_position, city)\n            current_position = city\n        return cost\n\n    return \"\\n\".join(str(total_cost([0] + coordinates)) for i in range(1, N + 1))\n\ninput_str = \"3 3 5 -1\"\nprint(solution(input_str))"
    },
    {
        "number": 4541,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    if stdin.lower() in vowels:\n        return 'vowel'\n    else:\n        return 'consonant'"
    },
    {
        "number": 4541,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    vowels = \"aeiou\"\n    if stdin.lower() in vowels:\n        return \"vowel\"\n    else:\n        return \"consonant\"\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4541,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    c = stdin[0]  # Get the first character from the input\n    vowels = ['a', 'e', 'i', 'o', 'u']  # Define a list of vowels\n\n    if c in vowels:  # Check if the character is in the list of vowels\n        return 'vowel'  # Return vowel if the character is a vowel\n    else:\n        return 'consonant'  # Return consonant if the character is not a vowel"
    },
    {
        "number": 4541,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    if stdin.lower() in vowels:\n        return \"vowel\"\n    else:\n        return \"consonant\""
    },
    {
        "number": 4541,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    if stdin.lower() in vowels:\n        return \"vowel\"\n    else:\n        return \"consonant\""
    },
    {
        "number": 4541,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    c = stdin[0]\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    if c in vowels:\n        return 'vowel'\n    else:\n        return 'consonant'"
    },
    {
        "number": 4541,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    if stdin.lower() in vowels:\n        return 'vowel'\n    else:\n        return 'consonant'"
    },
    {
        "number": 4541,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    if stdin in vowels:\n        return 'vowel'\n    else:\n        return 'consonant'"
    },
    {
        "number": 4541,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    if stdin in vowels:\n        return 'vowel'\n    else:\n        return 'consonant'"
    },
    {
        "number": 4541,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    if stdin.lower() in vowels:\n        return \"vowel\"\n    else:\n        return \"consonant\""
    },
    {
        "number": 4542,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    board = list(stdin)\n    black_count = 0\n    white_count = 0\n    for stone in board:\n        if stone == \"B\":\n            black_count += 1\n        else:\n            white_count += 1\n    \n    return min(black_count, white_count)"
    },
    {
        "number": 4542,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    board = list(stdin)\n    black_count = board.count('B')\n    white_count = board.count('W')\n\n    if black_count > white_count:\n        return str(black_count - white_count)\n    else:\n        return str(white_count - black_count)\n\ndef"
    },
    {
        "number": 4542,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    board = [char for char in stdin]\n    black_count = 0\n    white_count = 0\n\n    for stone in board:\n        if stone == 'B':\n            black_count += 1\n        elif stone == 'W':\n            white_count += 1\n\n    return min(black_count, white_count)"
    },
    {
        "number": 4542,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stones = stdin.strip()\n    black_stones = stones.count('B')\n    white_stones = stones.count('W')\n\n    if black_stones == white_stones or abs(black_stones - white_stones) <= 1:\n        return \"0\"\n    else:\n        return \"1\""
    },
    {
        "number": 4542,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    black_count = s.count('B')\n    white_count = s.count('W')\n\n    if black_count == 0 or white_count == 0:\n        return str(min(black_count, white_count))\n    elif black_count > white_count:\n        return str(white_count)\n    else:\n        return str(black_count)\n\ndef"
    },
    {
        "number": 4542,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stones = stdin\n    if stones[0] == \"W\" and stones[-1] == \"W\":\n        return 0\n    elif stones[0] == \"W\":\n        return stones.count(\"B\")\n    else:\n        return stones.count(\"W\")"
    },
    {
        "number": 4542,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stones = list(stdin)\n    black_count = stones.count(\"B\")\n    white_count = len(stones) - black_count\n\n    if black_count > white_count:\n        return str(white_count)\n    else:\n        return str(black_count)\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4542,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    board = list(stdin)\n    num_black = board.count('B')\n    num_white = len(board) - num_black\n\n    if num_black > num_white:\n        return str(num_white)\n    else:\n        return str(num_black)"
    },
    {
        "number": 4542,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    black_count = s.count(\"B\")\n    white_count = s.count(\"W\")\n    return min(black_count, white_count)\n\ninput_str = input().strip()\nprint(solution(input_str))"
    },
    {
        "number": 4542,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stones = stdin.split()[0]\n    black_count = stones.count(\"B\")\n    white_count = stones.count(\"W\")\n\n    if black_count == white_count:\n        return 0\n    else:\n        return min(black_count, white_count)"
    },
    {
        "number": 4543,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    number = str(a) + str(b)\n    square = int(number) ** 0.5\n    \n    if square == int(square):\n        return \"Yes\"\n    else:\n        return \"No\"\n\ninput_string = input()\nprint(solution(input_string)) "
    },
    {
        "number": 4543,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    concatenated_number = int(str(a) + str(b))\n    root = int(concatenated_number ** 0.5)\n    \n    if root ** 2 == concatenated_number:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4543,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    concatenated_number = int(str(a) + str(b))\n    return \"Yes\" if int(concatenated_number ** 0.5) ** 2 == concatenated_number else \"No\""
    },
    {
        "number": 4543,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    concat = int(str(a) + str(b))\n    root = int(concat**0.5)\n    return \"Yes\" if root**2 == concat else \"No\"\n\ndef"
    },
    {
        "number": 4543,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    num = int(str(a) + str(b))\n    root = int(num ** 0.5)\n    return \"Yes\" if root ** 2 == num else \"No\""
    },
    {
        "number": 4543,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    num = int(str(a) + str(b))\n    root = int(num ** 0.5)\n    return \"Yes\" if root * root == num else \"No\""
    },
    {
        "number": 4543,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    num = int(str(a) + str(b))\n    root = int(num ** 0.5)\n    return \"Yes\" if root * root == num else \"No\""
    },
    {
        "number": 4543,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    concatenated_number = int(str(a) + str(b))\n    root = int(concatenated_number ** 0.5)\n    return \"Yes\" if root * root == concatenated_number else \"No\""
    },
    {
        "number": 4543,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    concatenated = int(str(a) + str(b))\n    square_root = int(concatenated ** 0.5)\n    return \"Yes\" if square_root ** 2 == concatenated else \"No\"\n\ndef"
    },
    {
        "number": 4543,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    concat = int(str(a) + str(b))\n    square_root = int(concat ** 0.5)\n    \n    if square_root ** 2 == concat:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4544,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, sequence = stdin.split('\\n')\n    N = int(N)\n    a = list(map(int, sequence.split()))\n\n    max_count = 0\n    for x in range(1, max(a) + 1):\n        count = 0\n        for i in range(N):\n            if a[i] == x:\n                count += 1\n        max_count = max(max_count, count)\n\n    return str(max_count)"
    },
    {
        "number": 4544,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, sequence = stdin.split(\"\\n\")\n    N = int(N)\n    sequence = list(map(int, sequence.split()))\n    \n    # initialize variables\n    max_count = 0\n    x = None\n    \n    # loop through all possible X values\n    for X in range(max(sequence) + 1):\n        # initialize count and current index\n        count = 0\n        i = 0\n        \n        # loop through all a_i values\n        while i < N:\n            # check if current a_i is equal to X\n            if sequence[i] == X:\n                count += 1\n                i += 1\n            else:\n                # check if next a_i is equal to X\n                if i + 1 < N and sequence[i + 1] == X:\n                    count += 1\n                    i += 2\n                else:\n                    # otherwise, update a_i and continue to next a_i\n                    sequence[i] += 1\n                    i += 1\n        \n        # update max_count and x if current count is greater\n        if count > max_count:\n            max_count = count\n            x = X\n    \n    # return the maximum count\n    return str(max_count)"
    },
    {
        "number": 4544,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    sequence = [int(x) for x in lines[1].split()]\n    X = int(input())\n\n    # Create a dictionary to store the count of each element\n    count_dict = {}\n    for num in sequence:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Count the number of elements equal to X\n    count = count_dict[X] if X in count_dict else 0\n\n    return str(count)"
    },
    {
        "number": 4544,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, *seq = map(int, stdin.split())\n    seq.sort()\n    result = 0\n    for i in range(1, len(seq) + 1):\n        if i == len(seq) or seq[i] != seq[i - 1]:\n            result = max(result, i)\n    return str(result)"
    },
    {
        "number": 4544,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    sequence = [int(x) for x in lines[1].split()]\n    X = max(sequence)  # Choose X to be the maximum value in the sequence\n\n    # Count the number of occurrences of X in the sequence\n    count = 0\n    for i in range(N):\n        if sequence[i] == X:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4544,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, sequence = stdin.split('\\n')\n    N = int(N)\n    a = list(map(int, sequence.split()))\n\n    # Calculate the frequency of each number in the sequence\n    freq = {}\n    for num in a:\n        freq[num] = freq.get(num, 0) + 1\n\n    # Sort the frequency dictionary by the values in descending order\n    freq = dict(sorted(freq.items(), key=lambda item: item[1], reverse=True))\n\n    # Select the most common number as X\n    X = list(freq.keys())[0]\n\n    # Count the number of i such that a_i=X\n    count = 0\n    for i in range(N):\n        if a[i] == X:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4544,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, seq = stdin.split()\n    N = int(N)\n    seq = list(map(int, seq.split()))\n    X = max(seq)\n    count = 0\n\n    for i in range(N):\n        if seq[i] == X:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4544,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, sequence = stdin.split()\n    N = int(N)\n    sequence = list(map(int, sequence.split()))\n    \n    max_count = 0\n    X = None\n    \n    for x in range(max(sequence) + 1):\n        count = 0\n        for i in range(N):\n            if sequence[i] == x:\n                count += 1\n        if count > max_count:\n            max_count = count\n            X = x\n    \n    return str(max_count)"
    },
    {
        "number": 4544,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    N = int(input_list[0])\n    sequence = list(map(int, input_list[1:]))\n\n    max_count = 0\n    for num in set(sequence):\n        count = sequence.count(num)\n        if count > max_count:\n            max_count = count\n\n    return str(max_count)"
    },
    {
        "number": 4544,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    sys.setrecursionlimit(10**6)\n\n    def max_count(sequence: List[int], n: int, target: int, memo: Dict[Tuple[int, int, int], int]) -> int:\n        if n == 0 or target == 0:\n            return 0\n\n        if (n, target, sequence[n - 1]) in memo:\n            return memo[(n, target, sequence[n - 1])]\n\n        memo[(n, target, sequence[n - 1])] = max(\n            max_count(sequence, n - 1, target - 1, memo) + (target - 1 == sequence[n - 1]),\n            max_count(sequence, n - 1, target, memo) + (target == sequence[n - 1]),\n            max_count(sequence, n - 1, target + 1, memo) + (target + 1 == sequence[n - 1]),\n        )\n\n        return memo[(n, target, sequence[n - 1])]\n\n    n, *sequence = list(map(int, stdin.split()))\n    target = max(sequence)\n\n    memo = {}\n    result = max_count(sequence, n, target, memo)\n\n    return str(result)"
    },
    {
        "number": 4545,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A = list(map(int, stdin.split()))\n    return str(N*N - A)"
    },
    {
        "number": 4545,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    total_squares = N * N\n    black_squares = total_squares - A\n    return str(black_squares)"
    },
    {
        "number": 4545,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, A = stdin.split()\n    N, A = int(N), int(A)\n    return str(N*N - A)\n\ninput_str = input()\nN, A = input_str.split()\nN, A = int(N), int(A)\nprint(solution(input_str)) "
    },
    {
        "number": 4545,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    total_squares = N * N\n    black_squares = total_squares - A\n    return str(black_squares)"
    },
    {
        "number": 4545,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    total_squares = N * N\n    white_squares = A\n    black_squares = total_squares - white_squares\n    return str(black_squares)"
    },
    {
        "number": 4545,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    return str(N*N - A)"
    },
    {
        "number": 4545,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    return str(N * N - A)"
    },
    {
        "number": 4545,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    return str(n * n - a)"
    },
    {
        "number": 4545,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, A = list(map(int, stdin.split()))\n    total_squares = N * N\n    black_squares = total_squares - A\n    return str(black_squares)"
    },
    {
        "number": 4545,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    if N * N == A:\n        return \"0\"\n    elif N * N < A:\n        return \"-1\"\n    else:\n        return str(N * N - A)"
    },
    {
        "number": 4546,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = list(map(int, stdin.split()))\n    return \"YES\" if b - a == c - b else \"NO\""
    },
    {
        "number": 4546,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = list(map(int, stdin.split()))\n    return \"YES\" if b - a == c - b else \"NO\""
    },
    {
        "number": 4546,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if b - a == c - b:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4546,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return \"YES\" if b - a == c - b else \"NO\"\n\ninput_str = input()\nresult = solution(input_str)\nprint(result) "
    },
    {
        "number": 4546,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if b - a == c - b:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4546,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return \"YES\" if b - a == c - b else \"NO\""
    },
    {
        "number": 4546,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if abs(b-a) == abs(c-b):\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4546,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    \n    if abs(b-a) == abs(c-b):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4546,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if b - a == c - b:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4546,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if b - a == c - b:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4547,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n // 10 == 9 or n % 10 == 9:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4547,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if \"9\" in str(n):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4547,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if str(n) in str(n) + str(n):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4547,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    decimal_notation = str(n)\n    if '9' in decimal_notation:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4547,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if str(n).find(\"9\") != -1:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4547,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    decimal_notation = str(n)\n    if '9' in decimal_notation:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4547,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if str(n) in \"9\":\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4547,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if str(N)[1] == '9':\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 4547,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if '9' in str(N):\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4547,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N // 10 == 9 or N % 10 == 9:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4548,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X = map(int, stdin.splitlines()[0].split())\n    toll_gates = list(map(int, stdin.splitlines()[1].split()))\n\n    # Find the index of the first toll gate that appears after square X\n    next_toll = N + 1\n    for i in range(M):\n        if toll_gates[i] > X:\n            next_toll = min(next_toll, toll_gates[i])\n\n    # Calculate the minimum cost to reach the goal\n    total_cost = 0\n    if next_toll == N + 1:\n        # No toll gates after square X, so just move to the goal\n        total_cost += X\n    else:\n        # Move to the next toll gate\n        total_cost += next_toll - X - 1\n        # Move to the goal\n        total_cost += N - next_toll + 1\n\n    return str(total_cost)\n"
    },
    {
        "number": 4548,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    N, M, X = map(int, re.findall(r'\\d+', stdin.split('\\n')[0]))\n    gates = list(map(int, re.findall(r'\\d+', stdin.split('\\n')[1])))\n    cost = 0\n\n    for i in range(len(gates)):\n        if X < gates[i]:\n            cost += 1\n            X = gates[i] - 1\n        else:\n            cost += 0\n            X = gates[i]\n\n    if X < N:\n        cost += 1\n\n    return str(cost)"
    },
    {
        "number": 4548,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X = map(int, stdin.split()[:3])\n    A = list(map(int, stdin.split()[3:]))\n    toll_cost = 1\n    min_cost = 0\n\n    for i in range(M):\n        if A[i] - 1 == X:\n            min_cost += toll_cost\n            X = A[i]\n        elif A[i] < X:\n            min_cost += toll_cost\n            X -= 1\n        else:\n            min_cost += toll_cost\n            X += 1\n\n    return str(min_cost)"
    },
    {
        "number": 4548,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, M, X = map(int, stdin.split()[:3])\n    A = list(map(int, stdin.split()[3:]))\n    \n    # initialize variables\n    total_cost = 0\n    current_square = X\n    toll_gates = set(A)\n    \n    # iterate through squares\n    while current_square > 0:\n        # check if current square is a toll gate\n        if current_square in toll_gates:\n            total_cost += 1\n        \n        # move to adjacent square\n        current_square -= 1\n    \n    return str(total_cost)"
    },
    {
        "number": 4548,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X = map(int, stdin.split()[:3])\n    toll_gates = list(map(int, stdin.split()[3:]))\n    min_cost = 0\n    \n    # Calculate the minimum cost to reach the goal\n    for i in range(M):\n        if toll_gates[i] < X:\n            min_cost += 1\n        elif toll_gates[i] > X:\n            min_cost += toll_gates[i] - X - 1\n        else:\n            continue\n            \n    return str(min_cost)"
    },
    {
        "number": 4548,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X = map(int, input().split())\n    toll_gates = list(map(int, input().split()))\n\n    # Define the maximum cost\n    max_cost = 101\n\n    # Initialize the cost of traveling to each toll gate\n    toll_costs = [max_cost] * M\n\n    # Calculate the cost of traveling to each toll gate\n    for i in range(M):\n        if toll_gates[i] - X <= X:\n            toll_costs[i] = toll_gates[i] - X\n\n    # Calculate the minimum cost of traveling to the goal\n    min_cost = min(toll_costs)\n\n    return str(min_cost)"
    },
    {
        "number": 4548,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M, X = [int(x) for x in stdin.split()]\n    gates = [int(x) for x in stdin.split('\\n')[1].split()]\n\n    # Initialize costs\n    costs = [0] * (N + 1)\n\n    # Calculate costs\n    for i in range(1, N + 1):\n        if i not in gates:\n            if i - 1 in costs:\n                costs[i] = costs[i - 1] + 1\n            else:\n                costs[i] = 1\n\n    # Return the minimum cost\n    return str(min(costs[:X] + costs[X + 1:]))"
    },
    {
        "number": 4548,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X = map(int, stdin.split()[0:3])\n    toll_gates = list(map(int, stdin.split()[3:]))\n    toll_gates.sort()\n    \n    if toll_gates[0] != 1:\n        return \"0\"\n    \n    min_cost = 0\n    for i in range(M):\n        if X >= toll_gates[i]:\n            min_cost += 1\n        else:\n            min_cost += toll_gates[i] - X - 1\n            break\n    \n    if X < N:\n        min_cost += N - X - 1\n    \n    return str(min_cost)"
    },
    {
        "number": 4548,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x = map(int, stdin.split()[:3])\n    toll_gates = list(map(int, stdin.split()[3:]))\n\n    min_cost = 0\n    current_square = x\n\n    for i in range(m):\n        next_toll_gate = toll_gates[i]\n\n        if next_toll_gate > current_square:\n            min_cost += next_toll_gate - current_square - 1\n            current_square = next_toll_gate\n        else:\n            min_cost += current_square - next_toll_gate - 1\n            current_square = next_toll_gate\n\n    if current_square != 0:\n        min_cost += current_square - 1\n    else:\n        min_cost += 1\n\n    return str(min_cost)"
    },
    {
        "number": 4548,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X = list(map(int, stdin.split()[0:3]))\n    toll_gates = list(map(int, stdin.split()[3:]))\n    \n    cost = 0\n    for i in range(M):\n        if X == toll_gates[i]:\n            cost += 1\n            break\n        elif X > toll_gates[i]:\n            cost += X - toll_gates[i]\n            X = toll_gates[i]\n        else:\n            cost += toll_gates[i] - X\n            X = toll_gates[i]\n            \n    return str(cost)"
    },
    {
        "number": 4549,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    H, W = map(int, lines[0].split())\n    grid = [list(line) for line in lines[1:]]\n    square1001 = Square(H, W, grid)\n    return \"Yes\" if square1001.can_paint() else \"No\"\n\nclass Square:\n    def __init__(self, H, W, grid):\n        self.H = H\n        self.W = W\n        self.grid = grid\n\n    def can_paint(self):\n        def dfs(i, j, color):\n            if not (0 <= i < self.H and 0 <= j < self.W):\n                return True\n            if self.grid[i][j] == color:\n                return True\n            self.grid[i][j] = color\n            return all(dfs(x, y, color) for x, y in self._adjacent_squares(i, j))\n\n        return dfs(0, 0, '#') and dfs(self.H - 1, self.W - 1, '..')\n\n    def _adjacent_squares(self, i, j):\n        return [(x, y) for x in (i - 1, i, i + 1) for y in (j - 1, j, j + 1) if (x, y) != (i, j)]"
    },
    {
        "number": 4549,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    H, W = map(int, stdin.split('\\n')[0].split())\n    grid = [list(row) for row in stdin.split('\\n')[1:-1]]\n    \n    # Helper function to check if a square is black\n    def is_black(i: int, j: int) -> bool:\n        return grid[i][j] == '#'\n    \n    # Helper function to paint a square\n    def paint(i: int, j: int, black: bool) -> None:\n        if black:\n            grid[i][j] = '#'\n        else:\n            grid[i][j] = '.'\n    \n    # DFS to check if square1001 can achieve his objective\n    def dfs(i: int, j: int) -> bool:\n        if not (0 <= i < H and 0 <= j < W):\n            return False\n        if is_black(i, j):\n            return True\n        \n        # Try to paint adjacent squares\n        for di, dj in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            new_i, new_j = i + di, j + dj\n            if dfs(new_i, new_j):\n                # Paint the square and return True\n                paint(i, j, True)\n                return True\n        \n        # If no adjacent square can be painted, return False\n        return False\n    \n    # Check if square1001 can achieve his objective\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == '#':\n                # Already black, skip\n                continue\n            if dfs(i, j):\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4549,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Split input into lines\n    lines = stdin.splitlines()\n    # Extract dimensions\n    H, W = map(int, lines[0].split())\n    # Initialize grid\n    grid = [list(line) for line in lines[1:]]\n    \n    # Function to check if a square can be painted\n    def can_paint(i, j):\n        if grid[i][j] == '#':\n            return True\n        elif grid[i][j] == '..':\n            return False\n        else:\n            # Mark this square as painted\n            grid[i][j] = '#'\n            # Check if the adjacent squares can be painted\n            can_paint_horiz = False\n            can_paint_vert = False\n            if i > 0 and grid[i - 1][j] == '..':\n                can_paint_vert = can_paint(i - 1, j)\n            if j > 0 and grid[i][j - 1] == '..':\n                can_paint_horiz = can_paint(i, j - 1)\n            return can_paint_horiz or can_paint_vert\n    \n    # Check if square1001 can achieve his objective\n    can_paint_obj = False\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == '..' and can_paint(i, j):\n                can_paint_obj = True\n                break\n        if can_paint_obj:\n            break\n    \n    return 'Yes' if can_paint_obj else 'No'"
    },
    {
        "number": 4549,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split()[:2])\n    grid = [list(line) for line in stdin.split()[2:]]\n\n    def bfs(start: tuple) -> bool:\n        visited = set()\n        queue = [start]\n        while queue:\n            i, j = queue.pop(0)\n            if (i, j) in visited or grid[i][j] == '..':\n                continue\n            visited.add((i, j))\n            if grid[i][j] == '#':\n                return True\n            for di, dj in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                new_i, new_j = i + di, j + dj\n                if 0 <= new_i < H and 0 <= new_j < W:\n                    queue.append((new_i, new_j))\n        return False\n\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == '#':\n                if bfs((i, j)):\n                    return \"Yes\"\n    return \"No\"\n\ninput_str = \"\"\"3 3\n.#.\n###\n.#.\"\"\"\nprint(solution(input_str)) "
    },
    {
        "number": 4549,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = [int(x) for x in stdin.split()]\n    grid = [list(row) for row in stdin.split()[2:]]\n\n    def can_paint_square(i: int, j: int, target: str) -> bool:\n        if grid[i][j] != target:\n            return False\n        for x, y in [(i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)]:\n            if 0 <= x < rows and 0 <= y < cols and grid[x][y] == target:\n                return True\n        return False\n\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == '#':\n                if can_paint_square(i, j, '.'):\n                    return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4549,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def can_paint_square(i, j, H, W):\n        if i < 0 or i >= H or j < 0 or j >= W:\n            return False\n        return True\n\n    def paint_square(board, i, j, H, W):\n        if board[i][j] == \"#\":\n            return\n        board[i][j] = \"#\"\n        if can_paint_square(i + 1, j, H, W):\n            paint_square(board, i + 1, j, H, W)\n        if can_paint_square(i - 1, j, H, W):\n            paint_square(board, i - 1, j, H, W)\n        if can_paint_square(i, j + 1, H, W):\n            paint_square(board, i, j + 1, H, W)\n        if can_paint_square(i, j - 1, H, W):\n            paint_square(board, i, j - 1, H, W)\n\n    stdin = stdin.strip().split(\"\\n\")\n    H, W = map(int, stdin.pop(0).split())\n    board = [list(row) for row in stdin]\n    target = (H // 2, W // 2)\n\n    paint_square(board, target[0], target[1], H, W)\n\n    if board[target[0]][target[1]] == \"#\":\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4549,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split()[0:2])\n    canvas = [list(line.strip()) for line in stdin.split()[2:]]\n    visited = set()\n    \n    def dfs(i, j, count):\n        if (i, j) in visited:\n            return False\n        visited.add((i, j))\n        if canvas[i][j] == '#':\n            return count == 0\n        elif canvas[i][j] == '..':\n            return count <= 0\n        \n        if i > 0 and dfs(i-1, j, count-1):\n            return True\n        if i < H-1 and dfs(i+1, j, count-1):\n            return True\n        if j > 0 and dfs(i, j-1, count-1):\n            return True\n        if j < W-1 and dfs(i, j+1, count-1):\n            return True\n        return False\n    \n    for i in range(H):\n        for j in range(W):\n            if canvas[i][j] == '#' and dfs(i, j, 0):\n                return 'Yes'\n    \n    return 'No'"
    },
    {
        "number": 4549,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split()[0:2])\n    grid = [list(line) for line in stdin.split('\\n')[1:H+1]]\n    \n    def paint(i: int, j: int) -> bool:\n        if i < 0 or i >= H or j < 0 or j >= W:\n            return False\n        if grid[i][j] != '.':\n            return False\n        grid[i][j] = '#'\n        for di, dj in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            paint(i+di, j+dj)\n        return True\n    \n    can_paint = False\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == '#':\n                can_paint = True\n                break\n        if can_paint:\n            break\n    \n    if not can_paint:\n        return \"No\"\n    \n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == '.' and not paint(i, j):\n                return \"No\"\n    \n    return \"Yes\""
    },
    {
        "number": 4549,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split()[0].split())\n    s = [list(line) for line in stdin.strip().split('\\n')]\n\n    def can_paint(i, j, color):\n        if 1 <= i <= H and 1 <= j <= W:\n            if s[i][j] == color:\n                return True\n            elif s[i][j] == '#':\n                return False\n            else:\n                s[i][j] = color\n                if i > 1 and can_paint(i - 1, j, color):\n                    return True\n                elif i < H and can_paint(i + 1, j, color):\n                    return True\n                elif j > 1 and can_paint(i, j - 1, color):\n                    return True\n                elif j < W and can_paint(i, j + 1, color):\n                    return True\n                else:\n                    return False\n        return True\n\n    return \"Yes\" if can_paint(1, 1, '#') else \"No\"\n\nstdin = \"\"\"\n3 3\n.#.\n###\n.#.\n\"\"\"\nprint(solution(stdin)) "
    },
    {
        "number": 4549,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def can_paint(i, j, H, W, s):\n        for x in range(i - 1, i + 2):\n            for y in range(j - 1, j + 2):\n                if 0 <= x < H and 0 <= y < W and (x, y) != (i, j) and s[x][y] == '#':\n                    return True\n        return False\n\n    H, W = map(int, stdin.split()[0].split())\n    s = [list(stdin.split()[i + 1]) for i in range(H)]\n\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '#':\n                if not can_paint(i, j, H, W, s):\n                    return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4550,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    \n    if a == b == c:\n        return \"Yes\"\n    elif a == b or b == c or a == c:\n        return \"No\"\n    else:\n        return \"Yes\"\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4550,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a + b + c % 2 != 0:\n        return \"No\"\n    else:\n        return \"Yes\""
    },
    {
        "number": 4550,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    total = a + b + c\n    if total % 2 == 1:\n        return \"No\"\n    else:\n        return \"Yes\""
    },
    {
        "number": 4550,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if (a + b + c) % 2 != 0:\n        return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4550,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a == b == c:\n        return \"Yes\"\n    if a == b + c or b == a + c or c == a + b:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4550,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    total = a + b + c\n    avg = total // 2\n    if (a + b + c) % 2 != 0:\n        return \"No\"\n    elif a == b == c:\n        return \"Yes\"\n    elif a == b or a == c or b == c:\n        return \"Yes\"\n    elif avg == a or avg == b or avg == c:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4550,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n\n    if a + b + c % 2 != 0:\n        return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4550,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a == b == c:\n        return \"Yes\"\n    if (a + b) / 2 == (a + c) / 2:\n        return \"Yes\"\n    if (b + c) / 2 == (b + a) / 2:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4550,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a == b == c:\n        return \"Yes\"\n    if a == b or b == c or c == a:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4550,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = list(map(int, stdin.split()))\n    \n    if a == b == c:\n        return \"Yes\"\n    elif a + b == b + c or a + c == b + c:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4551,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    left_sum = A + B\n    right_sum = C + D\n    if left_sum > right_sum:\n        return \"Left\"\n    elif left_sum == right_sum:\n        return \"Balanced\"\n    else:\n        return \"Right\""
    },
    {
        "number": 4551,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    L = A + B\n    R = C + D\n    if L > R:\n        return \"Left\"\n    elif L == R:\n        return \"Balanced\"\n    else:\n        return \"Right\""
    },
    {
        "number": 4551,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    left = A + B\n    right = C + D\n    if left > right:\n        return \"Left\"\n    elif left < right:\n        return \"Right\"\n    else:\n        return \"Balanced\""
    },
    {
        "number": 4551,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    if A + B > C + D:\n        return \"Left\"\n    elif A + B == C + D:\n        return \"Balanced\"\n    else:\n        return \"Right\""
    },
    {
        "number": 4551,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    L = A + B\n    R = C + D\n    \n    if L > R:\n        return \"Left\"\n    elif L < R:\n        return \"Right\"\n    else:\n        return \"Balanced\""
    },
    {
        "number": 4551,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = list(map(int, stdin.split()))\n    left_weight = A + B\n    right_weight = C + D\n    if left_weight > right_weight:\n        return \"Left\"\n    elif left_weight < right_weight:\n        return \"Right\"\n    else:\n        return \"Balanced\""
    },
    {
        "number": 4551,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    L = A + B\n    R = C + D\n    if L > R:\n        return \"Left\"\n    elif L < R:\n        return \"Right\"\n    else:\n        return \"Balanced\""
    },
    {
        "number": 4551,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    left_total = A + B\n    right_total = C + D\n\n    if left_total > right_total:\n        return \"Left\"\n    elif left_total == right_total:\n        return \"Balanced\"\n    else:\n        return \"Right\""
    },
    {
        "number": 4551,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    left_total = a + b\n    right_total = c + d\n    if left_total > right_total:\n        return \"Left\"\n    elif left_total < right_total:\n        return \"Right\"\n    else:\n        return \"Balanced\"\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4551,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    left_weight = A + B\n    right_weight = C + D\n    if left_weight > right_weight:\n        return \"Left\"\n    elif left_weight < right_weight:\n        return \"Right\"\n    else:\n        return \"Balanced\""
    },
    {
        "number": 4552,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N = int(lines[0])\n    F = []\n    P = []\n    for i in range(1, N + 1):\n        F.append([int(x) for x in lines[i].split()])\n        P.append([int(x) for x in lines[N + i].split()])\n\n    def count_open_periods(i: int) -> int:\n        return sum(F[i])\n\n    def calculate_profit(c_1: int, c_2: int) -> int:\n        profit = 0\n        for i in range(N):\n            if c_1 > 0:\n                profit += P[i][c_1 - 1]\n            if c_2 > 0:\n                profit += P[i][c_2 - 1]\n        return profit\n\n    max_profit = 0\n    for c_1 in range(1, 11):\n        for c_2 in range(1, 11):\n            if c_1 + c_2 >= 10:\n                profit = calculate_profit(c_1, c_2)\n                max_profit = max(max_profit, profit)\n\n    return str(max_profit)\n\ninput_data = \"\"\"\n1\n1 1 0 1 0 0 0 1 0 1\n3 4 5 6 7 8 9 -2 -3 4 -2\n\"\"\"\nprint(solution(input_data)) "
    },
    {
        "number": 4552,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def calculate_profit(shop_hours, shop_prices):\n        profit = 0\n        for day in range(1, 6):\n            for period in range(1, 3):\n                open_shops = []\n                for shop in range(1, N + 1):\n                    if shop_hours[shop - 1][day - 1][period - 1] == 1:\n                        open_shops.append(shop)\n                if len(open_shops) > 1:\n                    for i in open_shops:\n                        for j in open_shops:\n                            if i != j:\n                                profit += shop_prices[i - 1][period * 2 + (day - 1) * 10]\n        return profit\n\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    shop_hours = [[] for _ in range(N)]\n    shop_prices = [[] for _ in range(N)]\n\n    for i in range(N):\n        for j in range(5):\n            shop_hours[i].append([int(x) for x in lines[i * 6 + j + 1].split(\" \")])\n        shop_prices[i] = [int(x) for x in lines[(N + i) * 6 + j + 1].split(\" \")]\n\n    profit = calculate_profit(shop_hours, shop_prices)\n    return str(profit)"
    },
    {
        "number": 4552,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    F = [[] for _ in range(N+1)]\n    P = [[] for _ in range(N+1)]\n    \n    for i in range(1, N+1):\n        F[i] = list(map(int, lines[i].split()))\n        P[i] = list(map(int, lines[N+i].split()))\n    \n    # Calculate the maximum profit\n    max_profit = 0\n    for i in range(1, N+1):\n        periods_open = []\n        for j in range(5):\n            for k in range(2):\n                if F[i][j*2+k] == 1:\n                    periods_open.append(j*2+k+1)\n        if periods_open:\n            profit = 0\n            for period in periods_open:\n                profit += P[i][period-1]\n            max_profit = max(max_profit, profit)\n    \n    return str(max_profit)"
    },
    {
        "number": 4552,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, F, P = parse_input(stdin)\n    c = []\n    for i in range(N + 1):\n        c.append([0] * 11)\n\n    for j in range(1, 6):\n        for k in range(1, 3):\n            if F[j][k] == 1:\n                for i in range(1, N + 1):\n                    if F[j][k] == 1:\n                        c[i][k * 5 + j] += 1\n\n    max_profit = 0\n    for i in range(1, N + 1):\n        for j in range(11):\n            max_profit += c[i][j] * P[i][j]\n\n    return max_profit\n\ndef"
    },
    {
        "number": 4552,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input data\n    lines = stdin.split('\\n')\n    num_shops, open_hours = int(lines[0]), []\n    for i in range(1, num_shops + 1):\n        open_hours.append(list(map(int, lines[i].split())))\n    profit = list(map(int, lines[num_shops + 1].split()))\n    \n    # Calculate the maximum profit\n    max_profit = 0\n    for i in range(1, num_shops + 1):\n        shop_profit = 0\n        for j in range(10):\n            if open_hours[i - 1][j] == 1:\n                shop_profit += profit[j]\n        max_profit = max(max_profit, shop_profit)\n    \n    return str(max_profit)"
    },
    {
        "number": 4552,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    shops = []\n    for line in stdin.split('\\n'):\n        shops.append(list(map(int, line.split())))\n\n    n = len(shops)\n    max_profit = -10000000\n\n    def calculate_profit(open_periods: set) -> int:\n        profit = 0\n        for i in range(n):\n            for j in range(10):\n                if j in open_periods and shops[i][j]:\n                    profit += shops[i][j]\n        return profit\n\n    for i in range(1, 11):\n        open_periods = set(range(i))\n        profit = calculate_profit(open_periods)\n        if profit > max_profit:\n            max_profit = profit\n\n    return str(max_profit)"
    },
    {
        "number": 4552,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # split the input into lines\n    lines = stdin.split(\"\\n\")\n    \n    # read the number of shops\n    N = int(lines[0])\n    \n    # read the business hours\n    business_hours = [list(map(int, lines[1+i].split())) for i in range(N)]\n    \n    # read the profit\n    profit = [list(map(int, lines[N+i+1].split())) for i in range(N)]\n    \n    # initialize the maximum profit\n    max_profit = 0\n    \n    # iterate over the possible combinations of open periods\n    for i in range(1023):\n        # extract the open periods from the binary representation of the number\n        open_periods = [(i >> j) & 1 for j in range(10)]\n        \n        # calculate the profit for this combination\n        current_profit = sum([profit[j][k] for j in range(N) for k in range(10) if business_hours[j][k//2] == 1 and open_periods[k] == 1])\n        \n        # update the maximum profit\n        max_profit = max(max_profit, current_profit)\n    \n    # return the maximum profit\n    return str(max_profit)"
    },
    {
        "number": 4552,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    F = []\n    P = []\n    \n    for i in range(1, N+1):\n        F.append([int(x) for x in lines[i].split()])\n        P.append([int(x) for x in lines[i+N].split()])\n    \n    P = [P[i:i+10] for i in range(0, len(P), 10)]\n    \n    max_profit = 0\n    \n    for i in range(10):\n        for j in range(10):\n            open_periods = 0\n            for k in range(N):\n                if F[k][j] == 1 and P[k][i] >= 0:\n                    open_periods += 1\n            if open_periods > 0:\n                profit = sum([P[k][i] for k in range(N) if F[k][j] == 1 and P[k][i] >= 0])\n                max_profit = max(max_profit, profit)\n    \n    return str(max_profit)\n\ninput_data = \"\"\"1\n1 1 0 1 0 0 0 1 0 1\n3 4 5 6 7 8 9 -2 -3 4 -2\n1 2 3 4 5 6 7 8 9 1 2\n-1 -2 -3 -4 -5 -6 -7 -8 -9 1 2\n\"\"\"\nprint(solution(input_data)) # Output: 12 "
    },
    {
        "number": 4552,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    F = []\n    P = []\n    for i in range(1, N+1):\n        F.append(list(map(int, lines[i].split())))\n    P = list(map(int, lines[N+1].split()))\n    \n    def max_profit(F, P):\n        max_profit = 0\n        for j in range(1, 6):\n            profit = 0\n            for k in range(10):\n                if F[0][j-1][k] == 1:\n                    profit += P[j-1][k]\n            if profit > max_profit:\n                max_profit = profit\n        return max_profit\n    \n    return str(max_profit(F, P))"
    },
    {
        "number": 4552,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n\n    # Parse the input\n    lines = stdin.strip().split(\"\\n\")\n    N = int(lines[0])\n    F = []\n    P = []\n    for i in range(1, N+1):\n        F.append(list(map(int, lines[i].split())))\n    P = list(map(int, lines[N+1].split()))\n\n    # Initialize the profit matrix\n    profit_matrix = [[0] * 11 for _ in range(N+1)]\n\n    # Fill the profit matrix\n    for i in range(1, N+1):\n        for j in range(1, 6):\n            for k in range(10):\n                if F[i-1][(j-1)*2+k//5] == 1:\n                    profit_matrix[i][k] += P[k]\n\n    # Calculate the maximum profit\n    max_profit = 0\n    for i in range(1, N+1):\n        max_periods = 0\n        for j in range(10):\n            if profit_matrix[i][j] > 0:\n                max_periods = max(max_periods, j+1)\n        max_profit += profit_matrix[0][max_periods]\n\n    return str(max_profit)"
    },
    {
        "number": 4553,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, S = stdin.split()\n    if len(S) != int(A) + int(B) + 1:\n        return \"No\"\n    if S[int(A) - 1] != '-':\n        return \"No\"\n    for i in range(len(S)):\n        if i == int(A) - 1:\n            continue\n        if not S[i].isdigit() or int(S[i]) < 0 or int(S[i]) > 9:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4553,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split()[0].split())\n    postal_code = stdin.split()[1]\n\n    if len(postal_code) != A + B + 1:\n        return \"No\"\n\n    if postal_code[A] != \"-\":\n        return \"No\"\n\n    if not postal_code[:A].isdigit() or not postal_code[A+1:].isdigit():\n        return \"No\"\n\n    return \"Yes\"\n"
    },
    {
        "number": 4553,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, input().split())\n    S = input()\n\n    if len(S) != A + B + 1:\n        return \"No\"\n\n    if S[A] != \"-\":\n        return \"No\"\n\n    for i in range(A + B + 1):\n        if i != A and not S[i].isdigit():\n            return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4553,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split()[0].split())\n    s = stdin.split()[1]\n\n    if len(s) != a + b + 1:\n        return \"No\"\n\n    if not s[a].isdigit() or not s[a + 1:].isdigit():\n        return \"No\"\n\n    if not s[a] == \"-\":\n        return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4553,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split()[0].split(\" \"))\n    S = stdin.split()[1]\n    \n    if S.isdigit() and len(S) == A+B+1 and S[A] == \"-\":\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4553,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, S = stdin.split()\n    \n    if len(S) != int(A) + int(B) + 1:\n        return \"No\"\n    \n    if not S[int(A)].isdigit() or not S[int(A) + 1:].isdigit():\n        return \"No\"\n    \n    return \"Yes\""
    },
    {
        "number": 4553,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split()[0].split(' '))\n    postal_code = stdin.split()[1]\n\n    if len(postal_code) != A + B + 1:\n        return \"No\"\n\n    if postal_code[A] != \"-\":\n        return \"No\"\n\n    digits = set(postal_code)\n    if len(digits) != A + B + 1:\n        return \"No\"\n\n    for digit in digits:\n        if not (digit.isdigit() or digit == \"-\"):\n            return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4553,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, S = stdin.split()\n    if len(S) != int(A) + int(B) + 1:\n        return \"No\"\n\n    if \"-\" not in S[int(A):-1]:\n        return \"No\"\n\n    for char in S:\n        if char.isdigit():\n            continue\n        elif char == \"-\":\n            continue\n        else:\n            return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4553,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split()[0].split(' '))\n    postal_code = stdin.split()[1]\n\n    if len(postal_code) != A + B + 1:\n        return \"No\"\n\n    if postal_code[A] != '-':\n        return \"No\"\n\n    for char in postal_code:\n        if char.isdigit() and int(char) not in range(10):\n            return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4553,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, S = stdin.split()\n    A, B = int(A), int(B)\n\n    if len(S) != A + B + 1:\n        return \"No\"\n\n    if S[A] != \"-\":\n        return \"No\"\n\n    for char in S:\n        if not char.isdigit() and char != \"-\":\n            return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4554,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    W, a, b = map(int, stdin.split())\n\n    min_distance = min(abs(a - b), W - abs(a - b))\n\n    return str(min_distance)\n"
    },
    {
        "number": 4554,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    W, a, b = map(int, stdin.split())\n    # determine the distance between the two rectangles\n    distance = b - a - W\n    # return the minimum distance\n    return str(abs(distance))"
    },
    {
        "number": 4554,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    W, a, b = [int(x) for x in stdin.split()]\n    if b <= a:\n        return \"0\"\n    return str(min(abs(a), abs(b - W)))"
    },
    {
        "number": 4554,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    W, a, b = map(int, stdin.split())\n    min_distance = min(a+W-b, b+W-a)\n    return str(min_distance)"
    },
    {
        "number": 4554,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    W, a, b = map(int, stdin.split())\n    min_distance = min(a - 1, b - 1)\n    return str(min_distance)"
    },
    {
        "number": 4554,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    W, a, b = map(int, stdin.split())\n    left_border = max(a, b)\n    right_border = min(a + W, b + W)\n    \n    if right_border <= left_border:\n        return str(abs(left_border - a) + abs(right_border - b) - 2 * W)\n    else:\n        return str(abs(left_border - a))\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4554,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    W, a, b = map(int, stdin.split())\n    if b >= a + W:\n        return str(b - (a + W) + 1)\n    else:\n        return \"0\""
    },
    {
        "number": 4554,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # split the input string into W, a, and b\n    W, a, b = map(int, stdin.split())\n    \n    # calculate the distance between the two rectangles\n    distance = abs(b - a)\n    \n    # calculate the minimum distance the second rectangle needs to be moved\n    min_distance = distance - W if distance > W else distance\n    \n    return str(min_distance)"
    },
    {
        "number": 4554,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    W, a, b = map(int, stdin.split())\n    min_distance = min(a+W-b, b+W-a)\n    return str(min_distance)\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4554,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    W, a, b = map(int, stdin.split())\n    W = max(1, min(10**5, W))\n    a = max(1, min(10**5, a))\n    b = max(1, min(10**5, b))\n    min_distance = min(a - b + W, b + W - a)\n    return str(min_distance)"
    },
    {
        "number": 4555,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    return \"\\n\".join(map(str, sorted(set(range(A, B+1))[:K] + set(range(A, B+1))[-K:])[::-1]))"
    },
    {
        "number": 4555,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    if K > (B - A + 1) // 2:\n        K = (B - A + 1) - K\n\n    result = sorted(range(A, B + 1), key=lambda x: -x if x > (A + B) // 2 else x)[:K]\n    return \"\\n\".join(map(str, result))"
    },
    {
        "number": 4555,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    integers = sorted([i for i in range(A, B+1)])\n    return '\\n'.join([str(x) for x in integers[:K] + integers[-K:]])"
    },
    {
        "number": 4555,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    result = set()\n\n    for i in range(A, B + 1):\n        if i in range(A, A + K) or i in range(B - K + 1, B + 1):\n            result.add(i)\n\n    return \" \".join(map(str, sorted(result)))"
    },
    {
        "number": 4555,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    sorted_integers = sorted(range(A, B+1))\n    K_smallest = sorted_integers[:K]\n    K_largest = sorted_integers[-K:]\n    result = set(K_smallest + K_largest)\n    return \" \".join(map(str, sorted(result)))"
    },
    {
        "number": 4555,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    \n    smallest_integers = sorted(range(A, B+1), reverse=True)[:K]\n    largest_integers = sorted(range(A, B+1))[:K]\n    \n    result = set(smallest_integers) | set(largest_integers)\n    \n    return \"\\n\".join(map(str, sorted(result)))\n\ndef"
    },
    {
        "number": 4555,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n\n    numbers = list(range(A, B + 1))\n    numbers.sort()\n\n    if K <= len(numbers) // 2:\n        result = numbers[:K]\n    else:\n        result = numbers[-K:]\n\n    return \"\\n\".join(map(str, result))"
    },
    {
        "number": 4555,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    result = []\n\n    for i in range(A, B + 1):\n        if len(result) < K:\n            result.append(i)\n        else:\n            if K == 1:\n                result[K - 1] = max(result[K - 1], i)\n            else:\n                result[K - 1] = min(result[K - 1], i)\n\n    return \" \".join(map(str, result))"
    },
    {
        "number": 4555,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    numbers = sorted(range(A, B+1))\n    \n    if K <= len(numbers) // 2:\n        result = numbers[:K] + numbers[-K:]\n    else:\n        K = len(numbers) - K\n        result = numbers[:K] + numbers[-K:]\n    \n    return \" \".join(map(str, sorted(set(result))))"
    },
    {
        "number": 4555,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n\n    result = set()\n\n    # Check for smallest integers\n    for i in range(A, A + K):\n        result.add(i)\n\n    # Check for largest integers\n    for i in range(B - K + 1, B + 1):\n        result.add(i)\n\n    return \"\\n\".join(map(str, sorted(result)))"
    },
    {
        "number": 4556,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    if len(words) > 2:\n        name = words[2]\n    else:\n        name = words[1]\n    return name[0].upper() + 'C'"
    },
    {
        "number": 4556,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    name = stdin.split()[0]\n    abbreviation = name[0].upper()\n    return abbreviation\n\ndef"
    },
    {
        "number": 4556,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    name, _, _ = stdin.partition(' ')\n    return ''.join(char for char in name if char.isupper())\n\ndef"
    },
    {
        "number": 4556,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    name = stdin.split()\n    return name[0][0].upper() + \"xC\""
    },
    {
        "number": 4556,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()[0]\n    return s[0].upper() + s[1].upper()"
    },
    {
        "number": 4556,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    contest_name = stdin.split()[0]\n    return f\"{contest_name[0].upper()}C\""
    },
    {
        "number": 4556,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()[0]\n    return s[0].upper() + \"C\""
    },
    {
        "number": 4556,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    name = stdin.strip()\n    abbreviation = name[0] + name[-1][-1]\n    return abbreviation.upper()"
    },
    {
        "number": 4556,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()[0]\n    return s[0].upper() + s[1].upper() + \"C\""
    },
    {
        "number": 4556,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()[0]\n    x = s[0]\n    return x + \"C\""
    },
    {
        "number": 4557,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    if X > A + B or X > A:\n        return \"NO\"\n    elif X <= A:\n        return \"YES\"\n    else:\n        return \"YES\" if (X - A) % 2 == 0 else \"NO\""
    },
    {
        "number": 4557,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    if X > A + B:\n        return \"NO\"\n    if X > A:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4557,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    \n    if X > A + B:\n        return \"NO\"\n    \n    if X <= A:\n        return \"YES\"\n    \n    return \"YES\" if X - A <= B else \"NO\""
    },
    {
        "number": 4557,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    if X > A:\n        return \"NO\"\n    else:\n        return \"YES\""
    },
    {
        "number": 4557,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.strip().split())\n    return \"YES\" if X <= A else \"NO\""
    },
    {
        "number": 4557,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    if X > A + B:\n        return \"NO\"\n    elif X > A:\n        return \"YES\"\n    else:\n        return \"YES\" if X == A else \"NO\""
    },
    {
        "number": 4557,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    total_animals = A + B\n    \n    if X > total_animals:\n        return \"NO\"\n    \n    if total_animals < 2 * X:\n        return \"NO\"\n    \n    return \"YES\""
    },
    {
        "number": 4557,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = list(map(int, stdin.split()))\n    if X > A + B or X > A:\n        return \"NO\"\n    if X == 0 or X == A:\n        return \"YES\"\n    return \"YES\" if (A + B) % 2 == 0 else \"NO\""
    },
    {
        "number": 4557,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n\n    if x > a:\n        return \"NO\"\n\n    if a + b - x < x:\n        return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 4557,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    if X > A + B:\n        return \"NO\"\n    elif X <= A:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4558,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, t = map(int, stdin.split())\n    return str(X - t)"
    },
    {
        "number": 4558,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    X, t = map(int, stdin.split())\n    initial_sand = X\n    sand_consumed = t\n    sand_in_bulb = initial_sand - sand_consumed\n    return str(sand_in_bulb)"
    },
    {
        "number": 4558,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    X, t = map(int, stdin.split())\n    initial_sand_grams = X\n    grams_consumed = t\n    final_sand_grams = initial_sand_grams - grams_consumed\n    return str(final_sand_grams)"
    },
    {
        "number": 4558,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    X, t = map(int, stdin.split())\n    return str(X - (t * 1)) "
    },
    {
        "number": 4558,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X, t = map(int, stdin.split())\n    initial_sand = X\n    consumed_sand = t\n    remaining_sand = initial_sand - consumed_sand\n\n    return str(remaining_sand)"
    },
    {
        "number": 4558,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    X, t = map(int, stdin.split())\n    grams_consumed = min(X, t)\n    grams_remaining = X - grams_consumed\n    return str(grams_remaining)"
    },
    {
        "number": 4558,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X, t = map(int, stdin.split())\n    grams_consumed = t\n    grams_remaining = X - grams_consumed\n    return str(grams_remaining)\n\ndef"
    },
    {
        "number": 4558,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X, t = map(int, stdin.split())\n    grams_consumed = min(X, t)  # calculate how many grams will be consumed in t seconds\n    grams_remaining = X - grams_consumed  # calculate how many grams will be remaining after t seconds\n    return str(grams_remaining)"
    },
    {
        "number": 4558,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    X, t = map(int, stdin.split())\n    total_sand_loss = X * t\n    upper_bulb_sand_loss = t\n    upper_bulb_sand_remaining = X - total_sand_loss\n    return str(upper_bulb_sand_remaining)"
    },
    {
        "number": 4558,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X, t = map(int, stdin.split())\n    total_sand = X - (X * t)\n    return str(total_sand)\n\ninput_str = input()\noutput_str = solution(input_str)\nprint(output_str) "
    },
    {
        "number": 4559,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    numbers = [int(num) for num in lines[1].split()]\n    \n    if N < 2 or N > 10**5 or len(numbers) != N:\n        raise ValueError(\"Invalid input\")\n    \n    result = 1\n    for num in numbers:\n        if num < 0 or num > 10**18:\n            raise ValueError(\"Invalid input\")\n        result *= num\n        \n        if result > 10**18:\n            return \"-1\"\n    \n    return str(result)"
    },
    {
        "number": 4559,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *numbers = stdin.split()\n    n = int(n)\n    product = 1\n\n    for num in numbers:\n        product *= int(num)\n\n    if product > 10**18:\n        return \"-1\"\n    else:\n        return str(product)\n"
    },
    {
        "number": 4559,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split()))\n    result = 1\n    for num in nums:\n        result *= num\n        if result > 10**18:\n            return \"-1\"\n    return str(result)\n\ninput_str = input()\nn = int(input_str.split()[0])\nstdin = input_str.split()[1:]\nprint(solution(\" \".join(stdin))) "
    },
    {
        "number": 4559,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *numbers = stdin.split()\n    n = int(n)\n    result = 1\n    for num in numbers:\n        result *= int(num)\n        if result > 10**18:\n            return -1\n    return str(result) "
    },
    {
        "number": 4559,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    n = int(input_list[0])\n    nums = list(map(int, input_list[1:]))\n\n    result = 1\n    for num in nums:\n        result *= num\n\n    if result > 10**18:\n        return \"-1\"\n    else:\n        return str(result)"
    },
    {
        "number": 4559,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = map(int, stdin.split())\n    if len(A) != N:\n        raise ValueError(\"Incorrect number of input values\")\n    \n    result = 1\n    for a in A:\n        result *= a\n        if result > 10**18:\n            return \"-1\"\n    \n    return str(result)\n\ndef"
    },
    {
        "number": 4559,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    nums = list(map(int, stdin.split()[1:]))\n\n    result = 1\n    for num in nums:\n        result *= num\n        if result > 10**18:\n            return -1\n\n    return str(result)"
    },
    {
        "number": 4559,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    A = [int(x) for x in lines[1].split()]\n    if len(A) != N:\n        return \"Invalid input\"\n\n    result = 1\n    for a in A:\n        result *= a\n        if result > 10**18:\n            return -1\n\n    return str(result)\n\ninput_str = \"\"\"2\n1000000000 1000000000\"\"\"\nprint(solution(input_str)) "
    },
    {
        "number": 4559,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *numbers = stdin.split()\n    n = int(n)\n    result = 1\n\n    for number in numbers:\n        result *= int(number)\n\n    if result > 10**18:\n        return \"-1\"\n    else:\n        return str(result)\n\nstdin = \"2\\n1000000000 1000000000\"\nprint(solution(stdin)) # Output: 100000000000000000 "
    },
    {
        "number": 4559,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = map(int, stdin.split())\n    result = 1\n\n    for a in A:\n        result *= a\n        if result > 10**18:\n            return -1\n\n    return str(result)\n\ndef"
    },
    {
        "number": 4560,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    coins = [500] * (n // 500) + [1] * (n % 500)\n    if len(coins) == n:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ndef"
    },
    {
        "number": 4560,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n\n    if n % 500 == 0:\n        return \"Yes\"\n    elif n > 1000 * a:\n        return \"No\"\n    else:\n        return \"Yes\"\n\nn = int(input())\na = int(input())\nstdin = f\"{n}\\n{a}\"\nprint(solution(stdin)) "
    },
    {
        "number": 4560,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    if n == 0:\n        return \"Yes\"\n    elif n < 0:\n        return \"No\"\n    elif n <= a:\n        return \"Yes\"\n    elif n % 500 == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4560,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n\n    if n % 500 == 0:\n        return \"Yes\"\n    elif n <= a:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4560,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, A = stdin.split()\n    N, A = int(N), int(A)\n\n    if N % 500 == 0:\n        return \"Yes\"\n    elif N <= A * 1 + (N - A * 1) // 500:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4560,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, A = [int(x) for x in stdin.split()]\n\n    # Check if we can pay with only 1-yen coins\n    if N % 500 != 0:\n        if N <= A:\n            return \"Yes\"\n        else:\n            return \"No\"\n\n    # Check if we can pay with only 500-yen coins\n    if N % 500 == 0:\n        if N // 500 <= A:\n            return \"Yes\"\n        else:\n            return \"No\"\n\n    # Check if we can pay with a combination of 1-yen and 500-yen coins\n    if N // 500 <= A:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4560,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    coins = [500]*a + [1]*(n-a)\n    coins.sort(reverse=True)\n    target = 0\n    for coin in coins:\n        if coin <= target:\n            target -= coin\n        else:\n            break\n    if target == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ndef"
    },
    {
        "number": 4560,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    coins = (1, 500)\n    if N == 0:\n        return \"Yes\"\n    for coin in coins:\n        if coin <= N <= A * coin:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4560,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    if N == 1:\n        return \"Yes\"\n    if N % 500 == 1:\n        return \"Yes\"\n    if N == 500:\n        return \"Yes\"\n    if A == 0:\n        return \"No\"\n    if N - A <= 1:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4560,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    if N % 500 == 0:\n        return \"Yes\"\n    elif N % 1 == 0 and N // 1 <= A:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4561,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.split())\n    \n    if A <= X:\n        return \"safe\"\n    elif A > X+B:\n        return \"dangerous\"\n    else:\n        return \"delicious\""
    },
    {
        "number": 4561,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b = map(int, stdin.split())\n    if b - a <= x:\n        return \"delicious\"\n    elif b - a <= x + 1:\n        return \"safe\"\n    else:\n        return \"dangerous\""
    },
    {
        "number": 4561,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.split())\n\n    if A + B > X + 1:\n        return \"dangerous\"\n    elif A + B <= X:\n        return \"delicious\"\n    else:\n        return \"safe\""
    },
    {
        "number": 4561,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.split())\n    \n    if B <= A:\n        return \"delicious\"\n    elif B - A > X:\n        return \"dangerous\"\n    else:\n        return \"safe\""
    },
    {
        "number": 4561,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.split())\n    if B >= X:\n        return \"dangerous\"\n    elif B <= A - X:\n        return \"delicious\"\n    else:\n        return \"safe\""
    },
    {
        "number": 4561,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.split())\n    days_before_best_before = X - B\n    if days_before_best_before < 1:\n        return \"dangerous\"\n    elif days_before_best_before <= A:\n        return \"delicious\"\n    else:\n        return \"safe\""
    },
    {
        "number": 4561,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.split())\n    if B - A <= X:\n        return \"delicious\"\n    elif B - A <= X + 1:\n        return \"safe\"\n    else:\n        return \"dangerous\""
    },
    {
        "number": 4561,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.split())\n    \n    if B > X + 1:\n        return \"dangerous\"\n    elif B <= A:\n        return \"delicious\"\n    else:\n        return \"safe\""
    },
    {
        "number": 4561,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.split())\n    if B > X:\n        return \"dangerous\"\n    elif B <= A:\n        return \"delicious\"\n    else:\n        return \"safe\""
    },
    {
        "number": 4561,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.split())\n\n    if A + B <= X:\n        return \"delicious\"\n    elif A + B - X - 1 <= 0:\n        return \"safe\"\n    else:\n        return \"dangerous\""
    },
    {
        "number": 4562,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    largest_square = 0\n\n    for i in range(1, n + 1):\n        square = i * i\n        if square <= n and square > largest_square:\n            largest_square = square\n\n    return str(largest_square)"
    },
    {
        "number": 4562,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 1\n    while i * i <= n:\n        i += 1\n    return str(i * (i - 1))"
    },
    {
        "number": 4562,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    i = 1\n    while i * i <= N:\n        i += 1\n    return str(i - 2)"
    },
    {
        "number": 4562,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    max_square = 0\n    for i in range(1, n+1):\n        if i * i > n:\n            break\n        max_square = i * i\n    return str(max_square)"
    },
    {
        "number": 4562,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = n\n    while i >= 0:\n        i -= 1\n        if i * i > n:\n            i += 1\n            break\n    return str(i * i)"
    },
    {
        "number": 4562,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    i = 1\n    while i * i <= n:\n        i += 1\n    return str(i * i - 1)\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4562,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sqrt_n = int(n ** 0.5)\n    largest_square = sqrt_n ** 2\n    return str(largest_square) "
    },
    {
        "number": 4562,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 1\n    while i * i <= n:\n        i += 1\n    return str(i * (i - 1))"
    },
    {
        "number": 4562,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    largest_square = 0\n    for i in range(1, n+1):\n        square = i * i\n        if square <= n:\n            largest_square = square\n        else:\n            break\n    return str(largest_square)"
    },
    {
        "number": 4562,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    i = 1\n    while i * i <= N:\n        i += 1\n    return str(i * (i - 1))"
    },
    {
        "number": 4563,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    def solve(t, a):\n        return lcm(t, a)\n\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    t_a = []\n\n    for i in range(1, n + 1):\n        t, a = map(int, lines[i].split())\n        t_a.append((t, a))\n\n    result = 1\n    for i in range(1, n):\n        result = lcm(result, solve(t_a[i][0], t_a[i][1]))\n\n    return str(result * (t_a[-1][0] + t_a[-1][1]))"
    },
    {
        "number": 4563,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    ratios = [tuple(map(int, line.split())) for line in lines[1:]]\n    \n    # Calculate the total number of votes for each candidate\n    total_votes = [0] * 2\n    for ratio in ratios:\n        # Calculate the number of votes for Takahashi and Aoki\n        t, a = ratio\n        votes_t = t * total_votes[0] // gcd(t, total_votes[0])\n        votes_a = a * total_votes[1] // gcd(a, total_votes[1])\n        \n        # Update the total number of votes\n        total_votes = [votes_t + votes_a, votes_t]\n    \n    return str(total_votes[0] + total_votes[1])\n\ndef"
    },
    {
        "number": 4563,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    import math\n\n    input_lines = stdin.split(\"\\n\")\n    N = int(input_lines[0])\n    T_i = []\n    A_i = []\n\n    for i in range(1, N + 1):\n        T_i.append(int(input_lines[i].split()[0]))\n        A_i.append(int(input_lines[i].split()[1]))\n\n    min_votes = 1\n    for i in range(N - 1, 0, -1):\n        min_votes = math.gcd(min_votes * T_i[i], min_votes * A_i[i])\n\n    return str(min_votes)\n\nstdin = \"3\\n2 3\\n1 1\\n3 2\\n\"\nprint(solution(stdin)) "
    },
    {
        "number": 4563,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    num_of_checks = int(lines[0])\n    check_results = [tuple(map(int, line.split())) for line in lines[1:]]\n\n    votes_takahashi = 1\n    votes_aoki = 1\n\n    for i in range(1, num_of_checks):\n        takahashi_ratio, aoki_ratio = check_results[i]\n\n        takahashi_gcd = gcd(takahashi_ratio, aoki_ratio)\n        aoki_gcd = gcd(aoki_ratio, takahashi_gcd)\n\n        takahashi_new_votes = votes_takahashi * takahashi_ratio // takahashi_gcd\n        aoki_new_votes = votes_aoki * aoki_ratio // aoki_gcd\n\n        votes_takahashi = max(votes_takahashi, takahashi_new_votes)\n        votes_aoki = max(votes_aoki, aoki_new_votes)\n\n    return str(votes_takahashi + votes_aoki)\n\ndef"
    },
    {
        "number": 4563,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split(\"\\n\")\n    n = int(data[0])\n    ratios = []\n    for i in range(1, n + 1):\n        t, a = map(int, data[i].split())\n        ratios.append((t, a))\n\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    def lcmm(iterable):\n        return reduce(lcm, iterable)\n\n    def solve(ratio):\n        t, a = ratio\n        return t * lcmm(range(1, t + 1)) + a * lcmm(range(1, a + 1))\n\n    return str(min(solve(ratio) for ratio in ratios))\n\ninput_data = \"3\\n2 3\\n1 1\\n3 2\"\nprint(solution(input_data)) "
    },
    {
        "number": 4563,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    ratios = []\n\n    for i in range(1, n + 1):\n        t, a = map(int, lines[i].split())\n        ratios.append((t, a))\n\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    def lcm_list(numbers):\n        result = 1\n        for n in numbers:\n            result = lcm(result, n)\n        return result\n\n    def smallest_total_votes():\n        total_votes = [1, 1]\n\n        for i in range(1, n):\n            t, a = ratios[i - 1]\n            total_votes[0] = lcm(total_votes[0], a)\n            total_votes[1] = lcm(total_votes[1], a)\n\n        return lcm_list(total_votes)\n\n    return str(smallest_total_votes())"
    },
    {
        "number": 4563,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    ratios = [tuple(map(int, line.split())) for line in lines[1:N+1]]\n\n    total_votes = 1\n    for i in range(1, N):\n        total_votes = lcm(total_votes, ratios[i][0] * ratios[i-1][1] + ratios[i][1] * ratios[i-1][0])\n\n    return str(total_votes)"
    },
    {
        "number": 4563,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    votes = []\n    for line in lines[1:N+1]:\n        T, A = map(int, line.split())\n        votes.append((T, A))\n\n    min_votes = 1\n    for i in range(N):\n        min_votes = min_votes * votes[i][0] * votes[i][1]\n\n    return str(min_votes)\n"
    },
    {
        "number": 4563,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    ratios = [tuple(map(int, line.split())) for line in lines[1:]]\n\n    # Calculate the product of the gcd of the ratios\n    gcd_product = 1\n    for i in range(N):\n        for j in range(i + 1, N):\n            gcd_product *= math.gcd(ratios[i][0], ratios[j][0])\n            gcd_product *= math.gcd(ratios[i][1], ratios[j][1])\n\n    # Calculate the sum of the total number of votes for each candidate\n    total_votes = sum(ratio[0] * ratio[1] for ratio in ratios)\n\n    # Calculate the maximum possible total number of votes obtained by the two candidates\n    max_votes = total_votes * gcd_product\n\n    # Calculate the minimum possible total number of votes obtained by the two candidates\n    min_votes = total_votes // math.gcd(max_votes, total_votes)\n\n    return str(min_votes)"
    },
    {
        "number": 4563,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    ratios = [list(map(int, line.split())) for line in lines[1:]]\n    num_votes = [1] * 2\n    total_votes = 1\n\n    for ratio in ratios:\n        takahashi_votes, aoki_votes = num_votes\n        takahashi_votes = takahashi_votes * ratio[0]\n        aoki_votes = aoki_votes * ratio[1]\n        num_votes = [takahashi_votes, aoki_votes]\n        total_votes = sum(num_votes)\n\n    return str(total_votes)"
    },
    {
        "number": 4564,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) != len(set(stdin)):\n        return \"no\"\n    else:\n        return \"yes\""
    },
    {
        "number": 4564,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = set(stdin)\n    return \"yes\" if len(s) == len(stdin) else \"no\""
    },
    {
        "number": 4564,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function takes a string as input and returns 'yes' if all characters in the string are unique, otherwise it returns 'no'.\n\n    Args:\n        stdin (str): A string containing lowercase English letters.\n\n    Returns:\n        str: 'yes' if all characters in the string are unique, otherwise 'no'.\n    \"\"\"\n    char_set = set()\n    for char in stdin:\n        if char in char_set:\n            return \"no\"\n        char_set.add(char)\n    return \"yes\""
    },
    {
        "number": 4564,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    if len(set(stdin)) == len(stdin):\n        return \"yes\"\n    else:\n        return \"no\""
    },
    {
        "number": 4564,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # convert string to set to remove duplicates and compare length\n    if len(set(stdin)) == len(stdin):\n        return \"yes\"\n    else:\n        return \"no\""
    },
    {
        "number": 4564,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = set(stdin)\n    if len(s) == len(stdin):\n        return \"yes\"\n    else:\n        return \"no\""
    },
    {
        "number": 4564,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = set(stdin)\n    return \"yes\" if len(s) == len(stdin) else \"no\""
    },
    {
        "number": 4564,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # convert string to set to remove duplicates\n    unique_chars = set(stdin)\n\n    # check if length of set is equal to length of string\n    if len(unique_chars) == len(stdin):\n        return \"yes\"\n    else:\n        return \"no\""
    },
    {
        "number": 4564,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    char_set = set()\n    for char in stdin:\n        char_set.add(char)\n    if len(char_set) == len(stdin):\n        return \"yes\"\n    else:\n        return \"no\""
    },
    {
        "number": 4564,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = set(stdin)\n    if len(s) == len(stdin):\n        return \"yes\"\n    else:\n        return \"no\""
    },
    {
        "number": 4565,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split('\\n')\n    n = int(n)\n    e_count = s.count('E')\n    w_count = s.count('W')\n    return min(e_count, w_count)\n\ndef"
    },
    {
        "number": 4565,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split(\"\\n\")\n    N = int(N)\n    \n    min_changes = N\n    for i in range(N):\n        changes = S[:i].count(\"W\") + S[i:].count(\"E\")\n        min_changes = min(min_changes, changes)\n    \n    return str(min_changes)"
    },
    {
        "number": 4565,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split()\n    N = int(N)\n    \n    leaders = []\n    for i in range(N):\n        if S[i] == 'W':\n            leaders.append(i)\n    \n    min_changes = N\n    for leader in leaders:\n        changes = 0\n        for i in range(N):\n            if S[i] == 'W':\n                changes += 1\n            else:\n                if i < leader:\n                    changes += 1\n        min_changes = min(min_changes, changes)\n    \n    return str(min_changes)"
    },
    {
        "number": 4565,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split()\n    N = int(N)\n    min_changes = N\n\n    for i in range(N):\n        if S[i] == 'W':\n            continue\n        east_count = 0\n        for j in range(i + 1, N):\n            if S[j] == 'E':\n                east_count += 1\n        west_count = i - east_count\n        min_changes = min(min_changes, west_count)\n\n    return str(min_changes)"
    },
    {
        "number": 4565,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.strip().split(\"\\n\")\n    N = int(N)\n    east_count = S.count(\"E\")\n    west_count = N - east_count\n\n    if east_count >= west_count:\n        return str(west_count)\n    else:\n        return str(east_count)"
    },
    {
        "number": 4565,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split()\n    n = int(n)\n    east_facing = s.count('E')\n    west_facing = n - east_facing\n\n    if west_facing == 0:\n        return str(east_facing)\n    elif east_facing == 0:\n        return str(west_facing)\n    else:\n        return str(min(east_facing, west_facing))"
    },
    {
        "number": 4565,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split()\n    n = int(n)\n    if n == 1:\n        return 0\n\n    min_changes = n\n    for i in range(n):\n        changes = 0\n        if s[i] == 'W':\n            changes += 1\n        for j in range(n):\n            if s[j] == 'E':\n                changes += 1\n        min_changes = min(min_changes, changes)\n\n    return min_changes"
    },
    {
        "number": 4565,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split('\\n')\n    N = int(N)\n    min_changes = N\n    for i in range(N):\n        changes = S[:i].count('E') + S[i:].count('W')\n        if changes < min_changes:\n            min_changes = changes\n    return str(min_changes)"
    },
    {
        "number": 4565,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split()\n    N = int(N)\n    leaders = []\n\n    for i in range(N):\n        if S[i] == \"W\":\n            leaders.append(i)\n\n    if not leaders:\n        return N\n\n    leaders.sort(key=lambda x: abs(x - (N // 2)))\n\n    return min(N - leaders[0], leaders[0])"
    },
    {
        "number": 4565,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    S = stdin.split('\\n')[1]\n    leader = S.index('W')\n    result = sum([S.count('W') - leader, S.count('E') - (N - leader - 1)])\n    return str(result)"
    },
    {
        "number": 4566,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # split input by lines\n    lines = stdin.split(\"\\n\")\n    \n    # parse first line for number of cities and roads\n    num_cities, num_roads = map(int, lines[0].split())\n    \n    # create empty dictionary to store count of roads per city\n    city_roads = {}\n    \n    # iterate over each road, update count of roads per city\n    for road in lines[1:-1]:\n        city1, city2 = map(int, road.split())\n        city_roads[city1] = city_roads.get(city1, 0) + 1\n        city_roads[city2] = city_roads.get(city2, 0) + 1\n    \n    # print answer for each city\n    for i in range(1, num_cities+1):\n        print(city_roads.get(i, 0))"
    },
    {
        "number": 4566,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[0:2])\n    roads = [[] for _ in range(N+1)]\n    for i in range(M):\n        a, b = map(int, stdin.split()[2*i+2:2*i+4])\n        roads[a].append(i+1)\n        roads[b].append(i+1)\n    return '\\n'.join([str(len(road)) for road in roads[1:]])"
    },
    {
        "number": 4566,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def get_input() -> Tuple[int, int, List[Tuple[int, int]]]:\n        \"\"\"\n        Extract N, M, and list of roads from stdin\n        \"\"\"\n        N, M = map(int, input().split())\n        roads = [tuple(map(int, input().split())) for _ in range(M)]\n        return N, M, roads\n\n    def count_roads_per_city(N: int, roads: List[Tuple[int, int]]) -> List[int]:\n        \"\"\"\n        Count the number of roads connected to each city\n        \"\"\"\n        roads_per_city = [0] * (N + 1)\n        for a, b in roads:\n            roads_per_city[a] += 1\n            roads_per_city[b] += 1\n        return roads_per_city[1:]\n\n    def output_result(roads_per_city: List[int]):\n        \"\"\"\n        Output the result\n        \"\"\"\n        for count in roads_per_city:\n            print(count)\n\n    N, M, roads = get_input()\n    roads_per_city = count_roads_per_city(N, roads)\n    output_result(roads_per_city)"
    },
    {
        "number": 4566,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    roads = [[] for _ in range(N + 1)]\n    \n    for _ in range(M):\n        a, b = map(int, stdin.split()[-2:])\n        roads[a].append(b)\n        roads[b].append(a)\n        \n    result = []\n    for i in range(1, N + 1):\n        result.append(str(len(roads[i])))\n    \n    return \"\\n\".join(result)\n\ninput_data = \"\"\"4 3\n1 2\n2 3\n1 4\"\"\"\nprint(solution(input_data)) "
    },
    {
        "number": 4566,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given a list of roads connecting N cities, find the number of roads connected to each city.\n    \n    Args:\n        stdin (str): The input string in the format specified in the problem statement.\n    \n    Returns:\n        str: The answer string with N lines, where the i-th line contains the number of roads connected to city i.\n    \"\"\"\n    N, M = map(int, stdin.split()[0:2])\n    roads = []\n    for line in stdin.split('\\n')[2:-1]:\n        a, b = map(int, line.split())\n        roads.append((a, b))\n        roads.append((b, a))\n    \n    connections = [0] * (N + 1)\n    for road in roads:\n        connections[road[0]] += 1\n        connections[road[1]] += 1\n    \n    answer = ''\n    for i in range(1, N + 1):\n        answer += str(connections[i]) + '\\n'\n    \n    return answer"
    },
    {
        "number": 4566,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N, M = map(int, lines[0].split())\n    roads = [[] for _ in range(N+1)]\n    \n    for i in range(1, M+1):\n        a, b = map(int, lines[i].split())\n        roads[a].append(i)\n        roads[b].append(i)\n    \n    result = []\n    for i in range(1, N+1):\n        result.append(str(len(roads[i])))\n    \n    return \"\\n\".join(result)"
    },
    {
        "number": 4566,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N, M = map(int, lines[0].split())\n    roads = [[] for _ in range(N + 1)]\n\n    for line in lines[1:]:\n        a, b = map(int, line.split())\n        roads[a].append(b)\n        roads[b].append(a)\n\n    result = []\n    for i in range(1, N + 1):\n        result.append(str(len(roads[i])))\n\n    return '\\n'.join(result)"
    },
    {
        "number": 4566,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, input().split())\n    adj_list = {i+1: set() for i in range(N)}\n    \n    for _ in range(M):\n        a, b = map(int, input().split())\n        adj_list[a].add(b)\n        adj_list[b].add(a)\n    \n    result = []\n    for i in range(1, N+1):\n        result.append(str(len(adj_list[i])))\n    \n    return \"\\n\".join(result)"
    },
    {
        "number": 4566,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N, M = map(int, lines[0].split())\n    roads = []\n    for line in lines[1:]:\n        if not line:\n            continue\n        a, b = map(int, line.split())\n        roads.append((a, b))\n\n    result = [0] * (N + 1)\n    for road in roads:\n        a, b = road\n        result[a] += 1\n        result[b] += 1\n\n    return '\\n'.join(str(count) for count in result[1:])"
    },
    {
        "number": 4566,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    roads = [[] for _ in range(n+1)]\n    for line in stdin.split()[2:]:\n        a, b = map(int, line.split())\n        roads[a].append(b)\n        roads[b].append(a)\n    \n    result = []\n    for i in range(1, n+1):\n        result.append(str(len(roads[i])))\n    \n    return \"\\n\".join(result)"
    },
    {
        "number": 4567,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    num_questions, *question_scores = map(int, stdin.split())\n\n    # Calculate the maximum possible grade\n    max_grade = sum(question_scores)\n\n    # Check if the max grade is a multiple of 10\n    if max_grade % 10 == 0:\n        # If it is, the displayed grade will be 0\n        return 0\n    else:\n        # Otherwise, the displayed grade will be the max grade\n        return max_grade"
    },
    {
        "number": 4567,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_questions, *question_scores = map(int, stdin.split())\n\n    max_score = sum(question_scores)\n    min_score = max_score - 10\n\n    for score in range(min_score, max_score + 1):\n        if score % 10 != 0 or (score % 10 == 0 and score > 0):\n            return str(score)\n\n    return \"No valid grade found.\""
    },
    {
        "number": 4567,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split(\"\\n\")\n    n = int(input_lines[0])\n    scores = [int(score) for score in input_lines[1:]]\n    \n    max_grade = sum(scores)\n    \n    for i in range(1, max_grade + 1):\n        if max_grade % 10 == 0 and i <= max_grade:\n            continue\n        else:\n            return str(max_grade)\n    \n    return \"0\"  # If the loop doesn't return anything, it means the max grade is 0.\n"
    },
    {
        "number": 4567,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, *scores = map(int, stdin.split())\n    max_score = sum(scores)\n    max_grade = max_score - max_score % 10\n    return str(max_grade)"
    },
    {
        "number": 4567,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, *scores = list(map(int, stdin.split()))\n    max_grade = sum(scores)\n    return str(max_grade) if max_grade % 10 != 0 else \"0\"\n\ninput_str = \"3\\n5\\n10\\n15\"\nprint(solution(input_str)) "
    },
    {
        "number": 4567,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, *scores = map(int, stdin.split(\"\\n\"))\n    max_score = sum(scores)\n    return str(max_score) if max_score % 10 else str(0)"
    },
    {
        "number": 4567,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, *scores = map(int, stdin.split())\n    max_score = sum(scores)\n    return str(max_score) if max_score % 10 else str(max_score - max_score % 10)"
    },
    {
        "number": 4567,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    num_questions = int(input_list[0])\n    scores = [int(score) for score in input_list[1:]]\n\n    max_score = sum(scores)\n    if max_score % 10 == 0:\n        max_score = 0\n\n    return str(max_score)"
    },
    {
        "number": 4567,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    input_list = [int(x) for x in stdin.split('\\n') if x]\n    N, scores = input_list[0], input_list[1:]\n\n    # Calculate the maximum grade\n    max_grade = sum(scores)\n    if max_grade % 10 == 0:\n        max_grade -= 10\n\n    return str(max_grade)"
    },
    {
        "number": 4567,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, *scores = map(int, stdin.split())\n    correct_scores = sum(scores)\n    return max(correct_scores, correct_scores + (10 - (correct_scores % 10)))\n\ndef"
    },
    {
        "number": 4568,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    S = stdin.split(\"\\n\")[1]\n    max_count = 0\n    for i in range(1, N):\n        count = len(set(S[:i]) & set(S[i:]))\n        if count > max_count:\n            max_count = count\n    return str(max_count)"
    },
    {
        "number": 4568,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.strip().split('\\n')\n    n = int(n)\n    s = list(s)\n    result = 0\n\n    for i in range(n):\n        x = set(s[:i])\n        y = set(s[i:])\n        result = max(result, len(x.intersection(y)))\n\n    return str(result)"
    },
    {
        "number": 4568,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    S = stdin.split('\\n')[1]\n    \n    max_different_letters = 0\n    for i in range(1, N):\n        x = S[:i]\n        y = S[i:]\n        x_different_letters = set(x)\n        y_different_letters = set(y)\n        max_different_letters = max(max_different_letters, len(x_different_letters.intersection(y_different_letters)))\n    \n    return str(max_different_letters)"
    },
    {
        "number": 4568,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split()\n    N = int(N)\n    S = list(S)\n    S.sort()\n\n    max_different_letters = 0\n    for i in range(1, N):\n        set_x = set(S[:i])\n        set_y = set(S[i:])\n        different_letters = len(set_x.symmetric_difference(set_y))\n        max_different_letters = max(max_different_letters, different_letters)\n\n    return str(max_different_letters)"
    },
    {
        "number": 4568,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split(\"\\n\")\n    N = int(N)\n    unique_chars = set(S)\n    max_different_chars = len(unique_chars)\n\n    for i in range(N):\n        x = set(S[:i])\n        y = set(S[i:])\n        current_different_chars = len(x.union(y))\n        if current_different_chars < max_different_chars:\n            max_different_chars = current_different_chars\n\n    return str(max_different_chars)\n\ninput_string = \"6\\naabbca\"\nprint(solution(input_string))  # Output: 2 "
    },
    {
        "number": 4568,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n\n    # Initialize variables\n    max_diff_letters = 0\n    for i in range(N):\n        x = s[:i]\n        y = s[i:]\n        unique_letters_x = set(x)\n        unique_letters_y = set(y)\n        diff_letters = len(unique_letters_x.union(unique_letters_y))\n        max_diff_letters = max(max_diff_letters, diff_letters)\n\n    return str(max_diff_letters)\n\ninput_string = \"6\\naabbca\\n\"\nprint(solution(input_string)) "
    },
    {
        "number": 4568,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    S = stdin.split(\"\\n\")[1]\n\n    max_count = 0\n    for i in range(1, N - 1):\n        x = set(S[:i])\n        y = set(S[i:])\n        count = len(x.intersection(y))\n        max_count = max(max_count, count)\n\n    return str(max_count)"
    },
    {
        "number": 4568,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    S = stdin.split(\"\\n\")[1]\n\n    max_diff_count = 0\n    for i in range(N):\n        x = S[:i]\n        y = S[i:]\n        diff_count = len(set(x + y))\n        max_diff_count = max(max_diff_count, diff_count)\n\n    return str(max_diff_count)"
    },
    {
        "number": 4568,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split()\n    n = int(n)\n    s = list(s)\n    max_count = 0\n    max_index = 0\n    for i in range(1, n):\n        x = set(s[:i])\n        y = set(s[i:])\n        count = len(x.intersection(y))\n        if count > max_count:\n            max_count = count\n            max_index = i\n    return max_count"
    },
    {
        "number": 4568,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split(\"\\n\")\n    N = int(N)\n    set_S = set(S)\n    max_different_letters = 0\n    \n    for i in range(N):\n        set_X = set(S[:i])\n        set_Y = set(S[i:])\n        different_letters = len(set_X.symmetric_difference(set_Y))\n        max_different_letters = max(max_different_letters, different_letters)\n    \n    return str(max_different_letters)"
    },
    {
        "number": 4569,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    weather_dict = {\"Sunny\": \"Cloudy\", \"Cloudy\": \"Rainy\", \"Rainy\": \"Sunny\"}\n    return weather_dict[stdin]"
    },
    {
        "number": 4569,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    weather_dict = {\"Sunny\": \"Cloudy\", \"Cloudy\": \"Rainy\", \"Rainy\": \"Sunny\"}\n    return weather_dict[stdin]"
    },
    {
        "number": 4569,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == \"Sunny\":\n        return \"Cloudy\"\n    elif stdin == \"Cloudy\":\n        return \"Rainy\"\n    elif stdin == \"Rainy\":\n        return \"Sunny\"\n    \n    # If the input is not one of the three options, raise an error\n    else:\n        raise ValueError(\"Invalid input\")"
    },
    {
        "number": 4569,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    weather_cycle = [\"Sunny\", \"Cloudy\", \"Rainy\", \"Sunny\", \"Cloudy\", \"Rainy\"]\n    today_weather = stdin\n    tomorrow_weather = weather_cycle[weather_cycle.index(today_weather) + 1]\n    return tomorrow_weather"
    },
    {
        "number": 4569,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Define the cycle of weather\n    weather_cycle = [\"Sunny\", \"Cloudy\", \"Rainy\", \"Sunny\", \"Cloudy\", \"Rainy\"]\n\n    # Convert the input string to lowercase\n    stdin = stdin.lower()\n\n    # Find the current weather index in the cycle\n    current_weather_index = weather_cycle.index(stdin)\n\n    # Calculate the index of the next weather\n    next_weather_index = (current_weather_index + 1) % len(weather_cycle)\n\n    # Return the next weather in the cycle\n    return weather_cycle[next_weather_index] "
    },
    {
        "number": 4569,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Converting the input string to lowercase\n    stdin = stdin.lower()\n    \n    # Creating a dictionary to map today's weather to tomorrow's weather\n    weather_map = {\"sunny\": \"cloudy\", \"cloudy\": \"rainy\", \"rainy\": \"sunny\"}\n    \n    # Returning the tomorrow's weather based on today's weather\n    return weather_map[stdin]"
    },
    {
        "number": 4569,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # create a dictionary of the weather cycle\n    weather_cycle = {\"Sunny\": \"Cloudy\", \"Cloudy\": \"Rainy\", \"Rainy\": \"Sunny\"}\n    \n    # get the current weather\n    current_weather = stdin\n    \n    # get the predicted weather\n    predicted_weather = weather_cycle[current_weather]\n    \n    return predicted_weather"
    },
    {
        "number": 4569,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == \"Sunny\":\n        return \"Cloudy\"\n    elif stdin == \"Cloudy\":\n        return \"Rainy\"\n    else:\n        return \"Sunny\"\n\ninput_str = input()\nresult = solution(input_str)\nprint(result) "
    },
    {
        "number": 4569,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    today_weather = stdin\n    tomorrow_weather = None\n    \n    if today_weather == \"Sunny\":\n        tomorrow_weather = \"Cloudy\"\n    elif today_weather == \"Cloudy\":\n        tomorrow_weather = \"Rainy\"\n    elif today_weather == \"Rainy\":\n        tomorrow_weather = \"Sunny\"\n    \n    return tomorrow_weather "
    },
    {
        "number": 4569,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Create a mapping for the weather cycle\n    weather_cycle = {\n        \"Sunny\": \"Cloudy\",\n        \"Cloudy\": \"Rainy\",\n        \"Rainy\": \"Sunny\"\n    }\n\n    # Get the current weather from the input\n    current_weather = stdin\n\n    # Get the predicted weather from the mapping\n    predicted_weather = weather_cycle[current_weather]\n\n    # Return the predicted weather\n    return predicted_weather"
    },
    {
        "number": 4570,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    fee1 = A * N\n    fee2 = B\n    minimum_fee = min(fee1, fee2)\n    return str(minimum_fee)"
    },
    {
        "number": 4570,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    plan1_fee = n * a\n    plan2_fee = b\n    return str(min(plan1_fee, plan2_fee))"
    },
    {
        "number": 4570,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input from stdin\n    N, A, B = map(int, stdin.split())\n\n    # Calculate the minimum fee using the two fee plans\n    if N * A < B:\n        # Plan 1 is cheaper\n        min_fee = N * A\n    else:\n        # Plan 2 is cheaper or equal\n        min_fee = B\n\n    # Return the minimum fee as a string\n    return str(min_fee)"
    },
    {
        "number": 4570,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Split input by whitespace and convert to integer\n    N, A, B = map(int, stdin.split())\n    \n    # Calculate fees for each plan\n    plan1_fee = A * N\n    plan2_fee = B\n    \n    # Return the minimum fee\n    return str(min(plan1_fee, plan2_fee))"
    },
    {
        "number": 4570,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    min_fee = min(N * A, B)\n    return str(min_fee)\n\ndef"
    },
    {
        "number": 4570,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    return str(min(N*A, B))"
    },
    {
        "number": 4570,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    return str(min(N * A, B))"
    },
    {
        "number": 4570,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    duration = N * A\n    plan1_fee = A * N\n    plan2_fee = min(B, duration)\n    return str(min(plan1_fee, plan2_fee))"
    },
    {
        "number": 4570,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    if N <= 2:\n        return str(min(N * A, B))\n    else:\n        return str(N * A + B)"
    },
    {
        "number": 4570,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    if N * A <= B:\n        return str(B)\n    else:\n        return str(N * A)\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4571,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    time_limit = 1900\n    success_probability = 0.5\n    total_probability = 1\n    total_time = 0\n    expected_time = 0\n\n    while total_probability > success_probability:\n        total_time += time_limit\n        expected_time += time_limit * total_probability\n        total_probability *= success_probability\n\n    expected_time = int(expected_time)\n    return str(expected_time)\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4571,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    \n    if N == M == 1:\n        return \"1900\"\n    \n    total_time = 0\n    probability = 0.5\n    factor = 0.5\n    \n    for i in range(M):\n        total_time += probability * 1900\n        probability *= factor\n    \n    total_time += (N - M) * 100\n    \n    return str(int(total_time))"
    },
    {
        "number": 4571,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    \n    total_time = 0\n    probability = 0.5\n    for case in range(M):\n        total_time += 1900 * probability\n        probability /= 2\n    \n    probability = 1\n    for case in range(N - M):\n        total_time += 100 * probability\n        probability /= 2\n    \n    return str(int(total_time))\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4571,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    T = 1900\n    P = 0.5\n    R = 0.25\n    Q = 100\n    X = (M * T * P) + (N - M) * Q\n    return str(int(X))\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4571,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    total_exec_time = 0\n    # Calculate the expected time for solving the M cases with 1/2 probability\n    total_exec_time += 1900 * (1 + 1/2 + 1/4 + 1/8 + ...)\n    # Calculate the expected time for solving the remaining cases with 100 milliseconds\n    total_exec_time += 100 * (N - M)\n    return str(int(total_exec_time))"
    },
    {
        "number": 4571,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    if N <= 5:\n        return \"0\"\n    else:\n        M_prob = 1.0 / (2 ** (M - 1))\n        return str(int(M_prob * 1900 + (N - M) * 100))"
    },
    {
        "number": 4571,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x = 1900 * (1 - (1/2)**m) + 100 * (n - m)\n    return str(int(x))"
    },
    {
        "number": 4571,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    probability = 0.5\n    time = 1900\n    expected_time = 0\n\n    for i in range(M):\n        expected_time += time * probability\n        probability *= 0.5\n        time = 100\n\n    return str(int(expected_time))"
    },
    {
        "number": 4571,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    time_per_case = 100\n    time_per_fail = 1900\n\n    probability_of_fail = 0.5\n    total_time = 0\n    cases_left = n\n\n    while cases_left > 0:\n        total_time += time_per_case * cases_left\n        cases_left -= cases_left\n        if cases_left < m:\n            total_time += time_per_fail * cases_left\n            break\n        else:\n            cases_left = int(cases_left * probability_of_fail)\n\n    return str(int(total_time))"
    },
    {
        "number": 4571,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    success_probability = 0.5\n    base_time = 1900\n    failure_probability = 1 - success_probability\n    result = base_time * success_probability\n    for i in range(1, M):\n        result += (base_time * (success_probability ** i)) * failure_probability\n    remaining_cases = N - M\n    remaining_time = 100\n    result += remaining_cases * remaining_time\n    return str(int(result))\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4572,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    letters = set(\"abcdefghijklmnopqrstuvwxyz\")\n    for char in stdin:\n        if char in letters:\n            letters.remove(char)\n    \n    if len(letters) == 0:\n        return \"None\"\n    else:\n        return sorted(letters)[0]"
    },
    {
        "number": 4572,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    S = set(stdin)\n    if len(S) == 26:\n        return \"None\"\n\n    for letter in ascii_lowercase:\n        if letter not in S:\n            return letter"
    },
    {
        "number": 4572,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    for letter in \"abcdefghijklmnopqrstuvwxyz\":\n        if letter not in stdin:\n            return letter\n    return \"None\""
    },
    {
        "number": 4572,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    missing_letter = None\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\n    for letter in alphabet:\n        if letter not in stdin:\n            missing_letter = letter\n            break\n\n    return missing_letter"
    },
    {
        "number": 4572,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for letter in alphabet:\n        if letter not in stdin:\n            return letter\n    return \"None\""
    },
    {
        "number": 4572,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    for char in \"abcdefghijklmnopqrstuvwxyz\":\n        if char not in stdin:\n            return char\n    return \"None\""
    },
    {
        "number": 4572,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    for c in 'abcdefghijklmnopqrstuvwxyz':\n        if c not in stdin:\n            return c\n    return None"
    },
    {
        "number": 4572,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    missing_letter = None\n\n    for letter in alphabet:\n        if letter not in stdin:\n            missing_letter = letter\n            break\n\n    return missing_letter"
    },
    {
        "number": 4572,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = set(stdin)\n    for i in range(ord('a'), ord('z')+1):\n        if chr(i) not in s:\n            return chr(i)\n    return \"None\""
    },
    {
        "number": 4572,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = set(stdin)\n    for c in \"abcdefghijklmnopqrstuvwxyz\":\n        if c not in s:\n            return c\n    return \"None\""
    },
    {
        "number": 4573,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def get_median(arr: List[int]) -> int:\n        n = len(arr)\n        if n % 2 == 0:\n            return sorted(arr)[n // 2 - 1]\n        else:\n            return sorted(arr)[n // 2]\n\n    N = int(stdin.split('\\n')[0])\n    X = list(map(int, stdin.split('\\n')[1].split()))\n\n    result = []\n\n    for i in range(N):\n        X_minus_i = X[:i] + X[i+1:]\n        B_i = get_median(X_minus_i)\n        result.append(str(B_i))\n\n    return '\\n'.join(result)\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4573,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *x = map(int, stdin.split())\n    x.sort()\n    result = []\n\n    for i in range(n):\n        if i == 0:\n            result.append(x[-1])\n        elif i == n - 1:\n            result.append(x[0])\n        else:\n            result.append(x[i // 2])\n\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 4573,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    X = list(map(int, stdin.split()[1:]))\n    sorted_X = sorted(X)\n\n    output = \"\"\n    for i in range(N):\n        B_i = sorted_X[i // 2] if N % 2 == 0 else sorted_X[(i - 1) // 2]\n        output += str(B_i) + \"\\n\"\n\n    return output\n\n\ndef"
    },
    {
        "number": 4573,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    X = list(map(int, stdin.split()[1:]))\n    result = []\n    \n    def find_median(X: list) -> int:\n        X.sort()\n        n = len(X)\n        if n % 2 == 0:\n            return (X[n//2 - 1] + X[n//2]) / 2\n        else:\n            return X[n//2]\n    \n    for i in range(N):\n        X_without_i = X[:i] + X[i+1:]\n        B_i = find_median(X_without_i)\n        result.append(B_i)\n    \n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 4573,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    x = list(map(int, stdin.split()[1:]))\n    x.sort()\n\n    output = []\n    for i in range(n):\n        if n % 2 == 0:\n            if i == n - 1 or x[i] != x[i + 1]:\n                median = x[i + n // 2 - 1]\n            else:\n                median = (x[i] + x[i + 1]) / 2\n        else:\n            median = x[i + n // 2]\n\n        left = x[:i] + x[i + 1:]\n        left.sort()\n        if left:\n            if len(left) % 2 == 0:\n                if left[-1] != left[-2]:\n                    output.append(left[-1])\n                else:\n                    output.append((left[-1] + left[-2]) / 2)\n            else:\n                output.append(left[-1])\n        else:\n            output.append(max(x))\n\n    return '\\n'.join(map(str, output))"
    },
    {
        "number": 4573,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    data = list(map(int, stdin.split()))\n    N = data[0]\n    X = data[1:]\n\n    def partition(arr, low, high):\n        pivot = arr[high]\n        i = low - 1\n        for j in range(low, high):\n            if arr[j] <= pivot:\n                i += 1\n                arr[i], arr[j] = arr[j], arr[i]\n        arr[i + 1], arr[high] = arr[high], arr[i + 1]\n        return i + 1\n\n    def quick_select(arr, k, low, high):\n        if low == high:\n            return arr[low]\n        pivot_index = partition(arr, low, high)\n        if k == pivot_index:\n            return arr[k]\n        elif k < pivot_index:\n            return quick_select(arr, k, low, pivot_index - 1)\n        else:\n            return quick_select(arr, k, pivot_index + 1, high)\n\n    for i in range(N):\n        left = X[:i] + X[i + 1 :]\n        median = quick_select(left, len(left) // 2, 0, len(left) - 1)\n        print(median)"
    },
    {
        "number": 4573,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def find_median(numbers: List[int]) -> int:\n        numbers.sort()\n        n = len(numbers)\n        if n % 2 == 0:\n            return numbers[n // 2 - 1]\n        else:\n            return numbers[n // 2]\n\n    def find_median_excluding_i(numbers: List[int], i: int) -> int:\n        numbers.remove(numbers[i - 1])\n        median = find_median(numbers)\n        numbers.insert(i - 1, numbers[i - 2])\n        return median\n\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    x_values = [int(x) for x in lines[1].split()]\n\n    result = []\n    for i in range(1, n + 1):\n        result.append(find_median_excluding_i(x_values, i))\n\n    return '\\n'.join(str(median) for median in result)"
    },
    {
        "number": 4573,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def find_median(arr: List[int], i: int) -> int:\n        arr.remove(X[i])\n        arr.sort()\n        n = len(arr)\n        if n % 2 == 0:\n            return arr[n // 2]\n        else:\n            return arr[n // 2 + 1]\n\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    X = list(map(int, lines[1].split(\" \")))\n\n    result = []\n    for i in range(N):\n        median = find_median(X.copy(), i)\n        result.append(str(median))\n\n    return \"\\n\".join(result)"
    },
    {
        "number": 4573,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    X = list(map(int, stdin.split()[1:]))\n    \n    B = []\n    for i in range(n):\n        X_minus_i = X[:i] + X[i+1:]\n        X_minus_i.sort()\n        median = X_minus_i[len(X_minus_i)//2]\n        B.append(median)\n    \n    return '\\n'.join(map(str, B))"
    },
    {
        "number": 4573,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    data = [int(x) for x in stdin.split()]\n    N = data[0]\n    X = data[1:]\n\n    result = []\n    for i in range(N):\n        remaining_X = X[:i] + X[i+1:]\n        B_i = sorted(remaining_X)[(N+1)//2-1]\n        result.append(B_i)\n\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 4574,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, sticks = stdin.split(\"\\n\")\n    N = int(N)\n    sticks = list(map(int, sticks.split()))\n\n    sticks.sort(reverse=True)\n    max_area = 0\n\n    for i in range(N - 3):\n        for j in range(i + 1, N - 2):\n            for k in range(j + 1, N - 1):\n                for l in range(k + 1, N):\n                    area = sticks[i] * sticks[j]\n                    if area > max_area and sticks[l] >= sticks[i] + sticks[j]:\n                        max_area = area\n\n    return max_area\n"
    },
    {
        "number": 4574,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, sticks = stdin.split(\"\\n\")\n    n = int(n)\n    sticks = list(map(int, sticks.split()))\n    \n    sticks.sort(reverse=True)\n    area = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                for l in range(k+1, n):\n                    if sticks[i] + sticks[j] > sticks[k] + sticks[l]:\n                        area = max(area, sticks[i] * sticks[j])\n                        \n    return str(area)"
    },
    {
        "number": 4574,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n, sticks = stdin.split(\"\\n\")\n    n = int(n)\n    sticks = [int(x) for x in sticks.split(\" \")]\n\n    # Find all possible combinations of 4 sticks\n    max_area = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                for l in range(k+1, n):\n                    area = sticks[i] * sticks[j] * sticks[k] * sticks[l]\n                    if area > max_area:\n                        max_area = area\n\n    # Check if a rectangle can be formed\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                for l in range(k+1, n):\n                    if sticks[i] == sticks[j] and sticks[k] == sticks[l]:\n                        return str(sticks[i] * sticks[k])\n\n    return str(max_area) "
    },
    {
        "number": 4574,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, sticks = stdin.split()\n    N = int(N)\n    sticks = list(map(int, sticks.split()))\n    \n    # Sort the sticks in descending order\n    sticks.sort(reverse=True)\n    \n    # Initialize variables\n    max_area = 0\n    max_length = 0\n    max_width = 0\n    \n    # Iterate through all possible combinations of sticks\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                for l in range(k+1, N):\n                    # Check if the area of the rectangle is greater than the current maximum\n                    area = min(sticks[i], sticks[j], sticks[k], sticks[l]) * max(sticks[i], sticks[j], sticks[k], sticks[l])\n                    if area > max_area:\n                        max_area = area\n                        max_length = max(sticks[i], sticks[j], sticks[k], sticks[l])\n                        max_width = min(sticks[i], sticks[j], sticks[k], sticks[l])\n                        \n    return str(max_area) if max_area > 0 else \"0\""
    },
    {
        "number": 4574,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    sticks = list(map(int, stdin.split()))\n    N = sticks[0]\n    del sticks[0]\n    sticks.sort(reverse=True)\n\n    # Check if four different sticks can be selected\n    if len(set(sticks)) < 4:\n        return \"0\"\n\n    # Check if a rectangle can be formed\n    for i in range(N - 3):\n        for j in range(i + 1, N - 2):\n            for k in range(j + 1, N - 1):\n                for l in range(k + 1, N):\n                    if sticks[i] == sticks[j] == sticks[k] == sticks[l]:\n                        continue\n                    if sticks[i] + sticks[j] > sticks[k] and sticks[i] + sticks[j] > sticks[l]:\n                        return str(sticks[i] * sticks[j])\n    return \"0\""
    },
    {
        "number": 4574,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    sticks = stdin.split(\"\\n\")\n    sticks = list(map(int, sticks[1:]))\n    sticks.sort(reverse=True)\n    n = len(sticks)\n    max_area = 0\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                for l in range(k + 1, n):\n                    area = min(sticks[i], sticks[j]) * min(sticks[k], sticks[l])\n                    if area > max_area:\n                        max_area = area\n\n    return str(max_area)"
    },
    {
        "number": 4574,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, sticks = stdin.split('\\n')\n    n = int(n)\n    sticks = list(map(int, sticks.split()))\n\n    sticks.sort()\n    max_area = 0\n\n    for i in range(n - 3):\n        for j in range(i + 1, n - 2):\n            for k in range(j + 1, n - 1):\n                for l in range(k + 1, n):\n                    side1 = sticks[l] - sticks[i]\n                    side2 = sticks[j] - sticks[i]\n                    side3 = sticks[l] - sticks[k]\n                    side4 = sticks[j] - sticks[k]\n                    if side1 == side2 and side3 == side4:\n                        area = side1 * side3\n                        if area > max_area:\n                            max_area = area\n                            break\n                    elif side1 == side3 and side2 == side4:\n                        area = side1 * side2\n                        if area > max_area:\n                            max_area = area\n                            break\n\n    return str(max_area)"
    },
    {
        "number": 4574,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input from stdin and split into lines\n    lines = stdin.strip().split('\\n')\n    \n    # Read the number of sticks\n    N = int(lines[0])\n    \n    # Read the lengths of the sticks\n    sticks = [int(x) for x in lines[1].split()]\n    \n    # Initialize the maximum area to 0\n    max_area = 0\n    \n    # Iterate through all possible combinations of 4 sticks\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                for l in range(k+1, N):\n                    # Calculate the area of the rectangle formed by these 4 sticks\n                    area = sticks[i] * sticks[j]\n                    if sticks[i] + sticks[j] > sticks[k] and sticks[i] + sticks[j] > sticks[l]:\n                        area = min(area, sticks[k] * sticks[l])\n                    # Update the maximum area if necessary\n                    max_area = max(max_area, area)\n    \n    # Return the maximum area as a string\n    return str(max_area) "
    },
    {
        "number": 4574,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    sticks = list(map(int, stdin.split()))\n    N = sticks[0]\n    del sticks[0]\n    \n    sticks.sort(reverse=True)\n    \n    max_area = 0\n    \n    for i in range(N - 3):\n        for j in range(i + 1, N - 2):\n            for k in range(j + 1, N - 1):\n                for l in range(k + 1, N):\n                    area = sticks[i] * sticks[j] * sticks[k] * sticks[l]\n                    if area > max_area:\n                        max_area = area\n    \n    return str(max_area) "
    },
    {
        "number": 4574,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num_sticks, *stick_lengths = stdin.split()\n    num_sticks = int(num_sticks)\n    stick_lengths = [int(length) for length in stick_lengths]\n    stick_lengths.sort(reverse=True)\n    \n    # Check if a rectangle can be formed\n    for i in range(num_sticks - 3):\n        for j in range(i + 1, num_sticks - 2):\n            for k in range(j + 1, num_sticks - 1):\n                for l in range(k + 1, num_sticks):\n                    if stick_lengths[i] == stick_lengths[j] and stick_lengths[j] == stick_lengths[k] and stick_lengths[k] == stick_lengths[l]:\n                        return str(stick_lengths[i] * stick_lengths[j])\n    return \"0\""
    },
    {
        "number": 4575,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    D, X = [int(x) for x in lines[1].split()]\n    As = [int(x) for x in lines[2:]]\n    \n    total_pieces = 0\n    for i in range(N):\n        A_i = As[i]\n        days_eaten = 1 + A_i + 2*A_i + 3*A_i + 4*A_i\n        total_pieces += days_eaten\n    \n    return str(total_pieces)"
    },
    {
        "number": 4575,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    D, X = map(int, lines[1].split())\n    A = list(map(int, lines[2:]))\n    \n    total_chocolate = sum(A) * D + X\n    pieces_per_participant = (total_chocolate - X) // N\n    \n    return str(pieces_per_participant)"
    },
    {
        "number": 4575,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    D, X = map(int, lines[1].split())\n    A = [int(line) for line in lines[2:]]\n\n    chocolate_prepared = D * X\n\n    for i in range(N):\n        chocolate_eaten = 0\n        for j in range(D):\n            if (j + 1) % (A[i] + 1) == 0:\n                chocolate_eaten += 1\n        chocolate_prepared -= chocolate_eaten\n\n    return str(chocolate_prepared)\n\ninput_str = \"\"\"3\n7 1\n2\n5\n10\"\"\"\nprint(solution(input_str)) "
    },
    {
        "number": 4575,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.strip().split('\\n')\n    N = int(input_lines[0])\n    D, X = map(int, input_lines[1].split())\n    A = list(map(int, input_lines[2:]))\n\n    total_pieces = X\n    for i in range(1, D+1):\n        for j in range(N):\n            if i % (A[j]+1) == 0:\n                total_pieces += 2\n\n    return str(total_pieces - X)"
    },
    {
        "number": 4575,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, D, X = map(int, stdin.split()[:3])\n    A = list(map(int, stdin.split()[3:]))\n\n    total_pieces = 0\n    for i in range(N):\n        total_pieces += (D // (A[i] + 1)) + 1\n\n    return str(total_pieces - X)"
    },
    {
        "number": 4575,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    D, X = map(int, lines[1].split())\n    A = list(map(int, lines[2:]))\n    \n    total_pieces = 0\n    for i in range(N):\n        total_pieces += A[i]\n    \n    pieces_remaining = X\n    for i in range(N):\n        pieces_remaining -= (A[i] + 1) * ((D - 1) // (2 * A[i] + 1))\n    \n    return str(total_pieces - pieces_remaining)"
    },
    {
        "number": 4575,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    data = list(map(int, stdin.split()))\n    N = data[0]\n    D, X = data[1], data[2]\n    A = data[3:]\n\n    # Calculate the number of chocolate pieces prepared at the beginning of the camp\n    pieces_prepared = D * X\n\n    # Calculate the number of chocolate pieces eaten by each participant\n    pieces_eaten = [0] * N\n    for i in range(N):\n        pieces_eaten[i] = sum(A[i] + j for j in range(D - 1))\n\n    # Calculate the number of chocolate pieces remaining at the end of the camp\n    pieces_remaining = pieces_prepared - sum(pieces_eaten)\n\n    # Calculate the number of chocolate pieces prepared at the beginning of the camp\n    pieces_prepared_beginning = pieces_prepared - pieces_remaining\n\n    return str(pieces_prepared_beginning)"
    },
    {
        "number": 4575,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    D, X = map(int, lines[1].split())\n    A = list(map(int, lines[2:]))\n    \n    total_pieces = 0\n    for i in range(N):\n        total_pieces += D // (A[i] + 1)\n    \n    return str(total_pieces + X)\n\ninput_str = \"3\\n7 1\\n2\\n5\\n10\"\nprint(solution(input_str)) "
    },
    {
        "number": 4575,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, D, X = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    \n    pieces_prepared = X\n    \n    for i in range(N):\n        for j in range(A[i] + 1, D, 2 * A[i] + 1):\n            pieces_prepared += 1\n    \n    return str(pieces_prepared)\n\ndef"
    },
    {
        "number": 4575,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, D, X = [int(x) for x in stdin.split()]\n    A = [int(x) for x in stdin.split('\\n')[1:]]\n    pieces_prepared = D * X\n\n    for i in range(N):\n        pieces_prepared -= (X - A[i]) * A[i]\n\n    return str(pieces_prepared)"
    },
    {
        "number": 4576,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X = map(int, stdin.split())\n\n    if X % 50 != 0:\n        return \"X is not a multiple of 50.\"\n\n    # Check the constraints\n    if A < 0 or A > 50:\n        return \"A is out of range.\"\n    if B < 0 or B > 50:\n        return \"B is out of range.\"\n    if C < 0 or C > 50:\n        return \"C is out of range.\"\n    if A + B + C < 1:\n        return \"A + B + C is less than 1.\"\n    if X < 50 or X > 20000:\n        return \"X is out of range.\"\n\n    # Calculate the number of ways\n    total_coins = A + B + C\n    modulo = X // 50\n    result = 0\n\n    for i in range(total_coins + 1):\n        for j in range(total_coins - i + 1):\n            k = total_coins - i - j\n            if i * 500 + j * 100 + k * 50 == X:\n                result += 1\n\n    return str(result)"
    },
    {
        "number": 4576,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def count_ways(a, b, c, x):\n        total_coins = a + b + c\n        if total_coins == 0 or x == 0:\n            return 1\n        if x % 50 != 0:\n            return 0\n        if x > 20000:\n            return 0\n        if a == 0:\n            return count_ways(b, c, 0, x // 2)\n        if b == 0:\n            return count_ways(a, c, 0, x // 3)\n        if c == 0:\n            return count_ways(a, b, 0, x // 5)\n\n        return count_ways(a - 1, b, c, x - 50) + \\\n               count_ways(a, b - 1, c, x - 100) + \\\n               count_ways(a, b, c - 1, x - 50)\n\n    a, b, c, x = map(int, stdin.split())\n    x //= 50\n    return str(count_ways(a, b, c, x))"
    },
    {
        "number": 4576,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    input_values = stdin.split()\n    A = int(input_values[0])\n    B = int(input_values[1])\n    C = int(input_values[2])\n    X = int(input_values[3])\n\n    # Initialize variables\n    ways = 0\n    ways_500 = 0\n    ways_100 = 0\n    ways_50 = 0\n\n    # Calculate number of ways with 500-yen coins\n    for i in range(A + 1):\n        # Calculate number of ways with 100-yen coins\n        for j in range(B + 1):\n            # Calculate number of ways with 50-yen coins\n            for k in range(C + 1):\n                total = 500 * i + 100 * j + 50 * k\n\n                # If total is equal to X, increment number of ways\n                if total == X:\n                    ways += 1\n\n    # Return result\n    return str(ways)"
    },
    {
        "number": 4576,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X = map(int, stdin.split())\n    \n    def count_ways(coins: list, target: int) -> int:\n        dp = [0] * (target + 1)\n        dp[0] = 1\n        for coin in coins:\n            for i in range(coin, target + 1):\n                dp[i] += dp[i - coin]\n        return dp[target]\n    \n    return str(count_ways([500, 100, 50], X))"
    },
    {
        "number": 4576,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X = map(int, stdin.split())\n    X //= 50\n    result = 0\n    \n    for i in range(X // A + 1):\n        for j in range(X // B + 1):\n            for k in range(X // C + 1):\n                if i + j + k == X:\n                    result += 1\n                    \n    return str(result)"
    },
    {
        "number": 4576,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    coins = list(map(int, stdin.split()))\n    A, B, C, X = coins\n    \n    if X % 50 != 0:\n        return \"X must be a multiple of 50.\"\n    \n    dp = [0] * (X // 50 + 1)\n    dp[0] = 1\n    \n    for i in range(1, A + 1):\n        for j in range(X // 100, -1, -1):\n            if i <= j:\n                dp[j] += dp[j - i]\n    \n    for i in range(1, B + 1):\n        for j in range(X // 50, -1, -1):\n            if i <= j:\n                dp[j] += dp[j - i]\n                \n    for i in range(1, C + 1):\n        for j in range(X // 50, -1, -1):\n            if i <= j:\n                dp[j] += dp[j - i]\n                \n    return str(dp[X // 50])"
    },
    {
        "number": 4576,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, x = map(int, stdin.split())\n    x //= 50\n\n    def count_ways(a, b, c, x, memo):\n        if a > 50 or b > 50 or c > 50 or x > 2000:\n            return 0\n        if a == 0 and b == 0 and c == 0:\n            return 1\n\n        key = (a, b, c, x)\n        if key in memo:\n            return memo[key]\n\n        count = 0\n        count += count_ways(a + 1, b, c, x - 1, memo)\n        count += count_ways(a, b + 1, c, x - 1, memo)\n        count += count_ways(a, b, c + 1, x - 1, memo)\n        count += count_ways(a - 1, b, c, x, memo)\n        count += count_ways(a, b - 1, c, x, memo)\n        count += count_ways(a, b, c - 1, x, memo)\n\n        memo[key] = count\n        return count\n\n    return str(count_ways(a, b, c, x, {}))"
    },
    {
        "number": 4576,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X = map(int, stdin.split())\n\n    if X % 50 != 0:\n        return \"X must be a multiple of 50.\"\n\n    # Calculate the total number of coins\n    total_coins = A + B + C\n\n    # Calculate the number of ways to select coins for each value (50, 100, 500)\n    count_50 = total_coins // 50\n    count_100 = total_coins // 100\n    count_500 = total_coins // 500\n\n    # Calculate the number of ways to select coins for X yen\n    result = 0\n    for i in range(count_500 + 1):\n        for j in range(count_100 + 1):\n            k = (X - 50 * i - 100 * j) // 50\n            if 0 <= k <= count_50:\n                result += binomial(count_50, k)\n\n    return str(result)\n\ndef"
    },
    {
        "number": 4576,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, x = map(int, stdin.split())\n    count = 0\n\n    for i in range(min(a + 1, x // 500) + 1):\n        for j in range(min(b + 1, (x - i * 500) // 100) + 1):\n            for k in range(min(c + 1, (x - i * 500 - j * 100) // 50) + 1):\n                if i * 500 + j * 100 + k * 50 == x:\n                    count += 1\n\n    return str(count)"
    },
    {
        "number": 4576,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X = map(int, stdin.split())\n    total_coins = A + B + C\n\n    # Base cases\n    if total_coins < 1:\n        return \"0\"\n    if X < 50:\n        return \"0\"\n    if X % 50 != 0:\n        return \"0\"\n\n    # Calculate the number of ways to select coins using dynamic programming\n    mod = 10**9 + 7\n    dp = [[0] * (X + 1) for _ in range(total_coins + 1)]\n    for i in range(total_coins + 1):\n        dp[i][0] = 1\n\n    for i in range(1, total_coins + 1):\n        for j in range(1, X + 1):\n            if i <= A:\n                dp[i][j] += dp[i - 1][j]\n                dp[i][j] %= mod\n            if j >= 50:\n                dp[i][j] += dp[i][j - 50]\n                dp[i][j] %= mod\n            if i <= B:\n                dp[i][j] += dp[i - 1][j]\n                dp[i][j] %= mod\n            if j >= 100:\n                dp[i][j] += dp[i][j - 100]\n                dp[i][j] %= mod\n            if i <= C:\n                dp[i][j] += dp[i - 1][j]\n                dp[i][j] %= mod\n            if j >= 50:\n                dp[i][j] += dp[i][j - 50]\n                dp[i][j] %= mod\n\n    return str(dp[total_coins][X])"
    },
    {
        "number": 4577,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if C >= A and C <= B:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4577,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if C >= A and C <= B:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4577,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if C >= A and C <= B:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4577,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if C >= A and C <= B:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4577,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return \"Yes\" if a <= c <= b else \"No\""
    },
    {
        "number": 4577,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    return \"Yes\" if C >= A and C <= B else \"No\""
    },
    {
        "number": 4577,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if C >= A and C <= B:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4577,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if C >= A and C <= B:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4577,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if C >= A and C <= B:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4577,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if C >= A and C <= B:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4578,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split()[0:2])\n    moto_list = list(map(int, stdin.split()[2:]))\n\n    moto_sum = sum(moto_list)\n    doughnut_count = 0\n\n    for moto in sorted(moto_list, reverse=True):\n        if X < moto:\n            break\n        if moto <= X // (N - doughnut_count):\n            doughnut_count += 1\n            X -= moto\n        else:\n            break\n\n    return str(doughnut_count)\n\ninput_string = input()\nprint(solution(input_string)) "
    },
    {
        "number": 4578,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    motos = list(map(int, stdin.split()[2:]))\n    total_moto = sum(motos)\n\n    if total_moto > X:\n        return \"0\"\n\n    doughnuts = []\n    for m in motos:\n        if m > X:\n            return \"0\"\n        doughnuts.append(X // m)\n        X %= m\n\n    return str(sum(doughnuts))"
    },
    {
        "number": 4578,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    moto = [int(x) for x in stdin.split()[2:]]\n    \n    # First, sort the moto list in descending order\n    moto.sort(reverse=True)\n    \n    # Initialize the counter and the total sum of moto consumed\n    counter = 0\n    total_moto = 0\n    \n    # Iterate through the moto list, making as many doughnuts as possible for each kind\n    for m in moto:\n        doughnuts = X // m\n        if doughnuts > 0:\n            counter += 1\n            total_moto += doughnuts * m\n            X -= doughnuts * m\n        else:\n            break\n    \n    # Calculate the number of additional doughnuts that can be made\n    additional_doughnuts = X // moto[-1]\n    if additional_doughnuts > 0:\n        counter += additional_doughnuts\n        total_moto += additional_doughnuts * moto[-1]\n    \n    # Return the total number of doughnuts that can be made\n    return str(counter)"
    },
    {
        "number": 4578,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split()[0:2])\n    moto = list(map(int, stdin.split()[2:]))\n\n    max_doughnuts = 0\n    for doughnut in moto:\n        max_doughnuts += X // doughnut\n        X %= doughnut\n\n    return str(max_doughnuts)\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4578,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    m_list = list(map(int, input().split()))\n\n    count = 0\n    for i in range(N):\n        count += X // m_list[i]\n\n    return str(count)"
    },
    {
        "number": 4578,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    motos = list(map(int, stdin.split()))\n    motos.sort(reverse=True)\n    total_motos = 0\n    \n    for i in range(len(motos)):\n        total_motos += motos[i]\n        if total_motos > X:\n            return str(i)\n    return str(len(motos))"
    },
    {
        "number": 4578,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N, X = map(int, lines[0].split())\n    m = list(map(int, lines[1:]))\n    \n    # Sort the m values in descending order\n    m.sort(reverse=True)\n    \n    total_moto = sum(m)\n    total_doughnuts = 0\n    \n    # Iterate through the sorted m values and add them to the total Moto\n    for i in range(N):\n        if X >= total_moto:\n            # Add all the doughnuts that can be made\n            total_doughnuts += X // m[i]\n            break\n        else:\n            # Add the number of doughnuts that can be made using the current Moto amount\n            total_doughnuts += X // m[i]\n            X %= m[i]\n    \n    return str(total_doughnuts)"
    },
    {
        "number": 4578,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    m = list(map(int, stdin.split()))\n    \n    # Check if X is enough to make at least one doughnut for each kind\n    if sum(m) > X:\n        return \"0\"\n    \n    # Initialize variables for greedy algorithm\n    max_doughnuts = 0\n    available_moto = X\n    total_doughnuts = 0\n    \n    # Greedy algorithm to find the maximum number of doughnuts\n    while total_doughnuts < N and available_moto >= m[total_doughnuts]:\n        max_doughnuts += 1\n        available_moto -= m[total_doughnuts]\n        total_doughnuts += 1\n    \n    return str(max_doughnuts)"
    },
    {
        "number": 4578,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    motos = list(map(int, input().split()))\n    \n    total_motos = sum(motos)\n    max_doughnuts = X // total_motos\n    result = max_doughnuts\n    \n    for i in range(N):\n        max_doughnuts_with_i = X // (total_motos - motos[i])\n        result = min(result, max_doughnuts_with_i)\n    \n    return str(result)"
    },
    {
        "number": 4578,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n, x = map(int, lines[0].split())\n    motos = list(map(int, lines[1:]))\n\n    total_motos = sum(motos)\n    if total_motos > x:\n        return \"0\"\n\n    doughnuts = []\n    for i in range(n):\n        if motos[i] * (x // total_motos) >= x:\n            return str(x // motos[i])\n        doughnuts.append(x // motos[i])\n\n    return str(min(doughnuts))\n"
    },
    {
        "number": 4579,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    items = set()\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n\n    for i in range(1, n + 1):\n        items.add(lines[i])\n\n    return str(len(items))"
    },
    {
        "number": 4579,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # split the input by newline\n    inputs = stdin.split('\\n')\n    n = int(inputs[0])\n    kinds = set()\n\n    for i in range(1, n + 1):\n        kinds.add(inputs[i])\n\n    return str(len(kinds))"
    },
    {
        "number": 4579,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    items = set()\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    for i in range(1, n+1):\n        items.add(lines[i])\n    return str(len(items))"
    },
    {
        "number": 4579,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    items = set()\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    \n    for i in range(1, n+1):\n        items.add(lines[i])\n        \n    return str(len(items))"
    },
    {
        "number": 4579,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    items = set()\n    for item in stdin.split(\"\\n\")[1:-1]:\n        items.add(item)\n    return str(len(items))\n\ninput_string = \"3\\napple\\norange\\napple\"\nprint(solution(input_string)) "
    },
    {
        "number": 4579,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    items = set()\n    for line in stdin.split('\\n'):\n        if line.strip():\n            items.add(line)\n    return len(items)\n\ninput_data = \"\"\"3\napple\norange\napple\"\"\"\noutput = solution(input_data)\nprint(output)  # Output: 2 "
    },
    {
        "number": 4579,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    items = set()\n    for item in stdin.split('\\n')[1:]:\n        items.add(item)\n    return str(len(items))"
    },
    {
        "number": 4579,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    num_draws = int(lines[0])\n    items = set()\n\n    for i in range(1, num_draws + 1):\n        items.add(lines[i])\n\n    return str(len(items))"
    },
    {
        "number": 4579,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    items = set()\n    lines = stdin.split(\"\\n\")\n    for line in lines[1:]:\n        items.add(line)\n    return str(len(items))"
    },
    {
        "number": 4579,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    items = set()\n    for i in range(1, n+1):\n        items.add(lines[i])\n    return str(len(items))"
    },
    {
        "number": 4580,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_users, *ratings = map(int, stdin.split())\n\n    colors = {\n        1: \"gray\",\n        400: \"brown\",\n        800: \"green\",\n        1200: \"cyan\",\n        1600: \"blue\",\n        2000: \"yellow\",\n        2400: \"orange\",\n        2800: \"red\"\n    }\n\n    color_counts = {}\n    for rating in ratings:\n        for color, limit in colors.items():\n            if rating <= limit:\n                color_counts[color] = color_counts.get(color, 0) + 1\n                break\n\n    return f\"{min(color_counts.values())} {max(color_counts.values())}\""
    },
    {
        "number": 4580,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    ratings = list(map(int, stdin.split()[1:]))\n\n    min_colors = 0\n    max_colors = 0\n\n    color_map = {\n        (1, 399): 'gray',\n        (400, 799): 'brown',\n        (800, 1199): 'green',\n        (1200, 1599): 'cyan',\n        (1600, 1999): 'blue',\n        (2000, 2399): 'yellow',\n        (2400, 2799): 'orange',\n        (2800, 3199): 'red',\n    }\n\n    for rating in ratings:\n        min_colors += 1\n        max_colors += 1\n\n        for range_, color in color_map.items():\n            if range_[0] <= rating <= range_[1]:\n                min_colors = min(min_colors, 8)\n                break\n\n    return f\"{min_colors} {max_colors}\""
    },
    {
        "number": 4580,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    N = int(stdin.split()[0])\n    ratings = list(map(int, stdin.split()[1:]))\n\n    # Define the color mapping\n    color_mapping = {\n        (1, 399): \"gray\",\n        (400, 799): \"brown\",\n        (800, 1199): \"green\",\n        (1200, 1599): \"cyan\",\n        (1600, 1999): \"blue\",\n        (2000, 2399): \"yellow\",\n        (2400, 2799): \"orange\",\n        (2800, 4800): \"red\",\n    }\n\n    # Create a set to store the different colors\n    colors = set()\n\n    # Iterate through the ratings and add the corresponding color to the set\n    for rating in ratings:\n        for range_ in color_mapping:\n            if range_[0] <= rating <= range_[1]:\n                colors.add(color_mapping[range_])\n                break\n\n    # Return the minimum and maximum possible number of different colors\n    return f\"{len(colors)} {len(colors)}\""
    },
    {
        "number": 4580,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num_users, ratings = stdin.split('\\n')\n    num_users = int(num_users)\n    ratings = list(map(int, ratings.split()))\n\n    color_count = {\n        \"gray\": 0,\n        \"brown\": 0,\n        \"green\": 0,\n        \"cyan\": 0,\n        \"blue\": 0,\n        \"yellow\": 0,\n        \"orange\": 0,\n        \"red\": 0\n    }\n\n    for rating in ratings:\n        if rating <= 399:\n            color_count[\"gray\"] += 1\n        elif rating <= 799:\n            color_count[\"brown\"] += 1\n        elif rating <= 1199:\n            color_count[\"green\"] += 1\n        elif rating <= 1599:\n            color_count[\"cyan\"] += 1\n        elif rating <= 1999:\n            color_count[\"blue\"] += 1\n        elif rating <= 2399:\n            color_count[\"yellow\"] += 1\n        elif rating <= 2799:\n            color_count[\"orange\"] += 1\n        elif rating <= 3199:\n            color_count[\"red\"] += 1\n        else:\n            pass\n\n    min_colors = len(set(color_count.values()))\n    max_colors = len(color_count)\n\n    return f\"{min_colors} {max_colors}\"\n\nstdin = \"4\\n2100 2500 2700 2700\"\nprint(solution(stdin)) "
    },
    {
        "number": 4580,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    ratings = [int(x) for x in stdin.split()[1:]]\n    \n    colors = {}\n    for rating in ratings:\n        if rating < 400:\n            color = \"gray\"\n        elif rating < 800:\n            color = \"brown\"\n        elif rating < 1200:\n            color = \"green\"\n        elif rating < 1600:\n            color = \"cyan\"\n        elif rating < 2000:\n            color = \"blue\"\n        elif rating < 2400:\n            color = \"yellow\"\n        elif rating < 2800:\n            color = \"orange\"\n        elif rating < 3200:\n            color = \"red\"\n        else:\n            color = \"gray\"\n        if color not in colors:\n            colors[color] = 0\n        colors[color] += 1\n    \n    min_colors = len(colors)\n    max_colors = len(colors)\n    if len(colors) > 1:\n        for color, count in colors.items():\n            if count == 1:\n                min_colors -= 1\n            else:\n                break\n        if min_colors > 1:\n            max_colors += 1\n    \n    return f\"{min_colors} {max_colors}\""
    },
    {
        "number": 4580,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    n = int(line[0])\n    ratings = list(map(int, line[1:]))\n\n    rating_colors = {\n        (1, 399): \"gray\",\n        (400, 799): \"brown\",\n        (800, 1199): \"green\",\n        (1200, 1599): \"cyan\",\n        (1600, 1999): \"blue\",\n        (2000, 2399): \"yellow\",\n        (2400, 2799): \"orange\",\n        (2800, 3199): \"red\",\n    }\n\n    color_count = {}\n    for rating in ratings:\n        for range_key in rating_colors:\n            if range_key[0] <= rating <= range_key[1]:\n                color = rating_colors[range_key]\n                if color not in color_count:\n                    color_count[color] = 1\n                else:\n                    color_count[color] += 1\n\n    min_colors = len(color_count)\n    max_colors = len(color_count)\n\n    if 3200 in ratings:\n        max_colors += 1\n\n    return str(min_colors) + \" \" + str(max_colors)"
    },
    {
        "number": 4580,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    ratings = list(map(int, stdin.split('\\n')[1].split()))\n\n    min_colors = 0\n    max_colors = 0\n    color_count = {\n        \"gray\": 0,\n        \"brown\": 0,\n        \"green\": 0,\n        \"cyan\": 0,\n        \"blue\": 0,\n        \"yellow\": 0,\n        \"orange\": 0,\n        \"red\": 0\n    }\n\n    for rating in ratings:\n        if rating <= 399:\n            color_count[\"gray\"] += 1\n        elif rating <= 799:\n            color_count[\"brown\"] += 1\n        elif rating <= 1199:\n            color_count[\"green\"] += 1\n        elif rating <= 1599:\n            color_count[\"cyan\"] += 1\n        elif rating <= 1999:\n            color_count[\"blue\"] += 1\n        elif rating <= 2399:\n            color_count[\"yellow\"] += 1\n        elif rating <= 2799:\n            color_count[\"orange\"] += 1\n        else:\n            color_count[\"red\"] += 1\n\n    min_colors = sum(color_count.values())\n    max_colors = max(color_count.values())\n\n    return str(min_colors) + ' ' + str(max_colors)"
    },
    {
        "number": 4580,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N = int(stdin.split(\"\\n\")[0])\n    ratings = [int(rating) for rating in stdin.split(\"\\n\")[1].split()]\n\n    # count the number of different colors\n    color_counts = {}\n    for rating in ratings:\n        color = rating_to_color(rating)\n        if color not in color_counts:\n            color_counts[color] = 0\n        color_counts[color] += 1\n\n    # find the minimum and maximum possible number of different colors\n    min_colors = len(color_counts)\n    max_colors = 0\n    for count in color_counts.values():\n        min_colors = min(min_colors, count)\n        max_colors = max(max_colors, count)\n\n    return f\"{min_colors} {max_colors}\"\n\ndef"
    },
    {
        "number": 4580,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num_users, *ratings = stdin.split()\n    num_users = int(num_users)\n    ratings = [int(rating) for rating in ratings]\n\n    colors = {}\n    for rating in ratings:\n        if rating <= 399:\n            color = \"gray\"\n        elif rating <= 799:\n            color = \"brown\"\n        elif rating <= 1199:\n            color = \"green\"\n        elif rating <= 1599:\n            color = \"cyan\"\n        elif rating <= 1999:\n            color = \"blue\"\n        elif rating <= 2399:\n            color = \"yellow\"\n        elif rating <= 2799:\n            color = \"orange\"\n        elif rating <= 3199:\n            color = \"red\"\n        else:\n            color = \"free\"\n\n        if color in colors:\n            colors[color] += 1\n        else:\n            colors[color] = 1\n\n    min_colors = len(colors)\n    max_colors = len(colors)\n\n    if \"free\" in colors:\n        max_colors += colors[\"free\"] - 1\n\n    return f\"{min_colors} {max_colors}\""
    },
    {
        "number": 4580,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    ratings = [int(x) for x in stdin.split('\\n')[1].split()]\n\n    colors = []\n    for rating in ratings:\n        if rating < 400:\n            colors.append(\"gray\")\n        elif rating < 800:\n            colors.append(\"brown\")\n        elif rating < 1200:\n            colors.append(\"green\")\n        elif rating < 1600:\n            colors.append(\"cyan\")\n        elif rating < 2000:\n            colors.append(\"blue\")\n        elif rating < 2400:\n            colors.append(\"yellow\")\n        elif rating < 2800:\n            colors.append(\"orange\")\n        elif rating < 3200:\n            colors.append(\"red\")\n        else:\n            colors.append(None)\n\n    min_colors = len(set(colors))\n    max_colors = len(colors) - colors.count(None)\n\n    return f\"{min_colors} {max_colors}\""
    },
    {
        "number": 4581,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    price = 700\n    if S[0] == 'o':\n        price += 100\n    if S[1] == 'x':\n        price += 100\n    if S[2] == 'o':\n        price += 100\n    return str(price)"
    },
    {
        "number": 4581,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    price = 700\n    \n    if s[0] == 'o':\n        price += 100\n    if s[1] == 'o':\n        price += 100\n    if s[2] == 'o':\n        price += 100\n    \n    return str(price)\n\ndef"
    },
    {
        "number": 4581,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    price = 700  # price of a bowl of ramen\n\n    # Check if the customer wants to add boiled egg\n    if S[0] == 'o':\n        price += 100\n\n    # Check if the customer wants to add sliced pork\n    if S[1] == 'o':\n        price += 100\n\n    # Check if the customer wants to add green onions\n    if S[2] == 'o':\n        price += 100\n\n    return str(price)"
    },
    {
        "number": 4581,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    topping_price = 100\n    base_price = 700\n    total_price = base_price\n\n    toppings = {\n        \"o\": \"boiled egg\",\n        \"x\": \"not topped\"\n    }\n\n    for char in stdin:\n        if char in toppings:\n            print(f\"{toppings[char]}\")\n            total_price += topping_price\n\n    print(total_price)"
    },
    {
        "number": 4581,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    price = 700\n    if s[0] == 'o':\n        price += 100\n    if s[1] == 'o':\n        price += 100\n    if s[2] == 'o':\n        price += 100\n    return str(price)"
    },
    {
        "number": 4581,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Read input string from stdin\n    S = stdin\n\n    # Calculate the price based on the toppings\n    price = 700\n    if S[0] == 'o':\n        price += 100\n    if S[1] == 'o':\n        price += 100\n    if S[2] == 'o':\n        price += 100\n\n    # Return the result\n    return str(price)"
    },
    {
        "number": 4581,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if len(S) != 3:\n        raise ValueError(\"Invalid input\")\n\n    price = 700\n    if S[0] == 'o':\n        price += 100\n    if S[1] == 'o':\n        price += 100\n    if S[2] == 'o':\n        price += 100\n\n    return str(price)"
    },
    {
        "number": 4581,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    price = 700\n    if s[0] == 'o':\n        price += 100\n    if s[1] == 'o':\n        price += 100\n    if s[2] == 'o':\n        price += 100\n    return str(price)"
    },
    {
        "number": 4581,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    total_price = 700\n    if s[0] == 'o':\n        total_price += 100\n    if s[1] == 'o':\n        total_price += 100\n    if s[2] == 'o':\n        total_price += 100\n    return str(total_price)"
    },
    {
        "number": 4581,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    price = 700\n    \n    if S[0] == 'o':\n        price += 100\n    \n    if S[1] == 'x':\n        price += 0\n    else:\n        price += 100\n        \n    if S[2] == 'x':\n        price += 0\n    else:\n        price += 100\n        \n    return str(price)"
    },
    {
        "number": 4582,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.strip().split()\n    if a == b:\n        return \"H\"\n    else:\n        return \"D\"\n\ninput_str = input()\noutput_str = solution(input_str)\nprint(output_str) "
    },
    {
        "number": 4582,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    if a == b:\n        return \"H\"\n    else:\n        return \"D\""
    },
    {
        "number": 4582,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    \n    if a == 'H':\n        if b == 'H':\n            return 'H'  # TopCoDeer is honest\n        elif b == 'D':\n            return 'D'  # TopCoDeer is dishonest\n    elif a == 'D':\n        if b == 'H':\n            return 'D'  # TopCoDeer is dishonest\n        elif b == 'D':\n            return 'H'  # TopCoDeer is honest"
    },
    {
        "number": 4582,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n\n    if a == 'H':\n        if b == 'H':\n            return 'H'  # AtCoDeer is honest, and says TopCoDeer is honest\n        else:\n            return 'D'  # AtCoDeer is honest, but says TopCoDeer is dishonest\n    else:\n        if b == 'H':\n            return 'D'  # AtCoDeer is dishonest, and says TopCoDeer is honest\n        else:\n            return 'H'  # AtCoDeer is dishonest, but says TopCoDeer is dishonest"
    },
    {
        "number": 4582,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    if a == \"H\" and b == \"H\":\n        return \"H\"\n    elif a == \"H\" and b == \"D\":\n        return \"D\"\n    elif a == \"D\" and b == \"H\":\n        return \"D\"\n    else:\n        return \"H\""
    },
    {
        "number": 4582,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    if a == \"H\" and b == \"H\":\n        return \"H\"\n    elif a == \"H\" and b == \"D\":\n        return \"D\"\n    elif a == \"D\" and b == \"H\":\n        return \"D\"\n    else:\n        return \"H\""
    },
    {
        "number": 4582,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = input().split()\n    if a == \"H\" and b == \"H\":\n        return \"H\"\n    elif a == \"D\" and b == \"D\":\n        return \"H\"\n    else:\n        return \"D\"\n\ninput_string = input()\nprint(solution(input_string)) "
    },
    {
        "number": 4582,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n\n    if a == \"H\" and b == \"H\":\n        return \"H\"\n    elif a == \"H\" and b == \"D\":\n        return \"D\"\n    elif a == \"D\" and b == \"H\":\n        return \"H\"\n    else:\n        return \"D\""
    },
    {
        "number": 4582,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    if a == b:\n        return \"H\"\n    else:\n        return \"D\""
    },
    {
        "number": 4582,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n\n    if a == 'H':\n        if b == 'H':\n            return 'H'\n        elif b == 'D':\n            return 'D'\n    elif a == 'D':\n        if b == 'H':\n            return 'D'\n        elif b == 'D':\n            return 'H'\n\n    return ''"
    },
    {
        "number": 4583,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin)\n\n    # Generate all possible formulas\n    formulas = []\n    for a in range(-9, 10):\n        for b in range(-9, 10):\n            for c in range(-9, 10):\n                for d in range(-9, 10):\n                    if a + b + c + d == 7:\n                        formulas.append(f\"{A}{a}{B}{b}{C}{c}{D}{d}\")\n\n    # Check if there is a valid formula\n    for formula in formulas:\n        if formula[0] == A and formula[1] == B and formula[2] == C and formula[3] == D:\n            return formula + \"=7\"\n\n    return \"No solution found\""
    },
    {
        "number": 4583,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin)\n    ops = [\"+\", \"-\"]\n    formulas = []\n\n    for op1 in ops:\n        for op2 in ops:\n            for op3 in ops:\n                formula = f\"{a}{op1}{b}{op2}{c}{op3}{d}\"\n                result = eval(formula)\n                if result == 7:\n                    formulas.append(formula + \"=7\")\n\n    return \"\\n\".join(formulas)\n\ndef"
    },
    {
        "number": 4583,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin)\n    if A + B + C + D == 7:\n        return f\"{A}+{B}+{C}+{D}=7\"\n    elif A - B - C - D == 7:\n        return f\"{A}-{B}-{C}-{D}=7\"\n    elif A + B - C - D == 7:\n        return f\"{A}+{B}-{C}-{D}=7\"\n    elif A + B + C - D == 7:\n        return f\"{A}+{B}+{C}-{D}=7\"\n    elif A - B + C - D == 7:\n        return f\"{A}-{B}+{C}-{D}=7\"\n    elif A - B + C + D == 7:\n        return f\"{A}-{B}+{C}+{D}=7\"\n    elif A + B - C + D == 7:\n        return f\"{A}+{B}-{C}+{D}=7\"\n    elif A + B + C + D == 7:\n        return f\"{A}+{B}+{C}+{D}=7\"\n    elif A - B - C + D == 7:\n        return f\"{A}-{B}-{C}+{D}=7\"\n    elif A - B + C + D == 7:\n        return f\"{A}-{B}+{C}+{D}=7\"\n    elif A + B - C + D == 7:\n        return f\"{A}+{B}-{C}+{D}=7\"\n    elif A - B - C - D == 7:\n        return f\"{A}-{B}-{C}-{D}=7\"\n    elif A + B - C - D == 7:\n        return f\"{A}+{B}-{C}-{D}=7\"\n    elif A + B + C - D == 7:\n        return f\"{A}+{B}+{C}-{D}=7\"\n    elif A - B + C - D == 7:\n        return f\"{A}-{B}+{C}-{D}=7\"\n    elif A - B + C + D == 7:\n        return f\"{A}-{B}+{C}+{D}=7\"\n    else:\n        return \"No solution found.\" "
    },
    {
        "number": 4583,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin)\n    results = []\n    for op1 in [\"-\", \"+\"]:\n        for op2 in [\"-\", \"+\"]:\n            for op3 in [\"-\", \"+\"]:\n                formula = f\"{a}{op1}{b}{op2}{c}{op3}{d}={a+b+c+d}\"\n                if eval(formula) == 7:\n                    results.append(formula)\n    return results[0]\n\nstdin = input()\noutput = solution(stdin)\nprint(output) "
    },
    {
        "number": 4583,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin)\n    formula = f\"{A}+{B}+{C}+{D}=7\"\n    return formula"
    },
    {
        "number": 4583,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin)\n    A = str(A)\n    B = str(B)\n    C = str(C)\n    D = str(D)\n\n    for i in range(2**3):  # There are 8 possible combinations of +/- signs\n        op1 = \"+\" if (i & 1) == 1 else \"-\"\n        op2 = \"+\" if (i & 2) == 2 else \"-\"\n        op3 = \"+\" if (i & 4) == 4 else \"-\"\n        formula = A + op1 + B + op2 + C + op3 + D\n        if eval(formula) == 7:\n            return formula + \"=\" + str(7)"
    },
    {
        "number": 4583,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin)\n    if a == 7:\n        return f\"{a}={a}\"\n    if b == 7:\n        return f\"{a}+{b}={a+b}\"\n    if c == 7:\n        return f\"{a}-{c}={a-c}\"\n    if d == 7:\n        return f\"{b}-{d}={b-d}\"\n\n    a, b, c, d = map(int, stdin)\n    result = []\n    result.append(a)\n    if b + c + d == 7:\n        result.append(\"-\")\n        result.append(str(b + c + d))\n        result.append(\"=\")\n        result.append(str(a))\n        return \"\".join(result)\n    elif b + c == 7 - d:\n        result.append(\"+\")\n        result.append(str(b + c))\n        result.append(\"=\")\n        result.append(str(a + d))\n        return \"\".join(result)\n    elif b + d == 7 - c:\n        result.append(\"-\")\n        result.append(str(b + d))\n        result.append(\"=\")\n        result.append(str(a - c))\n        return \"\".join(result)\n    elif c + d == 7 - b:\n        result.append(\"+\")\n        result.append(str(c + d))\n        result.append(\"=\")\n        result.append(str(a + b))\n        return \"\".join(result)\n    elif c + d == 7 - b:\n        result.append(\"+\")\n        result.append(str(c + d))\n        result.append(\"=\")\n        result.append(str(a + b))\n        return \"\".join(result)\n    elif b + c == 7 - d:\n        result.append(\"-\")\n        result.append(str(b + c))\n        result.append(\"=\")\n        result.append(str(a - d))\n        return \"\".join(result)\n    else:\n        return \"No solution\""
    },
    {
        "number": 4583,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin)\n    if A == 1:\n        if B == 2:\n            return f\"{A}-{B}-{C}-{D}=7\"\n        elif B == 3:\n            return f\"{A}+{B}-{C}-{D}=7\"\n        elif B == 4:\n            return f\"{A}-{B}-{C}+{D}=7\"\n        elif B == 5:\n            return f\"{A}-{B}-{C}-{D}=7\"\n        elif B == 6:\n            return f\"{A}-{B}-{C}-{D}=7\"\n        elif B == 7:\n            return f\"{A}-{B}-{C}-{D}=7\"\n        elif B == 8:\n            return f\"{A}-{B}-{C}-{D}=7\"\n        elif B == 9:\n            return f\"{A}-{B}-{C}-{D}=7\"\n    elif A == 2:\n        if B == 1:\n            return f\"{A}-{B}-{C}-{D}=7\"\n        elif B == 2:\n            return f\"{A}+{B}-{C}-{D}=7\"\n        elif B == 3:\n            return f\"{A}-{B}-{C}-{D}=7\"\n        elif B == 4:\n            return f\"{A}-{B}-{C}-{D}=7\"\n        elif B == 5:\n            return f\"{A}-{B}-{C}-{D}=7\"\n        elif B == 6:\n            return f\"{A}-{B}-{C}-{D}=7\"\n        elif B == 7:\n            return f\"{A}-{B}-{C}-{D}=7\"\n        elif B == 8:\n            return f\"{A}-{B}-{C}-{D}=7\"\n        elif B == 9:\n            return f\"{A}-{B}-{C}-{D}=7\"\n    elif A == 3:\n        if B == 1:\n            return f\"{A}-{B}-{C}-{D}=7\"\n        elif B == 2:\n            return f\"{A}-{B}-{C}-{D}=7\"\n        elif B == 3:\n            return f\"{A}+{B}-{C}-{D}=7\"\n        elif B == 4:\n            return f\"{A}-{B}-{C}-{D}=7\"\n        elif B == 5:\n            return f\"{A}-{B}-{C}-{D}=7\"\n        elif B == 6:\n            return f\"{A}-{B}-{C}-{D}=7\"\n        elif B == 7:\n            return f\"{A}-{B}-{C}-{D}=7\"\n        elif B == 8:\n            return f\"{A}-{B}-{C}-{D}=7\"\n        elif B == 9:\n            return f\"{A}-{B}-{C}-{D}=7\"\n    elif A == 4:\n        if B == 1:\n            return f\"{A}-{B}-{C}-{D}=7\"\n        elif B == 2:\n            return f\"{A}-{B}-{C}-{D}=7\"\n        elif B == 3:\n            return f\"{A}-{B}-{C}-{D}=7\"\n        elif B == 4:\n            return f\"{A}+{B}-{C}-{D}=7\"\n        elif B == 5:\n            return f\"{A}-{B}-{C}-{D}=7\"\n        elif B == 6:\n            return f\"{A}-{B}-{C}-{D}=7\"\n        elif B == 7:\n            return f\"{A}-{B}-{C}-{D}=7\"\n        elif B == 8:\n            return f\"{A}-{B}-{C}-{D}=7\"\n        elif B == 9:\n            return f\"{A}-{B}-{C}-{D}=7\"\n    elif A == 5:\n        if B == 1:\n            return f\"{A}-{B}-{C}-"
    },
    {
        "number": 4583,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin)\n\n    # Check all possible combinations of signs\n    for op1 in [\"+\", \"-\"]:\n        for op2 in [\"+\", \"-\"]:\n            for op3 in [\"+\", \"-\"]:\n                # Calculate the result using the given formula\n                result = eval(f\"{A}{op1}{B}{op2}{C}{op3}{D}\")\n\n                # If the result is 7, print the formula and return\n                if result == 7:\n                    return f\"{A}{op1}{B}{op2}{C}{op3}{D}=7\""
    },
    {
        "number": 4583,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin)\n\n    # Check if the formula holds\n    if A + B - C + D == 7:\n        return f\"{A}+{B}-{C}+{D}=7\"\n    elif A + B - C - D == 7:\n        return f\"{A}+{B}-{C}-{D}=7\"\n    elif A - B + C + D == 7:\n        return f\"{A}-{B}+{C}+{D}=7\"\n    elif A - B + C - D == 7:\n        return f\"{A}-{B}+{C}-{D}=7\"\n    elif A - B - C + D == 7:\n        return f\"{A}-{B}-{C}+{D}=7\"\n    elif A - B - C - D == 7:\n        return f\"{A}-{B}-{C}-{D}=7\"\n    elif A + B + C + D == 7:\n        return f\"{A}+{B}+{C}+{D}=7\"\n    elif A + B + C - D == 7:\n        return f\"{A}+{B}+{C}-{D}=7\"\n    elif A + B - C + D == 7:\n        return f\"{A}+{B}-{C}+{D}=7\"\n    elif A + B - C - D == 7:\n        return f\"{A}+{B}-{C}-{D}=7\"\n    elif A - B + C + D == 7:\n        return f\"{A}-{B}+{C}+{D}=7\"\n    elif A - B + C - D == 7:\n        return f\"{A}-{B}+{C}-{D}=7\"\n    elif A - B - C + D == 7:\n        return f\"{A}-{B}-{C}+{D}=7\"\n    elif A - B - C - D == 7:\n        return f\"{A}-{B}-{C}-{D}=7\""
    },
    {
        "number": 4584,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *bosses = stdin.split()\n    n = int(n)\n    \n    subordinates = [0] * (n+1)\n    \n    for i in range(2, n+1):\n        boss = int(bosses[i-2])\n        subordinates[boss] += 1\n        \n    return '\\n'.join(map(str, subordinates[1:]))"
    },
    {
        "number": 4584,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def get_immediate_subordinates(i, A, N):\n        subordinates = []\n        for j in range(2, N + 1):\n            if A[i - 1] == j:\n                subordinates.append(j)\n        return subordinates\n\n    input_lines = stdin.split('\\n')\n    N = int(input_lines[0])\n    A = list(map(int, input_lines[1].split()))\n\n    result = []\n    for i in range(1, N + 1):\n        subordinates = get_immediate_subordinates(i, A, N)\n        result.append(str(len(subordinates)))\n\n    return '\\n'.join(result)"
    },
    {
        "number": 4584,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    A = list(map(int, lines[1].split()))\n    boss_count = [0] * (N + 1)\n\n    for i in range(2, N + 1):\n        boss_count[A[i]] += 1\n\n    return \"\\n\".join(map(str, boss_count[1:]))"
    },
    {
        "number": 4584,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    subordinates = [0] * (N + 1)\n\n    for i in range(2, N + 1):\n        subordinates[int(lines[i])] += 1\n\n    for i in range(1, N + 1):\n        print(subordinates[i])"
    },
    {
        "number": 4584,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    n = int(input_data[0])\n    A = list(map(int, input_data[1].split()))\n\n    subordinates = [0] * (n + 1)\n    for i in range(2, n + 1):\n        subordinates[A[i - 1]] += 1\n\n    result = [subordinates[i] for i in range(1, n + 1)]\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 4584,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    A = [int(x) for x in lines[1].split(\" \")]\n    subordinates = [0] * (N+1)\n\n    for i in range(2, N+1):\n        subordinates[A[i-1]] += 1\n\n    return \"\\n\".join([str(x) for x in subordinates[1:]])"
    },
    {
        "number": 4584,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    boss_info = stdin.split('\\n')[1].split()\n    subordinate_count = [0] * (n + 1)\n\n    for i in range(2, n + 1):\n        boss = int(boss_info[i - 1])\n        subordinate_count[boss] += 1\n\n    for i in range(1, n + 1):\n        print(subordinate_count[i])\n\n    return \"\""
    },
    {
        "number": 4584,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = map(int, stdin.split())\n    bosses = [0] * (N + 1)\n    for i, boss in enumerate(A):\n        bosses[boss] += 1\n    result = \"\"\n    for i in range(1, N + 1):\n        result += str(bosses[i]) + \"\\n\"\n    return result\n\nstdin = \"5\\n1 1 2 2\"\nprint(solution(stdin)) "
    },
    {
        "number": 4584,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, subordinates = stdin.split(\"\\n\")\n    n = int(n)\n    subordinates = list(map(int, subordinates.split()))\n    subordinates_count = [0] * (n + 1)\n\n    for i in range(2, n + 1):\n        subordinates_count[subordinates[i - 1]] += 1\n\n    return \"\\n\".join(map(str, subordinates_count[1:]))"
    },
    {
        "number": 4584,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, bosses = stdin.split()\n    N = int(N)\n    bosses = list(map(int, bosses))\n    subordinates = [0] * (N + 1)\n    \n    for i in range(2, N + 1):\n        subordinates[bosses[i - 1]] += 1\n    \n    result = []\n    for i in range(1, N + 1):\n        result.append(str(subordinates[i]))\n    \n    return '\\n'.join(result)"
    },
    {
        "number": 4585,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.strip())\n    if x <= 1:\n        return \"0\"\n    return str(int(((x * x) ** 0.5) - 1))\n\ndef"
    },
    {
        "number": 4585,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip())\n    if X == 0:\n        return \"0\"\n    elif X < 0:\n        return \"impossible\"\n    else:\n        i = 1\n        while i * i <= X:\n            if X % i == 0:\n                return str(i + X // i - 1)\n            i += 1\n        return \"impossible\""
    },
    {
        "number": 4585,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    if X == 1:\n        return \"1\"\n    if X % 2 == 0:\n        return str(X // 2)\n    else:\n        return str((X + 1) // 2)"
    },
    {
        "number": 4585,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    time = 1\n    while True:\n        if time * (time + 1) // 2 >= x:\n            break\n        time += 1\n    return str(time)"
    },
    {
        "number": 4585,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    for i in range(1, X + 1):\n        if X % i == 0:\n            return str(i)\n    return \"No solution\" "
    },
    {
        "number": 4585,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    time = 0\n    while time <= x:\n        time += 1\n    return str(time - 1)"
    },
    {
        "number": 4585,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    time = 0\n    while True:\n        if time * (time + 1) >= 2 * X:\n            return str(time - 1)\n        time += 1"
    },
    {
        "number": 4585,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    # Start from time 1\n    time = 1\n    # Maximum possible jumps\n    max_jumps = X\n    \n    # If the kangaroo can reach the nest in the current time\n    while max_jumps >= time:\n        # Check if the kangaroo can reach the nest in the current time\n        if X % time == 0:\n            return str(time)\n        # Update the maximum possible jumps\n        max_jumps = X // time\n        # Increase the time\n        time += 1\n    \n    # If the kangaroo can't reach the nest, return -1\n    return \"-1\""
    },
    {
        "number": 4585,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip())\n    if X == 1:\n        return \"0\"\n    elif X == 2:\n        return \"1\"\n    else:\n        for i in range(3, X+1):\n            if i * (i-1) >= X:\n                return str(i)\n        return \"0\"  # If the kangaroo cannot reach the nest in finite time, return 0. "
    },
    {
        "number": 4585,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    time = 0\n    while time * (time + 1) // 2 < X:\n        time += 1\n    return str(time)"
    },
    {
        "number": 4586,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = str(n)\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] == s[i + 2]:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4586,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    N_str = str(N)\n    for i in range(len(N_str) - 2):\n        if N_str[i] * 3 <= N_str[i:i + 3]:\n            return \"Yes\"\n    return \"No\"\n\nstdin = input(\"Enter a 4-digit integer: \")\nprint(solution(stdin)) "
    },
    {
        "number": 4586,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = str(n)\n    if len(set(s)) == 1:\n        return \"No\"\n    elif s[0] == s[1] == s[2] or s[1] == s[2] == s[3]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4586,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    str_n = str(n)\n    for i in range(len(str_n) - 2):\n        if str_n[i] == str_n[i+1] == str_n[i+2]:\n            return \"Yes\"\n    return \"No\"\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4586,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    digits = [int(d) for d in str(n)]\n    for i in range(len(digits) - 2):\n        if digits[i] == digits[i+1] == digits[i+2]:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4586,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    digits = [int(digit) for digit in str(n)]\n    for i in range(3):\n        if digits[i] == digits[i+1] == digits[i+2]:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4586,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    n_str = str(n)\n    for i in range(len(n_str)-2):\n        if n_str[i] == n_str[i+1] == n_str[i+2]:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4586,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n_str = str(n)\n    for i in range(len(n_str) - 2):\n        if n_str[i] == n_str[i + 1] == n_str[i + 2]:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4586,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Convert input string to integer\n    N = int(stdin)\n    \n    # Check if N is good\n    if (N // 1000) == (N % 10) == (N % 100) // 10 == (N % 1000) // 100:\n        return \"Yes\"\n    else:\n        return \"No\"\n    \n"
    },
    {
        "number": 4586,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    digits = str(n)\n    \n    if len(digits) != 4:\n        return \"No\"\n    \n    if digits[0] == digits[1] == digits[2] or \\\n        digits[1] == digits[2] == digits[3]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4587,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    A = [int(x) for x in stdin.split('\\n')[1].split()]\n    B = [int(x) for x in stdin.split('\\n')[2].split()]\n    C = [int(x) for x in stdin.split('\\n')[3].split()]\n    \n    count = 0\n    for i in range(N):\n        for j in range(N):\n            for k in range(N):\n                if A[i] < B[j] and B[j] < C[k]:\n                    count += 1\n                    continue\n                elif A[i] > B[j] and B[j] > C[k]:\n                    count += 1\n                    continue\n                elif A[i] > C[k] and C[k] > B[j]:\n                    count += 1\n                    continue\n    return str(count)"
    },
    {
        "number": 4587,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    upper_parts = list(map(int, lines[1].split()))\n    middle_parts = list(map(int, lines[2].split()))\n    lower_parts = list(map(int, lines[3].split()))\n\n    def is_valid_altar(upper_part: int, middle_part: int, lower_part: int) -> bool:\n        return middle_part > upper_part and lower_part > middle_part\n\n    def count_altars() -> int:\n        count = 0\n        for i in range(n):\n            for j in range(n):\n                for k in range(n):\n                    if is_valid_altar(upper_parts[i], middle_parts[j], lower_parts[k]):\n                        count += 1\n        return count\n\n    return str(count_altars())"
    },
    {
        "number": 4587,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    parts = stdin.split('\\n')\n    N = int(parts[0])\n    A = list(map(int, parts[1].split()))\n    B = list(map(int, parts[2].split()))\n    C = list(map(int, parts[3].split()))\n\n    def is_valid(upper: int, middle: int, lower: int) -> bool:\n        return upper < middle and middle < lower\n\n    def build_altar(i: int, j: int, k: int) -> bool:\n        return is_valid(A[i], B[j], C[k])\n\n    count = 0\n    for i in range(N):\n        for j in range(N):\n            for k in range(N):\n                if i != j and j != k and i != k and build_altar(i, j, k):\n                    count += 1\n\n    return str(count)\n\ninput_str = '''2\n1 5\n2 4\n3 6'''\nprint(solution(input_str)) "
    },
    {
        "number": 4587,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num_parts = int(stdin.split(\"\\n\")[0])\n    upper_parts = list(map(int, stdin.split(\"\\n\")[1].split()))\n    middle_parts = list(map(int, stdin.split(\"\\n\")[2].split()))\n    lower_parts = list(map(int, stdin.split(\"\\n\")[3].split()))\n\n    def is_valid_part(part_size: int, parts: list) -> bool:\n        for size in parts:\n            if size == part_size:\n                return True\n        return False\n\n    def build_altar(upper_size: int, middle_size: int, lower_size: int) -> bool:\n        if middle_size > upper_size and lower_size > middle_size:\n            return True\n        return False\n\n    valid_upper_parts = [upper_part for upper_part in upper_parts if is_valid_part(upper_part, middle_parts + lower_parts)]\n    valid_middle_parts = [middle_part for middle_part in middle_parts if is_valid_part(middle_part, upper_parts + lower_parts)]\n    valid_lower_parts = [lower_part for lower_part in lower_parts if is_valid_part(lower_part, upper_parts + middle_parts)]\n\n    num_altars = 0\n    for upper_part in valid_upper_parts:\n        for middle_part in valid_middle_parts:\n            for lower_part in valid_lower_parts:\n                if build_altar(upper_part, middle_part, lower_part):\n                    num_altars += 1\n\n    return str(num_altars)"
    },
    {
        "number": 4587,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid_altar(upper, middle, lower):\n        return upper < middle and middle < lower\n\n    def get_altars(upper_parts, middle_parts, lower_parts):\n        altars = set()\n        for upper in upper_parts:\n            for middle in middle_parts:\n                for lower in lower_parts:\n                    if is_valid_altar(upper, middle, lower):\n                        altars.add((upper, middle, lower))\n        return altars\n\n    def parse_input(stdin: str) -> tuple:\n        lines = stdin.splitlines()\n        n = int(lines[0])\n        parts = []\n        for line in lines[1:]:\n            parts.append(list(map(int, line.split())))\n        return n, parts[0], parts[1], parts[2]\n\n    n, upper_parts, middle_parts, lower_parts = parse_input(stdin)\n    altars = get_altars(upper_parts, middle_parts, lower_parts)\n    return len(altars)"
    },
    {
        "number": 4587,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    A, B, C = stdin.split('\\n')[1:4]\n    A = list(map(int, A.split()))\n    B = list(map(int, B.split()))\n    C = list(map(int, C.split()))\n\n    altars = set()\n    for i in range(N):\n        for j in range(N):\n            for k in range(N):\n                if i != j and i != k and j != k:\n                    if B[i] > A[j] and C[k] > B[i]:\n                        altars.add(f\"{i}-{j}-{k}\")\n\n    return len(altars)\n\ninput_string = \"2\\n1 5\\n2 4\\n3 6\"\nprint(solution(input_string))"
    },
    {
        "number": 4587,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N = int(lines[0])\n    A = list(map(int, lines[1].split()))\n    B = list(map(int, lines[2].split()))\n    C = list(map(int, lines[3].split()))\n    \n    def is_valid(i: int, j: int, k: int) -> bool:\n        return A[i] < B[j] and B[j] < C[k]\n    \n    valid_upper = set()\n    valid_middle = set()\n    valid_lower = set()\n    \n    for i in range(N):\n        for j in range(N):\n            for k in range(N):\n                if is_valid(i, j, k):\n                    valid_upper.add(i)\n                    valid_middle.add(j)\n                    valid_lower.add(k)\n    \n    return str(len(valid_upper) * len(valid_middle) * len(valid_lower))"
    },
    {
        "number": 4587,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *parts = stdin.split()\n    n = int(n)\n\n    parts = [list(map(int, parts[i::3])) for i in range(3)]\n\n    def is_valid(a, b, c):\n        return a < b < c\n\n    valid_combinations = []\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                if is_valid(parts[0][i], parts[1][j], parts[2][k]):\n                    valid_combinations.append((i, j, k))\n\n    return str(len(valid_combinations))\n\ndef"
    },
    {
        "number": 4587,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    A = list(map(int, lines[1].split()))\n    B = list(map(int, lines[2].split()))\n    C = list(map(int, lines[3].split()))\n\n    # Ensure that all parts sizes are within the constraints\n    if not (1 <= N <= 10**5 and 1 <= A[0] <= 10**9 and 1 <= B[0] <= 10**9 and 1 <= C[0] <= 10**9):\n        return \"Invalid input\"\n\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                if A[i] < B[j] and B[j] < C[k] and A[i] < C[k]:\n                    count += 1\n\n    return str(count)"
    },
    {
        "number": 4587,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function takes the input as a string and returns the number of different altars that Ringo can build.\n    \"\"\"\n    # Convert the input string into a list of integers\n    input_list = list(map(int, stdin.split('\\n')[1:]))\n    A = input_list[:len(input_list)//3]\n    B = input_list[len(input_list)//3:2*len(input_list)//3]\n    C = input_list[2*len(input_list)//3:]\n    \n    # Initialize the count of different altars\n    count = 0\n    \n    # Loop through all possible combinations of parts\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            for k in range(j+1, len(A)):\n                # Check if the conditions for building an altar are satisfied\n                if A[i] < B[j] and B[j] < C[k]:\n                    count += 1\n                    \n    return str(count)"
    },
    {
        "number": 4588,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split()\n    x_hex = \"0x\" + x\n    y_hex = \"0x\" + y\n\n    if x_hex < y_hex:\n        return \"<\"\n    elif x_hex > y_hex:\n        return \">\"\n    else:\n        return \"=\""
    },
    {
        "number": 4588,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split()\n    x_value = {\"A\": 10, \"B\": 11, \"C\": 12, \"D\": 13, \"E\": 14, \"F\": 15}[x]\n    y_value = {\"A\": 10, \"B\": 11, \"C\": 12, \"D\": 13, \"E\": 14, \"F\": 15}[y]\n\n    if x_value < y_value:\n        return \"<\"\n    elif x_value > y_value:\n        return \">\"\n    else:\n        return \"=\""
    },
    {
        "number": 4588,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = stdin.split()\n    hex_values = {\n        'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15\n    }\n\n    x_value = hex_values[X]\n    y_value = hex_values[Y]\n\n    if x_value < y_value:\n        return '<'\n    elif x_value > y_value:\n        return '>'\n    else:\n        return '='"
    },
    {
        "number": 4588,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = stdin.strip().split()\n    X_value = \"A B C D E F\".split().index(X) * 16\n    Y_value = \"A B C D E F\".split().index(Y) * 16\n\n    if X_value < Y_value:\n        return \"<\"\n    elif X_value > Y_value:\n        return \">\"\n    else:\n        return \"=\""
    },
    {
        "number": 4588,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split()\n    hex_mapping = {\n        \"A\": 10,\n        \"B\": 11,\n        \"C\": 12,\n        \"D\": 13,\n        \"E\": 14,\n        \"F\": 15\n    }\n    x_value = hex_mapping.get(x, int(x))\n    y_value = hex_mapping.get(y, int(y))\n\n    if x_value < y_value:\n        return \"<\"\n    elif x_value > y_value:\n        return \">\"\n    else:\n        return \"=\""
    },
    {
        "number": 4588,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = stdin.split()\n    hex_values = {'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    X_value = hex_values[X]\n    Y_value = hex_values[Y]\n\n    if X_value < Y_value:\n        return '<'\n    elif X_value > Y_value:\n        return '>'\n    else:\n        return '='"
    },
    {
        "number": 4588,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = stdin.split()\n    hex_values = {\"A\": 10, \"B\": 11, \"C\": 12, \"D\": 13, \"E\": 14, \"F\": 15}\n    X_value = hex_values[X]\n    Y_value = hex_values[Y]\n\n    if X_value < Y_value:\n        return \"<\"\n    elif X_value > Y_value:\n        return \">\"\n    else:\n        return \"=\"\n\ninput_string = input()\nprint(solution(input_string)) "
    },
    {
        "number": 4588,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = stdin.split()\n    X_value = int(X, 16)\n    Y_value = int(Y, 16)\n\n    if X_value < Y_value:\n        return \"<\"\n    elif X_value > Y_value:\n        return \">\"\n    else:\n        return \"=\""
    },
    {
        "number": 4588,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    hex_values = {\"A\": 10, \"B\": 11, \"C\": 12, \"D\": 13, \"E\": 14, \"F\": 15}\n    x, y = stdin.strip().split()\n    x_value = hex_values[x] if x in hex_values else int(x)\n    y_value = hex_values[y] if y in hex_values else int(y)\n\n    if x_value < y_value:\n        return \"<\"\n    elif x_value > y_value:\n        return \">\"\n    else:\n        return \"=\""
    },
    {
        "number": 4588,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = stdin.split()\n    hex_values = {\"A\": 10, \"B\": 11, \"C\": 12, \"D\": 13, \"E\": 14, \"F\": 15}\n    \n    X_value = hex_values.get(X, int(X))\n    Y_value = hex_values.get(Y, int(Y))\n    \n    if X_value < Y_value:\n        return \"<\"\n    elif X_value > Y_value:\n        return \">\"\n    else:\n        return \"=\""
    },
    {
        "number": 4589,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split()[0].split())\n    grid = stdin.split('\\n')[1:-1]\n    ans = \"\"\n    \n    for i in range(h):\n        row = \"\"\n        for j in range(w):\n            if grid[i][j] == '.':\n                bombs_adjacent = 0\n                if i > 0 and grid[i-1][j] == '#':\n                    bombs_adjacent += 1\n                if i < h-1 and grid[i+1][j] == '#':\n                    bombs_adjacent += 1\n                if j > 0 and grid[i][j-1] == '#':\n                    bombs_adjacent += 1\n                if j < w-1 and grid[i][j+1] == '#':\n                    bombs_adjacent += 1\n                if i > 0 and j > 0 and grid[i-1][j-1] == '#':\n                    bombs_adjacent += 1\n                if i > 0 and j < w-1 and grid[i-1][j+1] == '#':\n                    bombs_adjacent += 1\n                if i < h-1 and j > 0 and grid[i+1][j-1] == '#':\n                    bombs_adjacent += 1\n                if i < h-1 and j < w-1 and grid[i+1][j+1] == '#':\n                    bombs_adjacent += 1\n                row += str(bombs_adjacent)\n            else:\n                row += grid[i][j]\n        ans += row + '\\n'\n    return ans.strip()"
    },
    {
        "number": 4589,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    H, W = map(int, lines[0].split())\n    S = [line.strip() for line in lines[1:-1]]\n\n    def count_adjacent_bombs(i: int, j: int) -> int:\n        count = 0\n        if i > 0 and S[i - 1][j] == '#':\n            count += 1\n        if i < H - 1 and S[i + 1][j] == '#':\n            count += 1\n        if j > 0 and S[i][j - 1] == '#':\n            count += 1\n        if j < W - 1 and S[i][j + 1] == '#':\n            count += 1\n        if i > 0 and j > 0 and S[i - 1][j - 1] == '#':\n            count += 1\n        if i > 0 and j < W - 1 and S[i - 1][j + 1] == '#':\n            count += 1\n        if i < H - 1 and j > 0 and S[i + 1][j - 1] == '#':\n            count += 1\n        if i < H - 1 and j < W - 1 and S[i + 1][j + 1] == '#':\n            count += 1\n        return str(count)\n\n    result = []\n    for i in range(H):\n        row = ''\n        for j in range(W):\n            if S[i][j] == '.':\n                row += count_adjacent_bombs(i, j)\n            else:\n                row += S[i][j]\n        result.append(row)\n    return '\\n'.join(result)"
    },
    {
        "number": 4589,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    h, w = map(int, lines[0].split())\n    s = lines[1:h+1]\n    \n    def count_bombs(i, j):\n        count = 0\n        for x in range(-1, 2):\n            for y in range(-1, 2):\n                if 0 <= i+x < h and 0 <= j+y < w and s[i+x][j+y] == '#':\n                    count += 1\n        return str(count)\n    \n    result = []\n    for i in range(h):\n        row = \"\"\n        for j in range(w):\n            if s[i][j] == '.':\n                row += count_bombs(i, j)\n            else:\n                row += s[i][j]\n        result.append(row)\n    \n    return \"\\n\".join(result)\n\nstdin = \"3 5\\n.....\\n.#.#.\\n.....\"\nprint(solution(stdin)) "
    },
    {
        "number": 4589,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    h, w = map(int, lines.pop(0).split())\n    grid = [list(line.strip()) for line in lines]\n    \n    def count_bombs(i, j):\n        count = 0\n        if i > 0 and grid[i-1][j] == \"#\":\n            count += 1\n        if i < h-1 and grid[i+1][j] == \"#\":\n            count += 1\n        if j > 0 and grid[i][j-1] == \"#\":\n            count += 1\n        if j < w-1 and grid[i][j+1] == \"#\":\n            count += 1\n        if i > 0 and j > 0 and grid[i-1][j-1] == \"#\":\n            count += 1\n        if i > 0 and j < w-1 and grid[i-1][j+1] == \"#\":\n            count += 1\n        if i < h-1 and j > 0 and grid[i+1][j-1] == \"#\":\n            count += 1\n        if i < h-1 and j < w-1 and grid[i+1][j+1] == \"#\":\n            count += 1\n        return str(count)\n    \n    new_grid = [\"\".join(map(lambda x: count_bombs(i, x), range(w))) for i in range(h)]\n    return \"\\n\".join(new_grid)\n\ndef"
    },
    {
        "number": 4589,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    H, W = map(int, lines[0].split())\n    S = [list(line) for line in lines[1:-1]]\n\n    for i in range(H):\n        for j in range(W):\n            if S[i][j] == \".\":\n                S[i][j] = str(count_bombs(S, i, j, H, W))\n\n    return \"\\n\".join([\"\".join(line) for line in S])\n\ndef"
    },
    {
        "number": 4589,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    H, W = map(int, lines[0].split())\n    S = lines[1:H+1]\n\n    def count_bombs(i, j):\n        count = 0\n        for x in range(max(0, i-1), min(i+2, H)):\n            for y in range(max(0, j-1), min(j+2, W)):\n                if (x, y) != (i, j) and S[x][y] == \"#\":\n                    count += 1\n        return count\n\n    for i in range(H):\n        for j in range(W):\n            if S[i][j] == \".\":\n                S[i] = S[i][:j] + str(count_bombs(i, j)) + S[i][j+1:]\n\n    return \"\\n\".join(S)\n\ninput_str = \"\"\"3 5\n.....\n.#.#.\n.....\"\"\"\nprint(solution(input_str)) "
    },
    {
        "number": 4589,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    h, w = map(int, lines[0].split())\n    s_list = lines[1:-1]\n    result = []\n    \n    for s in s_list:\n        t = \"\"\n        for i in range(w):\n            count = 0\n            if s[i] == \".\":\n                if i > 0 and s[i-1] == \"#\":\n                    count += 1\n                if i < w-1 and s[i+1] == \"#\":\n                    count += 1\n                if i % w > 0 and s[i-1] == \"#\":\n                    count += 1\n                if i % w < w-1 and s[i+1] == \"#\":\n                    count += 1\n                if i // w > 0 and s[(i-w)//w] == \"#\":\n                    count += 1\n                if i // w < h-1 and s[(i+w)//w] == \"#\":\n                    count += 1\n                if i // w > 0 and i % w > 0 and s[(i-w-1)//w] == \"#\":\n                    count += 1\n                if i // w > 0 and i % w < w-1 and s[(i-w+1)//w] == \"#\":\n                    count += 1\n                if i // w < h-1 and i % w > 0 and s[(i+w-1)//w] == \"#\":\n                    count += 1\n                if i // w < h-1 and i % w < w-1 and s[(i+w+1)//w] == \"#\":\n                    count += 1\n            t += str(count)\n        result.append(t)\n    \n    return \"\\n\".join(result)"
    },
    {
        "number": 4589,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split('\\n')\n    H, W = map(int, input_lines[0].split())\n    S = input_lines[1:H+1]\n    T = []\n    for i in range(H):\n        T.append([])\n        for j in range(W):\n            adjacent_bombs = 0\n            for x in range(max(0, i-1), min(i+2, H)):\n                for y in range(max(0, j-1), min(j+2, W)):\n                    if x != i or y != j:\n                        if S[x][y] == '#':\n                            adjacent_bombs += 1\n            T[i].append(str(adjacent_bombs))\n    result = []\n    for t in T:\n        result.append(''.join(t))\n    return '\\n'.join(result)"
    },
    {
        "number": 4589,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split()[0:2])\n    grid = [list(row.strip()) for row in stdin.split('\\n')[1:]]\n    \n    def count_bombs(i, j):\n        count = 0\n        if i > 0:\n            if j > 0 and grid[i-1][j-1] == '#':\n                count += 1\n            if grid[i-1][j] == '#':\n                count += 1\n            if j < W - 1 and grid[i-1][j+1] == '#':\n                count += 1\n        if j > 0 and grid[i][j-1] == '#':\n            count += 1\n        if j < W - 1 and grid[i][j+1] == '#':\n            count += 1\n        if i < H - 1:\n            if j > 0 and grid[i+1][j-1] == '#':\n                count += 1\n            if grid[i+1][j] == '#':\n                count += 1\n            if j < W - 1 and grid[i+1][j+1] == '#':\n                count += 1\n        return count\n\n    result = []\n    for i in range(H):\n        row = ''\n        for j in range(W):\n            if grid[i][j] == '.':\n                row += str(count_bombs(i, j))\n            else:\n                row += '#'\n        result.append(row)\n    \n    return '\\n'.join(result)\n\ninput_str = \"\"\"3 5\n.....\n.#.#.\n.....\"\"\"\nprint(solution(input_str)) # Output: 11211\\n1#2#1\\n11211 "
    },
    {
        "number": 4589,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split()[0].split())\n    strings = stdin.split('\\n')[1:-1]\n\n    def is_bomb(i: int, j: int) -> bool:\n        return i >= 0 and i < H and j >= 0 and j < W and strings[i][j] == '#'\n\n    for i in range(H):\n        for j in range(W):\n            if strings[i][j] == '.':\n                count = 0\n                for k in range(-1, 2):\n                    for l in range(-1, 2):\n                        if not (k == 0 and l == 0) and is_bomb(i + k, j + l):\n                            count += 1\n                strings[i] = strings[i][:j] + str(count) + strings[i][j+1:]\n\n    return '\\n'.join(strings)\n\ninput_str = \"\"\"\n3 5\n.....\n.#.#.\n.....\n\"\"\"\nprint(solution(input_str)) "
    },
    {
        "number": 4590,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = map(int, stdin.split()[0:3])\n    A = list(map(int, stdin.split()[3:3+N]))\n    B = list(map(int, stdin.split()[3+N:3+N+M]))\n\n    desk_A = []\n    desk_B = []\n\n    for i in range(N):\n        desk_A.append((A[i], i+1))\n\n    for i in range(M):\n        desk_B.append((B[i], i+1))\n\n    desk_A.sort()\n    desk_B.sort()\n\n    time_A = desk_A[0][0]\n    time_B = desk_B[0][0]\n\n    total_time = 0\n    count = 0\n\n    while total_time <= K and count < N + M:\n        if time_A < time_B:\n            total_time += time_A\n            time_A = desk_A[1][0]\n            desk_A.pop(0)\n        else:\n            total_time += time_B\n            time_B = desk_B[1][0]\n            desk_B.pop(0)\n        count += 1\n\n    return count"
    },
    {
        "number": 4590,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N, M, K = map(int, lines[0].split())\n    A = list(map(int, lines[1].split()))\n    B = list(map(int, lines[2].split()))\n    \n    A_sum = sum(A)\n    B_sum = sum(B)\n    A_stack = [x for x in A]\n    B_stack = [x for x in B]\n    A_stack.reverse()\n    B_stack.reverse()\n    \n    time = 0\n    count = 0\n    \n    while K - time >= 0 and (A_sum > 0 or B_sum > 0):\n        if A_sum > 0 and (B_sum == 0 or A_stack[-1] <= B_stack[-1]):\n            time += A_stack.pop()\n            A_sum -= 1\n        else:\n            time += B_stack.pop()\n            B_sum -= 1\n        count += 1\n    \n    return str(count)\n\ninput_data = \"3 4 240\\n60 90 120\\n80 150 80 150\"\nprint(solution(input_data)) "
    },
    {
        "number": 4590,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K, A, B = stdin.split()\n    N, M, K = int(N), int(M), int(K)\n    A, B = list(map(int, A)), list(map(int, B))\n    \n    def can_read_books(A: list, B: list, K: int) -> int:\n        total_time = 0\n        for i in range(min(len(A), len(B))):\n            total_time += min(A[i], B[i])\n            if total_time > K:\n                return i\n        return len(A) + len(B)\n    \n    return str(can_read_books(A, B, K))"
    },
    {
        "number": 4590,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K, A, B = stdin.split()\n    N, M, K = int(N), int(M), int(K)\n    A, B = list(map(int, A.split())), list(map(int, B.split()))\n    \n    A.sort(reverse=True)\n    B.sort(reverse=True)\n    \n    total_time = 0\n    read_books = 0\n    \n    for i in range(min(N, M)):\n        total_time += A[i] + B[i]\n        read_books += 2\n        if total_time > K:\n            break\n    \n    if total_time <= K:\n        for i in range(min(N, M), max(N, M)):\n            if i < N:\n                total_time += A[i]\n                read_books += 1\n            else:\n                total_time += B[i]\n                read_books += 1\n            if total_time > K:\n                break\n    \n    return str(read_books)"
    },
    {
        "number": 4590,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = map(int, stdin.split()[:3])\n    A = list(map(int, stdin.split()[3:N+3]))\n    B = list(map(int, stdin.split()[N+3:]))\n\n    desk_A = [0] * N\n    desk_B = [0] * M\n\n    for i in range(N):\n        desk_A[i] = (i+1, A[i])\n\n    for i in range(M):\n        desk_B[i] = (i+1, B[i])\n\n    desk_A.sort(key=lambda x: x[1])\n    desk_B.sort(key=lambda x: x[1])\n\n    total_time = 0\n    books_read = 0\n\n    while total_time < K and (desk_A or desk_B):\n        if desk_A and (not desk_B or desk_A[0][1] <= desk_B[0][1]):\n            total_time += desk_A.pop(0)[1]\n            books_read += 1\n        else:\n            total_time += desk_B.pop(0)[1]\n            books_read += 1\n\n    return books_read\n\ninput_str = \"3 4 240\\n60 90 120\\n80 150 80 150\"\nprint(solution(input_str)) "
    },
    {
        "number": 4590,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K, *data = map(int, stdin.split())\n    A = data[:N]\n    B = data[N:]\n\n    A.sort(reverse=True)\n    B.sort(reverse=True)\n\n    total_time = 0\n    books_read = 0\n    while total_time < K:\n        if A and (B and A[-1] >= B[-1]):\n            total_time += A.pop()\n            books_read += 1\n        elif B:\n            total_time += B.pop()\n            books_read += 1\n        else:\n            break\n\n    return str(books_read)\n"
    },
    {
        "number": 4590,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def read_input(input_str: str) -> Tuple[int, List[int], List[int]]:\n        N, M, K = map(int, input_str.split())\n        A = list(map(int, input_str.split()))[N + 1:]\n        B = list(map(int, input_str.split()))[N + M + 2:]\n        return N, A, B\n\n    def can_read_book(N: int, A: List[int], M: int, B: List[int], K: int) -> int:\n        read_books = 0\n        time_left = K\n\n        for i in range(min(N, M)):\n            if time_left >= A[i] + B[i]:\n                time_left -= A[i] + B[i]\n                read_books += 1\n            else:\n                break\n\n        return read_books\n\n    N, A, B = read_input(stdin)\n    K = int(stdin.split()[-1])\n    result = can_read_book(N, A, M, B, K)\n    return str(result)\n"
    },
    {
        "number": 4590,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = map(int, stdin.split()[:3])\n    A = list(map(int, stdin.split()[3:3+N]))\n    B = list(map(int, stdin.split()[3+N:]))\n    \n    A.sort(reverse=True)\n    B.sort(reverse=True)\n    \n    i = j = 0\n    time = 0\n    count = 0\n    \n    while time < K:\n        if i < N and (j == M or A[i] < B[j]):\n            time += A[i]\n            i += 1\n        else:\n            time += B[j]\n            j += 1\n        count += 1\n        \n    return str(count)"
    },
    {
        "number": 4590,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def can_read_book(desk_a, desk_b, k) -> bool:\n        while desk_a and desk_b:\n            if desk_a[0] + desk_b[0] <= k:\n                k -= desk_a[0] + desk_b[0]\n                desk_a.pop(0)\n                desk_b.pop(0)\n            else:\n                return True\n        return False\n\n    def read_books(desk_a, desk_b, k) -> int:\n        count = 0\n        while desk_a and desk_b:\n            if desk_a[0] + desk_b[0] <= k:\n                k -= desk_a[0] + desk_b[0]\n                count += 1\n                desk_a.pop(0)\n                desk_b.pop(0)\n            else:\n                break\n        return count\n\n    n, m, k = map(int, stdin.split()[0:3])\n    desk_a = list(map(int, stdin.split()[3:3+n]))\n    desk_b = list(map(int, stdin.split()[3+n:]))\n\n    if can_read_book(desk_a, desk_b, k):\n        return str(read_books(desk_a, desk_b, k))\n    else:\n        return \"0\""
    },
    {
        "number": 4590,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, a_books, b_books = stdin.split()\n    n, m, k = int(n), int(m), int(k)\n    a_books = [int(x) for x in a_books.split()]\n    b_books = [int(x) for x in b_books.split()]\n\n    a_books.sort(reverse=True)\n    b_books.sort(reverse=True)\n\n    total_time = 0\n    count = 0\n\n    while total_time < k:\n        if a_books and b_books:\n            if a_books[-1] <= b_books[-1]:\n                total_time += a_books.pop()\n            else:\n                total_time += b_books.pop()\n        elif a_books:\n            total_time += a_books.pop()\n        elif b_books:\n            total_time += b_books.pop()\n\n        count += 1\n\n    return str(count)"
    },
    {
        "number": 4591,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X, Y = map(int, stdin.split())\n\n    AB = min(A, B)\n    A_only = max(0, A - AB)\n    B_only = max(0, B - AB)\n\n    AB_pizzas = (X + Y) // 2\n    A_pizzas = X - AB_pizzas\n    B_pizzas = Y - AB_pizzas\n\n    total_price = AB * AB_pizzas * C + A_only * A_pizzas * A + B_only * B_pizzas * B\n\n    return str(total_price)\n\ndef"
    },
    {
        "number": 4591,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X, Y = map(int, stdin.split())\n    if X == 0 and Y == 0:\n        return \"0\"\n\n    if X * A <= Y * B:\n        return str(X * A)\n\n    min_pizzas = (X * A + Y * B - C) // C\n    min_money = min_pizzas * C + (X - min_pizzas) * A + (Y - min_pizzas) * B\n    return str(min_money)"
    },
    {
        "number": 4591,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X, Y = map(int, stdin.split())\n\n    AB = (A + B) // 2\n\n    A_pizzas = X\n    B_pizzas = Y\n\n    while A_pizzas > 0 and B_pizzas > 0:\n        if AB * 2 < A + B:\n            A_pizzas -= 1\n            B_pizzas -= 2\n        else:\n            A_pizzas -= 2\n            B_pizzas -= 1\n\n    return str(A_pizzas * A + B_pizzas * B)"
    },
    {
        "number": 4591,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X, Y = map(int, stdin.split())\n    \n    AB_pizza_price = (A + B) // 2\n    A_pizza_price = A\n    B_pizza_price = B\n    \n    total_AB_pizzas = min(X, Y) // 2\n    total_A_pizzas = X - total_AB_pizzas\n    total_B_pizzas = Y - total_AB_pizzas\n    \n    total_price = total_AB_pizzas * AB_pizza_price + total_A_pizzas * A_pizza_price + total_B_pizzas * B_pizza_price\n    \n    return str(total_price)"
    },
    {
        "number": 4591,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X, Y = map(int, stdin.split())\n\n    min_money = min(X * A + Y * B, X * A + (Y + 1) * B + 2 * C)\n\n    return str(min_money)"
    },
    {
        "number": 4591,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X, Y = map(int, stdin.split())\n    AB_price = (A + B) // 2\n    XA_price = A\n    YB_price = B\n    min_price = 0\n\n    # calculate minimum price to prepare X A-pizzas and Y B-pizzas\n    if X % 2 == 0:\n        min_price += X * XA_price\n    else:\n        min_price += X * XA_price + AB_price\n\n    if Y % 2 == 0:\n        min_price += Y * YB_price\n    else:\n        min_price += Y * YB_price + AB_price\n\n    return str(min_price)"
    },
    {
        "number": 4591,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X, Y = map(int, stdin.split())\n    AB = (A+B)//2\n    min_price = min(X*A + Y*B, X*AB + Y*AB + X*A + Y*B, X*AB + Y*B + X*A + Y*AB)\n    return str(min_price)"
    },
    {
        "number": 4591,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X, Y = map(int, stdin.split())\n    \n    # Calculate the number of AB-pizzas needed\n    AB = min(X, Y)\n    X -= AB\n    Y -= AB\n    \n    # Calculate the cost of A-pizzas and B-pizzas\n    A_cost = A * AB + X * A\n    B_cost = B * AB + Y * B\n    \n    # Calculate the minimum cost\n    min_cost = A_cost + B_cost\n    \n    return str(min_cost)"
    },
    {
        "number": 4591,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X, Y = map(int, stdin.split())\n    AB = (A + B) // 2\n    if X % 2 == 0 and Y % 2 == 0:\n        return str(min(X * A + Y * B, (X // 2 + Y // 2) * AB * 2))\n    elif X % 2 == 0:\n        return str(min(X * A + Y * B, (X // 2 + Y) * AB + Y * B))\n    elif Y % 2 == 0:\n        return str(min(X * A + Y * B, (X + Y // 2) * AB + X * A))\n    else:\n        return str(X * A + Y * B)"
    },
    {
        "number": 4591,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X, Y = map(int, stdin.split())\n    \n    AB_pizza_price = C\n    A_pizza_price = A\n    B_pizza_price = B\n    \n    total_A_pizza = X\n    total_B_pizza = Y\n    \n    AB_pizza_count = min(total_A_pizza, total_B_pizza) // 2\n    total_A_pizza -= 2 * AB_pizza_count\n    total_B_pizza -= 2 * AB_pizza_count\n    \n    total_money = (AB_pizza_count * AB_pizza_price) + (total_A_pizza * A_pizza_price) + (total_B_pizza * B_pizza_price)\n    \n    return str(total_money)"
    },
    {
        "number": 4592,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    MOD = 10**9 + 7\n\n    # Calculate the factorial of N\n    factorial = 1\n    for i in range(1, N + 1):\n        factorial = (factorial * i) % MOD\n\n    # Calculate the number of divisors of N!\n    divisors = 0\n    for i in range(1, N + 1):\n        if N % i == 0:\n            divisors += 1\n\n    # Return the result modulo 10^9+7\n    return str(divisors % MOD)"
    },
    {
        "number": 4592,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    import math\n\n    N = int(stdin.strip())\n    MOD = 1000000007\n\n    def factorial(n):\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return n * factorial(n - 1) % MOD\n\n    def count_divisors(n):\n        count = 0\n        for i in range(1, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                if n // i == i:\n                    count += 1\n                else:\n                    count += 2\n        return count\n\n    result = count_divisors(factorial(N))\n\n    return str(result)"
    },
    {
        "number": 4592,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def count_divisors(n: int) -> int:\n        count = 0\n        for i in range(1, n + 1):\n            if n % i == 0:\n                count += 1\n        return count\n\n    N = int(stdin)\n    MOD = 10**9 + 7\n    return str(count_divisors(N) * count_divisors(N - 1) % MOD)"
    },
    {
        "number": 4592,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a, b):\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n\n    def mod_inverse(a, m):\n        g = gcd(a, m)\n        if g != 1:\n            return None\n        u1, u2, u3 = 0, 1, a\n        v1, v2, v3 = 1, 0, m\n        while v3 != 0:\n            q = u3 // v3\n            v1, v2, v3, u1, u2, u3 = (u1 - q * v1), (u2 - q * v2), (u3 - q * v3), v1, v2, v3\n        return u1 % m\n\n    N = int(stdin)\n    MOD = 1000000007\n    result = 0\n\n    for i in range(1, N + 1):\n        if gcd(i, N) == 1:\n            result += mod_inverse(i, N)\n            result %= MOD\n\n    return str(result)"
    },
    {
        "number": 4592,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    mod = 10**9 + 7\n    count = 0\n    for i in range(1, N+1):\n        if N % i == 0:\n            count += 1\n    return str(count % mod)"
    },
    {
        "number": 4592,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    MOD = 10**9 + 7\n    count = 0\n    for i in range(1, N+1):\n        if N % i == 0:\n            count += 1\n    return str(count * (N//count)) % MOD"
    },
    {
        "number": 4592,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    MOD = 10**9 + 7\n    result = 0\n    for i in range(1, n+1):\n        result = (result + n//i) % MOD\n    return str(result)"
    },
    {
        "number": 4592,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    MOD = 10**9 + 7\n    count = 0\n    \n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    \n    result = count * count\n    result %= MOD\n    \n    return str(result)"
    },
    {
        "number": 4592,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    MOD = 10**9 + 7\n    N = int(stdin.strip())\n    divisors_count = 0\n    for i in range(1, N+1):\n        if N % i == 0:\n            divisors_count += 1\n    result = (divisors_count * (divisors_count + 1) // 2) % MOD\n    return str(result) "
    },
    {
        "number": 4592,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    MOD = 10**9 + 7\n    divisors = 1\n    for i in range(2, n+1):\n        if n % i == 0:\n            divisors += 1\n    return str(divisors * (n//2 + 1) % MOD)"
    },
    {
        "number": 4593,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    largest_power = None\n    for b in range(2, int(x**0.5)+1):\n        p = 2\n        while b**p <= x:\n            if largest_power is None or b**p > largest_power:\n                largest_power = b**p\n            p += 1\n    return str(largest_power)"
    },
    {
        "number": 4593,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.strip())\n    max_power = 0\n    for b in range(2, int(x**0.5)+1):\n        p = 2\n        while b**p <= x:\n            if b**p > max_power:\n                max_power = b**p\n            p += 1\n    return str(max_power) "
    },
    {
        "number": 4593,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.strip())\n    result = None\n    for b in range(2, int(x**0.5)+1):\n        p = 2\n        while b**p <= x:\n            if not result or result < b**p:\n                result = b**p\n            p += 1\n    return str(result)"
    },
    {
        "number": 4593,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    result = 1\n    while result <= X:\n        i = 2\n        while i * i <= result:\n            if result % i == 0:\n                result = result * i\n            i += 1\n        result += 1\n    return str(result - 1)"
    },
    {
        "number": 4593,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    result = -1\n    for b in range(2, X + 1):\n        p = 2\n        while b ** p <= X:\n            if b ** p > result:\n                result = b ** p\n            p += 1\n    return str(result)"
    },
    {
        "number": 4593,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    for i in range(X, 0, -1):\n        j = 2\n        while j ** i <= X:\n            if j ** i == X:\n                return str(X)\n            j += 1\n    return str(X - 1)\n\ndef"
    },
    {
        "number": 4593,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip())\n    max_power = 0\n    for b in range(2, X+1):\n        p = 2\n        while b**p <= X:\n            if b**p > max_power:\n                max_power = b**p\n            p += 1\n    return str(max_power)\n\ndef"
    },
    {
        "number": 4593,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    result = 1\n    for i in range(2, X+1):\n        if i**(i-1) <= X:\n            result = i**i\n        else:\n            break\n    return str(result)"
    },
    {
        "number": 4593,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    for i in range(X, 0, -1):\n        j = 2\n        while j <= i:\n            if i % j == 0:\n                break\n            j += 1\n        if j == i:\n            return str(i)\n    return \"No perfect power found\""
    },
    {
        "number": 4593,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x == 1:\n        return \"1\"\n    for i in range(2, x):\n        b = i\n        p = 2\n        while b**p <= x:\n            if b**p == x:\n                return str(x)\n            p += 1\n    return str(x - 1)"
    },
    {
        "number": 4594,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *diameters = map(int, stdin.split())\n    diameters.sort()\n    \n    max_layers = 1\n    for i in range(N-1, 0, -1):\n        if diameters[i] > diameters[i-1]:\n            max_layers += 1\n        else:\n            break\n    \n    return str(max_layers)"
    },
    {
        "number": 4594,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, diameters = stdin.split(\"\\n\")\n    N = int(N)\n    diameters = [int(d) for d in diameters.split(\":\")[1].split()]\n    diameters.sort()\n\n    layers = 1\n    for i in range(N - 1, 0, -1):\n        if diameters[i] >= diameters[i - 1]:\n            layers += 1\n        else:\n            break\n\n    return str(layers)"
    },
    {
        "number": 4594,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    diameters = [int(d) for d in lines[1:]]\n\n    # Sort the diameters in descending order\n    diameters.sort(reverse=True)\n\n    # Initialize the number of layers and the index of the last mochi used\n    layers = 1\n    last_used = 0\n\n    # Iterate through the diameters\n    for i in range(1, N):\n        # Check if the current diameter is smaller than the diameter of the mochi directly below it\n        if diameters[i] < diameters[last_used]:\n            # If it is, increase the number of layers and update the index of the last mochi used\n            layers += 1\n            last_used = i\n\n    return str(layers)"
    },
    {
        "number": 4594,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    d_list = [int(x) for x in stdin.split()[1:]]\n    \n    max_layers = 1\n    for i in range(1, len(d_list)):\n        if d_list[i] > d_list[i-1]:\n            max_layers += 1\n    \n    return str(max_layers)"
    },
    {
        "number": 4594,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N, *diameters = map(int, stdin.split())\n\n    # calculate diameter differences\n    diameter_diffs = [abs(diameters[i] - diameters[i+1]) for i in range(len(diameters)-1)]\n\n    # calculate number of layers\n    layers = 0\n    for diff in diameter_diffs:\n        if diff == 0:\n            layers += 1\n        else:\n            break\n\n    return str(layers)"
    },
    {
        "number": 4594,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, diameters = stdin.split('\\n')\n    N = int(N)\n    diameters = [int(d) for d in diameters.split(':')]\n    \n    if N < 1 or N > 100:\n        return \"Invalid input.\"\n    \n    diameters.sort(reverse=True)\n    max_layers = 0\n    \n    for i in range(len(diameters) - 1):\n        if diameters[i] > diameters[i + 1]:\n            max_layers += 1\n        else:\n            break\n    \n    return str(max_layers)"
    },
    {
        "number": 4594,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, *diameters = map(int, stdin.split())\n    diameters = sorted(diameters, reverse=True)\n    layers = 1\n    for i in range(1, N):\n        if diameters[i-1] <= diameters[i]:\n            layers += 1\n    return str(layers)"
    },
    {
        "number": 4594,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    diameters = [int(d) for d in lines[1:]]\n    diameters.sort(reverse=True)\n\n    max_layers = 0\n    for i in range(N):\n        max_layers += 1\n        if diameters[i] < diameters[i + 1]:\n            break\n\n    return str(max_layers)"
    },
    {
        "number": 4594,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, *diameters = [int(x) for x in stdin.split()]\n    diameters.sort(reverse=True)\n    layers = 1\n    current_diameter = diameters[0]\n    for diameter in diameters[1:]:\n        if diameter >= current_diameter:\n            layers += 1\n            current_diameter = diameter\n    return str(layers)"
    },
    {
        "number": 4594,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    diameters = [int(d) for d in lines[1:]]\n\n    layers = []\n    for i in range(len(diameters)):\n        layer = [diameters[j] for j in range(i+1)]\n        if layer == sorted(layer, reverse=True):\n            layers.append(layer)\n\n    return str(max([len(layer) for layer in layers]))"
    },
    {
        "number": 4595,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    dp = [0] * (n + 1)\n    max_length = 0\n    for i in range(1, n + 1):\n        for j in range(i):\n            if s[j] == 'A' and s[i - 1] == 'Z':\n                dp[i] = max(dp[i], dp[j] + i - j)\n                max_length = max(max_length, dp[i])\n    return max_length"
    },
    {
        "number": 4595,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    n = len(s)\n    prefix = ['$'] * n\n    suffix = ['$'] * n\n\n    for i in range(n):\n        j = i - 1\n        k = i + 1\n        while j >= 0 and k < n:\n            if s[j] < s[k]:\n                prefix[i] = max(prefix[i], s[j] + suffix[k])\n                j -= 1\n            else:\n                suffix[i] = max(suffix[i], s[j] + s[k])\n                k += 1\n\n    max_length = 0\n    for i in range(n):\n        max_length = max(max_length, prefix[i] + suffix[i])\n\n    return max_length"
    },
    {
        "number": 4595,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            if s[i] == 'A' and s[j] == 'Z':\n                return str(j - i + 1)\n                \ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4595,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    n = len(s)\n    dp = [0] * n\n\n    for i in range(n):\n        if s[i] == 'A':\n            dp[i] = 1\n\n    for i in range(1, n):\n        for j in range(i):\n            if s[j] == 'A' and s[i] == 'Z':\n                dp[i] = max(dp[i], dp[j] + i - j + 1)\n\n    return max(dp)"
    },
    {
        "number": 4595,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(len(stdin) - 2):\n        substring = stdin[i:i+5]\n        if substring.startswith('A') and substring.endswith('Z'):\n            return len(substring)\n    return None\n\ns = input()\nresult = solution(s)\nprint(result) "
    },
    {
        "number": 4595,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(len(stdin)):\n        for j in range(i + 1, len(stdin) + 1):\n            substring = stdin[i:j]\n            if substring.startswith(\"A\") and substring.endswith(\"Z\"):\n                return len(substring)\n    return \"Not found\""
    },
    {
        "number": 4595,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(len(stdin)):\n        for j in range(i+1, len(stdin)):\n            if stdin[i:j+1].startswith(\"A\") and stdin[i:j+1].endswith(\"Z\"):\n                return len(stdin[i:j+1])\n    return \"Not possible\""
    },
    {
        "number": 4595,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    start_index = stdin.find('A')\n    end_index = stdin.find('Z')\n    max_length = end_index - start_index + 1\n    return max_length\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4595,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    for i in range(n-6):\n        if s[i:i+7] == \"A\" + s[i+1:i+6] + \"Z\":\n            return i+7\n    return -1\n\ns = input()\nprint(solution(s)) "
    },
    {
        "number": 4595,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    start = stdin.find('A')\n    end = stdin.rfind('Z')\n    return end - start + 1"
    },
    {
        "number": 4596,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = map(int, stdin.split())\n    count = 0\n\n    while all(x % 2 == 0 for x in A):\n        A = [x // 2 for x in A]\n        count += 1\n\n    return str(count)"
    },
    {
        "number": 4596,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    blackboard = list(map(int, stdin.split()[1:]))\n    count = 0\n\n    while all(x % 2 == 0 for x in blackboard):\n        new_blackboard = [x // 2 for x in blackboard]\n        blackboard = new_blackboard\n        count += 1\n\n    return str(count)"
    },
    {
        "number": 4596,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = stdin.split()\n    N = int(N)\n    A = [int(a) for a in A]\n    \n    operations = 0\n    while all(a % 2 == 0 for a in A):\n        A = [a // 2 for a in A]\n        operations += 1\n    \n    return str(operations)"
    },
    {
        "number": 4596,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    numbers = list(map(int, stdin.split()[1:]))\n    \n    count = 0\n    while all(num % 2 == 0 for num in numbers):\n        new_numbers = [num // 2 for num in numbers]\n        numbers = new_numbers\n        count += 1\n    \n    return str(count)"
    },
    {
        "number": 4596,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    A = list(map(int, lines[1].split()))\n\n    count = 0\n    while all(num % 2 == 0 for num in A):\n        A = [num // 2 for num in A]\n        count += 1\n\n    return str(count)"
    },
    {
        "number": 4596,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *data = stdin.split()\n    n = int(n)\n    data = [int(x) for x in data]\n    \n    count = 0\n    for i in range(len(data)):\n        if data[i] % 2 != 0:\n            break\n        count += 1\n    \n    return str(count)"
    },
    {
        "number": 4596,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *arr = map(int, stdin.split())\n\n    even_count = sum(1 for i in arr if i % 2 == 0)\n\n    if even_count == 0:\n        return \"0\"\n    elif even_count == n:\n        return str(n)\n    else:\n        return str(even_count)"
    },
    {
        "number": 4596,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = stdin.split()\n    N = int(N)\n    A = list(map(int, A))\n\n    operations = 0\n    while all(a % 2 == 0 for a in A):\n        A = [a // 2 for a in A]\n        operations += 1\n\n    return str(operations)"
    },
    {
        "number": 4596,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_list = list(map(int, stdin.split()))\n    N = input_list[0]\n    blackboard = input_list[1:]\n\n    operation_count = 0\n    while all(num % 2 == 0 for num in blackboard):\n        new_blackboard = [num // 2 for num in blackboard]\n        blackboard = new_blackboard\n        operation_count += 1\n\n    return str(operation_count)"
    },
    {
        "number": 4596,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = list(map(int, stdin.split()))\n    count = 0\n    while all(num % 2 == 0 for num in A):\n        A = [num // 2 for num in A]\n        count += 1\n    return str(count)"
    },
    {
        "number": 4597,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    result = 1\n    for i in range(2, N+1):\n        result = (result * i) % (10**9 + 7)\n    return str(result)"
    },
    {
        "number": 4597,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    result = 1\n\n    for i in range(1, N + 1):\n        result = (result * i) % (10**9 + 7)\n\n    return str(result)"
    },
    {
        "number": 4597,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    result = pow(N, N, 10**9+7)\n    return str(result)"
    },
    {
        "number": 4597,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    mod = 10**9 + 7\n    result = 1\n    for i in range(1, N+1):\n        result *= i\n        result %= mod\n    return str(result)"
    },
    {
        "number": 4597,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    power = 1\n    for i in range(1, N+1):\n        power *= i\n    return str(power % (10**9+7))"
    },
    {
        "number": 4597,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    result = 1\n    for i in range(2, n+1):\n        result = (result * i) % (10**9 + 7)\n    return str(result)\n\ninput_str = input()\noutput_str = solution(input_str)\nprint(output_str) "
    },
    {
        "number": 4597,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    power = 1\n    \n    for i in range(1, N+1):\n        power *= i\n    \n    return str(power % (10**9 + 7))"
    },
    {
        "number": 4597,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    MOD = 10**9 + 7\n    power = 1\n    for i in range(2, N+1):\n        power = (power * i) % MOD\n    return str(power)"
    },
    {
        "number": 4597,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    MOD = 10**9 + 7\n\n    power = 1\n    for i in range(1, N+1):\n        power = (power * i) % MOD\n\n    return str(power)"
    },
    {
        "number": 4597,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    power = 1\n    for i in range(1, n+1):\n        power *= i\n    return str(power % (10**9+7))"
    },
    {
        "number": 4598,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    total_candies = (N * (N + 1)) // 2\n    return str(total_candies)\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4598,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    return str((N * (N + 1)) // 2)  # Calculate the sum of first N natural numbers using the formula (N * (N + 1)) // 2."
    },
    {
        "number": 4598,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    return str(N * (N+1) // 2)\n\ndef"
    },
    {
        "number": 4598,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    total_candies = (n * (n + 1)) // 2\n    return str(total_candies)\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4598,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    candies = 0\n    \n    for i in range(1, N+1):\n        candies += i\n    \n    return str(candies)"
    },
    {
        "number": 4598,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return str((N*(N+1)) // 2)  # Using the formula for sum of arithmetic series"
    },
    {
        "number": 4598,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    candies = sum(range(1, n+1))\n    return str(candies)"
    },
    {
        "number": 4598,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    total_candies = (n * (n + 1)) // 2\n    return str(total_candies)\n\ndef"
    },
    {
        "number": 4598,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    total_candies = 0\n    for i in range(1, N+1):\n        total_candies += i\n    return str(total_candies)"
    },
    {
        "number": 4598,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return str((N*(N+1))//2)"
    },
    {
        "number": 4599,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *cards = stdin.split()\n    N = int(N)\n    cards = [int(card) for card in cards]\n\n    total_cards = len(cards)\n    alice_cards = total_cards // 2\n    bob_cards = total_cards - alice_cards\n\n    alice_score = sum(sorted(cards, reverse=True)[:alice_cards])\n    bob_score = sum(sorted(cards, reverse=True)[alice_cards:])\n\n    return str(alice_score - bob_score)"
    },
    {
        "number": 4599,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    N = int(input_data[0])\n    cards = list(map(int, input_data[1].split()))\n\n    alice_cards = []\n    bob_cards = []\n\n    for i in range(N):\n        if i % 2 == 0:\n            alice_cards.append(cards[i])\n        else:\n            bob_cards.append(cards[i])\n\n    alice_score = sum(alice_cards)\n    bob_score = sum(bob_cards)\n\n    return str(alice_score - bob_score)"
    },
    {
        "number": 4599,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, cards = stdin.split()\n    N = int(N)\n    cards = [int(card) for card in cards.split()]\n\n    cards.sort(reverse=True)\n\n    alice_score = sum(cards[::2])\n    bob_score = sum(cards[1::2])\n\n    return str(alice_score - bob_score)"
    },
    {
        "number": 4599,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, cards = stdin.split()\n    N = int(N)\n    cards = [int(card) for card in cards.split()]\n\n    alice_score = sum(cards[::2])\n    bob_score = sum(cards[1::2])\n\n    return str(alice_score - bob_score)\n"
    },
    {
        "number": 4599,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, cards = stdin.split()\n    N = int(N)\n    cards = list(map(int, cards.split()))\n\n    alice_score = sum(cards[::2])\n    bob_score = sum(cards[1::2])\n\n    return str(alice_score - bob_score)"
    },
    {
        "number": 4599,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    N = int(stdin.readline().strip())\n    card_values = [int(x) for x in stdin.readline().strip().split()]\n\n    # Calculate the optimal strategy for each player\n    optimal_sum_for_alice = sum(card_values)\n    optimal_sum_for_bob = 0\n    for card in card_values:\n        optimal_sum_for_alice -= card\n        optimal_sum_for_bob += card\n\n    # Return the result\n    return str(optimal_sum_for_alice - optimal_sum_for_bob)"
    },
    {
        "number": 4599,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, cards = stdin.split()\n    N = int(N)\n    cards = [int(card) for card in cards.split()]\n    cards.sort(reverse=True)\n    alice_score = sum(cards[::2])\n    bob_score = sum(cards[1::2])\n    return str(alice_score - bob_score)"
    },
    {
        "number": 4599,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, cards = stdin.split()\n    N = int(N)\n    cards = list(map(int, cards.split()))\n\n    if N % 2 == 0:\n        cards.sort(reverse=True)\n    else:\n        cards.sort(reverse=True)\n        cards[0] *= -1\n\n    alice_score = sum(cards[::2])\n    bob_score = sum(cards[1::2])\n\n    return str(abs(alice_score - bob_score))"
    },
    {
        "number": 4599,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, cards = stdin.split(\"\\n\")\n    N = int(N)\n    cards = list(map(int, cards.split(\" \")))\n\n    alice_score = sum(sorted(cards)[::2])\n    bob_score = sum(sorted(cards)[1::2])\n\n    return str(alice_score - bob_score)\n\ndef"
    },
    {
        "number": 4599,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, cards = stdin.split()\n    N = int(N)\n    cards = list(map(int, cards.split()))\n    \n    alice_score = sum(cards[::2])\n    bob_score = sum(cards[1::2])\n    \n    return str(alice_score - bob_score)"
    },
    {
        "number": 4600,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_problems, num_submissions = map(int, stdin.readline().split())\n    submissions = [line.split() for line in stdin.readlines()]\n\n    correct_answers = {}\n    penalties = {}\n\n    for problem, verdict in submissions:\n        problem = int(problem)\n        verdict = verdict.upper()\n\n        if problem not in correct_answers and verdict == \"AC\":\n            correct_answers[problem] = True\n        elif problem in correct_answers and verdict == \"WA\":\n            if problem not in penalties:\n                penalties[problem] = 0\n            penalties[problem] += 1\n\n    return f\"{len(correct_answers)} {sum(penalties.values())}\""
    },
    {
        "number": 4600,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, next(stdin).split())\n    AC_count = 0\n    WA_count = 0\n    problem_submissions = {}\n\n    for _ in range(M):\n        p, S = map(int, next(stdin).split())\n        if S == 0:\n            AC_count += 1\n            if p not in problem_submissions:\n                problem_submissions[p] = 0\n        else:\n            WA_count += 1\n            if p in problem_submissions:\n                problem_submissions[p] += 1\n\n    correct_answers = len([p for p, count in problem_submissions.items() if count == 0])\n    penalties = sum([count for p, count in problem_submissions.items() if count > 0])\n\n    return f\"{correct_answers} {penalties}\""
    },
    {
        "number": 4600,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N, M = map(int, lines[0].split())\n    problem_status = [{} for _ in range(N + 1)]\n\n    for i in range(1, M + 1):\n        problem, verdict = lines[i].split()\n        problem = int(problem)\n\n        if verdict == \"AC\":\n            if problem not in problem_status[problem]:\n                problem_status[problem][\"AC\"] = i\n            else:\n                problem_status[problem][\"AC\"] = min(problem_status[problem][\"AC\"], i)\n        else:\n            if problem not in problem_status[problem]:\n                problem_status[problem][\"WA\"] = i\n            else:\n                problem_status[problem][\"WA\"] = min(problem_status[problem][\"WA\"], i)\n\n    correct_answers = 0\n    penalties = 0\n\n    for problem in range(1, N + 1):\n        if \"AC\" in problem_status[problem]:\n            correct_answers += 1\n            penalties += problem_status[problem][\"AC\"] - problem_status[problem][\"WA\"] - 1\n\n    return f\"{correct_answers} {penalties}\""
    },
    {
        "number": 4600,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def get_input() -> Tuple[int, int]:\n        n, m = map(int, input().split())\n        return n, m\n\n    def get_submissions(n: int) -> List[List[str]]:\n        submissions = []\n        for _ in range(n):\n            p, s = map(str, input().split())\n            submissions.append([p, s])\n        return submissions\n\n    def process_submissions(n: int, m: int, submissions: List[List[str]]) -> Tuple[int, int]:\n        correct_answers = {}\n        for submission in submissions:\n            problem, verdict = submission\n            problem = int(problem)\n            if problem not in correct_answers:\n                correct_answers[problem] = {\"correct\": 0, \"wa\": 0}\n            if verdict == \"AC\":\n                correct_answers[problem][\"correct\"] += 1\n            elif verdict == \"WA\":\n                correct_answers[problem][\"wa\"] += 1\n\n        correct_answers_count = 0\n        penalties_count = 0\n        for problem in correct_answers:\n            if correct_answers[problem][\"correct\"] > 0:\n                correct_answers_count += 1\n                penalties_count += correct_answers[problem][\"wa\"]\n\n        return correct_answers_count, penalties_count\n\n    n, m = get_input()\n    submissions = get_submissions(m)\n    correct_answers_count, penalties_count = process_submissions(n, m, submissions)\n\n    return f\"{correct_answers_count} {penalties_count}\""
    },
    {
        "number": 4600,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    lines = stdin.split('\\n')\n    N, M = map(int, lines[0].split())\n    submissions = []\n    for line in lines[1:]:\n        p, S = line.split()\n        submissions.append((int(p), S))\n\n    # process submissions\n    correct_answers = set()\n    penalties = 0\n    for p, S in submissions:\n        if S == 'AC':\n            if p not in correct_answers:\n                correct_answers.add(p)\n            penalties += sum(1 for p_i, S_i in submissions if p_i == p and S_i == 'WA')\n\n    # print output\n    return f\"{len(correct_answers)} {penalties}\""
    },
    {
        "number": 4600,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n_problems, n_submissions = map(int, stdin.split()[0:2])\n    submissions = [tuple(map(int, line.split())) for line in stdin.split()[2:]]\n\n    correct_answers = set()\n    penalties = 0\n\n    for problem, verdict in submissions:\n        if verdict == 0:  # WA\n            if problem not in correct_answers:\n                penalties += 1\n        else:  # AC\n            if problem not in correct_answers:\n                correct_answers.add(problem)\n\n    return f\"{len(correct_answers)} {penalties}\"\n"
    },
    {
        "number": 4600,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    submissions = [list(map(str, input().split())) for _ in range(M)]\n    correct_answers = 0\n    penalties = 0\n    \n    problem_status = {i: [] for i in range(1, N+1)}\n    \n    for submission in submissions:\n        problem_num = int(submission[0])\n        verdict = submission[1]\n        \n        if verdict == \"AC\":\n            if not problem_status[problem_num]:\n                correct_answers += 1\n            problem_status[problem_num].append(\"AC\")\n        else:\n            problem_status[problem_num].append(\"WA\")\n    \n    for wa_list in problem_status.values():\n        if len(wa_list) > 0:\n            penalties += len(wa_list) - 1\n    \n    return f\"{correct_answers} {penalties}\""
    },
    {
        "number": 4600,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def process_submission(problem: int, verdict: str, correct_answers: dict, penalties: dict) -> None:\n        if problem not in correct_answers:\n            correct_answers[problem] = verdict == \"AC\"\n        else:\n            if verdict == \"AC\":\n                correct_answers[problem] = True\n            elif verdict == \"WA\" and not correct_answers[problem]:\n                penalties[problem] = penalties.get(problem, 0) + 1\n    \n    lines = stdin.split(\"\\n\")\n    n, m = map(int, lines[0].split())\n    for i in range(1, m+1):\n        problem, verdict = lines[i].split()\n        correct_answers = {}\n        penalties = {}\n        process_submission(int(problem), verdict, correct_answers, penalties)\n    \n    correct_answers_count = sum(1 for x in correct_answers.values() if x)\n    penalties_count = sum(penalties.values())\n    \n    return str(correct_answers_count), str(penalties_count)"
    },
    {
        "number": 4600,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[0:2])\n    submissions = [list(map(int, line.split())) for line in stdin.split(\"\\n\")[2:-1]]\n\n    correct_answers = 0\n    penalties = 0\n    problem_status = [0] * (N + 1)\n\n    for submission in submissions:\n        problem_id, verdict = submission\n        problem_status[problem_id] += 1\n\n        if verdict == 1:  # AC\n            if problem_status[problem_id] == 1:\n                correct_answers += 1\n            else:\n                penalties += problem_status[problem_id] - 1\n\n    return f\"{correct_answers} {penalties}\"\n"
    },
    {
        "number": 4600,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n_problems, n_submissions = map(int, stdin.split()[0:2])\n    submissions = [line.split() for line in stdin.split('\\n')[1:n_submissions+1]]\n\n    correct_answers = set()\n    penalties = 0\n\n    for submission in submissions:\n        problem, verdict = int(submission[0]), submission[1]\n        if verdict == \"AC\":\n            if problem not in correct_answers:\n                correct_answers.add(problem)\n                penalties += problem_wa_counts[problem]\n            else:\n                penalties += 1\n\n        elif verdict == \"WA\" and problem not in correct_answers:\n            if problem in problem_wa_counts:\n                problem_wa_counts[problem] += 1\n            else:\n                problem_wa_counts[problem] = 1\n\n    return str(len(correct_answers)) + \" \" + str(penalties)\n\nn_problems, n_submissions = map(int, input().split())\nproblem_wa_counts = {}\n\ninput_data = \"\"\nfor _ in range(n_submissions):\n    input_data += input() + \"\\n\"\n\noutput = solution(input_data)\nprint(output) "
    },
    {
        "number": 4601,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[0:2])\n    H = list(map(int, stdin.split()[2:]))\n\n    # Initially, Fennec needs to do Attack N times\n    min_attacks = N\n\n    # Sort the monster healths in descending order\n    H_sorted = sorted(H, reverse=True)\n\n    # Use Special Move at most K times\n    for i in range(K):\n        # If the second largest monster is already dead, stop using Special Move\n        if i == 0 and H_sorted[1] <= 0:\n            break\n        # If the current largest monster is already dead, stop using Special Move\n        if H_sorted[0] <= 0:\n            break\n        # Use Special Move on the largest monster\n        H_sorted[0] = 0\n        # Decrease the number of Attacks needed\n        min_attacks -= 1\n\n    return str(min_attacks)"
    },
    {
        "number": 4601,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K, *healths = map(int, stdin.split())\n    min_attacks = float('inf')\n\n    for i in range(K + 1):\n        current_attacks = 0\n        for health in healths:\n            current_attacks += health // 2\n            health = health % 2\n        if i == K:\n            min_attacks = min(min_attacks, current_attacks)\n        else:\n            healths = [0] * N\n\n    return str(min_attacks)"
    },
    {
        "number": 4601,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[0:2])\n    H = list(map(int, stdin.split()[2:]))\n\n    # Sort the monsters in ascending order of their health\n    H.sort()\n\n    # Initialize the number of attacks needed and the current index\n    attacks_needed = 0\n    current_index = 0\n\n    # Iterate through the monsters, using Special Move when possible\n    for monster_health in H:\n        if K > 0:\n            attacks_needed += monster_health - 1\n            K -= 1\n        else:\n            attacks_needed += monster_health - H[current_index]\n            current_index += 1\n\n    # If there are any remaining monsters, use Attack to finish them off\n    if current_index < N:\n        attacks_needed += N - current_index\n\n    return str(attacks_needed)"
    },
    {
        "number": 4601,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[0:2])\n    H = list(map(int, stdin.split()[2:]))\n\n    # Calculate the minimum number of attacks needed to win\n    attack_count = 0\n    for h in H:\n        attack_count += (h - 1) // 2\n\n    # Calculate the number of monsters that can be killed by a special move\n    special_monsters = 0\n    for h in H:\n        if h > 1:\n            special_monsters += 1\n\n    # Calculate the maximum number of special moves that can be used\n    max_special_moves = min(special_monsters, K)\n\n    # Calculate the number of special moves needed to win\n    special_move_count = min(max_special_moves, attack_count)\n\n    # Calculate the minimum number of attacks needed to win\n    attack_count -= special_move_count\n\n    return str(attack_count)"
    },
    {
        "number": 4601,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N, K = map(int, lines[0].split())\n    H = list(map(int, lines[1].split()))\n    H.sort(reverse=True)\n    special_move_count = 0\n    attack_count = 0\n\n    for h in H:\n        if h == 0:\n            continue\n        if special_move_count < K:\n            special_move_count += 1\n            h = 0\n        else:\n            attack_count += 1\n            h -= 1\n\n    return str(attack_count)"
    },
    {
        "number": 4601,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[:2])\n    healths = list(map(int, stdin.split()[2:]))\n\n    min_attacks = sum(healths)\n    max_health = max(healths)\n\n    if K >= N:\n        return str(min_attacks)\n\n    if K > 0:\n        min_attacks -= max_health - K\n\n    return str(min_attacks)"
    },
    {
        "number": 4601,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.splitlines()\n    n, k = map(int, input_lines[0].split())\n    monster_healths = list(map(int, input_lines[1].split()))\n\n    total_monster_health = sum(monster_healths)\n    total_special_move_cost = n\n\n    if k == 0:\n        return str(total_monster_health)\n\n    min_attack_cost = total_monster_health\n\n    for i in range(total_special_move_cost, -1, -1):\n        special_move_count = i\n        attack_count = total_monster_health - i * n\n\n        if attack_count <= 0:\n            continue\n\n        min_attack_cost = min(min_attack_cost, attack_count)\n\n    return str(min_attack_cost)"
    },
    {
        "number": 4601,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, K = map(int, stdin.split()[0:2])\n    H = list(map(int, stdin.split()[2:]))\n\n    # Sort monsters by health\n    H.sort()\n\n    # Calculate minimum Attack count\n    attack_count = 0\n    for i in range(N):\n        if H[i] <= K:\n            K -= H[i]\n            attack_count += 1\n        else:\n            break\n\n    # Calculate remaining monsters\n    remaining = N - attack_count\n\n    # Calculate Special Move count\n    special_move_count = 0\n    for i in range(remaining):\n        if H[i] > K:\n            special_move_count += 1\n\n    # Calculate total Attack count\n    total_attack_count = attack_count + special_move_count\n\n    return str(total_attack_count)"
    },
    {
        "number": 4601,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[0:2])\n    H = list(map(int, stdin.split()[2:]))\n\n    attack_count = 0\n    special_count = 0\n\n    while len(H) > 0 and special_count < K:\n        max_health = max(H)\n        if max_health <= 1:\n            H = [h for h in H if h > 0]\n        else:\n            for i in range(len(H)):\n                if H[i] == max_health:\n                    H[i] -= 1\n                    attack_count += 1\n                    break\n\n    return attack_count\n"
    },
    {
        "number": 4601,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[0:2])\n    H = list(map(int, stdin.split()[2:]))\n    \n    H_sum = sum(H)\n    H_min = min(H)\n    \n    if H_sum == 0:\n        return \"0\"\n    \n    if H_min <= K:\n        return str(H_sum - K)\n    \n    H_sum -= K\n    H_min -= K\n    \n    if H_min == 0:\n        return str(H_sum)\n    \n    H_sum -= (H_min - 1)\n    \n    return str(H_sum)\n\ndef"
    },
    {
        "number": 4602,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, x = map(int, stdin.split())\n\n    if x[0] == 0:\n        return 0\n\n    distances = [0] * N\n    for i in range(1, N):\n        distances[i] = abs(x[i] - x[i - 1])\n\n    if x[0] == K:\n        return sum(distances)\n\n    if x[0] < K:\n        distance = min(abs(x[0] - x[i]) for i in range(N))\n        return distance + sum(distances)\n\n    return min(abs(x[i] - x[0]) for i in range(N)) + sum(distances)"
    },
    {
        "number": 4602,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = [int(x) for x in stdin.split()]\n    balls = [(x_i, i) for i, x_i in enumerate(x, 1)]\n    min_distance = float('inf')\n\n    for i in range(n):\n        type_a_robot = (0, i)\n        type_b_robot = (k, i)\n\n        for ball in balls:\n            distance = abs(ball[0] - type_a_robot[0]) + abs(ball[1] - type_a_robot[1])\n            min_distance = min(min_distance, distance)\n\n            distance = abs(ball[0] - type_b_robot[0]) + abs(ball[1] - type_b_robot[1])\n            min_distance = min(min_distance, distance)\n\n    return str(min_distance)"
    },
    {
        "number": 4602,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K, x = map(int, stdin.split())\n    distances = [0] * N\n    for i in range(N):\n        distances[i] = abs(x[i] - i)\n    return min(sum(distances), sum(distances) + 2 * N * K)"
    },
    {
        "number": 4602,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N, K = map(int, lines[0].split())\n    x_coords = list(map(int, lines[1].split()))\n\n    min_distance = 0\n    for i in range(N):\n        min_distance += min(abs(x_coords[i] - 0), abs(x_coords[i] - K))\n\n    return str(min_distance)\n\ndef"
    },
    {
        "number": 4602,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    K = int(lines[1])\n    x = [int(x) for x in lines[2].split()]\n    \n    min_distance = 0\n    for i in range(N):\n        min_distance += min(abs(x[i] - 0), abs(x[i] - K))\n    \n    return str(min_distance)"
    },
    {
        "number": 4602,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split()[0:2])\n    x_coordinates = list(map(int, stdin.split()[2:]))\n\n    min_distance = float('inf')\n\n    for i in range(N):\n        a_robot_position = (0, i)\n        b_robot_position = (K, i)\n\n        distance_a = abs(x_coordinates[i] - a_robot_position[0])\n        distance_b = abs(x_coordinates[i] - b_robot_position[0])\n\n        total_distance = distance_a + distance_b\n\n        if total_distance < min_distance:\n            min_distance = total_distance\n\n    return str(min_distance)"
    },
    {
        "number": 4602,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K, *balls = map(int, stdin.split())\n\n    balls_on_lines = [0] * N\n    for x in balls:\n        balls_on_lines[x - 1] += 1\n\n    min_distance = float('inf')\n    for i, ball_count in enumerate(balls_on_lines):\n        if ball_count > 0:\n            min_distance = min(min_distance, i + 1 + N - i)\n\n    return str(min_distance * 2 * N)"
    },
    {
        "number": 4602,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N, K = map(int, lines[0].split())\n    x_coords = list(map(int, lines[1].split()))\n\n    min_distance = 0\n    for i in range(N):\n        min_distance += min(abs(0 - x_coords[i]), abs(K - x_coords[i]))\n\n    return str(min_distance)"
    },
    {
        "number": 4602,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K, x_coords = stdin.split()\n    N, K = int(N), int(K)\n    x_coords = list(map(int, x_coords))\n\n    min_dist = float('inf')\n\n    for i in range(N):\n        dist_A = abs(x_coords[i] - 0) + abs(i - 0)\n        dist_B = abs(x_coords[i] - K) + abs(i - K)\n        min_dist = min(min_dist, dist_A, dist_B)\n\n    return str(min_dist)"
    },
    {
        "number": 4602,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Split input into lines\n    lines = stdin.split('\\n')\n    # Get N and K\n    N, K = map(int, lines[0].split())\n    # Get coordinates of balls\n    x = list(map(int, lines[1].split()))\n    \n    # Initialize variables\n    min_distance = float('inf')\n    total_distance = 0\n    \n    # Loop through all balls\n    for i in range(N):\n        # Calculate distance from robot to ball\n        distance_to_ball = abs(x[i] - i)\n        # Calculate total distance covered by robots\n        total_distance += distance_to_ball * 2\n        # Update minimum distance\n        min_distance = min(min_distance, distance_to_ball)\n    \n    # Calculate final distance covered\n    total_distance += min_distance * N\n    \n    # Return the final distance covered by robots\n    return str(total_distance)"
    },
    {
        "number": 4603,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    min_fare = min(A, B) + min(C, D)\n    return str(min_fare)"
    },
    {
        "number": 4603,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    train_unlimited = min(a, b)\n    bus_ordinary = c\n    return str(train_unlimited + bus_ordinary)"
    },
    {
        "number": 4603,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    \n    # Calculate the minimum total fare\n    total_fare = min(A, B) + min(C, D)\n    \n    # Print the result\n    return str(total_fare)\n\ndef"
    },
    {
        "number": 4603,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    return str(min(A, B) + min(C, D))\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4603,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    return str(min(A, B) + min(C, D))"
    },
    {
        "number": 4603,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    train_fare = min(A, B)\n    bus_fare = min(C, D)\n    return str(train_fare + bus_fare)"
    },
    {
        "number": 4603,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    \n    # Calculate the minimum total fare\n    min_fare = min(A + C, B + D)\n    \n    return str(min_fare)"
    },
    {
        "number": 4603,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    total_fare = min(A + C, B + D)\n    return str(total_fare)"
    },
    {
        "number": 4603,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from Standard Input\n    A, B, C, D = map(int, stdin.split())\n\n    # Find the minimum total fare\n    min_total_fare = min(A, B) + min(C, D)\n\n    # Return the result\n    return str(min_total_fare)"
    },
    {
        "number": 4603,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    train_ordinary, train_unlimited, bus_ordinary, bus_unlimited = map(int, stdin.split())\n    train_fare = min(train_ordinary, train_unlimited)\n    bus_fare = min(bus_ordinary, bus_unlimited)\n    total_fare = train_fare + bus_fare\n    return str(total_fare)"
    },
    {
        "number": 4604,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = stdin.split()\n    n = int(n)\n    a = [int(i) for i in a]\n\n    mod = 10**9 + 7\n    count = 0\n\n    for i in range(1, n - 1):\n        if a[i] == a[i + 1]:\n            count = 0\n            break\n\n    if count == 0:\n        return \"0\"\n\n    if a[0] == a[-1]:\n        count *= 2\n\n    return str(count % mod)"
    },
    {
        "number": 4604,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *diffs = stdin.split()\n    n = int(n)\n    diffs = [int(diff) for diff in diffs]\n    modulo = 10**9 + 7\n\n    # Check if the reports are incorrect\n    for i in range(1, n):\n        if diffs[i] != diffs[i-1] + i:\n            return \"0\"\n\n    # Compute the number of possible orders\n    num_orders = 1\n    for i in range(n):\n        left_diff = diffs[i]\n        if i == 0:\n            right_diff = diffs[1]\n            right_count = right_diff - left_diff + 1\n        else:\n            right_count = diffs[i+1] - left_diff + 1\n        num_orders = (num_orders * right_count) % modulo\n\n    return str(num_orders)"
    },
    {
        "number": 4604,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    A = [int(a) for a in lines[1].split()]\n\n    def dfs(remain: set[int], path: list[int], cache: dict[tuple[frozenset[int], int], int]) -> int:\n        if not remain:\n            return 1\n        key = (frozenset(remain), len(path))\n        if key in cache:\n            return cache[key]\n\n        total = 0\n        for i in remain:\n            total += dfs(remain - {i}, path + [i], cache)\n\n        cache[key] = total\n        return total\n\n    if N == 1:\n        return \"1\"\n\n    remain = set(range(1, N + 1))\n    cache = {}\n    ans = dfs(remain, [], cache)\n    return str(ans % (10**9 + 7))"
    },
    {
        "number": 4604,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    lines = stdin.strip().split('\\n')\n    N = int(lines[0])\n    A = list(map(int, lines[1].split()))\n\n    # Calculate possible orders\n    M = 10**9 + 7\n    count = [1] * N\n    for i in range(N):\n        for j in range(i-A[i], i+A[i]+1):\n            if 0 <= j < N:\n                count[i] = (count[i] * count[j]) % M\n\n    # Check if there is a consistent order\n    consistent = True\n    for i in range(N-1):\n        if count[i] != count[i+1]:\n            consistent = False\n            break\n\n    if consistent:\n        return str(count[0])\n    else:\n        return str(0)"
    },
    {
        "number": 4604,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    if not n or len(a) != n:\n        return \"0\"\n    \n    # Check if there are any duplicates in the absolute differences\n    a_set = set(a)\n    if len(a_set) != n:\n        return \"0\"\n    \n    # Create a dictionary to map the absolute differences to the number of occurrences\n    a_dict = {}\n    for x in a:\n        a_dict[x] = a_dict.get(x, 0) + 1\n    \n    # Check if there is any difference that appears more than n//2 times\n    for x in a_dict:\n        if a_dict[x] > n//2:\n            return \"0\"\n    \n    # Calculate the number of possible orders\n    modulo = 10**9 + 7\n    result = 1\n    for x in a_dict:\n        result *= pow(2*x+1, a_dict[x], modulo)\n        result %= modulo\n    \n    return str(result)"
    },
    {
        "number": 4604,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    a_list = [int(a) for a in lines[1].split(\" \")]\n\n    def is_consistent(a_list: List[int]) -> bool:\n        N = len(a_list)\n        diff_list = [0] * N\n        for i in range(N):\n            diff_list[i] = sum(a_list[:i]) - sum(a_list[i + 1:])\n        return all(diff_list[i] == a_list[i] for i in range(N))\n\n    if is_consistent(a_list):\n        total_permutations = 1\n        for a in a_list:\n            total_permutations = (total_permutations * (n - a)) % (10**9 + 7)\n        return str(total_permutations)\n    else:\n        return \"0\""
    },
    {
        "number": 4604,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a = [0] + a + [0]\n    mod = 10**9 + 7\n    def count_ways(i, j):\n        if a[i] != a[j]:\n            return 0\n        if a[i] == a[i+1]:\n            return count_ways(i+1, j-1)\n        left = count_ways(i+1, j)\n        right = count_ways(i, j-1)\n        return (left + right) % mod\n    return str(count_ways(1, n))"
    },
    {
        "number": 4604,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = map(int, stdin.split())\n\n    # Create a list to store the possible orderings\n    possible_orders = []\n\n    # Iterate through the list of differences A_i\n    for i in range(N):\n        # Check if the difference is 0\n        if A[i] == 0:\n            # If so, create a new list of length N with i as the only element\n            order = [0] * N\n            order[i] = i + 1\n            possible_orders.append(order)\n        else:\n            # If not, create a list of possible orders for the i-th person\n            orders = []\n            for j in range(N):\n                # Check if the difference between the number of people standing to the left and to the right of person j is equal to A_i\n                if (j < i) == (A[i] == j - i) or (j > i) == (A[i] == j - i):\n                    # If so, create a new list with the possible order of the first i people\n                    order = [0] * N\n                    for k in range(i):\n                        order[k] = k + 1\n                    # Set the j-th person to their position in the new list\n                    order[i] = j + 1\n                    # Append the new list to the list of possible orders\n                    orders.append(order)\n            possible_orders += orders\n\n    # Calculate the number of possible orders modulo 10^9+7\n    result = 1\n    for order in possible_orders:\n        result = (result * len(order)) % (10**9 + 7)\n\n    return str(result)"
    },
    {
        "number": 4604,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    differences = [int(x) for x in lines[1].split()]\n\n    possible_orders = 1\n    for i in range(1, n):\n        if differences[i] == differences[i - 1]:\n            possible_orders *= 2\n        else:\n            possible_orders *= 1 + (differences[i] - differences[i - 1])\n\n    return str(possible_orders % (10**9 + 7))"
    },
    {
        "number": 4604,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, A = stdin.split()\n    N = int(N)\n    A = list(map(int, A.split()))\n    A.sort()\n\n    if len(A) != N:\n        return \"0\"\n\n    ans = 1\n    for i in range(N-1):\n        if A[i] == A[i+1]:\n            ans = 0\n            break\n        else:\n            ans *= A[i+1] - A[i]\n\n    return str(ans % (10**9 + 7))"
    },
    {
        "number": 4605,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n\n    def digit_sum(num: int) -> int:\n        return sum(map(int, str(num)))\n\n    total_sum = 0\n    for i in range(1, N + 1):\n        if A <= digit_sum(i) <= B:\n            total_sum += i\n\n    return str(total_sum)\n"
    },
    {
        "number": 4605,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    total_sum = 0\n\n    for i in range(1, N + 1):\n        digit_sum = sum(int(digit) for digit in str(i))\n        if A <= digit_sum <= B:\n            total_sum += i\n\n    return str(total_sum)"
    },
    {
        "number": 4605,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = list(map(int, stdin.split()))\n\n    def sum_of_digits(n: int) -> int:\n        return sum(map(int, str(n)))\n\n    result = 0\n    for i in range(1, N + 1):\n        if A <= sum_of_digits(i) <= B:\n            result += i\n\n    return str(result)\n"
    },
    {
        "number": 4605,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = list(map(int, stdin.split()))\n    \n    def sum_of_digits(num: int) -> int:\n        return sum(map(int, str(num)))\n    \n    total_sum = 0\n    for i in range(1, N+1):\n        if A <= sum_of_digits(i) <= B:\n            total_sum += i\n    \n    return str(total_sum)"
    },
    {
        "number": 4605,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    total = 0\n\n    for i in range(1, N + 1):\n        digit_sum = sum(int(digit) for digit in str(i))\n        if A <= digit_sum <= B:\n            total += i\n\n    return str(total)"
    },
    {
        "number": 4605,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    total = 0\n    for i in range(1, n+1):\n        if a <= sum(int(digit) for digit in str(i)) <= b:\n            total += i\n    return str(total)"
    },
    {
        "number": 4605,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    total_sum = 0\n\n    for i in range(1, N+1):\n        digit_sum = sum(int(digit) for digit in str(i))\n        if A <= digit_sum <= B:\n            total_sum += i\n\n    return str(total_sum)"
    },
    {
        "number": 4605,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Convert input into list of integers\n    N, A, B = map(int, stdin.split())\n\n    # Initialize the sum to 0\n    sum = 0\n\n    # Iterate through all numbers between 1 and N (inclusive)\n    for num in range(1, N+1):\n        # Calculate the sum of digits of the number\n        digit_sum = sum(int(digit) for digit in str(num))\n\n        # Check if the sum of digits falls between A and B (inclusive)\n        if A <= digit_sum <= B:\n            # Add the number to the sum\n            sum += num\n\n    # Return the final sum\n    return str(sum)"
    },
    {
        "number": 4605,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    total_sum = 0\n\n    for i in range(1, N+1):\n        digit_sum = sum(int(digit) for digit in str(i))\n        if A <= digit_sum <= B:\n            total_sum += i\n\n    return str(total_sum)"
    },
    {
        "number": 4605,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    total_sum = 0\n    for i in range(1, N+1):\n        digits_sum = sum(int(digit) for digit in str(i))\n        if A <= digits_sum <= B:\n            total_sum += i\n    return str(total_sum)"
    },
    {
        "number": 4606,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return f\"ABC{N}\""
    },
    {
        "number": 4606,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return f\"ABC{n}\""
    },
    {
        "number": 4606,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"ABC\" + stdin.strip()"
    },
    {
        "number": 4606,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return f\"ABC{stdin.strip()}\""
    },
    {
        "number": 4606,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return f\"ABC{n}\"\n\nn = input()\nprint(solution(n)) "
    },
    {
        "number": 4606,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return f\"ABC{n}\""
    },
    {
        "number": 4606,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    return \"ABC\" + str(N)"
    },
    {
        "number": 4606,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    return f\"ABC{N}\""
    },
    {
        "number": 4606,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    return f\"ABC{n}\"\n\nstdin = input()\nprint(solution(stdin)) "
    },
    {
        "number": 4606,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"ABC\" + stdin.rstrip(\"\\n\")"
    },
    {
        "number": 4607,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    takahashi_count = 0\n\n    for day in range(1, b + 1):\n        if day == a:\n            takahashi_count += 1\n\n    return str(takahashi_count)"
    },
    {
        "number": 4607,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    days = 0\n    for i in range(1, b+1):\n        if i == a:\n            days += 1\n    return str(days)"
    },
    {
        "number": 4607,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    count = 0\n    for day in range(1, b + 1):\n        if a == day:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4607,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    start_day = date(2018, 1, 1)\n    end_day = date(2018, a, b)\n    takahashi_days = 0\n\n    for i in range((end_day - start_day).days + 1):\n        day = start_day + timedelta(days=i)\n        if day.month == day.day:\n            takahashi_days += 1\n\n    return str(takahashi_days)"
    },
    {
        "number": 4607,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    takahashi_days = 0\n\n    for day in range(1, b + 1):\n        if day == a:\n            takahashi_days += 1\n\n    return str(takahashi_days)"
    },
    {
        "number": 4607,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n\n    takahashi_count = 0\n    for day in range(1, b + 1):\n        if (a % 10 == day % 10) and (a // 10 == day // 10):\n            takahashi_count += 1\n\n    return str(takahashi_count)"
    },
    {
        "number": 4607,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    count = 0\n    for i in range(1, b+1):\n        if i == a:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4607,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    takahashi_count = 0\n\n    for day in range(1, b + 1):\n        if day == a:\n            takahashi_count += 1\n\n    return str(takahashi_count)"
    },
    {
        "number": 4607,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n\n    start_date = datetime.date(2018, 1, 1)\n    end_date = datetime.date(2018, a, b)\n\n    delta = end_date - start_date\n\n    takahashi_days = 0\n\n    for i in range(delta.days + 1):\n        day = start_date + datetime.timedelta(days=i)\n\n        if day.month == day.day:\n            takahashi_days += 1\n\n    return str(takahashi_days)"
    },
    {
        "number": 4607,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    total_days = 0\n    for day in range(1, b+1):\n        if a == day:\n            total_days += 1\n    return str(total_days)\n\ninput_str = input()\nprint(solution(input_str)) "
    },
    {
        "number": 4608,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    a = list(map(int, lines[1:]))\n\n    if a[1] == 2:\n        return -1\n\n    if a[2] == 2:\n        return 1\n\n    count = 1\n    for i in range(2, N):\n        if a[i] == 2:\n            return count\n        if a[i] == i + 1:\n            count += 1\n\n    return -1"
    },
    {
        "number": 4608,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    buttons = list(map(int, stdin.split('\\n')[1:]))\n    n = len(buttons)\n    \n    def next_button(button):\n        return buttons[button-1] if button <= n else None\n    \n    lighten_up = 1\n    count = 0\n    \n    while lighten_up != 2:\n        lighten_up = next_button(lighten_up)\n        count += 1\n        if lighten_up is None:\n            return -1\n    \n    return count"
    },
    {
        "number": 4608,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    a = [int(x) for x in lines[1:]]\n    button_2_pressed = False\n    count = 0\n\n    for i in range(1, N+1):\n        if not button_2_pressed:\n            if i == a[i-1]:\n                count += 1\n                if i == 2:\n                    button_2_pressed = True\n            else:\n                count += 1\n                if i == 2:\n                    return -1\n\n    return str(count)"
    },
    {
        "number": 4608,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    a_list = [int(x) for x in stdin.split('\\n')[1:N+1]]\n\n    if N == 1:\n        return \"1\"\n\n    visited = [False] * (N + 1)\n    visited[1] = True\n    queue = [1]\n\n    while queue:\n        button = queue.pop(0)\n        if button == 2:\n            return str(visited.index(True))\n        for next_button in a_list:\n            if not visited[next_button]:\n                visited[next_button] = True\n                queue.append(next_button)\n\n    return \"-1\""
    },
    {
        "number": 4608,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    # Check if it is possible to lighten up Button 2\n    visited = [False] * (N + 1)\n    visited[1] = True\n\n    def dfs(i: int) -> bool:\n        if i == 2:\n            return True\n        if visited[i]:\n            return False\n        visited[i] = True\n        return dfs(a[i - 1])\n\n    if dfs(1):\n        count = 0\n        for i in range(1, N + 1):\n            if not visited[i]:\n                count += 1\n        return str(count)\n    else:\n        return \"-1\""
    },
    {
        "number": 4608,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    lighten_up_buttons = [int(line) for line in lines[1:]]\n\n    def find_next_button(button_num: int) -> int:\n        for next_button in lighten_up_buttons:\n            if next_button == button_num:\n                return next_button\n        return -1\n\n    visited = set()\n    count = 0\n    button_num = 1\n    while button_num not in visited and button_num != 2:\n        visited.add(button_num)\n        button_num = find_next_button(button_num)\n        if button_num == -1:\n            break\n        count += 1\n\n    if button_num == 2:\n        return str(count)\n    else:\n        return \"-1\"\n"
    },
    {
        "number": 4608,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    lighten_up_buttons = [int(line) for line in lines[1:]]\n    \n    def find_cycle(start: int) -> int:\n        visited = set()\n        current = start\n        while current not in visited:\n            visited.add(current)\n            current = lighten_up_buttons[current - 1]\n        return current\n    \n    cycle = find_cycle(1)\n    if cycle == 2:\n        return \"2\"\n    else:\n        return \"-1\""
    },
    {
        "number": 4608,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N = int(stdin.split('\\n')[0])\n    a = [int(x) for x in stdin.split('\\n')[1:N+1]]\n    \n    # initialize variables\n    visited = [False] * (N+1)\n    queue = []\n    queue.append(1)\n    visited[1] = True\n    \n    # breadth-first search\n    while len(queue) > 0:\n        node = queue.pop(0)\n        for i in range(1, N+1):\n            if not visited[i] and a[node-1] == i:\n                visited[i] = True\n                queue.append(i)\n                if i == 2:\n                    return str(len(queue))\n    \n    return \"-1\""
    },
    {
        "number": 4608,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, *a = stdin.split()\n    N = int(N)\n    \n    button_pressed = [False] * (N + 1)\n    button_pressed[1] = True\n    next_button = 1\n    \n    for i in range(1, N + 1):\n        button_pressed[int(a[i - 1])] = True\n        \n    for i in range(1, N + 1):\n        if not button_pressed[i]:\n            continue\n        while not button_pressed[next_button]:\n            next_button += 1\n        if next_button == 2:\n            return \"2\"\n    \n    return \"-1\"\n\ninput_str = input()\nN, *a = input_str.split()\nN = int(N)\nresult = solution(input_str)\nprint(result) "
    },
    {
        "number": 4608,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    buttons = list(map(int, stdin.split(\"\\n\")[1:]))\n    visited = [False] * len(buttons)\n    visited[0] = True\n    queue = [(0, 0)]\n    count = 0\n    while queue:\n        button, depth = queue.pop(0)\n        if button == 2:\n            return str(depth)\n        for i in range(len(buttons)):\n            if not visited[i] and buttons[i] == button:\n                visited[i] = True\n                queue.append((buttons[i], depth + 1))\n    return \"-1\""
    },
    {
        "number": 4609,
        "checkpoint": "13B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    N = int(lines[0])\n    nums = [int(x) for x in lines[1:]]\n\n    written_nums = set()\n    for num in nums:\n        if num in written_nums:\n            written_nums.remove(num)\n        else:\n            written_nums.add(num)\n\n    return str(len(written_nums))"
    },
    {
        "number": 4609,
        "checkpoint": "13B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input by newline and convert to integers\n    A = list(map(int, stdin.split(\"\\n\")[1:]))\n    N = len(A)\n    \n    # Use a set to keep track of unique numbers on the sheet\n    numbers = set()\n    \n    # Loop through the numbers announced by Joisino\n    for i in range(N):\n        if A[i] in numbers:\n            numbers.remove(A[i])\n        else:\n            numbers.add(A[i])\n    \n    # Return the number of unique numbers on the sheet\n    return str(len(numbers))"
    },
    {
        "number": 4609,
        "checkpoint": "13B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin[0])\n    numbers = set(map(int, stdin[1:n+1]))\n    \n    for num in numbers:\n        if num in numbers:\n            numbers.remove(num)\n        else:\n            numbers.add(num)\n    \n    return str(len(numbers))"
    },
    {
        "number": 4609,
        "checkpoint": "13B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    numbers_written = set()\n\n    for number in input_list[1:]:\n        if number in numbers_written:\n            numbers_written.remove(number)\n        else:\n            numbers_written.add(number)\n\n    return str(len(numbers_written))"
    },
    {
        "number": 4609,
        "checkpoint": "13B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    N = int(input_list[0])\n    A_list = [int(x) for x in input_list[1:]]\n    num_dict = {}\n    \n    for num in A_list:\n        if num in num_dict:\n            del num_dict[num]\n        else:\n            num_dict[num] = True\n    \n    return str(len(num_dict))"
    },
    {
        "number": 4609,
        "checkpoint": "13B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    numbers = [int(line) for line in lines[1:]]\n\n    # initialize set to store unique numbers\n    written_numbers = set()\n\n    # iterate through the numbers\n    for num in numbers:\n        # if the number is in the set, remove it\n        if num in written_numbers:\n            written_numbers.remove(num)\n        # otherwise, add it to the set\n        else:\n            written_numbers.add(num)\n\n    # return the number of unique numbers written on the sheet\n    return str(len(written_numbers))"
    },
    {
        "number": 4609,
        "checkpoint": "13B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    A = set(map(int, stdin.split('\\n')[1:]))\n\n    for _ in range(N):\n        if A:\n            A.pop()\n\n    return str(len(A))"
    },
    {
        "number": 4609,
        "checkpoint": "13B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    numbers = set(map(int, stdin.split(\"\\n\")[1:]))\n    \n    for number in numbers:\n        if number in numbers:\n            numbers.remove(number)\n        else:\n            numbers.add(number)\n    \n    return str(len(numbers))"
    },
    {
        "number": 4609,
        "checkpoint": "13B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    numbers = set()\n    \n    for i in range(1, n+1):\n        number = int(lines[i])\n        if number in numbers:\n            numbers.remove(number)\n        else:\n            numbers.add(number)\n    \n    return str(len(numbers))"
    },
    {
        "number": 4609,
        "checkpoint": "13B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    nums = stdin.split('\\n')[1:]\n    seen = set()\n    for num in nums:\n        if num in seen:\n            seen.remove(num)\n        else:\n            seen.add(num)\n    return str(len(seen))"
    }
]